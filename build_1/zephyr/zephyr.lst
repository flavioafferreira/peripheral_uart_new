
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	08 42 03 20 fd 13 01 00 f7 83 02 00 d1 13 01 00     .B. ............
    8010:	d1 13 01 00 d1 13 01 00 d1 13 01 00 d1 13 01 00     ................
	...
    802c:	79 0c 01 00 d1 13 01 00 00 00 00 00 19 0c 01 00     y...............
    803c:	d1 13 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8050:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8060:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8070:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8080:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8090:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    80a0:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    80b0:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    80c0:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    80d0:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    80e0:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    80f0:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8100:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8110:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8120:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8130:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8140:	01 0d 01 00 01 0d 01 00 01 0d 01 00 01 0d 01 00     ................
    8150:	01 0d 01 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f915 	bl	90b0 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f908 	bl	90b0 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f8f7 	bl	90b0 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8e9 	bl	90b0 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8ce 	bl	90b0 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__udivmoddi4>:
    90b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90b4:	4686      	mov	lr, r0
    90b6:	468c      	mov	ip, r1
    90b8:	4608      	mov	r0, r1
    90ba:	9e08      	ldr	r6, [sp, #32]
    90bc:	4615      	mov	r5, r2
    90be:	4674      	mov	r4, lr
    90c0:	4619      	mov	r1, r3
    90c2:	2b00      	cmp	r3, #0
    90c4:	f040 80c1 	bne.w	924a <__udivmoddi4+0x19a>
    90c8:	4285      	cmp	r5, r0
    90ca:	fab2 f282 	clz	r2, r2
    90ce:	d945      	bls.n	915c <__udivmoddi4+0xac>
    90d0:	b14a      	cbz	r2, 90e6 <__udivmoddi4+0x36>
    90d2:	f1c2 0320 	rsb	r3, r2, #32
    90d6:	fa00 fc02 	lsl.w	ip, r0, r2
    90da:	4095      	lsls	r5, r2
    90dc:	4094      	lsls	r4, r2
    90de:	fa2e f303 	lsr.w	r3, lr, r3
    90e2:	ea43 0c0c 	orr.w	ip, r3, ip
    90e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90ea:	b2a8      	uxth	r0, r5
    90ec:	0c23      	lsrs	r3, r4, #16
    90ee:	fbbc f8fe 	udiv	r8, ip, lr
    90f2:	fb0e cc18 	mls	ip, lr, r8, ip
    90f6:	fb08 f900 	mul.w	r9, r8, r0
    90fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90fe:	4599      	cmp	r9, r3
    9100:	d928      	bls.n	9154 <__udivmoddi4+0xa4>
    9102:	18eb      	adds	r3, r5, r3
    9104:	f108 37ff 	add.w	r7, r8, #4294967295
    9108:	d204      	bcs.n	9114 <__udivmoddi4+0x64>
    910a:	4599      	cmp	r9, r3
    910c:	d902      	bls.n	9114 <__udivmoddi4+0x64>
    910e:	f1a8 0702 	sub.w	r7, r8, #2
    9112:	442b      	add	r3, r5
    9114:	eba3 0309 	sub.w	r3, r3, r9
    9118:	b2a4      	uxth	r4, r4
    911a:	fbb3 fcfe 	udiv	ip, r3, lr
    911e:	fb0e 331c 	mls	r3, lr, ip, r3
    9122:	fb0c f000 	mul.w	r0, ip, r0
    9126:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    912a:	42a0      	cmp	r0, r4
    912c:	d914      	bls.n	9158 <__udivmoddi4+0xa8>
    912e:	192c      	adds	r4, r5, r4
    9130:	f10c 33ff 	add.w	r3, ip, #4294967295
    9134:	d204      	bcs.n	9140 <__udivmoddi4+0x90>
    9136:	42a0      	cmp	r0, r4
    9138:	d902      	bls.n	9140 <__udivmoddi4+0x90>
    913a:	f1ac 0302 	sub.w	r3, ip, #2
    913e:	442c      	add	r4, r5
    9140:	1a24      	subs	r4, r4, r0
    9142:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9146:	b11e      	cbz	r6, 9150 <__udivmoddi4+0xa0>
    9148:	40d4      	lsrs	r4, r2
    914a:	2300      	movs	r3, #0
    914c:	6034      	str	r4, [r6, #0]
    914e:	6073      	str	r3, [r6, #4]
    9150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9154:	4647      	mov	r7, r8
    9156:	e7dd      	b.n	9114 <__udivmoddi4+0x64>
    9158:	4663      	mov	r3, ip
    915a:	e7f1      	b.n	9140 <__udivmoddi4+0x90>
    915c:	bb92      	cbnz	r2, 91c4 <__udivmoddi4+0x114>
    915e:	1b43      	subs	r3, r0, r5
    9160:	2101      	movs	r1, #1
    9162:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9166:	b2af      	uxth	r7, r5
    9168:	0c20      	lsrs	r0, r4, #16
    916a:	fbb3 fcfe 	udiv	ip, r3, lr
    916e:	fb0e 331c 	mls	r3, lr, ip, r3
    9172:	fb0c f807 	mul.w	r8, ip, r7
    9176:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    917a:	4598      	cmp	r8, r3
    917c:	d961      	bls.n	9242 <__udivmoddi4+0x192>
    917e:	18eb      	adds	r3, r5, r3
    9180:	f10c 30ff 	add.w	r0, ip, #4294967295
    9184:	d204      	bcs.n	9190 <__udivmoddi4+0xe0>
    9186:	4598      	cmp	r8, r3
    9188:	d902      	bls.n	9190 <__udivmoddi4+0xe0>
    918a:	f1ac 0002 	sub.w	r0, ip, #2
    918e:	442b      	add	r3, r5
    9190:	eba3 0308 	sub.w	r3, r3, r8
    9194:	b2a4      	uxth	r4, r4
    9196:	fbb3 fcfe 	udiv	ip, r3, lr
    919a:	fb0e 331c 	mls	r3, lr, ip, r3
    919e:	fb0c f707 	mul.w	r7, ip, r7
    91a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91a6:	42a7      	cmp	r7, r4
    91a8:	d94d      	bls.n	9246 <__udivmoddi4+0x196>
    91aa:	192c      	adds	r4, r5, r4
    91ac:	f10c 33ff 	add.w	r3, ip, #4294967295
    91b0:	d204      	bcs.n	91bc <__udivmoddi4+0x10c>
    91b2:	42a7      	cmp	r7, r4
    91b4:	d902      	bls.n	91bc <__udivmoddi4+0x10c>
    91b6:	f1ac 0302 	sub.w	r3, ip, #2
    91ba:	442c      	add	r4, r5
    91bc:	1be4      	subs	r4, r4, r7
    91be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c2:	e7c0      	b.n	9146 <__udivmoddi4+0x96>
    91c4:	f1c2 0320 	rsb	r3, r2, #32
    91c8:	4095      	lsls	r5, r2
    91ca:	4094      	lsls	r4, r2
    91cc:	fa20 f103 	lsr.w	r1, r0, r3
    91d0:	fa2e f303 	lsr.w	r3, lr, r3
    91d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91d8:	4090      	lsls	r0, r2
    91da:	b2af      	uxth	r7, r5
    91dc:	4303      	orrs	r3, r0
    91de:	fbb1 fcfe 	udiv	ip, r1, lr
    91e2:	fb0e 101c 	mls	r0, lr, ip, r1
    91e6:	0c19      	lsrs	r1, r3, #16
    91e8:	fb0c f807 	mul.w	r8, ip, r7
    91ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91f0:	4588      	cmp	r8, r1
    91f2:	d922      	bls.n	923a <__udivmoddi4+0x18a>
    91f4:	1869      	adds	r1, r5, r1
    91f6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91fa:	d204      	bcs.n	9206 <__udivmoddi4+0x156>
    91fc:	4588      	cmp	r8, r1
    91fe:	d902      	bls.n	9206 <__udivmoddi4+0x156>
    9200:	f1ac 0002 	sub.w	r0, ip, #2
    9204:	4429      	add	r1, r5
    9206:	eba1 0108 	sub.w	r1, r1, r8
    920a:	b29b      	uxth	r3, r3
    920c:	fbb1 fcfe 	udiv	ip, r1, lr
    9210:	fb0e 111c 	mls	r1, lr, ip, r1
    9214:	fb0c f707 	mul.w	r7, ip, r7
    9218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    921c:	429f      	cmp	r7, r3
    921e:	d90e      	bls.n	923e <__udivmoddi4+0x18e>
    9220:	18eb      	adds	r3, r5, r3
    9222:	f10c 31ff 	add.w	r1, ip, #4294967295
    9226:	d204      	bcs.n	9232 <__udivmoddi4+0x182>
    9228:	429f      	cmp	r7, r3
    922a:	d902      	bls.n	9232 <__udivmoddi4+0x182>
    922c:	f1ac 0102 	sub.w	r1, ip, #2
    9230:	442b      	add	r3, r5
    9232:	1bdb      	subs	r3, r3, r7
    9234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9238:	e793      	b.n	9162 <__udivmoddi4+0xb2>
    923a:	4660      	mov	r0, ip
    923c:	e7e3      	b.n	9206 <__udivmoddi4+0x156>
    923e:	4661      	mov	r1, ip
    9240:	e7f7      	b.n	9232 <__udivmoddi4+0x182>
    9242:	4660      	mov	r0, ip
    9244:	e7a4      	b.n	9190 <__udivmoddi4+0xe0>
    9246:	4663      	mov	r3, ip
    9248:	e7b8      	b.n	91bc <__udivmoddi4+0x10c>
    924a:	4283      	cmp	r3, r0
    924c:	d906      	bls.n	925c <__udivmoddi4+0x1ac>
    924e:	b916      	cbnz	r6, 9256 <__udivmoddi4+0x1a6>
    9250:	2100      	movs	r1, #0
    9252:	4608      	mov	r0, r1
    9254:	e77c      	b.n	9150 <__udivmoddi4+0xa0>
    9256:	e9c6 e000 	strd	lr, r0, [r6]
    925a:	e7f9      	b.n	9250 <__udivmoddi4+0x1a0>
    925c:	fab3 f783 	clz	r7, r3
    9260:	b98f      	cbnz	r7, 9286 <__udivmoddi4+0x1d6>
    9262:	4283      	cmp	r3, r0
    9264:	d301      	bcc.n	926a <__udivmoddi4+0x1ba>
    9266:	4572      	cmp	r2, lr
    9268:	d808      	bhi.n	927c <__udivmoddi4+0x1cc>
    926a:	ebbe 0402 	subs.w	r4, lr, r2
    926e:	eb60 0303 	sbc.w	r3, r0, r3
    9272:	2001      	movs	r0, #1
    9274:	469c      	mov	ip, r3
    9276:	b91e      	cbnz	r6, 9280 <__udivmoddi4+0x1d0>
    9278:	2100      	movs	r1, #0
    927a:	e769      	b.n	9150 <__udivmoddi4+0xa0>
    927c:	4638      	mov	r0, r7
    927e:	e7fa      	b.n	9276 <__udivmoddi4+0x1c6>
    9280:	e9c6 4c00 	strd	r4, ip, [r6]
    9284:	e7f8      	b.n	9278 <__udivmoddi4+0x1c8>
    9286:	f1c7 0c20 	rsb	ip, r7, #32
    928a:	40bb      	lsls	r3, r7
    928c:	fa0e f507 	lsl.w	r5, lr, r7
    9290:	fa22 f40c 	lsr.w	r4, r2, ip
    9294:	fa2e f10c 	lsr.w	r1, lr, ip
    9298:	40ba      	lsls	r2, r7
    929a:	431c      	orrs	r4, r3
    929c:	fa20 f30c 	lsr.w	r3, r0, ip
    92a0:	40b8      	lsls	r0, r7
    92a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92a6:	4301      	orrs	r1, r0
    92a8:	fa1f fe84 	uxth.w	lr, r4
    92ac:	fbb3 f8f9 	udiv	r8, r3, r9
    92b0:	fb09 3018 	mls	r0, r9, r8, r3
    92b4:	0c0b      	lsrs	r3, r1, #16
    92b6:	fb08 fa0e 	mul.w	sl, r8, lr
    92ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92be:	459a      	cmp	sl, r3
    92c0:	d940      	bls.n	9344 <__udivmoddi4+0x294>
    92c2:	18e3      	adds	r3, r4, r3
    92c4:	f108 30ff 	add.w	r0, r8, #4294967295
    92c8:	d204      	bcs.n	92d4 <__udivmoddi4+0x224>
    92ca:	459a      	cmp	sl, r3
    92cc:	d902      	bls.n	92d4 <__udivmoddi4+0x224>
    92ce:	f1a8 0002 	sub.w	r0, r8, #2
    92d2:	4423      	add	r3, r4
    92d4:	eba3 030a 	sub.w	r3, r3, sl
    92d8:	b289      	uxth	r1, r1
    92da:	fbb3 f8f9 	udiv	r8, r3, r9
    92de:	fb09 3318 	mls	r3, r9, r8, r3
    92e2:	fb08 fe0e 	mul.w	lr, r8, lr
    92e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92ea:	458e      	cmp	lr, r1
    92ec:	d92c      	bls.n	9348 <__udivmoddi4+0x298>
    92ee:	1861      	adds	r1, r4, r1
    92f0:	f108 33ff 	add.w	r3, r8, #4294967295
    92f4:	d204      	bcs.n	9300 <__udivmoddi4+0x250>
    92f6:	458e      	cmp	lr, r1
    92f8:	d902      	bls.n	9300 <__udivmoddi4+0x250>
    92fa:	f1a8 0302 	sub.w	r3, r8, #2
    92fe:	4421      	add	r1, r4
    9300:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9304:	eba1 010e 	sub.w	r1, r1, lr
    9308:	fba0 9802 	umull	r9, r8, r0, r2
    930c:	4541      	cmp	r1, r8
    930e:	46ce      	mov	lr, r9
    9310:	4643      	mov	r3, r8
    9312:	d302      	bcc.n	931a <__udivmoddi4+0x26a>
    9314:	d106      	bne.n	9324 <__udivmoddi4+0x274>
    9316:	454d      	cmp	r5, r9
    9318:	d204      	bcs.n	9324 <__udivmoddi4+0x274>
    931a:	3801      	subs	r0, #1
    931c:	ebb9 0e02 	subs.w	lr, r9, r2
    9320:	eb68 0304 	sbc.w	r3, r8, r4
    9324:	2e00      	cmp	r6, #0
    9326:	d0a7      	beq.n	9278 <__udivmoddi4+0x1c8>
    9328:	ebb5 020e 	subs.w	r2, r5, lr
    932c:	eb61 0103 	sbc.w	r1, r1, r3
    9330:	fa01 fc0c 	lsl.w	ip, r1, ip
    9334:	fa22 f307 	lsr.w	r3, r2, r7
    9338:	40f9      	lsrs	r1, r7
    933a:	ea4c 0303 	orr.w	r3, ip, r3
    933e:	e9c6 3100 	strd	r3, r1, [r6]
    9342:	e799      	b.n	9278 <__udivmoddi4+0x1c8>
    9344:	4640      	mov	r0, r8
    9346:	e7c5      	b.n	92d4 <__udivmoddi4+0x224>
    9348:	4643      	mov	r3, r8
    934a:	e7d9      	b.n	9300 <__udivmoddi4+0x250>

0000934c <strcmp>:
    934c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9350:	f811 3b01 	ldrb.w	r3, [r1], #1
    9354:	2a01      	cmp	r2, #1
    9356:	bf28      	it	cs
    9358:	429a      	cmpcs	r2, r3
    935a:	d0f7      	beq.n	934c <strcmp>
    935c:	1ad0      	subs	r0, r2, r3
    935e:	4770      	bx	lr

00009360 <strlen>:
    9360:	4603      	mov	r3, r0
    9362:	f813 2b01 	ldrb.w	r2, [r3], #1
    9366:	2a00      	cmp	r2, #0
    9368:	d1fb      	bne.n	9362 <strlen+0x2>
    936a:	1a18      	subs	r0, r3, r0
    936c:	3801      	subs	r0, #1
    936e:	4770      	bx	lr

00009370 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9372:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9374:	f7ff f842 	bl	83fc <__aeabi_i2d>
    9378:	a325      	add	r3, pc, #148	; (adr r3, 9410 <ntc_temperature+0xa0>)
    937a:	e9d3 2300 	ldrd	r2, r3, [r3]
    937e:	f7ff f8a7 	bl	84d0 <__aeabi_dmul>
    9382:	f7ff fab7 	bl	88f4 <__aeabi_d2f>
    9386:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9388:	1e63      	subs	r3, r4, #1
    938a:	b2db      	uxtb	r3, r3
    938c:	2b02      	cmp	r3, #2
    938e:	bf96      	itet	ls
    9390:	4a27      	ldrls	r2, [pc, #156]	; (9430 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9392:	2000      	movhi	r0, #0
    9394:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9398:	4629      	mov	r1, r5
    939a:	f7ff fc09 	bl	8bb0 <__aeabi_fmul>
    939e:	f7ff f83f 	bl	8420 <__aeabi_f2d>
    93a2:	4606      	mov	r6, r0
    93a4:	4628      	mov	r0, r5
    93a6:	460f      	mov	r7, r1
    93a8:	f7ff f83a 	bl	8420 <__aeabi_f2d>
    93ac:	4602      	mov	r2, r0
    93ae:	460b      	mov	r3, r1
    93b0:	2000      	movs	r0, #0
    93b2:	4920      	ldr	r1, [pc, #128]	; (9434 <ntc_temperature+0xc4>)
    93b4:	f7fe fed4 	bl	8160 <__aeabi_dsub>
    93b8:	4602      	mov	r2, r0
    93ba:	460b      	mov	r3, r1
    93bc:	4630      	mov	r0, r6
    93be:	4639      	mov	r1, r7
    93c0:	f7ff f9b0 	bl	8724 <__aeabi_ddiv>
    93c4:	f7ff fa96 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93c8:	491b      	ldr	r1, [pc, #108]	; (9438 <ntc_temperature+0xc8>)
    93ca:	f7ff fca5 	bl	8d18 <__aeabi_fdiv>
    93ce:	f7ff f827 	bl	8420 <__aeabi_f2d>
    93d2:	f01b fc93 	bl	24cfc <log>
    93d6:	a310      	add	r3, pc, #64	; (adr r3, 9418 <ntc_temperature+0xa8>)
    93d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    93dc:	f7ff f9a2 	bl	8724 <__aeabi_ddiv>
    93e0:	a30f      	add	r3, pc, #60	; (adr r3, 9420 <ntc_temperature+0xb0>)
    93e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93e6:	f7fe febd 	bl	8164 <__adddf3>
    93ea:	4602      	mov	r2, r0
    93ec:	460b      	mov	r3, r1
    93ee:	2000      	movs	r0, #0
    93f0:	4912      	ldr	r1, [pc, #72]	; (943c <ntc_temperature+0xcc>)
    93f2:	f7ff f997 	bl	8724 <__aeabi_ddiv>
    93f6:	f7ff fa7d 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    93fa:	f7ff f811 	bl	8420 <__aeabi_f2d>
    93fe:	a30a      	add	r3, pc, #40	; (adr r3, 9428 <ntc_temperature+0xb8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7fe feac 	bl	8160 <__aeabi_dsub>
    9408:	f7ff fa74 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    940e:	bf00      	nop
    9410:	3a66a002 	.word	0x3a66a002
    9414:	3f2ccdb3 	.word	0x3f2ccdb3
    9418:	00000000 	.word	0x00000000
    941c:	40af0200 	.word	0x40af0200
    9420:	dcb5db83 	.word	0xdcb5db83
    9424:	3f6b79e1 	.word	0x3f6b79e1
    9428:	66666666 	.word	0x66666666
    942c:	40711266 	.word	0x40711266
    9430:	0002d0f0 	.word	0x0002d0f0
    9434:	40080000 	.word	0x40080000
    9438:	461c4000 	.word	0x461c4000
    943c:	3ff00000 	.word	0x3ff00000

00009440 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9440:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9442:	4d65      	ldr	r5, [pc, #404]	; (95d8 <bt_init+0x198>)
{
    9444:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9446:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    944a:	6899      	ldr	r1, [r3, #8]
    944c:	f011 0101 	ands.w	r1, r1, #1
    9450:	d11a      	bne.n	9488 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9452:	f640 4003 	movw	r0, #3075	; 0xc03
    9456:	aa01      	add	r2, sp, #4
    9458:	f009 fa5e 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
    945c:	4604      	mov	r4, r0
    945e:	2800      	cmp	r0, #0
    9460:	f040 80b6 	bne.w	95d0 <bt_init+0x190>
		hci_reset_complete(rsp);
    9464:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    9466:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9468:	781b      	ldrb	r3, [r3, #0]
    946a:	b95b      	cbnz	r3, 9484 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    946c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9470:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9474:	f002 0209 	and.w	r2, r2, #9
    9478:	e8d3 1fef 	ldaex	r1, [r3]
    947c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9480:	2c00      	cmp	r4, #0
    9482:	d1f9      	bne.n	9478 <bt_init+0x38>
		net_buf_unref(rsp);
    9484:	f011 fda8 	bl	1afd8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9488:	2100      	movs	r1, #0
    948a:	f241 0003 	movw	r0, #4099	; 0x1003
    948e:	aa01      	add	r2, sp, #4
    9490:	f009 fa42 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    9494:	4604      	mov	r4, r0
    9496:	2800      	cmp	r0, #0
    9498:	f040 809a 	bne.w	95d0 <bt_init+0x190>
	read_local_features_complete(rsp);
    949c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    949e:	4e4f      	ldr	r6, [pc, #316]	; (95dc <bt_init+0x19c>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94a0:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94a2:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94a6:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94aa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94ac:	4618      	mov	r0, r3
    94ae:	f011 fd93 	bl	1afd8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94b2:	4621      	mov	r1, r4
    94b4:	f241 0001 	movw	r0, #4097	; 0x1001
    94b8:	aa01      	add	r2, sp, #4
    94ba:	f009 fa2d 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    94be:	4604      	mov	r4, r0
    94c0:	2800      	cmp	r0, #0
    94c2:	f040 8085 	bne.w	95d0 <bt_init+0x190>
	read_local_ver_complete(rsp);
    94c6:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94c8:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94ca:	785a      	ldrb	r2, [r3, #1]
    94cc:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94d0:	885a      	ldrh	r2, [r3, #2]
    94d2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94d6:	791a      	ldrb	r2, [r3, #4]
    94d8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    94dc:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    94e0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    94e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    94e8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    94ec:	f011 fd74 	bl	1afd8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    94f0:	4621      	mov	r1, r4
    94f2:	f241 0002 	movw	r0, #4098	; 0x1002
    94f6:	aa01      	add	r2, sp, #4
    94f8:	f009 fa0e 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    94fc:	4604      	mov	r4, r0
    94fe:	2800      	cmp	r0, #0
    9500:	d166      	bne.n	95d0 <bt_init+0x190>
	read_supported_commands_complete(rsp);
    9502:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    9504:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    9506:	1c53      	adds	r3, r2, #1
    9508:	3241      	adds	r2, #65	; 0x41
    950a:	4634      	mov	r4, r6
    950c:	6818      	ldr	r0, [r3, #0]
    950e:	6859      	ldr	r1, [r3, #4]
    9510:	3308      	adds	r3, #8
    9512:	c403      	stmia	r4!, {r0, r1}
    9514:	4293      	cmp	r3, r2
    9516:	4626      	mov	r6, r4
    9518:	d1f7      	bne.n	950a <bt_init+0xca>
	net_buf_unref(rsp);
    951a:	4638      	mov	r0, r7
    951c:	f011 fd5c 	bl	1afd8 <net_buf_unref>
		err = prng_init();
    9520:	f00b f84a 	bl	145b8 <prng_init>
		if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d152      	bne.n	95d0 <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    952a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    952e:	069a      	lsls	r2, r3, #26
    9530:	d41a      	bmi.n	9568 <bt_init+0x128>
		LOG_WRN("Controller to host flow control not supported");
    9532:	4b2b      	ldr	r3, [pc, #172]	; (95e0 <bt_init+0x1a0>)
    9534:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9538:	9307      	str	r3, [sp, #28]
    953a:	2302      	movs	r3, #2
    953c:	4829      	ldr	r0, [pc, #164]	; (95e4 <bt_init+0x1a4>)
    953e:	aa06      	add	r2, sp, #24
    9540:	9306      	str	r3, [sp, #24]
    9542:	f01f f89e 	bl	28682 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9546:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    954a:	065b      	lsls	r3, r3, #25
    954c:	d44e      	bmi.n	95ec <bt_init+0x1ac>
		LOG_ERR("Non-LE capable controller detected!");
    954e:	4b26      	ldr	r3, [pc, #152]	; (95e8 <bt_init+0x1a8>)
    9550:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9554:	9307      	str	r3, [sp, #28]
    9556:	2302      	movs	r3, #2
    9558:	4822      	ldr	r0, [pc, #136]	; (95e4 <bt_init+0x1a4>)
    955a:	aa06      	add	r2, sp, #24
    955c:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    955e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
    9562:	f01f f88e 	bl	28682 <z_log_msg_static_create.constprop.0>
	if (err) {
    9566:	e033      	b.n	95d0 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9568:	2107      	movs	r1, #7
    956a:	f640 4033 	movw	r0, #3123	; 0xc33
    956e:	f009 f985 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
    9572:	4606      	mov	r6, r0
    9574:	2800      	cmp	r0, #0
    9576:	f000 8141 	beq.w	97fc <bt_init+0x3bc>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    957a:	2107      	movs	r1, #7
    957c:	300c      	adds	r0, #12
    957e:	f011 fe4d 	bl	1b21c <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9582:	2345      	movs	r3, #69	; 0x45
    9584:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9586:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9588:	f8c0 4002 	str.w	r4, [r0, #2]
    958c:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    958e:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9590:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9592:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9594:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9596:	4631      	mov	r1, r6
    9598:	f640 4033 	movw	r0, #3123	; 0xc33
    959c:	f009 f9bc 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    95a0:	4604      	mov	r4, r0
    95a2:	b9a8      	cbnz	r0, 95d0 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95a4:	2101      	movs	r1, #1
    95a6:	f640 4031 	movw	r0, #3121	; 0xc31
    95aa:	f009 f967 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
    95ae:	4606      	mov	r6, r0
    95b0:	2800      	cmp	r0, #0
    95b2:	f000 8123 	beq.w	97fc <bt_init+0x3bc>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95b6:	2101      	movs	r1, #1
    95b8:	300c      	adds	r0, #12
    95ba:	f020 fec1 	bl	2a340 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95be:	4622      	mov	r2, r4
    95c0:	4631      	mov	r1, r6
    95c2:	f640 4031 	movw	r0, #3121	; 0xc31
    95c6:	f009 f9a7 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    95ca:	4604      	mov	r4, r0
    95cc:	2800      	cmp	r0, #0
    95ce:	d0ba      	beq.n	9546 <bt_init+0x106>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95d0:	4620      	mov	r0, r4
    95d2:	b009      	add	sp, #36	; 0x24
    95d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95d6:	bf00      	nop
    95d8:	20008000 	.word	0x20008000
    95dc:	20008070 	.word	0x20008070
    95e0:	000304bb 	.word	0x000304bb
    95e4:	0002ccc8 	.word	0x0002ccc8
    95e8:	000304e9 	.word	0x000304e9
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    95ec:	2100      	movs	r1, #0
    95ee:	f242 0003 	movw	r0, #8195	; 0x2003
    95f2:	aa02      	add	r2, sp, #8
    95f4:	f009 f990 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    95f8:	4604      	mov	r4, r0
    95fa:	2800      	cmp	r0, #0
    95fc:	d1e8      	bne.n	95d0 <bt_init+0x190>
	read_le_features_complete(rsp);
    95fe:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9600:	4ebf      	ldr	r6, [pc, #764]	; (9900 <bt_init+0x4c0>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    9602:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9604:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9608:	f8d2 1005 	ldr.w	r1, [r2, #5]
    960c:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    960e:	4618      	mov	r0, r3
    9610:	f011 fce2 	bl	1afd8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9614:	4621      	mov	r1, r4
    9616:	f242 0002 	movw	r0, #8194	; 0x2002
    961a:	aa02      	add	r2, sp, #8
    961c:	f009 f97c 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
    9620:	4604      	mov	r4, r0
    9622:	2800      	cmp	r0, #0
    9624:	d1d4      	bne.n	95d0 <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    9626:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9628:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    962a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    962e:	b291      	uxth	r1, r2
    9630:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    9634:	b129      	cbz	r1, 9642 <bt_init+0x202>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9636:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9638:	4611      	mov	r1, r2
    963a:	f106 0028 	add.w	r0, r6, #40	; 0x28
    963e:	f022 f9fb 	bl	2ba38 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    9642:	4620      	mov	r0, r4
    9644:	f011 fcc8 	bl	1afd8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9648:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    964c:	f016 0620 	ands.w	r6, r6, #32
    9650:	d118      	bne.n	9684 <bt_init+0x244>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    9652:	2102      	movs	r1, #2
    9654:	f640 406d 	movw	r0, #3181	; 0xc6d
    9658:	f009 f910 	bl	1287c <bt_hci_cmd_create>
		if (!buf) {
    965c:	4604      	mov	r4, r0
    965e:	2800      	cmp	r0, #0
    9660:	f000 80cc 	beq.w	97fc <bt_init+0x3bc>
	return net_buf_simple_add(&buf->b, len);
    9664:	2102      	movs	r1, #2
    9666:	300c      	adds	r0, #12
    9668:	f011 fdd8 	bl	1b21c <net_buf_simple_add>
		cp_le->le = 0x01;
    966c:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    966e:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    9670:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    9672:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9674:	4632      	mov	r2, r6
    9676:	f640 406d 	movw	r0, #3181	; 0xc6d
    967a:	f009 f94d 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
    967e:	4604      	mov	r4, r0
    9680:	2800      	cmp	r0, #0
    9682:	d1a5      	bne.n	95d0 <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9684:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9688:	071f      	lsls	r7, r3, #28
    968a:	d512      	bpl.n	96b2 <bt_init+0x272>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    968c:	2100      	movs	r1, #0
    968e:	f242 001c 	movw	r0, #8220	; 0x201c
    9692:	aa02      	add	r2, sp, #8
    9694:	f009 f940 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
    9698:	4604      	mov	r4, r0
    969a:	2800      	cmp	r0, #0
    969c:	d198      	bne.n	95d0 <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    969e:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    96a0:	68c3      	ldr	r3, [r0, #12]
    96a2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96a6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96aa:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96ae:	f011 fc93 	bl	1afd8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96b2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96b6:	069e      	lsls	r6, r3, #26
    96b8:	d524      	bpl.n	9704 <bt_init+0x2c4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96ba:	a901      	add	r1, sp, #4
    96bc:	f10d 0002 	add.w	r0, sp, #2
    96c0:	f009 f9a6 	bl	12a10 <hci_le_read_max_data_len>
		if (err) {
    96c4:	4604      	mov	r4, r0
    96c6:	2800      	cmp	r0, #0
    96c8:	d182      	bne.n	95d0 <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96ca:	2104      	movs	r1, #4
    96cc:	f242 0024 	movw	r0, #8228	; 0x2024
    96d0:	f009 f8d4 	bl	1287c <bt_hci_cmd_create>
		if (!buf) {
    96d4:	4606      	mov	r6, r0
    96d6:	2800      	cmp	r0, #0
    96d8:	f000 8090 	beq.w	97fc <bt_init+0x3bc>
    96dc:	2104      	movs	r1, #4
    96de:	300c      	adds	r0, #12
    96e0:	f011 fd9c 	bl	1b21c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96e8:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96ea:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f0:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96f2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f4:	f242 0024 	movw	r0, #8228	; 0x2024
    96f8:	f009 f90e 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
    96fc:	4604      	mov	r4, r0
    96fe:	2800      	cmp	r0, #0
    9700:	f47f af66 	bne.w	95d0 <bt_init+0x190>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9704:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9708:	065c      	lsls	r4, r3, #25
    970a:	d510      	bpl.n	972e <bt_init+0x2ee>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    970c:	2100      	movs	r1, #0
    970e:	f242 002a 	movw	r0, #8234	; 0x202a
    9712:	aa02      	add	r2, sp, #8
    9714:	f009 f900 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
    9718:	4604      	mov	r4, r0
    971a:	2800      	cmp	r0, #0
    971c:	f47f af58 	bne.w	95d0 <bt_init+0x190>
		le_read_resolving_list_size_complete(rsp);
    9720:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    9722:	68c3      	ldr	r3, [r0, #12]
    9724:	785b      	ldrb	r3, [r3, #1]
    9726:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    972a:	f011 fc55 	bl	1afd8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    972e:	2108      	movs	r1, #8
    9730:	f242 0001 	movw	r0, #8193	; 0x2001
    9734:	f009 f8a2 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
    9738:	4604      	mov	r4, r0
    973a:	2800      	cmp	r0, #0
    973c:	d05e      	beq.n	97fc <bt_init+0x3bc>
    973e:	2108      	movs	r1, #8
    9740:	300c      	adds	r0, #12
    9742:	f011 fd6b 	bl	1b21c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9746:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    974a:	f240 2302 	movw	r3, #514	; 0x202
    974e:	f011 0f40 	tst.w	r1, #64	; 0x40
    9752:	bf08      	it	eq
    9754:	2303      	moveq	r3, #3
    9756:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9758:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    975a:	bf4c      	ite	mi
    975c:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    9760:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9764:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9768:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    976a:	bf48      	it	mi
    976c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9770:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9774:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9778:	bf18      	it	ne
    977a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    977e:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9782:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9784:	bf48      	it	mi
    9786:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    978a:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    978c:	bf08      	it	eq
    978e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    9792:	2100      	movs	r1, #0
    9794:	f01e ff80 	bl	28698 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9798:	4621      	mov	r1, r4
    979a:	2200      	movs	r2, #0
    979c:	f242 0001 	movw	r0, #8193	; 0x2001
    97a0:	f009 f8ba 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    97a4:	4604      	mov	r4, r0
    97a6:	2800      	cmp	r0, #0
    97a8:	f47f af12 	bne.w	95d0 <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97ac:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97b0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97b4:	0698      	lsls	r0, r3, #26
    97b6:	d424      	bmi.n	9802 <bt_init+0x3c2>
	if (bt_dev.le.acl_mtu) {
    97b8:	b9c9      	cbnz	r1, 97ee <bt_init+0x3ae>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97ba:	f241 0005 	movw	r0, #4101	; 0x1005
    97be:	aa02      	add	r2, sp, #8
    97c0:	f009 f8aa 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    97c4:	4604      	mov	r4, r0
    97c6:	2800      	cmp	r0, #0
    97c8:	f47f af02 	bne.w	95d0 <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    97cc:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97d0:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    97d2:	b94b      	cbnz	r3, 97e8 <bt_init+0x3a8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97d4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97d6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    97da:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    97de:	889a      	ldrh	r2, [r3, #4]
    97e0:	4848      	ldr	r0, [pc, #288]	; (9904 <bt_init+0x4c4>)
    97e2:	4611      	mov	r1, r2
    97e4:	f022 f928 	bl	2ba38 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    97e8:	4620      	mov	r0, r4
    97ea:	f011 fbf5 	bl	1afd8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    97ee:	2108      	movs	r1, #8
    97f0:	f640 4001 	movw	r0, #3073	; 0xc01
    97f4:	f009 f842 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
    97f8:	4604      	mov	r4, r0
    97fa:	b988      	cbnz	r0, 9820 <bt_init+0x3e0>
		return -ENOBUFS;
    97fc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9800:	e6e6      	b.n	95d0 <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    9802:	2900      	cmp	r1, #0
    9804:	d1f3      	bne.n	97ee <bt_init+0x3ae>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9806:	4b40      	ldr	r3, [pc, #256]	; (9908 <bt_init+0x4c8>)
    9808:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    980c:	9307      	str	r3, [sp, #28]
    980e:	2302      	movs	r3, #2
    9810:	483e      	ldr	r0, [pc, #248]	; (990c <bt_init+0x4cc>)
    9812:	aa06      	add	r2, sp, #24
    9814:	9306      	str	r3, [sp, #24]
		return -EIO;
    9816:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
    981a:	f01e ff32 	bl	28682 <z_log_msg_static_create.constprop.0>
	if (err) {
    981e:	e6d7      	b.n	95d0 <bt_init+0x190>
    9820:	2108      	movs	r1, #8
    9822:	300c      	adds	r0, #12
    9824:	f011 fcfa 	bl	1b21c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9828:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    982c:	4602      	mov	r2, r0
    982e:	07d9      	lsls	r1, r3, #31
    9830:	d431      	bmi.n	9896 <bt_init+0x456>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    9832:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9836:	4836      	ldr	r0, [pc, #216]	; (9910 <bt_init+0x4d0>)
	sys_put_le64(mask, ev->events);
    9838:	f01e ff2e 	bl	28698 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    983c:	4621      	mov	r1, r4
    983e:	2200      	movs	r2, #0
    9840:	f640 4001 	movw	r0, #3073	; 0xc01
    9844:	f009 f868 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    9848:	4604      	mov	r4, r0
    984a:	2800      	cmp	r0, #0
    984c:	f47f aec0 	bne.w	95d0 <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9850:	4601      	mov	r1, r0
    9852:	aa01      	add	r2, sp, #4
    9854:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9858:	f009 f85e 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    985c:	4604      	mov	r4, r0
    985e:	b1f0      	cbz	r0, 989e <bt_init+0x45e>
		LOG_WRN("Vendor HCI extensions not available");
    9860:	4b2c      	ldr	r3, [pc, #176]	; (9914 <bt_init+0x4d4>)
			LOG_WRN("Failed to read supported vendor features");
    9862:	9307      	str	r3, [sp, #28]
    9864:	2302      	movs	r3, #2
    9866:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    986a:	4828      	ldr	r0, [pc, #160]	; (990c <bt_init+0x4cc>)
    986c:	aa06      	add	r2, sp, #24
    986e:	9306      	str	r3, [sp, #24]
    9870:	f01e ff07 	bl	28682 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    9874:	f01f f8a4 	bl	289c0 <bt_id_init>
	if (err) {
    9878:	4604      	mov	r4, r0
    987a:	2800      	cmp	r0, #0
    987c:	f47f aea8 	bne.w	95d0 <bt_init+0x190>
		err = bt_conn_init();
    9880:	f00c f836 	bl	158f0 <bt_conn_init>
		if (err) {
    9884:	4604      	mov	r4, r0
    9886:	2800      	cmp	r0, #0
    9888:	f47f aea2 	bne.w	95d0 <bt_init+0x190>
}
    988c:	b009      	add	sp, #36	; 0x24
    988e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9892:	f009 be5d 	b.w	13550 <bt_init.part.0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9896:	a118      	add	r1, pc, #96	; (adr r1, 98f8 <bt_init+0x4b8>)
    9898:	e9d1 0100 	ldrd	r0, r1, [r1]
    989c:	e7cc      	b.n	9838 <bt_init+0x3f8>
	net_buf_unref(rsp);
    989e:	9801      	ldr	r0, [sp, #4]
    98a0:	f011 fb9a 	bl	1afd8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    98a4:	4621      	mov	r1, r4
    98a6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    98aa:	aa01      	add	r2, sp, #4
    98ac:	f009 f834 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
    98b0:	4604      	mov	r4, r0
    98b2:	b108      	cbz	r0, 98b8 <bt_init+0x478>
		LOG_WRN("Failed to read supported vendor commands");
    98b4:	4b18      	ldr	r3, [pc, #96]	; (9918 <bt_init+0x4d8>)
    98b6:	e7d4      	b.n	9862 <bt_init+0x422>
	rp.cmds = (void *)rsp->data;
    98b8:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98ba:	68c3      	ldr	r3, [r0, #12]
    98bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98c0:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98c4:	f011 fb88 	bl	1afd8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98c8:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98cc:	075b      	lsls	r3, r3, #29
    98ce:	d5d1      	bpl.n	9874 <bt_init+0x434>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98d0:	4621      	mov	r1, r4
    98d2:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98d6:	aa01      	add	r2, sp, #4
    98d8:	f009 f81e 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
    98dc:	b108      	cbz	r0, 98e2 <bt_init+0x4a2>
			LOG_WRN("Failed to read supported vendor features");
    98de:	4b0f      	ldr	r3, [pc, #60]	; (991c <bt_init+0x4dc>)
    98e0:	e7bf      	b.n	9862 <bt_init+0x422>
		rp.feat = (void *)rsp->data;
    98e2:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    98e4:	68c3      	ldr	r3, [r0, #12]
    98e6:	785b      	ldrb	r3, [r3, #1]
    98e8:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    98ec:	f011 fb74 	bl	1afd8 <net_buf_unref>
    98f0:	e7c0      	b.n	9874 <bt_init+0x434>
    98f2:	bf00      	nop
    98f4:	f3af 8000 	nop.w
    98f8:	02008890 	.word	0x02008890
    98fc:	20008000 	.word	0x20008000
    9900:	200080d0 	.word	0x200080d0
    9904:	20008100 	.word	0x20008100
    9908:	0003050d 	.word	0x0003050d
    990c:	0002ccc8 	.word	0x0002ccc8
    9910:	02008810 	.word	0x02008810
    9914:	00030530 	.word	0x00030530
    9918:	00030554 	.word	0x00030554
    991c:	0003057d 	.word	0x0003057d

00009920 <__ieee754_log>:
    9920:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9924:	4602      	mov	r2, r0
    9926:	460b      	mov	r3, r1
    9928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    992c:	460d      	mov	r5, r1
    992e:	b087      	sub	sp, #28
    9930:	da24      	bge.n	997c <__ieee754_log+0x5c>
    9932:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    9936:	4304      	orrs	r4, r0
    9938:	d108      	bne.n	994c <__ieee754_log+0x2c>
    993a:	2200      	movs	r2, #0
    993c:	2300      	movs	r3, #0
    993e:	2000      	movs	r0, #0
    9940:	49c9      	ldr	r1, [pc, #804]	; (9c68 <__ieee754_log+0x348>)
    9942:	f7fe feef 	bl	8724 <__aeabi_ddiv>
    9946:	b007      	add	sp, #28
    9948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    994c:	2900      	cmp	r1, #0
    994e:	da04      	bge.n	995a <__ieee754_log+0x3a>
    9950:	f7fe fc06 	bl	8160 <__aeabi_dsub>
    9954:	2200      	movs	r2, #0
    9956:	2300      	movs	r3, #0
    9958:	e7f3      	b.n	9942 <__ieee754_log+0x22>
    995a:	2200      	movs	r2, #0
    995c:	4bc3      	ldr	r3, [pc, #780]	; (9c6c <__ieee754_log+0x34c>)
    995e:	f7fe fdb7 	bl	84d0 <__aeabi_dmul>
    9962:	460b      	mov	r3, r1
    9964:	460d      	mov	r5, r1
    9966:	4602      	mov	r2, r0
    9968:	f06f 0135 	mvn.w	r1, #53	; 0x35
    996c:	48c0      	ldr	r0, [pc, #768]	; (9c70 <__ieee754_log+0x350>)
    996e:	4285      	cmp	r5, r0
    9970:	dd06      	ble.n	9980 <__ieee754_log+0x60>
    9972:	4610      	mov	r0, r2
    9974:	4619      	mov	r1, r3
    9976:	f7fe fbf5 	bl	8164 <__adddf3>
    997a:	e7e4      	b.n	9946 <__ieee754_log+0x26>
    997c:	2100      	movs	r1, #0
    997e:	e7f5      	b.n	996c <__ieee754_log+0x4c>
    9980:	152c      	asrs	r4, r5, #20
    9982:	f3c5 0513 	ubfx	r5, r5, #0, #20
    9986:	4610      	mov	r0, r2
    9988:	2200      	movs	r2, #0
    998a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    998e:	440c      	add	r4, r1
    9990:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    9994:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9998:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    999c:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    99a0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    99a4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99a8:	ea41 0305 	orr.w	r3, r1, r5
    99ac:	4619      	mov	r1, r3
    99ae:	4bb1      	ldr	r3, [pc, #708]	; (9c74 <__ieee754_log+0x354>)
    99b0:	f7fe fbd6 	bl	8160 <__aeabi_dsub>
    99b4:	1cab      	adds	r3, r5, #2
    99b6:	4682      	mov	sl, r0
    99b8:	468b      	mov	fp, r1
    99ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99be:	2200      	movs	r2, #0
    99c0:	2b02      	cmp	r3, #2
    99c2:	dc53      	bgt.n	9a6c <__ieee754_log+0x14c>
    99c4:	2300      	movs	r3, #0
    99c6:	f7ff fb03 	bl	8fd0 <__aeabi_dcmpeq>
    99ca:	b1d0      	cbz	r0, 9a02 <__ieee754_log+0xe2>
    99cc:	2c00      	cmp	r4, #0
    99ce:	f000 8120 	beq.w	9c12 <__ieee754_log+0x2f2>
    99d2:	4620      	mov	r0, r4
    99d4:	f7fe fd12 	bl	83fc <__aeabi_i2d>
    99d8:	4606      	mov	r6, r0
    99da:	460f      	mov	r7, r1
    99dc:	a38e      	add	r3, pc, #568	; (adr r3, 9c18 <__ieee754_log+0x2f8>)
    99de:	e9d3 2300 	ldrd	r2, r3, [r3]
    99e2:	f7fe fd75 	bl	84d0 <__aeabi_dmul>
    99e6:	4604      	mov	r4, r0
    99e8:	460d      	mov	r5, r1
    99ea:	4630      	mov	r0, r6
    99ec:	4639      	mov	r1, r7
    99ee:	a38c      	add	r3, pc, #560	; (adr r3, 9c20 <__ieee754_log+0x300>)
    99f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    99f4:	f7fe fd6c 	bl	84d0 <__aeabi_dmul>
    99f8:	4602      	mov	r2, r0
    99fa:	460b      	mov	r3, r1
    99fc:	4620      	mov	r0, r4
    99fe:	4629      	mov	r1, r5
    9a00:	e7b9      	b.n	9976 <__ieee754_log+0x56>
    9a02:	a389      	add	r3, pc, #548	; (adr r3, 9c28 <__ieee754_log+0x308>)
    9a04:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a08:	4650      	mov	r0, sl
    9a0a:	4659      	mov	r1, fp
    9a0c:	f7fe fd60 	bl	84d0 <__aeabi_dmul>
    9a10:	4602      	mov	r2, r0
    9a12:	460b      	mov	r3, r1
    9a14:	2000      	movs	r0, #0
    9a16:	4998      	ldr	r1, [pc, #608]	; (9c78 <__ieee754_log+0x358>)
    9a18:	f7fe fba2 	bl	8160 <__aeabi_dsub>
    9a1c:	4606      	mov	r6, r0
    9a1e:	460f      	mov	r7, r1
    9a20:	4652      	mov	r2, sl
    9a22:	465b      	mov	r3, fp
    9a24:	4650      	mov	r0, sl
    9a26:	4659      	mov	r1, fp
    9a28:	f7fe fd52 	bl	84d0 <__aeabi_dmul>
    9a2c:	4602      	mov	r2, r0
    9a2e:	460b      	mov	r3, r1
    9a30:	4630      	mov	r0, r6
    9a32:	4639      	mov	r1, r7
    9a34:	f7fe fd4c 	bl	84d0 <__aeabi_dmul>
    9a38:	4606      	mov	r6, r0
    9a3a:	460f      	mov	r7, r1
    9a3c:	b914      	cbnz	r4, 9a44 <__ieee754_log+0x124>
    9a3e:	4632      	mov	r2, r6
    9a40:	463b      	mov	r3, r7
    9a42:	e0a0      	b.n	9b86 <__ieee754_log+0x266>
    9a44:	4620      	mov	r0, r4
    9a46:	f7fe fcd9 	bl	83fc <__aeabi_i2d>
    9a4a:	4680      	mov	r8, r0
    9a4c:	4689      	mov	r9, r1
    9a4e:	a372      	add	r3, pc, #456	; (adr r3, 9c18 <__ieee754_log+0x2f8>)
    9a50:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a54:	f7fe fd3c 	bl	84d0 <__aeabi_dmul>
    9a58:	4604      	mov	r4, r0
    9a5a:	460d      	mov	r5, r1
    9a5c:	4640      	mov	r0, r8
    9a5e:	4649      	mov	r1, r9
    9a60:	a36f      	add	r3, pc, #444	; (adr r3, 9c20 <__ieee754_log+0x300>)
    9a62:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a66:	f7fe fd33 	bl	84d0 <__aeabi_dmul>
    9a6a:	e0a5      	b.n	9bb8 <__ieee754_log+0x298>
    9a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a70:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a74:	f7fe fb76 	bl	8164 <__adddf3>
    9a78:	4602      	mov	r2, r0
    9a7a:	460b      	mov	r3, r1
    9a7c:	4650      	mov	r0, sl
    9a7e:	4659      	mov	r1, fp
    9a80:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9a84:	f7fe fe4e 	bl	8724 <__aeabi_ddiv>
    9a88:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9a8c:	3551      	adds	r5, #81	; 0x51
    9a8e:	e9cd 0100 	strd	r0, r1, [sp]
    9a92:	4620      	mov	r0, r4
    9a94:	4335      	orrs	r5, r6
    9a96:	f7fe fcb1 	bl	83fc <__aeabi_i2d>
    9a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9aa2:	4610      	mov	r0, r2
    9aa4:	4619      	mov	r1, r3
    9aa6:	f7fe fd13 	bl	84d0 <__aeabi_dmul>
    9aaa:	4602      	mov	r2, r0
    9aac:	460b      	mov	r3, r1
    9aae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9ab2:	f7fe fd0d 	bl	84d0 <__aeabi_dmul>
    9ab6:	4680      	mov	r8, r0
    9ab8:	4689      	mov	r9, r1
    9aba:	a35d      	add	r3, pc, #372	; (adr r3, 9c30 <__ieee754_log+0x310>)
    9abc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ac0:	f7fe fd06 	bl	84d0 <__aeabi_dmul>
    9ac4:	a35c      	add	r3, pc, #368	; (adr r3, 9c38 <__ieee754_log+0x318>)
    9ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9aca:	f7fe fb4b 	bl	8164 <__adddf3>
    9ace:	4642      	mov	r2, r8
    9ad0:	464b      	mov	r3, r9
    9ad2:	f7fe fcfd 	bl	84d0 <__aeabi_dmul>
    9ad6:	a35a      	add	r3, pc, #360	; (adr r3, 9c40 <__ieee754_log+0x320>)
    9ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9adc:	f7fe fb42 	bl	8164 <__adddf3>
    9ae0:	4642      	mov	r2, r8
    9ae2:	464b      	mov	r3, r9
    9ae4:	f7fe fcf4 	bl	84d0 <__aeabi_dmul>
    9ae8:	a357      	add	r3, pc, #348	; (adr r3, 9c48 <__ieee754_log+0x328>)
    9aea:	e9d3 2300 	ldrd	r2, r3, [r3]
    9aee:	f7fe fb39 	bl	8164 <__adddf3>
    9af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9af6:	f7fe fceb 	bl	84d0 <__aeabi_dmul>
    9afa:	a355      	add	r3, pc, #340	; (adr r3, 9c50 <__ieee754_log+0x330>)
    9afc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9b04:	4640      	mov	r0, r8
    9b06:	4649      	mov	r1, r9
    9b08:	f7fe fce2 	bl	84d0 <__aeabi_dmul>
    9b0c:	a352      	add	r3, pc, #328	; (adr r3, 9c58 <__ieee754_log+0x338>)
    9b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b12:	f7fe fb27 	bl	8164 <__adddf3>
    9b16:	4642      	mov	r2, r8
    9b18:	464b      	mov	r3, r9
    9b1a:	f7fe fcd9 	bl	84d0 <__aeabi_dmul>
    9b1e:	a350      	add	r3, pc, #320	; (adr r3, 9c60 <__ieee754_log+0x340>)
    9b20:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b24:	f7fe fb1e 	bl	8164 <__adddf3>
    9b28:	4642      	mov	r2, r8
    9b2a:	464b      	mov	r3, r9
    9b2c:	f7fe fcd0 	bl	84d0 <__aeabi_dmul>
    9b30:	4602      	mov	r2, r0
    9b32:	460b      	mov	r3, r1
    9b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b38:	f7fe fb14 	bl	8164 <__adddf3>
    9b3c:	2d00      	cmp	r5, #0
    9b3e:	4680      	mov	r8, r0
    9b40:	4689      	mov	r9, r1
    9b42:	dd48      	ble.n	9bd6 <__ieee754_log+0x2b6>
    9b44:	2200      	movs	r2, #0
    9b46:	4b4c      	ldr	r3, [pc, #304]	; (9c78 <__ieee754_log+0x358>)
    9b48:	4650      	mov	r0, sl
    9b4a:	4659      	mov	r1, fp
    9b4c:	f7fe fcc0 	bl	84d0 <__aeabi_dmul>
    9b50:	4652      	mov	r2, sl
    9b52:	465b      	mov	r3, fp
    9b54:	f7fe fcbc 	bl	84d0 <__aeabi_dmul>
    9b58:	4602      	mov	r2, r0
    9b5a:	460b      	mov	r3, r1
    9b5c:	4606      	mov	r6, r0
    9b5e:	460f      	mov	r7, r1
    9b60:	4640      	mov	r0, r8
    9b62:	4649      	mov	r1, r9
    9b64:	f7fe fafe 	bl	8164 <__adddf3>
    9b68:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b6c:	f7fe fcb0 	bl	84d0 <__aeabi_dmul>
    9b70:	4680      	mov	r8, r0
    9b72:	4689      	mov	r9, r1
    9b74:	b964      	cbnz	r4, 9b90 <__ieee754_log+0x270>
    9b76:	4602      	mov	r2, r0
    9b78:	460b      	mov	r3, r1
    9b7a:	4630      	mov	r0, r6
    9b7c:	4639      	mov	r1, r7
    9b7e:	f7fe faef 	bl	8160 <__aeabi_dsub>
    9b82:	4602      	mov	r2, r0
    9b84:	460b      	mov	r3, r1
    9b86:	4650      	mov	r0, sl
    9b88:	4659      	mov	r1, fp
    9b8a:	f7fe fae9 	bl	8160 <__aeabi_dsub>
    9b8e:	e6da      	b.n	9946 <__ieee754_log+0x26>
    9b90:	a321      	add	r3, pc, #132	; (adr r3, 9c18 <__ieee754_log+0x2f8>)
    9b92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9b9a:	f7fe fc99 	bl	84d0 <__aeabi_dmul>
    9b9e:	4604      	mov	r4, r0
    9ba0:	460d      	mov	r5, r1
    9ba2:	a31f      	add	r3, pc, #124	; (adr r3, 9c20 <__ieee754_log+0x300>)
    9ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bac:	f7fe fc90 	bl	84d0 <__aeabi_dmul>
    9bb0:	4642      	mov	r2, r8
    9bb2:	464b      	mov	r3, r9
    9bb4:	f7fe fad6 	bl	8164 <__adddf3>
    9bb8:	4602      	mov	r2, r0
    9bba:	460b      	mov	r3, r1
    9bbc:	4630      	mov	r0, r6
    9bbe:	4639      	mov	r1, r7
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4652      	mov	r2, sl
    9bc6:	465b      	mov	r3, fp
    9bc8:	f7fe faca 	bl	8160 <__aeabi_dsub>
    9bcc:	4602      	mov	r2, r0
    9bce:	460b      	mov	r3, r1
    9bd0:	4620      	mov	r0, r4
    9bd2:	4629      	mov	r1, r5
    9bd4:	e7d9      	b.n	9b8a <__ieee754_log+0x26a>
    9bd6:	4602      	mov	r2, r0
    9bd8:	460b      	mov	r3, r1
    9bda:	4650      	mov	r0, sl
    9bdc:	4659      	mov	r1, fp
    9bde:	f7fe fabf 	bl	8160 <__aeabi_dsub>
    9be2:	e9dd 2300 	ldrd	r2, r3, [sp]
    9be6:	f7fe fc73 	bl	84d0 <__aeabi_dmul>
    9bea:	4606      	mov	r6, r0
    9bec:	460f      	mov	r7, r1
    9bee:	2c00      	cmp	r4, #0
    9bf0:	f43f af25 	beq.w	9a3e <__ieee754_log+0x11e>
    9bf4:	a308      	add	r3, pc, #32	; (adr r3, 9c18 <__ieee754_log+0x2f8>)
    9bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bfe:	f7fe fc67 	bl	84d0 <__aeabi_dmul>
    9c02:	4604      	mov	r4, r0
    9c04:	460d      	mov	r5, r1
    9c06:	a306      	add	r3, pc, #24	; (adr r3, 9c20 <__ieee754_log+0x300>)
    9c08:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c10:	e729      	b.n	9a66 <__ieee754_log+0x146>
    9c12:	2000      	movs	r0, #0
    9c14:	2100      	movs	r1, #0
    9c16:	e696      	b.n	9946 <__ieee754_log+0x26>
    9c18:	fee00000 	.word	0xfee00000
    9c1c:	3fe62e42 	.word	0x3fe62e42
    9c20:	35793c76 	.word	0x35793c76
    9c24:	3dea39ef 	.word	0x3dea39ef
    9c28:	55555555 	.word	0x55555555
    9c2c:	3fd55555 	.word	0x3fd55555
    9c30:	df3e5244 	.word	0xdf3e5244
    9c34:	3fc2f112 	.word	0x3fc2f112
    9c38:	96cb03de 	.word	0x96cb03de
    9c3c:	3fc74664 	.word	0x3fc74664
    9c40:	94229359 	.word	0x94229359
    9c44:	3fd24924 	.word	0x3fd24924
    9c48:	55555593 	.word	0x55555593
    9c4c:	3fe55555 	.word	0x3fe55555
    9c50:	d078c69f 	.word	0xd078c69f
    9c54:	3fc39a09 	.word	0x3fc39a09
    9c58:	1d8e78af 	.word	0x1d8e78af
    9c5c:	3fcc71c5 	.word	0x3fcc71c5
    9c60:	9997fa04 	.word	0x9997fa04
    9c64:	3fd99999 	.word	0x3fd99999
    9c68:	c3500000 	.word	0xc3500000
    9c6c:	43500000 	.word	0x43500000
    9c70:	7fefffff 	.word	0x7fefffff
    9c74:	3ff00000 	.word	0x3ff00000
    9c78:	3fe00000 	.word	0x3fe00000
    9c7c:	00000000 	.word	0x00000000

00009c80 <_dtoa_r>:
    9c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c84:	4614      	mov	r4, r2
    9c86:	b097      	sub	sp, #92	; 0x5c
    9c88:	461d      	mov	r5, r3
    9c8a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9c8c:	4683      	mov	fp, r0
    9c8e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9c90:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9c94:	b97f      	cbnz	r7, 9cb6 <_dtoa_r+0x36>
    9c96:	2010      	movs	r0, #16
    9c98:	f01b f870 	bl	24d7c <malloc>
    9c9c:	4602      	mov	r2, r0
    9c9e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9ca2:	b920      	cbnz	r0, 9cae <_dtoa_r+0x2e>
    9ca4:	4ba2      	ldr	r3, [pc, #648]	; (9f30 <_dtoa_r+0x2b0>)
    9ca6:	21ea      	movs	r1, #234	; 0xea
    9ca8:	48a2      	ldr	r0, [pc, #648]	; (9f34 <_dtoa_r+0x2b4>)
    9caa:	f01b fd1b 	bl	256e4 <__assert_func>
    9cae:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9cb2:	6007      	str	r7, [r0, #0]
    9cb4:	60c7      	str	r7, [r0, #12]
    9cb6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cba:	6819      	ldr	r1, [r3, #0]
    9cbc:	b159      	cbz	r1, 9cd6 <_dtoa_r+0x56>
    9cbe:	685a      	ldr	r2, [r3, #4]
    9cc0:	2301      	movs	r3, #1
    9cc2:	4658      	mov	r0, fp
    9cc4:	4093      	lsls	r3, r2
    9cc6:	604a      	str	r2, [r1, #4]
    9cc8:	608b      	str	r3, [r1, #8]
    9cca:	f01b fe4b 	bl	25964 <_Bfree>
    9cce:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cd2:	2200      	movs	r2, #0
    9cd4:	601a      	str	r2, [r3, #0]
    9cd6:	1e2b      	subs	r3, r5, #0
    9cd8:	bfb7      	itett	lt
    9cda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9cde:	2300      	movge	r3, #0
    9ce0:	2201      	movlt	r2, #1
    9ce2:	9305      	strlt	r3, [sp, #20]
    9ce4:	bfa8      	it	ge
    9ce6:	6033      	strge	r3, [r6, #0]
    9ce8:	9f05      	ldr	r7, [sp, #20]
    9cea:	4b93      	ldr	r3, [pc, #588]	; (9f38 <_dtoa_r+0x2b8>)
    9cec:	bfb8      	it	lt
    9cee:	6032      	strlt	r2, [r6, #0]
    9cf0:	43bb      	bics	r3, r7
    9cf2:	d119      	bne.n	9d28 <_dtoa_r+0xa8>
    9cf4:	f242 730f 	movw	r3, #9999	; 0x270f
    9cf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9cfa:	6013      	str	r3, [r2, #0]
    9cfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9d00:	4323      	orrs	r3, r4
    9d02:	f000 85e0 	beq.w	a8c6 <_dtoa_r+0xc46>
    9d06:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d08:	b953      	cbnz	r3, 9d20 <_dtoa_r+0xa0>
    9d0a:	4b8c      	ldr	r3, [pc, #560]	; (9f3c <_dtoa_r+0x2bc>)
    9d0c:	e021      	b.n	9d52 <_dtoa_r+0xd2>
    9d0e:	4b8c      	ldr	r3, [pc, #560]	; (9f40 <_dtoa_r+0x2c0>)
    9d10:	9308      	str	r3, [sp, #32]
    9d12:	3308      	adds	r3, #8
    9d14:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d16:	6013      	str	r3, [r2, #0]
    9d18:	9808      	ldr	r0, [sp, #32]
    9d1a:	b017      	add	sp, #92	; 0x5c
    9d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d20:	4b86      	ldr	r3, [pc, #536]	; (9f3c <_dtoa_r+0x2bc>)
    9d22:	9308      	str	r3, [sp, #32]
    9d24:	3303      	adds	r3, #3
    9d26:	e7f5      	b.n	9d14 <_dtoa_r+0x94>
    9d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d34:	2200      	movs	r2, #0
    9d36:	2300      	movs	r3, #0
    9d38:	f7ff f94a 	bl	8fd0 <__aeabi_dcmpeq>
    9d3c:	4680      	mov	r8, r0
    9d3e:	b150      	cbz	r0, 9d56 <_dtoa_r+0xd6>
    9d40:	2301      	movs	r3, #1
    9d42:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d44:	6013      	str	r3, [r2, #0]
    9d46:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d48:	b113      	cbz	r3, 9d50 <_dtoa_r+0xd0>
    9d4a:	4b7e      	ldr	r3, [pc, #504]	; (9f44 <_dtoa_r+0x2c4>)
    9d4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d4e:	6013      	str	r3, [r2, #0]
    9d50:	4b7d      	ldr	r3, [pc, #500]	; (9f48 <_dtoa_r+0x2c8>)
    9d52:	9308      	str	r3, [sp, #32]
    9d54:	e7e0      	b.n	9d18 <_dtoa_r+0x98>
    9d56:	ab14      	add	r3, sp, #80	; 0x50
    9d58:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d5c:	4658      	mov	r0, fp
    9d5e:	9301      	str	r3, [sp, #4]
    9d60:	ab15      	add	r3, sp, #84	; 0x54
    9d62:	9300      	str	r3, [sp, #0]
    9d64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d68:	f01c f882 	bl	25e70 <__d2b>
    9d6c:	9003      	str	r0, [sp, #12]
    9d6e:	2e00      	cmp	r6, #0
    9d70:	d078      	beq.n	9e64 <_dtoa_r+0x1e4>
    9d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d74:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9d78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9d80:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9d8c:	4619      	mov	r1, r3
    9d8e:	2200      	movs	r2, #0
    9d90:	4b6e      	ldr	r3, [pc, #440]	; (9f4c <_dtoa_r+0x2cc>)
    9d92:	f7fe f9e5 	bl	8160 <__aeabi_dsub>
    9d96:	a360      	add	r3, pc, #384	; (adr r3, 9f18 <_dtoa_r+0x298>)
    9d98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d9c:	f7fe fb98 	bl	84d0 <__aeabi_dmul>
    9da0:	a35f      	add	r3, pc, #380	; (adr r3, 9f20 <_dtoa_r+0x2a0>)
    9da2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9da6:	f7fe f9dd 	bl	8164 <__adddf3>
    9daa:	4604      	mov	r4, r0
    9dac:	460d      	mov	r5, r1
    9dae:	4630      	mov	r0, r6
    9db0:	f7fe fb24 	bl	83fc <__aeabi_i2d>
    9db4:	a35c      	add	r3, pc, #368	; (adr r3, 9f28 <_dtoa_r+0x2a8>)
    9db6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dba:	f7fe fb89 	bl	84d0 <__aeabi_dmul>
    9dbe:	4602      	mov	r2, r0
    9dc0:	460b      	mov	r3, r1
    9dc2:	4620      	mov	r0, r4
    9dc4:	4629      	mov	r1, r5
    9dc6:	f7fe f9cd 	bl	8164 <__adddf3>
    9dca:	4604      	mov	r4, r0
    9dcc:	460d      	mov	r5, r1
    9dce:	f7ff f947 	bl	9060 <__aeabi_d2iz>
    9dd2:	2200      	movs	r2, #0
    9dd4:	4607      	mov	r7, r0
    9dd6:	2300      	movs	r3, #0
    9dd8:	4620      	mov	r0, r4
    9dda:	4629      	mov	r1, r5
    9ddc:	f7ff f902 	bl	8fe4 <__aeabi_dcmplt>
    9de0:	b140      	cbz	r0, 9df4 <_dtoa_r+0x174>
    9de2:	4638      	mov	r0, r7
    9de4:	f7fe fb0a 	bl	83fc <__aeabi_i2d>
    9de8:	4622      	mov	r2, r4
    9dea:	462b      	mov	r3, r5
    9dec:	f7ff f8f0 	bl	8fd0 <__aeabi_dcmpeq>
    9df0:	b900      	cbnz	r0, 9df4 <_dtoa_r+0x174>
    9df2:	3f01      	subs	r7, #1
    9df4:	2f16      	cmp	r7, #22
    9df6:	d854      	bhi.n	9ea2 <_dtoa_r+0x222>
    9df8:	4b55      	ldr	r3, [pc, #340]	; (9f50 <_dtoa_r+0x2d0>)
    9dfa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9e02:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e06:	f7ff f8ed 	bl	8fe4 <__aeabi_dcmplt>
    9e0a:	2800      	cmp	r0, #0
    9e0c:	d04b      	beq.n	9ea6 <_dtoa_r+0x226>
    9e0e:	3f01      	subs	r7, #1
    9e10:	2300      	movs	r3, #0
    9e12:	9312      	str	r3, [sp, #72]	; 0x48
    9e14:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e16:	1b9b      	subs	r3, r3, r6
    9e18:	1e5a      	subs	r2, r3, #1
    9e1a:	bf4c      	ite	mi
    9e1c:	f1c3 0301 	rsbmi	r3, r3, #1
    9e20:	2300      	movpl	r3, #0
    9e22:	920a      	str	r2, [sp, #40]	; 0x28
    9e24:	bf45      	ittet	mi
    9e26:	9306      	strmi	r3, [sp, #24]
    9e28:	2300      	movmi	r3, #0
    9e2a:	9306      	strpl	r3, [sp, #24]
    9e2c:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e2e:	2f00      	cmp	r7, #0
    9e30:	db3b      	blt.n	9eaa <_dtoa_r+0x22a>
    9e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e34:	970f      	str	r7, [sp, #60]	; 0x3c
    9e36:	443b      	add	r3, r7
    9e38:	930a      	str	r3, [sp, #40]	; 0x28
    9e3a:	2300      	movs	r3, #0
    9e3c:	930b      	str	r3, [sp, #44]	; 0x2c
    9e3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e40:	2b09      	cmp	r3, #9
    9e42:	f200 8089 	bhi.w	9f58 <_dtoa_r+0x2d8>
    9e46:	2b05      	cmp	r3, #5
    9e48:	bfc5      	ittet	gt
    9e4a:	3b04      	subgt	r3, #4
    9e4c:	2400      	movgt	r4, #0
    9e4e:	2401      	movle	r4, #1
    9e50:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e52:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e54:	3b02      	subs	r3, #2
    9e56:	2b03      	cmp	r3, #3
    9e58:	f200 8089 	bhi.w	9f6e <_dtoa_r+0x2ee>
    9e5c:	e8df f003 	tbb	[pc, r3]
    9e60:	59383a2d 	.word	0x59383a2d
    9e64:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e68:	441e      	add	r6, r3
    9e6a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e6e:	2b20      	cmp	r3, #32
    9e70:	bfc9      	itett	gt
    9e72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e76:	f1c3 0320 	rsble	r3, r3, #32
    9e7a:	409f      	lslgt	r7, r3
    9e7c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9e80:	bfd8      	it	le
    9e82:	fa04 f003 	lslle.w	r0, r4, r3
    9e86:	f106 36ff 	add.w	r6, r6, #4294967295
    9e8a:	bfc4      	itt	gt
    9e8c:	fa24 f303 	lsrgt.w	r3, r4, r3
    9e90:	ea47 0003 	orrgt.w	r0, r7, r3
    9e94:	f7fe faa2 	bl	83dc <__aeabi_ui2d>
    9e98:	2201      	movs	r2, #1
    9e9a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9e9e:	9213      	str	r2, [sp, #76]	; 0x4c
    9ea0:	e774      	b.n	9d8c <_dtoa_r+0x10c>
    9ea2:	2301      	movs	r3, #1
    9ea4:	e7b5      	b.n	9e12 <_dtoa_r+0x192>
    9ea6:	9012      	str	r0, [sp, #72]	; 0x48
    9ea8:	e7b4      	b.n	9e14 <_dtoa_r+0x194>
    9eaa:	9b06      	ldr	r3, [sp, #24]
    9eac:	1bdb      	subs	r3, r3, r7
    9eae:	9306      	str	r3, [sp, #24]
    9eb0:	427b      	negs	r3, r7
    9eb2:	930b      	str	r3, [sp, #44]	; 0x2c
    9eb4:	2300      	movs	r3, #0
    9eb6:	930f      	str	r3, [sp, #60]	; 0x3c
    9eb8:	e7c1      	b.n	9e3e <_dtoa_r+0x1be>
    9eba:	2300      	movs	r3, #0
    9ebc:	930e      	str	r3, [sp, #56]	; 0x38
    9ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	dc57      	bgt.n	9f74 <_dtoa_r+0x2f4>
    9ec4:	2301      	movs	r3, #1
    9ec6:	4699      	mov	r9, r3
    9ec8:	461a      	mov	r2, r3
    9eca:	9309      	str	r3, [sp, #36]	; 0x24
    9ecc:	9221      	str	r2, [sp, #132]	; 0x84
    9ece:	e00c      	b.n	9eea <_dtoa_r+0x26a>
    9ed0:	2301      	movs	r3, #1
    9ed2:	e7f3      	b.n	9ebc <_dtoa_r+0x23c>
    9ed4:	2300      	movs	r3, #0
    9ed6:	930e      	str	r3, [sp, #56]	; 0x38
    9ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eda:	18fb      	adds	r3, r7, r3
    9edc:	f103 0901 	add.w	r9, r3, #1
    9ee0:	9309      	str	r3, [sp, #36]	; 0x24
    9ee2:	464b      	mov	r3, r9
    9ee4:	2b01      	cmp	r3, #1
    9ee6:	bfb8      	it	lt
    9ee8:	2301      	movlt	r3, #1
    9eea:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9eee:	2100      	movs	r1, #0
    9ef0:	2204      	movs	r2, #4
    9ef2:	f102 0514 	add.w	r5, r2, #20
    9ef6:	429d      	cmp	r5, r3
    9ef8:	d940      	bls.n	9f7c <_dtoa_r+0x2fc>
    9efa:	6041      	str	r1, [r0, #4]
    9efc:	4658      	mov	r0, fp
    9efe:	f01b fcf1 	bl	258e4 <_Balloc>
    9f02:	9008      	str	r0, [sp, #32]
    9f04:	2800      	cmp	r0, #0
    9f06:	d13c      	bne.n	9f82 <_dtoa_r+0x302>
    9f08:	4b12      	ldr	r3, [pc, #72]	; (9f54 <_dtoa_r+0x2d4>)
    9f0a:	4602      	mov	r2, r0
    9f0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f10:	e6ca      	b.n	9ca8 <_dtoa_r+0x28>
    9f12:	2301      	movs	r3, #1
    9f14:	e7df      	b.n	9ed6 <_dtoa_r+0x256>
    9f16:	bf00      	nop
    9f18:	636f4361 	.word	0x636f4361
    9f1c:	3fd287a7 	.word	0x3fd287a7
    9f20:	8b60c8b3 	.word	0x8b60c8b3
    9f24:	3fc68a28 	.word	0x3fc68a28
    9f28:	509f79fb 	.word	0x509f79fb
    9f2c:	3fd34413 	.word	0x3fd34413
    9f30:	00033beb 	.word	0x00033beb
    9f34:	00033c02 	.word	0x00033c02
    9f38:	7ff00000 	.word	0x7ff00000
    9f3c:	00033be7 	.word	0x00033be7
    9f40:	00033bde 	.word	0x00033bde
    9f44:	00033a13 	.word	0x00033a13
    9f48:	00033a12 	.word	0x00033a12
    9f4c:	3ff80000 	.word	0x3ff80000
    9f50:	0002cf40 	.word	0x0002cf40
    9f54:	00033c76 	.word	0x00033c76
    9f58:	2401      	movs	r4, #1
    9f5a:	2300      	movs	r3, #0
    9f5c:	940e      	str	r4, [sp, #56]	; 0x38
    9f5e:	9320      	str	r3, [sp, #128]	; 0x80
    9f60:	f04f 33ff 	mov.w	r3, #4294967295
    9f64:	2200      	movs	r2, #0
    9f66:	4699      	mov	r9, r3
    9f68:	9309      	str	r3, [sp, #36]	; 0x24
    9f6a:	2312      	movs	r3, #18
    9f6c:	e7ae      	b.n	9ecc <_dtoa_r+0x24c>
    9f6e:	2301      	movs	r3, #1
    9f70:	930e      	str	r3, [sp, #56]	; 0x38
    9f72:	e7f5      	b.n	9f60 <_dtoa_r+0x2e0>
    9f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f76:	4699      	mov	r9, r3
    9f78:	9309      	str	r3, [sp, #36]	; 0x24
    9f7a:	e7b6      	b.n	9eea <_dtoa_r+0x26a>
    9f7c:	3101      	adds	r1, #1
    9f7e:	0052      	lsls	r2, r2, #1
    9f80:	e7b7      	b.n	9ef2 <_dtoa_r+0x272>
    9f82:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9f86:	f1b9 0f0e 	cmp.w	r9, #14
    9f8a:	9a08      	ldr	r2, [sp, #32]
    9f8c:	601a      	str	r2, [r3, #0]
    9f8e:	d86f      	bhi.n	a070 <_dtoa_r+0x3f0>
    9f90:	2c00      	cmp	r4, #0
    9f92:	d06d      	beq.n	a070 <_dtoa_r+0x3f0>
    9f94:	2f00      	cmp	r7, #0
    9f96:	dd36      	ble.n	a006 <_dtoa_r+0x386>
    9f98:	f007 020f 	and.w	r2, r7, #15
    9f9c:	4ba0      	ldr	r3, [pc, #640]	; (a220 <_dtoa_r+0x5a0>)
    9f9e:	05f8      	lsls	r0, r7, #23
    9fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9fa4:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fa8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fac:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fb0:	d517      	bpl.n	9fe2 <_dtoa_r+0x362>
    9fb2:	4b9c      	ldr	r3, [pc, #624]	; (a224 <_dtoa_r+0x5a4>)
    9fb4:	f004 040f 	and.w	r4, r4, #15
    9fb8:	f04f 0803 	mov.w	r8, #3
    9fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fc4:	f7fe fbae 	bl	8724 <__aeabi_ddiv>
    9fc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fcc:	4d95      	ldr	r5, [pc, #596]	; (a224 <_dtoa_r+0x5a4>)
    9fce:	b95c      	cbnz	r4, 9fe8 <_dtoa_r+0x368>
    9fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9fd8:	f7fe fba4 	bl	8724 <__aeabi_ddiv>
    9fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fe0:	e02b      	b.n	a03a <_dtoa_r+0x3ba>
    9fe2:	f04f 0802 	mov.w	r8, #2
    9fe6:	e7f1      	b.n	9fcc <_dtoa_r+0x34c>
    9fe8:	07e1      	lsls	r1, r4, #31
    9fea:	d509      	bpl.n	a000 <_dtoa_r+0x380>
    9fec:	f108 0801 	add.w	r8, r8, #1
    9ff0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9ff4:	e9d5 2300 	ldrd	r2, r3, [r5]
    9ff8:	f7fe fa6a 	bl	84d0 <__aeabi_dmul>
    9ffc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a000:	1064      	asrs	r4, r4, #1
    a002:	3508      	adds	r5, #8
    a004:	e7e3      	b.n	9fce <_dtoa_r+0x34e>
    a006:	f000 8107 	beq.w	a218 <_dtoa_r+0x598>
    a00a:	427c      	negs	r4, r7
    a00c:	4b84      	ldr	r3, [pc, #528]	; (a220 <_dtoa_r+0x5a0>)
    a00e:	4d85      	ldr	r5, [pc, #532]	; (a224 <_dtoa_r+0x5a4>)
    a010:	f04f 0802 	mov.w	r8, #2
    a014:	f004 020f 	and.w	r2, r4, #15
    a018:	1124      	asrs	r4, r4, #4
    a01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a01e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a022:	e9d3 2300 	ldrd	r2, r3, [r3]
    a026:	f7fe fa53 	bl	84d0 <__aeabi_dmul>
    a02a:	2300      	movs	r3, #0
    a02c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a030:	2c00      	cmp	r4, #0
    a032:	f040 80e5 	bne.w	a200 <_dtoa_r+0x580>
    a036:	2b00      	cmp	r3, #0
    a038:	d1d0      	bne.n	9fdc <_dtoa_r+0x35c>
    a03a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a03c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a040:	2b00      	cmp	r3, #0
    a042:	f000 814c 	beq.w	a2de <_dtoa_r+0x65e>
    a046:	2200      	movs	r2, #0
    a048:	4b77      	ldr	r3, [pc, #476]	; (a228 <_dtoa_r+0x5a8>)
    a04a:	4620      	mov	r0, r4
    a04c:	4629      	mov	r1, r5
    a04e:	f7fe ffc9 	bl	8fe4 <__aeabi_dcmplt>
    a052:	2800      	cmp	r0, #0
    a054:	f000 8143 	beq.w	a2de <_dtoa_r+0x65e>
    a058:	f1b9 0f00 	cmp.w	r9, #0
    a05c:	f000 813f 	beq.w	a2de <_dtoa_r+0x65e>
    a060:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a062:	2b00      	cmp	r3, #0
    a064:	f300 80e4 	bgt.w	a230 <_dtoa_r+0x5b0>
    a068:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a06c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a070:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a072:	2b00      	cmp	r3, #0
    a074:	db02      	blt.n	a07c <_dtoa_r+0x3fc>
    a076:	2f0e      	cmp	r7, #14
    a078:	f340 8242 	ble.w	a500 <_dtoa_r+0x880>
    a07c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a07e:	2a00      	cmp	r2, #0
    a080:	f040 8267 	bne.w	a552 <_dtoa_r+0x8d2>
    a084:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a086:	2500      	movs	r5, #0
    a088:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a08c:	f1b8 0f00 	cmp.w	r8, #0
    a090:	d00d      	beq.n	a0ae <_dtoa_r+0x42e>
    a092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a094:	2b00      	cmp	r3, #0
    a096:	dd0a      	ble.n	a0ae <_dtoa_r+0x42e>
    a098:	4543      	cmp	r3, r8
    a09a:	9a06      	ldr	r2, [sp, #24]
    a09c:	bfa8      	it	ge
    a09e:	4643      	movge	r3, r8
    a0a0:	1ad2      	subs	r2, r2, r3
    a0a2:	eba8 0803 	sub.w	r8, r8, r3
    a0a6:	9206      	str	r2, [sp, #24]
    a0a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0aa:	1ad3      	subs	r3, r2, r3
    a0ac:	930a      	str	r3, [sp, #40]	; 0x28
    a0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0b0:	b30b      	cbz	r3, a0f6 <_dtoa_r+0x476>
    a0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	f000 82a6 	beq.w	a606 <_dtoa_r+0x986>
    a0ba:	2c00      	cmp	r4, #0
    a0bc:	f000 82a1 	beq.w	a602 <_dtoa_r+0x982>
    a0c0:	4629      	mov	r1, r5
    a0c2:	4622      	mov	r2, r4
    a0c4:	4658      	mov	r0, fp
    a0c6:	f01b fd77 	bl	25bb8 <__pow5mult>
    a0ca:	9a03      	ldr	r2, [sp, #12]
    a0cc:	4601      	mov	r1, r0
    a0ce:	4605      	mov	r5, r0
    a0d0:	4658      	mov	r0, fp
    a0d2:	f01b fcc7 	bl	25a64 <__multiply>
    a0d6:	9903      	ldr	r1, [sp, #12]
    a0d8:	4606      	mov	r6, r0
    a0da:	4658      	mov	r0, fp
    a0dc:	f01b fc42 	bl	25964 <_Bfree>
    a0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0e2:	1b1b      	subs	r3, r3, r4
    a0e4:	930b      	str	r3, [sp, #44]	; 0x2c
    a0e6:	f000 8291 	beq.w	a60c <_dtoa_r+0x98c>
    a0ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a0ec:	4631      	mov	r1, r6
    a0ee:	4658      	mov	r0, fp
    a0f0:	f01b fd62 	bl	25bb8 <__pow5mult>
    a0f4:	9003      	str	r0, [sp, #12]
    a0f6:	2101      	movs	r1, #1
    a0f8:	4658      	mov	r0, fp
    a0fa:	f01b fc9d 	bl	25a38 <__i2b>
    a0fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a100:	4604      	mov	r4, r0
    a102:	2b00      	cmp	r3, #0
    a104:	f000 8284 	beq.w	a610 <_dtoa_r+0x990>
    a108:	461a      	mov	r2, r3
    a10a:	4601      	mov	r1, r0
    a10c:	4658      	mov	r0, fp
    a10e:	f01b fd53 	bl	25bb8 <__pow5mult>
    a112:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a114:	4604      	mov	r4, r0
    a116:	2b01      	cmp	r3, #1
    a118:	dc03      	bgt.n	a122 <_dtoa_r+0x4a2>
    a11a:	9b04      	ldr	r3, [sp, #16]
    a11c:	2b00      	cmp	r3, #0
    a11e:	f000 827c 	beq.w	a61a <_dtoa_r+0x99a>
    a122:	2600      	movs	r6, #0
    a124:	6923      	ldr	r3, [r4, #16]
    a126:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a12a:	6918      	ldr	r0, [r3, #16]
    a12c:	f022 f8a3 	bl	2c276 <__hi0bits>
    a130:	f1c0 0020 	rsb	r0, r0, #32
    a134:	960f      	str	r6, [sp, #60]	; 0x3c
    a136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a138:	4418      	add	r0, r3
    a13a:	f010 001f 	ands.w	r0, r0, #31
    a13e:	f000 8291 	beq.w	a664 <_dtoa_r+0x9e4>
    a142:	f1c0 0320 	rsb	r3, r0, #32
    a146:	2b04      	cmp	r3, #4
    a148:	f340 8281 	ble.w	a64e <_dtoa_r+0x9ce>
    a14c:	f1c0 001c 	rsb	r0, r0, #28
    a150:	9b06      	ldr	r3, [sp, #24]
    a152:	4403      	add	r3, r0
    a154:	4480      	add	r8, r0
    a156:	9306      	str	r3, [sp, #24]
    a158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a15a:	4403      	add	r3, r0
    a15c:	930a      	str	r3, [sp, #40]	; 0x28
    a15e:	9b06      	ldr	r3, [sp, #24]
    a160:	2b00      	cmp	r3, #0
    a162:	dd05      	ble.n	a170 <_dtoa_r+0x4f0>
    a164:	461a      	mov	r2, r3
    a166:	9903      	ldr	r1, [sp, #12]
    a168:	4658      	mov	r0, fp
    a16a:	f01b fd7f 	bl	25c6c <__lshift>
    a16e:	9003      	str	r0, [sp, #12]
    a170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a172:	2b00      	cmp	r3, #0
    a174:	dd05      	ble.n	a182 <_dtoa_r+0x502>
    a176:	4621      	mov	r1, r4
    a178:	461a      	mov	r2, r3
    a17a:	4658      	mov	r0, fp
    a17c:	f01b fd76 	bl	25c6c <__lshift>
    a180:	4604      	mov	r4, r0
    a182:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a184:	2b00      	cmp	r3, #0
    a186:	f000 8276 	beq.w	a676 <_dtoa_r+0x9f6>
    a18a:	4621      	mov	r1, r4
    a18c:	9803      	ldr	r0, [sp, #12]
    a18e:	f022 f8c1 	bl	2c314 <__mcmp>
    a192:	2800      	cmp	r0, #0
    a194:	f280 826f 	bge.w	a676 <_dtoa_r+0x9f6>
    a198:	2300      	movs	r3, #0
    a19a:	220a      	movs	r2, #10
    a19c:	9903      	ldr	r1, [sp, #12]
    a19e:	4658      	mov	r0, fp
    a1a0:	f01b fc02 	bl	259a8 <__multadd>
    a1a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a1a6:	1e7e      	subs	r6, r7, #1
    a1a8:	9003      	str	r0, [sp, #12]
    a1aa:	2b00      	cmp	r3, #0
    a1ac:	f000 825c 	beq.w	a668 <_dtoa_r+0x9e8>
    a1b0:	2300      	movs	r3, #0
    a1b2:	4629      	mov	r1, r5
    a1b4:	220a      	movs	r2, #10
    a1b6:	4658      	mov	r0, fp
    a1b8:	f01b fbf6 	bl	259a8 <__multadd>
    a1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1be:	4605      	mov	r5, r0
    a1c0:	2b00      	cmp	r3, #0
    a1c2:	dc03      	bgt.n	a1cc <_dtoa_r+0x54c>
    a1c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1c6:	2b02      	cmp	r3, #2
    a1c8:	f300 825e 	bgt.w	a688 <_dtoa_r+0xa08>
    a1cc:	f1b8 0f00 	cmp.w	r8, #0
    a1d0:	dd05      	ble.n	a1de <_dtoa_r+0x55e>
    a1d2:	4629      	mov	r1, r5
    a1d4:	4642      	mov	r2, r8
    a1d6:	4658      	mov	r0, fp
    a1d8:	f01b fd48 	bl	25c6c <__lshift>
    a1dc:	4605      	mov	r5, r0
    a1de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1e0:	2b00      	cmp	r3, #0
    a1e2:	f000 82d0 	beq.w	a786 <_dtoa_r+0xb06>
    a1e6:	6869      	ldr	r1, [r5, #4]
    a1e8:	4658      	mov	r0, fp
    a1ea:	f01b fb7b 	bl	258e4 <_Balloc>
    a1ee:	4607      	mov	r7, r0
    a1f0:	2800      	cmp	r0, #0
    a1f2:	f040 827f 	bne.w	a6f4 <_dtoa_r+0xa74>
    a1f6:	4b0d      	ldr	r3, [pc, #52]	; (a22c <_dtoa_r+0x5ac>)
    a1f8:	4602      	mov	r2, r0
    a1fa:	f240 21ea 	movw	r1, #746	; 0x2ea
    a1fe:	e553      	b.n	9ca8 <_dtoa_r+0x28>
    a200:	07e2      	lsls	r2, r4, #31
    a202:	d506      	bpl.n	a212 <_dtoa_r+0x592>
    a204:	f108 0801 	add.w	r8, r8, #1
    a208:	e9d5 2300 	ldrd	r2, r3, [r5]
    a20c:	f7fe f960 	bl	84d0 <__aeabi_dmul>
    a210:	2301      	movs	r3, #1
    a212:	1064      	asrs	r4, r4, #1
    a214:	3508      	adds	r5, #8
    a216:	e70b      	b.n	a030 <_dtoa_r+0x3b0>
    a218:	f04f 0802 	mov.w	r8, #2
    a21c:	e70d      	b.n	a03a <_dtoa_r+0x3ba>
    a21e:	bf00      	nop
    a220:	0002cf40 	.word	0x0002cf40
    a224:	0002cf18 	.word	0x0002cf18
    a228:	3ff00000 	.word	0x3ff00000
    a22c:	00033c76 	.word	0x00033c76
    a230:	4620      	mov	r0, r4
    a232:	2200      	movs	r2, #0
    a234:	4bac      	ldr	r3, [pc, #688]	; (a4e8 <_dtoa_r+0x868>)
    a236:	4629      	mov	r1, r5
    a238:	f7fe f94a 	bl	84d0 <__aeabi_dmul>
    a23c:	1e7e      	subs	r6, r7, #1
    a23e:	f108 0801 	add.w	r8, r8, #1
    a242:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a244:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a248:	4640      	mov	r0, r8
    a24a:	f7fe f8d7 	bl	83fc <__aeabi_i2d>
    a24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a252:	f7fe f93d 	bl	84d0 <__aeabi_dmul>
    a256:	4ba5      	ldr	r3, [pc, #660]	; (a4ec <_dtoa_r+0x86c>)
    a258:	2200      	movs	r2, #0
    a25a:	f7fd ff83 	bl	8164 <__adddf3>
    a25e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a262:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a266:	9311      	str	r3, [sp, #68]	; 0x44
    a268:	2c00      	cmp	r4, #0
    a26a:	d13b      	bne.n	a2e4 <_dtoa_r+0x664>
    a26c:	2200      	movs	r2, #0
    a26e:	4ba0      	ldr	r3, [pc, #640]	; (a4f0 <_dtoa_r+0x870>)
    a270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a274:	f7fd ff74 	bl	8160 <__aeabi_dsub>
    a278:	4602      	mov	r2, r0
    a27a:	460b      	mov	r3, r1
    a27c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a284:	f7fe fecc 	bl	9020 <__aeabi_dcmpgt>
    a288:	2800      	cmp	r0, #0
    a28a:	f040 8157 	bne.w	a53c <_dtoa_r+0x8bc>
    a28e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a29a:	f7fe fea3 	bl	8fe4 <__aeabi_dcmplt>
    a29e:	2800      	cmp	r0, #0
    a2a0:	f43f aee2 	beq.w	a068 <_dtoa_r+0x3e8>
    a2a4:	2400      	movs	r4, #0
    a2a6:	4625      	mov	r5, r4
    a2a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2aa:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2ae:	43de      	mvns	r6, r3
    a2b0:	f04f 0800 	mov.w	r8, #0
    a2b4:	4621      	mov	r1, r4
    a2b6:	4658      	mov	r0, fp
    a2b8:	f01b fb54 	bl	25964 <_Bfree>
    a2bc:	2d00      	cmp	r5, #0
    a2be:	f000 80a9 	beq.w	a414 <_dtoa_r+0x794>
    a2c2:	f1b8 0f00 	cmp.w	r8, #0
    a2c6:	d005      	beq.n	a2d4 <_dtoa_r+0x654>
    a2c8:	45a8      	cmp	r8, r5
    a2ca:	d003      	beq.n	a2d4 <_dtoa_r+0x654>
    a2cc:	4641      	mov	r1, r8
    a2ce:	4658      	mov	r0, fp
    a2d0:	f01b fb48 	bl	25964 <_Bfree>
    a2d4:	4629      	mov	r1, r5
    a2d6:	4658      	mov	r0, fp
    a2d8:	f01b fb44 	bl	25964 <_Bfree>
    a2dc:	e09a      	b.n	a414 <_dtoa_r+0x794>
    a2de:	463e      	mov	r6, r7
    a2e0:	464c      	mov	r4, r9
    a2e2:	e7b1      	b.n	a248 <_dtoa_r+0x5c8>
    a2e4:	4b83      	ldr	r3, [pc, #524]	; (a4f4 <_dtoa_r+0x874>)
    a2e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a2ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a2ee:	9b08      	ldr	r3, [sp, #32]
    a2f0:	441c      	add	r4, r3
    a2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d04a      	beq.n	a38e <_dtoa_r+0x70e>
    a2f8:	4602      	mov	r2, r0
    a2fa:	460b      	mov	r3, r1
    a2fc:	2000      	movs	r0, #0
    a2fe:	497e      	ldr	r1, [pc, #504]	; (a4f8 <_dtoa_r+0x878>)
    a300:	f7fe fa10 	bl	8724 <__aeabi_ddiv>
    a304:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a308:	f7fd ff2a 	bl	8160 <__aeabi_dsub>
    a30c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a310:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a318:	f7fe fea2 	bl	9060 <__aeabi_d2iz>
    a31c:	4605      	mov	r5, r0
    a31e:	f7fe f86d 	bl	83fc <__aeabi_i2d>
    a322:	4602      	mov	r2, r0
    a324:	3530      	adds	r5, #48	; 0x30
    a326:	460b      	mov	r3, r1
    a328:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a32c:	f7fd ff18 	bl	8160 <__aeabi_dsub>
    a330:	f80a 5b01 	strb.w	r5, [sl], #1
    a334:	4602      	mov	r2, r0
    a336:	460b      	mov	r3, r1
    a338:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a33c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a340:	f7fe fe6e 	bl	9020 <__aeabi_dcmpgt>
    a344:	2800      	cmp	r0, #0
    a346:	d165      	bne.n	a414 <_dtoa_r+0x794>
    a348:	2000      	movs	r0, #0
    a34a:	496c      	ldr	r1, [pc, #432]	; (a4fc <_dtoa_r+0x87c>)
    a34c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a350:	f7fd ff06 	bl	8160 <__aeabi_dsub>
    a354:	4602      	mov	r2, r0
    a356:	460b      	mov	r3, r1
    a358:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a35c:	f7fe fe60 	bl	9020 <__aeabi_dcmpgt>
    a360:	2800      	cmp	r0, #0
    a362:	f040 810d 	bne.w	a580 <_dtoa_r+0x900>
    a366:	45a2      	cmp	sl, r4
    a368:	f000 80ea 	beq.w	a540 <_dtoa_r+0x8c0>
    a36c:	2200      	movs	r2, #0
    a36e:	4b5e      	ldr	r3, [pc, #376]	; (a4e8 <_dtoa_r+0x868>)
    a370:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a374:	f7fe f8ac 	bl	84d0 <__aeabi_dmul>
    a378:	2200      	movs	r2, #0
    a37a:	4b5b      	ldr	r3, [pc, #364]	; (a4e8 <_dtoa_r+0x868>)
    a37c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a384:	f7fe f8a4 	bl	84d0 <__aeabi_dmul>
    a388:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a38c:	e7c2      	b.n	a314 <_dtoa_r+0x694>
    a38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a392:	f7fe f89d 	bl	84d0 <__aeabi_dmul>
    a396:	46a0      	mov	r8, r4
    a398:	f8dd a020 	ldr.w	sl, [sp, #32]
    a39c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a3a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3a4:	f7fe fe5c 	bl	9060 <__aeabi_d2iz>
    a3a8:	4605      	mov	r5, r0
    a3aa:	f7fe f827 	bl	83fc <__aeabi_i2d>
    a3ae:	4602      	mov	r2, r0
    a3b0:	3530      	adds	r5, #48	; 0x30
    a3b2:	460b      	mov	r3, r1
    a3b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3b8:	f7fd fed2 	bl	8160 <__aeabi_dsub>
    a3bc:	f80a 5b01 	strb.w	r5, [sl], #1
    a3c0:	4602      	mov	r2, r0
    a3c2:	460b      	mov	r3, r1
    a3c4:	45a2      	cmp	sl, r4
    a3c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3ca:	f04f 0200 	mov.w	r2, #0
    a3ce:	d123      	bne.n	a418 <_dtoa_r+0x798>
    a3d0:	4b49      	ldr	r3, [pc, #292]	; (a4f8 <_dtoa_r+0x878>)
    a3d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3d6:	f7fd fec5 	bl	8164 <__adddf3>
    a3da:	4602      	mov	r2, r0
    a3dc:	460b      	mov	r3, r1
    a3de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3e2:	f7fe fe1d 	bl	9020 <__aeabi_dcmpgt>
    a3e6:	2800      	cmp	r0, #0
    a3e8:	f040 80ca 	bne.w	a580 <_dtoa_r+0x900>
    a3ec:	2000      	movs	r0, #0
    a3ee:	4942      	ldr	r1, [pc, #264]	; (a4f8 <_dtoa_r+0x878>)
    a3f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3f4:	f7fd feb4 	bl	8160 <__aeabi_dsub>
    a3f8:	4602      	mov	r2, r0
    a3fa:	460b      	mov	r3, r1
    a3fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a400:	f7fe fdf0 	bl	8fe4 <__aeabi_dcmplt>
    a404:	b170      	cbz	r0, a424 <_dtoa_r+0x7a4>
    a406:	46c2      	mov	sl, r8
    a408:	f108 38ff 	add.w	r8, r8, #4294967295
    a40c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a410:	2b30      	cmp	r3, #48	; 0x30
    a412:	d0f8      	beq.n	a406 <_dtoa_r+0x786>
    a414:	4637      	mov	r7, r6
    a416:	e055      	b.n	a4c4 <_dtoa_r+0x844>
    a418:	4b33      	ldr	r3, [pc, #204]	; (a4e8 <_dtoa_r+0x868>)
    a41a:	f7fe f859 	bl	84d0 <__aeabi_dmul>
    a41e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a422:	e7bd      	b.n	a3a0 <_dtoa_r+0x720>
    a424:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a428:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a42c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a42e:	2b00      	cmp	r3, #0
    a430:	f6ff ae28 	blt.w	a084 <_dtoa_r+0x404>
    a434:	2f0e      	cmp	r7, #14
    a436:	f73f ae25 	bgt.w	a084 <_dtoa_r+0x404>
    a43a:	4b2e      	ldr	r3, [pc, #184]	; (a4f4 <_dtoa_r+0x874>)
    a43c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a440:	e9d3 3400 	ldrd	r3, r4, [r3]
    a444:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a448:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a44a:	2b00      	cmp	r3, #0
    a44c:	da02      	bge.n	a454 <_dtoa_r+0x7d4>
    a44e:	f1b9 0f00 	cmp.w	r9, #0
    a452:	d064      	beq.n	a51e <_dtoa_r+0x89e>
    a454:	f8dd a020 	ldr.w	sl, [sp, #32]
    a458:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a45c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a460:	4620      	mov	r0, r4
    a462:	4629      	mov	r1, r5
    a464:	f7fe f95e 	bl	8724 <__aeabi_ddiv>
    a468:	f7fe fdfa 	bl	9060 <__aeabi_d2iz>
    a46c:	4606      	mov	r6, r0
    a46e:	f7fd ffc5 	bl	83fc <__aeabi_i2d>
    a472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a476:	f7fe f82b 	bl	84d0 <__aeabi_dmul>
    a47a:	4602      	mov	r2, r0
    a47c:	4620      	mov	r0, r4
    a47e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a482:	460b      	mov	r3, r1
    a484:	4629      	mov	r1, r5
    a486:	f7fd fe6b 	bl	8160 <__aeabi_dsub>
    a48a:	f80a 4b01 	strb.w	r4, [sl], #1
    a48e:	9c08      	ldr	r4, [sp, #32]
    a490:	4602      	mov	r2, r0
    a492:	460b      	mov	r3, r1
    a494:	ebaa 0404 	sub.w	r4, sl, r4
    a498:	45a1      	cmp	r9, r4
    a49a:	f040 8082 	bne.w	a5a2 <_dtoa_r+0x922>
    a49e:	f7fd fe61 	bl	8164 <__adddf3>
    a4a2:	4604      	mov	r4, r0
    a4a4:	460d      	mov	r5, r1
    a4a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4aa:	f7fe fdb9 	bl	9020 <__aeabi_dcmpgt>
    a4ae:	2800      	cmp	r0, #0
    a4b0:	d165      	bne.n	a57e <_dtoa_r+0x8fe>
    a4b2:	4620      	mov	r0, r4
    a4b4:	4629      	mov	r1, r5
    a4b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4ba:	f7fe fd89 	bl	8fd0 <__aeabi_dcmpeq>
    a4be:	b108      	cbz	r0, a4c4 <_dtoa_r+0x844>
    a4c0:	07f3      	lsls	r3, r6, #31
    a4c2:	d45c      	bmi.n	a57e <_dtoa_r+0x8fe>
    a4c4:	9903      	ldr	r1, [sp, #12]
    a4c6:	4658      	mov	r0, fp
    a4c8:	f01b fa4c 	bl	25964 <_Bfree>
    a4cc:	2300      	movs	r3, #0
    a4ce:	3701      	adds	r7, #1
    a4d0:	f88a 3000 	strb.w	r3, [sl]
    a4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4d6:	601f      	str	r7, [r3, #0]
    a4d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a4da:	2b00      	cmp	r3, #0
    a4dc:	f43f ac1c 	beq.w	9d18 <_dtoa_r+0x98>
    a4e0:	f8c3 a000 	str.w	sl, [r3]
    a4e4:	e418      	b.n	9d18 <_dtoa_r+0x98>
    a4e6:	bf00      	nop
    a4e8:	40240000 	.word	0x40240000
    a4ec:	401c0000 	.word	0x401c0000
    a4f0:	40140000 	.word	0x40140000
    a4f4:	0002cf40 	.word	0x0002cf40
    a4f8:	3fe00000 	.word	0x3fe00000
    a4fc:	3ff00000 	.word	0x3ff00000
    a500:	4ba2      	ldr	r3, [pc, #648]	; (a78c <_dtoa_r+0xb0c>)
    a502:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a506:	e9d3 3400 	ldrd	r3, r4, [r3]
    a50a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a50e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a510:	2b00      	cmp	r3, #0
    a512:	da9f      	bge.n	a454 <_dtoa_r+0x7d4>
    a514:	f1b9 0f00 	cmp.w	r9, #0
    a518:	dc9c      	bgt.n	a454 <_dtoa_r+0x7d4>
    a51a:	f47f aec3 	bne.w	a2a4 <_dtoa_r+0x624>
    a51e:	2200      	movs	r2, #0
    a520:	4b9b      	ldr	r3, [pc, #620]	; (a790 <_dtoa_r+0xb10>)
    a522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a526:	f7fd ffd3 	bl	84d0 <__aeabi_dmul>
    a52a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a52e:	f7fe fd6d 	bl	900c <__aeabi_dcmpge>
    a532:	4604      	mov	r4, r0
    a534:	2800      	cmp	r0, #0
    a536:	f47f aeb5 	bne.w	a2a4 <_dtoa_r+0x624>
    a53a:	463e      	mov	r6, r7
    a53c:	4625      	mov	r5, r4
    a53e:	e0b4      	b.n	a6aa <_dtoa_r+0xa2a>
    a540:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a544:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a548:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a54a:	2b00      	cmp	r3, #0
    a54c:	db01      	blt.n	a552 <_dtoa_r+0x8d2>
    a54e:	2f0e      	cmp	r7, #14
    a550:	ddd6      	ble.n	a500 <_dtoa_r+0x880>
    a552:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a554:	2a01      	cmp	r2, #1
    a556:	dc36      	bgt.n	a5c6 <_dtoa_r+0x946>
    a558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a55a:	b382      	cbz	r2, a5be <_dtoa_r+0x93e>
    a55c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a560:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a562:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a566:	9a06      	ldr	r2, [sp, #24]
    a568:	2101      	movs	r1, #1
    a56a:	4658      	mov	r0, fp
    a56c:	441a      	add	r2, r3
    a56e:	9206      	str	r2, [sp, #24]
    a570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a572:	441a      	add	r2, r3
    a574:	920a      	str	r2, [sp, #40]	; 0x28
    a576:	f01b fa5f 	bl	25a38 <__i2b>
    a57a:	4605      	mov	r5, r0
    a57c:	e586      	b.n	a08c <_dtoa_r+0x40c>
    a57e:	463e      	mov	r6, r7
    a580:	4653      	mov	r3, sl
    a582:	469a      	mov	sl, r3
    a584:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a588:	2a39      	cmp	r2, #57	; 0x39
    a58a:	d106      	bne.n	a59a <_dtoa_r+0x91a>
    a58c:	9a08      	ldr	r2, [sp, #32]
    a58e:	429a      	cmp	r2, r3
    a590:	d1f7      	bne.n	a582 <_dtoa_r+0x902>
    a592:	2230      	movs	r2, #48	; 0x30
    a594:	9908      	ldr	r1, [sp, #32]
    a596:	3601      	adds	r6, #1
    a598:	700a      	strb	r2, [r1, #0]
    a59a:	781a      	ldrb	r2, [r3, #0]
    a59c:	3201      	adds	r2, #1
    a59e:	701a      	strb	r2, [r3, #0]
    a5a0:	e738      	b.n	a414 <_dtoa_r+0x794>
    a5a2:	2200      	movs	r2, #0
    a5a4:	4b7b      	ldr	r3, [pc, #492]	; (a794 <_dtoa_r+0xb14>)
    a5a6:	f7fd ff93 	bl	84d0 <__aeabi_dmul>
    a5aa:	2200      	movs	r2, #0
    a5ac:	2300      	movs	r3, #0
    a5ae:	4604      	mov	r4, r0
    a5b0:	460d      	mov	r5, r1
    a5b2:	f7fe fd0d 	bl	8fd0 <__aeabi_dcmpeq>
    a5b6:	2800      	cmp	r0, #0
    a5b8:	f43f af50 	beq.w	a45c <_dtoa_r+0x7dc>
    a5bc:	e782      	b.n	a4c4 <_dtoa_r+0x844>
    a5be:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5c4:	e7cc      	b.n	a560 <_dtoa_r+0x8e0>
    a5c6:	f109 34ff 	add.w	r4, r9, #4294967295
    a5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5cc:	42a3      	cmp	r3, r4
    a5ce:	db08      	blt.n	a5e2 <_dtoa_r+0x962>
    a5d0:	f1b9 0f00 	cmp.w	r9, #0
    a5d4:	eba3 0404 	sub.w	r4, r3, r4
    a5d8:	db0e      	blt.n	a5f8 <_dtoa_r+0x978>
    a5da:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5de:	464b      	mov	r3, r9
    a5e0:	e7c1      	b.n	a566 <_dtoa_r+0x8e6>
    a5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a5e6:	1ae3      	subs	r3, r4, r3
    a5e8:	940b      	str	r4, [sp, #44]	; 0x2c
    a5ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5ee:	2400      	movs	r4, #0
    a5f0:	441a      	add	r2, r3
    a5f2:	464b      	mov	r3, r9
    a5f4:	920f      	str	r2, [sp, #60]	; 0x3c
    a5f6:	e7b6      	b.n	a566 <_dtoa_r+0x8e6>
    a5f8:	9b06      	ldr	r3, [sp, #24]
    a5fa:	eba3 0809 	sub.w	r8, r3, r9
    a5fe:	2300      	movs	r3, #0
    a600:	e7b1      	b.n	a566 <_dtoa_r+0x8e6>
    a602:	9e03      	ldr	r6, [sp, #12]
    a604:	e571      	b.n	a0ea <_dtoa_r+0x46a>
    a606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a608:	9903      	ldr	r1, [sp, #12]
    a60a:	e570      	b.n	a0ee <_dtoa_r+0x46e>
    a60c:	9603      	str	r6, [sp, #12]
    a60e:	e572      	b.n	a0f6 <_dtoa_r+0x476>
    a610:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a612:	2b01      	cmp	r3, #1
    a614:	dc17      	bgt.n	a646 <_dtoa_r+0x9c6>
    a616:	9b04      	ldr	r3, [sp, #16]
    a618:	b9ab      	cbnz	r3, a646 <_dtoa_r+0x9c6>
    a61a:	9b05      	ldr	r3, [sp, #20]
    a61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a620:	b99b      	cbnz	r3, a64a <_dtoa_r+0x9ca>
    a622:	9b05      	ldr	r3, [sp, #20]
    a624:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a628:	0d36      	lsrs	r6, r6, #20
    a62a:	0536      	lsls	r6, r6, #20
    a62c:	b136      	cbz	r6, a63c <_dtoa_r+0x9bc>
    a62e:	9b06      	ldr	r3, [sp, #24]
    a630:	2601      	movs	r6, #1
    a632:	3301      	adds	r3, #1
    a634:	9306      	str	r3, [sp, #24]
    a636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a638:	3301      	adds	r3, #1
    a63a:	930a      	str	r3, [sp, #40]	; 0x28
    a63c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a63e:	2b00      	cmp	r3, #0
    a640:	f47f ad70 	bne.w	a124 <_dtoa_r+0x4a4>
    a644:	960f      	str	r6, [sp, #60]	; 0x3c
    a646:	2001      	movs	r0, #1
    a648:	e575      	b.n	a136 <_dtoa_r+0x4b6>
    a64a:	2600      	movs	r6, #0
    a64c:	e7f6      	b.n	a63c <_dtoa_r+0x9bc>
    a64e:	f43f ad86 	beq.w	a15e <_dtoa_r+0x4de>
    a652:	331c      	adds	r3, #28
    a654:	9a06      	ldr	r2, [sp, #24]
    a656:	441a      	add	r2, r3
    a658:	4498      	add	r8, r3
    a65a:	9206      	str	r2, [sp, #24]
    a65c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a65e:	441a      	add	r2, r3
    a660:	920a      	str	r2, [sp, #40]	; 0x28
    a662:	e57c      	b.n	a15e <_dtoa_r+0x4de>
    a664:	4603      	mov	r3, r0
    a666:	e7f4      	b.n	a652 <_dtoa_r+0x9d2>
    a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a66a:	2b00      	cmp	r3, #0
    a66c:	dc2b      	bgt.n	a6c6 <_dtoa_r+0xa46>
    a66e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a670:	2b02      	cmp	r3, #2
    a672:	dc09      	bgt.n	a688 <_dtoa_r+0xa08>
    a674:	e027      	b.n	a6c6 <_dtoa_r+0xa46>
    a676:	f1b9 0f00 	cmp.w	r9, #0
    a67a:	dc1d      	bgt.n	a6b8 <_dtoa_r+0xa38>
    a67c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a67e:	2b02      	cmp	r3, #2
    a680:	dd1a      	ble.n	a6b8 <_dtoa_r+0xa38>
    a682:	463e      	mov	r6, r7
    a684:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a688:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a68a:	2b00      	cmp	r3, #0
    a68c:	f47f ae0c 	bne.w	a2a8 <_dtoa_r+0x628>
    a690:	4621      	mov	r1, r4
    a692:	2205      	movs	r2, #5
    a694:	4658      	mov	r0, fp
    a696:	f01b f987 	bl	259a8 <__multadd>
    a69a:	4601      	mov	r1, r0
    a69c:	4604      	mov	r4, r0
    a69e:	9803      	ldr	r0, [sp, #12]
    a6a0:	f021 fe38 	bl	2c314 <__mcmp>
    a6a4:	2800      	cmp	r0, #0
    a6a6:	f77f adff 	ble.w	a2a8 <_dtoa_r+0x628>
    a6aa:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6ae:	2331      	movs	r3, #49	; 0x31
    a6b0:	3601      	adds	r6, #1
    a6b2:	f80a 3b01 	strb.w	r3, [sl], #1
    a6b6:	e5fb      	b.n	a2b0 <_dtoa_r+0x630>
    a6b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6ba:	463e      	mov	r6, r7
    a6bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	f47f ad83 	bne.w	a1cc <_dtoa_r+0x54c>
    a6c6:	9f08      	ldr	r7, [sp, #32]
    a6c8:	4621      	mov	r1, r4
    a6ca:	9803      	ldr	r0, [sp, #12]
    a6cc:	f021 fd11 	bl	2c0f2 <quorem>
    a6d0:	9b08      	ldr	r3, [sp, #32]
    a6d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6d8:	f807 9b01 	strb.w	r9, [r7], #1
    a6dc:	1afb      	subs	r3, r7, r3
    a6de:	429a      	cmp	r2, r3
    a6e0:	f340 80cb 	ble.w	a87a <_dtoa_r+0xbfa>
    a6e4:	2300      	movs	r3, #0
    a6e6:	220a      	movs	r2, #10
    a6e8:	9903      	ldr	r1, [sp, #12]
    a6ea:	4658      	mov	r0, fp
    a6ec:	f01b f95c 	bl	259a8 <__multadd>
    a6f0:	9003      	str	r0, [sp, #12]
    a6f2:	e7e9      	b.n	a6c8 <_dtoa_r+0xa48>
    a6f4:	692a      	ldr	r2, [r5, #16]
    a6f6:	f105 010c 	add.w	r1, r5, #12
    a6fa:	300c      	adds	r0, #12
    a6fc:	3202      	adds	r2, #2
    a6fe:	0092      	lsls	r2, r2, #2
    a700:	f021 fb5c 	bl	2bdbc <memcpy>
    a704:	2201      	movs	r2, #1
    a706:	4639      	mov	r1, r7
    a708:	4658      	mov	r0, fp
    a70a:	f01b faaf 	bl	25c6c <__lshift>
    a70e:	9b08      	ldr	r3, [sp, #32]
    a710:	46a8      	mov	r8, r5
    a712:	4605      	mov	r5, r0
    a714:	f103 0a01 	add.w	sl, r3, #1
    a718:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a71c:	4413      	add	r3, r2
    a71e:	930a      	str	r3, [sp, #40]	; 0x28
    a720:	9b04      	ldr	r3, [sp, #16]
    a722:	f003 0301 	and.w	r3, r3, #1
    a726:	930b      	str	r3, [sp, #44]	; 0x2c
    a728:	f10a 33ff 	add.w	r3, sl, #4294967295
    a72c:	4621      	mov	r1, r4
    a72e:	9803      	ldr	r0, [sp, #12]
    a730:	9306      	str	r3, [sp, #24]
    a732:	f021 fcde 	bl	2c0f2 <quorem>
    a736:	4641      	mov	r1, r8
    a738:	9009      	str	r0, [sp, #36]	; 0x24
    a73a:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a73e:	9803      	ldr	r0, [sp, #12]
    a740:	f021 fde8 	bl	2c314 <__mcmp>
    a744:	462a      	mov	r2, r5
    a746:	4621      	mov	r1, r4
    a748:	4607      	mov	r7, r0
    a74a:	4658      	mov	r0, fp
    a74c:	f01b fafa 	bl	25d44 <__mdiff>
    a750:	68c2      	ldr	r2, [r0, #12]
    a752:	4601      	mov	r1, r0
    a754:	b302      	cbz	r2, a798 <_dtoa_r+0xb18>
    a756:	4658      	mov	r0, fp
    a758:	f01b f904 	bl	25964 <_Bfree>
    a75c:	2f00      	cmp	r7, #0
    a75e:	da3a      	bge.n	a7d6 <_dtoa_r+0xb56>
    a760:	2201      	movs	r2, #1
    a762:	9903      	ldr	r1, [sp, #12]
    a764:	4658      	mov	r0, fp
    a766:	f01b fa81 	bl	25c6c <__lshift>
    a76a:	4621      	mov	r1, r4
    a76c:	9003      	str	r0, [sp, #12]
    a76e:	f021 fdd1 	bl	2c314 <__mcmp>
    a772:	2800      	cmp	r0, #0
    a774:	dc03      	bgt.n	a77e <_dtoa_r+0xafe>
    a776:	d129      	bne.n	a7cc <_dtoa_r+0xb4c>
    a778:	f019 0f01 	tst.w	r9, #1
    a77c:	d026      	beq.n	a7cc <_dtoa_r+0xb4c>
    a77e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a782:	d11d      	bne.n	a7c0 <_dtoa_r+0xb40>
    a784:	e032      	b.n	a7ec <_dtoa_r+0xb6c>
    a786:	4628      	mov	r0, r5
    a788:	e7c1      	b.n	a70e <_dtoa_r+0xa8e>
    a78a:	bf00      	nop
    a78c:	0002cf40 	.word	0x0002cf40
    a790:	40140000 	.word	0x40140000
    a794:	40240000 	.word	0x40240000
    a798:	900e      	str	r0, [sp, #56]	; 0x38
    a79a:	9803      	ldr	r0, [sp, #12]
    a79c:	f021 fdba 	bl	2c314 <__mcmp>
    a7a0:	990e      	ldr	r1, [sp, #56]	; 0x38
    a7a2:	900c      	str	r0, [sp, #48]	; 0x30
    a7a4:	4658      	mov	r0, fp
    a7a6:	f01b f8dd 	bl	25964 <_Bfree>
    a7aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7ac:	bb5a      	cbnz	r2, a806 <_dtoa_r+0xb86>
    a7ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7b0:	b953      	cbnz	r3, a7c8 <_dtoa_r+0xb48>
    a7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7b4:	b943      	cbnz	r3, a7c8 <_dtoa_r+0xb48>
    a7b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7ba:	d017      	beq.n	a7ec <_dtoa_r+0xb6c>
    a7bc:	2f00      	cmp	r7, #0
    a7be:	dd05      	ble.n	a7cc <_dtoa_r+0xb4c>
    a7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7c6:	e001      	b.n	a7cc <_dtoa_r+0xb4c>
    a7c8:	2f00      	cmp	r7, #0
    a7ca:	da2a      	bge.n	a822 <_dtoa_r+0xba2>
    a7cc:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7d0:	f80a 9b01 	strb.w	r9, [sl], #1
    a7d4:	e56e      	b.n	a2b4 <_dtoa_r+0x634>
    a7d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d8:	433b      	orrs	r3, r7
    a7da:	d104      	bne.n	a7e6 <_dtoa_r+0xb66>
    a7dc:	9b04      	ldr	r3, [sp, #16]
    a7de:	f003 0301 	and.w	r3, r3, #1
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d0bc      	beq.n	a760 <_dtoa_r+0xae0>
    a7e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7ea:	d136      	bne.n	a85a <_dtoa_r+0xbda>
    a7ec:	9f06      	ldr	r7, [sp, #24]
    a7ee:	2339      	movs	r3, #57	; 0x39
    a7f0:	f807 3b01 	strb.w	r3, [r7], #1
    a7f4:	46ba      	mov	sl, r7
    a7f6:	3f01      	subs	r7, #1
    a7f8:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a7fc:	2b39      	cmp	r3, #57	; 0x39
    a7fe:	d05a      	beq.n	a8b6 <_dtoa_r+0xc36>
    a800:	3301      	adds	r3, #1
    a802:	703b      	strb	r3, [r7, #0]
    a804:	e556      	b.n	a2b4 <_dtoa_r+0x634>
    a806:	2f00      	cmp	r7, #0
    a808:	db06      	blt.n	a818 <_dtoa_r+0xb98>
    a80a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a80c:	433b      	orrs	r3, r7
    a80e:	d106      	bne.n	a81e <_dtoa_r+0xb9e>
    a810:	9b04      	ldr	r3, [sp, #16]
    a812:	f003 0301 	and.w	r3, r3, #1
    a816:	b913      	cbnz	r3, a81e <_dtoa_r+0xb9e>
    a818:	2a00      	cmp	r2, #0
    a81a:	dca1      	bgt.n	a760 <_dtoa_r+0xae0>
    a81c:	e7d6      	b.n	a7cc <_dtoa_r+0xb4c>
    a81e:	2a00      	cmp	r2, #0
    a820:	dce1      	bgt.n	a7e6 <_dtoa_r+0xb66>
    a822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a824:	4657      	mov	r7, sl
    a826:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a82a:	4553      	cmp	r3, sl
    a82c:	d02e      	beq.n	a88c <_dtoa_r+0xc0c>
    a82e:	2300      	movs	r3, #0
    a830:	220a      	movs	r2, #10
    a832:	9903      	ldr	r1, [sp, #12]
    a834:	4658      	mov	r0, fp
    a836:	f01b f8b7 	bl	259a8 <__multadd>
    a83a:	45a8      	cmp	r8, r5
    a83c:	9003      	str	r0, [sp, #12]
    a83e:	f04f 0300 	mov.w	r3, #0
    a842:	f04f 020a 	mov.w	r2, #10
    a846:	4641      	mov	r1, r8
    a848:	4658      	mov	r0, fp
    a84a:	d10b      	bne.n	a864 <_dtoa_r+0xbe4>
    a84c:	f01b f8ac 	bl	259a8 <__multadd>
    a850:	4680      	mov	r8, r0
    a852:	4605      	mov	r5, r0
    a854:	f10a 0a01 	add.w	sl, sl, #1
    a858:	e766      	b.n	a728 <_dtoa_r+0xaa8>
    a85a:	f8dd a018 	ldr.w	sl, [sp, #24]
    a85e:	f109 0901 	add.w	r9, r9, #1
    a862:	e7b5      	b.n	a7d0 <_dtoa_r+0xb50>
    a864:	f01b f8a0 	bl	259a8 <__multadd>
    a868:	4629      	mov	r1, r5
    a86a:	4680      	mov	r8, r0
    a86c:	2300      	movs	r3, #0
    a86e:	220a      	movs	r2, #10
    a870:	4658      	mov	r0, fp
    a872:	f01b f899 	bl	259a8 <__multadd>
    a876:	4605      	mov	r5, r0
    a878:	e7ec      	b.n	a854 <_dtoa_r+0xbd4>
    a87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a87c:	f04f 0800 	mov.w	r8, #0
    a880:	2b00      	cmp	r3, #0
    a882:	bfcc      	ite	gt
    a884:	461f      	movgt	r7, r3
    a886:	2701      	movle	r7, #1
    a888:	9b08      	ldr	r3, [sp, #32]
    a88a:	441f      	add	r7, r3
    a88c:	2201      	movs	r2, #1
    a88e:	9903      	ldr	r1, [sp, #12]
    a890:	4658      	mov	r0, fp
    a892:	f01b f9eb 	bl	25c6c <__lshift>
    a896:	4621      	mov	r1, r4
    a898:	9003      	str	r0, [sp, #12]
    a89a:	f021 fd3b 	bl	2c314 <__mcmp>
    a89e:	2800      	cmp	r0, #0
    a8a0:	dca8      	bgt.n	a7f4 <_dtoa_r+0xb74>
    a8a2:	d102      	bne.n	a8aa <_dtoa_r+0xc2a>
    a8a4:	f019 0f01 	tst.w	r9, #1
    a8a8:	d1a4      	bne.n	a7f4 <_dtoa_r+0xb74>
    a8aa:	46ba      	mov	sl, r7
    a8ac:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8b0:	2b30      	cmp	r3, #48	; 0x30
    a8b2:	d0fa      	beq.n	a8aa <_dtoa_r+0xc2a>
    a8b4:	e4fe      	b.n	a2b4 <_dtoa_r+0x634>
    a8b6:	9b08      	ldr	r3, [sp, #32]
    a8b8:	42bb      	cmp	r3, r7
    a8ba:	d19b      	bne.n	a7f4 <_dtoa_r+0xb74>
    a8bc:	2331      	movs	r3, #49	; 0x31
    a8be:	9a08      	ldr	r2, [sp, #32]
    a8c0:	3601      	adds	r6, #1
    a8c2:	7013      	strb	r3, [r2, #0]
    a8c4:	e4f6      	b.n	a2b4 <_dtoa_r+0x634>
    a8c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	f47f aa20 	bne.w	9d0e <_dtoa_r+0x8e>
    a8ce:	4b01      	ldr	r3, [pc, #4]	; (a8d4 <_dtoa_r+0xc54>)
    a8d0:	f7ff ba3f 	b.w	9d52 <_dtoa_r+0xd2>
    a8d4:	00033bde 	.word	0x00033bde

0000a8d8 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a8d8:	4603      	mov	r3, r0
    a8da:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8dc:	2401      	movs	r4, #1
    a8de:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a8e0:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8e2:	409c      	lsls	r4, r3
    a8e4:	6843      	ldr	r3, [r0, #4]
    a8e6:	681b      	ldr	r3, [r3, #0]
    a8e8:	421c      	tst	r4, r3
    a8ea:	d10e      	bne.n	a90a <gpio_pin_get_dt+0x32>
    a8ec:	490e      	ldr	r1, [pc, #56]	; (a928 <gpio_pin_get_dt+0x50>)
    a8ee:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a8f2:	4a0e      	ldr	r2, [pc, #56]	; (a92c <gpio_pin_get_dt+0x54>)
    a8f4:	480e      	ldr	r0, [pc, #56]	; (a930 <gpio_pin_get_dt+0x58>)
    a8f6:	f01c fa3c 	bl	26d72 <assert_print>
    a8fa:	480e      	ldr	r0, [pc, #56]	; (a934 <gpio_pin_get_dt+0x5c>)
    a8fc:	f01c fa39 	bl	26d72 <assert_print>
    a900:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a904:	4809      	ldr	r0, [pc, #36]	; (a92c <gpio_pin_get_dt+0x54>)
    a906:	f01c fa2d 	bl	26d64 <assert_post_action>
	const struct gpio_driver_data *const data =
    a90a:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a90c:	6883      	ldr	r3, [r0, #8]
    a90e:	a901      	add	r1, sp, #4
    a910:	685b      	ldr	r3, [r3, #4]
    a912:	4798      	blx	r3
	if (ret == 0) {
    a914:	b930      	cbnz	r0, a924 <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a916:	682a      	ldr	r2, [r5, #0]
    a918:	9b01      	ldr	r3, [sp, #4]
    a91a:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a91c:	4223      	tst	r3, r4
    a91e:	bf14      	ite	ne
    a920:	2001      	movne	r0, #1
    a922:	2000      	moveq	r0, #0
}
    a924:	b003      	add	sp, #12
    a926:	bd30      	pop	{r4, r5, pc}
    a928:	0002dd43 	.word	0x0002dd43
    a92c:	0002dd12 	.word	0x0002dd12
    a930:	0002dd81 	.word	0x0002dd81
    a934:	0002dd9e 	.word	0x0002dd9e

0000a938 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a938:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a93a:	f020 f8ff 	bl	2ab3c <sys_clock_cycle_get_32>
    a93e:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a940:	4804      	ldr	r0, [pc, #16]	; (a954 <digital_0_call_back+0x1c>)
    a942:	f01c f854 	bl	269ee <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a946:	4a04      	ldr	r2, [pc, #16]	; (a958 <digital_0_call_back+0x20>)
    a948:	8813      	ldrh	r3, [r2, #0]
    a94a:	8813      	ldrh	r3, [r2, #0]
    a94c:	3301      	adds	r3, #1
    a94e:	b21b      	sxth	r3, r3
    a950:	8013      	strh	r3, [r2, #0]
}
    a952:	bd08      	pop	{r3, pc}
    a954:	0002ddb0 	.word	0x0002ddb0
    a958:	20021a88 	.word	0x20021a88

0000a95c <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a95c:	b508      	push	{r3, lr}
    a95e:	f020 f8ed 	bl	2ab3c <sys_clock_cycle_get_32>
    a962:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a964:	4804      	ldr	r0, [pc, #16]	; (a978 <digital_1_call_back+0x1c>)
    a966:	f01c f842 	bl	269ee <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a96a:	4a04      	ldr	r2, [pc, #16]	; (a97c <digital_1_call_back+0x20>)
    a96c:	8853      	ldrh	r3, [r2, #2]
    a96e:	8853      	ldrh	r3, [r2, #2]
    a970:	3301      	adds	r3, #1
    a972:	b21b      	sxth	r3, r3
    a974:	8053      	strh	r3, [r2, #2]
}
    a976:	bd08      	pop	{r3, pc}
    a978:	0002ddcb 	.word	0x0002ddcb
    a97c:	20021a88 	.word	0x20021a88

0000a980 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a980:	b508      	push	{r3, lr}
    a982:	f020 f8db 	bl	2ab3c <sys_clock_cycle_get_32>
    a986:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a988:	4804      	ldr	r0, [pc, #16]	; (a99c <digital_2_call_back+0x1c>)
    a98a:	f01c f830 	bl	269ee <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a98e:	4a04      	ldr	r2, [pc, #16]	; (a9a0 <digital_2_call_back+0x20>)
    a990:	8893      	ldrh	r3, [r2, #4]
    a992:	8893      	ldrh	r3, [r2, #4]
    a994:	3301      	adds	r3, #1
    a996:	b21b      	sxth	r3, r3
    a998:	8093      	strh	r3, [r2, #4]
}
    a99a:	bd08      	pop	{r3, pc}
    a99c:	0002dde6 	.word	0x0002dde6
    a9a0:	20021a88 	.word	0x20021a88

0000a9a4 <uart_2_work_handler.part.0>:
static void uart_2_work_handler(struct k_work *item)
    a9a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    a9a6:	4b09      	ldr	r3, [pc, #36]	; (a9cc <uart_2_work_handler.part.0+0x28>)
    a9a8:	aa04      	add	r2, sp, #16
    a9aa:	9305      	str	r3, [sp, #20]
    a9ac:	2302      	movs	r3, #2
    a9ae:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a9b2:	4807      	ldr	r0, [pc, #28]	; (a9d0 <uart_2_work_handler.part.0+0x2c>)
    a9b4:	9304      	str	r3, [sp, #16]
    a9b6:	f01b fda3 	bl	26500 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9ba:	f240 6267 	movw	r2, #1639	; 0x667
    a9be:	2300      	movs	r3, #0
    a9c0:	4804      	ldr	r0, [pc, #16]	; (a9d4 <uart_2_work_handler.part.0+0x30>)
}
    a9c2:	b007      	add	sp, #28
    a9c4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9c8:	f017 bf02 	b.w	227d0 <k_work_reschedule>
    a9cc:	0002de01 	.word	0x0002de01
    a9d0:	0002cd90 	.word	0x0002cd90
    a9d4:	200091a0 	.word	0x200091a0

0000a9d8 <uart_work_handler.part.0>:
static void uart_work_handler(struct k_work *item)
    a9d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART receive buffer");
    a9da:	4b09      	ldr	r3, [pc, #36]	; (aa00 <uart_work_handler.part.0+0x28>)
    a9dc:	aa04      	add	r2, sp, #16
    a9de:	9305      	str	r3, [sp, #20]
    a9e0:	2302      	movs	r3, #2
    a9e2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a9e6:	4807      	ldr	r0, [pc, #28]	; (aa04 <uart_work_handler.part.0+0x2c>)
    a9e8:	9304      	str	r3, [sp, #16]
    a9ea:	f01b fd89 	bl	26500 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    a9ee:	f240 6267 	movw	r2, #1639	; 0x667
    a9f2:	2300      	movs	r3, #0
    a9f4:	4804      	ldr	r0, [pc, #16]	; (aa08 <uart_work_handler.part.0+0x30>)
}
    a9f6:	b007      	add	sp, #28
    a9f8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    a9fc:	f017 bee8 	b.w	227d0 <k_work_reschedule>
    aa00:	0002de2c 	.word	0x0002de2c
    aa04:	0002cd90 	.word	0x0002cd90
    aa08:	200091d0 	.word	0x200091d0

0000aa0c <uart_2_work_handler>:
{
    aa0c:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa0e:	2030      	movs	r0, #48	; 0x30
    aa10:	f021 f9b1 	bl	2bd76 <k_malloc>
	if (buf) {
    aa14:	b138      	cbz	r0, aa26 <uart_2_work_handler+0x1a>
		buf->len = 0;
    aa16:	2300      	movs	r3, #0
    aa18:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa1a:	1d01      	adds	r1, r0, #4
}
    aa1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa20:	4803      	ldr	r0, [pc, #12]	; (aa30 <uart_2_work_handler+0x24>)
    aa22:	f01b bd70 	b.w	26506 <uart_rx_enable.constprop.0>
}
    aa26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa2a:	f7ff bfbb 	b.w	a9a4 <uart_2_work_handler.part.0>
    aa2e:	bf00      	nop
    aa30:	0002c780 	.word	0x0002c780

0000aa34 <uart_work_handler>:
{
    aa34:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa36:	2030      	movs	r0, #48	; 0x30
    aa38:	f021 f99d 	bl	2bd76 <k_malloc>
	if (buf) {
    aa3c:	b138      	cbz	r0, aa4e <uart_work_handler+0x1a>
		buf->len = 0;
    aa3e:	2300      	movs	r3, #0
    aa40:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa42:	1d01      	adds	r1, r0, #4
}
    aa44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa48:	4803      	ldr	r0, [pc, #12]	; (aa58 <uart_work_handler+0x24>)
    aa4a:	f01b bd5c 	b.w	26506 <uart_rx_enable.constprop.0>
}
    aa4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa52:	f7ff bfc1 	b.w	a9d8 <uart_work_handler.part.0>
    aa56:	bf00      	nop
    aa58:	0002c798 	.word	0x0002c798

0000aa5c <button3_thread>:
		    flash_test_();
	}
}


void button3_thread(void){
    aa5c:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    aa5e:	4e09      	ldr	r6, [pc, #36]	; (aa84 <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    aa60:	4d09      	ldr	r5, [pc, #36]	; (aa88 <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    aa62:	f04f 32ff 	mov.w	r2, #4294967295
    aa66:	f04f 33ff 	mov.w	r3, #4294967295
    aa6a:	4630      	mov	r0, r6
    aa6c:	f01b fd5b 	bl	26526 <k_sem_take.constprop.0.isra.0>
		i=0;
    aa70:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    aa72:	4620      	mov	r0, r4
    aa74:	f001 f9f8 	bl	be68 <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    aa78:	682b      	ldr	r3, [r5, #0]
	     i++;
    aa7a:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    aa7c:	42a3      	cmp	r3, r4
    aa7e:	d3f0      	bcc.n	aa62 <button3_thread+0x6>
    aa80:	e7f7      	b.n	aa72 <button3_thread+0x16>
    aa82:	bf00      	nop
    aa84:	20008b64 	.word	0x20008b64
    aa88:	20021410 	.word	0x20021410

0000aa8c <button4_thread>:
		}
    }
}

void button4_thread(void){
    aa8c:	b538      	push	{r3, r4, r5, lr}

    uint8_t *packet_data;
	packet_data = k_malloc(25);
    aa8e:	2019      	movs	r0, #25
    aa90:	f021 f971 	bl	2bd76 <k_malloc>
	//49 53 41 44 4f 52 41 
    *packet_data = 0x49;
    aa94:	2349      	movs	r3, #73	; 0x49
    *(packet_data+1) = 0x53;
    *(packet_data+2) = 0x41;
    *(packet_data+3) = 0x44;
    aa96:	2244      	movs	r2, #68	; 0x44
    *packet_data = 0x49;
    aa98:	7003      	strb	r3, [r0, #0]
    *(packet_data+3) = 0x44;
    aa9a:	70c2      	strb	r2, [r0, #3]
    *(packet_data+1) = 0x53;
    aa9c:	2353      	movs	r3, #83	; 0x53
    *(packet_data+4) = 0x4F;
    aa9e:	224f      	movs	r2, #79	; 0x4f
    *(packet_data+1) = 0x53;
    aaa0:	7043      	strb	r3, [r0, #1]
    *(packet_data+4) = 0x4F;
    aaa2:	7102      	strb	r2, [r0, #4]
    *(packet_data+2) = 0x41;
    aaa4:	2341      	movs	r3, #65	; 0x41
    *(packet_data+5) = 0x52;
    aaa6:	2252      	movs	r2, #82	; 0x52
	packet_data = k_malloc(25);
    aaa8:	4604      	mov	r4, r0
    *(packet_data+6) = 0x41;
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    aaaa:	4d08      	ldr	r5, [pc, #32]	; (aacc <button4_thread+0x40>)
    *(packet_data+2) = 0x41;
    aaac:	7083      	strb	r3, [r0, #2]
    *(packet_data+5) = 0x52;
    aaae:	7142      	strb	r2, [r0, #5]
    *(packet_data+6) = 0x41;
    aab0:	7183      	strb	r3, [r0, #6]
		k_sem_take(&button_test,K_FOREVER);
    aab2:	4628      	mov	r0, r5
    aab4:	f04f 32ff 	mov.w	r2, #4294967295
    aab8:	f04f 33ff 	mov.w	r3, #4294967295
    aabc:	f01b fd33 	bl	26526 <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, packet_data,7);
    aac0:	2207      	movs	r2, #7
    aac2:	4621      	mov	r1, r4
    aac4:	2000      	movs	r0, #0
    aac6:	f005 fdeb 	bl	106a0 <bt_nus_send>
	while(1){
    aaca:	e7f2      	b.n	aab2 <button4_thread+0x26>
    aacc:	20008b7c 	.word	0x20008b7c

0000aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    aad0:	4603      	mov	r3, r0
    aad2:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    aad4:	6800      	ldr	r0, [r0, #0]
    aad6:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aad8:	2301      	movs	r3, #1
    aada:	6845      	ldr	r5, [r0, #4]
    aadc:	408b      	lsls	r3, r1
    aade:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    aae0:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aae2:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    aae4:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aae6:	d10e      	bne.n	ab06 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    aae8:	490e      	ldr	r1, [pc, #56]	; (ab24 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    aaea:	f44f 731d 	mov.w	r3, #628	; 0x274
    aaee:	4a0e      	ldr	r2, [pc, #56]	; (ab28 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    aaf0:	480e      	ldr	r0, [pc, #56]	; (ab2c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    aaf2:	f01c f93e 	bl	26d72 <assert_print>
    aaf6:	480e      	ldr	r0, [pc, #56]	; (ab30 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    aaf8:	f01c f93b 	bl	26d72 <assert_print>
    aafc:	f44f 711d 	mov.w	r1, #628	; 0x274
    ab00:	4809      	ldr	r0, [pc, #36]	; (ab28 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab02:	f01c f92f 	bl	26d64 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    ab06:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ab08:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab0a:	6994      	ldr	r4, [r2, #24]
    ab0c:	bf18      	it	ne
    ab0e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    ab12:	46a4      	mov	ip, r4
}
    ab14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab18:	bf08      	it	eq
    ab1a:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    ab1e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab22:	4760      	bx	ip
    ab24:	0002dd43 	.word	0x0002dd43
    ab28:	0002dd12 	.word	0x0002dd12
    ab2c:	0002dd81 	.word	0x0002dd81
    ab30:	0002dd9e 	.word	0x0002dd9e

0000ab34 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab34:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ab36:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab38:	b08a      	sub	sp, #40	; 0x28
    ab3a:	4604      	mov	r4, r0
    ab3c:	460e      	mov	r6, r1
    ab3e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ab40:	2b03      	cmp	r3, #3
    ab42:	d820      	bhi.n	ab86 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ab44:	e8df f003 	tbb	[pc, r3]
    ab48:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ab4c:	4911      	ldr	r1, [pc, #68]	; (ab94 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ab4e:	4628      	mov	r0, r5
    ab50:	f021 fa96 	bl	2c080 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ab54:	9505      	str	r5, [sp, #20]
    ab56:	7863      	ldrb	r3, [r4, #1]
    ab58:	211e      	movs	r1, #30
    ab5a:	9304      	str	r3, [sp, #16]
    ab5c:	78a3      	ldrb	r3, [r4, #2]
    ab5e:	4630      	mov	r0, r6
    ab60:	9303      	str	r3, [sp, #12]
    ab62:	78e3      	ldrb	r3, [r4, #3]
    ab64:	4a0c      	ldr	r2, [pc, #48]	; (ab98 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ab66:	9302      	str	r3, [sp, #8]
    ab68:	7923      	ldrb	r3, [r4, #4]
    ab6a:	9301      	str	r3, [sp, #4]
    ab6c:	7963      	ldrb	r3, [r4, #5]
    ab6e:	9300      	str	r3, [sp, #0]
    ab70:	79a3      	ldrb	r3, [r4, #6]
    ab72:	f01b ff49 	bl	26a08 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ab76:	b00a      	add	sp, #40	; 0x28
    ab78:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ab7a:	4908      	ldr	r1, [pc, #32]	; (ab9c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    ab7c:	e7e7      	b.n	ab4e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    ab7e:	4908      	ldr	r1, [pc, #32]	; (aba0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    ab80:	e7e5      	b.n	ab4e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    ab82:	4908      	ldr	r1, [pc, #32]	; (aba4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    ab84:	e7e3      	b.n	ab4e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ab86:	210a      	movs	r1, #10
    ab88:	4628      	mov	r0, r5
    ab8a:	4a07      	ldr	r2, [pc, #28]	; (aba8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    ab8c:	f01b ff3c 	bl	26a08 <snprintk>
		break;
    ab90:	e7e0      	b.n	ab54 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    ab92:	bf00      	nop
    ab94:	0002de55 	.word	0x0002de55
    ab98:	0002de77 	.word	0x0002de77
    ab9c:	0002de5c 	.word	0x0002de5c
    aba0:	0002de63 	.word	0x0002de63
    aba4:	0002de6d 	.word	0x0002de6d
    aba8:	00031a29 	.word	0x00031a29

0000abac <security_changed>:
{
    abac:	b5f0      	push	{r4, r5, r6, r7, lr}
    abae:	4614      	mov	r4, r2
    abb0:	b089      	sub	sp, #36	; 0x24
    abb2:	af00      	add	r7, sp, #0
    abb4:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abb6:	f01e f8e2 	bl	28d7e <bt_conn_get_dst>
    abba:	4639      	mov	r1, r7
    abbc:	f7ff ffba 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    abc0:	b9ac      	cbnz	r4, abee <security_changed+0x42>
		LOG_INF("Security changed: %s level %u", addr, level);
    abc2:	466c      	mov	r4, sp
    abc4:	b08a      	sub	sp, #40	; 0x28
    abc6:	466a      	mov	r2, sp
    abc8:	4b14      	ldr	r3, [pc, #80]	; (ac1c <security_changed+0x70>)
    abca:	61d5      	str	r5, [r2, #28]
    abcc:	e9c2 3705 	strd	r3, r7, [r2, #20]
    abd0:	f44f 7300 	mov.w	r3, #512	; 0x200
    abd4:	8413      	strh	r3, [r2, #32]
    abd6:	4b12      	ldr	r3, [pc, #72]	; (ac20 <security_changed+0x74>)
    abd8:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    abdc:	4811      	ldr	r0, [pc, #68]	; (ac24 <security_changed+0x78>)
    abde:	f842 3f10 	str.w	r3, [r2, #16]!
    abe2:	f01b fc8d 	bl	26500 <z_log_msg_static_create.constprop.0>
    abe6:	46a5      	mov	sp, r4
}
    abe8:	3724      	adds	r7, #36	; 0x24
    abea:	46bd      	mov	sp, r7
    abec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    abee:	466e      	mov	r6, sp
    abf0:	b08a      	sub	sp, #40	; 0x28
    abf2:	466b      	mov	r3, sp
    abf4:	4a0c      	ldr	r2, [pc, #48]	; (ac28 <security_changed+0x7c>)
    abf6:	e9c3 5407 	strd	r5, r4, [r3, #28]
    abfa:	e9c3 2705 	strd	r2, r7, [r3, #20]
    abfe:	f44f 7200 	mov.w	r2, #512	; 0x200
    ac02:	849a      	strh	r2, [r3, #36]	; 0x24
    ac04:	461a      	mov	r2, r3
    ac06:	4b09      	ldr	r3, [pc, #36]	; (ac2c <security_changed+0x80>)
    ac08:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    ac0c:	4805      	ldr	r0, [pc, #20]	; (ac24 <security_changed+0x78>)
    ac0e:	f842 3f10 	str.w	r3, [r2, #16]!
    ac12:	f01b fc75 	bl	26500 <z_log_msg_static_create.constprop.0>
    ac16:	46b5      	mov	sp, r6
}
    ac18:	e7e6      	b.n	abe8 <security_changed+0x3c>
    ac1a:	bf00      	nop
    ac1c:	0002de9a 	.word	0x0002de9a
    ac20:	01000004 	.word	0x01000004
    ac24:	0002cd90 	.word	0x0002cd90
    ac28:	0002deb8 	.word	0x0002deb8
    ac2c:	01000005 	.word	0x01000005

0000ac30 <pairing_failed>:
{
    ac30:	b590      	push	{r4, r7, lr}
    ac32:	b089      	sub	sp, #36	; 0x24
    ac34:	af00      	add	r7, sp, #0
    ac36:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac38:	f01e f8a1 	bl	28d7e <bt_conn_get_dst>
    ac3c:	4639      	mov	r1, r7
    ac3e:	f7ff ff79 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    ac42:	b08a      	sub	sp, #40	; 0x28
    ac44:	466a      	mov	r2, sp
    ac46:	4b09      	ldr	r3, [pc, #36]	; (ac6c <pairing_failed+0x3c>)
    ac48:	61d4      	str	r4, [r2, #28]
    ac4a:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ac4e:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac52:	8413      	strh	r3, [r2, #32]
    ac54:	4b06      	ldr	r3, [pc, #24]	; (ac70 <pairing_failed+0x40>)
    ac56:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac5a:	4806      	ldr	r0, [pc, #24]	; (ac74 <pairing_failed+0x44>)
    ac5c:	f842 3f10 	str.w	r3, [r2, #16]!
    ac60:	f01b fc4e 	bl	26500 <z_log_msg_static_create.constprop.0>
}
    ac64:	3724      	adds	r7, #36	; 0x24
    ac66:	46bd      	mov	sp, r7
    ac68:	bd90      	pop	{r4, r7, pc}
    ac6a:	bf00      	nop
    ac6c:	0002dedc 	.word	0x0002dedc
    ac70:	01000004 	.word	0x01000004
    ac74:	0002cd90 	.word	0x0002cd90

0000ac78 <pairing_complete>:
{
    ac78:	b590      	push	{r4, r7, lr}
    ac7a:	b089      	sub	sp, #36	; 0x24
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac80:	f01e f87d 	bl	28d7e <bt_conn_get_dst>
    ac84:	4639      	mov	r1, r7
    ac86:	f7ff ff55 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    ac8a:	b08a      	sub	sp, #40	; 0x28
    ac8c:	466a      	mov	r2, sp
    ac8e:	4b09      	ldr	r3, [pc, #36]	; (acb4 <pairing_complete+0x3c>)
    ac90:	61d4      	str	r4, [r2, #28]
    ac92:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ac96:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac9a:	8413      	strh	r3, [r2, #32]
    ac9c:	4b06      	ldr	r3, [pc, #24]	; (acb8 <pairing_complete+0x40>)
    ac9e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    aca2:	4806      	ldr	r0, [pc, #24]	; (acbc <pairing_complete+0x44>)
    aca4:	f842 3f10 	str.w	r3, [r2, #16]!
    aca8:	f01b fc2a 	bl	26500 <z_log_msg_static_create.constprop.0>
}
    acac:	3724      	adds	r7, #36	; 0x24
    acae:	46bd      	mov	sp, r7
    acb0:	bd90      	pop	{r4, r7, pc}
    acb2:	bf00      	nop
    acb4:	0002deff 	.word	0x0002deff
    acb8:	01000004 	.word	0x01000004
    acbc:	0002cd90 	.word	0x0002cd90

0000acc0 <auth_cancel>:
{
    acc0:	b580      	push	{r7, lr}
    acc2:	b088      	sub	sp, #32
    acc4:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acc6:	f01e f85a 	bl	28d7e <bt_conn_get_dst>
    acca:	4639      	mov	r1, r7
    accc:	f7ff ff32 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    acd0:	b088      	sub	sp, #32
    acd2:	466a      	mov	r2, sp
    acd4:	4b08      	ldr	r3, [pc, #32]	; (acf8 <auth_cancel+0x38>)
    acd6:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    acda:	e9c2 3705 	strd	r3, r7, [r2, #20]
    acde:	f44f 7300 	mov.w	r3, #512	; 0x200
    ace2:	8393      	strh	r3, [r2, #28]
    ace4:	4b05      	ldr	r3, [pc, #20]	; (acfc <auth_cancel+0x3c>)
    ace6:	4806      	ldr	r0, [pc, #24]	; (ad00 <auth_cancel+0x40>)
    ace8:	f842 3f10 	str.w	r3, [r2, #16]!
    acec:	f01b fc08 	bl	26500 <z_log_msg_static_create.constprop.0>
}
    acf0:	3720      	adds	r7, #32
    acf2:	46bd      	mov	sp, r7
    acf4:	bd80      	pop	{r7, pc}
    acf6:	bf00      	nop
    acf8:	0002df21 	.word	0x0002df21
    acfc:	01000003 	.word	0x01000003
    ad00:	0002cd90 	.word	0x0002cd90

0000ad04 <auth_passkey_display>:
{
    ad04:	b590      	push	{r4, r7, lr}
    ad06:	b089      	sub	sp, #36	; 0x24
    ad08:	af00      	add	r7, sp, #0
    ad0a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad0c:	f01e f837 	bl	28d7e <bt_conn_get_dst>
    ad10:	4639      	mov	r1, r7
    ad12:	f7ff ff0f 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad16:	b08a      	sub	sp, #40	; 0x28
    ad18:	466a      	mov	r2, sp
    ad1a:	4b09      	ldr	r3, [pc, #36]	; (ad40 <auth_passkey_display+0x3c>)
    ad1c:	61d4      	str	r4, [r2, #28]
    ad1e:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ad22:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad26:	8413      	strh	r3, [r2, #32]
    ad28:	4b06      	ldr	r3, [pc, #24]	; (ad44 <auth_passkey_display+0x40>)
    ad2a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ad2e:	4806      	ldr	r0, [pc, #24]	; (ad48 <auth_passkey_display+0x44>)
    ad30:	f842 3f10 	str.w	r3, [r2, #16]!
    ad34:	f01b fbe4 	bl	26500 <z_log_msg_static_create.constprop.0>
}
    ad38:	3724      	adds	r7, #36	; 0x24
    ad3a:	46bd      	mov	sp, r7
    ad3c:	bd90      	pop	{r4, r7, pc}
    ad3e:	bf00      	nop
    ad40:	0002df37 	.word	0x0002df37
    ad44:	01000004 	.word	0x01000004
    ad48:	0002cd90 	.word	0x0002cd90

0000ad4c <auth_passkey_confirm>:
{
    ad4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad4e:	b08f      	sub	sp, #60	; 0x3c
    ad50:	af00      	add	r7, sp, #0
    ad52:	460c      	mov	r4, r1
    ad54:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    ad56:	f00a f8af 	bl	14eb8 <bt_conn_ref>
    ad5a:	4b16      	ldr	r3, [pc, #88]	; (adb4 <auth_passkey_confirm+0x68>)
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad5c:	466e      	mov	r6, sp
	auth_conn = bt_conn_ref(conn);
    ad5e:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad60:	4628      	mov	r0, r5
    ad62:	f107 0518 	add.w	r5, r7, #24
    ad66:	f01e f80a 	bl	28d7e <bt_conn_get_dst>
    ad6a:	4629      	mov	r1, r5
    ad6c:	f7ff fee2 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad70:	b08a      	sub	sp, #40	; 0x28
    ad72:	466a      	mov	r2, sp
    ad74:	4b10      	ldr	r3, [pc, #64]	; (adb8 <auth_passkey_confirm+0x6c>)
    ad76:	61d4      	str	r4, [r2, #28]
    ad78:	e9c2 3505 	strd	r3, r5, [r2, #20]
    ad7c:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad80:	4c0e      	ldr	r4, [pc, #56]	; (adbc <auth_passkey_confirm+0x70>)
    ad82:	8413      	strh	r3, [r2, #32]
    ad84:	4b0e      	ldr	r3, [pc, #56]	; (adc0 <auth_passkey_confirm+0x74>)
    ad86:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ad8a:	4620      	mov	r0, r4
    ad8c:	f842 3f10 	str.w	r3, [r2, #16]!
    ad90:	f01b fbb6 	bl	26500 <z_log_msg_static_create.constprop.0>
    ad94:	46b5      	mov	sp, r6
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    ad96:	4b0b      	ldr	r3, [pc, #44]	; (adc4 <auth_passkey_confirm+0x78>)
    ad98:	f107 0210 	add.w	r2, r7, #16
    ad9c:	617b      	str	r3, [r7, #20]
    ad9e:	2302      	movs	r3, #2
    ada0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ada4:	613b      	str	r3, [r7, #16]
    ada6:	4620      	mov	r0, r4
    ada8:	f01b fbaa 	bl	26500 <z_log_msg_static_create.constprop.0>
}
    adac:	373c      	adds	r7, #60	; 0x3c
    adae:	46bd      	mov	sp, r7
    adb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adb2:	bf00      	nop
    adb4:	2000a2d0 	.word	0x2000a2d0
    adb8:	0002df37 	.word	0x0002df37
    adbc:	0002cd90 	.word	0x0002cd90
    adc0:	01000004 	.word	0x01000004
    adc4:	0002df4c 	.word	0x0002df4c

0000adc8 <bt_receive_cb>:
{
    adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    adcc:	2400      	movs	r4, #0
{
    adce:	4605      	mov	r5, r0
    add0:	b088      	sub	sp, #32
    add2:	460f      	mov	r7, r1
    add4:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    add6:	4621      	mov	r1, r4
    add8:	221a      	movs	r2, #26
    adda:	a801      	add	r0, sp, #4
    addc:	9400      	str	r4, [sp, #0]
    adde:	f021 f827 	bl	2be30 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ade2:	4628      	mov	r0, r5
    ade4:	f01d ffcb 	bl	28d7e <bt_conn_get_dst>
    ade8:	4669      	mov	r1, sp
    adea:	f7ff fea3 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    adee:	4669      	mov	r1, sp
    adf0:	481d      	ldr	r0, [pc, #116]	; (ae68 <bt_receive_cb+0xa0>)
    adf2:	f01a fbd3 	bl	2559c <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    adf6:	f8df 8074 	ldr.w	r8, [pc, #116]	; ae6c <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    adfa:	f8df 9074 	ldr.w	r9, [pc, #116]	; ae70 <bt_receive_cb+0xa8>
	for (uint16_t pos = 0; pos != len;) {
    adfe:	42b4      	cmp	r4, r6
    ae00:	d007      	beq.n	ae12 <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ae02:	2030      	movs	r0, #48	; 0x30
    ae04:	f020 ffb7 	bl	2bd76 <k_malloc>
		if (!tx) {
    ae08:	4605      	mov	r5, r0
    ae0a:	b928      	cbnz	r0, ae18 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ae0c:	4819      	ldr	r0, [pc, #100]	; (ae74 <bt_receive_cb+0xac>)
    ae0e:	f01a fbc5 	bl	2559c <iprintf>
}
    ae12:	b008      	add	sp, #32
    ae14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    ae18:	1b32      	subs	r2, r6, r4
    ae1a:	2a27      	cmp	r2, #39	; 0x27
			tx->len = tx_data_size;
    ae1c:	bf8c      	ite	hi
    ae1e:	2227      	movhi	r2, #39	; 0x27
			tx->len = (len - pos);
    ae20:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    ae22:	f100 0a04 	add.w	sl, r0, #4
    ae26:	8582      	strh	r2, [r0, #44]	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ae28:	1939      	adds	r1, r7, r4
    ae2a:	4650      	mov	r0, sl
    ae2c:	f020 ffc6 	bl	2bdbc <memcpy>
		pos += tx->len;
    ae30:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    ae32:	441c      	add	r4, r3
    ae34:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    ae36:	42a6      	cmp	r6, r4
    ae38:	d109      	bne.n	ae4e <bt_receive_cb+0x86>
    ae3a:	19ba      	adds	r2, r7, r6
    ae3c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    ae40:	2a0d      	cmp	r2, #13
    ae42:	d104      	bne.n	ae4e <bt_receive_cb+0x86>
			tx->data[tx->len] = '\n';
    ae44:	210a      	movs	r1, #10
    ae46:	18ea      	adds	r2, r5, r3
			tx->len++;
    ae48:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    ae4a:	7111      	strb	r1, [r2, #4]
			tx->len++;
    ae4c:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae4e:	4651      	mov	r1, sl
    ae50:	4640      	mov	r0, r8
    ae52:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    ae54:	f01b fb5f 	bl	26516 <uart_tx.constprop.0>
		if (err) {
    ae58:	2800      	cmp	r0, #0
    ae5a:	d0d0      	beq.n	adfe <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae5c:	4629      	mov	r1, r5
    ae5e:	4648      	mov	r0, r9
    ae60:	f020 fdd5 	bl	2ba0e <k_queue_append>
    ae64:	e7cb      	b.n	adfe <bt_receive_cb+0x36>
    ae66:	bf00      	nop
    ae68:	0002df7b 	.word	0x0002df7b
    ae6c:	0002c798 	.word	0x0002c798
    ae70:	20008c28 	.word	0x20008c28
    ae74:	0002df92 	.word	0x0002df92

0000ae78 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    ae78:	4603      	mov	r3, r0
    ae7a:	b510      	push	{r4, lr}
    ae7c:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ae7e:	7919      	ldrb	r1, [r3, #4]
    ae80:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    ae82:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ae84:	fa03 f101 	lsl.w	r1, r3, r1
    ae88:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    ae8a:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ae8c:	681b      	ldr	r3, [r3, #0]
    ae8e:	4219      	tst	r1, r3
    ae90:	d10e      	bne.n	aeb0 <gpio_pin_set_dt.isra.0+0x38>
    ae92:	490e      	ldr	r1, [pc, #56]	; (aecc <gpio_pin_set_dt.isra.0+0x54>)
    ae94:	f240 533d 	movw	r3, #1341	; 0x53d
    ae98:	4a0d      	ldr	r2, [pc, #52]	; (aed0 <gpio_pin_set_dt.isra.0+0x58>)
    ae9a:	480e      	ldr	r0, [pc, #56]	; (aed4 <gpio_pin_set_dt.isra.0+0x5c>)
    ae9c:	f01b ff69 	bl	26d72 <assert_print>
    aea0:	480d      	ldr	r0, [pc, #52]	; (aed8 <gpio_pin_set_dt.isra.0+0x60>)
    aea2:	f01b ff66 	bl	26d72 <assert_print>
    aea6:	f240 513d 	movw	r1, #1341	; 0x53d
    aeaa:	4809      	ldr	r0, [pc, #36]	; (aed0 <gpio_pin_set_dt.isra.0+0x58>)
    aeac:	f01b ff5a 	bl	26d64 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aeb0:	6823      	ldr	r3, [r4, #0]
    aeb2:	4219      	tst	r1, r3
    aeb4:	d003      	beq.n	aebe <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    aeb6:	b122      	cbz	r2, aec2 <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    aeb8:	6883      	ldr	r3, [r0, #8]
    aeba:	691b      	ldr	r3, [r3, #16]
    aebc:	e003      	b.n	aec6 <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    aebe:	2a00      	cmp	r2, #0
    aec0:	d0fa      	beq.n	aeb8 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    aec2:	6883      	ldr	r3, [r0, #8]
    aec4:	68db      	ldr	r3, [r3, #12]
}
    aec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    aeca:	4718      	bx	r3
    aecc:	0002dd43 	.word	0x0002dd43
    aed0:	0002dd12 	.word	0x0002dd12
    aed4:	0002dd81 	.word	0x0002dd81
    aed8:	0002dd9e 	.word	0x0002dd9e

0000aedc <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    aedc:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    aede:	4807      	ldr	r0, [pc, #28]	; (aefc <button_pressed_1+0x20>)
    aee0:	f016 fed6 	bl	21c90 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    aee4:	2101      	movs	r1, #1
    aee6:	4806      	ldr	r0, [pc, #24]	; (af00 <button_pressed_1+0x24>)
    aee8:	f7ff ffc6 	bl	ae78 <gpio_pin_set_dt.isra.0>
    aeec:	f01f fe26 	bl	2ab3c <sys_clock_cycle_get_32>
}
    aef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aef4:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    aef6:	4803      	ldr	r0, [pc, #12]	; (af04 <button_pressed_1+0x28>)
    aef8:	f01b bd79 	b.w	269ee <printk>
    aefc:	20008bf4 	.word	0x20008bf4
    af00:	0002d098 	.word	0x0002d098
    af04:	0002dfbd 	.word	0x0002dfbd

0000af08 <connected>:
{
    af08:	b5b0      	push	{r4, r5, r7, lr}
    af0a:	b088      	sub	sp, #32
    af0c:	4604      	mov	r4, r0
    af0e:	af00      	add	r7, sp, #0
	if (err) {
    af10:	b189      	cbz	r1, af36 <connected+0x2e>
		LOG_ERR("Connection failed (err %u)", err);
    af12:	466c      	mov	r4, sp
    af14:	b088      	sub	sp, #32
    af16:	466a      	mov	r2, sp
    af18:	4b17      	ldr	r3, [pc, #92]	; (af78 <connected+0x70>)
    af1a:	4818      	ldr	r0, [pc, #96]	; (af7c <connected+0x74>)
    af1c:	e9c2 3105 	strd	r3, r1, [r2, #20]
    af20:	2303      	movs	r3, #3
    af22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    af26:	f842 3f10 	str.w	r3, [r2, #16]!
    af2a:	f01b fae9 	bl	26500 <z_log_msg_static_create.constprop.0>
    af2e:	46a5      	mov	sp, r4
}
    af30:	3720      	adds	r7, #32
    af32:	46bd      	mov	sp, r7
    af34:	bdb0      	pop	{r4, r5, r7, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    af36:	f01d ff22 	bl	28d7e <bt_conn_get_dst>
    af3a:	4639      	mov	r1, r7
    af3c:	f7ff fdfa 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    af40:	466d      	mov	r5, sp
    af42:	b088      	sub	sp, #32
    af44:	466a      	mov	r2, sp
    af46:	4b0e      	ldr	r3, [pc, #56]	; (af80 <connected+0x78>)
    af48:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    af4c:	e9c2 3705 	strd	r3, r7, [r2, #20]
    af50:	f44f 7300 	mov.w	r3, #512	; 0x200
    af54:	8393      	strh	r3, [r2, #28]
    af56:	4b0b      	ldr	r3, [pc, #44]	; (af84 <connected+0x7c>)
    af58:	4808      	ldr	r0, [pc, #32]	; (af7c <connected+0x74>)
    af5a:	f842 3f10 	str.w	r3, [r2, #16]!
    af5e:	f01b facf 	bl	26500 <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    af62:	4620      	mov	r0, r4
    af64:	46ad      	mov	sp, r5
    af66:	f009 ffa7 	bl	14eb8 <bt_conn_ref>
    af6a:	4b07      	ldr	r3, [pc, #28]	; (af88 <connected+0x80>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    af6c:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    af6e:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    af70:	4806      	ldr	r0, [pc, #24]	; (af8c <connected+0x84>)
    af72:	f7ff ff81 	bl	ae78 <gpio_pin_set_dt.isra.0>
    af76:	e7db      	b.n	af30 <connected+0x28>
    af78:	0002dfd5 	.word	0x0002dfd5
    af7c:	0002cd90 	.word	0x0002cd90
    af80:	0002dff0 	.word	0x0002dff0
    af84:	01000003 	.word	0x01000003
    af88:	2000a2d4 	.word	0x2000a2d4
    af8c:	0002d0b0 	.word	0x0002d0b0

0000af90 <disconnected>:
{
    af90:	b5b0      	push	{r4, r5, r7, lr}
    af92:	b088      	sub	sp, #32
    af94:	af00      	add	r7, sp, #0
    af96:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    af98:	f01d fef1 	bl	28d7e <bt_conn_get_dst>
    af9c:	4639      	mov	r1, r7
    af9e:	f7ff fdc9 	bl	ab34 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afa2:	466d      	mov	r5, sp
    afa4:	b08a      	sub	sp, #40	; 0x28
    afa6:	466a      	mov	r2, sp
    afa8:	4b11      	ldr	r3, [pc, #68]	; (aff0 <disconnected+0x60>)
    afaa:	61d4      	str	r4, [r2, #28]
    afac:	e9c2 3705 	strd	r3, r7, [r2, #20]
    afb0:	f44f 7300 	mov.w	r3, #512	; 0x200
    afb4:	8413      	strh	r3, [r2, #32]
    afb6:	4b0f      	ldr	r3, [pc, #60]	; (aff4 <disconnected+0x64>)
	if (auth_conn) {
    afb8:	4c0f      	ldr	r4, [pc, #60]	; (aff8 <disconnected+0x68>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afba:	4810      	ldr	r0, [pc, #64]	; (affc <disconnected+0x6c>)
    afbc:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    afc0:	f842 3f10 	str.w	r3, [r2, #16]!
    afc4:	f01b fa9c 	bl	26500 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
    afc8:	6820      	ldr	r0, [r4, #0]
    afca:	46ad      	mov	sp, r5
    afcc:	b118      	cbz	r0, afd6 <disconnected+0x46>
		bt_conn_unref(auth_conn);
    afce:	f009 ff9b 	bl	14f08 <bt_conn_unref>
		auth_conn = NULL;
    afd2:	2300      	movs	r3, #0
    afd4:	6023      	str	r3, [r4, #0]
	if (current_conn) {
    afd6:	4c0a      	ldr	r4, [pc, #40]	; (b000 <disconnected+0x70>)
    afd8:	6820      	ldr	r0, [r4, #0]
    afda:	b130      	cbz	r0, afea <disconnected+0x5a>
		bt_conn_unref(current_conn);
    afdc:	f009 ff94 	bl	14f08 <bt_conn_unref>
		current_conn = NULL;
    afe0:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    afe2:	4808      	ldr	r0, [pc, #32]	; (b004 <disconnected+0x74>)
		current_conn = NULL;
    afe4:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    afe6:	f7ff ff47 	bl	ae78 <gpio_pin_set_dt.isra.0>
}
    afea:	3720      	adds	r7, #32
    afec:	46bd      	mov	sp, r7
    afee:	bdb0      	pop	{r4, r5, r7, pc}
    aff0:	0002dffd 	.word	0x0002dffd
    aff4:	01000004 	.word	0x01000004
    aff8:	2000a2d0 	.word	0x2000a2d0
    affc:	0002cd90 	.word	0x0002cd90
    b000:	2000a2d4 	.word	0x2000a2d4
    b004:	0002d0b0 	.word	0x0002d0b0

0000b008 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    b008:	4603      	mov	r3, r0
    b00a:	b570      	push	{r4, r5, r6, lr}
    b00c:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    b00e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    b010:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    b012:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    b014:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b016:	f002 0430 	and.w	r4, r2, #48	; 0x30
    b01a:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    b01c:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    b01e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b022:	d10e      	bne.n	b042 <gpio_pin_configure_dt.isra.0+0x3a>
    b024:	4925      	ldr	r1, [pc, #148]	; (b0bc <gpio_pin_configure_dt.isra.0+0xb4>)
    b026:	f240 23b7 	movw	r3, #695	; 0x2b7
    b02a:	4a25      	ldr	r2, [pc, #148]	; (b0c0 <gpio_pin_configure_dt.isra.0+0xb8>)
    b02c:	4825      	ldr	r0, [pc, #148]	; (b0c4 <gpio_pin_configure_dt.isra.0+0xbc>)
    b02e:	f01b fea0 	bl	26d72 <assert_print>
    b032:	4825      	ldr	r0, [pc, #148]	; (b0c8 <gpio_pin_configure_dt.isra.0+0xc0>)
    b034:	f01b fe9d 	bl	26d72 <assert_print>
    b038:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    b03c:	4820      	ldr	r0, [pc, #128]	; (b0c0 <gpio_pin_configure_dt.isra.0+0xb8>)
    b03e:	f01b fe91 	bl	26d64 <assert_post_action>
    b042:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    b046:	2c02      	cmp	r4, #2
    b048:	d10c      	bne.n	b064 <gpio_pin_configure_dt.isra.0+0x5c>
    b04a:	4920      	ldr	r1, [pc, #128]	; (b0cc <gpio_pin_configure_dt.isra.0+0xc4>)
    b04c:	f240 23bb 	movw	r3, #699	; 0x2bb
    b050:	4a1b      	ldr	r2, [pc, #108]	; (b0c0 <gpio_pin_configure_dt.isra.0+0xb8>)
    b052:	481c      	ldr	r0, [pc, #112]	; (b0c4 <gpio_pin_configure_dt.isra.0+0xbc>)
    b054:	f01b fe8d 	bl	26d72 <assert_print>
    b058:	481d      	ldr	r0, [pc, #116]	; (b0d0 <gpio_pin_configure_dt.isra.0+0xc8>)
    b05a:	f01b fe8a 	bl	26d72 <assert_print>
    b05e:	f240 21bb 	movw	r1, #699	; 0x2bb
    b062:	e7eb      	b.n	b03c <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    b064:	f002 0406 	and.w	r4, r2, #6
    b068:	2c04      	cmp	r4, #4
    b06a:	d109      	bne.n	b080 <gpio_pin_configure_dt.isra.0+0x78>
    b06c:	4919      	ldr	r1, [pc, #100]	; (b0d4 <gpio_pin_configure_dt.isra.0+0xcc>)
    b06e:	f240 23bf 	movw	r3, #703	; 0x2bf
    b072:	4a13      	ldr	r2, [pc, #76]	; (b0c0 <gpio_pin_configure_dt.isra.0+0xb8>)
    b074:	4813      	ldr	r0, [pc, #76]	; (b0c4 <gpio_pin_configure_dt.isra.0+0xbc>)
    b076:	f01b fe7c 	bl	26d72 <assert_print>
    b07a:	f240 21bf 	movw	r1, #703	; 0x2bf
    b07e:	e7dd      	b.n	b03c <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b080:	2401      	movs	r4, #1
    b082:	681b      	ldr	r3, [r3, #0]
    b084:	408c      	lsls	r4, r1
    b086:	421c      	tst	r4, r3
    b088:	d10c      	bne.n	b0a4 <gpio_pin_configure_dt.isra.0+0x9c>
    b08a:	4913      	ldr	r1, [pc, #76]	; (b0d8 <gpio_pin_configure_dt.isra.0+0xd0>)
    b08c:	f240 23d2 	movw	r3, #722	; 0x2d2
    b090:	4a0b      	ldr	r2, [pc, #44]	; (b0c0 <gpio_pin_configure_dt.isra.0+0xb8>)
    b092:	480c      	ldr	r0, [pc, #48]	; (b0c4 <gpio_pin_configure_dt.isra.0+0xbc>)
    b094:	f01b fe6d 	bl	26d72 <assert_print>
    b098:	4810      	ldr	r0, [pc, #64]	; (b0dc <gpio_pin_configure_dt.isra.0+0xd4>)
    b09a:	f01b fe6a 	bl	26d72 <assert_print>
    b09e:	f240 21d2 	movw	r1, #722	; 0x2d2
    b0a2:	e7cb      	b.n	b03c <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0a4:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b0a6:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0aa:	bf14      	ite	ne
    b0ac:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b0ae:	43a3      	biceq	r3, r4
    b0b0:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    b0b2:	6833      	ldr	r3, [r6, #0]
}
    b0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    b0b8:	4718      	bx	r3
    b0ba:	bf00      	nop
    b0bc:	0002e01a 	.word	0x0002e01a
    b0c0:	0002dd12 	.word	0x0002dd12
    b0c4:	0002dd81 	.word	0x0002dd81
    b0c8:	0002e053 	.word	0x0002e053
    b0cc:	0002e090 	.word	0x0002e090
    b0d0:	0002e0c5 	.word	0x0002e0c5
    b0d4:	0002e117 	.word	0x0002e117
    b0d8:	0002dd43 	.word	0x0002dd43
    b0dc:	0002dd9e 	.word	0x0002dd9e

0000b0e0 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b0e0:	b510      	push	{r4, lr}
	switch (evt->type) {
    b0e2:	780b      	ldrb	r3, [r1, #0]
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b0e4:	b086      	sub	sp, #24
	switch (evt->type) {
    b0e6:	2b05      	cmp	r3, #5
    b0e8:	d828      	bhi.n	b13c <uart_cb+0x5c>
    b0ea:	e8df f003 	tbb	[pc, r3]
    b0ee:	8a03      	.short	0x8a03
    b0f0:	467a682b 	.word	0x467a682b
		if ((evt->data.tx.len == 0) ||
    b0f4:	688b      	ldr	r3, [r1, #8]
    b0f6:	b30b      	cbz	r3, b13c <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
    b0f8:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b0fa:	b1f8      	cbz	r0, b13c <uart_cb+0x5c>
		if (aborted_buf) {
    b0fc:	4a4b      	ldr	r2, [pc, #300]	; (b22c <uart_cb+0x14c>)
    b0fe:	6813      	ldr	r3, [r2, #0]
    b100:	b1f3      	cbz	r3, b140 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b102:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b104:	2300      	movs	r3, #0
    b106:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b108:	4a49      	ldr	r2, [pc, #292]	; (b230 <uart_cb+0x150>)
    b10a:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b10c:	f020 fe2c 	bl	2bd68 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b110:	2200      	movs	r2, #0
    b112:	2300      	movs	r3, #0
    b114:	4847      	ldr	r0, [pc, #284]	; (b234 <uart_cb+0x154>)
    b116:	f016 fd51 	bl	21bbc <z_impl_k_queue_get>
		if (!buf) {
    b11a:	b178      	cbz	r0, b13c <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    b11c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b11e:	1d01      	adds	r1, r0, #4
    b120:	4845      	ldr	r0, [pc, #276]	; (b238 <uart_cb+0x158>)
    b122:	f01b f9f8 	bl	26516 <uart_tx.constprop.0>
    b126:	b148      	cbz	r0, b13c <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    b128:	4b44      	ldr	r3, [pc, #272]	; (b23c <uart_cb+0x15c>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b12a:	9305      	str	r3, [sp, #20]
    b12c:	2302      	movs	r3, #2
    b12e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b132:	4843      	ldr	r0, [pc, #268]	; (b240 <uart_cb+0x160>)
    b134:	aa04      	add	r2, sp, #16
    b136:	9304      	str	r3, [sp, #16]
    b138:	f01b f9e2 	bl	26500 <z_log_msg_static_create.constprop.0>
}
    b13c:	b006      	add	sp, #24
    b13e:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
    b140:	3804      	subs	r0, #4
    b142:	e7e3      	b.n	b10c <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b144:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b146:	68cb      	ldr	r3, [r1, #12]
    b148:	8d10      	ldrh	r0, [r2, #40]	; 0x28
    b14a:	4403      	add	r3, r0
		if (disable_req) {
    b14c:	483d      	ldr	r0, [pc, #244]	; (b244 <uart_cb+0x164>)
		buf->len += evt->data.rx.len;
    b14e:	b29b      	uxth	r3, r3
    b150:	8513      	strh	r3, [r2, #40]	; 0x28
		if (disable_req) {
    b152:	7802      	ldrb	r2, [r0, #0]
    b154:	2a00      	cmp	r2, #0
    b156:	d1f1      	bne.n	b13c <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b158:	684a      	ldr	r2, [r1, #4]
    b15a:	4413      	add	r3, r2
    b15c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b160:	2b0a      	cmp	r3, #10
    b162:	d001      	beq.n	b168 <uart_cb+0x88>
    b164:	2b0d      	cmp	r3, #13
    b166:	d1e9      	bne.n	b13c <uart_cb+0x5c>
			disable_req = true;
    b168:	2301      	movs	r3, #1
    b16a:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b16c:	4832      	ldr	r0, [pc, #200]	; (b238 <uart_cb+0x158>)
    b16e:	6883      	ldr	r3, [r0, #8]
    b170:	695b      	ldr	r3, [r3, #20]
}
    b172:	b006      	add	sp, #24
    b174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b178:	4718      	bx	r3
		disable_req = false;
    b17a:	2400      	movs	r4, #0
    b17c:	4b31      	ldr	r3, [pc, #196]	; (b244 <uart_cb+0x164>)
		buf = k_malloc(sizeof(*buf));
    b17e:	2030      	movs	r0, #48	; 0x30
		disable_req = false;
    b180:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b182:	f020 fdf8 	bl	2bd76 <k_malloc>
		if (buf) {
    b186:	b138      	cbz	r0, b198 <uart_cb+0xb8>
			buf->len = 0;
    b188:	8584      	strh	r4, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b18a:	1d01      	adds	r1, r0, #4
    b18c:	482a      	ldr	r0, [pc, #168]	; (b238 <uart_cb+0x158>)
}
    b18e:	b006      	add	sp, #24
    b190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b194:	f01b b9b7 	b.w	26506 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b198:	4b2b      	ldr	r3, [pc, #172]	; (b248 <uart_cb+0x168>)
    b19a:	aa04      	add	r2, sp, #16
    b19c:	9305      	str	r3, [sp, #20]
    b19e:	2302      	movs	r3, #2
    b1a0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b1a4:	4826      	ldr	r0, [pc, #152]	; (b240 <uart_cb+0x160>)
    b1a6:	9304      	str	r3, [sp, #16]
    b1a8:	f01b f9aa 	bl	26500 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1ac:	f240 6267 	movw	r2, #1639	; 0x667
    b1b0:	2300      	movs	r3, #0
    b1b2:	4826      	ldr	r0, [pc, #152]	; (b24c <uart_cb+0x16c>)
}
    b1b4:	b006      	add	sp, #24
    b1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1ba:	f017 bb09 	b.w	227d0 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b1be:	2030      	movs	r0, #48	; 0x30
    b1c0:	f020 fdd9 	bl	2bd76 <k_malloc>
		if (buf) {
    b1c4:	4601      	mov	r1, r0
    b1c6:	b150      	cbz	r0, b1de <uart_cb+0xfe>
			buf->len = 0;
    b1c8:	2300      	movs	r3, #0
	return api->rx_buf_rsp(dev, buf, len);
    b1ca:	2228      	movs	r2, #40	; 0x28
    b1cc:	8583      	strh	r3, [r0, #44]	; 0x2c
    b1ce:	481a      	ldr	r0, [pc, #104]	; (b238 <uart_cb+0x158>)
    b1d0:	3104      	adds	r1, #4
    b1d2:	6883      	ldr	r3, [r0, #8]
    b1d4:	691b      	ldr	r3, [r3, #16]
}
    b1d6:	b006      	add	sp, #24
    b1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1dc:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b1de:	4b1a      	ldr	r3, [pc, #104]	; (b248 <uart_cb+0x168>)
    b1e0:	e7a3      	b.n	b12a <uart_cb+0x4a>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b1e2:	684b      	ldr	r3, [r1, #4]
    b1e4:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    b1e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b1e8:	b12b      	cbz	r3, b1f6 <uart_cb+0x116>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b1ea:	4819      	ldr	r0, [pc, #100]	; (b250 <uart_cb+0x170>)
}
    b1ec:	b006      	add	sp, #24
    b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b1f2:	f020 bc0c 	b.w	2ba0e <k_queue_append>
			k_free(buf);
    b1f6:	4608      	mov	r0, r1
}
    b1f8:	b006      	add	sp, #24
    b1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b1fe:	f020 bdb3 	b.w	2bd68 <k_free>
		if (!aborted_buf) {
    b202:	4a0a      	ldr	r2, [pc, #40]	; (b22c <uart_cb+0x14c>)
    b204:	6813      	ldr	r3, [r2, #0]
    b206:	b90b      	cbnz	r3, b20c <uart_cb+0x12c>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b208:	684b      	ldr	r3, [r1, #4]
    b20a:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b20c:	4808      	ldr	r0, [pc, #32]	; (b230 <uart_cb+0x150>)
    b20e:	688b      	ldr	r3, [r1, #8]
    b210:	6801      	ldr	r1, [r0, #0]
    b212:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b214:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b216:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
    b218:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		uart_tx(uart, &buf->data[aborted_len],
    b21a:	4807      	ldr	r0, [pc, #28]	; (b238 <uart_cb+0x158>)
    b21c:	1ad2      	subs	r2, r2, r3
    b21e:	4419      	add	r1, r3
}
    b220:	b006      	add	sp, #24
    b222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
    b226:	f01b b976 	b.w	26516 <uart_tx.constprop.0>
    b22a:	bf00      	nop
    b22c:	2000a2cc 	.word	0x2000a2cc
    b230:	2000a2c8 	.word	0x2000a2c8
    b234:	20008c28 	.word	0x20008c28
    b238:	0002c798 	.word	0x0002c798
    b23c:	0002e14a 	.word	0x0002e14a
    b240:	0002cd90 	.word	0x0002cd90
    b244:	20021ac6 	.word	0x20021ac6
    b248:	0002de2c 	.word	0x0002de2c
    b24c:	200091d0 	.word	0x200091d0
    b250:	20008c0c 	.word	0x20008c0c

0000b254 <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    b254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    b258:	f020 fc97 	bl	2bb8a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b25c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b260:	fba0 0302 	umull	r0, r3, r0, r2
    b264:	fb02 3101 	mla	r1, r2, r1, r3
    b268:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    b26a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b26e:	2300      	movs	r3, #0
    b270:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b274:	0bc9      	lsrs	r1, r1, #15
    b276:	f7fd fdeb 	bl	8e50 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    b27a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b27e:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    b280:	460d      	mov	r5, r1
    b282:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    b284:	f7fd fe34 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b288:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b28c:	fb03 f100 	mul.w	r1, r3, r0
    b290:	1a70      	subs	r0, r6, r1
    b292:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b296:	223c      	movs	r2, #60	; 0x3c
    b298:	2300      	movs	r3, #0
    b29a:	f7fd fe29 	bl	8ef0 <__aeabi_uldivmod>
    b29e:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b2a0:	4f22      	ldr	r7, [pc, #136]	; (b32c <shoot_minute_save_thread+0xd8>)
    b2a2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    b2a6:	f020 fc70 	bl	2bb8a <z_impl_k_uptime_ticks>
    b2aa:	fba0 4306 	umull	r4, r3, r0, r6
    b2ae:	fb06 3101 	mla	r1, r6, r1, r3
    b2b2:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    b2b4:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    b2b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2bc:	2300      	movs	r3, #0
    b2be:	0bc9      	lsrs	r1, r1, #15
    b2c0:	f7fd fdc6 	bl	8e50 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    b2c4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2c8:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    b2ca:	4604      	mov	r4, r0
    b2cc:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    b2ce:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    b2d2:	f7fd fe0d 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b2d6:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    b2da:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    b2dc:	ebb4 0008 	subs.w	r0, r4, r8
    b2e0:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b2e4:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    b2e8:	2300      	movs	r3, #0
    b2ea:	f7fd fe01 	bl	8ef0 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    b2ee:	1c6a      	adds	r2, r5, #1
    b2f0:	4282      	cmp	r2, r0
    b2f2:	d1d8      	bne.n	b2a6 <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b2f4:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    b2f6:	2a3b      	cmp	r2, #59	; 0x3b
    b2f8:	bf14      	ite	ne
    b2fa:	4615      	movne	r5, r2
    b2fc:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    b300:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    b304:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b308:	fb03 4312 	mls	r3, r3, r2, r4
    b30c:	bf14      	ite	ne
    b30e:	4649      	movne	r1, r9
    b310:	2100      	moveq	r1, #0
    b312:	4638      	mov	r0, r7
    b314:	f01b fb6b 	bl	269ee <printk>
        feed_circular_buffer();
    b318:	f000 fc70 	bl	bbfc <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    b31c:	4b04      	ldr	r3, [pc, #16]	; (b330 <shoot_minute_save_thread+0xdc>)
    b31e:	6818      	ldr	r0, [r3, #0]
    b320:	f000 fda2 	bl	be68 <print_current_position_cb>
		printk(" \n");
    b324:	4803      	ldr	r0, [pc, #12]	; (b334 <shoot_minute_save_thread+0xe0>)
    b326:	f01b fb62 	bl	269ee <printk>
    b32a:	e7ba      	b.n	b2a2 <shoot_minute_save_thread+0x4e>
    b32c:	0002e168 	.word	0x0002e168
    b330:	20021410 	.word	0x20021410
    b334:	0002e69a 	.word	0x0002e69a

0000b338 <ble_write_thread>:
{
    b338:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b33a:	f04f 32ff 	mov.w	r2, #4294967295
    b33e:	f04f 33ff 	mov.w	r3, #4294967295
    b342:	480d      	ldr	r0, [pc, #52]	; (b378 <ble_write_thread+0x40>)
    b344:	f01b f8ef 	bl	26526 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    b348:	4d0c      	ldr	r5, [pc, #48]	; (b37c <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b34a:	4e0d      	ldr	r6, [pc, #52]	; (b380 <ble_write_thread+0x48>)
    b34c:	f04f 32ff 	mov.w	r2, #4294967295
    b350:	f04f 33ff 	mov.w	r3, #4294967295
    b354:	4628      	mov	r0, r5
    b356:	f016 fc31 	bl	21bbc <z_impl_k_queue_get>
    b35a:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    b35c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b35e:	1d01      	adds	r1, r0, #4
    b360:	2000      	movs	r0, #0
    b362:	f005 f99d 	bl	106a0 <bt_nus_send>
    b366:	b110      	cbz	r0, b36e <ble_write_thread+0x36>
			printk("Falha aqui- Failed to send data over BLE connection");
    b368:	4630      	mov	r0, r6
    b36a:	f01b fb40 	bl	269ee <printk>
		k_free(buf);
    b36e:	4620      	mov	r0, r4
    b370:	f020 fcfa 	bl	2bd68 <k_free>
	for (;;) {
    b374:	e7ea      	b.n	b34c <ble_write_thread+0x14>
    b376:	bf00      	nop
    b378:	20008b4c 	.word	0x20008b4c
    b37c:	20008c0c 	.word	0x20008c0c
    b380:	0002e198 	.word	0x0002e198

0000b384 <adc_thread>:
}




void adc_thread(void){
    b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b388:	4e36      	ldr	r6, [pc, #216]	; (b464 <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b38a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b468 <adc_thread+0xe4>
    b38e:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b390:	4c36      	ldr	r4, [pc, #216]	; (b46c <adc_thread+0xe8>)
    b392:	2700      	movs	r7, #0
    b394:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b396:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b470 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b39a:	7963      	ldrb	r3, [r4, #5]
    b39c:	b13b      	cbz	r3, b3ae <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b39e:	2301      	movs	r3, #1
    b3a0:	7922      	ldrb	r2, [r4, #4]
    b3a2:	4093      	lsls	r3, r2
    b3a4:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b3a6:	7c23      	ldrb	r3, [r4, #16]
    b3a8:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b3aa:	7c63      	ldrb	r3, [r4, #17]
    b3ac:	7473      	strb	r3, [r6, #17]
    b3ae:	f04f 32ff 	mov.w	r2, #4294967295
    b3b2:	f04f 33ff 	mov.w	r3, #4294967295
    b3b6:	4650      	mov	r0, sl
    b3b8:	f016 fa08 	bl	217cc <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b3bc:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b3be:	68ab      	ldr	r3, [r5, #8]
    b3c0:	4631      	mov	r1, r6
    b3c2:	4628      	mov	r0, r5
    b3c4:	685b      	ldr	r3, [r3, #4]
    b3c6:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b3c8:	7922      	ldrb	r2, [r4, #4]
    b3ca:	f9b8 1000 	ldrsh.w	r1, [r8]
    b3ce:	4b29      	ldr	r3, [pc, #164]	; (b474 <adc_thread+0xf0>)
    b3d0:	9201      	str	r2, [sp, #4]
    b3d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b3d6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b478 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b3da:	4650      	mov	r0, sl
    b3dc:	f016 fac6 	bl	2196c <z_impl_k_mutex_unlock>
    b3e0:	f8d9 3000 	ldr.w	r3, [r9]
    b3e4:	9a01      	ldr	r2, [sp, #4]
    b3e6:	2b01      	cmp	r3, #1
    b3e8:	d12d      	bne.n	b446 <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b3ea:	6829      	ldr	r1, [r5, #0]
    b3ec:	4823      	ldr	r0, [pc, #140]	; (b47c <adc_thread+0xf8>)
    b3ee:	f01b fafe 	bl	269ee <printk>
			printk("%"PRId16, buf_adc);
    b3f2:	f9b8 1000 	ldrsh.w	r1, [r8]
    b3f6:	4822      	ldr	r0, [pc, #136]	; (b480 <adc_thread+0xfc>)
    b3f8:	f01b faf9 	bl	269ee <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b3fc:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b3fe:	f9b8 5000 	ldrsh.w	r5, [r8]
    b402:	b1e3      	cbz	r3, b43e <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b404:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b406:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b408:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b40c:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b40e:	bf0a      	itet	eq
    b410:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b412:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b414:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b416:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b418:	bf08      	it	eq
    b41a:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b41c:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b41e:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b420:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b422:	bf44      	itt	mi
    b424:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b428:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b42a:	79a0      	ldrb	r0, [r4, #6]
    b42c:	a903      	add	r1, sp, #12
    b42e:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b430:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b432:	f00f ff1f 	bl	1b274 <adc_gain_invert>
	if (ret == 0) {
    b436:	b910      	cbnz	r0, b43e <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b438:	9d03      	ldr	r5, [sp, #12]
    b43a:	9b01      	ldr	r3, [sp, #4]
    b43c:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b43e:	4629      	mov	r1, r5
    b440:	4810      	ldr	r0, [pc, #64]	; (b484 <adc_thread+0x100>)
    b442:	f01b fad4 	bl	269ee <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b446:	3701      	adds	r7, #1
    b448:	2f06      	cmp	r7, #6
    b44a:	f104 0414 	add.w	r4, r4, #20
    b44e:	d1a4      	bne.n	b39a <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b450:	2300      	movs	r3, #0
    b452:	f8c9 3000 	str.w	r3, [r9]
	return z_impl_k_sleep(timeout);
    b456:	2100      	movs	r1, #0
    b458:	f640 40cd 	movw	r0, #3277	; 0xccd
    b45c:	f018 fb0c 	bl	23a78 <z_impl_k_sleep>
    while (1) {	
    b460:	e796      	b.n	b390 <adc_thread+0xc>
    b462:	bf00      	nop
    b464:	200083e4 	.word	0x200083e4
    b468:	2000a2dc 	.word	0x2000a2dc
    b46c:	0002d020 	.word	0x0002d020
    b470:	20021aa8 	.word	0x20021aa8
    b474:	20021a98 	.word	0x20021a98
    b478:	2000a2d8 	.word	0x2000a2d8
    b47c:	0002e1cc 	.word	0x0002e1cc
    b480:	0002e1df 	.word	0x0002e1df
    b484:	0002e1e3 	.word	0x0002e1e3

0000b488 <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b488:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b48a:	4805      	ldr	r0, [pc, #20]	; (b4a0 <button_pressed_4+0x18>)
    b48c:	f016 fc00 	bl	21c90 <z_impl_k_sem_give>
    b490:	f01f fb54 	bl	2ab3c <sys_clock_cycle_get_32>
}
    b494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b498:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b49a:	4802      	ldr	r0, [pc, #8]	; (b4a4 <button_pressed_4+0x1c>)
    b49c:	f01b baa7 	b.w	269ee <printk>
    b4a0:	20008b7c 	.word	0x20008b7c
    b4a4:	0002e1ed 	.word	0x0002e1ed

0000b4a8 <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4a8:	b508      	push	{r3, lr}
    b4aa:	4805      	ldr	r0, [pc, #20]	; (b4c0 <button_pressed_3+0x18>)
    b4ac:	f016 fbf0 	bl	21c90 <z_impl_k_sem_give>
    b4b0:	f01f fb44 	bl	2ab3c <sys_clock_cycle_get_32>
}
    b4b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4b8:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b4ba:	4802      	ldr	r0, [pc, #8]	; (b4c4 <button_pressed_3+0x1c>)
    b4bc:	f01b ba97 	b.w	269ee <printk>
    b4c0:	20008b64 	.word	0x20008b64
    b4c4:	0002e205 	.word	0x0002e205

0000b4c8 <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4c8:	b508      	push	{r3, lr}
    b4ca:	4807      	ldr	r0, [pc, #28]	; (b4e8 <button_pressed_2+0x20>)
    b4cc:	f016 fbe0 	bl	21c90 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b4d0:	2101      	movs	r1, #1
    b4d2:	4806      	ldr	r0, [pc, #24]	; (b4ec <button_pressed_2+0x24>)
    b4d4:	f7ff fcd0 	bl	ae78 <gpio_pin_set_dt.isra.0>
    b4d8:	f01f fb30 	bl	2ab3c <sys_clock_cycle_get_32>
}
    b4dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4e0:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b4e2:	4803      	ldr	r0, [pc, #12]	; (b4f0 <button_pressed_2+0x28>)
    b4e4:	f01b ba83 	b.w	269ee <printk>
    b4e8:	20008bc4 	.word	0x20008bc4
    b4ec:	0002d0a0 	.word	0x0002d0a0
    b4f0:	0002e21d 	.word	0x0002e21d

0000b4f4 <flash_test_>:
void flash_test_(void) {
    b4f4:	b530      	push	{r4, r5, lr}
    b4f6:	b085      	sub	sp, #20
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b4f8:	483b      	ldr	r0, [pc, #236]	; (b5e8 <flash_test_+0xf4>)
    b4fa:	f015 fc31 	bl	20d60 <z_impl_device_get_binding>
const struct device *flash_dev = device_get_binding(FLASH_DEVICE);
    b4fe:	9001      	str	r0, [sp, #4]
my_area_partition = (struct flash_area*)k_malloc(sizeof(struct flash_area));
    b500:	2010      	movs	r0, #16
    b502:	f020 fc38 	bl	2bd76 <k_malloc>
my_area_partition->fa_dev=&flash_dev;
    b506:	ab01      	add	r3, sp, #4
    b508:	60c3      	str	r3, [r0, #12]
my_area_partition = (struct flash_area*)k_malloc(sizeof(struct flash_area));
    b50a:	9002      	str	r0, [sp, #8]
err=flash_area_open(DT_FIXED_PARTITION_ID(DT_NODE_BY_FIXED_PARTITION_LABEL(partition_0)), &my_area_partition);
    b50c:	a902      	add	r1, sp, #8
    b50e:	2007      	movs	r0, #7
    b510:	f004 fc62 	bl	fdd8 <flash_area_open>
    b514:	4601      	mov	r1, r0
   printf("Result Open:%d \n", err);
    b516:	4835      	ldr	r0, [pc, #212]	; (b5ec <flash_test_+0xf8>)
    b518:	f01a f840 	bl	2559c <iprintf>
   printf("fa_id %d device_id %d\n", my_area_partition->fa_id,my_area_partition->fa_device_id);
    b51c:	9b02      	ldr	r3, [sp, #8]
    b51e:	4834      	ldr	r0, [pc, #208]	; (b5f0 <flash_test_+0xfc>)
    b520:	785a      	ldrb	r2, [r3, #1]
    b522:	7819      	ldrb	r1, [r3, #0]
    b524:	f01a f83a 	bl	2559c <iprintf>
   err = flash_area_erase(my_area_partition, 0, my_area_partition->fa_size);
    b528:	9802      	ldr	r0, [sp, #8]
    b52a:	2100      	movs	r1, #0
    b52c:	6882      	ldr	r2, [r0, #8]
    b52e:	f01c f9df 	bl	278f0 <flash_area_erase>
   uint32_t buf_word = 0U;
    b532:	2400      	movs	r4, #0
   printf("Result Erase:%d size=%lu \n", err,my_area_partition->fa_size);
    b534:	9b02      	ldr	r3, [sp, #8]
   err = flash_area_erase(my_area_partition, 0, my_area_partition->fa_size);
    b536:	4601      	mov	r1, r0
   printf("Result Erase:%d size=%lu \n", err,my_area_partition->fa_size);
    b538:	689a      	ldr	r2, [r3, #8]
    b53a:	482e      	ldr	r0, [pc, #184]	; (b5f4 <flash_test_+0x100>)
    b53c:	f01a f82e 	bl	2559c <iprintf>
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b540:	aa03      	add	r2, sp, #12
    b542:	2304      	movs	r3, #4
    b544:	2114      	movs	r1, #20
    b546:	9802      	ldr	r0, [sp, #8]
   uint32_t buf_word = 0U;
    b548:	9403      	str	r4, [sp, #12]
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b54a:	f01c f9a7 	bl	2789c <flash_area_read>
    b54e:	4605      	mov	r5, r0
   printf("1  Data read: %x\n", buf_word);
    b550:	9903      	ldr	r1, [sp, #12]
    b552:	4829      	ldr	r0, [pc, #164]	; (b5f8 <flash_test_+0x104>)
    b554:	f01a f822 	bl	2559c <iprintf>
   printf("2  Status Read:%d \n", err);
    b558:	4629      	mov	r1, r5
    b55a:	4828      	ldr	r0, [pc, #160]	; (b5fc <flash_test_+0x108>)
    b55c:	f01a f81e 	bl	2559c <iprintf>
   buf_word = 0x51525357;
    b560:	4b27      	ldr	r3, [pc, #156]	; (b600 <flash_test_+0x10c>)
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b562:	aa03      	add	r2, sp, #12
   buf_word = 0x51525357;
    b564:	9303      	str	r3, [sp, #12]
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b566:	2114      	movs	r1, #20
    b568:	2304      	movs	r3, #4
    b56a:	9802      	ldr	r0, [sp, #8]
    b56c:	f01c f9ab 	bl	278c6 <flash_area_write>
    b570:	4601      	mov	r1, r0
   printf("3  Status Write:%d \n", err);
    b572:	4824      	ldr	r0, [pc, #144]	; (b604 <flash_test_+0x110>)
    b574:	f01a f812 	bl	2559c <iprintf>
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b578:	2304      	movs	r3, #4
    b57a:	aa03      	add	r2, sp, #12
    b57c:	2114      	movs	r1, #20
    b57e:	9802      	ldr	r0, [sp, #8]
   buf_word = 0x0;
    b580:	9403      	str	r4, [sp, #12]
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b582:	f01c f98b 	bl	2789c <flash_area_read>
    b586:	4605      	mov	r5, r0
   printf("4  Data read: %x\n", buf_word);
    b588:	9903      	ldr	r1, [sp, #12]
    b58a:	481f      	ldr	r0, [pc, #124]	; (b608 <flash_test_+0x114>)
    b58c:	f01a f806 	bl	2559c <iprintf>
   printf("5  Status Read:%d \n", err);
    b590:	4629      	mov	r1, r5
    b592:	481e      	ldr	r0, [pc, #120]	; (b60c <flash_test_+0x118>)
    b594:	f01a f802 	bl	2559c <iprintf>
   err = flash_area_erase(my_area_partition, 0, my_area_partition->fa_size);
    b598:	9802      	ldr	r0, [sp, #8]
    b59a:	4621      	mov	r1, r4
    b59c:	6882      	ldr	r2, [r0, #8]
    b59e:	f01c f9a7 	bl	278f0 <flash_area_erase>
    b5a2:	4601      	mov	r1, r0
   printf("Result Erase:%d \n", err);
    b5a4:	481a      	ldr	r0, [pc, #104]	; (b610 <flash_test_+0x11c>)
    b5a6:	f019 fff9 	bl	2559c <iprintf>
   buf_word = 0x51525358;
    b5aa:	4b1a      	ldr	r3, [pc, #104]	; (b614 <flash_test_+0x120>)
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b5ac:	aa03      	add	r2, sp, #12
   buf_word = 0x51525358;
    b5ae:	9303      	str	r3, [sp, #12]
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b5b0:	2114      	movs	r1, #20
    b5b2:	2304      	movs	r3, #4
    b5b4:	9802      	ldr	r0, [sp, #8]
    b5b6:	f01c f986 	bl	278c6 <flash_area_write>
    b5ba:	4601      	mov	r1, r0
   printf("6  Status Write:%d \n", err);
    b5bc:	4816      	ldr	r0, [pc, #88]	; (b618 <flash_test_+0x124>)
    b5be:	f019 ffed 	bl	2559c <iprintf>
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b5c2:	2304      	movs	r3, #4
    b5c4:	aa03      	add	r2, sp, #12
    b5c6:	2114      	movs	r1, #20
    b5c8:	9802      	ldr	r0, [sp, #8]
   buf_word = 0x0;
    b5ca:	9403      	str	r4, [sp, #12]
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b5cc:	f01c f966 	bl	2789c <flash_area_read>
    b5d0:	4604      	mov	r4, r0
   printf("7  Data read: %x\n", buf_word);
    b5d2:	9903      	ldr	r1, [sp, #12]
    b5d4:	4811      	ldr	r0, [pc, #68]	; (b61c <flash_test_+0x128>)
    b5d6:	f019 ffe1 	bl	2559c <iprintf>
   printf("8  Status Read:%d \n", err);
    b5da:	4621      	mov	r1, r4
    b5dc:	4810      	ldr	r0, [pc, #64]	; (b620 <flash_test_+0x12c>)
    b5de:	f019 ffdd 	bl	2559c <iprintf>
}
    b5e2:	b005      	add	sp, #20
    b5e4:	bd30      	pop	{r4, r5, pc}
    b5e6:	bf00      	nop
    b5e8:	0002e235 	.word	0x0002e235
    b5ec:	0002e242 	.word	0x0002e242
    b5f0:	0002e253 	.word	0x0002e253
    b5f4:	0002e26a 	.word	0x0002e26a
    b5f8:	0002e285 	.word	0x0002e285
    b5fc:	0002e297 	.word	0x0002e297
    b600:	51525357 	.word	0x51525357
    b604:	0002e2ab 	.word	0x0002e2ab
    b608:	0002e2c0 	.word	0x0002e2c0
    b60c:	0002e2d2 	.word	0x0002e2d2
    b610:	0002e2e6 	.word	0x0002e2e6
    b614:	51525358 	.word	0x51525358
    b618:	0002e2f8 	.word	0x0002e2f8
    b61c:	0002e30d 	.word	0x0002e30d
    b620:	0002e31f 	.word	0x0002e31f

0000b624 <write_memory_thread>:
void write_memory_thread(void){
    b624:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    b626:	4c05      	ldr	r4, [pc, #20]	; (b63c <write_memory_thread+0x18>)
    b628:	f04f 32ff 	mov.w	r2, #4294967295
    b62c:	f04f 33ff 	mov.w	r3, #4294967295
    b630:	4620      	mov	r0, r4
    b632:	f01a ff78 	bl	26526 <k_sem_take.constprop.0.isra.0>
		    flash_test_();
    b636:	f7ff ff5d 	bl	b4f4 <flash_test_>
	while(1){
    b63a:	e7f5      	b.n	b628 <write_memory_thread+0x4>
    b63c:	20008bc4 	.word	0x20008bc4

0000b640 <send_bluetooth>:
{
    b640:	b084      	sub	sp, #16
    b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b646:	ac06      	add	r4, sp, #24
    b648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b64c:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b64e:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b652:	f020 fb90 	bl	2bd76 <k_malloc>
    int k=0;
    b656:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b658:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b65a:	f8df 8054 	ldr.w	r8, [pc, #84]	; b6b0 <send_bluetooth+0x70>
    while(k<comprimento-1){
    b65e:	1e77      	subs	r7, r6, #1
    b660:	42a7      	cmp	r7, r4
    b662:	d91d      	bls.n	b6a0 <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b664:	42b4      	cmp	r4, r6
    b666:	d301      	bcc.n	b66c <send_bluetooth+0x2c>
    b668:	2200      	movs	r2, #0
    b66a:	e00f      	b.n	b68c <send_bluetooth+0x4c>
    b66c:	2200      	movs	r2, #0
    b66e:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b670:	f104 0118 	add.w	r1, r4, #24
    b674:	4469      	add	r1, sp
       small_pkt++;
    b676:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b678:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b67a:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b67c:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b67e:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b682:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b686:	d001      	beq.n	b68c <send_bluetooth+0x4c>
    b688:	42a6      	cmp	r6, r4
    b68a:	d8f1      	bhi.n	b670 <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b68c:	4629      	mov	r1, r5
    b68e:	2000      	movs	r0, #0
    b690:	f005 f806 	bl	106a0 <bt_nus_send>
    b694:	2800      	cmp	r0, #0
    b696:	d0e3      	beq.n	b660 <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b698:	4640      	mov	r0, r8
    b69a:	f01b f9a8 	bl	269ee <printk>
    b69e:	e7df      	b.n	b660 <send_bluetooth+0x20>
     k_free(packet_data);
    b6a0:	4628      	mov	r0, r5
    b6a2:	f020 fb61 	bl	2bd68 <k_free>
}
    b6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b6aa:	2000      	movs	r0, #0
    b6ac:	b004      	add	sp, #16
    b6ae:	4770      	bx	lr
    b6b0:	0002e333 	.word	0x0002e333

0000b6b4 <send_protobuf_thread>:
void send_protobuf_thread(void){
    b6b4:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b6b6:	4c05      	ldr	r4, [pc, #20]	; (b6cc <send_protobuf_thread+0x18>)
    b6b8:	f04f 32ff 	mov.w	r2, #4294967295
    b6bc:	f04f 33ff 	mov.w	r3, #4294967295
    b6c0:	4620      	mov	r0, r4
    b6c2:	f01a ff30 	bl	26526 <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b6c6:	f01a ff36 	bl	26536 <send_protobuf>
   while(1){
    b6ca:	e7f5      	b.n	b6b8 <send_protobuf_thread+0x4>
    b6cc:	20008bf4 	.word	0x20008bf4

0000b6d0 <configure_all_buttons>:
void configure_all_buttons(void){
    b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b6d2:	4c30      	ldr	r4, [pc, #192]	; (b794 <configure_all_buttons+0xc4>)
    b6d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b6d8:	4620      	mov	r0, r4
    b6da:	f7ff fc95 	bl	b008 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b6de:	4620      	mov	r0, r4
    b6e0:	f7ff f9f6 	bl	aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b6e4:	492c      	ldr	r1, [pc, #176]	; (b798 <configure_all_buttons+0xc8>)
    b6e6:	4b2d      	ldr	r3, [pc, #180]	; (b79c <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b6e8:	4c2d      	ldr	r4, [pc, #180]	; (b7a0 <configure_all_buttons+0xd0>)
    b6ea:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b6ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b6f0:	4620      	mov	r0, r4
    b6f2:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b6f4:	4d2b      	ldr	r5, [pc, #172]	; (b7a4 <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b6f6:	f01a ff18 	bl	2652a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b6fa:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b6fc:	4f2a      	ldr	r7, [pc, #168]	; (b7a8 <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b6fe:	2217      	movs	r2, #23
    b700:	4631      	mov	r1, r6
    b702:	4628      	mov	r0, r5
    b704:	f01b f973 	bl	269ee <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b708:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b70c:	4638      	mov	r0, r7
    b70e:	f7ff fc7b 	bl	b008 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b712:	4638      	mov	r0, r7
    b714:	f7ff f9dc 	bl	aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b718:	4924      	ldr	r1, [pc, #144]	; (b7ac <configure_all_buttons+0xdc>)
    b71a:	4b25      	ldr	r3, [pc, #148]	; (b7b0 <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b71c:	4620      	mov	r0, r4
    b71e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b724:	4f23      	ldr	r7, [pc, #140]	; (b7b4 <configure_all_buttons+0xe4>)
    b726:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b728:	f01a feff 	bl	2652a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b72c:	2218      	movs	r2, #24
    b72e:	4631      	mov	r1, r6
    b730:	4628      	mov	r0, r5
    b732:	f01b f95c 	bl	269ee <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b736:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b73a:	4638      	mov	r0, r7
    b73c:	f7ff fc64 	bl	b008 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b740:	4638      	mov	r0, r7
    b742:	f7ff f9c5 	bl	aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b746:	491c      	ldr	r1, [pc, #112]	; (b7b8 <configure_all_buttons+0xe8>)
    b748:	4b1c      	ldr	r3, [pc, #112]	; (b7bc <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b74a:	4620      	mov	r0, r4
    b74c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b74e:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b752:	4f1b      	ldr	r7, [pc, #108]	; (b7c0 <configure_all_buttons+0xf0>)
    b754:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b756:	f01a fee8 	bl	2652a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b75a:	2208      	movs	r2, #8
    b75c:	4631      	mov	r1, r6
    b75e:	4628      	mov	r0, r5
    b760:	f01b f945 	bl	269ee <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b764:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b768:	4638      	mov	r0, r7
    b76a:	f7ff fc4d 	bl	b008 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b76e:	4638      	mov	r0, r7
    b770:	f7ff f9ae 	bl	aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b774:	4913      	ldr	r1, [pc, #76]	; (b7c4 <configure_all_buttons+0xf4>)
    b776:	4b14      	ldr	r3, [pc, #80]	; (b7c8 <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b778:	4620      	mov	r0, r4
    b77a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b77c:	f44f 7300 	mov.w	r3, #512	; 0x200
    b780:	608b      	str	r3, [r1, #8]
    b782:	f01a fed2 	bl	2652a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b786:	4631      	mov	r1, r6
    b788:	4628      	mov	r0, r5
}
    b78a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b78e:	2209      	movs	r2, #9
    b790:	f01b b92d 	b.w	269ee <printk>
    b794:	0002d0e8 	.word	0x0002d0e8
    b798:	2000a338 	.word	0x2000a338
    b79c:	0000aedd 	.word	0x0000aedd
    b7a0:	0002c738 	.word	0x0002c738
    b7a4:	0002e357 	.word	0x0002e357
    b7a8:	0002d0e0 	.word	0x0002d0e0
    b7ac:	2000a32c 	.word	0x2000a32c
    b7b0:	0000b4c9 	.word	0x0000b4c9
    b7b4:	0002d0d8 	.word	0x0002d0d8
    b7b8:	2000a320 	.word	0x2000a320
    b7bc:	0000b4a9 	.word	0x0000b4a9
    b7c0:	0002d0d0 	.word	0x0002d0d0
    b7c4:	2000a314 	.word	0x2000a314
    b7c8:	0000b489 	.word	0x0000b489

0000b7cc <configure_digital_inputs>:
void configure_digital_inputs(void){
    b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b7ce:	4c2e      	ldr	r4, [pc, #184]	; (b888 <configure_digital_inputs+0xbc>)
    b7d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b7d4:	4620      	mov	r0, r4
    b7d6:	f7ff fc17 	bl	b008 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b7da:	4620      	mov	r0, r4
    b7dc:	f7ff f87c 	bl	a8d8 <gpio_pin_get_dt>
    b7e0:	4601      	mov	r1, r0
    b7e2:	482a      	ldr	r0, [pc, #168]	; (b88c <configure_digital_inputs+0xc0>)
    b7e4:	f01b f903 	bl	269ee <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b7e8:	4620      	mov	r0, r4
    b7ea:	f7ff f971 	bl	aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b7ee:	4928      	ldr	r1, [pc, #160]	; (b890 <configure_digital_inputs+0xc4>)
    b7f0:	4b28      	ldr	r3, [pc, #160]	; (b894 <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b7f2:	4c29      	ldr	r4, [pc, #164]	; (b898 <configure_digital_inputs+0xcc>)
    b7f4:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b7f6:	2310      	movs	r3, #16
    b7f8:	4620      	mov	r0, r4
    b7fa:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b7fc:	4d27      	ldr	r5, [pc, #156]	; (b89c <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b7fe:	f01a fe94 	bl	2652a <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b802:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b804:	4f26      	ldr	r7, [pc, #152]	; (b8a0 <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b806:	2204      	movs	r2, #4
    b808:	4631      	mov	r1, r6
    b80a:	4628      	mov	r0, r5
    b80c:	f01b f8ef 	bl	269ee <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b810:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b814:	4638      	mov	r0, r7
    b816:	f7ff fbf7 	bl	b008 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b81a:	4638      	mov	r0, r7
    b81c:	f7ff f85c 	bl	a8d8 <gpio_pin_get_dt>
    b820:	4601      	mov	r1, r0
    b822:	4820      	ldr	r0, [pc, #128]	; (b8a4 <configure_digital_inputs+0xd8>)
    b824:	f01b f8e3 	bl	269ee <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b828:	4638      	mov	r0, r7
    b82a:	f7ff f951 	bl	aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b82e:	491e      	ldr	r1, [pc, #120]	; (b8a8 <configure_digital_inputs+0xdc>)
    b830:	4b1e      	ldr	r3, [pc, #120]	; (b8ac <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b832:	4f1f      	ldr	r7, [pc, #124]	; (b8b0 <configure_digital_inputs+0xe4>)
    b834:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b836:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b838:	4620      	mov	r0, r4
    b83a:	608b      	str	r3, [r1, #8]
    b83c:	f01a fe75 	bl	2652a <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b840:	2205      	movs	r2, #5
    b842:	4631      	mov	r1, r6
    b844:	4628      	mov	r0, r5
    b846:	f01b f8d2 	bl	269ee <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b84a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b84e:	4638      	mov	r0, r7
    b850:	f7ff fbda 	bl	b008 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b854:	4638      	mov	r0, r7
    b856:	f7ff f83f 	bl	a8d8 <gpio_pin_get_dt>
    b85a:	4601      	mov	r1, r0
    b85c:	4815      	ldr	r0, [pc, #84]	; (b8b4 <configure_digital_inputs+0xe8>)
    b85e:	f01b f8c6 	bl	269ee <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b862:	4638      	mov	r0, r7
    b864:	f7ff f934 	bl	aad0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b868:	4913      	ldr	r1, [pc, #76]	; (b8b8 <configure_digital_inputs+0xec>)
    b86a:	4b14      	ldr	r3, [pc, #80]	; (b8bc <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b86c:	4620      	mov	r0, r4
    b86e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b870:	2340      	movs	r3, #64	; 0x40
    b872:	608b      	str	r3, [r1, #8]
    b874:	f01a fe59 	bl	2652a <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b878:	4631      	mov	r1, r6
    b87a:	4628      	mov	r0, r5
}
    b87c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b880:	2206      	movs	r2, #6
    b882:	f01b b8b4 	b.w	269ee <printk>
    b886:	bf00      	nop
    b888:	0002d0c8 	.word	0x0002d0c8
    b88c:	0002e373 	.word	0x0002e373
    b890:	2000a308 	.word	0x2000a308
    b894:	0000a939 	.word	0x0000a939
    b898:	0002c720 	.word	0x0002c720
    b89c:	0002e38b 	.word	0x0002e38b
    b8a0:	0002d0c0 	.word	0x0002d0c0
    b8a4:	0002e3ae 	.word	0x0002e3ae
    b8a8:	2000a2fc 	.word	0x2000a2fc
    b8ac:	0000a95d 	.word	0x0000a95d
    b8b0:	0002d0b8 	.word	0x0002d0b8
    b8b4:	0002e3c6 	.word	0x0002e3c6
    b8b8:	2000a2f0 	.word	0x2000a2f0
    b8bc:	0000a981 	.word	0x0000a981

0000b8c0 <configure_led>:
void configure_led(void){
    b8c0:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b8c2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b8c6:	480a      	ldr	r0, [pc, #40]	; (b8f0 <configure_led+0x30>)
    b8c8:	f7ff fb9e 	bl	b008 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b8cc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b8d0:	4808      	ldr	r0, [pc, #32]	; (b8f4 <configure_led+0x34>)
    b8d2:	f7ff fb99 	bl	b008 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b8d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b8da:	4807      	ldr	r0, [pc, #28]	; (b8f8 <configure_led+0x38>)
    b8dc:	f7ff fb94 	bl	b008 <gpio_pin_configure_dt.isra.0>
}
    b8e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b8e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b8e8:	4804      	ldr	r0, [pc, #16]	; (b8fc <configure_led+0x3c>)
    b8ea:	f7ff bb8d 	b.w	b008 <gpio_pin_configure_dt.isra.0>
    b8ee:	bf00      	nop
    b8f0:	0002d0b0 	.word	0x0002d0b0
    b8f4:	0002d0a8 	.word	0x0002d0a8
    b8f8:	0002d0a0 	.word	0x0002d0a0
    b8fc:	0002d098 	.word	0x0002d098

0000b900 <turn_off_all_leds>:
void turn_off_all_leds(void){
    b900:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b902:	2100      	movs	r1, #0
    b904:	4808      	ldr	r0, [pc, #32]	; (b928 <turn_off_all_leds+0x28>)
    b906:	f7ff fab7 	bl	ae78 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b90a:	2100      	movs	r1, #0
    b90c:	4807      	ldr	r0, [pc, #28]	; (b92c <turn_off_all_leds+0x2c>)
    b90e:	f7ff fab3 	bl	ae78 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b912:	2100      	movs	r1, #0
    b914:	4806      	ldr	r0, [pc, #24]	; (b930 <turn_off_all_leds+0x30>)
    b916:	f7ff faaf 	bl	ae78 <gpio_pin_set_dt.isra.0>
}
    b91a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b91e:	2100      	movs	r1, #0
    b920:	4804      	ldr	r0, [pc, #16]	; (b934 <turn_off_all_leds+0x34>)
    b922:	f7ff baa9 	b.w	ae78 <gpio_pin_set_dt.isra.0>
    b926:	bf00      	nop
    b928:	0002d0b0 	.word	0x0002d0b0
    b92c:	0002d0a8 	.word	0x0002d0a8
    b930:	0002d0a0 	.word	0x0002d0a0
    b934:	0002d098 	.word	0x0002d098

0000b938 <configure_adc>:
void configure_adc(void){
    b938:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b93a:	2500      	movs	r5, #0
    b93c:	4c12      	ldr	r4, [pc, #72]	; (b988 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b93e:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b942:	f01f fffb 	bl	2b93c <z_device_is_ready>
    b946:	b920      	cbnz	r0, b952 <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b948:	4810      	ldr	r0, [pc, #64]	; (b98c <configure_adc+0x54>)
}
    b94a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b94e:	f01b b84e 	b.w	269ee <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b952:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b956:	b16b      	cbz	r3, b974 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b958:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b95c:	6883      	ldr	r3, [r0, #8]
    b95e:	4621      	mov	r1, r4
    b960:	681b      	ldr	r3, [r3, #0]
    b962:	4798      	blx	r3
		if (err < 0) {
    b964:	1e02      	subs	r2, r0, #0
    b966:	da08      	bge.n	b97a <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b968:	4629      	mov	r1, r5
}
    b96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b96e:	4808      	ldr	r0, [pc, #32]	; (b990 <configure_adc+0x58>)
    b970:	f01b b83d 	b.w	269ee <printk>
		return -ENOTSUP;
    b974:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b978:	e7f6      	b.n	b968 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b97a:	3501      	adds	r5, #1
    b97c:	2d06      	cmp	r5, #6
    b97e:	f104 0414 	add.w	r4, r4, #20
    b982:	d1dc      	bne.n	b93e <configure_adc+0x6>
}
    b984:	bd38      	pop	{r3, r4, r5, pc}
    b986:	bf00      	nop
    b988:	0002d026 	.word	0x0002d026
    b98c:	0002e3de 	.word	0x0002e3de
    b990:	0002e3ff 	.word	0x0002e3ff

0000b994 <main>:
{
    b994:	b570      	push	{r4, r5, r6, lr}
    b996:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_mutex_init(mutex);
    b998:	4866      	ldr	r0, [pc, #408]	; (bb34 <main+0x1a0>)
    b99a:	f020 f818 	bl	2b9ce <z_impl_k_mutex_init>
	configure_led();
    b99e:	f7ff ff8f 	bl	b8c0 <configure_led>
	turn_off_all_leds();
    b9a2:	f7ff ffad 	bl	b900 <turn_off_all_leds>
 	configure_all_buttons();
    b9a6:	f7ff fe93 	bl	b6d0 <configure_all_buttons>
	configure_digital_inputs();
    b9aa:	f7ff ff0f 	bl	b7cc <configure_digital_inputs>
	configure_adc();
    b9ae:	f7ff ffc3 	bl	b938 <configure_adc>
    b9b2:	4d61      	ldr	r5, [pc, #388]	; (bb38 <main+0x1a4>)
    b9b4:	4628      	mov	r0, r5
    b9b6:	f01f ffc1 	bl	2b93c <z_device_is_ready>
	if (!device_is_ready(uart)) {
    b9ba:	b1d0      	cbz	r0, b9f2 <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    b9bc:	2030      	movs	r0, #48	; 0x30
    b9be:	f020 f9da 	bl	2bd76 <k_malloc>
	if (rx) {
    b9c2:	4604      	mov	r4, r0
    b9c4:	b1a8      	cbz	r0, b9f2 <main+0x5e>
		rx->len = 0;
    b9c6:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    b9c8:	495c      	ldr	r1, [pc, #368]	; (bb3c <main+0x1a8>)
		rx->len = 0;
    b9ca:	8586      	strh	r6, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
    b9cc:	485c      	ldr	r0, [pc, #368]	; (bb40 <main+0x1ac>)
    b9ce:	f016 fde3 	bl	22598 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b9d2:	68ab      	ldr	r3, [r5, #8]
    b9d4:	681b      	ldr	r3, [r3, #0]
    b9d6:	b973      	cbnz	r3, b9f6 <main+0x62>
		k_free(rx);
    b9d8:	4620      	mov	r0, r4
    b9da:	f020 f9c5 	bl	2bd68 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    b9de:	4b59      	ldr	r3, [pc, #356]	; (bb44 <main+0x1b0>)
    b9e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9e4:	9309      	str	r3, [sp, #36]	; 0x24
    b9e6:	2302      	movs	r3, #2
    b9e8:	4857      	ldr	r0, [pc, #348]	; (bb48 <main+0x1b4>)
    b9ea:	aa08      	add	r2, sp, #32
    b9ec:	9308      	str	r3, [sp, #32]
    b9ee:	f01a fd87 	bl	26500 <z_log_msg_static_create.constprop.0>
		error();
    b9f2:	f01a fdb6 	bl	26562 <error>
	return api->callback_set(dev, callback, user_data);
    b9f6:	4632      	mov	r2, r6
    b9f8:	4628      	mov	r0, r5
    b9fa:	4954      	ldr	r1, [pc, #336]	; (bb4c <main+0x1b8>)
    b9fc:	4798      	blx	r3
	if (err) {
    b9fe:	2800      	cmp	r0, #0
    ba00:	d1ea      	bne.n	b9d8 <main+0x44>
	tx = k_malloc(sizeof(*tx));
    ba02:	2030      	movs	r0, #48	; 0x30
    ba04:	f020 f9b7 	bl	2bd76 <k_malloc>
	if (tx) {
    ba08:	4606      	mov	r6, r0
    ba0a:	2800      	cmp	r0, #0
    ba0c:	d0f1      	beq.n	b9f2 <main+0x5e>
		pos = snprintf(tx->data, sizeof(tx->data),
    ba0e:	1d03      	adds	r3, r0, #4
    ba10:	4618      	mov	r0, r3
    ba12:	494f      	ldr	r1, [pc, #316]	; (bb50 <main+0x1bc>)
    ba14:	f020 fb34 	bl	2c080 <strcpy>
		tx->len = pos;
    ba18:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ba1a:	4601      	mov	r1, r0
		tx->len = pos;
    ba1c:	85b2      	strh	r2, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ba1e:	4628      	mov	r0, r5
    ba20:	f01a fd79 	bl	26516 <uart_tx.constprop.0>
	if (err) {
    ba24:	4601      	mov	r1, r0
    ba26:	b118      	cbz	r0, ba30 <main+0x9c>
		printf("Cannot display welcome message (err: %d)", err);
    ba28:	484a      	ldr	r0, [pc, #296]	; (bb54 <main+0x1c0>)
    ba2a:	f019 fdb7 	bl	2559c <iprintf>
	if (err) {
    ba2e:	e7e0      	b.n	b9f2 <main+0x5e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
    ba30:	1d21      	adds	r1, r4, #4
    ba32:	4628      	mov	r0, r5
    ba34:	f01a fd67 	bl	26506 <uart_rx_enable.constprop.0>
	if (err) {
    ba38:	4604      	mov	r4, r0
    ba3a:	2800      	cmp	r0, #0
    ba3c:	d1d9      	bne.n	b9f2 <main+0x5e>
    ba3e:	4e46      	ldr	r6, [pc, #280]	; (bb58 <main+0x1c4>)
    ba40:	4630      	mov	r0, r6
    ba42:	f01f ff7b 	bl	2b93c <z_device_is_ready>
	if (!device_is_ready(uart_2)) {
    ba46:	2800      	cmp	r0, #0
    ba48:	d0d3      	beq.n	b9f2 <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    ba4a:	2030      	movs	r0, #48	; 0x30
    ba4c:	f020 f993 	bl	2bd76 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    ba50:	4942      	ldr	r1, [pc, #264]	; (bb5c <main+0x1c8>)
	rx->len = 0;
    ba52:	8584      	strh	r4, [r0, #44]	; 0x2c
	rx = k_malloc(sizeof(*rx));
    ba54:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    ba56:	4842      	ldr	r0, [pc, #264]	; (bb60 <main+0x1cc>)
    ba58:	f016 fd9e 	bl	22598 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    ba5c:	68b3      	ldr	r3, [r6, #8]
    ba5e:	681b      	ldr	r3, [r3, #0]
    ba60:	b11b      	cbz	r3, ba6a <main+0xd6>
	return api->callback_set(dev, callback, user_data);
    ba62:	4622      	mov	r2, r4
    ba64:	4630      	mov	r0, r6
    ba66:	493f      	ldr	r1, [pc, #252]	; (bb64 <main+0x1d0>)
    ba68:	4798      	blx	r3
	tx = k_malloc(sizeof(*tx));
    ba6a:	2030      	movs	r0, #48	; 0x30
    ba6c:	f020 f983 	bl	2bd76 <k_malloc>
	tx->len = 0;
    ba70:	2200      	movs	r2, #0
	uart_tx(uart_2, tx->data, tx->len, SYS_FOREVER_MS);
    ba72:	1d01      	adds	r1, r0, #4
	tx->len = 0;
    ba74:	8582      	strh	r2, [r0, #44]	; 0x2c
	uart_tx(uart_2, tx->data, tx->len, SYS_FOREVER_MS);
    ba76:	4838      	ldr	r0, [pc, #224]	; (bb58 <main+0x1c4>)
    ba78:	f01a fd4d 	bl	26516 <uart_tx.constprop.0>
	uart_rx_enable(uart_2, rx->data, sizeof(rx->data), 50);
    ba7c:	4836      	ldr	r0, [pc, #216]	; (bb58 <main+0x1c4>)
    ba7e:	1d29      	adds	r1, r5, #4
    ba80:	f01a fd41 	bl	26506 <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    ba84:	4838      	ldr	r0, [pc, #224]	; (bb68 <main+0x1d4>)
    ba86:	f009 fefd 	bl	15884 <bt_conn_auth_cb_register>
		if (err) {
    ba8a:	b128      	cbz	r0, ba98 <main+0x104>
			printk("Failed to register authorization callbacks.\n");
    ba8c:	4837      	ldr	r0, [pc, #220]	; (bb6c <main+0x1d8>)
}
    ba8e:	b00a      	add	sp, #40	; 0x28
    ba90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    ba94:	f01a bfab 	b.w	269ee <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    ba98:	4835      	ldr	r0, [pc, #212]	; (bb70 <main+0x1dc>)
    ba9a:	f009 ff0d 	bl	158b8 <bt_conn_auth_info_cb_register>
		if (err) {
    ba9e:	b108      	cbz	r0, baa4 <main+0x110>
			printk("Failed to register authorization info callbacks.\n");
    baa0:	4834      	ldr	r0, [pc, #208]	; (bb74 <main+0x1e0>)
    baa2:	e7f4      	b.n	ba8e <main+0xfa>
	err = bt_enable(NULL);
    baa4:	f007 fd80 	bl	135a8 <bt_enable>
	if (err) {
    baa8:	2800      	cmp	r0, #0
    baaa:	d1a2      	bne.n	b9f2 <main+0x5e>
	printf("Bluetooth initialized \n\r");
    baac:	4832      	ldr	r0, [pc, #200]	; (bb78 <main+0x1e4>)
    baae:	f019 fd75 	bl	2559c <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    bab2:	4832      	ldr	r0, [pc, #200]	; (bb7c <main+0x1e8>)
    bab4:	f019 fd72 	bl	2559c <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    bab8:	4831      	ldr	r0, [pc, #196]	; (bb80 <main+0x1ec>)
    baba:	f019 fd6f 	bl	2559c <iprintf>
	z_impl_k_sem_give(sem);
    babe:	4831      	ldr	r0, [pc, #196]	; (bb84 <main+0x1f0>)
    bac0:	f016 f8e6 	bl	21c90 <z_impl_k_sem_give>
		settings_load();
    bac4:	f01b ff4a 	bl	2795c <settings_load>
	err = bt_nus_init(&nus_cb);
    bac8:	482f      	ldr	r0, [pc, #188]	; (bb88 <main+0x1f4>)
    baca:	f004 fddd 	bl	10688 <bt_nus_init>
	if (err) {
    bace:	4601      	mov	r1, r0
    bad0:	b128      	cbz	r0, bade <main+0x14a>
		printf("Failed to initialize UART service (err: %d)", err);
    bad2:	482e      	ldr	r0, [pc, #184]	; (bb8c <main+0x1f8>)
}
    bad4:	b00a      	add	sp, #40	; 0x28
    bad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    bada:	f019 bd5f 	b.w	2559c <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    bade:	4d2c      	ldr	r5, [pc, #176]	; (bb90 <main+0x1fc>)
    bae0:	ac04      	add	r4, sp, #16
    bae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    bae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bae6:	682b      	ldr	r3, [r5, #0]
    bae8:	2501      	movs	r5, #1
    baea:	6023      	str	r3, [r4, #0]
    baec:	2202      	movs	r2, #2
    baee:	4b29      	ldr	r3, [pc, #164]	; (bb94 <main+0x200>)
    baf0:	4929      	ldr	r1, [pc, #164]	; (bb98 <main+0x204>)
    baf2:	9500      	str	r5, [sp, #0]
    baf4:	a804      	add	r0, sp, #16
    baf6:	f008 fc31 	bl	1435c <bt_le_adv_start>
	if (err) {
    bafa:	4604      	mov	r4, r0
    bafc:	b128      	cbz	r0, bb0a <main+0x176>
		printf("Advertising failed to start (err %d)", err);
    bafe:	4601      	mov	r1, r0
    bb00:	4826      	ldr	r0, [pc, #152]	; (bb9c <main+0x208>)
    bb02:	f019 fd4b 	bl	2559c <iprintf>
}
    bb06:	b00a      	add	sp, #40	; 0x28
    bb08:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    bb0a:	4b25      	ldr	r3, [pc, #148]	; (bba0 <main+0x20c>)
    bb0c:	4e25      	ldr	r6, [pc, #148]	; (bba4 <main+0x210>)
    bb0e:	601d      	str	r5, [r3, #0]
    bb10:	ad02      	add	r5, sp, #8
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    bb12:	3401      	adds	r4, #1
    bb14:	e896 0003 	ldmia.w	r6, {r0, r1}
    bb18:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    bb1c:	4628      	mov	r0, r5
    bb1e:	f004 0101 	and.w	r1, r4, #1
    bb22:	f7ff f9a9 	bl	ae78 <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
    bb26:	2100      	movs	r1, #0
    bb28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bb2c:	f017 ffa4 	bl	23a78 <z_impl_k_sleep>
	for (;;) {
    bb30:	e7ef      	b.n	bb12 <main+0x17e>
    bb32:	bf00      	nop
    bb34:	2000a2dc 	.word	0x2000a2dc
    bb38:	0002c798 	.word	0x0002c798
    bb3c:	0000aa35 	.word	0x0000aa35
    bb40:	200091d0 	.word	0x200091d0
    bb44:	0002e421 	.word	0x0002e421
    bb48:	0002cd90 	.word	0x0002cd90
    bb4c:	0000b0e1 	.word	0x0000b0e1
    bb50:	0002e441 	.word	0x0002e441
    bb54:	0002e468 	.word	0x0002e468
    bb58:	0002c780 	.word	0x0002c780
    bb5c:	0000aa0d 	.word	0x0000aa0d
    bb60:	200091a0 	.word	0x200091a0
    bb64:	000264ff 	.word	0x000264ff
    bb68:	200083cc 	.word	0x200083cc
    bb6c:	0002e491 	.word	0x0002e491
    bb70:	200083bc 	.word	0x200083bc
    bb74:	0002e4be 	.word	0x0002e4be
    bb78:	0002e4f0 	.word	0x0002e4f0
    bb7c:	0002e509 	.word	0x0002e509
    bb80:	0002e52a 	.word	0x0002e52a
    bb84:	20008b4c 	.word	0x20008b4c
    bb88:	200083b0 	.word	0x200083b0
    bb8c:	0002e553 	.word	0x0002e553
    bb90:	0002ce60 	.word	0x0002ce60
    bb94:	0002d008 	.word	0x0002d008
    bb98:	0002d010 	.word	0x0002d010
    bb9c:	0002e57f 	.word	0x0002e57f
    bba0:	2000a2d8 	.word	0x2000a2d8
    bba4:	0002d0a8 	.word	0x0002d0a8

0000bba8 <time_stamp_function>:
uint32_t time_stamp_function(void){
    bba8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    bbaa:	f01f ffee 	bl	2bb8a <z_impl_k_uptime_ticks>
    bbae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bbb2:	fba0 0302 	umull	r0, r3, r0, r2
    bbb6:	fb02 3101 	mla	r1, r2, r1, r3
    bbba:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    bbbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bbc0:	2300      	movs	r3, #0
    bbc2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    bbc6:	0bc9      	lsrs	r1, r1, #15
    bbc8:	f7fd f942 	bl	8e50 <__aeabi_ldivmod>
    bbcc:	4603      	mov	r3, r0
}
    bbce:	4801      	ldr	r0, [pc, #4]	; (bbd4 <time_stamp_function+0x2c>)
    bbd0:	4418      	add	r0, r3
    bbd2:	bd08      	pop	{r3, pc}
    bbd4:	61cf9980 	.word	0x61cf9980

0000bbd8 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    bbd8:	b538      	push	{r3, r4, r5, lr}
    bbda:	460d      	mov	r5, r1
    bbdc:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    bbde:	f7ff ffe3 	bl	bba8 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    bbe2:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    bbe4:	4b04      	ldr	r3, [pc, #16]	; (bbf8 <values_of_digital_sensor+0x20>)
    bbe6:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    bbea:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    bbee:	e9c4 0200 	strd	r0, r2, [r4]
}
    bbf2:	4620      	mov	r0, r4
    bbf4:	bd38      	pop	{r3, r4, r5, pc}
    bbf6:	bf00      	nop
    bbf8:	20021a88 	.word	0x20021a88

0000bbfc <feed_circular_buffer>:
void feed_circular_buffer(void){
    bbfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bc00:	4d2f      	ldr	r5, [pc, #188]	; (bcc0 <feed_circular_buffer+0xc4>)
    bc02:	4b30      	ldr	r3, [pc, #192]	; (bcc4 <feed_circular_buffer+0xc8>)
    bc04:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bc06:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bc0a:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bc0c:	d256      	bcs.n	bcbc <feed_circular_buffer+0xc0>
  gnss_return_value.timestamp=time_stamp_function();
    bc0e:	f7ff ffcb 	bl	bba8 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bc12:	f04f 0800 	mov.w	r8, #0
    bc16:	4c2c      	ldr	r4, [pc, #176]	; (bcc8 <feed_circular_buffer+0xcc>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bc18:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bc1a:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bc1e:	e9c6 8802 	strd	r8, r8, [r6, #8]
    bc22:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    bc24:	f7ff ffc0 	bl	bba8 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    bc28:	4e28      	ldr	r6, [pc, #160]	; (bccc <feed_circular_buffer+0xd0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bc2a:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    bc2e:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bc32:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bc34:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    bc38:	f7ff ffb6 	bl	bba8 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    bc3c:	682b      	ldr	r3, [r5, #0]
    bc3e:	8872      	ldrh	r2, [r6, #2]
    bc40:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bc44:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    bc46:	f7ff ffaf 	bl	bba8 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    bc4a:	682b      	ldr	r3, [r5, #0]
    bc4c:	88b2      	ldrh	r2, [r6, #4]
    bc4e:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bc52:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    bc54:	f7ff ffa8 	bl	bba8 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    bc58:	682b      	ldr	r3, [r5, #0]
    bc5a:	88f2      	ldrh	r2, [r6, #6]
    bc5c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bc60:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    bc62:	f7ff ffa1 	bl	bba8 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    bc66:	682b      	ldr	r3, [r5, #0]
    bc68:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bc6c:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    bc6e:	f7ff ff9b 	bl	bba8 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    bc72:	682b      	ldr	r3, [r5, #0]
    bc74:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bc78:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    bc7a:	f7ff ff95 	bl	bba8 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bc7e:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bc80:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bc82:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bc86:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bc88:	4638      	mov	r0, r7
    bc8a:	f7ff ffa5 	bl	bbd8 <values_of_digital_sensor>
    bc8e:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bc92:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bc94:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bc96:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bc9a:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bc9e:	3438      	adds	r4, #56	; 0x38
    bca0:	2101      	movs	r1, #1
    bca2:	4638      	mov	r0, r7
    bca4:	f7ff ff98 	bl	bbd8 <values_of_digital_sensor>
    bca8:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer_Free_Position++;
    bcac:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bcae:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer_Free_Position++;
    bcb2:	3301      	adds	r3, #1
    bcb4:	602b      	str	r3, [r5, #0]
}
    bcb6:	b002      	add	sp, #8
    bcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcbc:	2300      	movs	r3, #0
    bcbe:	e7f9      	b.n	bcb4 <feed_circular_buffer+0xb8>
    bcc0:	20021414 	.word	0x20021414
    bcc4:	20021410 	.word	0x20021410
    bcc8:	2000ac10 	.word	0x2000ac10
    bccc:	20021a98 	.word	0x20021a98

0000bcd0 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    bcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    bcd2:	4b1c      	ldr	r3, [pc, #112]	; (bd44 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bcd4:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bcd6:	6818      	ldr	r0, [r3, #0]
    bcd8:	889b      	ldrh	r3, [r3, #4]
    bcda:	9000      	str	r0, [sp, #0]
    bcdc:	2218      	movs	r2, #24
    bcde:	2100      	movs	r1, #0
    bce0:	f10d 0006 	add.w	r0, sp, #6
    bce4:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bce8:	2601      	movs	r6, #1
   char tag[30]="10203";
    bcea:	f020 f8a1 	bl	2be30 <memset>
     msg.positions.timestamp=1;
    bcee:	2300      	movs	r3, #0
    msg.timestamp=0;
    bcf0:	4c15      	ldr	r4, [pc, #84]	; (bd48 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    bcf2:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bcf4:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bcf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bcfc:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bcfe:	4b13      	ldr	r3, [pc, #76]	; (bd4c <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bd00:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    bd02:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    bd04:	230b      	movs	r3, #11
    bd06:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bd08:	4b11      	ldr	r3, [pc, #68]	; (bd50 <fill_fields_to_test+0x80>)
    bd0a:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    bd0c:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bd0e:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    bd10:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    bd12:	7766      	strb	r6, [r4, #29]
    bd14:	f104 001e 	add.w	r0, r4, #30
    bd18:	f020 f9b2 	bl	2c080 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bd1c:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    bd20:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bd24:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bd28:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bd2a:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    bd2e:	f7fc feeb 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    bd32:	3501      	adds	r5, #1
    bd34:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bd36:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    bd38:	f104 0424 	add.w	r4, r4, #36	; 0x24
    bd3c:	d1e6      	bne.n	bd0c <fill_fields_to_test+0x3c>
}
    bd3e:	4802      	ldr	r0, [pc, #8]	; (bd48 <fill_fields_to_test+0x78>)
    bd40:	b009      	add	sp, #36	; 0x24
    bd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd44:	0002ceb4 	.word	0x0002ceb4
    bd48:	2000ab20 	.word	0x2000ab20
    bd4c:	40400000 	.word	0x40400000
    bd50:	41400000 	.word	0x41400000

0000bd54 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    bd54:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd56:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    bd5a:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    bd5c:	f7ff ffb8 	bl	bcd0 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    bd60:	2202      	movs	r2, #2
    bd62:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    bd66:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    bd6a:	4a3a      	ldr	r2, [pc, #232]	; (be54 <send_array_dd_v0+0x100>)
    bd6c:	ae0c      	add	r6, sp, #48	; 0x30
    bd6e:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bd70:	4631      	mov	r1, r6
    bd72:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    bd74:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bd76:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bd78:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bd7a:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    bd7c:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bd7e:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bd80:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bd82:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    bd84:	f101 010c 	add.w	r1, r1, #12
    bd88:	d1f8      	bne.n	bd7c <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bd8a:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bd8c:	6958      	ldr	r0, [r3, #20]
    bd8e:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    bd90:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bd92:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bd94:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bd98:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    bd9c:	f101 0108 	add.w	r1, r1, #8
    bda0:	d1f6      	bne.n	bd90 <send_array_dd_v0+0x3c>
    bda2:	f103 051e 	add.w	r5, r3, #30
    bda6:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    bdaa:	f855 3c06 	ldr.w	r3, [r5, #-6]
    bdae:	4629      	mov	r1, r5
    bdb0:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    bdb4:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    bdb8:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    bdbc:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    bdc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    bdc4:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    bdc8:	f020 f95a 	bl	2c080 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bdcc:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    bdce:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bdd0:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bdd4:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bdd6:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bdda:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bdde:	4633      	mov	r3, r6
    bde0:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    bde4:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bde6:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bde8:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bdec:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    bdf0:	f103 0308 	add.w	r3, r3, #8
    bdf4:	d1f6      	bne.n	bde4 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    bdf6:	3524      	adds	r5, #36	; 0x24
    bdf8:	42a5      	cmp	r5, r4
    bdfa:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    bdfe:	d1d4      	bne.n	bdaa <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    be00:	466c      	mov	r4, sp
    be02:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    be06:	4668      	mov	r0, sp
    be08:	4913      	ldr	r1, [pc, #76]	; (be58 <send_array_dd_v0+0x104>)
    be0a:	ad07      	add	r5, sp, #28
    be0c:	f000 f906 	bl	c01c <pb_ostream_from_buffer>
    be10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    be12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    be14:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    be16:	4911      	ldr	r1, [pc, #68]	; (be5c <send_array_dd_v0+0x108>)
    be18:	aa0c      	add	r2, sp, #48	; 0x30
    be1a:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    be1c:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    be1e:	f000 fb7d 	bl	c51c <pb_encode>
   int j=0;
    be22:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    be24:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    be26:	490c      	ldr	r1, [pc, #48]	; (be58 <send_array_dd_v0+0x104>)
    be28:	4a0d      	ldr	r2, [pc, #52]	; (be60 <send_array_dd_v0+0x10c>)
    be2a:	4283      	cmp	r3, r0
    be2c:	d10b      	bne.n	be46 <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    be2e:	490d      	ldr	r1, [pc, #52]	; (be64 <send_array_dd_v0+0x110>)
    return function_return;
    be30:	f240 72dc 	movw	r2, #2012	; 0x7dc
    be34:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    be36:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    be3a:	f01f ffbf 	bl	2bdbc <memcpy>
}
    be3e:	4638      	mov	r0, r7
    be40:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    be44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    be46:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    be4a:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    be4c:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    be50:	e7eb      	b.n	be2a <send_array_dd_v0+0xd6>
    be52:	bf00      	nop
    be54:	0012d687 	.word	0x0012d687
    be58:	20021ac7 	.word	0x20021ac7
    be5c:	0002d0fc 	.word	0x0002d0fc
    be60:	2000a347 	.word	0x2000a347
    be64:	2000a344 	.word	0x2000a344

0000be68 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be6c:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    be6e:	4d30      	ldr	r5, [pc, #192]	; (bf30 <print_current_position_cb+0xc8>)
    printf("\n\n####Position %d #####\n",pos);
    be70:	4601      	mov	r1, r0
void print_current_position_cb(uint32_t pos){
    be72:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    be74:	482f      	ldr	r0, [pc, #188]	; (bf34 <print_current_position_cb+0xcc>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    be76:	01a6      	lsls	r6, r4, #6
    be78:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    be7c:	f019 fb8e 	bl	2559c <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    be80:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    be84:	6863      	ldr	r3, [r4, #4]
    be86:	482c      	ldr	r0, [pc, #176]	; (bf38 <print_current_position_cb+0xd0>)
    be88:	f019 fb88 	bl	2559c <iprintf>
	if (!spec->channel_cfg_dt_node_exists) {
    be8c:	4a2b      	ldr	r2, [pc, #172]	; (bf3c <print_current_position_cb+0xd4>)
    val_mv = C_Buffer[pos].analog.value;
    be8e:	6967      	ldr	r7, [r4, #20]
    be90:	7953      	ldrb	r3, [r2, #5]
    be92:	b1cb      	cbz	r3, bec8 <print_current_position_cb+0x60>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    be94:	79d3      	ldrb	r3, [r2, #7]
	if (spec->channel_cfg.differential) {
    be96:	7a91      	ldrb	r1, [r2, #10]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    be98:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    be9a:	bf0a      	itet	eq
    be9c:	6813      	ldreq	r3, [r2, #0]
		vref_mv = spec->vref_mv;
    be9e:	89d3      	ldrhne	r3, [r2, #14]
	return api->ref_internal;
    bea0:	689b      	ldreq	r3, [r3, #8]
	resolution = spec->resolution;
    bea2:	7c14      	ldrb	r4, [r2, #16]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bea4:	bf08      	it	eq
    bea6:	891b      	ldrheq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bea8:	0689      	lsls	r1, r1, #26
	int32_t adc_mv = *valp * ref_mv;
    beaa:	fb07 f303 	mul.w	r3, r7, r3
		resolution -= 1U;
    beae:	bf48      	it	mi
    beb0:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    beb4:	7990      	ldrb	r0, [r2, #6]
    beb6:	a903      	add	r1, sp, #12
		resolution -= 1U;
    beb8:	bf48      	it	mi
    beba:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bebc:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bebe:	f00f f9d9 	bl	1b274 <adc_gain_invert>
	if (ret == 0) {
    bec2:	b908      	cbnz	r0, bec8 <print_current_position_cb+0x60>
		*valp = (adc_mv >> resolution);
    bec4:	9f03      	ldr	r7, [sp, #12]
    bec6:	4127      	asrs	r7, r4
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    bec8:	19ac      	adds	r4, r5, r6
    beca:	463b      	mov	r3, r7
    becc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    bed0:	481b      	ldr	r0, [pc, #108]	; (bf40 <print_current_position_cb+0xd8>)
    bed2:	f019 fb63 	bl	2559c <iprintf>
    int i=0;
    bed6:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bed8:	f8df 9068 	ldr.w	r9, [pc, #104]	; bf44 <print_current_position_cb+0xdc>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    bedc:	f107 0801 	add.w	r8, r7, #1
    bee0:	8ba0      	ldrh	r0, [r4, #28]
    bee2:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bee6:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    beea:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    beee:	f7fd fa3f 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bef2:	f7fc fa95 	bl	8420 <__aeabi_f2d>
    bef6:	e9cd 0100 	strd	r0, r1, [sp]
    befa:	4639      	mov	r1, r7
      i++;
    befc:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    befe:	465b      	mov	r3, fp
    bf00:	4652      	mov	r2, sl
    bf02:	4648      	mov	r0, r9
    bf04:	f019 fb4a 	bl	2559c <iprintf>
    while (i<3){
    bf08:	2f03      	cmp	r7, #3
    bf0a:	f104 0408 	add.w	r4, r4, #8
    bf0e:	d1e5      	bne.n	bedc <print_current_position_cb+0x74>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    bf10:	4435      	add	r5, r6
    bf12:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    bf16:	2100      	movs	r1, #0
    bf18:	480b      	ldr	r0, [pc, #44]	; (bf48 <print_current_position_cb+0xe0>)
    bf1a:	f019 fb3f 	bl	2559c <iprintf>
    bf1e:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    bf22:	2101      	movs	r1, #1
    bf24:	4808      	ldr	r0, [pc, #32]	; (bf48 <print_current_position_cb+0xe0>)
}
    bf26:	b005      	add	sp, #20
    bf28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    bf2c:	f019 bb36 	b.w	2559c <iprintf>
    bf30:	2000ac10 	.word	0x2000ac10
    bf34:	0002e632 	.word	0x0002e632
    bf38:	0002e64b 	.word	0x0002e64b
    bf3c:	0002d020 	.word	0x0002d020
    bf40:	0002e677 	.word	0x0002e677
    bf44:	0002e69d 	.word	0x0002e69d
    bf48:	0002e6c3 	.word	0x0002e6c3

0000bf4c <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    bf4c:	b500      	push	{lr}
    pb_type_t type = field->type;
    bf4e:	7d83      	ldrb	r3, [r0, #22]
{
    bf50:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    bf52:	2b3f      	cmp	r3, #63	; 0x3f
{
    bf54:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    bf56:	d849      	bhi.n	bfec <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    bf58:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    bf5c:	d01c      	beq.n	bf98 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    bf5e:	2820      	cmp	r0, #32
    bf60:	d102      	bne.n	bf68 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    bf62:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    bf64:	8818      	ldrh	r0, [r3, #0]
    bf66:	e006      	b.n	bf76 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    bf68:	2830      	cmp	r0, #48	; 0x30
    bf6a:	d0fa      	beq.n	bf62 <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    bf6c:	2810      	cmp	r0, #16
    bf6e:	d106      	bne.n	bf7e <pb_check_proto3_default_value+0x32>
    bf70:	6a0a      	ldr	r2, [r1, #32]
    bf72:	b122      	cbz	r2, bf7e <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    bf74:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    bf76:	fab0 f080 	clz	r0, r0
    bf7a:	0940      	lsrs	r0, r0, #5
    bf7c:	e00c      	b.n	bf98 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    bf7e:	680a      	ldr	r2, [r1, #0]
    bf80:	6890      	ldr	r0, [r2, #8]
    bf82:	b980      	cbnz	r0, bfa6 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    bf84:	f003 020f 	and.w	r2, r3, #15
    bf88:	2a05      	cmp	r2, #5
    bf8a:	d80e      	bhi.n	bfaa <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    bf8c:	69cb      	ldr	r3, [r1, #28]
    bf8e:	8a4a      	ldrh	r2, [r1, #18]
    bf90:	441a      	add	r2, r3
    bf92:	4293      	cmp	r3, r2
    bf94:	d103      	bne.n	bf9e <pb_check_proto3_default_value+0x52>
            return true;
    bf96:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    bf98:	b00b      	add	sp, #44	; 0x2c
    bf9a:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    bf9e:	f813 1b01 	ldrb.w	r1, [r3], #1
    bfa2:	2900      	cmp	r1, #0
    bfa4:	d0f5      	beq.n	bf92 <pb_check_proto3_default_value+0x46>
            return false;
    bfa6:	2000      	movs	r0, #0
    bfa8:	e7f6      	b.n	bf98 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    bfaa:	2a06      	cmp	r2, #6
    bfac:	d101      	bne.n	bfb2 <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    bfae:	69cb      	ldr	r3, [r1, #28]
    bfb0:	e7d8      	b.n	bf64 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    bfb2:	2a07      	cmp	r2, #7
    bfb4:	d102      	bne.n	bfbc <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    bfb6:	69cb      	ldr	r3, [r1, #28]
    bfb8:	7818      	ldrb	r0, [r3, #0]
    bfba:	e7dc      	b.n	bf76 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    bfbc:	2a0b      	cmp	r2, #11
    bfbe:	d101      	bne.n	bfc4 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    bfc0:	8a48      	ldrh	r0, [r1, #18]
    bfc2:	e7d8      	b.n	bf76 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    bfc4:	f003 030e 	and.w	r3, r3, #14
    bfc8:	2b08      	cmp	r3, #8
    bfca:	d1e5      	bne.n	bf98 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    bfcc:	69ca      	ldr	r2, [r1, #28]
    bfce:	4668      	mov	r0, sp
    bfd0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bfd2:	f01a fb71 	bl	266b8 <pb_field_iter_begin>
    bfd6:	2800      	cmp	r0, #0
    bfd8:	d0dd      	beq.n	bf96 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    bfda:	4668      	mov	r0, sp
    bfdc:	f7ff ffb6 	bl	bf4c <pb_check_proto3_default_value>
    bfe0:	2800      	cmp	r0, #0
    bfe2:	d0d9      	beq.n	bf98 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    bfe4:	4668      	mov	r0, sp
    bfe6:	f01a fb8a 	bl	266fe <pb_field_iter_next>
    bfea:	e7f4      	b.n	bfd6 <pb_check_proto3_default_value+0x8a>
    bfec:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    bff0:	2a80      	cmp	r2, #128	; 0x80
    bff2:	d101      	bne.n	bff8 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    bff4:	69c0      	ldr	r0, [r0, #28]
    bff6:	e7be      	b.n	bf76 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    bff8:	2a40      	cmp	r2, #64	; 0x40
    bffa:	d1d4      	bne.n	bfa6 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    bffc:	f003 030f 	and.w	r3, r3, #15
    c000:	2b0a      	cmp	r3, #10
    c002:	d102      	bne.n	c00a <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c004:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    c006:	6818      	ldr	r0, [r3, #0]
    c008:	e7b5      	b.n	bf76 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    c00a:	6803      	ldr	r3, [r0, #0]
    c00c:	4a02      	ldr	r2, [pc, #8]	; (c018 <pb_check_proto3_default_value+0xcc>)
    c00e:	68d8      	ldr	r0, [r3, #12]
    c010:	4290      	cmp	r0, r2
    c012:	d1b0      	bne.n	bf76 <pb_check_proto3_default_value+0x2a>
    c014:	e7f6      	b.n	c004 <pb_check_proto3_default_value+0xb8>
    c016:	bf00      	nop
    c018:	0002671d 	.word	0x0002671d

0000c01c <pb_ostream_from_buffer>:
    return stream;
    c01c:	6082      	str	r2, [r0, #8]
    c01e:	2200      	movs	r2, #0
{
    c020:	b510      	push	{r4, lr}
    return stream;
    c022:	4c03      	ldr	r4, [pc, #12]	; (c030 <pb_ostream_from_buffer+0x14>)
    c024:	e9c0 2203 	strd	r2, r2, [r0, #12]
    c028:	e9c0 4100 	strd	r4, r1, [r0]
}
    c02c:	bd10      	pop	{r4, pc}
    c02e:	bf00      	nop
    c030:	0002674d 	.word	0x0002674d

0000c034 <pb_write>:
{
    c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c036:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    c038:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    c03a:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    c03c:	b19a      	cbz	r2, c066 <pb_write+0x32>
    c03e:	6806      	ldr	r6, [r0, #0]
    c040:	b18e      	cbz	r6, c066 <pb_write+0x32>
    c042:	18d3      	adds	r3, r2, r3
    c044:	d202      	bcs.n	c04c <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    c046:	6887      	ldr	r7, [r0, #8]
    c048:	429f      	cmp	r7, r3
    c04a:	d207      	bcs.n	c05c <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    c04c:	6923      	ldr	r3, [r4, #16]
    c04e:	4a08      	ldr	r2, [pc, #32]	; (c070 <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    c050:	2b00      	cmp	r3, #0
    c052:	bf08      	it	eq
    c054:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    c056:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    c058:	6123      	str	r3, [r4, #16]
}
    c05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    c05c:	47b0      	blx	r6
    c05e:	b910      	cbnz	r0, c066 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    c060:	6923      	ldr	r3, [r4, #16]
    c062:	4a04      	ldr	r2, [pc, #16]	; (c074 <pb_write+0x40>)
    c064:	e7f4      	b.n	c050 <pb_write+0x1c>
    stream->bytes_written += count;
    c066:	68e3      	ldr	r3, [r4, #12]
    return true;
    c068:	2001      	movs	r0, #1
    stream->bytes_written += count;
    c06a:	442b      	add	r3, r5
    c06c:	60e3      	str	r3, [r4, #12]
    return true;
    c06e:	e7f4      	b.n	c05a <pb_write+0x26>
    c070:	0002e6e5 	.word	0x0002e6e5
    c074:	0002e6f1 	.word	0x0002e6f1

0000c078 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    c078:	b410      	push	{r4}
    c07a:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    c07c:	8a4b      	ldrh	r3, [r1, #18]
    c07e:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    c082:	2c02      	cmp	r4, #2
    c084:	d117      	bne.n	c0b6 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    c086:	2b01      	cmp	r3, #1
    c088:	d105      	bne.n	c096 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    c08a:	69cb      	ldr	r3, [r1, #28]
    c08c:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    c08e:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    c090:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    c092:	f01a bb64 	b.w	2675e <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    c096:	2b02      	cmp	r3, #2
    c098:	d102      	bne.n	c0a0 <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    c09a:	69cb      	ldr	r3, [r1, #28]
    c09c:	881a      	ldrh	r2, [r3, #0]
    c09e:	e7f6      	b.n	c08e <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    c0a0:	2b04      	cmp	r3, #4
    c0a2:	d102      	bne.n	c0aa <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    c0a4:	69cb      	ldr	r3, [r1, #28]
    c0a6:	681a      	ldr	r2, [r3, #0]
    c0a8:	e7f1      	b.n	c08e <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    c0aa:	2b08      	cmp	r3, #8
    c0ac:	d11f      	bne.n	c0ee <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    c0ae:	69cb      	ldr	r3, [r1, #28]
    c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c0b4:	e7ec      	b.n	c090 <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    c0b6:	2b01      	cmp	r3, #1
    c0b8:	d108      	bne.n	c0cc <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    c0ba:	69cb      	ldr	r3, [r1, #28]
    c0bc:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    c0c0:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    c0c2:	2c03      	cmp	r4, #3
    c0c4:	d1e4      	bne.n	c090 <pb_enc_varint+0x18>
}
    c0c6:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    c0c8:	f01a bb88 	b.w	267dc <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    c0cc:	2b02      	cmp	r3, #2
    c0ce:	d103      	bne.n	c0d8 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    c0d0:	69cb      	ldr	r3, [r1, #28]
    c0d2:	f9b3 2000 	ldrsh.w	r2, [r3]
    c0d6:	e7f3      	b.n	c0c0 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    c0d8:	2b04      	cmp	r3, #4
    c0da:	d102      	bne.n	c0e2 <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    c0dc:	69cb      	ldr	r3, [r1, #28]
    c0de:	681a      	ldr	r2, [r3, #0]
    c0e0:	e7ee      	b.n	c0c0 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    c0e2:	2b08      	cmp	r3, #8
    c0e4:	d103      	bne.n	c0ee <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    c0e6:	69cb      	ldr	r3, [r1, #28]
    c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c0ec:	e7e9      	b.n	c0c2 <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    c0ee:	6903      	ldr	r3, [r0, #16]
    c0f0:	4a03      	ldr	r2, [pc, #12]	; (c100 <pb_enc_varint+0x88>)
    c0f2:	2b00      	cmp	r3, #0
    c0f4:	bf08      	it	eq
    c0f6:	4613      	moveq	r3, r2
    c0f8:	6103      	str	r3, [r0, #16]
}
    c0fa:	bc10      	pop	{r4}
    c0fc:	2000      	movs	r0, #0
    c0fe:	4770      	bx	lr
    c100:	0002e6fa 	.word	0x0002e6fa

0000c104 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    c104:	8a4a      	ldrh	r2, [r1, #18]
    c106:	2a04      	cmp	r2, #4
    c108:	d102      	bne.n	c110 <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    c10a:	69c9      	ldr	r1, [r1, #28]
    c10c:	f01a bb6f 	b.w	267ee <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    c110:	2a08      	cmp	r2, #8
    c112:	d102      	bne.n	c11a <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c114:	69c9      	ldr	r1, [r1, #28]
    c116:	f01a bb6d 	b.w	267f4 <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c11a:	6902      	ldr	r2, [r0, #16]
    c11c:	4903      	ldr	r1, [pc, #12]	; (c12c <pb_enc_fixed+0x28>)
    c11e:	2a00      	cmp	r2, #0
    c120:	bf08      	it	eq
    c122:	460a      	moveq	r2, r1
    c124:	6102      	str	r2, [r0, #16]
    }
}
    c126:	2000      	movs	r0, #0
    c128:	4770      	bx	lr
    c12a:	bf00      	nop
    c12c:	0002e6fa 	.word	0x0002e6fa

0000c130 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c130:	7d8a      	ldrb	r2, [r1, #22]
{
    c132:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c134:	f002 020f 	and.w	r2, r2, #15
    c138:	2a0b      	cmp	r2, #11
    c13a:	d811      	bhi.n	c160 <pb_encode_tag_for_field+0x30>
    c13c:	e8df f002 	tbb	[pc, r2]
    c140:	0c0c0c0c 	.word	0x0c0c0c0c
    c144:	0a0a060e 	.word	0x0a0a060e
    c148:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c14c:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c14e:	8a1a      	ldrh	r2, [r3, #16]
    c150:	f01a bb53 	b.w	267fa <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c154:	2102      	movs	r1, #2
            break;
    c156:	e7fa      	b.n	c14e <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c158:	2100      	movs	r1, #0
    c15a:	e7f8      	b.n	c14e <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c15c:	2105      	movs	r1, #5
    c15e:	e7f6      	b.n	c14e <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c160:	6903      	ldr	r3, [r0, #16]
    c162:	4a03      	ldr	r2, [pc, #12]	; (c170 <pb_encode_tag_for_field+0x40>)
    c164:	2b00      	cmp	r3, #0
    c166:	bf08      	it	eq
    c168:	4613      	moveq	r3, r2
    c16a:	6103      	str	r3, [r0, #16]
}
    c16c:	2000      	movs	r0, #0
    c16e:	4770      	bx	lr
    c170:	0002e70c 	.word	0x0002e70c

0000c174 <pb_encode_submessage>:
{
    c174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c178:	460e      	mov	r6, r1
    c17a:	4617      	mov	r7, r2
    c17c:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c17e:	2214      	movs	r2, #20
    c180:	2100      	movs	r1, #0
{
    c182:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c184:	a801      	add	r0, sp, #4
    c186:	f01f fe53 	bl	2be30 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c18a:	463a      	mov	r2, r7
    c18c:	4631      	mov	r1, r6
    c18e:	a801      	add	r0, sp, #4
    c190:	f000 f9c4 	bl	c51c <pb_encode>
    c194:	b910      	cbnz	r0, c19c <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c196:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c198:	6123      	str	r3, [r4, #16]
    c19a:	e008      	b.n	c1ae <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c19c:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c1a0:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c1a2:	4643      	mov	r3, r8
    c1a4:	462a      	mov	r2, r5
    c1a6:	4620      	mov	r0, r4
    c1a8:	f01a fad9 	bl	2675e <pb_encode_varint>
    c1ac:	b918      	cbnz	r0, c1b6 <pb_encode_submessage+0x42>
        return false;
    c1ae:	2000      	movs	r0, #0
}
    c1b0:	b006      	add	sp, #24
    c1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c1b6:	6821      	ldr	r1, [r4, #0]
    c1b8:	b921      	cbnz	r1, c1c4 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c1ba:	462a      	mov	r2, r5
    c1bc:	4620      	mov	r0, r4
    c1be:	f7ff ff39 	bl	c034 <pb_write>
    c1c2:	e7f5      	b.n	c1b0 <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c1c4:	68e3      	ldr	r3, [r4, #12]
    c1c6:	68a2      	ldr	r2, [r4, #8]
    c1c8:	442b      	add	r3, r5
    c1ca:	4293      	cmp	r3, r2
    c1cc:	d905      	bls.n	c1da <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c1ce:	6923      	ldr	r3, [r4, #16]
    c1d0:	4a0e      	ldr	r2, [pc, #56]	; (c20c <pb_encode_submessage+0x98>)
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	bf08      	it	eq
    c1d6:	4613      	moveq	r3, r2
    c1d8:	e7de      	b.n	c198 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c1da:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c1dc:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c1de:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c1e0:	a801      	add	r0, sp, #4
    c1e2:	4631      	mov	r1, r6
    substream.max_size = size;
    c1e4:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c1e8:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c1ec:	f000 f996 	bl	c51c <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c1f0:	9a04      	ldr	r2, [sp, #16]
    c1f2:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c1f4:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c1f6:	4413      	add	r3, r2
    c1f8:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c1fa:	9b02      	ldr	r3, [sp, #8]
    c1fc:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c1fe:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c200:	d101      	bne.n	c206 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c202:	6123      	str	r3, [r4, #16]
    c204:	e7d4      	b.n	c1b0 <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c206:	4a02      	ldr	r2, [pc, #8]	; (c210 <pb_encode_submessage+0x9c>)
    c208:	e7e3      	b.n	c1d2 <pb_encode_submessage+0x5e>
    c20a:	bf00      	nop
    c20c:	0002e6e5 	.word	0x0002e6e5
    c210:	0002e71f 	.word	0x0002e71f

0000c214 <encode_basic_field>:
{
    c214:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c216:	69cb      	ldr	r3, [r1, #28]
{
    c218:	4604      	mov	r4, r0
    c21a:	460d      	mov	r5, r1
    if (!field->pData)
    c21c:	2b00      	cmp	r3, #0
    c21e:	d07f      	beq.n	c320 <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c220:	f7ff ff86 	bl	c130 <pb_encode_tag_for_field>
    c224:	2800      	cmp	r0, #0
    c226:	d073      	beq.n	c310 <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c228:	7da8      	ldrb	r0, [r5, #22]
    c22a:	f000 030f 	and.w	r3, r0, #15
    c22e:	2b0b      	cmp	r3, #11
    c230:	d873      	bhi.n	c31a <encode_basic_field+0x106>
    c232:	e8df f003 	tbb	[pc, r3]
    c236:	1106      	.short	0x1106
    c238:	17171111 	.word	0x17171111
    c23c:	5252351d 	.word	0x5252351d
    c240:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c242:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c244:	4620      	mov	r0, r4
}
    c246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c24a:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c24c:	2300      	movs	r3, #0
    c24e:	3a00      	subs	r2, #0
    c250:	bf18      	it	ne
    c252:	2201      	movne	r2, #1
    c254:	f01a ba83 	b.w	2675e <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c258:	4629      	mov	r1, r5
    c25a:	4620      	mov	r0, r4
}
    c25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c260:	f7ff bf0a 	b.w	c078 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c264:	4629      	mov	r1, r5
    c266:	4620      	mov	r0, r4
}
    c268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c26c:	f7ff bf4a 	b.w	c104 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c270:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c272:	b909      	cbnz	r1, c278 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c274:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c276:	e00e      	b.n	c296 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c278:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c27a:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c27c:	d80a      	bhi.n	c294 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c27e:	8a6b      	ldrh	r3, [r5, #18]
    c280:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c282:	4293      	cmp	r3, r2
    c284:	d206      	bcs.n	c294 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c286:	6923      	ldr	r3, [r4, #16]
    c288:	4a26      	ldr	r2, [pc, #152]	; (c324 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c28a:	2b00      	cmp	r3, #0
    c28c:	bf08      	it	eq
    c28e:	4613      	moveq	r3, r2
    c290:	6123      	str	r3, [r4, #16]
    c292:	e03d      	b.n	c310 <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c294:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c296:	4620      	mov	r0, r4
}
    c298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c29c:	f01a bab3 	b.w	26806 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c2a0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c2a4:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c2a6:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c2a8:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c2aa:	d00e      	beq.n	c2ca <encode_basic_field+0xb6>
        if (max_size == 0)
    c2ac:	b913      	cbnz	r3, c2b4 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c2ae:	6923      	ldr	r3, [r4, #16]
    c2b0:	4a1d      	ldr	r2, [pc, #116]	; (c328 <encode_basic_field+0x114>)
    c2b2:	e7ea      	b.n	c28a <encode_basic_field+0x76>
        max_size -= 1;
    c2b4:	3b01      	subs	r3, #1
    if (str == NULL)
    c2b6:	2900      	cmp	r1, #0
    c2b8:	d0dc      	beq.n	c274 <encode_basic_field+0x60>
    size_t size = 0;
    c2ba:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c2bc:	429a      	cmp	r2, r3
    c2be:	5c88      	ldrb	r0, [r1, r2]
    c2c0:	d006      	beq.n	c2d0 <encode_basic_field+0xbc>
    c2c2:	2800      	cmp	r0, #0
    c2c4:	d0e7      	beq.n	c296 <encode_basic_field+0x82>
            size++;
    c2c6:	3201      	adds	r2, #1
            p++;
    c2c8:	e7f8      	b.n	c2bc <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c2ca:	f04f 33ff 	mov.w	r3, #4294967295
    c2ce:	e7f2      	b.n	c2b6 <encode_basic_field+0xa2>
        if (*p != '\0')
    c2d0:	2800      	cmp	r0, #0
    c2d2:	d0e0      	beq.n	c296 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c2d4:	6923      	ldr	r3, [r4, #16]
    c2d6:	4a15      	ldr	r2, [pc, #84]	; (c32c <encode_basic_field+0x118>)
    c2d8:	e7d7      	b.n	c28a <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c2da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c2dc:	b912      	cbnz	r2, c2e4 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c2de:	6923      	ldr	r3, [r4, #16]
    c2e0:	4a13      	ldr	r2, [pc, #76]	; (c330 <encode_basic_field+0x11c>)
    c2e2:	e7d2      	b.n	c28a <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c2e4:	2b09      	cmp	r3, #9
    c2e6:	d006      	beq.n	c2f6 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c2e8:	4620      	mov	r0, r4
    c2ea:	69ea      	ldr	r2, [r5, #28]
    c2ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c2f2:	f7ff bf3f 	b.w	c174 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c2f6:	6a2a      	ldr	r2, [r5, #32]
    c2f8:	2a00      	cmp	r2, #0
    c2fa:	d0f5      	beq.n	c2e8 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c2fc:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c300:	2b00      	cmp	r3, #0
    c302:	d0f1      	beq.n	c2e8 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c304:	4629      	mov	r1, r5
    c306:	4620      	mov	r0, r4
    c308:	3a04      	subs	r2, #4
    c30a:	4798      	blx	r3
    c30c:	2800      	cmp	r0, #0
    c30e:	d1eb      	bne.n	c2e8 <encode_basic_field+0xd4>
        return false;
    c310:	2000      	movs	r0, #0
}
    c312:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c314:	8a6a      	ldrh	r2, [r5, #18]
    c316:	69e9      	ldr	r1, [r5, #28]
    c318:	e7bd      	b.n	c296 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c31a:	6923      	ldr	r3, [r4, #16]
    c31c:	4a05      	ldr	r2, [pc, #20]	; (c334 <encode_basic_field+0x120>)
    c31e:	e7b4      	b.n	c28a <encode_basic_field+0x76>
        return true;
    c320:	2001      	movs	r0, #1
    c322:	e7f6      	b.n	c312 <encode_basic_field+0xfe>
    c324:	0002e733 	.word	0x0002e733
    c328:	0002e747 	.word	0x0002e747
    c32c:	0002e75a 	.word	0x0002e75a
    c330:	0002e76e 	.word	0x0002e76e
    c334:	0002e70c 	.word	0x0002e70c

0000c338 <encode_field>:
{
    c338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c33c:	7d8b      	ldrb	r3, [r1, #22]
{
    c33e:	4605      	mov	r5, r0
    c340:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c344:	2a30      	cmp	r2, #48	; 0x30
{
    c346:	460c      	mov	r4, r1
    c348:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c34a:	d112      	bne.n	c372 <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c34c:	6a0b      	ldr	r3, [r1, #32]
    c34e:	881a      	ldrh	r2, [r3, #0]
    c350:	8a0b      	ldrh	r3, [r1, #16]
    c352:	429a      	cmp	r2, r3
    c354:	d114      	bne.n	c380 <encode_field+0x48>
    if (!field->pData)
    c356:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c358:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c35a:	b9ea      	cbnz	r2, c398 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c35c:	f013 0f30 	tst.w	r3, #48	; 0x30
    c360:	d10e      	bne.n	c380 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c362:	692b      	ldr	r3, [r5, #16]
    c364:	4a69      	ldr	r2, [pc, #420]	; (c50c <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c366:	2b00      	cmp	r3, #0
    c368:	bf08      	it	eq
    c36a:	4613      	moveq	r3, r2
    c36c:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c36e:	2000      	movs	r0, #0
    c370:	e007      	b.n	c382 <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c372:	2a10      	cmp	r2, #16
    c374:	d1ef      	bne.n	c356 <encode_field+0x1e>
        if (field->pSize)
    c376:	6a0a      	ldr	r2, [r1, #32]
    c378:	b132      	cbz	r2, c388 <encode_field+0x50>
        if (p[i] != 0)
    c37a:	7813      	ldrb	r3, [r2, #0]
    c37c:	2b00      	cmp	r3, #0
    c37e:	d1ea      	bne.n	c356 <encode_field+0x1e>
            return true;
    c380:	2001      	movs	r0, #1
}
    c382:	b007      	add	sp, #28
    c384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c388:	2b3f      	cmp	r3, #63	; 0x3f
    c38a:	d8e4      	bhi.n	c356 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c38c:	4608      	mov	r0, r1
    c38e:	f7ff fddd 	bl	bf4c <pb_check_proto3_default_value>
    c392:	2800      	cmp	r0, #0
    c394:	d0df      	beq.n	c356 <encode_field+0x1e>
    c396:	e7f3      	b.n	c380 <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c398:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c39c:	2a40      	cmp	r2, #64	; 0x40
    c39e:	d10c      	bne.n	c3ba <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c3a0:	6823      	ldr	r3, [r4, #0]
    c3a2:	68db      	ldr	r3, [r3, #12]
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	d0eb      	beq.n	c380 <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c3a8:	4622      	mov	r2, r4
    c3aa:	4629      	mov	r1, r5
    c3ac:	2000      	movs	r0, #0
    c3ae:	4798      	blx	r3
    c3b0:	2800      	cmp	r0, #0
    c3b2:	d1e5      	bne.n	c380 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c3b4:	692b      	ldr	r3, [r5, #16]
    c3b6:	4a56      	ldr	r2, [pc, #344]	; (c510 <encode_field+0x1d8>)
    c3b8:	e7d5      	b.n	c366 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c3ba:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c3be:	2920      	cmp	r1, #32
    c3c0:	f040 809d 	bne.w	c4fe <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c3c4:	6a21      	ldr	r1, [r4, #32]
    c3c6:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c3c8:	2e00      	cmp	r6, #0
    c3ca:	d0d9      	beq.n	c380 <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c3cc:	2a80      	cmp	r2, #128	; 0x80
    c3ce:	d120      	bne.n	c412 <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c3d0:	f003 030f 	and.w	r3, r3, #15
    c3d4:	2b05      	cmp	r3, #5
    c3d6:	d85e      	bhi.n	c496 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c3d8:	2102      	movs	r1, #2
    c3da:	4628      	mov	r0, r5
    c3dc:	8a22      	ldrh	r2, [r4, #16]
    c3de:	f01a fa0c 	bl	267fa <pb_encode_tag>
    c3e2:	2800      	cmp	r0, #0
    c3e4:	d0c3      	beq.n	c36e <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c3e6:	7da3      	ldrb	r3, [r4, #22]
    c3e8:	f003 030f 	and.w	r3, r3, #15
    c3ec:	2b04      	cmp	r3, #4
    c3ee:	d116      	bne.n	c41e <encode_field+0xe6>
            size = 4 * (size_t)count;
    c3f0:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c3f2:	463a      	mov	r2, r7
    c3f4:	2300      	movs	r3, #0
    c3f6:	4628      	mov	r0, r5
    c3f8:	f01a f9b1 	bl	2675e <pb_encode_varint>
    c3fc:	2800      	cmp	r0, #0
    c3fe:	d0b6      	beq.n	c36e <encode_field+0x36>
        if (stream->callback == NULL)
    c400:	6829      	ldr	r1, [r5, #0]
    c402:	bb79      	cbnz	r1, c464 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c404:	463a      	mov	r2, r7
    c406:	4628      	mov	r0, r5
}
    c408:	b007      	add	sp, #28
    c40a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c40e:	f7ff be11 	b.w	c034 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c412:	8aa2      	ldrh	r2, [r4, #20]
    c414:	42b2      	cmp	r2, r6
    c416:	d2db      	bcs.n	c3d0 <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c418:	692b      	ldr	r3, [r5, #16]
    c41a:	4a3e      	ldr	r2, [pc, #248]	; (c514 <encode_field+0x1dc>)
    c41c:	e7a3      	b.n	c366 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c41e:	2b05      	cmp	r3, #5
    c420:	d101      	bne.n	c426 <encode_field+0xee>
            size = 8 * (size_t)count;
    c422:	00f7      	lsls	r7, r6, #3
    c424:	e7e5      	b.n	c3f2 <encode_field+0xba>
            void *pData_orig = field->pData;
    c426:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c428:	2214      	movs	r2, #20
    c42a:	2100      	movs	r1, #0
    c42c:	a801      	add	r0, sp, #4
    c42e:	f01f fcff 	bl	2be30 <memset>
            void *pData_orig = field->pData;
    c432:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c436:	4621      	mov	r1, r4
    c438:	a801      	add	r0, sp, #4
    c43a:	f7ff fe1d 	bl	c078 <pb_enc_varint>
    c43e:	b928      	cbnz	r0, c44c <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c440:	692b      	ldr	r3, [r5, #16]
    c442:	2b00      	cmp	r3, #0
    c444:	d192      	bne.n	c36c <encode_field+0x34>
    c446:	9b05      	ldr	r3, [sp, #20]
    c448:	4a33      	ldr	r2, [pc, #204]	; (c518 <encode_field+0x1e0>)
    c44a:	e78c      	b.n	c366 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c44c:	69e3      	ldr	r3, [r4, #28]
    c44e:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c450:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c452:	4413      	add	r3, r2
    c454:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c456:	b2bb      	uxth	r3, r7
    c458:	429e      	cmp	r6, r3
    c45a:	d8ec      	bhi.n	c436 <encode_field+0xfe>
            size = sizestream.bytes_written;
    c45c:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c45e:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c462:	e7c6      	b.n	c3f2 <encode_field+0xba>
    c464:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c466:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c468:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c46a:	f003 030e 	and.w	r3, r3, #14
    c46e:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c470:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c472:	d10d      	bne.n	c490 <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c474:	f7ff fe46 	bl	c104 <pb_enc_fixed>
    c478:	2800      	cmp	r0, #0
    c47a:	f43f af78 	beq.w	c36e <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c47e:	69e3      	ldr	r3, [r4, #28]
    c480:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c482:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c484:	4413      	add	r3, r2
    c486:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c488:	b2bb      	uxth	r3, r7
    c48a:	429e      	cmp	r6, r3
    c48c:	d8eb      	bhi.n	c466 <encode_field+0x12e>
    c48e:	e777      	b.n	c380 <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c490:	f7ff fdf2 	bl	c078 <pb_enc_varint>
    c494:	e7f0      	b.n	c478 <encode_field+0x140>
    c496:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c49a:	7da3      	ldrb	r3, [r4, #22]
    c49c:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c4a0:	2b86      	cmp	r3, #134	; 0x86
    c4a2:	d127      	bne.n	c4f4 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c4a4:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c4a6:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c4a8:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c4ac:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c4ae:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c4b2:	f1b9 0f00 	cmp.w	r9, #0
    c4b6:	d11a      	bne.n	c4ee <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c4b8:	f7ff fe3a 	bl	c130 <pb_encode_tag_for_field>
    c4bc:	b908      	cbnz	r0, c4c2 <encode_field+0x18a>
                field->pData = pData_orig;
    c4be:	61e7      	str	r7, [r4, #28]
                if (!status)
    c4c0:	e755      	b.n	c36e <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c4c2:	2201      	movs	r2, #1
    c4c4:	4628      	mov	r0, r5
    c4c6:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c4c8:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c4cc:	f7ff fdb2 	bl	c034 <pb_write>
                field->pData = pData_orig;
    c4d0:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c4d2:	2800      	cmp	r0, #0
    c4d4:	f43f af4b 	beq.w	c36e <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c4d8:	69e3      	ldr	r3, [r4, #28]
    c4da:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c4dc:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c4e0:	4413      	add	r3, r2
    c4e2:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c4e4:	fa1f f388 	uxth.w	r3, r8
    c4e8:	429e      	cmp	r6, r3
    c4ea:	d8d6      	bhi.n	c49a <encode_field+0x162>
    c4ec:	e748      	b.n	c380 <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c4ee:	f7ff fe91 	bl	c214 <encode_basic_field>
    c4f2:	e7ed      	b.n	c4d0 <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c4f4:	4621      	mov	r1, r4
    c4f6:	4628      	mov	r0, r5
    c4f8:	f7ff fe8c 	bl	c214 <encode_basic_field>
    c4fc:	e7e9      	b.n	c4d2 <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c4fe:	4621      	mov	r1, r4
    c500:	4628      	mov	r0, r5
}
    c502:	b007      	add	sp, #28
    c504:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c508:	f7ff be84 	b.w	c214 <encode_basic_field>
    c50c:	0002e787 	.word	0x0002e787
    c510:	0002e79e 	.word	0x0002e79e
    c514:	0002e7ad 	.word	0x0002e7ad
    c518:	0002e7c5 	.word	0x0002e7c5

0000c51c <pb_encode>:
{
    c51c:	b530      	push	{r4, r5, lr}
    c51e:	b095      	sub	sp, #84	; 0x54
    c520:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c522:	4668      	mov	r0, sp
    c524:	f01a f8f6 	bl	26714 <pb_field_iter_begin_const>
    c528:	b370      	cbz	r0, c588 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c52a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c52e:	f003 030f 	and.w	r3, r3, #15
    c532:	2b0a      	cmp	r3, #10
    c534:	d121      	bne.n	c57a <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c536:	9b07      	ldr	r3, [sp, #28]
    c538:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c53a:	b91d      	cbnz	r5, c544 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c53c:	4668      	mov	r0, sp
    c53e:	f01a f8de 	bl	266fe <pb_field_iter_next>
    c542:	e7f1      	b.n	c528 <pb_encode+0xc>
        if (extension->type->encode)
    c544:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c546:	4629      	mov	r1, r5
        if (extension->type->encode)
    c548:	685b      	ldr	r3, [r3, #4]
    c54a:	b123      	cbz	r3, c556 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c54c:	4620      	mov	r0, r4
    c54e:	4798      	blx	r3
        if (!status)
    c550:	b158      	cbz	r0, c56a <pb_encode+0x4e>
        extension = extension->next;
    c552:	68ad      	ldr	r5, [r5, #8]
    c554:	e7f1      	b.n	c53a <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c556:	a80a      	add	r0, sp, #40	; 0x28
    c558:	f01a f8de 	bl	26718 <pb_field_iter_begin_extension_const>
    c55c:	b940      	cbnz	r0, c570 <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c55e:	6923      	ldr	r3, [r4, #16]
    c560:	4a0a      	ldr	r2, [pc, #40]	; (c58c <pb_encode+0x70>)
    c562:	2b00      	cmp	r3, #0
    c564:	bf08      	it	eq
    c566:	4613      	moveq	r3, r2
    c568:	6123      	str	r3, [r4, #16]
                return false;
    c56a:	2000      	movs	r0, #0
}
    c56c:	b015      	add	sp, #84	; 0x54
    c56e:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c570:	4620      	mov	r0, r4
    c572:	a90a      	add	r1, sp, #40	; 0x28
    c574:	f7ff fee0 	bl	c338 <encode_field>
    c578:	e7ea      	b.n	c550 <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c57a:	4669      	mov	r1, sp
    c57c:	4620      	mov	r0, r4
    c57e:	f7ff fedb 	bl	c338 <encode_field>
    c582:	2800      	cmp	r0, #0
    c584:	d1da      	bne.n	c53c <pb_encode+0x20>
    c586:	e7f0      	b.n	c56a <pb_encode+0x4e>
        return true; /* Empty message type */
    c588:	2001      	movs	r0, #1
    c58a:	e7ef      	b.n	c56c <pb_encode+0x50>
    c58c:	0002e7cc 	.word	0x0002e7cc

0000c590 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c594:	b097      	sub	sp, #92	; 0x5c
    c596:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    c598:	4604      	mov	r4, r0
{
    c59a:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
    c59e:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    c5a2:	61fb      	str	r3, [r7, #28]
	__ASSERT_NO_MSG(in_packaged != NULL);
    c5a4:	b958      	cbnz	r0, c5be <cbprintf_package_convert+0x2e>
    c5a6:	49ab      	ldr	r1, [pc, #684]	; (c854 <cbprintf_package_convert+0x2c4>)
    c5a8:	f44f 7365 	mov.w	r3, #916	; 0x394
    c5ac:	4aaa      	ldr	r2, [pc, #680]	; (c858 <cbprintf_package_convert+0x2c8>)
    c5ae:	48ab      	ldr	r0, [pc, #684]	; (c85c <cbprintf_package_convert+0x2cc>)
    c5b0:	f01a fbdf 	bl	26d72 <assert_print>
    c5b4:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c5b8:	48a7      	ldr	r0, [pc, #668]	; (c858 <cbprintf_package_convert+0x2c8>)
    c5ba:	f01a fbd3 	bl	26d64 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    c5be:	f3ca 03c0 	ubfx	r3, sl, #3, #1
    c5c2:	617b      	str	r3, [r7, #20]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    c5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5c6:	b953      	cbnz	r3, c5de <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    c5c8:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    c5ca:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    c5cc:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    c5ce:	6abd      	ldr	r5, [r7, #40]	; 0x28
	buf += ros_nbr;
    c5d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c5d4:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    c5d6:	42b5      	cmp	r5, r6
    c5d8:	d319      	bcc.n	c60e <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
    c5da:	1b03      	subs	r3, r0, r4
    c5dc:	62bb      	str	r3, [r7, #40]	; 0x28
	rws_nbr = in_desc->rw_str_cnt;
    c5de:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    c5e0:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    c5e4:	61bb      	str	r3, [r7, #24]
	ro_cpy = ros_nbr &&
    c5e6:	f1bb 0f00 	cmp.w	fp, #0
    c5ea:	d002      	beq.n	c5f2 <cbprintf_package_convert+0x62>
    c5ec:	f01a 0f01 	tst.w	sl, #1
    c5f0:	d116      	bne.n	c620 <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
    c5f2:	69bb      	ldr	r3, [r7, #24]
    c5f4:	bb53      	cbnz	r3, c64c <cbprintf_package_convert+0xbc>
		if (cb) {
    c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5f8:	b11b      	cbz	r3, c602 <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
    c5fa:	4620      	mov	r0, r4
    c5fc:	69fa      	ldr	r2, [r7, #28]
    c5fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c600:	4798      	blx	r3
		return in_len;
    c602:	6abd      	ldr	r5, [r7, #40]	; 0x28

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    c604:	4628      	mov	r0, r5
    c606:	375c      	adds	r7, #92	; 0x5c
    c608:	46bd      	mov	sp, r7
    c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    c60e:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    c612:	4640      	mov	r0, r8
    c614:	f7fc fea4 	bl	9360 <strlen>
    c618:	3001      	adds	r0, #1
    c61a:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    c61c:	3501      	adds	r5, #1
    c61e:	e7da      	b.n	c5d6 <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    c620:	7823      	ldrb	r3, [r4, #0]
    c622:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    c624:	627b      	str	r3, [r7, #36]	; 0x24
    c626:	009b      	lsls	r3, r3, #2
    c628:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
    c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c62c:	623a      	str	r2, [r7, #32]
	uint8_t *str_pos = &buf[args_size];
    c62e:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c634:	2b00      	cmp	r3, #0
    c636:	f040 8101 	bne.w	c83c <cbprintf_package_convert+0x2ac>
		out_len = (int)in_len;
    c63a:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    c63c:	2600      	movs	r6, #0
		out_len = (int)in_len;
    c63e:	6abd      	ldr	r5, [r7, #40]	; 0x28
		if (ro_cpy) {
    c640:	eb09 030b 	add.w	r3, r9, fp
			for (int i = 0; i < ros_nbr; i++) {
    c644:	4543      	cmp	r3, r8
    c646:	d14e      	bne.n	c6e6 <cbprintf_package_convert+0x156>
    c648:	44d9      	add	r9, fp
    c64a:	e013      	b.n	c674 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
    c64c:	f01a 0f02 	tst.w	sl, #2
    c650:	d0d1      	beq.n	c5f6 <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
    c652:	7823      	ldrb	r3, [r4, #0]
    c654:	4699      	mov	r9, r3
    c656:	627b      	str	r3, [r7, #36]	; 0x24
    c658:	009b      	lsls	r3, r3, #2
    c65a:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c65c:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    c65e:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c662:	623b      	str	r3, [r7, #32]
	if (cb == NULL) {
    c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c666:	2b00      	cmp	r3, #0
    c668:	d17c      	bne.n	c764 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
    c66a:	6abd      	ldr	r5, [r7, #40]	; 0x28
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c66c:	f1bb 0f00 	cmp.w	fp, #0
    c670:	d150      	bne.n	c714 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
    c672:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
    c674:	f01a 0f05 	tst.w	sl, #5
    c678:	bf0c      	ite	eq
    c67a:	2302      	moveq	r3, #2
    c67c:	2301      	movne	r3, #1
    c67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    c680:	69bb      	ldr	r3, [r7, #24]
    c682:	eb09 0b43 	add.w	fp, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c686:	f00a 0302 	and.w	r3, sl, #2
    c68a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < rws_nbr; i++) {
    c68c:	45d9      	cmp	r9, fp
    c68e:	d0b9      	beq.n	c604 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
    c690:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    c694:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c698:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c69c:	4b70      	ldr	r3, [pc, #448]	; (c860 <cbprintf_package_convert+0x2d0>)
    c69e:	4598      	cmp	r8, r3
    c6a0:	d302      	bcc.n	c6a8 <cbprintf_package_convert+0x118>
    c6a2:	4b70      	ldr	r3, [pc, #448]	; (c864 <cbprintf_package_convert+0x2d4>)
    c6a4:	4598      	cmp	r8, r3
    c6a6:	d33b      	bcc.n	c720 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c6a8:	697b      	ldr	r3, [r7, #20]
    c6aa:	2b00      	cmp	r3, #0
    c6ac:	d045      	beq.n	c73a <cbprintf_package_convert+0x1aa>
    c6ae:	6a38      	ldr	r0, [r7, #32]
    c6b0:	f01a f8ea 	bl	26888 <is_ptr>
    c6b4:	2800      	cmp	r0, #0
    c6b6:	d040      	beq.n	c73a <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    c6b8:	46e8      	mov	r8, sp
    c6ba:	b08a      	sub	sp, #40	; 0x28
    c6bc:	466a      	mov	r2, sp
    c6be:	4b6a      	ldr	r3, [pc, #424]	; (c868 <cbprintf_package_convert+0x2d8>)
    c6c0:	6153      	str	r3, [r2, #20]
    c6c2:	6a3b      	ldr	r3, [r7, #32]
    c6c4:	e9c2 3106 	strd	r3, r1, [r2, #24]
    c6c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    c6cc:	8413      	strh	r3, [r2, #32]
    c6ce:	4b67      	ldr	r3, [pc, #412]	; (c86c <cbprintf_package_convert+0x2dc>)
    c6d0:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c6d4:	2300      	movs	r3, #0
    c6d6:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    c6da:	4865      	ldr	r0, [pc, #404]	; (c870 <cbprintf_package_convert+0x2e0>)
    c6dc:	f002 f93a 	bl	e954 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    c6e0:	3d02      	subs	r5, #2
    c6e2:	46c5      	mov	sp, r8
				continue;
    c6e4:	e7d2      	b.n	c68c <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
    c6e6:	f818 2b01 	ldrb.w	r2, [r8], #1
    c6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c6ec:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    c6f0:	f7fc fe36 	bl	9360 <strlen>
				if (strl && strl_cnt < strl_len) {
    c6f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c6fa:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    c6fc:	b142      	cbz	r2, c710 <cbprintf_package_convert+0x180>
    c6fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    c702:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    c704:	bf3e      	ittt	cc
    c706:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
    c70a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    c70e:	3601      	addcc	r6, #1
				out_len += len;
    c710:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    c712:	e797      	b.n	c644 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c714:	f01a 0604 	ands.w	r6, sl, #4
	size_t strl_cnt = 0;
    c718:	bf1c      	itt	ne
    c71a:	6afe      	ldrne	r6, [r7, #44]	; 0x2c
				str_pos += ros_nbr;
    c71c:	44d9      	addne	r9, fp
    c71e:	e7a9      	b.n	c674 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c720:	697b      	ldr	r3, [r7, #20]
    c722:	b123      	cbz	r3, c72e <cbprintf_package_convert+0x19e>
    c724:	6a38      	ldr	r0, [r7, #32]
    c726:	f01a f8af 	bl	26888 <is_ptr>
    c72a:	2800      	cmp	r0, #0
    c72c:	d1c4      	bne.n	c6b8 <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c72e:	f01a 0f01 	tst.w	sl, #1
    c732:	d105      	bne.n	c740 <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
    c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c736:	1aed      	subs	r5, r5, r3
    c738:	e7a8      	b.n	c68c <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c73c:	2b00      	cmp	r3, #0
    c73e:	d0a5      	beq.n	c68c <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
    c740:	4640      	mov	r0, r8
    c742:	f7fc fe0d 	bl	9360 <strlen>
				if (strl && strl_cnt < strl_len) {
    c746:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c74a:	b14b      	cbz	r3, c760 <cbprintf_package_convert+0x1d0>
    c74c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c750:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    c752:	bf3f      	itttt	cc
    c754:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
		return 1 + strlen(str);
    c758:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    c75a:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    c75e:	3601      	addcc	r6, #1
				out_len += (len - 1);
    c760:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    c762:	e793      	b.n	c68c <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c764:	f1bb 0f00 	cmp.w	fp, #0
    c768:	d06e      	beq.n	c848 <cbprintf_package_convert+0x2b8>
    c76a:	f01a 0604 	ands.w	r6, sl, #4
    c76e:	d06e      	beq.n	c84e <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
    c770:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    c772:	2600      	movs	r6, #0
		dst = keep_str_pos;
    c774:	f107 0048 	add.w	r0, r7, #72	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c778:	465a      	mov	r2, fp
    c77a:	4649      	mov	r1, r9
    c77c:	f01f fb1e 	bl	2bdbc <memcpy>
	str_pos += ros_nbr;
    c780:	69bb      	ldr	r3, [r7, #24]
    c782:	44d9      	add	r9, fp
	for (int i = 0; i < rws_nbr; i++) {
    c784:	005b      	lsls	r3, r3, #1
    c786:	60fb      	str	r3, [r7, #12]
    c788:	69bb      	ldr	r3, [r7, #24]
    c78a:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    c78e:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c790:	f00a 0302 	and.w	r3, sl, #2
    c794:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    c796:	68bb      	ldr	r3, [r7, #8]
    c798:	454b      	cmp	r3, r9
    c79a:	d16b      	bne.n	c874 <cbprintf_package_convert+0x2e4>
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c79c:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c79e:	f01a 0f02 	tst.w	sl, #2
    c7a2:	bf18      	it	ne
    c7a4:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c7a6:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c7aa:	bf08      	it	eq
    c7ac:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c7b0:	f01a 0f01 	tst.w	sl, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c7b4:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c7b6:	f040 80e1 	bne.w	c97c <cbprintf_package_convert+0x3ec>
    c7ba:	f01a 0f04 	tst.w	sl, #4
    c7be:	bf14      	ite	ne
    c7c0:	4640      	movne	r0, r8
    c7c2:	2000      	moveq	r0, #0
    c7c4:	623b      	str	r3, [r7, #32]
	*in_desc = out_desc;
    c7c6:	7062      	strb	r2, [r4, #1]
    c7c8:	70a0      	strb	r0, [r4, #2]
    c7ca:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    c7cc:	4620      	mov	r0, r4
    c7ce:	69fa      	ldr	r2, [r7, #28]
    c7d0:	6939      	ldr	r1, [r7, #16]
    c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c7d4:	4798      	blx	r3
	if (rv < 0) {
    c7d6:	1e05      	subs	r5, r0, #0
    c7d8:	f6ff af14 	blt.w	c604 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
    c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c7de:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    c7e0:	7023      	strb	r3, [r4, #0]
    c7e2:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c7e4:	69fa      	ldr	r2, [r7, #28]
	*in_desc = in_desc_backup;
    c7e6:	7063      	strb	r3, [r4, #1]
    c7e8:	69bb      	ldr	r3, [r7, #24]
    c7ea:	f884 b002 	strb.w	fp, [r4, #2]
    c7ee:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c7f0:	f107 0048 	add.w	r0, r7, #72	; 0x48
    c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c7f6:	4798      	blx	r3
	if (rv < 0) {
    c7f8:	f1b0 0800 	subs.w	r8, r0, #0
    c7fc:	f2c0 80ec 	blt.w	c9d8 <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
	rv = cb(str_pos, strs_len, ctx);
    c802:	4648      	mov	r0, r9
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c804:	eba3 010b 	sub.w	r1, r3, fp
    c808:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
    c80a:	69fa      	ldr	r2, [r7, #28]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c80c:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    c80e:	68fb      	ldr	r3, [r7, #12]
    c810:	1ac9      	subs	r1, r1, r3
    c812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c814:	4798      	blx	r3
	if (rv < 0) {
    c816:	2800      	cmp	r0, #0
    c818:	f2c0 80e0 	blt.w	c9dc <cbprintf_package_convert+0x44c>
	for (int i = 0; i < scpy_cnt; i++) {
    c81c:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    c820:	44a8      	add	r8, r5
	out_len += rv;
    c822:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    c826:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	for (int i = 0; i < scpy_cnt; i++) {
    c82a:	45b3      	cmp	fp, r6
    c82c:	f2c0 80a8 	blt.w	c980 <cbprintf_package_convert+0x3f0>
	(void)cb(NULL, 0, ctx);
    c830:	2100      	movs	r1, #0
    c832:	69fa      	ldr	r2, [r7, #28]
    c834:	4608      	mov	r0, r1
    c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c838:	4798      	blx	r3
	return out_len;
    c83a:	e6e3      	b.n	c604 <cbprintf_package_convert+0x74>
	if (cb == NULL) {
    c83c:	465e      	mov	r6, fp
    c83e:	f04f 0800 	mov.w	r8, #0
    c842:	f107 0038 	add.w	r0, r7, #56	; 0x38
    c846:	e797      	b.n	c778 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
    c848:	465e      	mov	r6, fp
		keep_cnt = 0;
    c84a:	46d8      	mov	r8, fp
    c84c:	e798      	b.n	c780 <cbprintf_package_convert+0x1f0>
    c84e:	46b0      	mov	r8, r6
    c850:	e796      	b.n	c780 <cbprintf_package_convert+0x1f0>
    c852:	bf00      	nop
    c854:	0002e873 	.word	0x0002e873
    c858:	0002e7de 	.word	0x0002e7de
    c85c:	0002dd81 	.word	0x0002dd81
    c860:	0002c610 	.word	0x0002c610
    c864:	00033d14 	.word	0x00033d14
    c868:	0002e88e 	.word	0x0002e88e
    c86c:	01000004 	.word	0x01000004
    c870:	0002cd18 	.word	0x0002cd18
		uint8_t arg_idx = *str_pos++;
    c874:	f819 1b02 	ldrb.w	r1, [r9], #2
    c878:	4b59      	ldr	r3, [pc, #356]	; (c9e0 <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
    c87a:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    c87e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    c882:	4298      	cmp	r0, r3
    c884:	d302      	bcc.n	c88c <cbprintf_package_convert+0x2fc>
    c886:	4b57      	ldr	r3, [pc, #348]	; (c9e4 <cbprintf_package_convert+0x454>)
    c888:	4298      	cmp	r0, r3
    c88a:	d316      	bcc.n	c8ba <cbprintf_package_convert+0x32a>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c88c:	697b      	ldr	r3, [r7, #20]
    c88e:	b12b      	cbz	r3, c89c <cbprintf_package_convert+0x30c>
    c890:	6a38      	ldr	r0, [r7, #32]
    c892:	f019 fff9 	bl	26888 <is_ptr>
    c896:	2800      	cmp	r0, #0
    c898:	f47f af7d 	bne.w	c796 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c89c:	687b      	ldr	r3, [r7, #4]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d04a      	beq.n	c938 <cbprintf_package_convert+0x3a8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c8a2:	2e0f      	cmp	r6, #15
    c8a4:	d93e      	bls.n	c924 <cbprintf_package_convert+0x394>
    c8a6:	4950      	ldr	r1, [pc, #320]	; (c9e8 <cbprintf_package_convert+0x458>)
    c8a8:	f44f 6389 	mov.w	r3, #1096	; 0x448
    c8ac:	4a4f      	ldr	r2, [pc, #316]	; (c9ec <cbprintf_package_convert+0x45c>)
    c8ae:	4850      	ldr	r0, [pc, #320]	; (c9f0 <cbprintf_package_convert+0x460>)
    c8b0:	f01a fa5f 	bl	26d72 <assert_print>
    c8b4:	f44f 6189 	mov.w	r1, #1096	; 0x448
    c8b8:	e67e      	b.n	c5b8 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c8ba:	697b      	ldr	r3, [r7, #20]
    c8bc:	b12b      	cbz	r3, c8ca <cbprintf_package_convert+0x33a>
    c8be:	6a38      	ldr	r0, [r7, #32]
    c8c0:	f019 ffe2 	bl	26888 <is_ptr>
    c8c4:	2800      	cmp	r0, #0
    c8c6:	f47f af66 	bne.w	c796 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c8ca:	f01a 0f01 	tst.w	sl, #1
    c8ce:	d00b      	beq.n	c8e8 <cbprintf_package_convert+0x358>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c8d0:	2e0f      	cmp	r6, #15
    c8d2:	d927      	bls.n	c924 <cbprintf_package_convert+0x394>
    c8d4:	4944      	ldr	r1, [pc, #272]	; (c9e8 <cbprintf_package_convert+0x458>)
    c8d6:	f240 433e 	movw	r3, #1086	; 0x43e
    c8da:	4a44      	ldr	r2, [pc, #272]	; (c9ec <cbprintf_package_convert+0x45c>)
    c8dc:	4844      	ldr	r0, [pc, #272]	; (c9f0 <cbprintf_package_convert+0x460>)
    c8de:	f01a fa48 	bl	26d72 <assert_print>
    c8e2:	f240 413e 	movw	r1, #1086	; 0x43e
    c8e6:	e667      	b.n	c5b8 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c8e8:	f01a 0f04 	tst.w	sl, #4
    c8ec:	f43f af53 	beq.w	c796 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c8f0:	f1b8 0f0f 	cmp.w	r8, #15
    c8f4:	d909      	bls.n	c90a <cbprintf_package_convert+0x37a>
    c8f6:	493f      	ldr	r1, [pc, #252]	; (c9f4 <cbprintf_package_convert+0x464>)
    c8f8:	f240 4341 	movw	r3, #1089	; 0x441
    c8fc:	4a3b      	ldr	r2, [pc, #236]	; (c9ec <cbprintf_package_convert+0x45c>)
    c8fe:	483c      	ldr	r0, [pc, #240]	; (c9f0 <cbprintf_package_convert+0x460>)
    c900:	f01a fa37 	bl	26d72 <assert_print>
    c904:	f240 4141 	movw	r1, #1089	; 0x441
    c908:	e656      	b.n	c5b8 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    c90a:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c90e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c912:	f108 0101 	add.w	r1, r8, #1
    c916:	eb03 0802 	add.w	r8, r3, r2
    c91a:	f808 5c10 	strb.w	r5, [r8, #-16]
    c91e:	fa5f f881 	uxtb.w	r8, r1
    c922:	e738      	b.n	c796 <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    c924:	f106 0328 	add.w	r3, r6, #40	; 0x28
    c928:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c92c:	1c71      	adds	r1, r6, #1
    c92e:	189e      	adds	r6, r3, r2
    c930:	f806 5c20 	strb.w	r5, [r6, #-32]
    c934:	b2ce      	uxtb	r6, r1
    c936:	e72e      	b.n	c796 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c938:	f1b8 0f0f 	cmp.w	r8, #15
    c93c:	d909      	bls.n	c952 <cbprintf_package_convert+0x3c2>
    c93e:	492d      	ldr	r1, [pc, #180]	; (c9f4 <cbprintf_package_convert+0x464>)
    c940:	f240 434b 	movw	r3, #1099	; 0x44b
    c944:	4a29      	ldr	r2, [pc, #164]	; (c9ec <cbprintf_package_convert+0x45c>)
    c946:	482a      	ldr	r0, [pc, #168]	; (c9f0 <cbprintf_package_convert+0x460>)
    c948:	f01a fa13 	bl	26d72 <assert_print>
    c94c:	f240 414b 	movw	r1, #1099	; 0x44b
    c950:	e632      	b.n	c5b8 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    c952:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c956:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c95a:	f108 0001 	add.w	r0, r8, #1
    c95e:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    c962:	f107 0358 	add.w	r3, r7, #88	; 0x58
    c966:	f108 0802 	add.w	r8, r8, #2
    c96a:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    c96e:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    c972:	fa5f f888 	uxtb.w	r8, r8
    c976:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    c97a:	e70c      	b.n	c796 <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c97c:	2000      	movs	r0, #0
    c97e:	e721      	b.n	c7c4 <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
    c980:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    c984:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    c988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = strl ? strl[i] : 0;
    c98c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c990:	b1fb      	cbz	r3, c9d2 <cbprintf_package_convert+0x442>
    c992:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    c996:	2101      	movs	r1, #1
    c998:	69fa      	ldr	r2, [r7, #28]
    c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c99c:	f107 0037 	add.w	r0, r7, #55	; 0x37
    c9a0:	4798      	blx	r3
		if (rv < 0) {
    c9a2:	2800      	cmp	r0, #0
    c9a4:	db1a      	blt.n	c9dc <cbprintf_package_convert+0x44c>
		out_len += rv;
    c9a6:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    c9a8:	f1b8 0f00 	cmp.w	r8, #0
    c9ac:	d106      	bne.n	c9bc <cbprintf_package_convert+0x42c>
    c9ae:	4648      	mov	r0, r9
    c9b0:	f7fc fcd6 	bl	9360 <strlen>
    c9b4:	f100 0801 	add.w	r8, r0, #1
    c9b8:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    c9bc:	4641      	mov	r1, r8
    c9be:	4648      	mov	r0, r9
    c9c0:	69fa      	ldr	r2, [r7, #28]
    c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9c4:	4798      	blx	r3
		if (rv < 0) {
    c9c6:	2800      	cmp	r0, #0
    c9c8:	db08      	blt.n	c9dc <cbprintf_package_convert+0x44c>
		out_len += rv;
    c9ca:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    c9cc:	f10b 0b01 	add.w	fp, fp, #1
    c9d0:	e72b      	b.n	c82a <cbprintf_package_convert+0x29a>
		uint16_t str_len = strl ? strl[i] : 0;
    c9d2:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
    c9d6:	e7de      	b.n	c996 <cbprintf_package_convert+0x406>
    c9d8:	4645      	mov	r5, r8
    c9da:	e613      	b.n	c604 <cbprintf_package_convert+0x74>
    c9dc:	4605      	mov	r5, r0
    c9de:	e611      	b.n	c604 <cbprintf_package_convert+0x74>
    c9e0:	0002c610 	.word	0x0002c610
    c9e4:	00033d14 	.word	0x00033d14
    c9e8:	0002e931 	.word	0x0002e931
    c9ec:	0002e7de 	.word	0x0002e7de
    c9f0:	0002dd81 	.word	0x0002dd81
    c9f4:	0002e950 	.word	0x0002e950

0000c9f8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    c9f8:	4b01      	ldr	r3, [pc, #4]	; (ca00 <char_out+0x8>)
    c9fa:	681b      	ldr	r3, [r3, #0]
    c9fc:	4718      	bx	r3
    c9fe:	bf00      	nop
    ca00:	200083f8 	.word	0x200083f8

0000ca04 <__printk_hook_install>:
	_char_out = fn;
    ca04:	4b01      	ldr	r3, [pc, #4]	; (ca0c <__printk_hook_install+0x8>)
    ca06:	6018      	str	r0, [r3, #0]
}
    ca08:	4770      	bx	lr
    ca0a:	bf00      	nop
    ca0c:	200083f8 	.word	0x200083f8

0000ca10 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    ca10:	b507      	push	{r0, r1, r2, lr}
    ca12:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    ca14:	2100      	movs	r1, #0
    ca16:	4602      	mov	r2, r0
    ca18:	9100      	str	r1, [sp, #0]
    ca1a:	4803      	ldr	r0, [pc, #12]	; (ca28 <vprintk+0x18>)
    ca1c:	f000 fcb0 	bl	d380 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    ca20:	b003      	add	sp, #12
    ca22:	f85d fb04 	ldr.w	pc, [sp], #4
    ca26:	bf00      	nop
    ca28:	0000c9f9 	.word	0x0000c9f9

0000ca2c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ca2c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    ca2e:	2500      	movs	r5, #0
{
    ca30:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    ca32:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    ca36:	4604      	mov	r4, r0
    ca38:	9500      	str	r5, [sp, #0]
    ca3a:	a903      	add	r1, sp, #12
    ca3c:	4805      	ldr	r0, [pc, #20]	; (ca54 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    ca3e:	9505      	str	r5, [sp, #20]
    ca40:	f000 fc9e 	bl	d380 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    ca44:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    ca48:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    ca4a:	bfb8      	it	lt
    ca4c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    ca4e:	b007      	add	sp, #28
    ca50:	bd30      	pop	{r4, r5, pc}
    ca52:	bf00      	nop
    ca54:	000269c9 	.word	0x000269c9

0000ca58 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    ca58:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    ca5a:	460c      	mov	r4, r1
    ca5c:	2900      	cmp	r1, #0
    ca5e:	d034      	beq.n	caca <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    ca60:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca62:	1f0b      	subs	r3, r1, #4
    ca64:	1a9b      	subs	r3, r3, r2
    ca66:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    ca68:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    ca6c:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ca6e:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    ca70:	07e8      	lsls	r0, r5, #31
    ca72:	d40d      	bmi.n	ca90 <sys_heap_free+0x38>
    ca74:	23af      	movs	r3, #175	; 0xaf
    ca76:	4a15      	ldr	r2, [pc, #84]	; (cacc <sys_heap_free+0x74>)
    ca78:	4915      	ldr	r1, [pc, #84]	; (cad0 <sys_heap_free+0x78>)
    ca7a:	4816      	ldr	r0, [pc, #88]	; (cad4 <sys_heap_free+0x7c>)
    ca7c:	f01a f979 	bl	26d72 <assert_print>
    ca80:	4621      	mov	r1, r4
    ca82:	4815      	ldr	r0, [pc, #84]	; (cad8 <sys_heap_free+0x80>)
    ca84:	f01a f975 	bl	26d72 <assert_print>
    ca88:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    ca8a:	4810      	ldr	r0, [pc, #64]	; (cacc <sys_heap_free+0x74>)
    ca8c:	f01a f96a 	bl	26d64 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    ca90:	4610      	mov	r0, r2
    ca92:	f019 ffd0 	bl	26a36 <chunk_size>
    ca96:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    ca98:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    ca9c:	1b80      	subs	r0, r0, r6
    ca9e:	4281      	cmp	r1, r0
    caa0:	d00b      	beq.n	caba <sys_heap_free+0x62>
    caa2:	23b7      	movs	r3, #183	; 0xb7
    caa4:	4a09      	ldr	r2, [pc, #36]	; (cacc <sys_heap_free+0x74>)
    caa6:	490d      	ldr	r1, [pc, #52]	; (cadc <sys_heap_free+0x84>)
    caa8:	480a      	ldr	r0, [pc, #40]	; (cad4 <sys_heap_free+0x7c>)
    caaa:	f01a f962 	bl	26d72 <assert_print>
    caae:	4621      	mov	r1, r4
    cab0:	480b      	ldr	r0, [pc, #44]	; (cae0 <sys_heap_free+0x88>)
    cab2:	f01a f95e 	bl	26d72 <assert_print>
    cab6:	21b7      	movs	r1, #183	; 0xb7
    cab8:	e7e7      	b.n	ca8a <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    caba:	f025 0501 	bic.w	r5, r5, #1
    cabe:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    cac0:	4610      	mov	r0, r2
}
    cac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    cac6:	f01a b873 	b.w	26bb0 <free_chunk>
}
    caca:	bd70      	pop	{r4, r5, r6, pc}
    cacc:	0002e981 	.word	0x0002e981
    cad0:	0002e9a2 	.word	0x0002e9a2
    cad4:	0002dd81 	.word	0x0002dd81
    cad8:	0002e9b3 	.word	0x0002e9b3
    cadc:	0002e9eb 	.word	0x0002e9eb
    cae0:	0002ea11 	.word	0x0002ea11

0000cae4 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    cae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cae8:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    caea:	400b      	ands	r3, r1
{
    caec:	460f      	mov	r7, r1
    caee:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    caf0:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    caf2:	d010      	beq.n	cb16 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    caf4:	f1c1 0900 	rsb	r9, r1, #0
    caf8:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    cafc:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cafe:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    cb00:	2a04      	cmp	r2, #4
    cb02:	bf28      	it	cs
    cb04:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cb06:	4219      	tst	r1, r3
    cb08:	d10c      	bne.n	cb24 <sys_heap_aligned_alloc+0x40>
    cb0a:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    cb0c:	b9e4      	cbnz	r4, cb48 <sys_heap_aligned_alloc+0x64>
		return NULL;
    cb0e:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    cb10:	4628      	mov	r0, r5
    cb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    cb16:	2904      	cmp	r1, #4
    cb18:	d813      	bhi.n	cb42 <sys_heap_aligned_alloc+0x5e>
}
    cb1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    cb1e:	4611      	mov	r1, r2
    cb20:	f01a b877 	b.w	26c12 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cb24:	492c      	ldr	r1, [pc, #176]	; (cbd8 <sys_heap_aligned_alloc+0xf4>)
    cb26:	f44f 73a2 	mov.w	r3, #324	; 0x144
    cb2a:	4a2c      	ldr	r2, [pc, #176]	; (cbdc <sys_heap_aligned_alloc+0xf8>)
    cb2c:	482c      	ldr	r0, [pc, #176]	; (cbe0 <sys_heap_aligned_alloc+0xfc>)
    cb2e:	f01a f920 	bl	26d72 <assert_print>
    cb32:	482c      	ldr	r0, [pc, #176]	; (cbe4 <sys_heap_aligned_alloc+0x100>)
    cb34:	f01a f91d 	bl	26d72 <assert_print>
    cb38:	f44f 71a2 	mov.w	r1, #324	; 0x144
    cb3c:	4827      	ldr	r0, [pc, #156]	; (cbdc <sys_heap_aligned_alloc+0xf8>)
    cb3e:	f01a f911 	bl	26d64 <assert_post_action>
		rew = 0;
    cb42:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    cb44:	2204      	movs	r2, #4
    cb46:	e7e1      	b.n	cb0c <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    cb48:	68b3      	ldr	r3, [r6, #8]
    cb4a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    cb4e:	d9de      	bls.n	cb0e <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cb50:	f104 010b 	add.w	r1, r4, #11
    cb54:	4439      	add	r1, r7
    cb56:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    cb58:	4630      	mov	r0, r6
    cb5a:	08c9      	lsrs	r1, r1, #3
    cb5c:	f019 ffc1 	bl	26ae2 <alloc_chunk>
	if (c0 == 0) {
    cb60:	4680      	mov	r8, r0
    cb62:	2800      	cmp	r0, #0
    cb64:	d0d3      	beq.n	cb0e <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    cb66:	f109 0504 	add.w	r5, r9, #4
    cb6a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    cb6e:	1e7b      	subs	r3, r7, #1
    cb70:	4435      	add	r5, r6
    cb72:	441d      	add	r5, r3
    cb74:	427f      	negs	r7, r7
    cb76:	403d      	ands	r5, r7
    cb78:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cb7c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cb7e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cb80:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cb82:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cb84:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    cb88:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    cb8a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cb8e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    cb92:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    cb96:	d208      	bcs.n	cbaa <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    cb98:	4601      	mov	r1, r0
    cb9a:	463a      	mov	r2, r7
    cb9c:	4630      	mov	r0, r6
    cb9e:	f019 ffed 	bl	26b7c <split_chunks>
		free_list_add(h, c0);
    cba2:	4641      	mov	r1, r8
    cba4:	4630      	mov	r0, r6
    cba6:	f019 ff4b 	bl	26a40 <free_list_add>
	return c + chunk_size(h, c);
    cbaa:	4639      	mov	r1, r7
    cbac:	4630      	mov	r0, r6
    cbae:	f019 ff42 	bl	26a36 <chunk_size>
    cbb2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    cbb4:	4284      	cmp	r4, r0
    cbb6:	d207      	bcs.n	cbc8 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    cbb8:	4630      	mov	r0, r6
    cbba:	4622      	mov	r2, r4
    cbbc:	f019 ffde 	bl	26b7c <split_chunks>
		free_list_add(h, c_end);
    cbc0:	4621      	mov	r1, r4
    cbc2:	4630      	mov	r0, r6
    cbc4:	f019 ff3c 	bl	26a40 <free_list_add>
	void *cmem = &buf[c];
    cbc8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cbcc:	8873      	ldrh	r3, [r6, #2]
    cbce:	f043 0301 	orr.w	r3, r3, #1
    cbd2:	8073      	strh	r3, [r6, #2]
    cbd4:	e79c      	b.n	cb10 <sys_heap_aligned_alloc+0x2c>
    cbd6:	bf00      	nop
    cbd8:	0002ea4d 	.word	0x0002ea4d
    cbdc:	0002e981 	.word	0x0002e981
    cbe0:	0002dd81 	.word	0x0002dd81
    cbe4:	0002ea68 	.word	0x0002ea68

0000cbe8 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cbe8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbee:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cbf0:	d30e      	bcc.n	cc10 <sys_heap_init+0x28>
    cbf2:	493a      	ldr	r1, [pc, #232]	; (ccdc <sys_heap_init+0xf4>)
    cbf4:	f240 13eb 	movw	r3, #491	; 0x1eb
    cbf8:	4a39      	ldr	r2, [pc, #228]	; (cce0 <sys_heap_init+0xf8>)
    cbfa:	483a      	ldr	r0, [pc, #232]	; (cce4 <sys_heap_init+0xfc>)
    cbfc:	f01a f8b9 	bl	26d72 <assert_print>
    cc00:	4839      	ldr	r0, [pc, #228]	; (cce8 <sys_heap_init+0x100>)
    cc02:	f01a f8b6 	bl	26d72 <assert_print>
    cc06:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    cc0a:	4835      	ldr	r0, [pc, #212]	; (cce0 <sys_heap_init+0xf8>)
    cc0c:	f01a f8aa 	bl	26d64 <assert_post_action>
    cc10:	2a04      	cmp	r2, #4
    cc12:	d80c      	bhi.n	cc2e <sys_heap_init+0x46>
    cc14:	4935      	ldr	r1, [pc, #212]	; (ccec <sys_heap_init+0x104>)
    cc16:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cc1a:	4a31      	ldr	r2, [pc, #196]	; (cce0 <sys_heap_init+0xf8>)
    cc1c:	4831      	ldr	r0, [pc, #196]	; (cce4 <sys_heap_init+0xfc>)
    cc1e:	f01a f8a8 	bl	26d72 <assert_print>
    cc22:	4833      	ldr	r0, [pc, #204]	; (ccf0 <sys_heap_init+0x108>)
    cc24:	f01a f8a5 	bl	26d72 <assert_print>
    cc28:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    cc2c:	e7ed      	b.n	cc0a <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    cc2e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cc30:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cc32:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cc34:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cc38:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cc3c:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cc3e:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cc40:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cc44:	d80c      	bhi.n	cc60 <sys_heap_init+0x78>
    cc46:	492b      	ldr	r1, [pc, #172]	; (ccf4 <sys_heap_init+0x10c>)
    cc48:	f240 13fb 	movw	r3, #507	; 0x1fb
    cc4c:	4a24      	ldr	r2, [pc, #144]	; (cce0 <sys_heap_init+0xf8>)
    cc4e:	4825      	ldr	r0, [pc, #148]	; (cce4 <sys_heap_init+0xfc>)
    cc50:	f01a f88f 	bl	26d72 <assert_print>
    cc54:	4826      	ldr	r0, [pc, #152]	; (ccf0 <sys_heap_init+0x108>)
    cc56:	f01a f88c 	bl	26d72 <assert_print>
    cc5a:	f240 11fb 	movw	r1, #507	; 0x1fb
    cc5e:	e7d4      	b.n	cc0a <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cc60:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cc64:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cc66:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cc68:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cc6c:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cc70:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cc72:	3107      	adds	r1, #7
    cc74:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cc76:	1c4d      	adds	r5, r1, #1
    cc78:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    cc7a:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cc7c:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cc7e:	d90c      	bls.n	cc9a <sys_heap_init+0xb2>
    cc80:	491d      	ldr	r1, [pc, #116]	; (ccf8 <sys_heap_init+0x110>)
    cc82:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cc86:	4a16      	ldr	r2, [pc, #88]	; (cce0 <sys_heap_init+0xf8>)
    cc88:	4816      	ldr	r0, [pc, #88]	; (cce4 <sys_heap_init+0xfc>)
    cc8a:	f01a f872 	bl	26d72 <assert_print>
    cc8e:	4818      	ldr	r0, [pc, #96]	; (ccf0 <sys_heap_init+0x108>)
    cc90:	f01a f86f 	bl	26d72 <assert_print>
    cc94:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cc98:	e7b7      	b.n	cc0a <sys_heap_init+0x22>
    cc9a:	f100 050c 	add.w	r5, r0, #12
    cc9e:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cca2:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cca6:	42b5      	cmp	r5, r6
    cca8:	d1fb      	bne.n	cca2 <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ccaa:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ccac:	f045 0501 	orr.w	r5, r5, #1
    ccb0:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ccb2:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    ccb4:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ccb8:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    ccba:	8004      	strh	r4, [r0, #0]
    ccbc:	8077      	strh	r7, [r6, #2]
    ccbe:	1886      	adds	r6, r0, r2
    ccc0:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    ccc4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    ccc8:	8074      	strh	r4, [r6, #2]
    ccca:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cccc:	885a      	ldrh	r2, [r3, #2]
    ccce:	f042 0201 	orr.w	r2, r2, #1
    ccd2:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    ccd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    ccd8:	f019 beb2 	b.w	26a40 <free_list_add>
    ccdc:	0002ea85 	.word	0x0002ea85
    cce0:	0002e981 	.word	0x0002e981
    cce4:	0002dd81 	.word	0x0002dd81
    cce8:	0002ea9b 	.word	0x0002ea9b
    ccec:	0002eab2 	.word	0x0002eab2
    ccf0:	0002ead3 	.word	0x0002ead3
    ccf4:	0002eaec 	.word	0x0002eaec
    ccf8:	0002eb15 	.word	0x0002eb15

0000ccfc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    ccfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd00:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd02:	8ba3      	ldrh	r3, [r4, #28]
{
    cd04:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cd06:	0719      	lsls	r1, r3, #28
{
    cd08:	4615      	mov	r5, r2
	if (processing) {
    cd0a:	d412      	bmi.n	cd32 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cd0c:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd0e:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cd12:	d164      	bne.n	cdde <process_event+0xe2>
			evt = process_recheck(mgr);
    cd14:	4620      	mov	r0, r4
    cd16:	f019 ffa5 	bl	26c64 <process_recheck>
		}

		if (evt == EVT_NOP) {
    cd1a:	b188      	cbz	r0, cd40 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cd1c:	3801      	subs	r0, #1
    cd1e:	2804      	cmp	r0, #4
    cd20:	f200 8134 	bhi.w	cf8c <process_event+0x290>
    cd24:	e8df f010 	tbh	[pc, r0, lsl #1]
    cd28:	0132005b 	.word	0x0132005b
    cd2c:	00d10081 	.word	0x00d10081
    cd30:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cd32:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cd34:	bf0c      	ite	eq
    cd36:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cd3a:	f043 0120 	orrne.w	r1, r3, #32
    cd3e:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cd40:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd42:	4620      	mov	r0, r4
    cd44:	f014 fcfa 	bl	2173c <z_spin_unlock_valid>
    cd48:	2800      	cmp	r0, #0
    cd4a:	f040 819b 	bne.w	d084 <process_event+0x388>
    cd4e:	4998      	ldr	r1, [pc, #608]	; (cfb0 <process_event+0x2b4>)
    cd50:	23c2      	movs	r3, #194	; 0xc2
    cd52:	4a98      	ldr	r2, [pc, #608]	; (cfb4 <process_event+0x2b8>)
    cd54:	4898      	ldr	r0, [pc, #608]	; (cfb8 <process_event+0x2bc>)
    cd56:	f01a f80c 	bl	26d72 <assert_print>
    cd5a:	4621      	mov	r1, r4
    cd5c:	e0b0      	b.n	cec0 <process_event+0x1c4>
    cd5e:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cd62:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cd64:	2801      	cmp	r0, #1
    cd66:	d81e      	bhi.n	cda6 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    cd68:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    cd6a:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    cd6c:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    cd6e:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cd72:	d114      	bne.n	cd9e <process_event+0xa2>
		*clients = mgr->clients;
    cd74:	463a      	mov	r2, r7
    cd76:	e003      	b.n	cd80 <process_event+0x84>
				mgr->refs += 1U;
    cd78:	8be0      	ldrh	r0, [r4, #30]
    cd7a:	3001      	adds	r0, #1
    cd7c:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    cd7e:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cd80:	2a00      	cmp	r2, #0
    cd82:	d1f9      	bne.n	cd78 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd84:	f023 0307 	bic.w	r3, r3, #7
    cd88:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cd8c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd8e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cd90:	f019 ff68 	bl	26c64 <process_recheck>
    cd94:	b390      	cbz	r0, cdfc <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cd96:	f042 0220 	orr.w	r2, r2, #32
    cd9a:	83a2      	strh	r2, [r4, #28]
    cd9c:	e02e      	b.n	cdfc <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd9e:	f023 0307 	bic.w	r3, r3, #7
    cda2:	b29a      	uxth	r2, r3
}
    cda4:	e7f2      	b.n	cd8c <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cda6:	2a04      	cmp	r2, #4
    cda8:	d133      	bne.n	ce12 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdaa:	f023 0307 	bic.w	r3, r3, #7
    cdae:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    cdb0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cdb2:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cdb4:	f019 ff56 	bl	26c64 <process_recheck>
    cdb8:	b110      	cbz	r0, cdc0 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cdba:	f042 0220 	orr.w	r2, r2, #32
    cdbe:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdc0:	8ba3      	ldrh	r3, [r4, #28]
    cdc2:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cdc6:	4589      	cmp	r9, r1
    cdc8:	f040 80ea 	bne.w	cfa0 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cdcc:	8ba1      	ldrh	r1, [r4, #28]
    cdce:	06ca      	lsls	r2, r1, #27
    cdd0:	f140 814f 	bpl.w	d072 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cdd4:	f021 0310 	bic.w	r3, r1, #16
    cdd8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cdda:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    cdde:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cde2:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    cde4:	f1b8 0f00 	cmp.w	r8, #0
    cde8:	dab9      	bge.n	cd5e <process_event+0x62>
	list->head = NULL;
    cdea:	2200      	movs	r2, #0
		*clients = mgr->clients;
    cdec:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdee:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    cdf2:	e9c4 2200 	strd	r2, r2, [r4]
    cdf6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    cdfa:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdfc:	8ba3      	ldrh	r3, [r4, #28]
    cdfe:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ce02:	4589      	cmp	r9, r1
    ce04:	f040 80cd 	bne.w	cfa2 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    ce08:	2f00      	cmp	r7, #0
    ce0a:	d0df      	beq.n	cdcc <process_event+0xd0>
    ce0c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce0e:	46b2      	mov	sl, r6
    ce10:	e044      	b.n	ce9c <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    ce12:	496a      	ldr	r1, [pc, #424]	; (cfbc <process_event+0x2c0>)
    ce14:	f240 131b 	movw	r3, #283	; 0x11b
    ce18:	4a69      	ldr	r2, [pc, #420]	; (cfc0 <process_event+0x2c4>)
    ce1a:	4867      	ldr	r0, [pc, #412]	; (cfb8 <process_event+0x2bc>)
    ce1c:	f019 ffa9 	bl	26d72 <assert_print>
    ce20:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    ce24:	4866      	ldr	r0, [pc, #408]	; (cfc0 <process_event+0x2c4>)
    ce26:	f019 ff9d 	bl	26d64 <assert_post_action>
    ce2a:	b149      	cbz	r1, ce40 <process_event+0x144>
    ce2c:	4965      	ldr	r1, [pc, #404]	; (cfc4 <process_event+0x2c8>)
    ce2e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    ce32:	4a63      	ldr	r2, [pc, #396]	; (cfc0 <process_event+0x2c4>)
    ce34:	4860      	ldr	r0, [pc, #384]	; (cfb8 <process_event+0x2bc>)
    ce36:	f019 ff9c 	bl	26d72 <assert_print>
    ce3a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    ce3e:	e7f1      	b.n	ce24 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ce40:	6823      	ldr	r3, [r4, #0]
    ce42:	b94b      	cbnz	r3, ce58 <process_event+0x15c>
    ce44:	4960      	ldr	r1, [pc, #384]	; (cfc8 <process_event+0x2cc>)
    ce46:	f240 1357 	movw	r3, #343	; 0x157
    ce4a:	4a5d      	ldr	r2, [pc, #372]	; (cfc0 <process_event+0x2c4>)
    ce4c:	485a      	ldr	r0, [pc, #360]	; (cfb8 <process_event+0x2bc>)
    ce4e:	f019 ff90 	bl	26d72 <assert_print>
    ce52:	f240 1157 	movw	r1, #343	; 0x157
    ce56:	e7e5      	b.n	ce24 <process_event+0x128>
			transit = mgr->transitions->start;
    ce58:	6923      	ldr	r3, [r4, #16]
    ce5a:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    ce5c:	b94e      	cbnz	r6, ce72 <process_event+0x176>
    ce5e:	495b      	ldr	r1, [pc, #364]	; (cfcc <process_event+0x2d0>)
    ce60:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    ce64:	4a56      	ldr	r2, [pc, #344]	; (cfc0 <process_event+0x2c4>)
    ce66:	4854      	ldr	r0, [pc, #336]	; (cfb8 <process_event+0x2bc>)
    ce68:	f019 ff83 	bl	26d72 <assert_print>
    ce6c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    ce70:	e7d8      	b.n	ce24 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce72:	460f      	mov	r7, r1
		res = 0;
    ce74:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce76:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce7a:	8ba3      	ldrh	r3, [r4, #28]
    ce7c:	f023 0307 	bic.w	r3, r3, #7
    ce80:	f043 0306 	orr.w	r3, r3, #6
    ce84:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce86:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    ce88:	68a2      	ldr	r2, [r4, #8]
    ce8a:	2a00      	cmp	r2, #0
    ce8c:	f040 808b 	bne.w	cfa6 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    ce90:	2f00      	cmp	r7, #0
    ce92:	f040 808b 	bne.w	cfac <process_event+0x2b0>
		    || (transit != NULL)) {
    ce96:	2e00      	cmp	r6, #0
    ce98:	d098      	beq.n	cdcc <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce9a:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ce9c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    cea0:	f104 0b14 	add.w	fp, r4, #20
    cea4:	4658      	mov	r0, fp
			mgr->flags = flags;
    cea6:	83a3      	strh	r3, [r4, #28]
    cea8:	f014 fc48 	bl	2173c <z_spin_unlock_valid>
    ceac:	2800      	cmp	r0, #0
    ceae:	f040 8097 	bne.w	cfe0 <process_event+0x2e4>
    ceb2:	493f      	ldr	r1, [pc, #252]	; (cfb0 <process_event+0x2b4>)
    ceb4:	23c2      	movs	r3, #194	; 0xc2
    ceb6:	4a3f      	ldr	r2, [pc, #252]	; (cfb4 <process_event+0x2b8>)
    ceb8:	483f      	ldr	r0, [pc, #252]	; (cfb8 <process_event+0x2bc>)
    ceba:	f019 ff5a 	bl	26d72 <assert_print>
    cebe:	4659      	mov	r1, fp
    cec0:	4843      	ldr	r0, [pc, #268]	; (cfd0 <process_event+0x2d4>)
    cec2:	f019 ff56 	bl	26d72 <assert_print>
    cec6:	21c2      	movs	r1, #194	; 0xc2
    cec8:	e0ae      	b.n	d028 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    ceca:	2902      	cmp	r1, #2
    cecc:	d009      	beq.n	cee2 <process_event+0x1e6>
    cece:	4941      	ldr	r1, [pc, #260]	; (cfd4 <process_event+0x2d8>)
    ced0:	f240 135d 	movw	r3, #349	; 0x15d
    ced4:	4a3a      	ldr	r2, [pc, #232]	; (cfc0 <process_event+0x2c4>)
    ced6:	4838      	ldr	r0, [pc, #224]	; (cfb8 <process_event+0x2bc>)
    ced8:	f019 ff4b 	bl	26d72 <assert_print>
    cedc:	f240 115d 	movw	r1, #349	; 0x15d
    cee0:	e7a0      	b.n	ce24 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    cee2:	8be7      	ldrh	r7, [r4, #30]
    cee4:	b14f      	cbz	r7, cefa <process_event+0x1fe>
    cee6:	493c      	ldr	r1, [pc, #240]	; (cfd8 <process_event+0x2dc>)
    cee8:	f44f 73af 	mov.w	r3, #350	; 0x15e
    ceec:	4a34      	ldr	r2, [pc, #208]	; (cfc0 <process_event+0x2c4>)
    ceee:	4832      	ldr	r0, [pc, #200]	; (cfb8 <process_event+0x2bc>)
    cef0:	f019 ff3f 	bl	26d72 <assert_print>
    cef4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    cef8:	e794      	b.n	ce24 <process_event+0x128>
			transit = mgr->transitions->stop;
    cefa:	6923      	ldr	r3, [r4, #16]
    cefc:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    cefe:	b94e      	cbnz	r6, cf14 <process_event+0x218>
    cf00:	4932      	ldr	r1, [pc, #200]	; (cfcc <process_event+0x2d0>)
    cf02:	f240 1361 	movw	r3, #353	; 0x161
    cf06:	4a2e      	ldr	r2, [pc, #184]	; (cfc0 <process_event+0x2c4>)
    cf08:	482b      	ldr	r0, [pc, #172]	; (cfb8 <process_event+0x2bc>)
    cf0a:	f019 ff32 	bl	26d72 <assert_print>
    cf0e:	f240 1161 	movw	r1, #353	; 0x161
    cf12:	e787      	b.n	ce24 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf14:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    cf16:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf18:	f023 0307 	bic.w	r3, r3, #7
    cf1c:	f043 0304 	orr.w	r3, r3, #4
    cf20:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf22:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf26:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf28:	e7ae      	b.n	ce88 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    cf2a:	2901      	cmp	r1, #1
    cf2c:	d009      	beq.n	cf42 <process_event+0x246>
    cf2e:	492b      	ldr	r1, [pc, #172]	; (cfdc <process_event+0x2e0>)
    cf30:	f44f 73b2 	mov.w	r3, #356	; 0x164
    cf34:	4a22      	ldr	r2, [pc, #136]	; (cfc0 <process_event+0x2c4>)
    cf36:	4820      	ldr	r0, [pc, #128]	; (cfb8 <process_event+0x2bc>)
    cf38:	f019 ff1b 	bl	26d72 <assert_print>
    cf3c:	f44f 71b2 	mov.w	r1, #356	; 0x164
    cf40:	e770      	b.n	ce24 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cf42:	6823      	ldr	r3, [r4, #0]
    cf44:	b94b      	cbnz	r3, cf5a <process_event+0x25e>
    cf46:	4920      	ldr	r1, [pc, #128]	; (cfc8 <process_event+0x2cc>)
    cf48:	f240 1365 	movw	r3, #357	; 0x165
    cf4c:	4a1c      	ldr	r2, [pc, #112]	; (cfc0 <process_event+0x2c4>)
    cf4e:	481a      	ldr	r0, [pc, #104]	; (cfb8 <process_event+0x2bc>)
    cf50:	f019 ff0f 	bl	26d72 <assert_print>
    cf54:	f240 1165 	movw	r1, #357	; 0x165
    cf58:	e764      	b.n	ce24 <process_event+0x128>
			transit = mgr->transitions->reset;
    cf5a:	6923      	ldr	r3, [r4, #16]
    cf5c:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    cf5e:	b94e      	cbnz	r6, cf74 <process_event+0x278>
    cf60:	491a      	ldr	r1, [pc, #104]	; (cfcc <process_event+0x2d0>)
    cf62:	f44f 73b4 	mov.w	r3, #360	; 0x168
    cf66:	4a16      	ldr	r2, [pc, #88]	; (cfc0 <process_event+0x2c4>)
    cf68:	4813      	ldr	r0, [pc, #76]	; (cfb8 <process_event+0x2bc>)
    cf6a:	f019 ff02 	bl	26d72 <assert_print>
    cf6e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    cf72:	e757      	b.n	ce24 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf74:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf76:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    cf78:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf7a:	f023 0307 	bic.w	r3, r3, #7
    cf7e:	f043 0305 	orr.w	r3, r3, #5
    cf82:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf84:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf88:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf8a:	e77d      	b.n	ce88 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    cf8c:	490b      	ldr	r1, [pc, #44]	; (cfbc <process_event+0x2c0>)
    cf8e:	f240 136b 	movw	r3, #363	; 0x16b
    cf92:	4a0b      	ldr	r2, [pc, #44]	; (cfc0 <process_event+0x2c4>)
    cf94:	4808      	ldr	r0, [pc, #32]	; (cfb8 <process_event+0x2bc>)
    cf96:	f019 feec 	bl	26d72 <assert_print>
    cf9a:	f240 116b 	movw	r1, #363	; 0x16b
    cf9e:	e741      	b.n	ce24 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    cfa0:	2700      	movs	r7, #0
    cfa2:	2600      	movs	r6, #0
    cfa4:	e770      	b.n	ce88 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cfa6:	f04f 0a01 	mov.w	sl, #1
    cfaa:	e777      	b.n	ce9c <process_event+0x1a0>
    cfac:	4692      	mov	sl, r2
    cfae:	e775      	b.n	ce9c <process_event+0x1a0>
    cfb0:	0002ec10 	.word	0x0002ec10
    cfb4:	0002ebe3 	.word	0x0002ebe3
    cfb8:	0002dd81 	.word	0x0002dd81
    cfbc:	00033a12 	.word	0x00033a12
    cfc0:	0002eb40 	.word	0x0002eb40
    cfc4:	0002eb62 	.word	0x0002eb62
    cfc8:	0002eb6e 	.word	0x0002eb6e
    cfcc:	0002eb91 	.word	0x0002eb91
    cfd0:	0002ec27 	.word	0x0002ec27
    cfd4:	0002eba8 	.word	0x0002eba8
    cfd8:	0002ebbe 	.word	0x0002ebbe
    cfdc:	0002ebcd 	.word	0x0002ebcd
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cfe0:	f385 8811 	msr	BASEPRI, r5
    cfe4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cfe8:	f1ba 0f00 	cmp.w	sl, #0
    cfec:	d11e      	bne.n	d02c <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    cfee:	2f00      	cmp	r7, #0
    cff0:	d12f      	bne.n	d052 <process_event+0x356>
			if (transit != NULL) {
    cff2:	b116      	cbz	r6, cffa <process_event+0x2fe>
				transit(mgr, transition_complete);
    cff4:	4620      	mov	r0, r4
    cff6:	4926      	ldr	r1, [pc, #152]	; (d090 <process_event+0x394>)
    cff8:	47b0      	blx	r6
	__asm__ volatile(
    cffa:	f04f 0320 	mov.w	r3, #32
    cffe:	f3ef 8511 	mrs	r5, BASEPRI
    d002:	f383 8812 	msr	BASEPRI_MAX, r3
    d006:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d00a:	4658      	mov	r0, fp
    d00c:	f014 fb88 	bl	21720 <z_spin_lock_valid>
    d010:	bb38      	cbnz	r0, d062 <process_event+0x366>
    d012:	2394      	movs	r3, #148	; 0x94
    d014:	4a1f      	ldr	r2, [pc, #124]	; (d094 <process_event+0x398>)
    d016:	4920      	ldr	r1, [pc, #128]	; (d098 <process_event+0x39c>)
    d018:	4820      	ldr	r0, [pc, #128]	; (d09c <process_event+0x3a0>)
    d01a:	f019 feaa 	bl	26d72 <assert_print>
    d01e:	4659      	mov	r1, fp
    d020:	481f      	ldr	r0, [pc, #124]	; (d0a0 <process_event+0x3a4>)
    d022:	f019 fea6 	bl	26d72 <assert_print>
    d026:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d028:	481a      	ldr	r0, [pc, #104]	; (d094 <process_event+0x398>)
    d02a:	e6fc      	b.n	ce26 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    d02c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d02e:	2900      	cmp	r1, #0
    d030:	d0dd      	beq.n	cfee <process_event+0x2f2>
	return node->next;
    d032:	680d      	ldr	r5, [r1, #0]
    d034:	2900      	cmp	r1, #0
    d036:	d0da      	beq.n	cfee <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    d038:	4643      	mov	r3, r8
    d03a:	464a      	mov	r2, r9
    d03c:	4620      	mov	r0, r4
    d03e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    d042:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d044:	b11d      	cbz	r5, d04e <process_event+0x352>
    d046:	682b      	ldr	r3, [r5, #0]
    d048:	4629      	mov	r1, r5
    d04a:	461d      	mov	r5, r3
    d04c:	e7f2      	b.n	d034 <process_event+0x338>
    d04e:	462b      	mov	r3, r5
    d050:	e7fa      	b.n	d048 <process_event+0x34c>
    d052:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    d054:	4643      	mov	r3, r8
    d056:	464a      	mov	r2, r9
    d058:	4620      	mov	r0, r4
    d05a:	683f      	ldr	r7, [r7, #0]
    d05c:	f019 fe2e 	bl	26cbc <notify_one>
    d060:	e7c5      	b.n	cfee <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    d062:	4658      	mov	r0, fp
    d064:	f014 fb78 	bl	21758 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    d068:	8ba3      	ldrh	r3, [r4, #28]
    d06a:	f023 0308 	bic.w	r3, r3, #8
    d06e:	83a3      	strh	r3, [r4, #28]
    d070:	e6ac      	b.n	cdcc <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    d072:	068b      	lsls	r3, r1, #26
    d074:	f57f ae64 	bpl.w	cd40 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d078:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d07c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    d07e:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    d082:	e647      	b.n	cd14 <process_event+0x18>
	__asm__ volatile(
    d084:	f385 8811 	msr	BASEPRI, r5
    d088:	f3bf 8f6f 	isb	sy
}
    d08c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d090:	0000d0a5 	.word	0x0000d0a5
    d094:	0002ebe3 	.word	0x0002ebe3
    d098:	0002ec3c 	.word	0x0002ec3c
    d09c:	0002dd81 	.word	0x0002dd81
    d0a0:	0002ec51 	.word	0x0002ec51

0000d0a4 <transition_complete>:
{
    d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0a6:	4604      	mov	r4, r0
    d0a8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d0aa:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    d0ae:	f04f 0320 	mov.w	r3, #32
    d0b2:	f3ef 8711 	mrs	r7, BASEPRI
    d0b6:	f383 8812 	msr	BASEPRI_MAX, r3
    d0ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d0be:	4630      	mov	r0, r6
    d0c0:	f014 fb2e 	bl	21720 <z_spin_lock_valid>
    d0c4:	b968      	cbnz	r0, d0e2 <transition_complete+0x3e>
    d0c6:	2394      	movs	r3, #148	; 0x94
    d0c8:	4a0b      	ldr	r2, [pc, #44]	; (d0f8 <transition_complete+0x54>)
    d0ca:	490c      	ldr	r1, [pc, #48]	; (d0fc <transition_complete+0x58>)
    d0cc:	480c      	ldr	r0, [pc, #48]	; (d100 <transition_complete+0x5c>)
    d0ce:	f019 fe50 	bl	26d72 <assert_print>
    d0d2:	4631      	mov	r1, r6
    d0d4:	480b      	ldr	r0, [pc, #44]	; (d104 <transition_complete+0x60>)
    d0d6:	f019 fe4c 	bl	26d72 <assert_print>
    d0da:	2194      	movs	r1, #148	; 0x94
    d0dc:	4806      	ldr	r0, [pc, #24]	; (d0f8 <transition_complete+0x54>)
    d0de:	f019 fe41 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
    d0e2:	4630      	mov	r0, r6
    d0e4:	f014 fb38 	bl	21758 <z_spin_lock_set_owner>
	mgr->last_res = res;
    d0e8:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    d0ea:	463a      	mov	r2, r7
    d0ec:	4620      	mov	r0, r4
}
    d0ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d0f2:	2101      	movs	r1, #1
    d0f4:	f7ff be02 	b.w	ccfc <process_event>
    d0f8:	0002ebe3 	.word	0x0002ebe3
    d0fc:	0002ec3c 	.word	0x0002ec3c
    d100:	0002dd81 	.word	0x0002dd81
    d104:	0002ec51 	.word	0x0002ec51

0000d108 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d10c:	4604      	mov	r4, r0
    d10e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d110:	f019 fdc4 	bl	26c9c <validate_args>

	if (rv < 0) {
    d114:	1e05      	subs	r5, r0, #0
    d116:	db67      	blt.n	d1e8 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d118:	f104 0914 	add.w	r9, r4, #20
    d11c:	f04f 0320 	mov.w	r3, #32
    d120:	f3ef 8a11 	mrs	sl, BASEPRI
    d124:	f383 8812 	msr	BASEPRI_MAX, r3
    d128:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d12c:	4648      	mov	r0, r9
    d12e:	f014 faf7 	bl	21720 <z_spin_lock_valid>
    d132:	4680      	mov	r8, r0
    d134:	b960      	cbnz	r0, d150 <onoff_request+0x48>
    d136:	2394      	movs	r3, #148	; 0x94
    d138:	4a37      	ldr	r2, [pc, #220]	; (d218 <onoff_request+0x110>)
    d13a:	4938      	ldr	r1, [pc, #224]	; (d21c <onoff_request+0x114>)
    d13c:	4838      	ldr	r0, [pc, #224]	; (d220 <onoff_request+0x118>)
    d13e:	f019 fe18 	bl	26d72 <assert_print>
    d142:	4649      	mov	r1, r9
    d144:	4837      	ldr	r0, [pc, #220]	; (d224 <onoff_request+0x11c>)
    d146:	f019 fe14 	bl	26d72 <assert_print>
    d14a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d14c:	4832      	ldr	r0, [pc, #200]	; (d218 <onoff_request+0x110>)
    d14e:	e040      	b.n	d1d2 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d150:	4648      	mov	r0, r9
    d152:	f014 fb01 	bl	21758 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d156:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d15a:	8be3      	ldrh	r3, [r4, #30]
    d15c:	8ba6      	ldrh	r6, [r4, #28]
    d15e:	4293      	cmp	r3, r2
    d160:	f006 0607 	and.w	r6, r6, #7
    d164:	d043      	beq.n	d1ee <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d166:	2e02      	cmp	r6, #2
    d168:	d113      	bne.n	d192 <onoff_request+0x8a>
	rv = state;
    d16a:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d16c:	3301      	adds	r3, #1
    d16e:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d170:	4648      	mov	r0, r9
    d172:	f014 fae3 	bl	2173c <z_spin_unlock_valid>
    d176:	2800      	cmp	r0, #0
    d178:	d13f      	bne.n	d1fa <onoff_request+0xf2>
    d17a:	23c2      	movs	r3, #194	; 0xc2
    d17c:	4a26      	ldr	r2, [pc, #152]	; (d218 <onoff_request+0x110>)
    d17e:	492a      	ldr	r1, [pc, #168]	; (d228 <onoff_request+0x120>)
    d180:	4827      	ldr	r0, [pc, #156]	; (d220 <onoff_request+0x118>)
    d182:	f019 fdf6 	bl	26d72 <assert_print>
    d186:	4649      	mov	r1, r9
    d188:	4828      	ldr	r0, [pc, #160]	; (d22c <onoff_request+0x124>)
    d18a:	f019 fdf2 	bl	26d72 <assert_print>
    d18e:	21c2      	movs	r1, #194	; 0xc2
    d190:	e7dc      	b.n	d14c <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d192:	2e06      	cmp	r6, #6
    d194:	d813      	bhi.n	d1be <onoff_request+0xb6>
    d196:	e8df f006 	tbb	[pc, r6]
    d19a:	2d09      	.short	0x2d09
    d19c:	04091212 	.word	0x04091212
    d1a0:	09          	.byte	0x09
    d1a1:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d1a2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d1a6:	f04f 0800 	mov.w	r8, #0
    d1aa:	e7e1      	b.n	d170 <onoff_request+0x68>
	parent->next = child;
    d1ac:	2300      	movs	r3, #0
    d1ae:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d1b0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d1b2:	b983      	cbnz	r3, d1d6 <onoff_request+0xce>
	list->head = node;
    d1b4:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d1b8:	b186      	cbz	r6, d1dc <onoff_request+0xd4>
	rv = state;
    d1ba:	4635      	mov	r5, r6
    d1bc:	e7f3      	b.n	d1a6 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d1be:	491c      	ldr	r1, [pc, #112]	; (d230 <onoff_request+0x128>)
    d1c0:	4817      	ldr	r0, [pc, #92]	; (d220 <onoff_request+0x118>)
    d1c2:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d1c6:	4a1b      	ldr	r2, [pc, #108]	; (d234 <onoff_request+0x12c>)
    d1c8:	f019 fdd3 	bl	26d72 <assert_print>
    d1cc:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d1d0:	4818      	ldr	r0, [pc, #96]	; (d234 <onoff_request+0x12c>)
    d1d2:	f019 fdc7 	bl	26d64 <assert_post_action>
	parent->next = child;
    d1d6:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d1d8:	6067      	str	r7, [r4, #4]
}
    d1da:	e7ed      	b.n	d1b8 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d1dc:	4652      	mov	r2, sl
    d1de:	2102      	movs	r1, #2
    d1e0:	4620      	mov	r0, r4
    d1e2:	f7ff fd8b 	bl	ccfc <process_event>
    d1e6:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d1e8:	4628      	mov	r0, r5
    d1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d1ee:	f06f 050a 	mvn.w	r5, #10
    d1f2:	e7d8      	b.n	d1a6 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d1f4:	f06f 0504 	mvn.w	r5, #4
    d1f8:	e7d5      	b.n	d1a6 <onoff_request+0x9e>
	__asm__ volatile(
    d1fa:	f38a 8811 	msr	BASEPRI, sl
    d1fe:	f3bf 8f6f 	isb	sy
		if (notify) {
    d202:	f1b8 0f00 	cmp.w	r8, #0
    d206:	d0ef      	beq.n	d1e8 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d208:	2300      	movs	r3, #0
    d20a:	4632      	mov	r2, r6
    d20c:	4639      	mov	r1, r7
    d20e:	4620      	mov	r0, r4
    d210:	f019 fd54 	bl	26cbc <notify_one>
    d214:	e7e8      	b.n	d1e8 <onoff_request+0xe0>
    d216:	bf00      	nop
    d218:	0002ebe3 	.word	0x0002ebe3
    d21c:	0002ec3c 	.word	0x0002ec3c
    d220:	0002dd81 	.word	0x0002dd81
    d224:	0002ec51 	.word	0x0002ec51
    d228:	0002ec10 	.word	0x0002ec10
    d22c:	0002ec27 	.word	0x0002ec27
    d230:	0002ebcd 	.word	0x0002ebcd
    d234:	0002eb40 	.word	0x0002eb40

0000d238 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d238:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d23a:	6842      	ldr	r2, [r0, #4]
    d23c:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d23e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d242:	2a02      	cmp	r2, #2
	notify->result = res;
    d244:	6081      	str	r1, [r0, #8]
	switch (method) {
    d246:	d00a      	beq.n	d25e <sys_notify_finalize+0x26>
    d248:	2a03      	cmp	r2, #3
    d24a:	f04f 0100 	mov.w	r1, #0
    d24e:	d003      	beq.n	d258 <sys_notify_finalize+0x20>
    d250:	2a01      	cmp	r2, #1
    d252:	d10a      	bne.n	d26a <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d254:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d256:	e006      	b.n	d266 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d258:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d25a:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d25c:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d25e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d260:	2200      	movs	r2, #0
    d262:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d264:	b958      	cbnz	r0, d27e <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d266:	2000      	movs	r0, #0
    d268:	e7f8      	b.n	d25c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d26a:	4906      	ldr	r1, [pc, #24]	; (d284 <sys_notify_finalize+0x4c>)
    d26c:	4806      	ldr	r0, [pc, #24]	; (d288 <sys_notify_finalize+0x50>)
    d26e:	2345      	movs	r3, #69	; 0x45
    d270:	4a06      	ldr	r2, [pc, #24]	; (d28c <sys_notify_finalize+0x54>)
    d272:	f019 fd7e 	bl	26d72 <assert_print>
    d276:	2145      	movs	r1, #69	; 0x45
    d278:	4804      	ldr	r0, [pc, #16]	; (d28c <sys_notify_finalize+0x54>)
    d27a:	f019 fd73 	bl	26d64 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d27e:	f017 fc55 	bl	24b2c <z_impl_k_poll_signal_raise>
    d282:	e7f0      	b.n	d266 <sys_notify_finalize+0x2e>
    d284:	00033a12 	.word	0x00033a12
    d288:	0002dd81 	.word	0x0002dd81
    d28c:	0002ec69 	.word	0x0002ec69

0000d290 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    d290:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d292:	4c09      	ldr	r4, [pc, #36]	; (d2b8 <crc8_ccitt+0x28>)
    d294:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    d296:	4291      	cmp	r1, r2
    d298:	d100      	bne.n	d29c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    d29a:	bd10      	pop	{r4, pc}
		val ^= p[i];
    d29c:	f811 3b01 	ldrb.w	r3, [r1], #1
    d2a0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d2a2:	0903      	lsrs	r3, r0, #4
    d2a4:	5ce3      	ldrb	r3, [r4, r3]
    d2a6:	0100      	lsls	r0, r0, #4
    d2a8:	b2c0      	uxtb	r0, r0
    d2aa:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d2ac:	0918      	lsrs	r0, r3, #4
    d2ae:	5c20      	ldrb	r0, [r4, r0]
    d2b0:	011b      	lsls	r3, r3, #4
    d2b2:	b2db      	uxtb	r3, r3
    d2b4:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    d2b6:	e7ee      	b.n	d296 <crc8_ccitt+0x6>
    d2b8:	0002ec8c 	.word	0x0002ec8c

0000d2bc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2be:	4602      	mov	r2, r0
    d2c0:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d2c2:	270a      	movs	r7, #10
	size_t val = 0;
    d2c4:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d2c6:	4e07      	ldr	r6, [pc, #28]	; (d2e4 <extract_decimal+0x28>)
    d2c8:	460b      	mov	r3, r1
    d2ca:	781c      	ldrb	r4, [r3, #0]
    d2cc:	3101      	adds	r1, #1
    d2ce:	5d35      	ldrb	r5, [r6, r4]
    d2d0:	076d      	lsls	r5, r5, #29
    d2d2:	d401      	bmi.n	d2d8 <extract_decimal+0x1c>
	}
	*str = sp;
    d2d4:	6013      	str	r3, [r2, #0]
	return val;
}
    d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d2d8:	fb07 4300 	mla	r3, r7, r0, r4
    d2dc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d2e0:	e7f2      	b.n	d2c8 <extract_decimal+0xc>
    d2e2:	bf00      	nop
    d2e4:	00033a74 	.word	0x00033a74

0000d2e8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2ec:	4615      	mov	r5, r2
    d2ee:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d2f0:	78d3      	ldrb	r3, [r2, #3]
    d2f2:	4a22      	ldr	r2, [pc, #136]	; (d37c <encode_uint+0x94>)
	switch (specifier) {
    d2f4:	2b6f      	cmp	r3, #111	; 0x6f
    d2f6:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d2fa:	4680      	mov	r8, r0
    d2fc:	460f      	mov	r7, r1
    d2fe:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d302:	d029      	beq.n	d358 <encode_uint+0x70>
    d304:	d824      	bhi.n	d350 <encode_uint+0x68>
		return 10;
    d306:	2b58      	cmp	r3, #88	; 0x58
    d308:	bf0c      	ite	eq
    d30a:	2610      	moveq	r6, #16
    d30c:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d30e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d312:	4632      	mov	r2, r6
    d314:	2300      	movs	r3, #0
    d316:	4640      	mov	r0, r8
    d318:	4639      	mov	r1, r7
    d31a:	f7fb fde9 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d31e:	2a09      	cmp	r2, #9
    d320:	b2d4      	uxtb	r4, r2
    d322:	d81e      	bhi.n	d362 <encode_uint+0x7a>
    d324:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d326:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d328:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d32a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d32e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d332:	d301      	bcc.n	d338 <encode_uint+0x50>
    d334:	45d1      	cmp	r9, sl
    d336:	d811      	bhi.n	d35c <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d338:	782b      	ldrb	r3, [r5, #0]
    d33a:	069b      	lsls	r3, r3, #26
    d33c:	d505      	bpl.n	d34a <encode_uint+0x62>
		if (radix == 8) {
    d33e:	2e08      	cmp	r6, #8
    d340:	d115      	bne.n	d36e <encode_uint+0x86>
			conv->altform_0 = true;
    d342:	78ab      	ldrb	r3, [r5, #2]
    d344:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d348:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d34a:	4648      	mov	r0, r9
    d34c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d350:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d354:	2b70      	cmp	r3, #112	; 0x70
    d356:	e7d7      	b.n	d308 <encode_uint+0x20>
	switch (specifier) {
    d358:	2608      	movs	r6, #8
    d35a:	e7d8      	b.n	d30e <encode_uint+0x26>
		value /= radix;
    d35c:	4680      	mov	r8, r0
    d35e:	460f      	mov	r7, r1
    d360:	e7d7      	b.n	d312 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d362:	f1bb 0f01 	cmp.w	fp, #1
    d366:	bf0c      	ite	eq
    d368:	3437      	addeq	r4, #55	; 0x37
    d36a:	3457      	addne	r4, #87	; 0x57
    d36c:	e7db      	b.n	d326 <encode_uint+0x3e>
		} else if (radix == 16) {
    d36e:	2e10      	cmp	r6, #16
    d370:	d1eb      	bne.n	d34a <encode_uint+0x62>
			conv->altform_0c = true;
    d372:	78ab      	ldrb	r3, [r5, #2]
    d374:	f043 0310 	orr.w	r3, r3, #16
    d378:	e7e6      	b.n	d348 <encode_uint+0x60>
    d37a:	bf00      	nop
    d37c:	00033a74 	.word	0x00033a74

0000d380 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d384:	4682      	mov	sl, r0
    d386:	4617      	mov	r7, r2
    d388:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d38a:	2500      	movs	r5, #0
{
    d38c:	b097      	sub	sp, #92	; 0x5c
    d38e:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d390:	7838      	ldrb	r0, [r7, #0]
    d392:	b908      	cbnz	r0, d398 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d394:	4628      	mov	r0, r5
    d396:	e349      	b.n	da2c <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d398:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d39a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d39c:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d39e:	d006      	beq.n	d3ae <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d3a0:	9903      	ldr	r1, [sp, #12]
    d3a2:	47d0      	blx	sl
    d3a4:	2800      	cmp	r0, #0
    d3a6:	f2c0 8341 	blt.w	da2c <z_cbvprintf_impl+0x6ac>
    d3aa:	3501      	adds	r5, #1
		if (bps == NULL) {
    d3ac:	e1f0      	b.n	d790 <z_cbvprintf_impl+0x410>
		} state = {
    d3ae:	2218      	movs	r2, #24
    d3b0:	2100      	movs	r1, #0
    d3b2:	a810      	add	r0, sp, #64	; 0x40
    d3b4:	f01e fd3c 	bl	2be30 <memset>
	if (*sp == '%') {
    d3b8:	787b      	ldrb	r3, [r7, #1]
    d3ba:	2b25      	cmp	r3, #37	; 0x25
    d3bc:	f000 80a3 	beq.w	d506 <z_cbvprintf_impl+0x186>
    d3c0:	2300      	movs	r3, #0
    d3c2:	4698      	mov	r8, r3
    d3c4:	469e      	mov	lr, r3
    d3c6:	469c      	mov	ip, r3
    d3c8:	4618      	mov	r0, r3
    d3ca:	1c79      	adds	r1, r7, #1
    d3cc:	460e      	mov	r6, r1
		switch (*sp) {
    d3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
    d3d2:	2a2b      	cmp	r2, #43	; 0x2b
    d3d4:	f000 80c6 	beq.w	d564 <z_cbvprintf_impl+0x1e4>
    d3d8:	f200 80bd 	bhi.w	d556 <z_cbvprintf_impl+0x1d6>
    d3dc:	2a20      	cmp	r2, #32
    d3de:	f000 80c4 	beq.w	d56a <z_cbvprintf_impl+0x1ea>
    d3e2:	2a23      	cmp	r2, #35	; 0x23
    d3e4:	f000 80c4 	beq.w	d570 <z_cbvprintf_impl+0x1f0>
    d3e8:	b12b      	cbz	r3, d3f6 <z_cbvprintf_impl+0x76>
    d3ea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d3f2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d3f6:	f1b8 0f00 	cmp.w	r8, #0
    d3fa:	d005      	beq.n	d408 <z_cbvprintf_impl+0x88>
    d3fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d400:	f043 0320 	orr.w	r3, r3, #32
    d404:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d408:	f1be 0f00 	cmp.w	lr, #0
    d40c:	d005      	beq.n	d41a <z_cbvprintf_impl+0x9a>
    d40e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d412:	f043 0310 	orr.w	r3, r3, #16
    d416:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d41a:	f1bc 0f00 	cmp.w	ip, #0
    d41e:	d005      	beq.n	d42c <z_cbvprintf_impl+0xac>
    d420:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d424:	f043 0308 	orr.w	r3, r3, #8
    d428:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d42c:	b128      	cbz	r0, d43a <z_cbvprintf_impl+0xba>
    d42e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d432:	f043 0304 	orr.w	r3, r3, #4
    d436:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d43a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d43e:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d442:	2944      	cmp	r1, #68	; 0x44
    d444:	d103      	bne.n	d44e <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d446:	f36f 1386 	bfc	r3, #6, #1
    d44a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d44e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d452:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d458:	9609      	str	r6, [sp, #36]	; 0x24
    d45a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d45e:	f040 808c 	bne.w	d57a <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d462:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d466:	f043 0301 	orr.w	r3, r3, #1
    d46a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d46e:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d470:	781a      	ldrb	r2, [r3, #0]
    d472:	2a2e      	cmp	r2, #46	; 0x2e
    d474:	bf0c      	ite	eq
    d476:	2101      	moveq	r1, #1
    d478:	2100      	movne	r1, #0
    d47a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d47e:	f361 0241 	bfi	r2, r1, #1, #1
    d482:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d486:	d10c      	bne.n	d4a2 <z_cbvprintf_impl+0x122>
	++sp;
    d488:	1c5a      	adds	r2, r3, #1
    d48a:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d48c:	785a      	ldrb	r2, [r3, #1]
    d48e:	2a2a      	cmp	r2, #42	; 0x2a
    d490:	f040 8083 	bne.w	d59a <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d494:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d498:	3302      	adds	r3, #2
		conv->prec_star = true;
    d49a:	f042 0204 	orr.w	r2, r2, #4
    d49e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d4a2:	781a      	ldrb	r2, [r3, #0]
    d4a4:	2a6c      	cmp	r2, #108	; 0x6c
    d4a6:	f000 80a4 	beq.w	d5f2 <z_cbvprintf_impl+0x272>
    d4aa:	f200 8086 	bhi.w	d5ba <z_cbvprintf_impl+0x23a>
    d4ae:	2a68      	cmp	r2, #104	; 0x68
    d4b0:	f000 808c 	beq.w	d5cc <z_cbvprintf_impl+0x24c>
    d4b4:	2a6a      	cmp	r2, #106	; 0x6a
    d4b6:	f000 80a5 	beq.w	d604 <z_cbvprintf_impl+0x284>
    d4ba:	2a4c      	cmp	r2, #76	; 0x4c
    d4bc:	f000 80aa 	beq.w	d614 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d4c0:	461a      	mov	r2, r3
    d4c2:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d4c6:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d4c8:	9204      	str	r2, [sp, #16]
    d4ca:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d4ce:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d4d2:	f200 8117 	bhi.w	d704 <z_cbvprintf_impl+0x384>
    d4d6:	2b6d      	cmp	r3, #109	; 0x6d
    d4d8:	f200 80a9 	bhi.w	d62e <z_cbvprintf_impl+0x2ae>
    d4dc:	2b69      	cmp	r3, #105	; 0x69
    d4de:	f200 8111 	bhi.w	d704 <z_cbvprintf_impl+0x384>
    d4e2:	2b57      	cmp	r3, #87	; 0x57
    d4e4:	f200 80be 	bhi.w	d664 <z_cbvprintf_impl+0x2e4>
    d4e8:	2b41      	cmp	r3, #65	; 0x41
    d4ea:	d003      	beq.n	d4f4 <z_cbvprintf_impl+0x174>
    d4ec:	3b45      	subs	r3, #69	; 0x45
    d4ee:	2b02      	cmp	r3, #2
    d4f0:	f200 8108 	bhi.w	d704 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d4f4:	2204      	movs	r2, #4
    d4f6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d4fa:	f362 0302 	bfi	r3, r2, #0, #3
    d4fe:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d502:	2301      	movs	r3, #1
			break;
    d504:	e0ca      	b.n	d69c <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d506:	1cba      	adds	r2, r7, #2
    d508:	9204      	str	r2, [sp, #16]
    d50a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d50e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d512:	07da      	lsls	r2, r3, #31
    d514:	f140 80fd 	bpl.w	d712 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d518:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d51c:	f1b9 0f00 	cmp.w	r9, #0
    d520:	da07      	bge.n	d532 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d522:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d526:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d52a:	f042 0204 	orr.w	r2, r2, #4
    d52e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d532:	075e      	lsls	r6, r3, #29
    d534:	f140 80f6 	bpl.w	d724 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d538:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d53c:	f1bb 0f00 	cmp.w	fp, #0
    d540:	f280 80f5 	bge.w	d72e <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d544:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d548:	f36f 0341 	bfc	r3, #1, #1
    d54c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d550:	f04f 3bff 	mov.w	fp, #4294967295
    d554:	e0eb      	b.n	d72e <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d556:	2a2d      	cmp	r2, #45	; 0x2d
    d558:	d00d      	beq.n	d576 <z_cbvprintf_impl+0x1f6>
    d55a:	2a30      	cmp	r2, #48	; 0x30
    d55c:	f47f af44 	bne.w	d3e8 <z_cbvprintf_impl+0x68>
    d560:	2301      	movs	r3, #1
	} while (loop);
    d562:	e733      	b.n	d3cc <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d564:	f04f 0c01 	mov.w	ip, #1
    d568:	e730      	b.n	d3cc <z_cbvprintf_impl+0x4c>
    d56a:	f04f 0e01 	mov.w	lr, #1
    d56e:	e72d      	b.n	d3cc <z_cbvprintf_impl+0x4c>
    d570:	f04f 0801 	mov.w	r8, #1
    d574:	e72a      	b.n	d3cc <z_cbvprintf_impl+0x4c>
    d576:	2001      	movs	r0, #1
    d578:	e728      	b.n	d3cc <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d57a:	a809      	add	r0, sp, #36	; 0x24
    d57c:	f7ff fe9e 	bl	d2bc <extract_decimal>
	if (sp != wp) {
    d580:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d582:	42b3      	cmp	r3, r6
    d584:	f43f af74 	beq.w	d470 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d588:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d58c:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d58e:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d590:	f360 0241 	bfi	r2, r0, #1, #1
    d594:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d598:	e76a      	b.n	d470 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d59a:	a809      	add	r0, sp, #36	; 0x24
    d59c:	f7ff fe8e 	bl	d2bc <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d5a0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d5a4:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d5a6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d5aa:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d5ae:	f362 0341 	bfi	r3, r2, #1, #1
    d5b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5b8:	e773      	b.n	d4a2 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d5ba:	2a74      	cmp	r2, #116	; 0x74
    d5bc:	d026      	beq.n	d60c <z_cbvprintf_impl+0x28c>
    d5be:	2a7a      	cmp	r2, #122	; 0x7a
    d5c0:	f47f af7e 	bne.w	d4c0 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d5c4:	2106      	movs	r1, #6
    d5c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d5ca:	e00c      	b.n	d5e6 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d5cc:	785a      	ldrb	r2, [r3, #1]
    d5ce:	2a68      	cmp	r2, #104	; 0x68
    d5d0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d5d4:	d106      	bne.n	d5e4 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d5d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d5d8:	f361 02c6 	bfi	r2, r1, #3, #4
    d5dc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d5e0:	3302      	adds	r3, #2
    d5e2:	e76d      	b.n	d4c0 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d5e4:	2102      	movs	r1, #2
    d5e6:	f361 02c6 	bfi	r2, r1, #3, #4
    d5ea:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d5ee:	3301      	adds	r3, #1
    d5f0:	e766      	b.n	d4c0 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d5f2:	785a      	ldrb	r2, [r3, #1]
    d5f4:	2a6c      	cmp	r2, #108	; 0x6c
    d5f6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d5fa:	d101      	bne.n	d600 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d5fc:	2104      	movs	r1, #4
    d5fe:	e7eb      	b.n	d5d8 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d600:	2103      	movs	r1, #3
    d602:	e7f0      	b.n	d5e6 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d604:	2105      	movs	r1, #5
    d606:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d60a:	e7ec      	b.n	d5e6 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d60c:	2107      	movs	r1, #7
    d60e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d612:	e7e8      	b.n	d5e6 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d614:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d618:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d61c:	f022 0202 	bic.w	r2, r2, #2
    d620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d624:	f042 0202 	orr.w	r2, r2, #2
    d628:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d62c:	e7df      	b.n	d5ee <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d62e:	3b6e      	subs	r3, #110	; 0x6e
    d630:	b2d9      	uxtb	r1, r3
    d632:	2301      	movs	r3, #1
    d634:	408b      	lsls	r3, r1
    d636:	f240 4182 	movw	r1, #1154	; 0x482
    d63a:	420b      	tst	r3, r1
    d63c:	d138      	bne.n	d6b0 <z_cbvprintf_impl+0x330>
    d63e:	f013 0f24 	tst.w	r3, #36	; 0x24
    d642:	d152      	bne.n	d6ea <z_cbvprintf_impl+0x36a>
    d644:	07d8      	lsls	r0, r3, #31
    d646:	d55d      	bpl.n	d704 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d648:	2103      	movs	r1, #3
    d64a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d64e:	f361 0302 	bfi	r3, r1, #0, #3
    d652:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d656:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d65a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d65e:	424b      	negs	r3, r1
    d660:	414b      	adcs	r3, r1
    d662:	e01b      	b.n	d69c <z_cbvprintf_impl+0x31c>
    d664:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d666:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d66a:	b2c9      	uxtb	r1, r1
    d66c:	fa00 f101 	lsl.w	r1, r0, r1
    d670:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d674:	f47f af3e 	bne.w	d4f4 <z_cbvprintf_impl+0x174>
    d678:	f640 0601 	movw	r6, #2049	; 0x801
    d67c:	4231      	tst	r1, r6
    d67e:	d11d      	bne.n	d6bc <z_cbvprintf_impl+0x33c>
    d680:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d684:	d03e      	beq.n	d704 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d686:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d68a:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d68e:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d692:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d694:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d698:	d034      	beq.n	d704 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d69a:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d69c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d6a0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d6a4:	430b      	orrs	r3, r1
    d6a6:	f363 0241 	bfi	r2, r3, #1, #1
    d6aa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d6ae:	e72e      	b.n	d50e <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d6b0:	2102      	movs	r1, #2
    d6b2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d6b6:	f361 0302 	bfi	r3, r1, #0, #3
    d6ba:	e7e8      	b.n	d68e <z_cbvprintf_impl+0x30e>
    d6bc:	2002      	movs	r0, #2
    d6be:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d6c2:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d6c6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d6ca:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d6cc:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d6d0:	bf02      	ittt	eq
    d6d2:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d6d6:	f041 0101 	orreq.w	r1, r1, #1
    d6da:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d6de:	2b63      	cmp	r3, #99	; 0x63
    d6e0:	d1db      	bne.n	d69a <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d6e2:	1e13      	subs	r3, r2, #0
    d6e4:	bf18      	it	ne
    d6e6:	2301      	movne	r3, #1
    d6e8:	e7d8      	b.n	d69c <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d6ea:	2103      	movs	r1, #3
    d6ec:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d6f0:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d6f4:	f361 0302 	bfi	r3, r1, #0, #3
    d6f8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d6fc:	bf14      	ite	ne
    d6fe:	2301      	movne	r3, #1
    d700:	2300      	moveq	r3, #0
    d702:	e7cb      	b.n	d69c <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d704:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d708:	f043 0301 	orr.w	r3, r3, #1
    d70c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d710:	e7c3      	b.n	d69a <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d712:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d716:	2a00      	cmp	r2, #0
		int width = -1;
    d718:	bfac      	ite	ge
    d71a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d71e:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d722:	e706      	b.n	d532 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d724:	0798      	lsls	r0, r3, #30
    d726:	f57f af13 	bpl.w	d550 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d72a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d72e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d730:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d734:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d738:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d73c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d740:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d742:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d746:	d133      	bne.n	d7b0 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d748:	1ecb      	subs	r3, r1, #3
    d74a:	2b04      	cmp	r3, #4
    d74c:	d804      	bhi.n	d758 <z_cbvprintf_impl+0x3d8>
    d74e:	e8df f003 	tbb	[pc, r3]
    d752:	4621      	.short	0x4621
    d754:	2146      	.short	0x2146
    d756:	21          	.byte	0x21
    d757:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d758:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d75a:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d75c:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d760:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d764:	d11c      	bne.n	d7a0 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d766:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d76a:	17da      	asrs	r2, r3, #31
    d76c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d770:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d772:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d776:	f013 0603 	ands.w	r6, r3, #3
    d77a:	d050      	beq.n	d81e <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d77c:	463a      	mov	r2, r7
    d77e:	4650      	mov	r0, sl
    d780:	9b04      	ldr	r3, [sp, #16]
    d782:	9903      	ldr	r1, [sp, #12]
    d784:	f019 fad7 	bl	26d36 <outs>
    d788:	2800      	cmp	r0, #0
    d78a:	f2c0 814f 	blt.w	da2c <z_cbvprintf_impl+0x6ac>
    d78e:	4405      	add	r5, r0
			continue;
    d790:	9f04      	ldr	r7, [sp, #16]
    d792:	e5fd      	b.n	d390 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d794:	f854 3b04 	ldr.w	r3, [r4], #4
    d798:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d79a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d79e:	e7e8      	b.n	d772 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d7a0:	2902      	cmp	r1, #2
    d7a2:	d1e5      	bne.n	d770 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d7a4:	b21a      	sxth	r2, r3
    d7a6:	f343 33c0 	sbfx	r3, r3, #15, #1
    d7aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d7ae:	e7df      	b.n	d770 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d7b0:	2b02      	cmp	r3, #2
    d7b2:	d124      	bne.n	d7fe <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    d7b4:	1ecb      	subs	r3, r1, #3
    d7b6:	2b04      	cmp	r3, #4
    d7b8:	d804      	bhi.n	d7c4 <z_cbvprintf_impl+0x444>
    d7ba:	e8df f003 	tbb	[pc, r3]
    d7be:	1018      	.short	0x1018
    d7c0:	1810      	.short	0x1810
    d7c2:	18          	.byte	0x18
    d7c3:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d7c4:	2901      	cmp	r1, #1
    d7c6:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d7ca:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d7ce:	d014      	beq.n	d7fa <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    d7d0:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d7d2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d7d6:	d1cc      	bne.n	d772 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    d7d8:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d7da:	9310      	str	r3, [sp, #64]	; 0x40
    d7dc:	e7c9      	b.n	d772 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    d7de:	3407      	adds	r4, #7
    d7e0:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d7e4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d7e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d7ec:	e7c1      	b.n	d772 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    d7ee:	f854 3b04 	ldr.w	r3, [r4], #4
    d7f2:	9310      	str	r3, [sp, #64]	; 0x40
    d7f4:	2300      	movs	r3, #0
    d7f6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d7f8:	e7bb      	b.n	d772 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    d7fa:	b2db      	uxtb	r3, r3
    d7fc:	e7cd      	b.n	d79a <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    d7fe:	2b04      	cmp	r3, #4
    d800:	d108      	bne.n	d814 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    d802:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d804:	f024 0407 	bic.w	r4, r4, #7
    d808:	e9d4 2300 	ldrd	r2, r3, [r4]
    d80c:	3408      	adds	r4, #8
    d80e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d812:	e7ae      	b.n	d772 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d814:	2b03      	cmp	r3, #3
    d816:	d1ac      	bne.n	d772 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    d818:	f854 3b04 	ldr.w	r3, [r4], #4
    d81c:	e7dd      	b.n	d7da <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    d81e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d822:	2878      	cmp	r0, #120	; 0x78
    d824:	d8b4      	bhi.n	d790 <z_cbvprintf_impl+0x410>
    d826:	2862      	cmp	r0, #98	; 0x62
    d828:	d81c      	bhi.n	d864 <z_cbvprintf_impl+0x4e4>
    d82a:	2825      	cmp	r0, #37	; 0x25
    d82c:	f43f adb8 	beq.w	d3a0 <z_cbvprintf_impl+0x20>
    d830:	2858      	cmp	r0, #88	; 0x58
    d832:	d1ad      	bne.n	d790 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d834:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d838:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d83c:	9300      	str	r3, [sp, #0]
    d83e:	aa12      	add	r2, sp, #72	; 0x48
    d840:	ab0a      	add	r3, sp, #40	; 0x28
    d842:	f7ff fd51 	bl	d2e8 <encode_uint>
			if (precision >= 0) {
    d846:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d84a:	4607      	mov	r7, r0
			if (precision >= 0) {
    d84c:	f280 8097 	bge.w	d97e <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    d850:	2f00      	cmp	r7, #0
    d852:	d09d      	beq.n	d790 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d854:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d858:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    d85c:	2e00      	cmp	r6, #0
    d85e:	d04e      	beq.n	d8fe <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    d860:	3001      	adds	r0, #1
    d862:	e04c      	b.n	d8fe <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    d864:	3863      	subs	r0, #99	; 0x63
    d866:	2815      	cmp	r0, #21
    d868:	d892      	bhi.n	d790 <z_cbvprintf_impl+0x410>
    d86a:	a201      	add	r2, pc, #4	; (adr r2, d870 <z_cbvprintf_impl+0x4f0>)
    d86c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d870:	0000d8ef 	.word	0x0000d8ef
    d874:	0000d955 	.word	0x0000d955
    d878:	0000d791 	.word	0x0000d791
    d87c:	0000d791 	.word	0x0000d791
    d880:	0000d791 	.word	0x0000d791
    d884:	0000d791 	.word	0x0000d791
    d888:	0000d955 	.word	0x0000d955
    d88c:	0000d791 	.word	0x0000d791
    d890:	0000d791 	.word	0x0000d791
    d894:	0000d791 	.word	0x0000d791
    d898:	0000d791 	.word	0x0000d791
    d89c:	0000d9dd 	.word	0x0000d9dd
    d8a0:	0000d979 	.word	0x0000d979
    d8a4:	0000d99f 	.word	0x0000d99f
    d8a8:	0000d791 	.word	0x0000d791
    d8ac:	0000d791 	.word	0x0000d791
    d8b0:	0000d8c9 	.word	0x0000d8c9
    d8b4:	0000d791 	.word	0x0000d791
    d8b8:	0000d979 	.word	0x0000d979
    d8bc:	0000d791 	.word	0x0000d791
    d8c0:	0000d791 	.word	0x0000d791
    d8c4:	0000d979 	.word	0x0000d979
			if (precision >= 0) {
    d8c8:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    d8cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    d8ce:	db0a      	blt.n	d8e6 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    d8d0:	4659      	mov	r1, fp
    d8d2:	4638      	mov	r0, r7
    d8d4:	f01e fc01 	bl	2c0da <strnlen>
			bpe = bps + len;
    d8d8:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    d8dc:	2f00      	cmp	r7, #0
    d8de:	f43f af57 	beq.w	d790 <z_cbvprintf_impl+0x410>
		char sign = 0;
    d8e2:	2600      	movs	r6, #0
    d8e4:	e00b      	b.n	d8fe <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    d8e6:	4638      	mov	r0, r7
    d8e8:	f7fb fd3a 	bl	9360 <strlen>
    d8ec:	e7f4      	b.n	d8d8 <z_cbvprintf_impl+0x558>
		char sign = 0;
    d8ee:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    d8f0:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d8f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    d8f4:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d8f8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    d8fc:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    d8fe:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d902:	f013 0210 	ands.w	r2, r3, #16
    d906:	9205      	str	r2, [sp, #20]
    d908:	f000 8083 	beq.w	da12 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    d90c:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    d90e:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    d910:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    d914:	bf48      	it	mi
    d916:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    d918:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    d91a:	bf48      	it	mi
    d91c:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    d91e:	f1b9 0f00 	cmp.w	r9, #0
    d922:	f340 8090 	ble.w	da46 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    d926:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    d92a:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    d92e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d932:	0750      	lsls	r0, r2, #29
    d934:	9306      	str	r3, [sp, #24]
    d936:	f100 8086 	bmi.w	da46 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    d93a:	0651      	lsls	r1, r2, #25
    d93c:	d579      	bpl.n	da32 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    d93e:	b13e      	cbz	r6, d950 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    d940:	4630      	mov	r0, r6
    d942:	9903      	ldr	r1, [sp, #12]
    d944:	47d0      	blx	sl
    d946:	2800      	cmp	r0, #0
    d948:	db70      	blt.n	da2c <z_cbvprintf_impl+0x6ac>
    d94a:	9b06      	ldr	r3, [sp, #24]
    d94c:	3501      	adds	r5, #1
    d94e:	461e      	mov	r6, r3
					pad = '0';
    d950:	2230      	movs	r2, #48	; 0x30
    d952:	e06f      	b.n	da34 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    d954:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    d956:	bf5a      	itte	pl
    d958:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    d95c:	015e      	lslpl	r6, r3, #5
				sign = '+';
    d95e:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    d960:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    d964:	2b00      	cmp	r3, #0
    d966:	f6bf af65 	bge.w	d834 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    d96a:	4252      	negs	r2, r2
    d96c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    d970:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    d972:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d976:	e75d      	b.n	d834 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    d978:	2600      	movs	r6, #0
    d97a:	e75b      	b.n	d834 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    d97c:	2600      	movs	r6, #0
				conv->flag_zero = false;
    d97e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    d982:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d986:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    d988:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d98c:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    d98e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    d992:	f67f af5d 	bls.w	d850 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    d996:	ebab 0303 	sub.w	r3, fp, r3
    d99a:	9313      	str	r3, [sp, #76]	; 0x4c
    d99c:	e758      	b.n	d850 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    d99e:	9810      	ldr	r0, [sp, #64]	; 0x40
    d9a0:	b380      	cbz	r0, da04 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d9a2:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d9a6:	ab0a      	add	r3, sp, #40	; 0x28
    d9a8:	2100      	movs	r1, #0
    d9aa:	f8cd 8000 	str.w	r8, [sp]
    d9ae:	aa12      	add	r2, sp, #72	; 0x48
    d9b0:	f7ff fc9a 	bl	d2e8 <encode_uint>
				conv->altform_0c = true;
    d9b4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d9b8:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    d9bc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d9c0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d9c4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d9c8:	4607      	mov	r7, r0
				conv->altform_0c = true;
    d9ca:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d9ce:	dad5      	bge.n	d97c <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    d9d0:	2800      	cmp	r0, #0
    d9d2:	f43f aedd 	beq.w	d790 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d9d6:	eba8 0000 	sub.w	r0, r8, r0
    d9da:	e782      	b.n	d8e2 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    d9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    d9de:	2907      	cmp	r1, #7
    d9e0:	f63f aed6 	bhi.w	d790 <z_cbvprintf_impl+0x410>
    d9e4:	e8df f001 	tbb	[pc, r1]
    d9e8:	0c06040c 	.word	0x0c06040c
    d9ec:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    d9f0:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    d9f2:	e6cd      	b.n	d790 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    d9f4:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    d9f6:	e6cb      	b.n	d790 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    d9f8:	17ea      	asrs	r2, r5, #31
    d9fa:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    d9fe:	e6c7      	b.n	d790 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    da00:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    da02:	e6c5      	b.n	d790 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    da04:	f8df 80bc 	ldr.w	r8, [pc, #188]	; dac4 <z_cbvprintf_impl+0x744>
		char sign = 0;
    da08:	4606      	mov	r6, r0
    da0a:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    da0e:	2005      	movs	r0, #5
    da10:	e775      	b.n	d8fe <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    da12:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    da14:	bf48      	it	mi
    da16:	3001      	addmi	r0, #1
    da18:	e779      	b.n	d90e <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    da1a:	4610      	mov	r0, r2
    da1c:	9307      	str	r3, [sp, #28]
    da1e:	9206      	str	r2, [sp, #24]
    da20:	9903      	ldr	r1, [sp, #12]
    da22:	47d0      	blx	sl
    da24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    da28:	2800      	cmp	r0, #0
    da2a:	da04      	bge.n	da36 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    da2c:	b017      	add	sp, #92	; 0x5c
    da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    da32:	2220      	movs	r2, #32
					pad = '0';
    da34:	464b      	mov	r3, r9
				while (width-- > 0) {
    da36:	4619      	mov	r1, r3
    da38:	2900      	cmp	r1, #0
    da3a:	f103 33ff 	add.w	r3, r3, #4294967295
    da3e:	dcec      	bgt.n	da1a <z_cbvprintf_impl+0x69a>
    da40:	444d      	add	r5, r9
    da42:	4699      	mov	r9, r3
    da44:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    da46:	b12e      	cbz	r6, da54 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    da48:	4630      	mov	r0, r6
    da4a:	9903      	ldr	r1, [sp, #12]
    da4c:	47d0      	blx	sl
    da4e:	2800      	cmp	r0, #0
    da50:	dbec      	blt.n	da2c <z_cbvprintf_impl+0x6ac>
    da52:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    da54:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    da58:	06da      	lsls	r2, r3, #27
    da5a:	d401      	bmi.n	da60 <z_cbvprintf_impl+0x6e0>
    da5c:	071b      	lsls	r3, r3, #28
    da5e:	d505      	bpl.n	da6c <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    da60:	2030      	movs	r0, #48	; 0x30
    da62:	9903      	ldr	r1, [sp, #12]
    da64:	47d0      	blx	sl
    da66:	2800      	cmp	r0, #0
    da68:	dbe0      	blt.n	da2c <z_cbvprintf_impl+0x6ac>
    da6a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    da6c:	9b05      	ldr	r3, [sp, #20]
    da6e:	b133      	cbz	r3, da7e <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    da70:	9903      	ldr	r1, [sp, #12]
    da72:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    da76:	47d0      	blx	sl
    da78:	2800      	cmp	r0, #0
    da7a:	dbd7      	blt.n	da2c <z_cbvprintf_impl+0x6ac>
    da7c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    da7e:	44ab      	add	fp, r5
    da80:	e005      	b.n	da8e <z_cbvprintf_impl+0x70e>
				OUTC('0');
    da82:	2030      	movs	r0, #48	; 0x30
    da84:	9903      	ldr	r1, [sp, #12]
    da86:	47d0      	blx	sl
    da88:	2800      	cmp	r0, #0
    da8a:	dbcf      	blt.n	da2c <z_cbvprintf_impl+0x6ac>
    da8c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    da8e:	ebab 0305 	sub.w	r3, fp, r5
    da92:	2b00      	cmp	r3, #0
    da94:	dcf5      	bgt.n	da82 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    da96:	4643      	mov	r3, r8
    da98:	463a      	mov	r2, r7
    da9a:	4650      	mov	r0, sl
    da9c:	9903      	ldr	r1, [sp, #12]
    da9e:	f019 f94a 	bl	26d36 <outs>
    daa2:	2800      	cmp	r0, #0
    daa4:	dbc2      	blt.n	da2c <z_cbvprintf_impl+0x6ac>
    daa6:	4405      	add	r5, r0
		while (width > 0) {
    daa8:	44a9      	add	r9, r5
    daaa:	eba9 0305 	sub.w	r3, r9, r5
    daae:	2b00      	cmp	r3, #0
    dab0:	f77f ae6e 	ble.w	d790 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    dab4:	2020      	movs	r0, #32
    dab6:	9903      	ldr	r1, [sp, #12]
    dab8:	47d0      	blx	sl
    daba:	2800      	cmp	r0, #0
    dabc:	dbb6      	blt.n	da2c <z_cbvprintf_impl+0x6ac>
    dabe:	3501      	adds	r5, #1
			--width;
    dac0:	e7f3      	b.n	daaa <z_cbvprintf_impl+0x72a>
    dac2:	bf00      	nop
    dac4:	0002eca1 	.word	0x0002eca1

0000dac8 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    dac8:	b538      	push	{r3, r4, r5, lr}
    daca:	460d      	mov	r5, r1
    dacc:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    dace:	2220      	movs	r2, #32
    dad0:	2100      	movs	r1, #0
    dad2:	f01e f9ad 	bl	2be30 <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    dad6:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    dad8:	68eb      	ldr	r3, [r5, #12]
    dada:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    dadc:	68ab      	ldr	r3, [r5, #8]
    dade:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    dae0:	682b      	ldr	r3, [r5, #0]
    dae2:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    dae4:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    dae6:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    dae8:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    daea:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    daec:	b123      	cbz	r3, daf8 <mpsc_pbuf_init+0x30>
    daee:	1e59      	subs	r1, r3, #1
    daf0:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    daf2:	bf08      	it	eq
    daf4:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    daf8:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    dafa:	2201      	movs	r2, #1
    dafc:	2100      	movs	r1, #0
    dafe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    db02:	f01d ff99 	bl	2ba38 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    db06:	b148      	cbz	r0, db1c <mpsc_pbuf_init+0x54>
    db08:	4905      	ldr	r1, [pc, #20]	; (db20 <mpsc_pbuf_init+0x58>)
    db0a:	4806      	ldr	r0, [pc, #24]	; (db24 <mpsc_pbuf_init+0x5c>)
    db0c:	232e      	movs	r3, #46	; 0x2e
    db0e:	4a06      	ldr	r2, [pc, #24]	; (db28 <mpsc_pbuf_init+0x60>)
    db10:	f019 f92f 	bl	26d72 <assert_print>
    db14:	212e      	movs	r1, #46	; 0x2e
    db16:	4804      	ldr	r0, [pc, #16]	; (db28 <mpsc_pbuf_init+0x60>)
    db18:	f019 f924 	bl	26d64 <assert_post_action>
	ARG_UNUSED(err);
}
    db1c:	bd38      	pop	{r3, r4, r5, pc}
    db1e:	bf00      	nop
    db20:	0002ecc8 	.word	0x0002ecc8
    db24:	0002dd81 	.word	0x0002dd81
    db28:	0002eca2 	.word	0x0002eca2

0000db2c <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    db2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db30:	b087      	sub	sp, #28
    db32:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    db36:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    db38:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    db3a:	3b01      	subs	r3, #1
    db3c:	428b      	cmp	r3, r1
{
    db3e:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    db40:	f0c0 80a0 	bcc.w	dc84 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    db44:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    db46:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    db48:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    db4c:	f04f 0320 	mov.w	r3, #32
    db50:	f3ef 8b11 	mrs	fp, BASEPRI
    db54:	f383 8812 	msr	BASEPRI_MAX, r3
    db58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    db5c:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    db5e:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    db60:	f013 fdde 	bl	21720 <z_spin_lock_valid>
    db64:	b958      	cbnz	r0, db7e <mpsc_pbuf_alloc+0x52>
    db66:	2394      	movs	r3, #148	; 0x94
    db68:	4a49      	ldr	r2, [pc, #292]	; (dc90 <mpsc_pbuf_alloc+0x164>)
    db6a:	494a      	ldr	r1, [pc, #296]	; (dc94 <mpsc_pbuf_alloc+0x168>)
    db6c:	484a      	ldr	r0, [pc, #296]	; (dc98 <mpsc_pbuf_alloc+0x16c>)
    db6e:	f019 f900 	bl	26d72 <assert_print>
    db72:	4629      	mov	r1, r5
    db74:	4849      	ldr	r0, [pc, #292]	; (dc9c <mpsc_pbuf_alloc+0x170>)
    db76:	f019 f8fc 	bl	26d72 <assert_print>
    db7a:	2194      	movs	r1, #148	; 0x94
    db7c:	e050      	b.n	dc20 <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    db7e:	4628      	mov	r0, r5
    db80:	f013 fdea 	bl	21758 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    db84:	a905      	add	r1, sp, #20
    db86:	4620      	mov	r0, r4
    db88:	f019 f900 	bl	26d8c <free_space>

		if (free_wlen >= wlen) {
    db8c:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    db8e:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    db90:	42b9      	cmp	r1, r7
    db92:	d328      	bcc.n	dbe6 <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    db94:	6822      	ldr	r2, [r4, #0]
			item =
    db96:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    db98:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    db9a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    db9e:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    dba2:	f021 0103 	bic.w	r1, r1, #3
    dba6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    dbaa:	6821      	ldr	r1, [r4, #0]
    dbac:	463a      	mov	r2, r7
    dbae:	f019 f90f 	bl	26dd0 <idx_inc>
		cont = false;
    dbb2:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    dbb6:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dbb8:	4628      	mov	r0, r5
    dbba:	f013 fdbf 	bl	2173c <z_spin_unlock_valid>
    dbbe:	b320      	cbz	r0, dc0a <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    dbc0:	f389 8811 	msr	BASEPRI, r9
    dbc4:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    dbc8:	f1b8 0f00 	cmp.w	r8, #0
    dbcc:	d05c      	beq.n	dc88 <mpsc_pbuf_alloc+0x15c>
    dbce:	b146      	cbz	r6, dbe2 <mpsc_pbuf_alloc+0xb6>
    dbd0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dbd4:	2b00      	cmp	r3, #0
    dbd6:	d0b9      	beq.n	db4c <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    dbd8:	69a3      	ldr	r3, [r4, #24]
    dbda:	b113      	cbz	r3, dbe2 <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    dbdc:	4631      	mov	r1, r6
    dbde:	4620      	mov	r0, r4
    dbe0:	4798      	blx	r3
{
    dbe2:	2600      	movs	r6, #0
    dbe4:	e7b2      	b.n	db4c <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    dbe6:	b118      	cbz	r0, dbf0 <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    dbe8:	4620      	mov	r0, r4
    dbea:	f019 f8ff 	bl	26dec <add_skip_item>
			cont = true;
    dbee:	e7e3      	b.n	dbb8 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    dbf0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    dbf4:	4313      	orrs	r3, r2
    dbf6:	d036      	beq.n	dc66 <mpsc_pbuf_alloc+0x13a>
    dbf8:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    dbfa:	f01d fecc 	bl	2b996 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    dbfe:	9903      	ldr	r1, [sp, #12]
    dc00:	bb88      	cbnz	r0, dc66 <mpsc_pbuf_alloc+0x13a>
    dc02:	4628      	mov	r0, r5
    dc04:	f013 fd9a 	bl	2173c <z_spin_unlock_valid>
    dc08:	b968      	cbnz	r0, dc26 <mpsc_pbuf_alloc+0xfa>
    dc0a:	23c2      	movs	r3, #194	; 0xc2
    dc0c:	4a20      	ldr	r2, [pc, #128]	; (dc90 <mpsc_pbuf_alloc+0x164>)
    dc0e:	4924      	ldr	r1, [pc, #144]	; (dca0 <mpsc_pbuf_alloc+0x174>)
    dc10:	4821      	ldr	r0, [pc, #132]	; (dc98 <mpsc_pbuf_alloc+0x16c>)
    dc12:	f019 f8ae 	bl	26d72 <assert_print>
    dc16:	4629      	mov	r1, r5
    dc18:	4822      	ldr	r0, [pc, #136]	; (dca4 <mpsc_pbuf_alloc+0x178>)
    dc1a:	f019 f8aa 	bl	26d72 <assert_print>
    dc1e:	21c2      	movs	r1, #194	; 0xc2
    dc20:	481b      	ldr	r0, [pc, #108]	; (dc90 <mpsc_pbuf_alloc+0x164>)
    dc22:	f019 f89f 	bl	26d64 <assert_post_action>
    dc26:	f38b 8811 	msr	BASEPRI, fp
    dc2a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    dc2e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dc32:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    dc36:	f014 f86f 	bl	21d18 <z_impl_k_sem_take>
    dc3a:	4680      	mov	r8, r0
	__asm__ volatile(
    dc3c:	f04f 0320 	mov.w	r3, #32
    dc40:	f3ef 8911 	mrs	r9, BASEPRI
    dc44:	f383 8812 	msr	BASEPRI_MAX, r3
    dc48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc4c:	4628      	mov	r0, r5
    dc4e:	f013 fd67 	bl	21720 <z_spin_lock_valid>
    dc52:	2800      	cmp	r0, #0
    dc54:	d087      	beq.n	db66 <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    dc56:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    dc5a:	4628      	mov	r0, r5
    dc5c:	f013 fd7c 	bl	21758 <z_spin_lock_set_owner>
    dc60:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dc64:	e7a8      	b.n	dbb8 <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    dc66:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    dc68:	4620      	mov	r0, r4
    dc6a:	f10d 0313 	add.w	r3, sp, #19
    dc6e:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dc72:	f019 f8de 	bl	26e32 <drop_item_locked>
			cont = dropped_item != NULL;
    dc76:	f1b0 0800 	subs.w	r8, r0, #0
    dc7a:	4606      	mov	r6, r0
    dc7c:	bf18      	it	ne
    dc7e:	f04f 0801 	movne.w	r8, #1
    dc82:	e799      	b.n	dbb8 <mpsc_pbuf_alloc+0x8c>
		return NULL;
    dc84:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    dc88:	4650      	mov	r0, sl
    dc8a:	b007      	add	sp, #28
    dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc90:	0002ebe3 	.word	0x0002ebe3
    dc94:	0002ec3c 	.word	0x0002ec3c
    dc98:	0002dd81 	.word	0x0002dd81
    dc9c:	0002ec51 	.word	0x0002ec51
    dca0:	0002ec10 	.word	0x0002ec10
    dca4:	0002ec27 	.word	0x0002ec27

0000dca8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcac:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    dcae:	69c3      	ldr	r3, [r0, #28]
    dcb0:	4608      	mov	r0, r1
{
    dcb2:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    dcb4:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    dcb6:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    dcba:	4607      	mov	r7, r0
    dcbc:	f04f 0320 	mov.w	r3, #32
    dcc0:	f3ef 8811 	mrs	r8, BASEPRI
    dcc4:	f383 8812 	msr	BASEPRI_MAX, r3
    dcc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dccc:	4628      	mov	r0, r5
    dcce:	f013 fd27 	bl	21720 <z_spin_lock_valid>
    dcd2:	b968      	cbnz	r0, dcf0 <mpsc_pbuf_commit+0x48>
    dcd4:	2394      	movs	r3, #148	; 0x94
    dcd6:	4a19      	ldr	r2, [pc, #100]	; (dd3c <mpsc_pbuf_commit+0x94>)
    dcd8:	4919      	ldr	r1, [pc, #100]	; (dd40 <mpsc_pbuf_commit+0x98>)
    dcda:	481a      	ldr	r0, [pc, #104]	; (dd44 <mpsc_pbuf_commit+0x9c>)
    dcdc:	f019 f849 	bl	26d72 <assert_print>
    dce0:	4629      	mov	r1, r5
    dce2:	4819      	ldr	r0, [pc, #100]	; (dd48 <mpsc_pbuf_commit+0xa0>)
    dce4:	f019 f845 	bl	26d72 <assert_print>
    dce8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dcea:	4814      	ldr	r0, [pc, #80]	; (dd3c <mpsc_pbuf_commit+0x94>)
    dcec:	f019 f83a 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
    dcf0:	4628      	mov	r0, r5
    dcf2:	f013 fd31 	bl	21758 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    dcf6:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dcf8:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    dcfa:	f043 0301 	orr.w	r3, r3, #1
    dcfe:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dd00:	6861      	ldr	r1, [r4, #4]
    dd02:	4620      	mov	r0, r4
    dd04:	f019 f864 	bl	26dd0 <idx_inc>
    dd08:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    dd0a:	4620      	mov	r0, r4
    dd0c:	f019 f884 	bl	26e18 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd10:	4628      	mov	r0, r5
    dd12:	f013 fd13 	bl	2173c <z_spin_unlock_valid>
    dd16:	b958      	cbnz	r0, dd30 <mpsc_pbuf_commit+0x88>
    dd18:	23c2      	movs	r3, #194	; 0xc2
    dd1a:	4a08      	ldr	r2, [pc, #32]	; (dd3c <mpsc_pbuf_commit+0x94>)
    dd1c:	490b      	ldr	r1, [pc, #44]	; (dd4c <mpsc_pbuf_commit+0xa4>)
    dd1e:	4809      	ldr	r0, [pc, #36]	; (dd44 <mpsc_pbuf_commit+0x9c>)
    dd20:	f019 f827 	bl	26d72 <assert_print>
    dd24:	4629      	mov	r1, r5
    dd26:	480a      	ldr	r0, [pc, #40]	; (dd50 <mpsc_pbuf_commit+0xa8>)
    dd28:	f019 f823 	bl	26d72 <assert_print>
    dd2c:	21c2      	movs	r1, #194	; 0xc2
    dd2e:	e7dc      	b.n	dcea <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    dd30:	f388 8811 	msr	BASEPRI, r8
    dd34:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    dd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd3c:	0002ebe3 	.word	0x0002ebe3
    dd40:	0002ec3c 	.word	0x0002ec3c
    dd44:	0002dd81 	.word	0x0002dd81
    dd48:	0002ec51 	.word	0x0002ec51
    dd4c:	0002ec10 	.word	0x0002ec10
    dd50:	0002ec27 	.word	0x0002ec27

0000dd54 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    dd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd58:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    dd5a:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    dd5e:	f04f 0320 	mov.w	r3, #32
    dd62:	f3ef 8811 	mrs	r8, BASEPRI
    dd66:	f383 8812 	msr	BASEPRI_MAX, r3
    dd6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dd6e:	4638      	mov	r0, r7
    dd70:	f013 fcd6 	bl	21720 <z_spin_lock_valid>
    dd74:	4605      	mov	r5, r0
    dd76:	b968      	cbnz	r0, dd94 <mpsc_pbuf_claim+0x40>
    dd78:	2394      	movs	r3, #148	; 0x94
    dd7a:	4a33      	ldr	r2, [pc, #204]	; (de48 <mpsc_pbuf_claim+0xf4>)
    dd7c:	4933      	ldr	r1, [pc, #204]	; (de4c <mpsc_pbuf_claim+0xf8>)
    dd7e:	4834      	ldr	r0, [pc, #208]	; (de50 <mpsc_pbuf_claim+0xfc>)
    dd80:	f018 fff7 	bl	26d72 <assert_print>
    dd84:	4639      	mov	r1, r7
    dd86:	4833      	ldr	r0, [pc, #204]	; (de54 <mpsc_pbuf_claim+0x100>)
    dd88:	f018 fff3 	bl	26d72 <assert_print>
    dd8c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd8e:	482e      	ldr	r0, [pc, #184]	; (de48 <mpsc_pbuf_claim+0xf4>)
    dd90:	f018 ffe8 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
    dd94:	4638      	mov	r0, r7
    dd96:	f013 fcdf 	bl	21758 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    dd9a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    dd9e:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    dda0:	bf88      	it	hi
    dda2:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    dda4:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    dda6:	2b00      	cmp	r3, #0
    dda8:	d03f      	beq.n	de2a <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    ddaa:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    ddac:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    ddb0:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    ddb4:	f013 0003 	ands.w	r0, r3, #3
    ddb8:	d03a      	beq.n	de30 <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    ddba:	2802      	cmp	r0, #2
    ddbc:	d103      	bne.n	ddc6 <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    ddbe:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    ddc2:	08b6      	lsrs	r6, r6, #2
    ddc4:	d105      	bne.n	ddd2 <mpsc_pbuf_claim+0x7e>
    ddc6:	07d8      	lsls	r0, r3, #31
    ddc8:	d41f      	bmi.n	de0a <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    ddca:	4648      	mov	r0, r9
    ddcc:	69e3      	ldr	r3, [r4, #28]
    ddce:	4798      	blx	r3
    ddd0:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    ddd2:	68a1      	ldr	r1, [r4, #8]
    ddd4:	4632      	mov	r2, r6
    ddd6:	4620      	mov	r0, r4
    ddd8:	f018 fffa 	bl	26dd0 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    dddc:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    ddde:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    dde0:	4632      	mov	r2, r6
    dde2:	4620      	mov	r0, r4
    dde4:	f018 fff4 	bl	26dd0 <idx_inc>
				buffer->rd_idx =
    dde8:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ddea:	4638      	mov	r0, r7
    ddec:	f013 fca6 	bl	2173c <z_spin_unlock_valid>
    ddf0:	bb00      	cbnz	r0, de34 <mpsc_pbuf_claim+0xe0>
    ddf2:	23c2      	movs	r3, #194	; 0xc2
    ddf4:	4a14      	ldr	r2, [pc, #80]	; (de48 <mpsc_pbuf_claim+0xf4>)
    ddf6:	4918      	ldr	r1, [pc, #96]	; (de58 <mpsc_pbuf_claim+0x104>)
    ddf8:	4815      	ldr	r0, [pc, #84]	; (de50 <mpsc_pbuf_claim+0xfc>)
    ddfa:	f018 ffba 	bl	26d72 <assert_print>
    ddfe:	4639      	mov	r1, r7
    de00:	4816      	ldr	r0, [pc, #88]	; (de5c <mpsc_pbuf_claim+0x108>)
    de02:	f018 ffb6 	bl	26d72 <assert_print>
    de06:	21c2      	movs	r1, #194	; 0xc2
    de08:	e7c1      	b.n	dd8e <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    de0a:	f043 0302 	orr.w	r3, r3, #2
    de0e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    de12:	69e3      	ldr	r3, [r4, #28]
    de14:	4648      	mov	r0, r9
    de16:	68a5      	ldr	r5, [r4, #8]
    de18:	4798      	blx	r3
    de1a:	4629      	mov	r1, r5
    de1c:	4602      	mov	r2, r0
    de1e:	4620      	mov	r0, r4
    de20:	f018 ffd6 	bl	26dd0 <idx_inc>
		cont = false;
    de24:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    de26:	60a0      	str	r0, [r4, #8]
    de28:	e7df      	b.n	ddea <mpsc_pbuf_claim+0x96>
		cont = false;
    de2a:	461d      	mov	r5, r3
			item = NULL;
    de2c:	46a9      	mov	r9, r5
    de2e:	e7dc      	b.n	ddea <mpsc_pbuf_claim+0x96>
		cont = false;
    de30:	4605      	mov	r5, r0
    de32:	e7fb      	b.n	de2c <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    de34:	f388 8811 	msr	BASEPRI, r8
    de38:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    de3c:	2d00      	cmp	r5, #0
    de3e:	d18e      	bne.n	dd5e <mpsc_pbuf_claim+0xa>

	return item;
}
    de40:	4648      	mov	r0, r9
    de42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    de46:	bf00      	nop
    de48:	0002ebe3 	.word	0x0002ebe3
    de4c:	0002ec3c 	.word	0x0002ec3c
    de50:	0002dd81 	.word	0x0002dd81
    de54:	0002ec51 	.word	0x0002ec51
    de58:	0002ec10 	.word	0x0002ec10
    de5c:	0002ec27 	.word	0x0002ec27

0000de60 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de64:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    de66:	69c3      	ldr	r3, [r0, #28]
    de68:	4608      	mov	r0, r1
{
    de6a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    de6c:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    de6e:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    de72:	4607      	mov	r7, r0
	__asm__ volatile(
    de74:	f04f 0320 	mov.w	r3, #32
    de78:	f3ef 8811 	mrs	r8, BASEPRI
    de7c:	f383 8812 	msr	BASEPRI_MAX, r3
    de80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    de84:	4630      	mov	r0, r6
    de86:	f013 fc4b 	bl	21720 <z_spin_lock_valid>
    de8a:	b968      	cbnz	r0, dea8 <mpsc_pbuf_free+0x48>
    de8c:	2394      	movs	r3, #148	; 0x94
    de8e:	4a23      	ldr	r2, [pc, #140]	; (df1c <mpsc_pbuf_free+0xbc>)
    de90:	4923      	ldr	r1, [pc, #140]	; (df20 <mpsc_pbuf_free+0xc0>)
    de92:	4824      	ldr	r0, [pc, #144]	; (df24 <mpsc_pbuf_free+0xc4>)
    de94:	f018 ff6d 	bl	26d72 <assert_print>
    de98:	4631      	mov	r1, r6
    de9a:	4823      	ldr	r0, [pc, #140]	; (df28 <mpsc_pbuf_free+0xc8>)
    de9c:	f018 ff69 	bl	26d72 <assert_print>
    dea0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dea2:	481e      	ldr	r0, [pc, #120]	; (df1c <mpsc_pbuf_free+0xbc>)
    dea4:	f018 ff5e 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
    dea8:	4630      	mov	r0, r6
    deaa:	f013 fc55 	bl	21758 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    deae:	782b      	ldrb	r3, [r5, #0]
    deb0:	f36f 0300 	bfc	r3, #0, #1
    deb4:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    deb6:	6923      	ldr	r3, [r4, #16]
    deb8:	079b      	lsls	r3, r3, #30
    deba:	d505      	bpl.n	dec8 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    debc:	68e2      	ldr	r2, [r4, #12]
    debe:	6a23      	ldr	r3, [r4, #32]
    dec0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    dec4:	429d      	cmp	r5, r3
    dec6:	d119      	bne.n	defc <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    dec8:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    deca:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    decc:	f36f 0341 	bfc	r3, #1, #1
    ded0:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ded2:	68e1      	ldr	r1, [r4, #12]
    ded4:	4620      	mov	r0, r4
    ded6:	f018 ff7b 	bl	26dd0 <idx_inc>
    deda:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dedc:	4630      	mov	r0, r6
    dede:	f013 fc2d 	bl	2173c <z_spin_unlock_valid>
    dee2:	b980      	cbnz	r0, df06 <mpsc_pbuf_free+0xa6>
    dee4:	23c2      	movs	r3, #194	; 0xc2
    dee6:	4a0d      	ldr	r2, [pc, #52]	; (df1c <mpsc_pbuf_free+0xbc>)
    dee8:	4910      	ldr	r1, [pc, #64]	; (df2c <mpsc_pbuf_free+0xcc>)
    deea:	480e      	ldr	r0, [pc, #56]	; (df24 <mpsc_pbuf_free+0xc4>)
    deec:	f018 ff41 	bl	26d72 <assert_print>
    def0:	4631      	mov	r1, r6
    def2:	480f      	ldr	r0, [pc, #60]	; (df30 <mpsc_pbuf_free+0xd0>)
    def4:	f018 ff3d 	bl	26d72 <assert_print>
    def8:	21c2      	movs	r1, #194	; 0xc2
    defa:	e7d2      	b.n	dea2 <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    defc:	682b      	ldr	r3, [r5, #0]
    defe:	f367 039f 	bfi	r3, r7, #2, #30
    df02:	602b      	str	r3, [r5, #0]
    df04:	e7ea      	b.n	dedc <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    df06:	f388 8811 	msr	BASEPRI, r8
    df0a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    df0e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    df12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    df16:	f013 bebb 	b.w	21c90 <z_impl_k_sem_give>
    df1a:	bf00      	nop
    df1c:	0002ebe3 	.word	0x0002ebe3
    df20:	0002ec3c 	.word	0x0002ec3c
    df24:	0002dd81 	.word	0x0002dd81
    df28:	0002ec51 	.word	0x0002ec51
    df2c:	0002ec10 	.word	0x0002ec10
    df30:	0002ec27 	.word	0x0002ec27

0000df34 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    df34:	b148      	cbz	r0, df4a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    df36:	4b05      	ldr	r3, [pc, #20]	; (df4c <arch_busy_wait+0x18>)
    df38:	4a05      	ldr	r2, [pc, #20]	; (df50 <arch_busy_wait+0x1c>)
    df3a:	681b      	ldr	r3, [r3, #0]
    df3c:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    df40:	4358      	muls	r0, r3
    df42:	4b04      	ldr	r3, [pc, #16]	; (df54 <arch_busy_wait+0x20>)
    df44:	f043 0301 	orr.w	r3, r3, #1
    df48:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    df4a:	4770      	bx	lr
    df4c:	20008694 	.word	0x20008694
    df50:	000f4240 	.word	0x000f4240
    df54:	0002cf10 	.word	0x0002cf10

0000df58 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    df58:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    df5a:	b570      	push	{r4, r5, r6, lr}
    df5c:	4605      	mov	r5, r0
    df5e:	461e      	mov	r6, r3
    df60:	4608      	mov	r0, r1
    df62:	d90b      	bls.n	df7c <ppi_ipc_to_rtc.isra.0+0x24>
    df64:	491d      	ldr	r1, [pc, #116]	; (dfdc <ppi_ipc_to_rtc.isra.0+0x84>)
    df66:	481e      	ldr	r0, [pc, #120]	; (dfe0 <ppi_ipc_to_rtc.isra.0+0x88>)
    df68:	f240 13e7 	movw	r3, #487	; 0x1e7
    df6c:	4a1d      	ldr	r2, [pc, #116]	; (dfe4 <ppi_ipc_to_rtc.isra.0+0x8c>)
    df6e:	f018 ff00 	bl	26d72 <assert_print>
    df72:	f240 11e7 	movw	r1, #487	; 0x1e7
    df76:	481b      	ldr	r0, [pc, #108]	; (dfe4 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    df78:	f018 fef4 	bl	26d64 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    df7c:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    df7e:	f00f feff 	bl	1dd80 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    df82:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    df86:	b1ae      	cbz	r6, dfb4 <ppi_ipc_to_rtc.isra.0+0x5c>
    df88:	b950      	cbnz	r0, dfa0 <ppi_ipc_to_rtc.isra.0+0x48>
    df8a:	4917      	ldr	r1, [pc, #92]	; (dfe8 <ppi_ipc_to_rtc.isra.0+0x90>)
    df8c:	f240 234e 	movw	r3, #590	; 0x24e
    df90:	4a16      	ldr	r2, [pc, #88]	; (dfec <ppi_ipc_to_rtc.isra.0+0x94>)
    df92:	4813      	ldr	r0, [pc, #76]	; (dfe0 <ppi_ipc_to_rtc.isra.0+0x88>)
    df94:	f018 feed 	bl	26d72 <assert_print>
    df98:	f240 214e 	movw	r1, #590	; 0x24e
    df9c:	4813      	ldr	r0, [pc, #76]	; (dfec <ppi_ipc_to_rtc.isra.0+0x94>)
    df9e:	e7eb      	b.n	df78 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    dfa0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dfa4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    dfa8:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    dfac:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    dfb0:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    dfb2:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    dfb4:	b948      	cbnz	r0, dfca <ppi_ipc_to_rtc.isra.0+0x72>
    dfb6:	490c      	ldr	r1, [pc, #48]	; (dfe8 <ppi_ipc_to_rtc.isra.0+0x90>)
    dfb8:	f240 2363 	movw	r3, #611	; 0x263
    dfbc:	4a0b      	ldr	r2, [pc, #44]	; (dfec <ppi_ipc_to_rtc.isra.0+0x94>)
    dfbe:	4808      	ldr	r0, [pc, #32]	; (dfe0 <ppi_ipc_to_rtc.isra.0+0x88>)
    dfc0:	f018 fed7 	bl	26d72 <assert_print>
    dfc4:	f240 2163 	movw	r1, #611	; 0x263
    dfc8:	e7e8      	b.n	df9c <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    dfca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    dfce:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    dfd2:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    dfd6:	6016      	str	r6, [r2, #0]
    dfd8:	e7eb      	b.n	dfb2 <ppi_ipc_to_rtc.isra.0+0x5a>
    dfda:	bf00      	nop
    dfdc:	0002ed07 	.word	0x0002ed07
    dfe0:	0002dd81 	.word	0x0002dd81
    dfe4:	0002ecd5 	.word	0x0002ecd5
    dfe8:	0002ed4a 	.word	0x0002ed4a
    dfec:	0002ed12 	.word	0x0002ed12

0000dff0 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dff2:	b083      	sub	sp, #12
    dff4:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    dff6:	1d38      	adds	r0, r7, #4
    dff8:	f010 fd6a 	bl	1ead0 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    dffc:	4b24      	ldr	r3, [pc, #144]	; (e090 <sync_rtc_setup+0xa0>)
    dffe:	4298      	cmp	r0, r3
    e000:	d143      	bne.n	e08a <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    e002:	f010 f8b1 	bl	1e168 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    e006:	1e04      	subs	r4, r0, #0
    e008:	da13      	bge.n	e032 <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    e00a:	7938      	ldrb	r0, [r7, #4]
    e00c:	f010 fd66 	bl	1eadc <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    e010:	466d      	mov	r5, sp
    e012:	b088      	sub	sp, #32
    e014:	466a      	mov	r2, sp
    e016:	4b1f      	ldr	r3, [pc, #124]	; (e094 <sync_rtc_setup+0xa4>)
    e018:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e01c:	2303      	movs	r3, #3
    e01e:	f842 3f10 	str.w	r3, [r2, #16]!
    e022:	2300      	movs	r3, #0
    e024:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e028:	481b      	ldr	r0, [pc, #108]	; (e098 <sync_rtc_setup+0xa8>)
    e02a:	f000 fc93 	bl	e954 <z_impl_z_log_msg_static_create>
    e02e:	46ad      	mov	sp, r5
	}

	return rv;
    e030:	e027      	b.n	e082 <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    e032:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    e036:	4d19      	ldr	r5, [pc, #100]	; (e09c <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    e038:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    e03a:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    e03c:	80fb      	strh	r3, [r7, #6]
    e03e:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    e040:	687b      	ldr	r3, [r7, #4]
    e042:	b914      	cbnz	r4, e04a <sync_rtc_setup+0x5a>
		return -ENOSYS;
    e044:	f06f 0457 	mvn.w	r4, #87	; 0x57
    e048:	e7e2      	b.n	e010 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    e04a:	2108      	movs	r1, #8
    e04c:	4628      	mov	r0, r5
    e04e:	4a14      	ldr	r2, [pc, #80]	; (e0a0 <sync_rtc_setup+0xb0>)
    e050:	47a0      	blx	r4
	if (err < 0) {
    e052:	1e04      	subs	r4, r0, #0
    e054:	dbdc      	blt.n	e010 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    e056:	6933      	ldr	r3, [r6, #16]
    e058:	2b00      	cmp	r3, #0
    e05a:	d0f3      	beq.n	e044 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    e05c:	2201      	movs	r2, #1
    e05e:	2108      	movs	r1, #8
    e060:	4628      	mov	r0, r5
    e062:	4798      	blx	r3
	if (rv < 0) {
    e064:	1e04      	subs	r4, r0, #0
    e066:	dbd3      	blt.n	e010 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    e068:	2301      	movs	r3, #1
    e06a:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    e06c:	4a0d      	ldr	r2, [pc, #52]	; (e0a4 <sync_rtc_setup+0xb4>)
    e06e:	fa03 f100 	lsl.w	r1, r3, r0
    e072:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    e076:	79fa      	ldrb	r2, [r7, #7]
    e078:	7979      	ldrb	r1, [r7, #5]
    e07a:	f7ff ff6d 	bl	df58 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    e07e:	2c00      	cmp	r4, #0
    e080:	d1c6      	bne.n	e010 <sync_rtc_setup+0x20>
}
    e082:	4620      	mov	r0, r4
    e084:	370c      	adds	r7, #12
    e086:	46bd      	mov	sp, r7
    e088:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    e08a:	f06f 0412 	mvn.w	r4, #18
    e08e:	e7bf      	b.n	e010 <sync_rtc_setup+0x20>
    e090:	0bad0000 	.word	0x0bad0000
    e094:	0002ed4e 	.word	0x0002ed4e
    e098:	0002cdc0 	.word	0x0002cdc0
    e09c:	0002c7f8 	.word	0x0002c7f8
    e0a0:	0000e159 	.word	0x0000e159
    e0a4:	40017000 	.word	0x40017000

0000e0a8 <rtc_cb>:
{
    e0a8:	b570      	push	{r4, r5, r6, lr}
    e0aa:	9e04      	ldr	r6, [sp, #16]
    e0ac:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    e0b0:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    e0b2:	f3c6 2607 	ubfx	r6, r6, #8, #8
    e0b6:	4630      	mov	r0, r6
    e0b8:	f00f fe48 	bl	1dd4c <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    e0bc:	2c0f      	cmp	r4, #15
    e0be:	d90b      	bls.n	e0d8 <rtc_cb+0x30>
    e0c0:	491b      	ldr	r1, [pc, #108]	; (e130 <rtc_cb+0x88>)
    e0c2:	481c      	ldr	r0, [pc, #112]	; (e134 <rtc_cb+0x8c>)
    e0c4:	f240 13e1 	movw	r3, #481	; 0x1e1
    e0c8:	4a1b      	ldr	r2, [pc, #108]	; (e138 <rtc_cb+0x90>)
    e0ca:	f018 fe52 	bl	26d72 <assert_print>
    e0ce:	f240 11e1 	movw	r1, #481	; 0x1e1
    e0d2:	4819      	ldr	r0, [pc, #100]	; (e138 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    e0d4:	f018 fe46 	bl	26d64 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e0d8:	00a4      	lsls	r4, r4, #2
    e0da:	b2e4      	uxtb	r4, r4
    e0dc:	b950      	cbnz	r0, e0f4 <rtc_cb+0x4c>
    e0de:	4917      	ldr	r1, [pc, #92]	; (e13c <rtc_cb+0x94>)
    e0e0:	4814      	ldr	r0, [pc, #80]	; (e134 <rtc_cb+0x8c>)
    e0e2:	f44f 7317 	mov.w	r3, #604	; 0x25c
    e0e6:	4a16      	ldr	r2, [pc, #88]	; (e140 <rtc_cb+0x98>)
    e0e8:	f018 fe43 	bl	26d72 <assert_print>
    e0ec:	f44f 7117 	mov.w	r1, #604	; 0x25c
    e0f0:	4813      	ldr	r0, [pc, #76]	; (e140 <rtc_cb+0x98>)
    e0f2:	e7ef      	b.n	e0d4 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    e0f4:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    e0f6:	4b13      	ldr	r3, [pc, #76]	; (e144 <rtc_cb+0x9c>)
    e0f8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    e0fc:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    e0fe:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    e100:	4a11      	ldr	r2, [pc, #68]	; (e148 <rtc_cb+0xa0>)
    e102:	40ab      	lsls	r3, r5
    e104:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    e108:	4630      	mov	r0, r6
    e10a:	f010 f84b 	bl	1e1a4 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    e10e:	4628      	mov	r0, r5
    e110:	f010 fce4 	bl	1eadc <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    e114:	4b0d      	ldr	r3, [pc, #52]	; (e14c <rtc_cb+0xa4>)
    e116:	4298      	cmp	r0, r3
    e118:	d008      	beq.n	e12c <rtc_cb+0x84>
    e11a:	490d      	ldr	r1, [pc, #52]	; (e150 <rtc_cb+0xa8>)
    e11c:	4805      	ldr	r0, [pc, #20]	; (e134 <rtc_cb+0x8c>)
    e11e:	2374      	movs	r3, #116	; 0x74
    e120:	4a0c      	ldr	r2, [pc, #48]	; (e154 <rtc_cb+0xac>)
    e122:	f018 fe26 	bl	26d72 <assert_print>
    e126:	2174      	movs	r1, #116	; 0x74
    e128:	480a      	ldr	r0, [pc, #40]	; (e154 <rtc_cb+0xac>)
    e12a:	e7d3      	b.n	e0d4 <rtc_cb+0x2c>
}
    e12c:	bd70      	pop	{r4, r5, r6, pc}
    e12e:	bf00      	nop
    e130:	0002ed07 	.word	0x0002ed07
    e134:	0002dd81 	.word	0x0002dd81
    e138:	0002ecd5 	.word	0x0002ecd5
    e13c:	0002ed76 	.word	0x0002ed76
    e140:	0002ed12 	.word	0x0002ed12
    e144:	4002a080 	.word	0x4002a080
    e148:	40017000 	.word	0x40017000
    e14c:	0bad0000 	.word	0x0bad0000
    e150:	0002edb1 	.word	0x0002edb1
    e154:	0002ed7a 	.word	0x0002ed7a

0000e158 <mbox_callback>:
{
    e158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e15c:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    e15e:	6883      	ldr	r3, [r0, #8]
    e160:	691b      	ldr	r3, [r3, #16]
    e162:	b94b      	cbnz	r3, e178 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    e164:	4927      	ldr	r1, [pc, #156]	; (e204 <mbox_callback+0xac>)
    e166:	4828      	ldr	r0, [pc, #160]	; (e208 <mbox_callback+0xb0>)
    e168:	23ca      	movs	r3, #202	; 0xca
    e16a:	4a28      	ldr	r2, [pc, #160]	; (e20c <mbox_callback+0xb4>)
    e16c:	f018 fe01 	bl	26d72 <assert_print>
    e170:	21ca      	movs	r1, #202	; 0xca
    e172:	4826      	ldr	r0, [pc, #152]	; (e20c <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    e174:	f018 fdf6 	bl	26d64 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    e178:	2200      	movs	r2, #0
    e17a:	4798      	blx	r3
    e17c:	4606      	mov	r6, r0
    e17e:	2800      	cmp	r0, #0
    e180:	d1f0      	bne.n	e164 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e182:	f3c4 2907 	ubfx	r9, r4, #8, #8
    e186:	4648      	mov	r0, r9
    e188:	f00f fe14 	bl	1ddb4 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    e18c:	fa5f f884 	uxtb.w	r8, r4
    e190:	4633      	mov	r3, r6
    e192:	4649      	mov	r1, r9
    e194:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e196:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    e198:	4640      	mov	r0, r8
    e19a:	f7ff fedd 	bl	df58 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    e19e:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    e1a2:	4648      	mov	r0, r9
    e1a4:	f00f fdd2 	bl	1dd4c <z_nrf_rtc_timer_compare_evt_address_get>
    e1a8:	2d0f      	cmp	r5, #15
    e1aa:	d90a      	bls.n	e1c2 <mbox_callback+0x6a>
    e1ac:	4918      	ldr	r1, [pc, #96]	; (e210 <mbox_callback+0xb8>)
    e1ae:	4816      	ldr	r0, [pc, #88]	; (e208 <mbox_callback+0xb0>)
    e1b0:	f240 13e1 	movw	r3, #481	; 0x1e1
    e1b4:	4a17      	ldr	r2, [pc, #92]	; (e214 <mbox_callback+0xbc>)
    e1b6:	f018 fddc 	bl	26d72 <assert_print>
    e1ba:	f240 11e1 	movw	r1, #481	; 0x1e1
    e1be:	4815      	ldr	r0, [pc, #84]	; (e214 <mbox_callback+0xbc>)
    e1c0:	e7d8      	b.n	e174 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e1c2:	4a15      	ldr	r2, [pc, #84]	; (e218 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e1c4:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e1c6:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    e1c8:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e1cc:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    e1ce:	b950      	cbnz	r0, e1e6 <mbox_callback+0x8e>
    e1d0:	4912      	ldr	r1, [pc, #72]	; (e21c <mbox_callback+0xc4>)
    e1d2:	480d      	ldr	r0, [pc, #52]	; (e208 <mbox_callback+0xb0>)
    e1d4:	f44f 7312 	mov.w	r3, #584	; 0x248
    e1d8:	4a11      	ldr	r2, [pc, #68]	; (e220 <mbox_callback+0xc8>)
    e1da:	f018 fdca 	bl	26d72 <assert_print>
    e1de:	f44f 7112 	mov.w	r1, #584	; 0x248
    e1e2:	480f      	ldr	r0, [pc, #60]	; (e220 <mbox_callback+0xc8>)
    e1e4:	e7c6      	b.n	e174 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    e1e6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    e1ea:	4b0e      	ldr	r3, [pc, #56]	; (e224 <mbox_callback+0xcc>)
    e1ec:	f107 0232 	add.w	r2, r7, #50	; 0x32
    e1f0:	9300      	str	r3, [sp, #0]
    e1f2:	4648      	mov	r0, r9
    e1f4:	4633      	mov	r3, r6
    e1f6:	9401      	str	r4, [sp, #4]
    e1f8:	0052      	lsls	r2, r2, #1
    e1fa:	f00f fec5 	bl	1df88 <z_nrf_rtc_timer_set>
}
    e1fe:	b003      	add	sp, #12
    e200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e204:	0002ecc8 	.word	0x0002ecc8
    e208:	0002dd81 	.word	0x0002dd81
    e20c:	0002ed7a 	.word	0x0002ed7a
    e210:	0002ed07 	.word	0x0002ed07
    e214:	0002ecd5 	.word	0x0002ecd5
    e218:	4002a080 	.word	0x4002a080
    e21c:	0002ed76 	.word	0x0002ed76
    e220:	0002ed12 	.word	0x0002ed12
    e224:	0000e0a9 	.word	0x0000e0a9

0000e228 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e228:	f01c bdc6 	b.w	2adb8 <SystemInit>

0000e22c <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    e22c:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    e22e:	aa01      	add	r2, sp, #4
    e230:	f01c fda9 	bl	2ad86 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    e234:	4604      	mov	r4, r0
    e236:	b168      	cbz	r0, e254 <soc_secure_gpio_pin_mcu_select+0x28>
    e238:	2316      	movs	r3, #22
    e23a:	4a0e      	ldr	r2, [pc, #56]	; (e274 <soc_secure_gpio_pin_mcu_select+0x48>)
    e23c:	490e      	ldr	r1, [pc, #56]	; (e278 <soc_secure_gpio_pin_mcu_select+0x4c>)
    e23e:	480f      	ldr	r0, [pc, #60]	; (e27c <soc_secure_gpio_pin_mcu_select+0x50>)
    e240:	f018 fd97 	bl	26d72 <assert_print>
    e244:	4621      	mov	r1, r4
    e246:	480e      	ldr	r0, [pc, #56]	; (e280 <soc_secure_gpio_pin_mcu_select+0x54>)
    e248:	f018 fd93 	bl	26d72 <assert_print>
    e24c:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    e24e:	4809      	ldr	r0, [pc, #36]	; (e274 <soc_secure_gpio_pin_mcu_select+0x48>)
    e250:	f018 fd88 	bl	26d64 <assert_post_action>
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	b15b      	cbz	r3, e270 <soc_secure_gpio_pin_mcu_select+0x44>
    e258:	2317      	movs	r3, #23
    e25a:	4a06      	ldr	r2, [pc, #24]	; (e274 <soc_secure_gpio_pin_mcu_select+0x48>)
    e25c:	4909      	ldr	r1, [pc, #36]	; (e284 <soc_secure_gpio_pin_mcu_select+0x58>)
    e25e:	4807      	ldr	r0, [pc, #28]	; (e27c <soc_secure_gpio_pin_mcu_select+0x50>)
    e260:	f018 fd87 	bl	26d72 <assert_print>
    e264:	9901      	ldr	r1, [sp, #4]
    e266:	4808      	ldr	r0, [pc, #32]	; (e288 <soc_secure_gpio_pin_mcu_select+0x5c>)
    e268:	f018 fd83 	bl	26d72 <assert_print>
    e26c:	2117      	movs	r1, #23
    e26e:	e7ee      	b.n	e24e <soc_secure_gpio_pin_mcu_select+0x22>
}
    e270:	b002      	add	sp, #8
    e272:	bd10      	pop	{r4, pc}
    e274:	0002edce 	.word	0x0002edce
    e278:	0002ee08 	.word	0x0002ee08
    e27c:	0002dd81 	.word	0x0002dd81
    e280:	0002ee28 	.word	0x0002ee28
    e284:	0002ee42 	.word	0x0002ee42
    e288:	0002ee4e 	.word	0x0002ee4e

0000e28c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    e28c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e28e:	2200      	movs	r2, #0
{
    e290:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    e292:	490f      	ldr	r1, [pc, #60]	; (e2d0 <enable_logger+0x44>)
    e294:	480f      	ldr	r0, [pc, #60]	; (e2d4 <enable_logger+0x48>)
    e296:	f01d fca0 	bl	2bbda <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e29a:	2200      	movs	r2, #0
    e29c:	2300      	movs	r3, #0
    e29e:	2400      	movs	r4, #0
    e2a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e2a4:	230e      	movs	r3, #14
    e2a6:	4d0c      	ldr	r5, [pc, #48]	; (e2d8 <enable_logger+0x4c>)
    e2a8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    e2ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e2b0:	4628      	mov	r0, r5
    e2b2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e2b6:	4b09      	ldr	r3, [pc, #36]	; (e2dc <enable_logger+0x50>)
    e2b8:	4909      	ldr	r1, [pc, #36]	; (e2e0 <enable_logger+0x54>)
    e2ba:	9400      	str	r4, [sp, #0]
    e2bc:	f013 f966 	bl	2158c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e2c0:	4908      	ldr	r1, [pc, #32]	; (e2e4 <enable_logger+0x58>)
    e2c2:	4628      	mov	r0, r5
    e2c4:	f01d fb6d 	bl	2b9a2 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    e2c8:	4620      	mov	r0, r4
    e2ca:	b009      	add	sp, #36	; 0x24
    e2cc:	bd30      	pop	{r4, r5, pc}
    e2ce:	bf00      	nop
    e2d0:	0000e42d 	.word	0x0000e42d
    e2d4:	20009690 	.word	0x20009690
    e2d8:	20009200 	.word	0x20009200
    e2dc:	0000e6fd 	.word	0x0000e6fd
    e2e0:	20031620 	.word	0x20031620
    e2e4:	0002ee68 	.word	0x0002ee68

0000e2e8 <activate_foreach_backend>:
{
    e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2ec:	4604      	mov	r4, r0
	while (mask_cpy) {
    e2ee:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    e2f0:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e2f4:	f8df 8050 	ldr.w	r8, [pc, #80]	; e348 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    e2f8:	b914      	cbnz	r4, e300 <activate_foreach_backend+0x18>
}
    e2fa:	4638      	mov	r0, r7
    e2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    e300:	fa94 f5a4 	rbit	r5, r4
    e304:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    e308:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e30c:	012e      	lsls	r6, r5, #4
    e30e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    e312:	ea6f 0a03 	mvn.w	sl, r3
    e316:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e31a:	7b2b      	ldrb	r3, [r5, #12]
    e31c:	2b00      	cmp	r3, #0
    e31e:	d0eb      	beq.n	e2f8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    e320:	f858 3006 	ldr.w	r3, [r8, r6]
    e324:	691b      	ldr	r3, [r3, #16]
    e326:	b94b      	cbnz	r3, e33c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    e328:	4446      	add	r6, r8
			log_backend_enable(backend,
    e32a:	6873      	ldr	r3, [r6, #4]
    e32c:	2204      	movs	r2, #4
    e32e:	4628      	mov	r0, r5
    e330:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    e332:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    e336:	f000 fae7 	bl	e908 <log_backend_enable>
    e33a:	e7dd      	b.n	e2f8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    e33c:	4628      	mov	r0, r5
    e33e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e340:	2800      	cmp	r0, #0
    e342:	d1d9      	bne.n	e2f8 <activate_foreach_backend+0x10>
    e344:	e7f0      	b.n	e328 <activate_foreach_backend+0x40>
    e346:	bf00      	nop
    e348:	0002cdd0 	.word	0x0002cdd0

0000e34c <z_log_init>:
{
    e34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e350:	f8df 90b8 	ldr.w	r9, [pc, #184]	; e40c <z_log_init+0xc0>
    e354:	4c2e      	ldr	r4, [pc, #184]	; (e410 <z_log_init+0xc4>)
    e356:	4680      	mov	r8, r0
    e358:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e35c:	2b9f      	cmp	r3, #159	; 0x9f
{
    e35e:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e360:	d90b      	bls.n	e37a <z_log_init+0x2e>
    e362:	492c      	ldr	r1, [pc, #176]	; (e414 <z_log_init+0xc8>)
    e364:	f240 1315 	movw	r3, #277	; 0x115
    e368:	4a2b      	ldr	r2, [pc, #172]	; (e418 <z_log_init+0xcc>)
    e36a:	482c      	ldr	r0, [pc, #176]	; (e41c <z_log_init+0xd0>)
    e36c:	f018 fd01 	bl	26d72 <assert_print>
    e370:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e374:	4828      	ldr	r0, [pc, #160]	; (e418 <z_log_init+0xcc>)
    e376:	f018 fcf5 	bl	26d64 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    e37a:	4829      	ldr	r0, [pc, #164]	; (e420 <z_log_init+0xd4>)
    e37c:	f018 fe2a 	bl	26fd4 <atomic_inc>
    e380:	4606      	mov	r6, r0
    e382:	b360      	cbz	r0, e3de <z_log_init+0x92>
	uint32_t mask = 0;
    e384:	2500      	movs	r5, #0
}
    e386:	4628      	mov	r0, r5
    e388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    e38c:	7b23      	ldrb	r3, [r4, #12]
    e38e:	b173      	cbz	r3, e3ae <z_log_init+0x62>
	if (backend->api->init) {
    e390:	6823      	ldr	r3, [r4, #0]
    e392:	68db      	ldr	r3, [r3, #12]
    e394:	b10b      	cbz	r3, e39a <z_log_init+0x4e>
		backend->api->init(backend);
    e396:	4620      	mov	r0, r4
    e398:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    e39a:	6823      	ldr	r3, [r4, #0]
    e39c:	691b      	ldr	r3, [r3, #16]
    e39e:	b9b3      	cbnz	r3, e3ce <z_log_init+0x82>
				log_backend_enable(backend,
    e3a0:	6863      	ldr	r3, [r4, #4]
    e3a2:	2204      	movs	r2, #4
    e3a4:	4620      	mov	r0, r4
    e3a6:	6819      	ldr	r1, [r3, #0]
    e3a8:	f000 faae 	bl	e908 <log_backend_enable>
			i++;
    e3ac:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3ae:	3410      	adds	r4, #16
    e3b0:	454c      	cmp	r4, r9
    e3b2:	d918      	bls.n	e3e6 <z_log_init+0x9a>
    e3b4:	491b      	ldr	r1, [pc, #108]	; (e424 <z_log_init+0xd8>)
    e3b6:	f44f 7391 	mov.w	r3, #290	; 0x122
    e3ba:	4a17      	ldr	r2, [pc, #92]	; (e418 <z_log_init+0xcc>)
    e3bc:	4817      	ldr	r0, [pc, #92]	; (e41c <z_log_init+0xd0>)
    e3be:	f018 fcd8 	bl	26d72 <assert_print>
    e3c2:	4819      	ldr	r0, [pc, #100]	; (e428 <z_log_init+0xdc>)
    e3c4:	f018 fcd5 	bl	26d72 <assert_print>
    e3c8:	f44f 7191 	mov.w	r1, #290	; 0x122
    e3cc:	e7d2      	b.n	e374 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    e3ce:	4620      	mov	r0, r4
    e3d0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e3d2:	2800      	cmp	r0, #0
    e3d4:	d0e4      	beq.n	e3a0 <z_log_init+0x54>
				mask |= BIT(i);
    e3d6:	fa0a f306 	lsl.w	r3, sl, r6
    e3da:	431d      	orrs	r5, r3
    e3dc:	e7e6      	b.n	e3ac <z_log_init+0x60>
	uint32_t mask = 0;
    e3de:	4605      	mov	r5, r0
				mask |= BIT(i);
    e3e0:	f04f 0a01 	mov.w	sl, #1
    e3e4:	e7e4      	b.n	e3b0 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3e6:	d3d1      	bcc.n	e38c <z_log_init+0x40>
	if (blocking) {
    e3e8:	f1b8 0f00 	cmp.w	r8, #0
    e3ec:	d0cb      	beq.n	e386 <z_log_init+0x3a>
		while (mask) {
    e3ee:	2d00      	cmp	r5, #0
    e3f0:	d0c8      	beq.n	e384 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    e3f2:	4628      	mov	r0, r5
    e3f4:	f7ff ff78 	bl	e2e8 <activate_foreach_backend>
    e3f8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e3fa:	2f00      	cmp	r7, #0
    e3fc:	d0f7      	beq.n	e3ee <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    e3fe:	2100      	movs	r1, #0
    e400:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e404:	f015 fb38 	bl	23a78 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    e408:	e7f1      	b.n	e3ee <z_log_init+0xa2>
    e40a:	bf00      	nop
    e40c:	0002cde0 	.word	0x0002cde0
    e410:	0002cdd0 	.word	0x0002cdd0
    e414:	0002ee9d 	.word	0x0002ee9d
    e418:	0002ee70 	.word	0x0002ee70
    e41c:	0002dd81 	.word	0x0002dd81
    e420:	2002142c 	.word	0x2002142c
    e424:	0002eec1 	.word	0x0002eec1
    e428:	0002eee2 	.word	0x0002eee2

0000e42c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e42c:	4801      	ldr	r0, [pc, #4]	; (e434 <log_process_thread_timer_expiry_fn+0x8>)
    e42e:	f013 bc2f 	b.w	21c90 <z_impl_k_sem_give>
    e432:	bf00      	nop
    e434:	20008bac 	.word	0x20008bac

0000e438 <log_format_func_t_get>:
}
    e438:	4b01      	ldr	r3, [pc, #4]	; (e440 <log_format_func_t_get+0x8>)
    e43a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e43e:	4770      	bx	lr
    e440:	0002d328 	.word	0x0002d328

0000e444 <log_set_timestamp_func>:
{
    e444:	b508      	push	{r3, lr}
    e446:	4603      	mov	r3, r0
    e448:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e44a:	b12b      	cbz	r3, e458 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    e44c:	4a04      	ldr	r2, [pc, #16]	; (e460 <log_set_timestamp_func+0x1c>)
    e44e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    e450:	f000 fcfc 	bl	ee4c <log_output_timestamp_freq_set>
	return 0;
    e454:	2000      	movs	r0, #0
}
    e456:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e458:	f06f 0015 	mvn.w	r0, #21
    e45c:	e7fb      	b.n	e456 <log_set_timestamp_func+0x12>
    e45e:	bf00      	nop
    e460:	200083fc 	.word	0x200083fc

0000e464 <z_log_notify_backend_enabled>:
{
    e464:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    e466:	4c04      	ldr	r4, [pc, #16]	; (e478 <z_log_notify_backend_enabled+0x14>)
    e468:	7823      	ldrb	r3, [r4, #0]
    e46a:	b913      	cbnz	r3, e472 <z_log_notify_backend_enabled+0xe>
    e46c:	4803      	ldr	r0, [pc, #12]	; (e47c <z_log_notify_backend_enabled+0x18>)
    e46e:	f013 fc0f 	bl	21c90 <z_impl_k_sem_give>
	backend_attached = true;
    e472:	2301      	movs	r3, #1
    e474:	7023      	strb	r3, [r4, #0]
}
    e476:	bd10      	pop	{r4, pc}
    e478:	2002229a 	.word	0x2002229a
    e47c:	20008bac 	.word	0x20008bac

0000e480 <z_log_dropped>:
{
    e480:	b510      	push	{r4, lr}
    e482:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e484:	4806      	ldr	r0, [pc, #24]	; (e4a0 <z_log_dropped+0x20>)
    e486:	f018 fda5 	bl	26fd4 <atomic_inc>
	if (buffered) {
    e48a:	b13c      	cbz	r4, e49c <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e48c:	4b05      	ldr	r3, [pc, #20]	; (e4a4 <z_log_dropped+0x24>)
    e48e:	e8d3 1fef 	ldaex	r1, [r3]
    e492:	3901      	subs	r1, #1
    e494:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e498:	2a00      	cmp	r2, #0
    e49a:	d1f8      	bne.n	e48e <z_log_dropped+0xe>
}
    e49c:	bd10      	pop	{r4, pc}
    e49e:	bf00      	nop
    e4a0:	20021424 	.word	0x20021424
    e4a4:	20021428 	.word	0x20021428

0000e4a8 <z_log_dropped_read_and_clear>:
}
    e4a8:	2000      	movs	r0, #0
    e4aa:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e4ac:	4b03      	ldr	r3, [pc, #12]	; (e4bc <z_log_dropped_read_and_clear+0x14>)
    e4ae:	e8d3 0fef 	ldaex	r0, [r3]
    e4b2:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e4b6:	2a00      	cmp	r2, #0
    e4b8:	d1f9      	bne.n	e4ae <z_log_dropped_read_and_clear+0x6>
    e4ba:	4770      	bx	lr
    e4bc:	20021424 	.word	0x20021424

0000e4c0 <dropped_notify>:
{
    e4c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    e4c2:	f7ff fff1 	bl	e4a8 <z_log_dropped_read_and_clear>
    e4c6:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e4c8:	4c0f      	ldr	r4, [pc, #60]	; (e508 <dropped_notify+0x48>)
    e4ca:	4e10      	ldr	r6, [pc, #64]	; (e50c <dropped_notify+0x4c>)
    e4cc:	42b4      	cmp	r4, r6
    e4ce:	d919      	bls.n	e504 <dropped_notify+0x44>
    e4d0:	490f      	ldr	r1, [pc, #60]	; (e510 <dropped_notify+0x50>)
    e4d2:	f240 13cd 	movw	r3, #461	; 0x1cd
    e4d6:	4a0f      	ldr	r2, [pc, #60]	; (e514 <dropped_notify+0x54>)
    e4d8:	480f      	ldr	r0, [pc, #60]	; (e518 <dropped_notify+0x58>)
    e4da:	f018 fc4a 	bl	26d72 <assert_print>
    e4de:	480f      	ldr	r0, [pc, #60]	; (e51c <dropped_notify+0x5c>)
    e4e0:	f018 fc47 	bl	26d72 <assert_print>
    e4e4:	f240 11cd 	movw	r1, #461	; 0x1cd
    e4e8:	480a      	ldr	r0, [pc, #40]	; (e514 <dropped_notify+0x54>)
    e4ea:	f018 fc3b 	bl	26d64 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e4ee:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e4f0:	795b      	ldrb	r3, [r3, #5]
    e4f2:	b12b      	cbz	r3, e500 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    e4f4:	6823      	ldr	r3, [r4, #0]
    e4f6:	685b      	ldr	r3, [r3, #4]
    e4f8:	b113      	cbz	r3, e500 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    e4fa:	4629      	mov	r1, r5
    e4fc:	4620      	mov	r0, r4
    e4fe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e500:	3410      	adds	r4, #16
    e502:	e7e3      	b.n	e4cc <dropped_notify+0xc>
    e504:	d3f3      	bcc.n	e4ee <dropped_notify+0x2e>
}
    e506:	bd70      	pop	{r4, r5, r6, pc}
    e508:	0002cdd0 	.word	0x0002cdd0
    e50c:	0002cde0 	.word	0x0002cde0
    e510:	0002eec1 	.word	0x0002eec1
    e514:	0002ee70 	.word	0x0002ee70
    e518:	0002dd81 	.word	0x0002dd81
    e51c:	0002eee2 	.word	0x0002eee2

0000e520 <z_log_msg_init>:
{
    e520:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    e522:	4c04      	ldr	r4, [pc, #16]	; (e534 <z_log_msg_init+0x14>)
    e524:	4904      	ldr	r1, [pc, #16]	; (e538 <z_log_msg_init+0x18>)
    e526:	4620      	mov	r0, r4
    e528:	f7ff face 	bl	dac8 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    e52c:	4b03      	ldr	r3, [pc, #12]	; (e53c <z_log_msg_init+0x1c>)
    e52e:	601c      	str	r4, [r3, #0]
}
    e530:	bd10      	pop	{r4, pc}
    e532:	bf00      	nop
    e534:	20008a14 	.word	0x20008a14
    e538:	0002d314 	.word	0x0002d314
    e53c:	2002141c 	.word	0x2002141c

0000e540 <log_core_init>:
{
    e540:	b508      	push	{r3, lr}
	panic_mode = false;
    e542:	2300      	movs	r3, #0
    e544:	4a06      	ldr	r2, [pc, #24]	; (e560 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    e546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e54a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e54c:	4a05      	ldr	r2, [pc, #20]	; (e564 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    e54e:	4806      	ldr	r0, [pc, #24]	; (e568 <log_core_init+0x28>)
	dropped_cnt = 0;
    e550:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e552:	f7ff ff77 	bl	e444 <log_set_timestamp_func>
}
    e556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    e55a:	f7ff bfe1 	b.w	e520 <z_log_msg_init>
    e55e:	bf00      	nop
    e560:	2002229b 	.word	0x2002229b
    e564:	20021424 	.word	0x20021424
    e568:	00026fd1 	.word	0x00026fd1

0000e56c <z_log_msg_alloc>:
{
    e56c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    e56e:	2200      	movs	r2, #0
    e570:	2300      	movs	r3, #0
    e572:	4801      	ldr	r0, [pc, #4]	; (e578 <z_log_msg_alloc+0xc>)
    e574:	f7ff bada 	b.w	db2c <mpsc_pbuf_alloc>
    e578:	20008a14 	.word	0x20008a14

0000e57c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    e57c:	4801      	ldr	r0, [pc, #4]	; (e584 <z_log_msg_local_claim+0x8>)
    e57e:	f7ff bbe9 	b.w	dd54 <mpsc_pbuf_claim>
    e582:	bf00      	nop
    e584:	20008a14 	.word	0x20008a14

0000e588 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    e588:	4b02      	ldr	r3, [pc, #8]	; (e594 <z_log_msg_free+0xc>)
{
    e58a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    e58c:	6818      	ldr	r0, [r3, #0]
    e58e:	f7ff bc67 	b.w	de60 <mpsc_pbuf_free>
    e592:	bf00      	nop
    e594:	2002141c 	.word	0x2002141c

0000e598 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    e598:	4801      	ldr	r0, [pc, #4]	; (e5a0 <z_log_msg_pending+0x8>)
    e59a:	f018 bca4 	b.w	26ee6 <mpsc_pbuf_is_pending>
    e59e:	bf00      	nop
    e5a0:	20008a14 	.word	0x20008a14

0000e5a4 <z_impl_log_process>:
{
    e5a4:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    e5a6:	4b2e      	ldr	r3, [pc, #184]	; (e660 <z_impl_log_process+0xbc>)
    e5a8:	7818      	ldrb	r0, [r3, #0]
    e5aa:	2800      	cmp	r0, #0
    e5ac:	d057      	beq.n	e65e <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    e5ae:	f7ff ffe5 	bl	e57c <z_log_msg_local_claim>
	if (msg) {
    e5b2:	4605      	mov	r5, r0
    e5b4:	b340      	cbz	r0, e608 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e5b6:	4b2b      	ldr	r3, [pc, #172]	; (e664 <z_impl_log_process+0xc0>)
    e5b8:	e8d3 1fef 	ldaex	r1, [r3]
    e5bc:	3901      	subs	r1, #1
    e5be:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e5c2:	2a00      	cmp	r2, #0
    e5c4:	d1f8      	bne.n	e5b8 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e5c6:	4c28      	ldr	r4, [pc, #160]	; (e668 <z_impl_log_process+0xc4>)
    e5c8:	4e28      	ldr	r6, [pc, #160]	; (e66c <z_impl_log_process+0xc8>)
    e5ca:	42b4      	cmp	r4, r6
    e5cc:	d918      	bls.n	e600 <z_impl_log_process+0x5c>
    e5ce:	4928      	ldr	r1, [pc, #160]	; (e670 <z_impl_log_process+0xcc>)
    e5d0:	f240 13c1 	movw	r3, #449	; 0x1c1
    e5d4:	4a27      	ldr	r2, [pc, #156]	; (e674 <z_impl_log_process+0xd0>)
    e5d6:	4828      	ldr	r0, [pc, #160]	; (e678 <z_impl_log_process+0xd4>)
    e5d8:	f018 fbcb 	bl	26d72 <assert_print>
    e5dc:	4827      	ldr	r0, [pc, #156]	; (e67c <z_impl_log_process+0xd8>)
    e5de:	f018 fbc8 	bl	26d72 <assert_print>
    e5e2:	f240 11c1 	movw	r1, #449	; 0x1c1
    e5e6:	4823      	ldr	r0, [pc, #140]	; (e674 <z_impl_log_process+0xd0>)
    e5e8:	f018 fbbc 	bl	26d64 <assert_post_action>
	return backend->cb->active;
    e5ec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e5ee:	795b      	ldrb	r3, [r3, #5]
    e5f0:	b123      	cbz	r3, e5fc <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    e5f2:	6823      	ldr	r3, [r4, #0]
    e5f4:	4629      	mov	r1, r5
    e5f6:	4620      	mov	r0, r4
    e5f8:	681b      	ldr	r3, [r3, #0]
    e5fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e5fc:	3410      	adds	r4, #16
    e5fe:	e7e4      	b.n	e5ca <z_impl_log_process+0x26>
    e600:	d3f4      	bcc.n	e5ec <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    e602:	4628      	mov	r0, r5
    e604:	f7ff ffc0 	bl	e588 <z_log_msg_free>
	return dropped_cnt > 0;
    e608:	4b1d      	ldr	r3, [pc, #116]	; (e680 <z_impl_log_process+0xdc>)
    e60a:	4c1e      	ldr	r4, [pc, #120]	; (e684 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    e60c:	681b      	ldr	r3, [r3, #0]
    e60e:	2b00      	cmp	r3, #0
    e610:	dd19      	ble.n	e646 <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    e612:	f01d faba 	bl	2bb8a <z_impl_k_uptime_ticks>
    e616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e61a:	fba0 0302 	umull	r0, r3, r0, r2
    e61e:	fb02 3101 	mla	r1, r2, r1, r3
    e622:	0bc3      	lsrs	r3, r0, #15
    e624:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e628:	e9d4 2000 	ldrd	r2, r0, [r4]
    e62c:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    e62e:	f240 32e9 	movw	r2, #1001	; 0x3e9
    e632:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e636:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    e63a:	4293      	cmp	r3, r2
    e63c:	f171 0100 	sbcs.w	r1, r1, #0
    e640:	d301      	bcc.n	e646 <z_impl_log_process+0xa2>
				dropped_notify();
    e642:	f7ff ff3d 	bl	e4c0 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    e646:	e9d4 3200 	ldrd	r3, r2, [r4]
    e64a:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    e64e:	f142 0200 	adc.w	r2, r2, #0
    e652:	e9c4 3200 	strd	r3, r2, [r4]
}
    e656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    e65a:	f7ff bf9d 	b.w	e598 <z_log_msg_pending>
}
    e65e:	bd70      	pop	{r4, r5, r6, pc}
    e660:	2002229a 	.word	0x2002229a
    e664:	20021428 	.word	0x20021428
    e668:	0002cdd0 	.word	0x0002cdd0
    e66c:	0002cde0 	.word	0x0002cde0
    e670:	0002eec1 	.word	0x0002eec1
    e674:	0002ee70 	.word	0x0002ee70
    e678:	0002dd81 	.word	0x0002dd81
    e67c:	0002eee2 	.word	0x0002eee2
    e680:	20021424 	.word	0x20021424
    e684:	20009688 	.word	0x20009688

0000e688 <z_impl_log_panic>:
{
    e688:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e68a:	4d15      	ldr	r5, [pc, #84]	; (e6e0 <z_impl_log_panic+0x58>)
    e68c:	7829      	ldrb	r1, [r5, #0]
    e68e:	bb29      	cbnz	r1, e6dc <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    e690:	2001      	movs	r0, #1
    e692:	f7ff fe5b 	bl	e34c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e696:	4c13      	ldr	r4, [pc, #76]	; (e6e4 <z_impl_log_panic+0x5c>)
    e698:	4e13      	ldr	r6, [pc, #76]	; (e6e8 <z_impl_log_panic+0x60>)
    e69a:	42b4      	cmp	r4, r6
    e69c:	d917      	bls.n	e6ce <z_impl_log_panic+0x46>
    e69e:	4913      	ldr	r1, [pc, #76]	; (e6ec <z_impl_log_panic+0x64>)
    e6a0:	f44f 73c2 	mov.w	r3, #388	; 0x184
    e6a4:	4a12      	ldr	r2, [pc, #72]	; (e6f0 <z_impl_log_panic+0x68>)
    e6a6:	4813      	ldr	r0, [pc, #76]	; (e6f4 <z_impl_log_panic+0x6c>)
    e6a8:	f018 fb63 	bl	26d72 <assert_print>
    e6ac:	4812      	ldr	r0, [pc, #72]	; (e6f8 <z_impl_log_panic+0x70>)
    e6ae:	f018 fb60 	bl	26d72 <assert_print>
    e6b2:	f44f 71c2 	mov.w	r1, #388	; 0x184
    e6b6:	480e      	ldr	r0, [pc, #56]	; (e6f0 <z_impl_log_panic+0x68>)
    e6b8:	f018 fb54 	bl	26d64 <assert_post_action>
	return backend->cb->active;
    e6bc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e6be:	795b      	ldrb	r3, [r3, #5]
    e6c0:	b11b      	cbz	r3, e6ca <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e6c2:	6823      	ldr	r3, [r4, #0]
    e6c4:	4620      	mov	r0, r4
    e6c6:	689b      	ldr	r3, [r3, #8]
    e6c8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e6ca:	3410      	adds	r4, #16
    e6cc:	e7e5      	b.n	e69a <z_impl_log_panic+0x12>
    e6ce:	d3f5      	bcc.n	e6bc <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    e6d0:	f7ff ff68 	bl	e5a4 <z_impl_log_process>
		while (log_process() == true) {
    e6d4:	2800      	cmp	r0, #0
    e6d6:	d1fb      	bne.n	e6d0 <z_impl_log_panic+0x48>
	panic_mode = true;
    e6d8:	2301      	movs	r3, #1
    e6da:	702b      	strb	r3, [r5, #0]
}
    e6dc:	bd70      	pop	{r4, r5, r6, pc}
    e6de:	bf00      	nop
    e6e0:	2002229b 	.word	0x2002229b
    e6e4:	0002cdd0 	.word	0x0002cdd0
    e6e8:	0002cde0 	.word	0x0002cde0
    e6ec:	0002eec1 	.word	0x0002eec1
    e6f0:	0002ee70 	.word	0x0002ee70
    e6f4:	0002dd81 	.word	0x0002dd81
    e6f8:	0002eee2 	.word	0x0002eee2

0000e6fc <log_process_thread_func>:
{
    e6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e700:	4b2f      	ldr	r3, [pc, #188]	; (e7c0 <log_process_thread_func+0xc4>)
    e702:	4f30      	ldr	r7, [pc, #192]	; (e7c4 <log_process_thread_func+0xc8>)
    e704:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    e706:	091b      	lsrs	r3, r3, #4
    e708:	d10b      	bne.n	e722 <log_process_thread_func+0x26>
    e70a:	492f      	ldr	r1, [pc, #188]	; (e7c8 <log_process_thread_func+0xcc>)
    e70c:	f240 3347 	movw	r3, #839	; 0x347
    e710:	4a2e      	ldr	r2, [pc, #184]	; (e7cc <log_process_thread_func+0xd0>)
    e712:	482f      	ldr	r0, [pc, #188]	; (e7d0 <log_process_thread_func+0xd4>)
    e714:	f018 fb2d 	bl	26d72 <assert_print>
    e718:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e71c:	482b      	ldr	r0, [pc, #172]	; (e7cc <log_process_thread_func+0xd0>)
    e71e:	f018 fb21 	bl	26d64 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    e722:	2100      	movs	r1, #0
    e724:	4608      	mov	r0, r1
    e726:	f7ff fe11 	bl	e34c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e72a:	4604      	mov	r4, r0
    e72c:	b340      	cbz	r0, e780 <log_process_thread_func+0x84>
    e72e:	f240 6867 	movw	r8, #1639	; 0x667
    e732:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    e736:	f015 f9d3 	bl	23ae0 <z_impl_z_current_get>
	proc_tid = process_tid;
    e73a:	4b26      	ldr	r3, [pc, #152]	; (e7d4 <log_process_thread_func+0xd8>)
    e73c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e73e:	b130      	cbz	r0, e74e <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e740:	4b25      	ldr	r3, [pc, #148]	; (e7d8 <log_process_thread_func+0xdc>)
	    process_tid &&
    e742:	681b      	ldr	r3, [r3, #0]
    e744:	2b09      	cmp	r3, #9
    e746:	dd02      	ble.n	e74e <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    e748:	4824      	ldr	r0, [pc, #144]	; (e7dc <log_process_thread_func+0xe0>)
    e74a:	f013 faa1 	bl	21c90 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e74e:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    e750:	f8df a088 	ldr.w	sl, [pc, #136]	; e7dc <log_process_thread_func+0xe0>
		if (activate_mask) {
    e754:	b144      	cbz	r4, e768 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    e756:	4620      	mov	r0, r4
    e758:	f7ff fdc6 	bl	e2e8 <activate_foreach_backend>
			if (!activate_mask) {
    e75c:	4604      	mov	r4, r0
    e75e:	b918      	cbnz	r0, e768 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    e760:	f04f 38ff 	mov.w	r8, #4294967295
    e764:	f04f 39ff 	mov.w	r9, #4294967295
    e768:	f7ff ff1c 	bl	e5a4 <z_impl_log_process>
		if (log_process() == false) {
    e76c:	4606      	mov	r6, r0
    e76e:	b928      	cbnz	r0, e77c <log_process_thread_func+0x80>
			if (processed_any) {
    e770:	b95d      	cbnz	r5, e78a <log_process_thread_func+0x8e>
    e772:	4642      	mov	r2, r8
    e774:	464b      	mov	r3, r9
    e776:	4650      	mov	r0, sl
    e778:	f013 face 	bl	21d18 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e77c:	4635      	mov	r5, r6
    e77e:	e7e9      	b.n	e754 <log_process_thread_func+0x58>
    e780:	f04f 38ff 	mov.w	r8, #4294967295
    e784:	f04f 39ff 	mov.w	r9, #4294967295
    e788:	e7d5      	b.n	e736 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e78a:	4d0d      	ldr	r5, [pc, #52]	; (e7c0 <log_process_thread_func+0xc4>)
    e78c:	e008      	b.n	e7a0 <log_process_thread_func+0xa4>
    e78e:	d2f0      	bcs.n	e772 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    e790:	682b      	ldr	r3, [r5, #0]
    e792:	699b      	ldr	r3, [r3, #24]
    e794:	b11b      	cbz	r3, e79e <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    e796:	2200      	movs	r2, #0
    e798:	4628      	mov	r0, r5
    e79a:	4611      	mov	r1, r2
    e79c:	4798      	blx	r3
    e79e:	3510      	adds	r5, #16
    e7a0:	42bd      	cmp	r5, r7
    e7a2:	d9f4      	bls.n	e78e <log_process_thread_func+0x92>
    e7a4:	490e      	ldr	r1, [pc, #56]	; (e7e0 <log_process_thread_func+0xe4>)
    e7a6:	f240 333b 	movw	r3, #827	; 0x33b
    e7aa:	4a08      	ldr	r2, [pc, #32]	; (e7cc <log_process_thread_func+0xd0>)
    e7ac:	4808      	ldr	r0, [pc, #32]	; (e7d0 <log_process_thread_func+0xd4>)
    e7ae:	f018 fae0 	bl	26d72 <assert_print>
    e7b2:	480c      	ldr	r0, [pc, #48]	; (e7e4 <log_process_thread_func+0xe8>)
    e7b4:	f018 fadd 	bl	26d72 <assert_print>
    e7b8:	f240 313b 	movw	r1, #827	; 0x33b
    e7bc:	e7ae      	b.n	e71c <log_process_thread_func+0x20>
    e7be:	bf00      	nop
    e7c0:	0002cdd0 	.word	0x0002cdd0
    e7c4:	0002cde0 	.word	0x0002cde0
    e7c8:	0002ef01 	.word	0x0002ef01
    e7cc:	0002ee70 	.word	0x0002ee70
    e7d0:	0002dd81 	.word	0x0002dd81
    e7d4:	20021420 	.word	0x20021420
    e7d8:	20021428 	.word	0x20021428
    e7dc:	20008bac 	.word	0x20008bac
    e7e0:	0002eec1 	.word	0x0002eec1
    e7e4:	0002eee2 	.word	0x0002eee2

0000e7e8 <z_log_msg_post_finalize>:
{
    e7e8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    e7ea:	482b      	ldr	r0, [pc, #172]	; (e898 <z_log_msg_post_finalize+0xb0>)
    e7ec:	f018 fbf2 	bl	26fd4 <atomic_inc>
	if (panic_mode) {
    e7f0:	4b2a      	ldr	r3, [pc, #168]	; (e89c <z_log_msg_post_finalize+0xb4>)
    e7f2:	781b      	ldrb	r3, [r3, #0]
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d034      	beq.n	e862 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    e7f8:	f04f 0320 	mov.w	r3, #32
    e7fc:	f3ef 8411 	mrs	r4, BASEPRI
    e800:	f383 8812 	msr	BASEPRI_MAX, r3
    e804:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e808:	4825      	ldr	r0, [pc, #148]	; (e8a0 <z_log_msg_post_finalize+0xb8>)
    e80a:	f012 ff89 	bl	21720 <z_spin_lock_valid>
    e80e:	b968      	cbnz	r0, e82c <z_log_msg_post_finalize+0x44>
    e810:	2394      	movs	r3, #148	; 0x94
    e812:	4a24      	ldr	r2, [pc, #144]	; (e8a4 <z_log_msg_post_finalize+0xbc>)
    e814:	4924      	ldr	r1, [pc, #144]	; (e8a8 <z_log_msg_post_finalize+0xc0>)
    e816:	4825      	ldr	r0, [pc, #148]	; (e8ac <z_log_msg_post_finalize+0xc4>)
    e818:	f018 faab 	bl	26d72 <assert_print>
    e81c:	4920      	ldr	r1, [pc, #128]	; (e8a0 <z_log_msg_post_finalize+0xb8>)
    e81e:	4824      	ldr	r0, [pc, #144]	; (e8b0 <z_log_msg_post_finalize+0xc8>)
    e820:	f018 faa7 	bl	26d72 <assert_print>
    e824:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e826:	481f      	ldr	r0, [pc, #124]	; (e8a4 <z_log_msg_post_finalize+0xbc>)
    e828:	f018 fa9c 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
    e82c:	481c      	ldr	r0, [pc, #112]	; (e8a0 <z_log_msg_post_finalize+0xb8>)
    e82e:	f012 ff93 	bl	21758 <z_spin_lock_set_owner>
    e832:	f7ff feb7 	bl	e5a4 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e836:	481a      	ldr	r0, [pc, #104]	; (e8a0 <z_log_msg_post_finalize+0xb8>)
    e838:	f012 ff80 	bl	2173c <z_spin_unlock_valid>
    e83c:	b958      	cbnz	r0, e856 <z_log_msg_post_finalize+0x6e>
    e83e:	23c2      	movs	r3, #194	; 0xc2
    e840:	4a18      	ldr	r2, [pc, #96]	; (e8a4 <z_log_msg_post_finalize+0xbc>)
    e842:	491c      	ldr	r1, [pc, #112]	; (e8b4 <z_log_msg_post_finalize+0xcc>)
    e844:	4819      	ldr	r0, [pc, #100]	; (e8ac <z_log_msg_post_finalize+0xc4>)
    e846:	f018 fa94 	bl	26d72 <assert_print>
    e84a:	4915      	ldr	r1, [pc, #84]	; (e8a0 <z_log_msg_post_finalize+0xb8>)
    e84c:	481a      	ldr	r0, [pc, #104]	; (e8b8 <z_log_msg_post_finalize+0xd0>)
    e84e:	f018 fa90 	bl	26d72 <assert_print>
    e852:	21c2      	movs	r1, #194	; 0xc2
    e854:	e7e7      	b.n	e826 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    e856:	f384 8811 	msr	BASEPRI, r4
    e85a:	f3bf 8f6f 	isb	sy
}
    e85e:	b002      	add	sp, #8
    e860:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    e862:	4b16      	ldr	r3, [pc, #88]	; (e8bc <z_log_msg_post_finalize+0xd4>)
    e864:	681b      	ldr	r3, [r3, #0]
    e866:	2b00      	cmp	r3, #0
    e868:	d0f9      	beq.n	e85e <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    e86a:	b950      	cbnz	r0, e882 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    e86c:	2200      	movs	r2, #0
    e86e:	2300      	movs	r3, #0
    e870:	4813      	ldr	r0, [pc, #76]	; (e8c0 <z_log_msg_post_finalize+0xd8>)
    e872:	e9cd 2300 	strd	r2, r3, [sp]
    e876:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e87a:	2300      	movs	r3, #0
    e87c:	f015 fe1a 	bl	244b4 <z_impl_k_timer_start>
    e880:	e7ed      	b.n	e85e <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e882:	280a      	cmp	r0, #10
    e884:	d1eb      	bne.n	e85e <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    e886:	480e      	ldr	r0, [pc, #56]	; (e8c0 <z_log_msg_post_finalize+0xd8>)
    e888:	f01d f9b3 	bl	2bbf2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    e88c:	480d      	ldr	r0, [pc, #52]	; (e8c4 <z_log_msg_post_finalize+0xdc>)
}
    e88e:	b002      	add	sp, #8
    e890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e894:	f013 b9fc 	b.w	21c90 <z_impl_k_sem_give>
    e898:	20021428 	.word	0x20021428
    e89c:	2002229b 	.word	0x2002229b
    e8a0:	20021418 	.word	0x20021418
    e8a4:	0002ebe3 	.word	0x0002ebe3
    e8a8:	0002ec3c 	.word	0x0002ec3c
    e8ac:	0002dd81 	.word	0x0002dd81
    e8b0:	0002ec51 	.word	0x0002ec51
    e8b4:	0002ec10 	.word	0x0002ec10
    e8b8:	0002ec27 	.word	0x0002ec27
    e8bc:	20021420 	.word	0x20021420
    e8c0:	20009690 	.word	0x20009690
    e8c4:	20008bac 	.word	0x20008bac

0000e8c8 <z_log_msg_commit>:
{
    e8c8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    e8ca:	4b06      	ldr	r3, [pc, #24]	; (e8e4 <z_log_msg_commit+0x1c>)
{
    e8cc:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    e8ce:	681b      	ldr	r3, [r3, #0]
    e8d0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    e8d2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    e8d4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    e8d6:	4804      	ldr	r0, [pc, #16]	; (e8e8 <z_log_msg_commit+0x20>)
    e8d8:	f7ff f9e6 	bl	dca8 <mpsc_pbuf_commit>
}
    e8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    e8e0:	f7ff bf82 	b.w	e7e8 <z_log_msg_post_finalize>
    e8e4:	200083fc 	.word	0x200083fc
    e8e8:	20008a14 	.word	0x20008a14

0000e8ec <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e8ec:	4a04      	ldr	r2, [pc, #16]	; (e900 <log_source_name_get+0x14>)
    e8ee:	4b05      	ldr	r3, [pc, #20]	; (e904 <log_source_name_get+0x18>)
    e8f0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e8f2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e8f6:	bf34      	ite	cc
    e8f8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e8fc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e8fe:	4770      	bx	lr
    e900:	0002cc68 	.word	0x0002cc68
    e904:	0002cdd0 	.word	0x0002cdd0

0000e908 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e908:	4b0e      	ldr	r3, [pc, #56]	; (e944 <log_backend_enable+0x3c>)
{
    e90a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e90c:	1ac3      	subs	r3, r0, r3
    e90e:	111b      	asrs	r3, r3, #4
    e910:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e912:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e914:	b948      	cbnz	r0, e92a <log_backend_enable+0x22>
    e916:	490c      	ldr	r1, [pc, #48]	; (e948 <log_backend_enable+0x40>)
    e918:	480c      	ldr	r0, [pc, #48]	; (e94c <log_backend_enable+0x44>)
    e91a:	23de      	movs	r3, #222	; 0xde
    e91c:	4a0c      	ldr	r2, [pc, #48]	; (e950 <log_backend_enable+0x48>)
    e91e:	f018 fa28 	bl	26d72 <assert_print>
    e922:	21de      	movs	r1, #222	; 0xde
    e924:	480a      	ldr	r0, [pc, #40]	; (e950 <log_backend_enable+0x48>)
    e926:	f018 fa1d 	bl	26d64 <assert_post_action>
	backend->cb->id = id;
    e92a:	6844      	ldr	r4, [r0, #4]
    e92c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e92e:	6843      	ldr	r3, [r0, #4]
    e930:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e932:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e934:	6843      	ldr	r3, [r0, #4]
    e936:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e938:	6843      	ldr	r3, [r0, #4]
    e93a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e940:	f7ff bd90 	b.w	e464 <z_log_notify_backend_enabled>
    e944:	0002cdd0 	.word	0x0002cdd0
    e948:	0002efa1 	.word	0x0002efa1
    e94c:	0002dd81 	.word	0x0002dd81
    e950:	0002ef69 	.word	0x0002ef69

0000e954 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    e954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e958:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    e95c:	b08f      	sub	sp, #60	; 0x3c
    e95e:	f3c1 2649 	ubfx	r6, r1, #9, #10
    e962:	460d      	mov	r5, r1
    e964:	4690      	mov	r8, r2
    e966:	4699      	mov	r9, r3
    e968:	9005      	str	r0, [sp, #20]
    e96a:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    e96c:	2e00      	cmp	r6, #0
    e96e:	d03d      	beq.n	e9ec <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    e970:	f04f 0b04 	mov.w	fp, #4
    e974:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    e978:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    e97a:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    e97c:	4631      	mov	r1, r6
    e97e:	ab0b      	add	r3, sp, #44	; 0x2c
    e980:	4640      	mov	r0, r8
    e982:	f8cd b008 	str.w	fp, [sp, #8]
    e986:	9701      	str	r7, [sp, #4]
    e988:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    e98c:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    e990:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e992:	9607      	str	r6, [sp, #28]
    e994:	f7fd fdfc 	bl	c590 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    e998:	f3c0 0309 	ubfx	r3, r0, #0, #10
    e99c:	1918      	adds	r0, r3, r4
    e99e:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e9a2:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    e9a4:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e9a6:	f363 2552 	bfi	r5, r3, #9, #10
    e9aa:	9306      	str	r3, [sp, #24]
    e9ac:	f7ff fdde 	bl	e56c <z_log_msg_alloc>
		if (msg) {
    e9b0:	4604      	mov	r4, r0
    e9b2:	b308      	cbz	r0, e9f8 <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    e9b4:	2200      	movs	r2, #0
    e9b6:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    e9b8:	3010      	adds	r0, #16
    e9ba:	900b      	str	r0, [sp, #44]	; 0x2c
    e9bc:	930c      	str	r3, [sp, #48]	; 0x30
    e9be:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e9c0:	4640      	mov	r0, r8
    e9c2:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    e9c6:	4a12      	ldr	r2, [pc, #72]	; (ea10 <z_impl_z_log_msg_static_create+0xbc>)
    e9c8:	9907      	ldr	r1, [sp, #28]
    e9ca:	f8cd a000 	str.w	sl, [sp]
    e9ce:	ab0b      	add	r3, sp, #44	; 0x2c
    e9d0:	f7fd fdde 	bl	c590 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    e9d4:	2800      	cmp	r0, #0
    e9d6:	da0f      	bge.n	e9f8 <z_impl_z_log_msg_static_create+0xa4>
    e9d8:	490e      	ldr	r1, [pc, #56]	; (ea14 <z_impl_z_log_msg_static_create+0xc0>)
    e9da:	480f      	ldr	r0, [pc, #60]	; (ea18 <z_impl_z_log_msg_static_create+0xc4>)
    e9dc:	2349      	movs	r3, #73	; 0x49
    e9de:	4a0f      	ldr	r2, [pc, #60]	; (ea1c <z_impl_z_log_msg_static_create+0xc8>)
    e9e0:	f018 f9c7 	bl	26d72 <assert_print>
    e9e4:	2149      	movs	r1, #73	; 0x49
    e9e6:	480d      	ldr	r0, [pc, #52]	; (ea1c <z_impl_z_log_msg_static_create+0xc8>)
    e9e8:	f018 f9bc 	bl	26d64 <assert_post_action>
    e9ec:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e9f0:	0880      	lsrs	r0, r0, #2
    e9f2:	f7ff fdbb 	bl	e56c <z_log_msg_alloc>
    e9f6:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    e9f8:	f366 2552 	bfi	r5, r6, #9, #10
    e9fc:	464b      	mov	r3, r9
    e9fe:	462a      	mov	r2, r5
    ea00:	4620      	mov	r0, r4
    ea02:	9905      	ldr	r1, [sp, #20]
}
    ea04:	b00f      	add	sp, #60	; 0x3c
    ea06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    ea0a:	f018 bb07 	b.w	2701c <z_log_msg_finalize>
    ea0e:	bf00      	nop
    ea10:	00026ff1 	.word	0x00026ff1
    ea14:	0002efed 	.word	0x0002efed
    ea18:	0002dd81 	.word	0x0002dd81
    ea1c:	0002efc1 	.word	0x0002efc1

0000ea20 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    ea20:	b40e      	push	{r1, r2, r3}
    ea22:	b503      	push	{r0, r1, lr}
    ea24:	ab03      	add	r3, sp, #12
    ea26:	f853 2b04 	ldr.w	r2, [r3], #4
    ea2a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    ea2c:	4804      	ldr	r0, [pc, #16]	; (ea40 <print_formatted+0x20>)
	va_start(args, fmt);
    ea2e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    ea30:	f018 fb1b 	bl	2706a <cbvprintf>
	va_end(args);

	return length;
}
    ea34:	b002      	add	sp, #8
    ea36:	f85d eb04 	ldr.w	lr, [sp], #4
    ea3a:	b003      	add	sp, #12
    ea3c:	4770      	bx	lr
    ea3e:	bf00      	nop
    ea40:	0000ea61 	.word	0x0000ea61

0000ea44 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ea44:	06ca      	lsls	r2, r1, #27
    ea46:	d405      	bmi.n	ea54 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ea48:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    ea4a:	bf4c      	ite	mi
    ea4c:	4902      	ldrmi	r1, [pc, #8]	; (ea58 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    ea4e:	4903      	ldrpl	r1, [pc, #12]	; (ea5c <newline_print+0x18>)
    ea50:	f7ff bfe6 	b.w	ea20 <print_formatted>
	}
}
    ea54:	4770      	bx	lr
    ea56:	bf00      	nop
    ea58:	00031dbb 	.word	0x00031dbb
    ea5c:	0002e465 	.word	0x0002e465

0000ea60 <out_func>:
{
    ea60:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    ea62:	684b      	ldr	r3, [r1, #4]
{
    ea64:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    ea66:	681a      	ldr	r2, [r3, #0]
    ea68:	68cb      	ldr	r3, [r1, #12]
{
    ea6a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    ea6c:	429a      	cmp	r2, r3
    ea6e:	d102      	bne.n	ea76 <out_func+0x16>
		log_output_flush(out_ctx);
    ea70:	4608      	mov	r0, r1
    ea72:	f018 fb01 	bl	27078 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ea76:	6863      	ldr	r3, [r4, #4]
    ea78:	e8d3 2fef 	ldaex	r2, [r3]
    ea7c:	1c51      	adds	r1, r2, #1
    ea7e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ea82:	2800      	cmp	r0, #0
    ea84:	d1f8      	bne.n	ea78 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    ea86:	68a3      	ldr	r3, [r4, #8]
    ea88:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    ea8a:	6863      	ldr	r3, [r4, #4]
    ea8c:	681a      	ldr	r2, [r3, #0]
    ea8e:	68e3      	ldr	r3, [r4, #12]
    ea90:	429a      	cmp	r2, r3
    ea92:	d909      	bls.n	eaa8 <out_func+0x48>
    ea94:	4905      	ldr	r1, [pc, #20]	; (eaac <out_func+0x4c>)
    ea96:	4806      	ldr	r0, [pc, #24]	; (eab0 <out_func+0x50>)
    ea98:	2379      	movs	r3, #121	; 0x79
    ea9a:	4a06      	ldr	r2, [pc, #24]	; (eab4 <out_func+0x54>)
    ea9c:	f018 f969 	bl	26d72 <assert_print>
    eaa0:	2179      	movs	r1, #121	; 0x79
    eaa2:	4804      	ldr	r0, [pc, #16]	; (eab4 <out_func+0x54>)
    eaa4:	f018 f95e 	bl	26d64 <assert_post_action>
}
    eaa8:	2000      	movs	r0, #0
    eaaa:	bd38      	pop	{r3, r4, r5, pc}
    eaac:	0002f025 	.word	0x0002f025
    eab0:	0002dd81 	.word	0x0002dd81
    eab4:	0002eff6 	.word	0x0002eff6

0000eab8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eabc:	b089      	sub	sp, #36	; 0x24
    eabe:	469a      	mov	sl, r3
    eac0:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    eac4:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    eac8:	9305      	str	r3, [sp, #20]
    eaca:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eacc:	4604      	mov	r4, r0
    eace:	460d      	mov	r5, r1
    ead0:	9e16      	ldr	r6, [sp, #88]	; 0x58
    ead2:	9206      	str	r2, [sp, #24]
    ead4:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    ead6:	f1bb 0f00 	cmp.w	fp, #0
    eada:	f000 8085 	beq.w	ebe8 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    eade:	f006 0308 	and.w	r3, r6, #8
    eae2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    eae4:	f018 fa82 	bl	26fec <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    eae8:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    eaec:	4602      	mov	r2, r0
    eaee:	2800      	cmp	r0, #0
    eaf0:	d049      	beq.n	eb86 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    eaf2:	4620      	mov	r0, r4
    eaf4:	498c      	ldr	r1, [pc, #560]	; (ed28 <log_output_process+0x270>)
    eaf6:	f7ff ff93 	bl	ea20 <print_formatted>
    eafa:	4680      	mov	r8, r0
	if (stamp) {
    eafc:	f1b9 0f00 	cmp.w	r9, #0
    eb00:	d008      	beq.n	eb14 <log_output_process+0x5c>
	if (!format) {
    eb02:	f016 0f44 	tst.w	r6, #68	; 0x44
    eb06:	d140      	bne.n	eb8a <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    eb08:	462a      	mov	r2, r5
    eb0a:	4620      	mov	r0, r4
    eb0c:	4987      	ldr	r1, [pc, #540]	; (ed2c <log_output_process+0x274>)
    eb0e:	f7ff ff87 	bl	ea20 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    eb12:	4480      	add	r8, r0
	if (color) {
    eb14:	f006 0301 	and.w	r3, r6, #1
    eb18:	b153      	cbz	r3, eb30 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    eb1a:	4b85      	ldr	r3, [pc, #532]	; (ed30 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    eb1c:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    eb1e:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    eb22:	4b84      	ldr	r3, [pc, #528]	; (ed34 <log_output_process+0x27c>)
    eb24:	4984      	ldr	r1, [pc, #528]	; (ed38 <log_output_process+0x280>)
    eb26:	2a00      	cmp	r2, #0
    eb28:	bf08      	it	eq
    eb2a:	461a      	moveq	r2, r3
    eb2c:	f7ff ff78 	bl	ea20 <print_formatted>
	if (level_on) {
    eb30:	f006 0308 	and.w	r3, r6, #8
    eb34:	2b00      	cmp	r3, #0
    eb36:	d054      	beq.n	ebe2 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    eb38:	4b80      	ldr	r3, [pc, #512]	; (ed3c <log_output_process+0x284>)
    eb3a:	4620      	mov	r0, r4
    eb3c:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    eb40:	497f      	ldr	r1, [pc, #508]	; (ed40 <log_output_process+0x288>)
    eb42:	f7ff ff6d 	bl	ea20 <print_formatted>
    eb46:	4605      	mov	r5, r0
	if (domain) {
    eb48:	9b06      	ldr	r3, [sp, #24]
    eb4a:	b12b      	cbz	r3, eb58 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    eb4c:	461a      	mov	r2, r3
    eb4e:	4620      	mov	r0, r4
    eb50:	497c      	ldr	r1, [pc, #496]	; (ed44 <log_output_process+0x28c>)
    eb52:	f7ff ff65 	bl	ea20 <print_formatted>
    eb56:	4405      	add	r5, r0
	if (source) {
    eb58:	f1ba 0f00 	cmp.w	sl, #0
    eb5c:	d005      	beq.n	eb6a <log_output_process+0xb2>
		total += print_formatted(output,
    eb5e:	4652      	mov	r2, sl
    eb60:	4620      	mov	r0, r4
    eb62:	4979      	ldr	r1, [pc, #484]	; (ed48 <log_output_process+0x290>)
    eb64:	f7ff ff5c 	bl	ea20 <print_formatted>
    eb68:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    eb6a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    eb6c:	2f00      	cmp	r7, #0
    eb6e:	d149      	bne.n	ec04 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    eb70:	9b04      	ldr	r3, [sp, #16]
    eb72:	2b00      	cmp	r3, #0
    eb74:	d160      	bne.n	ec38 <log_output_process+0x180>
	if (color) {
    eb76:	07f3      	lsls	r3, r6, #31
    eb78:	f100 80cf 	bmi.w	ed1a <log_output_process+0x262>
	newline_print(output, flags);
    eb7c:	4631      	mov	r1, r6
    eb7e:	4620      	mov	r0, r4
    eb80:	f7ff ff60 	bl	ea44 <newline_print>
}
    eb84:	e0c3      	b.n	ed0e <log_output_process+0x256>
	uint32_t length = 0U;
    eb86:	4680      	mov	r8, r0
    eb88:	e7b8      	b.n	eafc <log_output_process+0x44>
	} else if (freq != 0U) {
    eb8a:	4b70      	ldr	r3, [pc, #448]	; (ed4c <log_output_process+0x294>)
    eb8c:	6818      	ldr	r0, [r3, #0]
    eb8e:	2800      	cmp	r0, #0
    eb90:	d0bf      	beq.n	eb12 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    eb92:	4b6f      	ldr	r3, [pc, #444]	; (ed50 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    eb94:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    eb98:	681b      	ldr	r3, [r3, #0]
    eb9a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    eb9e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    eba2:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    eba6:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    ebaa:	fb09 f505 	mul.w	r5, r9, r5
    ebae:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ebb2:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    ebb6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    ebba:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ebbe:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    ebc2:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ebc6:	fb09 f505 	mul.w	r5, r9, r5
    ebca:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    ebce:	fb0c 1113 	mls	r1, ip, r3, r1
    ebd2:	4620      	mov	r0, r4
    ebd4:	9100      	str	r1, [sp, #0]
    ebd6:	e9cd e501 	strd	lr, r5, [sp, #4]
    ebda:	495e      	ldr	r1, [pc, #376]	; (ed54 <log_output_process+0x29c>)
    ebdc:	f7ff ff20 	bl	ea20 <print_formatted>
    ebe0:	e797      	b.n	eb12 <log_output_process+0x5a>
	int total = 0;
    ebe2:	f006 0508 	and.w	r5, r6, #8
    ebe6:	e7af      	b.n	eb48 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ebe8:	f1ba 0f01 	cmp.w	sl, #1
    ebec:	d106      	bne.n	ebfc <log_output_process+0x144>
	if (package) {
    ebee:	b9ef      	cbnz	r7, ec2c <log_output_process+0x174>
	if (data_len) {
    ebf0:	9b04      	ldr	r3, [sp, #16]
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	f000 808b 	beq.w	ed0e <log_output_process+0x256>
		prefix_offset = 0;
    ebf8:	2500      	movs	r5, #0
    ebfa:	e01d      	b.n	ec38 <log_output_process+0x180>
	if (package) {
    ebfc:	2f00      	cmp	r7, #0
    ebfe:	d0f7      	beq.n	ebf0 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ec00:	4855      	ldr	r0, [pc, #340]	; (ed58 <log_output_process+0x2a0>)
    ec02:	e014      	b.n	ec2e <log_output_process+0x176>
		cb = out_func;
    ec04:	4855      	ldr	r0, [pc, #340]	; (ed5c <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    ec06:	463b      	mov	r3, r7
    ec08:	4622      	mov	r2, r4
    ec0a:	4955      	ldr	r1, [pc, #340]	; (ed60 <log_output_process+0x2a8>)
    ec0c:	f017 fe0b 	bl	26826 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    ec10:	2800      	cmp	r0, #0
    ec12:	da0e      	bge.n	ec32 <log_output_process+0x17a>
    ec14:	4953      	ldr	r1, [pc, #332]	; (ed64 <log_output_process+0x2ac>)
    ec16:	4854      	ldr	r0, [pc, #336]	; (ed68 <log_output_process+0x2b0>)
    ec18:	f44f 7300 	mov.w	r3, #512	; 0x200
    ec1c:	4a53      	ldr	r2, [pc, #332]	; (ed6c <log_output_process+0x2b4>)
    ec1e:	f018 f8a8 	bl	26d72 <assert_print>
    ec22:	f44f 7100 	mov.w	r1, #512	; 0x200
    ec26:	4851      	ldr	r0, [pc, #324]	; (ed6c <log_output_process+0x2b4>)
    ec28:	f018 f89c 	bl	26d64 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ec2c:	484b      	ldr	r0, [pc, #300]	; (ed5c <log_output_process+0x2a4>)
		prefix_offset = 0;
    ec2e:	465d      	mov	r5, fp
    ec30:	e7e9      	b.n	ec06 <log_output_process+0x14e>
	if (data_len) {
    ec32:	9b04      	ldr	r3, [sp, #16]
    ec34:	2b00      	cmp	r3, #0
    ec36:	d066      	beq.n	ed06 <log_output_process+0x24e>
		print_formatted(output, " ");
    ec38:	f8df 8134 	ldr.w	r8, [pc, #308]	; ed70 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    ec3c:	f8df 9134 	ldr.w	r9, [pc, #308]	; ed74 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ec40:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    ec42:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ec44:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    ec46:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ec48:	bf28      	it	cs
    ec4a:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    ec4c:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    ec50:	f7ff fef8 	bl	ea44 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    ec54:	4555      	cmp	r5, sl
    ec56:	dc43      	bgt.n	ece0 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    ec58:	9b05      	ldr	r3, [sp, #20]
    ec5a:	4649      	mov	r1, r9
    ec5c:	4620      	mov	r0, r4
    ec5e:	781a      	ldrb	r2, [r3, #0]
    ec60:	f7ff fede 	bl	ea20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec64:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    ec68:	f01a 0f07 	tst.w	sl, #7
    ec6c:	d103      	bne.n	ec76 <log_output_process+0x1be>
			print_formatted(output, " ");
    ec6e:	4641      	mov	r1, r8
    ec70:	4620      	mov	r0, r4
    ec72:	f7ff fed5 	bl	ea20 <print_formatted>
		if (i < length) {
    ec76:	4557      	cmp	r7, sl
    ec78:	d939      	bls.n	ecee <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    ec7a:	9b05      	ldr	r3, [sp, #20]
    ec7c:	4649      	mov	r1, r9
    ec7e:	4620      	mov	r0, r4
    ec80:	f813 200a 	ldrb.w	r2, [r3, sl]
    ec84:	f7ff fecc 	bl	ea20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec88:	f10a 0a01 	add.w	sl, sl, #1
    ec8c:	f1ba 0f10 	cmp.w	sl, #16
    ec90:	d1ea      	bne.n	ec68 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec92:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    ec96:	4620      	mov	r0, r4
    ec98:	4937      	ldr	r1, [pc, #220]	; (ed78 <log_output_process+0x2c0>)
    ec9a:	f7ff fec1 	bl	ea20 <print_formatted>
		if (i < length) {
    ec9e:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    eca0:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    eca2:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    eca4:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    eca6:	4b35      	ldr	r3, [pc, #212]	; (ed7c <log_output_process+0x2c4>)
    eca8:	5c99      	ldrb	r1, [r3, r2]
    ecaa:	f011 0f97 	tst.w	r1, #151	; 0x97
    ecae:	bf08      	it	eq
    ecb0:	222e      	moveq	r2, #46	; 0x2e
    ecb2:	4933      	ldr	r1, [pc, #204]	; (ed80 <log_output_process+0x2c8>)
    ecb4:	f7ff feb4 	bl	ea20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ecb8:	f10a 0a01 	add.w	sl, sl, #1
    ecbc:	f1ba 0f10 	cmp.w	sl, #16
    ecc0:	d01a      	beq.n	ecf8 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    ecc2:	f01a 0f07 	tst.w	sl, #7
    ecc6:	d103      	bne.n	ecd0 <log_output_process+0x218>
			print_formatted(output, " ");
    ecc8:	4641      	mov	r1, r8
    ecca:	4620      	mov	r0, r4
    eccc:	f7ff fea8 	bl	ea20 <print_formatted>
		if (i < length) {
    ecd0:	4557      	cmp	r7, sl
    ecd2:	4652      	mov	r2, sl
    ecd4:	d8e4      	bhi.n	eca0 <log_output_process+0x1e8>
			print_formatted(output, " ");
    ecd6:	4641      	mov	r1, r8
    ecd8:	4620      	mov	r0, r4
    ecda:	f7ff fea1 	bl	ea20 <print_formatted>
    ecde:	e7eb      	b.n	ecb8 <log_output_process+0x200>
		print_formatted(output, " ");
    ece0:	4641      	mov	r1, r8
    ece2:	4620      	mov	r0, r4
    ece4:	f7ff fe9c 	bl	ea20 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ece8:	f10a 0a01 	add.w	sl, sl, #1
    ecec:	e7b2      	b.n	ec54 <log_output_process+0x19c>
			print_formatted(output, "   ");
    ecee:	4620      	mov	r0, r4
    ecf0:	4924      	ldr	r1, [pc, #144]	; (ed84 <log_output_process+0x2cc>)
    ecf2:	f7ff fe95 	bl	ea20 <print_formatted>
    ecf6:	e7c7      	b.n	ec88 <log_output_process+0x1d0>
		data += length;
    ecf8:	9b05      	ldr	r3, [sp, #20]
    ecfa:	443b      	add	r3, r7
    ecfc:	9305      	str	r3, [sp, #20]
	} while (len);
    ecfe:	9b04      	ldr	r3, [sp, #16]
    ed00:	1bdb      	subs	r3, r3, r7
    ed02:	9304      	str	r3, [sp, #16]
    ed04:	d19c      	bne.n	ec40 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    ed06:	f1bb 0f00 	cmp.w	fp, #0
    ed0a:	f47f af34 	bne.w	eb76 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    ed0e:	4620      	mov	r0, r4
}
    ed10:	b009      	add	sp, #36	; 0x24
    ed12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    ed16:	f018 b9af 	b.w	27078 <log_output_flush>
		print_formatted(output, "%s", log_color);
    ed1a:	4620      	mov	r0, r4
    ed1c:	4a05      	ldr	r2, [pc, #20]	; (ed34 <log_output_process+0x27c>)
    ed1e:	4906      	ldr	r1, [pc, #24]	; (ed38 <log_output_process+0x280>)
    ed20:	f7ff fe7e 	bl	ea20 <print_formatted>
}
    ed24:	e72a      	b.n	eb7c <log_output_process+0xc4>
    ed26:	bf00      	nop
    ed28:	0002f05a 	.word	0x0002f05a
    ed2c:	0002f05e 	.word	0x0002f05e
    ed30:	0002d338 	.word	0x0002d338
    ed34:	0002f055 	.word	0x0002f055
    ed38:	0002df34 	.word	0x0002df34
    ed3c:	0002d34c 	.word	0x0002d34c
    ed40:	0002f083 	.word	0x0002f083
    ed44:	0002f089 	.word	0x0002f089
    ed48:	0002f08d 	.word	0x0002f08d
    ed4c:	20021434 	.word	0x20021434
    ed50:	20021430 	.word	0x20021430
    ed54:	0002f067 	.word	0x0002f067
    ed58:	00027093 	.word	0x00027093
    ed5c:	0000ea61 	.word	0x0000ea61
    ed60:	0002706b 	.word	0x0002706b
    ed64:	0002f092 	.word	0x0002f092
    ed68:	0002dd81 	.word	0x0002dd81
    ed6c:	0002eff6 	.word	0x0002eff6
    ed70:	00032f34 	.word	0x00032f34
    ed74:	0002f09b 	.word	0x0002f09b
    ed78:	0002f0a1 	.word	0x0002f0a1
    ed7c:	00033a74 	.word	0x00033a74
    ed80:	0002f0a3 	.word	0x0002f0a3
    ed84:	00032f32 	.word	0x00032f32

0000ed88 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    ed88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    ed8c:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    ed8e:	684b      	ldr	r3, [r1, #4]
    ed90:	4605      	mov	r5, r0
    ed92:	460c      	mov	r4, r1
    ed94:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    ed96:	688e      	ldr	r6, [r1, #8]
    ed98:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    ed9a:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    ed9e:	b15b      	cbz	r3, edb8 <log_output_msg_process+0x30>
    eda0:	4a13      	ldr	r2, [pc, #76]	; (edf0 <log_output_msg_process+0x68>)
    eda2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    eda4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    eda8:	2900      	cmp	r1, #0
    edaa:	db1f      	blt.n	edec <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    edac:	7820      	ldrb	r0, [r4, #0]
    edae:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    edb2:	f7ff fd9b 	bl	e8ec <log_source_name_get>
    edb6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    edb8:	4621      	mov	r1, r4
    edba:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    edbe:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    edc0:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    edc4:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    edc6:	eb01 0402 	add.w	r4, r1, r2
    edca:	bf08      	it	eq
    edcc:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    edce:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    edd2:	e9cd 0803 	strd	r0, r8, [sp, #12]
    edd6:	e9cd 1401 	strd	r1, r4, [sp, #4]
    edda:	2200      	movs	r2, #0
    eddc:	4631      	mov	r1, r6
    edde:	4628      	mov	r0, r5
    ede0:	9700      	str	r7, [sp, #0]
    ede2:	f7ff fe69 	bl	eab8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    ede6:	b006      	add	sp, #24
    ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    edec:	2300      	movs	r3, #0
    edee:	e7e3      	b.n	edb8 <log_output_msg_process+0x30>
    edf0:	0002cc68 	.word	0x0002cc68

0000edf4 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    edf4:	f242 730f 	movw	r3, #9999	; 0x270f
{
    edf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    edfa:	428b      	cmp	r3, r1
    edfc:	bf28      	it	cs
    edfe:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ee00:	6805      	ldr	r5, [r0, #0]
{
    ee02:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ee04:	2105      	movs	r1, #5
    ee06:	4668      	mov	r0, sp
    ee08:	4a0d      	ldr	r2, [pc, #52]	; (ee40 <log_output_dropped_process+0x4c>)
    ee0a:	f017 fdfd 	bl	26a08 <snprintk>
    ee0e:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ee10:	6863      	ldr	r3, [r4, #4]
    ee12:	4628      	mov	r0, r5
    ee14:	220b      	movs	r2, #11
    ee16:	685b      	ldr	r3, [r3, #4]
    ee18:	490a      	ldr	r1, [pc, #40]	; (ee44 <log_output_dropped_process+0x50>)
    ee1a:	f018 f919 	bl	27050 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ee1e:	6863      	ldr	r3, [r4, #4]
    ee20:	4632      	mov	r2, r6
    ee22:	4669      	mov	r1, sp
    ee24:	4628      	mov	r0, r5
    ee26:	685b      	ldr	r3, [r3, #4]
    ee28:	f018 f912 	bl	27050 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ee2c:	6863      	ldr	r3, [r4, #4]
    ee2e:	221b      	movs	r2, #27
    ee30:	4628      	mov	r0, r5
    ee32:	685b      	ldr	r3, [r3, #4]
    ee34:	4904      	ldr	r1, [pc, #16]	; (ee48 <log_output_dropped_process+0x54>)
    ee36:	f018 f90b 	bl	27050 <buffer_write>
		     output->control_block->ctx);
}
    ee3a:	b002      	add	sp, #8
    ee3c:	bd70      	pop	{r4, r5, r6, pc}
    ee3e:	bf00      	nop
    ee40:	0002df1e 	.word	0x0002df1e
    ee44:	0002f0c2 	.word	0x0002f0c2
    ee48:	0002f0a6 	.word	0x0002f0a6

0000ee4c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ee4c:	2100      	movs	r1, #0
    ee4e:	2301      	movs	r3, #1
    ee50:	4a06      	ldr	r2, [pc, #24]	; (ee6c <log_output_timestamp_freq_set+0x20>)
    ee52:	4290      	cmp	r0, r2
    ee54:	d806      	bhi.n	ee64 <log_output_timestamp_freq_set+0x18>
    ee56:	4a06      	ldr	r2, [pc, #24]	; (ee70 <log_output_timestamp_freq_set+0x24>)
    ee58:	b901      	cbnz	r1, ee5c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    ee5a:	2301      	movs	r3, #1
    ee5c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ee5e:	4b05      	ldr	r3, [pc, #20]	; (ee74 <log_output_timestamp_freq_set+0x28>)
    ee60:	6018      	str	r0, [r3, #0]
}
    ee62:	4770      	bx	lr
		timestamp_div *= 2U;
    ee64:	2101      	movs	r1, #1
		frequency /= 2U;
    ee66:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    ee68:	005b      	lsls	r3, r3, #1
    ee6a:	e7f2      	b.n	ee52 <log_output_timestamp_freq_set+0x6>
    ee6c:	000f4240 	.word	0x000f4240
    ee70:	20021430 	.word	0x20021430
    ee74:	20021434 	.word	0x20021434

0000ee78 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    ee78:	2201      	movs	r2, #1
    ee7a:	4b01      	ldr	r3, [pc, #4]	; (ee80 <log_backend_rtt_init+0x8>)
    ee7c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    ee7e:	4770      	bx	lr
    ee80:	2002229c 	.word	0x2002229c

0000ee84 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    ee84:	4b01      	ldr	r3, [pc, #4]	; (ee8c <format_set+0x8>)
	return 0;
}
    ee86:	2000      	movs	r0, #0
	log_format_current = log_type;
    ee88:	6019      	str	r1, [r3, #0]
}
    ee8a:	4770      	bx	lr
    ee8c:	2002144c 	.word	0x2002144c

0000ee90 <panic>:
	panic_mode = true;
    ee90:	2201      	movs	r2, #1
    ee92:	4b02      	ldr	r3, [pc, #8]	; (ee9c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    ee94:	4802      	ldr	r0, [pc, #8]	; (eea0 <panic+0x10>)
    ee96:	701a      	strb	r2, [r3, #0]
    ee98:	f018 b8ee 	b.w	27078 <log_output_flush>
    ee9c:	2002229d 	.word	0x2002229d
    eea0:	0002d37c 	.word	0x0002d37c

0000eea4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    eea4:	4801      	ldr	r0, [pc, #4]	; (eeac <dropped+0x8>)
    eea6:	f7ff bfa5 	b.w	edf4 <log_output_dropped_process>
    eeaa:	bf00      	nop
    eeac:	0002d37c 	.word	0x0002d37c

0000eeb0 <process>:
{
    eeb0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    eeb2:	4b06      	ldr	r3, [pc, #24]	; (eecc <process+0x1c>)
{
    eeb4:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    eeb6:	6818      	ldr	r0, [r3, #0]
    eeb8:	f7ff fabe 	bl	e438 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    eebc:	4621      	mov	r1, r4
}
    eebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    eec2:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    eec4:	220f      	movs	r2, #15
    eec6:	4802      	ldr	r0, [pc, #8]	; (eed0 <process+0x20>)
    eec8:	4718      	bx	r3
    eeca:	bf00      	nop
    eecc:	2002144c 	.word	0x2002144c
    eed0:	0002d37c 	.word	0x0002d37c

0000eed4 <on_failed_write>:
	if (retry_cnt == 0) {
    eed4:	b910      	cbnz	r0, eedc <on_failed_write+0x8>
		host_present = false;
    eed6:	4b07      	ldr	r3, [pc, #28]	; (eef4 <on_failed_write+0x20>)
    eed8:	7018      	strb	r0, [r3, #0]
}
    eeda:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    eedc:	4b06      	ldr	r3, [pc, #24]	; (eef8 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    eede:	781b      	ldrb	r3, [r3, #0]
    eee0:	b11b      	cbz	r3, eeea <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    eee2:	f241 3088 	movw	r0, #5000	; 0x1388
    eee6:	f01c be52 	b.w	2bb8e <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    eeea:	20a4      	movs	r0, #164	; 0xa4
    eeec:	2100      	movs	r1, #0
    eeee:	f014 bdc3 	b.w	23a78 <z_impl_k_sleep>
    eef2:	bf00      	nop
    eef4:	2002229c 	.word	0x2002229c
    eef8:	2002229d 	.word	0x2002229d

0000eefc <data_out_block_mode>:
{
    eefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef00:	4680      	mov	r8, r0
    ef02:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    ef04:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    ef06:	f8df 9070 	ldr.w	r9, [pc, #112]	; ef78 <data_out_block_mode+0x7c>
    ef0a:	4f1c      	ldr	r7, [pc, #112]	; (ef7c <data_out_block_mode+0x80>)
		if (!is_sync_mode()) {
    ef0c:	f899 5000 	ldrb.w	r5, [r9]
    ef10:	b995      	cbnz	r5, ef38 <data_out_block_mode+0x3c>
			RTT_LOCK();
    ef12:	f011 ff15 	bl	20d40 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ef16:	4628      	mov	r0, r5
    ef18:	4632      	mov	r2, r6
    ef1a:	4641      	mov	r1, r8
    ef1c:	f011 febe 	bl	20c9c <SEGGER_RTT_WriteSkipNoLock>
    ef20:	4605      	mov	r5, r0
			RTT_UNLOCK();
    ef22:	f011 ff17 	bl	20d54 <zephyr_rtt_mutex_unlock>
		if (ret) {
    ef26:	b1e5      	cbz	r5, ef62 <data_out_block_mode+0x66>
	host_present = true;
    ef28:	2301      	movs	r3, #1
    ef2a:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    ef2c:	f899 3000 	ldrb.w	r3, [r9]
    ef30:	b973      	cbnz	r3, ef50 <data_out_block_mode+0x54>
}
    ef32:	4630      	mov	r0, r6
    ef34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ef38:	4632      	mov	r2, r6
    ef3a:	4641      	mov	r1, r8
    ef3c:	2000      	movs	r0, #0
    ef3e:	f011 fead 	bl	20c9c <SEGGER_RTT_WriteSkipNoLock>
    ef42:	4605      	mov	r5, r0
    ef44:	e7ef      	b.n	ef26 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    ef46:	4620      	mov	r0, r4
    ef48:	1e65      	subs	r5, r4, #1
    ef4a:	f7ff ffc3 	bl	eed4 <on_failed_write>
    ef4e:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    ef50:	2000      	movs	r0, #0
    ef52:	f011 feeb 	bl	20d2c <SEGGER_RTT_HasDataUp>
    ef56:	2800      	cmp	r0, #0
    ef58:	d0eb      	beq.n	ef32 <data_out_block_mode+0x36>
    ef5a:	783b      	ldrb	r3, [r7, #0]
    ef5c:	2b00      	cmp	r3, #0
    ef5e:	d1f2      	bne.n	ef46 <data_out_block_mode+0x4a>
    ef60:	e7e7      	b.n	ef32 <data_out_block_mode+0x36>
		} else if (host_present) {
    ef62:	783b      	ldrb	r3, [r7, #0]
    ef64:	2b00      	cmp	r3, #0
    ef66:	d0e4      	beq.n	ef32 <data_out_block_mode+0x36>
			retry_cnt--;
    ef68:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    ef6a:	4620      	mov	r0, r4
    ef6c:	f7ff ffb2 	bl	eed4 <on_failed_write>
	} while ((ret == 0) && host_present);
    ef70:	783b      	ldrb	r3, [r7, #0]
    ef72:	2b00      	cmp	r3, #0
    ef74:	d1ca      	bne.n	ef0c <data_out_block_mode+0x10>
    ef76:	e7dc      	b.n	ef32 <data_out_block_mode+0x36>
    ef78:	2002229d 	.word	0x2002229d
    ef7c:	2002229c 	.word	0x2002229c

0000ef80 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    ef80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ef84:	460f      	mov	r7, r1
    ef86:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ef88:	2108      	movs	r1, #8
    ef8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ef8c:	f018 f91f 	bl	271ce <nvs_al_size.isra.0>
    ef90:	4680      	mov	r8, r0

	*addr -= ate_size;
    ef92:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    ef94:	f8df 9048 	ldr.w	r9, [pc, #72]	; efe0 <nvs_recover_last_ate+0x60>
	*addr -= ate_size;
    ef98:	1a24      	subs	r4, r4, r0
    ef9a:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    ef9c:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    efa0:	42ac      	cmp	r4, r5
    efa2:	d803      	bhi.n	efac <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    efa4:	2000      	movs	r0, #0
}
    efa6:	b003      	add	sp, #12
    efa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    efac:	2308      	movs	r3, #8
    efae:	466a      	mov	r2, sp
    efb0:	4621      	mov	r1, r4
    efb2:	4630      	mov	r0, r6
    efb4:	f018 f87b 	bl	270ae <nvs_flash_rd>
		if (rc) {
    efb8:	2800      	cmp	r0, #0
    efba:	d1f4      	bne.n	efa6 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    efbc:	4669      	mov	r1, sp
    efbe:	4630      	mov	r0, r6
    efc0:	f018 f90f 	bl	271e2 <nvs_ate_valid>
    efc4:	b140      	cbz	r0, efd8 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    efc6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    efca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    efce:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    efd2:	4413      	add	r3, r2
    efd4:	441d      	add	r5, r3
			*addr = ate_end_addr;
    efd6:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
    efd8:	eba4 0408 	sub.w	r4, r4, r8
    efdc:	e7e0      	b.n	efa0 <nvs_recover_last_ate+0x20>
    efde:	bf00      	nop
    efe0:	ffff0000 	.word	0xffff0000

0000efe4 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    efe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efe8:	b08f      	sub	sp, #60	; 0x3c
    efea:	4604      	mov	r4, r0
    efec:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    efee:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    eff2:	4640      	mov	r0, r8
    eff4:	f01c fceb 	bl	2b9ce <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    eff8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    effa:	6883      	ldr	r3, [r0, #8]
    effc:	68db      	ldr	r3, [r3, #12]
    effe:	4798      	blx	r3
    f000:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    f002:	b988      	cbnz	r0, f028 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    f004:	4b8d      	ldr	r3, [pc, #564]	; (f23c <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
    f006:	637b      	str	r3, [r7, #52]	; 0x34
    f008:	2302      	movs	r3, #2
		return -EINVAL;
    f00a:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
    f00e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f012:	488b      	ldr	r0, [pc, #556]	; (f240 <nvs_mount+0x25c>)
    f014:	633b      	str	r3, [r7, #48]	; 0x30
    f016:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f01a:	f018 f8d5 	bl	271c8 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    f01e:	4628      	mov	r0, r5
    f020:	373c      	adds	r7, #60	; 0x3c
    f022:	46bd      	mov	sp, r7
    f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    f028:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    f02a:	6883      	ldr	r3, [r0, #8]
    f02c:	68db      	ldr	r3, [r3, #12]
    f02e:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    f030:	6803      	ldr	r3, [r0, #0]
    f032:	3b01      	subs	r3, #1
    f034:	2b1f      	cmp	r3, #31
    f036:	d901      	bls.n	f03c <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    f038:	4b82      	ldr	r3, [pc, #520]	; (f244 <nvs_mount+0x260>)
    f03a:	e7e4      	b.n	f006 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    f03c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f03e:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    f040:	f107 0214 	add.w	r2, r7, #20
    f044:	f01b fb08 	bl	2a658 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    f048:	b108      	cbz	r0, f04e <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    f04a:	4b7f      	ldr	r3, [pc, #508]	; (f248 <nvs_mount+0x264>)
    f04c:	e7db      	b.n	f006 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    f04e:	89a5      	ldrh	r5, [r4, #12]
    f050:	b12d      	cbz	r5, f05e <nvs_mount+0x7a>
    f052:	69bb      	ldr	r3, [r7, #24]
    f054:	fbb5 f2f3 	udiv	r2, r5, r3
    f058:	fb03 5512 	mls	r5, r3, r2, r5
    f05c:	b10d      	cbz	r5, f062 <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    f05e:	4b7b      	ldr	r3, [pc, #492]	; (f24c <nvs_mount+0x268>)
    f060:	e7d1      	b.n	f006 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    f062:	89e3      	ldrh	r3, [r4, #14]
    f064:	2b01      	cmp	r3, #1
    f066:	d801      	bhi.n	f06c <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    f068:	4b79      	ldr	r3, [pc, #484]	; (f250 <nvs_mount+0x26c>)
    f06a:	e7cc      	b.n	f006 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    f06c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    f06e:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    f070:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f074:	f04f 33ff 	mov.w	r3, #4294967295
    f078:	f04f 32ff 	mov.w	r2, #4294967295
    f07c:	4640      	mov	r0, r8
    f07e:	f012 fba5 	bl	217cc <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f082:	2108      	movs	r1, #8
    f084:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f086:	f018 f8a2 	bl	271ce <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    f08a:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f08c:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    f08e:	89e3      	ldrh	r3, [r4, #14]
    f090:	fa1f fb85 	uxth.w	fp, r5
    f094:	455b      	cmp	r3, fp
    f096:	d808      	bhi.n	f0aa <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
    f098:	89e3      	ldrh	r3, [r4, #14]
    f09a:	454b      	cmp	r3, r9
    f09c:	d123      	bne.n	f0e6 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
    f09e:	4640      	mov	r0, r8
    f0a0:	f012 fc64 	bl	2196c <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    f0a4:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    f0a8:	e7b9      	b.n	f01e <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
    f0aa:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    f0ac:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    f0ae:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    f0b0:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f0b4:	4652      	mov	r2, sl
    f0b6:	2308      	movs	r3, #8
    f0b8:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    f0ba:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f0bc:	f018 f845 	bl	2714a <nvs_flash_cmp_const>
		if (rc) {
    f0c0:	b178      	cbz	r0, f0e2 <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
    f0c2:	4639      	mov	r1, r7
    f0c4:	4620      	mov	r0, r4
    f0c6:	f018 f800 	bl	270ca <nvs_sector_advance>
			closed_sectors++;
    f0ca:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f0ce:	2308      	movs	r3, #8
    f0d0:	4652      	mov	r2, sl
    f0d2:	4620      	mov	r0, r4
    f0d4:	6839      	ldr	r1, [r7, #0]
			closed_sectors++;
    f0d6:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f0da:	f018 f836 	bl	2714a <nvs_flash_cmp_const>
			if (!rc) {
    f0de:	2800      	cmp	r0, #0
    f0e0:	d0da      	beq.n	f098 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    f0e2:	3501      	adds	r5, #1
    f0e4:	e7d3      	b.n	f08e <nvs_mount+0xaa>
	if (i == fs->sector_count) {
    f0e6:	455b      	cmp	r3, fp
    f0e8:	d10b      	bne.n	f102 <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    f0ea:	6839      	ldr	r1, [r7, #0]
    f0ec:	2308      	movs	r3, #8
    f0ee:	4652      	mov	r2, sl
    f0f0:	4620      	mov	r0, r4
    f0f2:	1b89      	subs	r1, r1, r6
    f0f4:	f018 f829 	bl	2714a <nvs_flash_cmp_const>
		if (!rc) {
    f0f8:	b918      	cbnz	r0, f102 <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
    f0fa:	4639      	mov	r1, r7
    f0fc:	4620      	mov	r0, r4
    f0fe:	f017 ffe4 	bl	270ca <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    f102:	4639      	mov	r1, r7
    f104:	4620      	mov	r0, r4
    f106:	f7ff ff3b 	bl	ef80 <nvs_recover_last_ate>
	if (rc) {
    f10a:	4605      	mov	r5, r0
    f10c:	b118      	cbz	r0, f116 <nvs_mount+0x132>
    f10e:	4640      	mov	r0, r8
    f110:	f012 fc2c 	bl	2196c <z_impl_k_mutex_unlock>
	if (rc) {
    f114:	e783      	b.n	f01e <nvs_mount+0x3a>
	fs->ate_wra = addr;
    f116:	683b      	ldr	r3, [r7, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f118:	ea4f 4913 	mov.w	r9, r3, lsr #16
    f11c:	ea4f 4909 	mov.w	r9, r9, lsl #16
	fs->ate_wra = addr;
    f120:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f122:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    f126:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    f12a:	4299      	cmp	r1, r3
    f12c:	d30f      	bcc.n	f14e <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f12e:	2308      	movs	r3, #8
    f130:	4620      	mov	r0, r4
    f132:	1d3a      	adds	r2, r7, #4
    f134:	f017 ffbb 	bl	270ae <nvs_flash_rd>
		if (rc) {
    f138:	4605      	mov	r5, r0
    f13a:	2800      	cmp	r0, #0
    f13c:	d1e7      	bne.n	f10e <nvs_mount+0x12a>
    f13e:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    f140:	f813 2b01 	ldrb.w	r2, [r3], #1
    f144:	4592      	cmp	sl, r2
    f146:	d144      	bne.n	f1d2 <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f148:	3501      	adds	r5, #1
    f14a:	2d08      	cmp	r5, #8
    f14c:	d1f8      	bne.n	f140 <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f14e:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    f150:	4639      	mov	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f152:	0c1b      	lsrs	r3, r3, #16
    f154:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    f156:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f158:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    f15a:	f017 ffb6 	bl	270ca <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    f15e:	4652      	mov	r2, sl
    f160:	4620      	mov	r0, r4
    f162:	89a3      	ldrh	r3, [r4, #12]
    f164:	6839      	ldr	r1, [r7, #0]
    f166:	f017 fff0 	bl	2714a <nvs_flash_cmp_const>
	if (rc < 0) {
    f16a:	1e05      	subs	r5, r0, #0
    f16c:	dbcf      	blt.n	f10e <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
    f16e:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    f170:	f000 8082 	beq.w	f278 <nvs_mount+0x294>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f174:	f64f 7aff 	movw	sl, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    f178:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f17c:	89a3      	ldrh	r3, [r4, #12]
    f17e:	fa1f f289 	uxth.w	r2, r9
    f182:	1b9b      	subs	r3, r3, r6
    f184:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    f186:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f18a:	d33c      	bcc.n	f206 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
    f18c:	4b31      	ldr	r3, [pc, #196]	; (f254 <nvs_mount+0x270>)
    f18e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f192:	637b      	str	r3, [r7, #52]	; 0x34
    f194:	2302      	movs	r3, #2
    f196:	482a      	ldr	r0, [pc, #168]	; (f240 <nvs_mount+0x25c>)
    f198:	633b      	str	r3, [r7, #48]	; 0x30
    f19a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f19e:	f018 f813 	bl	271c8 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f1a2:	4620      	mov	r0, r4
    f1a4:	6861      	ldr	r1, [r4, #4]
    f1a6:	f017 fff5 	bl	27194 <nvs_flash_erase_sector>
		if (rc) {
    f1aa:	4605      	mov	r5, r0
    f1ac:	2800      	cmp	r0, #0
    f1ae:	d1ae      	bne.n	f10e <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
    f1b0:	6863      	ldr	r3, [r4, #4]
    f1b2:	4a29      	ldr	r2, [pc, #164]	; (f258 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f1b4:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    f1b6:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f1b8:	440b      	add	r3, r1
    f1ba:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    f1be:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f1c0:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    f1c2:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f1c4:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f1c6:	f018 f8ee 	bl	273a6 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    f1ca:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f1cc:	2d00      	cmp	r5, #0
    f1ce:	d06f      	beq.n	f2b0 <nvs_mount+0x2cc>
    f1d0:	e79d      	b.n	f10e <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
    f1d2:	4620      	mov	r0, r4
    f1d4:	1d39      	adds	r1, r7, #4
    f1d6:	f018 f804 	bl	271e2 <nvs_ate_valid>
    f1da:	6862      	ldr	r2, [r4, #4]
    f1dc:	b910      	cbnz	r0, f1e4 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
    f1de:	1b92      	subs	r2, r2, r6
    f1e0:	6062      	str	r2, [r4, #4]
    f1e2:	e7a0      	b.n	f126 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f1e4:	893d      	ldrh	r5, [r7, #8]
    f1e6:	88f9      	ldrh	r1, [r7, #6]
    f1e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    f1ea:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f1ee:	4429      	add	r1, r5
    f1f0:	f017 ffed 	bl	271ce <nvs_al_size.isra.0>
    f1f4:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f1f6:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f1f8:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f1fa:	d1f0      	bne.n	f1de <nvs_mount+0x1fa>
    f1fc:	2d00      	cmp	r5, #0
    f1fe:	d0ee      	beq.n	f1de <nvs_mount+0x1fa>
				rc = -ESPIPE;
    f200:	f06f 051c 	mvn.w	r5, #28
    f204:	e09c      	b.n	f340 <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f206:	2308      	movs	r3, #8
    f208:	4649      	mov	r1, r9
    f20a:	4620      	mov	r0, r4
    f20c:	f107 020c 	add.w	r2, r7, #12
    f210:	f017 ff4d 	bl	270ae <nvs_flash_rd>
			if (rc) {
    f214:	4605      	mov	r5, r0
    f216:	2800      	cmp	r0, #0
    f218:	f47f af79 	bne.w	f10e <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    f21c:	4620      	mov	r0, r4
    f21e:	f107 010c 	add.w	r1, r7, #12
    f222:	f017 ffde 	bl	271e2 <nvs_ate_valid>
    f226:	b130      	cbz	r0, f236 <nvs_mount+0x252>
    f228:	89bb      	ldrh	r3, [r7, #12]
    f22a:	4553      	cmp	r3, sl
    f22c:	d103      	bne.n	f236 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
    f22e:	8a3b      	ldrh	r3, [r7, #16]
    f230:	2b00      	cmp	r3, #0
    f232:	f000 808b 	beq.w	f34c <nvs_mount+0x368>
			addr += ate_size;
    f236:	44b1      	add	r9, r6
    f238:	e7a0      	b.n	f17c <nvs_mount+0x198>
    f23a:	bf00      	nop
    f23c:	0002f112 	.word	0x0002f112
    f240:	0002cd48 	.word	0x0002cd48
    f244:	0002f134 	.word	0x0002f134
    f248:	0002f151 	.word	0x0002f151
    f24c:	0002f169 	.word	0x0002f169
    f250:	0002f17d 	.word	0x0002f17d
    f254:	0002f1da 	.word	0x0002f1da
    f258:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    f25c:	4652      	mov	r2, sl
    f25e:	4620      	mov	r0, r4
    f260:	1a5b      	subs	r3, r3, r1
    f262:	f017 ff72 	bl	2714a <nvs_flash_cmp_const>
		if (rc < 0) {
    f266:	1e05      	subs	r5, r0, #0
    f268:	f6ff af51 	blt.w	f10e <nvs_mount+0x12a>
		if (!rc) {
    f26c:	d008      	beq.n	f280 <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    f26e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f270:	68a3      	ldr	r3, [r4, #8]
    f272:	6812      	ldr	r2, [r2, #0]
    f274:	4413      	add	r3, r2
    f276:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    f278:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    f27c:	428b      	cmp	r3, r1
    f27e:	d8ed      	bhi.n	f25c <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f280:	6861      	ldr	r1, [r4, #4]
    f282:	89a3      	ldrh	r3, [r4, #12]
    f284:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    f288:	429a      	cmp	r2, r3
    f28a:	d19f      	bne.n	f1cc <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f28c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; f37c <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f290:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f292:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f296:	4293      	cmp	r3, r2
    f298:	d098      	beq.n	f1cc <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f29a:	4620      	mov	r0, r4
    f29c:	f017 ff7a 	bl	27194 <nvs_flash_erase_sector>
		if (rc) {
    f2a0:	4605      	mov	r5, r0
    f2a2:	2800      	cmp	r0, #0
    f2a4:	f47f af33 	bne.w	f10e <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f2a8:	6863      	ldr	r3, [r4, #4]
    f2aa:	ea03 0309 	and.w	r3, r3, r9
    f2ae:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    f2b0:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f2b2:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    f2b4:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f2b8:	429a      	cmp	r2, r3
    f2ba:	d03d      	beq.n	f338 <nvs_mount+0x354>
    f2bc:	4640      	mov	r0, r8
    f2be:	f012 fb55 	bl	2196c <z_impl_k_mutex_unlock>
	fs->ready = true;
    f2c2:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f2c4:	46e8      	mov	r8, sp
    f2c6:	b088      	sub	sp, #32
	fs->ready = true;
    f2c8:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f2ca:	466d      	mov	r5, sp
    f2cc:	89e2      	ldrh	r2, [r4, #14]
    f2ce:	89a3      	ldrh	r3, [r4, #12]
    f2d0:	f04f 0904 	mov.w	r9, #4
    f2d4:	462e      	mov	r6, r5
    f2d6:	492a      	ldr	r1, [pc, #168]	; (f380 <nvs_mount+0x39c>)
    f2d8:	61eb      	str	r3, [r5, #28]
    f2da:	e9c5 1205 	strd	r1, r2, [r5, #20]
    f2de:	f846 9f10 	str.w	r9, [r6, #16]!
    f2e2:	4632      	mov	r2, r6
    f2e4:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f2e8:	4826      	ldr	r0, [pc, #152]	; (f384 <nvs_mount+0x3a0>)
    f2ea:	f017 ff6d 	bl	271c8 <z_log_msg_static_create.constprop.0>
    f2ee:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
    f2f0:	6863      	ldr	r3, [r4, #4]
    f2f2:	46ad      	mov	sp, r5
    f2f4:	4a24      	ldr	r2, [pc, #144]	; (f388 <nvs_mount+0x3a4>)
    f2f6:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f2fa:	616a      	str	r2, [r5, #20]
    f2fc:	0c1a      	lsrs	r2, r3, #16
    f2fe:	b29b      	uxth	r3, r3
    f300:	61aa      	str	r2, [r5, #24]
    f302:	61eb      	str	r3, [r5, #28]
    f304:	4632      	mov	r2, r6
    f306:	481f      	ldr	r0, [pc, #124]	; (f384 <nvs_mount+0x3a0>)
    f308:	f8c5 9010 	str.w	r9, [r5, #16]
    f30c:	f017 ff5c 	bl	271c8 <z_log_msg_static_create.constprop.0>
    f310:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
    f312:	68a3      	ldr	r3, [r4, #8]
    f314:	46ad      	mov	sp, r5
    f316:	4a1d      	ldr	r2, [pc, #116]	; (f38c <nvs_mount+0x3a8>)
    f318:	f8c5 9010 	str.w	r9, [r5, #16]
    f31c:	616a      	str	r2, [r5, #20]
    f31e:	0c1a      	lsrs	r2, r3, #16
    f320:	b29b      	uxth	r3, r3
    f322:	61aa      	str	r2, [r5, #24]
    f324:	61eb      	str	r3, [r5, #28]
    f326:	4632      	mov	r2, r6
    f328:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f32c:	4815      	ldr	r0, [pc, #84]	; (f384 <nvs_mount+0x3a0>)
    f32e:	f017 ff4b 	bl	271c8 <z_log_msg_static_create.constprop.0>
	return 0;
    f332:	2500      	movs	r5, #0
    f334:	46c5      	mov	sp, r8
    f336:	e672      	b.n	f01e <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
    f338:	4620      	mov	r0, r4
    f33a:	f018 f81f 	bl	2737c <nvs_add_gc_done_ate>
    f33e:	4605      	mov	r5, r0
    f340:	4640      	mov	r0, r8
    f342:	f012 fb13 	bl	2196c <z_impl_k_mutex_unlock>
	if (rc) {
    f346:	2d00      	cmp	r5, #0
    f348:	d0bb      	beq.n	f2c2 <nvs_mount+0x2de>
    f34a:	e668      	b.n	f01e <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    f34c:	4b10      	ldr	r3, [pc, #64]	; (f390 <nvs_mount+0x3ac>)
    f34e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f352:	637b      	str	r3, [r7, #52]	; 0x34
    f354:	2302      	movs	r3, #2
    f356:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f35a:	633b      	str	r3, [r7, #48]	; 0x30
    f35c:	4809      	ldr	r0, [pc, #36]	; (f384 <nvs_mount+0x3a0>)
    f35e:	f017 ff33 	bl	271c8 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f362:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    f364:	4639      	mov	r1, r7
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f366:	0c1b      	lsrs	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    f368:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f36a:	041b      	lsls	r3, r3, #16
    f36c:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    f36e:	f017 feac 	bl	270ca <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    f372:	4620      	mov	r0, r4
    f374:	6839      	ldr	r1, [r7, #0]
    f376:	f017 ff0d 	bl	27194 <nvs_flash_erase_sector>
    f37a:	e726      	b.n	f1ca <nvs_mount+0x1e6>
    f37c:	ffff0000 	.word	0xffff0000
    f380:	0002f1a0 	.word	0x0002f1a0
    f384:	0002cd48 	.word	0x0002cd48
    f388:	0002f1b7 	.word	0x0002f1b7
    f38c:	0002f1c9 	.word	0x0002f1c9
    f390:	0002f201 	.word	0x0002f201

0000f394 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    f394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f398:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    f39a:	7c03      	ldrb	r3, [r0, #16]
{
    f39c:	4604      	mov	r4, r0
    f39e:	4689      	mov	r9, r1
    f3a0:	4690      	mov	r8, r2
    f3a2:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    f3a4:	b97b      	cbnz	r3, f3c6 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    f3a6:	4b66      	ldr	r3, [pc, #408]	; (f540 <nvs_write+0x1ac>)
		return -EACCES;
    f3a8:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
    f3ac:	930b      	str	r3, [sp, #44]	; 0x2c
    f3ae:	2302      	movs	r3, #2
    f3b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f3b4:	4863      	ldr	r0, [pc, #396]	; (f544 <nvs_write+0x1b0>)
    f3b6:	aa0a      	add	r2, sp, #40	; 0x28
    f3b8:	930a      	str	r3, [sp, #40]	; 0x28
    f3ba:	f017 ff05 	bl	271c8 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    f3be:	4630      	mov	r0, r6
    f3c0:	b00d      	add	sp, #52	; 0x34
    f3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f3c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    f3c8:	2108      	movs	r1, #8
    f3ca:	4610      	mov	r0, r2
    f3cc:	f017 feff 	bl	271ce <nvs_al_size.isra.0>
    f3d0:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    f3d2:	4629      	mov	r1, r5
    f3d4:	4610      	mov	r0, r2
    f3d6:	f017 fefa 	bl	271ce <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f3da:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    f3dc:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f3de:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    f3e2:	42ab      	cmp	r3, r5
    f3e4:	f0c0 80a9 	bcc.w	f53a <nvs_write+0x1a6>
    f3e8:	b11d      	cbz	r5, f3f2 <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    f3ea:	f1b8 0f00 	cmp.w	r8, #0
    f3ee:	f000 80a4 	beq.w	f53a <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    f3f2:	6863      	ldr	r3, [r4, #4]
    f3f4:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f3f6:	4620      	mov	r0, r4
    f3f8:	aa04      	add	r2, sp, #16
    f3fa:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    f3fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f400:	f017 ff27 	bl	27252 <nvs_prev_ate>
		if (rc) {
    f404:	4606      	mov	r6, r0
    f406:	2800      	cmp	r0, #0
    f408:	d1d9      	bne.n	f3be <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f40a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f40e:	454b      	cmp	r3, r9
    f410:	d005      	beq.n	f41e <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    f412:	6862      	ldr	r2, [r4, #4]
    f414:	9b03      	ldr	r3, [sp, #12]
    f416:	429a      	cmp	r2, r3
    f418:	d1ed      	bne.n	f3f6 <nvs_write+0x62>
		if (len == 0) {
    f41a:	b9e5      	cbnz	r5, f456 <nvs_write+0xc2>
    f41c:	e7cf      	b.n	f3be <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f41e:	4620      	mov	r0, r4
    f420:	a904      	add	r1, sp, #16
    f422:	f017 fede 	bl	271e2 <nvs_ate_valid>
    f426:	2800      	cmp	r0, #0
    f428:	d0f3      	beq.n	f412 <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
    f42a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    f42e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    f432:	b175      	cbz	r5, f452 <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    f434:	42ab      	cmp	r3, r5
    f436:	d10e      	bne.n	f456 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
    f438:	ea4f 411b 	mov.w	r1, fp, lsr #16
    f43c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f43e:	4401      	add	r1, r0
    f440:	462b      	mov	r3, r5
    f442:	4642      	mov	r2, r8
    f444:	4620      	mov	r0, r4
    f446:	f017 fe4d 	bl	270e4 <nvs_flash_block_cmp>
			if (rc <= 0) {
    f44a:	2800      	cmp	r0, #0
    f44c:	dc03      	bgt.n	f456 <nvs_write+0xc2>
    f44e:	4606      	mov	r6, r0
    f450:	e7b5      	b.n	f3be <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    f452:	2b00      	cmp	r3, #0
    f454:	d0b3      	beq.n	f3be <nvs_write+0x2a>
	if (data_size) {
    f456:	2f00      	cmp	r7, #0
    f458:	d13e      	bne.n	f4d8 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f45a:	f104 0314 	add.w	r3, r4, #20
    f45e:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f460:	f04f 32ff 	mov.w	r2, #4294967295
    f464:	f04f 33ff 	mov.w	r3, #4294967295
    f468:	f104 0014 	add.w	r0, r4, #20
    f46c:	f012 f9ae 	bl	217cc <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f470:	f8df b0d4 	ldr.w	fp, [pc, #212]	; f548 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f474:	89e3      	ldrh	r3, [r4, #14]
    f476:	429e      	cmp	r6, r3
    f478:	d05c      	beq.n	f534 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f47a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f47e:	18f9      	adds	r1, r7, r3
    f480:	428a      	cmp	r2, r1
    f482:	d32c      	bcc.n	f4de <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f484:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    f488:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f48a:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    f48c:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    f490:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    f494:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    f498:	f017 fe4e 	bl	27138 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f49c:	462b      	mov	r3, r5
    f49e:	4642      	mov	r2, r8
    f4a0:	68a1      	ldr	r1, [r4, #8]
    f4a2:	4620      	mov	r0, r4
    f4a4:	f017 ff1f 	bl	272e6 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f4a8:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f4aa:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f4ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f4ae:	f017 fe8e 	bl	271ce <nvs_al_size.isra.0>
    f4b2:	68a2      	ldr	r2, [r4, #8]
    f4b4:	4402      	add	r2, r0
    f4b6:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f4b8:	f1ba 0f00 	cmp.w	sl, #0
    f4bc:	d107      	bne.n	f4ce <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f4be:	4620      	mov	r0, r4
    f4c0:	a906      	add	r1, sp, #24
    f4c2:	f017 ff4a 	bl	2735a <nvs_flash_ate_wrt>
	rc = len;
    f4c6:	2800      	cmp	r0, #0
    f4c8:	bf14      	ite	ne
    f4ca:	4682      	movne	sl, r0
    f4cc:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    f4ce:	9801      	ldr	r0, [sp, #4]
    f4d0:	f012 fa4c 	bl	2196c <z_impl_k_mutex_unlock>
	return rc;
    f4d4:	4656      	mov	r6, sl
    f4d6:	e772      	b.n	f3be <nvs_write+0x2a>
		required_space = data_size + ate_size;
    f4d8:	4457      	add	r7, sl
    f4da:	b2bf      	uxth	r7, r7
    f4dc:	e7bd      	b.n	f45a <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f4de:	2108      	movs	r1, #8
    f4e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f4e2:	f017 fe74 	bl	271ce <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    f4e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f4ea:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    f4ee:	2300      	movs	r3, #0
    f4f0:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    f4f4:	1813      	adds	r3, r2, r0
    f4f6:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    f4fa:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    f4fc:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    f500:	441a      	add	r2, r3
    f502:	1a10      	subs	r0, r2, r0
    f504:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    f506:	a806      	add	r0, sp, #24
    f508:	f017 fe16 	bl	27138 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    f50c:	a906      	add	r1, sp, #24
    f50e:	4620      	mov	r0, r4
    f510:	f017 ff23 	bl	2735a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    f514:	4620      	mov	r0, r4
    f516:	1d21      	adds	r1, r4, #4
    f518:	f017 fdd7 	bl	270ca <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f51c:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    f51e:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f520:	ea03 030b 	and.w	r3, r3, fp
    f524:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f526:	f017 ff3e 	bl	273a6 <nvs_gc>
		if (rc) {
    f52a:	4682      	mov	sl, r0
    f52c:	2800      	cmp	r0, #0
    f52e:	d1ce      	bne.n	f4ce <nvs_write+0x13a>
		gc_count++;
    f530:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    f532:	e79f      	b.n	f474 <nvs_write+0xe0>
			rc = -ENOSPC;
    f534:	f06f 0a1b 	mvn.w	sl, #27
    f538:	e7c9      	b.n	f4ce <nvs_write+0x13a>
		return -EINVAL;
    f53a:	f06f 0615 	mvn.w	r6, #21
    f53e:	e73e      	b.n	f3be <nvs_write+0x2a>
    f540:	0002f0fe 	.word	0x0002f0fe
    f544:	0002cd48 	.word	0x0002cd48
    f548:	ffff0000 	.word	0xffff0000

0000f54c <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    f54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f550:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    f552:	7c03      	ldrb	r3, [r0, #16]
{
    f554:	b088      	sub	sp, #32
    f556:	4604      	mov	r4, r0
    f558:	460f      	mov	r7, r1
    f55a:	4690      	mov	r8, r2
    f55c:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    f560:	b973      	cbnz	r3, f580 <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    f562:	4b2f      	ldr	r3, [pc, #188]	; (f620 <nvs_read_hist+0xd4>)
    f564:	482f      	ldr	r0, [pc, #188]	; (f624 <nvs_read_hist+0xd8>)
    f566:	9307      	str	r3, [sp, #28]
    f568:	2302      	movs	r3, #2
    f56a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f56e:	aa06      	add	r2, sp, #24
    f570:	9306      	str	r3, [sp, #24]
    f572:	f017 fe29 	bl	271c8 <z_log_msg_static_create.constprop.0>
		return -EACCES;
    f576:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    f57a:	b008      	add	sp, #32
    f57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f580:	2108      	movs	r1, #8
    f582:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f584:	f017 fe23 	bl	271ce <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    f588:	89a3      	ldrh	r3, [r4, #12]
    f58a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    f58e:	42b3      	cmp	r3, r6
    f590:	d343      	bcc.n	f61a <nvs_read_hist+0xce>
	cnt_his = 0U;
    f592:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    f594:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f598:	f8cd a004 	str.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f59c:	454d      	cmp	r5, r9
    f59e:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    f5a0:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f5a4:	d909      	bls.n	f5ba <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f5a6:	6863      	ldr	r3, [r4, #4]
    f5a8:	4553      	cmp	r3, sl
    f5aa:	d11e      	bne.n	f5ea <nvs_read_hist+0x9e>
    f5ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f5b0:	42bb      	cmp	r3, r7
    f5b2:	d01a      	beq.n	f5ea <nvs_read_hist+0x9e>
		return -ENOENT;
    f5b4:	f06f 0001 	mvn.w	r0, #1
    f5b8:	e7df      	b.n	f57a <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f5ba:	4620      	mov	r0, r4
    f5bc:	aa02      	add	r2, sp, #8
    f5be:	a901      	add	r1, sp, #4
    f5c0:	f017 fe47 	bl	27252 <nvs_prev_ate>
		if (rc) {
    f5c4:	2800      	cmp	r0, #0
    f5c6:	d1d8      	bne.n	f57a <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    f5c8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f5cc:	42bb      	cmp	r3, r7
    f5ce:	d106      	bne.n	f5de <nvs_read_hist+0x92>
    f5d0:	4620      	mov	r0, r4
    f5d2:	a902      	add	r1, sp, #8
    f5d4:	f017 fe05 	bl	271e2 <nvs_ate_valid>
    f5d8:	b108      	cbz	r0, f5de <nvs_read_hist+0x92>
			cnt_his++;
    f5da:	3501      	adds	r5, #1
    f5dc:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    f5de:	6862      	ldr	r2, [r4, #4]
    f5e0:	9b01      	ldr	r3, [sp, #4]
    f5e2:	429a      	cmp	r2, r3
    f5e4:	d1da      	bne.n	f59c <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
    f5e6:	4651      	mov	r1, sl
    f5e8:	e7e0      	b.n	f5ac <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f5ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f5ee:	2b00      	cmp	r3, #0
    f5f0:	d0e0      	beq.n	f5b4 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f5f2:	45a9      	cmp	r9, r5
    f5f4:	d8de      	bhi.n	f5b4 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
    f5f6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    f5fa:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f5fc:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    f5fe:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f602:	bf28      	it	cs
    f604:	4633      	movcs	r3, r6
    f606:	4401      	add	r1, r0
    f608:	4642      	mov	r2, r8
    f60a:	4620      	mov	r0, r4
    f60c:	f017 fd4f 	bl	270ae <nvs_flash_rd>
	if (rc) {
    f610:	2800      	cmp	r0, #0
    f612:	d1b2      	bne.n	f57a <nvs_read_hist+0x2e>
	return wlk_ate.len;
    f614:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    f618:	e7af      	b.n	f57a <nvs_read_hist+0x2e>
		return -EINVAL;
    f61a:	f06f 0015 	mvn.w	r0, #21
    f61e:	e7ac      	b.n	f57a <nvs_read_hist+0x2e>
    f620:	0002f0fe 	.word	0x0002f0fe
    f624:	0002cd48 	.word	0x0002cd48

0000f628 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    f628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    f62a:	b970      	cbnz	r0, f64a <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    f62c:	4b12      	ldr	r3, [pc, #72]	; (f678 <ipc_service_open_instance+0x50>)
    f62e:	4813      	ldr	r0, [pc, #76]	; (f67c <ipc_service_open_instance+0x54>)
    f630:	9305      	str	r3, [sp, #20]
    f632:	2302      	movs	r3, #2
    f634:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f638:	aa04      	add	r2, sp, #16
    f63a:	9304      	str	r3, [sp, #16]
    f63c:	f017 ff8b 	bl	27556 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f640:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    f644:	b007      	add	sp, #28
    f646:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    f64a:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    f64c:	b963      	cbnz	r3, f668 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    f64e:	4b0c      	ldr	r3, [pc, #48]	; (f680 <ipc_service_open_instance+0x58>)
    f650:	480a      	ldr	r0, [pc, #40]	; (f67c <ipc_service_open_instance+0x54>)
    f652:	9305      	str	r3, [sp, #20]
    f654:	2302      	movs	r3, #2
    f656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f65a:	aa04      	add	r2, sp, #16
    f65c:	9304      	str	r3, [sp, #16]
    f65e:	f017 ff7a 	bl	27556 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f662:	f06f 0004 	mvn.w	r0, #4
    f666:	e7ed      	b.n	f644 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    f668:	681b      	ldr	r3, [r3, #0]
    f66a:	b11b      	cbz	r3, f674 <ipc_service_open_instance+0x4c>
}
    f66c:	b007      	add	sp, #28
    f66e:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    f672:	4718      	bx	r3
		return 0;
    f674:	4618      	mov	r0, r3
    f676:	e7e5      	b.n	f644 <ipc_service_open_instance+0x1c>
    f678:	0002f21d 	.word	0x0002f21d
    f67c:	0002cd50 	.word	0x0002cd50
    f680:	0002f22e 	.word	0x0002f22e

0000f684 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    f684:	b530      	push	{r4, r5, lr}
    f686:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    f688:	b108      	cbz	r0, f68e <ipc_service_register_endpoint+0xa>
    f68a:	b101      	cbz	r1, f68e <ipc_service_register_endpoint+0xa>
    f68c:	b96a      	cbnz	r2, f6aa <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    f68e:	4b13      	ldr	r3, [pc, #76]	; (f6dc <ipc_service_register_endpoint+0x58>)
    f690:	4813      	ldr	r0, [pc, #76]	; (f6e0 <ipc_service_register_endpoint+0x5c>)
    f692:	9305      	str	r3, [sp, #20]
    f694:	2302      	movs	r3, #2
    f696:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f69a:	aa04      	add	r2, sp, #16
    f69c:	9304      	str	r3, [sp, #16]
    f69e:	f017 ff5a 	bl	27556 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f6a2:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    f6a6:	b007      	add	sp, #28
    f6a8:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    f6aa:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    f6ac:	b10c      	cbz	r4, f6b2 <ipc_service_register_endpoint+0x2e>
    f6ae:	68e5      	ldr	r5, [r4, #12]
    f6b0:	b965      	cbnz	r5, f6cc <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    f6b2:	4b0c      	ldr	r3, [pc, #48]	; (f6e4 <ipc_service_register_endpoint+0x60>)
    f6b4:	480a      	ldr	r0, [pc, #40]	; (f6e0 <ipc_service_register_endpoint+0x5c>)
    f6b6:	9305      	str	r3, [sp, #20]
    f6b8:	2302      	movs	r3, #2
    f6ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f6be:	aa04      	add	r2, sp, #16
    f6c0:	9304      	str	r3, [sp, #16]
    f6c2:	f017 ff48 	bl	27556 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f6c6:	f06f 0004 	mvn.w	r0, #4
    f6ca:	e7ec      	b.n	f6a6 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    f6cc:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    f6d0:	68e3      	ldr	r3, [r4, #12]
}
    f6d2:	b007      	add	sp, #28
    f6d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    f6d8:	4718      	bx	r3
    f6da:	bf00      	nop
    f6dc:	0002f24c 	.word	0x0002f24c
    f6e0:	0002cd50 	.word	0x0002cd50
    f6e4:	0002f22e 	.word	0x0002f22e

0000f6e8 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    f6e8:	b530      	push	{r4, r5, lr}
    f6ea:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    f6ec:	4604      	mov	r4, r0
{
    f6ee:	b087      	sub	sp, #28
	if (!ept) {
    f6f0:	b968      	cbnz	r0, f70e <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    f6f2:	4b1a      	ldr	r3, [pc, #104]	; (f75c <ipc_service_send+0x74>)
    f6f4:	481a      	ldr	r0, [pc, #104]	; (f760 <ipc_service_send+0x78>)
    f6f6:	9305      	str	r3, [sp, #20]
    f6f8:	2302      	movs	r3, #2
    f6fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f6fe:	aa04      	add	r2, sp, #16
    f700:	9304      	str	r3, [sp, #16]
    f702:	f017 ff28 	bl	27556 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f706:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    f70a:	b007      	add	sp, #28
    f70c:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    f70e:	6800      	ldr	r0, [r0, #0]
    f710:	b960      	cbnz	r0, f72c <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    f712:	4b14      	ldr	r3, [pc, #80]	; (f764 <ipc_service_send+0x7c>)
    f714:	4812      	ldr	r0, [pc, #72]	; (f760 <ipc_service_send+0x78>)
    f716:	9305      	str	r3, [sp, #20]
    f718:	2302      	movs	r3, #2
    f71a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f71e:	aa04      	add	r2, sp, #16
    f720:	9304      	str	r3, [sp, #16]
    f722:	f017 ff18 	bl	27556 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    f726:	f06f 0001 	mvn.w	r0, #1
    f72a:	e7ee      	b.n	f70a <ipc_service_send+0x22>
	backend = ept->instance->api;
    f72c:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    f72e:	b10a      	cbz	r2, f734 <ipc_service_send+0x4c>
    f730:	6895      	ldr	r5, [r2, #8]
    f732:	b965      	cbnz	r5, f74e <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    f734:	4b0c      	ldr	r3, [pc, #48]	; (f768 <ipc_service_send+0x80>)
    f736:	480a      	ldr	r0, [pc, #40]	; (f760 <ipc_service_send+0x78>)
    f738:	9305      	str	r3, [sp, #20]
    f73a:	2302      	movs	r3, #2
    f73c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f740:	aa04      	add	r2, sp, #16
    f742:	9304      	str	r3, [sp, #16]
    f744:	f017 ff07 	bl	27556 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f748:	f06f 0004 	mvn.w	r0, #4
    f74c:	e7dd      	b.n	f70a <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    f74e:	460a      	mov	r2, r1
    f750:	46ac      	mov	ip, r5
    f752:	6861      	ldr	r1, [r4, #4]
}
    f754:	b007      	add	sp, #28
    f756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    f75a:	4760      	bx	ip
    f75c:	0002f278 	.word	0x0002f278
    f760:	0002cd50 	.word	0x0002cd50
    f764:	0002f289 	.word	0x0002f289
    f768:	0002f22e 	.word	0x0002f22e

0000f76c <shared_memory_prepare>:
    f76c:	2000      	movs	r0, #0
    f76e:	4b01      	ldr	r3, [pc, #4]	; (f774 <shared_memory_prepare+0x8>)
    f770:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    f772:	4770      	bx	lr
    f774:	20070000 	.word	0x20070000

0000f778 <advertise_ept>:
{
    f778:	b530      	push	{r4, r5, lr}
    f77a:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f77c:	490e      	ldr	r1, [pc, #56]	; (f7b8 <advertise_ept+0x40>)
{
    f77e:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f780:	9102      	str	r1, [sp, #8]
    f782:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    f786:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f788:	e9cd 3100 	strd	r3, r1, [sp]
    f78c:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f790:	f04f 33ff 	mov.w	r3, #4294967295
    f794:	4620      	mov	r0, r4
    f796:	f010 ff47 	bl	20628 <rpmsg_create_ept>
	if (err != 0) {
    f79a:	b950      	cbnz	r0, f7b2 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f79c:	2301      	movs	r3, #1
    f79e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f7a2:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f7a6:	b123      	cbz	r3, f7b2 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f7a8:	4620      	mov	r0, r4
}
    f7aa:	b005      	add	sp, #20
    f7ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f7b0:	4718      	bx	r3
}
    f7b2:	b005      	add	sp, #20
    f7b4:	bd30      	pop	{r4, r5, pc}
    f7b6:	bf00      	nop
    f7b8:	0002764d 	.word	0x0002764d

0000f7bc <get_ept>:
{
    f7bc:	b538      	push	{r3, r4, r5, lr}
    f7be:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f7c0:	4611      	mov	r1, r2
{
    f7c2:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f7c4:	f017 ff44 	bl	27650 <get_ept_slot_with_name>
	if (ept != NULL) {
    f7c8:	4603      	mov	r3, r0
    f7ca:	b938      	cbnz	r0, f7dc <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f7cc:	4628      	mov	r0, r5
    f7ce:	4904      	ldr	r1, [pc, #16]	; (f7e0 <get_ept+0x24>)
    f7d0:	f017 ff3e 	bl	27650 <get_ept_slot_with_name>
    f7d4:	4603      	mov	r3, r0
	if (ept != NULL) {
    f7d6:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f7d8:	6023      	str	r3, [r4, #0]
}
    f7da:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f7dc:	2001      	movs	r0, #1
    f7de:	e7fb      	b.n	f7d8 <get_ept+0x1c>
    f7e0:	00031dbc 	.word	0x00031dbc

0000f7e4 <open>:
{
    f7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f7e8:	2301      	movs	r3, #1
    f7ea:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f7ec:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f7ee:	6846      	ldr	r6, [r0, #4]
{
    f7f0:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f7f2:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f7f6:	e8d7 2fef 	ldaex	r2, [r7]
    f7fa:	2a00      	cmp	r2, #0
    f7fc:	d103      	bne.n	f806 <open+0x22>
    f7fe:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f802:	2900      	cmp	r1, #0
    f804:	d1f7      	bne.n	f7f6 <open+0x12>
    f806:	f040 80b8 	bne.w	f97a <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f80a:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f80c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f80e:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f810:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f812:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f816:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f81a:	bf26      	itte	cs
    f81c:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f820:	fab3 f383 	clzcs	r3, r3
		return 0;
    f824:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f826:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f82a:	bf28      	it	cs
    f82c:	f1c3 0320 	rsbcs	r3, r3, #32
    f830:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f832:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f834:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f838:	f000 8099 	beq.w	f96e <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f83c:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f83e:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f840:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f842:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f844:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f848:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f84a:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f84c:	3209      	adds	r2, #9
    f84e:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f852:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f854:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f858:	440a      	add	r2, r1
	return (buf_size * num);
    f85a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f85c:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f860:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f862:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f866:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f86a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f86c:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f86e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f872:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f876:	3303      	adds	r3, #3
    f878:	4413      	add	r3, r2
    f87a:	f023 0303 	bic.w	r3, r3, #3
    f87e:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f882:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f884:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f888:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f88c:	4b3c      	ldr	r3, [pc, #240]	; (f980 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f88e:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f890:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f894:	6831      	ldr	r1, [r6, #0]
    f896:	f000 fa1d 	bl	fcd4 <ipc_static_vrings_init>
	if (err != 0) {
    f89a:	4604      	mov	r4, r0
    f89c:	bb30      	cbnz	r0, f8ec <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f89e:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f8a2:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f8a6:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f8aa:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f8ae:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f8b0:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f8b2:	bf08      	it	eq
    f8b4:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f8b6:	f012 fd5f 	bl	22378 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f8ba:	2300      	movs	r3, #0
    f8bc:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f8c0:	4930      	ldr	r1, [pc, #192]	; (f984 <open+0x1a0>)
    f8c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f8c6:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f8ca:	9300      	str	r3, [sp, #0]
    f8cc:	4658      	mov	r0, fp
    f8ce:	4623      	mov	r3, r4
    f8d0:	f012 fd6c 	bl	223ac <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f8d4:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f8d8:	492b      	ldr	r1, [pc, #172]	; (f988 <open+0x1a4>)
    f8da:	f012 fc81 	bl	221e0 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f8de:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f8e2:	6883      	ldr	r3, [r0, #8]
    f8e4:	685c      	ldr	r4, [r3, #4]
    f8e6:	b91c      	cbnz	r4, f8f0 <open+0x10c>
		return -ENOSYS;
    f8e8:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f8ec:	2100      	movs	r1, #0
    f8ee:	e037      	b.n	f960 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f8f0:	464b      	mov	r3, r9
    f8f2:	4a26      	ldr	r2, [pc, #152]	; (f98c <open+0x1a8>)
    f8f4:	f8da 1018 	ldr.w	r1, [sl, #24]
    f8f8:	47a0      	blx	r4
	if (err != 0) {
    f8fa:	4604      	mov	r4, r0
    f8fc:	2800      	cmp	r0, #0
    f8fe:	d1f5      	bne.n	f8ec <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f900:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f904:	6883      	ldr	r3, [r0, #8]
    f906:	691b      	ldr	r3, [r3, #16]
    f908:	2b00      	cmp	r3, #0
    f90a:	d0ed      	beq.n	f8e8 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f90c:	2201      	movs	r2, #1
    f90e:	f8da 1018 	ldr.w	r1, [sl, #24]
    f912:	4798      	blx	r3
	if (err != 0) {
    f914:	4604      	mov	r4, r0
    f916:	2800      	cmp	r0, #0
    f918:	d1e8      	bne.n	f8ec <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f91a:	4b1d      	ldr	r3, [pc, #116]	; (f990 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f91c:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f91e:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f922:	4b1c      	ldr	r3, [pc, #112]	; (f994 <open+0x1b0>)
    f924:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f928:	4b1b      	ldr	r3, [pc, #108]	; (f998 <open+0x1b4>)
    f92a:	9303      	str	r3, [sp, #12]
    f92c:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f930:	9302      	str	r3, [sp, #8]
    f932:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f936:	e9cd 8300 	strd	r8, r3, [sp]
    f93a:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f93e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f940:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f944:	f000 f98e 	bl	fc64 <ipc_rpmsg_init>
	if (err != 0) {
    f948:	4604      	mov	r4, r0
    f94a:	2800      	cmp	r0, #0
    f94c:	d1ce      	bne.n	f8ec <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f94e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f952:	f011 f80d 	bl	20970 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f956:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f958:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f95c:	db0a      	blt.n	f974 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f95e:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f960:	4638      	mov	r0, r7
    f962:	f017 feaa 	bl	276ba <atomic_set.isra.0>
}
    f966:	4620      	mov	r0, r4
    f968:	b005      	add	sp, #20
    f96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f96e:	f06f 040b 	mvn.w	r4, #11
    f972:	e7bb      	b.n	f8ec <open+0x108>
		err = -EINVAL;
    f974:	f06f 0415 	mvn.w	r4, #21
    f978:	e7b8      	b.n	f8ec <open+0x108>
		return -EALREADY;
    f97a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f97e:	e7f2      	b.n	f966 <open+0x182>
    f980:	000276a3 	.word	0x000276a3
    f984:	20031e20 	.word	0x20031e20
    f988:	00027689 	.word	0x00027689
    f98c:	0002767d 	.word	0x0002767d
    f990:	0000fa61 	.word	0x0000fa61
    f994:	0002775b 	.word	0x0002775b
    f998:	000276eb 	.word	0x000276eb

0000f99c <close>:
{
    f99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f9a0:	4606      	mov	r6, r0
    f9a2:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f9a6:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f9a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f9ac:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f9b0:	e8d7 3fef 	ldaex	r3, [r7]
    f9b4:	2b02      	cmp	r3, #2
    f9b6:	d103      	bne.n	f9c0 <close+0x24>
    f9b8:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f9bc:	2a00      	cmp	r2, #0
    f9be:	d1f7      	bne.n	f9b0 <close+0x14>
    f9c0:	d149      	bne.n	fa56 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f9c2:	4826      	ldr	r0, [pc, #152]	; (fa5c <close+0xc0>)
    f9c4:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f9c8:	f7f9 fcc0 	bl	934c <strcmp>
    f9cc:	b120      	cbz	r0, f9d8 <close+0x3c>
		return -EBUSY;
    f9ce:	f06f 040f 	mvn.w	r4, #15
}
    f9d2:	4620      	mov	r0, r4
    f9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f9d8:	4820      	ldr	r0, [pc, #128]	; (fa5c <close+0xc0>)
    f9da:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f9de:	f7f9 fcb5 	bl	934c <strcmp>
    f9e2:	2800      	cmp	r0, #0
    f9e4:	d1f3      	bne.n	f9ce <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f9e6:	4628      	mov	r0, r5
    f9e8:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f9ec:	f017 fee8 	bl	277c0 <ipc_rpmsg_deinit>
	if (err != 0) {
    f9f0:	4604      	mov	r4, r0
    f9f2:	bb70      	cbnz	r0, fa52 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f9f4:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f9f6:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f9f8:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f9fa:	6883      	ldr	r3, [r0, #8]
    f9fc:	691b      	ldr	r3, [r3, #16]
    f9fe:	b333      	cbz	r3, fa4e <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    fa00:	4622      	mov	r2, r4
    fa02:	6989      	ldr	r1, [r1, #24]
    fa04:	4798      	blx	r3
	if (err != 0) {
    fa06:	4604      	mov	r4, r0
    fa08:	bb18      	cbnz	r0, fa52 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    fa0a:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    fa0e:	4649      	mov	r1, r9
    fa10:	4630      	mov	r0, r6
    fa12:	f012 fd33 	bl	2247c <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    fa16:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    fa18:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    fa1c:	f001 fd68 	bl	114f0 <z_impl_k_thread_abort>
    fa20:	4630      	mov	r0, r6
    fa22:	f8d8 1000 	ldr.w	r1, [r8]
    fa26:	f017 ff08 	bl	2783a <ipc_static_vrings_deinit>
	if (err != 0) {
    fa2a:	4604      	mov	r4, r0
    fa2c:	b988      	cbnz	r0, fa52 <close+0xb6>
    fa2e:	4601      	mov	r1, r0
    fa30:	22e8      	movs	r2, #232	; 0xe8
    fa32:	4630      	mov	r0, r6
    fa34:	f01c f9fc 	bl	2be30 <memset>
    fa38:	4621      	mov	r1, r4
    fa3a:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    fa3e:	4628      	mov	r0, r5
    fa40:	f01c f9f6 	bl	2be30 <memset>
	atomic_set(&data->state, STATE_READY);
    fa44:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    fa46:	4638      	mov	r0, r7
    fa48:	f017 fe37 	bl	276ba <atomic_set.isra.0>
	return err;
    fa4c:	e7c1      	b.n	f9d2 <close+0x36>
		return -ENOSYS;
    fa4e:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    fa52:	2102      	movs	r1, #2
    fa54:	e7f7      	b.n	fa46 <close+0xaa>
		return -EALREADY;
    fa56:	f06f 0477 	mvn.w	r4, #119	; 0x77
    fa5a:	e7ba      	b.n	f9d2 <close+0x36>
    fa5c:	00031dbc 	.word	0x00031dbc

0000fa60 <bound_cb>:
{
    fa60:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    fa62:	4604      	mov	r4, r0
    fa64:	b140      	cbz	r0, fa78 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    fa66:	2300      	movs	r3, #0
    fa68:	2201      	movs	r2, #1
    fa6a:	e9cd 3200 	strd	r3, r2, [sp]
    fa6e:	4b07      	ldr	r3, [pc, #28]	; (fa8c <bound_cb+0x2c>)
    fa70:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    fa74:	f010 fd8c 	bl	20590 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    fa78:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    fa7a:	681b      	ldr	r3, [r3, #0]
    fa7c:	b123      	cbz	r3, fa88 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    fa7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    fa80:	b002      	add	sp, #8
    fa82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    fa86:	4718      	bx	r3
}
    fa88:	b002      	add	sp, #8
    fa8a:	bd10      	pop	{r4, pc}
    fa8c:	00031dbc 	.word	0x00031dbc

0000fa90 <send>:
{
    fa90:	b513      	push	{r0, r1, r4, lr}
    fa92:	4604      	mov	r4, r0
    fa94:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fa96:	6921      	ldr	r1, [r4, #16]
    fa98:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    fa9c:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    faa0:	2902      	cmp	r1, #2
    faa2:	d110      	bne.n	fac6 <send+0x36>
	if (len == 0) {
    faa4:	b193      	cbz	r3, facc <send+0x3c>
	if (!rpmsg_ept) {
    faa6:	b1a0      	cbz	r0, fad2 <send+0x42>
    faa8:	2101      	movs	r1, #1
    faaa:	e9cd 3100 	strd	r3, r1, [sp]
    faae:	4613      	mov	r3, r2
    fab0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    fab4:	f010 fd6c 	bl	20590 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    fab8:	4b07      	ldr	r3, [pc, #28]	; (fad8 <send+0x48>)
		return -ENOMEM;
    faba:	4298      	cmp	r0, r3
    fabc:	bf08      	it	eq
    fabe:	f06f 000b 	mvneq.w	r0, #11
}
    fac2:	b002      	add	sp, #8
    fac4:	bd10      	pop	{r4, pc}
		return -EBUSY;
    fac6:	f06f 000f 	mvn.w	r0, #15
    faca:	e7fa      	b.n	fac2 <send+0x32>
		return -EBADMSG;
    facc:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    fad0:	e7f7      	b.n	fac2 <send+0x32>
		return -ENOENT;
    fad2:	f06f 0001 	mvn.w	r0, #1
    fad6:	e7f4      	b.n	fac2 <send+0x32>
    fad8:	fffff82e 	.word	0xfffff82e

0000fadc <register_ept>:
{
    fadc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fae0:	4688      	mov	r8, r1
    fae2:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    fae4:	6906      	ldr	r6, [r0, #16]
    fae6:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    faea:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    faee:	2b02      	cmp	r3, #2
    faf0:	d15f      	bne.n	fbb2 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    faf2:	6813      	ldr	r3, [r2, #0]
    faf4:	b923      	cbnz	r3, fb00 <register_ept+0x24>
		return -EINVAL;
    faf6:	f06f 0015 	mvn.w	r0, #21
}
    fafa:	b003      	add	sp, #12
    fafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	2b00      	cmp	r3, #0
    fb04:	d0f7      	beq.n	faf6 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    fb06:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    fb0a:	f1b9 0f00 	cmp.w	r9, #0
    fb0e:	d133      	bne.n	fb78 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    fb10:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    fb14:	f04f 32ff 	mov.w	r2, #4294967295
    fb18:	f04f 33ff 	mov.w	r3, #4294967295
    fb1c:	4638      	mov	r0, r7
    fb1e:	f011 fe55 	bl	217cc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    fb22:	4630      	mov	r0, r6
    fb24:	682a      	ldr	r2, [r5, #0]
    fb26:	a901      	add	r1, sp, #4
    fb28:	f7ff fe48 	bl	f7bc <get_ept>
	if (rpmsg_ept == NULL) {
    fb2c:	9c01      	ldr	r4, [sp, #4]
    fb2e:	b91c      	cbnz	r4, fb38 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fb30:	4638      	mov	r0, r7
    fb32:	f017 fdc0 	bl	276b6 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fb36:	e7de      	b.n	faf6 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fb38:	f105 0308 	add.w	r3, r5, #8
    fb3c:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    fb3e:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    fb40:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    fb44:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    fb46:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    fb48:	b160      	cbz	r0, fb64 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fb4a:	4638      	mov	r0, r7
    fb4c:	f017 fdb3 	bl	276b6 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    fb50:	4621      	mov	r1, r4
    fb52:	4630      	mov	r0, r6
    fb54:	6e23      	ldr	r3, [r4, #96]	; 0x60
    fb56:	682a      	ldr	r2, [r5, #0]
    fb58:	f7ff fe0e 	bl	f778 <advertise_ept>
	return 0;
    fb5c:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    fb5e:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    fb62:	e7ca      	b.n	fafa <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    fb64:	2220      	movs	r2, #32
    fb66:	6829      	ldr	r1, [r5, #0]
    fb68:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fb6c:	f01c faa2 	bl	2c0b4 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fb70:	4638      	mov	r0, r7
    fb72:	f017 fda0 	bl	276b6 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fb76:	e7f1      	b.n	fb5c <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    fb78:	4630      	mov	r0, r6
    fb7a:	490f      	ldr	r1, [pc, #60]	; (fbb8 <register_ept+0xdc>)
    fb7c:	f017 fd68 	bl	27650 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    fb80:	4604      	mov	r4, r0
    fb82:	2800      	cmp	r0, #0
    fb84:	d0b7      	beq.n	faf6 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fb86:	f105 0308 	add.w	r3, r5, #8
    fb8a:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    fb8c:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    fb8e:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    fb90:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    fb92:	2300      	movs	r3, #0
    fb94:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    fb98:	2220      	movs	r2, #32
    fb9a:	6829      	ldr	r1, [r5, #0]
    fb9c:	3040      	adds	r0, #64	; 0x40
    fb9e:	f01c fa89 	bl	2c0b4 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    fba2:	4622      	mov	r2, r4
    fba4:	2101      	movs	r1, #1
    fba6:	4630      	mov	r0, r6
    fba8:	f000 f83e 	bl	fc28 <ipc_rpmsg_register_ept>
	if (err != 0) {
    fbac:	2800      	cmp	r0, #0
    fbae:	d0d5      	beq.n	fb5c <register_ept+0x80>
    fbb0:	e7a1      	b.n	faf6 <register_ept+0x1a>
		return -EBUSY;
    fbb2:	f06f 000f 	mvn.w	r0, #15
    fbb6:	e7a0      	b.n	fafa <register_ept+0x1e>
    fbb8:	00031dbc 	.word	0x00031dbc

0000fbbc <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbc0:	4605      	mov	r5, r0
    fbc2:	460e      	mov	r6, r1
    fbc4:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fbc6:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    fbc8:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    fbcc:	b085      	sub	sp, #20
    fbce:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    fbd2:	4621      	mov	r1, r4
    fbd4:	4630      	mov	r0, r6
    fbd6:	f7f9 fbb9 	bl	934c <strcmp>
    fbda:	b9e0      	cbnz	r0, fc16 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    fbdc:	4b11      	ldr	r3, [pc, #68]	; (fc24 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    fbde:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    fbe2:	9302      	str	r3, [sp, #8]
    fbe4:	f8da 3010 	ldr.w	r3, [sl, #16]
    fbe8:	4632      	mov	r2, r6
    fbea:	e9cd 8300 	strd	r8, r3, [sp]
    fbee:	4629      	mov	r1, r5
    fbf0:	f04f 33ff 	mov.w	r3, #4294967295
    fbf4:	4658      	mov	r0, fp
    fbf6:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    fbfa:	f010 fd15 	bl	20628 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    fbfe:	b960      	cbnz	r0, fc1a <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    fc00:	2370      	movs	r3, #112	; 0x70
    fc02:	2201      	movs	r2, #1
    fc04:	fb03 9307 	mla	r3, r3, r7, r9
    fc08:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    fc0c:	f8da 300c 	ldr.w	r3, [sl, #12]
    fc10:	b10b      	cbz	r3, fc16 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    fc12:	4658      	mov	r0, fp
    fc14:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fc16:	3470      	adds	r4, #112	; 0x70
    fc18:	b117      	cbz	r7, fc20 <ns_bind_cb+0x64>
			}
		}
	}
}
    fc1a:	b005      	add	sp, #20
    fc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fc20:	2701      	movs	r7, #1
    fc22:	e7d6      	b.n	fbd2 <ns_bind_cb+0x16>
    fc24:	000277bd 	.word	0x000277bd

0000fc28 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    fc28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fc2a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    fc2c:	b190      	cbz	r0, fc54 <ipc_rpmsg_register_ept+0x2c>
    fc2e:	b18a      	cbz	r2, fc54 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    fc30:	2901      	cmp	r1, #1
    fc32:	d112      	bne.n	fc5a <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    fc34:	4b0a      	ldr	r3, [pc, #40]	; (fc60 <ipc_rpmsg_register_ept+0x38>)
    fc36:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    fc3a:	9302      	str	r3, [sp, #8]
    fc3c:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    fc40:	3240      	adds	r2, #64	; 0x40
    fc42:	9301      	str	r3, [sp, #4]
    fc44:	f04f 33ff 	mov.w	r3, #4294967295
    fc48:	4620      	mov	r0, r4
    fc4a:	9300      	str	r3, [sp, #0]
    fc4c:	f010 fcec 	bl	20628 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    fc50:	b004      	add	sp, #16
    fc52:	bd10      	pop	{r4, pc}
		return -EINVAL;
    fc54:	f06f 0015 	mvn.w	r0, #21
    fc58:	e7fa      	b.n	fc50 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    fc5a:	2000      	movs	r0, #0
    fc5c:	e7f8      	b.n	fc50 <ipc_rpmsg_register_ept+0x28>
    fc5e:	bf00      	nop
    fc60:	000277bd 	.word	0x000277bd

0000fc64 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    fc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc68:	b087      	sub	sp, #28
    fc6a:	460e      	mov	r6, r1
    fc6c:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    fc70:	4614      	mov	r4, r2
    fc72:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    fc76:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    fc78:	b330      	cbz	r0, fcc8 <ipc_rpmsg_init+0x64>
    fc7a:	b329      	cbz	r1, fcc8 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    fc7c:	f8df c050 	ldr.w	ip, [pc, #80]	; fcd0 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fc80:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    fc84:	2d00      	cmp	r5, #0
    fc86:	bf08      	it	eq
    fc88:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    fc8a:	b99e      	cbnz	r6, fcb4 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    fc8c:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fc90:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    fc94:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    fc96:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fc98:	f01b fe33 	bl	2b902 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fc9c:	ab03      	add	r3, sp, #12
    fc9e:	e9cd 4300 	strd	r4, r3, [sp]
    fca2:	462a      	mov	r2, r5
    fca4:	463b      	mov	r3, r7
    fca6:	4641      	mov	r1, r8
    fca8:	4648      	mov	r0, r9
    fcaa:	f010 fe87 	bl	209bc <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    fcae:	b007      	add	sp, #28
    fcb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fcb4:	2200      	movs	r2, #0
    fcb6:	4641      	mov	r1, r8
    fcb8:	920e      	str	r2, [sp, #56]	; 0x38
    fcba:	4648      	mov	r0, r9
    fcbc:	462a      	mov	r2, r5
}
    fcbe:	b007      	add	sp, #28
    fcc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fcc4:	f010 bfa4 	b.w	20c10 <rpmsg_init_vdev>
		return -EINVAL;
    fcc8:	f06f 0015 	mvn.w	r0, #21
    fccc:	e7ef      	b.n	fcae <ipc_rpmsg_init+0x4a>
    fcce:	bf00      	nop
    fcd0:	0000fbbd 	.word	0x0000fbbd

0000fcd4 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    fcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcd6:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    fcd8:	4604      	mov	r4, r0
{
    fcda:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    fcdc:	2800      	cmp	r0, #0
    fcde:	d06f      	beq.n	fdc0 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    fce0:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    fce2:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    fce4:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fce6:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    fce8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    fcec:	4f36      	ldr	r7, [pc, #216]	; (fdc8 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fcee:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    fcf0:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    fcf4:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fcf8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fcfc:	f04f 33ff 	mov.w	r3, #4294967295
    fd00:	9300      	str	r3, [sp, #0]
    fd02:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    fd04:	f01b f966 	bl	2afd4 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    fd08:	4a30      	ldr	r2, [pc, #192]	; (fdcc <ipc_static_vrings_init+0xf8>)
    fd0a:	ab06      	add	r3, sp, #24
    fd0c:	e892 0003 	ldmia.w	r2, {r0, r1}
    fd10:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    fd14:	4618      	mov	r0, r3
    fd16:	f010 fb5b 	bl	203d0 <metal_init>
	if (err != 0) {
    fd1a:	4605      	mov	r5, r0
    fd1c:	b9d8      	cbnz	r0, fd56 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    fd1e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    fd22:	f010 fb35 	bl	20390 <metal_register_generic_device>
	if (err != 0) {
    fd26:	4605      	mov	r5, r0
    fd28:	b9a8      	cbnz	r0, fd56 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    fd2a:	4639      	mov	r1, r7
    fd2c:	4828      	ldr	r0, [pc, #160]	; (fdd0 <ipc_static_vrings_init+0xfc>)
    fd2e:	aa05      	add	r2, sp, #20
    fd30:	f01b f928 	bl	2af84 <metal_device_open>
	if (err != 0) {
    fd34:	4605      	mov	r5, r0
    fd36:	b970      	cbnz	r0, fd56 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    fd38:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    fd3a:	689a      	ldr	r2, [r3, #8]
    fd3c:	b172      	cbz	r2, fd5c <ipc_static_vrings_init+0x88>
    fd3e:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fd40:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    fd44:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fd48:	f017 fd69 	bl	2781e <virtqueue_allocate>
    fd4c:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    fd50:	b930      	cbnz	r0, fd60 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    fd52:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    fd56:	4628      	mov	r0, r5
    fd58:	b009      	add	sp, #36	; 0x24
    fd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd5c:	4603      	mov	r3, r0
    fd5e:	e7ef      	b.n	fd40 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    fd60:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    fd64:	f017 fd5b 	bl	2781e <virtqueue_allocate>
    fd68:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    fd6c:	2800      	cmp	r0, #0
    fd6e:	d0f0      	beq.n	fd52 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fd70:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fd74:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fd78:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    fd7c:	2304      	movs	r3, #4
    fd7e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    fd82:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    fd86:	2302      	movs	r3, #2
    fd88:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    fd8a:	4b12      	ldr	r3, [pc, #72]	; (fdd4 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fd8c:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fd90:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fd94:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    fd98:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fd9c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    fda0:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fda2:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fda6:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fdaa:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fdae:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    fdb2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    fdb6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    fdba:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fdbc:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    fdbe:	e7ca      	b.n	fd56 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    fdc0:	f06f 0515 	mvn.w	r5, #21
    fdc4:	e7c7      	b.n	fd56 <ipc_static_vrings_init+0x82>
    fdc6:	bf00      	nop
    fdc8:	0002f2b3 	.word	0x0002f2b3
    fdcc:	0002ce74 	.word	0x0002ce74
    fdd0:	0002f2bd 	.word	0x0002f2bd
    fdd4:	0002d3b8 	.word	0x0002d3b8

0000fdd8 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    fdd8:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    fdda:	4b11      	ldr	r3, [pc, #68]	; (fe20 <flash_area_open+0x48>)
{
    fddc:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    fdde:	681c      	ldr	r4, [r3, #0]
    fde0:	b1dc      	cbz	r4, fe1a <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    fde2:	4b10      	ldr	r3, [pc, #64]	; (fe24 <flash_area_open+0x4c>)
    fde4:	6819      	ldr	r1, [r3, #0]
    fde6:	2300      	movs	r3, #0
    fde8:	428b      	cmp	r3, r1
    fdea:	db02      	blt.n	fdf2 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    fdec:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    fdf0:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    fdf2:	4622      	mov	r2, r4
    fdf4:	f812 6b10 	ldrb.w	r6, [r2], #16
    fdf8:	4286      	cmp	r6, r0
    fdfa:	d002      	beq.n	fe02 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    fdfc:	4614      	mov	r4, r2
    fdfe:	3301      	adds	r3, #1
    fe00:	e7f2      	b.n	fde8 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fe02:	68e0      	ldr	r0, [r4, #12]
    fe04:	b910      	cbnz	r0, fe0c <flash_area_open+0x34>
		return -ENODEV;
    fe06:	f06f 0012 	mvn.w	r0, #18
    fe0a:	e7f1      	b.n	fdf0 <flash_area_open+0x18>
    fe0c:	f01b fd96 	bl	2b93c <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fe10:	2800      	cmp	r0, #0
    fe12:	d0f8      	beq.n	fe06 <flash_area_open+0x2e>
	return 0;
    fe14:	2000      	movs	r0, #0
	*fap = area;
    fe16:	602c      	str	r4, [r5, #0]
	return 0;
    fe18:	e7ea      	b.n	fdf0 <flash_area_open+0x18>
		return -EACCES;
    fe1a:	f06f 000c 	mvn.w	r0, #12
    fe1e:	e7e7      	b.n	fdf0 <flash_area_open+0x18>
    fe20:	2000846c 	.word	0x2000846c
    fe24:	0002d454 	.word	0x0002d454

0000fe28 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    fe28:	b570      	push	{r4, r5, r6, lr}
    fe2a:	b088      	sub	sp, #32
    fe2c:	4605      	mov	r5, r0
    fe2e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    fe30:	b2c0      	uxtb	r0, r0
    fe32:	4669      	mov	r1, sp
{
    fe34:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    fe36:	f7ff ffcf 	bl	fdd8 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    fe3a:	2800      	cmp	r0, #0
    fe3c:	db1b      	blt.n	fe76 <flash_area_get_sectors+0x4e>
    fe3e:	9800      	ldr	r0, [sp, #0]
    fe40:	b1c8      	cbz	r0, fe76 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    fe42:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    fe44:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    fe46:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    fe48:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    fe4a:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    fe4c:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    fe50:	2300      	movs	r3, #0
	cb_data->status = 0;
    fe52:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    fe56:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    fe58:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    fe5a:	f017 fd1e 	bl	2789a <flash_area_close>
	if (flash_dev == NULL) {
    fe5e:	b16d      	cbz	r5, fe7c <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    fe60:	4628      	mov	r0, r5
    fe62:	4908      	ldr	r1, [pc, #32]	; (fe84 <flash_area_get_sectors+0x5c>)
    fe64:	aa01      	add	r2, sp, #4
    fe66:	f01a fbfb 	bl	2a660 <flash_page_foreach>
	if (cb_data->status == 0) {
    fe6a:	9807      	ldr	r0, [sp, #28]
    fe6c:	b908      	cbnz	r0, fe72 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    fe6e:	9b05      	ldr	r3, [sp, #20]
    fe70:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    fe72:	b008      	add	sp, #32
    fe74:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fe76:	f06f 0015 	mvn.w	r0, #21
    fe7a:	e7fa      	b.n	fe72 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    fe7c:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    fe80:	e7f7      	b.n	fe72 <flash_area_get_sectors+0x4a>
    fe82:	bf00      	nop
    fe84:	00027919 	.word	0x00027919

0000fe88 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
    fe88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    fe8c:	4b0f      	ldr	r3, [pc, #60]	; (fecc <settings_save_one+0x44>)
{
    fe8e:	4605      	mov	r5, r0
	cs = settings_save_dst;
    fe90:	681c      	ldr	r4, [r3, #0]
{
    fe92:	460e      	mov	r6, r1
    fe94:	4617      	mov	r7, r2
	if (!cs) {
    fe96:	b1ac      	cbz	r4, fec4 <settings_save_one+0x3c>
    fe98:	f04f 32ff 	mov.w	r2, #4294967295
    fe9c:	f04f 33ff 	mov.w	r3, #4294967295
    fea0:	480b      	ldr	r0, [pc, #44]	; (fed0 <settings_save_one+0x48>)
    fea2:	f011 fc93 	bl	217cc <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    fea6:	6863      	ldr	r3, [r4, #4]
    fea8:	4632      	mov	r2, r6
    feaa:	f8d3 8008 	ldr.w	r8, [r3, #8]
    feae:	4629      	mov	r1, r5
    feb0:	463b      	mov	r3, r7
    feb2:	4620      	mov	r0, r4
    feb4:	47c0      	blx	r8
    feb6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    feb8:	4805      	ldr	r0, [pc, #20]	; (fed0 <settings_save_one+0x48>)
    feba:	f011 fd57 	bl	2196c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    febe:	4620      	mov	r0, r4
    fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    fec4:	f06f 0401 	mvn.w	r4, #1
    fec8:	e7f9      	b.n	febe <settings_save_one+0x36>
    feca:	bf00      	nop
    fecc:	20021450 	.word	0x20021450
    fed0:	20008b24 	.word	0x20008b24

0000fed4 <settings_src_register>:
	parent->next = child;
    fed4:	2300      	movs	r3, #0
    fed6:	6003      	str	r3, [r0, #0]
	return list->tail;
    fed8:	4b04      	ldr	r3, [pc, #16]	; (feec <settings_src_register+0x18>)
    feda:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    fedc:	b912      	cbnz	r2, fee4 <settings_src_register+0x10>
	list->head = node;
    fede:	e9c3 0000 	strd	r0, r0, [r3]
}
    fee2:	4770      	bx	lr
	parent->next = child;
    fee4:	6010      	str	r0, [r2, #0]
	list->tail = node;
    fee6:	6058      	str	r0, [r3, #4]
}
    fee8:	4770      	bx	lr
    feea:	bf00      	nop
    feec:	20021454 	.word	0x20021454

0000fef0 <settings_dst_register>:
	settings_save_dst = cs;
    fef0:	4b01      	ldr	r3, [pc, #4]	; (fef8 <settings_dst_register+0x8>)
    fef2:	6018      	str	r0, [r3, #0]
}
    fef4:	4770      	bx	lr
    fef6:	bf00      	nop
    fef8:	20021450 	.word	0x20021450

0000fefc <settings_load_subtree>:
	const struct settings_load_arg arg = {
    fefc:	2300      	movs	r3, #0
{
    fefe:	b530      	push	{r4, r5, lr}
    ff00:	b085      	sub	sp, #20
    ff02:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    ff04:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ff08:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ff0a:	f04f 33ff 	mov.w	r3, #4294967295
    ff0e:	f04f 32ff 	mov.w	r2, #4294967295
    ff12:	480b      	ldr	r0, [pc, #44]	; (ff40 <settings_load_subtree+0x44>)
    ff14:	f011 fc5a 	bl	217cc <z_impl_k_mutex_lock>
	return list->head;
    ff18:	4b0a      	ldr	r3, [pc, #40]	; (ff44 <settings_load_subtree+0x48>)
    ff1a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    ff1c:	b94c      	cbnz	r4, ff32 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
    ff1e:	4628      	mov	r0, r5
    ff20:	f000 f8f6 	bl	10110 <settings_commit_subtree>
    ff24:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    ff26:	4806      	ldr	r0, [pc, #24]	; (ff40 <settings_load_subtree+0x44>)
    ff28:	f011 fd20 	bl	2196c <z_impl_k_mutex_unlock>
}
    ff2c:	4620      	mov	r0, r4
    ff2e:	b005      	add	sp, #20
    ff30:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
    ff32:	6863      	ldr	r3, [r4, #4]
    ff34:	4620      	mov	r0, r4
    ff36:	681b      	ldr	r3, [r3, #0]
    ff38:	a901      	add	r1, sp, #4
    ff3a:	4798      	blx	r3
	return node->next;
    ff3c:	6824      	ldr	r4, [r4, #0]
    ff3e:	e7ed      	b.n	ff1c <settings_load_subtree+0x20>
    ff40:	20008b24 	.word	0x20008b24
    ff44:	20021454 	.word	0x20021454

0000ff48 <settings_load_subtree_direct>:
{
    ff48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    ff4a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    ff4e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    ff50:	f04f 33ff 	mov.w	r3, #4294967295
    ff54:	f04f 32ff 	mov.w	r2, #4294967295
    ff58:	4809      	ldr	r0, [pc, #36]	; (ff80 <settings_load_subtree_direct+0x38>)
    ff5a:	f011 fc37 	bl	217cc <z_impl_k_mutex_lock>
	return list->head;
    ff5e:	4b09      	ldr	r3, [pc, #36]	; (ff84 <settings_load_subtree_direct+0x3c>)
    ff60:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    ff62:	b92c      	cbnz	r4, ff70 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
    ff64:	4806      	ldr	r0, [pc, #24]	; (ff80 <settings_load_subtree_direct+0x38>)
    ff66:	f011 fd01 	bl	2196c <z_impl_k_mutex_unlock>
}
    ff6a:	4620      	mov	r0, r4
    ff6c:	b004      	add	sp, #16
    ff6e:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
    ff70:	6863      	ldr	r3, [r4, #4]
    ff72:	4620      	mov	r0, r4
    ff74:	681b      	ldr	r3, [r3, #0]
    ff76:	a901      	add	r1, sp, #4
    ff78:	4798      	blx	r3
	return node->next;
    ff7a:	6824      	ldr	r4, [r4, #0]
    ff7c:	e7f1      	b.n	ff62 <settings_load_subtree_direct+0x1a>
    ff7e:	bf00      	nop
    ff80:	20008b24 	.word	0x20008b24
    ff84:	20021454 	.word	0x20021454

0000ff88 <settings_store_init>:
	list->head = NULL;
    ff88:	2200      	movs	r2, #0
    ff8a:	4b02      	ldr	r3, [pc, #8]	; (ff94 <settings_store_init+0xc>)
	list->tail = NULL;
    ff8c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    ff90:	4770      	bx	lr
    ff92:	bf00      	nop
    ff94:	20021454 	.word	0x20021454

0000ff98 <settings_init>:
	list->head = NULL;
    ff98:	2200      	movs	r2, #0
    ff9a:	4b02      	ldr	r3, [pc, #8]	; (ffa4 <settings_init+0xc>)
	list->tail = NULL;
    ff9c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    ffa0:	f7ff bff2 	b.w	ff88 <settings_store_init>
    ffa4:	2002145c 	.word	0x2002145c

0000ffa8 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    ffa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ffac:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    ffae:	460c      	mov	r4, r1
    ffb0:	b109      	cbz	r1, ffb6 <settings_parse_and_lookup+0xe>
		*next = NULL;
    ffb2:	2300      	movs	r3, #0
    ffb4:	600b      	str	r3, [r1, #0]
{
    ffb6:	2600      	movs	r6, #0
    ffb8:	4d25      	ldr	r5, [pc, #148]	; (10050 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x50>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ffba:	f8df 9098 	ldr.w	r9, [pc, #152]	; 10054 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x54>
    ffbe:	454d      	cmp	r5, r9
    ffc0:	d924      	bls.n	1000c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc>
    ffc2:	4925      	ldr	r1, [pc, #148]	; (10058 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x58>)
    ffc4:	2394      	movs	r3, #148	; 0x94
    ffc6:	4a25      	ldr	r2, [pc, #148]	; (1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>)
    ffc8:	4825      	ldr	r0, [pc, #148]	; (10060 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x60>)
    ffca:	f016 fed2 	bl	26d72 <assert_print>
    ffce:	4825      	ldr	r0, [pc, #148]	; (10064 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x64>)
    ffd0:	f016 fecf 	bl	26d72 <assert_print>
    ffd4:	2194      	movs	r1, #148	; 0x94
    ffd6:	4821      	ldr	r0, [pc, #132]	; (1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>)
    ffd8:	f016 fec4 	bl	26d64 <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ffdc:	f8d5 8000 	ldr.w	r8, [r5]
    ffe0:	4638      	mov	r0, r7
    ffe2:	4641      	mov	r1, r8
    ffe4:	aa01      	add	r2, sp, #4
    ffe6:	f017 fcc0 	bl	2796a <settings_name_steq>
    ffea:	b150      	cbz	r0, 10002 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2>
			continue;
		}
		if (!bestmatch) {
    ffec:	b916      	cbnz	r6, fff4 <settings_parse_and_lookup+0x4c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
    ffee:	b954      	cbnz	r4, 10006 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6>
{
    fff0:	462e      	mov	r6, r5
    fff2:	e006      	b.n	10002 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    fff4:	2200      	movs	r2, #0
    fff6:	4640      	mov	r0, r8
    fff8:	6831      	ldr	r1, [r6, #0]
    fffa:	f017 fcb6 	bl	2796a <settings_name_steq>
    fffe:	2800      	cmp	r0, #0
   10000:	d1f5      	bne.n	ffee <settings_parse_and_lookup+0x46>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10002:	3514      	adds	r5, #20
   10004:	e7db      	b.n	ffbe <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   10006:	9b01      	ldr	r3, [sp, #4]
   10008:	6023      	str	r3, [r4, #0]
   1000a:	e7f1      	b.n	fff0 <settings_parse_and_lookup+0x48>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1000c:	d3e6      	bcc.n	ffdc <settings_parse_and_lookup+0x34>
	return list->head;
   1000e:	4b16      	ldr	r3, [pc, #88]	; (10068 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x68>)
   10010:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   10012:	b1c5      	cbz	r5, 10046 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x46>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   10014:	f855 8c14 	ldr.w	r8, [r5, #-20]
   10018:	4638      	mov	r0, r7
   1001a:	4641      	mov	r1, r8
   1001c:	aa01      	add	r2, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1001e:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   10020:	f017 fca3 	bl	2796a <settings_name_steq>
   10024:	b150      	cbz	r0, 1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
			continue;
		}
		if (!bestmatch) {
   10026:	b916      	cbnz	r6, 1002e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2e>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   10028:	b954      	cbnz	r4, 10040 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x40>
{
   1002a:	462e      	mov	r6, r5
   1002c:	e006      	b.n	1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1002e:	2200      	movs	r2, #0
   10030:	4640      	mov	r0, r8
   10032:	6831      	ldr	r1, [r6, #0]
   10034:	f017 fc99 	bl	2796a <settings_name_steq>
   10038:	2800      	cmp	r0, #0
   1003a:	d1f5      	bne.n	10028 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x28>
	return node->next;
   1003c:	696d      	ldr	r5, [r5, #20]
   1003e:	e7e8      	b.n	10012 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x12>
				*next = tmpnext;
   10040:	9b01      	ldr	r3, [sp, #4]
   10042:	6023      	str	r3, [r4, #0]
   10044:	e7f1      	b.n	1002a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   10046:	4630      	mov	r0, r6
   10048:	b003      	add	sp, #12
   1004a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1004e:	bf00      	nop
   10050:	0002cde0 	.word	0x0002cde0
   10054:	0002ce58 	.word	0x0002ce58
   10058:	0002f2f7 	.word	0x0002f2f7
   1005c:	0002f2c5 	.word	0x0002f2c5
   10060:	0002dd81 	.word	0x0002dd81
   10064:	0002eee2 	.word	0x0002eee2
   10068:	2002145c 	.word	0x2002145c

0001006c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   1006c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10070:	b084      	sub	sp, #16
   10072:	af02      	add	r7, sp, #8
   10074:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
   10078:	4604      	mov	r4, r0
   1007a:	460d      	mov	r5, r1
   1007c:	4616      	mov	r6, r2
   1007e:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
   10080:	6078      	str	r0, [r7, #4]

	if (load_arg && load_arg->subtree &&
   10082:	f1b9 0f00 	cmp.w	r9, #0
   10086:	d007      	beq.n	10098 <settings_call_set_handler+0x2c>
   10088:	f8d9 1000 	ldr.w	r1, [r9]
   1008c:	bb31      	cbnz	r1, 100dc <settings_call_set_handler+0x70>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   1008e:	f8d9 a004 	ldr.w	sl, [r9, #4]
   10092:	f1ba 0f00 	cmp.w	sl, #0
   10096:	d128      	bne.n	100ea <settings_call_set_handler+0x7e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   10098:	4620      	mov	r0, r4
   1009a:	1d39      	adds	r1, r7, #4
   1009c:	f7ff ff84 	bl	ffa8 <settings_parse_and_lookup>
		if (!ch) {
   100a0:	b308      	cbz	r0, 100e6 <settings_call_set_handler+0x7a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   100a2:	f8d0 9008 	ldr.w	r9, [r0, #8]
   100a6:	4643      	mov	r3, r8
   100a8:	4632      	mov	r2, r6
   100aa:	4629      	mov	r1, r5
   100ac:	6878      	ldr	r0, [r7, #4]
   100ae:	47c8      	blx	r9

		if (rc != 0) {
   100b0:	b1c8      	cbz	r0, 100e6 <settings_call_set_handler+0x7a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   100b2:	466d      	mov	r5, sp
   100b4:	b08a      	sub	sp, #40	; 0x28
   100b6:	aa02      	add	r2, sp, #8
   100b8:	4b12      	ldr	r3, [pc, #72]	; (10104 <settings_call_set_handler+0x98>)
   100ba:	61d0      	str	r0, [r2, #28]
   100bc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   100c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   100c4:	8413      	strh	r3, [r2, #32]
   100c6:	4b10      	ldr	r3, [pc, #64]	; (10108 <settings_call_set_handler+0x9c>)
   100c8:	f842 3f10 	str.w	r3, [r2, #16]!
   100cc:	2300      	movs	r3, #0
   100ce:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   100d2:	480e      	ldr	r0, [pc, #56]	; (1010c <settings_call_set_handler+0xa0>)
   100d4:	f7fe fc3e 	bl	e954 <z_impl_z_log_msg_static_create>
   100d8:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   100da:	e004      	b.n	100e6 <settings_call_set_handler+0x7a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   100dc:	1d3a      	adds	r2, r7, #4
   100de:	f017 fc44 	bl	2796a <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   100e2:	2800      	cmp	r0, #0
   100e4:	d1d3      	bne.n	1008e <settings_call_set_handler+0x22>
		return 0;
   100e6:	2000      	movs	r0, #0
   100e8:	e007      	b.n	100fa <settings_call_set_handler+0x8e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   100ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
   100ee:	4632      	mov	r2, r6
   100f0:	9300      	str	r3, [sp, #0]
   100f2:	4629      	mov	r1, r5
   100f4:	4643      	mov	r3, r8
   100f6:	6878      	ldr	r0, [r7, #4]
   100f8:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   100fa:	3708      	adds	r7, #8
   100fc:	46bd      	mov	sp, r7
   100fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10102:	bf00      	nop
   10104:	0002f31f 	.word	0x0002f31f
   10108:	01000004 	.word	0x01000004
   1010c:	0002cda8 	.word	0x0002cda8

00010110 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   10110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10112:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   10114:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10116:	4c1e      	ldr	r4, [pc, #120]	; (10190 <settings_commit_subtree+0x80>)
   10118:	4f1e      	ldr	r7, [pc, #120]	; (10194 <settings_commit_subtree+0x84>)
   1011a:	42bc      	cmp	r4, r7
   1011c:	d91f      	bls.n	1015e <settings_commit_subtree+0x4e>
   1011e:	491e      	ldr	r1, [pc, #120]	; (10198 <settings_commit_subtree+0x88>)
   10120:	23f4      	movs	r3, #244	; 0xf4
   10122:	4a1e      	ldr	r2, [pc, #120]	; (1019c <settings_commit_subtree+0x8c>)
   10124:	481e      	ldr	r0, [pc, #120]	; (101a0 <settings_commit_subtree+0x90>)
   10126:	f016 fe24 	bl	26d72 <assert_print>
   1012a:	481e      	ldr	r0, [pc, #120]	; (101a4 <settings_commit_subtree+0x94>)
   1012c:	f016 fe21 	bl	26d72 <assert_print>
   10130:	21f4      	movs	r1, #244	; 0xf4
   10132:	481a      	ldr	r0, [pc, #104]	; (1019c <settings_commit_subtree+0x8c>)
   10134:	f016 fe16 	bl	26d64 <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10138:	b92e      	cbnz	r6, 10146 <settings_commit_subtree+0x36>
			continue;
		}
		if (ch->h_commit) {
   1013a:	68e3      	ldr	r3, [r4, #12]
   1013c:	b95b      	cbnz	r3, 10156 <settings_commit_subtree+0x46>
{
   1013e:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10140:	4605      	mov	r5, r0
   10142:	3414      	adds	r4, #20
   10144:	e7e9      	b.n	1011a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10146:	2200      	movs	r2, #0
   10148:	4631      	mov	r1, r6
   1014a:	6820      	ldr	r0, [r4, #0]
   1014c:	f017 fc0d 	bl	2796a <settings_name_steq>
   10150:	2800      	cmp	r0, #0
   10152:	d1f2      	bne.n	1013a <settings_commit_subtree+0x2a>
   10154:	e7f3      	b.n	1013e <settings_commit_subtree+0x2e>
			rc2 = ch->h_commit();
   10156:	4798      	blx	r3
			if (!rc) {
   10158:	2d00      	cmp	r5, #0
   1015a:	d1f0      	bne.n	1013e <settings_commit_subtree+0x2e>
   1015c:	e7f0      	b.n	10140 <settings_commit_subtree+0x30>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1015e:	d3eb      	bcc.n	10138 <settings_commit_subtree+0x28>
	return list->head;
   10160:	4b11      	ldr	r3, [pc, #68]	; (101a8 <settings_commit_subtree+0x98>)
   10162:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   10164:	b194      	cbz	r4, 1018c <settings_commit_subtree+0x7c>
   10166:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10168:	b91e      	cbnz	r6, 10172 <settings_commit_subtree+0x62>
			continue;
		}
		if (ch->h_commit) {
   1016a:	68e3      	ldr	r3, [r4, #12]
   1016c:	b94b      	cbnz	r3, 10182 <settings_commit_subtree+0x72>
	return node->next;
   1016e:	6964      	ldr	r4, [r4, #20]
   10170:	e7f8      	b.n	10164 <settings_commit_subtree+0x54>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10172:	2200      	movs	r2, #0
   10174:	4631      	mov	r1, r6
   10176:	6820      	ldr	r0, [r4, #0]
   10178:	f017 fbf7 	bl	2796a <settings_name_steq>
   1017c:	2800      	cmp	r0, #0
   1017e:	d1f4      	bne.n	1016a <settings_commit_subtree+0x5a>
   10180:	e7f5      	b.n	1016e <settings_commit_subtree+0x5e>
			rc2 = ch->h_commit();
   10182:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   10184:	2d00      	cmp	r5, #0
   10186:	bf08      	it	eq
   10188:	4605      	moveq	r5, r0
   1018a:	e7f0      	b.n	1016e <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1018c:	4628      	mov	r0, r5
   1018e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10190:	0002cde0 	.word	0x0002cde0
   10194:	0002ce58 	.word	0x0002ce58
   10198:	0002f2f7 	.word	0x0002f2f7
   1019c:	0002f2c5 	.word	0x0002f2c5
   101a0:	0002dd81 	.word	0x0002dd81
   101a4:	0002eee2 	.word	0x0002eee2
   101a8:	2002145c 	.word	0x2002145c

000101ac <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   101ac:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   101ae:	4c07      	ldr	r4, [pc, #28]	; (101cc <settings_subsys_init+0x20>)
   101b0:	7823      	ldrb	r3, [r4, #0]
   101b2:	b10b      	cbz	r3, 101b8 <settings_subsys_init+0xc>
		return 0;
   101b4:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   101b6:	bd10      	pop	{r4, pc}
	settings_init();
   101b8:	f7ff feee 	bl	ff98 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   101bc:	f000 f866 	bl	1028c <settings_backend_init>
	if (!err) {
   101c0:	2800      	cmp	r0, #0
   101c2:	d1f8      	bne.n	101b6 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   101c4:	2301      	movs	r3, #1
   101c6:	7023      	strb	r3, [r4, #0]
   101c8:	e7f4      	b.n	101b4 <settings_subsys_init+0x8>
   101ca:	bf00      	nop
   101cc:	200222ae 	.word	0x200222ae

000101d0 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   101d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101d4:	4680      	mov	r8, r0
   101d6:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   101d8:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   101da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 10288 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   101de:	3401      	adds	r4, #1
{
   101e0:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
   101e2:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   101e4:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   101e8:	1e65      	subs	r5, r4, #1
   101ea:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   101ec:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   101f0:	d047      	beq.n	10282 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   101f2:	234a      	movs	r3, #74	; 0x4a
   101f4:	4629      	mov	r1, r5
   101f6:	aa05      	add	r2, sp, #20
   101f8:	4630      	mov	r0, r6
   101fa:	f017 f9a5 	bl	27548 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   101fe:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   10202:	343f      	adds	r4, #63	; 0x3f
   10204:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   10206:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10208:	4621      	mov	r1, r4
   1020a:	2301      	movs	r3, #1
   1020c:	4630      	mov	r0, r6
   1020e:	f10d 020b 	add.w	r2, sp, #11
   10212:	f017 f999 	bl	27548 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   10216:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10218:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1021a:	dc03      	bgt.n	10224 <settings_nvs_load+0x54>
   1021c:	2800      	cmp	r0, #0
   1021e:	dc03      	bgt.n	10228 <settings_nvs_load+0x58>
{
   10220:	462c      	mov	r4, r5
   10222:	e7e1      	b.n	101e8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   10224:	2800      	cmp	r0, #0
   10226:	dc16      	bgt.n	10256 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   10228:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   1022c:	42ab      	cmp	r3, r5
   1022e:	d109      	bne.n	10244 <settings_nvs_load+0x74>
				cf->last_name_id--;
   10230:	4642      	mov	r2, r8
   10232:	1e6b      	subs	r3, r5, #1
   10234:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   10238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1023c:	2302      	movs	r3, #2
   1023e:	4630      	mov	r0, r6
   10240:	f7ff f8a8 	bl	f394 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   10244:	4629      	mov	r1, r5
   10246:	4630      	mov	r0, r6
   10248:	f017 f97a 	bl	27540 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   1024c:	4621      	mov	r1, r4
   1024e:	4630      	mov	r0, r6
   10250:	f017 f976 	bl	27540 <nvs_delete>
			continue;
   10254:	e7e4      	b.n	10220 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   10256:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1025a:	eb0d 0703 	add.w	r7, sp, r3
   1025e:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
   10260:	4652      	mov	r2, sl
		name[rc1] = '\0';
   10262:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   10266:	a805      	add	r0, sp, #20
   10268:	f8cd 9000 	str.w	r9, [sp]
   1026c:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
   1026e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   10270:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   10274:	f7ff fefa 	bl	1006c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   10278:	2800      	cmp	r0, #0
   1027a:	d0d1      	beq.n	10220 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   1027c:	b018      	add	sp, #96	; 0x60
   1027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10282:	2000      	movs	r0, #0
	return ret;
   10284:	e7fa      	b.n	1027c <settings_nvs_load+0xac>
   10286:	bf00      	nop
   10288:	000279db 	.word	0x000279db

0001028c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1028c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1028e:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   10290:	4669      	mov	r1, sp
   10292:	2006      	movs	r0, #6
	uint32_t sector_cnt = 1;
   10294:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   10296:	f7ff fd9f 	bl	fdd8 <flash_area_open>
	if (rc) {
   1029a:	4604      	mov	r4, r0
   1029c:	2800      	cmp	r0, #0
   1029e:	d134      	bne.n	1030a <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   102a0:	2006      	movs	r0, #6
   102a2:	aa02      	add	r2, sp, #8
   102a4:	a901      	add	r1, sp, #4
   102a6:	f7ff fdbf 	bl	fe28 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   102aa:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   102ae:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   102b0:	d02b      	beq.n	1030a <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   102b2:	b138      	cbz	r0, 102c4 <settings_backend_init+0x38>
   102b4:	340c      	adds	r4, #12
   102b6:	d005      	beq.n	102c4 <settings_backend_init+0x38>
		k_panic();
   102b8:	4040      	eors	r0, r0
   102ba:	f380 8811 	msr	BASEPRI, r0
   102be:	f04f 0004 	mov.w	r0, #4
   102c2:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   102c4:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   102c6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   102ca:	d223      	bcs.n	10314 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   102cc:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
   102ce:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
   102d0:	9a00      	ldr	r2, [sp, #0]
   102d2:	6894      	ldr	r4, [r2, #8]
		nvs_size += nvs_sector_size;
   102d4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   102d6:	4284      	cmp	r4, r0
   102d8:	d31a      	bcc.n	10310 <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   102da:	3301      	adds	r3, #1
   102dc:	2b08      	cmp	r3, #8
   102de:	d1f9      	bne.n	102d4 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   102e0:	4d0e      	ldr	r5, [pc, #56]	; (1031c <settings_backend_init+0x90>)
   102e2:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   102e4:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   102e6:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   102e8:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   102ea:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   102ec:	68d3      	ldr	r3, [r2, #12]
   102ee:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   102f0:	f017 fc0d 	bl	27b0e <settings_nvs_backend_init>
	if (rc) {
   102f4:	4604      	mov	r4, r0
   102f6:	b940      	cbnz	r0, 1030a <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   102f8:	4e09      	ldr	r6, [pc, #36]	; (10320 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
   102fa:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   102fc:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   102fe:	f7ff fde9 	bl	fed4 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   10302:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10304:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   10306:	f7ff fdf3 	bl	fef0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   1030a:	4620      	mov	r0, r4
   1030c:	b004      	add	sp, #16
   1030e:	bd70      	pop	{r4, r5, r6, pc}
   10310:	b29b      	uxth	r3, r3
   10312:	e7e5      	b.n	102e0 <settings_backend_init+0x54>
		return -EDOM;
   10314:	f06f 0420 	mvn.w	r4, #32
   10318:	e7f7      	b.n	1030a <settings_backend_init+0x7e>
   1031a:	bf00      	nop
   1031c:	20021464 	.word	0x20021464
   10320:	2000842c 	.word	0x2000842c

00010324 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10328:	4605      	mov	r5, r0
	__asm__ volatile(
   1032a:	f04f 0320 	mov.w	r3, #32
   1032e:	f3ef 8611 	mrs	r6, BASEPRI
   10332:	f383 8812 	msr	BASEPRI_MAX, r3
   10336:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1033a:	4820      	ldr	r0, [pc, #128]	; (103bc <pm_state_notify+0x98>)
   1033c:	f011 f9f0 	bl	21720 <z_spin_lock_valid>
   10340:	b968      	cbnz	r0, 1035e <pm_state_notify+0x3a>
   10342:	2394      	movs	r3, #148	; 0x94
   10344:	4a1e      	ldr	r2, [pc, #120]	; (103c0 <pm_state_notify+0x9c>)
   10346:	491f      	ldr	r1, [pc, #124]	; (103c4 <pm_state_notify+0xa0>)
   10348:	481f      	ldr	r0, [pc, #124]	; (103c8 <pm_state_notify+0xa4>)
   1034a:	f016 fd12 	bl	26d72 <assert_print>
   1034e:	491b      	ldr	r1, [pc, #108]	; (103bc <pm_state_notify+0x98>)
   10350:	481e      	ldr	r0, [pc, #120]	; (103cc <pm_state_notify+0xa8>)
   10352:	f016 fd0e 	bl	26d72 <assert_print>
   10356:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10358:	4819      	ldr	r0, [pc, #100]	; (103c0 <pm_state_notify+0x9c>)
   1035a:	f016 fd03 	bl	26d64 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1035e:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
   10362:	4816      	ldr	r0, [pc, #88]	; (103bc <pm_state_notify+0x98>)
   10364:	f011 f9f8 	bl	21758 <z_spin_lock_set_owner>
	return list->head;
   10368:	4b19      	ldr	r3, [pc, #100]	; (103d0 <pm_state_notify+0xac>)
   1036a:	4f1a      	ldr	r7, [pc, #104]	; (103d4 <pm_state_notify+0xb0>)
   1036c:	681c      	ldr	r4, [r3, #0]
   1036e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 103d8 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10372:	b97c      	cbnz	r4, 10394 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10374:	4811      	ldr	r0, [pc, #68]	; (103bc <pm_state_notify+0x98>)
   10376:	f011 f9e1 	bl	2173c <z_spin_unlock_valid>
   1037a:	b9c8      	cbnz	r0, 103b0 <pm_state_notify+0x8c>
   1037c:	23c2      	movs	r3, #194	; 0xc2
   1037e:	4a10      	ldr	r2, [pc, #64]	; (103c0 <pm_state_notify+0x9c>)
   10380:	4916      	ldr	r1, [pc, #88]	; (103dc <pm_state_notify+0xb8>)
   10382:	4811      	ldr	r0, [pc, #68]	; (103c8 <pm_state_notify+0xa4>)
   10384:	f016 fcf5 	bl	26d72 <assert_print>
   10388:	490c      	ldr	r1, [pc, #48]	; (103bc <pm_state_notify+0x98>)
   1038a:	4815      	ldr	r0, [pc, #84]	; (103e0 <pm_state_notify+0xbc>)
   1038c:	f016 fcf1 	bl	26d72 <assert_print>
   10390:	21c2      	movs	r1, #194	; 0xc2
   10392:	e7e1      	b.n	10358 <pm_state_notify+0x34>
			callback = notifier->state_exit;
   10394:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   10398:	2d00      	cmp	r5, #0
   1039a:	bf18      	it	ne
   1039c:	4613      	movne	r3, r2
		if (callback) {
   1039e:	b12b      	cbz	r3, 103ac <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   103a0:	f898 2014 	ldrb.w	r2, [r8, #20]
   103a4:	fb09 f202 	mul.w	r2, r9, r2
   103a8:	5cb8      	ldrb	r0, [r7, r2]
   103aa:	4798      	blx	r3
	return node->next;
   103ac:	6824      	ldr	r4, [r4, #0]
   103ae:	e7e0      	b.n	10372 <pm_state_notify+0x4e>
	__asm__ volatile(
   103b0:	f386 8811 	msr	BASEPRI, r6
   103b4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   103b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   103bc:	200214a4 	.word	0x200214a4
   103c0:	0002ebe3 	.word	0x0002ebe3
   103c4:	0002ec3c 	.word	0x0002ec3c
   103c8:	0002dd81 	.word	0x0002dd81
   103cc:	0002ec51 	.word	0x0002ec51
   103d0:	200214c4 	.word	0x200214c4
   103d4:	200214b8 	.word	0x200214b8
   103d8:	20021a20 	.word	0x20021a20
   103dc:	0002ec10 	.word	0x0002ec10
   103e0:	0002ec27 	.word	0x0002ec27

000103e4 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   103e4:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   103e6:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   103e8:	4b16      	ldr	r3, [pc, #88]	; (10444 <pm_system_resume+0x60>)
   103ea:	7d1c      	ldrb	r4, [r3, #20]
   103ec:	f004 031f 	and.w	r3, r4, #31
   103f0:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   103f2:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   103f4:	4b14      	ldr	r3, [pc, #80]	; (10448 <pm_system_resume+0x64>)
   103f6:	0961      	lsrs	r1, r4, #5
   103f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   103fc:	e8d3 1fef 	ldaex	r1, [r3]
   10400:	ea01 0500 	and.w	r5, r1, r0
   10404:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10408:	2e00      	cmp	r6, #0
   1040a:	d1f7      	bne.n	103fc <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1040c:	420a      	tst	r2, r1
   1040e:	d013      	beq.n	10438 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10410:	4b0e      	ldr	r3, [pc, #56]	; (1044c <pm_system_resume+0x68>)
   10412:	4d0f      	ldr	r5, [pc, #60]	; (10450 <pm_system_resume+0x6c>)
   10414:	b18b      	cbz	r3, 1043a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10416:	230c      	movs	r3, #12
   10418:	4363      	muls	r3, r4
   1041a:	18ea      	adds	r2, r5, r3
   1041c:	7851      	ldrb	r1, [r2, #1]
   1041e:	5ce8      	ldrb	r0, [r5, r3]
   10420:	f016 fda3 	bl	26f6a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10424:	2000      	movs	r0, #0
   10426:	f7ff ff7d 	bl	10324 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1042a:	230c      	movs	r3, #12
   1042c:	435c      	muls	r4, r3
   1042e:	2300      	movs	r3, #0
   10430:	192a      	adds	r2, r5, r4
   10432:	512b      	str	r3, [r5, r4]
   10434:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10438:	bd70      	pop	{r4, r5, r6, pc}
   1043a:	f383 8811 	msr	BASEPRI, r3
   1043e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10442:	e7ef      	b.n	10424 <pm_system_resume+0x40>
   10444:	20021a20 	.word	0x20021a20
   10448:	200214cc 	.word	0x200214cc
   1044c:	00026f6b 	.word	0x00026f6b
   10450:	200214b8 	.word	0x200214b8

00010454 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10458:	4b45      	ldr	r3, [pc, #276]	; (10570 <pm_system_suspend+0x11c>)
{
   1045a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1045c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1045e:	f04f 0320 	mov.w	r3, #32
   10462:	f3ef 8811 	mrs	r8, BASEPRI
   10466:	f383 8812 	msr	BASEPRI_MAX, r3
   1046a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1046e:	4841      	ldr	r0, [pc, #260]	; (10574 <pm_system_suspend+0x120>)
   10470:	f011 f956 	bl	21720 <z_spin_lock_valid>
   10474:	b968      	cbnz	r0, 10492 <pm_system_suspend+0x3e>
   10476:	2394      	movs	r3, #148	; 0x94
   10478:	4a3f      	ldr	r2, [pc, #252]	; (10578 <pm_system_suspend+0x124>)
   1047a:	4940      	ldr	r1, [pc, #256]	; (1057c <pm_system_suspend+0x128>)
   1047c:	4840      	ldr	r0, [pc, #256]	; (10580 <pm_system_suspend+0x12c>)
   1047e:	f016 fc78 	bl	26d72 <assert_print>
   10482:	493c      	ldr	r1, [pc, #240]	; (10574 <pm_system_suspend+0x120>)
   10484:	483f      	ldr	r0, [pc, #252]	; (10584 <pm_system_suspend+0x130>)
   10486:	f016 fc74 	bl	26d72 <assert_print>
   1048a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1048c:	483a      	ldr	r0, [pc, #232]	; (10578 <pm_system_suspend+0x124>)
   1048e:	f016 fc69 	bl	26d64 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10492:	240c      	movs	r4, #12
   10494:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   10496:	4837      	ldr	r0, [pc, #220]	; (10574 <pm_system_suspend+0x120>)
   10498:	f011 f95e 	bl	21758 <z_spin_lock_set_owner>
   1049c:	4b3a      	ldr	r3, [pc, #232]	; (10588 <pm_system_suspend+0x134>)
   1049e:	4e3b      	ldr	r6, [pc, #236]	; (1058c <pm_system_suspend+0x138>)
   104a0:	5d19      	ldrb	r1, [r3, r4]
   104a2:	191a      	adds	r2, r3, r4
   104a4:	b1b9      	cbz	r1, 104d6 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   104a6:	ca07      	ldmia	r2, {r0, r1, r2}
   104a8:	eb06 0c04 	add.w	ip, r6, r4
   104ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   104b0:	2200      	movs	r2, #0
   104b2:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   104b4:	482f      	ldr	r0, [pc, #188]	; (10574 <pm_system_suspend+0x120>)
   104b6:	f011 f941 	bl	2173c <z_spin_unlock_valid>
   104ba:	4604      	mov	r4, r0
   104bc:	b9b0      	cbnz	r0, 104ec <pm_system_suspend+0x98>
   104be:	23c2      	movs	r3, #194	; 0xc2
   104c0:	4a2d      	ldr	r2, [pc, #180]	; (10578 <pm_system_suspend+0x124>)
   104c2:	4933      	ldr	r1, [pc, #204]	; (10590 <pm_system_suspend+0x13c>)
   104c4:	482e      	ldr	r0, [pc, #184]	; (10580 <pm_system_suspend+0x12c>)
   104c6:	f016 fc54 	bl	26d72 <assert_print>
   104ca:	492a      	ldr	r1, [pc, #168]	; (10574 <pm_system_suspend+0x120>)
   104cc:	4831      	ldr	r0, [pc, #196]	; (10594 <pm_system_suspend+0x140>)
   104ce:	f016 fc50 	bl	26d72 <assert_print>
   104d2:	21c2      	movs	r1, #194	; 0xc2
   104d4:	e7da      	b.n	1048c <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   104d6:	4639      	mov	r1, r7
   104d8:	4628      	mov	r0, r5
   104da:	f000 f865 	bl	105a8 <pm_policy_next_state>
		if (info != NULL) {
   104de:	2800      	cmp	r0, #0
   104e0:	d0e8      	beq.n	104b4 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   104e2:	c807      	ldmia	r0, {r0, r1, r2}
   104e4:	4434      	add	r4, r6
   104e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   104ea:	e7e3      	b.n	104b4 <pm_system_suspend+0x60>
	__asm__ volatile(
   104ec:	f388 8811 	msr	BASEPRI, r8
   104f0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   104f4:	230c      	movs	r3, #12
   104f6:	436b      	muls	r3, r5
   104f8:	18f2      	adds	r2, r6, r3
   104fa:	5cf3      	ldrb	r3, [r6, r3]
   104fc:	b3ab      	cbz	r3, 1056a <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   104fe:	1c7b      	adds	r3, r7, #1
   10500:	d00f      	beq.n	10522 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10502:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10506:	2100      	movs	r1, #0
   10508:	f8d2 e008 	ldr.w	lr, [r2, #8]
   1050c:	4822      	ldr	r0, [pc, #136]	; (10598 <pm_system_suspend+0x144>)
   1050e:	2300      	movs	r3, #0
   10510:	fbee 010c 	umlal	r0, r1, lr, ip
   10514:	4a21      	ldr	r2, [pc, #132]	; (1059c <pm_system_suspend+0x148>)
   10516:	f7f8 fceb 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1051a:	2101      	movs	r1, #1
   1051c:	1a38      	subs	r0, r7, r0
   1051e:	f013 fddd 	bl	240dc <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10522:	f012 fc5b 	bl	22ddc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10526:	2001      	movs	r0, #1
   10528:	f7ff fefc 	bl	10324 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1052c:	4b1c      	ldr	r3, [pc, #112]	; (105a0 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1052e:	096a      	lsrs	r2, r5, #5
   10530:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10534:	2201      	movs	r2, #1
   10536:	f005 011f 	and.w	r1, r5, #31
   1053a:	408a      	lsls	r2, r1
   1053c:	e8d3 0fef 	ldaex	r0, [r3]
   10540:	4310      	orrs	r0, r2
   10542:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10546:	2900      	cmp	r1, #0
   10548:	d1f8      	bne.n	1053c <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   1054a:	4b16      	ldr	r3, [pc, #88]	; (105a4 <pm_system_suspend+0x150>)
   1054c:	b133      	cbz	r3, 1055c <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   1054e:	230c      	movs	r3, #12
   10550:	436b      	muls	r3, r5
   10552:	18f2      	adds	r2, r6, r3
   10554:	7851      	ldrb	r1, [r2, #1]
   10556:	5cf0      	ldrb	r0, [r6, r3]
   10558:	f016 fcfb 	bl	26f52 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1055c:	f7ff ff42 	bl	103e4 <pm_system_resume>
	k_sched_unlock();
   10560:	f012 fca8 	bl	22eb4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   10564:	4620      	mov	r0, r4
   10566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   1056a:	461c      	mov	r4, r3
   1056c:	e7fa      	b.n	10564 <pm_system_suspend+0x110>
   1056e:	bf00      	nop
   10570:	20021a20 	.word	0x20021a20
   10574:	200214a8 	.word	0x200214a8
   10578:	0002ebe3 	.word	0x0002ebe3
   1057c:	0002ec3c 	.word	0x0002ec3c
   10580:	0002dd81 	.word	0x0002dd81
   10584:	0002ec51 	.word	0x0002ec51
   10588:	200214ac 	.word	0x200214ac
   1058c:	200214b8 	.word	0x200214b8
   10590:	0002ec10 	.word	0x0002ec10
   10594:	0002ec27 	.word	0x0002ec27
   10598:	000f423f 	.word	0x000f423f
   1059c:	000f4240 	.word	0x000f4240
   105a0:	200214cc 	.word	0x200214cc
   105a4:	00026f53 	.word	0x00026f53

000105a8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   105a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105ac:	b085      	sub	sp, #20
   105ae:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   105b0:	a903      	add	r1, sp, #12
   105b2:	f000 f843 	bl	1063c <pm_state_cpu_get_all>
   105b6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   105ba:	4604      	mov	r4, r0
   105bc:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   105c0:	4b1b      	ldr	r3, [pc, #108]	; (10630 <pm_policy_next_state+0x88>)
   105c2:	9d03      	ldr	r5, [sp, #12]
   105c4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   105c8:	1e43      	subs	r3, r0, #1
   105ca:	b21b      	sxth	r3, r3
   105cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   105d0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10634 <pm_policy_next_state+0x8c>
   105d4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   105d8:	b924      	cbnz	r4, 105e4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   105da:	46a1      	mov	r9, r4
}
   105dc:	4648      	mov	r0, r9
   105de:	b005      	add	sp, #20
   105e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105e4:	46c4      	mov	ip, r8
   105e6:	4659      	mov	r1, fp
   105e8:	6868      	ldr	r0, [r5, #4]
   105ea:	2300      	movs	r3, #0
   105ec:	fbe0 c107 	umlal	ip, r1, r0, r7
   105f0:	4a11      	ldr	r2, [pc, #68]	; (10638 <pm_policy_next_state+0x90>)
   105f2:	4660      	mov	r0, ip
   105f4:	f7f8 fc7c 	bl	8ef0 <__aeabi_uldivmod>
   105f8:	46c4      	mov	ip, r8
   105fa:	4659      	mov	r1, fp
   105fc:	9001      	str	r0, [sp, #4]
   105fe:	68a8      	ldr	r0, [r5, #8]
   10600:	2300      	movs	r3, #0
   10602:	fbe0 c107 	umlal	ip, r1, r0, r7
   10606:	4a0c      	ldr	r2, [pc, #48]	; (10638 <pm_policy_next_state+0x90>)
   10608:	4660      	mov	r0, ip
   1060a:	f7f8 fc71 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1060e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10612:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10614:	d001      	beq.n	1061a <pm_policy_next_state+0x72>
   10616:	4582      	cmp	sl, r0
   10618:	d905      	bls.n	10626 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1061a:	1c73      	adds	r3, r6, #1
   1061c:	d0de      	beq.n	105dc <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1061e:	9b01      	ldr	r3, [sp, #4]
   10620:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10622:	42b0      	cmp	r0, r6
   10624:	d9da      	bls.n	105dc <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10626:	3c01      	subs	r4, #1
   10628:	b2a4      	uxth	r4, r4
   1062a:	3d0c      	subs	r5, #12
   1062c:	e7d4      	b.n	105d8 <pm_policy_next_state+0x30>
   1062e:	bf00      	nop
   10630:	20008440 	.word	0x20008440
   10634:	000f423f 	.word	0x000f423f
   10638:	000f4240 	.word	0x000f4240

0001063c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1063c:	b908      	cbnz	r0, 10642 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1063e:	4b02      	ldr	r3, [pc, #8]	; (10648 <pm_state_cpu_get_all+0xc>)
   10640:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10642:	2000      	movs	r0, #0
   10644:	4770      	bx	lr
   10646:	bf00      	nop
   10648:	0002d3dc 	.word	0x0002d3dc

0001064c <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   1064c:	4b03      	ldr	r3, [pc, #12]	; (1065c <nus_ccc_cfg_changed+0x10>)
   1064e:	689b      	ldr	r3, [r3, #8]
   10650:	b11b      	cbz	r3, 1065a <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10652:	1e48      	subs	r0, r1, #1
   10654:	bf18      	it	ne
   10656:	2001      	movne	r0, #1
   10658:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   1065a:	4770      	bx	lr
   1065c:	200214d0 	.word	0x200214d0

00010660 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   10660:	b510      	push	{r4, lr}
   10662:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   10664:	4b03      	ldr	r3, [pc, #12]	; (10674 <on_receive+0x14>)
{
   10666:	4611      	mov	r1, r2
	if (nus_cb.received) {
   10668:	681b      	ldr	r3, [r3, #0]
   1066a:	b10b      	cbz	r3, 10670 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   1066c:	4622      	mov	r2, r4
   1066e:	4798      	blx	r3
}
	return len;
}
   10670:	4620      	mov	r0, r4
   10672:	bd10      	pop	{r4, pc}
   10674:	200214d0 	.word	0x200214d0

00010678 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   10678:	4b02      	ldr	r3, [pc, #8]	; (10684 <on_sent+0xc>)
   1067a:	685b      	ldr	r3, [r3, #4]
   1067c:	b103      	cbz	r3, 10680 <on_sent+0x8>
		nus_cb.sent(conn);
   1067e:	4718      	bx	r3
	}
}
   10680:	4770      	bx	lr
   10682:	bf00      	nop
   10684:	200214d0 	.word	0x200214d0

00010688 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   10688:	b130      	cbz	r0, 10698 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   1068a:	4b04      	ldr	r3, [pc, #16]	; (1069c <bt_nus_init+0x14>)
   1068c:	6802      	ldr	r2, [r0, #0]
   1068e:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   10690:	6842      	ldr	r2, [r0, #4]
   10692:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   10694:	6882      	ldr	r2, [r0, #8]
   10696:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   10698:	2000      	movs	r0, #0
   1069a:	4770      	bx	lr
   1069c:	200214d0 	.word	0x200214d0

000106a0 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   106a0:	b570      	push	{r4, r5, r6, lr}
   106a2:	460e      	mov	r6, r1
   106a4:	4615      	mov	r5, r2
   106a6:	4604      	mov	r4, r0
   106a8:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   106aa:	2100      	movs	r1, #0
   106ac:	2218      	movs	r2, #24
   106ae:	4668      	mov	r0, sp
   106b0:	f01b fbbe 	bl	2be30 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   106b4:	490b      	ldr	r1, [pc, #44]	; (106e4 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   106b6:	4b0c      	ldr	r3, [pc, #48]	; (106e8 <bt_nus_send+0x48>)
	params.data = data;
   106b8:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   106bc:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   106c0:	9304      	str	r3, [sp, #16]

	if (!conn) {
   106c2:	b92c      	cbnz	r4, 106d0 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   106c4:	4669      	mov	r1, sp
   106c6:	4620      	mov	r0, r4
   106c8:	f007 ff0a 	bl	184e0 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   106cc:	b006      	add	sp, #24
   106ce:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   106d0:	2201      	movs	r2, #1
   106d2:	4620      	mov	r0, r4
   106d4:	f007 fbd2 	bl	17e7c <bt_gatt_is_subscribed>
   106d8:	2800      	cmp	r0, #0
   106da:	d1f3      	bne.n	106c4 <bt_nus_send+0x24>
		return -EINVAL;
   106dc:	f06f 0015 	mvn.w	r0, #21
   106e0:	e7f4      	b.n	106cc <bt_nus_send+0x2c>
   106e2:	bf00      	nop
   106e4:	0002d404 	.word	0x0002d404
   106e8:	00010679 	.word	0x00010679

000106ec <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   106ec:	4904      	ldr	r1, [pc, #16]	; (10700 <sub_bytes+0x14>)
   106ee:	1e43      	subs	r3, r0, #1
   106f0:	300f      	adds	r0, #15
   106f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   106f6:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   106f8:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   106fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   106fc:	d1f9      	bne.n	106f2 <sub_bytes+0x6>
	}
}
   106fe:	4770      	bx	lr
   10700:	0002f34e 	.word	0x0002f34e

00010704 <tc_aes128_set_encrypt_key>:
{
   10704:	b5f0      	push	{r4, r5, r6, r7, lr}
   10706:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10708:	4e26      	ldr	r6, [pc, #152]	; (107a4 <tc_aes128_set_encrypt_key+0xa0>)
{
   1070a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1070c:	ad01      	add	r5, sp, #4
{
   1070e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10710:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10714:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10718:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1071c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10720:	4638      	mov	r0, r7
   10722:	2f00      	cmp	r7, #0
   10724:	d039      	beq.n	1079a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10726:	2c00      	cmp	r4, #0
   10728:	d039      	beq.n	1079e <tc_aes128_set_encrypt_key+0x9a>
   1072a:	1f38      	subs	r0, r7, #4
   1072c:	4602      	mov	r2, r0
   1072e:	4621      	mov	r1, r4
   10730:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10732:	784b      	ldrb	r3, [r1, #1]
   10734:	780d      	ldrb	r5, [r1, #0]
   10736:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10738:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1073c:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   1073e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10740:	432b      	orrs	r3, r5
   10742:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10746:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10748:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1074c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10750:	d1ef      	bne.n	10732 <tc_aes128_set_encrypt_key+0x2e>
   10752:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10754:	4c14      	ldr	r4, [pc, #80]	; (107a8 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10756:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10758:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1075a:	d116      	bne.n	1078a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1075c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10760:	5ca5      	ldrb	r5, [r4, r2]
   10762:	0e1a      	lsrs	r2, r3, #24
   10764:	5ca2      	ldrb	r2, [r4, r2]
   10766:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1076a:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1076e:	5d65      	ldrb	r5, [r4, r5]
   10770:	b2db      	uxtb	r3, r3
   10772:	5ce3      	ldrb	r3, [r4, r3]
   10774:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10778:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1077c:	f021 0303 	bic.w	r3, r1, #3
   10780:	3330      	adds	r3, #48	; 0x30
   10782:	446b      	add	r3, sp
   10784:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10788:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1078a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1078e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10790:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10792:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10794:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10796:	d1de      	bne.n	10756 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   10798:	2001      	movs	r0, #1
}
   1079a:	b00d      	add	sp, #52	; 0x34
   1079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1079e:	4620      	mov	r0, r4
   107a0:	e7fb      	b.n	1079a <tc_aes128_set_encrypt_key+0x96>
   107a2:	bf00      	nop
   107a4:	0002ce7c 	.word	0x0002ce7c
   107a8:	0002f34e 	.word	0x0002f34e

000107ac <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   107ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   107b0:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   107b2:	6803      	ldr	r3, [r0, #0]
{
   107b4:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   107b6:	9302      	str	r3, [sp, #8]
   107b8:	6843      	ldr	r3, [r0, #4]
   107ba:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 10978 <compress+0x1cc>
   107be:	9303      	str	r3, [sp, #12]
   107c0:	6883      	ldr	r3, [r0, #8]
   107c2:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   107c6:	9304      	str	r3, [sp, #16]
   107c8:	68c3      	ldr	r3, [r0, #12]
   107ca:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   107cc:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   107ce:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   107d2:	9306      	str	r3, [sp, #24]
   107d4:	6943      	ldr	r3, [r0, #20]
   107d6:	9307      	str	r3, [sp, #28]
   107d8:	6983      	ldr	r3, [r0, #24]
   107da:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   107de:	9308      	str	r3, [sp, #32]
   107e0:	69c3      	ldr	r3, [r0, #28]
   107e2:	4698      	mov	r8, r3
   107e4:	9309      	str	r3, [sp, #36]	; 0x24
   107e6:	9b08      	ldr	r3, [sp, #32]
   107e8:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   107ea:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   107ec:	ab0c      	add	r3, sp, #48	; 0x30
   107ee:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   107f0:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   107f4:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   107f6:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   107fa:	44a9      	add	r9, r5
   107fc:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   10800:	9d00      	ldr	r5, [sp, #0]
   10802:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10806:	444b      	add	r3, r9
   10808:	ea25 0502 	bic.w	r5, r5, r2
   1080c:	ea02 090c 	and.w	r9, r2, ip
   10810:	ea85 0509 	eor.w	r5, r5, r9
   10814:	442b      	add	r3, r5
   10816:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10818:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   1081c:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   10820:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10824:	4025      	ands	r5, r4
   10826:	ea06 090b 	and.w	r9, r6, fp
   1082a:	ea85 0509 	eor.w	r5, r5, r9
   1082e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   10832:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10834:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10836:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10838:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   1083c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   1083e:	46de      	mov	lr, fp
   10840:	f8dd 8000 	ldr.w	r8, [sp]
   10844:	f040 8088 	bne.w	10958 <compress+0x1ac>
   10848:	f04f 0a10 	mov.w	sl, #16
   1084c:	494b      	ldr	r1, [pc, #300]	; (1097c <compress+0x1d0>)
   1084e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   10850:	4651      	mov	r1, sl
   10852:	f10a 0a01 	add.w	sl, sl, #1
   10856:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1085a:	f00a 070f 	and.w	r7, sl, #15
   1085e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10862:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10866:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   1086a:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   1086e:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   10870:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   10874:	f101 070e 	add.w	r7, r1, #14
   10878:	f007 070f 	and.w	r7, r7, #15
   1087c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10880:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10884:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   10886:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   1088a:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   1088e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10892:	f001 010f 	and.w	r1, r1, #15
   10896:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1089a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   1089e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   108a2:	f859 ec40 	ldr.w	lr, [r9, #-64]
   108a6:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   108aa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   108ae:	4471      	add	r1, lr
		s0 = sigma0(s0);
   108b0:	f8dd e004 	ldr.w	lr, [sp, #4]
   108b4:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   108b8:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   108bc:	4441      	add	r1, r8
		s1 = sigma1(s1);
   108be:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   108c2:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   108c4:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   108c8:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   108cc:	ea2c 0705 	bic.w	r7, ip, r5
   108d0:	ea87 0708 	eor.w	r7, r7, r8
   108d4:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   108d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   108dc:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   108e0:	4477      	add	r7, lr
   108e2:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   108e6:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   108ea:	4477      	add	r7, lr
   108ec:	440f      	add	r7, r1
   108ee:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   108f0:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   108f4:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   108f6:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   108fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   108fe:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   10902:	ea07 0703 	and.w	r7, r7, r3
   10906:	ea04 0806 	and.w	r8, r4, r6
   1090a:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   1090e:	ea87 0708 	eor.w	r7, r7, r8
   10912:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10914:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10916:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   1091a:	f8cd c000 	str.w	ip, [sp]
   1091e:	46b3      	mov	fp, r6
   10920:	d122      	bne.n	10968 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   10922:	9902      	ldr	r1, [sp, #8]
   10924:	4439      	add	r1, r7
   10926:	6001      	str	r1, [r0, #0]
   10928:	9903      	ldr	r1, [sp, #12]
   1092a:	4419      	add	r1, r3
   1092c:	9b04      	ldr	r3, [sp, #16]
   1092e:	6041      	str	r1, [r0, #4]
   10930:	4423      	add	r3, r4
   10932:	6083      	str	r3, [r0, #8]
   10934:	9b05      	ldr	r3, [sp, #20]
   10936:	4433      	add	r3, r6
   10938:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   1093a:	9b06      	ldr	r3, [sp, #24]
   1093c:	4473      	add	r3, lr
   1093e:	6103      	str	r3, [r0, #16]
   10940:	9b07      	ldr	r3, [sp, #28]
   10942:	442b      	add	r3, r5
   10944:	6143      	str	r3, [r0, #20]
   10946:	9b08      	ldr	r3, [sp, #32]
   10948:	4413      	add	r3, r2
   1094a:	6183      	str	r3, [r0, #24]
   1094c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1094e:	4463      	add	r3, ip
   10950:	61c3      	str	r3, [r0, #28]
}
   10952:	b01d      	add	sp, #116	; 0x74
   10954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10958:	46b3      	mov	fp, r6
   1095a:	f8cd c000 	str.w	ip, [sp]
   1095e:	4626      	mov	r6, r4
   10960:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   10962:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10964:	462a      	mov	r2, r5
   10966:	e740      	b.n	107ea <compress+0x3e>
   10968:	4694      	mov	ip, r2
   1096a:	4626      	mov	r6, r4
   1096c:	462a      	mov	r2, r5
   1096e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10970:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   10972:	463b      	mov	r3, r7
   10974:	e76c      	b.n	10850 <compress+0xa4>
   10976:	bf00      	nop
   10978:	0002d4d8 	.word	0x0002d4d8
   1097c:	0002d514 	.word	0x0002d514

00010980 <tc_sha256_init>:
{
   10980:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   10982:	4604      	mov	r4, r0
   10984:	b1c8      	cbz	r0, 109ba <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   10986:	2270      	movs	r2, #112	; 0x70
   10988:	2100      	movs	r1, #0
   1098a:	f017 f8ee 	bl	27b6a <_set>
	s->iv[1] = 0xbb67ae85;
   1098e:	4b0b      	ldr	r3, [pc, #44]	; (109bc <tc_sha256_init+0x3c>)
   10990:	4a0b      	ldr	r2, [pc, #44]	; (109c0 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   10992:	490c      	ldr	r1, [pc, #48]	; (109c4 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   10994:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   10998:	4b0b      	ldr	r3, [pc, #44]	; (109c8 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   1099a:	480c      	ldr	r0, [pc, #48]	; (109cc <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   1099c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   109a0:	4b0b      	ldr	r3, [pc, #44]	; (109d0 <tc_sha256_init+0x50>)
   109a2:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   109a6:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   109a8:	4b0a      	ldr	r3, [pc, #40]	; (109d4 <tc_sha256_init+0x54>)
   109aa:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   109ac:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   109b0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   109b4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   109b8:	61e3      	str	r3, [r4, #28]
}
   109ba:	bd10      	pop	{r4, pc}
   109bc:	bb67ae85 	.word	0xbb67ae85
   109c0:	6a09e667 	.word	0x6a09e667
   109c4:	3c6ef372 	.word	0x3c6ef372
   109c8:	a54ff53a 	.word	0xa54ff53a
   109cc:	510e527f 	.word	0x510e527f
   109d0:	9b05688c 	.word	0x9b05688c
   109d4:	1f83d9ab 	.word	0x1f83d9ab

000109d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   109d8:	4901      	ldr	r1, [pc, #4]	; (109e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   109da:	2210      	movs	r2, #16
	str	r2, [r1]
   109dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   109de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   109e0:	e000ed10 	.word	0xe000ed10

000109e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   109e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   109e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   109e8:	f380 8811 	msr	BASEPRI, r0
	isb
   109ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   109f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   109f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   109f6:	b662      	cpsie	i
	isb
   109f8:	f3bf 8f6f 	isb	sy

	bx	lr
   109fc:	4770      	bx	lr
   109fe:	bf00      	nop

00010a00 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   10a00:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   10a02:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10a04:	f381 8811 	msr	BASEPRI, r1

	wfe
   10a08:	bf20      	wfe

	msr	BASEPRI, r0
   10a0a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   10a0e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   10a10:	4770      	bx	lr
   10a12:	bf00      	nop

00010a14 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a18:	4681      	mov	r9, r0

	if (esf != NULL) {
   10a1a:	460c      	mov	r4, r1
{
   10a1c:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   10a1e:	2900      	cmp	r1, #0
   10a20:	d04c      	beq.n	10abc <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   10a22:	e9d1 1200 	ldrd	r1, r2, [r1]
   10a26:	466e      	mov	r6, sp
   10a28:	b08a      	sub	sp, #40	; 0x28
   10a2a:	68a3      	ldr	r3, [r4, #8]
   10a2c:	466d      	mov	r5, sp
   10a2e:	f04f 0a05 	mov.w	sl, #5
   10a32:	46a8      	mov	r8, r5
   10a34:	4825      	ldr	r0, [pc, #148]	; (10acc <z_arm_fatal_error+0xb8>)
   10a36:	e9c5 2307 	strd	r2, r3, [r5, #28]
   10a3a:	e9c5 0105 	strd	r0, r1, [r5, #20]
   10a3e:	f848 af10 	str.w	sl, [r8, #16]!
   10a42:	2300      	movs	r3, #0
   10a44:	4642      	mov	r2, r8
   10a46:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   10a4a:	4821      	ldr	r0, [pc, #132]	; (10ad0 <z_arm_fatal_error+0xbc>)
   10a4c:	f7fd ff82 	bl	e954 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   10a50:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   10a54:	46b5      	mov	sp, r6
   10a56:	6963      	ldr	r3, [r4, #20]
   10a58:	46ad      	mov	sp, r5
   10a5a:	481e      	ldr	r0, [pc, #120]	; (10ad4 <z_arm_fatal_error+0xc0>)
   10a5c:	e9c5 2307 	strd	r2, r3, [r5, #28]
   10a60:	e9c5 0105 	strd	r0, r1, [r5, #20]
   10a64:	f8c5 a010 	str.w	sl, [r5, #16]
   10a68:	2300      	movs	r3, #0
   10a6a:	4642      	mov	r2, r8
   10a6c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   10a70:	4817      	ldr	r0, [pc, #92]	; (10ad0 <z_arm_fatal_error+0xbc>)
   10a72:	f7fd ff6f 	bl	e954 <z_impl_z_log_msg_static_create>
   10a76:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   10a78:	b088      	sub	sp, #32
   10a7a:	69e3      	ldr	r3, [r4, #28]
   10a7c:	466d      	mov	r5, sp
   10a7e:	f04f 0a03 	mov.w	sl, #3
   10a82:	46a8      	mov	r8, r5
   10a84:	4a14      	ldr	r2, [pc, #80]	; (10ad8 <z_arm_fatal_error+0xc4>)
   10a86:	e9c5 2305 	strd	r2, r3, [r5, #20]
   10a8a:	f848 af10 	str.w	sl, [r8, #16]!
   10a8e:	2300      	movs	r3, #0
   10a90:	4642      	mov	r2, r8
   10a92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10a96:	480e      	ldr	r0, [pc, #56]	; (10ad0 <z_arm_fatal_error+0xbc>)
   10a98:	f7fd ff5c 	bl	e954 <z_impl_z_log_msg_static_create>
   10a9c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   10a9e:	69a3      	ldr	r3, [r4, #24]
   10aa0:	46ad      	mov	sp, r5
   10aa2:	4a0e      	ldr	r2, [pc, #56]	; (10adc <z_arm_fatal_error+0xc8>)
   10aa4:	f8c5 a010 	str.w	sl, [r5, #16]
   10aa8:	e9c5 2305 	strd	r2, r3, [r5, #20]
   10aac:	2300      	movs	r3, #0
   10aae:	4642      	mov	r2, r8
   10ab0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10ab4:	4806      	ldr	r0, [pc, #24]	; (10ad0 <z_arm_fatal_error+0xbc>)
   10ab6:	f7fd ff4d 	bl	e954 <z_impl_z_log_msg_static_create>
   10aba:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10abc:	4621      	mov	r1, r4
   10abe:	4648      	mov	r0, r9
   10ac0:	f010 f97e 	bl	20dc0 <z_fatal_error>
}
   10ac4:	46bd      	mov	sp, r7
   10ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10aca:	bf00      	nop
   10acc:	0002f44e 	.word	0x0002f44e
   10ad0:	0002cd88 	.word	0x0002cd88
   10ad4:	0002f47d 	.word	0x0002f47d
   10ad8:	0002f4ac 	.word	0x0002f4ac
   10adc:	0002f4bb 	.word	0x0002f4bb

00010ae0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10ae0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10ae2:	2800      	cmp	r0, #0
   10ae4:	db07      	blt.n	10af6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10ae6:	2301      	movs	r3, #1
   10ae8:	0941      	lsrs	r1, r0, #5
   10aea:	4a03      	ldr	r2, [pc, #12]	; (10af8 <arch_irq_enable+0x18>)
   10aec:	f000 001f 	and.w	r0, r0, #31
   10af0:	4083      	lsls	r3, r0
   10af2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10af6:	4770      	bx	lr
   10af8:	e000e100 	.word	0xe000e100

00010afc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10afc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10afe:	2800      	cmp	r0, #0
   10b00:	db0c      	blt.n	10b1c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10b02:	2201      	movs	r2, #1
   10b04:	4906      	ldr	r1, [pc, #24]	; (10b20 <arch_irq_disable+0x24>)
   10b06:	0943      	lsrs	r3, r0, #5
   10b08:	f000 001f 	and.w	r0, r0, #31
   10b0c:	4082      	lsls	r2, r0
   10b0e:	3320      	adds	r3, #32
   10b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10b18:	f3bf 8f6f 	isb	sy
}
   10b1c:	4770      	bx	lr
   10b1e:	bf00      	nop
   10b20:	e000e100 	.word	0xe000e100

00010b24 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10b24:	4b05      	ldr	r3, [pc, #20]	; (10b3c <arch_irq_is_enabled+0x18>)
   10b26:	0942      	lsrs	r2, r0, #5
   10b28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10b2c:	2301      	movs	r3, #1
   10b2e:	f000 001f 	and.w	r0, r0, #31
   10b32:	fa03 f000 	lsl.w	r0, r3, r0
}
   10b36:	4010      	ands	r0, r2
   10b38:	4770      	bx	lr
   10b3a:	bf00      	nop
   10b3c:	e000e100 	.word	0xe000e100

00010b40 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   10b40:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10b42:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10b44:	2b07      	cmp	r3, #7
{
   10b46:	4604      	mov	r4, r0
   10b48:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10b4a:	d90f      	bls.n	10b6c <z_arm_irq_priority_set+0x2c>
   10b4c:	235b      	movs	r3, #91	; 0x5b
   10b4e:	4a10      	ldr	r2, [pc, #64]	; (10b90 <z_arm_irq_priority_set+0x50>)
   10b50:	4910      	ldr	r1, [pc, #64]	; (10b94 <z_arm_irq_priority_set+0x54>)
   10b52:	4811      	ldr	r0, [pc, #68]	; (10b98 <z_arm_irq_priority_set+0x58>)
   10b54:	f016 f90d 	bl	26d72 <assert_print>
   10b58:	4629      	mov	r1, r5
   10b5a:	4810      	ldr	r0, [pc, #64]	; (10b9c <z_arm_irq_priority_set+0x5c>)
   10b5c:	2307      	movs	r3, #7
   10b5e:	4622      	mov	r2, r4
   10b60:	f016 f907 	bl	26d72 <assert_print>
   10b64:	215b      	movs	r1, #91	; 0x5b
   10b66:	480a      	ldr	r0, [pc, #40]	; (10b90 <z_arm_irq_priority_set+0x50>)
   10b68:	f016 f8fc 	bl	26d64 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10b6c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10b6e:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10b70:	bfac      	ite	ge
   10b72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10b76:	4a0a      	ldrlt	r2, [pc, #40]	; (10ba0 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10b78:	ea4f 1343 	mov.w	r3, r3, lsl #5
   10b7c:	b2db      	uxtb	r3, r3
   10b7e:	bfab      	itete	ge
   10b80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10b84:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10b88:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10b8c:	5413      	strblt	r3, [r2, r0]
}
   10b8e:	bd38      	pop	{r3, r4, r5, pc}
   10b90:	0002f4e9 	.word	0x0002f4e9
   10b94:	0002f51f 	.word	0x0002f51f
   10b98:	0002dd81 	.word	0x0002dd81
   10b9c:	0002f53a 	.word	0x0002f53a
   10ba0:	e000ed14 	.word	0xe000ed14

00010ba4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10ba4:	bf30      	wfi
    b z_SysNmiOnReset
   10ba6:	f7ff bffd 	b.w	10ba4 <z_SysNmiOnReset>
   10baa:	bf00      	nop

00010bac <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10bac:	4a0b      	ldr	r2, [pc, #44]	; (10bdc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   10bae:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10bb0:	4b0b      	ldr	r3, [pc, #44]	; (10be0 <z_arm_prep_c+0x34>)
   10bb2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10bb6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   10bb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10bbc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10bc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10bc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10bcc:	f010 f9ca 	bl	20f64 <z_bss_zero>
	z_data_copy();
   10bd0:	f013 f8c4 	bl	23d5c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10bd4:	f000 fc06 	bl	113e4 <z_arm_interrupt_init>
	z_cstart();
   10bd8:	f010 fa04 	bl	20fe4 <z_cstart>
   10bdc:	00008000 	.word	0x00008000
   10be0:	e000ed00 	.word	0xe000ed00

00010be4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10be4:	4a09      	ldr	r2, [pc, #36]	; (10c0c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10be6:	490a      	ldr	r1, [pc, #40]	; (10c10 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10be8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10bea:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10bec:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   10bee:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10bf0:	4908      	ldr	r1, [pc, #32]	; (10c14 <arch_swap+0x30>)
   10bf2:	684b      	ldr	r3, [r1, #4]
   10bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10bf8:	604b      	str	r3, [r1, #4]
   10bfa:	2300      	movs	r3, #0
   10bfc:	f383 8811 	msr	BASEPRI, r3
   10c00:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10c04:	6893      	ldr	r3, [r2, #8]
}
   10c06:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10c08:	4770      	bx	lr
   10c0a:	bf00      	nop
   10c0c:	20021a20 	.word	0x20021a20
   10c10:	0002dc5c 	.word	0x0002dc5c
   10c14:	e000ed00 	.word	0xe000ed00

00010c18 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10c18:	4915      	ldr	r1, [pc, #84]	; (10c70 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10c1a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   10c1c:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10c20:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10c24:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10c26:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10c2a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10c2e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   10c30:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10c34:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10c38:	4f0e      	ldr	r7, [pc, #56]	; (10c74 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10c3a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10c3e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   10c40:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10c42:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10c44:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10c48:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   10c4a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10c4c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10c4e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10c52:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10c56:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10c5a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   10c5e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   10c62:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   10c64:	f017 fbce 	bl	28404 <configure_builtin_stack_guard>
    pop {r2, lr}
   10c68:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   10c6c:	4770      	bx	lr
   10c6e:	0000      	.short	0x0000
    ldr r1, =_kernel
   10c70:	20021a20 	.word	0x20021a20
    ldr v4, =_SCS_ICSR
   10c74:	e000ed04 	.word	0xe000ed04

00010c78 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   10c78:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10c7c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10c7e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10c82:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10c86:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10c88:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10c8c:	2902      	cmp	r1, #2
    beq _oops
   10c8e:	d0ff      	beq.n	10c90 <_oops>

00010c90 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10c90:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   10c92:	f017 fba8 	bl	283e6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   10c96:	bd01      	pop	{r0, pc}

00010c98 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   10c98:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10c9c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   10c9e:	490d      	ldr	r1, [pc, #52]	; (10cd4 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   10ca0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   10ca4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   10ca6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   10caa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10cae:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   10cb0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   10cb4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   10cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10cbc:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10cc0:	2300      	movs	r3, #0
   10cc2:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10cc4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10cc8:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   10cca:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   10ccc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10cd0:	4770      	bx	lr
   10cd2:	bf00      	nop
   10cd4:	00026a23 	.word	0x00026a23

00010cd8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10cd8:	4b08      	ldr	r3, [pc, #32]	; (10cfc <arch_switch_to_main_thread+0x24>)
   10cda:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   10cdc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   10cde:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10ce2:	4610      	mov	r0, r2
   10ce4:	f381 8809 	msr	PSP, r1
   10ce8:	2100      	movs	r1, #0
   10cea:	b663      	cpsie	if
   10cec:	f381 8811 	msr	BASEPRI, r1
   10cf0:	f3bf 8f6f 	isb	sy
   10cf4:	2200      	movs	r2, #0
   10cf6:	2300      	movs	r3, #0
   10cf8:	f015 fe93 	bl	26a22 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10cfc:	20021a20 	.word	0x20021a20

00010d00 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10d00:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10d02:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10d04:	4a0b      	ldr	r2, [pc, #44]	; (10d34 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10d06:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10d08:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10d0a:	bf1e      	ittt	ne
	movne	r1, #0
   10d0c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10d0e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10d10:	f01a fe4e 	blne	2b9b0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10d14:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10d16:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10d1a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10d1e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10d22:	4905      	ldr	r1, [pc, #20]	; (10d38 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10d24:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10d26:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10d28:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10d2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10d2e:	4903      	ldr	r1, [pc, #12]	; (10d3c <_isr_wrapper+0x3c>)
	bx r1
   10d30:	4708      	bx	r1
   10d32:	0000      	.short	0x0000
	ldr r2, =_kernel
   10d34:	20021a20 	.word	0x20021a20
	ldr r1, =_sw_isr_table
   10d38:	0002c840 	.word	0x0002c840
	ldr r1, =z_arm_int_exit
   10d3c:	00010d41 	.word	0x00010d41

00010d40 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10d40:	4b04      	ldr	r3, [pc, #16]	; (10d54 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10d42:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10d44:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10d46:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10d48:	d003      	beq.n	10d52 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10d4a:	4903      	ldr	r1, [pc, #12]	; (10d58 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10d50:	600a      	str	r2, [r1, #0]

00010d52 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10d52:	4770      	bx	lr
	ldr r3, =_kernel
   10d54:	20021a20 	.word	0x20021a20
	ldr r1, =_SCS_ICSR
   10d58:	e000ed04 	.word	0xe000ed04

00010d5c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d60:	b086      	sub	sp, #24
   10d62:	4606      	mov	r6, r0
   10d64:	460d      	mov	r5, r1
   10d66:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   10d68:	2402      	movs	r4, #2
   10d6a:	4b4b      	ldr	r3, [pc, #300]	; (10e98 <mem_manage_fault.constprop.0+0x13c>)
   10d6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d70:	617b      	str	r3, [r7, #20]
   10d72:	484a      	ldr	r0, [pc, #296]	; (10e9c <mem_manage_fault.constprop.0+0x140>)
   10d74:	613c      	str	r4, [r7, #16]
   10d76:	f107 0210 	add.w	r2, r7, #16
   10d7a:	f017 fb47 	bl	2840c <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10d7e:	4b48      	ldr	r3, [pc, #288]	; (10ea0 <mem_manage_fault.constprop.0+0x144>)
   10d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d82:	06db      	lsls	r3, r3, #27
   10d84:	d509      	bpl.n	10d9a <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   10d86:	4b47      	ldr	r3, [pc, #284]	; (10ea4 <mem_manage_fault.constprop.0+0x148>)
   10d88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d8c:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10d90:	4842      	ldr	r0, [pc, #264]	; (10e9c <mem_manage_fault.constprop.0+0x140>)
   10d92:	f107 0210 	add.w	r2, r7, #16
   10d96:	f017 fb39 	bl	2840c <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10d9a:	4b41      	ldr	r3, [pc, #260]	; (10ea0 <mem_manage_fault.constprop.0+0x144>)
   10d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d9e:	0718      	lsls	r0, r3, #28
   10da0:	d50a      	bpl.n	10db8 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10da2:	4b41      	ldr	r3, [pc, #260]	; (10ea8 <mem_manage_fault.constprop.0+0x14c>)
   10da4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10da8:	617b      	str	r3, [r7, #20]
   10daa:	2302      	movs	r3, #2
   10dac:	483b      	ldr	r0, [pc, #236]	; (10e9c <mem_manage_fault.constprop.0+0x140>)
   10dae:	613b      	str	r3, [r7, #16]
   10db0:	f107 0210 	add.w	r2, r7, #16
   10db4:	f017 fb2a 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10db8:	4c39      	ldr	r4, [pc, #228]	; (10ea0 <mem_manage_fault.constprop.0+0x144>)
   10dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10dbc:	0799      	lsls	r1, r3, #30
   10dbe:	d522      	bpl.n	10e06 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   10dc0:	46e8      	mov	r8, sp
   10dc2:	4b3a      	ldr	r3, [pc, #232]	; (10eac <mem_manage_fault.constprop.0+0x150>)
   10dc4:	f107 0210 	add.w	r2, r7, #16
   10dc8:	617b      	str	r3, [r7, #20]
   10dca:	2302      	movs	r3, #2
   10dcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10dd0:	613b      	str	r3, [r7, #16]
   10dd2:	4832      	ldr	r0, [pc, #200]	; (10e9c <mem_manage_fault.constprop.0+0x140>)
   10dd4:	f017 fb1a 	bl	2840c <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   10dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10dda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10ddc:	0612      	lsls	r2, r2, #24
   10dde:	d512      	bpl.n	10e06 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10de0:	b088      	sub	sp, #32
   10de2:	466a      	mov	r2, sp
   10de4:	4932      	ldr	r1, [pc, #200]	; (10eb0 <mem_manage_fault.constprop.0+0x154>)
   10de6:	482d      	ldr	r0, [pc, #180]	; (10e9c <mem_manage_fault.constprop.0+0x140>)
   10de8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10dec:	2303      	movs	r3, #3
   10dee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10df2:	f842 3f10 	str.w	r3, [r2, #16]!
   10df6:	f017 fb09 	bl	2840c <z_log_msg_static_create.constprop.0>
   10dfa:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10dfc:	b11e      	cbz	r6, 10e06 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10dfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10e04:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10e06:	4b26      	ldr	r3, [pc, #152]	; (10ea0 <mem_manage_fault.constprop.0+0x144>)
   10e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e0a:	07db      	lsls	r3, r3, #31
   10e0c:	d50a      	bpl.n	10e24 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   10e0e:	4b29      	ldr	r3, [pc, #164]	; (10eb4 <mem_manage_fault.constprop.0+0x158>)
   10e10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e14:	617b      	str	r3, [r7, #20]
   10e16:	2302      	movs	r3, #2
   10e18:	4820      	ldr	r0, [pc, #128]	; (10e9c <mem_manage_fault.constprop.0+0x140>)
   10e1a:	613b      	str	r3, [r7, #16]
   10e1c:	f107 0210 	add.w	r2, r7, #16
   10e20:	f017 faf4 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10e24:	4b1e      	ldr	r3, [pc, #120]	; (10ea0 <mem_manage_fault.constprop.0+0x144>)
   10e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e28:	069e      	lsls	r6, r3, #26
   10e2a:	d50a      	bpl.n	10e42 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   10e2c:	4b22      	ldr	r3, [pc, #136]	; (10eb8 <mem_manage_fault.constprop.0+0x15c>)
   10e2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e32:	617b      	str	r3, [r7, #20]
   10e34:	2302      	movs	r3, #2
   10e36:	4819      	ldr	r0, [pc, #100]	; (10e9c <mem_manage_fault.constprop.0+0x140>)
   10e38:	613b      	str	r3, [r7, #16]
   10e3a:	f107 0210 	add.w	r2, r7, #16
   10e3e:	f017 fae5 	bl	2840c <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10e42:	4b17      	ldr	r3, [pc, #92]	; (10ea0 <mem_manage_fault.constprop.0+0x144>)
   10e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10e46:	06d4      	lsls	r4, r2, #27
   10e48:	d402      	bmi.n	10e50 <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10e4c:	0790      	lsls	r0, r2, #30
   10e4e:	d511      	bpl.n	10e74 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   10e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e52:	06d9      	lsls	r1, r3, #27
   10e54:	d50e      	bpl.n	10e74 <mem_manage_fault.constprop.0+0x118>
   10e56:	4919      	ldr	r1, [pc, #100]	; (10ebc <mem_manage_fault.constprop.0+0x160>)
   10e58:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   10e5c:	4a18      	ldr	r2, [pc, #96]	; (10ec0 <mem_manage_fault.constprop.0+0x164>)
   10e5e:	4819      	ldr	r0, [pc, #100]	; (10ec4 <mem_manage_fault.constprop.0+0x168>)
   10e60:	f015 ff87 	bl	26d72 <assert_print>
   10e64:	4818      	ldr	r0, [pc, #96]	; (10ec8 <mem_manage_fault.constprop.0+0x16c>)
   10e66:	f015 ff84 	bl	26d72 <assert_print>
   10e6a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   10e6e:	4814      	ldr	r0, [pc, #80]	; (10ec0 <mem_manage_fault.constprop.0+0x164>)
   10e70:	f015 ff78 	bl	26d64 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   10e74:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10e76:	4b0a      	ldr	r3, [pc, #40]	; (10ea0 <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
   10e78:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10e7c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   10e7e:	bf42      	ittt	mi
   10e80:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   10e82:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   10e86:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10e8a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10e8e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10e90:	7028      	strb	r0, [r5, #0]
}
   10e92:	46bd      	mov	sp, r7
   10e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e98:	0002f57a 	.word	0x0002f57a
   10e9c:	0002cd88 	.word	0x0002cd88
   10ea0:	e000ed00 	.word	0xe000ed00
   10ea4:	0002f590 	.word	0x0002f590
   10ea8:	0002f5c3 	.word	0x0002f5c3
   10eac:	0002f5d6 	.word	0x0002f5d6
   10eb0:	0002f5ee 	.word	0x0002f5ee
   10eb4:	0002f604 	.word	0x0002f604
   10eb8:	0002f623 	.word	0x0002f623
   10ebc:	0002f68c 	.word	0x0002f68c
   10ec0:	0002f652 	.word	0x0002f652
   10ec4:	0002dd81 	.word	0x0002dd81
   10ec8:	0002f6d6 	.word	0x0002f6d6

00010ecc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ed0:	b086      	sub	sp, #24
   10ed2:	4606      	mov	r6, r0
   10ed4:	460d      	mov	r5, r1
   10ed6:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   10ed8:	2402      	movs	r4, #2
   10eda:	4b3e      	ldr	r3, [pc, #248]	; (10fd4 <bus_fault.constprop.0+0x108>)
   10edc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ee0:	617b      	str	r3, [r7, #20]
   10ee2:	483d      	ldr	r0, [pc, #244]	; (10fd8 <bus_fault.constprop.0+0x10c>)
   10ee4:	613c      	str	r4, [r7, #16]
   10ee6:	f107 0210 	add.w	r2, r7, #16
   10eea:	f017 fa8f 	bl	2840c <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10eee:	4b3b      	ldr	r3, [pc, #236]	; (10fdc <bus_fault.constprop.0+0x110>)
   10ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ef2:	04d9      	lsls	r1, r3, #19
   10ef4:	d509      	bpl.n	10f0a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   10ef6:	4b3a      	ldr	r3, [pc, #232]	; (10fe0 <bus_fault.constprop.0+0x114>)
   10ef8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10efc:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10f00:	4835      	ldr	r0, [pc, #212]	; (10fd8 <bus_fault.constprop.0+0x10c>)
   10f02:	f107 0210 	add.w	r2, r7, #16
   10f06:	f017 fa81 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10f0a:	4b34      	ldr	r3, [pc, #208]	; (10fdc <bus_fault.constprop.0+0x110>)
   10f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f0e:	051a      	lsls	r2, r3, #20
   10f10:	d50a      	bpl.n	10f28 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10f12:	4b34      	ldr	r3, [pc, #208]	; (10fe4 <bus_fault.constprop.0+0x118>)
   10f14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f18:	617b      	str	r3, [r7, #20]
   10f1a:	2302      	movs	r3, #2
   10f1c:	482e      	ldr	r0, [pc, #184]	; (10fd8 <bus_fault.constprop.0+0x10c>)
   10f1e:	613b      	str	r3, [r7, #16]
   10f20:	f107 0210 	add.w	r2, r7, #16
   10f24:	f017 fa72 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10f28:	4c2c      	ldr	r4, [pc, #176]	; (10fdc <bus_fault.constprop.0+0x110>)
   10f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10f2c:	059b      	lsls	r3, r3, #22
   10f2e:	d522      	bpl.n	10f76 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   10f30:	46e8      	mov	r8, sp
   10f32:	4b2d      	ldr	r3, [pc, #180]	; (10fe8 <bus_fault.constprop.0+0x11c>)
   10f34:	4828      	ldr	r0, [pc, #160]	; (10fd8 <bus_fault.constprop.0+0x10c>)
   10f36:	617b      	str	r3, [r7, #20]
   10f38:	2302      	movs	r3, #2
   10f3a:	f107 0210 	add.w	r2, r7, #16
   10f3e:	613b      	str	r3, [r7, #16]
   10f40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f44:	f017 fa62 	bl	2840c <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10f48:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10f4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10f4c:	0410      	lsls	r0, r2, #16
   10f4e:	d512      	bpl.n	10f76 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10f50:	b088      	sub	sp, #32
   10f52:	466a      	mov	r2, sp
   10f54:	4925      	ldr	r1, [pc, #148]	; (10fec <bus_fault.constprop.0+0x120>)
   10f56:	4820      	ldr	r0, [pc, #128]	; (10fd8 <bus_fault.constprop.0+0x10c>)
   10f58:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10f5c:	2303      	movs	r3, #3
   10f5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10f62:	f842 3f10 	str.w	r3, [r2, #16]!
   10f66:	f017 fa51 	bl	2840c <z_log_msg_static_create.constprop.0>
   10f6a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10f6c:	b11e      	cbz	r6, 10f76 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10f70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10f74:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10f76:	4b19      	ldr	r3, [pc, #100]	; (10fdc <bus_fault.constprop.0+0x110>)
   10f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f7a:	0559      	lsls	r1, r3, #21
   10f7c:	d50a      	bpl.n	10f94 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   10f7e:	4b1c      	ldr	r3, [pc, #112]	; (10ff0 <bus_fault.constprop.0+0x124>)
   10f80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f84:	617b      	str	r3, [r7, #20]
   10f86:	2302      	movs	r3, #2
   10f88:	4813      	ldr	r0, [pc, #76]	; (10fd8 <bus_fault.constprop.0+0x10c>)
   10f8a:	613b      	str	r3, [r7, #16]
   10f8c:	f107 0210 	add.w	r2, r7, #16
   10f90:	f017 fa3c 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10f94:	4b11      	ldr	r3, [pc, #68]	; (10fdc <bus_fault.constprop.0+0x110>)
   10f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10f98:	05d2      	lsls	r2, r2, #23
   10f9a:	d515      	bpl.n	10fc8 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   10f9c:	4b15      	ldr	r3, [pc, #84]	; (10ff4 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10f9e:	617b      	str	r3, [r7, #20]
   10fa0:	2302      	movs	r3, #2
   10fa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fa6:	480c      	ldr	r0, [pc, #48]	; (10fd8 <bus_fault.constprop.0+0x10c>)
   10fa8:	613b      	str	r3, [r7, #16]
   10faa:	f107 0210 	add.w	r2, r7, #16
   10fae:	f017 fa2d 	bl	2840c <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   10fb2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10fb4:	4a09      	ldr	r2, [pc, #36]	; (10fdc <bus_fault.constprop.0+0x110>)

	return reason;
}
   10fb6:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10fb8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10fba:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10fbe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10fc0:	7028      	strb	r0, [r5, #0]
}
   10fc2:	46bd      	mov	sp, r7
   10fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fca:	049b      	lsls	r3, r3, #18
   10fcc:	d5f1      	bpl.n	10fb2 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10fce:	4b0a      	ldr	r3, [pc, #40]	; (10ff8 <bus_fault.constprop.0+0x12c>)
   10fd0:	e7e5      	b.n	10f9e <bus_fault.constprop.0+0xd2>
   10fd2:	bf00      	nop
   10fd4:	0002f73a 	.word	0x0002f73a
   10fd8:	0002cd88 	.word	0x0002cd88
   10fdc:	e000ed00 	.word	0xe000ed00
   10fe0:	0002f750 	.word	0x0002f750
   10fe4:	0002f5c3 	.word	0x0002f5c3
   10fe8:	0002f761 	.word	0x0002f761
   10fec:	0002f77a 	.word	0x0002f77a
   10ff0:	0002f78f 	.word	0x0002f78f
   10ff4:	0002f7aa 	.word	0x0002f7aa
   10ff8:	0002f623 	.word	0x0002f623

00010ffc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10ffc:	b510      	push	{r4, lr}
   10ffe:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   11000:	2402      	movs	r4, #2
   11002:	4b3a      	ldr	r3, [pc, #232]	; (110ec <usage_fault.constprop.0+0xf0>)
   11004:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11008:	4839      	ldr	r0, [pc, #228]	; (110f0 <usage_fault.constprop.0+0xf4>)
   1100a:	aa04      	add	r2, sp, #16
   1100c:	9305      	str	r3, [sp, #20]
   1100e:	9404      	str	r4, [sp, #16]
   11010:	f017 f9fc 	bl	2840c <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11014:	4b37      	ldr	r3, [pc, #220]	; (110f4 <usage_fault.constprop.0+0xf8>)
   11016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11018:	019b      	lsls	r3, r3, #6
   1101a:	d508      	bpl.n	1102e <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   1101c:	4b36      	ldr	r3, [pc, #216]	; (110f8 <usage_fault.constprop.0+0xfc>)
   1101e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11022:	4833      	ldr	r0, [pc, #204]	; (110f0 <usage_fault.constprop.0+0xf4>)
   11024:	aa04      	add	r2, sp, #16
   11026:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1102a:	f017 f9ef 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1102e:	4b31      	ldr	r3, [pc, #196]	; (110f4 <usage_fault.constprop.0+0xf8>)
   11030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11032:	01dc      	lsls	r4, r3, #7
   11034:	d509      	bpl.n	1104a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   11036:	4b31      	ldr	r3, [pc, #196]	; (110fc <usage_fault.constprop.0+0x100>)
   11038:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1103c:	9305      	str	r3, [sp, #20]
   1103e:	2302      	movs	r3, #2
   11040:	482b      	ldr	r0, [pc, #172]	; (110f0 <usage_fault.constprop.0+0xf4>)
   11042:	aa04      	add	r2, sp, #16
   11044:	9304      	str	r3, [sp, #16]
   11046:	f017 f9e1 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1104a:	4b2a      	ldr	r3, [pc, #168]	; (110f4 <usage_fault.constprop.0+0xf8>)
   1104c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1104e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   11052:	d009      	beq.n	11068 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   11054:	2402      	movs	r4, #2
   11056:	4b2a      	ldr	r3, [pc, #168]	; (11100 <usage_fault.constprop.0+0x104>)
   11058:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1105c:	4824      	ldr	r0, [pc, #144]	; (110f0 <usage_fault.constprop.0+0xf4>)
   1105e:	aa04      	add	r2, sp, #16
   11060:	9305      	str	r3, [sp, #20]
   11062:	9404      	str	r4, [sp, #16]
   11064:	f017 f9d2 	bl	2840c <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11068:	4b22      	ldr	r3, [pc, #136]	; (110f4 <usage_fault.constprop.0+0xf8>)
   1106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1106c:	0318      	lsls	r0, r3, #12
   1106e:	d509      	bpl.n	11084 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   11070:	4b24      	ldr	r3, [pc, #144]	; (11104 <usage_fault.constprop.0+0x108>)
   11072:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11076:	9305      	str	r3, [sp, #20]
   11078:	2302      	movs	r3, #2
   1107a:	481d      	ldr	r0, [pc, #116]	; (110f0 <usage_fault.constprop.0+0xf4>)
   1107c:	aa04      	add	r2, sp, #16
   1107e:	9304      	str	r3, [sp, #16]
   11080:	f017 f9c4 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11084:	4b1b      	ldr	r3, [pc, #108]	; (110f4 <usage_fault.constprop.0+0xf8>)
   11086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11088:	0359      	lsls	r1, r3, #13
   1108a:	d509      	bpl.n	110a0 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1108c:	4b1e      	ldr	r3, [pc, #120]	; (11108 <usage_fault.constprop.0+0x10c>)
   1108e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11092:	9305      	str	r3, [sp, #20]
   11094:	2302      	movs	r3, #2
   11096:	4816      	ldr	r0, [pc, #88]	; (110f0 <usage_fault.constprop.0+0xf4>)
   11098:	aa04      	add	r2, sp, #16
   1109a:	9304      	str	r3, [sp, #16]
   1109c:	f017 f9b6 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   110a0:	4b14      	ldr	r3, [pc, #80]	; (110f4 <usage_fault.constprop.0+0xf8>)
   110a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   110a4:	039a      	lsls	r2, r3, #14
   110a6:	d509      	bpl.n	110bc <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   110a8:	4b18      	ldr	r3, [pc, #96]	; (1110c <usage_fault.constprop.0+0x110>)
   110aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   110ae:	9305      	str	r3, [sp, #20]
   110b0:	2302      	movs	r3, #2
   110b2:	480f      	ldr	r0, [pc, #60]	; (110f0 <usage_fault.constprop.0+0xf4>)
   110b4:	aa04      	add	r2, sp, #16
   110b6:	9304      	str	r3, [sp, #16]
   110b8:	f017 f9a8 	bl	2840c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   110bc:	4b0d      	ldr	r3, [pc, #52]	; (110f4 <usage_fault.constprop.0+0xf8>)
   110be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   110c0:	03db      	lsls	r3, r3, #15
   110c2:	d509      	bpl.n	110d8 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   110c4:	4b12      	ldr	r3, [pc, #72]	; (11110 <usage_fault.constprop.0+0x114>)
   110c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   110ca:	9305      	str	r3, [sp, #20]
   110cc:	2302      	movs	r3, #2
   110ce:	4808      	ldr	r0, [pc, #32]	; (110f0 <usage_fault.constprop.0+0xf4>)
   110d0:	aa04      	add	r2, sp, #16
   110d2:	9304      	str	r3, [sp, #16]
   110d4:	f017 f99a 	bl	2840c <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   110d8:	4a06      	ldr	r2, [pc, #24]	; (110f4 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   110da:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   110dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   110de:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   110e2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   110e6:	6293      	str	r3, [r2, #40]	; 0x28
}
   110e8:	b006      	add	sp, #24
   110ea:	bd10      	pop	{r4, pc}
   110ec:	0002f7c2 	.word	0x0002f7c2
   110f0:	0002cd88 	.word	0x0002cd88
   110f4:	e000ed00 	.word	0xe000ed00
   110f8:	0002f7da 	.word	0x0002f7da
   110fc:	0002f7ed 	.word	0x0002f7ed
   11100:	0002f807 	.word	0x0002f807
   11104:	0002f831 	.word	0x0002f831
   11108:	0002f84f 	.word	0x0002f84f
   1110c:	0002f874 	.word	0x0002f874
   11110:	0002f88e 	.word	0x0002f88e

00011114 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11118:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1111a:	4b93      	ldr	r3, [pc, #588]	; (11368 <z_arm_fault+0x254>)
{
   1111c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1111e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   11122:	4688      	mov	r8, r1
   11124:	4616      	mov	r6, r2
   11126:	2300      	movs	r3, #0
   11128:	af00      	add	r7, sp, #0
   1112a:	f3ca 0908 	ubfx	r9, sl, #0, #9
   1112e:	f383 8811 	msr	BASEPRI, r3
   11132:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11136:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1113a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1113e:	d00e      	beq.n	1115e <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   11140:	498a      	ldr	r1, [pc, #552]	; (1136c <z_arm_fault+0x258>)
   11142:	f44f 6384 	mov.w	r3, #1056	; 0x420
   11146:	4a8a      	ldr	r2, [pc, #552]	; (11370 <z_arm_fault+0x25c>)
   11148:	488a      	ldr	r0, [pc, #552]	; (11374 <z_arm_fault+0x260>)
   1114a:	f015 fe12 	bl	26d72 <assert_print>
   1114e:	488a      	ldr	r0, [pc, #552]	; (11378 <z_arm_fault+0x264>)
   11150:	f015 fe0f 	bl	26d72 <assert_print>
   11154:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   11158:	4885      	ldr	r0, [pc, #532]	; (11370 <z_arm_fault+0x25c>)
   1115a:	f015 fe03 	bl	26d64 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1115e:	f012 0401 	ands.w	r4, r2, #1
   11162:	d1ed      	bne.n	11140 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11164:	0653      	lsls	r3, r2, #25
   11166:	d404      	bmi.n	11172 <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11168:	0710      	lsls	r0, r2, #28
   1116a:	d40f      	bmi.n	1118c <z_arm_fault+0x78>
			*nested_exc = true;
   1116c:	f04f 0801 	mov.w	r8, #1
   11170:	e00f      	b.n	11192 <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   11172:	4b82      	ldr	r3, [pc, #520]	; (1137c <z_arm_fault+0x268>)
   11174:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11178:	61fb      	str	r3, [r7, #28]
   1117a:	2302      	movs	r3, #2
   1117c:	4880      	ldr	r0, [pc, #512]	; (11380 <z_arm_fault+0x26c>)
   1117e:	61bb      	str	r3, [r7, #24]
   11180:	f107 0218 	add.w	r2, r7, #24
   11184:	f017 f942 	bl	2840c <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11188:	0771      	lsls	r1, r6, #29
   1118a:	d500      	bpl.n	1118e <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
   1118c:	4645      	mov	r5, r8
	*nested_exc = false;
   1118e:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   11192:	2d00      	cmp	r5, #0
   11194:	d0d4      	beq.n	11140 <z_arm_fault+0x2c>
	*recoverable = false;
   11196:	2300      	movs	r3, #0
   11198:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   1119a:	f1a9 0303 	sub.w	r3, r9, #3
   1119e:	2b09      	cmp	r3, #9
   111a0:	f200 80c1 	bhi.w	11326 <z_arm_fault+0x212>
   111a4:	e8df f003 	tbb	[pc, r3]
   111a8:	97b7b405 	.word	0x97b7b405
   111ac:	bfbfbfbf 	.word	0xbfbfbfbf
   111b0:	babf      	.short	0xbabf
	PR_FAULT_INFO("***** HARD FAULT *****");
   111b2:	46e9      	mov	r9, sp
   111b4:	f04f 0a02 	mov.w	sl, #2
   111b8:	4b72      	ldr	r3, [pc, #456]	; (11384 <z_arm_fault+0x270>)
   111ba:	f107 0218 	add.w	r2, r7, #24
   111be:	61fb      	str	r3, [r7, #28]
   111c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   111c4:	486e      	ldr	r0, [pc, #440]	; (11380 <z_arm_fault+0x26c>)
   111c6:	f8c7 a018 	str.w	sl, [r7, #24]
   111ca:	f017 f91f 	bl	2840c <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   111ce:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   111d0:	4e65      	ldr	r6, [pc, #404]	; (11368 <z_arm_fault+0x254>)
	*recoverable = false;
   111d2:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   111d4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   111d6:	079a      	lsls	r2, r3, #30
   111d8:	d50a      	bpl.n	111f0 <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
   111da:	4b6b      	ldr	r3, [pc, #428]	; (11388 <z_arm_fault+0x274>)
		PR_EXC("  Debug event");
   111dc:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   111e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   111e4:	4866      	ldr	r0, [pc, #408]	; (11380 <z_arm_fault+0x26c>)
   111e6:	f107 0218 	add.w	r2, r7, #24
   111ea:	f017 f90f 	bl	2840c <z_log_msg_static_create.constprop.0>
}
   111ee:	e042      	b.n	11276 <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   111f0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   111f2:	2b00      	cmp	r3, #0
   111f4:	da01      	bge.n	111fa <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
   111f6:	4b65      	ldr	r3, [pc, #404]	; (1138c <z_arm_fault+0x278>)
   111f8:	e7f0      	b.n	111dc <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   111fa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   111fc:	005b      	lsls	r3, r3, #1
   111fe:	d57a      	bpl.n	112f6 <z_arm_fault+0x1e2>
		PR_EXC("  Fault escalation (see below)");
   11200:	4b63      	ldr	r3, [pc, #396]	; (11390 <z_arm_fault+0x27c>)
   11202:	f107 0218 	add.w	r2, r7, #24
   11206:	e9c7 a306 	strd	sl, r3, [r7, #24]
   1120a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1120e:	485c      	ldr	r0, [pc, #368]	; (11380 <z_arm_fault+0x26c>)
   11210:	f017 f8fc 	bl	2840c <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11214:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11216:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1121c:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1121e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11222:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11226:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   11228:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1122c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11230:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11236:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1123a:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1123e:	429a      	cmp	r2, r3
   11240:	d009      	beq.n	11256 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   11242:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11244:	b2db      	uxtb	r3, r3
   11246:	2b00      	cmp	r3, #0
   11248:	d038      	beq.n	112bc <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
   1124a:	2001      	movs	r0, #1
   1124c:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1124e:	f7ff fd85 	bl	10d5c <mem_manage_fault.constprop.0>
   11252:	4604      	mov	r4, r0
		break;
   11254:	e00f      	b.n	11276 <z_arm_fault+0x162>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11256:	b088      	sub	sp, #32
   11258:	682b      	ldr	r3, [r5, #0]
   1125a:	466a      	mov	r2, sp
   1125c:	494d      	ldr	r1, [pc, #308]	; (11394 <z_arm_fault+0x280>)
   1125e:	4848      	ldr	r0, [pc, #288]	; (11380 <z_arm_fault+0x26c>)
   11260:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11264:	2303      	movs	r3, #3
   11266:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1126a:	f842 3f10 	str.w	r3, [r2, #16]!
   1126e:	f017 f8cd 	bl	2840c <z_log_msg_static_create.constprop.0>
   11272:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   11274:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11276:	79fb      	ldrb	r3, [r7, #7]
   11278:	b9e3      	cbnz	r3, 112b4 <z_arm_fault+0x1a0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1127a:	f107 0208 	add.w	r2, r7, #8
   1127e:	f105 0620 	add.w	r6, r5, #32
   11282:	4613      	mov	r3, r2
   11284:	6828      	ldr	r0, [r5, #0]
   11286:	6869      	ldr	r1, [r5, #4]
   11288:	3508      	adds	r5, #8
   1128a:	c303      	stmia	r3!, {r0, r1}
   1128c:	42b5      	cmp	r5, r6
   1128e:	461a      	mov	r2, r3
   11290:	d1f7      	bne.n	11282 <z_arm_fault+0x16e>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11294:	f1b8 0f00 	cmp.w	r8, #0
   11298:	d061      	beq.n	1135e <z_arm_fault+0x24a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1129a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1129e:	b922      	cbnz	r2, 112aa <z_arm_fault+0x196>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   112a0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   112a4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   112a8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   112aa:	4620      	mov	r0, r4
   112ac:	f107 0108 	add.w	r1, r7, #8
   112b0:	f7ff fbb0 	bl	10a14 <z_arm_fatal_error>
}
   112b4:	3728      	adds	r7, #40	; 0x28
   112b6:	46bd      	mov	sp, r7
   112b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   112bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   112be:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   112c2:	d004      	beq.n	112ce <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
   112c4:	2001      	movs	r0, #1
   112c6:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   112c8:	f7ff fe00 	bl	10ecc <bus_fault.constprop.0>
   112cc:	e7c1      	b.n	11252 <z_arm_fault+0x13e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   112ce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   112d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   112d4:	d302      	bcc.n	112dc <z_arm_fault+0x1c8>
		reason = usage_fault(esf);
   112d6:	f7ff fe91 	bl	10ffc <usage_fault.constprop.0>
   112da:	e7ba      	b.n	11252 <z_arm_fault+0x13e>
			__ASSERT(0,
   112dc:	492e      	ldr	r1, [pc, #184]	; (11398 <z_arm_fault+0x284>)
   112de:	f240 23f2 	movw	r3, #754	; 0x2f2
   112e2:	4a23      	ldr	r2, [pc, #140]	; (11370 <z_arm_fault+0x25c>)
   112e4:	4823      	ldr	r0, [pc, #140]	; (11374 <z_arm_fault+0x260>)
   112e6:	f015 fd44 	bl	26d72 <assert_print>
   112ea:	482c      	ldr	r0, [pc, #176]	; (1139c <z_arm_fault+0x288>)
   112ec:	f015 fd41 	bl	26d72 <assert_print>
   112f0:	f240 21f2 	movw	r1, #754	; 0x2f2
   112f4:	e730      	b.n	11158 <z_arm_fault+0x44>
		__ASSERT(0,
   112f6:	4928      	ldr	r1, [pc, #160]	; (11398 <z_arm_fault+0x284>)
   112f8:	f240 23f6 	movw	r3, #758	; 0x2f6
   112fc:	4a1c      	ldr	r2, [pc, #112]	; (11370 <z_arm_fault+0x25c>)
   112fe:	481d      	ldr	r0, [pc, #116]	; (11374 <z_arm_fault+0x260>)
   11300:	f015 fd37 	bl	26d72 <assert_print>
   11304:	4826      	ldr	r0, [pc, #152]	; (113a0 <z_arm_fault+0x28c>)
   11306:	f015 fd34 	bl	26d72 <assert_print>
   1130a:	f240 21f6 	movw	r1, #758	; 0x2f6
   1130e:	e723      	b.n	11158 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   11310:	2000      	movs	r0, #0
   11312:	1df9      	adds	r1, r7, #7
   11314:	e79b      	b.n	1124e <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   11316:	2000      	movs	r0, #0
   11318:	1df9      	adds	r1, r7, #7
   1131a:	e7d5      	b.n	112c8 <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
   1131c:	4b21      	ldr	r3, [pc, #132]	; (113a4 <z_arm_fault+0x290>)
   1131e:	61fb      	str	r3, [r7, #28]
   11320:	2302      	movs	r3, #2
   11322:	61bb      	str	r3, [r7, #24]
   11324:	e75c      	b.n	111e0 <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
   11326:	4a20      	ldr	r2, [pc, #128]	; (113a8 <z_arm_fault+0x294>)
   11328:	466e      	mov	r6, sp
   1132a:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   1132e:	b08a      	sub	sp, #40	; 0x28
   11330:	4b1e      	ldr	r3, [pc, #120]	; (113ac <z_arm_fault+0x298>)
   11332:	bf18      	it	ne
   11334:	4613      	movne	r3, r2
   11336:	466a      	mov	r2, sp
   11338:	491d      	ldr	r1, [pc, #116]	; (113b0 <z_arm_fault+0x29c>)
   1133a:	4811      	ldr	r0, [pc, #68]	; (11380 <z_arm_fault+0x26c>)
   1133c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11340:	f1a9 0310 	sub.w	r3, r9, #16
   11344:	61d3      	str	r3, [r2, #28]
   11346:	f44f 7300 	mov.w	r3, #512	; 0x200
   1134a:	8413      	strh	r3, [r2, #32]
   1134c:	4b19      	ldr	r3, [pc, #100]	; (113b4 <z_arm_fault+0x2a0>)
   1134e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   11352:	f842 3f10 	str.w	r3, [r2, #16]!
   11356:	f017 f859 	bl	2840c <z_log_msg_static_create.constprop.0>
   1135a:	46b5      	mov	sp, r6
}
   1135c:	e78b      	b.n	11276 <z_arm_fault+0x162>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1135e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11362:	f023 0301 	bic.w	r3, r3, #1
   11366:	e79f      	b.n	112a8 <z_arm_fault+0x194>
   11368:	e000ed00 	.word	0xe000ed00
   1136c:	0002f8e7 	.word	0x0002f8e7
   11370:	0002f652 	.word	0x0002f652
   11374:	0002dd81 	.word	0x0002dd81
   11378:	0002f8fa 	.word	0x0002f8fa
   1137c:	0002f938 	.word	0x0002f938
   11380:	0002cd88 	.word	0x0002cd88
   11384:	0002f95b 	.word	0x0002f95b
   11388:	0002f972 	.word	0x0002f972
   1138c:	0002f993 	.word	0x0002f993
   11390:	0002f9a1 	.word	0x0002f9a1
   11394:	0002f9c0 	.word	0x0002f9c0
   11398:	00033a12 	.word	0x00033a12
   1139c:	0002f9dc 	.word	0x0002f9dc
   113a0:	0002fa00 	.word	0x0002fa00
   113a4:	0002fa30 	.word	0x0002fa30
   113a8:	0002f8ce 	.word	0x0002f8ce
   113ac:	0002f8b9 	.word	0x0002f8b9
   113b0:	0002fa54 	.word	0x0002fa54
   113b4:	01000004 	.word	0x01000004

000113b8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   113b8:	4b04      	ldr	r3, [pc, #16]	; (113cc <z_arm_fault_init+0x14>)
   113ba:	695a      	ldr	r2, [r3, #20]
   113bc:	f042 0210 	orr.w	r2, r2, #16
   113c0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   113c2:	695a      	ldr	r2, [r3, #20]
   113c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   113c8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   113ca:	4770      	bx	lr
   113cc:	e000ed00 	.word	0xe000ed00

000113d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   113d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   113d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   113d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   113da:	4672      	mov	r2, lr
	bl z_arm_fault
   113dc:	f7ff fe9a 	bl	11114 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   113e0:	bd01      	pop	{r0, pc}
   113e2:	bf00      	nop

000113e4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   113e4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   113e6:	2120      	movs	r1, #32
   113e8:	4803      	ldr	r0, [pc, #12]	; (113f8 <z_arm_interrupt_init+0x14>)
   113ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   113ec:	3301      	adds	r3, #1
   113ee:	2b45      	cmp	r3, #69	; 0x45
   113f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   113f4:	d1f9      	bne.n	113ea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   113f6:	4770      	bx	lr
   113f8:	e000e100 	.word	0xe000e100

000113fc <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   113fc:	2000      	movs	r0, #0
    msr CONTROL, r0
   113fe:	f380 8814 	msr	CONTROL, r0
    isb
   11402:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   11406:	2000      	movs	r0, #0
    msr MSPLIM, r0
   11408:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1140c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11410:	f7fc ff0a 	bl	e228 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11414:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11416:	490e      	ldr	r1, [pc, #56]	; (11450 <__start+0x54>)
    str r0, [r1]
   11418:	6008      	str	r0, [r1, #0]
    dsb
   1141a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1141e:	480d      	ldr	r0, [pc, #52]	; (11454 <__start+0x58>)
    msr msp, r0
   11420:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11424:	f000 f83e 	bl	114a4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11428:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1142a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1142e:	480a      	ldr	r0, [pc, #40]	; (11458 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11430:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11434:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11436:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1143a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1143e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11440:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11442:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11446:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1144a:	f7ff fbaf 	bl	10bac <z_arm_prep_c>
   1144e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   11450:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11454:	20034208 	.word	0x20034208
    ldr r0, =z_interrupt_stacks
   11458:	200334c8 	.word	0x200334c8

0001145c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1145c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11460:	4905      	ldr	r1, [pc, #20]	; (11478 <sys_arch_reboot+0x1c>)
   11462:	4b06      	ldr	r3, [pc, #24]	; (1147c <sys_arch_reboot+0x20>)
   11464:	68ca      	ldr	r2, [r1, #12]
   11466:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1146a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1146c:	60cb      	str	r3, [r1, #12]
   1146e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11472:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11474:	e7fd      	b.n	11472 <sys_arch_reboot+0x16>
   11476:	bf00      	nop
   11478:	e000ed00 	.word	0xe000ed00
   1147c:	05fa0004 	.word	0x05fa0004

00011480 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   11480:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   11482:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11484:	4906      	ldr	r1, [pc, #24]	; (114a0 <z_arm_clear_arm_mpu_config+0x20>)
   11486:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1148a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1148e:	4293      	cmp	r3, r2
   11490:	db00      	blt.n	11494 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   11492:	4770      	bx	lr
  mpu->RNR = rnr;
   11494:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   11498:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1149c:	3301      	adds	r3, #1
   1149e:	e7f6      	b.n	1148e <z_arm_clear_arm_mpu_config+0xe>
   114a0:	e000ed00 	.word	0xe000ed00

000114a4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   114a4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   114a6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   114a8:	2400      	movs	r4, #0
   114aa:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   114ae:	f7ff ffe7 	bl	11480 <z_arm_clear_arm_mpu_config>
   114b2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   114b4:	f04f 30ff 	mov.w	r0, #4294967295
   114b8:	4a0c      	ldr	r2, [pc, #48]	; (114ec <z_arm_init_arch_hw_at_boot+0x48>)
   114ba:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   114be:	3301      	adds	r3, #1
   114c0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   114c2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   114c6:	d1f8      	bne.n	114ba <z_arm_init_arch_hw_at_boot+0x16>
   114c8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   114ca:	f04f 30ff 	mov.w	r0, #4294967295
   114ce:	4a07      	ldr	r2, [pc, #28]	; (114ec <z_arm_init_arch_hw_at_boot+0x48>)
   114d0:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   114d4:	3301      	adds	r3, #1
   114d6:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   114d8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   114dc:	d1f8      	bne.n	114d0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   114de:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   114e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   114e4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   114e8:	bd10      	pop	{r4, pc}
   114ea:	bf00      	nop
   114ec:	e000e100 	.word	0xe000e100

000114f0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   114f0:	4b08      	ldr	r3, [pc, #32]	; (11514 <z_impl_k_thread_abort+0x24>)
   114f2:	689b      	ldr	r3, [r3, #8]
   114f4:	4283      	cmp	r3, r0
   114f6:	d10b      	bne.n	11510 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   114f8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   114fc:	b143      	cbz	r3, 11510 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   114fe:	4b06      	ldr	r3, [pc, #24]	; (11518 <z_impl_k_thread_abort+0x28>)
   11500:	685a      	ldr	r2, [r3, #4]
   11502:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11506:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1150a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1150e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11510:	f012 baec 	b.w	23aec <z_thread_abort>
   11514:	20021a20 	.word	0x20021a20
   11518:	e000ed00 	.word	0xe000ed00

0001151c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1151c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1151e:	4c09      	ldr	r4, [pc, #36]	; (11544 <z_arm_configure_static_mpu_regions+0x28>)
   11520:	4a09      	ldr	r2, [pc, #36]	; (11548 <z_arm_configure_static_mpu_regions+0x2c>)
   11522:	4623      	mov	r3, r4
   11524:	2101      	movs	r1, #1
   11526:	4809      	ldr	r0, [pc, #36]	; (1154c <z_arm_configure_static_mpu_regions+0x30>)
   11528:	f000 f92a 	bl	11780 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1152c:	2300      	movs	r3, #0
   1152e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11530:	4b07      	ldr	r3, [pc, #28]	; (11550 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11532:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11534:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11536:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11538:	9301      	str	r3, [sp, #4]
   1153a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1153c:	f000 f944 	bl	117c8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11540:	b004      	add	sp, #16
   11542:	bd10      	pop	{r4, pc}
   11544:	20070000 	.word	0x20070000
   11548:	20008000 	.word	0x20008000
   1154c:	0002d5d8 	.word	0x0002d5d8
   11550:	20008de8 	.word	0x20008de8

00011554 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11554:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11556:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11558:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1155a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1155e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11562:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11564:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11566:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11568:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   1156c:	4905      	ldr	r1, [pc, #20]	; (11584 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1156e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11572:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   11576:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1157a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   1157e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11582:	bd10      	pop	{r4, pc}
   11584:	e000ed00 	.word	0xe000ed00

00011588 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   11588:	b580      	push	{r7, lr}
   1158a:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1158c:	b088      	sub	sp, #32
   1158e:	466a      	mov	r2, sp
   11590:	4b07      	ldr	r3, [pc, #28]	; (115b0 <region_allocate_and_init.part.0+0x28>)
   11592:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11596:	2303      	movs	r3, #3
   11598:	f842 3f10 	str.w	r3, [r2, #16]!
   1159c:	2300      	movs	r3, #0
   1159e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   115a2:	4804      	ldr	r0, [pc, #16]	; (115b4 <region_allocate_and_init.part.0+0x2c>)
   115a4:	f7fd f9d6 	bl	e954 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   115a8:	f06f 0015 	mvn.w	r0, #21
   115ac:	46bd      	mov	sp, r7
   115ae:	bd80      	pop	{r7, pc}
   115b0:	0002fa6b 	.word	0x0002fa6b
   115b4:	0002cd70 	.word	0x0002cd70

000115b8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   115b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115bc:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   115be:	4606      	mov	r6, r0
   115c0:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   115c4:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   115c6:	4d5f      	ldr	r5, [pc, #380]	; (11744 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   115c8:	af00      	add	r7, sp, #0
   115ca:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   115cc:	687b      	ldr	r3, [r7, #4]
   115ce:	4599      	cmp	r9, r3
   115d0:	da35      	bge.n	1163e <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   115d2:	f8d6 8004 	ldr.w	r8, [r6, #4]
   115d6:	f1b8 0f00 	cmp.w	r8, #0
   115da:	d054      	beq.n	11686 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   115dc:	f1b8 0f1f 	cmp.w	r8, #31
   115e0:	d91b      	bls.n	1161a <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   115e2:	f018 0f1f 	tst.w	r8, #31
   115e6:	d118      	bne.n	1161a <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   115e8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   115ec:	f01b 0f1f 	tst.w	fp, #31
   115f0:	d113      	bne.n	1161a <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   115f2:	4658      	mov	r0, fp
   115f4:	f016 ff0f 	bl	28416 <arm_cmse_mpu_region_get>
   115f8:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   115fa:	eb08 000b 	add.w	r0, r8, fp
   115fe:	3801      	subs	r0, #1
   11600:	f016 ff09 	bl	28416 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11604:	4582      	cmp	sl, r0
   11606:	d01f      	beq.n	11648 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11608:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1160c:	466c      	mov	r4, sp
   1160e:	b088      	sub	sp, #32
   11610:	466a      	mov	r2, sp
   11612:	494d      	ldr	r1, [pc, #308]	; (11748 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   11614:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   11618:	e005      	b.n	11626 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1161a:	466c      	mov	r4, sp
   1161c:	b088      	sub	sp, #32
   1161e:	466a      	mov	r2, sp
   11620:	4b4a      	ldr	r3, [pc, #296]	; (1174c <mpu_configure_regions_and_partition.constprop.0+0x194>)
   11622:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   11626:	2303      	movs	r3, #3
   11628:	f842 3f10 	str.w	r3, [r2, #16]!
   1162c:	2300      	movs	r3, #0
   1162e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11632:	4847      	ldr	r0, [pc, #284]	; (11750 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   11634:	f7fd f98e 	bl	e954 <z_impl_z_log_msg_static_create>
   11638:	46a5      	mov	sp, r4
			return -EINVAL;
   1163a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1163e:	4620      	mov	r0, r4
   11640:	371c      	adds	r7, #28
   11642:	46bd      	mov	sp, r7
   11644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11648:	f11a 0f16 	cmn.w	sl, #22
   1164c:	d0de      	beq.n	1160c <mpu_configure_regions_and_partition.constprop.0+0x54>
   1164e:	4554      	cmp	r4, sl
   11650:	dddc      	ble.n	1160c <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   11652:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   11656:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1165a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   1165e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11662:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11666:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1166a:	e9d6 2100 	ldrd	r2, r1, [r6]
   1166e:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   11670:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11672:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   11676:	d11e      	bne.n	116b6 <mpu_configure_regions_and_partition.constprop.0+0xfe>
   11678:	45d8      	cmp	r8, fp
   1167a:	d108      	bne.n	1168e <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   1167c:	4631      	mov	r1, r6
   1167e:	fa5f f08a 	uxtb.w	r0, sl
   11682:	f016 fed1 	bl	28428 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11686:	f109 0901 	add.w	r9, r9, #1
   1168a:	360c      	adds	r6, #12
   1168c:	e79e      	b.n	115cc <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   1168e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   11692:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   11696:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1169a:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1169e:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   116a0:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   116a2:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   116a6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   116a8:	f016 febe 	bl	28428 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   116ac:	f110 0f16 	cmn.w	r0, #22
   116b0:	d0c3      	beq.n	1163a <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   116b2:	1c44      	adds	r4, r0, #1
   116b4:	e7e7      	b.n	11686 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   116b6:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   116b8:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   116ba:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   116bc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   116c0:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   116c4:	d108      	bne.n	116d8 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   116c6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   116ca:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   116cc:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   116d0:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   116d2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   116d6:	e7e7      	b.n	116a8 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   116d8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   116dc:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   116e0:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   116e2:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   116e6:	4631      	mov	r1, r6
   116e8:	f016 fe9e 	bl	28428 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   116ec:	f110 0f16 	cmn.w	r0, #22
   116f0:	d0a3      	beq.n	1163a <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   116f2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   116f6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   116fa:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   116fc:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   11700:	f362 0304 	bfi	r3, r2, #0, #5
   11704:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   11706:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1170a:	7c3a      	ldrb	r2, [r7, #16]
   1170c:	085b      	lsrs	r3, r3, #1
   1170e:	f363 1247 	bfi	r2, r3, #5, #3
   11712:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   11714:	e9d6 3200 	ldrd	r3, r2, [r6]
   11718:	4413      	add	r3, r2
   1171a:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1171c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   11720:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11722:	4443      	add	r3, r8
   11724:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   11728:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   1172a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1172e:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
   11730:	617b      	str	r3, [r7, #20]
   11732:	d902      	bls.n	1173a <mpu_configure_regions_and_partition.constprop.0+0x182>
   11734:	f7ff ff28 	bl	11588 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   11738:	e7b8      	b.n	116ac <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   1173a:	f107 0108 	add.w	r1, r7, #8
   1173e:	f7ff ff09 	bl	11554 <region_init>
   11742:	e7b6      	b.n	116b2 <mpu_configure_regions_and_partition.constprop.0+0xfa>
   11744:	e000ed00 	.word	0xe000ed00
   11748:	0002fab4 	.word	0x0002fab4
   1174c:	0002fa91 	.word	0x0002fa91
   11750:	0002cd70 	.word	0x0002cd70

00011754 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11754:	2205      	movs	r2, #5
   11756:	4b04      	ldr	r3, [pc, #16]	; (11768 <arm_core_mpu_enable+0x14>)
   11758:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1175c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11760:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11764:	4770      	bx	lr
   11766:	bf00      	nop
   11768:	e000ed00 	.word	0xe000ed00

0001176c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1176c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11770:	2200      	movs	r2, #0
   11772:	4b02      	ldr	r3, [pc, #8]	; (1177c <arm_core_mpu_disable+0x10>)
   11774:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11778:	4770      	bx	lr
   1177a:	bf00      	nop
   1177c:	e000ed00 	.word	0xe000ed00

00011780 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11780:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11782:	4d0c      	ldr	r5, [pc, #48]	; (117b4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   11784:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11786:	782a      	ldrb	r2, [r5, #0]
   11788:	f7ff ff16 	bl	115b8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1178c:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1178e:	3016      	adds	r0, #22
   11790:	d10f      	bne.n	117b2 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11792:	f44f 738d 	mov.w	r3, #282	; 0x11a
   11796:	4a08      	ldr	r2, [pc, #32]	; (117b8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   11798:	4908      	ldr	r1, [pc, #32]	; (117bc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1179a:	4809      	ldr	r0, [pc, #36]	; (117c0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1179c:	f015 fae9 	bl	26d72 <assert_print>
   117a0:	4621      	mov	r1, r4
   117a2:	4808      	ldr	r0, [pc, #32]	; (117c4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   117a4:	f015 fae5 	bl	26d72 <assert_print>
   117a8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   117ac:	4802      	ldr	r0, [pc, #8]	; (117b8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   117ae:	f015 fad9 	bl	26d64 <assert_post_action>
			regions_num);
	}
}
   117b2:	bd38      	pop	{r3, r4, r5, pc}
   117b4:	200222af 	.word	0x200222af
   117b8:	0002fad7 	.word	0x0002fad7
   117bc:	00033a12 	.word	0x00033a12
   117c0:	0002dd81 	.word	0x0002dd81
   117c4:	0002fb0e 	.word	0x0002fb0e

000117c8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   117c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117cc:	4e31      	ldr	r6, [pc, #196]	; (11894 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   117ce:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   117d0:	4605      	mov	r5, r0
   117d2:	f04f 0800 	mov.w	r8, #0
   117d6:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   117d8:	4f2f      	ldr	r7, [pc, #188]	; (11898 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   117da:	45c8      	cmp	r8, r9
   117dc:	db02      	blt.n	117e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   117de:	b003      	add	sp, #12
   117e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   117e4:	f8d5 a004 	ldr.w	sl, [r5, #4]
   117e8:	f1ba 0f00 	cmp.w	sl, #0
   117ec:	d04c      	beq.n	11888 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   117ee:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   117f0:	4608      	mov	r0, r1
   117f2:	9101      	str	r1, [sp, #4]
   117f4:	f016 fe0f 	bl	28416 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   117f8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   117fa:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   117fc:	eb0a 0001 	add.w	r0, sl, r1
   11800:	3801      	subs	r0, #1
   11802:	f016 fe08 	bl	28416 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11806:	4284      	cmp	r4, r0
   11808:	f04f 0214 	mov.w	r2, #20
   1180c:	4b23      	ldr	r3, [pc, #140]	; (1189c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1180e:	d015      	beq.n	1183c <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   11810:	fb02 f308 	mul.w	r3, r2, r8
   11814:	f06f 0215 	mvn.w	r2, #21
   11818:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1181c:	f44f 7395 	mov.w	r3, #298	; 0x12a
   11820:	4a1f      	ldr	r2, [pc, #124]	; (118a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11822:	4920      	ldr	r1, [pc, #128]	; (118a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   11824:	4820      	ldr	r0, [pc, #128]	; (118a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   11826:	f015 faa4 	bl	26d72 <assert_print>
   1182a:	4649      	mov	r1, r9
   1182c:	481f      	ldr	r0, [pc, #124]	; (118ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   1182e:	f015 faa0 	bl	26d72 <assert_print>
   11832:	f44f 7195 	mov.w	r1, #298	; 0x12a
   11836:	481a      	ldr	r0, [pc, #104]	; (118a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11838:	f015 fa94 	bl	26d64 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1183c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11840:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11842:	d0eb      	beq.n	1181c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11844:	7819      	ldrb	r1, [r3, #0]
   11846:	42a1      	cmp	r1, r4
   11848:	dde8      	ble.n	1181c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   1184a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1184e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   11852:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11856:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1185a:	f100 0108 	add.w	r1, r0, #8
   1185e:	7b00      	ldrb	r0, [r0, #12]
   11860:	f364 0004 	bfi	r0, r4, #0, #5
   11864:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   11866:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1186a:	790c      	ldrb	r4, [r1, #4]
   1186c:	0840      	lsrs	r0, r0, #1
   1186e:	f360 1447 	bfi	r4, r0, #5, #3
   11872:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   11874:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11878:	f021 011f 	bic.w	r1, r1, #31
   1187c:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   1187e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11882:	f021 011f 	bic.w	r1, r1, #31
   11886:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11888:	f108 0801 	add.w	r8, r8, #1
   1188c:	3614      	adds	r6, #20
   1188e:	350c      	adds	r5, #12
   11890:	e7a3      	b.n	117da <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11892:	bf00      	nop
   11894:	200214dc 	.word	0x200214dc
   11898:	e000ed00 	.word	0xe000ed00
   1189c:	200222af 	.word	0x200222af
   118a0:	0002fad7 	.word	0x0002fad7
   118a4:	00033a12 	.word	0x00033a12
   118a8:	0002dd81 	.word	0x0002dd81
   118ac:	0002fb3a 	.word	0x0002fb3a

000118b0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   118b0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   118b2:	4d1f      	ldr	r5, [pc, #124]	; (11930 <z_arm_mpu_init+0x80>)
   118b4:	682c      	ldr	r4, [r5, #0]
   118b6:	2c08      	cmp	r4, #8
   118b8:	d910      	bls.n	118dc <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   118ba:	f240 1351 	movw	r3, #337	; 0x151
   118be:	4a1d      	ldr	r2, [pc, #116]	; (11934 <z_arm_mpu_init+0x84>)
   118c0:	491d      	ldr	r1, [pc, #116]	; (11938 <z_arm_mpu_init+0x88>)
   118c2:	481e      	ldr	r0, [pc, #120]	; (1193c <z_arm_mpu_init+0x8c>)
   118c4:	f015 fa55 	bl	26d72 <assert_print>
   118c8:	4621      	mov	r1, r4
   118ca:	2208      	movs	r2, #8
   118cc:	481c      	ldr	r0, [pc, #112]	; (11940 <z_arm_mpu_init+0x90>)
   118ce:	f015 fa50 	bl	26d72 <assert_print>
   118d2:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   118d6:	4817      	ldr	r0, [pc, #92]	; (11934 <z_arm_mpu_init+0x84>)
   118d8:	f015 fa44 	bl	26d64 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   118dc:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   118de:	f7ff ff45 	bl	1176c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   118e2:	4b18      	ldr	r3, [pc, #96]	; (11944 <z_arm_mpu_init+0x94>)
   118e4:	4a18      	ldr	r2, [pc, #96]	; (11948 <z_arm_mpu_init+0x98>)
   118e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   118ea:	4284      	cmp	r4, r0
   118ec:	d117      	bne.n	1191e <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   118ee:	4b17      	ldr	r3, [pc, #92]	; (1194c <z_arm_mpu_init+0x9c>)
   118f0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   118f2:	f7ff ff2f 	bl	11754 <arm_core_mpu_enable>
	__ASSERT(
   118f6:	4b13      	ldr	r3, [pc, #76]	; (11944 <z_arm_mpu_init+0x94>)
   118f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   118fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11900:	2b08      	cmp	r3, #8
   11902:	d013      	beq.n	1192c <z_arm_mpu_init+0x7c>
   11904:	4912      	ldr	r1, [pc, #72]	; (11950 <z_arm_mpu_init+0xa0>)
   11906:	f240 13bb 	movw	r3, #443	; 0x1bb
   1190a:	4a0a      	ldr	r2, [pc, #40]	; (11934 <z_arm_mpu_init+0x84>)
   1190c:	480b      	ldr	r0, [pc, #44]	; (1193c <z_arm_mpu_init+0x8c>)
   1190e:	f015 fa30 	bl	26d72 <assert_print>
   11912:	4810      	ldr	r0, [pc, #64]	; (11954 <z_arm_mpu_init+0xa4>)
   11914:	f015 fa2d 	bl	26d72 <assert_print>
   11918:	f240 11bb 	movw	r1, #443	; 0x1bb
   1191c:	e7db      	b.n	118d6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1191e:	6869      	ldr	r1, [r5, #4]
   11920:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11924:	f7ff fe16 	bl	11554 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11928:	3001      	adds	r0, #1
   1192a:	e7de      	b.n	118ea <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1192c:	2000      	movs	r0, #0
   1192e:	bd38      	pop	{r3, r4, r5, pc}
   11930:	0002d5e4 	.word	0x0002d5e4
   11934:	0002fad7 	.word	0x0002fad7
   11938:	00033a12 	.word	0x00033a12
   1193c:	0002dd81 	.word	0x0002dd81
   11940:	0002fb69 	.word	0x0002fb69
   11944:	e000ed00 	.word	0xe000ed00
   11948:	0044ffaa 	.word	0x0044ffaa
   1194c:	200222af 	.word	0x200222af
   11950:	0002fb9d 	.word	0x0002fb9d
   11954:	0002fbed 	.word	0x0002fbed

00011958 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11958:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1195a:	4b0b      	ldr	r3, [pc, #44]	; (11988 <malloc_prepare+0x30>)
   1195c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11960:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   11964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11968:	d20c      	bcs.n	11984 <malloc_prepare+0x2c>
   1196a:	4908      	ldr	r1, [pc, #32]	; (1198c <malloc_prepare+0x34>)
   1196c:	2381      	movs	r3, #129	; 0x81
   1196e:	4a08      	ldr	r2, [pc, #32]	; (11990 <malloc_prepare+0x38>)
   11970:	4808      	ldr	r0, [pc, #32]	; (11994 <malloc_prepare+0x3c>)
   11972:	f015 f9fe 	bl	26d72 <assert_print>
   11976:	4808      	ldr	r0, [pc, #32]	; (11998 <malloc_prepare+0x40>)
   11978:	f015 f9fb 	bl	26d72 <assert_print>
   1197c:	2181      	movs	r1, #129	; 0x81
   1197e:	4804      	ldr	r0, [pc, #16]	; (11990 <malloc_prepare+0x38>)
   11980:	f015 f9f0 	bl	26d64 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11984:	2000      	movs	r0, #0
   11986:	bd08      	pop	{r3, pc}
   11988:	20038178 	.word	0x20038178
   1198c:	0002fc3e 	.word	0x0002fc3e
   11990:	0002fc0e 	.word	0x0002fc0e
   11994:	0002dd81 	.word	0x0002dd81
   11998:	0002fc85 	.word	0x0002fc85

0001199c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1199c:	4b01      	ldr	r3, [pc, #4]	; (119a4 <__stdout_hook_install+0x8>)
   1199e:	6018      	str	r0, [r3, #0]
}
   119a0:	4770      	bx	lr
   119a2:	bf00      	nop
   119a4:	20008474 	.word	0x20008474

000119a8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   119a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119aa:	4606      	mov	r6, r0
   119ac:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   119ae:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   119b0:	4f06      	ldr	r7, [pc, #24]	; (119cc <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   119b2:	42ac      	cmp	r4, r5
   119b4:	da08      	bge.n	119c8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   119b6:	683b      	ldr	r3, [r7, #0]
   119b8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   119ba:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   119bc:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   119be:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   119c2:	d001      	beq.n	119c8 <z_impl_zephyr_read_stdin+0x20>
   119c4:	280d      	cmp	r0, #13
   119c6:	d1f4      	bne.n	119b2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   119c8:	4620      	mov	r0, r4
   119ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119cc:	20008470 	.word	0x20008470

000119d0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   119d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119d2:	460d      	mov	r5, r1
   119d4:	4f09      	ldr	r7, [pc, #36]	; (119fc <z_impl_zephyr_write_stdout+0x2c>)
   119d6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   119d8:	f1c0 0401 	rsb	r4, r0, #1
   119dc:	19a3      	adds	r3, r4, r6
   119de:	429d      	cmp	r5, r3
   119e0:	dc01      	bgt.n	119e6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   119e2:	4628      	mov	r0, r5
   119e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   119e6:	7873      	ldrb	r3, [r6, #1]
   119e8:	2b0a      	cmp	r3, #10
   119ea:	d102      	bne.n	119f2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   119ec:	200d      	movs	r0, #13
   119ee:	683b      	ldr	r3, [r7, #0]
   119f0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   119f2:	683b      	ldr	r3, [r7, #0]
   119f4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   119f8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   119fa:	e7ef      	b.n	119dc <z_impl_zephyr_write_stdout+0xc>
   119fc:	20008474 	.word	0x20008474

00011a00 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11a00:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11a02:	2105      	movs	r1, #5
   11a04:	4801      	ldr	r0, [pc, #4]	; (11a0c <_exit+0xc>)
   11a06:	f7ff ffe3 	bl	119d0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11a0a:	e7fe      	b.n	11a0a <_exit+0xa>
   11a0c:	0002fd0c 	.word	0x0002fd0c

00011a10 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11a10:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11a12:	4c07      	ldr	r4, [pc, #28]	; (11a30 <_sbrk+0x20>)
   11a14:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11a16:	18c2      	adds	r2, r0, r3
   11a18:	4806      	ldr	r0, [pc, #24]	; (11a34 <_sbrk+0x24>)
   11a1a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11a1e:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11a22:	428a      	cmp	r2, r1
		heap_sz += count;
   11a24:	bf36      	itet	cc
   11a26:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11a28:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11a2c:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11a2e:	bd10      	pop	{r4, pc}
   11a30:	200214f0 	.word	0x200214f0
   11a34:	20038178 	.word	0x20038178

00011a38 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11a38:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11a3a:	4604      	mov	r4, r0
   11a3c:	b958      	cbnz	r0, 11a56 <__retarget_lock_init_recursive+0x1e>
   11a3e:	4911      	ldr	r1, [pc, #68]	; (11a84 <__retarget_lock_init_recursive+0x4c>)
   11a40:	f240 137b 	movw	r3, #379	; 0x17b
   11a44:	4a10      	ldr	r2, [pc, #64]	; (11a88 <__retarget_lock_init_recursive+0x50>)
   11a46:	4811      	ldr	r0, [pc, #68]	; (11a8c <__retarget_lock_init_recursive+0x54>)
   11a48:	f015 f993 	bl	26d72 <assert_print>
   11a4c:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11a50:	480d      	ldr	r0, [pc, #52]	; (11a88 <__retarget_lock_init_recursive+0x50>)
   11a52:	f015 f987 	bl	26d64 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   11a56:	2014      	movs	r0, #20
   11a58:	f013 f990 	bl	24d7c <malloc>
   11a5c:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11a5e:	b960      	cbnz	r0, 11a7a <__retarget_lock_init_recursive+0x42>
   11a60:	490b      	ldr	r1, [pc, #44]	; (11a90 <__retarget_lock_init_recursive+0x58>)
   11a62:	f240 1383 	movw	r3, #387	; 0x183
   11a66:	4a08      	ldr	r2, [pc, #32]	; (11a88 <__retarget_lock_init_recursive+0x50>)
   11a68:	4808      	ldr	r0, [pc, #32]	; (11a8c <__retarget_lock_init_recursive+0x54>)
   11a6a:	f015 f982 	bl	26d72 <assert_print>
   11a6e:	4809      	ldr	r0, [pc, #36]	; (11a94 <__retarget_lock_init_recursive+0x5c>)
   11a70:	f015 f97f 	bl	26d72 <assert_print>
   11a74:	f240 1183 	movw	r1, #387	; 0x183
   11a78:	e7ea      	b.n	11a50 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   11a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   11a7e:	f019 bfa6 	b.w	2b9ce <z_impl_k_mutex_init>
   11a82:	bf00      	nop
   11a84:	0002fd13 	.word	0x0002fd13
   11a88:	0002fc0e 	.word	0x0002fc0e
   11a8c:	0002dd81 	.word	0x0002dd81
   11a90:	0002fd12 	.word	0x0002fd12
   11a94:	0002fd4e 	.word	0x0002fd4e

00011a98 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   11a98:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11a9a:	b958      	cbnz	r0, 11ab4 <__retarget_lock_acquire_recursive+0x1c>
   11a9c:	4909      	ldr	r1, [pc, #36]	; (11ac4 <__retarget_lock_acquire_recursive+0x2c>)
   11a9e:	480a      	ldr	r0, [pc, #40]	; (11ac8 <__retarget_lock_acquire_recursive+0x30>)
   11aa0:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11aa4:	4a09      	ldr	r2, [pc, #36]	; (11acc <__retarget_lock_acquire_recursive+0x34>)
   11aa6:	f015 f964 	bl	26d72 <assert_print>
   11aaa:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11aae:	4807      	ldr	r0, [pc, #28]	; (11acc <__retarget_lock_acquire_recursive+0x34>)
   11ab0:	f015 f958 	bl	26d64 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   11ab4:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   11ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11abc:	f04f 33ff 	mov.w	r3, #4294967295
   11ac0:	f00f be84 	b.w	217cc <z_impl_k_mutex_lock>
   11ac4:	0002fd13 	.word	0x0002fd13
   11ac8:	0002dd81 	.word	0x0002dd81
   11acc:	0002fc0e 	.word	0x0002fc0e

00011ad0 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   11ad0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11ad2:	b958      	cbnz	r0, 11aec <__retarget_lock_release_recursive+0x1c>
   11ad4:	4907      	ldr	r1, [pc, #28]	; (11af4 <__retarget_lock_release_recursive+0x24>)
   11ad6:	4808      	ldr	r0, [pc, #32]	; (11af8 <__retarget_lock_release_recursive+0x28>)
   11ad8:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   11adc:	4a07      	ldr	r2, [pc, #28]	; (11afc <__retarget_lock_release_recursive+0x2c>)
   11ade:	f015 f948 	bl	26d72 <assert_print>
   11ae2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   11ae6:	4805      	ldr	r0, [pc, #20]	; (11afc <__retarget_lock_release_recursive+0x2c>)
   11ae8:	f015 f93c 	bl	26d64 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   11aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   11af0:	f00f bf3c 	b.w	2196c <z_impl_k_mutex_unlock>
   11af4:	0002fd13 	.word	0x0002fd13
   11af8:	0002dd81 	.word	0x0002dd81
   11afc:	0002fc0e 	.word	0x0002fc0e

00011b00 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11b00:	b508      	push	{r3, lr}
   11b02:	211d      	movs	r1, #29
   11b04:	4804      	ldr	r0, [pc, #16]	; (11b18 <__chk_fail+0x18>)
   11b06:	f7ff ff63 	bl	119d0 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11b0a:	4040      	eors	r0, r0
   11b0c:	f380 8811 	msr	BASEPRI, r0
   11b10:	f04f 0003 	mov.w	r0, #3
   11b14:	df02      	svc	2
	CODE_UNREACHABLE;
   11b16:	bf00      	nop
   11b18:	0002fd71 	.word	0x0002fd71

00011b1c <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11b1c:	2000      	movs	r0, #0
   11b1e:	4b02      	ldr	r3, [pc, #8]	; (11b28 <remoteproc_mgr_boot+0xc>)
   11b20:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11b24:	4770      	bx	lr
   11b26:	bf00      	nop
   11b28:	40005000 	.word	0x40005000

00011b2c <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11b2c:	4b0e      	ldr	r3, [pc, #56]	; (11b68 <bt_hex+0x3c>)
   11b2e:	2940      	cmp	r1, #64	; 0x40
   11b30:	bf28      	it	cs
   11b32:	2140      	movcs	r1, #64	; 0x40
{
   11b34:	b570      	push	{r4, r5, r6, lr}
   11b36:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11b38:	4c0c      	ldr	r4, [pc, #48]	; (11b6c <bt_hex+0x40>)
   11b3a:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11b3c:	42b0      	cmp	r0, r6
   11b3e:	f103 0302 	add.w	r3, r3, #2
   11b42:	d104      	bne.n	11b4e <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11b44:	2300      	movs	r3, #0
   11b46:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11b4a:	4807      	ldr	r0, [pc, #28]	; (11b68 <bt_hex+0x3c>)
   11b4c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   11b4e:	7802      	ldrb	r2, [r0, #0]
   11b50:	0912      	lsrs	r2, r2, #4
   11b52:	5ca2      	ldrb	r2, [r4, r2]
   11b54:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11b58:	f810 2b01 	ldrb.w	r2, [r0], #1
   11b5c:	f002 020f 	and.w	r2, r2, #15
   11b60:	5ca2      	ldrb	r2, [r4, r2]
   11b62:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11b66:	e7e9      	b.n	11b3c <bt_hex+0x10>
   11b68:	200222ce 	.word	0x200222ce
   11b6c:	0002fdd1 	.word	0x0002fdd1

00011b70 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   11b70:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11b72:	7803      	ldrb	r3, [r0, #0]
   11b74:	b08b      	sub	sp, #44	; 0x2c
   11b76:	4604      	mov	r4, r0
   11b78:	ad07      	add	r5, sp, #28
   11b7a:	2b03      	cmp	r3, #3
   11b7c:	d821      	bhi.n	11bc2 <bt_addr_le_str+0x52>
   11b7e:	e8df f003 	tbb	[pc, r3]
   11b82:	1a02      	.short	0x1a02
   11b84:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   11b86:	4912      	ldr	r1, [pc, #72]	; (11bd0 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   11b88:	4628      	mov	r0, r5
   11b8a:	f01a fa79 	bl	2c080 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11b8e:	9505      	str	r5, [sp, #20]
   11b90:	7863      	ldrb	r3, [r4, #1]
   11b92:	211e      	movs	r1, #30
   11b94:	9304      	str	r3, [sp, #16]
   11b96:	78a3      	ldrb	r3, [r4, #2]
   11b98:	4a0e      	ldr	r2, [pc, #56]	; (11bd4 <bt_addr_le_str+0x64>)
   11b9a:	9303      	str	r3, [sp, #12]
   11b9c:	78e3      	ldrb	r3, [r4, #3]
   11b9e:	480e      	ldr	r0, [pc, #56]	; (11bd8 <bt_addr_le_str+0x68>)
   11ba0:	9302      	str	r3, [sp, #8]
   11ba2:	7923      	ldrb	r3, [r4, #4]
   11ba4:	9301      	str	r3, [sp, #4]
   11ba6:	7963      	ldrb	r3, [r4, #5]
   11ba8:	9300      	str	r3, [sp, #0]
   11baa:	79a3      	ldrb	r3, [r4, #6]
   11bac:	f014 ff2c 	bl	26a08 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11bb0:	4809      	ldr	r0, [pc, #36]	; (11bd8 <bt_addr_le_str+0x68>)
   11bb2:	b00b      	add	sp, #44	; 0x2c
   11bb4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   11bb6:	4909      	ldr	r1, [pc, #36]	; (11bdc <bt_addr_le_str+0x6c>)
   11bb8:	e7e6      	b.n	11b88 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   11bba:	4909      	ldr	r1, [pc, #36]	; (11be0 <bt_addr_le_str+0x70>)
   11bbc:	e7e4      	b.n	11b88 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   11bbe:	4909      	ldr	r1, [pc, #36]	; (11be4 <bt_addr_le_str+0x74>)
   11bc0:	e7e2      	b.n	11b88 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11bc2:	210a      	movs	r1, #10
   11bc4:	4628      	mov	r0, r5
   11bc6:	4a08      	ldr	r2, [pc, #32]	; (11be8 <bt_addr_le_str+0x78>)
   11bc8:	f014 ff1e 	bl	26a08 <snprintk>
		break;
   11bcc:	e7df      	b.n	11b8e <bt_addr_le_str+0x1e>
   11bce:	bf00      	nop
   11bd0:	0002de55 	.word	0x0002de55
   11bd4:	0002de77 	.word	0x0002de77
   11bd8:	200222b0 	.word	0x200222b0
   11bdc:	0002de5c 	.word	0x0002de5c
   11be0:	0002de63 	.word	0x0002de63
   11be4:	0002de6d 	.word	0x0002de6d
   11be8:	00031a29 	.word	0x00031a29

00011bec <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   11bec:	b590      	push	{r4, r7, lr}
   11bee:	b087      	sub	sp, #28
	int err;
	LOG_INF("Saving ID");
   11bf0:	466c      	mov	r4, sp
{
   11bf2:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   11bf4:	4b12      	ldr	r3, [pc, #72]	; (11c40 <save_id+0x54>)
   11bf6:	617b      	str	r3, [r7, #20]
   11bf8:	2302      	movs	r3, #2
   11bfa:	613b      	str	r3, [r7, #16]
   11bfc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11c00:	4810      	ldr	r0, [pc, #64]	; (11c44 <save_id+0x58>)
   11c02:	f107 0210 	add.w	r2, r7, #16
   11c06:	2300      	movs	r3, #0
   11c08:	f7fc fea4 	bl	e954 <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   11c0c:	490e      	ldr	r1, [pc, #56]	; (11c48 <save_id+0x5c>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   11c0e:	480f      	ldr	r0, [pc, #60]	; (11c4c <save_id+0x60>)
   11c10:	79ca      	ldrb	r2, [r1, #7]
   11c12:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   11c16:	f7fe f937 	bl	fe88 <settings_save_one>
	if (err) {
   11c1a:	b170      	cbz	r0, 11c3a <save_id+0x4e>
		LOG_ERR("Failed to save ID (err %d)", err);
   11c1c:	b088      	sub	sp, #32
   11c1e:	466a      	mov	r2, sp
   11c20:	4b0b      	ldr	r3, [pc, #44]	; (11c50 <save_id+0x64>)
   11c22:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11c26:	2303      	movs	r3, #3
   11c28:	f842 3f10 	str.w	r3, [r2, #16]!
   11c2c:	2300      	movs	r3, #0
   11c2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11c32:	4804      	ldr	r0, [pc, #16]	; (11c44 <save_id+0x58>)
   11c34:	f7fc fe8e 	bl	e954 <z_impl_z_log_msg_static_create>
   11c38:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   11c3a:	371c      	adds	r7, #28
   11c3c:	46bd      	mov	sp, r7
   11c3e:	bd90      	pop	{r4, r7, pc}
   11c40:	0002fde9 	.word	0x0002fde9
   11c44:	0002cd08 	.word	0x0002cd08
   11c48:	20008000 	.word	0x20008000
   11c4c:	0002fdf3 	.word	0x0002fdf3
   11c50:	0002fdf9 	.word	0x0002fdf9

00011c54 <set_setting>:
{
   11c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c58:	4604      	mov	r4, r0
   11c5a:	4617      	mov	r7, r2
   11c5c:	4698      	mov	r8, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11c5e:	4e29      	ldr	r6, [pc, #164]	; (11d04 <set_setting+0xb0>)
   11c60:	b088      	sub	sp, #32
   11c62:	e8d6 3faf 	lda	r3, [r6]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11c66:	07d9      	lsls	r1, r3, #31
   11c68:	d529      	bpl.n	11cbe <set_setting+0x6a>
	if (!name) {
   11c6a:	b968      	cbnz	r0, 11c88 <set_setting+0x34>
		LOG_ERR("Insufficient number of arguments");
   11c6c:	4b26      	ldr	r3, [pc, #152]	; (11d08 <set_setting+0xb4>)
   11c6e:	9307      	str	r3, [sp, #28]
   11c70:	2302      	movs	r3, #2
   11c72:	9306      	str	r3, [sp, #24]
   11c74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11c78:	4603      	mov	r3, r0
   11c7a:	aa06      	add	r2, sp, #24
   11c7c:	4823      	ldr	r0, [pc, #140]	; (11d0c <set_setting+0xb8>)
   11c7e:	f7fc fe69 	bl	e954 <z_impl_z_log_msg_static_create>
		return -ENOENT;
   11c82:	f06f 0001 	mvn.w	r0, #1
   11c86:	e01b      	b.n	11cc0 <set_setting+0x6c>
	len = settings_name_next(name, &next);
   11c88:	a901      	add	r1, sp, #4
   11c8a:	f015 fe92 	bl	279b2 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   11c8e:	4920      	ldr	r1, [pc, #128]	; (11d10 <set_setting+0xbc>)
	len = settings_name_next(name, &next);
   11c90:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   11c92:	4620      	mov	r0, r4
   11c94:	f01a f9fc 	bl	2c090 <strncmp>
   11c98:	4603      	mov	r3, r0
   11c9a:	2800      	cmp	r0, #0
   11c9c:	d1f1      	bne.n	11c82 <set_setting+0x2e>
   11c9e:	e8d6 2faf 	lda	r2, [r6]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   11ca2:	f3c2 05c0 	ubfx	r5, r2, #3, #1
   11ca6:	0712      	lsls	r2, r2, #28
   11ca8:	d50d      	bpl.n	11cc6 <set_setting+0x72>
			LOG_WRN("Ignoring identities stored in flash");
   11caa:	4a1a      	ldr	r2, [pc, #104]	; (11d14 <set_setting+0xc0>)
   11cac:	9207      	str	r2, [sp, #28]
   11cae:	2202      	movs	r2, #2
   11cb0:	9206      	str	r2, [sp, #24]
   11cb2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11cb6:	4815      	ldr	r0, [pc, #84]	; (11d0c <set_setting+0xb8>)
   11cb8:	aa06      	add	r2, sp, #24
   11cba:	f7fc fe4b 	bl	e954 <z_impl_z_log_msg_static_create>
		return 0;
   11cbe:	2000      	movs	r0, #0
}
   11cc0:	b008      	add	sp, #32
   11cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   11cc6:	f1a6 04cc 	sub.w	r4, r6, #204	; 0xcc
   11cca:	2207      	movs	r2, #7
   11ccc:	4621      	mov	r1, r4
   11cce:	4640      	mov	r0, r8
   11cd0:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   11cd2:	2806      	cmp	r0, #6
   11cd4:	d810      	bhi.n	11cf8 <set_setting+0xa4>
				LOG_ERR("Invalid length ID address in storage");
   11cd6:	4b10      	ldr	r3, [pc, #64]	; (11d18 <set_setting+0xc4>)
   11cd8:	9307      	str	r3, [sp, #28]
   11cda:	2302      	movs	r3, #2
   11cdc:	9306      	str	r3, [sp, #24]
   11cde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11ce2:	462b      	mov	r3, r5
   11ce4:	4809      	ldr	r0, [pc, #36]	; (11d0c <set_setting+0xb8>)
   11ce6:	aa06      	add	r2, sp, #24
   11ce8:	f7fc fe34 	bl	e954 <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   11cec:	f846 5ccc 	str.w	r5, [r6, #-204]
			bt_dev.id_count = 0U;
   11cf0:	71e5      	strb	r5, [r4, #7]
			(void)memset(bt_dev.id_addr, 0,
   11cf2:	f8c4 5003 	str.w	r5, [r4, #3]
			bt_dev.id_count = 0U;
   11cf6:	e7e2      	b.n	11cbe <set_setting+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   11cf8:	2307      	movs	r3, #7
   11cfa:	fbb0 f0f3 	udiv	r0, r0, r3
   11cfe:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   11d00:	e7dd      	b.n	11cbe <set_setting+0x6a>
   11d02:	bf00      	nop
   11d04:	200080cc 	.word	0x200080cc
   11d08:	0002fe14 	.word	0x0002fe14
   11d0c:	0002cd08 	.word	0x0002cd08
   11d10:	0002de6a 	.word	0x0002de6a
   11d14:	0002fe35 	.word	0x0002fe35
   11d18:	0002fe59 	.word	0x0002fe59

00011d1c <bt_settings_encode_key>:
{
   11d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d20:	b088      	sub	sp, #32
   11d22:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   11d26:	799c      	ldrb	r4, [r3, #6]
   11d28:	795d      	ldrb	r5, [r3, #5]
   11d2a:	791e      	ldrb	r6, [r3, #4]
   11d2c:	78df      	ldrb	r7, [r3, #3]
   11d2e:	f893 c002 	ldrb.w	ip, [r3, #2]
   11d32:	f893 e001 	ldrb.w	lr, [r3, #1]
   11d36:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   11d38:	f1b8 0f00 	cmp.w	r8, #0
   11d3c:	d00e      	beq.n	11d5c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   11d3e:	e9cd 3806 	strd	r3, r8, [sp, #24]
   11d42:	e9cd ce04 	strd	ip, lr, [sp, #16]
   11d46:	4613      	mov	r3, r2
   11d48:	e9cd 6702 	strd	r6, r7, [sp, #8]
   11d4c:	e9cd 4500 	strd	r4, r5, [sp]
   11d50:	4a08      	ldr	r2, [pc, #32]	; (11d74 <bt_settings_encode_key+0x58>)
   11d52:	f014 fe59 	bl	26a08 <snprintk>
}
   11d56:	b008      	add	sp, #32
   11d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   11d5c:	e9cd e305 	strd	lr, r3, [sp, #20]
   11d60:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   11d64:	4613      	mov	r3, r2
   11d66:	e9cd 5601 	strd	r5, r6, [sp, #4]
   11d6a:	4a03      	ldr	r2, [pc, #12]	; (11d78 <bt_settings_encode_key+0x5c>)
   11d6c:	9400      	str	r4, [sp, #0]
   11d6e:	f014 fe4b 	bl	26a08 <snprintk>
}
   11d72:	e7f0      	b.n	11d56 <bt_settings_encode_key+0x3a>
   11d74:	0002fe7e 	.word	0x0002fe7e
   11d78:	0002fea2 	.word	0x0002fea2

00011d7c <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   11d7c:	4801      	ldr	r0, [pc, #4]	; (11d84 <bt_settings_save_id+0x8>)
   11d7e:	f010 baf5 	b.w	2236c <k_work_submit>
   11d82:	bf00      	nop
   11d84:	20008478 	.word	0x20008478

00011d88 <commit_settings>:
}

static int commit_settings(void)
{
   11d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d8c:	4d1d      	ldr	r5, [pc, #116]	; (11e04 <commit_settings+0x7c>)
   11d8e:	b086      	sub	sp, #24
   11d90:	e8d5 3faf 	lda	r3, [r5]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11d94:	f013 0f01 	tst.w	r3, #1
   11d98:	462f      	mov	r7, r5
   11d9a:	d031      	beq.n	11e00 <commit_settings+0x78>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   11d9c:	f815 6cc5 	ldrb.w	r6, [r5, #-197]
   11da0:	f1a5 08cc 	sub.w	r8, r5, #204	; 0xcc
   11da4:	b9d6      	cbnz	r6, 11ddc <commit_settings+0x54>
		err = bt_setup_public_id_addr();
   11da6:	f001 ffc5 	bl	13d34 <bt_setup_public_id_addr>
		if (err) {
   11daa:	4604      	mov	r4, r0
   11dac:	b170      	cbz	r0, 11dcc <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   11dae:	4b16      	ldr	r3, [pc, #88]	; (11e08 <commit_settings+0x80>)
   11db0:	9305      	str	r3, [sp, #20]
   11db2:	2302      	movs	r3, #2
   11db4:	9304      	str	r3, [sp, #16]
   11db6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11dba:	4633      	mov	r3, r6
   11dbc:	4813      	ldr	r0, [pc, #76]	; (11e0c <commit_settings+0x84>)
   11dbe:	aa04      	add	r2, sp, #16
   11dc0:	f7fc fdc8 	bl	e954 <z_impl_z_log_msg_static_create>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   11dc4:	4620      	mov	r0, r4
   11dc6:	b006      	add	sp, #24
   11dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   11dcc:	f898 6007 	ldrb.w	r6, [r8, #7]
   11dd0:	b926      	cbnz	r6, 11ddc <commit_settings+0x54>
		err = bt_setup_random_id_addr();
   11dd2:	f002 f813 	bl	13dfc <bt_setup_random_id_addr>
		if (err) {
   11dd6:	4604      	mov	r4, r0
   11dd8:	2800      	cmp	r0, #0
   11dda:	d1e8      	bne.n	11dae <commit_settings+0x26>
   11ddc:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11de0:	075a      	lsls	r2, r3, #29
   11de2:	d401      	bmi.n	11de8 <commit_settings+0x60>
		bt_finalize_init();
   11de4:	f001 fbae 	bl	13544 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11de8:	e8d7 3fef 	ldaex	r3, [r7]
   11dec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   11df0:	e8c7 2fe1 	stlex	r1, r2, [r7]
   11df4:	2900      	cmp	r1, #0
   11df6:	d1f7      	bne.n	11de8 <commit_settings+0x60>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   11df8:	03db      	lsls	r3, r3, #15
   11dfa:	d501      	bpl.n	11e00 <commit_settings+0x78>
		bt_settings_save_id();
   11dfc:	f7ff ffbe 	bl	11d7c <bt_settings_save_id>
		return 0;
   11e00:	2400      	movs	r4, #0
   11e02:	e7df      	b.n	11dc4 <commit_settings+0x3c>
   11e04:	200080cc 	.word	0x200080cc
   11e08:	0002fec3 	.word	0x0002fec3
   11e0c:	0002cd08 	.word	0x0002cd08

00011e10 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   11e10:	b5b0      	push	{r4, r5, r7, lr}
   11e12:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   11e14:	f7fe f9ca 	bl	101ac <settings_subsys_init>
	if (err) {
   11e18:	4604      	mov	r4, r0
   11e1a:	b178      	cbz	r0, 11e3c <bt_settings_init+0x2c>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   11e1c:	466d      	mov	r5, sp
   11e1e:	b088      	sub	sp, #32
   11e20:	466a      	mov	r2, sp
   11e22:	4b08      	ldr	r3, [pc, #32]	; (11e44 <bt_settings_init+0x34>)
   11e24:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11e28:	2303      	movs	r3, #3
   11e2a:	f842 3f10 	str.w	r3, [r2, #16]!
   11e2e:	2300      	movs	r3, #0
   11e30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11e34:	4804      	ldr	r0, [pc, #16]	; (11e48 <bt_settings_init+0x38>)
   11e36:	f7fc fd8d 	bl	e954 <z_impl_z_log_msg_static_create>
   11e3a:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   11e3c:	4620      	mov	r0, r4
   11e3e:	46bd      	mov	sp, r7
   11e40:	bdb0      	pop	{r4, r5, r7, pc}
   11e42:	bf00      	nop
   11e44:	0002fee7 	.word	0x0002fee7
   11e48:	0002cd08 	.word	0x0002cd08

00011e4c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   11e4c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11e4e:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   11e50:	4d09      	ldr	r5, [pc, #36]	; (11e78 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11e52:	4b0a      	ldr	r3, [pc, #40]	; (11e7c <long_wq_init+0x30>)
{
   11e54:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   11e56:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11e58:	9302      	str	r3, [sp, #8]
   11e5a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   11e5c:	f010 fa8c 	bl	22378 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   11e60:	ab02      	add	r3, sp, #8
   11e62:	4628      	mov	r0, r5
   11e64:	9300      	str	r3, [sp, #0]
   11e66:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   11e6a:	230a      	movs	r3, #10
   11e6c:	4904      	ldr	r1, [pc, #16]	; (11e80 <long_wq_init+0x34>)
   11e6e:	f010 fa9d 	bl	223ac <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   11e72:	4620      	mov	r0, r4
   11e74:	b005      	add	sp, #20
   11e76:	bd30      	pop	{r4, r5, pc}
   11e78:	20009a40 	.word	0x20009a40
   11e7c:	0002ff1b 	.word	0x0002ff1b
   11e80:	20032220 	.word	0x20032220

00011e84 <bt_long_wq_schedule>:
{
   11e84:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   11e86:	4801      	ldr	r0, [pc, #4]	; (11e8c <bt_long_wq_schedule+0x8>)
   11e88:	f010 bbb2 	b.w	225f0 <k_work_schedule_for_queue>
   11e8c:	20009a40 	.word	0x20009a40

00011e90 <bt_long_wq_reschedule>:
{
   11e90:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   11e92:	4801      	ldr	r0, [pc, #4]	; (11e98 <bt_long_wq_reschedule+0x8>)
   11e94:	f010 bc28 	b.w	226e8 <k_work_reschedule_for_queue>
   11e98:	20009a40 	.word	0x20009a40

00011e9c <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11e9c:	7803      	ldrb	r3, [r0, #0]
{
   11e9e:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11ea0:	2b01      	cmp	r3, #1
   11ea2:	d013      	beq.n	11ecc <uuid_to_uuid128+0x30>
   11ea4:	2b02      	cmp	r3, #2
   11ea6:	d027      	beq.n	11ef8 <uuid_to_uuid128+0x5c>
   11ea8:	b97b      	cbnz	r3, 11eca <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11eaa:	460a      	mov	r2, r1
   11eac:	4b18      	ldr	r3, [pc, #96]	; (11f10 <uuid_to_uuid128+0x74>)
   11eae:	f103 0410 	add.w	r4, r3, #16
   11eb2:	f853 5b04 	ldr.w	r5, [r3], #4
   11eb6:	42a3      	cmp	r3, r4
   11eb8:	f842 5b04 	str.w	r5, [r2], #4
   11ebc:	d1f9      	bne.n	11eb2 <uuid_to_uuid128+0x16>
   11ebe:	781b      	ldrb	r3, [r3, #0]
   11ec0:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11ec2:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   11ec4:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   11ec6:	0a1b      	lsrs	r3, r3, #8
   11ec8:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11eca:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11ecc:	460a      	mov	r2, r1
   11ece:	4b10      	ldr	r3, [pc, #64]	; (11f10 <uuid_to_uuid128+0x74>)
   11ed0:	f103 0410 	add.w	r4, r3, #16
   11ed4:	f853 5b04 	ldr.w	r5, [r3], #4
   11ed8:	42a3      	cmp	r3, r4
   11eda:	f842 5b04 	str.w	r5, [r2], #4
   11ede:	d1f9      	bne.n	11ed4 <uuid_to_uuid128+0x38>
   11ee0:	781b      	ldrb	r3, [r3, #0]
   11ee2:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   11ee4:	6843      	ldr	r3, [r0, #4]
   11ee6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11eea:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11eec:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11eee:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   11ef0:	0a1b      	lsrs	r3, r3, #8
   11ef2:	738a      	strb	r2, [r1, #14]
   11ef4:	740b      	strb	r3, [r1, #16]
}
   11ef6:	e7e8      	b.n	11eca <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11ef8:	f100 0310 	add.w	r3, r0, #16
   11efc:	f850 2b04 	ldr.w	r2, [r0], #4
   11f00:	4298      	cmp	r0, r3
   11f02:	f841 2b04 	str.w	r2, [r1], #4
   11f06:	d1f9      	bne.n	11efc <uuid_to_uuid128+0x60>
   11f08:	7803      	ldrb	r3, [r0, #0]
   11f0a:	700b      	strb	r3, [r1, #0]
   11f0c:	e7dd      	b.n	11eca <uuid_to_uuid128+0x2e>
   11f0e:	bf00      	nop
   11f10:	0002ff24 	.word	0x0002ff24

00011f14 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11f14:	b538      	push	{r3, r4, r5, lr}
   11f16:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11f18:	2d01      	cmp	r5, #1
{
   11f1a:	4610      	mov	r0, r2
   11f1c:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11f1e:	d010      	beq.n	11f42 <bt_buf_get_rx+0x2e>
   11f20:	2d03      	cmp	r5, #3
   11f22:	d01a      	beq.n	11f5a <bt_buf_get_rx+0x46>
   11f24:	2d05      	cmp	r5, #5
   11f26:	d018      	beq.n	11f5a <bt_buf_get_rx+0x46>
   11f28:	490e      	ldr	r1, [pc, #56]	; (11f64 <bt_buf_get_rx+0x50>)
   11f2a:	233d      	movs	r3, #61	; 0x3d
   11f2c:	4a0e      	ldr	r2, [pc, #56]	; (11f68 <bt_buf_get_rx+0x54>)
   11f2e:	480f      	ldr	r0, [pc, #60]	; (11f6c <bt_buf_get_rx+0x58>)
   11f30:	f014 ff1f 	bl	26d72 <assert_print>
   11f34:	480e      	ldr	r0, [pc, #56]	; (11f70 <bt_buf_get_rx+0x5c>)
   11f36:	f014 ff1c 	bl	26d72 <assert_print>
   11f3a:	213d      	movs	r1, #61	; 0x3d
   11f3c:	480a      	ldr	r0, [pc, #40]	; (11f68 <bt_buf_get_rx+0x54>)
   11f3e:	f014 ff11 	bl	26d64 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11f42:	480c      	ldr	r0, [pc, #48]	; (11f74 <bt_buf_get_rx+0x60>)
   11f44:	f018 f9ce 	bl	2a2e4 <net_buf_alloc_fixed>
   11f48:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11f4a:	b120      	cbz	r0, 11f56 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   11f4c:	2101      	movs	r1, #1
   11f4e:	300c      	adds	r0, #12
   11f50:	f008 ff30 	bl	1adb4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11f54:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11f56:	4620      	mov	r0, r4
   11f58:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11f5a:	4602      	mov	r2, r0
   11f5c:	460b      	mov	r3, r1
   11f5e:	4806      	ldr	r0, [pc, #24]	; (11f78 <bt_buf_get_rx+0x64>)
   11f60:	e7f0      	b.n	11f44 <bt_buf_get_rx+0x30>
   11f62:	bf00      	nop
   11f64:	0002ff64 	.word	0x0002ff64
   11f68:	0002ff35 	.word	0x0002ff35
   11f6c:	0002dd81 	.word	0x0002dd81
   11f70:	0002ffa9 	.word	0x0002ffa9
   11f74:	20008d18 	.word	0x20008d18
   11f78:	20008c7c 	.word	0x20008c7c

00011f7c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11f7c:	b510      	push	{r4, lr}
   11f7e:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11f80:	490a      	ldr	r1, [pc, #40]	; (11fac <bt_buf_get_cmd_complete+0x30>)
{
   11f82:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11f84:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   11f88:	b920      	cbnz	r0, 11f94 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f8e:	2001      	movs	r0, #1
   11f90:	f7ff bfc0 	b.w	11f14 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11f94:	f009 f864 	bl	1b060 <net_buf_ref>
   11f98:	2101      	movs	r1, #1
		buf->len = 0U;
   11f9a:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   11f9c:	4604      	mov	r4, r0
   11f9e:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   11fa0:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   11fa2:	300c      	adds	r0, #12
   11fa4:	f008 ff06 	bl	1adb4 <net_buf_simple_reserve>
}
   11fa8:	4620      	mov	r0, r4
   11faa:	bd10      	pop	{r4, pc}
   11fac:	20008000 	.word	0x20008000

00011fb0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11fb0:	b570      	push	{r4, r5, r6, lr}
   11fb2:	4604      	mov	r4, r0
	switch (evt) {
   11fb4:	2c0f      	cmp	r4, #15
{
   11fb6:	460d      	mov	r5, r1
   11fb8:	4610      	mov	r0, r2
   11fba:	4619      	mov	r1, r3
	switch (evt) {
   11fbc:	d805      	bhi.n	11fca <bt_buf_get_evt+0x1a>
   11fbe:	2c0d      	cmp	r4, #13
   11fc0:	d90d      	bls.n	11fde <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11fc6:	f7ff bfd9 	b.w	11f7c <bt_buf_get_cmd_complete>
	switch (evt) {
   11fca:	2c13      	cmp	r4, #19
   11fcc:	d107      	bne.n	11fde <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   11fce:	480c      	ldr	r0, [pc, #48]	; (12000 <bt_buf_get_evt+0x50>)
   11fd0:	f018 f988 	bl	2a2e4 <net_buf_alloc_fixed>
			if (buf) {
   11fd4:	4604      	mov	r4, r0
   11fd6:	b938      	cbnz	r0, 11fe8 <bt_buf_get_evt+0x38>
{
   11fd8:	2400      	movs	r4, #0
}
   11fda:	4620      	mov	r0, r4
   11fdc:	bd70      	pop	{r4, r5, r6, pc}
   11fde:	4602      	mov	r2, r0
   11fe0:	460b      	mov	r3, r1
		if (discardable) {
   11fe2:	b145      	cbz	r5, 11ff6 <bt_buf_get_evt+0x46>
   11fe4:	4807      	ldr	r0, [pc, #28]	; (12004 <bt_buf_get_evt+0x54>)
   11fe6:	e7f3      	b.n	11fd0 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11fe8:	2101      	movs	r1, #1
   11fea:	300c      	adds	r0, #12
   11fec:	f008 fee2 	bl	1adb4 <net_buf_simple_reserve>
   11ff0:	2301      	movs	r3, #1
   11ff2:	7623      	strb	r3, [r4, #24]
}
   11ff4:	e7f1      	b.n	11fda <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11ff6:	2001      	movs	r0, #1
}
   11ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11ffc:	f7ff bf8a 	b.w	11f14 <bt_buf_get_rx>
   12000:	20008db4 	.word	0x20008db4
   12004:	20008ce4 	.word	0x20008ce4

00012008 <hci_disconn_complete_prio>:
{
   12008:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1200a:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1200c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   12010:	781b      	ldrb	r3, [r3, #0]
   12012:	b963      	cbnz	r3, 1202e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   12014:	4620      	mov	r0, r4
   12016:	f002 ffa7 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   1201a:	4605      	mov	r5, r0
   1201c:	b940      	cbnz	r0, 12030 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1201e:	4b08      	ldr	r3, [pc, #32]	; (12040 <hci_disconn_complete_prio+0x38>)
   12020:	881a      	ldrh	r2, [r3, #0]
   12022:	b922      	cbnz	r2, 1202e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12024:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   12028:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1202c:	8018      	strh	r0, [r3, #0]
}
   1202e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12030:	2101      	movs	r1, #1
   12032:	f002 ffa1 	bl	14f78 <bt_conn_set_state>
	bt_conn_unref(conn);
   12036:	4628      	mov	r0, r5
}
   12038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1203c:	f002 bf64 	b.w	14f08 <bt_conn_unref>
   12040:	20021aaa 	.word	0x20021aaa

00012044 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12044:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   12046:	4c08      	ldr	r4, [pc, #32]	; (12068 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12048:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1204a:	2205      	movs	r2, #5
   1204c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   12050:	f003 fa80 	bl	15554 <bt_conn_lookup_state_le>
		if (!conn) {
   12054:	b938      	cbnz	r0, 12066 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12056:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1205a:	2204      	movs	r2, #4
}
   1205c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12060:	4902      	ldr	r1, [pc, #8]	; (1206c <find_pending_connect.part.0+0x28>)
   12062:	f003 ba77 	b.w	15554 <bt_conn_lookup_state_le>
}
   12066:	bd10      	pop	{r4, pc}
   12068:	20008000 	.word	0x20008000
   1206c:	0002fdb7 	.word	0x0002fdb7

00012070 <hci_data_buf_overflow>:
{
   12070:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   12072:	68c3      	ldr	r3, [r0, #12]
{
   12074:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   12076:	b088      	sub	sp, #32
   12078:	466a      	mov	r2, sp
   1207a:	781b      	ldrb	r3, [r3, #0]
   1207c:	4906      	ldr	r1, [pc, #24]	; (12098 <hci_data_buf_overflow+0x28>)
   1207e:	4807      	ldr	r0, [pc, #28]	; (1209c <hci_data_buf_overflow+0x2c>)
   12080:	e9c2 1305 	strd	r1, r3, [r2, #20]
   12084:	2303      	movs	r3, #3
   12086:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1208a:	f842 3f10 	str.w	r3, [r2, #16]!
   1208e:	f016 faf8 	bl	28682 <z_log_msg_static_create.constprop.0>
}
   12092:	46bd      	mov	sp, r7
   12094:	bd80      	pop	{r7, pc}
   12096:	bf00      	nop
   12098:	0002ffc9 	.word	0x0002ffc9
   1209c:	0002ccc8 	.word	0x0002ccc8

000120a0 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   120a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   120a2:	4b06      	ldr	r3, [pc, #24]	; (120bc <le_conn_param_neg_reply.part.0+0x1c>)
   120a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   120a8:	9305      	str	r3, [sp, #20]
   120aa:	2302      	movs	r3, #2
   120ac:	4804      	ldr	r0, [pc, #16]	; (120c0 <le_conn_param_neg_reply.part.0+0x20>)
   120ae:	aa04      	add	r2, sp, #16
   120b0:	9304      	str	r3, [sp, #16]
   120b2:	f016 fae6 	bl	28682 <z_log_msg_static_create.constprop.0>
}
   120b6:	b007      	add	sp, #28
   120b8:	f85d fb04 	ldr.w	pc, [sp], #4
   120bc:	0002fff1 	.word	0x0002fff1
   120c0:	0002ccc8 	.word	0x0002ccc8

000120c4 <rx_queue_put>:
{
   120c4:	b598      	push	{r3, r4, r7, lr}
   120c6:	4601      	mov	r1, r0
   120c8:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   120ca:	480d      	ldr	r0, [pc, #52]	; (12100 <rx_queue_put+0x3c>)
   120cc:	f008 fe98 	bl	1ae00 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   120d0:	490c      	ldr	r1, [pc, #48]	; (12104 <rx_queue_put+0x40>)
   120d2:	480d      	ldr	r0, [pc, #52]	; (12108 <rx_queue_put+0x44>)
   120d4:	f019 fd13 	bl	2bafe <k_work_submit_to_queue>
	if (err < 0) {
   120d8:	2800      	cmp	r0, #0
   120da:	da0e      	bge.n	120fa <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   120dc:	466c      	mov	r4, sp
   120de:	b088      	sub	sp, #32
   120e0:	466a      	mov	r2, sp
   120e2:	4b0a      	ldr	r3, [pc, #40]	; (1210c <rx_queue_put+0x48>)
   120e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   120ec:	2303      	movs	r3, #3
   120ee:	4808      	ldr	r0, [pc, #32]	; (12110 <rx_queue_put+0x4c>)
   120f0:	f842 3f10 	str.w	r3, [r2, #16]!
   120f4:	f016 fac5 	bl	28682 <z_log_msg_static_create.constprop.0>
   120f8:	46a5      	mov	sp, r4
}
   120fa:	46bd      	mov	sp, r7
   120fc:	bd98      	pop	{r3, r4, r7, pc}
   120fe:	bf00      	nop
   12100:	2000813c 	.word	0x2000813c
   12104:	200084c4 	.word	0x200084c4
   12108:	20009b70 	.word	0x20009b70
   1210c:	0003000b 	.word	0x0003000b
   12110:	0002ccc8 	.word	0x0002ccc8

00012114 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12114:	460b      	mov	r3, r1
   12116:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12118:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1211a:	af00      	add	r7, sp, #0
   1211c:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1211e:	4629      	mov	r1, r5
   12120:	68d8      	ldr	r0, [r3, #12]
   12122:	f7ff fd03 	bl	11b2c <bt_hex>
   12126:	b08a      	sub	sp, #40	; 0x28
   12128:	466a      	mov	r2, sp
   1212a:	4b09      	ldr	r3, [pc, #36]	; (12150 <handle_event.part.0+0x3c>)
   1212c:	e9c2 5007 	strd	r5, r0, [r2, #28]
   12130:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12134:	f240 4302 	movw	r3, #1026	; 0x402
   12138:	8493      	strh	r3, [r2, #36]	; 0x24
   1213a:	4b06      	ldr	r3, [pc, #24]	; (12154 <handle_event.part.0+0x40>)
   1213c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   12140:	4805      	ldr	r0, [pc, #20]	; (12158 <handle_event.part.0+0x44>)
   12142:	f842 3f10 	str.w	r3, [r2, #16]!
   12146:	f016 fa9c 	bl	28682 <z_log_msg_static_create.constprop.0>
}
   1214a:	46bd      	mov	sp, r7
   1214c:	bdb0      	pop	{r4, r5, r7, pc}
   1214e:	bf00      	nop
   12150:	00030028 	.word	0x00030028
   12154:	01000005 	.word	0x01000005
   12158:	0002ccc8 	.word	0x0002ccc8

0001215c <hci_hardware_error>:
{
   1215c:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1215e:	2101      	movs	r1, #1
   12160:	af00      	add	r7, sp, #0
   12162:	300c      	adds	r0, #12
   12164:	f009 f83c 	bl	1b1e0 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   12168:	b088      	sub	sp, #32
   1216a:	466a      	mov	r2, sp
   1216c:	7803      	ldrb	r3, [r0, #0]
   1216e:	4906      	ldr	r1, [pc, #24]	; (12188 <hci_hardware_error+0x2c>)
   12170:	4806      	ldr	r0, [pc, #24]	; (1218c <hci_hardware_error+0x30>)
   12172:	e9c2 1305 	strd	r1, r3, [r2, #20]
   12176:	2303      	movs	r3, #3
   12178:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1217c:	f842 3f10 	str.w	r3, [r2, #16]!
   12180:	f016 fa7f 	bl	28682 <z_log_msg_static_create.constprop.0>
}
   12184:	46bd      	mov	sp, r7
   12186:	bd80      	pop	{r7, pc}
   12188:	0003004a 	.word	0x0003004a
   1218c:	0002ccc8 	.word	0x0002ccc8

00012190 <le_data_len_change>:
{
   12190:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12192:	68c3      	ldr	r3, [r0, #12]
{
   12194:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12196:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12198:	4620      	mov	r0, r4
   1219a:	f002 fee5 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   1219e:	b980      	cbnz	r0, 121c2 <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   121a0:	466d      	mov	r5, sp
   121a2:	b088      	sub	sp, #32
   121a4:	466a      	mov	r2, sp
   121a6:	4b08      	ldr	r3, [pc, #32]	; (121c8 <le_data_len_change+0x38>)
   121a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   121ac:	e9c2 3405 	strd	r3, r4, [r2, #20]
   121b0:	2303      	movs	r3, #3
   121b2:	4806      	ldr	r0, [pc, #24]	; (121cc <le_data_len_change+0x3c>)
   121b4:	f842 3f10 	str.w	r3, [r2, #16]!
   121b8:	f016 fa63 	bl	28682 <z_log_msg_static_create.constprop.0>
   121bc:	46ad      	mov	sp, r5
}
   121be:	46bd      	mov	sp, r7
   121c0:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   121c2:	f002 fea1 	bl	14f08 <bt_conn_unref>
   121c6:	e7fa      	b.n	121be <le_data_len_change+0x2e>
   121c8:	0003006c 	.word	0x0003006c
   121cc:	0002ccc8 	.word	0x0002ccc8

000121d0 <le_phy_update_complete>:
{
   121d0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   121d2:	68c3      	ldr	r3, [r0, #12]
{
   121d4:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   121d6:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   121da:	4620      	mov	r0, r4
   121dc:	f002 fec4 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   121e0:	b980      	cbnz	r0, 12204 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   121e2:	466d      	mov	r5, sp
   121e4:	b088      	sub	sp, #32
   121e6:	466a      	mov	r2, sp
   121e8:	4b08      	ldr	r3, [pc, #32]	; (1220c <le_phy_update_complete+0x3c>)
   121ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   121ee:	e9c2 3405 	strd	r3, r4, [r2, #20]
   121f2:	2303      	movs	r3, #3
   121f4:	4806      	ldr	r0, [pc, #24]	; (12210 <le_phy_update_complete+0x40>)
   121f6:	f842 3f10 	str.w	r3, [r2, #16]!
   121fa:	f016 fa42 	bl	28682 <z_log_msg_static_create.constprop.0>
   121fe:	46ad      	mov	sp, r5
}
   12200:	46bd      	mov	sp, r7
   12202:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   12204:	f002 fe80 	bl	14f08 <bt_conn_unref>
   12208:	e7fa      	b.n	12200 <le_phy_update_complete+0x30>
   1220a:	bf00      	nop
   1220c:	0003006c 	.word	0x0003006c
   12210:	0002ccc8 	.word	0x0002ccc8

00012214 <hci_disconn_complete>:
{
   12214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12218:	68c5      	ldr	r5, [r0, #12]
{
   1221a:	af00      	add	r7, sp, #0
	if (evt->status) {
   1221c:	782e      	ldrb	r6, [r5, #0]
   1221e:	b9ae      	cbnz	r6, 1224c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12220:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12224:	4640      	mov	r0, r8
   12226:	f002 fe9f 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   1222a:	4604      	mov	r4, r0
   1222c:	b988      	cbnz	r0, 12252 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1222e:	466c      	mov	r4, sp
   12230:	b088      	sub	sp, #32
   12232:	466a      	mov	r2, sp
   12234:	4b0b      	ldr	r3, [pc, #44]	; (12264 <hci_disconn_complete+0x50>)
   12236:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1223a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1223e:	2303      	movs	r3, #3
   12240:	4809      	ldr	r0, [pc, #36]	; (12268 <hci_disconn_complete+0x54>)
   12242:	f842 3f10 	str.w	r3, [r2, #16]!
   12246:	f016 fa1c 	bl	28682 <z_log_msg_static_create.constprop.0>
   1224a:	46a5      	mov	sp, r4
}
   1224c:	46bd      	mov	sp, r7
   1224e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   12252:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12254:	4631      	mov	r1, r6
	conn->err = evt->reason;
   12256:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12258:	f002 fe8e 	bl	14f78 <bt_conn_set_state>
		bt_conn_unref(conn);
   1225c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   1225e:	f002 fe53 	bl	14f08 <bt_conn_unref>
   12262:	e7f3      	b.n	1224c <hci_disconn_complete+0x38>
   12264:	00030090 	.word	0x00030090
   12268:	0002ccc8 	.word	0x0002ccc8

0001226c <handle_event>:
{
   1226c:	b5b0      	push	{r4, r5, r7, lr}
   1226e:	4604      	mov	r4, r0
   12270:	af00      	add	r7, sp, #0
   12272:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   12276:	4293      	cmp	r3, r2
   12278:	d103      	bne.n	12282 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   1227a:	4620      	mov	r0, r4
   1227c:	f7ff ff4a 	bl	12114 <handle_event.part.0>
}
   12280:	e018      	b.n	122b4 <handle_event+0x48>
		if (handler->event != event) {
   12282:	4610      	mov	r0, r2
   12284:	f810 5b08 	ldrb.w	r5, [r0], #8
   12288:	42a5      	cmp	r5, r4
   1228a:	d119      	bne.n	122c0 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   1228c:	8a0b      	ldrh	r3, [r1, #16]
   1228e:	7850      	ldrb	r0, [r2, #1]
   12290:	4298      	cmp	r0, r3
   12292:	d911      	bls.n	122b8 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   12294:	466d      	mov	r5, sp
   12296:	b088      	sub	sp, #32
   12298:	466a      	mov	r2, sp
   1229a:	490a      	ldr	r1, [pc, #40]	; (122c4 <handle_event+0x58>)
   1229c:	61d4      	str	r4, [r2, #28]
   1229e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   122a2:	2304      	movs	r3, #4
   122a4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   122a8:	4807      	ldr	r0, [pc, #28]	; (122c8 <handle_event+0x5c>)
   122aa:	f842 3f10 	str.w	r3, [r2, #16]!
   122ae:	f016 f9e8 	bl	28682 <z_log_msg_static_create.constprop.0>
   122b2:	46ad      	mov	sp, r5
}
   122b4:	46bd      	mov	sp, r7
   122b6:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   122b8:	4608      	mov	r0, r1
   122ba:	6853      	ldr	r3, [r2, #4]
   122bc:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   122be:	e7f9      	b.n	122b4 <handle_event+0x48>
   122c0:	4602      	mov	r2, r0
   122c2:	e7d8      	b.n	12276 <handle_event+0xa>
   122c4:	000300b6 	.word	0x000300b6
   122c8:	0002ccc8 	.word	0x0002ccc8

000122cc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   122cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   122ce:	4855      	ldr	r0, [pc, #340]	; (12424 <rx_work_handler+0x158>)
{
   122d0:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   122d2:	f008 fdff 	bl	1aed4 <net_buf_slist_get>
	if (!buf) {
   122d6:	4604      	mov	r4, r0
   122d8:	2800      	cmp	r0, #0
   122da:	d06a      	beq.n	123b2 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   122dc:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   122de:	2b01      	cmp	r3, #1
   122e0:	d069      	beq.n	123b6 <rx_work_handler+0xea>
   122e2:	2b03      	cmp	r3, #3
   122e4:	f040 8099 	bne.w	1241a <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   122e8:	8a03      	ldrh	r3, [r0, #16]
   122ea:	2b03      	cmp	r3, #3
   122ec:	d80c      	bhi.n	12308 <rx_work_handler+0x3c>
   122ee:	f240 13ed 	movw	r3, #493	; 0x1ed
   122f2:	4a4d      	ldr	r2, [pc, #308]	; (12428 <rx_work_handler+0x15c>)
   122f4:	494d      	ldr	r1, [pc, #308]	; (1242c <rx_work_handler+0x160>)
   122f6:	484e      	ldr	r0, [pc, #312]	; (12430 <rx_work_handler+0x164>)
   122f8:	f014 fd3b 	bl	26d72 <assert_print>
   122fc:	4040      	eors	r0, r0
   122fe:	f380 8811 	msr	BASEPRI, r0
   12302:	f04f 0003 	mov.w	r0, #3
   12306:	df02      	svc	2
   12308:	2104      	movs	r1, #4
   1230a:	f104 000c 	add.w	r0, r4, #12
   1230e:	f008 ff67 	bl	1b1e0 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12312:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12314:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12316:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   12318:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   1231a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1231e:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   12320:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12322:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   12324:	d010      	beq.n	12348 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   12326:	466d      	mov	r5, sp
   12328:	b088      	sub	sp, #32
   1232a:	466a      	mov	r2, sp
   1232c:	4841      	ldr	r0, [pc, #260]	; (12434 <rx_work_handler+0x168>)
   1232e:	61d3      	str	r3, [r2, #28]
   12330:	2304      	movs	r3, #4
   12332:	e9c2 0105 	strd	r0, r1, [r2, #20]
   12336:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1233a:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1233e:	483e      	ldr	r0, [pc, #248]	; (12438 <rx_work_handler+0x16c>)
   12340:	f016 f99f 	bl	28682 <z_log_msg_static_create.constprop.0>
   12344:	46ad      	mov	sp, r5
   12346:	e064      	b.n	12412 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   12348:	f002 fe0e 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   1234c:	4605      	mov	r5, r0
   1234e:	b960      	cbnz	r0, 1236a <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   12350:	466d      	mov	r5, sp
   12352:	b088      	sub	sp, #32
   12354:	8b63      	ldrh	r3, [r4, #26]
   12356:	466a      	mov	r2, sp
   12358:	4938      	ldr	r1, [pc, #224]	; (1243c <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   1235a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1235e:	2303      	movs	r3, #3
   12360:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12364:	f842 3f10 	str.w	r3, [r2, #16]!
   12368:	e7e9      	b.n	1233e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1236a:	f002 fef9 	bl	15160 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1236e:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   12370:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   12372:	0b32      	lsrs	r2, r6, #12
   12374:	4628      	mov	r0, r5
   12376:	f002 fc63 	bl	14c40 <bt_conn_recv>
	bt_conn_unref(conn);
   1237a:	4628      	mov	r0, r5
   1237c:	f002 fdc4 	bl	14f08 <bt_conn_unref>
	return list->head;
   12380:	4b2f      	ldr	r3, [pc, #188]	; (12440 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   12382:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   12386:	b1a3      	cbz	r3, 123b2 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   12388:	492e      	ldr	r1, [pc, #184]	; (12444 <rx_work_handler+0x178>)
   1238a:	482f      	ldr	r0, [pc, #188]	; (12448 <rx_work_handler+0x17c>)
   1238c:	f019 fbb7 	bl	2bafe <k_work_submit_to_queue>
#endif
		if (err < 0) {
   12390:	2800      	cmp	r0, #0
   12392:	da0e      	bge.n	123b2 <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   12394:	466c      	mov	r4, sp
   12396:	b088      	sub	sp, #32
   12398:	466a      	mov	r2, sp
   1239a:	4b2c      	ldr	r3, [pc, #176]	; (1244c <rx_work_handler+0x180>)
   1239c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   123a0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   123a4:	2303      	movs	r3, #3
   123a6:	4824      	ldr	r0, [pc, #144]	; (12438 <rx_work_handler+0x16c>)
   123a8:	f842 3f10 	str.w	r3, [r2, #16]!
   123ac:	f016 f969 	bl	28682 <z_log_msg_static_create.constprop.0>
   123b0:	46a5      	mov	sp, r4
		}
	}
}
   123b2:	46bd      	mov	sp, r7
   123b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   123b6:	8a03      	ldrh	r3, [r0, #16]
   123b8:	2b01      	cmp	r3, #1
   123ba:	d80c      	bhi.n	123d6 <rx_work_handler+0x10a>
   123bc:	f640 136d 	movw	r3, #2413	; 0x96d
   123c0:	4a19      	ldr	r2, [pc, #100]	; (12428 <rx_work_handler+0x15c>)
   123c2:	491a      	ldr	r1, [pc, #104]	; (1242c <rx_work_handler+0x160>)
   123c4:	481a      	ldr	r0, [pc, #104]	; (12430 <rx_work_handler+0x164>)
   123c6:	f014 fcd4 	bl	26d72 <assert_print>
   123ca:	4040      	eors	r0, r0
   123cc:	f380 8811 	msr	BASEPRI, r0
   123d0:	f04f 0003 	mov.w	r0, #3
   123d4:	df02      	svc	2
   123d6:	2102      	movs	r1, #2
   123d8:	f104 000c 	add.w	r0, r4, #12
   123dc:	f008 ff00 	bl	1b1e0 <net_buf_simple_pull_mem>
   123e0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   123e2:	7800      	ldrb	r0, [r0, #0]
   123e4:	f016 f90b 	bl	285fe <bt_hci_evt_get_flags>
   123e8:	0783      	lsls	r3, r0, #30
   123ea:	d40c      	bmi.n	12406 <rx_work_handler+0x13a>
   123ec:	f640 1371 	movw	r3, #2417	; 0x971
   123f0:	4a0d      	ldr	r2, [pc, #52]	; (12428 <rx_work_handler+0x15c>)
   123f2:	4917      	ldr	r1, [pc, #92]	; (12450 <rx_work_handler+0x184>)
   123f4:	480e      	ldr	r0, [pc, #56]	; (12430 <rx_work_handler+0x164>)
   123f6:	f014 fcbc 	bl	26d72 <assert_print>
   123fa:	4040      	eors	r0, r0
   123fc:	f380 8811 	msr	BASEPRI, r0
   12400:	f04f 0003 	mov.w	r0, #3
   12404:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12406:	2306      	movs	r3, #6
   12408:	4621      	mov	r1, r4
   1240a:	4a12      	ldr	r2, [pc, #72]	; (12454 <rx_work_handler+0x188>)
   1240c:	7828      	ldrb	r0, [r5, #0]
   1240e:	f7ff ff2d 	bl	1226c <handle_event>
		net_buf_unref(buf);
   12412:	4620      	mov	r0, r4
   12414:	f008 fde0 	bl	1afd8 <net_buf_unref>
		break;
   12418:	e7b2      	b.n	12380 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1241a:	466d      	mov	r5, sp
   1241c:	b088      	sub	sp, #32
   1241e:	466a      	mov	r2, sp
   12420:	490d      	ldr	r1, [pc, #52]	; (12458 <rx_work_handler+0x18c>)
   12422:	e79a      	b.n	1235a <rx_work_handler+0x8e>
   12424:	2000813c 	.word	0x2000813c
   12428:	000300d8 	.word	0x000300d8
   1242c:	0003010c 	.word	0x0003010c
   12430:	0002dd81 	.word	0x0002dd81
   12434:	00030125 	.word	0x00030125
   12438:	0002ccc8 	.word	0x0002ccc8
   1243c:	00030149 	.word	0x00030149
   12440:	20008000 	.word	0x20008000
   12444:	200084c4 	.word	0x200084c4
   12448:	20009b70 	.word	0x20009b70
   1244c:	0003000b 	.word	0x0003000b
   12450:	0003016b 	.word	0x0003016b
   12454:	0002d674 	.word	0x0002d674
   12458:	00030199 	.word	0x00030199

0001245c <hci_le_meta_event>:
{
   1245c:	b510      	push	{r4, lr}
   1245e:	2101      	movs	r1, #1
   12460:	4604      	mov	r4, r0
   12462:	300c      	adds	r0, #12
   12464:	f008 febc 	bl	1b1e0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12468:	4621      	mov	r1, r4
}
   1246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1246e:	230a      	movs	r3, #10
   12470:	4a01      	ldr	r2, [pc, #4]	; (12478 <hci_le_meta_event+0x1c>)
   12472:	7800      	ldrb	r0, [r0, #0]
   12474:	f7ff befa 	b.w	1226c <handle_event>
   12478:	0002d6a4 	.word	0x0002d6a4

0001247c <le_remote_feat_complete>:
{
   1247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1247e:	68c5      	ldr	r5, [r0, #12]
{
   12480:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12482:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12486:	4630      	mov	r0, r6
   12488:	f002 fd6e 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   1248c:	4604      	mov	r4, r0
   1248e:	b980      	cbnz	r0, 124b2 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12490:	466c      	mov	r4, sp
   12492:	b088      	sub	sp, #32
   12494:	466a      	mov	r2, sp
   12496:	4b10      	ldr	r3, [pc, #64]	; (124d8 <le_remote_feat_complete+0x5c>)
   12498:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1249c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   124a0:	2303      	movs	r3, #3
   124a2:	480e      	ldr	r0, [pc, #56]	; (124dc <le_remote_feat_complete+0x60>)
   124a4:	f842 3f10 	str.w	r3, [r2, #16]!
   124a8:	f016 f8eb 	bl	28682 <z_log_msg_static_create.constprop.0>
   124ac:	46a5      	mov	sp, r4
}
   124ae:	46bd      	mov	sp, r7
   124b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   124b2:	782b      	ldrb	r3, [r5, #0]
   124b4:	b93b      	cbnz	r3, 124c6 <le_remote_feat_complete+0x4a>
   124b6:	f8d5 3003 	ldr.w	r3, [r5, #3]
   124ba:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   124be:	f8d5 3007 	ldr.w	r3, [r5, #7]
   124c2:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   124c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   124ca:	1d20      	adds	r0, r4, #4
   124cc:	f016 f8c2 	bl	28654 <atomic_or>
	bt_conn_unref(conn);
   124d0:	4620      	mov	r0, r4
   124d2:	f002 fd19 	bl	14f08 <bt_conn_unref>
   124d6:	e7ea      	b.n	124ae <le_remote_feat_complete+0x32>
   124d8:	0003006c 	.word	0x0003006c
   124dc:	0002ccc8 	.word	0x0002ccc8

000124e0 <hci_cmd_done>:
{
   124e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   124e4:	4606      	mov	r6, r0
   124e6:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   124e8:	7a90      	ldrb	r0, [r2, #10]
{
   124ea:	4688      	mov	r8, r1
   124ec:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   124ee:	f008 fb39 	bl	1ab64 <net_buf_pool_get>
   124f2:	4d41      	ldr	r5, [pc, #260]	; (125f8 <hci_cmd_done+0x118>)
   124f4:	4285      	cmp	r5, r0
   124f6:	d018      	beq.n	1252a <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   124f8:	7aa4      	ldrb	r4, [r4, #10]
   124fa:	46e8      	mov	r8, sp
   124fc:	4620      	mov	r0, r4
   124fe:	f008 fb31 	bl	1ab64 <net_buf_pool_get>
   12502:	b08a      	sub	sp, #40	; 0x28
   12504:	466a      	mov	r2, sp
   12506:	4b3d      	ldr	r3, [pc, #244]	; (125fc <hci_cmd_done+0x11c>)
   12508:	e9c2 4007 	strd	r4, r0, [r2, #28]
   1250c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12510:	2306      	movs	r3, #6
   12512:	6255      	str	r5, [r2, #36]	; 0x24
   12514:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   12518:	4839      	ldr	r0, [pc, #228]	; (12600 <hci_cmd_done+0x120>)
   1251a:	f842 3f10 	str.w	r3, [r2, #16]!
   1251e:	f016 f8b0 	bl	28682 <z_log_msg_static_create.constprop.0>
   12522:	46c5      	mov	sp, r8
}
   12524:	46bd      	mov	sp, r7
   12526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1252a:	4620      	mov	r0, r4
   1252c:	f008 fb22 	bl	1ab74 <net_buf_id>
   12530:	f04f 090c 	mov.w	r9, #12
   12534:	4d33      	ldr	r5, [pc, #204]	; (12604 <hci_cmd_done+0x124>)
   12536:	fb09 5000 	mla	r0, r9, r0, r5
   1253a:	8843      	ldrh	r3, [r0, #2]
   1253c:	42b3      	cmp	r3, r6
   1253e:	d016      	beq.n	1256e <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   12540:	4620      	mov	r0, r4
   12542:	f008 fb17 	bl	1ab74 <net_buf_id>
   12546:	fb09 5000 	mla	r0, r9, r0, r5
   1254a:	466c      	mov	r4, sp
   1254c:	b088      	sub	sp, #32
   1254e:	466a      	mov	r2, sp
   12550:	8843      	ldrh	r3, [r0, #2]
   12552:	61d3      	str	r3, [r2, #28]
   12554:	2304      	movs	r3, #4
   12556:	492c      	ldr	r1, [pc, #176]	; (12608 <hci_cmd_done+0x128>)
   12558:	4829      	ldr	r0, [pc, #164]	; (12600 <hci_cmd_done+0x120>)
   1255a:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1255e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12562:	f842 3f10 	str.w	r3, [r2, #16]!
   12566:	f016 f88c 	bl	28682 <z_log_msg_static_create.constprop.0>
   1256a:	46a5      	mov	sp, r4
		return;
   1256c:	e7da      	b.n	12524 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   1256e:	4e27      	ldr	r6, [pc, #156]	; (1260c <hci_cmd_done+0x12c>)
   12570:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   12574:	b120      	cbz	r0, 12580 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   12576:	f008 fd2f 	bl	1afd8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1257a:	2300      	movs	r3, #0
   1257c:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   12580:	4620      	mov	r0, r4
   12582:	f008 faf7 	bl	1ab74 <net_buf_id>
   12586:	260c      	movs	r6, #12
   12588:	fb06 5000 	mla	r0, r6, r0, r5
   1258c:	6843      	ldr	r3, [r0, #4]
   1258e:	b1ab      	cbz	r3, 125bc <hci_cmd_done+0xdc>
   12590:	f1b8 0f00 	cmp.w	r8, #0
   12594:	d112      	bne.n	125bc <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12596:	4620      	mov	r0, r4
   12598:	f008 faec 	bl	1ab74 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1259c:	2101      	movs	r1, #1
   1259e:	fb06 5000 	mla	r0, r6, r0, r5
   125a2:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   125a4:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   125a8:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   125aa:	f003 061f 	and.w	r6, r3, #31
   125ae:	40b1      	lsls	r1, r6
	if (val) {
   125b0:	095b      	lsrs	r3, r3, #5
   125b2:	b1da      	cbz	r2, 125ec <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   125b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   125b8:	f016 f84c 	bl	28654 <atomic_or>
	if (cmd(buf)->sync) {
   125bc:	4620      	mov	r0, r4
   125be:	f008 fad9 	bl	1ab74 <net_buf_id>
   125c2:	260c      	movs	r6, #12
   125c4:	fb06 5000 	mla	r0, r6, r0, r5
   125c8:	6883      	ldr	r3, [r0, #8]
   125ca:	2b00      	cmp	r3, #0
   125cc:	d0aa      	beq.n	12524 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   125ce:	4620      	mov	r0, r4
   125d0:	f008 fad0 	bl	1ab74 <net_buf_id>
   125d4:	4370      	muls	r0, r6
   125d6:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   125da:	4620      	mov	r0, r4
   125dc:	f008 faca 	bl	1ab74 <net_buf_id>
   125e0:	fb06 5500 	mla	r5, r6, r0, r5
   125e4:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   125e6:	f00f fb53 	bl	21c90 <z_impl_k_sem_give>
}
   125ea:	e79b      	b.n	12524 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   125ec:	43c9      	mvns	r1, r1
   125ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   125f2:	f016 f849 	bl	28688 <atomic_and.isra.0>
   125f6:	e7e1      	b.n	125bc <hci_cmd_done+0xdc>
   125f8:	20008d80 	.word	0x20008d80
   125fc:	000301ad 	.word	0x000301ad
   12600:	0002ccc8 	.word	0x0002ccc8
   12604:	200214f4 	.word	0x200214f4
   12608:	000301e2 	.word	0x000301e2
   1260c:	20008000 	.word	0x20008000

00012610 <hci_cmd_status>:
{
   12610:	b538      	push	{r3, r4, r5, lr}
   12612:	2104      	movs	r1, #4
   12614:	4604      	mov	r4, r0
   12616:	300c      	adds	r0, #12
   12618:	f008 fde2 	bl	1b1e0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1261c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1261e:	7801      	ldrb	r1, [r0, #0]
   12620:	4622      	mov	r2, r4
   12622:	8840      	ldrh	r0, [r0, #2]
   12624:	f7ff ff5c 	bl	124e0 <hci_cmd_done>
	if (ncmd) {
   12628:	b125      	cbz	r5, 12634 <hci_cmd_status+0x24>
}
   1262a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1262e:	4802      	ldr	r0, [pc, #8]	; (12638 <hci_cmd_status+0x28>)
   12630:	f00f bb2e 	b.w	21c90 <z_impl_k_sem_give>
   12634:	bd38      	pop	{r3, r4, r5, pc}
   12636:	bf00      	nop
   12638:	20008120 	.word	0x20008120

0001263c <hci_cmd_complete>:
{
   1263c:	b538      	push	{r3, r4, r5, lr}
   1263e:	2103      	movs	r1, #3
   12640:	4604      	mov	r4, r0
   12642:	300c      	adds	r0, #12
   12644:	f008 fdcc 	bl	1b1e0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12648:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   1264a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1264c:	4622      	mov	r2, r4
   1264e:	7819      	ldrb	r1, [r3, #0]
   12650:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   12654:	f7ff ff44 	bl	124e0 <hci_cmd_done>
	if (ncmd) {
   12658:	b125      	cbz	r5, 12664 <hci_cmd_complete+0x28>
}
   1265a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1265e:	4802      	ldr	r0, [pc, #8]	; (12668 <hci_cmd_complete+0x2c>)
   12660:	f00f bb16 	b.w	21c90 <z_impl_k_sem_give>
   12664:	bd38      	pop	{r3, r4, r5, pc}
   12666:	bf00      	nop
   12668:	20008120 	.word	0x20008120

0001266c <hci_num_completed_packets>:
{
   1266c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   12670:	2500      	movs	r5, #0
{
   12672:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
   12674:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   12676:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   1267a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 12778 <hci_num_completed_packets+0x10c>
{
   1267e:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
   12680:	f898 3000 	ldrb.w	r3, [r8]
   12684:	429d      	cmp	r5, r3
   12686:	db03      	blt.n	12690 <hci_num_completed_packets+0x24>
}
   12688:	371c      	adds	r7, #28
   1268a:	46bd      	mov	sp, r7
   1268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   12690:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   12694:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   12698:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1269c:	4658      	mov	r0, fp
   1269e:	f002 fc63 	bl	14f68 <bt_conn_lookup_handle>
		if (!conn) {
   126a2:	4604      	mov	r4, r0
   126a4:	b1d8      	cbz	r0, 126de <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   126a6:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   126aa:	2e00      	cmp	r6, #0
   126ac:	d039      	beq.n	12722 <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   126ae:	f04f 0320 	mov.w	r3, #32
   126b2:	f3ef 8211 	mrs	r2, BASEPRI
   126b6:	f383 8812 	msr	BASEPRI_MAX, r3
   126ba:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   126be:	69e3      	ldr	r3, [r4, #28]
   126c0:	b1f3      	cbz	r3, 12700 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   126c2:	3b01      	subs	r3, #1
   126c4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   126c6:	f382 8811 	msr	BASEPRI, r2
   126ca:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   126ce:	4620      	mov	r0, r4
   126d0:	f002 fa3a 	bl	14b48 <bt_conn_get_pkts>
   126d4:	3e01      	subs	r6, #1
   126d6:	f00f fadb 	bl	21c90 <z_impl_k_sem_give>
   126da:	b2b6      	uxth	r6, r6
   126dc:	e7e5      	b.n	126aa <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   126de:	466c      	mov	r4, sp
   126e0:	b088      	sub	sp, #32
   126e2:	466a      	mov	r2, sp
   126e4:	4b25      	ldr	r3, [pc, #148]	; (1277c <hci_num_completed_packets+0x110>)
   126e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   126ea:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   126ee:	2303      	movs	r3, #3
   126f0:	4823      	ldr	r0, [pc, #140]	; (12780 <hci_num_completed_packets+0x114>)
   126f2:	f842 3f10 	str.w	r3, [r2, #16]!
   126f6:	f015 ffc4 	bl	28682 <z_log_msg_static_create.constprop.0>
   126fa:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   126fc:	3501      	adds	r5, #1
   126fe:	e7bf      	b.n	12680 <hci_num_completed_packets+0x14>
   12700:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   12702:	b993      	cbnz	r3, 1272a <hci_num_completed_packets+0xbe>
   12704:	f382 8811 	msr	BASEPRI, r2
   12708:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   1270c:	2302      	movs	r3, #2
   1270e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12712:	481b      	ldr	r0, [pc, #108]	; (12780 <hci_num_completed_packets+0x114>)
   12714:	f8c7 a014 	str.w	sl, [r7, #20]
   12718:	613b      	str	r3, [r7, #16]
   1271a:	f107 0210 	add.w	r2, r7, #16
   1271e:	f015 ffb0 	bl	28682 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   12722:	4620      	mov	r0, r4
   12724:	f002 fbf0 	bl	14f08 <bt_conn_unref>
   12728:	e7e8      	b.n	126fc <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1272a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1272c:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1272e:	428b      	cmp	r3, r1
	list->head = node;
   12730:	6160      	str	r0, [r4, #20]
	list->tail = node;
   12732:	bf08      	it	eq
   12734:	61a0      	streq	r0, [r4, #24]
   12736:	f382 8811 	msr	BASEPRI, r2
   1273a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1273e:	f04f 0220 	mov.w	r2, #32
   12742:	f3ef 8111 	mrs	r1, BASEPRI
   12746:	f382 8812 	msr	BASEPRI_MAX, r2
   1274a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1274e:	68da      	ldr	r2, [r3, #12]
   12750:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   12752:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   12756:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   1275a:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1275c:	b94a      	cbnz	r2, 12772 <hci_num_completed_packets+0x106>
	list->head = node;
   1275e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   12762:	f381 8811 	msr	BASEPRI, r1
   12766:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1276a:	4658      	mov	r0, fp
   1276c:	f00f fdfe 	bl	2236c <k_work_submit>
   12770:	e7ad      	b.n	126ce <hci_num_completed_packets+0x62>
	parent->next = child;
   12772:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12774:	6263      	str	r3, [r4, #36]	; 0x24
}
   12776:	e7f4      	b.n	12762 <hci_num_completed_packets+0xf6>
   12778:	00030231 	.word	0x00030231
   1277c:	00030215 	.word	0x00030215
   12780:	0002ccc8 	.word	0x0002ccc8

00012784 <le_conn_update_complete>:
{
   12784:	b5f0      	push	{r4, r5, r6, r7, lr}
   12786:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   12788:	68c5      	ldr	r5, [r0, #12]
{
   1278a:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   1278c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12790:	4630      	mov	r0, r6
   12792:	f002 fbe9 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   12796:	4604      	mov	r4, r0
   12798:	b988      	cbnz	r0, 127be <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1279a:	466c      	mov	r4, sp
   1279c:	b088      	sub	sp, #32
   1279e:	466a      	mov	r2, sp
   127a0:	4b2b      	ldr	r3, [pc, #172]	; (12850 <le_conn_update_complete+0xcc>)
   127a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   127a6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   127aa:	2303      	movs	r3, #3
   127ac:	4829      	ldr	r0, [pc, #164]	; (12854 <le_conn_update_complete+0xd0>)
   127ae:	f842 3f10 	str.w	r3, [r2, #16]!
   127b2:	f015 ff66 	bl	28682 <z_log_msg_static_create.constprop.0>
   127b6:	46a5      	mov	sp, r4
}
   127b8:	370c      	adds	r7, #12
   127ba:	46bd      	mov	sp, r7
   127bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   127be:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   127c0:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   127c2:	2b1a      	cmp	r3, #26
   127c4:	d117      	bne.n	127f6 <le_conn_update_complete+0x72>
   127c6:	78c3      	ldrb	r3, [r0, #3]
   127c8:	2b01      	cmp	r3, #1
   127ca:	d128      	bne.n	1281e <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   127cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   127d0:	4630      	mov	r0, r6
   127d2:	f015 ff3f 	bl	28654 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   127d6:	0542      	lsls	r2, r0, #21
   127d8:	d40d      	bmi.n	127f6 <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
   127da:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   127de:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   127e0:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   127e2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   127e6:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   127e8:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   127ea:	f003 f9eb 	bl	15bc4 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   127ee:	4620      	mov	r0, r4
   127f0:	f002 fb8a 	bl	14f08 <bt_conn_unref>
   127f4:	e7e0      	b.n	127b8 <le_conn_update_complete+0x34>
		if (!evt->status) {
   127f6:	782b      	ldrb	r3, [r5, #0]
   127f8:	b98b      	cbnz	r3, 1281e <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   127fa:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   127fe:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   12802:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   12806:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1280a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1280e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12812:	f46f 7180 	mvn.w	r1, #256	; 0x100
   12816:	4630      	mov	r0, r6
   12818:	f015 ff36 	bl	28688 <atomic_and.isra.0>
}
   1281c:	e014      	b.n	12848 <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1281e:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   12822:	05db      	lsls	r3, r3, #23
   12824:	d5f5      	bpl.n	12812 <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   12826:	782b      	ldrb	r3, [r5, #0]
   12828:	2b20      	cmp	r3, #32
   1282a:	d1f2      	bne.n	12812 <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
   1282c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   12830:	2b00      	cmp	r3, #0
   12832:	d0ee      	beq.n	12812 <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
   12834:	3b01      	subs	r3, #1
   12836:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   1283a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1283e:	2300      	movs	r3, #0
   12840:	f104 0060 	add.w	r0, r4, #96	; 0x60
   12844:	f00f ff4a 	bl	226dc <k_work_schedule>
		notify_le_param_updated(conn);
   12848:	4620      	mov	r0, r4
   1284a:	f002 fced 	bl	15228 <notify_le_param_updated>
   1284e:	e7ce      	b.n	127ee <le_conn_update_complete+0x6a>
   12850:	0003006c 	.word	0x0003006c
   12854:	0002ccc8 	.word	0x0002ccc8

00012858 <bt_hci_cmd_state_set_init>:
{
   12858:	b510      	push	{r4, lr}
	state->bit = bit;
   1285a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1285e:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   12862:	460c      	mov	r4, r1
	state->val = val;
   12864:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   12866:	f008 f985 	bl	1ab74 <net_buf_id>
   1286a:	220c      	movs	r2, #12
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <bt_hci_cmd_state_set_init+0x20>)
   1286e:	fb02 3300 	mla	r3, r2, r0, r3
   12872:	605c      	str	r4, [r3, #4]
}
   12874:	bd10      	pop	{r4, pc}
   12876:	bf00      	nop
   12878:	200214f4 	.word	0x200214f4

0001287c <bt_hci_cmd_create>:
{
   1287c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12880:	f04f 32ff 	mov.w	r2, #4294967295
   12884:	4606      	mov	r6, r0
   12886:	f04f 33ff 	mov.w	r3, #4294967295
   1288a:	481e      	ldr	r0, [pc, #120]	; (12904 <bt_hci_cmd_create+0x88>)
   1288c:	460f      	mov	r7, r1
   1288e:	f017 fd29 	bl	2a2e4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   12892:	4604      	mov	r4, r0
   12894:	b958      	cbnz	r0, 128ae <bt_hci_cmd_create+0x32>
   12896:	491c      	ldr	r1, [pc, #112]	; (12908 <bt_hci_cmd_create+0x8c>)
   12898:	481c      	ldr	r0, [pc, #112]	; (1290c <bt_hci_cmd_create+0x90>)
   1289a:	f240 1301 	movw	r3, #257	; 0x101
   1289e:	4a1c      	ldr	r2, [pc, #112]	; (12910 <bt_hci_cmd_create+0x94>)
   128a0:	f014 fa67 	bl	26d72 <assert_print>
   128a4:	f240 1101 	movw	r1, #257	; 0x101
   128a8:	4819      	ldr	r0, [pc, #100]	; (12910 <bt_hci_cmd_create+0x94>)
   128aa:	f014 fa5b 	bl	26d64 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   128ae:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   128b2:	f100 0a0c 	add.w	sl, r0, #12
   128b6:	2101      	movs	r1, #1
   128b8:	4650      	mov	r0, sl
   128ba:	f008 fa7b 	bl	1adb4 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   128be:	4620      	mov	r0, r4
   128c0:	f884 8018 	strb.w	r8, [r4, #24]
   128c4:	f008 f956 	bl	1ab74 <net_buf_id>
   128c8:	f04f 090c 	mov.w	r9, #12
   128cc:	4d11      	ldr	r5, [pc, #68]	; (12914 <bt_hci_cmd_create+0x98>)
   128ce:	fb09 5000 	mla	r0, r9, r0, r5
   128d2:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   128d4:	4620      	mov	r0, r4
   128d6:	f008 f94d 	bl	1ab74 <net_buf_id>
   128da:	fb09 5000 	mla	r0, r9, r0, r5
   128de:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   128e2:	4620      	mov	r0, r4
   128e4:	f008 f946 	bl	1ab74 <net_buf_id>
   128e8:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   128ec:	2103      	movs	r1, #3
   128ee:	4650      	mov	r0, sl
   128f0:	f8c5 8004 	str.w	r8, [r5, #4]
   128f4:	f008 fc92 	bl	1b21c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   128f8:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   128fa:	7087      	strb	r7, [r0, #2]
}
   128fc:	4620      	mov	r0, r4
   128fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12902:	bf00      	nop
   12904:	20008d80 	.word	0x20008d80
   12908:	00031e39 	.word	0x00031e39
   1290c:	0002dd81 	.word	0x0002dd81
   12910:	000300d8 	.word	0x000300d8
   12914:	200214f4 	.word	0x200214f4

00012918 <bt_hci_cmd_send_sync>:
{
   12918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1291c:	b087      	sub	sp, #28
   1291e:	4680      	mov	r8, r0
   12920:	4615      	mov	r5, r2
	if (!buf) {
   12922:	460c      	mov	r4, r1
{
   12924:	af00      	add	r7, sp, #0
	if (!buf) {
   12926:	b921      	cbnz	r1, 12932 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   12928:	f7ff ffa8 	bl	1287c <bt_hci_cmd_create>
		if (!buf) {
   1292c:	4604      	mov	r4, r0
   1292e:	2800      	cmp	r0, #0
   12930:	d05a      	beq.n	129e8 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12932:	2201      	movs	r2, #1
   12934:	2100      	movs	r1, #0
   12936:	4638      	mov	r0, r7
   12938:	f019 f87e 	bl	2ba38 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1293c:	4620      	mov	r0, r4
   1293e:	f008 f919 	bl	1ab74 <net_buf_id>
   12942:	230c      	movs	r3, #12
   12944:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 129f0 <bt_hci_cmd_send_sync+0xd8>
   12948:	fb03 9000 	mla	r0, r3, r0, r9
   1294c:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1294e:	4620      	mov	r0, r4
   12950:	f008 fb86 	bl	1b060 <net_buf_ref>
   12954:	4601      	mov	r1, r0
   12956:	4827      	ldr	r0, [pc, #156]	; (129f4 <bt_hci_cmd_send_sync+0xdc>)
   12958:	f008 fb18 	bl	1af8c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1295c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   12960:	2300      	movs	r3, #0
   12962:	4638      	mov	r0, r7
   12964:	f00f f9d8 	bl	21d18 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   12968:	4606      	mov	r6, r0
   1296a:	b180      	cbz	r0, 1298e <bt_hci_cmd_send_sync+0x76>
   1296c:	f240 1349 	movw	r3, #329	; 0x149
   12970:	4a21      	ldr	r2, [pc, #132]	; (129f8 <bt_hci_cmd_send_sync+0xe0>)
   12972:	4922      	ldr	r1, [pc, #136]	; (129fc <bt_hci_cmd_send_sync+0xe4>)
   12974:	4822      	ldr	r0, [pc, #136]	; (12a00 <bt_hci_cmd_send_sync+0xe8>)
   12976:	f014 f9fc 	bl	26d72 <assert_print>
   1297a:	4631      	mov	r1, r6
   1297c:	4821      	ldr	r0, [pc, #132]	; (12a04 <bt_hci_cmd_send_sync+0xec>)
   1297e:	f014 f9f8 	bl	26d72 <assert_print>
   12982:	4040      	eors	r0, r0
   12984:	f380 8811 	msr	BASEPRI, r0
   12988:	f04f 0003 	mov.w	r0, #3
   1298c:	df02      	svc	2
	status = cmd(buf)->status;
   1298e:	4620      	mov	r0, r4
   12990:	f008 f8f0 	bl	1ab74 <net_buf_id>
   12994:	230c      	movs	r3, #12
   12996:	4358      	muls	r0, r3
   12998:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   1299c:	b1e6      	cbz	r6, 129d8 <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1299e:	466d      	mov	r5, sp
   129a0:	b088      	sub	sp, #32
   129a2:	466a      	mov	r2, sp
   129a4:	4b18      	ldr	r3, [pc, #96]	; (12a08 <bt_hci_cmd_send_sync+0xf0>)
   129a6:	61d6      	str	r6, [r2, #28]
   129a8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   129ac:	2304      	movs	r3, #4
   129ae:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   129b2:	4816      	ldr	r0, [pc, #88]	; (12a0c <bt_hci_cmd_send_sync+0xf4>)
   129b4:	f842 3f10 	str.w	r3, [r2, #16]!
   129b8:	f015 fe63 	bl	28682 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   129bc:	4620      	mov	r0, r4
   129be:	46ad      	mov	sp, r5
   129c0:	f008 fb0a 	bl	1afd8 <net_buf_unref>
			return -ECONNREFUSED;
   129c4:	2e09      	cmp	r6, #9
   129c6:	bf14      	ite	ne
   129c8:	f06f 0004 	mvnne.w	r0, #4
   129cc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   129d0:	371c      	adds	r7, #28
   129d2:	46bd      	mov	sp, r7
   129d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   129d8:	b115      	cbz	r5, 129e0 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   129da:	602c      	str	r4, [r5, #0]
	return 0;
   129dc:	2000      	movs	r0, #0
   129de:	e7f7      	b.n	129d0 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   129e0:	4620      	mov	r0, r4
   129e2:	f008 faf9 	bl	1afd8 <net_buf_unref>
   129e6:	e7f9      	b.n	129dc <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   129e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   129ec:	e7f0      	b.n	129d0 <bt_hci_cmd_send_sync+0xb8>
   129ee:	bf00      	nop
   129f0:	200214f4 	.word	0x200214f4
   129f4:	20008144 	.word	0x20008144
   129f8:	000300d8 	.word	0x000300d8
   129fc:	0002ecc8 	.word	0x0002ecc8
   12a00:	0002dd81 	.word	0x0002dd81
   12a04:	00030248 	.word	0x00030248
   12a08:	00030268 	.word	0x00030268
   12a0c:	0002ccc8 	.word	0x0002ccc8

00012a10 <hci_le_read_max_data_len>:
{
   12a10:	b570      	push	{r4, r5, r6, lr}
   12a12:	b088      	sub	sp, #32
   12a14:	4606      	mov	r6, r0
   12a16:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   12a18:	f242 002f 	movw	r0, #8239	; 0x202f
   12a1c:	2100      	movs	r1, #0
   12a1e:	aa01      	add	r2, sp, #4
   12a20:	f7ff ff7a 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   12a24:	4604      	mov	r4, r0
   12a26:	b160      	cbz	r0, 12a42 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   12a28:	4b0b      	ldr	r3, [pc, #44]	; (12a58 <hci_le_read_max_data_len+0x48>)
   12a2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a2e:	9307      	str	r3, [sp, #28]
   12a30:	2302      	movs	r3, #2
   12a32:	480a      	ldr	r0, [pc, #40]	; (12a5c <hci_le_read_max_data_len+0x4c>)
   12a34:	aa06      	add	r2, sp, #24
   12a36:	9306      	str	r3, [sp, #24]
   12a38:	f015 fe23 	bl	28682 <z_log_msg_static_create.constprop.0>
}
   12a3c:	4620      	mov	r0, r4
   12a3e:	b008      	add	sp, #32
   12a40:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   12a42:	9801      	ldr	r0, [sp, #4]
   12a44:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   12a46:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12a4a:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12a4c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   12a50:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   12a52:	f008 fac1 	bl	1afd8 <net_buf_unref>
	return 0;
   12a56:	e7f1      	b.n	12a3c <hci_le_read_max_data_len+0x2c>
   12a58:	00030284 	.word	0x00030284
   12a5c:	0002ccc8 	.word	0x0002ccc8

00012a60 <bt_hci_le_rand>:
{
   12a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12a62:	4b14      	ldr	r3, [pc, #80]	; (12ab4 <bt_hci_le_rand+0x54>)
{
   12a64:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12a66:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   12a6a:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12a6c:	2b00      	cmp	r3, #0
   12a6e:	da1d      	bge.n	12aac <bt_hci_le_rand+0x4c>
	while (len > 0) {
   12a70:	b914      	cbnz	r4, 12a78 <bt_hci_le_rand+0x18>
	return 0;
   12a72:	4620      	mov	r0, r4
}
   12a74:	b003      	add	sp, #12
   12a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   12a78:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   12a7a:	f04f 0100 	mov.w	r1, #0
   12a7e:	f242 0018 	movw	r0, #8216	; 0x2018
   12a82:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   12a84:	4626      	mov	r6, r4
   12a86:	bf28      	it	cs
   12a88:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   12a8a:	f7ff ff45 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
   12a8e:	2800      	cmp	r0, #0
   12a90:	d1f0      	bne.n	12a74 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   12a92:	9f01      	ldr	r7, [sp, #4]
   12a94:	4632      	mov	r2, r6
   12a96:	68f9      	ldr	r1, [r7, #12]
   12a98:	4628      	mov	r0, r5
   12a9a:	3101      	adds	r1, #1
   12a9c:	f019 f98e 	bl	2bdbc <memcpy>
		net_buf_unref(rsp);
   12aa0:	4638      	mov	r0, r7
   12aa2:	f008 fa99 	bl	1afd8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   12aa6:	4435      	add	r5, r6
		len -= count;
   12aa8:	1ba4      	subs	r4, r4, r6
   12aaa:	e7e1      	b.n	12a70 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   12aac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12ab0:	e7e0      	b.n	12a74 <bt_hci_le_rand+0x14>
   12ab2:	bf00      	nop
   12ab4:	20008000 	.word	0x20008000

00012ab8 <bt_hci_le_enh_conn_complete>:
{
   12ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12abc:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12abe:	f8b0 9001 	ldrh.w	r9, [r0, #1]
   12ac2:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   12ac4:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   12ac8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   12acc:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   12ace:	4aa9      	ldr	r2, [pc, #676]	; (12d74 <bt_hci_le_enh_conn_complete+0x2bc>)
   12ad0:	b29b      	uxth	r3, r3
   12ad2:	8811      	ldrh	r1, [r2, #0]
{
   12ad4:	af02      	add	r7, sp, #8
		if (disconnected_handles[i] == handle) {
   12ad6:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   12ad8:	bf04      	itt	eq
   12ada:	8016      	strheq	r6, [r2, #0]
			return true;
   12adc:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   12ade:	f000 ff99 	bl	13a14 <bt_id_pending_keys_update>
	if (evt->status) {
   12ae2:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12ae4:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   12ae8:	b3a4      	cbz	r4, 12b54 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12aea:	2c3c      	cmp	r4, #60	; 0x3c
   12aec:	d122      	bne.n	12b34 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12aee:	f001 fafb 	bl	140e8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12af2:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12af6:	3010      	adds	r0, #16
   12af8:	f015 fdc6 	bl	28688 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12afc:	2000      	movs	r0, #0
   12afe:	f7ff faa1 	bl	12044 <find_pending_connect.part.0>
		if (!conn) {
   12b02:	4605      	mov	r5, r0
   12b04:	b970      	cbnz	r0, 12b24 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   12b06:	4b9c      	ldr	r3, [pc, #624]	; (12d78 <bt_hci_le_enh_conn_complete+0x2c0>)
   12b08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12b0c:	627b      	str	r3, [r7, #36]	; 0x24
   12b0e:	2302      	movs	r3, #2
   12b10:	489a      	ldr	r0, [pc, #616]	; (12d7c <bt_hci_le_enh_conn_complete+0x2c4>)
   12b12:	623b      	str	r3, [r7, #32]
   12b14:	f107 0220 	add.w	r2, r7, #32
   12b18:	f015 fdb3 	bl	28682 <z_log_msg_static_create.constprop.0>
}
   12b1c:	372c      	adds	r7, #44	; 0x2c
   12b1e:	46bd      	mov	sp, r7
   12b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12b24:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12b26:	2100      	movs	r1, #0
   12b28:	f002 fa26 	bl	14f78 <bt_conn_set_state>
		bt_conn_unref(conn);
   12b2c:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   12b2e:	f002 f9eb 	bl	14f08 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12b32:	e7f3      	b.n	12b1c <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   12b34:	466d      	mov	r5, sp
   12b36:	b088      	sub	sp, #32
   12b38:	aa02      	add	r2, sp, #8
   12b3a:	4b91      	ldr	r3, [pc, #580]	; (12d80 <bt_hci_le_enh_conn_complete+0x2c8>)
   12b3c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12b40:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12b44:	2303      	movs	r3, #3
   12b46:	488d      	ldr	r0, [pc, #564]	; (12d7c <bt_hci_le_enh_conn_complete+0x2c4>)
   12b48:	f842 3f10 	str.w	r3, [r2, #16]!
   12b4c:	f015 fd99 	bl	28682 <z_log_msg_static_create.constprop.0>
   12b50:	46ad      	mov	sp, r5
		return;
   12b52:	e7e3      	b.n	12b1c <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12b54:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12b56:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12b5a:	3b02      	subs	r3, #2
   12b5c:	2b01      	cmp	r3, #1
   12b5e:	d82c      	bhi.n	12bba <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12b60:	4651      	mov	r1, sl
   12b62:	f107 0010 	add.w	r0, r7, #16
   12b66:	f015 fd85 	bl	28674 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12b6a:	7c3b      	ldrb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12b6c:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12b70:	3b02      	subs	r3, #2
   12b72:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12b74:	f107 0009 	add.w	r0, r7, #9
   12b78:	f015 fd77 	bl	2866a <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12b7c:	2301      	movs	r3, #1
   12b7e:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12b80:	78eb      	ldrb	r3, [r5, #3]
   12b82:	2b01      	cmp	r3, #1
   12b84:	d02e      	beq.n	12be4 <bt_hci_le_enh_conn_complete+0x12c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   12b86:	4650      	mov	r0, sl
   12b88:	f7fe fff2 	bl	11b70 <bt_addr_le_str>
   12b8c:	466c      	mov	r4, sp
   12b8e:	b088      	sub	sp, #32
   12b90:	aa02      	add	r2, sp, #8
   12b92:	4b7c      	ldr	r3, [pc, #496]	; (12d84 <bt_hci_le_enh_conn_complete+0x2cc>)
   12b94:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12b98:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
   12ba0:	8393      	strh	r3, [r2, #28]
   12ba2:	4b79      	ldr	r3, [pc, #484]	; (12d88 <bt_hci_le_enh_conn_complete+0x2d0>)
   12ba4:	4875      	ldr	r0, [pc, #468]	; (12d7c <bt_hci_le_enh_conn_complete+0x2c4>)
   12ba6:	f842 3f10 	str.w	r3, [r2, #16]!
   12baa:	f015 fd6a 	bl	28682 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12bae:	211f      	movs	r1, #31
   12bb0:	46a5      	mov	sp, r4
   12bb2:	4640      	mov	r0, r8
   12bb4:	f015 fd80 	bl	286b8 <bt_hci_disconnect>
		return;
   12bb8:	e7b0      	b.n	12b1c <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12bba:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   12bbc:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12bbe:	2b01      	cmp	r3, #1
   12bc0:	bf04      	itt	eq
   12bc2:	4b72      	ldreq	r3, [pc, #456]	; (12d8c <bt_hci_le_enh_conn_complete+0x2d4>)
   12bc4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12bc8:	4620      	mov	r0, r4
   12bca:	f015 feba 	bl	28942 <bt_lookup_id_addr>
   12bce:	4601      	mov	r1, r0
   12bd0:	f107 0010 	add.w	r0, r7, #16
   12bd4:	f015 fd4e 	bl	28674 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12bd8:	4651      	mov	r1, sl
   12bda:	f107 0008 	add.w	r0, r7, #8
   12bde:	f015 fd49 	bl	28674 <bt_addr_le_copy>
   12be2:	e7cd      	b.n	12b80 <bt_hci_le_enh_conn_complete+0xc8>
   12be4:	f107 0010 	add.w	r0, r7, #16
   12be8:	f7ff fa2c 	bl	12044 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12bec:	78eb      	ldrb	r3, [r5, #3]
   12bee:	4604      	mov	r4, r0
   12bf0:	2b01      	cmp	r3, #1
   12bf2:	d10a      	bne.n	12c0a <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12bf4:	f001 fa78 	bl	140e8 <bt_le_adv_lookup_legacy>
   12bf8:	4683      	mov	fp, r0
   12bfa:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12bfe:	3010      	adds	r0, #16
   12c00:	f015 fd42 	bl	28688 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12c04:	4658      	mov	r0, fp
   12c06:	f015 ffbd 	bl	28b84 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12c0a:	2c00      	cmp	r4, #0
   12c0c:	d0bb      	beq.n	12b86 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   12c0e:	4620      	mov	r0, r4
	conn->err = 0U;
   12c10:	2200      	movs	r2, #0
	conn->handle = handle;
   12c12:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12c16:	f107 0110 	add.w	r1, r7, #16
   12c1a:	f015 fd2b 	bl	28674 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12c1e:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   12c22:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12c26:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12c2a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12c2e:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   12c32:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12c36:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12c38:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12c3a:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   12c3c:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12c3e:	d116      	bne.n	12c6e <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   12c40:	f107 0108 	add.w	r1, r7, #8
   12c44:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12c48:	f015 fd14 	bl	28674 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12c4c:	f001 fa4c 	bl	140e8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   12c50:	7a21      	ldrb	r1, [r4, #8]
   12c52:	4a4e      	ldr	r2, [pc, #312]	; (12d8c <bt_hci_le_enh_conn_complete+0x2d4>)
   12c54:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12c58:	4411      	add	r1, r2
   12c5a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12c5e:	f015 fd09 	bl	28674 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12c62:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   12c66:	065d      	lsls	r5, r3, #25
   12c68:	d501      	bpl.n	12c6e <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   12c6a:	f001 fc03 	bl	14474 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12c6e:	2107      	movs	r1, #7
   12c70:	4620      	mov	r0, r4
   12c72:	f002 f981 	bl	14f78 <bt_conn_set_state>
	if (is_disconnected) {
   12c76:	b11e      	cbz	r6, 12c80 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12c78:	2101      	movs	r1, #1
   12c7a:	4620      	mov	r0, r4
   12c7c:	f002 f97c 	bl	14f78 <bt_conn_set_state>
	bt_conn_connected(conn);
   12c80:	4620      	mov	r0, r4
   12c82:	f016 f805 	bl	28c90 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   12c86:	7b63      	ldrb	r3, [r4, #13]
   12c88:	2b07      	cmp	r3, #7
   12c8a:	d16e      	bne.n	12d6a <bt_hci_le_enh_conn_complete+0x2b2>
   12c8c:	1d23      	adds	r3, r4, #4
   12c8e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12c92:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12c96:	4d3d      	ldr	r5, [pc, #244]	; (12d8c <bt_hci_le_enh_conn_complete+0x2d4>)
   12c98:	d129      	bne.n	12cee <bt_hci_le_enh_conn_complete+0x236>
   12c9a:	78e3      	ldrb	r3, [r4, #3]
   12c9c:	b11b      	cbz	r3, 12ca6 <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12c9e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12ca2:	0718      	lsls	r0, r3, #28
   12ca4:	d523      	bpl.n	12cee <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12ca6:	2102      	movs	r1, #2
   12ca8:	f242 0016 	movw	r0, #8214	; 0x2016
   12cac:	f7ff fde6 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   12cb0:	4606      	mov	r6, r0
   12cb2:	2800      	cmp	r0, #0
   12cb4:	d05b      	beq.n	12d6e <bt_hci_le_enh_conn_complete+0x2b6>
   12cb6:	2102      	movs	r1, #2
   12cb8:	300c      	adds	r0, #12
   12cba:	f008 faaf 	bl	1b21c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12cbe:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12cc0:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   12cc2:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12cc4:	4631      	mov	r1, r6
   12cc6:	f242 0016 	movw	r0, #8214	; 0x2016
   12cca:	f7ff fe25 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
   12cce:	b170      	cbz	r0, 12cee <bt_hci_le_enh_conn_complete+0x236>
			LOG_ERR("Failed read remote features (%d)", err);
   12cd0:	466e      	mov	r6, sp
   12cd2:	b088      	sub	sp, #32
   12cd4:	aa02      	add	r2, sp, #8
   12cd6:	4b2e      	ldr	r3, [pc, #184]	; (12d90 <bt_hci_le_enh_conn_complete+0x2d8>)
   12cd8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12cdc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12ce0:	2303      	movs	r3, #3
   12ce2:	4826      	ldr	r0, [pc, #152]	; (12d7c <bt_hci_le_enh_conn_complete+0x2c4>)
   12ce4:	f842 3f10 	str.w	r3, [r2, #16]!
   12ce8:	f015 fccb 	bl	28682 <z_log_msg_static_create.constprop.0>
   12cec:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12cee:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12cf2:	07d9      	lsls	r1, r3, #31
   12cf4:	d516      	bpl.n	12d24 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12cf6:	2100      	movs	r1, #0
   12cf8:	2302      	movs	r3, #2
   12cfa:	4620      	mov	r0, r4
   12cfc:	461a      	mov	r2, r3
   12cfe:	9100      	str	r1, [sp, #0]
   12d00:	f015 fd13 	bl	2872a <bt_le_set_phy>
		if (err) {
   12d04:	b170      	cbz	r0, 12d24 <bt_hci_le_enh_conn_complete+0x26c>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   12d06:	466e      	mov	r6, sp
   12d08:	b088      	sub	sp, #32
   12d0a:	aa02      	add	r2, sp, #8
   12d0c:	4b21      	ldr	r3, [pc, #132]	; (12d94 <bt_hci_le_enh_conn_complete+0x2dc>)
   12d0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d12:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12d16:	2303      	movs	r3, #3
   12d18:	4818      	ldr	r0, [pc, #96]	; (12d7c <bt_hci_le_enh_conn_complete+0x2c4>)
   12d1a:	f842 3f10 	str.w	r3, [r2, #16]!
   12d1e:	f015 fcb0 	bl	28682 <z_log_msg_static_create.constprop.0>
   12d22:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12d24:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12d28:	069a      	lsls	r2, r3, #26
   12d2a:	d51e      	bpl.n	12d6a <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12d2c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   12d30:	689b      	ldr	r3, [r3, #8]
   12d32:	079b      	lsls	r3, r3, #30
   12d34:	d519      	bpl.n	12d6a <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12d36:	1db9      	adds	r1, r7, #6
   12d38:	1d38      	adds	r0, r7, #4
   12d3a:	f7ff fe69 	bl	12a10 <hci_le_read_max_data_len>
			if (!err) {
   12d3e:	b9a0      	cbnz	r0, 12d6a <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
   12d40:	4620      	mov	r0, r4
   12d42:	88fa      	ldrh	r2, [r7, #6]
   12d44:	88b9      	ldrh	r1, [r7, #4]
   12d46:	f015 fcd2 	bl	286ee <bt_le_set_data_len>
				if (err) {
   12d4a:	b170      	cbz	r0, 12d6a <bt_hci_le_enh_conn_complete+0x2b2>
					LOG_ERR("Failed to set data len (%d)", err);
   12d4c:	466d      	mov	r5, sp
   12d4e:	b088      	sub	sp, #32
   12d50:	aa02      	add	r2, sp, #8
   12d52:	4b11      	ldr	r3, [pc, #68]	; (12d98 <bt_hci_le_enh_conn_complete+0x2e0>)
   12d54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d58:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12d5c:	2303      	movs	r3, #3
   12d5e:	4807      	ldr	r0, [pc, #28]	; (12d7c <bt_hci_le_enh_conn_complete+0x2c4>)
   12d60:	f842 3f10 	str.w	r3, [r2, #16]!
   12d64:	f015 fc8d 	bl	28682 <z_log_msg_static_create.constprop.0>
   12d68:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   12d6a:	4620      	mov	r0, r4
   12d6c:	e6df      	b.n	12b2e <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   12d6e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12d72:	e7ad      	b.n	12cd0 <bt_hci_le_enh_conn_complete+0x218>
   12d74:	20021aaa 	.word	0x20021aaa
   12d78:	000302a4 	.word	0x000302a4
   12d7c:	0002ccc8 	.word	0x0002ccc8
   12d80:	000302c5 	.word	0x000302c5
   12d84:	000302de 	.word	0x000302de
   12d88:	01000003 	.word	0x01000003
   12d8c:	20008000 	.word	0x20008000
   12d90:	000302fa 	.word	0x000302fa
   12d94:	0003031b 	.word	0x0003031b
   12d98:	00030332 	.word	0x00030332

00012d9c <le_legacy_conn_complete>:
{
   12d9c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12d9e:	68c1      	ldr	r1, [r0, #12]
{
   12da0:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   12da2:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12da4:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   12da6:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   12daa:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12dae:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   12db0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   12db4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12db8:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   12dbc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   12dc0:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   12dc4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12dc8:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12dcc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12dd0:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   12dd4:	7b4b      	ldrb	r3, [r1, #13]
   12dd6:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12dda:	f015 fc4b 	bl	28674 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12dde:	4907      	ldr	r1, [pc, #28]	; (12dfc <le_legacy_conn_complete+0x60>)
   12de0:	f10d 000b 	add.w	r0, sp, #11
   12de4:	f015 fc41 	bl	2866a <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12de8:	f10d 0011 	add.w	r0, sp, #17
   12dec:	f015 fc3d 	bl	2866a <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12df0:	4668      	mov	r0, sp
   12df2:	f7ff fe61 	bl	12ab8 <bt_hci_le_enh_conn_complete>
}
   12df6:	b009      	add	sp, #36	; 0x24
   12df8:	f85d fb04 	ldr.w	pc, [sp], #4
   12dfc:	0002fdcb 	.word	0x0002fdcb

00012e00 <bt_security_err_get>:
	switch (hci_err) {
   12e00:	2829      	cmp	r0, #41	; 0x29
   12e02:	bf9a      	itte	ls
   12e04:	4b01      	ldrls	r3, [pc, #4]	; (12e0c <bt_security_err_get+0xc>)
   12e06:	5c18      	ldrbls	r0, [r3, r0]
{
   12e08:	2009      	movhi	r0, #9
}
   12e0a:	4770      	bx	lr
   12e0c:	000305e7 	.word	0x000305e7

00012e10 <hci_encrypt_key_refresh_complete>:
{
   12e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e12:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   12e14:	68c3      	ldr	r3, [r0, #12]
{
   12e16:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   12e18:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12e1c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12e1e:	4630      	mov	r0, r6
   12e20:	f002 f8a2 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   12e24:	4604      	mov	r4, r0
   12e26:	b988      	cbnz	r0, 12e4c <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12e28:	466c      	mov	r4, sp
   12e2a:	b088      	sub	sp, #32
   12e2c:	466a      	mov	r2, sp
   12e2e:	4b1f      	ldr	r3, [pc, #124]	; (12eac <hci_encrypt_key_refresh_complete+0x9c>)
   12e30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e34:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12e38:	2303      	movs	r3, #3
   12e3a:	481d      	ldr	r0, [pc, #116]	; (12eb0 <hci_encrypt_key_refresh_complete+0xa0>)
   12e3c:	f842 3f10 	str.w	r3, [r2, #16]!
   12e40:	f015 fc1f 	bl	28682 <z_log_msg_static_create.constprop.0>
   12e44:	46a5      	mov	sp, r4
}
   12e46:	371c      	adds	r7, #28
   12e48:	46bd      	mov	sp, r7
   12e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12e4c:	b15d      	cbz	r5, 12e66 <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e4e:	4628      	mov	r0, r5
   12e50:	f7ff ffd6 	bl	12e00 <bt_security_err_get>
   12e54:	4629      	mov	r1, r5
   12e56:	4602      	mov	r2, r0
   12e58:	4620      	mov	r0, r4
   12e5a:	f002 fad5 	bl	15408 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12e5e:	4620      	mov	r0, r4
   12e60:	f002 f852 	bl	14f08 <bt_conn_unref>
   12e64:	e7ef      	b.n	12e46 <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   12e66:	7883      	ldrb	r3, [r0, #2]
   12e68:	2b01      	cmp	r3, #1
   12e6a:	d1f0      	bne.n	12e4e <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   12e6c:	f007 fa32 	bl	1a2d4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12e70:	4620      	mov	r0, r4
   12e72:	f015 fbd6 	bl	28622 <update_sec_level>
   12e76:	2800      	cmp	r0, #0
   12e78:	d1e9      	bne.n	12e4e <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e7a:	2005      	movs	r0, #5
   12e7c:	f7ff ffc0 	bl	12e00 <bt_security_err_get>
   12e80:	2105      	movs	r1, #5
   12e82:	4602      	mov	r2, r0
   12e84:	4620      	mov	r0, r4
   12e86:	f002 fabf 	bl	15408 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12e8a:	4b0a      	ldr	r3, [pc, #40]	; (12eb4 <hci_encrypt_key_refresh_complete+0xa4>)
   12e8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e90:	617b      	str	r3, [r7, #20]
   12e92:	2302      	movs	r3, #2
   12e94:	4806      	ldr	r0, [pc, #24]	; (12eb0 <hci_encrypt_key_refresh_complete+0xa0>)
   12e96:	613b      	str	r3, [r7, #16]
   12e98:	f107 0210 	add.w	r2, r7, #16
   12e9c:	f015 fbf1 	bl	28682 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12ea0:	2105      	movs	r1, #5
   12ea2:	4620      	mov	r0, r4
   12ea4:	f015 fefd 	bl	28ca2 <bt_conn_disconnect>
   12ea8:	e7d9      	b.n	12e5e <hci_encrypt_key_refresh_complete+0x4e>
   12eaa:	bf00      	nop
   12eac:	00030090 	.word	0x00030090
   12eb0:	0002ccc8 	.word	0x0002ccc8
   12eb4:	0003034e 	.word	0x0003034e

00012eb8 <hci_encrypt_change>:
{
   12eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ebc:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12ebe:	68c6      	ldr	r6, [r0, #12]
{
   12ec0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12ec2:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   12ec6:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12ec8:	4640      	mov	r0, r8
   12eca:	f002 f84d 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   12ece:	4604      	mov	r4, r0
   12ed0:	b990      	cbnz	r0, 12ef8 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12ed2:	466c      	mov	r4, sp
   12ed4:	b088      	sub	sp, #32
   12ed6:	466a      	mov	r2, sp
   12ed8:	4b23      	ldr	r3, [pc, #140]	; (12f68 <hci_encrypt_change+0xb0>)
   12eda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12ede:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12ee2:	2303      	movs	r3, #3
   12ee4:	4821      	ldr	r0, [pc, #132]	; (12f6c <hci_encrypt_change+0xb4>)
   12ee6:	f842 3f10 	str.w	r3, [r2, #16]!
   12eea:	f015 fbca 	bl	28682 <z_log_msg_static_create.constprop.0>
   12eee:	46a5      	mov	sp, r4
}
   12ef0:	3718      	adds	r7, #24
   12ef2:	46bd      	mov	sp, r7
   12ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   12ef8:	b15d      	cbz	r5, 12f12 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   12efa:	4628      	mov	r0, r5
   12efc:	f7ff ff80 	bl	12e00 <bt_security_err_get>
   12f00:	4629      	mov	r1, r5
   12f02:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12f04:	4620      	mov	r0, r4
   12f06:	f002 fa7f 	bl	15408 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12f0a:	4620      	mov	r0, r4
   12f0c:	f001 fffc 	bl	14f08 <bt_conn_unref>
   12f10:	e7ee      	b.n	12ef0 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   12f12:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12f14:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   12f16:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   12f18:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12f1a:	d005      	beq.n	12f28 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12f1c:	2000      	movs	r0, #0
   12f1e:	f7ff ff6f 	bl	12e00 <bt_security_err_get>
   12f22:	2100      	movs	r1, #0
   12f24:	4602      	mov	r2, r0
   12f26:	e7ed      	b.n	12f04 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   12f28:	b10b      	cbz	r3, 12f2e <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   12f2a:	f007 f9d3 	bl	1a2d4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12f2e:	4620      	mov	r0, r4
   12f30:	f015 fb77 	bl	28622 <update_sec_level>
   12f34:	2800      	cmp	r0, #0
   12f36:	d1f1      	bne.n	12f1c <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12f38:	2005      	movs	r0, #5
   12f3a:	f7ff ff61 	bl	12e00 <bt_security_err_get>
   12f3e:	2105      	movs	r1, #5
   12f40:	4602      	mov	r2, r0
   12f42:	4620      	mov	r0, r4
   12f44:	f002 fa60 	bl	15408 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12f48:	4b09      	ldr	r3, [pc, #36]	; (12f70 <hci_encrypt_change+0xb8>)
   12f4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12f4e:	617b      	str	r3, [r7, #20]
   12f50:	2302      	movs	r3, #2
   12f52:	4806      	ldr	r0, [pc, #24]	; (12f6c <hci_encrypt_change+0xb4>)
   12f54:	613b      	str	r3, [r7, #16]
   12f56:	f107 0210 	add.w	r2, r7, #16
   12f5a:	f015 fb92 	bl	28682 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12f5e:	2105      	movs	r1, #5
   12f60:	4620      	mov	r0, r4
   12f62:	f015 fe9e 	bl	28ca2 <bt_conn_disconnect>
   12f66:	e7d0      	b.n	12f0a <hci_encrypt_change+0x52>
   12f68:	00030090 	.word	0x00030090
   12f6c:	0002ccc8 	.word	0x0002ccc8
   12f70:	0003034e 	.word	0x0003034e

00012f74 <bt_send>:
	return bt_dev.drv->send(buf);
   12f74:	4b02      	ldr	r3, [pc, #8]	; (12f80 <bt_send+0xc>)
   12f76:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   12f7a:	695b      	ldr	r3, [r3, #20]
   12f7c:	4718      	bx	r3
   12f7e:	bf00      	nop
   12f80:	20008000 	.word	0x20008000

00012f84 <bt_hci_cmd_send>:
{
   12f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f86:	4605      	mov	r5, r0
	if (!buf) {
   12f88:	460c      	mov	r4, r1
{
   12f8a:	af00      	add	r7, sp, #0
	if (!buf) {
   12f8c:	b919      	cbnz	r1, 12f96 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   12f8e:	f7ff fc75 	bl	1287c <bt_hci_cmd_create>
		if (!buf) {
   12f92:	4604      	mov	r4, r0
   12f94:	b318      	cbz	r0, 12fde <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12f96:	f640 4335 	movw	r3, #3125	; 0xc35
   12f9a:	429d      	cmp	r5, r3
   12f9c:	d119      	bne.n	12fd2 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   12f9e:	4620      	mov	r0, r4
   12fa0:	f7ff ffe8 	bl	12f74 <bt_send>
		if (err) {
   12fa4:	4605      	mov	r5, r0
   12fa6:	b188      	cbz	r0, 12fcc <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   12fa8:	466e      	mov	r6, sp
   12faa:	b088      	sub	sp, #32
   12fac:	466a      	mov	r2, sp
   12fae:	4b0d      	ldr	r3, [pc, #52]	; (12fe4 <bt_hci_cmd_send+0x60>)
   12fb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12fb4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12fb8:	2303      	movs	r3, #3
   12fba:	480b      	ldr	r0, [pc, #44]	; (12fe8 <bt_hci_cmd_send+0x64>)
   12fbc:	f842 3f10 	str.w	r3, [r2, #16]!
   12fc0:	f015 fb5f 	bl	28682 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   12fc4:	4620      	mov	r0, r4
   12fc6:	46b5      	mov	sp, r6
   12fc8:	f008 f806 	bl	1afd8 <net_buf_unref>
}
   12fcc:	4628      	mov	r0, r5
   12fce:	46bd      	mov	sp, r7
   12fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12fd2:	4621      	mov	r1, r4
   12fd4:	4805      	ldr	r0, [pc, #20]	; (12fec <bt_hci_cmd_send+0x68>)
   12fd6:	f007 ffd9 	bl	1af8c <net_buf_put>
	return 0;
   12fda:	2500      	movs	r5, #0
   12fdc:	e7f6      	b.n	12fcc <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   12fde:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12fe2:	e7f3      	b.n	12fcc <bt_hci_cmd_send+0x48>
   12fe4:	00030374 	.word	0x00030374
   12fe8:	0002ccc8 	.word	0x0002ccc8
   12fec:	20008144 	.word	0x20008144

00012ff0 <bt_hci_host_num_completed_packets>:
{
   12ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ff4:	b086      	sub	sp, #24
   12ff6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   12ff8:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   12ffa:	7e46      	ldrb	r6, [r0, #25]
{
   12ffc:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12ffe:	7a80      	ldrb	r0, [r0, #10]
   13000:	f007 fdb0 	bl	1ab64 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   13004:	4621      	mov	r1, r4
   13006:	f018 fd0d 	bl	2ba24 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1300a:	4b2d      	ldr	r3, [pc, #180]	; (130c0 <bt_hci_host_num_completed_packets+0xd0>)
   1300c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   13010:	069b      	lsls	r3, r3, #26
   13012:	d513      	bpl.n	1303c <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
   13014:	4630      	mov	r0, r6
   13016:	f002 fc63 	bl	158e0 <bt_conn_lookup_index>
	if (!conn) {
   1301a:	4604      	mov	r4, r0
   1301c:	b990      	cbnz	r0, 13044 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1301e:	466c      	mov	r4, sp
   13020:	b088      	sub	sp, #32
   13022:	466a      	mov	r2, sp
   13024:	4b27      	ldr	r3, [pc, #156]	; (130c4 <bt_hci_host_num_completed_packets+0xd4>)
   13026:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1302a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1302e:	2303      	movs	r3, #3
   13030:	4825      	ldr	r0, [pc, #148]	; (130c8 <bt_hci_host_num_completed_packets+0xd8>)
   13032:	f842 3f10 	str.w	r3, [r2, #16]!
   13036:	f015 fb24 	bl	28682 <z_log_msg_static_create.constprop.0>
   1303a:	46a5      	mov	sp, r4
}
   1303c:	3718      	adds	r7, #24
   1303e:	46bd      	mov	sp, r7
   13040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   13044:	7b43      	ldrb	r3, [r0, #13]
   13046:	3b07      	subs	r3, #7
   13048:	2b01      	cmp	r3, #1
   1304a:	d90e      	bls.n	1306a <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
   1304c:	4b1f      	ldr	r3, [pc, #124]	; (130cc <bt_hci_host_num_completed_packets+0xdc>)
   1304e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13052:	617b      	str	r3, [r7, #20]
   13054:	2302      	movs	r3, #2
   13056:	481c      	ldr	r0, [pc, #112]	; (130c8 <bt_hci_host_num_completed_packets+0xd8>)
   13058:	613b      	str	r3, [r7, #16]
   1305a:	f107 0210 	add.w	r2, r7, #16
   1305e:	f015 fb10 	bl	28682 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   13062:	4620      	mov	r0, r4
   13064:	f001 ff50 	bl	14f08 <bt_conn_unref>
		return;
   13068:	e7e8      	b.n	1303c <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
   1306a:	f001 ff4d 	bl	14f08 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1306e:	2105      	movs	r1, #5
   13070:	f640 4035 	movw	r0, #3125	; 0xc35
   13074:	f7ff fc02 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   13078:	4604      	mov	r4, r0
   1307a:	b958      	cbnz	r0, 13094 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
   1307c:	4b14      	ldr	r3, [pc, #80]	; (130d0 <bt_hci_host_num_completed_packets+0xe0>)
   1307e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13082:	617b      	str	r3, [r7, #20]
   13084:	2302      	movs	r3, #2
   13086:	4810      	ldr	r0, [pc, #64]	; (130c8 <bt_hci_host_num_completed_packets+0xd8>)
   13088:	613b      	str	r3, [r7, #16]
   1308a:	f107 0210 	add.w	r2, r7, #16
   1308e:	f015 faf8 	bl	28682 <z_log_msg_static_create.constprop.0>
		return;
   13092:	e7d3      	b.n	1303c <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
   13094:	f100 080c 	add.w	r8, r0, #12
   13098:	2101      	movs	r1, #1
   1309a:	4640      	mov	r0, r8
   1309c:	f008 f8be 	bl	1b21c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   130a0:	2601      	movs	r6, #1
   130a2:	2104      	movs	r1, #4
   130a4:	7006      	strb	r6, [r0, #0]
   130a6:	4640      	mov	r0, r8
   130a8:	f008 f8b8 	bl	1b21c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   130ac:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   130ae:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   130b0:	7086      	strb	r6, [r0, #2]
   130b2:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   130b4:	4621      	mov	r1, r4
   130b6:	f640 4035 	movw	r0, #3125	; 0xc35
   130ba:	f7ff ff63 	bl	12f84 <bt_hci_cmd_send>
   130be:	e7bd      	b.n	1303c <bt_hci_host_num_completed_packets+0x4c>
   130c0:	20008000 	.word	0x20008000
   130c4:	00030396 	.word	0x00030396
   130c8:	0002ccc8 	.word	0x0002ccc8
   130cc:	000303bf 	.word	0x000303bf
   130d0:	000303eb 	.word	0x000303eb

000130d4 <le_ltk_request>:
{
   130d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130d8:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   130da:	68c4      	ldr	r4, [r0, #12]
{
   130dc:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
   130de:	8826      	ldrh	r6, [r4, #0]
   130e0:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
   130e4:	4640      	mov	r0, r8
   130e6:	f001 ff3f 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   130ea:	4605      	mov	r5, r0
   130ec:	b990      	cbnz	r0, 13114 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   130ee:	466c      	mov	r4, sp
   130f0:	b088      	sub	sp, #32
   130f2:	aa02      	add	r2, sp, #8
   130f4:	4b2c      	ldr	r3, [pc, #176]	; (131a8 <le_ltk_request+0xd4>)
   130f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   130fa:	e9c2 3805 	strd	r3, r8, [r2, #20]
   130fe:	2303      	movs	r3, #3
   13100:	482a      	ldr	r0, [pc, #168]	; (131ac <le_ltk_request+0xd8>)
   13102:	f842 3f10 	str.w	r3, [r2, #16]!
   13106:	f015 fabc 	bl	28682 <z_log_msg_static_create.constprop.0>
   1310a:	46a5      	mov	sp, r4
}
   1310c:	3728      	adds	r7, #40	; 0x28
   1310e:	46bd      	mov	sp, r7
   13110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   13114:	f8d4 2002 	ldr.w	r2, [r4, #2]
   13118:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1311c:	9701      	str	r7, [sp, #4]
   1311e:	8961      	ldrh	r1, [r4, #10]
   13120:	9100      	str	r1, [sp, #0]
   13122:	f016 ff36 	bl	29f92 <bt_smp_request_ltk>
   13126:	b370      	cbz	r0, 13186 <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   13128:	2112      	movs	r1, #18
   1312a:	f242 001a 	movw	r0, #8218	; 0x201a
   1312e:	f7ff fba5 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   13132:	4604      	mov	r4, r0
   13134:	b970      	cbnz	r0, 13154 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   13136:	4b1e      	ldr	r3, [pc, #120]	; (131b0 <le_ltk_request+0xdc>)
   13138:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1313c:	627b      	str	r3, [r7, #36]	; 0x24
   1313e:	2302      	movs	r3, #2
   13140:	481a      	ldr	r0, [pc, #104]	; (131ac <le_ltk_request+0xd8>)
   13142:	623b      	str	r3, [r7, #32]
   13144:	f107 0220 	add.w	r2, r7, #32
   13148:	f015 fa9b 	bl	28682 <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   1314c:	4628      	mov	r0, r5
   1314e:	f001 fedb 	bl	14f08 <bt_conn_unref>
   13152:	e7db      	b.n	1310c <le_ltk_request+0x38>
   13154:	2112      	movs	r1, #18
   13156:	300c      	adds	r0, #12
   13158:	f008 f860 	bl	1b21c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1315c:	4603      	mov	r3, r0
   1315e:	463a      	mov	r2, r7
   13160:	f823 6b02 	strh.w	r6, [r3], #2
   13164:	f107 0c10 	add.w	ip, r7, #16
   13168:	4616      	mov	r6, r2
   1316a:	ce03      	ldmia	r6!, {r0, r1}
   1316c:	4566      	cmp	r6, ip
   1316e:	6018      	str	r0, [r3, #0]
   13170:	6059      	str	r1, [r3, #4]
   13172:	4632      	mov	r2, r6
   13174:	f103 0308 	add.w	r3, r3, #8
   13178:	d1f6      	bne.n	13168 <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1317a:	4621      	mov	r1, r4
   1317c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   13180:	f7ff ff00 	bl	12f84 <bt_hci_cmd_send>
   13184:	e7e2      	b.n	1314c <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   13186:	2102      	movs	r1, #2
   13188:	f242 001b 	movw	r0, #8219	; 0x201b
   1318c:	f7ff fb76 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   13190:	4604      	mov	r4, r0
   13192:	2800      	cmp	r0, #0
   13194:	d0cf      	beq.n	13136 <le_ltk_request+0x62>
   13196:	2102      	movs	r1, #2
   13198:	300c      	adds	r0, #12
   1319a:	f008 f83f 	bl	1b21c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1319e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   131a0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   131a2:	f242 001b 	movw	r0, #8219	; 0x201b
   131a6:	e7eb      	b.n	13180 <le_ltk_request+0xac>
   131a8:	0003006c 	.word	0x0003006c
   131ac:	0002ccc8 	.word	0x0002ccc8
   131b0:	0003040e 	.word	0x0003040e

000131b4 <le_conn_param_req>:
{
   131b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   131b6:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   131b8:	68c3      	ldr	r3, [r0, #12]
{
   131ba:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   131bc:	78d9      	ldrb	r1, [r3, #3]
   131be:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   131c0:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   131c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   131c6:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   131c8:	7959      	ldrb	r1, [r3, #5]
   131ca:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   131cc:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   131ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   131d2:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   131d4:	799a      	ldrb	r2, [r3, #6]
   131d6:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   131d8:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   131da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   131de:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   131e0:	7a1a      	ldrb	r2, [r3, #8]
   131e2:	7a5b      	ldrb	r3, [r3, #9]
   131e4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   131e8:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   131ea:	f001 febd 	bl	14f68 <bt_conn_lookup_handle>
	if (!conn) {
   131ee:	4605      	mov	r5, r0
   131f0:	b9a8      	cbnz	r0, 1321e <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   131f2:	466d      	mov	r5, sp
   131f4:	b088      	sub	sp, #32
   131f6:	466a      	mov	r2, sp
   131f8:	4b1e      	ldr	r3, [pc, #120]	; (13274 <le_conn_param_req+0xc0>)
   131fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   131fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13202:	2303      	movs	r3, #3
   13204:	481c      	ldr	r0, [pc, #112]	; (13278 <le_conn_param_req+0xc4>)
   13206:	f842 3f10 	str.w	r3, [r2, #16]!
   1320a:	f015 fa3a 	bl	28682 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1320e:	2102      	movs	r1, #2
   13210:	46ad      	mov	sp, r5
   13212:	4620      	mov	r0, r4
   13214:	f015 fad5 	bl	287c2 <le_conn_param_neg_reply>
}
   13218:	370c      	adds	r7, #12
   1321a:	46bd      	mov	sp, r7
   1321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1321e:	4639      	mov	r1, r7
   13220:	f002 f85a 	bl	152d8 <le_param_req>
   13224:	b938      	cbnz	r0, 13236 <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   13226:	211e      	movs	r1, #30
   13228:	4620      	mov	r0, r4
   1322a:	f015 faca 	bl	287c2 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1322e:	4628      	mov	r0, r5
   13230:	f001 fe6a 	bl	14f08 <bt_conn_unref>
   13234:	e7f0      	b.n	13218 <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   13236:	210e      	movs	r1, #14
   13238:	f242 0020 	movw	r0, #8224	; 0x2020
   1323c:	f7ff fb1e 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   13240:	4604      	mov	r4, r0
   13242:	2800      	cmp	r0, #0
   13244:	d0f3      	beq.n	1322e <le_conn_param_req+0x7a>
   13246:	210e      	movs	r1, #14
   13248:	300c      	adds	r0, #12
   1324a:	f007 ffe7 	bl	1b21c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1324e:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   13250:	8006      	strh	r6, [r0, #0]
   13252:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   13256:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   13258:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1325a:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1325c:	887b      	ldrh	r3, [r7, #2]
   1325e:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   13260:	88bb      	ldrh	r3, [r7, #4]
   13262:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   13264:	88fb      	ldrh	r3, [r7, #6]
   13266:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   13268:	f242 0020 	movw	r0, #8224	; 0x2020
   1326c:	f7ff fe8a 	bl	12f84 <bt_hci_cmd_send>
   13270:	e7dd      	b.n	1322e <le_conn_param_req+0x7a>
   13272:	bf00      	nop
   13274:	0003006c 	.word	0x0003006c
   13278:	0002ccc8 	.word	0x0002ccc8

0001327c <hci_tx_thread>:
{
   1327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   13280:	f8df 8154 	ldr.w	r8, [pc, #340]	; 133d8 <hci_tx_thread+0x15c>
{
   13284:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
   13286:	f8df 9154 	ldr.w	r9, [pc, #340]	; 133dc <hci_tx_thread+0x160>
{
   1328a:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   1328c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13290:	4853      	ldr	r0, [pc, #332]	; (133e0 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   13292:	f36f 3394 	bfc	r3, #14, #7
   13296:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1329a:	f001 fdd5 	bl	14e48 <bt_conn_prepare_events>
   1329e:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   132a0:	f04f 32ff 	mov.w	r2, #4294967295
   132a4:	f04f 33ff 	mov.w	r3, #4294967295
   132a8:	4629      	mov	r1, r5
   132aa:	484b      	ldr	r0, [pc, #300]	; (133d8 <hci_tx_thread+0x15c>)
   132ac:	f011 fb62 	bl	24974 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   132b0:	b160      	cbz	r0, 132cc <hci_tx_thread+0x50>
   132b2:	f640 13e6 	movw	r3, #2534	; 0x9e6
   132b6:	464a      	mov	r2, r9
   132b8:	494a      	ldr	r1, [pc, #296]	; (133e4 <hci_tx_thread+0x168>)
   132ba:	484b      	ldr	r0, [pc, #300]	; (133e8 <hci_tx_thread+0x16c>)
   132bc:	f013 fd59 	bl	26d72 <assert_print>
   132c0:	4040      	eors	r0, r0
   132c2:	f380 8811 	msr	BASEPRI, r0
   132c6:	f04f 0003 	mov.w	r0, #3
   132ca:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   132cc:	f04f 0a03 	mov.w	sl, #3
{
   132d0:	4e41      	ldr	r6, [pc, #260]	; (133d8 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
   132d2:	b915      	cbnz	r5, 132da <hci_tx_thread+0x5e>
	z_impl_k_yield();
   132d4:	f010 fa96 	bl	23804 <z_impl_k_yield>
	while (1) {
   132d8:	e7d8      	b.n	1328c <hci_tx_thread+0x10>
		switch (ev->state) {
   132da:	68f3      	ldr	r3, [r6, #12]
   132dc:	f3c3 3386 	ubfx	r3, r3, #14, #7
   132e0:	2b01      	cmp	r3, #1
   132e2:	d960      	bls.n	133a6 <hci_tx_thread+0x12a>
   132e4:	2b04      	cmp	r3, #4
   132e6:	d168      	bne.n	133ba <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   132e8:	7b33      	ldrb	r3, [r6, #12]
   132ea:	2b00      	cmp	r3, #0
   132ec:	d15e      	bne.n	133ac <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   132ee:	2200      	movs	r2, #0
   132f0:	2300      	movs	r3, #0
   132f2:	483e      	ldr	r0, [pc, #248]	; (133ec <hci_tx_thread+0x170>)
   132f4:	f016 fffb 	bl	2a2ee <net_buf_get>
	BT_ASSERT(buf);
   132f8:	4604      	mov	r4, r0
   132fa:	b960      	cbnz	r0, 13316 <hci_tx_thread+0x9a>
   132fc:	f44f 6318 	mov.w	r3, #2432	; 0x980
   13300:	464a      	mov	r2, r9
   13302:	493b      	ldr	r1, [pc, #236]	; (133f0 <hci_tx_thread+0x174>)
   13304:	4838      	ldr	r0, [pc, #224]	; (133e8 <hci_tx_thread+0x16c>)
   13306:	f013 fd34 	bl	26d72 <assert_print>
   1330a:	4040      	eors	r0, r0
   1330c:	f380 8811 	msr	BASEPRI, r0
   13310:	f04f 0003 	mov.w	r0, #3
   13314:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   13316:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 133f4 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   1331a:	f04f 33ff 	mov.w	r3, #4294967295
   1331e:	f04f 32ff 	mov.w	r2, #4294967295
   13322:	4835      	ldr	r0, [pc, #212]	; (133f8 <hci_tx_thread+0x17c>)
   13324:	f00e fcf8 	bl	21d18 <z_impl_k_sem_take>
   13328:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   1332c:	b18b      	cbz	r3, 13352 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   1332e:	4b33      	ldr	r3, [pc, #204]	; (133fc <hci_tx_thread+0x180>)
   13330:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13334:	617b      	str	r3, [r7, #20]
   13336:	2302      	movs	r3, #2
   13338:	4831      	ldr	r0, [pc, #196]	; (13400 <hci_tx_thread+0x184>)
   1333a:	613b      	str	r3, [r7, #16]
   1333c:	f107 0210 	add.w	r2, r7, #16
   13340:	f015 f99f 	bl	28682 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   13344:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   13348:	f007 fe46 	bl	1afd8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1334c:	2300      	movs	r3, #0
   1334e:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   13352:	4620      	mov	r0, r4
   13354:	f007 fe84 	bl	1b060 <net_buf_ref>
   13358:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   1335c:	4620      	mov	r0, r4
   1335e:	f7ff fe09 	bl	12f74 <bt_send>
	if (err) {
   13362:	b300      	cbz	r0, 133a6 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   13364:	46eb      	mov	fp, sp
   13366:	b088      	sub	sp, #32
   13368:	466a      	mov	r2, sp
   1336a:	4b26      	ldr	r3, [pc, #152]	; (13404 <hci_tx_thread+0x188>)
   1336c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13370:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13374:	2303      	movs	r3, #3
   13376:	4822      	ldr	r0, [pc, #136]	; (13400 <hci_tx_thread+0x184>)
   13378:	f842 3f10 	str.w	r3, [r2, #16]!
   1337c:	f015 f981 	bl	28682 <z_log_msg_static_create.constprop.0>
   13380:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   13382:	481d      	ldr	r0, [pc, #116]	; (133f8 <hci_tx_thread+0x17c>)
   13384:	f00e fc84 	bl	21c90 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   13388:	4620      	mov	r0, r4
   1338a:	f007 fbf3 	bl	1ab74 <net_buf_id>
   1338e:	220c      	movs	r2, #12
   13390:	4b1d      	ldr	r3, [pc, #116]	; (13408 <hci_tx_thread+0x18c>)
   13392:	211f      	movs	r1, #31
   13394:	fb02 3000 	mla	r0, r2, r0, r3
   13398:	4622      	mov	r2, r4
   1339a:	8840      	ldrh	r0, [r0, #2]
   1339c:	f7ff f8a0 	bl	124e0 <hci_cmd_done>
		net_buf_unref(buf);
   133a0:	4620      	mov	r0, r4
   133a2:	f007 fe19 	bl	1afd8 <net_buf_unref>
	for (; count; ev++, count--) {
   133a6:	3614      	adds	r6, #20
   133a8:	3d01      	subs	r5, #1
   133aa:	e792      	b.n	132d2 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   133ac:	2b01      	cmp	r3, #1
   133ae:	d1fa      	bne.n	133a6 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   133b0:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   133b2:	3838      	subs	r0, #56	; 0x38
   133b4:	f002 f9fe 	bl	157b4 <bt_conn_process_tx>
   133b8:	e7f5      	b.n	133a6 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   133ba:	466c      	mov	r4, sp
   133bc:	b088      	sub	sp, #32
   133be:	466a      	mov	r2, sp
   133c0:	4912      	ldr	r1, [pc, #72]	; (1340c <hci_tx_thread+0x190>)
   133c2:	480f      	ldr	r0, [pc, #60]	; (13400 <hci_tx_thread+0x184>)
		switch (ev->state) {
   133c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   133c8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   133cc:	f842 af10 	str.w	sl, [r2, #16]!
   133d0:	f015 f957 	bl	28682 <z_log_msg_static_create.constprop.0>
   133d4:	46a5      	mov	sp, r4
   133d6:	e7e6      	b.n	133a6 <hci_tx_thread+0x12a>
   133d8:	20008488 	.word	0x20008488
   133dc:	000300d8 	.word	0x000300d8
   133e0:	2000849c 	.word	0x2000849c
   133e4:	0002ecc8 	.word	0x0002ecc8
   133e8:	0002dd81 	.word	0x0002dd81
   133ec:	20008144 	.word	0x20008144
   133f0:	00031e39 	.word	0x00031e39
   133f4:	20008000 	.word	0x20008000
   133f8:	20008120 	.word	0x20008120
   133fc:	00030425 	.word	0x00030425
   13400:	0002ccc8 	.word	0x0002ccc8
   13404:	00030374 	.word	0x00030374
   13408:	200214f4 	.word	0x200214f4
   1340c:	00030440 	.word	0x00030440

00013410 <hci_event_prio>:
{
   13410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13414:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   13416:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1341a:	4630      	mov	r0, r6
   1341c:	f016 ff78 	bl	2a310 <net_buf_simple_headroom>
	state->len = buf->len;
   13420:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   13424:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13426:	f1b8 0f01 	cmp.w	r8, #1
   1342a:	d80c      	bhi.n	13446 <hci_event_prio+0x36>
   1342c:	f640 537b 	movw	r3, #3451	; 0xd7b
   13430:	4a1b      	ldr	r2, [pc, #108]	; (134a0 <hci_event_prio+0x90>)
   13432:	491c      	ldr	r1, [pc, #112]	; (134a4 <hci_event_prio+0x94>)
   13434:	481c      	ldr	r0, [pc, #112]	; (134a8 <hci_event_prio+0x98>)
   13436:	f013 fc9c 	bl	26d72 <assert_print>
   1343a:	4040      	eors	r0, r0
   1343c:	f380 8811 	msr	BASEPRI, r0
   13440:	f04f 0003 	mov.w	r0, #3
   13444:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13446:	4630      	mov	r0, r6
   13448:	2102      	movs	r1, #2
   1344a:	f007 fec9 	bl	1b1e0 <net_buf_simple_pull_mem>
   1344e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13450:	7800      	ldrb	r0, [r0, #0]
   13452:	f015 f8d4 	bl	285fe <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13456:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13458:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1345a:	d40c      	bmi.n	13476 <hci_event_prio+0x66>
   1345c:	f640 537f 	movw	r3, #3455	; 0xd7f
   13460:	4a0f      	ldr	r2, [pc, #60]	; (134a0 <hci_event_prio+0x90>)
   13462:	4912      	ldr	r1, [pc, #72]	; (134ac <hci_event_prio+0x9c>)
   13464:	4810      	ldr	r0, [pc, #64]	; (134a8 <hci_event_prio+0x98>)
   13466:	f013 fc84 	bl	26d72 <assert_print>
   1346a:	4040      	eors	r0, r0
   1346c:	f380 8811 	msr	BASEPRI, r0
   13470:	f04f 0003 	mov.w	r0, #3
   13474:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   13476:	2305      	movs	r3, #5
   13478:	4621      	mov	r1, r4
   1347a:	4a0d      	ldr	r2, [pc, #52]	; (134b0 <hci_event_prio+0xa0>)
   1347c:	7838      	ldrb	r0, [r7, #0]
   1347e:	f7fe fef5 	bl	1226c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13482:	07b3      	lsls	r3, r6, #30
   13484:	d507      	bpl.n	13496 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   13486:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   13488:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1348c:	fa13 f585 	uxtah	r5, r3, r5
   13490:	60e5      	str	r5, [r4, #12]
}
   13492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   13496:	4620      	mov	r0, r4
}
   13498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1349c:	f007 bd9c 	b.w	1afd8 <net_buf_unref>
   134a0:	000300d8 	.word	0x000300d8
   134a4:	0003010c 	.word	0x0003010c
   134a8:	0002dd81 	.word	0x0002dd81
   134ac:	00030461 	.word	0x00030461
   134b0:	0002d64c 	.word	0x0002d64c

000134b4 <bt_recv>:
{
   134b4:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   134b6:	7e03      	ldrb	r3, [r0, #24]
   134b8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   134ba:	2b01      	cmp	r3, #1
{
   134bc:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   134be:	d006      	beq.n	134ce <bt_recv+0x1a>
   134c0:	2b03      	cmp	r3, #3
   134c2:	d112      	bne.n	134ea <bt_recv+0x36>
			rx_queue_put(buf);
   134c4:	f7fe fdfe 	bl	120c4 <rx_queue_put>
		return 0;
   134c8:	2000      	movs	r0, #0
}
   134ca:	46bd      	mov	sp, r7
   134cc:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   134ce:	68c3      	ldr	r3, [r0, #12]
   134d0:	7818      	ldrb	r0, [r3, #0]
   134d2:	f015 f894 	bl	285fe <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   134d6:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   134d8:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   134da:	d502      	bpl.n	134e2 <bt_recv+0x2e>
			hci_event_prio(buf);
   134dc:	4620      	mov	r0, r4
   134de:	f7ff ff97 	bl	13410 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   134e2:	07ab      	lsls	r3, r5, #30
   134e4:	d5f0      	bpl.n	134c8 <bt_recv+0x14>
			rx_queue_put(buf);
   134e6:	4620      	mov	r0, r4
   134e8:	e7ec      	b.n	134c4 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   134ea:	466d      	mov	r5, sp
   134ec:	b088      	sub	sp, #32
   134ee:	466a      	mov	r2, sp
   134f0:	4908      	ldr	r1, [pc, #32]	; (13514 <bt_recv+0x60>)
   134f2:	4809      	ldr	r0, [pc, #36]	; (13518 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   134f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   134f8:	2303      	movs	r3, #3
   134fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   134fe:	f842 3f10 	str.w	r3, [r2, #16]!
   13502:	f015 f8be 	bl	28682 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   13506:	4620      	mov	r0, r4
   13508:	46ad      	mov	sp, r5
   1350a:	f007 fd65 	bl	1afd8 <net_buf_unref>
		return -EINVAL;
   1350e:	f06f 0015 	mvn.w	r0, #21
   13512:	e7da      	b.n	134ca <bt_recv+0x16>
   13514:	0003047a 	.word	0x0003047a
   13518:	0002ccc8 	.word	0x0002ccc8

0001351c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1351c:	4a08      	ldr	r2, [pc, #32]	; (13540 <bt_hci_driver_register+0x24>)
{
   1351e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13520:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   13524:	b930      	cbnz	r0, 13534 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13526:	68d9      	ldr	r1, [r3, #12]
   13528:	b139      	cbz	r1, 1353a <bt_hci_driver_register+0x1e>
   1352a:	6959      	ldr	r1, [r3, #20]
   1352c:	b129      	cbz	r1, 1353a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1352e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   13532:	4770      	bx	lr
		return -EALREADY;
   13534:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13538:	4770      	bx	lr
		return -EINVAL;
   1353a:	f06f 0015 	mvn.w	r0, #21
}
   1353e:	4770      	bx	lr
   13540:	20008000 	.word	0x20008000

00013544 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13544:	2104      	movs	r1, #4
   13546:	4801      	ldr	r0, [pc, #4]	; (1354c <bt_finalize_init+0x8>)
   13548:	f015 b884 	b.w	28654 <atomic_or>
   1354c:	200080cc 	.word	0x200080cc

00013550 <bt_init.part.0>:
static int bt_init(void)
   13550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   13552:	480c      	ldr	r0, [pc, #48]	; (13584 <bt_init.part.0+0x34>)
   13554:	79c3      	ldrb	r3, [r0, #7]
   13556:	b96b      	cbnz	r3, 13574 <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   13558:	4b0b      	ldr	r3, [pc, #44]	; (13588 <bt_init.part.0+0x38>)
   1355a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1355e:	9305      	str	r3, [sp, #20]
   13560:	2302      	movs	r3, #2
   13562:	480a      	ldr	r0, [pc, #40]	; (1358c <bt_init.part.0+0x3c>)
   13564:	aa04      	add	r2, sp, #16
   13566:	9304      	str	r3, [sp, #16]
   13568:	f015 f88b 	bl	28682 <z_log_msg_static_create.constprop.0>
}
   1356c:	2000      	movs	r0, #0
   1356e:	b007      	add	sp, #28
   13570:	f85d fb04 	ldr.w	pc, [sp], #4
   13574:	2108      	movs	r1, #8
   13576:	30cc      	adds	r0, #204	; 0xcc
   13578:	f015 f86c 	bl	28654 <atomic_or>
	bt_finalize_init();
   1357c:	f7ff ffe2 	bl	13544 <bt_finalize_init>
	return 0;
   13580:	e7f4      	b.n	1356c <bt_init.part.0+0x1c>
   13582:	bf00      	nop
   13584:	20008000 	.word	0x20008000
   13588:	0003048e 	.word	0x0003048e
   1358c:	0002ccc8 	.word	0x0002ccc8

00013590 <init_work>:
{
   13590:	b510      	push	{r4, lr}
	err = bt_init();
   13592:	f7f5 ff55 	bl	9440 <bt_init>
	if (ready_cb) {
   13596:	4b03      	ldr	r3, [pc, #12]	; (135a4 <init_work+0x14>)
   13598:	681b      	ldr	r3, [r3, #0]
   1359a:	b113      	cbz	r3, 135a2 <init_work+0x12>
}
   1359c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   135a0:	4718      	bx	r3
}
   135a2:	bd10      	pop	{r4, pc}
   135a4:	2002156c 	.word	0x2002156c

000135a8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   135a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   135aa:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
   135ac:	4d3d      	ldr	r5, [pc, #244]	; (136a4 <bt_enable+0xfc>)
{
   135ae:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   135b0:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   135b4:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   135b6:	b983      	cbnz	r3, 135da <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   135b8:	4b3b      	ldr	r3, [pc, #236]	; (136a8 <bt_enable+0x100>)
		return -ENODEV;
   135ba:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   135be:	617b      	str	r3, [r7, #20]
   135c0:	2302      	movs	r3, #2
   135c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   135c6:	4839      	ldr	r0, [pc, #228]	; (136ac <bt_enable+0x104>)
   135c8:	613b      	str	r3, [r7, #16]
   135ca:	f107 0210 	add.w	r2, r7, #16
   135ce:	f015 f858 	bl	28682 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   135d2:	4620      	mov	r0, r4
   135d4:	371c      	adds	r7, #28
   135d6:	46bd      	mov	sp, r7
   135d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   135da:	f06f 0102 	mvn.w	r1, #2
   135de:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   135e2:	f015 f851 	bl	28688 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   135e6:	2101      	movs	r1, #1
   135e8:	f015 f834 	bl	28654 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   135ec:	07c3      	lsls	r3, r0, #31
   135ee:	d456      	bmi.n	1369e <bt_enable+0xf6>
		err = bt_settings_init();
   135f0:	f7fe fc0e 	bl	11e10 <bt_settings_init>
		if (err) {
   135f4:	4604      	mov	r4, r0
   135f6:	2800      	cmp	r0, #0
   135f8:	d1eb      	bne.n	135d2 <bt_enable+0x2a>
	ready_cb = cb;
   135fa:	4b2d      	ldr	r3, [pc, #180]	; (136b0 <bt_enable+0x108>)
   135fc:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   135fe:	2201      	movs	r2, #1
   13600:	f505 7090 	add.w	r0, r5, #288	; 0x120
   13604:	4611      	mov	r1, r2
   13606:	f018 fa17 	bl	2ba38 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1360a:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   1360e:	f018 f9f1 	bl	2b9f4 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13612:	2200      	movs	r2, #0
   13614:	2300      	movs	r3, #0
   13616:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1361a:	f06f 0308 	mvn.w	r3, #8
   1361e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13622:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13626:	e9cd 4400 	strd	r4, r4, [sp]
   1362a:	4b22      	ldr	r3, [pc, #136]	; (136b4 <bt_enable+0x10c>)
   1362c:	4922      	ldr	r1, [pc, #136]	; (136b8 <bt_enable+0x110>)
   1362e:	9404      	str	r4, [sp, #16]
   13630:	4822      	ldr	r0, [pc, #136]	; (136bc <bt_enable+0x114>)
   13632:	f00d ffab 	bl	2158c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13636:	4922      	ldr	r1, [pc, #136]	; (136c0 <bt_enable+0x118>)
   13638:	4820      	ldr	r0, [pc, #128]	; (136bc <bt_enable+0x114>)
   1363a:	f018 f9b2 	bl	2b9a2 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1363e:	4821      	ldr	r0, [pc, #132]	; (136c4 <bt_enable+0x11c>)
   13640:	f00e fe9a 	bl	22378 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   13644:	f06f 0307 	mvn.w	r3, #7
   13648:	f640 0298 	movw	r2, #2200	; 0x898
   1364c:	491e      	ldr	r1, [pc, #120]	; (136c8 <bt_enable+0x120>)
   1364e:	481d      	ldr	r0, [pc, #116]	; (136c4 <bt_enable+0x11c>)
   13650:	9400      	str	r4, [sp, #0]
   13652:	f00e feab 	bl	223ac <k_work_queue_start>
   13656:	491d      	ldr	r1, [pc, #116]	; (136cc <bt_enable+0x124>)
   13658:	481a      	ldr	r0, [pc, #104]	; (136c4 <bt_enable+0x11c>)
   1365a:	f018 f9a2 	bl	2b9a2 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1365e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   13662:	68db      	ldr	r3, [r3, #12]
   13664:	4798      	blx	r3
	if (err) {
   13666:	4604      	mov	r4, r0
   13668:	b178      	cbz	r0, 1368a <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
   1366a:	466d      	mov	r5, sp
   1366c:	b088      	sub	sp, #32
   1366e:	462a      	mov	r2, r5
   13670:	4b17      	ldr	r3, [pc, #92]	; (136d0 <bt_enable+0x128>)
   13672:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13676:	e9c5 3005 	strd	r3, r0, [r5, #20]
   1367a:	2303      	movs	r3, #3
   1367c:	480b      	ldr	r0, [pc, #44]	; (136ac <bt_enable+0x104>)
   1367e:	f842 3f10 	str.w	r3, [r2, #16]!
   13682:	f014 fffe 	bl	28682 <z_log_msg_static_create.constprop.0>
   13686:	46ad      	mov	sp, r5
		return err;
   13688:	e7a3      	b.n	135d2 <bt_enable+0x2a>
	if (!cb) {
   1368a:	b91e      	cbnz	r6, 13694 <bt_enable+0xec>
		return bt_init();
   1368c:	f7f5 fed8 	bl	9440 <bt_init>
   13690:	4604      	mov	r4, r0
   13692:	e79e      	b.n	135d2 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   13694:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13698:	f00e fe68 	bl	2236c <k_work_submit>
	return 0;
   1369c:	e799      	b.n	135d2 <bt_enable+0x2a>
		return -EALREADY;
   1369e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   136a2:	e796      	b.n	135d2 <bt_enable+0x2a>
   136a4:	20008000 	.word	0x20008000
   136a8:	000305a6 	.word	0x000305a6
   136ac:	0002ccc8 	.word	0x0002ccc8
   136b0:	2002156c 	.word	0x2002156c
   136b4:	0001327d 	.word	0x0001327d
   136b8:	20032738 	.word	0x20032738
   136bc:	20009ae8 	.word	0x20009ae8
   136c0:	000305bf 	.word	0x000305bf
   136c4:	20009b70 	.word	0x20009b70
   136c8:	20032b38 	.word	0x20032b38
   136cc:	000305c5 	.word	0x000305c5
   136d0:	000305cb 	.word	0x000305cb

000136d4 <bt_is_ready>:
   136d4:	4b02      	ldr	r3, [pc, #8]	; (136e0 <bt_is_ready+0xc>)
   136d6:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   136da:	f3c0 0080 	ubfx	r0, r0, #2, #1
   136de:	4770      	bx	lr
   136e0:	200080cc 	.word	0x200080cc

000136e4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   136e4:	4800      	ldr	r0, [pc, #0]	; (136e8 <bt_get_name+0x4>)
   136e6:	4770      	bx	lr
   136e8:	0002e613 	.word	0x0002e613

000136ec <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   136ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136ee:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   136f0:	2500      	movs	r5, #0
   136f2:	4f09      	ldr	r7, [pc, #36]	; (13718 <id_find+0x2c>)
   136f4:	79fb      	ldrb	r3, [r7, #7]
   136f6:	b2ec      	uxtb	r4, r5
   136f8:	42a3      	cmp	r3, r4
   136fa:	d802      	bhi.n	13702 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   136fc:	f06f 0001 	mvn.w	r0, #1
   13700:	e009      	b.n	13716 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   13702:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13706:	4630      	mov	r0, r6
   13708:	4439      	add	r1, r7
   1370a:	f015 f881 	bl	28810 <bt_addr_le_eq>
   1370e:	3501      	adds	r5, #1
   13710:	2800      	cmp	r0, #0
   13712:	d0ef      	beq.n	136f4 <id_find+0x8>
   13714:	4620      	mov	r0, r4
}
   13716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13718:	20008000 	.word	0x20008000

0001371c <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1371c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1371e:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13720:	460d      	mov	r5, r1
   13722:	b1a9      	cbz	r1, 13750 <id_create.constprop.0+0x34>
   13724:	4628      	mov	r0, r5
   13726:	4915      	ldr	r1, [pc, #84]	; (1377c <id_create.constprop.0+0x60>)
   13728:	f015 f872 	bl	28810 <bt_addr_le_eq>
   1372c:	b980      	cbnz	r0, 13750 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1372e:	4629      	mov	r1, r5
   13730:	4813      	ldr	r0, [pc, #76]	; (13780 <id_create.constprop.0+0x64>)
   13732:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13736:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13738:	f015 f87a 	bl	28830 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1373c:	4811      	ldr	r0, [pc, #68]	; (13784 <id_create.constprop.0+0x68>)
   1373e:	f015 f86f 	bl	28820 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   13742:	0743      	lsls	r3, r0, #29
   13744:	d501      	bpl.n	1374a <id_create.constprop.0+0x2e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   13746:	f7fe fb19 	bl	11d7c <bt_settings_save_id>
	}

	return 0;
   1374a:	2000      	movs	r0, #0
}
   1374c:	b003      	add	sp, #12
   1374e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   13750:	4668      	mov	r0, sp
   13752:	f014 ff46 	bl	285e2 <bt_addr_le_create_static>
			if (err) {
   13756:	2800      	cmp	r0, #0
   13758:	d1f8      	bne.n	1374c <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   1375a:	4668      	mov	r0, sp
   1375c:	f7ff ffc6 	bl	136ec <id_find>
   13760:	2800      	cmp	r0, #0
   13762:	daf5      	bge.n	13750 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   13764:	4b06      	ldr	r3, [pc, #24]	; (13780 <id_create.constprop.0+0x64>)
   13766:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1376a:	4669      	mov	r1, sp
   1376c:	4418      	add	r0, r3
   1376e:	f015 f85f 	bl	28830 <bt_addr_le_copy>
		if (addr) {
   13772:	2d00      	cmp	r5, #0
   13774:	d0e2      	beq.n	1373c <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13776:	4601      	mov	r1, r0
   13778:	4628      	mov	r0, r5
   1377a:	e7dd      	b.n	13738 <id_create.constprop.0+0x1c>
   1377c:	0002fdbe 	.word	0x0002fdbe
   13780:	20008000 	.word	0x20008000
   13784:	200080cc 	.word	0x200080cc

00013788 <set_random_address>:
{
   13788:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1378a:	2206      	movs	r2, #6
   1378c:	4911      	ldr	r1, [pc, #68]	; (137d4 <set_random_address+0x4c>)
   1378e:	4605      	mov	r5, r0
   13790:	f018 fb04 	bl	2bd9c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13794:	b1c8      	cbz	r0, 137ca <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13796:	2106      	movs	r1, #6
   13798:	f242 0005 	movw	r0, #8197	; 0x2005
   1379c:	f7ff f86e 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   137a0:	4604      	mov	r4, r0
   137a2:	b1a0      	cbz	r0, 137ce <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   137a4:	2206      	movs	r2, #6
   137a6:	4629      	mov	r1, r5
   137a8:	300c      	adds	r0, #12
   137aa:	f016 fdbd 	bl	2a328 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   137ae:	2200      	movs	r2, #0
   137b0:	4621      	mov	r1, r4
   137b2:	f242 0005 	movw	r0, #8197	; 0x2005
   137b6:	f7ff f8af 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   137ba:	b938      	cbnz	r0, 137cc <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   137bc:	4805      	ldr	r0, [pc, #20]	; (137d4 <set_random_address+0x4c>)
   137be:	4629      	mov	r1, r5
   137c0:	f015 f831 	bl	28826 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   137c4:	2301      	movs	r3, #1
   137c6:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   137ca:	2000      	movs	r0, #0
}
   137cc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   137ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   137d2:	e7fb      	b.n	137cc <set_random_address+0x44>
   137d4:	20008061 	.word	0x20008061

000137d8 <find_rl_conflict>:
{
   137d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137dc:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   137de:	460c      	mov	r4, r1
{
   137e0:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   137e2:	b959      	cbnz	r1, 137fc <find_rl_conflict+0x24>
   137e4:	492b      	ldr	r1, [pc, #172]	; (13894 <find_rl_conflict+0xbc>)
   137e6:	f44f 7357 	mov.w	r3, #860	; 0x35c
   137ea:	4a2b      	ldr	r2, [pc, #172]	; (13898 <find_rl_conflict+0xc0>)
   137ec:	482b      	ldr	r0, [pc, #172]	; (1389c <find_rl_conflict+0xc4>)
   137ee:	f013 fac0 	bl	26d72 <assert_print>
   137f2:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   137f6:	4828      	ldr	r0, [pc, #160]	; (13898 <find_rl_conflict+0xc0>)
   137f8:	f013 fab4 	bl	26d64 <assert_post_action>
   137fc:	6808      	ldr	r0, [r1, #0]
   137fe:	b948      	cbnz	r0, 13814 <find_rl_conflict+0x3c>
   13800:	4927      	ldr	r1, [pc, #156]	; (138a0 <find_rl_conflict+0xc8>)
   13802:	f240 335d 	movw	r3, #861	; 0x35d
   13806:	4a24      	ldr	r2, [pc, #144]	; (13898 <find_rl_conflict+0xc0>)
   13808:	4824      	ldr	r0, [pc, #144]	; (1389c <find_rl_conflict+0xc4>)
   1380a:	f013 fab2 	bl	26d72 <assert_print>
   1380e:	f240 315d 	movw	r1, #861	; 0x35d
   13812:	e7f0      	b.n	137f6 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   13814:	b94d      	cbnz	r5, 1382a <find_rl_conflict+0x52>
   13816:	4923      	ldr	r1, [pc, #140]	; (138a4 <find_rl_conflict+0xcc>)
   13818:	f240 335e 	movw	r3, #862	; 0x35e
   1381c:	4a1e      	ldr	r2, [pc, #120]	; (13898 <find_rl_conflict+0xc0>)
   1381e:	481f      	ldr	r0, [pc, #124]	; (1389c <find_rl_conflict+0xc4>)
   13820:	f013 faa7 	bl	26d72 <assert_print>
   13824:	f240 315e 	movw	r1, #862	; 0x35e
   13828:	e7e5      	b.n	137f6 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   1382a:	7a03      	ldrb	r3, [r0, #8]
   1382c:	075a      	lsls	r2, r3, #29
   1382e:	d509      	bpl.n	13844 <find_rl_conflict+0x6c>
   13830:	491d      	ldr	r1, [pc, #116]	; (138a8 <find_rl_conflict+0xd0>)
   13832:	f44f 7358 	mov.w	r3, #864	; 0x360
   13836:	4a18      	ldr	r2, [pc, #96]	; (13898 <find_rl_conflict+0xc0>)
   13838:	4818      	ldr	r0, [pc, #96]	; (1389c <find_rl_conflict+0xc4>)
   1383a:	f013 fa9a 	bl	26d72 <assert_print>
   1383e:	f44f 7158 	mov.w	r1, #864	; 0x360
   13842:	e7d8      	b.n	137f6 <find_rl_conflict+0x1e>
	if (conflict->found) {
   13844:	684f      	ldr	r7, [r1, #4]
   13846:	b9f7      	cbnz	r7, 13886 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   13848:	7a2b      	ldrb	r3, [r5, #8]
   1384a:	075b      	lsls	r3, r3, #29
   1384c:	d51b      	bpl.n	13886 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1384e:	1c69      	adds	r1, r5, #1
   13850:	3001      	adds	r0, #1
   13852:	f014 ffdd 	bl	28810 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13856:	f8d4 8000 	ldr.w	r8, [r4]
   1385a:	2216      	movs	r2, #22
   1385c:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1385e:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13860:	4668      	mov	r0, sp
   13862:	f018 fae5 	bl	2be30 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   13866:	2210      	movs	r2, #16
   13868:	4669      	mov	r1, sp
   1386a:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1386e:	f018 fa95 	bl	2bd9c <memcmp>
   13872:	b158      	cbz	r0, 1388c <find_rl_conflict+0xb4>
   13874:	6820      	ldr	r0, [r4, #0]
   13876:	2210      	movs	r2, #16
   13878:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1387c:	302a      	adds	r0, #42	; 0x2a
   1387e:	f018 fa8d 	bl	2bd9c <memcmp>
   13882:	b918      	cbnz	r0, 1388c <find_rl_conflict+0xb4>
		conflict->found = resident;
   13884:	6065      	str	r5, [r4, #4]
}
   13886:	b006      	add	sp, #24
   13888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   1388c:	2e00      	cmp	r6, #0
   1388e:	d1f9      	bne.n	13884 <find_rl_conflict+0xac>
   13890:	e7f9      	b.n	13886 <find_rl_conflict+0xae>
   13892:	bf00      	nop
   13894:	0003064b 	.word	0x0003064b
   13898:	0003061d 	.word	0x0003061d
   1389c:	0002dd81 	.word	0x0002dd81
   138a0:	00030663 	.word	0x00030663
   138a4:	00030686 	.word	0x00030686
   138a8:	0003069e 	.word	0x0003069e

000138ac <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   138ac:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   138ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   138b0:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
   138b2:	4604      	mov	r4, r0
   138b4:	b087      	sub	sp, #28
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   138b6:	4608      	mov	r0, r1
   138b8:	f001 fe4c 	bl	15554 <bt_conn_lookup_state_le>
	if (conn) {
   138bc:	4606      	mov	r6, r0
   138be:	b188      	cbz	r0, 138e4 <bt_id_add.part.0+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   138c0:	4b49      	ldr	r3, [pc, #292]	; (139e8 <bt_id_add.part.0+0x13c>)
   138c2:	e8d3 1fef 	ldaex	r1, [r3]
   138c6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   138ca:	e8c3 1fe2 	stlex	r2, r1, [r3]
   138ce:	2a00      	cmp	r2, #0
   138d0:	d1f7      	bne.n	138c2 <bt_id_add.part.0+0x16>
	keys->state |= flag;
   138d2:	7a23      	ldrb	r3, [r4, #8]
   138d4:	f043 0301 	orr.w	r3, r3, #1
   138d8:	7223      	strb	r3, [r4, #8]
}
   138da:	b007      	add	sp, #28
   138dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   138e0:	f001 bb12 	b.w	14f08 <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   138e4:	4d41      	ldr	r5, [pc, #260]	; (139ec <bt_id_add.part.0+0x140>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   138e6:	4601      	mov	r1, r0
   138e8:	4841      	ldr	r0, [pc, #260]	; (139f0 <bt_id_add.part.0+0x144>)
   138ea:	f000 fbf7 	bl	140dc <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   138ee:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   138f2:	b173      	cbz	r3, 13912 <bt_id_add.part.0+0x66>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   138f4:	4630      	mov	r0, r6
   138f6:	f014 ffe1 	bl	288bc <addr_res_enable>
		if (err) {
   138fa:	b150      	cbz	r0, 13912 <bt_id_add.part.0+0x66>
			LOG_WRN("Failed to disable address resolution");
   138fc:	4b3d      	ldr	r3, [pc, #244]	; (139f4 <bt_id_add.part.0+0x148>)
		LOG_WRN("Set privacy mode command is not supported");
   138fe:	9305      	str	r3, [sp, #20]
   13900:	2302      	movs	r3, #2
   13902:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13906:	9304      	str	r3, [sp, #16]
   13908:	aa04      	add	r2, sp, #16
		LOG_ERR("Failed to set privacy mode");
   1390a:	483b      	ldr	r0, [pc, #236]	; (139f8 <bt_id_add.part.0+0x14c>)
   1390c:	f014 ffd3 	bl	288b6 <z_log_msg_static_create.constprop.0>
		goto done;
   13910:	e026      	b.n	13960 <bt_id_add.part.0+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   13912:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   13916:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1391a:	429a      	cmp	r2, r3
   1391c:	d12a      	bne.n	13974 <bt_id_add.part.0+0xc8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1391e:	2602      	movs	r6, #2
   13920:	4b36      	ldr	r3, [pc, #216]	; (139fc <bt_id_add.part.0+0x150>)
   13922:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13926:	4834      	ldr	r0, [pc, #208]	; (139f8 <bt_id_add.part.0+0x14c>)
   13928:	aa04      	add	r2, sp, #16
   1392a:	9305      	str	r3, [sp, #20]
   1392c:	9604      	str	r6, [sp, #16]
   1392e:	f014 ffc2 	bl	288b6 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13932:	2200      	movs	r2, #0
   13934:	f242 0029 	movw	r0, #8233	; 0x2029
   13938:	4611      	mov	r1, r2
   1393a:	f7fe ffed 	bl	12918 <bt_hci_cmd_send_sync>
		if (err) {
   1393e:	b130      	cbz	r0, 1394e <bt_id_add.part.0+0xa2>
			LOG_ERR("Failed to clear resolution list");
   13940:	4b2f      	ldr	r3, [pc, #188]	; (13a00 <bt_id_add.part.0+0x154>)
   13942:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   13946:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1394a:	aa04      	add	r2, sp, #16
   1394c:	e7dd      	b.n	1390a <bt_id_add.part.0+0x5e>
		bt_dev.le.rl_entries++;
   1394e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13952:	3301      	adds	r3, #1
   13954:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13958:	7a23      	ldrb	r3, [r4, #8]
   1395a:	f043 0304 	orr.w	r3, r3, #4
   1395e:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13960:	2001      	movs	r0, #1
   13962:	f014 ffab 	bl	288bc <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13966:	2100      	movs	r1, #0
   13968:	4826      	ldr	r0, [pc, #152]	; (13a04 <bt_id_add.part.0+0x158>)
}
   1396a:	b007      	add	sp, #28
   1396c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13970:	f000 bbb4 	b.w	140dc <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13974:	4622      	mov	r2, r4
   13976:	1c67      	adds	r7, r4, #1
   13978:	4639      	mov	r1, r7
   1397a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1397e:	f014 ff5e 	bl	2883e <hci_id_add>
	if (err) {
   13982:	4606      	mov	r6, r0
   13984:	b120      	cbz	r0, 13990 <bt_id_add.part.0+0xe4>
		LOG_ERR("Failed to add IRK to controller");
   13986:	4b20      	ldr	r3, [pc, #128]	; (13a08 <bt_id_add.part.0+0x15c>)
		LOG_ERR("Failed to set privacy mode");
   13988:	9305      	str	r3, [sp, #20]
   1398a:	2302      	movs	r3, #2
   1398c:	9304      	str	r3, [sp, #16]
   1398e:	e7da      	b.n	13946 <bt_id_add.part.0+0x9a>
	bt_dev.le.rl_entries++;
   13990:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13994:	3301      	adds	r3, #1
   13996:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1399a:	7a23      	ldrb	r3, [r4, #8]
   1399c:	f043 0304 	orr.w	r3, r3, #4
   139a0:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   139a2:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   139a6:	075b      	lsls	r3, r3, #29
   139a8:	d401      	bmi.n	139ae <bt_id_add.part.0+0x102>
		LOG_WRN("Set privacy mode command is not supported");
   139aa:	4b18      	ldr	r3, [pc, #96]	; (13a0c <bt_id_add.part.0+0x160>)
   139ac:	e7a7      	b.n	138fe <bt_id_add.part.0+0x52>
	bt_addr_le_copy(&cp.id_addr, addr);
   139ae:	4639      	mov	r1, r7
   139b0:	4668      	mov	r0, sp
   139b2:	f014 ff3d 	bl	28830 <bt_addr_le_copy>
	cp.mode = mode;
   139b6:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   139b8:	2108      	movs	r1, #8
   139ba:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   139be:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   139c2:	f7fe ff5b 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   139c6:	4604      	mov	r4, r0
   139c8:	b160      	cbz	r0, 139e4 <bt_id_add.part.0+0x138>
   139ca:	2208      	movs	r2, #8
   139cc:	4669      	mov	r1, sp
   139ce:	300c      	adds	r0, #12
   139d0:	f016 fcaa 	bl	2a328 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   139d4:	4632      	mov	r2, r6
   139d6:	4621      	mov	r1, r4
   139d8:	f242 004e 	movw	r0, #8270	; 0x204e
   139dc:	f7fe ff9c 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   139e0:	2800      	cmp	r0, #0
   139e2:	d0bd      	beq.n	13960 <bt_id_add.part.0+0xb4>
		LOG_ERR("Failed to set privacy mode");
   139e4:	4b0a      	ldr	r3, [pc, #40]	; (13a10 <bt_id_add.part.0+0x164>)
   139e6:	e7cf      	b.n	13988 <bt_id_add.part.0+0xdc>
   139e8:	200080cc 	.word	0x200080cc
   139ec:	20008000 	.word	0x20008000
   139f0:	00028913 	.word	0x00028913
   139f4:	000306d3 	.word	0x000306d3
   139f8:	0002cce0 	.word	0x0002cce0
   139fc:	000306f8 	.word	0x000306f8
   13a00:	00030729 	.word	0x00030729
   13a04:	000288ed 	.word	0x000288ed
   13a08:	00030749 	.word	0x00030749
   13a0c:	00030769 	.word	0x00030769
   13a10:	00030793 	.word	0x00030793

00013a14 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a14:	4b08      	ldr	r3, [pc, #32]	; (13a38 <bt_id_pending_keys_update+0x24>)
   13a16:	e8d3 2fef 	ldaex	r2, [r3]
   13a1a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   13a1e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13a22:	2800      	cmp	r0, #0
   13a24:	d1f7      	bne.n	13a16 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13a26:	0413      	lsls	r3, r2, #16
   13a28:	d504      	bpl.n	13a34 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   13a2a:	2200      	movs	r2, #0
   13a2c:	2002      	movs	r0, #2
   13a2e:	4903      	ldr	r1, [pc, #12]	; (13a3c <bt_id_pending_keys_update+0x28>)
   13a30:	f006 bd5a 	b.w	1a4e8 <bt_keys_foreach_type>
}
   13a34:	4770      	bx	lr
   13a36:	bf00      	nop
   13a38:	200080cc 	.word	0x200080cc
   13a3c:	000289a1 	.word	0x000289a1

00013a40 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   13a40:	2300      	movs	r3, #0
{
   13a42:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13a44:	4905      	ldr	r1, [pc, #20]	; (13a5c <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   13a46:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13a4a:	466a      	mov	r2, sp
   13a4c:	2002      	movs	r0, #2
   13a4e:	f006 fd4b 	bl	1a4e8 <bt_keys_foreach_type>
}
   13a52:	9801      	ldr	r0, [sp, #4]
   13a54:	b003      	add	sp, #12
   13a56:	f85d fb04 	ldr.w	pc, [sp], #4
   13a5a:	bf00      	nop
   13a5c:	000137d9 	.word	0x000137d9

00013a60 <bt_id_add>:
	CHECKIF(keys == NULL) {
   13a60:	4603      	mov	r3, r0
{
   13a62:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   13a64:	b170      	cbz	r0, 13a84 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13a66:	490a      	ldr	r1, [pc, #40]	; (13a90 <bt_id_add+0x30>)
   13a68:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   13a6c:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
   13a70:	b10c      	cbz	r4, 13a76 <bt_id_add+0x16>
   13a72:	4294      	cmp	r4, r2
   13a74:	d208      	bcs.n	13a88 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   13a76:	3201      	adds	r2, #1
   13a78:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13a7c:	7a1a      	ldrb	r2, [r3, #8]
   13a7e:	f042 0204 	orr.w	r2, r2, #4
   13a82:	721a      	strb	r2, [r3, #8]
}
   13a84:	bc10      	pop	{r4}
   13a86:	4770      	bx	lr
   13a88:	bc10      	pop	{r4}
   13a8a:	f7ff bf0f 	b.w	138ac <bt_id_add.part.0>
   13a8e:	bf00      	nop
   13a90:	20008000 	.word	0x20008000

00013a94 <bt_id_del>:
{
   13a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13a98:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   13a9a:	4605      	mov	r5, r0
{
   13a9c:	af00      	add	r7, sp, #0
	CHECKIF(keys == NULL) {
   13a9e:	b398      	cbz	r0, 13b08 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   13aa0:	4c4e      	ldr	r4, [pc, #312]	; (13bdc <bt_id_del+0x148>)
   13aa2:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13aa6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   13aaa:	b1ca      	cbz	r2, 13ae0 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13aac:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   13aae:	4293      	cmp	r3, r2
   13ab0:	dc23      	bgt.n	13afa <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13ab2:	2100      	movs	r1, #0
   13ab4:	2206      	movs	r2, #6
   13ab6:	4608      	mov	r0, r1
   13ab8:	f001 fd4c 	bl	15554 <bt_conn_lookup_state_le>
	if (conn) {
   13abc:	4606      	mov	r6, r0
   13abe:	b338      	cbz	r0, 13b10 <bt_id_del+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13ac0:	34cc      	adds	r4, #204	; 0xcc
   13ac2:	e8d4 3fef 	ldaex	r3, [r4]
   13ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13aca:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13ace:	2a00      	cmp	r2, #0
   13ad0:	d1f7      	bne.n	13ac2 <bt_id_del+0x2e>
	keys->state |= flag;
   13ad2:	7a2b      	ldrb	r3, [r5, #8]
   13ad4:	f043 0302 	orr.w	r3, r3, #2
   13ad8:	722b      	strb	r3, [r5, #8]
		bt_conn_unref(conn);
   13ada:	f001 fa15 	bl	14f08 <bt_conn_unref>
		return;
   13ade:	e013      	b.n	13b08 <bt_id_del+0x74>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   13ae0:	b95b      	cbnz	r3, 13afa <bt_id_del+0x66>
   13ae2:	493f      	ldr	r1, [pc, #252]	; (13be0 <bt_id_del+0x14c>)
   13ae4:	483f      	ldr	r0, [pc, #252]	; (13be4 <bt_id_del+0x150>)
   13ae6:	f240 4323 	movw	r3, #1059	; 0x423
   13aea:	4a3f      	ldr	r2, [pc, #252]	; (13be8 <bt_id_del+0x154>)
   13aec:	f013 f941 	bl	26d72 <assert_print>
   13af0:	f240 4123 	movw	r1, #1059	; 0x423
   13af4:	483c      	ldr	r0, [pc, #240]	; (13be8 <bt_id_del+0x154>)
   13af6:	f013 f935 	bl	26d64 <assert_post_action>
			bt_dev.le.rl_entries--;
   13afa:	3b01      	subs	r3, #1
   13afc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13b00:	7a2b      	ldrb	r3, [r5, #8]
   13b02:	f023 0304 	bic.w	r3, r3, #4
   13b06:	722b      	strb	r3, [r5, #8]
}
   13b08:	371c      	adds	r7, #28
   13b0a:	46bd      	mov	sp, r7
   13b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13b10:	4601      	mov	r1, r0
   13b12:	4836      	ldr	r0, [pc, #216]	; (13bec <bt_id_del+0x158>)
   13b14:	f000 fae2 	bl	140dc <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13b18:	4630      	mov	r0, r6
   13b1a:	f014 fecf 	bl	288bc <addr_res_enable>
	if (err) {
   13b1e:	4606      	mov	r6, r0
   13b20:	b1d0      	cbz	r0, 13b58 <bt_id_del+0xc4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   13b22:	466d      	mov	r5, sp
   13b24:	b088      	sub	sp, #32
   13b26:	466b      	mov	r3, sp
   13b28:	4a31      	ldr	r2, [pc, #196]	; (13bf0 <bt_id_del+0x15c>)
   13b2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13b2e:	e9c3 2005 	strd	r2, r0, [r3, #20]
   13b32:	461a      	mov	r2, r3
   13b34:	2303      	movs	r3, #3
   13b36:	482f      	ldr	r0, [pc, #188]	; (13bf4 <bt_id_del+0x160>)
   13b38:	f842 3f10 	str.w	r3, [r2, #16]!
   13b3c:	f014 febb 	bl	288b6 <z_log_msg_static_create.constprop.0>
   13b40:	46ad      	mov	sp, r5
	if (bt_dev.le.rl_entries) {
   13b42:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13b46:	b113      	cbz	r3, 13b4e <bt_id_del+0xba>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13b48:	2001      	movs	r0, #1
   13b4a:	f014 feb7 	bl	288bc <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13b4e:	2100      	movs	r1, #0
   13b50:	4829      	ldr	r0, [pc, #164]	; (13bf8 <bt_id_del+0x164>)
   13b52:	f000 fac3 	bl	140dc <bt_le_ext_adv_foreach>
   13b56:	e7d7      	b.n	13b08 <bt_id_del+0x74>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13b58:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13b5c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13b60:	429a      	cmp	r2, r3
   13b62:	d20c      	bcs.n	13b7e <bt_id_del+0xea>
		bt_dev.le.rl_entries--;
   13b64:	3b01      	subs	r3, #1
   13b66:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13b6a:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13b6c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13b6e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13b72:	2002      	movs	r0, #2
   13b74:	4921      	ldr	r1, [pc, #132]	; (13bfc <bt_id_del+0x168>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13b76:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13b78:	f006 fcb6 	bl	1a4e8 <bt_keys_foreach_type>
		goto done;
   13b7c:	e7e1      	b.n	13b42 <bt_id_del+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13b7e:	2107      	movs	r1, #7
   13b80:	f242 0028 	movw	r0, #8232	; 0x2028
   13b84:	f7fe fe7a 	bl	1287c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13b88:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
   13b8c:	4680      	mov	r8, r0
   13b8e:	b958      	cbnz	r0, 13ba8 <bt_id_del+0x114>
		LOG_ERR("Failed to remove IRK from controller");
   13b90:	4b1b      	ldr	r3, [pc, #108]	; (13c00 <bt_id_del+0x16c>)
   13b92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13b96:	617b      	str	r3, [r7, #20]
   13b98:	2302      	movs	r3, #2
   13b9a:	4816      	ldr	r0, [pc, #88]	; (13bf4 <bt_id_del+0x160>)
   13b9c:	613b      	str	r3, [r7, #16]
   13b9e:	f107 0210 	add.w	r2, r7, #16
   13ba2:	f014 fe88 	bl	288b6 <z_log_msg_static_create.constprop.0>
		goto done;
   13ba6:	e7cc      	b.n	13b42 <bt_id_del+0xae>
	return net_buf_simple_add(&buf->b, len);
   13ba8:	2107      	movs	r1, #7
   13baa:	300c      	adds	r0, #12
   13bac:	f007 fb36 	bl	1b21c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13bb0:	4649      	mov	r1, r9
   13bb2:	f014 fe3d 	bl	28830 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13bb6:	4632      	mov	r2, r6
   13bb8:	4641      	mov	r1, r8
   13bba:	f242 0028 	movw	r0, #8232	; 0x2028
   13bbe:	f7fe feab 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   13bc2:	2800      	cmp	r0, #0
   13bc4:	d1e4      	bne.n	13b90 <bt_id_del+0xfc>
	bt_dev.le.rl_entries--;
   13bc6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13bca:	3b01      	subs	r3, #1
   13bcc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   13bd0:	7a2b      	ldrb	r3, [r5, #8]
   13bd2:	f023 0304 	bic.w	r3, r3, #4
   13bd6:	722b      	strb	r3, [r5, #8]
   13bd8:	e7b3      	b.n	13b42 <bt_id_del+0xae>
   13bda:	bf00      	nop
   13bdc:	20008000 	.word	0x20008000
   13be0:	000307ae 	.word	0x000307ae
   13be4:	0002dd81 	.word	0x0002dd81
   13be8:	0003061d 	.word	0x0003061d
   13bec:	00028913 	.word	0x00028913
   13bf0:	000307c7 	.word	0x000307c7
   13bf4:	0002cce0 	.word	0x0002cce0
   13bf8:	000288ed 	.word	0x000288ed
   13bfc:	000288a1 	.word	0x000288a1
   13c00:	000307f4 	.word	0x000307f4

00013c04 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13c04:	b570      	push	{r4, r5, r6, lr}
   13c06:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13c08:	4604      	mov	r4, r0
{
   13c0a:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13c0c:	b920      	cbnz	r0, 13c18 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13c0e:	b31d      	cbz	r5, 13c58 <bt_id_create+0x54>
			return -EINVAL;
   13c10:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13c14:	b006      	add	sp, #24
   13c16:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13c18:	4920      	ldr	r1, [pc, #128]	; (13c9c <bt_id_create+0x98>)
   13c1a:	f014 fdf9 	bl	28810 <bt_addr_le_eq>
   13c1e:	2800      	cmp	r0, #0
   13c20:	d1f5      	bne.n	13c0e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13c22:	7823      	ldrb	r3, [r4, #0]
   13c24:	2b01      	cmp	r3, #1
   13c26:	d104      	bne.n	13c32 <bt_id_create+0x2e>
   13c28:	79a3      	ldrb	r3, [r4, #6]
   13c2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13c2e:	2bc0      	cmp	r3, #192	; 0xc0
   13c30:	d00a      	beq.n	13c48 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   13c32:	4b1b      	ldr	r3, [pc, #108]	; (13ca0 <bt_id_create+0x9c>)
   13c34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13c38:	9305      	str	r3, [sp, #20]
   13c3a:	2302      	movs	r3, #2
   13c3c:	4819      	ldr	r0, [pc, #100]	; (13ca4 <bt_id_create+0xa0>)
   13c3e:	aa04      	add	r2, sp, #16
   13c40:	9304      	str	r3, [sp, #16]
   13c42:	f014 fe38 	bl	288b6 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13c46:	e7e3      	b.n	13c10 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   13c48:	4620      	mov	r0, r4
   13c4a:	f7ff fd4f 	bl	136ec <id_find>
   13c4e:	2800      	cmp	r0, #0
   13c50:	dbdd      	blt.n	13c0e <bt_id_create+0xa>
			return -EALREADY;
   13c52:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13c56:	e7dd      	b.n	13c14 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13c58:	4d13      	ldr	r5, [pc, #76]	; (13ca8 <bt_id_create+0xa4>)
   13c5a:	79eb      	ldrb	r3, [r5, #7]
   13c5c:	2b01      	cmp	r3, #1
   13c5e:	d01a      	beq.n	13c96 <bt_id_create+0x92>
   13c60:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   13c64:	f014 fddc 	bl	28820 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13c68:	07c3      	lsls	r3, r0, #31
   13c6a:	d50b      	bpl.n	13c84 <bt_id_create+0x80>
	new_id = bt_dev.id_count;
   13c6c:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13c6e:	4621      	mov	r1, r4
   13c70:	4630      	mov	r0, r6
   13c72:	f7ff fd53 	bl	1371c <id_create.constprop.0>
	if (err) {
   13c76:	2800      	cmp	r0, #0
   13c78:	d1cc      	bne.n	13c14 <bt_id_create+0x10>
		bt_dev.id_count++;
   13c7a:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   13c7c:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13c7e:	3301      	adds	r3, #1
   13c80:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13c82:	e7c7      	b.n	13c14 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13c84:	2c00      	cmp	r4, #0
   13c86:	d0c3      	beq.n	13c10 <bt_id_create+0xc>
   13c88:	4620      	mov	r0, r4
   13c8a:	4904      	ldr	r1, [pc, #16]	; (13c9c <bt_id_create+0x98>)
   13c8c:	f014 fdc0 	bl	28810 <bt_addr_le_eq>
   13c90:	2800      	cmp	r0, #0
   13c92:	d0eb      	beq.n	13c6c <bt_id_create+0x68>
   13c94:	e7bc      	b.n	13c10 <bt_id_create+0xc>
		return -ENOMEM;
   13c96:	f06f 000b 	mvn.w	r0, #11
   13c9a:	e7bb      	b.n	13c14 <bt_id_create+0x10>
   13c9c:	0002fdbe 	.word	0x0002fdbe
   13ca0:	00030819 	.word	0x00030819
   13ca4:	0002cce0 	.word	0x0002cce0
   13ca8:	20008000 	.word	0x20008000

00013cac <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13cac:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   13cae:	4604      	mov	r4, r0
{
   13cb0:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   13cb2:	b960      	cbnz	r0, 13cce <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   13cb4:	4b1a      	ldr	r3, [pc, #104]	; (13d20 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   13cb6:	9307      	str	r3, [sp, #28]
   13cb8:	2302      	movs	r3, #2
   13cba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13cbe:	4819      	ldr	r0, [pc, #100]	; (13d24 <bt_id_read_public_addr+0x78>)
   13cc0:	aa06      	add	r2, sp, #24
   13cc2:	9306      	str	r3, [sp, #24]
   13cc4:	f014 fdf7 	bl	288b6 <z_log_msg_static_create.constprop.0>
		return 0U;
   13cc8:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13cca:	b008      	add	sp, #32
   13ccc:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13cce:	2100      	movs	r1, #0
   13cd0:	f241 0009 	movw	r0, #4105	; 0x1009
   13cd4:	aa01      	add	r2, sp, #4
   13cd6:	f7fe fe1f 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   13cda:	4606      	mov	r6, r0
   13cdc:	b108      	cbz	r0, 13ce2 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   13cde:	4b12      	ldr	r3, [pc, #72]	; (13d28 <bt_id_read_public_addr+0x7c>)
   13ce0:	e7e9      	b.n	13cb6 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   13ce2:	9b01      	ldr	r3, [sp, #4]
   13ce4:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13ce6:	68dd      	ldr	r5, [r3, #12]
   13ce8:	4910      	ldr	r1, [pc, #64]	; (13d2c <bt_id_read_public_addr+0x80>)
   13cea:	3501      	adds	r5, #1
   13cec:	4628      	mov	r0, r5
   13cee:	f018 f855 	bl	2bd9c <memcmp>
   13cf2:	b918      	cbnz	r0, 13cfc <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13cf4:	9801      	ldr	r0, [sp, #4]
   13cf6:	f007 f96f 	bl	1afd8 <net_buf_unref>
		return 0U;
   13cfa:	e7e5      	b.n	13cc8 <bt_id_read_public_addr+0x1c>
   13cfc:	2206      	movs	r2, #6
   13cfe:	4628      	mov	r0, r5
   13d00:	490b      	ldr	r1, [pc, #44]	; (13d30 <bt_id_read_public_addr+0x84>)
   13d02:	f018 f84b 	bl	2bd9c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13d06:	2800      	cmp	r0, #0
   13d08:	d0f4      	beq.n	13cf4 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13d0a:	4629      	mov	r1, r5
   13d0c:	1c60      	adds	r0, r4, #1
   13d0e:	f014 fd8a 	bl	28826 <bt_addr_copy>
	net_buf_unref(rsp);
   13d12:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13d14:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13d16:	f007 f95f 	bl	1afd8 <net_buf_unref>
	return 1U;
   13d1a:	2001      	movs	r0, #1
   13d1c:	e7d5      	b.n	13cca <bt_id_read_public_addr+0x1e>
   13d1e:	bf00      	nop
   13d20:	00030847 	.word	0x00030847
   13d24:	0002cce0 	.word	0x0002cce0
   13d28:	00030860 	.word	0x00030860
   13d2c:	0002fdcb 	.word	0x0002fdcb
   13d30:	0002fdc5 	.word	0x0002fdc5

00013d34 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13d34:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13d36:	4668      	mov	r0, sp
   13d38:	f7ff ffb8 	bl	13cac <bt_id_read_public_addr>
   13d3c:	4b04      	ldr	r3, [pc, #16]	; (13d50 <bt_setup_public_id_addr+0x1c>)
   13d3e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13d40:	b118      	cbz	r0, 13d4a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13d42:	4669      	mov	r1, sp
   13d44:	2000      	movs	r0, #0
   13d46:	f7ff fce9 	bl	1371c <id_create.constprop.0>
}
   13d4a:	b003      	add	sp, #12
   13d4c:	f85d fb04 	ldr.w	pc, [sp], #4
   13d50:	20008000 	.word	0x20008000

00013d54 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13d56:	4b24      	ldr	r3, [pc, #144]	; (13de8 <bt_read_static_addr+0x94>)
{
   13d58:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13d5a:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   13d5e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13d60:	07db      	lsls	r3, r3, #31
{
   13d62:	b089      	sub	sp, #36	; 0x24
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13d64:	d40d      	bmi.n	13d82 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   13d66:	4b21      	ldr	r3, [pc, #132]	; (13dec <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   13d68:	9307      	str	r3, [sp, #28]
		return 0;
   13d6a:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   13d6c:	2302      	movs	r3, #2
   13d6e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13d72:	481f      	ldr	r0, [pc, #124]	; (13df0 <bt_read_static_addr+0x9c>)
   13d74:	aa06      	add	r2, sp, #24
   13d76:	9306      	str	r3, [sp, #24]
   13d78:	f014 fd9d 	bl	288b6 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13d7c:	4620      	mov	r0, r4
   13d7e:	b009      	add	sp, #36	; 0x24
   13d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13d82:	2100      	movs	r1, #0
   13d84:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13d88:	aa01      	add	r2, sp, #4
   13d8a:	f7fe fdc5 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   13d8e:	4603      	mov	r3, r0
   13d90:	b108      	cbz	r0, 13d96 <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   13d92:	4b18      	ldr	r3, [pc, #96]	; (13df4 <bt_read_static_addr+0xa0>)
   13d94:	e7e8      	b.n	13d68 <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   13d96:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13d98:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   13d9a:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   13d9c:	7854      	ldrb	r4, [r2, #1]
   13d9e:	3202      	adds	r2, #2
   13da0:	42b4      	cmp	r4, r6
   13da2:	bf28      	it	cs
   13da4:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   13da6:	429c      	cmp	r4, r3
   13da8:	dc0e      	bgt.n	13dc8 <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   13daa:	f007 f915 	bl	1afd8 <net_buf_unref>
	if (!cnt) {
   13dae:	2c00      	cmp	r4, #0
   13db0:	d1e4      	bne.n	13d7c <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   13db2:	4b11      	ldr	r3, [pc, #68]	; (13df8 <bt_read_static_addr+0xa4>)
   13db4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13db8:	9307      	str	r3, [sp, #28]
   13dba:	2302      	movs	r3, #2
   13dbc:	480c      	ldr	r0, [pc, #48]	; (13df0 <bt_read_static_addr+0x9c>)
   13dbe:	aa06      	add	r2, sp, #24
   13dc0:	9306      	str	r3, [sp, #24]
   13dc2:	f014 fd78 	bl	288b6 <z_log_msg_static_create.constprop.0>
   13dc6:	e7d9      	b.n	13d7c <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13dc8:	4611      	mov	r1, r2
   13dca:	fb07 5603 	mla	r6, r7, r3, r5
   13dce:	f102 0c14 	add.w	ip, r2, #20
   13dd2:	f851 eb04 	ldr.w	lr, [r1], #4
   13dd6:	4561      	cmp	r1, ip
   13dd8:	f846 eb04 	str.w	lr, [r6], #4
   13ddc:	d1f9      	bne.n	13dd2 <bt_read_static_addr+0x7e>
   13dde:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   13de0:	3301      	adds	r3, #1
   13de2:	8031      	strh	r1, [r6, #0]
   13de4:	3216      	adds	r2, #22
   13de6:	e7de      	b.n	13da6 <bt_read_static_addr+0x52>
   13de8:	20008000 	.word	0x20008000
   13dec:	0003087e 	.word	0x0003087e
   13df0:	0002cce0 	.word	0x0002cce0
   13df4:	000308aa 	.word	0x000308aa
   13df8:	000308ca 	.word	0x000308ca

00013dfc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13dfc:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13dfe:	4d15      	ldr	r5, [pc, #84]	; (13e54 <bt_setup_random_id_addr+0x58>)
{
   13e00:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13e02:	79ec      	ldrb	r4, [r5, #7]
   13e04:	b92c      	cbnz	r4, 13e12 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13e06:	2101      	movs	r1, #1
   13e08:	a802      	add	r0, sp, #8
   13e0a:	f7ff ffa3 	bl	13d54 <bt_read_static_addr>
   13e0e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13e10:	b9c0      	cbnz	r0, 13e44 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13e12:	2100      	movs	r1, #0
   13e14:	4608      	mov	r0, r1
}
   13e16:	b008      	add	sp, #32
   13e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13e1c:	f7ff bef2 	b.w	13c04 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13e20:	ab02      	add	r3, sp, #8
   13e22:	fb06 3102 	mla	r1, r6, r2, r3
   13e26:	f10d 0001 	add.w	r0, sp, #1
   13e2a:	f014 fcfc 	bl	28826 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13e2e:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13e30:	4669      	mov	r1, sp
   13e32:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13e34:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13e38:	f7ff fc70 	bl	1371c <id_create.constprop.0>
				if (err) {
   13e3c:	3401      	adds	r4, #1
   13e3e:	b110      	cbz	r0, 13e46 <bt_setup_random_id_addr+0x4a>
}
   13e40:	b008      	add	sp, #32
   13e42:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13e44:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13e46:	79eb      	ldrb	r3, [r5, #7]
   13e48:	b2e2      	uxtb	r2, r4
   13e4a:	4293      	cmp	r3, r2
   13e4c:	d8e8      	bhi.n	13e20 <bt_setup_random_id_addr+0x24>
			return 0;
   13e4e:	2000      	movs	r0, #0
   13e50:	e7f6      	b.n	13e40 <bt_setup_random_id_addr+0x44>
   13e52:	bf00      	nop
   13e54:	20008000 	.word	0x20008000

00013e58 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e5c:	4690      	mov	r8, r2
   13e5e:	460e      	mov	r6, r1
   13e60:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   13e62:	4602      	mov	r2, r0
   13e64:	2800      	cmp	r0, #0
   13e66:	d04b      	beq.n	13f00 <bt_id_set_adv_own_addr+0xa8>
   13e68:	2b00      	cmp	r3, #0
   13e6a:	d049      	beq.n	13f00 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13e6c:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13e6e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13e70:	d531      	bpl.n	13ed6 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13e72:	4f25      	ldr	r7, [pc, #148]	; (13f08 <bt_id_set_adv_own_addr+0xb0>)
   13e74:	f1b8 0f00 	cmp.w	r8, #0
   13e78:	d013      	beq.n	13ea2 <bt_id_set_adv_own_addr+0x4a>
   13e7a:	0688      	lsls	r0, r1, #26
   13e7c:	d40a      	bmi.n	13e94 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13e7e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13e82:	5cfb      	ldrb	r3, [r7, r3]
   13e84:	2b01      	cmp	r3, #1
   13e86:	d015      	beq.n	13eb4 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13e88:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13e8a:	06b2      	lsls	r2, r6, #26
   13e8c:	d50f      	bpl.n	13eae <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13e8e:	f043 0302 	orr.w	r3, r3, #2
   13e92:	e00b      	b.n	13eac <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13e94:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   13e98:	0659      	lsls	r1, r3, #25
   13e9a:	d4f0      	bmi.n	13e7e <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   13e9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13ea0:	e006      	b.n	13eb0 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13ea2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13ea6:	5cfb      	ldrb	r3, [r7, r3]
   13ea8:	2b01      	cmp	r3, #1
   13eaa:	d003      	beq.n	13eb4 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   13eac:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13eae:	2000      	movs	r0, #0
}
   13eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13eb4:	2107      	movs	r1, #7
   13eb6:	fb01 7104 	mla	r1, r1, r4, r7
   13eba:	4610      	mov	r0, r2
   13ebc:	3101      	adds	r1, #1
   13ebe:	f014 fd4c 	bl	2895a <bt_id_set_adv_random_addr>
				if (err) {
   13ec2:	2800      	cmp	r0, #0
   13ec4:	d1f4      	bne.n	13eb0 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   13ec6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13eca:	5d3b      	ldrb	r3, [r7, r4]
   13ecc:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13ece:	f1b8 0f00 	cmp.w	r8, #0
   13ed2:	d0ec      	beq.n	13eae <bt_id_set_adv_own_addr+0x56>
   13ed4:	e7d9      	b.n	13e8a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13ed6:	074b      	lsls	r3, r1, #29
   13ed8:	d50e      	bpl.n	13ef8 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13eda:	4e0b      	ldr	r6, [pc, #44]	; (13f08 <bt_id_set_adv_own_addr+0xb0>)
   13edc:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13ee0:	5df3      	ldrb	r3, [r6, r7]
   13ee2:	2b01      	cmp	r3, #1
   13ee4:	d1e2      	bne.n	13eac <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13ee6:	2107      	movs	r1, #7
   13ee8:	fb11 3104 	smlabb	r1, r1, r4, r3
   13eec:	4431      	add	r1, r6
   13eee:	f014 fd34 	bl	2895a <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   13ef2:	5df3      	ldrb	r3, [r6, r7]
   13ef4:	702b      	strb	r3, [r5, #0]
		if (err) {
   13ef6:	e7db      	b.n	13eb0 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   13ef8:	f014 fd37 	bl	2896a <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13efc:	2301      	movs	r3, #1
   13efe:	e7f9      	b.n	13ef4 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13f00:	f06f 0015 	mvn.w	r0, #21
   13f04:	e7d4      	b.n	13eb0 <bt_id_set_adv_own_addr+0x58>
   13f06:	bf00      	nop
   13f08:	20008000 	.word	0x20008000

00013f0c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f10:	460c      	mov	r4, r1
   13f12:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13f14:	2120      	movs	r1, #32
{
   13f16:	4692      	mov	sl, r2
   13f18:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13f1a:	f7fe fcaf 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   13f1e:	4605      	mov	r5, r0
   13f20:	2800      	cmp	r0, #0
   13f22:	d05b      	beq.n	13fdc <hci_set_ad+0xd0>
   13f24:	2120      	movs	r1, #32
   13f26:	300c      	adds	r0, #12
   13f28:	f007 f978 	bl	1b21c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13f2c:	2220      	movs	r2, #32
   13f2e:	4681      	mov	r9, r0
   13f30:	2100      	movs	r1, #0
   13f32:	f017 ff7d 	bl	2be30 <memset>
	uint8_t set_data_len = 0;
   13f36:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13f38:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   13f3c:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   13f40:	2300      	movs	r3, #0
   13f42:	f8d4 8000 	ldr.w	r8, [r4]
   13f46:	6862      	ldr	r2, [r4, #4]
   13f48:	4293      	cmp	r3, r2
   13f4a:	d30c      	bcc.n	13f66 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   13f4c:	3408      	adds	r4, #8
   13f4e:	45a2      	cmp	sl, r4
   13f50:	d1f6      	bne.n	13f40 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13f52:	2200      	movs	r2, #0
   13f54:	4629      	mov	r1, r5
   13f56:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   13f58:	f889 6000 	strb.w	r6, [r9]
}
   13f5c:	b009      	add	sp, #36	; 0x24
   13f5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13f62:	f7fe bcd9 	b.w	12918 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   13f66:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13f6a:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   13f6c:	1811      	adds	r1, r2, r0
   13f6e:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   13f70:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13f74:	d91b      	bls.n	13fae <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13f76:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13f7a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13f7e:	d101      	bne.n	13f84 <hci_set_ad+0x78>
   13f80:	2a00      	cmp	r2, #0
   13f82:	dc12      	bgt.n	13faa <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   13f84:	4b17      	ldr	r3, [pc, #92]	; (13fe4 <hci_set_ad+0xd8>)
   13f86:	9307      	str	r3, [sp, #28]
   13f88:	2302      	movs	r3, #2
   13f8a:	9306      	str	r3, [sp, #24]
   13f8c:	2300      	movs	r3, #0
   13f8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13f92:	4815      	ldr	r0, [pc, #84]	; (13fe8 <hci_set_ad+0xdc>)
   13f94:	aa06      	add	r2, sp, #24
   13f96:	f7fa fcdd 	bl	e954 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   13f9a:	4628      	mov	r0, r5
   13f9c:	f007 f81c 	bl	1afd8 <net_buf_unref>
					return -EINVAL;
   13fa0:	f06f 0015 	mvn.w	r0, #21
}
   13fa4:	b009      	add	sp, #36	; 0x24
   13fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13faa:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13fae:	b2d7      	uxtb	r7, r2
   13fb0:	1c79      	adds	r1, r7, #1
   13fb2:	f80b 1006 	strb.w	r1, [fp, r6]
   13fb6:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   13fb8:	b2c9      	uxtb	r1, r1
   13fba:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13fbe:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13fc2:	fa5b f080 	uxtab	r0, fp, r0
   13fc6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   13fc8:	3702      	adds	r7, #2
   13fca:	f017 fef7 	bl	2bdbc <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13fce:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13fd0:	4437      	add	r7, r6
   13fd2:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   13fd4:	3301      	adds	r3, #1
   13fd6:	f108 0808 	add.w	r8, r8, #8
   13fda:	e7b4      	b.n	13f46 <hci_set_ad+0x3a>
		return -ENOBUFS;
   13fdc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13fe0:	e7e0      	b.n	13fa4 <hci_set_ad+0x98>
   13fe2:	bf00      	nop
   13fe4:	000308f9 	.word	0x000308f9
   13fe8:	0002cc98 	.word	0x0002cc98

00013fec <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13fec:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13fee:	4605      	mov	r5, r0
   13ff0:	4b16      	ldr	r3, [pc, #88]	; (1404c <le_adv_start_add_conn+0x60>)
   13ff2:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   13ff6:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   13ff8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13ffc:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   13ffe:	2207      	movs	r2, #7
   14000:	4628      	mov	r0, r5
   14002:	4913      	ldr	r1, [pc, #76]	; (14050 <le_adv_start_add_conn+0x64>)
   14004:	f017 feca 	bl	2bd9c <memcmp>
   14008:	4603      	mov	r3, r0
   1400a:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1400c:	b96b      	cbnz	r3, 1402a <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1400e:	4911      	ldr	r1, [pc, #68]	; (14054 <le_adv_start_add_conn+0x68>)
   14010:	f001 fa38 	bl	15484 <bt_conn_add_le>
		if (!conn) {
   14014:	4604      	mov	r4, r0
   14016:	b910      	cbnz	r0, 1401e <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   14018:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1401c:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1401e:	2104      	movs	r1, #4
   14020:	f000 ffaa 	bl	14f78 <bt_conn_set_state>
		return 0;
   14024:	2000      	movs	r0, #0
		*out_conn = conn;
   14026:	6034      	str	r4, [r6, #0]
   14028:	e7f8      	b.n	1401c <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1402a:	4629      	mov	r1, r5
   1402c:	f001 fa62 	bl	154f4 <bt_conn_exists_le>
   14030:	b940      	cbnz	r0, 14044 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   14032:	7820      	ldrb	r0, [r4, #0]
   14034:	4629      	mov	r1, r5
   14036:	f001 fa25 	bl	15484 <bt_conn_add_le>
	if (!conn) {
   1403a:	4604      	mov	r4, r0
   1403c:	2800      	cmp	r0, #0
   1403e:	d0eb      	beq.n	14018 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14040:	2105      	movs	r1, #5
   14042:	e7ed      	b.n	14020 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   14044:	f06f 0015 	mvn.w	r0, #21
   14048:	e7e8      	b.n	1401c <le_adv_start_add_conn+0x30>
   1404a:	bf00      	nop
   1404c:	20008000 	.word	0x20008000
   14050:	0002fdbe 	.word	0x0002fdbe
   14054:	0002fdb7 	.word	0x0002fdb7

00014058 <valid_adv_param>:
{
   14058:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1405a:	6843      	ldr	r3, [r0, #4]
{
   1405c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1405e:	0558      	lsls	r0, r3, #21
   14060:	d501      	bpl.n	14066 <valid_adv_param+0xe>
		return false;
   14062:	2000      	movs	r0, #0
}
   14064:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14066:	6922      	ldr	r2, [r4, #16]
   14068:	b10a      	cbz	r2, 1406e <valid_adv_param+0x16>
   1406a:	07d9      	lsls	r1, r3, #31
   1406c:	d5f9      	bpl.n	14062 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1406e:	4d19      	ldr	r5, [pc, #100]	; (140d4 <valid_adv_param+0x7c>)
   14070:	7820      	ldrb	r0, [r4, #0]
   14072:	79eb      	ldrb	r3, [r5, #7]
   14074:	4283      	cmp	r3, r0
   14076:	d9f4      	bls.n	14062 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   14078:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1407c:	2207      	movs	r2, #7
   1407e:	4916      	ldr	r1, [pc, #88]	; (140d8 <valid_adv_param+0x80>)
   14080:	4428      	add	r0, r5
   14082:	f017 fe8b 	bl	2bd9c <memcmp>
	if (param->id >= bt_dev.id_count ||
   14086:	2800      	cmp	r0, #0
   14088:	d0eb      	beq.n	14062 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1408a:	6860      	ldr	r0, [r4, #4]
   1408c:	07c2      	lsls	r2, r0, #31
   1408e:	d406      	bmi.n	1409e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14090:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   14094:	2b08      	cmp	r3, #8
   14096:	d802      	bhi.n	1409e <valid_adv_param+0x46>
   14098:	68a3      	ldr	r3, [r4, #8]
   1409a:	2b9f      	cmp	r3, #159	; 0x9f
   1409c:	d9e1      	bls.n	14062 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1409e:	f010 0f30 	tst.w	r0, #48	; 0x30
   140a2:	d002      	beq.n	140aa <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   140a4:	6923      	ldr	r3, [r4, #16]
   140a6:	2b00      	cmp	r3, #0
   140a8:	d0db      	beq.n	14062 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   140aa:	06c3      	lsls	r3, r0, #27
   140ac:	d401      	bmi.n	140b2 <valid_adv_param+0x5a>
   140ae:	6923      	ldr	r3, [r4, #16]
   140b0:	b943      	cbnz	r3, 140c4 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   140b2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   140b6:	429a      	cmp	r2, r3
   140b8:	d8d3      	bhi.n	14062 <valid_adv_param+0xa>
   140ba:	2a1f      	cmp	r2, #31
   140bc:	d9d1      	bls.n	14062 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   140be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   140c2:	d8ce      	bhi.n	14062 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   140c4:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   140c8:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   140cc:	bf18      	it	ne
   140ce:	2001      	movne	r0, #1
   140d0:	e7c8      	b.n	14064 <valid_adv_param+0xc>
   140d2:	bf00      	nop
   140d4:	20008000 	.word	0x20008000
   140d8:	0002fdbe 	.word	0x0002fdbe

000140dc <bt_le_ext_adv_foreach>:
{
   140dc:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   140de:	4801      	ldr	r0, [pc, #4]	; (140e4 <bt_le_ext_adv_foreach+0x8>)
   140e0:	4718      	bx	r3
   140e2:	bf00      	nop
   140e4:	20008018 	.word	0x20008018

000140e8 <bt_le_adv_lookup_legacy>:
}
   140e8:	4800      	ldr	r0, [pc, #0]	; (140ec <bt_le_adv_lookup_legacy+0x4>)
   140ea:	4770      	bx	lr
   140ec:	20008018 	.word	0x20008018

000140f0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   140f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140f4:	b093      	sub	sp, #76	; 0x4c
   140f6:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   140f8:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   140fa:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   140fe:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   14100:	ebba 0403 	subs.w	r4, sl, r3
   14104:	4890      	ldr	r0, [pc, #576]	; (14348 <bt_le_adv_start_legacy+0x258>)
   14106:	bf18      	it	ne
   14108:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   1410a:	9307      	str	r3, [sp, #28]
   1410c:	f014 fc69 	bl	289e2 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14110:	0747      	lsls	r7, r0, #29
{
   14112:	460d      	mov	r5, r1
   14114:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14116:	f140 810d 	bpl.w	14334 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1411a:	4608      	mov	r0, r1
   1411c:	f7ff ff9c 	bl	14058 <valid_adv_param>
   14120:	b928      	cbnz	r0, 1412e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   14122:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14126:	4620      	mov	r0, r4
   14128:	b013      	add	sp, #76	; 0x4c
   1412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1412e:	4628      	mov	r0, r5
   14130:	f014 fc32 	bl	28998 <bt_id_adv_random_addr_check>
   14134:	4681      	mov	r9, r0
   14136:	2800      	cmp	r0, #0
   14138:	d0f3      	beq.n	14122 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1413a:	f106 0810 	add.w	r8, r6, #16
   1413e:	4640      	mov	r0, r8
   14140:	f014 fc4f 	bl	289e2 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14144:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   14148:	0600      	lsls	r0, r0, #24
   1414a:	f100 80f6 	bmi.w	1433a <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1414e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   14152:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14156:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14158:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1415a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1415e:	68eb      	ldr	r3, [r5, #12]
   14160:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   14164:	f014 fc2e 	bl	289c4 <get_adv_channel_map>
	if (adv->id != param->id) {
   14168:	7832      	ldrb	r2, [r6, #0]
   1416a:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1416c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   14170:	429a      	cmp	r2, r3
   14172:	d004      	beq.n	1417e <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14174:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   14178:	4873      	ldr	r0, [pc, #460]	; (14348 <bt_le_adv_start_legacy+0x258>)
   1417a:	f014 fc35 	bl	289e8 <atomic_and>
	adv->id = param->id;
   1417e:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14180:	4a72      	ldr	r2, [pc, #456]	; (1434c <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   14182:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   14184:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14188:	4630      	mov	r0, r6
   1418a:	4622      	mov	r2, r4
   1418c:	6869      	ldr	r1, [r5, #4]
   1418e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   14192:	f7ff fe61 	bl	13e58 <bt_id_set_adv_own_addr>
	if (err) {
   14196:	4604      	mov	r4, r0
   14198:	2800      	cmp	r0, #0
   1419a:	d1c4      	bne.n	14126 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1419c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   141a0:	f1ba 0f00 	cmp.w	sl, #0
   141a4:	d013      	beq.n	141ce <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   141a6:	6929      	ldr	r1, [r5, #16]
   141a8:	f014 fc29 	bl	289fe <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   141ac:	4628      	mov	r0, r5
   141ae:	f014 fcb2 	bl	28b16 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   141b2:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   141b4:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   141b6:	07d9      	lsls	r1, r3, #31
   141b8:	d416      	bmi.n	141e8 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   141ba:	059b      	lsls	r3, r3, #22
   141bc:	d403      	bmi.n	141c6 <bt_le_adv_start_legacy+0xd6>
   141be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   141c0:	b90b      	cbnz	r3, 141c6 <bt_le_adv_start_legacy+0xd6>
   141c2:	2f02      	cmp	r7, #2
   141c4:	d159      	bne.n	1427a <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   141c6:	2302      	movs	r3, #2
   141c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   141cc:	e019      	b.n	14202 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   141ce:	4960      	ldr	r1, [pc, #384]	; (14350 <bt_le_adv_start_legacy+0x260>)
   141d0:	f014 fc15 	bl	289fe <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   141d4:	4628      	mov	r0, r5
   141d6:	f014 fc9e 	bl	28b16 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   141da:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   141dc:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   141de:	07da      	lsls	r2, r3, #31
   141e0:	d5eb      	bpl.n	141ba <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   141e2:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   141e6:	e00c      	b.n	14202 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   141e8:	f013 0f10 	tst.w	r3, #16
   141ec:	bf0c      	ite	eq
   141ee:	2301      	moveq	r3, #1
   141f0:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   141f2:	6929      	ldr	r1, [r5, #16]
   141f4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   141f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   141fc:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   141fe:	f014 fbfe 	bl	289fe <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   14202:	210f      	movs	r1, #15
   14204:	f242 0006 	movw	r0, #8198	; 0x2006
   14208:	f7fe fb38 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   1420c:	4604      	mov	r4, r0
   1420e:	2800      	cmp	r0, #0
   14210:	f000 8096 	beq.w	14340 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14214:	220f      	movs	r2, #15
   14216:	a908      	add	r1, sp, #32
   14218:	300c      	adds	r0, #12
   1421a:	f016 f885 	bl	2a328 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1421e:	4621      	mov	r1, r4
   14220:	2200      	movs	r2, #0
   14222:	f242 0006 	movw	r0, #8198	; 0x2006
   14226:	f7fe fb77 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   1422a:	4604      	mov	r4, r0
   1422c:	2800      	cmp	r0, #0
   1422e:	f47f af7a 	bne.w	14126 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   14232:	f1ba 0f00 	cmp.w	sl, #0
   14236:	d026      	beq.n	14286 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14238:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1423a:	07dc      	lsls	r4, r3, #31
   1423c:	d431      	bmi.n	142a2 <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1423e:	2101      	movs	r1, #1
   14240:	4630      	mov	r0, r6
   14242:	f014 fc78 	bl	28b36 <bt_le_adv_set_enable_legacy>
	if (err) {
   14246:	4604      	mov	r4, r0
   14248:	2800      	cmp	r0, #0
   1424a:	d06b      	beq.n	14324 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   1424c:	4b41      	ldr	r3, [pc, #260]	; (14354 <bt_le_adv_start_legacy+0x264>)
   1424e:	9311      	str	r3, [sp, #68]	; 0x44
   14250:	2302      	movs	r3, #2
   14252:	9310      	str	r3, [sp, #64]	; 0x40
   14254:	2300      	movs	r3, #0
   14256:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1425a:	483f      	ldr	r0, [pc, #252]	; (14358 <bt_le_adv_start_legacy+0x268>)
   1425c:	aa10      	add	r2, sp, #64	; 0x40
   1425e:	f7fa fb79 	bl	e954 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14262:	9d07      	ldr	r5, [sp, #28]
   14264:	2d00      	cmp	r5, #0
   14266:	f43f af5e 	beq.w	14126 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1426a:	4628      	mov	r0, r5
   1426c:	2100      	movs	r1, #0
   1426e:	f000 fe83 	bl	14f78 <bt_conn_set_state>
			bt_conn_unref(conn);
   14272:	4628      	mov	r0, r5
   14274:	f000 fe48 	bl	14f08 <bt_conn_unref>
   14278:	e755      	b.n	14126 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1427a:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1427c:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14280:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14284:	e7bd      	b.n	14202 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14288:	4659      	mov	r1, fp
   1428a:	9300      	str	r3, [sp, #0]
   1428c:	4630      	mov	r0, r6
   1428e:	e9cd 9701 	strd	r9, r7, [sp, #4]
   14292:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   14294:	9a05      	ldr	r2, [sp, #20]
   14296:	f014 fbcc 	bl	28a32 <le_adv_update.constprop.0>
		if (err) {
   1429a:	4604      	mov	r4, r0
   1429c:	2800      	cmp	r0, #0
   1429e:	d0cb      	beq.n	14238 <bt_le_adv_start_legacy+0x148>
   142a0:	e741      	b.n	14126 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   142a2:	4630      	mov	r0, r6
   142a4:	a907      	add	r1, sp, #28
   142a6:	f7ff fea1 	bl	13fec <le_adv_start_add_conn>
		if (err) {
   142aa:	4604      	mov	r4, r0
   142ac:	2800      	cmp	r0, #0
   142ae:	d0c6      	beq.n	1423e <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   142b0:	f110 0f0c 	cmn.w	r0, #12
   142b4:	f47f af37 	bne.w	14126 <bt_le_adv_start_legacy+0x36>
   142b8:	f1ba 0f00 	cmp.w	sl, #0
   142bc:	f47f af33 	bne.w	14126 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   142c0:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   142c2:	0798      	lsls	r0, r3, #30
   142c4:	f53f af2f 	bmi.w	14126 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   142c8:	686c      	ldr	r4, [r5, #4]
   142ca:	f084 0402 	eor.w	r4, r4, #2
   142ce:	f3c4 0440 	ubfx	r4, r4, #1, #1
   142d2:	f004 0201 	and.w	r2, r4, #1
   142d6:	210e      	movs	r1, #14
   142d8:	4640      	mov	r0, r8
   142da:	f014 fb97 	bl	28a0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   142de:	1e7b      	subs	r3, r7, #1
   142e0:	425a      	negs	r2, r3
   142e2:	415a      	adcs	r2, r3
   142e4:	2108      	movs	r1, #8
   142e6:	4640      	mov	r0, r8
   142e8:	f014 fb90 	bl	28a0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   142ec:	1eb9      	subs	r1, r7, #2
   142ee:	424a      	negs	r2, r1
   142f0:	414a      	adcs	r2, r1
   142f2:	4640      	mov	r0, r8
   142f4:	2109      	movs	r1, #9
   142f6:	f014 fb89 	bl	28a0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   142fa:	686a      	ldr	r2, [r5, #4]
   142fc:	210a      	movs	r1, #10
   142fe:	4640      	mov	r0, r8
   14300:	f002 0201 	and.w	r2, r2, #1
   14304:	f014 fb82 	bl	28a0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14308:	464a      	mov	r2, r9
   1430a:	210b      	movs	r1, #11
   1430c:	4640      	mov	r0, r8
   1430e:	f014 fb7d 	bl	28a0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   14312:	686a      	ldr	r2, [r5, #4]
   14314:	210d      	movs	r1, #13
   14316:	4640      	mov	r0, r8
   14318:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1431c:	f014 fb76 	bl	28a0c <atomic_set_bit_to>
	return 0;
   14320:	2400      	movs	r4, #0
   14322:	e700      	b.n	14126 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14324:	9807      	ldr	r0, [sp, #28]
   14326:	b108      	cbz	r0, 1432c <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   14328:	f000 fdee 	bl	14f08 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1432c:	f1ba 0f00 	cmp.w	sl, #0
   14330:	d1cf      	bne.n	142d2 <bt_le_adv_start_legacy+0x1e2>
   14332:	e7c9      	b.n	142c8 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   14334:	f06f 040a 	mvn.w	r4, #10
   14338:	e6f5      	b.n	14126 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1433a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1433e:	e6f2      	b.n	14126 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   14340:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14344:	e6ef      	b.n	14126 <bt_le_adv_start_legacy+0x36>
   14346:	bf00      	nop
   14348:	200080cc 	.word	0x200080cc
   1434c:	20008000 	.word	0x20008000
   14350:	0002fdbe 	.word	0x0002fdbe
   14354:	00030912 	.word	0x00030912
   14358:	0002cc98 	.word	0x0002cc98

0001435c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1435c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1435e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14360:	9a06      	ldr	r2, [sp, #24]
{
   14362:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14364:	e9cd 3200 	strd	r3, r2, [sp]
   14368:	462b      	mov	r3, r5
   1436a:	460a      	mov	r2, r1
   1436c:	4601      	mov	r1, r0
   1436e:	4811      	ldr	r0, [pc, #68]	; (143b4 <bt_le_adv_start+0x58>)
   14370:	f7ff febe 	bl	140f0 <bt_le_adv_start_legacy>
   14374:	4621      	mov	r1, r4
   14376:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   14378:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1437a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1437e:	429d      	cmp	r5, r3
   14380:	d102      	bne.n	14388 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   14382:	4630      	mov	r0, r6
   14384:	b002      	add	sp, #8
   14386:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   14388:	880a      	ldrh	r2, [r1, #0]
   1438a:	4282      	cmp	r2, r0
   1438c:	d104      	bne.n	14398 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1438e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   14390:	b112      	cbz	r2, 14398 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   14392:	7812      	ldrb	r2, [r2, #0]
   14394:	07d2      	lsls	r2, r2, #31
   14396:	d402      	bmi.n	1439e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   14398:	3301      	adds	r3, #1
   1439a:	3108      	adds	r1, #8
   1439c:	e7ef      	b.n	1437e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1439e:	4906      	ldr	r1, [pc, #24]	; (143b8 <bt_le_adv_start+0x5c>)
   143a0:	4806      	ldr	r0, [pc, #24]	; (143bc <bt_le_adv_start+0x60>)
   143a2:	f00e f8f9 	bl	22598 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   143a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   143aa:	2300      	movs	r3, #0
   143ac:	4803      	ldr	r0, [pc, #12]	; (143bc <bt_le_adv_start+0x60>)
   143ae:	f00e fa0f 	bl	227d0 <k_work_reschedule>
   143b2:	e7e6      	b.n	14382 <bt_le_adv_start+0x26>
   143b4:	20008018 	.word	0x20008018
   143b8:	00014445 	.word	0x00014445
   143bc:	20008030 	.word	0x20008030

000143c0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   143c0:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   143c2:	481a      	ldr	r0, [pc, #104]	; (1442c <bt_le_adv_stop+0x6c>)
   143c4:	f014 fbde 	bl	28b84 <bt_le_lim_adv_cancel_timeout>
   143c8:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   143cc:	4818      	ldr	r0, [pc, #96]	; (14430 <bt_le_adv_stop+0x70>)
   143ce:	f014 fb0b 	bl	289e8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   143d2:	4817      	ldr	r0, [pc, #92]	; (14430 <bt_le_adv_stop+0x70>)
   143d4:	f014 fb05 	bl	289e2 <atomic_get>
   143d8:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   143da:	061a      	lsls	r2, r3, #24
   143dc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   143e0:	d523      	bpl.n	1442a <bt_le_adv_stop+0x6a>
   143e2:	4813      	ldr	r0, [pc, #76]	; (14430 <bt_le_adv_stop+0x70>)
   143e4:	f014 fafd 	bl	289e2 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   143e8:	0543      	lsls	r3, r0, #21
   143ea:	d514      	bpl.n	14416 <bt_le_adv_stop+0x56>
   143ec:	2207      	movs	r2, #7
   143ee:	4911      	ldr	r1, [pc, #68]	; (14434 <bt_le_adv_stop+0x74>)
   143f0:	4811      	ldr	r0, [pc, #68]	; (14438 <bt_le_adv_stop+0x78>)
   143f2:	f017 fcd3 	bl	2bd9c <memcmp>
   143f6:	4b11      	ldr	r3, [pc, #68]	; (1443c <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   143f8:	b998      	cbnz	r0, 14422 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   143fa:	2204      	movs	r2, #4
   143fc:	4910      	ldr	r1, [pc, #64]	; (14440 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   143fe:	7e18      	ldrb	r0, [r3, #24]
   14400:	f001 f8a8 	bl	15554 <bt_conn_lookup_state_le>
   14404:	4604      	mov	r4, r0
	if (conn) {
   14406:	b130      	cbz	r0, 14416 <bt_le_adv_stop+0x56>
		conn->err = status;
   14408:	2100      	movs	r1, #0
   1440a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1440c:	f000 fdb4 	bl	14f78 <bt_conn_set_state>
		bt_conn_unref(conn);
   14410:	4620      	mov	r0, r4
   14412:	f000 fd79 	bl	14f08 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   14416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1441a:	2100      	movs	r1, #0
   1441c:	4803      	ldr	r0, [pc, #12]	; (1442c <bt_le_adv_stop+0x6c>)
   1441e:	f014 bb8a 	b.w	28b36 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14422:	2205      	movs	r2, #5
   14424:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14428:	e7e9      	b.n	143fe <bt_le_adv_stop+0x3e>
}
   1442a:	bd10      	pop	{r4, pc}
   1442c:	20008018 	.word	0x20008018
   14430:	20008028 	.word	0x20008028
   14434:	0002fdbe 	.word	0x0002fdbe
   14438:	20008021 	.word	0x20008021
   1443c:	20008000 	.word	0x20008000
   14440:	0002fdb7 	.word	0x0002fdb7

00014444 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   14444:	b580      	push	{r7, lr}
   14446:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   14448:	f7ff ffba 	bl	143c0 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   1444c:	b088      	sub	sp, #32
   1444e:	466a      	mov	r2, sp
   14450:	4b06      	ldr	r3, [pc, #24]	; (1446c <adv_timeout+0x28>)
   14452:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14456:	2303      	movs	r3, #3
   14458:	f842 3f10 	str.w	r3, [r2, #16]!
   1445c:	2300      	movs	r3, #0
   1445e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14462:	4803      	ldr	r0, [pc, #12]	; (14470 <adv_timeout+0x2c>)
   14464:	f7fa fa76 	bl	e954 <z_impl_z_log_msg_static_create>
}
   14468:	46bd      	mov	sp, r7
   1446a:	bd80      	pop	{r7, pc}
   1446c:	0003092d 	.word	0x0003092d
   14470:	0002cc98 	.word	0x0002cc98

00014474 <bt_le_adv_resume>:
{
   14474:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14476:	4c1e      	ldr	r4, [pc, #120]	; (144f0 <bt_le_adv_resume+0x7c>)
   14478:	4620      	mov	r0, r4
   1447a:	f014 fab2 	bl	289e2 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1447e:	0440      	lsls	r0, r0, #17
   14480:	d534      	bpl.n	144ec <bt_le_adv_resume+0x78>
   14482:	4620      	mov	r0, r4
   14484:	f014 faad 	bl	289e2 <atomic_get>
   14488:	0601      	lsls	r1, r0, #24
   1448a:	d42f      	bmi.n	144ec <bt_le_adv_resume+0x78>
   1448c:	4620      	mov	r0, r4
   1448e:	f014 faa8 	bl	289e2 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14492:	0542      	lsls	r2, r0, #21
   14494:	d52a      	bpl.n	144ec <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   14496:	a901      	add	r1, sp, #4
   14498:	f1a4 0010 	sub.w	r0, r4, #16
   1449c:	f7ff fda6 	bl	13fec <le_adv_start_add_conn>
	if (err) {
   144a0:	4605      	mov	r5, r0
   144a2:	bb18      	cbnz	r0, 144ec <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   144a4:	2101      	movs	r1, #1
   144a6:	f1a4 0010 	sub.w	r0, r4, #16
   144aa:	f014 fb44 	bl	28b36 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   144ae:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   144b0:	b928      	cbnz	r0, 144be <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   144b2:	4630      	mov	r0, r6
}
   144b4:	b002      	add	sp, #8
   144b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   144ba:	f000 bd25 	b.w	14f08 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   144be:	4629      	mov	r1, r5
   144c0:	4630      	mov	r0, r6
   144c2:	f000 fd59 	bl	14f78 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   144c6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   144ca:	4620      	mov	r0, r4
   144cc:	f014 fa8c 	bl	289e8 <atomic_and>
   144d0:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   144d2:	4630      	mov	r0, r6
   144d4:	f000 fd18 	bl	14f08 <bt_conn_unref>
	if (persist_paused) {
   144d8:	046b      	lsls	r3, r5, #17
   144da:	d507      	bpl.n	144ec <bt_le_adv_resume+0x78>
   144dc:	e8d4 3fef 	ldaex	r3, [r4]
   144e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   144e4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   144e8:	2a00      	cmp	r2, #0
   144ea:	d1f7      	bne.n	144dc <bt_le_adv_resume+0x68>
}
   144ec:	b002      	add	sp, #8
   144ee:	bd70      	pop	{r4, r5, r6, pc}
   144f0:	20008028 	.word	0x20008028

000144f4 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   144f4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   144f6:	b508      	push	{r3, lr}
   144f8:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   144fc:	d910      	bls.n	14520 <sys_memcpy_swap.constprop.0+0x2c>
   144fe:	4298      	cmp	r0, r3
   14500:	d213      	bcs.n	1452a <sys_memcpy_swap.constprop.0+0x36>
   14502:	490e      	ldr	r1, [pc, #56]	; (1453c <sys_memcpy_swap.constprop.0+0x48>)
   14504:	f240 2315 	movw	r3, #533	; 0x215
   14508:	4a0d      	ldr	r2, [pc, #52]	; (14540 <sys_memcpy_swap.constprop.0+0x4c>)
   1450a:	480e      	ldr	r0, [pc, #56]	; (14544 <sys_memcpy_swap.constprop.0+0x50>)
   1450c:	f012 fc31 	bl	26d72 <assert_print>
   14510:	480d      	ldr	r0, [pc, #52]	; (14548 <sys_memcpy_swap.constprop.0+0x54>)
   14512:	f012 fc2e 	bl	26d72 <assert_print>
   14516:	f240 2115 	movw	r1, #533	; 0x215
   1451a:	4809      	ldr	r0, [pc, #36]	; (14540 <sys_memcpy_swap.constprop.0+0x4c>)
   1451c:	f012 fc22 	bl	26d64 <assert_post_action>
   14520:	d0ef      	beq.n	14502 <sys_memcpy_swap.constprop.0+0xe>
   14522:	f100 0210 	add.w	r2, r0, #16
   14526:	4291      	cmp	r1, r2
   14528:	e7ea      	b.n	14500 <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   1452a:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1452c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   14530:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   14532:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   14536:	d1f9      	bne.n	1452c <sys_memcpy_swap.constprop.0+0x38>
	}
}
   14538:	bd08      	pop	{r3, pc}
   1453a:	bf00      	nop
   1453c:	00030985 	.word	0x00030985
   14540:	00030953 	.word	0x00030953
   14544:	0002dd81 	.word	0x0002dd81
   14548:	000309dc 	.word	0x000309dc

0001454c <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1454c:	b530      	push	{r4, r5, lr}
   1454e:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   14550:	2120      	movs	r1, #32
   14552:	a80a      	add	r0, sp, #40	; 0x28
   14554:	f7fe fa84 	bl	12a60 <bt_hci_le_rand>
	if (ret) {
   14558:	4604      	mov	r4, r0
   1455a:	bb18      	cbnz	r0, 145a4 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   1455c:	f017 fb15 	bl	2bb8a <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   14560:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   14564:	fba0 2305 	umull	r2, r3, r0, r5
   14568:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1456c:	2308      	movs	r3, #8
   1456e:	0bd2      	lsrs	r2, r2, #15
   14570:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   14574:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   14576:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1457a:	9300      	str	r3, [sp, #0]
   1457c:	2220      	movs	r2, #32
   1457e:	480b      	ldr	r0, [pc, #44]	; (145ac <prng_reseed.constprop.0+0x60>)
   14580:	446b      	add	r3, sp
   14582:	a90a      	add	r1, sp, #40	; 0x28
   14584:	f013 fecf 	bl	28326 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   14588:	b960      	cbnz	r0, 145a4 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   1458a:	4b09      	ldr	r3, [pc, #36]	; (145b0 <prng_reseed.constprop.0+0x64>)
   1458c:	9309      	str	r3, [sp, #36]	; 0x24
   1458e:	2302      	movs	r3, #2
   14590:	9308      	str	r3, [sp, #32]
   14592:	4623      	mov	r3, r4
   14594:	f06f 0404 	mvn.w	r4, #4
   14598:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1459c:	4805      	ldr	r0, [pc, #20]	; (145b4 <prng_reseed.constprop.0+0x68>)
   1459e:	aa08      	add	r2, sp, #32
   145a0:	f7fa f9d8 	bl	e954 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   145a4:	4620      	mov	r0, r4
   145a6:	b013      	add	sp, #76	; 0x4c
   145a8:	bd30      	pop	{r4, r5, pc}
   145aa:	bf00      	nop
   145ac:	20009c18 	.word	0x20009c18
   145b0:	00030a0e 	.word	0x00030a0e
   145b4:	0002ccd8 	.word	0x0002ccd8

000145b8 <prng_init>:

int prng_init(void)
{
   145b8:	b510      	push	{r4, lr}
   145ba:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   145bc:	2108      	movs	r1, #8
   145be:	4668      	mov	r0, sp
   145c0:	f7fe fa4e 	bl	12a60 <bt_hci_le_rand>
	if (ret) {
   145c4:	4604      	mov	r4, r0
   145c6:	b990      	cbnz	r0, 145ee <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   145c8:	2208      	movs	r2, #8
   145ca:	4669      	mov	r1, sp
   145cc:	480b      	ldr	r0, [pc, #44]	; (145fc <prng_init+0x44>)
   145ce:	f013 fe8a 	bl	282e6 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   145d2:	b978      	cbnz	r0, 145f4 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   145d4:	4b0a      	ldr	r3, [pc, #40]	; (14600 <prng_init+0x48>)
   145d6:	9307      	str	r3, [sp, #28]
   145d8:	2302      	movs	r3, #2
   145da:	9306      	str	r3, [sp, #24]
   145dc:	4623      	mov	r3, r4
		return -EIO;
   145de:	f06f 0404 	mvn.w	r4, #4
   145e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   145e6:	4807      	ldr	r0, [pc, #28]	; (14604 <prng_init+0x4c>)
   145e8:	aa06      	add	r2, sp, #24
   145ea:	f7fa f9b3 	bl	e954 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   145ee:	4620      	mov	r0, r4
   145f0:	b008      	add	sp, #32
   145f2:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   145f4:	f7ff ffaa 	bl	1454c <prng_reseed.constprop.0>
   145f8:	4604      	mov	r4, r0
   145fa:	e7f8      	b.n	145ee <prng_init+0x36>
   145fc:	20009c18 	.word	0x20009c18
   14600:	00030a25 	.word	0x00030a25
   14604:	0002ccd8 	.word	0x0002ccd8

00014608 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   14608:	b538      	push	{r3, r4, r5, lr}
   1460a:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1460c:	4604      	mov	r4, r0
   1460e:	b198      	cbz	r0, 14638 <bt_rand+0x30>
   14610:	b191      	cbz	r1, 14638 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   14612:	4a0b      	ldr	r2, [pc, #44]	; (14640 <bt_rand+0x38>)
   14614:	f013 fea0 	bl	28358 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   14618:	1c43      	adds	r3, r0, #1
   1461a:	d107      	bne.n	1462c <bt_rand+0x24>
		ret = prng_reseed(&prng);
   1461c:	f7ff ff96 	bl	1454c <prng_reseed.constprop.0>
		if (ret) {
   14620:	b948      	cbnz	r0, 14636 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   14622:	4629      	mov	r1, r5
   14624:	4620      	mov	r0, r4
   14626:	4a06      	ldr	r2, [pc, #24]	; (14640 <bt_rand+0x38>)
   14628:	f013 fe96 	bl	28358 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   1462c:	2801      	cmp	r0, #1
   1462e:	bf0c      	ite	eq
   14630:	2000      	moveq	r0, #0
   14632:	f06f 0004 	mvnne.w	r0, #4
}
   14636:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14638:	f06f 0015 	mvn.w	r0, #21
   1463c:	e7fb      	b.n	14636 <bt_rand+0x2e>
   1463e:	bf00      	nop
   14640:	20009c18 	.word	0x20009c18

00014644 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14644:	2240      	movs	r2, #64	; 0x40
{
   14646:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14648:	4903      	ldr	r1, [pc, #12]	; (14658 <bt_pub_key_is_debug+0x14>)
   1464a:	f017 fba7 	bl	2bd9c <memcmp>
}
   1464e:	fab0 f080 	clz	r0, r0
   14652:	0940      	lsrs	r0, r0, #5
   14654:	bd08      	pop	{r3, pc}
   14656:	bf00      	nop
   14658:	00030ad5 	.word	0x00030ad5

0001465c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1465c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1465e:	4b3d      	ldr	r3, [pc, #244]	; (14754 <bt_pub_key_gen+0xf8>)
{
   14660:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   14662:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   14666:	f003 0306 	and.w	r3, r3, #6
   1466a:	2b06      	cmp	r3, #6
   1466c:	d00f      	beq.n	1468e <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1466e:	4b3a      	ldr	r3, [pc, #232]	; (14758 <bt_pub_key_gen+0xfc>)
   14670:	9305      	str	r3, [sp, #20]
   14672:	2302      	movs	r3, #2
   14674:	9304      	str	r3, [sp, #16]
		return -ENOTSUP;
   14676:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1467a:	2300      	movs	r3, #0
   1467c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14680:	4836      	ldr	r0, [pc, #216]	; (1475c <bt_pub_key_gen+0x100>)
   14682:	aa04      	add	r2, sp, #16
   14684:	f7fa f966 	bl	e954 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   14688:	4628      	mov	r0, r5
   1468a:	b007      	add	sp, #28
   1468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   1468e:	2800      	cmp	r0, #0
   14690:	d05d      	beq.n	1474e <bt_pub_key_gen+0xf2>
	return list->head;
   14692:	4e33      	ldr	r6, [pc, #204]	; (14760 <bt_pub_key_gen+0x104>)
   14694:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14696:	b1a2      	cbz	r2, 146c2 <bt_pub_key_gen+0x66>
   14698:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   1469a:	4283      	cmp	r3, r0
   1469c:	d10d      	bne.n	146ba <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   1469e:	4b31      	ldr	r3, [pc, #196]	; (14764 <bt_pub_key_gen+0x108>)
   146a0:	9305      	str	r3, [sp, #20]
   146a2:	2302      	movs	r3, #2
   146a4:	9304      	str	r3, [sp, #16]
   146a6:	2300      	movs	r3, #0
   146a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   146ac:	482b      	ldr	r0, [pc, #172]	; (1475c <bt_pub_key_gen+0x100>)
   146ae:	aa04      	add	r2, sp, #16
   146b0:	f7fa f950 	bl	e954 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   146b4:	f06f 0577 	mvn.w	r5, #119	; 0x77
   146b8:	e7e6      	b.n	14688 <bt_pub_key_gen+0x2c>
	return node->next;
   146ba:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   146bc:	b10b      	cbz	r3, 146c2 <bt_pub_key_gen+0x66>
   146be:	3b04      	subs	r3, #4
   146c0:	e7eb      	b.n	1469a <bt_pub_key_gen+0x3e>
	parent->next = child;
   146c2:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   146c4:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   146c6:	1d03      	adds	r3, r0, #4
	list->head = node;
   146c8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   146ca:	b902      	cbnz	r2, 146ce <bt_pub_key_gen+0x72>
	list->tail = node;
   146cc:	6073      	str	r3, [r6, #4]
   146ce:	4c26      	ldr	r4, [pc, #152]	; (14768 <bt_pub_key_gen+0x10c>)
   146d0:	e8d4 7fef 	ldaex	r7, [r4]
   146d4:	f047 0320 	orr.w	r3, r7, #32
   146d8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   146dc:	2a00      	cmp	r2, #0
   146de:	d1f7      	bne.n	146d0 <bt_pub_key_gen+0x74>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   146e0:	f017 0720 	ands.w	r7, r7, #32
   146e4:	d001      	beq.n	146ea <bt_pub_key_gen+0x8e>
	return 0;
   146e6:	2500      	movs	r5, #0
   146e8:	e7ce      	b.n	14688 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   146ea:	e8d4 3fef 	ldaex	r3, [r4]
   146ee:	f023 0310 	bic.w	r3, r3, #16
   146f2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   146f6:	2a00      	cmp	r2, #0
   146f8:	d1f7      	bne.n	146ea <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   146fa:	463a      	mov	r2, r7
   146fc:	4639      	mov	r1, r7
   146fe:	f242 0025 	movw	r0, #8229	; 0x2025
   14702:	f7fe f909 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   14706:	4605      	mov	r5, r0
   14708:	2800      	cmp	r0, #0
   1470a:	d0ec      	beq.n	146e6 <bt_pub_key_gen+0x8a>
		LOG_ERR("Sending LE P256 Public Key command failed");
   1470c:	4b17      	ldr	r3, [pc, #92]	; (1476c <bt_pub_key_gen+0x110>)
   1470e:	9305      	str	r3, [sp, #20]
   14710:	2302      	movs	r3, #2
   14712:	9304      	str	r3, [sp, #16]
   14714:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14718:	463b      	mov	r3, r7
   1471a:	4810      	ldr	r0, [pc, #64]	; (1475c <bt_pub_key_gen+0x100>)
   1471c:	aa04      	add	r2, sp, #16
   1471e:	f7fa f919 	bl	e954 <z_impl_z_log_msg_static_create>
   14722:	e8d4 3fef 	ldaex	r3, [r4]
   14726:	f023 0320 	bic.w	r3, r3, #32
   1472a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1472e:	2a00      	cmp	r2, #0
   14730:	d1f7      	bne.n	14722 <bt_pub_key_gen+0xc6>
	return list->head;
   14732:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14734:	b13c      	cbz	r4, 14746 <bt_pub_key_gen+0xea>
			if (cb->func) {
   14736:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1473a:	3c04      	subs	r4, #4
			if (cb->func) {
   1473c:	b10b      	cbz	r3, 14742 <bt_pub_key_gen+0xe6>
				cb->func(NULL);
   1473e:	2000      	movs	r0, #0
   14740:	4798      	blx	r3
	return node->next;
   14742:	6864      	ldr	r4, [r4, #4]
   14744:	e7f6      	b.n	14734 <bt_pub_key_gen+0xd8>
	list->head = NULL;
   14746:	2300      	movs	r3, #0
	list->tail = NULL;
   14748:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1474c:	e79c      	b.n	14688 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   1474e:	f06f 0515 	mvn.w	r5, #21
   14752:	e799      	b.n	14688 <bt_pub_key_gen+0x2c>
   14754:	20008000 	.word	0x20008000
   14758:	00030a4e 	.word	0x00030a4e
   1475c:	0002ccb8 	.word	0x0002ccb8
   14760:	20021574 	.word	0x20021574
   14764:	00030a6d 	.word	0x00030a6d
   14768:	200080cc 	.word	0x200080cc
   1476c:	00030a89 	.word	0x00030a89

00014770 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14770:	4b04      	ldr	r3, [pc, #16]	; (14784 <bt_pub_key_get+0x14>)
   14772:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   14776:	f013 0f10 	tst.w	r3, #16
}
   1477a:	4803      	ldr	r0, [pc, #12]	; (14788 <bt_pub_key_get+0x18>)
   1477c:	bf08      	it	eq
   1477e:	2000      	moveq	r0, #0
   14780:	4770      	bx	lr
   14782:	bf00      	nop
   14784:	200080cc 	.word	0x200080cc
   14788:	2002234f 	.word	0x2002234f

0001478c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   1478e:	4e27      	ldr	r6, [pc, #156]	; (1482c <bt_dh_key_gen+0xa0>)
{
   14790:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   14792:	6833      	ldr	r3, [r6, #0]
{
   14794:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   14796:	428b      	cmp	r3, r1
   14798:	d041      	beq.n	1481e <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1479a:	b123      	cbz	r3, 147a6 <bt_dh_key_gen+0x1a>
		return -EBUSY;
   1479c:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   147a0:	4620      	mov	r0, r4
   147a2:	46bd      	mov	sp, r7
   147a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   147a6:	4b22      	ldr	r3, [pc, #136]	; (14830 <bt_dh_key_gen+0xa4>)
   147a8:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   147ac:	0692      	lsls	r2, r2, #26
   147ae:	d4f5      	bmi.n	1479c <bt_dh_key_gen+0x10>
   147b0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   147b4:	06db      	lsls	r3, r3, #27
   147b6:	d535      	bpl.n	14824 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
   147b8:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   147ba:	f242 0026 	movw	r0, #8230	; 0x2026
   147be:	2140      	movs	r1, #64	; 0x40
   147c0:	f7fe f85c 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   147c4:	4605      	mov	r5, r0
   147c6:	b338      	cbz	r0, 14818 <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
   147c8:	2140      	movs	r1, #64	; 0x40
   147ca:	300c      	adds	r0, #12
   147cc:	f006 fd26 	bl	1b21c <net_buf_simple_add>
   147d0:	4623      	mov	r3, r4
   147d2:	f104 0240 	add.w	r2, r4, #64	; 0x40
   147d6:	f853 1b04 	ldr.w	r1, [r3], #4
   147da:	4293      	cmp	r3, r2
   147dc:	f840 1b04 	str.w	r1, [r0], #4
   147e0:	d1f9      	bne.n	147d6 <bt_dh_key_gen+0x4a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   147e2:	2200      	movs	r2, #0
   147e4:	4629      	mov	r1, r5
   147e6:	f242 0026 	movw	r0, #8230	; 0x2026
   147ea:	f7fe f895 	bl	12918 <bt_hci_cmd_send_sync>
	if (err) {
   147ee:	4604      	mov	r4, r0
   147f0:	2800      	cmp	r0, #0
   147f2:	d0d5      	beq.n	147a0 <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   147f4:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   147f6:	466d      	mov	r5, sp
   147f8:	b088      	sub	sp, #32
   147fa:	466a      	mov	r2, sp
		dh_key_cb = NULL;
   147fc:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   147fe:	490d      	ldr	r1, [pc, #52]	; (14834 <bt_dh_key_gen+0xa8>)
   14800:	e9c2 1405 	strd	r1, r4, [r2, #20]
   14804:	2103      	movs	r1, #3
   14806:	f842 1f10 	str.w	r1, [r2, #16]!
   1480a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1480e:	480a      	ldr	r0, [pc, #40]	; (14838 <bt_dh_key_gen+0xac>)
   14810:	f7fa f8a0 	bl	e954 <z_impl_z_log_msg_static_create>
   14814:	46ad      	mov	sp, r5
		return err;
   14816:	e7c3      	b.n	147a0 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   14818:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1481c:	e7ea      	b.n	147f4 <bt_dh_key_gen+0x68>
		return -EALREADY;
   1481e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14822:	e7bd      	b.n	147a0 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   14824:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   14828:	e7ba      	b.n	147a0 <bt_dh_key_gen+0x14>
   1482a:	bf00      	nop
   1482c:	20021570 	.word	0x20021570
   14830:	200080cc 	.word	0x200080cc
   14834:	00030ab3 	.word	0x00030ab3
   14838:	0002ccb8 	.word	0x0002ccb8

0001483c <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1483e:	4b19      	ldr	r3, [pc, #100]	; (148a4 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   14840:	68c5      	ldr	r5, [r0, #12]
   14842:	e8d3 2fef 	ldaex	r2, [r3]
   14846:	f022 0220 	bic.w	r2, r2, #32
   1484a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1484e:	2900      	cmp	r1, #0
   14850:	d1f7      	bne.n	14842 <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   14852:	782a      	ldrb	r2, [r5, #0]
   14854:	b98a      	cbnz	r2, 1487a <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   14856:	4914      	ldr	r1, [pc, #80]	; (148a8 <bt_hci_evt_le_pkey_complete+0x6c>)
   14858:	1c6a      	adds	r2, r5, #1
   1485a:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1485e:	f852 4b04 	ldr.w	r4, [r2], #4
   14862:	4282      	cmp	r2, r0
   14864:	f841 4b04 	str.w	r4, [r1], #4
   14868:	d1f9      	bne.n	1485e <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1486a:	e8d3 1fef 	ldaex	r1, [r3]
   1486e:	f041 0110 	orr.w	r1, r1, #16
   14872:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14876:	2a00      	cmp	r2, #0
   14878:	d1f7      	bne.n	1486a <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   1487a:	4e0c      	ldr	r6, [pc, #48]	; (148ac <bt_hci_evt_le_pkey_complete+0x70>)
   1487c:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1487e:	b16c      	cbz	r4, 1489c <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   14880:	4f09      	ldr	r7, [pc, #36]	; (148a8 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14882:	3c04      	subs	r4, #4
		if (cb->func) {
   14884:	6823      	ldr	r3, [r4, #0]
   14886:	b12b      	cbz	r3, 14894 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   14888:	782a      	ldrb	r2, [r5, #0]
   1488a:	2a00      	cmp	r2, #0
   1488c:	bf0c      	ite	eq
   1488e:	4638      	moveq	r0, r7
   14890:	2000      	movne	r0, #0
   14892:	4798      	blx	r3
	return node->next;
   14894:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14896:	b10c      	cbz	r4, 1489c <bt_hci_evt_le_pkey_complete+0x60>
   14898:	3c04      	subs	r4, #4
   1489a:	e7f3      	b.n	14884 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   1489c:	2300      	movs	r3, #0
	list->tail = NULL;
   1489e:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   148a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148a4:	200080cc 	.word	0x200080cc
   148a8:	2002234f 	.word	0x2002234f
   148ac:	20021574 	.word	0x20021574

000148b0 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   148b0:	4905      	ldr	r1, [pc, #20]	; (148c8 <bt_hci_evt_le_dhkey_complete+0x18>)
   148b2:	680b      	ldr	r3, [r1, #0]
   148b4:	b133      	cbz	r3, 148c4 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   148b6:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   148b8:	2000      	movs	r0, #0
   148ba:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   148bc:	7811      	ldrb	r1, [r2, #0]
   148be:	b901      	cbnz	r1, 148c2 <bt_hci_evt_le_dhkey_complete+0x12>
   148c0:	1c50      	adds	r0, r2, #1
   148c2:	4718      	bx	r3
	}
}
   148c4:	4770      	bx	lr
   148c6:	bf00      	nop
   148c8:	20021570 	.word	0x20021570

000148cc <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   148cc:	b570      	push	{r4, r5, r6, lr}
   148ce:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   148d0:	4b12      	ldr	r3, [pc, #72]	; (1491c <notify_connected+0x50>)
   148d2:	681d      	ldr	r5, [r3, #0]
   148d4:	b995      	cbnz	r5, 148fc <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   148d6:	4d12      	ldr	r5, [pc, #72]	; (14920 <notify_connected+0x54>)
   148d8:	4e12      	ldr	r6, [pc, #72]	; (14924 <notify_connected+0x58>)
   148da:	42b5      	cmp	r5, r6
   148dc:	d91c      	bls.n	14918 <notify_connected+0x4c>
   148de:	4912      	ldr	r1, [pc, #72]	; (14928 <notify_connected+0x5c>)
   148e0:	f240 535b 	movw	r3, #1371	; 0x55b
   148e4:	4a11      	ldr	r2, [pc, #68]	; (1492c <notify_connected+0x60>)
   148e6:	4812      	ldr	r0, [pc, #72]	; (14930 <notify_connected+0x64>)
   148e8:	f012 fa43 	bl	26d72 <assert_print>
   148ec:	4811      	ldr	r0, [pc, #68]	; (14934 <notify_connected+0x68>)
   148ee:	f012 fa40 	bl	26d72 <assert_print>
   148f2:	f240 515b 	movw	r1, #1371	; 0x55b
   148f6:	480d      	ldr	r0, [pc, #52]	; (1492c <notify_connected+0x60>)
   148f8:	f012 fa34 	bl	26d64 <assert_post_action>
		if (cb->connected) {
   148fc:	682b      	ldr	r3, [r5, #0]
   148fe:	b113      	cbz	r3, 14906 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   14900:	4620      	mov	r0, r4
   14902:	7b21      	ldrb	r1, [r4, #12]
   14904:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14906:	69ad      	ldr	r5, [r5, #24]
   14908:	e7e4      	b.n	148d4 <notify_connected+0x8>
		if (cb->connected) {
   1490a:	682b      	ldr	r3, [r5, #0]
   1490c:	b113      	cbz	r3, 14914 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1490e:	4620      	mov	r0, r4
   14910:	7b21      	ldrb	r1, [r4, #12]
   14912:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14914:	351c      	adds	r5, #28
   14916:	e7e0      	b.n	148da <notify_connected+0xe>
   14918:	d3f7      	bcc.n	1490a <notify_connected+0x3e>
		}
	}
}
   1491a:	bd70      	pop	{r4, r5, r6, pc}
   1491c:	2002159c 	.word	0x2002159c
   14920:	0002cc34 	.word	0x0002cc34
   14924:	0002cc50 	.word	0x0002cc50
   14928:	00030b4c 	.word	0x00030b4c
   1492c:	00030b1c 	.word	0x00030b1c
   14930:	0002dd81 	.word	0x0002dd81
   14934:	0002eee2 	.word	0x0002eee2

00014938 <tx_notify>:
{
   14938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1493c:	4604      	mov	r4, r0
	tx->cb = NULL;
   1493e:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   14942:	4f14      	ldr	r7, [pc, #80]	; (14994 <tx_notify+0x5c>)
	__asm__ volatile(
   14944:	f04f 0220 	mov.w	r2, #32
   14948:	f3ef 8311 	mrs	r3, BASEPRI
   1494c:	f382 8812 	msr	BASEPRI_MAX, r2
   14950:	f3bf 8f6f 	isb	sy
	return list->head;
   14954:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   14956:	b929      	cbnz	r1, 14964 <tx_notify+0x2c>
	__asm__ volatile(
   14958:	f383 8811 	msr	BASEPRI, r3
   1495c:	f3bf 8f6f 	isb	sy
}
   14960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14964:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   14966:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14968:	4281      	cmp	r1, r0
	list->tail = node;
   1496a:	bf08      	it	eq
   1496c:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1496e:	6222      	str	r2, [r4, #32]
   14970:	f383 8811 	msr	BASEPRI, r3
   14974:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   14978:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1497c:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1497e:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   14982:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   14986:	f017 f842 	bl	2ba0e <k_queue_append>
		cb(conn, user_data, 0);
   1498a:	2200      	movs	r2, #0
   1498c:	4631      	mov	r1, r6
   1498e:	4620      	mov	r0, r4
   14990:	47a8      	blx	r5
	while (1) {
   14992:	e7d7      	b.n	14944 <tx_notify+0xc>
   14994:	20008c60 	.word	0x20008c60

00014998 <conn_tx_destroy>:
{
   14998:	b570      	push	{r4, r5, r6, lr}
   1499a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1499c:	b949      	cbnz	r1, 149b2 <conn_tx_destroy+0x1a>
   1499e:	490d      	ldr	r1, [pc, #52]	; (149d4 <conn_tx_destroy+0x3c>)
   149a0:	480d      	ldr	r0, [pc, #52]	; (149d8 <conn_tx_destroy+0x40>)
   149a2:	2339      	movs	r3, #57	; 0x39
   149a4:	4a0d      	ldr	r2, [pc, #52]	; (149dc <conn_tx_destroy+0x44>)
   149a6:	f012 f9e4 	bl	26d72 <assert_print>
   149aa:	2139      	movs	r1, #57	; 0x39
   149ac:	480b      	ldr	r0, [pc, #44]	; (149dc <conn_tx_destroy+0x44>)
   149ae:	f012 f9d9 	bl	26d64 <assert_post_action>
	tx->cb = NULL;
   149b2:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   149b4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   149b8:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   149ba:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   149be:	4808      	ldr	r0, [pc, #32]	; (149e0 <conn_tx_destroy+0x48>)
   149c0:	f017 f825 	bl	2ba0e <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   149c4:	4631      	mov	r1, r6
   149c6:	4620      	mov	r0, r4
   149c8:	462b      	mov	r3, r5
}
   149ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   149ce:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   149d2:	4718      	bx	r3
   149d4:	00030b67 	.word	0x00030b67
   149d8:	0002dd81 	.word	0x0002dd81
   149dc:	00030b1c 	.word	0x00030b1c
   149e0:	20008c60 	.word	0x20008c60

000149e4 <send_frag>:
{
   149e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   149e8:	4604      	mov	r4, r0
   149ea:	460e      	mov	r6, r1
   149ec:	4692      	mov	sl, r2
   149ee:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   149f0:	698d      	ldr	r5, [r1, #24]
{
   149f2:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   149f4:	f04f 33ff 	mov.w	r3, #4294967295
   149f8:	f04f 32ff 	mov.w	r2, #4294967295
   149fc:	484c      	ldr	r0, [pc, #304]	; (14b30 <send_frag+0x14c>)
   149fe:	f00d f98b 	bl	21d18 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   14a02:	7b63      	ldrb	r3, [r4, #13]
   14a04:	2b07      	cmp	r3, #7
   14a06:	f040 8086 	bne.w	14b16 <send_frag+0x132>
	__asm__ volatile(
   14a0a:	f04f 0320 	mov.w	r3, #32
   14a0e:	f3ef 8211 	mrs	r2, BASEPRI
   14a12:	f383 8812 	msr	BASEPRI_MAX, r3
   14a16:	f3bf 8f6f 	isb	sy
	if (tx) {
   14a1a:	2d00      	cmp	r5, #0
   14a1c:	d04e      	beq.n	14abc <send_frag+0xd8>
	parent->next = child;
   14a1e:	2300      	movs	r3, #0
   14a20:	602b      	str	r3, [r5, #0]
	return list->tail;
   14a22:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14a24:	2b00      	cmp	r3, #0
   14a26:	d146      	bne.n	14ab6 <send_frag+0xd2>
	list->head = node;
   14a28:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14a2c:	f382 8811 	msr	BASEPRI, r2
   14a30:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14a34:	2104      	movs	r1, #4
   14a36:	f106 000c 	add.w	r0, r6, #12
   14a3a:	f006 fb93 	bl	1b164 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14a3e:	8823      	ldrh	r3, [r4, #0]
   14a40:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   14a44:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   14a48:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14a4c:	8a33      	ldrh	r3, [r6, #16]
   14a4e:	3b04      	subs	r3, #4
   14a50:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14a52:	2302      	movs	r3, #2
	return bt_send(buf);
   14a54:	4630      	mov	r0, r6
   14a56:	7633      	strb	r3, [r6, #24]
   14a58:	f7fe fa8c 	bl	12f74 <bt_send>
	if (err) {
   14a5c:	2800      	cmp	r0, #0
   14a5e:	d064      	beq.n	14b2a <send_frag+0x146>
		LOG_ERR("Unable to send to driver (err %d)", err);
   14a60:	46ea      	mov	sl, sp
   14a62:	b088      	sub	sp, #32
   14a64:	466a      	mov	r2, sp
   14a66:	4b33      	ldr	r3, [pc, #204]	; (14b34 <send_frag+0x150>)
   14a68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14a6c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14a70:	2303      	movs	r3, #3
   14a72:	4831      	ldr	r0, [pc, #196]	; (14b38 <send_frag+0x154>)
   14a74:	f842 3f10 	str.w	r3, [r2, #16]!
   14a78:	f014 f8d9 	bl	28c2e <z_log_msg_static_create.constprop.0>
   14a7c:	46d5      	mov	sp, sl
	__asm__ volatile(
   14a7e:	f04f 0320 	mov.w	r3, #32
   14a82:	f3ef 8a11 	mrs	sl, BASEPRI
   14a86:	f383 8812 	msr	BASEPRI_MAX, r3
   14a8a:	f3bf 8f6f 	isb	sy
		if (tx) {
   14a8e:	b315      	cbz	r5, 14ad6 <send_frag+0xf2>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   14a90:	4629      	mov	r1, r5
   14a92:	f104 0014 	add.w	r0, r4, #20
   14a96:	f014 f8a4 	bl	28be2 <sys_slist_find_and_remove>
	__asm__ volatile(
   14a9a:	f38a 8811 	msr	BASEPRI, sl
   14a9e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   14aa2:	4823      	ldr	r0, [pc, #140]	; (14b30 <send_frag+0x14c>)
   14aa4:	f00d f8f4 	bl	21c90 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   14aa8:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   14aaa:	4629      	mov	r1, r5
   14aac:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   14aae:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   14ab0:	f7ff ff72 	bl	14998 <conn_tx_destroy>
   14ab4:	e028      	b.n	14b08 <send_frag+0x124>
	parent->next = child;
   14ab6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14ab8:	61a5      	str	r5, [r4, #24]
}
   14aba:	e7b7      	b.n	14a2c <send_frag+0x48>
	return list->tail;
   14abc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   14abe:	b133      	cbz	r3, 14ace <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
   14ac0:	f103 080c 	add.w	r8, r3, #12
   14ac4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14ac6:	3301      	adds	r3, #1
   14ac8:	f8c8 3000 	str.w	r3, [r8]
   14acc:	e7ae      	b.n	14a2c <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   14ace:	69e3      	ldr	r3, [r4, #28]
   14ad0:	f104 081c 	add.w	r8, r4, #28
   14ad4:	e7f7      	b.n	14ac6 <send_frag+0xe2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14ad6:	f8d8 3000 	ldr.w	r3, [r8]
   14ada:	b95b      	cbnz	r3, 14af4 <send_frag+0x110>
   14adc:	4917      	ldr	r1, [pc, #92]	; (14b3c <send_frag+0x158>)
   14ade:	4818      	ldr	r0, [pc, #96]	; (14b40 <send_frag+0x15c>)
   14ae0:	f240 2327 	movw	r3, #551	; 0x227
   14ae4:	4a17      	ldr	r2, [pc, #92]	; (14b44 <send_frag+0x160>)
   14ae6:	f012 f944 	bl	26d72 <assert_print>
   14aea:	f240 2127 	movw	r1, #551	; 0x227
   14aee:	4815      	ldr	r0, [pc, #84]	; (14b44 <send_frag+0x160>)
   14af0:	f012 f938 	bl	26d64 <assert_post_action>
			(*pending_no_cb)--;
   14af4:	3b01      	subs	r3, #1
   14af6:	f8c8 3000 	str.w	r3, [r8]
   14afa:	f38a 8811 	msr	BASEPRI, sl
   14afe:	f3bf 8f6f 	isb	sy
   14b02:	480b      	ldr	r0, [pc, #44]	; (14b30 <send_frag+0x14c>)
   14b04:	f00d f8c4 	bl	21c90 <z_impl_k_sem_give>
	if (always_consume) {
   14b08:	f1b9 0f00 	cmp.w	r9, #0
   14b0c:	d109      	bne.n	14b22 <send_frag+0x13e>
	return false;
   14b0e:	2000      	movs	r0, #0
}
   14b10:	46bd      	mov	sp, r7
   14b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b16:	4806      	ldr	r0, [pc, #24]	; (14b30 <send_frag+0x14c>)
   14b18:	f00d f8ba 	bl	21c90 <z_impl_k_sem_give>
	if (tx) {
   14b1c:	2d00      	cmp	r5, #0
   14b1e:	d1c3      	bne.n	14aa8 <send_frag+0xc4>
   14b20:	e7f2      	b.n	14b08 <send_frag+0x124>
		net_buf_unref(buf);
   14b22:	4630      	mov	r0, r6
   14b24:	f006 fa58 	bl	1afd8 <net_buf_unref>
   14b28:	e7f1      	b.n	14b0e <send_frag+0x12a>
	return true;
   14b2a:	2001      	movs	r0, #1
   14b2c:	e7f0      	b.n	14b10 <send_frag+0x12c>
   14b2e:	bf00      	nop
   14b30:	20008100 	.word	0x20008100
   14b34:	00030374 	.word	0x00030374
   14b38:	0002cca8 	.word	0x0002cca8
   14b3c:	00030b6a 	.word	0x00030b6a
   14b40:	0002dd81 	.word	0x0002dd81
   14b44:	00030b1c 	.word	0x00030b1c

00014b48 <bt_conn_get_pkts>:
}
   14b48:	4800      	ldr	r0, [pc, #0]	; (14b4c <bt_conn_get_pkts+0x4>)
   14b4a:	4770      	bx	lr
   14b4c:	20008100 	.word	0x20008100

00014b50 <bt_conn_new>:
{
   14b50:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   14b52:	2200      	movs	r2, #0
   14b54:	4604      	mov	r4, r0
   14b56:	428a      	cmp	r2, r1
   14b58:	d102      	bne.n	14b60 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14b5a:	2400      	movs	r4, #0
}
   14b5c:	4620      	mov	r0, r4
   14b5e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14b60:	2001      	movs	r0, #1
   14b62:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   14b66:	e8d3 5fef 	ldaex	r5, [r3]
   14b6a:	2d00      	cmp	r5, #0
   14b6c:	d104      	bne.n	14b78 <bt_conn_new+0x28>
   14b6e:	e8c3 0fec 	stlex	ip, r0, [r3]
   14b72:	f1bc 0f00 	cmp.w	ip, #0
   14b76:	d1f6      	bne.n	14b66 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14b78:	d002      	beq.n	14b80 <bt_conn_new+0x30>
   14b7a:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   14b7c:	4402      	add	r2, r0
   14b7e:	e7ea      	b.n	14b56 <bt_conn_new+0x6>
	if (!conn) {
   14b80:	2c00      	cmp	r4, #0
   14b82:	d0ea      	beq.n	14b5a <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   14b84:	22c4      	movs	r2, #196	; 0xc4
   14b86:	2100      	movs	r1, #0
   14b88:	4620      	mov	r0, r4
   14b8a:	f017 f951 	bl	2be30 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14b8e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14b92:	4904      	ldr	r1, [pc, #16]	; (14ba4 <bt_conn_new+0x54>)
   14b94:	f00d fd00 	bl	22598 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14b98:	4903      	ldr	r1, [pc, #12]	; (14ba8 <bt_conn_new+0x58>)
   14b9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14b9e:	f00d fb1f 	bl	221e0 <k_work_init>
	return conn;
   14ba2:	e7db      	b.n	14b5c <bt_conn_new+0xc>
   14ba4:	00015601 	.word	0x00015601
   14ba8:	00028c35 	.word	0x00028c35

00014bac <conn_cleanup>:
{
   14bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bb0:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   14bb2:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14bb4:	f104 0638 	add.w	r6, r4, #56	; 0x38
   14bb8:	2300      	movs	r3, #0
   14bba:	2200      	movs	r2, #0
   14bbc:	4630      	mov	r0, r6
   14bbe:	f015 fb96 	bl	2a2ee <net_buf_get>
   14bc2:	4603      	mov	r3, r0
   14bc4:	b980      	cbnz	r0, 14be8 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14bc6:	6963      	ldr	r3, [r4, #20]
   14bc8:	b1cb      	cbz	r3, 14bfe <conn_cleanup+0x52>
   14bca:	4918      	ldr	r1, [pc, #96]	; (14c2c <conn_cleanup+0x80>)
   14bcc:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   14bd0:	4a17      	ldr	r2, [pc, #92]	; (14c30 <conn_cleanup+0x84>)
   14bd2:	4818      	ldr	r0, [pc, #96]	; (14c34 <conn_cleanup+0x88>)
   14bd4:	f012 f8cd 	bl	26d72 <assert_print>
   14bd8:	4817      	ldr	r0, [pc, #92]	; (14c38 <conn_cleanup+0x8c>)
   14bda:	f012 f8ca 	bl	26d72 <assert_print>
   14bde:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14be2:	4813      	ldr	r0, [pc, #76]	; (14c30 <conn_cleanup+0x84>)
   14be4:	f012 f8be 	bl	26d64 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14be8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14bea:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14bec:	f006 f9f4 	bl	1afd8 <net_buf_unref>
		if (tx) {
   14bf0:	2d00      	cmp	r5, #0
   14bf2:	d0e1      	beq.n	14bb8 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14bf4:	4629      	mov	r1, r5
   14bf6:	4620      	mov	r0, r4
   14bf8:	f7ff fece 	bl	14998 <conn_tx_destroy>
   14bfc:	e7da      	b.n	14bb4 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14bfe:	69e3      	ldr	r3, [r4, #28]
   14c00:	b14b      	cbz	r3, 14c16 <conn_cleanup+0x6a>
   14c02:	490e      	ldr	r1, [pc, #56]	; (14c3c <conn_cleanup+0x90>)
   14c04:	f240 23b5 	movw	r3, #693	; 0x2b5
   14c08:	4a09      	ldr	r2, [pc, #36]	; (14c30 <conn_cleanup+0x84>)
   14c0a:	480a      	ldr	r0, [pc, #40]	; (14c34 <conn_cleanup+0x88>)
   14c0c:	f012 f8b1 	bl	26d72 <assert_print>
   14c10:	f240 21b5 	movw	r1, #693	; 0x2b5
   14c14:	e7e5      	b.n	14be2 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14c16:	4620      	mov	r0, r4
   14c18:	f014 f80f 	bl	28c3a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14c1c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14c20:	2200      	movs	r2, #0
}
   14c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14c26:	2300      	movs	r3, #0
   14c28:	f00d bdd2 	b.w	227d0 <k_work_reschedule>
   14c2c:	00030b7d 	.word	0x00030b7d
   14c30:	00030b1c 	.word	0x00030b1c
   14c34:	0002dd81 	.word	0x0002dd81
   14c38:	00030ba3 	.word	0x00030ba3
   14c3c:	00030bb8 	.word	0x00030bb8

00014c40 <bt_conn_recv>:
{
   14c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c44:	4616      	mov	r6, r2
   14c46:	b086      	sub	sp, #24
   14c48:	af00      	add	r7, sp, #0
   14c4a:	4604      	mov	r4, r0
   14c4c:	460d      	mov	r5, r1
	tx_notify(conn);
   14c4e:	f7ff fe73 	bl	14938 <tx_notify>
	switch (flags) {
   14c52:	2e01      	cmp	r6, #1
   14c54:	d030      	beq.n	14cb8 <bt_conn_recv+0x78>
   14c56:	2e02      	cmp	r6, #2
   14c58:	d16a      	bne.n	14d30 <bt_conn_recv+0xf0>
		if (conn->rx) {
   14c5a:	6923      	ldr	r3, [r4, #16]
   14c5c:	b163      	cbz	r3, 14c78 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   14c5e:	4b40      	ldr	r3, [pc, #256]	; (14d60 <bt_conn_recv+0x120>)
   14c60:	4840      	ldr	r0, [pc, #256]	; (14d64 <bt_conn_recv+0x124>)
   14c62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c66:	e9c7 6304 	strd	r6, r3, [r7, #16]
   14c6a:	f107 0210 	add.w	r2, r7, #16
   14c6e:	f013 ffde 	bl	28c2e <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   14c72:	4620      	mov	r0, r4
   14c74:	f013 ffe1 	bl	28c3a <bt_conn_reset_rx_state>
		conn->rx = buf;
   14c78:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14c7a:	6921      	ldr	r1, [r4, #16]
   14c7c:	8a08      	ldrh	r0, [r1, #16]
   14c7e:	2801      	cmp	r0, #1
   14c80:	d930      	bls.n	14ce4 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14c82:	68cb      	ldr	r3, [r1, #12]
   14c84:	881b      	ldrh	r3, [r3, #0]
   14c86:	3304      	adds	r3, #4
   14c88:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14c8a:	4298      	cmp	r0, r3
   14c8c:	d32a      	bcc.n	14ce4 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   14c8e:	d95f      	bls.n	14d50 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   14c90:	466d      	mov	r5, sp
   14c92:	b088      	sub	sp, #32
   14c94:	466a      	mov	r2, sp
   14c96:	61d3      	str	r3, [r2, #28]
   14c98:	2304      	movs	r3, #4
   14c9a:	4933      	ldr	r1, [pc, #204]	; (14d68 <bt_conn_recv+0x128>)
   14c9c:	e9c2 1005 	strd	r1, r0, [r2, #20]
   14ca0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14ca4:	482f      	ldr	r0, [pc, #188]	; (14d64 <bt_conn_recv+0x124>)
   14ca6:	f842 3f10 	str.w	r3, [r2, #16]!
   14caa:	f013 ffc0 	bl	28c2e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14cae:	4620      	mov	r0, r4
   14cb0:	46ad      	mov	sp, r5
   14cb2:	f013 ffc2 	bl	28c3a <bt_conn_reset_rx_state>
		return;
   14cb6:	e015      	b.n	14ce4 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   14cb8:	6920      	ldr	r0, [r4, #16]
   14cba:	b970      	cbnz	r0, 14cda <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   14cbc:	4b2b      	ldr	r3, [pc, #172]	; (14d6c <bt_conn_recv+0x12c>)
   14cbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cc2:	617b      	str	r3, [r7, #20]
   14cc4:	2302      	movs	r3, #2
   14cc6:	4827      	ldr	r0, [pc, #156]	; (14d64 <bt_conn_recv+0x124>)
   14cc8:	613b      	str	r3, [r7, #16]
   14cca:	f107 0210 	add.w	r2, r7, #16
   14cce:	f013 ffae 	bl	28c2e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14cd2:	4620      	mov	r0, r4
   14cd4:	f013 ffb1 	bl	28c3a <bt_conn_reset_rx_state>
   14cd8:	e001      	b.n	14cde <bt_conn_recv+0x9e>
		if (!buf->len) {
   14cda:	8a2e      	ldrh	r6, [r5, #16]
   14cdc:	b936      	cbnz	r6, 14cec <bt_conn_recv+0xac>
		net_buf_unref(buf);
   14cde:	4628      	mov	r0, r5
   14ce0:	f006 f97a 	bl	1afd8 <net_buf_unref>
}
   14ce4:	3718      	adds	r7, #24
   14ce6:	46bd      	mov	sp, r7
   14ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14cec:	300c      	adds	r0, #12
   14cee:	f015 fb13 	bl	2a318 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14cf2:	4286      	cmp	r6, r0
   14cf4:	d912      	bls.n	14d1c <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14cf6:	4b1e      	ldr	r3, [pc, #120]	; (14d70 <bt_conn_recv+0x130>)
   14cf8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cfc:	617b      	str	r3, [r7, #20]
   14cfe:	2302      	movs	r3, #2
   14d00:	4818      	ldr	r0, [pc, #96]	; (14d64 <bt_conn_recv+0x124>)
   14d02:	613b      	str	r3, [r7, #16]
   14d04:	f107 0210 	add.w	r2, r7, #16
   14d08:	f013 ff91 	bl	28c2e <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14d0c:	2200      	movs	r2, #0
   14d0e:	4620      	mov	r0, r4
   14d10:	6921      	ldr	r1, [r4, #16]
   14d12:	f000 ff19 	bl	15b48 <bt_l2cap_recv>
			conn->rx = NULL;
   14d16:	2300      	movs	r3, #0
   14d18:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   14d1a:	e7e0      	b.n	14cde <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14d1c:	6920      	ldr	r0, [r4, #16]
   14d1e:	8a2a      	ldrh	r2, [r5, #16]
   14d20:	68e9      	ldr	r1, [r5, #12]
   14d22:	300c      	adds	r0, #12
   14d24:	f015 fb00 	bl	2a328 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14d28:	4628      	mov	r0, r5
   14d2a:	f006 f955 	bl	1afd8 <net_buf_unref>
		break;
   14d2e:	e7a4      	b.n	14c7a <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14d30:	46e8      	mov	r8, sp
   14d32:	b088      	sub	sp, #32
   14d34:	466a      	mov	r2, sp
   14d36:	4b0f      	ldr	r3, [pc, #60]	; (14d74 <bt_conn_recv+0x134>)
   14d38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   14d3c:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14d40:	2303      	movs	r3, #3
   14d42:	4808      	ldr	r0, [pc, #32]	; (14d64 <bt_conn_recv+0x124>)
   14d44:	f842 3f10 	str.w	r3, [r2, #16]!
   14d48:	f013 ff71 	bl	28c2e <z_log_msg_static_create.constprop.0>
   14d4c:	46c5      	mov	sp, r8
   14d4e:	e7c0      	b.n	14cd2 <bt_conn_recv+0x92>
	conn->rx = NULL;
   14d50:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   14d52:	2201      	movs	r2, #1
   14d54:	4620      	mov	r0, r4
	conn->rx = NULL;
   14d56:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   14d58:	f000 fef6 	bl	15b48 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   14d5c:	e7c2      	b.n	14ce4 <bt_conn_recv+0xa4>
   14d5e:	bf00      	nop
   14d60:	00030bd1 	.word	0x00030bd1
   14d64:	0002cca8 	.word	0x0002cca8
   14d68:	00030c51 	.word	0x00030c51
   14d6c:	00030bee 	.word	0x00030bee
   14d70:	00030c0c 	.word	0x00030c0c
   14d74:	00030c33 	.word	0x00030c33

00014d78 <bt_conn_send_cb>:
{
   14d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d7c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14d7e:	7b43      	ldrb	r3, [r0, #13]
{
   14d80:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14d82:	2b07      	cmp	r3, #7
{
   14d84:	460f      	mov	r7, r1
   14d86:	4616      	mov	r6, r2
   14d88:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   14d8a:	d00c      	beq.n	14da6 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   14d8c:	4b28      	ldr	r3, [pc, #160]	; (14e30 <bt_conn_send_cb+0xb8>)
   14d8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d92:	9305      	str	r3, [sp, #20]
   14d94:	2302      	movs	r3, #2
   14d96:	4827      	ldr	r0, [pc, #156]	; (14e34 <bt_conn_send_cb+0xbc>)
   14d98:	aa04      	add	r2, sp, #16
   14d9a:	9304      	str	r3, [sp, #16]
   14d9c:	f013 ff47 	bl	28c2e <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   14da0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14da4:	e01d      	b.n	14de2 <bt_conn_send_cb+0x6a>
	if (cb) {
   14da6:	2a00      	cmp	r2, #0
   14da8:	d040      	beq.n	14e2c <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   14daa:	f00e fe99 	bl	23ae0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14dae:	4b22      	ldr	r3, [pc, #136]	; (14e38 <bt_conn_send_cb+0xc0>)
   14db0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14db2:	4822      	ldr	r0, [pc, #136]	; (14e3c <bt_conn_send_cb+0xc4>)
   14db4:	bf07      	ittee	eq
   14db6:	2200      	moveq	r2, #0
   14db8:	2300      	moveq	r3, #0
   14dba:	f04f 32ff 	movne.w	r2, #4294967295
   14dbe:	f04f 33ff 	movne.w	r3, #4294967295
   14dc2:	f00c fefb 	bl	21bbc <z_impl_k_queue_get>
   14dc6:	4604      	mov	r4, r0
		if (!tx) {
   14dc8:	b970      	cbnz	r0, 14de8 <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   14dca:	4b1d      	ldr	r3, [pc, #116]	; (14e40 <bt_conn_send_cb+0xc8>)
   14dcc:	4819      	ldr	r0, [pc, #100]	; (14e34 <bt_conn_send_cb+0xbc>)
   14dce:	9305      	str	r3, [sp, #20]
   14dd0:	2302      	movs	r3, #2
   14dd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14dd6:	aa04      	add	r2, sp, #16
   14dd8:	9304      	str	r3, [sp, #16]
   14dda:	f013 ff28 	bl	28c2e <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   14dde:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14de2:	b006      	add	sp, #24
   14de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14de8:	7b6b      	ldrb	r3, [r5, #13]
   14dea:	2b07      	cmp	r3, #7
   14dec:	d012      	beq.n	14e14 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   14dee:	4b15      	ldr	r3, [pc, #84]	; (14e44 <bt_conn_send_cb+0xcc>)
   14df0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14df4:	9305      	str	r3, [sp, #20]
   14df6:	2302      	movs	r3, #2
   14df8:	480e      	ldr	r0, [pc, #56]	; (14e34 <bt_conn_send_cb+0xbc>)
   14dfa:	aa04      	add	r2, sp, #16
   14dfc:	9304      	str	r3, [sp, #16]
   14dfe:	f013 ff16 	bl	28c2e <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   14e02:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   14e04:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14e06:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14e0a:	480c      	ldr	r0, [pc, #48]	; (14e3c <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14e0c:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14e0e:	f016 fdfe 	bl	2ba0e <k_queue_append>
}
   14e12:	e7c5      	b.n	14da0 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   14e14:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14e16:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14e1a:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14e1c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14e20:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
   14e22:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   14e24:	f006 f8b2 	bl	1af8c <net_buf_put>
	return 0;
   14e28:	2000      	movs	r0, #0
   14e2a:	e7da      	b.n	14de2 <bt_conn_send_cb+0x6a>
   14e2c:	4614      	mov	r4, r2
   14e2e:	e7f5      	b.n	14e1c <bt_conn_send_cb+0xa4>
   14e30:	00030c6c 	.word	0x00030c6c
   14e34:	0002cca8 	.word	0x0002cca8
   14e38:	2000a218 	.word	0x2000a218
   14e3c:	20008c60 	.word	0x20008c60
   14e40:	00030c7b 	.word	0x00030c7b
   14e44:	00030c99 	.word	0x00030c99

00014e48 <bt_conn_prepare_events>:
{
   14e48:	b570      	push	{r4, r5, r6, lr}
   14e4a:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14e4c:	4817      	ldr	r0, [pc, #92]	; (14eac <bt_conn_prepare_events+0x64>)
   14e4e:	f016 ff86 	bl	2bd5e <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14e52:	2200      	movs	r2, #0
   14e54:	2101      	movs	r1, #1
   14e56:	4620      	mov	r0, r4
   14e58:	4b14      	ldr	r3, [pc, #80]	; (14eac <bt_conn_prepare_events+0x64>)
   14e5a:	f00f fd49 	bl	248f0 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14e5e:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e62:	4b13      	ldr	r3, [pc, #76]	; (14eb0 <bt_conn_prepare_events+0x68>)
   14e64:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   14e68:	b90a      	cbnz	r2, 14e6e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14e6a:	2001      	movs	r0, #1
}
   14e6c:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14e6e:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   14e72:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   14e76:	b953      	cbnz	r3, 14e8e <bt_conn_prepare_events+0x46>
   14e78:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14e7c:	1d28      	adds	r0, r5, #4
   14e7e:	f013 fecb 	bl	28c18 <atomic_and>
   14e82:	0643      	lsls	r3, r0, #25
   14e84:	d503      	bpl.n	14e8e <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   14e86:	4628      	mov	r0, r5
   14e88:	f7ff fe90 	bl	14bac <conn_cleanup>
		return -ENOTCONN;
   14e8c:	e7ed      	b.n	14e6a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   14e8e:	7b6b      	ldrb	r3, [r5, #13]
   14e90:	2b07      	cmp	r3, #7
   14e92:	d1ea      	bne.n	14e6a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   14e94:	4630      	mov	r0, r6
   14e96:	4b07      	ldr	r3, [pc, #28]	; (14eb4 <bt_conn_prepare_events+0x6c>)
   14e98:	2200      	movs	r2, #0
   14e9a:	2104      	movs	r1, #4
   14e9c:	f00f fd28 	bl	248f0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14ea0:	2301      	movs	r3, #1
			ev_count++;
   14ea2:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14ea4:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   14ea8:	e7e0      	b.n	14e6c <bt_conn_prepare_events+0x24>
   14eaa:	bf00      	nop
   14eac:	200084d4 	.word	0x200084d4
   14eb0:	20009e14 	.word	0x20009e14
   14eb4:	20009d88 	.word	0x20009d88

00014eb8 <bt_conn_ref>:
{
   14eb8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   14eba:	b180      	cbz	r0, 14ede <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   14ebc:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   14ec0:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   14ec4:	b1bb      	cbz	r3, 14ef6 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   14ec6:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14ec8:	e8d2 4fef 	ldaex	r4, [r2]
   14ecc:	429c      	cmp	r4, r3
   14ece:	d104      	bne.n	14eda <bt_conn_ref+0x22>
   14ed0:	e8c2 1fec 	stlex	ip, r1, [r2]
   14ed4:	f1bc 0f00 	cmp.w	ip, #0
   14ed8:	d1f6      	bne.n	14ec8 <bt_conn_ref+0x10>
   14eda:	d1f1      	bne.n	14ec0 <bt_conn_ref+0x8>
}
   14edc:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14ede:	4907      	ldr	r1, [pc, #28]	; (14efc <bt_conn_ref+0x44>)
   14ee0:	4807      	ldr	r0, [pc, #28]	; (14f00 <bt_conn_ref+0x48>)
   14ee2:	f240 437c 	movw	r3, #1148	; 0x47c
   14ee6:	4a07      	ldr	r2, [pc, #28]	; (14f04 <bt_conn_ref+0x4c>)
   14ee8:	f011 ff43 	bl	26d72 <assert_print>
   14eec:	f240 417c 	movw	r1, #1148	; 0x47c
   14ef0:	4804      	ldr	r0, [pc, #16]	; (14f04 <bt_conn_ref+0x4c>)
   14ef2:	f011 ff37 	bl	26d64 <assert_post_action>
			return NULL;
   14ef6:	4618      	mov	r0, r3
   14ef8:	e7f0      	b.n	14edc <bt_conn_ref+0x24>
   14efa:	bf00      	nop
   14efc:	000303e6 	.word	0x000303e6
   14f00:	0002dd81 	.word	0x0002dd81
   14f04:	00030b1c 	.word	0x00030b1c

00014f08 <bt_conn_unref>:
{
   14f08:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14f0a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14f0e:	e8d3 2fef 	ldaex	r2, [r3]
   14f12:	1e51      	subs	r1, r2, #1
   14f14:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14f18:	2c00      	cmp	r4, #0
   14f1a:	d1f8      	bne.n	14f0e <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   14f1c:	2a00      	cmp	r2, #0
   14f1e:	dc0e      	bgt.n	14f3e <bt_conn_unref+0x36>
   14f20:	490d      	ldr	r1, [pc, #52]	; (14f58 <bt_conn_unref+0x50>)
   14f22:	f44f 6393 	mov.w	r3, #1176	; 0x498
   14f26:	4a0d      	ldr	r2, [pc, #52]	; (14f5c <bt_conn_unref+0x54>)
   14f28:	480d      	ldr	r0, [pc, #52]	; (14f60 <bt_conn_unref+0x58>)
   14f2a:	f011 ff22 	bl	26d72 <assert_print>
   14f2e:	480d      	ldr	r0, [pc, #52]	; (14f64 <bt_conn_unref+0x5c>)
   14f30:	f011 ff1f 	bl	26d72 <assert_print>
   14f34:	f44f 6193 	mov.w	r1, #1176	; 0x498
   14f38:	4808      	ldr	r0, [pc, #32]	; (14f5c <bt_conn_unref+0x54>)
   14f3a:	f011 ff13 	bl	26d64 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   14f3e:	f240 1201 	movw	r2, #257	; 0x101
   14f42:	8841      	ldrh	r1, [r0, #2]
   14f44:	4291      	cmp	r1, r2
   14f46:	d106      	bne.n	14f56 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f48:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   14f4c:	b91b      	cbnz	r3, 14f56 <bt_conn_unref+0x4e>
}
   14f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   14f52:	f7ff ba8f 	b.w	14474 <bt_le_adv_resume>
}
   14f56:	bd10      	pop	{r4, pc}
   14f58:	00030cbf 	.word	0x00030cbf
   14f5c:	00030b1c 	.word	0x00030b1c
   14f60:	0002dd81 	.word	0x0002dd81
   14f64:	00030cc7 	.word	0x00030cc7

00014f68 <bt_conn_lookup_handle>:
{
   14f68:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14f6a:	2101      	movs	r1, #1
   14f6c:	4801      	ldr	r0, [pc, #4]	; (14f74 <bt_conn_lookup_handle+0xc>)
   14f6e:	f013 be6d 	b.w	28c4c <conn_lookup_handle>
   14f72:	bf00      	nop
   14f74:	20009d50 	.word	0x20009d50

00014f78 <bt_conn_set_state>:
{
   14f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   14f7a:	7b46      	ldrb	r6, [r0, #13]
{
   14f7c:	4604      	mov	r4, r0
	if (conn->state == state) {
   14f7e:	428e      	cmp	r6, r1
{
   14f80:	460d      	mov	r5, r1
   14f82:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   14f84:	d119      	bne.n	14fba <bt_conn_set_state+0x42>
	switch (state) {
   14f86:	2e08      	cmp	r6, #8
   14f88:	bf98      	it	ls
   14f8a:	4b6c      	ldrls	r3, [pc, #432]	; (1513c <bt_conn_set_state+0x1c4>)
		LOG_WRN("no transition %s", state2str(state));
   14f8c:	466c      	mov	r4, sp
   14f8e:	b088      	sub	sp, #32
   14f90:	bf94      	ite	ls
   14f92:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   14f96:	4b6a      	ldrhi	r3, [pc, #424]	; (15140 <bt_conn_set_state+0x1c8>)
		LOG_WRN("no transition %s", state2str(state));
   14f98:	466a      	mov	r2, sp
   14f9a:	496a      	ldr	r1, [pc, #424]	; (15144 <bt_conn_set_state+0x1cc>)
   14f9c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
   14fa4:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   14fa8:	8393      	strh	r3, [r2, #28]
   14faa:	4b67      	ldr	r3, [pc, #412]	; (15148 <bt_conn_set_state+0x1d0>)
   14fac:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   14fb0:	4866      	ldr	r0, [pc, #408]	; (1514c <bt_conn_set_state+0x1d4>)
   14fb2:	f013 fe3c 	bl	28c2e <z_log_msg_static_create.constprop.0>
   14fb6:	46a5      	mov	sp, r4
   14fb8:	e043      	b.n	15042 <bt_conn_set_state+0xca>
	conn->state = state;
   14fba:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14fbc:	b926      	cbnz	r6, 14fc8 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14fbe:	7883      	ldrb	r3, [r0, #2]
   14fc0:	2b08      	cmp	r3, #8
   14fc2:	d001      	beq.n	14fc8 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   14fc4:	f7ff ff78 	bl	14eb8 <bt_conn_ref>
	switch (conn->state) {
   14fc8:	7b63      	ldrb	r3, [r4, #13]
   14fca:	2b08      	cmp	r3, #8
   14fcc:	f200 80b0 	bhi.w	15130 <bt_conn_set_state+0x1b8>
   14fd0:	e8df f003 	tbb	[pc, r3]
   14fd4:	37370539 	.word	0x37370539
   14fd8:	1c373737 	.word	0x1c373737
   14fdc:	37          	.byte	0x37
   14fdd:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   14fde:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   14fe0:	4d5b      	ldr	r5, [pc, #364]	; (15150 <bt_conn_set_state+0x1d8>)
	__asm__ volatile(
   14fe2:	f04f 0220 	mov.w	r2, #32
   14fe6:	f3ef 8311 	mrs	r3, BASEPRI
   14fea:	f382 8812 	msr	BASEPRI_MAX, r2
   14fee:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14ff2:	69e2      	ldr	r2, [r4, #28]
   14ff4:	2a00      	cmp	r2, #0
   14ff6:	d077      	beq.n	150e8 <bt_conn_set_state+0x170>
			conn->pending_no_cb--;
   14ff8:	3a01      	subs	r2, #1
   14ffa:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14ffc:	f383 8811 	msr	BASEPRI, r3
   15000:	f3bf 8f6f 	isb	sy
   15004:	4628      	mov	r0, r5
   15006:	f00c fe43 	bl	21c90 <z_impl_k_sem_give>
}
   1500a:	e7ea      	b.n	14fe2 <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1500c:	78a3      	ldrb	r3, [r4, #2]
   1500e:	2b04      	cmp	r3, #4
   15010:	d017      	beq.n	15042 <bt_conn_set_state+0xca>
	z_impl_k_queue_init(queue);
   15012:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15016:	f016 fced 	bl	2b9f4 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1501a:	2100      	movs	r1, #0
   1501c:	484d      	ldr	r0, [pc, #308]	; (15154 <bt_conn_set_state+0x1dc>)
   1501e:	f00f fd85 	bl	24b2c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15022:	2300      	movs	r3, #0
	list->tail = NULL;
   15024:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15028:	78e3      	ldrb	r3, [r4, #3]
   1502a:	2b01      	cmp	r3, #1
   1502c:	d109      	bne.n	15042 <bt_conn_set_state+0xca>
			conn->le.conn_param_retry_countdown =
   1502e:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   15030:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   15034:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   15038:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1503c:	2300      	movs	r3, #0
   1503e:	f00d fb4d 	bl	226dc <k_work_schedule>
}
   15042:	46bd      	mov	sp, r7
   15044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   15046:	78a3      	ldrb	r3, [r4, #2]
   15048:	2b04      	cmp	r3, #4
   1504a:	d103      	bne.n	15054 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1504c:	4620      	mov	r0, r4
   1504e:	f7ff ff5b 	bl	14f08 <bt_conn_unref>
			break;
   15052:	e7f6      	b.n	15042 <bt_conn_set_state+0xca>
		switch (old_state) {
   15054:	2e08      	cmp	r6, #8
   15056:	d8f4      	bhi.n	15042 <bt_conn_set_state+0xca>
   15058:	a301      	add	r3, pc, #4	; (adr r3, 15060 <bt_conn_set_state+0xe8>)
   1505a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1505e:	bf00      	nop
   15060:	000150d1 	.word	0x000150d1
   15064:	00015085 	.word	0x00015085
   15068:	000150c3 	.word	0x000150c3
   1506c:	0001504d 	.word	0x0001504d
   15070:	0001504d 	.word	0x0001504d
   15074:	000150c3 	.word	0x000150c3
   15078:	000150c3 	.word	0x000150c3
   1507c:	00015043 	.word	0x00015043
   15080:	000150d1 	.word	0x000150d1
			tx_notify(conn);
   15084:	4620      	mov	r0, r4
   15086:	f7ff fc57 	bl	14938 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1508a:	78a3      	ldrb	r3, [r4, #2]
   1508c:	2b01      	cmp	r3, #1
   1508e:	d10a      	bne.n	150a6 <bt_conn_set_state+0x12e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   15090:	f104 0560 	add.w	r5, r4, #96	; 0x60
   15094:	4628      	mov	r0, r5
   15096:	f016 fd43 	bl	2bb20 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1509a:	f010 0f0c 	tst.w	r0, #12
   1509e:	d002      	beq.n	150a6 <bt_conn_set_state+0x12e>
				k_work_cancel_delayable(&conn->deferred_work);
   150a0:	4628      	mov	r0, r5
   150a2:	f00d fb9b 	bl	227dc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   150a6:	3404      	adds	r4, #4
   150a8:	e8d4 3fef 	ldaex	r3, [r4]
   150ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   150b0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   150b4:	2a00      	cmp	r2, #0
   150b6:	d1f7      	bne.n	150a8 <bt_conn_set_state+0x130>
   150b8:	2100      	movs	r1, #0
   150ba:	4826      	ldr	r0, [pc, #152]	; (15154 <bt_conn_set_state+0x1dc>)
   150bc:	f00f fd36 	bl	24b2c <z_impl_k_poll_signal_raise>
   150c0:	e7bf      	b.n	15042 <bt_conn_set_state+0xca>
			if (conn->err) {
   150c2:	7b23      	ldrb	r3, [r4, #12]
   150c4:	2b00      	cmp	r3, #0
   150c6:	d0c1      	beq.n	1504c <bt_conn_set_state+0xd4>
				notify_connected(conn);
   150c8:	4620      	mov	r0, r4
   150ca:	f7ff fbff 	bl	148cc <notify_connected>
   150ce:	e7bd      	b.n	1504c <bt_conn_set_state+0xd4>
			LOG_WRN("Invalid (%u) old state", state);
   150d0:	466c      	mov	r4, sp
   150d2:	b088      	sub	sp, #32
   150d4:	466a      	mov	r2, sp
   150d6:	4b20      	ldr	r3, [pc, #128]	; (15158 <bt_conn_set_state+0x1e0>)
		LOG_WRN("no valid (%u) state was set", state);
   150d8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   150dc:	2303      	movs	r3, #3
   150de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   150e2:	f842 3f10 	str.w	r3, [r2, #16]!
   150e6:	e763      	b.n	14fb0 <bt_conn_set_state+0x38>
	return list->head;
   150e8:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   150ea:	b921      	cbnz	r1, 150f6 <bt_conn_set_state+0x17e>
   150ec:	f383 8811 	msr	BASEPRI, r3
   150f0:	f3bf 8f6f 	isb	sy
		if (!node) {
   150f4:	e7a5      	b.n	15042 <bt_conn_set_state+0xca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   150f6:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   150f8:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   150fa:	4281      	cmp	r1, r0
	list->tail = node;
   150fc:	bf08      	it	eq
   150fe:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   15100:	6162      	str	r2, [r4, #20]
   15102:	f383 8811 	msr	BASEPRI, r3
   15106:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1510a:	f04f 0220 	mov.w	r2, #32
   1510e:	f3ef 8311 	mrs	r3, BASEPRI
   15112:	f382 8812 	msr	BASEPRI_MAX, r2
   15116:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1511a:	68ca      	ldr	r2, [r1, #12]
   1511c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1511e:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   15120:	f383 8811 	msr	BASEPRI, r3
   15124:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   15128:	4620      	mov	r0, r4
   1512a:	f7ff fc35 	bl	14998 <conn_tx_destroy>
   1512e:	e769      	b.n	15004 <bt_conn_set_state+0x8c>
		LOG_WRN("no valid (%u) state was set", state);
   15130:	466c      	mov	r4, sp
   15132:	b088      	sub	sp, #32
   15134:	466a      	mov	r2, sp
   15136:	4b09      	ldr	r3, [pc, #36]	; (1515c <bt_conn_set_state+0x1e4>)
   15138:	e7ce      	b.n	150d8 <bt_conn_set_state+0x160>
   1513a:	bf00      	nop
   1513c:	0002d704 	.word	0x0002d704
   15140:	00030ce5 	.word	0x00030ce5
   15144:	00030cef 	.word	0x00030cef
   15148:	01000003 	.word	0x01000003
   1514c:	0002cca8 	.word	0x0002cca8
   15150:	20008100 	.word	0x20008100
   15154:	200084d4 	.word	0x200084d4
   15158:	00030d00 	.word	0x00030d00
   1515c:	00030d17 	.word	0x00030d17

00015160 <bt_conn_index>:
		index = conn - acl_conns;
   15160:	4a0c      	ldr	r2, [pc, #48]	; (15194 <bt_conn_index+0x34>)
{
   15162:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   15164:	490c      	ldr	r1, [pc, #48]	; (15198 <bt_conn_index+0x38>)
   15166:	1a83      	subs	r3, r0, r2
   15168:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1516a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1516c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   15170:	d00e      	beq.n	15190 <bt_conn_index+0x30>
   15172:	490a      	ldr	r1, [pc, #40]	; (1519c <bt_conn_index+0x3c>)
   15174:	f240 43b6 	movw	r3, #1206	; 0x4b6
   15178:	4a09      	ldr	r2, [pc, #36]	; (151a0 <bt_conn_index+0x40>)
   1517a:	480a      	ldr	r0, [pc, #40]	; (151a4 <bt_conn_index+0x44>)
   1517c:	f011 fdf9 	bl	26d72 <assert_print>
   15180:	4809      	ldr	r0, [pc, #36]	; (151a8 <bt_conn_index+0x48>)
   15182:	f011 fdf6 	bl	26d72 <assert_print>
   15186:	f240 41b6 	movw	r1, #1206	; 0x4b6
   1518a:	4805      	ldr	r0, [pc, #20]	; (151a0 <bt_conn_index+0x40>)
   1518c:	f011 fdea 	bl	26d64 <assert_post_action>
}
   15190:	b2d8      	uxtb	r0, r3
   15192:	bd08      	pop	{r3, pc}
   15194:	20009d50 	.word	0x20009d50
   15198:	c28f5c29 	.word	0xc28f5c29
   1519c:	00030d33 	.word	0x00030d33
   151a0:	00030b1c 	.word	0x00030b1c
   151a4:	0002dd81 	.word	0x0002dd81
   151a8:	00030dfc 	.word	0x00030dfc

000151ac <bt_conn_create_pdu_timeout>:
{
   151ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   151ae:	b087      	sub	sp, #28
   151b0:	4604      	mov	r4, r0
   151b2:	460d      	mov	r5, r1
   151b4:	4617      	mov	r7, r2
   151b6:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   151b8:	f016 fbed 	bl	2b996 <k_is_in_isr>
   151bc:	b158      	cbz	r0, 151d6 <bt_conn_create_pdu_timeout+0x2a>
   151be:	4914      	ldr	r1, [pc, #80]	; (15210 <bt_conn_create_pdu_timeout+0x64>)
   151c0:	4814      	ldr	r0, [pc, #80]	; (15214 <bt_conn_create_pdu_timeout+0x68>)
   151c2:	f240 43d2 	movw	r3, #1234	; 0x4d2
   151c6:	4a14      	ldr	r2, [pc, #80]	; (15218 <bt_conn_create_pdu_timeout+0x6c>)
   151c8:	f011 fdd3 	bl	26d72 <assert_print>
   151cc:	f240 41d2 	movw	r1, #1234	; 0x4d2
   151d0:	4811      	ldr	r0, [pc, #68]	; (15218 <bt_conn_create_pdu_timeout+0x6c>)
   151d2:	f011 fdc7 	bl	26d64 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   151d6:	4911      	ldr	r1, [pc, #68]	; (1521c <bt_conn_create_pdu_timeout+0x70>)
   151d8:	463a      	mov	r2, r7
   151da:	2c00      	cmp	r4, #0
   151dc:	bf14      	ite	ne
   151de:	4620      	movne	r0, r4
   151e0:	4608      	moveq	r0, r1
   151e2:	4633      	mov	r3, r6
   151e4:	f015 f87e 	bl	2a2e4 <net_buf_alloc_fixed>
	if (!buf) {
   151e8:	4604      	mov	r4, r0
   151ea:	b960      	cbnz	r0, 15206 <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   151ec:	4b0c      	ldr	r3, [pc, #48]	; (15220 <bt_conn_create_pdu_timeout+0x74>)
   151ee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   151f2:	9305      	str	r3, [sp, #20]
   151f4:	2302      	movs	r3, #2
   151f6:	480b      	ldr	r0, [pc, #44]	; (15224 <bt_conn_create_pdu_timeout+0x78>)
   151f8:	aa04      	add	r2, sp, #16
   151fa:	9304      	str	r3, [sp, #16]
   151fc:	f013 fd17 	bl	28c2e <z_log_msg_static_create.constprop.0>
}
   15200:	4620      	mov	r0, r4
   15202:	b007      	add	sp, #28
   15204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   15206:	1d69      	adds	r1, r5, #5
   15208:	300c      	adds	r0, #12
   1520a:	f005 fdd3 	bl	1adb4 <net_buf_simple_reserve>
	return buf;
   1520e:	e7f7      	b.n	15200 <bt_conn_create_pdu_timeout+0x54>
   15210:	00030e16 	.word	0x00030e16
   15214:	0002dd81 	.word	0x0002dd81
   15218:	00030b1c 	.word	0x00030b1c
   1521c:	20008cb0 	.word	0x20008cb0
   15220:	00030e25 	.word	0x00030e25
   15224:	0002cca8 	.word	0x0002cca8

00015228 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1522a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1522c:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1522e:	e8d0 3faf 	lda	r3, [r0]
   15232:	059b      	lsls	r3, r3, #22
   15234:	d511      	bpl.n	1525a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15236:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1523a:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   1523e:	429a      	cmp	r2, r3
   15240:	d80b      	bhi.n	1525a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15242:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15246:	429a      	cmp	r2, r3
   15248:	d307      	bcc.n	1525a <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1524a:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   1524e:	429a      	cmp	r2, r3
   15250:	d103      	bne.n	1525a <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15252:	f46f 7100 	mvn.w	r1, #512	; 0x200
   15256:	f013 fcdf 	bl	28c18 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1525a:	4b18      	ldr	r3, [pc, #96]	; (152bc <notify_le_param_updated+0x94>)
   1525c:	681d      	ldr	r5, [r3, #0]
   1525e:	b995      	cbnz	r5, 15286 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15260:	4d17      	ldr	r5, [pc, #92]	; (152c0 <notify_le_param_updated+0x98>)
   15262:	4f18      	ldr	r7, [pc, #96]	; (152c4 <notify_le_param_updated+0x9c>)
   15264:	42bd      	cmp	r5, r7
   15266:	d926      	bls.n	152b6 <notify_le_param_updated+0x8e>
   15268:	4917      	ldr	r1, [pc, #92]	; (152c8 <notify_le_param_updated+0xa0>)
   1526a:	f240 53a5 	movw	r3, #1445	; 0x5a5
   1526e:	4a17      	ldr	r2, [pc, #92]	; (152cc <notify_le_param_updated+0xa4>)
   15270:	4817      	ldr	r0, [pc, #92]	; (152d0 <notify_le_param_updated+0xa8>)
   15272:	f011 fd7e 	bl	26d72 <assert_print>
   15276:	4817      	ldr	r0, [pc, #92]	; (152d4 <notify_le_param_updated+0xac>)
   15278:	f011 fd7b 	bl	26d72 <assert_print>
   1527c:	f240 51a5 	movw	r1, #1445	; 0x5a5
   15280:	4812      	ldr	r0, [pc, #72]	; (152cc <notify_le_param_updated+0xa4>)
   15282:	f011 fd6f 	bl	26d64 <assert_post_action>
		if (cb->le_param_updated) {
   15286:	68ee      	ldr	r6, [r5, #12]
   15288:	b13e      	cbz	r6, 1529a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   1528a:	4620      	mov	r0, r4
   1528c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15290:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15294:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15298:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1529a:	69ad      	ldr	r5, [r5, #24]
   1529c:	e7df      	b.n	1525e <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   1529e:	68ee      	ldr	r6, [r5, #12]
   152a0:	b13e      	cbz	r6, 152b2 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   152a2:	4620      	mov	r0, r4
   152a4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   152a8:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   152ac:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   152b0:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152b2:	351c      	adds	r5, #28
   152b4:	e7d6      	b.n	15264 <notify_le_param_updated+0x3c>
   152b6:	d3f2      	bcc.n	1529e <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   152b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152ba:	bf00      	nop
   152bc:	2002159c 	.word	0x2002159c
   152c0:	0002cc34 	.word	0x0002cc34
   152c4:	0002cc50 	.word	0x0002cc50
   152c8:	00030b4c 	.word	0x00030b4c
   152cc:	00030b1c 	.word	0x00030b1c
   152d0:	0002dd81 	.word	0x0002dd81
   152d4:	0002eee2 	.word	0x0002eee2

000152d8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   152d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152dc:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   152de:	4608      	mov	r0, r1
{
   152e0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   152e2:	f013 fa4d 	bl	28780 <bt_le_conn_params_valid>
   152e6:	4605      	mov	r5, r0
   152e8:	b918      	cbnz	r0, 152f2 <le_param_req+0x1a>
		return false;
   152ea:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   152ec:	4628      	mov	r0, r5
   152ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   152f2:	4b1b      	ldr	r3, [pc, #108]	; (15360 <le_param_req+0x88>)
   152f4:	681e      	ldr	r6, [r3, #0]
   152f6:	b99e      	cbnz	r6, 15320 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152f8:	4e1a      	ldr	r6, [pc, #104]	; (15364 <le_param_req+0x8c>)
   152fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 15368 <le_param_req+0x90>
   152fe:	4546      	cmp	r6, r8
   15300:	d927      	bls.n	15352 <le_param_req+0x7a>
   15302:	491a      	ldr	r1, [pc, #104]	; (1536c <le_param_req+0x94>)
   15304:	f240 53ed 	movw	r3, #1517	; 0x5ed
   15308:	4a19      	ldr	r2, [pc, #100]	; (15370 <le_param_req+0x98>)
   1530a:	481a      	ldr	r0, [pc, #104]	; (15374 <le_param_req+0x9c>)
   1530c:	f011 fd31 	bl	26d72 <assert_print>
   15310:	4819      	ldr	r0, [pc, #100]	; (15378 <le_param_req+0xa0>)
   15312:	f011 fd2e 	bl	26d72 <assert_print>
   15316:	f240 51ed 	movw	r1, #1517	; 0x5ed
   1531a:	4815      	ldr	r0, [pc, #84]	; (15370 <le_param_req+0x98>)
   1531c:	f011 fd22 	bl	26d64 <assert_post_action>
		if (!cb->le_param_req) {
   15320:	68b3      	ldr	r3, [r6, #8]
   15322:	b90b      	cbnz	r3, 15328 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   15324:	69b6      	ldr	r6, [r6, #24]
   15326:	e7e6      	b.n	152f6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15328:	4621      	mov	r1, r4
   1532a:	4638      	mov	r0, r7
   1532c:	4798      	blx	r3
   1532e:	2800      	cmp	r0, #0
   15330:	d0db      	beq.n	152ea <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15332:	4620      	mov	r0, r4
   15334:	f013 fa24 	bl	28780 <bt_le_conn_params_valid>
   15338:	2800      	cmp	r0, #0
   1533a:	d1f3      	bne.n	15324 <le_param_req+0x4c>
   1533c:	e7d5      	b.n	152ea <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1533e:	4621      	mov	r1, r4
   15340:	4638      	mov	r0, r7
   15342:	4798      	blx	r3
   15344:	2800      	cmp	r0, #0
   15346:	d0d0      	beq.n	152ea <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15348:	4620      	mov	r0, r4
   1534a:	f013 fa19 	bl	28780 <bt_le_conn_params_valid>
   1534e:	b920      	cbnz	r0, 1535a <le_param_req+0x82>
   15350:	e7cb      	b.n	152ea <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15352:	d2cb      	bcs.n	152ec <le_param_req+0x14>
		if (!cb->le_param_req) {
   15354:	68b3      	ldr	r3, [r6, #8]
   15356:	2b00      	cmp	r3, #0
   15358:	d1f1      	bne.n	1533e <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1535a:	361c      	adds	r6, #28
   1535c:	e7cf      	b.n	152fe <le_param_req+0x26>
   1535e:	bf00      	nop
   15360:	2002159c 	.word	0x2002159c
   15364:	0002cc34 	.word	0x0002cc34
   15368:	0002cc50 	.word	0x0002cc50
   1536c:	00030b4c 	.word	0x00030b4c
   15370:	00030b1c 	.word	0x00030b1c
   15374:	0002dd81 	.word	0x0002dd81
   15378:	0002eee2 	.word	0x0002eee2

0001537c <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15380:	78c3      	ldrb	r3, [r0, #3]
{
   15382:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15384:	b9db      	cbnz	r3, 153be <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   15386:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1538a:	4b18      	ldr	r3, [pc, #96]	; (153ec <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1538c:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   15390:	681d      	ldr	r5, [r3, #0]
   15392:	b9bd      	cbnz	r5, 153c4 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15394:	4d16      	ldr	r5, [pc, #88]	; (153f0 <bt_conn_identity_resolved+0x74>)
   15396:	4f17      	ldr	r7, [pc, #92]	; (153f4 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15398:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1539c:	42bd      	cmp	r5, r7
   1539e:	d921      	bls.n	153e4 <bt_conn_identity_resolved+0x68>
   153a0:	4915      	ldr	r1, [pc, #84]	; (153f8 <bt_conn_identity_resolved+0x7c>)
   153a2:	f240 73bc 	movw	r3, #1980	; 0x7bc
   153a6:	4a15      	ldr	r2, [pc, #84]	; (153fc <bt_conn_identity_resolved+0x80>)
   153a8:	4815      	ldr	r0, [pc, #84]	; (15400 <bt_conn_identity_resolved+0x84>)
   153aa:	f011 fce2 	bl	26d72 <assert_print>
   153ae:	4815      	ldr	r0, [pc, #84]	; (15404 <bt_conn_identity_resolved+0x88>)
   153b0:	f011 fcdf 	bl	26d72 <assert_print>
   153b4:	f240 71bc 	movw	r1, #1980	; 0x7bc
   153b8:	4810      	ldr	r0, [pc, #64]	; (153fc <bt_conn_identity_resolved+0x80>)
   153ba:	f011 fcd3 	bl	26d64 <assert_post_action>
		rpa = &conn->le.init_addr;
   153be:	f100 0697 	add.w	r6, r0, #151	; 0x97
   153c2:	e7e2      	b.n	1538a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   153c4:	692b      	ldr	r3, [r5, #16]
   153c6:	b11b      	cbz	r3, 153d0 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   153c8:	463a      	mov	r2, r7
   153ca:	4631      	mov	r1, r6
   153cc:	4620      	mov	r0, r4
   153ce:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   153d0:	69ad      	ldr	r5, [r5, #24]
   153d2:	e7de      	b.n	15392 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   153d4:	692b      	ldr	r3, [r5, #16]
   153d6:	b11b      	cbz	r3, 153e0 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   153d8:	4642      	mov	r2, r8
   153da:	4631      	mov	r1, r6
   153dc:	4620      	mov	r0, r4
   153de:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   153e0:	351c      	adds	r5, #28
   153e2:	e7db      	b.n	1539c <bt_conn_identity_resolved+0x20>
   153e4:	d3f6      	bcc.n	153d4 <bt_conn_identity_resolved+0x58>
		}
	}
}
   153e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   153ea:	bf00      	nop
   153ec:	2002159c 	.word	0x2002159c
   153f0:	0002cc34 	.word	0x0002cc34
   153f4:	0002cc50 	.word	0x0002cc50
   153f8:	00030b4c 	.word	0x00030b4c
   153fc:	00030b1c 	.word	0x00030b1c
   15400:	0002dd81 	.word	0x0002dd81
   15404:	0002eee2 	.word	0x0002eee2

00015408 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   15408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1540a:	7a43      	ldrb	r3, [r0, #9]
{
   1540c:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1540e:	7283      	strb	r3, [r0, #10]
{
   15410:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   15412:	f013 fd2b 	bl	28e6c <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15416:	4b14      	ldr	r3, [pc, #80]	; (15468 <bt_conn_security_changed+0x60>)
   15418:	681d      	ldr	r5, [r3, #0]
   1541a:	b995      	cbnz	r5, 15442 <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1541c:	4d13      	ldr	r5, [pc, #76]	; (1546c <bt_conn_security_changed+0x64>)
   1541e:	4f14      	ldr	r7, [pc, #80]	; (15470 <bt_conn_security_changed+0x68>)
   15420:	42bd      	cmp	r5, r7
   15422:	d91e      	bls.n	15462 <bt_conn_security_changed+0x5a>
   15424:	4913      	ldr	r1, [pc, #76]	; (15474 <bt_conn_security_changed+0x6c>)
   15426:	f640 0328 	movw	r3, #2088	; 0x828
   1542a:	4a13      	ldr	r2, [pc, #76]	; (15478 <bt_conn_security_changed+0x70>)
   1542c:	4813      	ldr	r0, [pc, #76]	; (1547c <bt_conn_security_changed+0x74>)
   1542e:	f011 fca0 	bl	26d72 <assert_print>
   15432:	4813      	ldr	r0, [pc, #76]	; (15480 <bt_conn_security_changed+0x78>)
   15434:	f011 fc9d 	bl	26d72 <assert_print>
   15438:	f640 0128 	movw	r1, #2088	; 0x828
   1543c:	480e      	ldr	r0, [pc, #56]	; (15478 <bt_conn_security_changed+0x70>)
   1543e:	f011 fc91 	bl	26d64 <assert_post_action>
		if (cb->security_changed) {
   15442:	696b      	ldr	r3, [r5, #20]
   15444:	b11b      	cbz	r3, 1544e <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   15446:	4632      	mov	r2, r6
   15448:	4620      	mov	r0, r4
   1544a:	7a61      	ldrb	r1, [r4, #9]
   1544c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1544e:	69ad      	ldr	r5, [r5, #24]
   15450:	e7e3      	b.n	1541a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   15452:	696b      	ldr	r3, [r5, #20]
   15454:	b11b      	cbz	r3, 1545e <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   15456:	4632      	mov	r2, r6
   15458:	4620      	mov	r0, r4
   1545a:	7a61      	ldrb	r1, [r4, #9]
   1545c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1545e:	351c      	adds	r5, #28
   15460:	e7de      	b.n	15420 <bt_conn_security_changed+0x18>
   15462:	d3f6      	bcc.n	15452 <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   15464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15466:	bf00      	nop
   15468:	2002159c 	.word	0x2002159c
   1546c:	0002cc34 	.word	0x0002cc34
   15470:	0002cc50 	.word	0x0002cc50
   15474:	00030b4c 	.word	0x00030b4c
   15478:	00030b1c 	.word	0x00030b1c
   1547c:	0002dd81 	.word	0x0002dd81
   15480:	0002eee2 	.word	0x0002eee2

00015484 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15484:	b538      	push	{r3, r4, r5, lr}
   15486:	4605      	mov	r5, r0
   15488:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1548a:	480b      	ldr	r0, [pc, #44]	; (154b8 <bt_conn_add_le+0x34>)
   1548c:	2101      	movs	r1, #1
   1548e:	f7ff fb5f 	bl	14b50 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15492:	b180      	cbz	r0, 154b6 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   15494:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15496:	6823      	ldr	r3, [r4, #0]
   15498:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   1549c:	88a3      	ldrh	r3, [r4, #4]
   1549e:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   154a2:	79a3      	ldrb	r3, [r4, #6]
   154a4:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   154a8:	2301      	movs	r3, #1
   154aa:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   154ac:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   154ae:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   154b0:	4b02      	ldr	r3, [pc, #8]	; (154bc <bt_conn_add_le+0x38>)
   154b2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   154b6:	bd38      	pop	{r3, r4, r5, pc}
   154b8:	20009d50 	.word	0x20009d50
   154bc:	00280018 	.word	0x00280018

000154c0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   154c0:	b570      	push	{r4, r5, r6, lr}
   154c2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   154c4:	480a      	ldr	r0, [pc, #40]	; (154f0 <bt_conn_lookup_addr_le+0x30>)
{
   154c6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   154c8:	f7ff fcf6 	bl	14eb8 <bt_conn_ref>
   154cc:	4604      	mov	r4, r0

		if (!conn) {
   154ce:	b120      	cbz	r0, 154da <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   154d0:	7883      	ldrb	r3, [r0, #2]
   154d2:	2b01      	cmp	r3, #1
   154d4:	d004      	beq.n	154e0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   154d6:	f7ff fd17 	bl	14f08 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   154da:	2400      	movs	r4, #0
}
   154dc:	4620      	mov	r0, r4
   154de:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   154e0:	4632      	mov	r2, r6
   154e2:	4629      	mov	r1, r5
   154e4:	f013 fc2b 	bl	28d3e <bt_conn_is_peer_addr_le>
   154e8:	2800      	cmp	r0, #0
   154ea:	d1f7      	bne.n	154dc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   154ec:	4620      	mov	r0, r4
   154ee:	e7f2      	b.n	154d6 <bt_conn_lookup_addr_le+0x16>
   154f0:	20009d50 	.word	0x20009d50

000154f4 <bt_conn_exists_le>:
{
   154f4:	b5b0      	push	{r4, r5, r7, lr}
   154f6:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   154f8:	f7ff ffe2 	bl	154c0 <bt_conn_lookup_addr_le>
	if (conn) {
   154fc:	4604      	mov	r4, r0
   154fe:	b1e8      	cbz	r0, 1553c <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   15500:	7b43      	ldrb	r3, [r0, #13]
   15502:	466d      	mov	r5, sp
   15504:	2b08      	cmp	r3, #8
   15506:	bf98      	it	ls
   15508:	4a0d      	ldrls	r2, [pc, #52]	; (15540 <bt_conn_exists_le+0x4c>)
   1550a:	b088      	sub	sp, #32
   1550c:	bf94      	ite	ls
   1550e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   15512:	4b0c      	ldrhi	r3, [pc, #48]	; (15544 <bt_conn_exists_le+0x50>)
   15514:	466a      	mov	r2, sp
   15516:	490c      	ldr	r1, [pc, #48]	; (15548 <bt_conn_exists_le+0x54>)
   15518:	480c      	ldr	r0, [pc, #48]	; (1554c <bt_conn_exists_le+0x58>)
   1551a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1551e:	f44f 7300 	mov.w	r3, #512	; 0x200
   15522:	8393      	strh	r3, [r2, #28]
   15524:	4b0a      	ldr	r3, [pc, #40]	; (15550 <bt_conn_exists_le+0x5c>)
   15526:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1552a:	f842 3f10 	str.w	r3, [r2, #16]!
   1552e:	f013 fb7e 	bl	28c2e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   15532:	4620      	mov	r0, r4
   15534:	46ad      	mov	sp, r5
   15536:	f7ff fce7 	bl	14f08 <bt_conn_unref>
		return true;
   1553a:	2001      	movs	r0, #1
}
   1553c:	46bd      	mov	sp, r7
   1553e:	bdb0      	pop	{r4, r5, r7, pc}
   15540:	0002d704 	.word	0x0002d704
   15544:	00030ce5 	.word	0x00030ce5
   15548:	00030e4e 	.word	0x00030e4e
   1554c:	0002cca8 	.word	0x0002cca8
   15550:	01000003 	.word	0x01000003

00015554 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15556:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15558:	480e      	ldr	r0, [pc, #56]	; (15594 <bt_conn_lookup_state_le+0x40>)
{
   1555a:	460e      	mov	r6, r1
   1555c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1555e:	f7ff fcab 	bl	14eb8 <bt_conn_ref>

		if (!conn) {
   15562:	4604      	mov	r4, r0
   15564:	b120      	cbz	r0, 15570 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15566:	7883      	ldrb	r3, [r0, #2]
   15568:	2b01      	cmp	r3, #1
   1556a:	d003      	beq.n	15574 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1556c:	f7ff fccc 	bl	14f08 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15570:	2400      	movs	r4, #0
   15572:	e00d      	b.n	15590 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15574:	b136      	cbz	r6, 15584 <bt_conn_lookup_state_le+0x30>
   15576:	4632      	mov	r2, r6
   15578:	4629      	mov	r1, r5
   1557a:	f013 fbe0 	bl	28d3e <bt_conn_is_peer_addr_le>
   1557e:	b908      	cbnz	r0, 15584 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   15580:	4620      	mov	r0, r4
   15582:	e7f3      	b.n	1556c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15584:	7b63      	ldrb	r3, [r4, #13]
   15586:	42bb      	cmp	r3, r7
   15588:	d1fa      	bne.n	15580 <bt_conn_lookup_state_le+0x2c>
   1558a:	7a23      	ldrb	r3, [r4, #8]
   1558c:	42ab      	cmp	r3, r5
   1558e:	d1f7      	bne.n	15580 <bt_conn_lookup_state_le+0x2c>
}
   15590:	4620      	mov	r0, r4
   15592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15594:	20009d50 	.word	0x20009d50

00015598 <send_conn_le_param_update>:
{
   15598:	b538      	push	{r3, r4, r5, lr}
   1559a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1559c:	4608      	mov	r0, r1
{
   1559e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   155a0:	f013 f8ee 	bl	28780 <bt_le_conn_params_valid>
   155a4:	b338      	cbz	r0, 155f6 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   155a6:	4b15      	ldr	r3, [pc, #84]	; (155fc <send_conn_le_param_update+0x64>)
   155a8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   155ac:	0799      	lsls	r1, r3, #30
   155ae:	d407      	bmi.n	155c0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   155b0:	78e3      	ldrb	r3, [r4, #3]
   155b2:	b173      	cbz	r3, 155d2 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   155b4:	4629      	mov	r1, r5
   155b6:	4620      	mov	r0, r4
}
   155b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   155bc:	f000 bb02 	b.w	15bc4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   155c0:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   155c4:	079a      	lsls	r2, r3, #30
   155c6:	d5f3      	bpl.n	155b0 <send_conn_le_param_update+0x18>
   155c8:	1d23      	adds	r3, r4, #4
   155ca:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   155ce:	055b      	lsls	r3, r3, #21
   155d0:	d4ee      	bmi.n	155b0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   155d2:	4629      	mov	r1, r5
   155d4:	4620      	mov	r0, r4
   155d6:	f013 fbd4 	bl	28d82 <bt_conn_le_conn_update>
		if (rc == 0) {
   155da:	b958      	cbnz	r0, 155f4 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   155dc:	882b      	ldrh	r3, [r5, #0]
   155de:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   155e2:	886b      	ldrh	r3, [r5, #2]
   155e4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   155e8:	88ab      	ldrh	r3, [r5, #4]
   155ea:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   155ee:	88eb      	ldrh	r3, [r5, #6]
   155f0:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   155f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   155f6:	f06f 0015 	mvn.w	r0, #21
   155fa:	e7fb      	b.n	155f4 <send_conn_le_param_update+0x5c>
   155fc:	20008000 	.word	0x20008000

00015600 <deferred_work>:
{
   15600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15604:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   15606:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   1560a:	4604      	mov	r4, r0
   1560c:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1560e:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   15612:	bb8b      	cbnz	r3, 15678 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   15614:	4630      	mov	r0, r6
   15616:	f013 fc11 	bl	28e3c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1561a:	4b3d      	ldr	r3, [pc, #244]	; (15710 <deferred_work+0x110>)
   1561c:	681d      	ldr	r5, [r3, #0]
   1561e:	b99d      	cbnz	r5, 15648 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15620:	4d3c      	ldr	r5, [pc, #240]	; (15714 <deferred_work+0x114>)
   15622:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 15718 <deferred_work+0x118>
   15626:	4545      	cmp	r5, r8
   15628:	d91e      	bls.n	15668 <deferred_work+0x68>
   1562a:	493c      	ldr	r1, [pc, #240]	; (1571c <deferred_work+0x11c>)
   1562c:	f240 536c 	movw	r3, #1388	; 0x56c
   15630:	4a3b      	ldr	r2, [pc, #236]	; (15720 <deferred_work+0x120>)
   15632:	483c      	ldr	r0, [pc, #240]	; (15724 <deferred_work+0x124>)
   15634:	f011 fb9d 	bl	26d72 <assert_print>
   15638:	483b      	ldr	r0, [pc, #236]	; (15728 <deferred_work+0x128>)
   1563a:	f011 fb9a 	bl	26d72 <assert_print>
   1563e:	f240 516c 	movw	r1, #1388	; 0x56c
   15642:	4837      	ldr	r0, [pc, #220]	; (15720 <deferred_work+0x120>)
   15644:	f011 fb8e 	bl	26d64 <assert_post_action>
		if (cb->disconnected) {
   15648:	686b      	ldr	r3, [r5, #4]
   1564a:	b11b      	cbz	r3, 15654 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   1564c:	4630      	mov	r0, r6
   1564e:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15652:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15654:	69ad      	ldr	r5, [r5, #24]
   15656:	e7e2      	b.n	1561e <deferred_work+0x1e>
		if (cb->disconnected) {
   15658:	686b      	ldr	r3, [r5, #4]
   1565a:	b11b      	cbz	r3, 15664 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   1565c:	4630      	mov	r0, r6
   1565e:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15662:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15664:	351c      	adds	r5, #28
   15666:	e7de      	b.n	15626 <deferred_work+0x26>
   15668:	d3f6      	bcc.n	15658 <deferred_work+0x58>
		bt_conn_unref(conn);
   1566a:	4630      	mov	r0, r6
   1566c:	f7ff fc4c 	bl	14f08 <bt_conn_unref>
}
   15670:	3708      	adds	r7, #8
   15672:	46bd      	mov	sp, r7
   15674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   15678:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1567c:	2b01      	cmp	r3, #1
   1567e:	d1f7      	bne.n	15670 <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   15680:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15684:	f46f 7100 	mvn.w	r1, #512	; 0x200
   15688:	4628      	mov	r0, r5
   1568a:	f013 fac5 	bl	28c18 <atomic_and>
   1568e:	0581      	lsls	r1, r0, #22
   15690:	d526      	bpl.n	156e0 <deferred_work+0xe0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15692:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   15694:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15696:	603b      	str	r3, [r7, #0]
   15698:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   1569a:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1569c:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   1569e:	f7ff ff7b 	bl	15598 <send_conn_le_param_update>
		if (!err) {
   156a2:	b968      	cbnz	r0, 156c0 <deferred_work+0xc0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   156a4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   156a8:	4628      	mov	r0, r5
   156aa:	f013 fab5 	bl	28c18 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   156ae:	e8d5 3fef 	ldaex	r3, [r5]
   156b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   156b6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   156ba:	2a00      	cmp	r2, #0
   156bc:	d0d8      	beq.n	15670 <deferred_work+0x70>
   156be:	e7f6      	b.n	156ae <deferred_work+0xae>
			LOG_WRN("Send LE param update failed (err %d)", err);
   156c0:	466c      	mov	r4, sp
   156c2:	b088      	sub	sp, #32
   156c4:	466a      	mov	r2, sp
   156c6:	4b19      	ldr	r3, [pc, #100]	; (1572c <deferred_work+0x12c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   156c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   156cc:	2303      	movs	r3, #3
   156ce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   156d2:	4817      	ldr	r0, [pc, #92]	; (15730 <deferred_work+0x130>)
   156d4:	f842 3f10 	str.w	r3, [r2, #16]!
   156d8:	f013 faa9 	bl	28c2e <z_log_msg_static_create.constprop.0>
   156dc:	46a5      	mov	sp, r4
   156de:	e7e6      	b.n	156ae <deferred_work+0xae>
		param = BT_LE_CONN_PARAM(
   156e0:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   156e4:	4a13      	ldr	r2, [pc, #76]	; (15734 <deferred_work+0x134>)
		err = send_conn_le_param_update(conn, param);
   156e6:	4639      	mov	r1, r7
   156e8:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
   156ea:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   156ee:	f7ff ff53 	bl	15598 <send_conn_le_param_update>
		if (!err) {
   156f2:	b940      	cbnz	r0, 15706 <deferred_work+0x106>
   156f4:	e8d5 3fef 	ldaex	r3, [r5]
   156f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   156fc:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15700:	2a00      	cmp	r2, #0
   15702:	d0d4      	beq.n	156ae <deferred_work+0xae>
   15704:	e7f6      	b.n	156f4 <deferred_work+0xf4>
			LOG_WRN("Send auto LE param update failed (err %d)",
   15706:	466c      	mov	r4, sp
   15708:	b088      	sub	sp, #32
   1570a:	466a      	mov	r2, sp
   1570c:	4b0a      	ldr	r3, [pc, #40]	; (15738 <deferred_work+0x138>)
   1570e:	e7db      	b.n	156c8 <deferred_work+0xc8>
   15710:	2002159c 	.word	0x2002159c
   15714:	0002cc34 	.word	0x0002cc34
   15718:	0002cc50 	.word	0x0002cc50
   1571c:	00030b4c 	.word	0x00030b4c
   15720:	00030b1c 	.word	0x00030b1c
   15724:	0002dd81 	.word	0x0002dd81
   15728:	0002eee2 	.word	0x0002eee2
   1572c:	00030e71 	.word	0x00030e71
   15730:	0002cca8 	.word	0x0002cca8
   15734:	00280018 	.word	0x00280018
   15738:	00030e96 	.word	0x00030e96

0001573c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1573c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1573e:	4801      	ldr	r0, [pc, #4]	; (15744 <bt_conn_create_frag_timeout+0x8>)
   15740:	f7ff bd34 	b.w	151ac <bt_conn_create_pdu_timeout>
   15744:	20008d4c 	.word	0x20008d4c

00015748 <create_frag>:
{
   15748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1574c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1574e:	f04f 33ff 	mov.w	r3, #4294967295
   15752:	f04f 32ff 	mov.w	r2, #4294967295
   15756:	2000      	movs	r0, #0
{
   15758:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1575a:	f7ff ffef 	bl	1573c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1575e:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   15760:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15762:	2b07      	cmp	r3, #7
   15764:	f04f 0600 	mov.w	r6, #0
   15768:	d005      	beq.n	15776 <create_frag+0x2e>
		net_buf_unref(frag);
   1576a:	f005 fc35 	bl	1afd8 <net_buf_unref>
		return NULL;
   1576e:	4635      	mov	r5, r6
}
   15770:	4628      	mov	r0, r5
   15772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   15776:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   15778:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   1577c:	4e0c      	ldr	r6, [pc, #48]	; (157b0 <create_frag+0x68>)
   1577e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15780:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15784:	f014 fdc8 	bl	2a318 <net_buf_simple_tailroom>
   15788:	4580      	cmp	r8, r0
   1578a:	d20c      	bcs.n	157a6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1578c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15790:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   15794:	4632      	mov	r2, r6
   15796:	4638      	mov	r0, r7
   15798:	f014 fdc6 	bl	2a328 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1579c:	4631      	mov	r1, r6
   1579e:	4620      	mov	r0, r4
   157a0:	f005 fd00 	bl	1b1a4 <net_buf_simple_pull>
   157a4:	e7e4      	b.n	15770 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   157a6:	4638      	mov	r0, r7
   157a8:	f014 fdb6 	bl	2a318 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   157ac:	b286      	uxth	r6, r0
   157ae:	e7ef      	b.n	15790 <create_frag+0x48>
   157b0:	20008000 	.word	0x20008000

000157b4 <bt_conn_process_tx>:
{
   157b4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   157b6:	7b43      	ldrb	r3, [r0, #13]
{
   157b8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   157ba:	b95b      	cbnz	r3, 157d4 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   157bc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   157c0:	3004      	adds	r0, #4
   157c2:	f013 fa29 	bl	28c18 <atomic_and>
   157c6:	0643      	lsls	r3, r0, #25
   157c8:	d504      	bpl.n	157d4 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   157ca:	4620      	mov	r0, r4
}
   157cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   157d0:	f7ff b9ec 	b.w	14bac <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   157d4:	2200      	movs	r2, #0
   157d6:	2300      	movs	r3, #0
   157d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   157dc:	f014 fd87 	bl	2a2ee <net_buf_get>
	BT_ASSERT(buf);
   157e0:	4605      	mov	r5, r0
   157e2:	b960      	cbnz	r0, 157fe <bt_conn_process_tx+0x4a>
   157e4:	f240 331a 	movw	r3, #794	; 0x31a
   157e8:	4a22      	ldr	r2, [pc, #136]	; (15874 <bt_conn_process_tx+0xc0>)
   157ea:	4923      	ldr	r1, [pc, #140]	; (15878 <bt_conn_process_tx+0xc4>)
   157ec:	4823      	ldr	r0, [pc, #140]	; (1587c <bt_conn_process_tx+0xc8>)
   157ee:	f011 fac0 	bl	26d72 <assert_print>
   157f2:	4040      	eors	r0, r0
   157f4:	f380 8811 	msr	BASEPRI, r0
   157f8:	f04f 0003 	mov.w	r0, #3
   157fc:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   157fe:	4e20      	ldr	r6, [pc, #128]	; (15880 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   15800:	8a2a      	ldrh	r2, [r5, #16]
   15802:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15806:	429a      	cmp	r2, r3
   15808:	d807      	bhi.n	1581a <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1580a:	2300      	movs	r3, #0
   1580c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1580e:	4629      	mov	r1, r5
   15810:	4620      	mov	r0, r4
   15812:	f7ff f8e7 	bl	149e4 <send_frag>
	if (!send_buf(conn, buf)) {
   15816:	b968      	cbnz	r0, 15834 <bt_conn_process_tx+0x80>
   15818:	e005      	b.n	15826 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   1581a:	4629      	mov	r1, r5
   1581c:	4620      	mov	r0, r4
   1581e:	f7ff ff93 	bl	15748 <create_frag>
	if (!frag) {
   15822:	4601      	mov	r1, r0
   15824:	b938      	cbnz	r0, 15836 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   15826:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   15828:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   1582a:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   1582c:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1582e:	f005 fbd3 	bl	1afd8 <net_buf_unref>
		if (tx) {
   15832:	b9ce      	cbnz	r6, 15868 <bt_conn_process_tx+0xb4>
}
   15834:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15836:	2301      	movs	r3, #1
   15838:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1583a:	4620      	mov	r0, r4
   1583c:	f7ff f8d2 	bl	149e4 <send_frag>
   15840:	2800      	cmp	r0, #0
   15842:	d0f0      	beq.n	15826 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   15844:	8a2a      	ldrh	r2, [r5, #16]
   15846:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1584a:	429a      	cmp	r2, r3
   1584c:	d802      	bhi.n	15854 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   1584e:	2300      	movs	r3, #0
   15850:	2203      	movs	r2, #3
   15852:	e7dc      	b.n	1580e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   15854:	4629      	mov	r1, r5
   15856:	4620      	mov	r0, r4
   15858:	f7ff ff76 	bl	15748 <create_frag>
		if (!frag) {
   1585c:	4601      	mov	r1, r0
   1585e:	2800      	cmp	r0, #0
   15860:	d0e1      	beq.n	15826 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15862:	2301      	movs	r3, #1
   15864:	461a      	mov	r2, r3
   15866:	e7e8      	b.n	1583a <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   15868:	4631      	mov	r1, r6
   1586a:	4620      	mov	r0, r4
}
   1586c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   15870:	f7ff b892 	b.w	14998 <conn_tx_destroy>
   15874:	00030b1c 	.word	0x00030b1c
   15878:	00031e39 	.word	0x00031e39
   1587c:	0002dd81 	.word	0x0002dd81
   15880:	20008000 	.word	0x20008000

00015884 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   15884:	4b0b      	ldr	r3, [pc, #44]	; (158b4 <bt_conn_auth_cb_register+0x30>)
   15886:	b158      	cbz	r0, 158a0 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   15888:	681a      	ldr	r2, [r3, #0]
   1588a:	b962      	cbnz	r2, 158a6 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1588c:	6902      	ldr	r2, [r0, #16]
   1588e:	b93a      	cbnz	r2, 158a0 <bt_conn_auth_cb_register+0x1c>
   15890:	6802      	ldr	r2, [r0, #0]
   15892:	b95a      	cbnz	r2, 158ac <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   15894:	6842      	ldr	r2, [r0, #4]
   15896:	b94a      	cbnz	r2, 158ac <bt_conn_auth_cb_register+0x28>
   15898:	6882      	ldr	r2, [r0, #8]
   1589a:	b93a      	cbnz	r2, 158ac <bt_conn_auth_cb_register+0x28>
   1589c:	6942      	ldr	r2, [r0, #20]
   1589e:	b92a      	cbnz	r2, 158ac <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   158a0:	6018      	str	r0, [r3, #0]
		return 0;
   158a2:	2000      	movs	r0, #0
   158a4:	4770      	bx	lr
		return -EALREADY;
   158a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   158aa:	4770      	bx	lr
		return -EINVAL;
   158ac:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   158b0:	4770      	bx	lr
   158b2:	bf00      	nop
   158b4:	200215a8 	.word	0x200215a8

000158b8 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   158b8:	b168      	cbz	r0, 158d6 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   158ba:	2300      	movs	r3, #0
   158bc:	60c3      	str	r3, [r0, #12]
	return list->tail;
   158be:	4b07      	ldr	r3, [pc, #28]	; (158dc <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   158c0:	f100 020c 	add.w	r2, r0, #12
   158c4:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   158c6:	b919      	cbnz	r1, 158d0 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   158c8:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   158cc:	2000      	movs	r0, #0
   158ce:	4770      	bx	lr
	parent->next = child;
   158d0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   158d2:	605a      	str	r2, [r3, #4]
}
   158d4:	e7fa      	b.n	158cc <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   158d6:	f06f 0015 	mvn.w	r0, #21
}
   158da:	4770      	bx	lr
   158dc:	200215a0 	.word	0x200215a0

000158e0 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   158e0:	b910      	cbnz	r0, 158e8 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   158e2:	4802      	ldr	r0, [pc, #8]	; (158ec <bt_conn_lookup_index+0xc>)
   158e4:	f7ff bae8 	b.w	14eb8 <bt_conn_ref>
}
   158e8:	2000      	movs	r0, #0
   158ea:	4770      	bx	lr
   158ec:	20009d50 	.word	0x20009d50

000158f0 <bt_conn_init>:

int bt_conn_init(void)
{
   158f0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   158f2:	480a      	ldr	r0, [pc, #40]	; (1591c <bt_conn_init+0x2c>)
   158f4:	f016 f87e 	bl	2b9f4 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   158f8:	4909      	ldr	r1, [pc, #36]	; (15920 <bt_conn_init+0x30>)
   158fa:	4808      	ldr	r0, [pc, #32]	; (1591c <bt_conn_init+0x2c>)
   158fc:	f016 f887 	bl	2ba0e <k_queue_append>
   15900:	4908      	ldr	r1, [pc, #32]	; (15924 <bt_conn_init+0x34>)
   15902:	4806      	ldr	r0, [pc, #24]	; (1591c <bt_conn_init+0x2c>)
   15904:	f016 f883 	bl	2ba0e <k_queue_append>
	}

	bt_att_init();
   15908:	f001 f932 	bl	16b70 <bt_att_init>

	err = bt_smp_init();
   1590c:	f004 fd80 	bl	1a410 <bt_smp_init>
	if (err) {
   15910:	4604      	mov	r4, r0
   15912:	b908      	cbnz	r0, 15918 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   15914:	f013 faf5 	bl	28f02 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15918:	4620      	mov	r0, r4
   1591a:	bd10      	pop	{r4, pc}
   1591c:	20008c60 	.word	0x20008c60
   15920:	2002157c 	.word	0x2002157c
   15924:	2002158c 	.word	0x2002158c

00015928 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15928:	b580      	push	{r7, lr}
   1592a:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1592c:	b088      	sub	sp, #32
   1592e:	466a      	mov	r2, sp
   15930:	4b06      	ldr	r3, [pc, #24]	; (1594c <l2cap_create_le_sig_pdu.part.0+0x24>)
   15932:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15936:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1593a:	2303      	movs	r3, #3
   1593c:	4804      	ldr	r0, [pc, #16]	; (15950 <l2cap_create_le_sig_pdu.part.0+0x28>)
   1593e:	f842 3f10 	str.w	r3, [r2, #16]!
   15942:	f013 fa47 	bl	28dd4 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   15946:	2000      	movs	r0, #0
   15948:	46bd      	mov	sp, r7
   1594a:	bd80      	pop	{r7, pc}
   1594c:	00030f39 	.word	0x00030f39
   15950:	0002ccf0 	.word	0x0002ccf0

00015954 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   15954:	b580      	push	{r7, lr}
   15956:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   15958:	b088      	sub	sp, #32
   1595a:	466a      	mov	r2, sp
   1595c:	4b07      	ldr	r3, [pc, #28]	; (1597c <l2cap_accept.part.0+0x28>)
   1595e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15962:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15966:	2303      	movs	r3, #3
   15968:	4805      	ldr	r0, [pc, #20]	; (15980 <l2cap_accept.part.0+0x2c>)
   1596a:	f842 3f10 	str.w	r3, [r2, #16]!
   1596e:	f013 fa31 	bl	28dd4 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   15972:	f06f 000b 	mvn.w	r0, #11
   15976:	46bd      	mov	sp, r7
   15978:	bd80      	pop	{r7, pc}
   1597a:	bf00      	nop
   1597c:	00030f61 	.word	0x00030f61
   15980:	0002ccf0 	.word	0x0002ccf0

00015984 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   15984:	4b04      	ldr	r3, [pc, #16]	; (15998 <l2cap_accept+0x14>)
   15986:	681a      	ldr	r2, [r3, #0]
   15988:	b10a      	cbz	r2, 1598e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1598a:	f7ff bfe3 	b.w	15954 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1598e:	4803      	ldr	r0, [pc, #12]	; (1599c <l2cap_accept+0x18>)
   15990:	6058      	str	r0, [r3, #4]
}
   15992:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   15994:	600b      	str	r3, [r1, #0]
}
   15996:	4770      	bx	lr
   15998:	200215ac 	.word	0x200215ac
   1599c:	0002d748 	.word	0x0002d748

000159a0 <bt_l2cap_connected>:
{
   159a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   159a2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   159a4:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   159a6:	4d27      	ldr	r5, [pc, #156]	; (15a44 <bt_l2cap_connected+0xa4>)
   159a8:	4f27      	ldr	r7, [pc, #156]	; (15a48 <bt_l2cap_connected+0xa8>)
   159aa:	42bd      	cmp	r5, r7
   159ac:	d946      	bls.n	15a3c <bt_l2cap_connected+0x9c>
   159ae:	4927      	ldr	r1, [pc, #156]	; (15a4c <bt_l2cap_connected+0xac>)
   159b0:	f240 1381 	movw	r3, #385	; 0x181
   159b4:	4a26      	ldr	r2, [pc, #152]	; (15a50 <bt_l2cap_connected+0xb0>)
   159b6:	4827      	ldr	r0, [pc, #156]	; (15a54 <bt_l2cap_connected+0xb4>)
   159b8:	f011 f9db 	bl	26d72 <assert_print>
   159bc:	4826      	ldr	r0, [pc, #152]	; (15a58 <bt_l2cap_connected+0xb8>)
   159be:	f011 f9d8 	bl	26d72 <assert_print>
   159c2:	f240 1181 	movw	r1, #385	; 0x181
   159c6:	4822      	ldr	r0, [pc, #136]	; (15a50 <bt_l2cap_connected+0xb0>)
   159c8:	f011 f9cc 	bl	26d64 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   159cc:	4620      	mov	r0, r4
   159ce:	686b      	ldr	r3, [r5, #4]
   159d0:	a901      	add	r1, sp, #4
   159d2:	4798      	blx	r3
   159d4:	2800      	cmp	r0, #0
   159d6:	db2c      	blt.n	15a32 <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   159d8:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   159da:	882a      	ldrh	r2, [r5, #0]
   159dc:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   159de:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   159e0:	68a8      	ldr	r0, [r5, #8]
   159e2:	f103 0210 	add.w	r2, r3, #16
   159e6:	e8d2 1fef 	ldaex	r1, [r2]
   159ea:	e8c2 6fec 	stlex	ip, r6, [r2]
   159ee:	f1bc 0f00 	cmp.w	ip, #0
   159f2:	d1f8      	bne.n	159e6 <bt_l2cap_connected+0x46>
	parent->next = child;
   159f4:	609e      	str	r6, [r3, #8]
	return list->tail;
   159f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   159f8:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   159fc:	b9d9      	cbnz	r1, 15a36 <bt_l2cap_connected+0x96>
	list->head = node;
   159fe:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   15a02:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15a04:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15a06:	9801      	ldr	r0, [sp, #4]
   15a08:	6843      	ldr	r3, [r0, #4]
   15a0a:	681b      	ldr	r3, [r3, #0]
   15a0c:	b103      	cbz	r3, 15a10 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   15a0e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15a10:	9b01      	ldr	r3, [sp, #4]
   15a12:	3310      	adds	r3, #16
   15a14:	e8d3 1fef 	ldaex	r1, [r3]
   15a18:	f041 0101 	orr.w	r1, r1, #1
   15a1c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15a20:	2a00      	cmp	r2, #0
   15a22:	d1f7      	bne.n	15a14 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   15a24:	9801      	ldr	r0, [sp, #4]
   15a26:	6843      	ldr	r3, [r0, #4]
   15a28:	69db      	ldr	r3, [r3, #28]
   15a2a:	b113      	cbz	r3, 15a32 <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   15a2c:	f100 0110 	add.w	r1, r0, #16
   15a30:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15a32:	350c      	adds	r5, #12
   15a34:	e7b9      	b.n	159aa <bt_l2cap_connected+0xa>
	parent->next = child;
   15a36:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15a38:	65a2      	str	r2, [r4, #88]	; 0x58
}
   15a3a:	e7e2      	b.n	15a02 <bt_l2cap_connected+0x62>
   15a3c:	d3c6      	bcc.n	159cc <bt_l2cap_connected+0x2c>
}
   15a3e:	b003      	add	sp, #12
   15a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a42:	bf00      	nop
   15a44:	0002cc10 	.word	0x0002cc10
   15a48:	0002cc34 	.word	0x0002cc34
   15a4c:	00030fb9 	.word	0x00030fb9
   15a50:	00030f88 	.word	0x00030f88
   15a54:	0002dd81 	.word	0x0002dd81
   15a58:	0002eee2 	.word	0x0002eee2

00015a5c <l2cap_recv>:
{
   15a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a5e:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   15a60:	8a0b      	ldrh	r3, [r1, #16]
{
   15a62:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   15a64:	2b03      	cmp	r3, #3
{
   15a66:	460d      	mov	r5, r1
   15a68:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   15a6a:	d80b      	bhi.n	15a84 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   15a6c:	4b30      	ldr	r3, [pc, #192]	; (15b30 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15a6e:	617b      	str	r3, [r7, #20]
   15a70:	2302      	movs	r3, #2
   15a72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a76:	482f      	ldr	r0, [pc, #188]	; (15b34 <l2cap_recv+0xd8>)
   15a78:	613b      	str	r3, [r7, #16]
   15a7a:	f107 0210 	add.w	r2, r7, #16
   15a7e:	f013 f9a9 	bl	28dd4 <z_log_msg_static_create.constprop.0>
		return 0;
   15a82:	e019      	b.n	15ab8 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   15a84:	2104      	movs	r1, #4
   15a86:	f105 000c 	add.w	r0, r5, #12
   15a8a:	f005 fba9 	bl	1b1e0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15a8e:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   15a90:	8843      	ldrh	r3, [r0, #2]
   15a92:	4604      	mov	r4, r0
	if (buf->len != len) {
   15a94:	4299      	cmp	r1, r3
   15a96:	d013      	beq.n	15ac0 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   15a98:	466c      	mov	r4, sp
   15a9a:	b088      	sub	sp, #32
   15a9c:	aa02      	add	r2, sp, #8
   15a9e:	61d3      	str	r3, [r2, #28]
   15aa0:	2304      	movs	r3, #4
   15aa2:	4825      	ldr	r0, [pc, #148]	; (15b38 <l2cap_recv+0xdc>)
   15aa4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15aa8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15aac:	4821      	ldr	r0, [pc, #132]	; (15b34 <l2cap_recv+0xd8>)
   15aae:	f842 3f10 	str.w	r3, [r2, #16]!
   15ab2:	f013 f98f 	bl	28dd4 <z_log_msg_static_create.constprop.0>
   15ab6:	46a5      	mov	sp, r4
}
   15ab8:	2000      	movs	r0, #0
   15aba:	371c      	adds	r7, #28
   15abc:	46bd      	mov	sp, r7
   15abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   15ac0:	7843      	ldrb	r3, [r0, #1]
   15ac2:	b90b      	cbnz	r3, 15ac8 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15ac4:	4b1d      	ldr	r3, [pc, #116]	; (15b3c <l2cap_recv+0xe0>)
   15ac6:	e7d2      	b.n	15a6e <l2cap_recv+0x12>
	switch (hdr->code) {
   15ac8:	7803      	ldrb	r3, [r0, #0]
   15aca:	2b01      	cmp	r3, #1
   15acc:	d0f4      	beq.n	15ab8 <l2cap_recv+0x5c>
   15ace:	2b13      	cmp	r3, #19
   15ad0:	d103      	bne.n	15ada <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   15ad2:	2901      	cmp	r1, #1
   15ad4:	d8f0      	bhi.n	15ab8 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   15ad6:	4b1a      	ldr	r3, [pc, #104]	; (15b40 <l2cap_recv+0xe4>)
   15ad8:	e7c9      	b.n	15a6e <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15ada:	466d      	mov	r5, sp
   15adc:	b088      	sub	sp, #32
   15ade:	aa02      	add	r2, sp, #8
   15ae0:	4918      	ldr	r1, [pc, #96]	; (15b44 <l2cap_recv+0xe8>)
   15ae2:	4814      	ldr	r0, [pc, #80]	; (15b34 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   15ae4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15ae8:	2303      	movs	r3, #3
   15aea:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15aee:	f842 3f10 	str.w	r3, [r2, #16]!
   15af2:	f013 f96f 	bl	28dd4 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15af6:	2202      	movs	r2, #2
   15af8:	46ad      	mov	sp, r5
   15afa:	7861      	ldrb	r1, [r4, #1]
   15afc:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   15afe:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15b00:	f013 f96b 	bl	28dda <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15b04:	4604      	mov	r4, r0
   15b06:	2800      	cmp	r0, #0
   15b08:	d0d6      	beq.n	15ab8 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   15b0a:	2102      	movs	r1, #2
   15b0c:	300c      	adds	r0, #12
   15b0e:	f005 fb85 	bl	1b21c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   15b12:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15b14:	4622      	mov	r2, r4
   15b16:	7003      	strb	r3, [r0, #0]
   15b18:	7043      	strb	r3, [r0, #1]
   15b1a:	2105      	movs	r1, #5
   15b1c:	4628      	mov	r0, r5
   15b1e:	9300      	str	r3, [sp, #0]
   15b20:	f013 f9c4 	bl	28eac <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15b24:	2800      	cmp	r0, #0
   15b26:	d0c7      	beq.n	15ab8 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   15b28:	4620      	mov	r0, r4
   15b2a:	f005 fa55 	bl	1afd8 <net_buf_unref>
   15b2e:	e7c3      	b.n	15ab8 <l2cap_recv+0x5c>
   15b30:	00030fe0 	.word	0x00030fe0
   15b34:	0002ccf0 	.word	0x0002ccf0
   15b38:	00030ffe 	.word	0x00030ffe
   15b3c:	0003101f 	.word	0x0003101f
   15b40:	00031040 	.word	0x00031040
   15b44:	0003105c 	.word	0x0003105c

00015b48 <bt_l2cap_recv>:
{
   15b48:	b5b0      	push	{r4, r5, r7, lr}
   15b4a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15b4c:	8a0b      	ldrh	r3, [r1, #16]
{
   15b4e:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   15b50:	2b03      	cmp	r3, #3
{
   15b52:	460c      	mov	r4, r1
   15b54:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   15b56:	d810      	bhi.n	15b7a <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   15b58:	4b17      	ldr	r3, [pc, #92]	; (15bb8 <bt_l2cap_recv+0x70>)
   15b5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15b5e:	617b      	str	r3, [r7, #20]
   15b60:	2302      	movs	r3, #2
   15b62:	4816      	ldr	r0, [pc, #88]	; (15bbc <bt_l2cap_recv+0x74>)
   15b64:	613b      	str	r3, [r7, #16]
   15b66:	f107 0210 	add.w	r2, r7, #16
   15b6a:	f013 f933 	bl	28dd4 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   15b6e:	4620      	mov	r0, r4
   15b70:	f005 fa32 	bl	1afd8 <net_buf_unref>
}
   15b74:	3718      	adds	r7, #24
   15b76:	46bd      	mov	sp, r7
   15b78:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15b7a:	2104      	movs	r1, #4
   15b7c:	f104 000c 	add.w	r0, r4, #12
   15b80:	f005 fb2e 	bl	1b1e0 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15b84:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15b86:	4628      	mov	r0, r5
   15b88:	f013 f9b2 	bl	28ef0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15b8c:	b978      	cbnz	r0, 15bae <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   15b8e:	466d      	mov	r5, sp
   15b90:	b088      	sub	sp, #32
   15b92:	466a      	mov	r2, sp
   15b94:	4b0a      	ldr	r3, [pc, #40]	; (15bc0 <bt_l2cap_recv+0x78>)
   15b96:	4809      	ldr	r0, [pc, #36]	; (15bbc <bt_l2cap_recv+0x74>)
   15b98:	e9c2 3105 	strd	r3, r1, [r2, #20]
   15b9c:	2303      	movs	r3, #3
   15b9e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ba2:	f842 3f10 	str.w	r3, [r2, #16]!
   15ba6:	f013 f915 	bl	28dd4 <z_log_msg_static_create.constprop.0>
   15baa:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   15bac:	e7df      	b.n	15b6e <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   15bae:	6843      	ldr	r3, [r0, #4]
   15bb0:	4621      	mov	r1, r4
   15bb2:	695b      	ldr	r3, [r3, #20]
   15bb4:	4798      	blx	r3
   15bb6:	e7da      	b.n	15b6e <bt_l2cap_recv+0x26>
   15bb8:	00031084 	.word	0x00031084
   15bbc:	0002ccf0 	.word	0x0002ccf0
   15bc0:	000310a1 	.word	0x000310a1

00015bc4 <bt_l2cap_update_conn_param>:
{
   15bc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15bc6:	4b17      	ldr	r3, [pc, #92]	; (15c24 <bt_l2cap_update_conn_param+0x60>)
{
   15bc8:	460e      	mov	r6, r1
	ident++;
   15bca:	7819      	ldrb	r1, [r3, #0]
{
   15bcc:	4605      	mov	r5, r0
	ident++;
   15bce:	3101      	adds	r1, #1
   15bd0:	b2c9      	uxtb	r1, r1
   15bd2:	2901      	cmp	r1, #1
   15bd4:	bf38      	it	cc
   15bd6:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15bd8:	2208      	movs	r2, #8
   15bda:	2012      	movs	r0, #18
	ident++;
   15bdc:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15bde:	f013 f8fc 	bl	28dda <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15be2:	4604      	mov	r4, r0
   15be4:	b1d0      	cbz	r0, 15c1c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   15be6:	2108      	movs	r1, #8
   15be8:	300c      	adds	r0, #12
   15bea:	f005 fb17 	bl	1b21c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15bee:	8833      	ldrh	r3, [r6, #0]
   15bf0:	4622      	mov	r2, r4
   15bf2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15bf4:	8873      	ldrh	r3, [r6, #2]
   15bf6:	2105      	movs	r1, #5
   15bf8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15bfa:	88b3      	ldrh	r3, [r6, #4]
   15bfc:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15bfe:	88f3      	ldrh	r3, [r6, #6]
   15c00:	80c3      	strh	r3, [r0, #6]
   15c02:	2300      	movs	r3, #0
   15c04:	4628      	mov	r0, r5
   15c06:	9300      	str	r3, [sp, #0]
   15c08:	f013 f950 	bl	28eac <bt_l2cap_send_cb>
	if (err) {
   15c0c:	4605      	mov	r5, r0
   15c0e:	b110      	cbz	r0, 15c16 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   15c10:	4620      	mov	r0, r4
   15c12:	f005 f9e1 	bl	1afd8 <net_buf_unref>
}
   15c16:	4628      	mov	r0, r5
   15c18:	b002      	add	sp, #8
   15c1a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15c1c:	f06f 050b 	mvn.w	r5, #11
   15c20:	e7f9      	b.n	15c16 <bt_l2cap_update_conn_param+0x52>
   15c22:	bf00      	nop
   15c24:	2002238f 	.word	0x2002238f

00015c28 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15c28:	2823      	cmp	r0, #35	; 0x23
   15c2a:	d81f      	bhi.n	15c6c <att_op_get_type+0x44>
   15c2c:	281a      	cmp	r0, #26
   15c2e:	d804      	bhi.n	15c3a <att_op_get_type+0x12>
   15c30:	1e43      	subs	r3, r0, #1
   15c32:	2b18      	cmp	r3, #24
   15c34:	d90e      	bls.n	15c54 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15c36:	2006      	movs	r0, #6
   15c38:	4770      	bx	lr
	switch (op) {
   15c3a:	f1a0 031b 	sub.w	r3, r0, #27
   15c3e:	2b08      	cmp	r3, #8
   15c40:	d81e      	bhi.n	15c80 <att_op_get_type+0x58>
   15c42:	e8df f003 	tbb	[pc, r3]
   15c46:	1d05      	.short	0x1d05
   15c48:	191d231b 	.word	0x191d231b
   15c4c:	1d25      	.short	0x1d25
   15c4e:	05          	.byte	0x05
   15c4f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   15c50:	2003      	movs	r0, #3
   15c52:	4770      	bx	lr
   15c54:	2301      	movs	r3, #1
	switch (op) {
   15c56:	4a0f      	ldr	r2, [pc, #60]	; (15c94 <att_op_get_type+0x6c>)
   15c58:	4083      	lsls	r3, r0
   15c5a:	401a      	ands	r2, r3
   15c5c:	b9c2      	cbnz	r2, 15c90 <att_op_get_type+0x68>
   15c5e:	4a0e      	ldr	r2, [pc, #56]	; (15c98 <att_op_get_type+0x70>)
   15c60:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   15c62:	2a00      	cmp	r2, #0
   15c64:	bf14      	ite	ne
   15c66:	2001      	movne	r0, #1
   15c68:	2006      	moveq	r0, #6
   15c6a:	4770      	bx	lr
	switch (op) {
   15c6c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   15c70:	2b52      	cmp	r3, #82	; 0x52
   15c72:	d105      	bne.n	15c80 <att_op_get_type+0x58>
		return ATT_COMMAND;
   15c74:	2000      	movs	r0, #0
}
   15c76:	4770      	bx	lr
		return ATT_REQUEST;
   15c78:	2001      	movs	r0, #1
   15c7a:	4770      	bx	lr
		return ATT_INDICATION;
   15c7c:	2005      	movs	r0, #5
   15c7e:	4770      	bx	lr
		return ATT_COMMAND;
   15c80:	f010 0f40 	tst.w	r0, #64	; 0x40
   15c84:	bf0c      	ite	eq
   15c86:	2006      	moveq	r0, #6
   15c88:	2000      	movne	r0, #0
   15c8a:	4770      	bx	lr
	switch (op) {
   15c8c:	2004      	movs	r0, #4
   15c8e:	4770      	bx	lr
		return ATT_RESPONSE;
   15c90:	2002      	movs	r0, #2
   15c92:	4770      	bx	lr
   15c94:	028aaaaa 	.word	0x028aaaaa
   15c98:	01455554 	.word	0x01455554

00015c9c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15c9c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15c9e:	3804      	subs	r0, #4
   15ca0:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15ca2:	a901      	add	r1, sp, #4
   15ca4:	4802      	ldr	r0, [pc, #8]	; (15cb0 <bt_att_released+0x14>)
   15ca6:	f00b fbbb 	bl	21420 <k_mem_slab_free>
}
   15caa:	b003      	add	sp, #12
   15cac:	f85d fb04 	ldr.w	pc, [sp], #4
   15cb0:	20008a7c 	.word	0x20008a7c

00015cb4 <tx_meta_data_free>:
{
   15cb4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   15cb6:	4604      	mov	r4, r0
   15cb8:	b948      	cbnz	r0, 15cce <tx_meta_data_free+0x1a>
   15cba:	490a      	ldr	r1, [pc, #40]	; (15ce4 <tx_meta_data_free+0x30>)
   15cbc:	480a      	ldr	r0, [pc, #40]	; (15ce8 <tx_meta_data_free+0x34>)
   15cbe:	23a6      	movs	r3, #166	; 0xa6
   15cc0:	4a0a      	ldr	r2, [pc, #40]	; (15cec <tx_meta_data_free+0x38>)
   15cc2:	f011 f856 	bl	26d72 <assert_print>
   15cc6:	21a6      	movs	r1, #166	; 0xa6
   15cc8:	4808      	ldr	r0, [pc, #32]	; (15cec <tx_meta_data_free+0x38>)
   15cca:	f011 f84b 	bl	26d64 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   15cce:	2100      	movs	r1, #0
   15cd0:	2214      	movs	r2, #20
   15cd2:	f016 f8ad 	bl	2be30 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   15cd6:	4621      	mov	r1, r4
}
   15cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   15cdc:	4804      	ldr	r0, [pc, #16]	; (15cf0 <tx_meta_data_free+0x3c>)
   15cde:	f015 be96 	b.w	2ba0e <k_queue_append>
   15ce2:	bf00      	nop
   15ce4:	00030c2e 	.word	0x00030c2e
   15ce8:	0002dd81 	.word	0x0002dd81
   15cec:	000310d6 	.word	0x000310d6
   15cf0:	20008c44 	.word	0x20008c44

00015cf4 <find_type_cb>:
{
   15cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cf8:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15cfa:	f8d2 a000 	ldr.w	sl, [r2]
{
   15cfe:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   15d00:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15d04:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   15d06:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15d08:	f642 0301 	movw	r3, #10241	; 0x2801
{
   15d0c:	4680      	mov	r8, r0
   15d0e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15d10:	6800      	ldr	r0, [r0, #0]
   15d12:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15d16:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15d18:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   15d1c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15d1e:	f012 fc12 	bl	28546 <bt_uuid_cmp>
   15d22:	2800      	cmp	r0, #0
   15d24:	d070      	beq.n	15e08 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15d26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15d2a:	f8d8 0000 	ldr.w	r0, [r8]
   15d2e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15d32:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15d34:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   15d38:	f012 fc05 	bl	28546 <bt_uuid_cmp>
   15d3c:	b138      	cbz	r0, 15d4e <find_type_cb+0x5a>
		if (data->group &&
   15d3e:	68a3      	ldr	r3, [r4, #8]
   15d40:	b11b      	cbz	r3, 15d4a <find_type_cb+0x56>
   15d42:	885a      	ldrh	r2, [r3, #2]
   15d44:	42b2      	cmp	r2, r6
   15d46:	d200      	bcs.n	15d4a <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15d48:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15d4a:	2001      	movs	r0, #1
   15d4c:	e009      	b.n	15d62 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15d4e:	6861      	ldr	r1, [r4, #4]
   15d50:	4608      	mov	r0, r1
   15d52:	f013 f8e1 	bl	28f18 <net_buf_frags_len>
   15d56:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15d5a:	1a1b      	subs	r3, r3, r0
   15d5c:	2b03      	cmp	r3, #3
   15d5e:	d804      	bhi.n	15d6a <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   15d60:	2000      	movs	r0, #0
}
   15d62:	3744      	adds	r7, #68	; 0x44
   15d64:	46bd      	mov	sp, r7
   15d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15d6a:	4608      	mov	r0, r1
   15d6c:	f005 f990 	bl	1b090 <net_buf_frag_last>
   15d70:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15d72:	6860      	ldr	r0, [r4, #4]
   15d74:	f013 f8d0 	bl	28f18 <net_buf_frags_len>
   15d78:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   15d7c:	f105 090c 	add.w	r9, r5, #12
   15d80:	ebab 0b00 	sub.w	fp, fp, r0
   15d84:	4648      	mov	r0, r9
   15d86:	f014 fac7 	bl	2a318 <net_buf_simple_tailroom>
   15d8a:	4558      	cmp	r0, fp
   15d8c:	d93f      	bls.n	15e0e <find_type_cb+0x11a>
   15d8e:	6860      	ldr	r0, [r4, #4]
   15d90:	f013 f8c2 	bl	28f18 <net_buf_frags_len>
   15d94:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15d98:	1a18      	subs	r0, r3, r0
	if (!len) {
   15d9a:	b970      	cbnz	r0, 15dba <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15d9c:	6863      	ldr	r3, [r4, #4]
   15d9e:	7a98      	ldrb	r0, [r3, #10]
   15da0:	f004 fee0 	bl	1ab64 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15da4:	2200      	movs	r2, #0
   15da6:	2300      	movs	r3, #0
   15da8:	f014 fa9c 	bl	2a2e4 <net_buf_alloc_fixed>
		if (!frag) {
   15dac:	4605      	mov	r5, r0
   15dae:	2800      	cmp	r0, #0
   15db0:	d0d6      	beq.n	15d60 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   15db2:	4601      	mov	r1, r0
   15db4:	6860      	ldr	r0, [r4, #4]
   15db6:	f005 f9b1 	bl	1b11c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   15dba:	2300      	movs	r3, #0
   15dbc:	9300      	str	r3, [sp, #0]
   15dbe:	4641      	mov	r1, r8
   15dc0:	f8d8 a004 	ldr.w	sl, [r8, #4]
   15dc4:	2310      	movs	r3, #16
   15dc6:	6878      	ldr	r0, [r7, #4]
   15dc8:	f107 0208 	add.w	r2, r7, #8
   15dcc:	47d0      	blx	sl
	if (read < 0) {
   15dce:	f1b0 0800 	subs.w	r8, r0, #0
   15dd2:	db19      	blt.n	15e08 <find_type_cb+0x114>
	if (read != data->value_len) {
   15dd4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15dd6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   15dd8:	4542      	cmp	r2, r8
   15dda:	d03f      	beq.n	15e5c <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15ddc:	4601      	mov	r1, r0
   15dde:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15de2:	f012 fbde 	bl	285a2 <bt_uuid_create>
   15de6:	b9b0      	cbnz	r0, 15e16 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   15de8:	466d      	mov	r5, sp
   15dea:	b088      	sub	sp, #32
   15dec:	7c23      	ldrb	r3, [r4, #16]
   15dee:	aa02      	add	r2, sp, #8
   15df0:	491d      	ldr	r1, [pc, #116]	; (15e68 <find_type_cb+0x174>)
   15df2:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   15df6:	2303      	movs	r3, #3
   15df8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15dfc:	481b      	ldr	r0, [pc, #108]	; (15e6c <find_type_cb+0x178>)
   15dfe:	f842 3f10 	str.w	r3, [r2, #16]!
   15e02:	f013 f978 	bl	290f6 <z_log_msg_static_create.constprop.0>
   15e06:	46ad      	mov	sp, r5
	data->group = NULL;
   15e08:	2300      	movs	r3, #0
   15e0a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   15e0c:	e79d      	b.n	15d4a <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   15e0e:	4648      	mov	r0, r9
   15e10:	f014 fa82 	bl	2a318 <net_buf_simple_tailroom>
   15e14:	e7c1      	b.n	15d9a <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   15e16:	fa5f f288 	uxtb.w	r2, r8
   15e1a:	f107 0108 	add.w	r1, r7, #8
   15e1e:	f107 0018 	add.w	r0, r7, #24
   15e22:	f012 fbbe 	bl	285a2 <bt_uuid_create>
   15e26:	b930      	cbnz	r0, 15e36 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   15e28:	466d      	mov	r5, sp
   15e2a:	b088      	sub	sp, #32
   15e2c:	aa02      	add	r2, sp, #8
   15e2e:	4b10      	ldr	r3, [pc, #64]	; (15e70 <find_type_cb+0x17c>)
   15e30:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15e34:	e7df      	b.n	15df6 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15e36:	f107 0118 	add.w	r1, r7, #24
   15e3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15e3e:	f012 fb82 	bl	28546 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15e42:	2800      	cmp	r0, #0
   15e44:	d1e0      	bne.n	15e08 <find_type_cb+0x114>
	data->err = 0x00;
   15e46:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   15e48:	2104      	movs	r1, #4
   15e4a:	7463      	strb	r3, [r4, #17]
   15e4c:	f105 000c 	add.w	r0, r5, #12
   15e50:	f005 f9e4 	bl	1b21c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15e54:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15e56:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15e58:	68a3      	ldr	r3, [r4, #8]
   15e5a:	e775      	b.n	15d48 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   15e5c:	f107 0108 	add.w	r1, r7, #8
   15e60:	f015 ff9c 	bl	2bd9c <memcmp>
   15e64:	e7ed      	b.n	15e42 <find_type_cb+0x14e>
   15e66:	bf00      	nop
   15e68:	00031105 	.word	0x00031105
   15e6c:	0002cca0 	.word	0x0002cca0
   15e70:	00031124 	.word	0x00031124

00015e74 <chan_send>:
{
   15e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15e78:	4606      	mov	r6, r0
   15e7a:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15e7c:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15e80:	68cb      	ldr	r3, [r1, #12]
{
   15e82:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15e84:	2102      	movs	r1, #2
   15e86:	3098      	adds	r0, #152	; 0x98
   15e88:	f013 f860 	bl	28f4c <atomic_test_bit>
   15e8c:	2800      	cmp	r0, #0
   15e8e:	d053      	beq.n	15f38 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	2bd2      	cmp	r3, #210	; 0xd2
   15e94:	d11a      	bne.n	15ecc <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   15e96:	6833      	ldr	r3, [r6, #0]
   15e98:	4621      	mov	r1, r4
   15e9a:	6818      	ldr	r0, [r3, #0]
   15e9c:	f014 f903 	bl	2a0a6 <bt_smp_sign>
		if (err) {
   15ea0:	4605      	mov	r5, r0
   15ea2:	b198      	cbz	r0, 15ecc <chan_send+0x58>
			LOG_ERR("Error signing data");
   15ea4:	4b26      	ldr	r3, [pc, #152]	; (15f40 <chan_send+0xcc>)
   15ea6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15eaa:	9307      	str	r3, [sp, #28]
   15eac:	2302      	movs	r3, #2
   15eae:	4825      	ldr	r0, [pc, #148]	; (15f44 <chan_send+0xd0>)
   15eb0:	aa06      	add	r2, sp, #24
   15eb2:	9306      	str	r3, [sp, #24]
   15eb4:	f013 f91f 	bl	290f6 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   15eb8:	69a0      	ldr	r0, [r4, #24]
   15eba:	f7ff fefb 	bl	15cb4 <tx_meta_data_free>
			net_buf_unref(buf);
   15ebe:	4620      	mov	r0, r4
   15ec0:	f005 f88a 	bl	1afd8 <net_buf_unref>
}
   15ec4:	4628      	mov	r0, r5
   15ec6:	b009      	add	sp, #36	; 0x24
   15ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15ecc:	f104 000c 	add.w	r0, r4, #12
   15ed0:	f014 fa1e 	bl	2a310 <net_buf_simple_headroom>
	state->len = buf->len;
   15ed4:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   15ed8:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15edc:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   15ede:	4607      	mov	r7, r0
   15ee0:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15ee2:	68e3      	ldr	r3, [r4, #12]
   15ee4:	7818      	ldrb	r0, [r3, #0]
   15ee6:	f7ff fe9f 	bl	15c28 <att_op_get_type>
   15eea:	2805      	cmp	r0, #5
   15eec:	4605      	mov	r5, r0
	switch (op_type) {
   15eee:	d813      	bhi.n	15f18 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15ef0:	4b15      	ldr	r3, [pc, #84]	; (15f48 <chan_send+0xd4>)
   15ef2:	4622      	mov	r2, r4
   15ef4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15ef8:	2104      	movs	r1, #4
   15efa:	4630      	mov	r0, r6
   15efc:	f8cd 9000 	str.w	r9, [sp]
   15f00:	f012 ffd4 	bl	28eac <bt_l2cap_send_cb>
	if (err) {
   15f04:	4605      	mov	r5, r0
   15f06:	2800      	cmp	r0, #0
   15f08:	d0dc      	beq.n	15ec4 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   15f0a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15f0c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15f10:	fa13 f787 	uxtah	r7, r3, r7
   15f14:	60e7      	str	r7, [r4, #12]
}
   15f16:	e7d5      	b.n	15ec4 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   15f18:	f240 2357 	movw	r3, #599	; 0x257
   15f1c:	4a0b      	ldr	r2, [pc, #44]	; (15f4c <chan_send+0xd8>)
   15f1e:	490c      	ldr	r1, [pc, #48]	; (15f50 <chan_send+0xdc>)
   15f20:	480c      	ldr	r0, [pc, #48]	; (15f54 <chan_send+0xe0>)
   15f22:	f010 ff26 	bl	26d72 <assert_print>
   15f26:	4629      	mov	r1, r5
   15f28:	480b      	ldr	r0, [pc, #44]	; (15f58 <chan_send+0xe4>)
   15f2a:	f010 ff22 	bl	26d72 <assert_print>
   15f2e:	f240 2157 	movw	r1, #599	; 0x257
   15f32:	4806      	ldr	r0, [pc, #24]	; (15f4c <chan_send+0xd8>)
   15f34:	f010 ff16 	bl	26d64 <assert_post_action>
		return -EINVAL;
   15f38:	f06f 0515 	mvn.w	r5, #21
   15f3c:	e7c2      	b.n	15ec4 <chan_send+0x50>
   15f3e:	bf00      	nop
   15f40:	00031143 	.word	0x00031143
   15f44:	0002cca0 	.word	0x0002cca0
   15f48:	0002d770 	.word	0x0002d770
   15f4c:	000310d6 	.word	0x000310d6
   15f50:	00033a12 	.word	0x00033a12
   15f54:	0002dd81 	.word	0x0002dd81
   15f58:	00031156 	.word	0x00031156

00015f5c <bt_att_chan_req_send>:
{
   15f5c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   15f5e:	b958      	cbnz	r0, 15f78 <bt_att_chan_req_send+0x1c>
   15f60:	4919      	ldr	r1, [pc, #100]	; (15fc8 <bt_att_chan_req_send+0x6c>)
   15f62:	f44f 7346 	mov.w	r3, #792	; 0x318
   15f66:	4a19      	ldr	r2, [pc, #100]	; (15fcc <bt_att_chan_req_send+0x70>)
   15f68:	4819      	ldr	r0, [pc, #100]	; (15fd0 <bt_att_chan_req_send+0x74>)
   15f6a:	f010 ff02 	bl	26d72 <assert_print>
   15f6e:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15f72:	4816      	ldr	r0, [pc, #88]	; (15fcc <bt_att_chan_req_send+0x70>)
   15f74:	f010 fef6 	bl	26d64 <assert_post_action>
   15f78:	b949      	cbnz	r1, 15f8e <bt_att_chan_req_send+0x32>
   15f7a:	4916      	ldr	r1, [pc, #88]	; (15fd4 <bt_att_chan_req_send+0x78>)
   15f7c:	f240 3319 	movw	r3, #793	; 0x319
   15f80:	4a12      	ldr	r2, [pc, #72]	; (15fcc <bt_att_chan_req_send+0x70>)
   15f82:	4813      	ldr	r0, [pc, #76]	; (15fd0 <bt_att_chan_req_send+0x74>)
   15f84:	f010 fef5 	bl	26d72 <assert_print>
   15f88:	f240 3119 	movw	r1, #793	; 0x319
   15f8c:	e7f1      	b.n	15f72 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   15f8e:	684a      	ldr	r2, [r1, #4]
   15f90:	b94a      	cbnz	r2, 15fa6 <bt_att_chan_req_send+0x4a>
   15f92:	4911      	ldr	r1, [pc, #68]	; (15fd8 <bt_att_chan_req_send+0x7c>)
   15f94:	f240 331a 	movw	r3, #794	; 0x31a
   15f98:	4a0c      	ldr	r2, [pc, #48]	; (15fcc <bt_att_chan_req_send+0x70>)
   15f9a:	480d      	ldr	r0, [pc, #52]	; (15fd0 <bt_att_chan_req_send+0x74>)
   15f9c:	f010 fee9 	bl	26d72 <assert_print>
   15fa0:	f240 311a 	movw	r1, #794	; 0x31a
   15fa4:	e7e5      	b.n	15f72 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   15fa6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15faa:	b14b      	cbz	r3, 15fc0 <bt_att_chan_req_send+0x64>
   15fac:	490b      	ldr	r1, [pc, #44]	; (15fdc <bt_att_chan_req_send+0x80>)
   15fae:	f240 331b 	movw	r3, #795	; 0x31b
   15fb2:	4a06      	ldr	r2, [pc, #24]	; (15fcc <bt_att_chan_req_send+0x70>)
   15fb4:	4806      	ldr	r0, [pc, #24]	; (15fd0 <bt_att_chan_req_send+0x74>)
   15fb6:	f010 fedc 	bl	26d72 <assert_print>
   15fba:	f240 311b 	movw	r1, #795	; 0x31b
   15fbe:	e7d8      	b.n	15f72 <bt_att_chan_req_send+0x16>
}
   15fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   15fc4:	f013 b89a 	b.w	290fc <chan_req_send>
   15fc8:	0003116f 	.word	0x0003116f
   15fcc:	000310d6 	.word	0x000310d6
   15fd0:	0002dd81 	.word	0x0002dd81
   15fd4:	00031185 	.word	0x00031185
   15fd8:	00031174 	.word	0x00031174
   15fdc:	0003117e 	.word	0x0003117e

00015fe0 <att_get>:
{
   15fe0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15fe2:	7b43      	ldrb	r3, [r0, #13]
   15fe4:	2b07      	cmp	r3, #7
   15fe6:	d00d      	beq.n	16004 <att_get+0x24>
		LOG_WRN("Not connected");
   15fe8:	4b18      	ldr	r3, [pc, #96]	; (1604c <att_get+0x6c>)
   15fea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15fee:	9305      	str	r3, [sp, #20]
   15ff0:	2302      	movs	r3, #2
   15ff2:	aa04      	add	r2, sp, #16
   15ff4:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   15ff6:	4816      	ldr	r0, [pc, #88]	; (16050 <att_get+0x70>)
   15ff8:	f013 f87d 	bl	290f6 <z_log_msg_static_create.constprop.0>
		return NULL;
   15ffc:	2000      	movs	r0, #0
}
   15ffe:	b007      	add	sp, #28
   16000:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16004:	2104      	movs	r1, #4
   16006:	f012 ff73 	bl	28ef0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1600a:	4603      	mov	r3, r0
   1600c:	b938      	cbnz	r0, 1601e <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   1600e:	4b11      	ldr	r3, [pc, #68]	; (16054 <att_get+0x74>)
   16010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16014:	9305      	str	r3, [sp, #20]
   16016:	2302      	movs	r3, #2
   16018:	aa04      	add	r2, sp, #16
   1601a:	9304      	str	r3, [sp, #16]
   1601c:	e7eb      	b.n	15ff6 <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   1601e:	2102      	movs	r1, #2
   16020:	3094      	adds	r0, #148	; 0x94
   16022:	f012 ff93 	bl	28f4c <atomic_test_bit>
   16026:	b970      	cbnz	r0, 16046 <att_get+0x66>
   16028:	490b      	ldr	r1, [pc, #44]	; (16058 <att_get+0x78>)
   1602a:	f640 332a 	movw	r3, #2858	; 0xb2a
   1602e:	4a0b      	ldr	r2, [pc, #44]	; (1605c <att_get+0x7c>)
   16030:	480b      	ldr	r0, [pc, #44]	; (16060 <att_get+0x80>)
   16032:	f010 fe9e 	bl	26d72 <assert_print>
   16036:	480b      	ldr	r0, [pc, #44]	; (16064 <att_get+0x84>)
   16038:	f010 fe9b 	bl	26d72 <assert_print>
   1603c:	f640 312a 	movw	r1, #2858	; 0xb2a
   16040:	4806      	ldr	r0, [pc, #24]	; (1605c <att_get+0x7c>)
   16042:	f010 fe8f 	bl	26d64 <assert_post_action>
	return att_chan->att;
   16046:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1604a:	e7d8      	b.n	15ffe <att_get+0x1e>
   1604c:	00031189 	.word	0x00031189
   16050:	0002cca0 	.word	0x0002cca0
   16054:	00031197 	.word	0x00031197
   16058:	000311b2 	.word	0x000311b2
   1605c:	000310d6 	.word	0x000310d6
   16060:	0002dd81 	.word	0x0002dd81
   16064:	000311e2 	.word	0x000311e2

00016068 <bt_att_connected>:
{
   16068:	b510      	push	{r4, lr}
   1606a:	4604      	mov	r4, r0
   1606c:	f100 0394 	add.w	r3, r0, #148	; 0x94
   16070:	e8d3 1fef 	ldaex	r1, [r3]
   16074:	f041 0104 	orr.w	r1, r1, #4
   16078:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1607c:	2a00      	cmp	r2, #0
   1607e:	d1f7      	bne.n	16070 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16080:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   16082:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16084:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16086:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   16088:	f012 ffa2 	bl	28fd0 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1608c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   16090:	4903      	ldr	r1, [pc, #12]	; (160a0 <bt_att_connected+0x38>)
   16092:	f00c fa81 	bl	22598 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   16096:	6820      	ldr	r0, [r4, #0]
}
   16098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1609c:	f002 bb54 	b.w	18748 <bt_gatt_connected>
   160a0:	00016d71 	.word	0x00016d71

000160a4 <read_group_cb>:
{
   160a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   160a8:	f04f 0800 	mov.w	r8, #0
   160ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   160b0:	4605      	mov	r5, r0
   160b2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   160b4:	6800      	ldr	r0, [r0, #0]
   160b6:	a902      	add	r1, sp, #8
{
   160b8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   160ba:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   160bc:	f88d 8008 	strb.w	r8, [sp, #8]
   160c0:	f8ad 300a 	strh.w	r3, [sp, #10]
   160c4:	f012 fa3f 	bl	28546 <bt_uuid_cmp>
   160c8:	b1a0      	cbz	r0, 160f4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   160ca:	f642 0301 	movw	r3, #10241	; 0x2801
   160ce:	6828      	ldr	r0, [r5, #0]
   160d0:	a903      	add	r1, sp, #12
   160d2:	f88d 800c 	strb.w	r8, [sp, #12]
   160d6:	f8ad 300e 	strh.w	r3, [sp, #14]
   160da:	f012 fa34 	bl	28546 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   160de:	b148      	cbz	r0, 160f4 <read_group_cb+0x50>
		if (data->group &&
   160e0:	6923      	ldr	r3, [r4, #16]
   160e2:	b11b      	cbz	r3, 160ec <read_group_cb+0x48>
   160e4:	885a      	ldrh	r2, [r3, #2]
   160e6:	42b2      	cmp	r2, r6
   160e8:	d200      	bcs.n	160ec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   160ea:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   160ec:	2001      	movs	r0, #1
}
   160ee:	b004      	add	sp, #16
   160f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   160f4:	6861      	ldr	r1, [r4, #4]
   160f6:	6828      	ldr	r0, [r5, #0]
   160f8:	f012 fa25 	bl	28546 <bt_uuid_cmp>
   160fc:	b110      	cbz	r0, 16104 <read_group_cb+0x60>
		data->group = NULL;
   160fe:	2300      	movs	r3, #0
   16100:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16102:	e7f3      	b.n	160ec <read_group_cb+0x48>
	if (data->rsp->len &&
   16104:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16106:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16108:	781a      	ldrb	r2, [r3, #0]
   1610a:	b132      	cbz	r2, 1611a <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1610c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1610e:	8a01      	ldrh	r1, [r0, #16]
   16110:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16112:	4293      	cmp	r3, r2
   16114:	da01      	bge.n	1611a <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   16116:	2000      	movs	r0, #0
   16118:	e7e9      	b.n	160ee <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1611a:	2104      	movs	r1, #4
   1611c:	300c      	adds	r0, #12
   1611e:	f005 f87d 	bl	1b21c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16122:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16124:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16126:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16128:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1612a:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1612c:	4b07      	ldr	r3, [pc, #28]	; (1614c <read_group_cb+0xa8>)
   1612e:	9401      	str	r4, [sp, #4]
   16130:	9300      	str	r3, [sp, #0]
   16132:	4638      	mov	r0, r7
   16134:	2300      	movs	r3, #0
   16136:	68a2      	ldr	r2, [r4, #8]
   16138:	f013 f821 	bl	2917e <att_chan_read>
	if (read < 0) {
   1613c:	2800      	cmp	r0, #0
   1613e:	dbea      	blt.n	16116 <read_group_cb+0x72>
	if (!data->group) {
   16140:	6920      	ldr	r0, [r4, #16]
   16142:	3800      	subs	r0, #0
   16144:	bf18      	it	ne
   16146:	2001      	movne	r0, #1
   16148:	e7d1      	b.n	160ee <read_group_cb+0x4a>
   1614a:	bf00      	nop
   1614c:	00029037 	.word	0x00029037

00016150 <read_type_cb>:
{
   16150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16154:	6817      	ldr	r7, [r2, #0]
{
   16156:	4605      	mov	r5, r0
   16158:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1615a:	6800      	ldr	r0, [r0, #0]
   1615c:	6851      	ldr	r1, [r2, #4]
{
   1615e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   16160:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16162:	f012 f9f0 	bl	28546 <bt_uuid_cmp>
   16166:	4681      	mov	r9, r0
   16168:	2800      	cmp	r0, #0
   1616a:	d13c      	bne.n	161e6 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1616c:	4630      	mov	r0, r6
   1616e:	2295      	movs	r2, #149	; 0x95
   16170:	4629      	mov	r1, r5
   16172:	f013 fcc8 	bl	29b06 <bt_gatt_check_perm>
   16176:	4606      	mov	r6, r0
   16178:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1617a:	b140      	cbz	r0, 1618e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1617c:	68e3      	ldr	r3, [r4, #12]
   1617e:	781b      	ldrb	r3, [r3, #0]
   16180:	b10b      	cbz	r3, 16186 <read_type_cb+0x36>
			data->err = 0x00;
   16182:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   16186:	2000      	movs	r0, #0
}
   16188:	b003      	add	sp, #12
   1618a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1618e:	68a0      	ldr	r0, [r4, #8]
   16190:	f004 ff7e 	bl	1b090 <net_buf_frag_last>
   16194:	2102      	movs	r1, #2
   16196:	300c      	adds	r0, #12
   16198:	f005 f840 	bl	1b21c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1619c:	4b13      	ldr	r3, [pc, #76]	; (161ec <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1619e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   161a0:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   161a4:	9300      	str	r3, [sp, #0]
   161a6:	9401      	str	r4, [sp, #4]
   161a8:	4633      	mov	r3, r6
   161aa:	4629      	mov	r1, r5
   161ac:	4638      	mov	r0, r7
   161ae:	68a2      	ldr	r2, [r4, #8]
   161b0:	f012 ffe5 	bl	2917e <att_chan_read>
	if (read < 0) {
   161b4:	2800      	cmp	r0, #0
   161b6:	da07      	bge.n	161c8 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   161b8:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   161bc:	bf32      	itee	cc
   161be:	200e      	movcc	r0, #14
		return -err;
   161c0:	4240      	negcs	r0, r0
   161c2:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   161c4:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   161c6:	e7de      	b.n	16186 <read_type_cb+0x36>
	if (!data->item) {
   161c8:	6923      	ldr	r3, [r4, #16]
   161ca:	2b00      	cmp	r3, #0
   161cc:	d0db      	beq.n	16186 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   161ce:	68a0      	ldr	r0, [r4, #8]
   161d0:	f012 fea2 	bl	28f18 <net_buf_frags_len>
   161d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   161d6:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   161d8:	68e3      	ldr	r3, [r4, #12]
   161da:	781b      	ldrb	r3, [r3, #0]
   161dc:	4298      	cmp	r0, r3
   161de:	bf94      	ite	ls
   161e0:	2000      	movls	r0, #0
   161e2:	2001      	movhi	r0, #1
   161e4:	e7d0      	b.n	16188 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   161e6:	2001      	movs	r0, #1
   161e8:	e7ce      	b.n	16188 <read_type_cb+0x38>
   161ea:	bf00      	nop
   161ec:	00028f29 	.word	0x00028f29

000161f0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   161f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161f4:	b082      	sub	sp, #8
   161f6:	af00      	add	r7, sp, #0
   161f8:	4604      	mov	r4, r0
   161fa:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   161fc:	2200      	movs	r2, #0
   161fe:	2300      	movs	r3, #0
   16200:	4639      	mov	r1, r7
   16202:	483a      	ldr	r0, [pc, #232]	; (162ec <bt_att_accept+0xfc>)
   16204:	f00b f8a2 	bl	2134c <k_mem_slab_alloc>
   16208:	4605      	mov	r5, r0
   1620a:	b1a8      	cbz	r0, 16238 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   1620c:	466d      	mov	r5, sp
   1620e:	b088      	sub	sp, #32
   16210:	466a      	mov	r2, sp
   16212:	4b37      	ldr	r3, [pc, #220]	; (162f0 <bt_att_accept+0x100>)
   16214:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16218:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1621c:	2303      	movs	r3, #3
   1621e:	4835      	ldr	r0, [pc, #212]	; (162f4 <bt_att_accept+0x104>)
   16220:	f842 3f10 	str.w	r3, [r2, #16]!
   16224:	f012 ff67 	bl	290f6 <z_log_msg_static_create.constprop.0>
   16228:	46ad      	mov	sp, r5
		return -ENOMEM;
   1622a:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1622e:	4628      	mov	r0, r5
   16230:	3708      	adds	r7, #8
   16232:	46bd      	mov	sp, r7
   16234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   16238:	f00d fc52 	bl	23ae0 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1623c:	4b2e      	ldr	r3, [pc, #184]	; (162f8 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1623e:	f8d7 8000 	ldr.w	r8, [r7]
   16242:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   16244:	6018      	str	r0, [r3, #0]
   16246:	222c      	movs	r2, #44	; 0x2c
   16248:	f108 0004 	add.w	r0, r8, #4
   1624c:	f015 fdf0 	bl	2be30 <memset>
	att->conn = conn;
   16250:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   16254:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16256:	2200      	movs	r2, #0
	list->tail = NULL;
   16258:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1625c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   16260:	2300      	movs	r3, #0
   16262:	4826      	ldr	r0, [pc, #152]	; (162fc <bt_att_accept+0x10c>)
   16264:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16266:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16268:	f00b f870 	bl	2134c <k_mem_slab_alloc>
   1626c:	4605      	mov	r5, r0
   1626e:	b180      	cbz	r0, 16292 <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   16270:	6823      	ldr	r3, [r4, #0]
   16272:	466c      	mov	r4, sp
   16274:	b088      	sub	sp, #32
   16276:	466a      	mov	r2, sp
   16278:	4921      	ldr	r1, [pc, #132]	; (16300 <bt_att_accept+0x110>)
   1627a:	481e      	ldr	r0, [pc, #120]	; (162f4 <bt_att_accept+0x104>)
   1627c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16280:	2303      	movs	r3, #3
   16282:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16286:	f842 3f10 	str.w	r3, [r2, #16]!
   1628a:	f012 ff34 	bl	290f6 <z_log_msg_static_create.constprop.0>
   1628e:	46a5      	mov	sp, r4
	if (!chan) {
   16290:	e7cb      	b.n	1622a <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   16292:	687b      	ldr	r3, [r7, #4]
   16294:	4601      	mov	r1, r0
   16296:	22f8      	movs	r2, #248	; 0xf8
   16298:	4618      	mov	r0, r3
   1629a:	f015 fdc9 	bl	2be30 <memset>
	chan->chan.chan.ops = &ops;
   1629e:	4a19      	ldr	r2, [pc, #100]	; (16304 <bt_att_accept+0x114>)
   162a0:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   162a2:	30a0      	adds	r0, #160	; 0xa0
   162a4:	f015 fba6 	bl	2b9f4 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   162a8:	687b      	ldr	r3, [r7, #4]
   162aa:	3398      	adds	r3, #152	; 0x98
   162ac:	e8d3 2fef 	ldaex	r2, [r3]
   162b0:	e8c3 5fe1 	stlex	r1, r5, [r3]
   162b4:	2900      	cmp	r1, #0
   162b6:	d1f9      	bne.n	162ac <bt_att_accept+0xbc>
	chan->att = att;
   162b8:	687b      	ldr	r3, [r7, #4]
   162ba:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   162bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   162be:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   162c2:	b91b      	cbnz	r3, 162cc <bt_att_accept+0xdc>
   162c4:	f104 000c 	add.w	r0, r4, #12
   162c8:	f015 fb94 	bl	2b9f4 <z_impl_k_queue_init>
	return list->head;
   162cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   162ce:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   162d2:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   162d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   162d8:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   162da:	b902      	cbnz	r2, 162de <bt_att_accept+0xee>
	list->tail = node;
   162dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   162de:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   162e0:	2b00      	cmp	r3, #0
   162e2:	d0a2      	beq.n	1622a <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   162e4:	3304      	adds	r3, #4
   162e6:	6033      	str	r3, [r6, #0]
	return 0;
   162e8:	e7a1      	b.n	1622e <bt_att_accept+0x3e>
   162ea:	bf00      	nop
   162ec:	20008a5c 	.word	0x20008a5c
   162f0:	000311fe 	.word	0x000311fe
   162f4:	0002cca0 	.word	0x0002cca0
   162f8:	20021668 	.word	0x20021668
   162fc:	20008a7c 	.word	0x20008a7c
   16300:	00031223 	.word	0x00031223
   16304:	200084e4 	.word	0x200084e4

00016308 <bt_att_chan_create_pdu>:
{
   16308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1630c:	b086      	sub	sp, #24
   1630e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16310:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16312:	1c53      	adds	r3, r2, #1
   16314:	428b      	cmp	r3, r1
{
   16316:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16318:	d915      	bls.n	16346 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1631a:	466c      	mov	r4, sp
   1631c:	b088      	sub	sp, #32
   1631e:	466a      	mov	r2, sp
   16320:	4829      	ldr	r0, [pc, #164]	; (163c8 <bt_att_chan_create_pdu+0xc0>)
   16322:	61d3      	str	r3, [r2, #28]
   16324:	2304      	movs	r3, #4
   16326:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1632a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1632e:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   16332:	4826      	ldr	r0, [pc, #152]	; (163cc <bt_att_chan_create_pdu+0xc4>)
   16334:	f012 fedf 	bl	290f6 <z_log_msg_static_create.constprop.0>
   16338:	46a5      	mov	sp, r4
		return NULL;
   1633a:	2400      	movs	r4, #0
}
   1633c:	4620      	mov	r0, r4
   1633e:	3718      	adds	r7, #24
   16340:	46bd      	mov	sp, r7
   16342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   16346:	4628      	mov	r0, r5
   16348:	f7ff fc6e 	bl	15c28 <att_op_get_type>
   1634c:	2802      	cmp	r0, #2
   1634e:	d019      	beq.n	16384 <bt_att_chan_create_pdu+0x7c>
   16350:	2804      	cmp	r0, #4
   16352:	d017      	beq.n	16384 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   16354:	f04f 38ff 	mov.w	r8, #4294967295
   16358:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1635c:	2100      	movs	r1, #0
   1635e:	4642      	mov	r2, r8
   16360:	464b      	mov	r3, r9
   16362:	4608      	mov	r0, r1
   16364:	f012 fd9f 	bl	28ea6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16368:	4604      	mov	r4, r0
   1636a:	b980      	cbnz	r0, 1638e <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1636c:	466c      	mov	r4, sp
   1636e:	b088      	sub	sp, #32
   16370:	466a      	mov	r2, sp
   16372:	4b17      	ldr	r3, [pc, #92]	; (163d0 <bt_att_chan_create_pdu+0xc8>)
   16374:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16378:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1637c:	2303      	movs	r3, #3
   1637e:	f842 3f10 	str.w	r3, [r2, #16]!
   16382:	e7d6      	b.n	16332 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   16384:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   16388:	f04f 0900 	mov.w	r9, #0
   1638c:	e7e6      	b.n	1635c <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   1638e:	4811      	ldr	r0, [pc, #68]	; (163d4 <bt_att_chan_create_pdu+0xcc>)
   16390:	4642      	mov	r2, r8
   16392:	464b      	mov	r3, r9
   16394:	f00b fc12 	bl	21bbc <z_impl_k_queue_get>
	if (!data) {
   16398:	b970      	cbnz	r0, 163b8 <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   1639a:	4b0f      	ldr	r3, [pc, #60]	; (163d8 <bt_att_chan_create_pdu+0xd0>)
   1639c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   163a0:	617b      	str	r3, [r7, #20]
   163a2:	2302      	movs	r3, #2
   163a4:	4809      	ldr	r0, [pc, #36]	; (163cc <bt_att_chan_create_pdu+0xc4>)
   163a6:	613b      	str	r3, [r7, #16]
   163a8:	f107 0210 	add.w	r2, r7, #16
   163ac:	f012 fea3 	bl	290f6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   163b0:	4620      	mov	r0, r4
   163b2:	f004 fe11 	bl	1afd8 <net_buf_unref>
		return NULL;
   163b6:	e7c0      	b.n	1633a <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   163b8:	61a0      	str	r0, [r4, #24]
   163ba:	2101      	movs	r1, #1
   163bc:	f104 000c 	add.w	r0, r4, #12
   163c0:	f004 ff2c 	bl	1b21c <net_buf_simple_add>
	hdr->code = op;
   163c4:	7005      	strb	r5, [r0, #0]
	return buf;
   163c6:	e7b9      	b.n	1633c <bt_att_chan_create_pdu+0x34>
   163c8:	00031248 	.word	0x00031248
   163cc:	0002cca0 	.word	0x0002cca0
   163d0:	00030f39 	.word	0x00030f39
   163d4:	20008c44 	.word	0x20008c44
   163d8:	0003126d 	.word	0x0003126d

000163dc <bt_att_recv>:
{
   163dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163e0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   163e2:	8a0b      	ldrh	r3, [r1, #16]
{
   163e4:	4682      	mov	sl, r0
   163e6:	460c      	mov	r4, r1
   163e8:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   163ea:	b97b      	cbnz	r3, 1640c <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   163ec:	4b4c      	ldr	r3, [pc, #304]	; (16520 <bt_att_recv+0x144>)
   163ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   163f2:	617b      	str	r3, [r7, #20]
   163f4:	2302      	movs	r3, #2
   163f6:	f107 0210 	add.w	r2, r7, #16
   163fa:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   163fc:	4849      	ldr	r0, [pc, #292]	; (16524 <bt_att_recv+0x148>)
   163fe:	f012 fe7a 	bl	290f6 <z_log_msg_static_create.constprop.0>
}
   16402:	2000      	movs	r0, #0
   16404:	371c      	adds	r7, #28
   16406:	46bd      	mov	sp, r7
   16408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1640c:	2101      	movs	r1, #1
   1640e:	f104 000c 	add.w	r0, r4, #12
   16412:	f004 fee5 	bl	1b1e0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16416:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1641a:	4605      	mov	r5, r0
   1641c:	2b00      	cmp	r3, #0
   1641e:	d0f0      	beq.n	16402 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16420:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   16422:	7801      	ldrb	r1, [r0, #0]
   16424:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16528 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16428:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   1642c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   16430:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   16434:	4288      	cmp	r0, r1
   16436:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1643a:	d114      	bne.n	16466 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1643c:	f892 9002 	ldrb.w	r9, [r2, #2]
   16440:	f1b9 0f01 	cmp.w	r9, #1
   16444:	d131      	bne.n	164aa <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16446:	2100      	movs	r1, #0
   16448:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   1644c:	f012 ff3d 	bl	292ca <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   16450:	2800      	cmp	r0, #0
   16452:	d035      	beq.n	164c0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   16454:	4b35      	ldr	r3, [pc, #212]	; (1652c <bt_att_recv+0x150>)
   16456:	617b      	str	r3, [r7, #20]
   16458:	2302      	movs	r3, #2
   1645a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1645e:	613b      	str	r3, [r7, #16]
   16460:	f107 0210 	add.w	r2, r7, #16
   16464:	e7ca      	b.n	163fc <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16466:	3301      	adds	r3, #1
   16468:	2b0e      	cmp	r3, #14
   1646a:	d1df      	bne.n	1642c <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1646c:	466c      	mov	r4, sp
   1646e:	b088      	sub	sp, #32
   16470:	466a      	mov	r2, sp
   16472:	4b2f      	ldr	r3, [pc, #188]	; (16530 <bt_att_recv+0x154>)
   16474:	482b      	ldr	r0, [pc, #172]	; (16524 <bt_att_recv+0x148>)
   16476:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1647a:	2303      	movs	r3, #3
   1647c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16480:	f842 3f10 	str.w	r3, [r2, #16]!
   16484:	f012 fe37 	bl	290f6 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   16488:	7829      	ldrb	r1, [r5, #0]
   1648a:	46a5      	mov	sp, r4
   1648c:	4608      	mov	r0, r1
   1648e:	f7ff fbcb 	bl	15c28 <att_op_get_type>
   16492:	2800      	cmp	r0, #0
   16494:	d0b5      	beq.n	16402 <bt_att_recv+0x26>
   16496:	2805      	cmp	r0, #5
   16498:	d0b3      	beq.n	16402 <bt_att_recv+0x26>
	if (!req) {
   1649a:	2900      	cmp	r1, #0
   1649c:	d0b1      	beq.n	16402 <bt_att_recv+0x26>
   1649e:	2306      	movs	r3, #6
   164a0:	2200      	movs	r2, #0
   164a2:	4630      	mov	r0, r6
   164a4:	f013 f875 	bl	29592 <send_err_rsp.part.0>
   164a8:	e7ab      	b.n	16402 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   164aa:	f1b9 0f05 	cmp.w	r9, #5
   164ae:	d107      	bne.n	164c0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   164b0:	2101      	movs	r1, #1
   164b2:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   164b6:	f012 ff08 	bl	292ca <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   164ba:	b108      	cbz	r0, 164c0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   164bc:	4b1d      	ldr	r3, [pc, #116]	; (16534 <bt_att_recv+0x158>)
   164be:	e7ca      	b.n	16456 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   164c0:	44d8      	add	r8, fp
   164c2:	8a23      	ldrh	r3, [r4, #16]
   164c4:	f898 2001 	ldrb.w	r2, [r8, #1]
   164c8:	429a      	cmp	r2, r3
   164ca:	d916      	bls.n	164fa <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   164cc:	46e9      	mov	r9, sp
   164ce:	b088      	sub	sp, #32
   164d0:	466a      	mov	r2, sp
   164d2:	7829      	ldrb	r1, [r5, #0]
   164d4:	2404      	movs	r4, #4
   164d6:	4818      	ldr	r0, [pc, #96]	; (16538 <bt_att_recv+0x15c>)
   164d8:	61d1      	str	r1, [r2, #28]
   164da:	e9c2 0305 	strd	r0, r3, [r2, #20]
   164de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   164e2:	4810      	ldr	r0, [pc, #64]	; (16524 <bt_att_recv+0x148>)
   164e4:	f842 4f10 	str.w	r4, [r2, #16]!
   164e8:	f012 fe05 	bl	290f6 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   164ec:	f898 3002 	ldrb.w	r3, [r8, #2]
   164f0:	46cd      	mov	sp, r9
   164f2:	2b01      	cmp	r3, #1
   164f4:	d185      	bne.n	16402 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   164f6:	4623      	mov	r3, r4
   164f8:	e00c      	b.n	16514 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   164fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   164fe:	4621      	mov	r1, r4
   16500:	4630      	mov	r0, r6
   16502:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16504:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   16508:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1650a:	f47f af7a 	bne.w	16402 <bt_att_recv+0x26>
   1650e:	2800      	cmp	r0, #0
   16510:	f43f af77 	beq.w	16402 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16514:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   16516:	2900      	cmp	r1, #0
   16518:	f43f af73 	beq.w	16402 <bt_att_recv+0x26>
   1651c:	e7c0      	b.n	164a0 <bt_att_recv+0xc4>
   1651e:	bf00      	nop
   16520:	0003128c 	.word	0x0003128c
   16524:	0002cca0 	.word	0x0002cca0
   16528:	0002d788 	.word	0x0002d788
   1652c:	000312c1 	.word	0x000312c1
   16530:	000312a7 	.word	0x000312a7
   16534:	000312dd 	.word	0x000312dd
   16538:	000312fc 	.word	0x000312fc

0001653c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1653c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1653e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16540:	6803      	ldr	r3, [r0, #0]
   16542:	460d      	mov	r5, r1
   16544:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16546:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16548:	bf18      	it	ne
   1654a:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1654c:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1654e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16550:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16552:	f013 fb0c 	bl	29b6e <bt_gatt_change_aware>
   16556:	b948      	cbnz	r0, 1656c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16558:	2105      	movs	r1, #5
   1655a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1655e:	f012 feb4 	bl	292ca <atomic_test_and_set_bit>
   16562:	2800      	cmp	r0, #0
   16564:	d048      	beq.n	165f8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   16566:	2000      	movs	r0, #0
}
   16568:	b007      	add	sp, #28
   1656a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1656c:	2e00      	cmp	r6, #0
   1656e:	d045      	beq.n	165fc <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   16570:	2218      	movs	r2, #24
   16572:	2100      	movs	r1, #0
   16574:	4668      	mov	r0, sp
   16576:	f015 fc5b 	bl	2be30 <memset>
	if (rsp) {
   1657a:	bb67      	cbnz	r7, 165d6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1657c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1657e:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   16580:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16582:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   16584:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   16586:	2300      	movs	r3, #0
   16588:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1658c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1658e:	4a1c      	ldr	r2, [pc, #112]	; (16600 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   16590:	9303      	str	r3, [sp, #12]
	data.len = len;
   16592:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   16596:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   1659a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1659e:	2301      	movs	r3, #1
   165a0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   165a4:	466b      	mov	r3, sp
   165a6:	f012 fd08 	bl	28fba <bt_gatt_foreach_attr>
	if (data.err) {
   165aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   165ae:	b1e3      	cbz	r3, 165ea <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   165b0:	2f00      	cmp	r7, #0
   165b2:	d0d8      	beq.n	16566 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   165b4:	9b01      	ldr	r3, [sp, #4]
   165b6:	6998      	ldr	r0, [r3, #24]
   165b8:	f7ff fb7c 	bl	15cb4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   165bc:	9801      	ldr	r0, [sp, #4]
   165be:	f004 fd0b 	bl	1afd8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   165c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   165c6:	2d00      	cmp	r5, #0
   165c8:	d0cd      	beq.n	16566 <att_write_rsp.constprop.0+0x2a>
   165ca:	4632      	mov	r2, r6
   165cc:	4629      	mov	r1, r5
   165ce:	4620      	mov	r0, r4
   165d0:	f012 ffdf 	bl	29592 <send_err_rsp.part.0>
   165d4:	e7c7      	b.n	16566 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   165d6:	2200      	movs	r2, #0
   165d8:	4639      	mov	r1, r7
   165da:	4620      	mov	r0, r4
   165dc:	f7ff fe94 	bl	16308 <bt_att_chan_create_pdu>
   165e0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   165e2:	2800      	cmp	r0, #0
   165e4:	d1ca      	bne.n	1657c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   165e6:	200e      	movs	r0, #14
   165e8:	e7be      	b.n	16568 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   165ea:	9901      	ldr	r1, [sp, #4]
   165ec:	2900      	cmp	r1, #0
   165ee:	d0ba      	beq.n	16566 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   165f0:	4620      	mov	r0, r4
   165f2:	f012 fdb6 	bl	29162 <bt_att_chan_send_rsp>
   165f6:	e7b6      	b.n	16566 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   165f8:	2012      	movs	r0, #18
   165fa:	e7b5      	b.n	16568 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   165fc:	2001      	movs	r0, #1
   165fe:	e7b3      	b.n	16568 <att_write_rsp.constprop.0+0x2c>
   16600:	00028f59 	.word	0x00028f59

00016604 <bt_att_create_pdu>:
{
   16604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16606:	af00      	add	r7, sp, #0
   16608:	460e      	mov	r6, r1
   1660a:	4615      	mov	r5, r2
	att = att_get(conn);
   1660c:	f7ff fce8 	bl	15fe0 <att_get>
	if (!att) {
   16610:	b1e0      	cbz	r0, 1664c <bt_att_create_pdu+0x48>
	return list->head;
   16612:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16614:	4618      	mov	r0, r3
   16616:	b11b      	cbz	r3, 16620 <bt_att_create_pdu+0x1c>
	return node->next;
   16618:	f850 39f0 	ldr.w	r3, [r0], #-240
   1661c:	b103      	cbz	r3, 16620 <bt_att_create_pdu+0x1c>
   1661e:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16620:	1c6c      	adds	r4, r5, #1
   16622:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16624:	b118      	cbz	r0, 1662e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16626:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16628:	42a1      	cmp	r1, r4
   1662a:	d219      	bcs.n	16660 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1662c:	b983      	cbnz	r3, 16650 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1662e:	466d      	mov	r5, sp
   16630:	b088      	sub	sp, #32
   16632:	466a      	mov	r2, sp
   16634:	4b0e      	ldr	r3, [pc, #56]	; (16670 <bt_att_create_pdu+0x6c>)
   16636:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1663a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1663e:	2303      	movs	r3, #3
   16640:	480c      	ldr	r0, [pc, #48]	; (16674 <bt_att_create_pdu+0x70>)
   16642:	f842 3f10 	str.w	r3, [r2, #16]!
   16646:	f012 fd56 	bl	290f6 <z_log_msg_static_create.constprop.0>
   1664a:	46ad      	mov	sp, r5
		return NULL;
   1664c:	2000      	movs	r0, #0
   1664e:	e00b      	b.n	16668 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16650:	4618      	mov	r0, r3
   16652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   16656:	b14b      	cbz	r3, 1666c <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16658:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1665a:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1665c:	428a      	cmp	r2, r1
   1665e:	d8f7      	bhi.n	16650 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   16660:	462a      	mov	r2, r5
   16662:	4631      	mov	r1, r6
   16664:	f7ff fe50 	bl	16308 <bt_att_chan_create_pdu>
}
   16668:	46bd      	mov	sp, r7
   1666a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1666c:	4614      	mov	r4, r2
   1666e:	e7da      	b.n	16626 <bt_att_create_pdu+0x22>
   16670:	0003131b 	.word	0x0003131b
   16674:	0002cca0 	.word	0x0002cca0

00016678 <att_read_group_req>:
{
   16678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1667c:	8a0e      	ldrh	r6, [r1, #16]
{
   1667e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   16680:	3e04      	subs	r6, #4
   16682:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   16684:	2e02      	cmp	r6, #2
{
   16686:	4608      	mov	r0, r1
   16688:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1668a:	d001      	beq.n	16690 <att_read_group_req+0x18>
   1668c:	2e10      	cmp	r6, #16
   1668e:	d16a      	bne.n	16766 <att_read_group_req+0xee>
   16690:	2104      	movs	r1, #4
   16692:	300c      	adds	r0, #12
   16694:	f004 fda4 	bl	1b1e0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16698:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1669c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1669e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   166a0:	1d01      	adds	r1, r0, #4
   166a2:	4632      	mov	r2, r6
   166a4:	4640      	mov	r0, r8
   166a6:	f011 ff7c 	bl	285a2 <bt_uuid_create>
   166aa:	2800      	cmp	r0, #0
   166ac:	d05d      	beq.n	1676a <att_read_group_req+0xf2>
	if (!start || !end) {
   166ae:	2d00      	cmp	r5, #0
   166b0:	d03a      	beq.n	16728 <att_read_group_req+0xb0>
   166b2:	2600      	movs	r6, #0
   166b4:	2f00      	cmp	r7, #0
   166b6:	d036      	beq.n	16726 <att_read_group_req+0xae>
	if (start > end) {
   166b8:	42bd      	cmp	r5, r7
   166ba:	d835      	bhi.n	16728 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   166bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   166c0:	4640      	mov	r0, r8
   166c2:	a901      	add	r1, sp, #4
   166c4:	f88d 6004 	strb.w	r6, [sp, #4]
   166c8:	f8ad 3006 	strh.w	r3, [sp, #6]
   166cc:	f011 ff3b 	bl	28546 <bt_uuid_cmp>
   166d0:	bb70      	cbnz	r0, 16730 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   166d2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   166d4:	2214      	movs	r2, #20
   166d6:	2100      	movs	r1, #0
   166d8:	a807      	add	r0, sp, #28
   166da:	f015 fba9 	bl	2be30 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   166de:	2201      	movs	r2, #1
   166e0:	2111      	movs	r1, #17
   166e2:	4630      	mov	r0, r6
   166e4:	f7ff ff8e 	bl	16604 <bt_att_create_pdu>
   166e8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   166ea:	2800      	cmp	r0, #0
   166ec:	d03d      	beq.n	1676a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   166ee:	2101      	movs	r1, #1
   166f0:	300c      	adds	r0, #12
	data.uuid = uuid;
   166f2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   166f6:	f004 fd91 	bl	1b21c <net_buf_simple_add>
	data.rsp->len = 0U;
   166fa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   166fc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   166fe:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   16700:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16702:	4a1b      	ldr	r2, [pc, #108]	; (16770 <att_read_group_req+0xf8>)
	data.group = NULL;
   16704:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16706:	4628      	mov	r0, r5
   16708:	ab07      	add	r3, sp, #28
   1670a:	f012 fc56 	bl	28fba <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1670e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16710:	781b      	ldrb	r3, [r3, #0]
   16712:	bb1b      	cbnz	r3, 1675c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16714:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16716:	6998      	ldr	r0, [r3, #24]
   16718:	f7ff facc 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1671c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1671e:	f004 fc5b 	bl	1afd8 <net_buf_unref>
	if (!req) {
   16722:	230a      	movs	r3, #10
   16724:	e001      	b.n	1672a <att_read_group_req+0xb2>
			*err = 0U;
   16726:	463d      	mov	r5, r7
	if (!req) {
   16728:	2301      	movs	r3, #1
   1672a:	462a      	mov	r2, r5
   1672c:	2110      	movs	r1, #16
   1672e:	e00e      	b.n	1674e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16730:	f642 0301 	movw	r3, #10241	; 0x2801
   16734:	4640      	mov	r0, r8
   16736:	a907      	add	r1, sp, #28
   16738:	f88d 601c 	strb.w	r6, [sp, #28]
   1673c:	f8ad 301e 	strh.w	r3, [sp, #30]
   16740:	f011 ff01 	bl	28546 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16744:	2800      	cmp	r0, #0
   16746:	d0c4      	beq.n	166d2 <att_read_group_req+0x5a>
	if (!req) {
   16748:	2310      	movs	r3, #16
   1674a:	462a      	mov	r2, r5
   1674c:	4619      	mov	r1, r3
   1674e:	4620      	mov	r0, r4
   16750:	f012 ff1f 	bl	29592 <send_err_rsp.part.0>
		return 0;
   16754:	2000      	movs	r0, #0
}
   16756:	b00c      	add	sp, #48	; 0x30
   16758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1675c:	4620      	mov	r0, r4
   1675e:	9909      	ldr	r1, [sp, #36]	; 0x24
   16760:	f012 fcff 	bl	29162 <bt_att_chan_send_rsp>
	return 0;
   16764:	e7f6      	b.n	16754 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   16766:	2004      	movs	r0, #4
   16768:	e7f5      	b.n	16756 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1676a:	200e      	movs	r0, #14
   1676c:	e7f3      	b.n	16756 <att_read_group_req+0xde>
   1676e:	bf00      	nop
   16770:	000160a5 	.word	0x000160a5

00016774 <att_read_mult_vl_req>:
{
   16774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16778:	6846      	ldr	r6, [r0, #4]
{
   1677a:	4604      	mov	r4, r0
   1677c:	460d      	mov	r5, r1
   1677e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16780:	2101      	movs	r1, #1
   16782:	4630      	mov	r0, r6
   16784:	f013 f9f3 	bl	29b6e <bt_gatt_change_aware>
   16788:	b950      	cbnz	r0, 167a0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1678a:	2105      	movs	r1, #5
   1678c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16790:	f012 fd9b 	bl	292ca <atomic_test_and_set_bit>
   16794:	2800      	cmp	r0, #0
   16796:	d13b      	bne.n	16810 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16798:	2012      	movs	r0, #18
}
   1679a:	b005      	add	sp, #20
   1679c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   167a0:	2210      	movs	r2, #16
   167a2:	2100      	movs	r1, #0
   167a4:	4668      	mov	r0, sp
   167a6:	f015 fb43 	bl	2be30 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   167aa:	2200      	movs	r2, #0
   167ac:	2121      	movs	r1, #33	; 0x21
   167ae:	4630      	mov	r0, r6
   167b0:	f7ff ff28 	bl	16604 <bt_att_create_pdu>
   167b4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   167b6:	b368      	cbz	r0, 16814 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167b8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   167bc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16818 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   167c0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   167c2:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   167c6:	8a2b      	ldrh	r3, [r5, #16]
   167c8:	2b01      	cmp	r3, #1
   167ca:	d804      	bhi.n	167d6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   167cc:	4620      	mov	r0, r4
   167ce:	9902      	ldr	r1, [sp, #8]
   167d0:	f012 fcc7 	bl	29162 <bt_att_chan_send_rsp>
	return 0;
   167d4:	e01c      	b.n	16810 <att_read_mult_vl_req+0x9c>
   167d6:	4638      	mov	r0, r7
   167d8:	f013 fd92 	bl	2a300 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   167dc:	466b      	mov	r3, sp
   167de:	464a      	mov	r2, r9
   167e0:	4601      	mov	r1, r0
   167e2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167e4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   167e8:	f012 fbe7 	bl	28fba <bt_gatt_foreach_attr>
		if (data.err) {
   167ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   167f0:	2b00      	cmp	r3, #0
   167f2:	d0e8      	beq.n	167c6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   167f4:	9b02      	ldr	r3, [sp, #8]
   167f6:	6998      	ldr	r0, [r3, #24]
   167f8:	f7ff fa5c 	bl	15cb4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   167fc:	9802      	ldr	r0, [sp, #8]
   167fe:	f004 fbeb 	bl	1afd8 <net_buf_unref>
	if (!req) {
   16802:	4632      	mov	r2, r6
   16804:	2120      	movs	r1, #32
   16806:	4620      	mov	r0, r4
   16808:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1680c:	f012 fec1 	bl	29592 <send_err_rsp.part.0>
			return 0;
   16810:	2000      	movs	r0, #0
   16812:	e7c2      	b.n	1679a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16814:	200e      	movs	r0, #14
   16816:	e7c0      	b.n	1679a <att_read_mult_vl_req+0x26>
   16818:	00029333 	.word	0x00029333

0001681c <att_read_mult_req>:
{
   1681c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16820:	6846      	ldr	r6, [r0, #4]
{
   16822:	4604      	mov	r4, r0
   16824:	460d      	mov	r5, r1
   16826:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16828:	2101      	movs	r1, #1
   1682a:	4630      	mov	r0, r6
   1682c:	f013 f99f 	bl	29b6e <bt_gatt_change_aware>
   16830:	b950      	cbnz	r0, 16848 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16832:	2105      	movs	r1, #5
   16834:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16838:	f012 fd47 	bl	292ca <atomic_test_and_set_bit>
   1683c:	2800      	cmp	r0, #0
   1683e:	d13b      	bne.n	168b8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16840:	2012      	movs	r0, #18
}
   16842:	b005      	add	sp, #20
   16844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16848:	2210      	movs	r2, #16
   1684a:	2100      	movs	r1, #0
   1684c:	4668      	mov	r0, sp
   1684e:	f015 faef 	bl	2be30 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16852:	2200      	movs	r2, #0
   16854:	210f      	movs	r1, #15
   16856:	4630      	mov	r0, r6
   16858:	f7ff fed4 	bl	16604 <bt_att_create_pdu>
   1685c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1685e:	b368      	cbz	r0, 168bc <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16860:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16864:	f8df 9058 	ldr.w	r9, [pc, #88]	; 168c0 <att_read_mult_req+0xa4>
	data.chan = chan;
   16868:	9400      	str	r4, [sp, #0]
   1686a:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1686e:	8a2b      	ldrh	r3, [r5, #16]
   16870:	2b01      	cmp	r3, #1
   16872:	d804      	bhi.n	1687e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16874:	4620      	mov	r0, r4
   16876:	9902      	ldr	r1, [sp, #8]
   16878:	f012 fc73 	bl	29162 <bt_att_chan_send_rsp>
	return 0;
   1687c:	e01c      	b.n	168b8 <att_read_mult_req+0x9c>
   1687e:	4638      	mov	r0, r7
   16880:	f013 fd3e 	bl	2a300 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16884:	466b      	mov	r3, sp
   16886:	464a      	mov	r2, r9
   16888:	4601      	mov	r1, r0
   1688a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1688c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16890:	f012 fb93 	bl	28fba <bt_gatt_foreach_attr>
		if (data.err) {
   16894:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16898:	2b00      	cmp	r3, #0
   1689a:	d0e8      	beq.n	1686e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1689c:	9b02      	ldr	r3, [sp, #8]
   1689e:	6998      	ldr	r0, [r3, #24]
   168a0:	f7ff fa08 	bl	15cb4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   168a4:	9802      	ldr	r0, [sp, #8]
   168a6:	f004 fb97 	bl	1afd8 <net_buf_unref>
	if (!req) {
   168aa:	4632      	mov	r2, r6
   168ac:	210e      	movs	r1, #14
   168ae:	4620      	mov	r0, r4
   168b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   168b4:	f012 fe6d 	bl	29592 <send_err_rsp.part.0>
			return 0;
   168b8:	2000      	movs	r0, #0
   168ba:	e7c2      	b.n	16842 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   168bc:	200e      	movs	r0, #14
   168be:	e7c0      	b.n	16842 <att_read_mult_req+0x26>
   168c0:	000292ed 	.word	0x000292ed

000168c4 <att_read_rsp>:
{
   168c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   168c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   168cc:	4604      	mov	r4, r0
   168ce:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   168d0:	4640      	mov	r0, r8
   168d2:	2101      	movs	r1, #1
{
   168d4:	4617      	mov	r7, r2
   168d6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   168d8:	f013 f949 	bl	29b6e <bt_gatt_change_aware>
   168dc:	b948      	cbnz	r0, 168f2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   168de:	2105      	movs	r1, #5
   168e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   168e4:	f012 fcf1 	bl	292ca <atomic_test_and_set_bit>
   168e8:	bb78      	cbnz	r0, 1694a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   168ea:	2012      	movs	r0, #18
}
   168ec:	b004      	add	sp, #16
   168ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   168f2:	b38d      	cbz	r5, 16958 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   168f4:	2210      	movs	r2, #16
   168f6:	2100      	movs	r1, #0
   168f8:	4668      	mov	r0, sp
   168fa:	f015 fa99 	bl	2be30 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   168fe:	2200      	movs	r2, #0
   16900:	4639      	mov	r1, r7
   16902:	4640      	mov	r0, r8
   16904:	f7ff fe7e 	bl	16604 <bt_att_create_pdu>
   16908:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1690a:	b338      	cbz	r0, 1695c <att_read_rsp+0x98>
	data.offset = offset;
   1690c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16910:	4629      	mov	r1, r5
	data.offset = offset;
   16912:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16916:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16918:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1691a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1691e:	4a10      	ldr	r2, [pc, #64]	; (16960 <att_read_rsp+0x9c>)
   16920:	466b      	mov	r3, sp
	data.chan = chan;
   16922:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16924:	f012 fb49 	bl	28fba <bt_gatt_foreach_attr>
	if (data.err) {
   16928:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1692c:	b17b      	cbz	r3, 1694e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1692e:	9b02      	ldr	r3, [sp, #8]
   16930:	6998      	ldr	r0, [r3, #24]
   16932:	f7ff f9bf 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16936:	9802      	ldr	r0, [sp, #8]
   16938:	f004 fb4e 	bl	1afd8 <net_buf_unref>
	if (!req) {
   1693c:	462a      	mov	r2, r5
   1693e:	4631      	mov	r1, r6
   16940:	4620      	mov	r0, r4
   16942:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16946:	f012 fe24 	bl	29592 <send_err_rsp.part.0>
			return 0;
   1694a:	2000      	movs	r0, #0
   1694c:	e7ce      	b.n	168ec <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1694e:	4620      	mov	r0, r4
   16950:	9902      	ldr	r1, [sp, #8]
   16952:	f012 fc06 	bl	29162 <bt_att_chan_send_rsp>
	return 0;
   16956:	e7f8      	b.n	1694a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   16958:	2001      	movs	r0, #1
   1695a:	e7c7      	b.n	168ec <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1695c:	200e      	movs	r0, #14
   1695e:	e7c5      	b.n	168ec <att_read_rsp+0x28>
   16960:	000292ed 	.word	0x000292ed

00016964 <att_read_type_req>:
{
   16964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16968:	8a0d      	ldrh	r5, [r1, #16]
{
   1696a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1696c:	3d04      	subs	r5, #4
   1696e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   16970:	2d02      	cmp	r5, #2
{
   16972:	4608      	mov	r0, r1
   16974:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   16976:	d001      	beq.n	1697c <att_read_type_req+0x18>
   16978:	2d10      	cmp	r5, #16
   1697a:	d150      	bne.n	16a1e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1697c:	2104      	movs	r1, #4
   1697e:	300c      	adds	r0, #12
   16980:	f004 fc2e 	bl	1b1e0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16984:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16988:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1698a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1698c:	1d01      	adds	r1, r0, #4
   1698e:	462a      	mov	r2, r5
   16990:	4640      	mov	r0, r8
   16992:	f011 fe06 	bl	285a2 <bt_uuid_create>
   16996:	b188      	cbz	r0, 169bc <att_read_type_req+0x58>
	if (!start || !end) {
   16998:	b19e      	cbz	r6, 169c2 <att_read_type_req+0x5e>
   1699a:	b18f      	cbz	r7, 169c0 <att_read_type_req+0x5c>
	if (start > end) {
   1699c:	42b7      	cmp	r7, r6
   1699e:	d310      	bcc.n	169c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   169a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   169a2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   169a4:	2100      	movs	r1, #0
   169a6:	eb0d 0002 	add.w	r0, sp, r2
   169aa:	f015 fa41 	bl	2be30 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   169ae:	2201      	movs	r2, #1
   169b0:	2109      	movs	r1, #9
   169b2:	4628      	mov	r0, r5
   169b4:	f7ff fe26 	bl	16604 <bt_att_create_pdu>
   169b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   169ba:	b960      	cbnz	r0, 169d6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   169bc:	200e      	movs	r0, #14
   169be:	e007      	b.n	169d0 <att_read_type_req+0x6c>
			*err = 0U;
   169c0:	463e      	mov	r6, r7
	if (!req) {
   169c2:	2301      	movs	r3, #1
   169c4:	4632      	mov	r2, r6
   169c6:	2108      	movs	r1, #8
   169c8:	4620      	mov	r0, r4
   169ca:	f012 fde2 	bl	29592 <send_err_rsp.part.0>
		return 0;
   169ce:	2000      	movs	r0, #0
}
   169d0:	b00c      	add	sp, #48	; 0x30
   169d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   169d6:	2101      	movs	r1, #1
   169d8:	300c      	adds	r0, #12
	data.uuid = uuid;
   169da:	e9cd 4806 	strd	r4, r8, [sp, #24]
   169de:	f004 fc1d 	bl	1b21c <net_buf_simple_add>
	data.rsp->len = 0U;
   169e2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   169e4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   169e6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   169e8:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   169ea:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   169ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   169f0:	4630      	mov	r0, r6
   169f2:	ab06      	add	r3, sp, #24
   169f4:	4a0b      	ldr	r2, [pc, #44]	; (16a24 <att_read_type_req+0xc0>)
   169f6:	f012 fae0 	bl	28fba <bt_gatt_foreach_attr>
	if (data.err) {
   169fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   169fe:	b14b      	cbz	r3, 16a14 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16a00:	9b08      	ldr	r3, [sp, #32]
   16a02:	6998      	ldr	r0, [r3, #24]
   16a04:	f7ff f956 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16a08:	9808      	ldr	r0, [sp, #32]
   16a0a:	f004 fae5 	bl	1afd8 <net_buf_unref>
	if (!req) {
   16a0e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16a12:	e7d7      	b.n	169c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16a14:	4620      	mov	r0, r4
   16a16:	9908      	ldr	r1, [sp, #32]
   16a18:	f012 fba3 	bl	29162 <bt_att_chan_send_rsp>
	return 0;
   16a1c:	e7d7      	b.n	169ce <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   16a1e:	2004      	movs	r0, #4
   16a20:	e7d6      	b.n	169d0 <att_read_type_req+0x6c>
   16a22:	bf00      	nop
   16a24:	00016151 	.word	0x00016151

00016a28 <att_find_type_req>:
{
   16a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a2c:	460f      	mov	r7, r1
   16a2e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   16a30:	2106      	movs	r1, #6
   16a32:	b086      	sub	sp, #24
   16a34:	f107 000c 	add.w	r0, r7, #12
   16a38:	f004 fbd2 	bl	1b1e0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16a3c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16a3e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   16a42:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16a44:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   16a48:	b1c5      	cbz	r5, 16a7c <att_find_type_req+0x54>
   16a4a:	2300      	movs	r3, #0
   16a4c:	f1b8 0f00 	cmp.w	r8, #0
   16a50:	d013      	beq.n	16a7a <att_find_type_req+0x52>
	if (start > end) {
   16a52:	4545      	cmp	r5, r8
   16a54:	d812      	bhi.n	16a7c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16a56:	f88d 3000 	strb.w	r3, [sp]
   16a5a:	f88d 3004 	strb.w	r3, [sp, #4]
   16a5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16a62:	4668      	mov	r0, sp
   16a64:	a901      	add	r1, sp, #4
   16a66:	f8ad 2002 	strh.w	r2, [sp, #2]
   16a6a:	f8ad 3006 	strh.w	r3, [sp, #6]
   16a6e:	f011 fd6a 	bl	28546 <bt_uuid_cmp>
   16a72:	4606      	mov	r6, r0
   16a74:	b160      	cbz	r0, 16a90 <att_find_type_req+0x68>
	if (!req) {
   16a76:	230a      	movs	r3, #10
   16a78:	e001      	b.n	16a7e <att_find_type_req+0x56>
			*err = 0U;
   16a7a:	4645      	mov	r5, r8
	if (!req) {
   16a7c:	2301      	movs	r3, #1
   16a7e:	462a      	mov	r2, r5
   16a80:	2106      	movs	r1, #6
   16a82:	4620      	mov	r0, r4
   16a84:	f012 fd85 	bl	29592 <send_err_rsp.part.0>
		return 0;
   16a88:	2000      	movs	r0, #0
}
   16a8a:	b006      	add	sp, #24
   16a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   16a90:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16a94:	4601      	mov	r1, r0
   16a96:	2214      	movs	r2, #20
   16a98:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16a9a:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   16a9c:	f015 f9c8 	bl	2be30 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   16aa0:	4632      	mov	r2, r6
   16aa2:	2107      	movs	r1, #7
   16aa4:	4650      	mov	r0, sl
   16aa6:	f7ff fdad 	bl	16604 <bt_att_create_pdu>
   16aaa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16aac:	b1f8      	cbz	r0, 16aee <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16aae:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ab0:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16ab2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ab6:	4628      	mov	r0, r5
   16ab8:	ab01      	add	r3, sp, #4
   16aba:	4a0e      	ldr	r2, [pc, #56]	; (16af4 <att_find_type_req+0xcc>)
	data.value = value;
   16abc:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   16ac0:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   16ac2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ac6:	f012 fa78 	bl	28fba <bt_gatt_foreach_attr>
	if (data.err) {
   16aca:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16ace:	b14b      	cbz	r3, 16ae4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16ad0:	9b02      	ldr	r3, [sp, #8]
   16ad2:	6998      	ldr	r0, [r3, #24]
   16ad4:	f7ff f8ee 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16ad8:	9802      	ldr	r0, [sp, #8]
   16ada:	f004 fa7d 	bl	1afd8 <net_buf_unref>
	if (!req) {
   16ade:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16ae2:	e7cc      	b.n	16a7e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   16ae4:	4620      	mov	r0, r4
   16ae6:	9902      	ldr	r1, [sp, #8]
   16ae8:	f012 fb3b 	bl	29162 <bt_att_chan_send_rsp>
	return 0;
   16aec:	e7cc      	b.n	16a88 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   16aee:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16af0:	e7cb      	b.n	16a8a <att_find_type_req+0x62>
   16af2:	bf00      	nop
   16af4:	00015cf5 	.word	0x00015cf5

00016af8 <att_find_info_req>:
{
   16af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16afa:	68cb      	ldr	r3, [r1, #12]
{
   16afc:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   16afe:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16b00:	885e      	ldrh	r6, [r3, #2]
{
   16b02:	b085      	sub	sp, #20
	if (!start || !end) {
   16b04:	b195      	cbz	r5, 16b2c <att_find_info_req+0x34>
   16b06:	b186      	cbz	r6, 16b2a <att_find_info_req+0x32>
	if (start > end) {
   16b08:	42b5      	cmp	r5, r6
   16b0a:	d80f      	bhi.n	16b2c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16b0c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   16b0e:	2210      	movs	r2, #16
   16b10:	2100      	movs	r1, #0
   16b12:	4668      	mov	r0, sp
   16b14:	f015 f98c 	bl	2be30 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16b18:	2200      	movs	r2, #0
   16b1a:	2105      	movs	r1, #5
   16b1c:	4638      	mov	r0, r7
   16b1e:	f7ff fd71 	bl	16604 <bt_att_create_pdu>
   16b22:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16b24:	b958      	cbnz	r0, 16b3e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16b26:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16b28:	e007      	b.n	16b3a <att_find_info_req+0x42>
			*err = 0U;
   16b2a:	4635      	mov	r5, r6
	if (!req) {
   16b2c:	2301      	movs	r3, #1
   16b2e:	462a      	mov	r2, r5
   16b30:	2104      	movs	r1, #4
   16b32:	4620      	mov	r0, r4
   16b34:	f012 fd2d 	bl	29592 <send_err_rsp.part.0>
		return 0;
   16b38:	2000      	movs	r0, #0
}
   16b3a:	b005      	add	sp, #20
   16b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16b3e:	466b      	mov	r3, sp
   16b40:	4631      	mov	r1, r6
   16b42:	4628      	mov	r0, r5
   16b44:	4a09      	ldr	r2, [pc, #36]	; (16b6c <att_find_info_req+0x74>)
	data.chan = chan;
   16b46:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16b48:	f012 fa37 	bl	28fba <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16b4c:	9b02      	ldr	r3, [sp, #8]
   16b4e:	b943      	cbnz	r3, 16b62 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16b50:	9b01      	ldr	r3, [sp, #4]
   16b52:	6998      	ldr	r0, [r3, #24]
   16b54:	f7ff f8ae 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16b58:	9801      	ldr	r0, [sp, #4]
   16b5a:	f004 fa3d 	bl	1afd8 <net_buf_unref>
	if (!req) {
   16b5e:	230a      	movs	r3, #10
   16b60:	e7e5      	b.n	16b2e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16b62:	4620      	mov	r0, r4
   16b64:	9901      	ldr	r1, [sp, #4]
   16b66:	f012 fafc 	bl	29162 <bt_att_chan_send_rsp>
	return 0;
   16b6a:	e7e5      	b.n	16b38 <att_find_info_req+0x40>
   16b6c:	00029057 	.word	0x00029057

00016b70 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16b70:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   16b72:	4c09      	ldr	r4, [pc, #36]	; (16b98 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16b74:	4d09      	ldr	r5, [pc, #36]	; (16b9c <bt_att_init+0x2c>)
   16b76:	4620      	mov	r0, r4
   16b78:	f014 ff3c 	bl	2b9f4 <z_impl_k_queue_init>
   16b7c:	4629      	mov	r1, r5
   16b7e:	4620      	mov	r0, r4
   16b80:	f014 ff45 	bl	2ba0e <k_queue_append>
   16b84:	4620      	mov	r0, r4
   16b86:	f105 0114 	add.w	r1, r5, #20
   16b8a:	f014 ff40 	bl	2ba0e <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   16b92:	f000 bec5 	b.w	17920 <bt_gatt_init>
   16b96:	bf00      	nop
   16b98:	20008c44 	.word	0x20008c44
   16b9c:	20021640 	.word	0x20021640

00016ba0 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   16ba0:	2300      	movs	r3, #0
{
   16ba2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16ba4:	4605      	mov	r5, r0
   16ba6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16ba8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16baa:	f00c ff99 	bl	23ae0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16bae:	4b0c      	ldr	r3, [pc, #48]	; (16be0 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16bb0:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   16bb2:	681b      	ldr	r3, [r3, #0]
   16bb4:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   16bb6:	bf04      	itt	eq
   16bb8:	2500      	moveq	r5, #0
   16bba:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16bbc:	462a      	mov	r2, r5
   16bbe:	4623      	mov	r3, r4
   16bc0:	4808      	ldr	r0, [pc, #32]	; (16be4 <bt_att_req_alloc+0x44>)
   16bc2:	f00a fbc3 	bl	2134c <k_mem_slab_alloc>
   16bc6:	4601      	mov	r1, r0
   16bc8:	b940      	cbnz	r0, 16bdc <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16bca:	9b01      	ldr	r3, [sp, #4]
   16bcc:	221c      	movs	r2, #28
   16bce:	4618      	mov	r0, r3
   16bd0:	f015 f92e 	bl	2be30 <memset>
   16bd4:	4603      	mov	r3, r0

	return req;
}
   16bd6:	4618      	mov	r0, r3
   16bd8:	b003      	add	sp, #12
   16bda:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16bdc:	2300      	movs	r3, #0
   16bde:	e7fa      	b.n	16bd6 <bt_att_req_alloc+0x36>
   16be0:	20021668 	.word	0x20021668
   16be4:	20008a9c 	.word	0x20008a9c

00016be8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16be8:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   16bea:	6883      	ldr	r3, [r0, #8]
{
   16bec:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   16bee:	b14b      	cbz	r3, 16c04 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   16bf0:	6998      	ldr	r0, [r3, #24]
   16bf2:	f7ff f85f 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   16bf6:	9b01      	ldr	r3, [sp, #4]
   16bf8:	6898      	ldr	r0, [r3, #8]
   16bfa:	f004 f9ed 	bl	1afd8 <net_buf_unref>
		req->buf = NULL;
   16bfe:	2200      	movs	r2, #0
   16c00:	9b01      	ldr	r3, [sp, #4]
   16c02:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16c04:	4803      	ldr	r0, [pc, #12]	; (16c14 <bt_att_req_free+0x2c>)
   16c06:	a901      	add	r1, sp, #4
   16c08:	f00a fc0a 	bl	21420 <k_mem_slab_free>
}
   16c0c:	b003      	add	sp, #12
   16c0e:	f85d fb04 	ldr.w	pc, [sp], #4
   16c12:	bf00      	nop
   16c14:	20008a9c 	.word	0x20008a9c

00016c18 <att_handle_rsp>:
{
   16c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c1c:	4604      	mov	r4, r0
   16c1e:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   16c20:	30c0      	adds	r0, #192	; 0xc0
{
   16c22:	460e      	mov	r6, r1
   16c24:	4617      	mov	r7, r2
   16c26:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16c28:	f00b fdd8 	bl	227dc <k_work_cancel_delayable>
	if (!chan->req) {
   16c2c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16c30:	b980      	cbnz	r0, 16c54 <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   16c32:	4b1a      	ldr	r3, [pc, #104]	; (16c9c <att_handle_rsp+0x84>)
   16c34:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16c38:	9307      	str	r3, [sp, #28]
   16c3a:	2302      	movs	r3, #2
   16c3c:	4818      	ldr	r0, [pc, #96]	; (16ca0 <att_handle_rsp+0x88>)
   16c3e:	aa06      	add	r2, sp, #24
   16c40:	9306      	str	r3, [sp, #24]
   16c42:	f012 fa58 	bl	290f6 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   16c46:	6820      	ldr	r0, [r4, #0]
   16c48:	f012 fbdb 	bl	29402 <att_req_send_process>
}
   16c4c:	2000      	movs	r0, #0
   16c4e:	b008      	add	sp, #32
   16c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   16c54:	4b13      	ldr	r3, [pc, #76]	; (16ca4 <att_handle_rsp+0x8c>)
   16c56:	f04f 0800 	mov.w	r8, #0
   16c5a:	4298      	cmp	r0, r3
   16c5c:	d102      	bne.n	16c64 <att_handle_rsp+0x4c>
		chan->req = NULL;
   16c5e:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   16c62:	e7f0      	b.n	16c46 <att_handle_rsp+0x2e>
	func = chan->req->func;
   16c64:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   16c68:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   16c6c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16c70:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   16c74:	f7ff ffb8 	bl	16be8 <bt_att_req_free>
	att_req_send_process(chan->att);
   16c78:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   16c7a:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   16c7e:	f012 fbc0 	bl	29402 <att_req_send_process>
	if (func) {
   16c82:	f1b9 0f00 	cmp.w	r9, #0
   16c86:	d0e1      	beq.n	16c4c <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   16c88:	6820      	ldr	r0, [r4, #0]
   16c8a:	f8cd a000 	str.w	sl, [sp]
   16c8e:	463b      	mov	r3, r7
   16c90:	4632      	mov	r2, r6
   16c92:	4629      	mov	r1, r5
   16c94:	6800      	ldr	r0, [r0, #0]
   16c96:	47c8      	blx	r9
   16c98:	e7d8      	b.n	16c4c <att_handle_rsp+0x34>
   16c9a:	bf00      	nop
   16c9c:	00031336 	.word	0x00031336
   16ca0:	0002cca0 	.word	0x0002cca0
   16ca4:	2002166c 	.word	0x2002166c

00016ca8 <bt_att_disconnected>:
{
   16ca8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   16cac:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   16cb0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16cb2:	2e00      	cmp	r6, #0
   16cb4:	d056      	beq.n	16d64 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16cb6:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   16cba:	f106 0028 	add.w	r0, r6, #40	; 0x28
   16cbe:	f012 fae9 	bl	29294 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16cc2:	1f27      	subs	r7, r4, #4
   16cc4:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   16cc8:	2200      	movs	r2, #0
   16cca:	2300      	movs	r3, #0
   16ccc:	4640      	mov	r0, r8
   16cce:	f013 fb0e 	bl	2a2ee <net_buf_get>
   16cd2:	4605      	mov	r5, r0
   16cd4:	bb28      	cbnz	r0, 16d22 <bt_att_disconnected+0x7a>
	if (chan->req) {
   16cd6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16cda:	b12b      	cbz	r3, 16ce8 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16cdc:	4602      	mov	r2, r0
   16cde:	4601      	mov	r1, r0
   16ce0:	230e      	movs	r3, #14
   16ce2:	4638      	mov	r0, r7
   16ce4:	f7ff ff98 	bl	16c18 <att_handle_rsp>
	chan->att = NULL;
   16ce8:	2300      	movs	r3, #0
   16cea:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   16cee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	d137      	bne.n	16d64 <bt_att_disconnected+0xbc>
	att_reset(att);
   16cf4:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16cf6:	9803      	ldr	r0, [sp, #12]
   16cf8:	2200      	movs	r2, #0
   16cfa:	2300      	movs	r3, #0
   16cfc:	300c      	adds	r0, #12
   16cfe:	f013 faf6 	bl	2a2ee <net_buf_get>
   16d02:	4605      	mov	r5, r0
   16d04:	b9a0      	cbnz	r0, 16d30 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   16d06:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16d08:	6845      	ldr	r5, [r0, #4]
   16d0a:	b9c5      	cbnz	r5, 16d3e <bt_att_disconnected+0x96>
	att->conn = NULL;
   16d0c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16d0e:	a903      	add	r1, sp, #12
   16d10:	4816      	ldr	r0, [pc, #88]	; (16d6c <bt_att_disconnected+0xc4>)
   16d12:	f00a fb85 	bl	21420 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16d16:	6820      	ldr	r0, [r4, #0]
}
   16d18:	b004      	add	sp, #16
   16d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   16d1e:	f001 bdd7 	b.w	188d0 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16d22:	69a8      	ldr	r0, [r5, #24]
   16d24:	f7fe ffc6 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(buf);
   16d28:	4628      	mov	r0, r5
   16d2a:	f004 f955 	bl	1afd8 <net_buf_unref>
   16d2e:	e7cb      	b.n	16cc8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16d30:	69a8      	ldr	r0, [r5, #24]
   16d32:	f7fe ffbf 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(buf);
   16d36:	4628      	mov	r0, r5
   16d38:	f004 f94e 	bl	1afd8 <net_buf_unref>
   16d3c:	e7db      	b.n	16cf6 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16d3e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   16d40:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16d42:	4295      	cmp	r5, r2
	list->head = node;
   16d44:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16d46:	bf08      	it	eq
   16d48:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   16d4a:	686e      	ldr	r6, [r5, #4]
   16d4c:	b136      	cbz	r6, 16d5c <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16d4e:	69ab      	ldr	r3, [r5, #24]
   16d50:	210e      	movs	r1, #14
   16d52:	9300      	str	r3, [sp, #0]
   16d54:	2300      	movs	r3, #0
   16d56:	6800      	ldr	r0, [r0, #0]
   16d58:	461a      	mov	r2, r3
   16d5a:	47b0      	blx	r6
		bt_att_req_free(req);
   16d5c:	4628      	mov	r0, r5
   16d5e:	f7ff ff43 	bl	16be8 <bt_att_req_free>
   16d62:	e7d0      	b.n	16d06 <bt_att_disconnected+0x5e>
}
   16d64:	b004      	add	sp, #16
   16d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d6a:	bf00      	nop
   16d6c:	20008a5c 	.word	0x20008a5c

00016d70 <att_timeout>:
{
   16d70:	b510      	push	{r4, lr}
   16d72:	4604      	mov	r4, r0
   16d74:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   16d76:	4b08      	ldr	r3, [pc, #32]	; (16d98 <att_timeout+0x28>)
   16d78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16d7c:	9305      	str	r3, [sp, #20]
   16d7e:	2302      	movs	r3, #2
   16d80:	4806      	ldr	r0, [pc, #24]	; (16d9c <att_timeout+0x2c>)
   16d82:	aa04      	add	r2, sp, #16
   16d84:	9304      	str	r3, [sp, #16]
   16d86:	f012 f9b6 	bl	290f6 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   16d8a:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   16d8e:	b006      	add	sp, #24
   16d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   16d94:	f7ff bf88 	b.w	16ca8 <bt_att_disconnected>
   16d98:	0003134d 	.word	0x0003134d
   16d9c:	0002cca0 	.word	0x0002cca0

00016da0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   16da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16da2:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   16da4:	b958      	cbnz	r0, 16dbe <bt_att_send+0x1e>
   16da6:	4929      	ldr	r1, [pc, #164]	; (16e4c <bt_att_send+0xac>)
   16da8:	f640 63a4 	movw	r3, #3748	; 0xea4
   16dac:	4a28      	ldr	r2, [pc, #160]	; (16e50 <bt_att_send+0xb0>)
   16dae:	4829      	ldr	r0, [pc, #164]	; (16e54 <bt_att_send+0xb4>)
   16db0:	f00f ffdf 	bl	26d72 <assert_print>
   16db4:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   16db8:	4825      	ldr	r0, [pc, #148]	; (16e50 <bt_att_send+0xb0>)
   16dba:	f00f ffd3 	bl	26d64 <assert_post_action>
   16dbe:	b949      	cbnz	r1, 16dd4 <bt_att_send+0x34>
   16dc0:	4925      	ldr	r1, [pc, #148]	; (16e58 <bt_att_send+0xb8>)
   16dc2:	f640 63a5 	movw	r3, #3749	; 0xea5
   16dc6:	4a22      	ldr	r2, [pc, #136]	; (16e50 <bt_att_send+0xb0>)
   16dc8:	4822      	ldr	r0, [pc, #136]	; (16e54 <bt_att_send+0xb4>)
   16dca:	f00f ffd2 	bl	26d72 <assert_print>
   16dce:	f640 61a5 	movw	r1, #3749	; 0xea5
   16dd2:	e7f1      	b.n	16db8 <bt_att_send+0x18>

	att = att_get(conn);
   16dd4:	f7ff f904 	bl	15fe0 <att_get>
	if (!att) {
   16dd8:	4605      	mov	r5, r0
   16dda:	b940      	cbnz	r0, 16dee <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16ddc:	69a0      	ldr	r0, [r4, #24]
   16dde:	f7fe ff69 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(buf);
   16de2:	4620      	mov	r0, r4
   16de4:	f004 f8f8 	bl	1afd8 <net_buf_unref>
		return -ENOTCONN;
   16de8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   16dee:	f100 060c 	add.w	r6, r0, #12
   16df2:	4621      	mov	r1, r4
   16df4:	4630      	mov	r0, r6
   16df6:	f004 f8c9 	bl	1af8c <net_buf_put>
	return list->head;
   16dfa:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16dfc:	b14d      	cbz	r5, 16e12 <bt_att_send+0x72>
	return node->next;
   16dfe:	f855 49f0 	ldr.w	r4, [r5], #-240
   16e02:	b104      	cbz	r4, 16e06 <bt_att_send+0x66>
   16e04:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16e06:	4631      	mov	r1, r6
   16e08:	4628      	mov	r0, r5
   16e0a:	f012 f991 	bl	29130 <process_queue>
		if (!err) {
   16e0e:	4603      	mov	r3, r0
   16e10:	b980      	cbnz	r0, 16e34 <bt_att_send+0x94>
	return 0;
   16e12:	2000      	movs	r0, #0
   16e14:	e7ea      	b.n	16dec <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16e16:	2103      	movs	r1, #3
   16e18:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16e1c:	f012 f896 	bl	28f4c <atomic_test_bit>
   16e20:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16e22:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16e26:	f012 f891 	bl	28f4c <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16e2a:	4287      	cmp	r7, r0
   16e2c:	f06f 0301 	mvn.w	r3, #1
   16e30:	d107      	bne.n	16e42 <bt_att_send+0xa2>
   16e32:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e34:	2c00      	cmp	r4, #0
   16e36:	d0ec      	beq.n	16e12 <bt_att_send+0x72>
   16e38:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   16e3c:	b922      	cbnz	r2, 16e48 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   16e3e:	3302      	adds	r3, #2
   16e40:	d0e9      	beq.n	16e16 <bt_att_send+0x76>
{
   16e42:	4625      	mov	r5, r4
   16e44:	4614      	mov	r4, r2
   16e46:	e7de      	b.n	16e06 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e48:	3af0      	subs	r2, #240	; 0xf0
   16e4a:	e7f8      	b.n	16e3e <bt_att_send+0x9e>
   16e4c:	000303e6 	.word	0x000303e6
   16e50:	000310d6 	.word	0x000310d6
   16e54:	0002dd81 	.word	0x0002dd81
   16e58:	00031e39 	.word	0x00031e39

00016e5c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16e5c:	b510      	push	{r4, lr}
   16e5e:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16e60:	b958      	cbnz	r0, 16e7a <bt_att_req_send+0x1e>
   16e62:	4915      	ldr	r1, [pc, #84]	; (16eb8 <bt_att_req_send+0x5c>)
   16e64:	f640 63ba 	movw	r3, #3770	; 0xeba
   16e68:	4a14      	ldr	r2, [pc, #80]	; (16ebc <bt_att_req_send+0x60>)
   16e6a:	4815      	ldr	r0, [pc, #84]	; (16ec0 <bt_att_req_send+0x64>)
   16e6c:	f00f ff81 	bl	26d72 <assert_print>
   16e70:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   16e74:	4811      	ldr	r0, [pc, #68]	; (16ebc <bt_att_req_send+0x60>)
   16e76:	f00f ff75 	bl	26d64 <assert_post_action>
   16e7a:	b949      	cbnz	r1, 16e90 <bt_att_req_send+0x34>
   16e7c:	4911      	ldr	r1, [pc, #68]	; (16ec4 <bt_att_req_send+0x68>)
   16e7e:	f640 63bb 	movw	r3, #3771	; 0xebb
   16e82:	4a0e      	ldr	r2, [pc, #56]	; (16ebc <bt_att_req_send+0x60>)
   16e84:	480e      	ldr	r0, [pc, #56]	; (16ec0 <bt_att_req_send+0x64>)
   16e86:	f00f ff74 	bl	26d72 <assert_print>
   16e8a:	f640 61bb 	movw	r1, #3771	; 0xebb
   16e8e:	e7f1      	b.n	16e74 <bt_att_req_send+0x18>

	att = att_get(conn);
   16e90:	f7ff f8a6 	bl	15fe0 <att_get>
	if (!att) {
   16e94:	b160      	cbz	r0, 16eb0 <bt_att_req_send+0x54>
	parent->next = child;
   16e96:	2300      	movs	r3, #0
   16e98:	6023      	str	r3, [r4, #0]
	return list->tail;
   16e9a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   16e9c:	b92b      	cbnz	r3, 16eaa <bt_att_req_send+0x4e>
	list->head = node;
   16e9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   16ea2:	f012 faae 	bl	29402 <att_req_send_process>

	return 0;
   16ea6:	2000      	movs	r0, #0
}
   16ea8:	bd10      	pop	{r4, pc}
	parent->next = child;
   16eaa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16eac:	6084      	str	r4, [r0, #8]
}
   16eae:	e7f8      	b.n	16ea2 <bt_att_req_send+0x46>
		return -ENOTCONN;
   16eb0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16eb4:	e7f8      	b.n	16ea8 <bt_att_req_send+0x4c>
   16eb6:	bf00      	nop
   16eb8:	000303e6 	.word	0x000303e6
   16ebc:	000310d6 	.word	0x000310d6
   16ec0:	0002dd81 	.word	0x0002dd81
   16ec4:	00031185 	.word	0x00031185

00016ec8 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16ec8:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16eca:	4606      	mov	r6, r0
   16ecc:	4d13      	ldr	r5, [pc, #76]	; (16f1c <find_cf_cfg+0x54>)
   16ece:	b140      	cbz	r0, 16ee2 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16ed0:	462a      	mov	r2, r5
   16ed2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16ed6:	1e6c      	subs	r4, r5, #1
   16ed8:	f011 ff31 	bl	28d3e <bt_conn_is_peer_addr_le>
   16edc:	b198      	cbz	r0, 16f06 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16ede:	4620      	mov	r0, r4
   16ee0:	e00c      	b.n	16efc <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16ee2:	4628      	mov	r0, r5
   16ee4:	490e      	ldr	r1, [pc, #56]	; (16f20 <find_cf_cfg+0x58>)
   16ee6:	f012 fcca 	bl	2987e <bt_addr_le_eq>
   16eea:	b940      	cbnz	r0, 16efe <find_cf_cfg+0x36>
   16eec:	490c      	ldr	r1, [pc, #48]	; (16f20 <find_cf_cfg+0x58>)
   16eee:	f105 0010 	add.w	r0, r5, #16
   16ef2:	f012 fcc4 	bl	2987e <bt_addr_le_eq>
   16ef6:	b120      	cbz	r0, 16f02 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16ef8:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16efc:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16efe:	1e68      	subs	r0, r5, #1
   16f00:	e7fc      	b.n	16efc <find_cf_cfg+0x34>
	return NULL;
   16f02:	2000      	movs	r0, #0
   16f04:	e7fa      	b.n	16efc <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16f06:	4630      	mov	r0, r6
   16f08:	7c21      	ldrb	r1, [r4, #16]
   16f0a:	f104 0211 	add.w	r2, r4, #17
   16f0e:	f011 ff16 	bl	28d3e <bt_conn_is_peer_addr_le>
   16f12:	2800      	cmp	r0, #0
   16f14:	d0f5      	beq.n	16f02 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16f16:	f104 0010 	add.w	r0, r4, #16
   16f1a:	e7ef      	b.n	16efc <find_cf_cfg+0x34>
   16f1c:	200216a1 	.word	0x200216a1
   16f20:	0002fdbe 	.word	0x0002fdbe

00016f24 <find_sc_cfg>:
{
   16f24:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16f26:	4c0e      	ldr	r4, [pc, #56]	; (16f60 <find_sc_cfg+0x3c>)
{
   16f28:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   16f2a:	7823      	ldrb	r3, [r4, #0]
{
   16f2c:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16f2e:	4283      	cmp	r3, r0
   16f30:	d00c      	beq.n	16f4c <find_sc_cfg+0x28>
   16f32:	7b23      	ldrb	r3, [r4, #12]
   16f34:	42ab      	cmp	r3, r5
   16f36:	d110      	bne.n	16f5a <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16f38:	4631      	mov	r1, r6
   16f3a:	480a      	ldr	r0, [pc, #40]	; (16f64 <find_sc_cfg+0x40>)
   16f3c:	f012 fc9f 	bl	2987e <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16f40:	b158      	cbz	r0, 16f5a <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f42:	2301      	movs	r3, #1
			return &sc_cfg[i];
   16f44:	220c      	movs	r2, #12
   16f46:	fb02 4003 	mla	r0, r2, r3, r4
   16f4a:	e007      	b.n	16f5c <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16f4c:	1c60      	adds	r0, r4, #1
   16f4e:	f012 fc96 	bl	2987e <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16f52:	2800      	cmp	r0, #0
   16f54:	d0ed      	beq.n	16f32 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f56:	2300      	movs	r3, #0
   16f58:	e7f4      	b.n	16f44 <find_sc_cfg+0x20>
	return NULL;
   16f5a:	2000      	movs	r0, #0
}
   16f5c:	bd70      	pop	{r4, r5, r6, pc}
   16f5e:	bf00      	nop
   16f60:	20021aac 	.word	0x20021aac
   16f64:	20021ab9 	.word	0x20021ab9

00016f68 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   16f68:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   16f6a:	1c4a      	adds	r2, r1, #1
{
   16f6c:	460c      	mov	r4, r1
		if (conn) {
   16f6e:	b138      	cbz	r0, 16f80 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16f70:	7809      	ldrb	r1, [r1, #0]
   16f72:	f011 fee4 	bl	28d3e <bt_conn_is_peer_addr_le>
   16f76:	b108      	cbz	r0, 16f7c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   16f78:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   16f7a:	bd10      	pop	{r4, pc}
	return NULL;
   16f7c:	2000      	movs	r0, #0
   16f7e:	e7fc      	b.n	16f7a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16f80:	4610      	mov	r0, r2
   16f82:	4902      	ldr	r1, [pc, #8]	; (16f8c <find_ccc_cfg+0x24>)
   16f84:	f012 fc7b 	bl	2987e <bt_addr_le_eq>
   16f88:	e7f5      	b.n	16f76 <find_ccc_cfg+0xe>
   16f8a:	bf00      	nop
   16f8c:	0002fdbe 	.word	0x0002fdbe

00016f90 <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   16f90:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   16f92:	4c0e      	ldr	r4, [pc, #56]	; (16fcc <find_cf_cfg_by_addr+0x3c>)
{
   16f94:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
   16f96:	7823      	ldrb	r3, [r4, #0]
{
   16f98:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   16f9a:	4283      	cmp	r3, r0
   16f9c:	d00b      	beq.n	16fb6 <find_cf_cfg_by_addr+0x26>
   16f9e:	7c23      	ldrb	r3, [r4, #16]
   16fa0:	42b3      	cmp	r3, r6
   16fa2:	d110      	bne.n	16fc6 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16fa4:	4628      	mov	r0, r5
   16fa6:	490a      	ldr	r1, [pc, #40]	; (16fd0 <find_cf_cfg_by_addr+0x40>)
   16fa8:	f012 fc69 	bl	2987e <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16fac:	b158      	cbz	r0, 16fc6 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16fae:	2301      	movs	r3, #1
				return &cf_cfg[i];
   16fb0:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   16fb4:	e008      	b.n	16fc8 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16fb6:	4628      	mov	r0, r5
   16fb8:	1c61      	adds	r1, r4, #1
   16fba:	f012 fc60 	bl	2987e <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16fbe:	2800      	cmp	r0, #0
   16fc0:	d0ed      	beq.n	16f9e <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16fc2:	2300      	movs	r3, #0
   16fc4:	e7f4      	b.n	16fb0 <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   16fc6:	2000      	movs	r0, #0
}
   16fc8:	bd70      	pop	{r4, r5, r6, pc}
   16fca:	bf00      	nop
   16fcc:	200216a0 	.word	0x200216a0
   16fd0:	200216b1 	.word	0x200216b1

00016fd4 <ccc_load>:
{
   16fd4:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16fd6:	4b20      	ldr	r3, [pc, #128]	; (17058 <ccc_load+0x84>)
{
   16fd8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16fda:	6882      	ldr	r2, [r0, #8]
   16fdc:	429a      	cmp	r2, r3
   16fde:	d10f      	bne.n	17000 <ccc_load+0x2c>
	if (!load->entry) {
   16fe0:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   16fe2:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   16fe4:	b975      	cbnz	r5, 17004 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   16fe6:	7922      	ldrb	r2, [r4, #4]
   16fe8:	4630      	mov	r0, r6
   16fea:	6821      	ldr	r1, [r4, #0]
   16fec:	f012 fc4f 	bl	2988e <ccc_find_cfg>
	if (!cfg) {
   16ff0:	4602      	mov	r2, r0
   16ff2:	b128      	cbz	r0, 17000 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16ff4:	4919      	ldr	r1, [pc, #100]	; (1705c <ccc_load+0x88>)
   16ff6:	3001      	adds	r0, #1
   16ff8:	f012 fc6f 	bl	298da <bt_addr_le_copy>
	cfg->id = 0U;
   16ffc:	7015      	strb	r5, [r2, #0]
	cfg->value = 0U;
   16ffe:	8115      	strh	r5, [r2, #8]
		return BT_GATT_ITER_CONTINUE;
   17000:	2001      	movs	r0, #1
}
   17002:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   17004:	68e0      	ldr	r0, [r4, #12]
   17006:	2800      	cmp	r0, #0
   17008:	d0fb      	beq.n	17002 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1700a:	882b      	ldrh	r3, [r5, #0]
   1700c:	428b      	cmp	r3, r1
   1700e:	d00a      	beq.n	17026 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   17010:	d2f6      	bcs.n	17000 <ccc_load+0x2c>
	load->count--;
   17012:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   17014:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   17016:	3801      	subs	r0, #1
	load->entry++;
   17018:	3304      	adds	r3, #4
	load->count--;
   1701a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1701c:	3800      	subs	r0, #0
   1701e:	bf18      	it	ne
   17020:	2001      	movne	r0, #1
	load->entry++;
   17022:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17024:	e7ed      	b.n	17002 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   17026:	7922      	ldrb	r2, [r4, #4]
   17028:	4630      	mov	r0, r6
   1702a:	6821      	ldr	r1, [r4, #0]
   1702c:	f012 fc2f 	bl	2988e <ccc_find_cfg>
	if (!cfg) {
   17030:	4602      	mov	r2, r0
   17032:	b960      	cbnz	r0, 1704e <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   17034:	4630      	mov	r0, r6
   17036:	4909      	ldr	r1, [pc, #36]	; (1705c <ccc_load+0x88>)
   17038:	f012 fc29 	bl	2988e <ccc_find_cfg>
		if (!cfg) {
   1703c:	4602      	mov	r2, r0
   1703e:	2800      	cmp	r0, #0
   17040:	d0e7      	beq.n	17012 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   17042:	6821      	ldr	r1, [r4, #0]
   17044:	3001      	adds	r0, #1
   17046:	f012 fc48 	bl	298da <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1704a:	7923      	ldrb	r3, [r4, #4]
   1704c:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   1704e:	68a3      	ldr	r3, [r4, #8]
   17050:	885b      	ldrh	r3, [r3, #2]
   17052:	8113      	strh	r3, [r2, #8]
   17054:	e7dd      	b.n	17012 <ccc_load+0x3e>
   17056:	bf00      	nop
   17058:	00017791 	.word	0x00017791
   1705c:	0002fdbe 	.word	0x0002fdbe

00017060 <read_ppcp>:
{
   17060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   17062:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   17064:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   17068:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1706a:	4a06      	ldr	r2, [pc, #24]	; (17084 <read_ppcp+0x24>)
   1706c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   17070:	2308      	movs	r3, #8
   17072:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   17076:	9300      	str	r3, [sp, #0]
   17078:	446b      	add	r3, sp
   1707a:	f012 fc3a 	bl	298f2 <bt_gatt_attr_read.constprop.0>
}
   1707e:	b005      	add	sp, #20
   17080:	f85d fb04 	ldr.w	pc, [sp], #4
   17084:	00280018 	.word	0x00280018

00017088 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   17088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   1708a:	4b07      	ldr	r3, [pc, #28]	; (170a8 <ccc_set_direct.part.0+0x20>)
   1708c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17090:	9305      	str	r3, [sp, #20]
   17092:	2302      	movs	r3, #2
   17094:	4805      	ldr	r0, [pc, #20]	; (170ac <ccc_set_direct.part.0+0x24>)
   17096:	aa04      	add	r2, sp, #16
   17098:	9304      	str	r3, [sp, #16]
   1709a:	f012 fcb2 	bl	29a02 <z_log_msg_static_create.constprop.0>
}
   1709e:	f06f 0015 	mvn.w	r0, #21
   170a2:	b007      	add	sp, #28
   170a4:	f85d fb04 	ldr.w	pc, [sp], #4
   170a8:	00031360 	.word	0x00031360
   170ac:	0002ccc0 	.word	0x0002ccc0

000170b0 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   170b0:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   170b2:	2108      	movs	r1, #8
   170b4:	af00      	add	r7, sp, #0
   170b6:	480f      	ldr	r0, [pc, #60]	; (170f4 <db_hash_commit+0x44>)
   170b8:	f012 fbf9 	bl	298ae <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   170bc:	2200      	movs	r2, #0
   170be:	2300      	movs	r3, #0
   170c0:	480d      	ldr	r0, [pc, #52]	; (170f8 <db_hash_commit+0x48>)
   170c2:	f7fa fee5 	bl	11e90 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   170c6:	1e04      	subs	r4, r0, #0
   170c8:	da11      	bge.n	170ee <db_hash_commit+0x3e>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   170ca:	466d      	mov	r5, sp
   170cc:	b088      	sub	sp, #32
   170ce:	466a      	mov	r2, sp
   170d0:	4b0a      	ldr	r3, [pc, #40]	; (170fc <db_hash_commit+0x4c>)
   170d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170d6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   170da:	2303      	movs	r3, #3
   170dc:	4808      	ldr	r0, [pc, #32]	; (17100 <db_hash_commit+0x50>)
   170de:	f842 3f10 	str.w	r3, [r2, #16]!
   170e2:	f012 fc8e 	bl	29a02 <z_log_msg_static_create.constprop.0>
   170e6:	46ad      	mov	sp, r5
	}

	return err;
}
   170e8:	4620      	mov	r0, r4
   170ea:	46bd      	mov	sp, r7
   170ec:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   170ee:	2400      	movs	r4, #0
	return err;
   170f0:	e7fa      	b.n	170e8 <db_hash_commit+0x38>
   170f2:	bf00      	nop
   170f4:	20009f18 	.word	0x20009f18
   170f8:	20009e70 	.word	0x20009e70
   170fc:	0003136c 	.word	0x0003136c
   17100:	0002ccc0 	.word	0x0002ccc0

00017104 <sc_set>:
{
   17104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17108:	b08b      	sub	sp, #44	; 0x2c
   1710a:	460e      	mov	r6, r1
   1710c:	4690      	mov	r8, r2
   1710e:	4699      	mov	r9, r3
	if (!name) {
   17110:	4604      	mov	r4, r0
{
   17112:	af00      	add	r7, sp, #0
	if (!name) {
   17114:	b988      	cbnz	r0, 1713a <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   17116:	4b43      	ldr	r3, [pc, #268]	; (17224 <sc_set+0x120>)
   17118:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1711c:	627b      	str	r3, [r7, #36]	; 0x24
   1711e:	2302      	movs	r3, #2
   17120:	4841      	ldr	r0, [pc, #260]	; (17228 <sc_set+0x124>)
   17122:	623b      	str	r3, [r7, #32]
   17124:	f107 0220 	add.w	r2, r7, #32
   17128:	f012 fc6b 	bl	29a02 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1712c:	f06f 0515 	mvn.w	r5, #21
}
   17130:	4628      	mov	r0, r5
   17132:	372c      	adds	r7, #44	; 0x2c
   17134:	46bd      	mov	sp, r7
   17136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1713a:	f107 0108 	add.w	r1, r7, #8
   1713e:	f011 f9de 	bl	284fe <bt_settings_decode_key>
	if (err) {
   17142:	4605      	mov	r5, r0
   17144:	b190      	cbz	r0, 1716c <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   17146:	466d      	mov	r5, sp
   17148:	b088      	sub	sp, #32
   1714a:	466a      	mov	r2, sp
   1714c:	4b37      	ldr	r3, [pc, #220]	; (1722c <sc_set+0x128>)
   1714e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17152:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17156:	f44f 7300 	mov.w	r3, #512	; 0x200
   1715a:	8393      	strh	r3, [r2, #28]
   1715c:	4b34      	ldr	r3, [pc, #208]	; (17230 <sc_set+0x12c>)
   1715e:	4832      	ldr	r0, [pc, #200]	; (17228 <sc_set+0x124>)
   17160:	f842 3f10 	str.w	r3, [r2, #16]!
   17164:	f012 fc4d 	bl	29a02 <z_log_msg_static_create.constprop.0>
   17168:	46ad      	mov	sp, r5
		return -EINVAL;
   1716a:	e7df      	b.n	1712c <sc_set+0x28>
	settings_name_next(name, &next);
   1716c:	4620      	mov	r0, r4
   1716e:	1d39      	adds	r1, r7, #4
   17170:	f010 fc1f 	bl	279b2 <settings_name_next>
	if (!next) {
   17174:	6878      	ldr	r0, [r7, #4]
   17176:	b1a0      	cbz	r0, 171a2 <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   17178:	220a      	movs	r2, #10
   1717a:	4629      	mov	r1, r5
   1717c:	f00e faa8 	bl	256d0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17180:	b178      	cbz	r0, 171a2 <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   17182:	466c      	mov	r4, sp
   17184:	b088      	sub	sp, #32
   17186:	466a      	mov	r2, sp
   17188:	4b2a      	ldr	r3, [pc, #168]	; (17234 <sc_set+0x130>)
   1718a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1718e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17192:	2303      	movs	r3, #3
   17194:	4824      	ldr	r0, [pc, #144]	; (17228 <sc_set+0x124>)
   17196:	f842 3f10 	str.w	r3, [r2, #16]!
   1719a:	f012 fc32 	bl	29a02 <z_log_msg_static_create.constprop.0>
   1719e:	46a5      	mov	sp, r4
			return -EINVAL;
   171a0:	e7c4      	b.n	1712c <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   171a2:	2000      	movs	r0, #0
   171a4:	f107 0108 	add.w	r1, r7, #8
   171a8:	f7ff febc 	bl	16f24 <find_sc_cfg>
	if (!cfg && len_rd) {
   171ac:	4604      	mov	r4, r0
   171ae:	bb98      	cbnz	r0, 17218 <sc_set+0x114>
   171b0:	2e00      	cmp	r6, #0
   171b2:	d0bd      	beq.n	17130 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   171b4:	4920      	ldr	r1, [pc, #128]	; (17238 <sc_set+0x134>)
   171b6:	f7ff feb5 	bl	16f24 <find_sc_cfg>
		if (!cfg) {
   171ba:	4604      	mov	r4, r0
   171bc:	b968      	cbnz	r0, 171da <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   171be:	4b1f      	ldr	r3, [pc, #124]	; (1723c <sc_set+0x138>)
   171c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171c4:	627b      	str	r3, [r7, #36]	; 0x24
   171c6:	2302      	movs	r3, #2
   171c8:	4817      	ldr	r0, [pc, #92]	; (17228 <sc_set+0x124>)
   171ca:	623b      	str	r3, [r7, #32]
   171cc:	f107 0220 	add.w	r2, r7, #32
   171d0:	f012 fc17 	bl	29a02 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   171d4:	f06f 050b 	mvn.w	r5, #11
   171d8:	e7aa      	b.n	17130 <sc_set+0x2c>
		cfg->id = id;
   171da:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   171dc:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   171e0:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   171e4:	f012 fb79 	bl	298da <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   171e8:	f104 0108 	add.w	r1, r4, #8
   171ec:	2204      	movs	r2, #4
   171ee:	4648      	mov	r0, r9
   171f0:	47c0      	blx	r8
		if (len < 0) {
   171f2:	1e04      	subs	r4, r0, #0
   171f4:	da9c      	bge.n	17130 <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   171f6:	466d      	mov	r5, sp
   171f8:	b088      	sub	sp, #32
   171fa:	466a      	mov	r2, sp
   171fc:	4b10      	ldr	r3, [pc, #64]	; (17240 <sc_set+0x13c>)
   171fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17202:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17206:	2303      	movs	r3, #3
   17208:	4807      	ldr	r0, [pc, #28]	; (17228 <sc_set+0x124>)
   1720a:	f842 3f10 	str.w	r3, [r2, #16]!
   1720e:	f012 fbf8 	bl	29a02 <z_log_msg_static_create.constprop.0>
   17212:	46ad      	mov	sp, r5
			return len;
   17214:	4625      	mov	r5, r4
   17216:	e78b      	b.n	17130 <sc_set+0x2c>
	if (len_rd) {
   17218:	2e00      	cmp	r6, #0
   1721a:	d1e5      	bne.n	171e8 <sc_set+0xe4>
   1721c:	6006      	str	r6, [r0, #0]
   1721e:	6046      	str	r6, [r0, #4]
   17220:	6086      	str	r6, [r0, #8]
   17222:	e785      	b.n	17130 <sc_set+0x2c>
   17224:	0002fe14 	.word	0x0002fe14
   17228:	0002ccc0 	.word	0x0002ccc0
   1722c:	000313a0 	.word	0x000313a0
   17230:	01000003 	.word	0x01000003
   17234:	000313bc 	.word	0x000313bc
   17238:	0002fdbe 	.word	0x0002fdbe
   1723c:	000313d7 	.word	0x000313d7
   17240:	000313f9 	.word	0x000313f9

00017244 <bt_gatt_clear_sc>:
{
   17244:	b5b0      	push	{r4, r5, r7, lr}
   17246:	b08c      	sub	sp, #48	; 0x30
   17248:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1724a:	f7ff fe6b 	bl	16f24 <find_sc_cfg>
	if (!cfg) {
   1724e:	4604      	mov	r4, r0
   17250:	b320      	cbz	r0, 1729c <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   17252:	4605      	mov	r5, r0
   17254:	f815 2b01 	ldrb.w	r2, [r5], #1
   17258:	b322      	cbz	r2, 172a4 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1725a:	2104      	movs	r1, #4
   1725c:	4638      	mov	r0, r7
   1725e:	f00f fb38 	bl	268d2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   17262:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   17264:	1d38      	adds	r0, r7, #4
   17266:	462b      	mov	r3, r5
   17268:	2124      	movs	r1, #36	; 0x24
   1726a:	4a0f      	ldr	r2, [pc, #60]	; (172a8 <bt_gatt_clear_sc+0x64>)
   1726c:	f7fa fd56 	bl	11d1c <bt_settings_encode_key>
		err = settings_delete(key);
   17270:	1d38      	adds	r0, r7, #4
   17272:	f010 fb76 	bl	27962 <settings_delete>
		if (err) {
   17276:	b170      	cbz	r0, 17296 <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   17278:	466d      	mov	r5, sp
   1727a:	b088      	sub	sp, #32
   1727c:	aa02      	add	r2, sp, #8
   1727e:	4b0b      	ldr	r3, [pc, #44]	; (172ac <bt_gatt_clear_sc+0x68>)
   17280:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17284:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17288:	2303      	movs	r3, #3
   1728a:	4809      	ldr	r0, [pc, #36]	; (172b0 <bt_gatt_clear_sc+0x6c>)
   1728c:	f842 3f10 	str.w	r3, [r2, #16]!
   17290:	f012 fbb7 	bl	29a02 <z_log_msg_static_create.constprop.0>
   17294:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   17296:	4620      	mov	r0, r4
   17298:	f012 fb26 	bl	298e8 <clear_sc_cfg>
}
   1729c:	2000      	movs	r0, #0
   1729e:	3728      	adds	r7, #40	; 0x28
   172a0:	46bd      	mov	sp, r7
   172a2:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   172a4:	9200      	str	r2, [sp, #0]
   172a6:	e7dd      	b.n	17264 <bt_gatt_clear_sc+0x20>
   172a8:	000317aa 	.word	0x000317aa
   172ac:	0003141a 	.word	0x0003141a
   172b0:	0002ccc0 	.word	0x0002ccc0

000172b4 <sc_clear>:
{
   172b4:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   172b6:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   172ba:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   172bc:	4629      	mov	r1, r5
   172be:	7a00      	ldrb	r0, [r0, #8]
{
   172c0:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   172c2:	f011 fa9c 	bl	287fe <bt_addr_le_is_bonded>
   172c6:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   172c8:	4629      	mov	r1, r5
   172ca:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   172cc:	b19b      	cbz	r3, 172f6 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   172ce:	f7ff ffb9 	bl	17244 <bt_gatt_clear_sc>
		if (err) {
   172d2:	b170      	cbz	r0, 172f2 <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   172d4:	466c      	mov	r4, sp
   172d6:	b088      	sub	sp, #32
   172d8:	466a      	mov	r2, sp
   172da:	4b0a      	ldr	r3, [pc, #40]	; (17304 <sc_clear+0x50>)
   172dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   172e0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   172e4:	2303      	movs	r3, #3
   172e6:	4808      	ldr	r0, [pc, #32]	; (17308 <sc_clear+0x54>)
   172e8:	f842 3f10 	str.w	r3, [r2, #16]!
   172ec:	f012 fb89 	bl	29a02 <z_log_msg_static_create.constprop.0>
   172f0:	46a5      	mov	sp, r4
}
   172f2:	46bd      	mov	sp, r7
   172f4:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   172f6:	f7ff fe15 	bl	16f24 <find_sc_cfg>
		if (cfg) {
   172fa:	2800      	cmp	r0, #0
   172fc:	d0f9      	beq.n	172f2 <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   172fe:	f012 faf3 	bl	298e8 <clear_sc_cfg>
}
   17302:	e7f6      	b.n	172f2 <sc_clear+0x3e>
   17304:	00031437 	.word	0x00031437
   17308:	0002ccc0 	.word	0x0002ccc0

0001730c <sc_store>:
{
   1730c:	b5b0      	push	{r4, r5, r7, lr}
   1730e:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   17310:	4605      	mov	r5, r0
   17312:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17316:	4604      	mov	r4, r0
   17318:	af02      	add	r7, sp, #8
	if (cfg->id) {
   1731a:	b31a      	cbz	r2, 17364 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1731c:	2104      	movs	r1, #4
   1731e:	4638      	mov	r0, r7
   17320:	f00f fad7 	bl	268d2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   17324:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   17326:	2124      	movs	r1, #36	; 0x24
   17328:	4a0f      	ldr	r2, [pc, #60]	; (17368 <sc_store+0x5c>)
   1732a:	1d38      	adds	r0, r7, #4
   1732c:	462b      	mov	r3, r5
   1732e:	f7fa fcf5 	bl	11d1c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   17332:	2204      	movs	r2, #4
   17334:	f104 0108 	add.w	r1, r4, #8
   17338:	18b8      	adds	r0, r7, r2
   1733a:	f7f8 fda5 	bl	fe88 <settings_save_one>
	if (err) {
   1733e:	b170      	cbz	r0, 1735e <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   17340:	466c      	mov	r4, sp
   17342:	b088      	sub	sp, #32
   17344:	aa02      	add	r2, sp, #8
   17346:	4b09      	ldr	r3, [pc, #36]	; (1736c <sc_store+0x60>)
   17348:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1734c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17350:	2303      	movs	r3, #3
   17352:	4807      	ldr	r0, [pc, #28]	; (17370 <sc_store+0x64>)
   17354:	f842 3f10 	str.w	r3, [r2, #16]!
   17358:	f012 fb53 	bl	29a02 <z_log_msg_static_create.constprop.0>
   1735c:	46a5      	mov	sp, r4
}
   1735e:	3728      	adds	r7, #40	; 0x28
   17360:	46bd      	mov	sp, r7
   17362:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   17364:	9200      	str	r2, [sp, #0]
   17366:	e7de      	b.n	17326 <sc_store+0x1a>
   17368:	000317aa 	.word	0x000317aa
   1736c:	0003144d 	.word	0x0003144d
   17370:	0002ccc0 	.word	0x0002ccc0

00017374 <sc_save>:
{
   17374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17378:	b086      	sub	sp, #24
   1737a:	4680      	mov	r8, r0
   1737c:	460f      	mov	r7, r1
   1737e:	4616      	mov	r6, r2
   17380:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17382:	f7ff fdcf 	bl	16f24 <find_sc_cfg>
	if (!cfg) {
   17386:	4604      	mov	r4, r0
   17388:	b9b0      	cbnz	r0, 173b8 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1738a:	4919      	ldr	r1, [pc, #100]	; (173f0 <sc_save+0x7c>)
   1738c:	f7ff fdca 	bl	16f24 <find_sc_cfg>
		if (!cfg) {
   17390:	4604      	mov	r4, r0
   17392:	b960      	cbnz	r0, 173ae <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   17394:	4b17      	ldr	r3, [pc, #92]	; (173f4 <sc_save+0x80>)
   17396:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1739a:	9305      	str	r3, [sp, #20]
   1739c:	2302      	movs	r3, #2
   1739e:	4816      	ldr	r0, [pc, #88]	; (173f8 <sc_save+0x84>)
   173a0:	aa04      	add	r2, sp, #16
   173a2:	9304      	str	r3, [sp, #16]
   173a4:	f012 fb2d 	bl	29a02 <z_log_msg_static_create.constprop.0>
}
   173a8:	b006      	add	sp, #24
   173aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   173ae:	4639      	mov	r1, r7
		cfg->id = id;
   173b0:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   173b4:	f012 fa91 	bl	298da <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   173b8:	8922      	ldrh	r2, [r4, #8]
   173ba:	8963      	ldrh	r3, [r4, #10]
   173bc:	b97a      	cbnz	r2, 173de <sc_save+0x6a>
   173be:	b983      	cbnz	r3, 173e2 <sc_save+0x6e>
		cfg->data.start = start;
   173c0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   173c2:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   173c4:	4621      	mov	r1, r4
   173c6:	f811 0b01 	ldrb.w	r0, [r1], #1
   173ca:	f011 fa18 	bl	287fe <bt_addr_le_is_bonded>
   173ce:	2800      	cmp	r0, #0
   173d0:	d0ea      	beq.n	173a8 <sc_save+0x34>
		sc_store(cfg);
   173d2:	4620      	mov	r0, r4
}
   173d4:	b006      	add	sp, #24
   173d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   173da:	f7ff bf97 	b.w	1730c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   173de:	4296      	cmp	r6, r2
   173e0:	d302      	bcc.n	173e8 <sc_save+0x74>
   173e2:	429d      	cmp	r5, r3
   173e4:	d8ed      	bhi.n	173c2 <sc_save+0x4e>
   173e6:	e7df      	b.n	173a8 <sc_save+0x34>
	if (*end < new_end) {
   173e8:	429d      	cmp	r5, r3
		*start = new_start;
   173ea:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   173ec:	d9ea      	bls.n	173c4 <sc_save+0x50>
   173ee:	e7e8      	b.n	173c2 <sc_save+0x4e>
   173f0:	0002fdbe 	.word	0x0002fdbe
   173f4:	00031469 	.word	0x00031469
   173f8:	0002ccc0 	.word	0x0002ccc0

000173fc <cf_write>:
{
   173fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17400:	b086      	sub	sp, #24
   17402:	461f      	mov	r7, r3
   17404:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   17408:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1740a:	2b01      	cmp	r3, #1
{
   1740c:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1740e:	d83c      	bhi.n	1748a <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   17410:	443b      	add	r3, r7
   17412:	2b01      	cmp	r3, #1
   17414:	463d      	mov	r5, r7
   17416:	dc3b      	bgt.n	17490 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   17418:	f7ff fd56 	bl	16ec8 <find_cf_cfg>
	if (!cfg) {
   1741c:	4604      	mov	r4, r0
   1741e:	b998      	cbnz	r0, 17448 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   17420:	f7ff fd52 	bl	16ec8 <find_cf_cfg>
	if (!cfg) {
   17424:	4604      	mov	r4, r0
   17426:	b978      	cbnz	r0, 17448 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   17428:	4b1c      	ldr	r3, [pc, #112]	; (1749c <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1742a:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1742e:	9305      	str	r3, [sp, #20]
   17430:	2302      	movs	r3, #2
   17432:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17436:	481a      	ldr	r0, [pc, #104]	; (174a0 <cf_write+0xa4>)
   17438:	aa04      	add	r2, sp, #16
   1743a:	9304      	str	r3, [sp, #16]
   1743c:	f012 fae1 	bl	29a02 <z_log_msg_static_create.constprop.0>
}
   17440:	4628      	mov	r0, r5
   17442:	b006      	add	sp, #24
   17444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17448:	b197      	cbz	r7, 17470 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   1744a:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1744c:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1744e:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17452:	fa21 f003 	lsr.w	r0, r1, r3
   17456:	07c7      	lsls	r7, r0, #31
   17458:	d503      	bpl.n	17462 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1745a:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1745e:	07c0      	lsls	r0, r0, #31
   17460:	d519      	bpl.n	17496 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17462:	3301      	adds	r3, #1
   17464:	2b03      	cmp	r3, #3
   17466:	d1f4      	bne.n	17452 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   17468:	f002 0207 	and.w	r2, r2, #7
   1746c:	4311      	orrs	r1, r2
   1746e:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17470:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17474:	1c60      	adds	r0, r4, #1
   17476:	f012 fa30 	bl	298da <bt_addr_le_copy>
	cfg->id = conn->id;
   1747a:	4620      	mov	r0, r4
   1747c:	7a33      	ldrb	r3, [r6, #8]
   1747e:	2101      	movs	r1, #1
   17480:	f800 3b0c 	strb.w	r3, [r0], #12
   17484:	f012 fa13 	bl	298ae <atomic_or>
}
   17488:	e7da      	b.n	17440 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1748a:	f06f 0506 	mvn.w	r5, #6
   1748e:	e7d7      	b.n	17440 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17490:	f06f 050c 	mvn.w	r5, #12
   17494:	e7d4      	b.n	17440 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   17496:	f06f 0512 	mvn.w	r5, #18
   1749a:	e7d1      	b.n	17440 <cf_write+0x44>
   1749c:	00031488 	.word	0x00031488
   174a0:	0002ccc0 	.word	0x0002ccc0

000174a4 <db_hash_store>:
{
   174a4:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   174a6:	2210      	movs	r2, #16
{
   174a8:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   174aa:	490b      	ldr	r1, [pc, #44]	; (174d8 <db_hash_store+0x34>)
   174ac:	480b      	ldr	r0, [pc, #44]	; (174dc <db_hash_store+0x38>)
   174ae:	f7f8 fceb 	bl	fe88 <settings_save_one>
	if (err) {
   174b2:	b170      	cbz	r0, 174d2 <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   174b4:	466c      	mov	r4, sp
   174b6:	b088      	sub	sp, #32
   174b8:	466a      	mov	r2, sp
   174ba:	4b09      	ldr	r3, [pc, #36]	; (174e0 <db_hash_store+0x3c>)
   174bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   174c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   174c4:	2303      	movs	r3, #3
   174c6:	4807      	ldr	r0, [pc, #28]	; (174e4 <db_hash_store+0x40>)
   174c8:	f842 3f10 	str.w	r3, [r2, #16]!
   174cc:	f012 fa99 	bl	29a02 <z_log_msg_static_create.constprop.0>
   174d0:	46a5      	mov	sp, r4
}
   174d2:	46bd      	mov	sp, r7
   174d4:	bd98      	pop	{r3, r4, r7, pc}
   174d6:	bf00      	nop
   174d8:	20009e50 	.word	0x20009e50
   174dc:	000314b4 	.word	0x000314b4
   174e0:	000314bc 	.word	0x000314bc
   174e4:	0002ccc0 	.word	0x0002ccc0

000174e8 <db_hash_set>:
{
   174e8:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   174ea:	4618      	mov	r0, r3
{
   174ec:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   174ee:	490d      	ldr	r1, [pc, #52]	; (17524 <db_hash_set+0x3c>)
   174f0:	2210      	movs	r2, #16
{
   174f2:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   174f4:	47a0      	blx	r4
	if (len < 0) {
   174f6:	1e04      	subs	r4, r0, #0
   174f8:	da11      	bge.n	1751e <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   174fa:	466d      	mov	r5, sp
   174fc:	b088      	sub	sp, #32
   174fe:	466a      	mov	r2, sp
   17500:	4b09      	ldr	r3, [pc, #36]	; (17528 <db_hash_set+0x40>)
   17502:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17506:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1750a:	2303      	movs	r3, #3
   1750c:	4807      	ldr	r0, [pc, #28]	; (1752c <db_hash_set+0x44>)
   1750e:	f842 3f10 	str.w	r3, [r2, #16]!
   17512:	f012 fa76 	bl	29a02 <z_log_msg_static_create.constprop.0>
   17516:	46ad      	mov	sp, r5
}
   17518:	4620      	mov	r0, r4
   1751a:	46bd      	mov	sp, r7
   1751c:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1751e:	2400      	movs	r4, #0
   17520:	e7fa      	b.n	17518 <db_hash_set+0x30>
   17522:	bf00      	nop
   17524:	20009e60 	.word	0x20009e60
   17528:	000313f9 	.word	0x000313f9
   1752c:	0002ccc0 	.word	0x0002ccc0

00017530 <clear_cf_cfg>:
{
   17530:	4602      	mov	r2, r0
   17532:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17534:	4907      	ldr	r1, [pc, #28]	; (17554 <clear_cf_cfg+0x24>)
   17536:	3001      	adds	r0, #1
   17538:	f012 f9cf 	bl	298da <bt_addr_le_copy>
   1753c:	2300      	movs	r3, #0
   1753e:	320c      	adds	r2, #12
   17540:	f802 3c04 	strb.w	r3, [r2, #-4]
   17544:	e8d2 1fef 	ldaex	r1, [r2]
   17548:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1754c:	2800      	cmp	r0, #0
   1754e:	d1f9      	bne.n	17544 <clear_cf_cfg+0x14>
}
   17550:	bd08      	pop	{r3, pc}
   17552:	bf00      	nop
   17554:	0002fdbe 	.word	0x0002fdbe

00017558 <cf_set>:
{
   17558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1755c:	b08b      	sub	sp, #44	; 0x2c
   1755e:	4689      	mov	r9, r1
   17560:	4616      	mov	r6, r2
   17562:	4698      	mov	r8, r3
	if (!name) {
   17564:	4604      	mov	r4, r0
{
   17566:	af00      	add	r7, sp, #0
	if (!name) {
   17568:	b988      	cbnz	r0, 1758e <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1756a:	4b42      	ldr	r3, [pc, #264]	; (17674 <cf_set+0x11c>)
   1756c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17570:	627b      	str	r3, [r7, #36]	; 0x24
   17572:	2302      	movs	r3, #2
   17574:	4840      	ldr	r0, [pc, #256]	; (17678 <cf_set+0x120>)
   17576:	623b      	str	r3, [r7, #32]
   17578:	f107 0220 	add.w	r2, r7, #32
   1757c:	f012 fa41 	bl	29a02 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17580:	f06f 0515 	mvn.w	r5, #21
}
   17584:	4628      	mov	r0, r5
   17586:	372c      	adds	r7, #44	; 0x2c
   17588:	46bd      	mov	sp, r7
   1758a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1758e:	f107 0108 	add.w	r1, r7, #8
   17592:	f010 ffb4 	bl	284fe <bt_settings_decode_key>
	if (err) {
   17596:	4605      	mov	r5, r0
   17598:	b190      	cbz	r0, 175c0 <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   1759a:	466d      	mov	r5, sp
   1759c:	b088      	sub	sp, #32
   1759e:	466a      	mov	r2, sp
   175a0:	4b36      	ldr	r3, [pc, #216]	; (1767c <cf_set+0x124>)
   175a2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   175a6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   175aa:	f44f 7300 	mov.w	r3, #512	; 0x200
   175ae:	8393      	strh	r3, [r2, #28]
   175b0:	4b33      	ldr	r3, [pc, #204]	; (17680 <cf_set+0x128>)
   175b2:	4831      	ldr	r0, [pc, #196]	; (17678 <cf_set+0x120>)
   175b4:	f842 3f10 	str.w	r3, [r2, #16]!
   175b8:	f012 fa23 	bl	29a02 <z_log_msg_static_create.constprop.0>
   175bc:	46ad      	mov	sp, r5
		return -EINVAL;
   175be:	e7df      	b.n	17580 <cf_set+0x28>
	settings_name_next(name, &next);
   175c0:	4620      	mov	r0, r4
   175c2:	1d39      	adds	r1, r7, #4
   175c4:	f010 f9f5 	bl	279b2 <settings_name_next>
	if (!next) {
   175c8:	6878      	ldr	r0, [r7, #4]
   175ca:	b1a0      	cbz	r0, 175f6 <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   175cc:	220a      	movs	r2, #10
   175ce:	4629      	mov	r1, r5
   175d0:	f00e f87e 	bl	256d0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   175d4:	b178      	cbz	r0, 175f6 <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   175d6:	466c      	mov	r4, sp
   175d8:	b088      	sub	sp, #32
   175da:	466a      	mov	r2, sp
   175dc:	4b29      	ldr	r3, [pc, #164]	; (17684 <cf_set+0x12c>)
   175de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   175e2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   175e6:	2303      	movs	r3, #3
   175e8:	4823      	ldr	r0, [pc, #140]	; (17678 <cf_set+0x120>)
   175ea:	f842 3f10 	str.w	r3, [r2, #16]!
   175ee:	f012 fa08 	bl	29a02 <z_log_msg_static_create.constprop.0>
   175f2:	46a5      	mov	sp, r4
			return -EINVAL;
   175f4:	e7c4      	b.n	17580 <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   175f6:	2000      	movs	r0, #0
   175f8:	f107 0108 	add.w	r1, r7, #8
   175fc:	f7ff fcc8 	bl	16f90 <find_cf_cfg_by_addr>
	if (!cfg) {
   17600:	4604      	mov	r4, r0
   17602:	b9c0      	cbnz	r0, 17636 <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   17604:	f7ff fc60 	bl	16ec8 <find_cf_cfg>
		if (!cfg) {
   17608:	4604      	mov	r4, r0
   1760a:	b968      	cbnz	r0, 17628 <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   1760c:	4b1e      	ldr	r3, [pc, #120]	; (17688 <cf_set+0x130>)
   1760e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17612:	627b      	str	r3, [r7, #36]	; 0x24
   17614:	2302      	movs	r3, #2
   17616:	4818      	ldr	r0, [pc, #96]	; (17678 <cf_set+0x120>)
   17618:	623b      	str	r3, [r7, #32]
   1761a:	f107 0220 	add.w	r2, r7, #32
   1761e:	f012 f9f0 	bl	29a02 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   17622:	f06f 050b 	mvn.w	r5, #11
   17626:	e7ad      	b.n	17584 <cf_set+0x2c>
		cfg->id = id;
   17628:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   1762a:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   1762e:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   17632:	f012 f952 	bl	298da <bt_addr_le_copy>
	if (len_rd) {
   17636:	f1b9 0f00 	cmp.w	r9, #0
   1763a:	d017      	beq.n	1766c <cf_set+0x114>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1763c:	f104 0108 	add.w	r1, r4, #8
   17640:	2201      	movs	r2, #1
   17642:	4640      	mov	r0, r8
   17644:	47b0      	blx	r6
		if (len < 0) {
   17646:	1e04      	subs	r4, r0, #0
   17648:	da9c      	bge.n	17584 <cf_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1764a:	466d      	mov	r5, sp
   1764c:	b088      	sub	sp, #32
   1764e:	466a      	mov	r2, sp
   17650:	4b0e      	ldr	r3, [pc, #56]	; (1768c <cf_set+0x134>)
   17652:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17656:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1765a:	2303      	movs	r3, #3
   1765c:	4806      	ldr	r0, [pc, #24]	; (17678 <cf_set+0x120>)
   1765e:	f842 3f10 	str.w	r3, [r2, #16]!
   17662:	f012 f9ce 	bl	29a02 <z_log_msg_static_create.constprop.0>
   17666:	46ad      	mov	sp, r5
			return len;
   17668:	4625      	mov	r5, r4
   1766a:	e78b      	b.n	17584 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   1766c:	4620      	mov	r0, r4
   1766e:	f7ff ff5f 	bl	17530 <clear_cf_cfg>
   17672:	e787      	b.n	17584 <cf_set+0x2c>
   17674:	0002fe14 	.word	0x0002fe14
   17678:	0002ccc0 	.word	0x0002ccc0
   1767c:	000313a0 	.word	0x000313a0
   17680:	01000003 	.word	0x01000003
   17684:	000313bc 	.word	0x000313bc
   17688:	000314e2 	.word	0x000314e2
   1768c:	000313f9 	.word	0x000313f9

00017690 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   17690:	b508      	push	{r3, lr}
   17692:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17694:	6881      	ldr	r1, [r0, #8]
   17696:	4a07      	ldr	r2, [pc, #28]	; (176b4 <remove_peer_from_attr+0x24>)
   17698:	4291      	cmp	r1, r2
   1769a:	d109      	bne.n	176b0 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1769c:	791a      	ldrb	r2, [r3, #4]
   1769e:	6819      	ldr	r1, [r3, #0]
   176a0:	68c0      	ldr	r0, [r0, #12]
   176a2:	f012 f8f4 	bl	2988e <ccc_find_cfg>
	if (cfg) {
   176a6:	b118      	cbz	r0, 176b0 <remove_peer_from_attr+0x20>
   176a8:	2300      	movs	r3, #0
   176aa:	6003      	str	r3, [r0, #0]
   176ac:	6043      	str	r3, [r0, #4]
   176ae:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   176b0:	2001      	movs	r0, #1
   176b2:	bd08      	pop	{r3, pc}
   176b4:	00017791 	.word	0x00017791

000176b8 <ccc_save>:
{
   176b8:	b538      	push	{r3, r4, r5, lr}
   176ba:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   176bc:	4b0b      	ldr	r3, [pc, #44]	; (176ec <ccc_save+0x34>)
   176be:	6882      	ldr	r2, [r0, #8]
{
   176c0:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   176c2:	429a      	cmp	r2, r3
   176c4:	d10f      	bne.n	176e6 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   176c6:	7922      	ldrb	r2, [r4, #4]
   176c8:	6821      	ldr	r1, [r4, #0]
   176ca:	68c0      	ldr	r0, [r0, #12]
   176cc:	f012 f8df 	bl	2988e <ccc_find_cfg>
	if (!cfg) {
   176d0:	b148      	cbz	r0, 176e6 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   176d2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   176d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   176da:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   176dc:	8901      	ldrh	r1, [r0, #8]
	save->count++;
   176de:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
   176e0:	8151      	strh	r1, [r2, #10]
	save->count++;
   176e2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   176e6:	2001      	movs	r0, #1
   176e8:	bd38      	pop	{r3, r4, r5, pc}
   176ea:	bf00      	nop
   176ec:	00017791 	.word	0x00017791

000176f0 <disconnected_cb>:
{
   176f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   176f4:	4b23      	ldr	r3, [pc, #140]	; (17784 <disconnected_cb+0x94>)
{
   176f6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   176f8:	6882      	ldr	r2, [r0, #8]
{
   176fa:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   176fc:	429a      	cmp	r2, r3
   176fe:	d102      	bne.n	17706 <disconnected_cb+0x16>
	ccc = attr->user_data;
   17700:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   17702:	8963      	ldrh	r3, [r4, #10]
   17704:	bb33      	cbnz	r3, 17754 <disconnected_cb+0x64>
}
   17706:	2001      	movs	r0, #1
   17708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1770c:	f7fd fbfc 	bl	14f08 <bt_conn_unref>
		ccc->value = 0U;
   17710:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   17712:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17714:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17716:	2b00      	cmp	r3, #0
   17718:	d0f5      	beq.n	17706 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1771a:	4638      	mov	r0, r7
   1771c:	4798      	blx	r3
   1771e:	e7f2      	b.n	17706 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17720:	f105 0890 	add.w	r8, r5, #144	; 0x90
   17724:	4641      	mov	r1, r8
   17726:	7a28      	ldrb	r0, [r5, #8]
   17728:	f011 f869 	bl	287fe <bt_addr_le_is_bonded>
   1772c:	b968      	cbnz	r0, 1774a <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1772e:	4b16      	ldr	r3, [pc, #88]	; (17788 <disconnected_cb+0x98>)
   17730:	429c      	cmp	r4, r3
   17732:	d102      	bne.n	1773a <disconnected_cb+0x4a>
					sc_clear(conn);
   17734:	4628      	mov	r0, r5
   17736:	f7ff fdbd 	bl	172b4 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1773a:	4630      	mov	r0, r6
   1773c:	4913      	ldr	r1, [pc, #76]	; (1778c <disconnected_cb+0x9c>)
   1773e:	f012 f8cc 	bl	298da <bt_addr_le_copy>
	cfg->id = 0U;
   17742:	2300      	movs	r3, #0
   17744:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   17746:	8123      	strh	r3, [r4, #8]
}
   17748:	e7e2      	b.n	17710 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1774a:	4641      	mov	r1, r8
   1774c:	4630      	mov	r0, r6
   1774e:	f012 f8c4 	bl	298da <bt_addr_le_copy>
   17752:	e7dd      	b.n	17710 <disconnected_cb+0x20>
		if (!cfg->value) {
   17754:	8923      	ldrh	r3, [r4, #8]
   17756:	2b00      	cmp	r3, #0
   17758:	d0da      	beq.n	17710 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1775a:	4626      	mov	r6, r4
   1775c:	f816 1b01 	ldrb.w	r1, [r6], #1
   17760:	4628      	mov	r0, r5
   17762:	4632      	mov	r2, r6
   17764:	f011 faeb 	bl	28d3e <bt_conn_is_peer_addr_le>
   17768:	2800      	cmp	r0, #0
   1776a:	d1d9      	bne.n	17720 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1776c:	4631      	mov	r1, r6
   1776e:	7820      	ldrb	r0, [r4, #0]
   17770:	f7fd fea6 	bl	154c0 <bt_conn_lookup_addr_le>
			if (tmp) {
   17774:	2800      	cmp	r0, #0
   17776:	d0cb      	beq.n	17710 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   17778:	7b43      	ldrb	r3, [r0, #13]
   1777a:	2b07      	cmp	r3, #7
   1777c:	d1c6      	bne.n	1770c <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1777e:	f7fd fbc3 	bl	14f08 <bt_conn_unref>
	if (!value_used) {
   17782:	e7c0      	b.n	17706 <disconnected_cb+0x16>
   17784:	00017791 	.word	0x00017791
   17788:	20008524 	.word	0x20008524
   1778c:	0002fdbe 	.word	0x0002fdbe

00017790 <bt_gatt_attr_write_ccc>:
{
   17790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17794:	b086      	sub	sp, #24
   17796:	461f      	mov	r7, r3
   17798:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1779c:	4605      	mov	r5, r0
   1779e:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   177a0:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   177a4:	2b00      	cmp	r3, #0
   177a6:	d16d      	bne.n	17884 <bt_gatt_attr_write_ccc+0xf4>
	if (!len || len > sizeof(uint16_t)) {
   177a8:	1e7b      	subs	r3, r7, #1
   177aa:	2b01      	cmp	r3, #1
   177ac:	d86d      	bhi.n	1788a <bt_gatt_attr_write_ccc+0xfa>
	if (len < sizeof(uint16_t)) {
   177ae:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   177b0:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   177b2:	7816      	ldrb	r6, [r2, #0]
   177b4:	bf18      	it	ne
   177b6:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   177b8:	f7ff fbd6 	bl	16f68 <find_ccc_cfg>
	if (!cfg) {
   177bc:	4604      	mov	r4, r0
   177be:	b9e8      	cbnz	r0, 177fc <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   177c0:	b91e      	cbnz	r6, 177ca <bt_gatt_attr_write_ccc+0x3a>
			return len;
   177c2:	4638      	mov	r0, r7
}
   177c4:	b006      	add	sp, #24
   177c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   177ca:	4649      	mov	r1, r9
   177cc:	f7ff fbcc 	bl	16f68 <find_ccc_cfg>
		if (!cfg) {
   177d0:	4604      	mov	r4, r0
   177d2:	b960      	cbnz	r0, 177ee <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   177d4:	4b2e      	ldr	r3, [pc, #184]	; (17890 <bt_gatt_attr_write_ccc+0x100>)
   177d6:	482f      	ldr	r0, [pc, #188]	; (17894 <bt_gatt_attr_write_ccc+0x104>)
   177d8:	9305      	str	r3, [sp, #20]
   177da:	2302      	movs	r3, #2
   177dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   177e0:	aa04      	add	r2, sp, #16
   177e2:	9304      	str	r3, [sp, #16]
   177e4:	f012 f90d 	bl	29a02 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   177e8:	f06f 0010 	mvn.w	r0, #16
   177ec:	e7ea      	b.n	177c4 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   177ee:	f105 0190 	add.w	r1, r5, #144	; 0x90
   177f2:	3001      	adds	r0, #1
   177f4:	f012 f871 	bl	298da <bt_addr_le_copy>
		cfg->id = conn->id;
   177f8:	7a2b      	ldrb	r3, [r5, #8]
   177fa:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   177fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   17800:	bba3      	cbnz	r3, 1786c <bt_gatt_attr_write_ccc+0xdc>
	value_changed = cfg->value != value;
   17802:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   17806:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   17808:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   1780c:	42b3      	cmp	r3, r6
   1780e:	d003      	beq.n	17818 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   17810:	4649      	mov	r1, r9
   17812:	4640      	mov	r0, r8
   17814:	f011 ffbd 	bl	29792 <gatt_ccc_changed>
	if (value_changed) {
   17818:	45b2      	cmp	sl, r6
   1781a:	d01e      	beq.n	1785a <bt_gatt_attr_write_ccc+0xca>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1781c:	4628      	mov	r0, r5
   1781e:	f7fd fc9f 	bl	15160 <bt_conn_index>
   17822:	f8df 8074 	ldr.w	r8, [pc, #116]	; 17898 <bt_gatt_attr_write_ccc+0x108>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17826:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   1782a:	429d      	cmp	r5, r3
   1782c:	d015      	beq.n	1785a <bt_gatt_attr_write_ccc+0xca>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1782e:	7a28      	ldrb	r0, [r5, #8]
   17830:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17834:	f010 ffe3 	bl	287fe <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17838:	b178      	cbz	r0, 1785a <bt_gatt_attr_write_ccc+0xca>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1783a:	4628      	mov	r0, r5
   1783c:	f7fd fc90 	bl	15160 <bt_conn_index>
   17840:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   17842:	4628      	mov	r0, r5
   17844:	f7fd fb38 	bl	14eb8 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   17848:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1784c:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   17850:	2300      	movs	r3, #0
   17852:	f108 0008 	add.w	r0, r8, #8
   17856:	f00a ffbb 	bl	227d0 <k_work_reschedule>
	if (!value) {
   1785a:	2e00      	cmp	r6, #0
   1785c:	d1b1      	bne.n	177c2 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1785e:	490f      	ldr	r1, [pc, #60]	; (1789c <bt_gatt_attr_write_ccc+0x10c>)
   17860:	1c60      	adds	r0, r4, #1
   17862:	f012 f83a 	bl	298da <bt_addr_le_copy>
	cfg->id = 0U;
   17866:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   17868:	8126      	strh	r6, [r4, #8]
}
   1786a:	e7aa      	b.n	177c2 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1786c:	4632      	mov	r2, r6
   1786e:	4641      	mov	r1, r8
   17870:	4628      	mov	r0, r5
   17872:	4798      	blx	r3
		if (write < 0) {
   17874:	2800      	cmp	r0, #0
   17876:	dba5      	blt.n	177c4 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   17878:	3801      	subs	r0, #1
   1787a:	2801      	cmp	r0, #1
   1787c:	d9c1      	bls.n	17802 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1787e:	f06f 000d 	mvn.w	r0, #13
   17882:	e79f      	b.n	177c4 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17884:	f06f 0006 	mvn.w	r0, #6
   17888:	e79c      	b.n	177c4 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1788a:	f06f 000c 	mvn.w	r0, #12
   1788e:	e799      	b.n	177c4 <bt_gatt_attr_write_ccc+0x34>
   17890:	00031504 	.word	0x00031504
   17894:	0002ccc0 	.word	0x0002ccc0
   17898:	20009e18 	.word	0x20009e18
   1789c:	0002fdbe 	.word	0x0002fdbe

000178a0 <sc_commit>:
{
   178a0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178a2:	f06f 0102 	mvn.w	r1, #2
   178a6:	4808      	ldr	r0, [pc, #32]	; (178c8 <sc_commit+0x28>)
   178a8:	f012 f80c 	bl	298c4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   178ac:	4806      	ldr	r0, [pc, #24]	; (178c8 <sc_commit+0x28>)
   178ae:	f011 fffb 	bl	298a8 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   178b2:	07c3      	lsls	r3, r0, #31
   178b4:	d505      	bpl.n	178c2 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   178b6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178ba:	2300      	movs	r3, #0
   178bc:	4803      	ldr	r0, [pc, #12]	; (178cc <sc_commit+0x2c>)
   178be:	f00a ff87 	bl	227d0 <k_work_reschedule>
}
   178c2:	2000      	movs	r0, #0
   178c4:	bd08      	pop	{r3, pc}
   178c6:	bf00      	nop
   178c8:	20009f18 	.word	0x20009f18
   178cc:	20009ee8 	.word	0x20009ee8

000178d0 <sc_indicate_rsp>:
{
   178d0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178d2:	f06f 0102 	mvn.w	r1, #2
   178d6:	4604      	mov	r4, r0
   178d8:	480f      	ldr	r0, [pc, #60]	; (17918 <sc_indicate_rsp+0x48>)
   178da:	f011 fff3 	bl	298c4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   178de:	480e      	ldr	r0, [pc, #56]	; (17918 <sc_indicate_rsp+0x48>)
   178e0:	f011 ffe2 	bl	298a8 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   178e4:	07c2      	lsls	r2, r0, #31
   178e6:	d504      	bpl.n	178f2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   178e8:	2200      	movs	r2, #0
   178ea:	2300      	movs	r3, #0
   178ec:	480b      	ldr	r0, [pc, #44]	; (1791c <sc_indicate_rsp+0x4c>)
   178ee:	f00a ff6f 	bl	227d0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   178f2:	4620      	mov	r0, r4
   178f4:	f011 ff20 	bl	29738 <bt_att_fixed_chan_only>
   178f8:	b160      	cbz	r0, 17914 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   178fa:	4620      	mov	r0, r4
   178fc:	f7ff fae4 	bl	16ec8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   17900:	b140      	cbz	r0, 17914 <sc_indicate_rsp+0x44>
   17902:	7a03      	ldrb	r3, [r0, #8]
   17904:	07db      	lsls	r3, r3, #31
   17906:	d505      	bpl.n	17914 <sc_indicate_rsp+0x44>
}
   17908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1790c:	2101      	movs	r1, #1
   1790e:	300c      	adds	r0, #12
   17910:	f011 bfcd 	b.w	298ae <atomic_or>
   17914:	bd10      	pop	{r4, pc}
   17916:	bf00      	nop
   17918:	20009f18 	.word	0x20009f18
   1791c:	20009ee8 	.word	0x20009ee8

00017920 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17920:	2201      	movs	r2, #1
{
   17922:	b510      	push	{r4, lr}
   17924:	4b28      	ldr	r3, [pc, #160]	; (179c8 <bt_gatt_init+0xa8>)
   17926:	e8d3 1fef 	ldaex	r1, [r3]
   1792a:	2900      	cmp	r1, #0
   1792c:	d103      	bne.n	17936 <bt_gatt_init+0x16>
   1792e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17932:	2800      	cmp	r0, #0
   17934:	d1f7      	bne.n	17926 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   17936:	d146      	bne.n	179c6 <bt_gatt_init+0xa6>
   17938:	4b24      	ldr	r3, [pc, #144]	; (179cc <bt_gatt_init+0xac>)
   1793a:	e8d3 1fef 	ldaex	r1, [r3]
   1793e:	2900      	cmp	r1, #0
   17940:	d103      	bne.n	1794a <bt_gatt_init+0x2a>
   17942:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17946:	2800      	cmp	r0, #0
   17948:	d1f7      	bne.n	1793a <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1794a:	d120      	bne.n	1798e <bt_gatt_init+0x6e>
   1794c:	2000      	movs	r0, #0
   1794e:	4920      	ldr	r1, [pc, #128]	; (179d0 <bt_gatt_init+0xb0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17950:	4a20      	ldr	r2, [pc, #128]	; (179d4 <bt_gatt_init+0xb4>)
   17952:	880b      	ldrh	r3, [r1, #0]
   17954:	4c20      	ldr	r4, [pc, #128]	; (179d8 <bt_gatt_init+0xb8>)
   17956:	42a2      	cmp	r2, r4
   17958:	d916      	bls.n	17988 <bt_gatt_init+0x68>
   1795a:	b100      	cbz	r0, 1795e <bt_gatt_init+0x3e>
   1795c:	800b      	strh	r3, [r1, #0]
   1795e:	491f      	ldr	r1, [pc, #124]	; (179dc <bt_gatt_init+0xbc>)
   17960:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   17964:	4a1e      	ldr	r2, [pc, #120]	; (179e0 <bt_gatt_init+0xc0>)
   17966:	481f      	ldr	r0, [pc, #124]	; (179e4 <bt_gatt_init+0xc4>)
   17968:	f00f fa03 	bl	26d72 <assert_print>
   1796c:	481e      	ldr	r0, [pc, #120]	; (179e8 <bt_gatt_init+0xc8>)
   1796e:	f00f fa00 	bl	26d72 <assert_print>
   17972:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   17976:	481a      	ldr	r0, [pc, #104]	; (179e0 <bt_gatt_init+0xc0>)
   17978:	f00f f9f4 	bl	26d64 <assert_post_action>
		last_static_handle += svc->attr_count;
   1797c:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1797e:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   17980:	4403      	add	r3, r0
   17982:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17984:	2001      	movs	r0, #1
   17986:	e7e6      	b.n	17956 <bt_gatt_init+0x36>
   17988:	d3f8      	bcc.n	1797c <bt_gatt_init+0x5c>
   1798a:	b100      	cbz	r0, 1798e <bt_gatt_init+0x6e>
   1798c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1798e:	2200      	movs	r2, #0
   17990:	4b16      	ldr	r3, [pc, #88]	; (179ec <bt_gatt_init+0xcc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   17992:	4917      	ldr	r1, [pc, #92]	; (179f0 <bt_gatt_init+0xd0>)
   17994:	4817      	ldr	r0, [pc, #92]	; (179f4 <bt_gatt_init+0xd4>)
	list->tail = NULL;
   17996:	e9c3 2200 	strd	r2, r2, [r3]
   1799a:	f00a fdfd 	bl	22598 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1799e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   179a2:	2300      	movs	r3, #0
   179a4:	4813      	ldr	r0, [pc, #76]	; (179f4 <bt_gatt_init+0xd4>)
   179a6:	f7fa fa6d 	bl	11e84 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   179aa:	4913      	ldr	r1, [pc, #76]	; (179f8 <bt_gatt_init+0xd8>)
   179ac:	4813      	ldr	r0, [pc, #76]	; (179fc <bt_gatt_init+0xdc>)
   179ae:	f00a fdf3 	bl	22598 <k_work_init_delayable>
   179b2:	2102      	movs	r1, #2
   179b4:	4812      	ldr	r0, [pc, #72]	; (17a00 <bt_gatt_init+0xe0>)
   179b6:	f011 ff7a 	bl	298ae <atomic_or>
}
   179ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   179be:	4911      	ldr	r1, [pc, #68]	; (17a04 <bt_gatt_init+0xe4>)
   179c0:	4811      	ldr	r0, [pc, #68]	; (17a08 <bt_gatt_init+0xe8>)
   179c2:	f00a bde9 	b.w	22598 <k_work_init_delayable>
}
   179c6:	bd10      	pop	{r4, pc}
   179c8:	200216c4 	.word	0x200216c4
   179cc:	200216c0 	.word	0x200216c0
   179d0:	20021ac4 	.word	0x20021ac4
   179d4:	0002cc50 	.word	0x0002cc50
   179d8:	0002cc68 	.word	0x0002cc68
   179dc:	00031555 	.word	0x00031555
   179e0:	0003151e 	.word	0x0003151e
   179e4:	0002dd81 	.word	0x0002dd81
   179e8:	0002eee2 	.word	0x0002eee2
   179ec:	200216c8 	.word	0x200216c8
   179f0:	00017c79 	.word	0x00017c79
   179f4:	20009e70 	.word	0x20009e70
   179f8:	0001825d 	.word	0x0001825d
   179fc:	20009ee8 	.word	0x20009ee8
   17a00:	20009f18 	.word	0x20009f18
   17a04:	00029bd7 	.word	0x00029bd7
   17a08:	20009e20 	.word	0x20009e20

00017a0c <bt_gatt_attr_get_handle>:
	if (!attr) {
   17a0c:	4603      	mov	r3, r0
{
   17a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17a12:	b398      	cbz	r0, 17a7c <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   17a14:	8a00      	ldrh	r0, [r0, #16]
   17a16:	bb88      	cbnz	r0, 17a7c <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   17a18:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17a1a:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a1e:	4919      	ldr	r1, [pc, #100]	; (17a84 <bt_gatt_attr_get_handle+0x78>)
   17a20:	f8df e064 	ldr.w	lr, [pc, #100]	; 17a88 <bt_gatt_attr_get_handle+0x7c>
   17a24:	4571      	cmp	r1, lr
   17a26:	d928      	bls.n	17a7a <bt_gatt_attr_get_handle+0x6e>
   17a28:	4918      	ldr	r1, [pc, #96]	; (17a8c <bt_gatt_attr_get_handle+0x80>)
   17a2a:	f240 635d 	movw	r3, #1629	; 0x65d
   17a2e:	4a18      	ldr	r2, [pc, #96]	; (17a90 <bt_gatt_attr_get_handle+0x84>)
   17a30:	4818      	ldr	r0, [pc, #96]	; (17a94 <bt_gatt_attr_get_handle+0x88>)
   17a32:	f00f f99e 	bl	26d72 <assert_print>
   17a36:	4818      	ldr	r0, [pc, #96]	; (17a98 <bt_gatt_attr_get_handle+0x8c>)
   17a38:	f00f f99b 	bl	26d72 <assert_print>
   17a3c:	f240 615d 	movw	r1, #1629	; 0x65d
   17a40:	4813      	ldr	r0, [pc, #76]	; (17a90 <bt_gatt_attr_get_handle+0x84>)
   17a42:	f00f f98f 	bl	26d64 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17a46:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   17a4a:	42bb      	cmp	r3, r7
   17a4c:	d304      	bcc.n	17a58 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17a4e:	fb0c 7206 	mla	r2, ip, r6, r7
   17a52:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17a54:	4293      	cmp	r3, r2
   17a56:	d90e      	bls.n	17a76 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   17a58:	4434      	add	r4, r6
   17a5a:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a5c:	4614      	mov	r4, r2
   17a5e:	3108      	adds	r1, #8
   17a60:	e7e0      	b.n	17a24 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   17a62:	fb0c 7805 	mla	r8, ip, r5, r7
   17a66:	4543      	cmp	r3, r8
   17a68:	d00a      	beq.n	17a80 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   17a6a:	3501      	adds	r5, #1
   17a6c:	1962      	adds	r2, r4, r5
   17a6e:	42b5      	cmp	r5, r6
   17a70:	b292      	uxth	r2, r2
   17a72:	d1f6      	bne.n	17a62 <bt_gatt_attr_get_handle+0x56>
   17a74:	e7f2      	b.n	17a5c <bt_gatt_attr_get_handle+0x50>
   17a76:	2500      	movs	r5, #0
   17a78:	e7f8      	b.n	17a6c <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a7a:	d3e4      	bcc.n	17a46 <bt_gatt_attr_get_handle+0x3a>
}
   17a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a80:	4610      	mov	r0, r2
   17a82:	e7fb      	b.n	17a7c <bt_gatt_attr_get_handle+0x70>
   17a84:	0002cc50 	.word	0x0002cc50
   17a88:	0002cc68 	.word	0x0002cc68
   17a8c:	0003154e 	.word	0x0003154e
   17a90:	0003151e 	.word	0x0003151e
   17a94:	0002dd81 	.word	0x0002dd81
   17a98:	0002eee2 	.word	0x0002eee2

00017a9c <bt_gatt_foreach_attr_type>:
{
   17a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aa0:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   17aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   17aa6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   17aaa:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   17aac:	2d00      	cmp	r5, #0
   17aae:	bf08      	it	eq
   17ab0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   17ab2:	4b2b      	ldr	r3, [pc, #172]	; (17b60 <bt_gatt_foreach_attr_type+0xc4>)
{
   17ab4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   17ab6:	881b      	ldrh	r3, [r3, #0]
{
   17ab8:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   17aba:	4283      	cmp	r3, r0
   17abc:	d232      	bcs.n	17b24 <bt_gatt_foreach_attr_type+0x88>
}
   17abe:	b003      	add	sp, #12
   17ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17ac4:	4640      	mov	r0, r8
   17ac6:	5889      	ldr	r1, [r1, r2]
   17ac8:	9301      	str	r3, [sp, #4]
   17aca:	f010 fd3c 	bl	28546 <bt_uuid_cmp>
   17ace:	9b01      	ldr	r3, [sp, #4]
   17ad0:	b190      	cbz	r0, 17af8 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17ad2:	3401      	adds	r4, #1
   17ad4:	f10a 0a01 	add.w	sl, sl, #1
   17ad8:	b2a4      	uxth	r4, r4
   17ada:	6873      	ldr	r3, [r6, #4]
   17adc:	4553      	cmp	r3, sl
   17ade:	d92c      	bls.n	17b3a <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   17ae0:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17ae2:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   17ae4:	429c      	cmp	r4, r3
   17ae6:	d8ea      	bhi.n	17abe <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17ae8:	42bc      	cmp	r4, r7
   17aea:	d3f2      	bcc.n	17ad2 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17aec:	fb0b f20a 	mul.w	r2, fp, sl
   17af0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17af2:	f1b8 0f00 	cmp.w	r8, #0
   17af6:	d1e5      	bne.n	17ac4 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   17af8:	f1b9 0f00 	cmp.w	r9, #0
   17afc:	d10b      	bne.n	17b16 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   17afe:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   17b00:	4618      	mov	r0, r3
	*num_matches -= 1;
   17b02:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17b04:	4621      	mov	r1, r4
   17b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17b0a:	4798      	blx	r3
	if (!*num_matches) {
   17b0c:	2d00      	cmp	r5, #0
   17b0e:	d0d6      	beq.n	17abe <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17b10:	2800      	cmp	r0, #0
   17b12:	d1de      	bne.n	17ad2 <bt_gatt_foreach_attr_type+0x36>
   17b14:	e7d3      	b.n	17abe <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17b16:	68da      	ldr	r2, [r3, #12]
   17b18:	4591      	cmp	r9, r2
   17b1a:	d1da      	bne.n	17ad2 <bt_gatt_foreach_attr_type+0x36>
   17b1c:	e7ef      	b.n	17afe <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17b1e:	f04f 0a00 	mov.w	sl, #0
   17b22:	e7da      	b.n	17ada <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   17b24:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17b26:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17b2a:	4e0e      	ldr	r6, [pc, #56]	; (17b64 <bt_gatt_foreach_attr_type+0xc8>)
   17b2c:	e006      	b.n	17b3c <bt_gatt_foreach_attr_type+0xa0>
   17b2e:	d2c6      	bcs.n	17abe <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   17b30:	6873      	ldr	r3, [r6, #4]
   17b32:	4423      	add	r3, r4
   17b34:	42bb      	cmp	r3, r7
   17b36:	d2f2      	bcs.n	17b1e <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   17b38:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17b3a:	3608      	adds	r6, #8
   17b3c:	4b0a      	ldr	r3, [pc, #40]	; (17b68 <bt_gatt_foreach_attr_type+0xcc>)
   17b3e:	429e      	cmp	r6, r3
   17b40:	d9f5      	bls.n	17b2e <bt_gatt_foreach_attr_type+0x92>
   17b42:	490a      	ldr	r1, [pc, #40]	; (17b6c <bt_gatt_foreach_attr_type+0xd0>)
   17b44:	f240 7321 	movw	r3, #1825	; 0x721
   17b48:	4a09      	ldr	r2, [pc, #36]	; (17b70 <bt_gatt_foreach_attr_type+0xd4>)
   17b4a:	480a      	ldr	r0, [pc, #40]	; (17b74 <bt_gatt_foreach_attr_type+0xd8>)
   17b4c:	f00f f911 	bl	26d72 <assert_print>
   17b50:	4809      	ldr	r0, [pc, #36]	; (17b78 <bt_gatt_foreach_attr_type+0xdc>)
   17b52:	f00f f90e 	bl	26d72 <assert_print>
   17b56:	f240 7121 	movw	r1, #1825	; 0x721
   17b5a:	4805      	ldr	r0, [pc, #20]	; (17b70 <bt_gatt_foreach_attr_type+0xd4>)
   17b5c:	f00f f902 	bl	26d64 <assert_post_action>
   17b60:	20021ac4 	.word	0x20021ac4
   17b64:	0002cc50 	.word	0x0002cc50
   17b68:	0002cc68 	.word	0x0002cc68
   17b6c:	0003154e 	.word	0x0003154e
   17b70:	0003151e 	.word	0x0003151e
   17b74:	0002dd81 	.word	0x0002dd81
   17b78:	0002eee2 	.word	0x0002eee2

00017b7c <db_hash_gen>:
{
   17b7c:	b530      	push	{r4, r5, lr}
	uint8_t key[16] = {};
   17b7e:	2400      	movs	r4, #0
{
   17b80:	b0cf      	sub	sp, #316	; 0x13c
   17b82:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17b84:	4669      	mov	r1, sp
   17b86:	aa22      	add	r2, sp, #136	; 0x88
   17b88:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   17b8a:	e9cd 4400 	strd	r4, r4, [sp]
   17b8e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17b92:	f010 f93d 	bl	27e10 <tc_cmac_setup>
   17b96:	b958      	cbnz	r0, 17bb0 <db_hash_gen+0x34>
		LOG_ERR("Unable to setup AES CMAC");
   17b98:	4b16      	ldr	r3, [pc, #88]	; (17bf4 <db_hash_gen+0x78>)
		LOG_ERR("Unable to calculate hash");
   17b9a:	9309      	str	r3, [sp, #36]	; 0x24
   17b9c:	2302      	movs	r3, #2
   17b9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17ba2:	4815      	ldr	r0, [pc, #84]	; (17bf8 <db_hash_gen+0x7c>)
   17ba4:	aa08      	add	r2, sp, #32
   17ba6:	9308      	str	r3, [sp, #32]
   17ba8:	f011 ff2b 	bl	29a02 <z_log_msg_static_create.constprop.0>
}
   17bac:	b04f      	add	sp, #316	; 0x13c
   17bae:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17bb4:	2001      	movs	r0, #1
   17bb6:	4a11      	ldr	r2, [pc, #68]	; (17bfc <db_hash_gen+0x80>)
   17bb8:	ab0a      	add	r3, sp, #40	; 0x28
   17bba:	f011 ff99 	bl	29af0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17bbe:	4810      	ldr	r0, [pc, #64]	; (17c00 <db_hash_gen+0x84>)
   17bc0:	a90a      	add	r1, sp, #40	; 0x28
   17bc2:	f010 f9ba 	bl	27f3a <tc_cmac_final>
   17bc6:	b908      	cbnz	r0, 17bcc <db_hash_gen+0x50>
		LOG_ERR("Unable to calculate hash");
   17bc8:	4b0e      	ldr	r3, [pc, #56]	; (17c04 <db_hash_gen+0x88>)
   17bca:	e7e6      	b.n	17b9a <db_hash_gen+0x1e>
   17bcc:	4b0c      	ldr	r3, [pc, #48]	; (17c00 <db_hash_gen+0x84>)
   17bce:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17bd2:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17bd4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   17bd8:	3401      	adds	r4, #1
   17bda:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17bdc:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17be0:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   17be2:	d1f6      	bne.n	17bd2 <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   17be4:	b10d      	cbz	r5, 17bea <db_hash_gen+0x6e>
		db_hash_store();
   17be6:	f7ff fc5d 	bl	174a4 <db_hash_store>
   17bea:	2104      	movs	r1, #4
   17bec:	4806      	ldr	r0, [pc, #24]	; (17c08 <db_hash_gen+0x8c>)
   17bee:	f011 fe5e 	bl	298ae <atomic_or>
   17bf2:	e7db      	b.n	17bac <db_hash_gen+0x30>
   17bf4:	0003157d 	.word	0x0003157d
   17bf8:	0002ccc0 	.word	0x0002ccc0
   17bfc:	000297d9 	.word	0x000297d9
   17c00:	20009e50 	.word	0x20009e50
   17c04:	00031596 	.word	0x00031596
   17c08:	20009f18 	.word	0x20009f18

00017c0c <db_hash_read>:
{
   17c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17c10:	4916      	ldr	r1, [pc, #88]	; (17c6c <db_hash_read+0x60>)
{
   17c12:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17c14:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17c18:	4615      	mov	r5, r2
   17c1a:	461e      	mov	r6, r3
   17c1c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17c20:	f00a fe36 	bl	22890 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17c24:	4812      	ldr	r0, [pc, #72]	; (17c70 <db_hash_read+0x64>)
   17c26:	f011 fe3f 	bl	298a8 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17c2a:	0741      	lsls	r1, r0, #29
   17c2c:	d402      	bmi.n	17c34 <db_hash_read+0x28>
		db_hash_gen(true);
   17c2e:	2001      	movs	r0, #1
   17c30:	f7ff ffa4 	bl	17b7c <db_hash_gen>
	cfg = find_cf_cfg(conn);
   17c34:	4620      	mov	r0, r4
   17c36:	f7ff f947 	bl	16ec8 <find_cf_cfg>
	if (cfg &&
   17c3a:	b168      	cbz	r0, 17c58 <db_hash_read+0x4c>
   17c3c:	7a03      	ldrb	r3, [r0, #8]
   17c3e:	07da      	lsls	r2, r3, #31
   17c40:	d50a      	bpl.n	17c58 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   17c42:	f100 040c 	add.w	r4, r0, #12
   17c46:	4620      	mov	r0, r4
   17c48:	f011 fe2e 	bl	298a8 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   17c4c:	07c3      	lsls	r3, r0, #31
   17c4e:	d403      	bmi.n	17c58 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17c50:	2102      	movs	r1, #2
   17c52:	4620      	mov	r0, r4
   17c54:	f011 fe2b 	bl	298ae <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17c58:	2310      	movs	r3, #16
   17c5a:	463a      	mov	r2, r7
   17c5c:	9306      	str	r3, [sp, #24]
   17c5e:	4631      	mov	r1, r6
   17c60:	4628      	mov	r0, r5
}
   17c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17c66:	4b03      	ldr	r3, [pc, #12]	; (17c74 <db_hash_read+0x68>)
   17c68:	f011 be43 	b.w	298f2 <bt_gatt_attr_read.constprop.0>
   17c6c:	20009ea0 	.word	0x20009ea0
   17c70:	20009f18 	.word	0x20009f18
   17c74:	20009e50 	.word	0x20009e50

00017c78 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17c78:	f06f 0108 	mvn.w	r1, #8
{
   17c7c:	b508      	push	{r3, lr}
   17c7e:	4826      	ldr	r0, [pc, #152]	; (17d18 <db_hash_process+0xa0>)
   17c80:	f011 fe20 	bl	298c4 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   17c84:	0701      	lsls	r1, r0, #28
   17c86:	d542      	bpl.n	17d0e <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17c88:	4823      	ldr	r0, [pc, #140]	; (17d18 <db_hash_process+0xa0>)
   17c8a:	f011 fe0d 	bl	298a8 <atomic_get>
   17c8e:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17c90:	075a      	lsls	r2, r3, #29
   17c92:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17c96:	d401      	bmi.n	17c9c <db_hash_process+0x24>
			db_hash_gen(false);
   17c98:	f7ff ff70 	bl	17b7c <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   17c9c:	2210      	movs	r2, #16
   17c9e:	491f      	ldr	r1, [pc, #124]	; (17d1c <db_hash_process+0xa4>)
   17ca0:	1888      	adds	r0, r1, r2
   17ca2:	f014 f87b 	bl	2bd9c <memcmp>
   17ca6:	b948      	cbnz	r0, 17cbc <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   17ca8:	481d      	ldr	r0, [pc, #116]	; (17d20 <db_hash_process+0xa8>)
   17caa:	f00a fd97 	bl	227dc <k_work_cancel_delayable>
}
   17cae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17cb2:	f06f 0101 	mvn.w	r1, #1
   17cb6:	4818      	ldr	r0, [pc, #96]	; (17d18 <db_hash_process+0xa0>)
   17cb8:	f011 be04 	b.w	298c4 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17cbc:	2101      	movs	r1, #1
   17cbe:	4816      	ldr	r0, [pc, #88]	; (17d18 <db_hash_process+0xa0>)
   17cc0:	f011 fdf5 	bl	298ae <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17cc4:	f010 0f01 	tst.w	r0, #1
   17cc8:	4b16      	ldr	r3, [pc, #88]	; (17d24 <db_hash_process+0xac>)
   17cca:	d110      	bne.n	17cee <db_hash_process+0x76>
		gatt_sc.start = start;
   17ccc:	4a16      	ldr	r2, [pc, #88]	; (17d28 <db_hash_process+0xb0>)
   17cce:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17cd0:	4811      	ldr	r0, [pc, #68]	; (17d18 <db_hash_process+0xa0>)
   17cd2:	f011 fde9 	bl	298a8 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   17cd6:	0783      	lsls	r3, r0, #30
   17cd8:	d405      	bmi.n	17ce6 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   17cda:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17cde:	2300      	movs	r3, #0
   17ce0:	480f      	ldr	r0, [pc, #60]	; (17d20 <db_hash_process+0xa8>)
   17ce2:	f00a fd75 	bl	227d0 <k_work_reschedule>
}
   17ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   17cea:	f7ff bbdb 	b.w	174a4 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   17cee:	8b1a      	ldrh	r2, [r3, #24]
   17cf0:	8b58      	ldrh	r0, [r3, #26]
   17cf2:	2a01      	cmp	r2, #1
   17cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17cf8:	d805      	bhi.n	17d06 <db_hash_process+0x8e>
   17cfa:	4290      	cmp	r0, r2
   17cfc:	d0f3      	beq.n	17ce6 <db_hash_process+0x6e>
		*end = new_end;
   17cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17d02:	835a      	strh	r2, [r3, #26]
   17d04:	e7e4      	b.n	17cd0 <db_hash_process+0x58>
	if (*end < new_end) {
   17d06:	4290      	cmp	r0, r2
		*start = new_start;
   17d08:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   17d0a:	d0e1      	beq.n	17cd0 <db_hash_process+0x58>
   17d0c:	e7f7      	b.n	17cfe <db_hash_process+0x86>
	db_hash_gen(true);
   17d0e:	2001      	movs	r0, #1
}
   17d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   17d14:	f7ff bf32 	b.w	17b7c <db_hash_gen>
   17d18:	20009f18 	.word	0x20009f18
   17d1c:	20009e50 	.word	0x20009e50
   17d20:	20009ee8 	.word	0x20009ee8
   17d24:	20009ec8 	.word	0x20009ec8
   17d28:	ffff0001 	.word	0xffff0001

00017d2c <ccc_set_direct>:
{
   17d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d30:	b0b8      	sub	sp, #224	; 0xe0
   17d32:	af00      	add	r7, sp, #0
   17d34:	460c      	mov	r4, r1
   17d36:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17d38:	493f      	ldr	r1, [pc, #252]	; (17e38 <ccc_set_direct+0x10c>)
   17d3a:	463a      	mov	r2, r7
   17d3c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
{
   17d40:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17d42:	f00f fe12 	bl	2796a <settings_name_steq>
   17d46:	b938      	cbnz	r0, 17d58 <ccc_set_direct+0x2c>
   17d48:	f7ff f99e 	bl	17088 <ccc_set_direct.part.0>
   17d4c:	4605      	mov	r5, r0
}
   17d4e:	4628      	mov	r0, r5
   17d50:	37e0      	adds	r7, #224	; 0xe0
   17d52:	46bd      	mov	sp, r7
   17d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   17d58:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   17d5a:	1d39      	adds	r1, r7, #4
   17d5c:	4630      	mov	r0, r6
   17d5e:	f00f fe28 	bl	279b2 <settings_name_next>
		if (!name) {
   17d62:	b96e      	cbnz	r6, 17d80 <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   17d64:	4b35      	ldr	r3, [pc, #212]	; (17e3c <ccc_set_direct+0x110>)
   17d66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17d6a:	637b      	str	r3, [r7, #52]	; 0x34
   17d6c:	2302      	movs	r3, #2
   17d6e:	4834      	ldr	r0, [pc, #208]	; (17e40 <ccc_set_direct+0x114>)
   17d70:	633b      	str	r3, [r7, #48]	; 0x30
   17d72:	f107 0230 	add.w	r2, r7, #48	; 0x30
   17d76:	f011 fe44 	bl	29a02 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17d7a:	f06f 0415 	mvn.w	r4, #21
   17d7e:	e049      	b.n	17e14 <ccc_set_direct+0xe8>
		} else if (!next) {
   17d80:	6878      	ldr	r0, [r7, #4]
   17d82:	b9c0      	cbnz	r0, 17db6 <ccc_set_direct+0x8a>
			load.addr_with_id.id = BT_ID_DEFAULT;
   17d84:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   17d86:	f107 0a08 	add.w	sl, r7, #8
   17d8a:	4651      	mov	r1, sl
   17d8c:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   17d8e:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   17d90:	f010 fbb5 	bl	284fe <bt_settings_decode_key>
		if (err) {
   17d94:	4605      	mov	r5, r0
   17d96:	b320      	cbz	r0, 17de2 <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   17d98:	466c      	mov	r4, sp
   17d9a:	b088      	sub	sp, #32
   17d9c:	466a      	mov	r2, sp
   17d9e:	4b29      	ldr	r3, [pc, #164]	; (17e44 <ccc_set_direct+0x118>)
   17da0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17da4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17da8:	f44f 7300 	mov.w	r3, #512	; 0x200
   17dac:	8393      	strh	r3, [r2, #28]
   17dae:	4b26      	ldr	r3, [pc, #152]	; (17e48 <ccc_set_direct+0x11c>)
   17db0:	f842 3f10 	str.w	r3, [r2, #16]!
   17db4:	e010      	b.n	17dd8 <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   17db6:	220a      	movs	r2, #10
   17db8:	2100      	movs	r1, #0
   17dba:	f00d fc89 	bl	256d0 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   17dbe:	2800      	cmp	r0, #0
   17dc0:	d0e0      	beq.n	17d84 <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   17dc2:	466c      	mov	r4, sp
   17dc4:	b088      	sub	sp, #32
   17dc6:	466a      	mov	r2, sp
   17dc8:	4b20      	ldr	r3, [pc, #128]	; (17e4c <ccc_set_direct+0x120>)
   17dca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17dce:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17dd2:	2303      	movs	r3, #3
   17dd4:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Unable to decode address %s", name);
   17dd8:	4819      	ldr	r0, [pc, #100]	; (17e40 <ccc_set_direct+0x114>)
   17dda:	f011 fe12 	bl	29a02 <z_log_msg_static_create.constprop.0>
   17dde:	46a5      	mov	sp, r4
			return -EINVAL;
   17de0:	e7cb      	b.n	17d7a <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   17de2:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   17de6:	b32c      	cbz	r4, 17e34 <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   17de8:	22c0      	movs	r2, #192	; 0xc0
   17dea:	4648      	mov	r0, r9
   17dec:	f107 0120 	add.w	r1, r7, #32
   17df0:	47c0      	blx	r8
			if (len < 0) {
   17df2:	1e04      	subs	r4, r0, #0
   17df4:	da10      	bge.n	17e18 <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   17df6:	466d      	mov	r5, sp
   17df8:	b088      	sub	sp, #32
   17dfa:	466a      	mov	r2, sp
   17dfc:	4b14      	ldr	r3, [pc, #80]	; (17e50 <ccc_set_direct+0x124>)
   17dfe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17e02:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17e06:	2303      	movs	r3, #3
   17e08:	480d      	ldr	r0, [pc, #52]	; (17e40 <ccc_set_direct+0x114>)
   17e0a:	f842 3f10 	str.w	r3, [r2, #16]!
   17e0e:	f011 fdf8 	bl	29a02 <z_log_msg_static_create.constprop.0>
   17e12:	46ad      	mov	sp, r5
			return -EINVAL;
   17e14:	4625      	mov	r5, r4
   17e16:	e79a      	b.n	17d4e <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   17e18:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   17e1a:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   17e1e:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   17e22:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17e26:	2001      	movs	r0, #1
   17e28:	4a0a      	ldr	r2, [pc, #40]	; (17e54 <ccc_set_direct+0x128>)
   17e2a:	f107 0310 	add.w	r3, r7, #16
   17e2e:	f011 fe5f 	bl	29af0 <bt_gatt_foreach_attr>
	return 0;
   17e32:	e78c      	b.n	17d4e <ccc_set_direct+0x22>
   17e34:	4623      	mov	r3, r4
   17e36:	e7f2      	b.n	17e1e <ccc_set_direct+0xf2>
   17e38:	000315af 	.word	0x000315af
   17e3c:	0002fe14 	.word	0x0002fe14
   17e40:	0002ccc0 	.word	0x0002ccc0
   17e44:	000313a0 	.word	0x000313a0
   17e48:	01000003 	.word	0x01000003
   17e4c:	000313bc 	.word	0x000313bc
   17e50:	000313f9 	.word	0x000313f9
   17e54:	00016fd5 	.word	0x00016fd5

00017e58 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   17e58:	2300      	movs	r3, #0
{
   17e5a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   17e5c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   17e5e:	f7ff fdd5 	bl	17a0c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   17e62:	1c41      	adds	r1, r0, #1
   17e64:	b289      	uxth	r1, r1
   17e66:	4608      	mov	r0, r1
   17e68:	4a03      	ldr	r2, [pc, #12]	; (17e78 <bt_gatt_attr_next+0x20>)
   17e6a:	ab01      	add	r3, sp, #4
   17e6c:	f011 fe40 	bl	29af0 <bt_gatt_foreach_attr>
}
   17e70:	9801      	ldr	r0, [sp, #4]
   17e72:	b003      	add	sp, #12
   17e74:	f85d fb04 	ldr.w	pc, [sp], #4
   17e78:	0002978d 	.word	0x0002978d

00017e7c <bt_gatt_is_subscribed>:
{
   17e7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17e80:	460c      	mov	r4, r1
   17e82:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   17e84:	4605      	mov	r5, r0
   17e86:	b970      	cbnz	r0, 17ea6 <bt_gatt_is_subscribed+0x2a>
   17e88:	495b      	ldr	r1, [pc, #364]	; (17ff8 <bt_gatt_is_subscribed+0x17c>)
   17e8a:	f640 434d 	movw	r3, #3149	; 0xc4d
   17e8e:	4a5b      	ldr	r2, [pc, #364]	; (17ffc <bt_gatt_is_subscribed+0x180>)
   17e90:	485b      	ldr	r0, [pc, #364]	; (18000 <bt_gatt_is_subscribed+0x184>)
   17e92:	f00e ff6e 	bl	26d72 <assert_print>
   17e96:	485b      	ldr	r0, [pc, #364]	; (18004 <bt_gatt_is_subscribed+0x188>)
   17e98:	f00e ff6b 	bl	26d72 <assert_print>
   17e9c:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   17ea0:	4856      	ldr	r0, [pc, #344]	; (17ffc <bt_gatt_is_subscribed+0x180>)
   17ea2:	f00e ff5f 	bl	26d64 <assert_post_action>
   17ea6:	b961      	cbnz	r1, 17ec2 <bt_gatt_is_subscribed+0x46>
   17ea8:	4957      	ldr	r1, [pc, #348]	; (18008 <bt_gatt_is_subscribed+0x18c>)
   17eaa:	f640 434e 	movw	r3, #3150	; 0xc4e
   17eae:	4a53      	ldr	r2, [pc, #332]	; (17ffc <bt_gatt_is_subscribed+0x180>)
   17eb0:	4853      	ldr	r0, [pc, #332]	; (18000 <bt_gatt_is_subscribed+0x184>)
   17eb2:	f00e ff5e 	bl	26d72 <assert_print>
   17eb6:	4853      	ldr	r0, [pc, #332]	; (18004 <bt_gatt_is_subscribed+0x188>)
   17eb8:	f00e ff5b 	bl	26d72 <assert_print>
   17ebc:	f640 414e 	movw	r1, #3150	; 0xc4e
   17ec0:	e7ee      	b.n	17ea0 <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   17ec2:	7b43      	ldrb	r3, [r0, #13]
   17ec4:	2b07      	cmp	r3, #7
   17ec6:	d110      	bne.n	17eea <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17ec8:	2300      	movs	r3, #0
   17eca:	f88d 300c 	strb.w	r3, [sp, #12]
   17ece:	f642 0303 	movw	r3, #10243	; 0x2803
   17ed2:	6820      	ldr	r0, [r4, #0]
   17ed4:	a903      	add	r1, sp, #12
   17ed6:	f8ad 300e 	strh.w	r3, [sp, #14]
   17eda:	f010 fb34 	bl	28546 <bt_uuid_cmp>
   17ede:	b9d0      	cbnz	r0, 17f16 <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   17ee0:	68e3      	ldr	r3, [r4, #12]
   17ee2:	799b      	ldrb	r3, [r3, #6]
   17ee4:	f013 0f30 	tst.w	r3, #48	; 0x30
   17ee8:	d103      	bne.n	17ef2 <bt_gatt_is_subscribed+0x76>
		return false;
   17eea:	2000      	movs	r0, #0
}
   17eec:	b004      	add	sp, #16
   17eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   17ef2:	4620      	mov	r0, r4
   17ef4:	f7ff ffb0 	bl	17e58 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17ef8:	4604      	mov	r4, r0
   17efa:	b960      	cbnz	r0, 17f16 <bt_gatt_is_subscribed+0x9a>
   17efc:	4942      	ldr	r1, [pc, #264]	; (18008 <bt_gatt_is_subscribed+0x18c>)
   17efe:	f640 435f 	movw	r3, #3167	; 0xc5f
   17f02:	4a3e      	ldr	r2, [pc, #248]	; (17ffc <bt_gatt_is_subscribed+0x180>)
   17f04:	483e      	ldr	r0, [pc, #248]	; (18000 <bt_gatt_is_subscribed+0x184>)
   17f06:	f00e ff34 	bl	26d72 <assert_print>
   17f0a:	4840      	ldr	r0, [pc, #256]	; (1800c <bt_gatt_is_subscribed+0x190>)
   17f0c:	f00e ff31 	bl	26d72 <assert_print>
   17f10:	f640 415f 	movw	r1, #3167	; 0xc5f
   17f14:	e7c4      	b.n	17ea0 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17f16:	2300      	movs	r3, #0
   17f18:	6820      	ldr	r0, [r4, #0]
   17f1a:	f88d 300c 	strb.w	r3, [sp, #12]
   17f1e:	f642 1302 	movw	r3, #10498	; 0x2902
   17f22:	a903      	add	r1, sp, #12
   17f24:	f8ad 300e 	strh.w	r3, [sp, #14]
   17f28:	f010 fb0d 	bl	28546 <bt_uuid_cmp>
   17f2c:	b188      	cbz	r0, 17f52 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   17f2e:	4620      	mov	r0, r4
   17f30:	f7ff ff92 	bl	17e58 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17f34:	4604      	mov	r4, r0
   17f36:	b960      	cbnz	r0, 17f52 <bt_gatt_is_subscribed+0xd6>
   17f38:	4933      	ldr	r1, [pc, #204]	; (18008 <bt_gatt_is_subscribed+0x18c>)
   17f3a:	f640 4365 	movw	r3, #3173	; 0xc65
   17f3e:	4a2f      	ldr	r2, [pc, #188]	; (17ffc <bt_gatt_is_subscribed+0x180>)
   17f40:	482f      	ldr	r0, [pc, #188]	; (18000 <bt_gatt_is_subscribed+0x184>)
   17f42:	f00e ff16 	bl	26d72 <assert_print>
   17f46:	4831      	ldr	r0, [pc, #196]	; (1800c <bt_gatt_is_subscribed+0x190>)
   17f48:	f00e ff13 	bl	26d72 <assert_print>
   17f4c:	f640 4165 	movw	r1, #3173	; 0xc65
   17f50:	e7a6      	b.n	17ea0 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17f52:	2600      	movs	r6, #0
   17f54:	f642 1802 	movw	r8, #10498	; 0x2902
   17f58:	6820      	ldr	r0, [r4, #0]
   17f5a:	4669      	mov	r1, sp
   17f5c:	f88d 6000 	strb.w	r6, [sp]
   17f60:	f8ad 8002 	strh.w	r8, [sp, #2]
   17f64:	f010 faef 	bl	28546 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17f68:	b9d8      	cbnz	r0, 17fa2 <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17f6a:	2300      	movs	r3, #0
   17f6c:	6820      	ldr	r0, [r4, #0]
   17f6e:	f88d 300c 	strb.w	r3, [sp, #12]
   17f72:	f642 1302 	movw	r3, #10498	; 0x2902
   17f76:	a903      	add	r1, sp, #12
   17f78:	f8ad 300e 	strh.w	r3, [sp, #14]
   17f7c:	f010 fae3 	bl	28546 <bt_uuid_cmp>
   17f80:	2800      	cmp	r0, #0
   17f82:	d1b2      	bne.n	17eea <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   17f84:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   17f86:	4628      	mov	r0, r5
   17f88:	4622      	mov	r2, r4
   17f8a:	f812 1b01 	ldrb.w	r1, [r2], #1
   17f8e:	f010 fed6 	bl	28d3e <bt_conn_is_peer_addr_le>
   17f92:	2800      	cmp	r0, #0
   17f94:	d0a9      	beq.n	17eea <bt_gatt_is_subscribed+0x6e>
   17f96:	8923      	ldrh	r3, [r4, #8]
   17f98:	421f      	tst	r7, r3
   17f9a:	bf14      	ite	ne
   17f9c:	2001      	movne	r0, #1
   17f9e:	2000      	moveq	r0, #0
   17fa0:	e7a4      	b.n	17eec <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17fa2:	f642 0303 	movw	r3, #10243	; 0x2803
   17fa6:	6820      	ldr	r0, [r4, #0]
   17fa8:	a901      	add	r1, sp, #4
   17faa:	f88d 6004 	strb.w	r6, [sp, #4]
   17fae:	f8ad 3006 	strh.w	r3, [sp, #6]
   17fb2:	f010 fac8 	bl	28546 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17fb6:	2800      	cmp	r0, #0
   17fb8:	d0d7      	beq.n	17f6a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17fba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17fbe:	6820      	ldr	r0, [r4, #0]
   17fc0:	a902      	add	r1, sp, #8
   17fc2:	f88d 6008 	strb.w	r6, [sp, #8]
   17fc6:	f8ad 300a 	strh.w	r3, [sp, #10]
   17fca:	f010 fabc 	bl	28546 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17fce:	2800      	cmp	r0, #0
   17fd0:	d0cb      	beq.n	17f6a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17fd2:	f642 0301 	movw	r3, #10241	; 0x2801
   17fd6:	6820      	ldr	r0, [r4, #0]
   17fd8:	a903      	add	r1, sp, #12
   17fda:	f88d 600c 	strb.w	r6, [sp, #12]
   17fde:	f8ad 300e 	strh.w	r3, [sp, #14]
   17fe2:	f010 fab0 	bl	28546 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17fe6:	2800      	cmp	r0, #0
   17fe8:	d0bf      	beq.n	17f6a <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   17fea:	4620      	mov	r0, r4
   17fec:	f7ff ff34 	bl	17e58 <bt_gatt_attr_next>
		if (!attr) {
   17ff0:	4604      	mov	r4, r0
   17ff2:	2800      	cmp	r0, #0
   17ff4:	d1b0      	bne.n	17f58 <bt_gatt_is_subscribed+0xdc>
   17ff6:	e778      	b.n	17eea <bt_gatt_is_subscribed+0x6e>
   17ff8:	000303e6 	.word	0x000303e6
   17ffc:	0003151e 	.word	0x0003151e
   18000:	0002dd81 	.word	0x0002dd81
   18004:	000315b6 	.word	0x000315b6
   18008:	000315cb 	.word	0x000315cb
   1800c:	000315d0 	.word	0x000315d0

00018010 <gatt_indicate>:
{
   18010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18014:	4615      	mov	r5, r2
   18016:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18018:	2294      	movs	r2, #148	; 0x94
   1801a:	6869      	ldr	r1, [r5, #4]
{
   1801c:	b086      	sub	sp, #24
   1801e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18020:	f011 fd71 	bl	29b06 <bt_gatt_check_perm>
   18024:	4680      	mov	r8, r0
   18026:	b178      	cbz	r0, 18048 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   18028:	4b36      	ldr	r3, [pc, #216]	; (18104 <gatt_indicate+0xf4>)
		return -EPERM;
   1802a:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1802e:	9305      	str	r3, [sp, #20]
   18030:	2302      	movs	r3, #2
   18032:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18036:	4834      	ldr	r0, [pc, #208]	; (18108 <gatt_indicate+0xf8>)
   18038:	aa04      	add	r2, sp, #16
   1803a:	9304      	str	r3, [sp, #16]
   1803c:	f011 fce1 	bl	29a02 <z_log_msg_static_create.constprop.0>
}
   18040:	4628      	mov	r0, r5
   18042:	b006      	add	sp, #24
   18044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   18048:	2202      	movs	r2, #2
   1804a:	4630      	mov	r0, r6
   1804c:	6869      	ldr	r1, [r5, #4]
   1804e:	f7ff ff15 	bl	17e7c <bt_gatt_is_subscribed>
   18052:	b960      	cbnz	r0, 1806e <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   18054:	4b2d      	ldr	r3, [pc, #180]	; (1810c <gatt_indicate+0xfc>)
   18056:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1805a:	9305      	str	r3, [sp, #20]
   1805c:	2302      	movs	r3, #2
   1805e:	482a      	ldr	r0, [pc, #168]	; (18108 <gatt_indicate+0xf8>)
   18060:	aa04      	add	r2, sp, #16
   18062:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   18064:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   18068:	f011 fccb 	bl	29a02 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1806c:	e7e8      	b.n	18040 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1806e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   18072:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   18074:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18076:	f7fe fd93 	bl	16ba0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1807a:	3702      	adds	r7, #2
	if (!req) {
   1807c:	4604      	mov	r4, r0
   1807e:	b1d0      	cbz	r0, 180b6 <gatt_indicate+0xa6>
	req->att_op = op;
   18080:	211d      	movs	r1, #29
	req->func = func;
   18082:	4b23      	ldr	r3, [pc, #140]	; (18110 <gatt_indicate+0x100>)
	req->len = len;
   18084:	6147      	str	r7, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   18086:	463a      	mov	r2, r7
	req->att_op = op;
   18088:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1808a:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1808e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   18090:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   18092:	4630      	mov	r0, r6
   18094:	f7fe fab6 	bl	16604 <bt_att_create_pdu>
	if (!buf) {
   18098:	4607      	mov	r7, r0
   1809a:	b978      	cbnz	r0, 180bc <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   1809c:	4b1d      	ldr	r3, [pc, #116]	; (18114 <gatt_indicate+0x104>)
   1809e:	481a      	ldr	r0, [pc, #104]	; (18108 <gatt_indicate+0xf8>)
   180a0:	9305      	str	r3, [sp, #20]
   180a2:	2302      	movs	r3, #2
   180a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   180a8:	aa04      	add	r2, sp, #16
   180aa:	9304      	str	r3, [sp, #16]
   180ac:	f011 fca9 	bl	29a02 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   180b0:	4620      	mov	r0, r4
   180b2:	f7fe fd99 	bl	16be8 <bt_att_req_free>
		return -ENOMEM;
   180b6:	f06f 050b 	mvn.w	r5, #11
   180ba:	e7c1      	b.n	18040 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   180bc:	2301      	movs	r3, #1
   180be:	4642      	mov	r2, r8
   180c0:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   180c2:	f107 0a0c 	add.w	sl, r7, #12
   180c6:	f011 fb5a 	bl	2977e <bt_att_set_tx_meta_data>
   180ca:	2102      	movs	r1, #2
   180cc:	4650      	mov	r0, sl
   180ce:	f003 f8a5 	bl	1b21c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   180d2:	4680      	mov	r8, r0
   180d4:	f828 9b02 	strh.w	r9, [r8], #2
   180d8:	8aa9      	ldrh	r1, [r5, #20]
   180da:	4650      	mov	r0, sl
   180dc:	f003 f89e 	bl	1b21c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   180e0:	8aaa      	ldrh	r2, [r5, #20]
   180e2:	6929      	ldr	r1, [r5, #16]
   180e4:	4640      	mov	r0, r8
   180e6:	f013 fe69 	bl	2bdbc <memcpy>
	err = bt_att_req_send(conn, req);
   180ea:	4621      	mov	r1, r4
   180ec:	4630      	mov	r0, r6
	req->buf = buf;
   180ee:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   180f0:	f7fe feb4 	bl	16e5c <bt_att_req_send>
	if (err) {
   180f4:	4605      	mov	r5, r0
   180f6:	2800      	cmp	r0, #0
   180f8:	d0a2      	beq.n	18040 <gatt_indicate+0x30>
		bt_att_req_free(req);
   180fa:	4620      	mov	r0, r4
   180fc:	f7fe fd74 	bl	16be8 <bt_att_req_free>
   18100:	e79e      	b.n	18040 <gatt_indicate+0x30>
   18102:	bf00      	nop
   18104:	000315e6 	.word	0x000315e6
   18108:	0002ccc0 	.word	0x0002ccc0
   1810c:	000315fc 	.word	0x000315fc
   18110:	000297a7 	.word	0x000297a7
   18114:	00031627 	.word	0x00031627

00018118 <bt_gatt_indicate>:
{
   18118:	b530      	push	{r4, r5, lr}
   1811a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1811c:	460c      	mov	r4, r1
{
   1811e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   18120:	b971      	cbnz	r1, 18140 <bt_gatt_indicate+0x28>
   18122:	4946      	ldr	r1, [pc, #280]	; (1823c <bt_gatt_indicate+0x124>)
   18124:	f640 330d 	movw	r3, #2829	; 0xb0d
   18128:	4a45      	ldr	r2, [pc, #276]	; (18240 <bt_gatt_indicate+0x128>)
   1812a:	4846      	ldr	r0, [pc, #280]	; (18244 <bt_gatt_indicate+0x12c>)
   1812c:	f00e fe21 	bl	26d72 <assert_print>
   18130:	4845      	ldr	r0, [pc, #276]	; (18248 <bt_gatt_indicate+0x130>)
   18132:	f00e fe1e 	bl	26d72 <assert_print>
   18136:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1813a:	4841      	ldr	r0, [pc, #260]	; (18240 <bt_gatt_indicate+0x128>)
   1813c:	f00e fe12 	bl	26d64 <assert_post_action>
   18140:	684b      	ldr	r3, [r1, #4]
   18142:	b973      	cbnz	r3, 18162 <bt_gatt_indicate+0x4a>
   18144:	680b      	ldr	r3, [r1, #0]
   18146:	b963      	cbnz	r3, 18162 <bt_gatt_indicate+0x4a>
   18148:	4940      	ldr	r1, [pc, #256]	; (1824c <bt_gatt_indicate+0x134>)
   1814a:	f640 330e 	movw	r3, #2830	; 0xb0e
   1814e:	4a3c      	ldr	r2, [pc, #240]	; (18240 <bt_gatt_indicate+0x128>)
   18150:	483c      	ldr	r0, [pc, #240]	; (18244 <bt_gatt_indicate+0x12c>)
   18152:	f00e fe0e 	bl	26d72 <assert_print>
   18156:	483c      	ldr	r0, [pc, #240]	; (18248 <bt_gatt_indicate+0x130>)
   18158:	f00e fe0b 	bl	26d72 <assert_print>
   1815c:	f640 310e 	movw	r1, #2830	; 0xb0e
   18160:	e7eb      	b.n	1813a <bt_gatt_indicate+0x22>
   18162:	483b      	ldr	r0, [pc, #236]	; (18250 <bt_gatt_indicate+0x138>)
   18164:	f011 fba0 	bl	298a8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18168:	0742      	lsls	r2, r0, #29
   1816a:	d561      	bpl.n	18230 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1816c:	b115      	cbz	r5, 18174 <bt_gatt_indicate+0x5c>
   1816e:	7b6b      	ldrb	r3, [r5, #13]
   18170:	2b07      	cmp	r3, #7
   18172:	d160      	bne.n	18236 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   18174:	6860      	ldr	r0, [r4, #4]
   18176:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18178:	f7ff fc48 	bl	17a0c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1817c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1817e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   18182:	b33a      	cbz	r2, 181d4 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18184:	a905      	add	r1, sp, #20
   18186:	9102      	str	r1, [sp, #8]
   18188:	4932      	ldr	r1, [pc, #200]	; (18254 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   1818a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1818c:	9101      	str	r1, [sp, #4]
   1818e:	2101      	movs	r1, #1
   18190:	9100      	str	r1, [sp, #0]
   18192:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   18196:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18198:	f7ff fc80 	bl	17a9c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1819c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1819e:	b91b      	cbnz	r3, 181a8 <bt_gatt_indicate+0x90>
			return -ENOENT;
   181a0:	f06f 0001 	mvn.w	r0, #1
}
   181a4:	b00b      	add	sp, #44	; 0x2c
   181a6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   181a8:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   181aa:	9b05      	ldr	r3, [sp, #20]
   181ac:	a904      	add	r1, sp, #16
   181ae:	6818      	ldr	r0, [r3, #0]
   181b0:	2300      	movs	r3, #0
   181b2:	f88d 3010 	strb.w	r3, [sp, #16]
   181b6:	f642 0303 	movw	r3, #10243	; 0x2803
   181ba:	f8ad 3012 	strh.w	r3, [sp, #18]
   181be:	f010 f9c2 	bl	28546 <bt_uuid_cmp>
   181c2:	b970      	cbnz	r0, 181e2 <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   181c4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   181c6:	68c3      	ldr	r3, [r0, #12]
   181c8:	799b      	ldrb	r3, [r3, #6]
   181ca:	069b      	lsls	r3, r3, #26
   181cc:	d405      	bmi.n	181da <bt_gatt_indicate+0xc2>
			return -EINVAL;
   181ce:	f06f 0015 	mvn.w	r0, #21
   181d2:	e7e7      	b.n	181a4 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   181d4:	2800      	cmp	r0, #0
   181d6:	d1e8      	bne.n	181aa <bt_gatt_indicate+0x92>
   181d8:	e7e2      	b.n	181a0 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   181da:	f011 fc42 	bl	29a62 <bt_gatt_attr_value_handle>
   181de:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   181e2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   181e6:	b13d      	cbz	r5, 181f8 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   181e8:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   181ea:	4601      	mov	r1, r0
   181ec:	4622      	mov	r2, r4
   181ee:	4628      	mov	r0, r5
		params->_ref = 1;
   181f0:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   181f2:	f7ff ff0d 	bl	18010 <gatt_indicate>
   181f6:	e7d5      	b.n	181a4 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   181f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   181fc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   181fe:	2302      	movs	r3, #2
   18200:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18204:	f642 1302 	movw	r3, #10498	; 0x2902
   18208:	f8ad 3012 	strh.w	r3, [sp, #18]
   1820c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1820e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18210:	9302      	str	r3, [sp, #8]
   18212:	4b11      	ldr	r3, [pc, #68]	; (18258 <bt_gatt_indicate+0x140>)
   18214:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18218:	9301      	str	r3, [sp, #4]
   1821a:	2301      	movs	r3, #1
   1821c:	aa04      	add	r2, sp, #16
   1821e:	9300      	str	r3, [sp, #0]
   18220:	462b      	mov	r3, r5
	data.ind_params = params;
   18222:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18224:	f88d 5010 	strb.w	r5, [sp, #16]
   18228:	f7ff fc38 	bl	17a9c <bt_gatt_foreach_attr_type>
	return data.err;
   1822c:	9807      	ldr	r0, [sp, #28]
   1822e:	e7b9      	b.n	181a4 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   18230:	f06f 000a 	mvn.w	r0, #10
   18234:	e7b6      	b.n	181a4 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   18236:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1823a:	e7b3      	b.n	181a4 <bt_gatt_indicate+0x8c>
   1823c:	0003164e 	.word	0x0003164e
   18240:	0003151e 	.word	0x0003151e
   18244:	0002dd81 	.word	0x0002dd81
   18248:	00031655 	.word	0x00031655
   1824c:	0003166b 	.word	0x0003166b
   18250:	200080cc 	.word	0x200080cc
   18254:	000297cd 	.word	0x000297cd
   18258:	0001861d 	.word	0x0001861d

0001825c <sc_process>:
{
   1825c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1825e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   18262:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   18264:	f1a0 0720 	sub.w	r7, r0, #32
   18268:	4628      	mov	r0, r5
   1826a:	f011 fb1d 	bl	298a8 <atomic_get>
   1826e:	0783      	lsls	r3, r0, #30
   18270:	f3c0 0640 	ubfx	r6, r0, #1, #1
   18274:	d50e      	bpl.n	18294 <sc_process+0x38>
   18276:	4919      	ldr	r1, [pc, #100]	; (182dc <sc_process+0x80>)
   18278:	f240 439a 	movw	r3, #1178	; 0x49a
   1827c:	4a18      	ldr	r2, [pc, #96]	; (182e0 <sc_process+0x84>)
   1827e:	4819      	ldr	r0, [pc, #100]	; (182e4 <sc_process+0x88>)
   18280:	f00e fd77 	bl	26d72 <assert_print>
   18284:	4818      	ldr	r0, [pc, #96]	; (182e8 <sc_process+0x8c>)
   18286:	f00e fd74 	bl	26d72 <assert_print>
   1828a:	f240 419a 	movw	r1, #1178	; 0x49a
   1828e:	4814      	ldr	r0, [pc, #80]	; (182e0 <sc_process+0x84>)
   18290:	f00e fd68 	bl	26d64 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   18294:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18298:	f06f 0101 	mvn.w	r1, #1
   1829c:	4628      	mov	r0, r5
   1829e:	9301      	str	r3, [sp, #4]
   182a0:	f011 fb10 	bl	298c4 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   182a4:	4b11      	ldr	r3, [pc, #68]	; (182ec <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   182a6:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   182a8:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   182ac:	4b10      	ldr	r3, [pc, #64]	; (182f0 <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   182ae:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   182b0:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   182b4:	ab01      	add	r3, sp, #4
   182b6:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   182ba:	2304      	movs	r3, #4
	sc->start = 0U;
   182bc:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   182c0:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   182c4:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   182c8:	f7ff ff26 	bl	18118 <bt_gatt_indicate>
   182cc:	b918      	cbnz	r0, 182d6 <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   182ce:	2102      	movs	r1, #2
   182d0:	4628      	mov	r0, r5
   182d2:	f011 faec 	bl	298ae <atomic_or>
}
   182d6:	b003      	add	sp, #12
   182d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   182da:	bf00      	nop
   182dc:	00031688 	.word	0x00031688
   182e0:	0003151e 	.word	0x0003151e
   182e4:	0002dd81 	.word	0x0002dd81
   182e8:	000316b9 	.word	0x000316b9
   182ec:	0002d820 	.word	0x0002d820
   182f0:	000178d1 	.word	0x000178d1

000182f4 <update_ccc>:
{
   182f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   182f8:	b089      	sub	sp, #36	; 0x24
   182fa:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   182fc:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   182fe:	4b3b      	ldr	r3, [pc, #236]	; (183ec <update_ccc+0xf8>)
   18300:	6882      	ldr	r2, [r0, #8]
{
   18302:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18304:	429a      	cmp	r2, r3
{
   18306:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18308:	d11f      	bne.n	1834a <update_ccc+0x56>
	ccc = attr->user_data;
   1830a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1830c:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1830e:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   18310:	b1db      	cbz	r3, 1834a <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18312:	4620      	mov	r0, r4
   18314:	7831      	ldrb	r1, [r6, #0]
   18316:	f010 fd12 	bl	28d3e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1831a:	b1b0      	cbz	r0, 1834a <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1831c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   18320:	4629      	mov	r1, r5
   18322:	4620      	mov	r0, r4
   18324:	f011 fbef 	bl	29b06 <bt_gatt_check_perm>
		if (err) {
   18328:	b330      	cbz	r0, 18378 <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1832a:	2803      	cmp	r0, #3
   1832c:	d112      	bne.n	18354 <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   1832e:	466c      	mov	r4, sp
   18330:	b088      	sub	sp, #32
   18332:	466a      	mov	r2, sp
   18334:	4b2e      	ldr	r3, [pc, #184]	; (183f0 <update_ccc+0xfc>)
   18336:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1833a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1833e:	f842 0f10 	str.w	r0, [r2, #16]!
   18342:	482c      	ldr	r0, [pc, #176]	; (183f4 <update_ccc+0x100>)
   18344:	f011 fb5d 	bl	29a02 <z_log_msg_static_create.constprop.0>
   18348:	46a5      	mov	sp, r4
}
   1834a:	2001      	movs	r0, #1
   1834c:	3724      	adds	r7, #36	; 0x24
   1834e:	46bd      	mov	sp, r7
   18350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   18354:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   18356:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   18358:	bf0c      	ite	eq
   1835a:	f04f 0903 	moveq.w	r9, #3
   1835e:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   18362:	f010 fcea 	bl	28d3a <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   18366:	4581      	cmp	r9, r0
   18368:	d906      	bls.n	18378 <update_ccc+0x84>
				if (data->sec < sec) {
   1836a:	f898 3004 	ldrb.w	r3, [r8, #4]
   1836e:	454b      	cmp	r3, r9
   18370:	d2eb      	bcs.n	1834a <update_ccc+0x56>
					data->sec = sec;
   18372:	f888 9004 	strb.w	r9, [r8, #4]
   18376:	e7e8      	b.n	1834a <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   18378:	4631      	mov	r1, r6
   1837a:	4628      	mov	r0, r5
   1837c:	f011 fa09 	bl	29792 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   18380:	4b1d      	ldr	r3, [pc, #116]	; (183f8 <update_ccc+0x104>)
   18382:	429e      	cmp	r6, r3
   18384:	d1e1      	bne.n	1834a <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18386:	7a20      	ldrb	r0, [r4, #8]
   18388:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1838c:	f7fe fdca 	bl	16f24 <find_sc_cfg>
	if (!cfg) {
   18390:	2800      	cmp	r0, #0
   18392:	d0da      	beq.n	1834a <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   18394:	8902      	ldrh	r2, [r0, #8]
   18396:	8943      	ldrh	r3, [r0, #10]
   18398:	ea52 0103 	orrs.w	r1, r2, r3
   1839c:	d0d5      	beq.n	1834a <update_ccc+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1839e:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   183a0:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   183a2:	4620      	mov	r0, r4
   183a4:	f7fc fedc 	bl	15160 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   183a8:	2318      	movs	r3, #24
   183aa:	4914      	ldr	r1, [pc, #80]	; (183fc <update_ccc+0x108>)
   183ac:	4a14      	ldr	r2, [pc, #80]	; (18400 <update_ccc+0x10c>)
   183ae:	fb03 1300 	mla	r3, r3, r0, r1
   183b2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   183b4:	4a13      	ldr	r2, [pc, #76]	; (18404 <update_ccc+0x110>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   183b6:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   183b8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   183ba:	1d3a      	adds	r2, r7, #4
   183bc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   183be:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   183c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   183c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   183c8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   183ca:	4620      	mov	r0, r4
   183cc:	f7ff fea4 	bl	18118 <bt_gatt_indicate>
   183d0:	2800      	cmp	r0, #0
   183d2:	d0ba      	beq.n	1834a <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   183d4:	4b0c      	ldr	r3, [pc, #48]	; (18408 <update_ccc+0x114>)
   183d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   183da:	61fb      	str	r3, [r7, #28]
   183dc:	2302      	movs	r3, #2
   183de:	4805      	ldr	r0, [pc, #20]	; (183f4 <update_ccc+0x100>)
   183e0:	61bb      	str	r3, [r7, #24]
   183e2:	f107 0218 	add.w	r2, r7, #24
   183e6:	f011 fb0c 	bl	29a02 <z_log_msg_static_create.constprop.0>
   183ea:	e7ae      	b.n	1834a <update_ccc+0x56>
   183ec:	00017791 	.word	0x00017791
   183f0:	000316d4 	.word	0x000316d4
   183f4:	0002ccc0 	.word	0x0002ccc0
   183f8:	20008524 	.word	0x20008524
   183fc:	20021688 	.word	0x20021688
   18400:	0002d820 	.word	0x0002d820
   18404:	00029a27 	.word	0x00029a27
   18408:	000316e8 	.word	0x000316e8

0001840c <gatt_notify>:
{
   1840c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18410:	4614      	mov	r4, r2
   18412:	4688      	mov	r8, r1
   18414:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18416:	2294      	movs	r2, #148	; 0x94
   18418:	6861      	ldr	r1, [r4, #4]
{
   1841a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1841c:	f011 fb73 	bl	29b06 <bt_gatt_check_perm>
   18420:	b170      	cbz	r0, 18440 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   18422:	4b2b      	ldr	r3, [pc, #172]	; (184d0 <gatt_notify+0xc4>)
   18424:	482b      	ldr	r0, [pc, #172]	; (184d4 <gatt_notify+0xc8>)
   18426:	9305      	str	r3, [sp, #20]
   18428:	2302      	movs	r3, #2
   1842a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1842e:	aa04      	add	r2, sp, #16
   18430:	9304      	str	r3, [sp, #16]
   18432:	f011 fae6 	bl	29a02 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   18436:	f04f 30ff 	mov.w	r0, #4294967295
}
   1843a:	b007      	add	sp, #28
   1843c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   18440:	2201      	movs	r2, #1
   18442:	4630      	mov	r0, r6
   18444:	6861      	ldr	r1, [r4, #4]
   18446:	f7ff fd19 	bl	17e7c <bt_gatt_is_subscribed>
   1844a:	b960      	cbnz	r0, 18466 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1844c:	4b22      	ldr	r3, [pc, #136]	; (184d8 <gatt_notify+0xcc>)
   1844e:	4821      	ldr	r0, [pc, #132]	; (184d4 <gatt_notify+0xc8>)
   18450:	9305      	str	r3, [sp, #20]
   18452:	2302      	movs	r3, #2
   18454:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18458:	aa04      	add	r2, sp, #16
   1845a:	9304      	str	r3, [sp, #16]
   1845c:	f011 fad1 	bl	29a02 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   18460:	f06f 0015 	mvn.w	r0, #21
   18464:	e7e9      	b.n	1843a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   18466:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   18468:	211b      	movs	r1, #27
   1846a:	4630      	mov	r0, r6
   1846c:	3202      	adds	r2, #2
   1846e:	f7fe f8c9 	bl	16604 <bt_att_create_pdu>
	if (!buf) {
   18472:	4605      	mov	r5, r0
   18474:	b960      	cbnz	r0, 18490 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   18476:	4b19      	ldr	r3, [pc, #100]	; (184dc <gatt_notify+0xd0>)
   18478:	4816      	ldr	r0, [pc, #88]	; (184d4 <gatt_notify+0xc8>)
   1847a:	9305      	str	r3, [sp, #20]
   1847c:	2302      	movs	r3, #2
   1847e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18482:	aa04      	add	r2, sp, #16
   18484:	9304      	str	r3, [sp, #16]
   18486:	f011 fabc 	bl	29a02 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1848a:	f06f 000b 	mvn.w	r0, #11
   1848e:	e7d4      	b.n	1843a <gatt_notify+0x2e>
   18490:	f100 090c 	add.w	r9, r0, #12
   18494:	2102      	movs	r1, #2
   18496:	4648      	mov	r0, r9
   18498:	f002 fec0 	bl	1b21c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1849c:	4607      	mov	r7, r0
   1849e:	f827 8b02 	strh.w	r8, [r7], #2
   184a2:	89a1      	ldrh	r1, [r4, #12]
   184a4:	4648      	mov	r0, r9
   184a6:	f002 feb9 	bl	1b21c <net_buf_simple_add>
   184aa:	89a2      	ldrh	r2, [r4, #12]
   184ac:	68a1      	ldr	r1, [r4, #8]
   184ae:	4638      	mov	r0, r7
   184b0:	f013 fc84 	bl	2bdbc <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   184b4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   184b8:	4628      	mov	r0, r5
   184ba:	2301      	movs	r3, #1
   184bc:	f011 f95f 	bl	2977e <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   184c0:	4629      	mov	r1, r5
   184c2:	4630      	mov	r0, r6
}
   184c4:	b007      	add	sp, #28
   184c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   184ca:	f7fe bc69 	b.w	16da0 <bt_att_send>
   184ce:	bf00      	nop
   184d0:	000315e6 	.word	0x000315e6
   184d4:	0002ccc0 	.word	0x0002ccc0
   184d8:	000315fc 	.word	0x000315fc
   184dc:	00031705 	.word	0x00031705

000184e0 <bt_gatt_notify_cb>:
{
   184e0:	b530      	push	{r4, r5, lr}
   184e2:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   184e4:	460c      	mov	r4, r1
{
   184e6:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   184e8:	b971      	cbnz	r1, 18508 <bt_gatt_notify_cb+0x28>
   184ea:	4944      	ldr	r1, [pc, #272]	; (185fc <bt_gatt_notify_cb+0x11c>)
   184ec:	f640 232d 	movw	r3, #2605	; 0xa2d
   184f0:	4a43      	ldr	r2, [pc, #268]	; (18600 <bt_gatt_notify_cb+0x120>)
   184f2:	4844      	ldr	r0, [pc, #272]	; (18604 <bt_gatt_notify_cb+0x124>)
   184f4:	f00e fc3d 	bl	26d72 <assert_print>
   184f8:	4843      	ldr	r0, [pc, #268]	; (18608 <bt_gatt_notify_cb+0x128>)
   184fa:	f00e fc3a 	bl	26d72 <assert_print>
   184fe:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   18502:	483f      	ldr	r0, [pc, #252]	; (18600 <bt_gatt_notify_cb+0x120>)
   18504:	f00e fc2e 	bl	26d64 <assert_post_action>
   18508:	684b      	ldr	r3, [r1, #4]
   1850a:	b973      	cbnz	r3, 1852a <bt_gatt_notify_cb+0x4a>
   1850c:	680b      	ldr	r3, [r1, #0]
   1850e:	b963      	cbnz	r3, 1852a <bt_gatt_notify_cb+0x4a>
   18510:	493e      	ldr	r1, [pc, #248]	; (1860c <bt_gatt_notify_cb+0x12c>)
   18512:	f640 232e 	movw	r3, #2606	; 0xa2e
   18516:	4a3a      	ldr	r2, [pc, #232]	; (18600 <bt_gatt_notify_cb+0x120>)
   18518:	483a      	ldr	r0, [pc, #232]	; (18604 <bt_gatt_notify_cb+0x124>)
   1851a:	f00e fc2a 	bl	26d72 <assert_print>
   1851e:	483a      	ldr	r0, [pc, #232]	; (18608 <bt_gatt_notify_cb+0x128>)
   18520:	f00e fc27 	bl	26d72 <assert_print>
   18524:	f640 212e 	movw	r1, #2606	; 0xa2e
   18528:	e7eb      	b.n	18502 <bt_gatt_notify_cb+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1852a:	4839      	ldr	r0, [pc, #228]	; (18610 <bt_gatt_notify_cb+0x130>)
   1852c:	f011 f9bc 	bl	298a8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18530:	0742      	lsls	r2, r0, #29
   18532:	d55d      	bpl.n	185f0 <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18534:	b115      	cbz	r5, 1853c <bt_gatt_notify_cb+0x5c>
   18536:	7b6b      	ldrb	r3, [r5, #13]
   18538:	2b07      	cmp	r3, #7
   1853a:	d15c      	bne.n	185f6 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   1853c:	6860      	ldr	r0, [r4, #4]
   1853e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18540:	f7ff fa64 	bl	17a0c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   18544:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18546:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1854a:	b33a      	cbz	r2, 1859c <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1854c:	a905      	add	r1, sp, #20
   1854e:	9102      	str	r1, [sp, #8]
   18550:	4930      	ldr	r1, [pc, #192]	; (18614 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   18552:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18554:	9101      	str	r1, [sp, #4]
   18556:	2101      	movs	r1, #1
   18558:	9100      	str	r1, [sp, #0]
   1855a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1855e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18560:	f7ff fa9c 	bl	17a9c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   18564:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   18566:	b91b      	cbnz	r3, 18570 <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   18568:	f06f 0001 	mvn.w	r0, #1
}
   1856c:	b00b      	add	sp, #44	; 0x2c
   1856e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   18570:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   18572:	9b05      	ldr	r3, [sp, #20]
   18574:	a904      	add	r1, sp, #16
   18576:	6818      	ldr	r0, [r3, #0]
   18578:	2300      	movs	r3, #0
   1857a:	f88d 3010 	strb.w	r3, [sp, #16]
   1857e:	f642 0303 	movw	r3, #10243	; 0x2803
   18582:	f8ad 3012 	strh.w	r3, [sp, #18]
   18586:	f00f ffde 	bl	28546 <bt_uuid_cmp>
   1858a:	b970      	cbnz	r0, 185aa <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1858c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1858e:	68c3      	ldr	r3, [r0, #12]
   18590:	799b      	ldrb	r3, [r3, #6]
   18592:	06db      	lsls	r3, r3, #27
   18594:	d405      	bmi.n	185a2 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   18596:	f06f 0015 	mvn.w	r0, #21
   1859a:	e7e7      	b.n	1856c <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   1859c:	2800      	cmp	r0, #0
   1859e:	d1e8      	bne.n	18572 <bt_gatt_notify_cb+0x92>
   185a0:	e7e2      	b.n	18568 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   185a2:	f011 fa5e 	bl	29a62 <bt_gatt_attr_value_handle>
   185a6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   185aa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   185ae:	b12d      	cbz	r5, 185bc <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   185b0:	4601      	mov	r1, r0
   185b2:	4622      	mov	r2, r4
   185b4:	4628      	mov	r0, r5
   185b6:	f7ff ff29 	bl	1840c <gatt_notify>
   185ba:	e7d7      	b.n	1856c <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   185bc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   185c0:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   185c4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   185c6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   185c8:	f8ad 2012 	strh.w	r2, [sp, #18]
   185cc:	aa05      	add	r2, sp, #20
   185ce:	9202      	str	r2, [sp, #8]
   185d0:	4a11      	ldr	r2, [pc, #68]	; (18618 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   185d2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   185d6:	e9cd 3200 	strd	r3, r2, [sp]
   185da:	f64f 71ff 	movw	r1, #65535	; 0xffff
   185de:	462b      	mov	r3, r5
   185e0:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   185e2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   185e4:	f88d 5010 	strb.w	r5, [sp, #16]
   185e8:	f7ff fa58 	bl	17a9c <bt_gatt_foreach_attr_type>
	return data.err;
   185ec:	9807      	ldr	r0, [sp, #28]
   185ee:	e7bd      	b.n	1856c <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   185f0:	f06f 000a 	mvn.w	r0, #10
   185f4:	e7ba      	b.n	1856c <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   185f6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   185fa:	e7b7      	b.n	1856c <bt_gatt_notify_cb+0x8c>
   185fc:	0003164e 	.word	0x0003164e
   18600:	0003151e 	.word	0x0003151e
   18604:	0002dd81 	.word	0x0002dd81
   18608:	00031655 	.word	0x00031655
   1860c:	0003166b 	.word	0x0003166b
   18610:	200080cc 	.word	0x200080cc
   18614:	000297cd 	.word	0x000297cd
   18618:	0001861d 	.word	0x0001861d

0001861c <notify_cb>:
{
   1861c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18620:	4b43      	ldr	r3, [pc, #268]	; (18730 <notify_cb+0x114>)
{
   18622:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18624:	6882      	ldr	r2, [r0, #8]
{
   18626:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18628:	429a      	cmp	r2, r3
{
   1862a:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   1862c:	d004      	beq.n	18638 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1862e:	2701      	movs	r7, #1
}
   18630:	4638      	mov	r0, r7
   18632:	b007      	add	sp, #28
   18634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   18638:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1863a:	4b3e      	ldr	r3, [pc, #248]	; (18734 <notify_cb+0x118>)
   1863c:	429e      	cmp	r6, r3
   1863e:	d010      	beq.n	18662 <notify_cb+0x46>
		if (cfg->value != data->type) {
   18640:	8932      	ldrh	r2, [r6, #8]
   18642:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18644:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   18646:	429a      	cmp	r2, r3
   18648:	d1f1      	bne.n	1862e <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1864a:	7830      	ldrb	r0, [r6, #0]
   1864c:	f7fc ff38 	bl	154c0 <bt_conn_lookup_addr_le>
		if (!conn) {
   18650:	4604      	mov	r4, r0
   18652:	2800      	cmp	r0, #0
   18654:	d0eb      	beq.n	1862e <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   18656:	7b43      	ldrb	r3, [r0, #13]
   18658:	2b07      	cmp	r3, #7
   1865a:	d026      	beq.n	186aa <notify_cb+0x8e>
			bt_conn_unref(conn);
   1865c:	f7fc fc54 	bl	14f08 <bt_conn_unref>
			continue;
   18660:	e7e5      	b.n	1862e <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18662:	f04f 0800 	mov.w	r8, #0
   18666:	4c34      	ldr	r4, [pc, #208]	; (18738 <notify_cb+0x11c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18668:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1873c <notify_cb+0x120>
   1866c:	4649      	mov	r1, r9
   1866e:	4620      	mov	r0, r4
   18670:	f011 f905 	bl	2987e <bt_addr_le_eq>
   18674:	b978      	cbnz	r0, 18696 <notify_cb+0x7a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   18676:	2207      	movs	r2, #7
   18678:	4621      	mov	r1, r4
   1867a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1867e:	f7fc ff69 	bl	15554 <bt_conn_lookup_state_le>
			if (!conn) {
   18682:	b978      	cbnz	r0, 186a4 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   18684:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   18686:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   18688:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1868a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1868e:	8853      	ldrh	r3, [r2, #2]
   18690:	8812      	ldrh	r2, [r2, #0]
   18692:	f7fe fe6f 	bl	17374 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18696:	340c      	adds	r4, #12
   18698:	f1b8 0f00 	cmp.w	r8, #0
   1869c:	d1d0      	bne.n	18640 <notify_cb+0x24>
   1869e:	f04f 0801 	mov.w	r8, #1
   186a2:	e7e3      	b.n	1866c <notify_cb+0x50>
			bt_conn_unref(conn);
   186a4:	f7fc fc30 	bl	14f08 <bt_conn_unref>
   186a8:	e7f5      	b.n	18696 <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   186aa:	6973      	ldr	r3, [r6, #20]
   186ac:	b123      	cbz	r3, 186b8 <notify_cb+0x9c>
   186ae:	4639      	mov	r1, r7
   186b0:	4798      	blx	r3
   186b2:	b908      	cbnz	r0, 186b8 <notify_cb+0x9c>
			bt_conn_unref(conn);
   186b4:	4620      	mov	r0, r4
   186b6:	e7d1      	b.n	1865c <notify_cb+0x40>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   186b8:	4639      	mov	r1, r7
   186ba:	2294      	movs	r2, #148	; 0x94
   186bc:	4620      	mov	r0, r4
   186be:	f011 fa22 	bl	29b06 <bt_gatt_check_perm>
   186c2:	4607      	mov	r7, r0
   186c4:	b150      	cbz	r0, 186dc <notify_cb+0xc0>
			LOG_WRN("Link is not encrypted");
   186c6:	4b1e      	ldr	r3, [pc, #120]	; (18740 <notify_cb+0x124>)
   186c8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   186cc:	9305      	str	r3, [sp, #20]
   186ce:	2302      	movs	r3, #2
   186d0:	481c      	ldr	r0, [pc, #112]	; (18744 <notify_cb+0x128>)
   186d2:	aa04      	add	r2, sp, #16
   186d4:	9304      	str	r3, [sp, #16]
   186d6:	f011 f994 	bl	29a02 <z_log_msg_static_create.constprop.0>
   186da:	e7eb      	b.n	186b4 <notify_cb+0x98>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   186dc:	89ab      	ldrh	r3, [r5, #12]
   186de:	2b02      	cmp	r3, #2
   186e0:	d114      	bne.n	1870c <notify_cb+0xf0>
   186e2:	8933      	ldrh	r3, [r6, #8]
   186e4:	079a      	lsls	r2, r3, #30
   186e6:	d405      	bmi.n	186f4 <notify_cb+0xd8>
		bt_conn_unref(conn);
   186e8:	4620      	mov	r0, r4
   186ea:	f7fc fc0d 	bl	14f08 <bt_conn_unref>
		data->err = 0;
   186ee:	2300      	movs	r3, #0
   186f0:	60ab      	str	r3, [r5, #8]
   186f2:	e79c      	b.n	1862e <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   186f4:	4620      	mov	r0, r4
   186f6:	692a      	ldr	r2, [r5, #16]
   186f8:	88a9      	ldrh	r1, [r5, #4]
   186fa:	f7ff fc89 	bl	18010 <gatt_indicate>
			if (err == 0) {
   186fe:	4606      	mov	r6, r0
   18700:	b978      	cbnz	r0, 18722 <notify_cb+0x106>
				data->ind_params->_ref++;
   18702:	692a      	ldr	r2, [r5, #16]
   18704:	7d93      	ldrb	r3, [r2, #22]
   18706:	3301      	adds	r3, #1
   18708:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1870a:	e7ed      	b.n	186e8 <notify_cb+0xcc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1870c:	2b01      	cmp	r3, #1
   1870e:	d1eb      	bne.n	186e8 <notify_cb+0xcc>
   18710:	8933      	ldrh	r3, [r6, #8]
   18712:	07db      	lsls	r3, r3, #31
   18714:	d5e8      	bpl.n	186e8 <notify_cb+0xcc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18716:	4620      	mov	r0, r4
   18718:	692a      	ldr	r2, [r5, #16]
   1871a:	88a9      	ldrh	r1, [r5, #4]
   1871c:	f7ff fe76 	bl	1840c <gatt_notify>
   18720:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   18722:	4620      	mov	r0, r4
   18724:	f7fc fbf0 	bl	14f08 <bt_conn_unref>
		if (err < 0) {
   18728:	2e00      	cmp	r6, #0
   1872a:	db81      	blt.n	18630 <notify_cb+0x14>
   1872c:	e7df      	b.n	186ee <notify_cb+0xd2>
   1872e:	bf00      	nop
   18730:	00017791 	.word	0x00017791
   18734:	20008524 	.word	0x20008524
   18738:	20021aad 	.word	0x20021aad
   1873c:	0002fdbe 	.word	0x0002fdbe
   18740:	000315e6 	.word	0x000315e6
   18744:	0002ccc0 	.word	0x0002ccc0

00018748 <bt_gatt_connected>:
{
   18748:	b5b0      	push	{r4, r5, r7, lr}
   1874a:	b08e      	sub	sp, #56	; 0x38
	data.sec = BT_SECURITY_L1;
   1874c:	2301      	movs	r3, #1
{
   1874e:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18750:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   18754:	4604      	mov	r4, r0
	data.conn = conn;
   18756:	6078      	str	r0, [r7, #4]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18758:	4629      	mov	r1, r5
   1875a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1875c:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1875e:	f010 f84e 	bl	287fe <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   18762:	b198      	cbz	r0, 1878c <bt_gatt_connected+0x44>
		if (conn->id) {
   18764:	7a22      	ldrb	r2, [r4, #8]
   18766:	b3a2      	cbz	r2, 187d2 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18768:	2104      	movs	r1, #4
   1876a:	4638      	mov	r0, r7
   1876c:	f00e f8b1 	bl	268d2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18770:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18772:	2124      	movs	r1, #36	; 0x24
   18774:	4a18      	ldr	r2, [pc, #96]	; (187d8 <bt_gatt_connected+0x90>)
   18776:	f107 000c 	add.w	r0, r7, #12
   1877a:	462b      	mov	r3, r5
   1877c:	f7f9 face 	bl	11d1c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   18780:	f107 020c 	add.w	r2, r7, #12
   18784:	4610      	mov	r0, r2
   18786:	4915      	ldr	r1, [pc, #84]	; (187dc <bt_gatt_connected+0x94>)
   18788:	f7f7 fbde 	bl	ff48 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1878c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18790:	2001      	movs	r0, #1
   18792:	4a13      	ldr	r2, [pc, #76]	; (187e0 <bt_gatt_connected+0x98>)
   18794:	1d3b      	adds	r3, r7, #4
   18796:	f011 f9ab 	bl	29af0 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1879a:	4620      	mov	r0, r4
   1879c:	f010 facd 	bl	28d3a <bt_conn_get_security>
   187a0:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   187a2:	4288      	cmp	r0, r1
   187a4:	d212      	bcs.n	187cc <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   187a6:	4620      	mov	r0, r4
   187a8:	f010 fa9b 	bl	28ce2 <bt_conn_set_security>
		if (err) {
   187ac:	b170      	cbz	r0, 187cc <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   187ae:	466c      	mov	r4, sp
   187b0:	b088      	sub	sp, #32
   187b2:	aa02      	add	r2, sp, #8
   187b4:	4b0b      	ldr	r3, [pc, #44]	; (187e4 <bt_gatt_connected+0x9c>)
   187b6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   187ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   187be:	2303      	movs	r3, #3
   187c0:	4809      	ldr	r0, [pc, #36]	; (187e8 <bt_gatt_connected+0xa0>)
   187c2:	f842 3f10 	str.w	r3, [r2, #16]!
   187c6:	f011 f91c 	bl	29a02 <z_log_msg_static_create.constprop.0>
   187ca:	46a5      	mov	sp, r4
}
   187cc:	3730      	adds	r7, #48	; 0x30
   187ce:	46bd      	mov	sp, r7
   187d0:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   187d2:	9200      	str	r2, [sp, #0]
   187d4:	e7cd      	b.n	18772 <bt_gatt_connected+0x2a>
   187d6:	bf00      	nop
   187d8:	000315b2 	.word	0x000315b2
   187dc:	00017d2d 	.word	0x00017d2d
   187e0:	000182f5 	.word	0x000182f5
   187e4:	0003172e 	.word	0x0003172e
   187e8:	0002ccc0 	.word	0x0002ccc0

000187ec <bt_gatt_att_max_mtu_changed>:
{
   187ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187ee:	4605      	mov	r5, r0
   187f0:	460e      	mov	r6, r1
   187f2:	4617      	mov	r7, r2
	return list->head;
   187f4:	4b06      	ldr	r3, [pc, #24]	; (18810 <bt_gatt_att_max_mtu_changed+0x24>)
   187f6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   187f8:	b14c      	cbz	r4, 1880e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   187fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   187fe:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   18800:	b11b      	cbz	r3, 1880a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   18802:	463a      	mov	r2, r7
   18804:	4631      	mov	r1, r6
   18806:	4628      	mov	r0, r5
   18808:	4798      	blx	r3
	return node->next;
   1880a:	6864      	ldr	r4, [r4, #4]
   1880c:	e7f4      	b.n	187f8 <bt_gatt_att_max_mtu_changed+0xc>
}
   1880e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18810:	200216c8 	.word	0x200216c8

00018814 <bt_gatt_encrypt_change>:
{
   18814:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   18816:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   18818:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1881a:	466b      	mov	r3, sp
   1881c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18820:	4a03      	ldr	r2, [pc, #12]	; (18830 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   18822:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18826:	f011 f963 	bl	29af0 <bt_gatt_foreach_attr>
}
   1882a:	b003      	add	sp, #12
   1882c:	f85d fb04 	ldr.w	pc, [sp], #4
   18830:	000182f5 	.word	0x000182f5

00018834 <bt_gatt_store_ccc>:
	save.count = 0;
   18834:	2300      	movs	r3, #0
{
   18836:	b5f0      	push	{r4, r5, r6, r7, lr}
   18838:	4604      	mov	r4, r0
   1883a:	b0c1      	sub	sp, #260	; 0x104
   1883c:	af02      	add	r7, sp, #8
   1883e:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   18840:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   18842:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   18846:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1884a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1884e:	2001      	movs	r0, #1
   18850:	4a1b      	ldr	r2, [pc, #108]	; (188c0 <bt_gatt_store_ccc+0x8c>)
   18852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   18856:	f011 f94b 	bl	29af0 <bt_gatt_foreach_attr>
	if (id) {
   1885a:	b364      	cbz	r4, 188b6 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1885c:	1d3e      	adds	r6, r7, #4
   1885e:	4622      	mov	r2, r4
   18860:	2104      	movs	r1, #4
   18862:	4630      	mov	r0, r6
   18864:	f00e f835 	bl	268d2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   18868:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1886a:	4a16      	ldr	r2, [pc, #88]	; (188c4 <bt_gatt_store_ccc+0x90>)
   1886c:	462b      	mov	r3, r5
   1886e:	2124      	movs	r1, #36	; 0x24
   18870:	f107 0008 	add.w	r0, r7, #8
   18874:	f7f9 fa52 	bl	11d1c <bt_settings_encode_key>
	if (save.count) {
   18878:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1887c:	b1ea      	cbz	r2, 188ba <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1887e:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   18880:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   18884:	f107 0008 	add.w	r0, r7, #8
   18888:	f7f7 fafe 	bl	fe88 <settings_save_one>
	if (err) {
   1888c:	4604      	mov	r4, r0
   1888e:	b170      	cbz	r0, 188ae <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   18890:	466d      	mov	r5, sp
   18892:	b088      	sub	sp, #32
   18894:	aa02      	add	r2, sp, #8
   18896:	4b0c      	ldr	r3, [pc, #48]	; (188c8 <bt_gatt_store_ccc+0x94>)
   18898:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1889c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   188a0:	2303      	movs	r3, #3
   188a2:	480a      	ldr	r0, [pc, #40]	; (188cc <bt_gatt_store_ccc+0x98>)
   188a4:	f842 3f10 	str.w	r3, [r2, #16]!
   188a8:	f011 f8ab 	bl	29a02 <z_log_msg_static_create.constprop.0>
   188ac:	46ad      	mov	sp, r5
}
   188ae:	4620      	mov	r0, r4
   188b0:	37fc      	adds	r7, #252	; 0xfc
   188b2:	46bd      	mov	sp, r7
   188b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   188b6:	9400      	str	r4, [sp, #0]
   188b8:	e7d7      	b.n	1886a <bt_gatt_store_ccc+0x36>
		str = NULL;
   188ba:	4611      	mov	r1, r2
   188bc:	e7e2      	b.n	18884 <bt_gatt_store_ccc+0x50>
   188be:	bf00      	nop
   188c0:	000176b9 	.word	0x000176b9
   188c4:	000315b2 	.word	0x000315b2
   188c8:	0003175a 	.word	0x0003175a
   188cc:	0002ccc0 	.word	0x0002ccc0

000188d0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   188d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188d4:	4604      	mov	r4, r0
   188d6:	b08c      	sub	sp, #48	; 0x30
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   188d8:	4603      	mov	r3, r0
   188da:	f64f 71ff 	movw	r1, #65535	; 0xffff
   188de:	2001      	movs	r0, #1
   188e0:	4a3d      	ldr	r2, [pc, #244]	; (189d8 <bt_gatt_disconnected+0x108>)
{
   188e2:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   188e4:	f011 f904 	bl	29af0 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   188e8:	4620      	mov	r0, r4
   188ea:	f7fc fc39 	bl	15160 <bt_conn_index>
	if (gatt_ccc_store.conn_list[index] != NULL) {
   188ee:	4e3b      	ldr	r6, [pc, #236]	; (189dc <bt_gatt_disconnected+0x10c>)
	uint8_t index = bt_conn_index(conn);
   188f0:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   188f2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   188f6:	b120      	cbz	r0, 18902 <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   188f8:	f7fc fb06 	bl	14f08 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   188fc:	2300      	movs	r3, #0
   188fe:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   18902:	4837      	ldr	r0, [pc, #220]	; (189e0 <bt_gatt_disconnected+0x110>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18904:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   18908:	f009 ff68 	bl	227dc <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1890c:	4629      	mov	r1, r5
   1890e:	7a20      	ldrb	r0, [r4, #8]
   18910:	f00f ff75 	bl	287fe <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18914:	2800      	cmp	r0, #0
   18916:	d038      	beq.n	1898a <bt_gatt_disconnected+0xba>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   18918:	4629      	mov	r1, r5
   1891a:	7a20      	ldrb	r0, [r4, #8]
   1891c:	f7ff ff8a 	bl	18834 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   18920:	4620      	mov	r0, r4
   18922:	f7fe fad1 	bl	16ec8 <find_cf_cfg>
	if (!cfg) {
   18926:	4606      	mov	r6, r0
   18928:	2800      	cmp	r0, #0
   1892a:	d04e      	beq.n	189ca <bt_gatt_disconnected+0xfa>
		if (conn->id) {
   1892c:	7a22      	ldrb	r2, [r4, #8]
		len = 0;
   1892e:	f04f 0801 	mov.w	r8, #1
		str = (char *)cfg->data;
   18932:	3608      	adds	r6, #8
		if (conn->id) {
   18934:	b162      	cbz	r2, 18950 <bt_gatt_disconnected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18936:	2104      	movs	r1, #4
   18938:	4638      	mov	r0, r7
   1893a:	f00d ffca 	bl	268d2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1893e:	462b      	mov	r3, r5
   18940:	2124      	movs	r1, #36	; 0x24
   18942:	4a28      	ldr	r2, [pc, #160]	; (189e4 <bt_gatt_disconnected+0x114>)
   18944:	9700      	str	r7, [sp, #0]
   18946:	1d38      	adds	r0, r7, #4
   18948:	f7f9 f9e8 	bl	11d1c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1894c:	7a23      	ldrb	r3, [r4, #8]
   1894e:	b93b      	cbnz	r3, 18960 <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   18950:	2300      	movs	r3, #0
   18952:	2124      	movs	r1, #36	; 0x24
   18954:	9300      	str	r3, [sp, #0]
   18956:	4a23      	ldr	r2, [pc, #140]	; (189e4 <bt_gatt_disconnected+0x114>)
   18958:	462b      	mov	r3, r5
   1895a:	1d38      	adds	r0, r7, #4
   1895c:	f7f9 f9de 	bl	11d1c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   18960:	4642      	mov	r2, r8
   18962:	4631      	mov	r1, r6
   18964:	1d38      	adds	r0, r7, #4
   18966:	f7f7 fa8f 	bl	fe88 <settings_save_one>
	if (err) {
   1896a:	b170      	cbz	r0, 1898a <bt_gatt_disconnected+0xba>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1896c:	466e      	mov	r6, sp
   1896e:	b088      	sub	sp, #32
   18970:	aa02      	add	r2, sp, #8
   18972:	4b1d      	ldr	r3, [pc, #116]	; (189e8 <bt_gatt_disconnected+0x118>)
   18974:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18978:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1897c:	2303      	movs	r3, #3
   1897e:	481b      	ldr	r0, [pc, #108]	; (189ec <bt_gatt_disconnected+0x11c>)
   18980:	f842 3f10 	str.w	r3, [r2, #16]!
   18984:	f011 f83d 	bl	29a02 <z_log_msg_static_create.constprop.0>
   18988:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1898a:	4629      	mov	r1, r5
   1898c:	7a20      	ldrb	r0, [r4, #8]
   1898e:	f00f ff36 	bl	287fe <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   18992:	b148      	cbz	r0, 189a8 <bt_gatt_disconnected+0xd8>
		struct addr_with_id addr_with_id = {
   18994:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   18996:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   1899a:	723b      	strb	r3, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1899c:	2001      	movs	r0, #1
   1899e:	4a14      	ldr	r2, [pc, #80]	; (189f0 <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   189a0:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   189a2:	1d3b      	adds	r3, r7, #4
   189a4:	f011 f8a4 	bl	29af0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   189a8:	4620      	mov	r0, r4
   189aa:	f7fe fa8d 	bl	16ec8 <find_cf_cfg>
	if (!cfg) {
   189ae:	4606      	mov	r6, r0
   189b0:	b138      	cbz	r0, 189c2 <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   189b2:	4629      	mov	r1, r5
   189b4:	7a20      	ldrb	r0, [r4, #8]
   189b6:	f00f ff22 	bl	287fe <bt_addr_le_is_bonded>
   189ba:	b940      	cbnz	r0, 189ce <bt_gatt_disconnected+0xfe>
		clear_cf_cfg(cfg);
   189bc:	4630      	mov	r0, r6
   189be:	f7fe fdb7 	bl	17530 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   189c2:	3728      	adds	r7, #40	; 0x28
   189c4:	46bd      	mov	sp, r7
   189c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   189ca:	4680      	mov	r8, r0
   189cc:	e7c0      	b.n	18950 <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   189ce:	4629      	mov	r1, r5
   189d0:	1c70      	adds	r0, r6, #1
   189d2:	f010 ff82 	bl	298da <bt_addr_le_copy>
}
   189d6:	e7f4      	b.n	189c2 <bt_gatt_disconnected+0xf2>
   189d8:	000176f1 	.word	0x000176f1
   189dc:	20009e18 	.word	0x20009e18
   189e0:	20009e20 	.word	0x20009e20
   189e4:	000317a4 	.word	0x000317a4
   189e8:	00031778 	.word	0x00031778
   189ec:	0002ccc0 	.word	0x0002ccc0
   189f0:	00017691 	.word	0x00017691

000189f4 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   189f4:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   189f6:	4b05      	ldr	r3, [pc, #20]	; (18a0c <smp_find+0x18>)
{
   189f8:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   189fa:	4618      	mov	r0, r3
   189fc:	f011 f904 	bl	29c08 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   18a00:	3b04      	subs	r3, #4
   18a02:	2800      	cmp	r0, #0
}
   18a04:	bf14      	ite	ne
   18a06:	4618      	movne	r0, r3
   18a08:	2000      	moveq	r0, #0
   18a0a:	bd08      	pop	{r3, pc}
   18a0c:	20009f24 	.word	0x20009f24

00018a10 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   18a10:	4b08      	ldr	r3, [pc, #32]	; (18a34 <latch_auth_cb+0x24>)
   18a12:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18a16:	681a      	ldr	r2, [r3, #0]
   18a18:	4b07      	ldr	r3, [pc, #28]	; (18a38 <latch_auth_cb+0x28>)
   18a1a:	e8d0 1fef 	ldaex	r1, [r0]
   18a1e:	4299      	cmp	r1, r3
   18a20:	d104      	bne.n	18a2c <latch_auth_cb+0x1c>
   18a22:	e8c0 2fec 	stlex	ip, r2, [r0]
   18a26:	f1bc 0f00 	cmp.w	ip, #0
   18a2a:	d1f6      	bne.n	18a1a <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18a2c:	e8d0 0faf 	lda	r0, [r0]
}
   18a30:	4770      	bx	lr
   18a32:	bf00      	nop
   18a34:	200215a8 	.word	0x200215a8
   18a38:	20009f20 	.word	0x20009f20

00018a3c <get_io_capa>:
{
   18a3c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18a3e:	f7ff ffe7 	bl	18a10 <latch_auth_cb>
	if (!smp_auth_cb) {
   18a42:	4603      	mov	r3, r0
   18a44:	b1c8      	cbz	r0, 18a7a <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   18a46:	e9d0 1200 	ldrd	r1, r2, [r0]
   18a4a:	b921      	cbnz	r1, 18a56 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   18a4c:	2a00      	cmp	r2, #0
   18a4e:	bf0c      	ite	eq
   18a50:	2003      	moveq	r0, #3
   18a52:	2002      	movne	r0, #2
   18a54:	e010      	b.n	18a78 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   18a56:	b132      	cbz	r2, 18a66 <get_io_capa+0x2a>
   18a58:	6883      	ldr	r3, [r0, #8]
   18a5a:	b913      	cbnz	r3, 18a62 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   18a5c:	4b09      	ldr	r3, [pc, #36]	; (18a84 <get_io_capa+0x48>)
   18a5e:	781b      	ldrb	r3, [r3, #0]
   18a60:	b933      	cbnz	r3, 18a70 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   18a62:	2004      	movs	r0, #4
   18a64:	e008      	b.n	18a78 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   18a66:	4907      	ldr	r1, [pc, #28]	; (18a84 <get_io_capa+0x48>)
   18a68:	7808      	ldrb	r0, [r1, #0]
   18a6a:	b128      	cbz	r0, 18a78 <get_io_capa+0x3c>
   18a6c:	689b      	ldr	r3, [r3, #8]
   18a6e:	b933      	cbnz	r3, 18a7e <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   18a70:	3a00      	subs	r2, #0
   18a72:	bf18      	it	ne
   18a74:	2201      	movne	r2, #1
   18a76:	0050      	lsls	r0, r2, #1
}
   18a78:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   18a7a:	2003      	movs	r0, #3
   18a7c:	e7fc      	b.n	18a78 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   18a7e:	2001      	movs	r0, #1
   18a80:	e7fa      	b.n	18a78 <get_io_capa+0x3c>
   18a82:	bf00      	nop
   18a84:	20022390 	.word	0x20022390

00018a88 <get_auth>:
{
   18a88:	b510      	push	{r4, lr}
	if (sc_supported) {
   18a8a:	4b0c      	ldr	r3, [pc, #48]	; (18abc <get_auth+0x34>)
   18a8c:	781b      	ldrb	r3, [r3, #0]
   18a8e:	b17b      	cbz	r3, 18ab0 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   18a90:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   18a94:	f7ff ffd2 	bl	18a3c <get_io_capa>
	if (bondable) {
   18a98:	4b09      	ldr	r3, [pc, #36]	; (18ac0 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   18a9a:	2803      	cmp	r0, #3
	if (bondable) {
   18a9c:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   18a9e:	bf0c      	ite	eq
   18aa0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   18aa4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   18aa8:	b12b      	cbz	r3, 18ab6 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   18aaa:	f044 0001 	orr.w	r0, r4, #1
}
   18aae:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   18ab0:	f001 0407 	and.w	r4, r1, #7
   18ab4:	e7ee      	b.n	18a94 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   18ab6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   18aba:	e7f8      	b.n	18aae <get_auth+0x26>
   18abc:	20022390 	.word	0x20022390
   18ac0:	200089f6 	.word	0x200089f6

00018ac4 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   18ac4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   18ac6:	4b06      	ldr	r3, [pc, #24]	; (18ae0 <bt_smp_pkey_ready.part.0+0x1c>)
   18ac8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18acc:	9305      	str	r3, [sp, #20]
   18ace:	2302      	movs	r3, #2
   18ad0:	4804      	ldr	r0, [pc, #16]	; (18ae4 <bt_smp_pkey_ready.part.0+0x20>)
   18ad2:	aa04      	add	r2, sp, #16
   18ad4:	9304      	str	r3, [sp, #16]
   18ad6:	f011 f8ef 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   18ada:	b007      	add	sp, #28
   18adc:	f85d fb04 	ldr.w	pc, [sp], #4
   18ae0:	000317b5 	.word	0x000317b5
   18ae4:	0002cd10 	.word	0x0002cd10

00018ae8 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18ae8:	b580      	push	{r7, lr}
   18aea:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   18aec:	b088      	sub	sp, #32
   18aee:	466a      	mov	r2, sp
   18af0:	4b07      	ldr	r3, [pc, #28]	; (18b10 <bt_smp_accept.part.0+0x28>)
   18af2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18af6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18afa:	2303      	movs	r3, #3
   18afc:	4805      	ldr	r0, [pc, #20]	; (18b14 <bt_smp_accept.part.0+0x2c>)
   18afe:	f842 3f10 	str.w	r3, [r2, #16]!
   18b02:	f011 f8d9 	bl	29cb8 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18b06:	f06f 000b 	mvn.w	r0, #11
   18b0a:	46bd      	mov	sp, r7
   18b0c:	bd80      	pop	{r7, pc}
   18b0e:	bf00      	nop
   18b10:	000317ce 	.word	0x000317ce
   18b14:	0002cd10 	.word	0x0002cd10

00018b18 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   18b18:	4b05      	ldr	r3, [pc, #20]	; (18b30 <bt_smp_accept+0x18>)
   18b1a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   18b1e:	b10a      	cbz	r2, 18b24 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18b20:	f7ff bfe2 	b.w	18ae8 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   18b24:	4803      	ldr	r0, [pc, #12]	; (18b34 <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   18b26:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   18b28:	6058      	str	r0, [r3, #4]
}
   18b2a:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   18b2c:	600b      	str	r3, [r1, #0]
}
   18b2e:	4770      	bx	lr
   18b30:	20009f20 	.word	0x20009f20
   18b34:	0002d924 	.word	0x0002d924

00018b38 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   18b38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   18b3a:	4b07      	ldr	r3, [pc, #28]	; (18b58 <smp_chan_get.part.0+0x20>)
   18b3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b40:	9305      	str	r3, [sp, #20]
   18b42:	2302      	movs	r3, #2
   18b44:	4805      	ldr	r0, [pc, #20]	; (18b5c <smp_chan_get.part.0+0x24>)
   18b46:	aa04      	add	r2, sp, #16
   18b48:	9304      	str	r3, [sp, #16]
   18b4a:	f011 f8b5 	bl	29cb8 <z_log_msg_static_create.constprop.0>
}
   18b4e:	2000      	movs	r0, #0
   18b50:	b007      	add	sp, #28
   18b52:	f85d fb04 	ldr.w	pc, [sp], #4
   18b56:	bf00      	nop
   18b58:	000317f3 	.word	0x000317f3
   18b5c:	0002cd10 	.word	0x0002cd10

00018b60 <smp_init>:
{
   18b60:	b538      	push	{r3, r4, r5, lr}
   18b62:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   18b64:	22ec      	movs	r2, #236	; 0xec
   18b66:	2100      	movs	r1, #0
   18b68:	f013 f962 	bl	2be30 <memset>
	if (bt_rand(smp->prnd, 16)) {
   18b6c:	2110      	movs	r1, #16
   18b6e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   18b72:	f7fb fd49 	bl	14608 <bt_rand>
   18b76:	4604      	mov	r4, r0
   18b78:	b948      	cbnz	r0, 18b8e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   18b7a:	2105      	movs	r1, #5
   18b7c:	4628      	mov	r0, r5
   18b7e:	f011 f8a9 	bl	29cd4 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18b82:	f7fb fdf5 	bl	14770 <bt_pub_key_get>
   18b86:	4b03      	ldr	r3, [pc, #12]	; (18b94 <smp_init+0x34>)
   18b88:	6018      	str	r0, [r3, #0]
}
   18b8a:	4620      	mov	r0, r4
   18b8c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18b8e:	2408      	movs	r4, #8
   18b90:	e7fb      	b.n	18b8a <smp_init+0x2a>
   18b92:	bf00      	nop
   18b94:	200216d0 	.word	0x200216d0

00018b98 <smp_dhkey_generate>:
{
   18b98:	b530      	push	{r4, r5, lr}
   18b9a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18b9c:	1d05      	adds	r5, r0, #4
   18b9e:	2108      	movs	r1, #8
   18ba0:	4628      	mov	r0, r5
{
   18ba2:	b087      	sub	sp, #28
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18ba4:	f011 f896 	bl	29cd4 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   18ba8:	490b      	ldr	r1, [pc, #44]	; (18bd8 <smp_dhkey_generate+0x40>)
   18baa:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18bae:	f7fb fded 	bl	1478c <bt_dh_key_gen>
	if (err) {
   18bb2:	b170      	cbz	r0, 18bd2 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18bb4:	2108      	movs	r1, #8
   18bb6:	4628      	mov	r0, r5
   18bb8:	f011 f84d 	bl	29c56 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   18bbc:	4b07      	ldr	r3, [pc, #28]	; (18bdc <smp_dhkey_generate+0x44>)
   18bbe:	4808      	ldr	r0, [pc, #32]	; (18be0 <smp_dhkey_generate+0x48>)
   18bc0:	9305      	str	r3, [sp, #20]
   18bc2:	2302      	movs	r3, #2
   18bc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18bc8:	aa04      	add	r2, sp, #16
   18bca:	9304      	str	r3, [sp, #16]
   18bcc:	f011 f874 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18bd0:	2008      	movs	r0, #8
}
   18bd2:	b007      	add	sp, #28
   18bd4:	bd30      	pop	{r4, r5, pc}
   18bd6:	bf00      	nop
   18bd8:	0002a0ad 	.word	0x0002a0ad
   18bdc:	0003180e 	.word	0x0003180e
   18be0:	0002cd10 	.word	0x0002cd10

00018be4 <smp_ident_info>:
{
   18be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18be6:	4605      	mov	r5, r0
   18be8:	460b      	mov	r3, r1
   18bea:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18bec:	210d      	movs	r1, #13
   18bee:	3004      	adds	r0, #4
   18bf0:	f011 f80a 	bl	29c08 <atomic_test_bit>
   18bf4:	b368      	cbz	r0, 18c52 <smp_ident_info+0x6e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   18bf6:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18bf8:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18bfc:	2002      	movs	r0, #2
   18bfe:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18c02:	4632      	mov	r2, r6
   18c04:	7a19      	ldrb	r1, [r3, #8]
   18c06:	f001 fd5b 	bl	1a6c0 <bt_keys_get_type>
		if (!keys) {
   18c0a:	b9b8      	cbnz	r0, 18c3c <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18c0c:	4630      	mov	r0, r6
   18c0e:	f7f8 ffaf 	bl	11b70 <bt_addr_le_str>
   18c12:	466c      	mov	r4, sp
   18c14:	b088      	sub	sp, #32
   18c16:	466a      	mov	r2, sp
   18c18:	4b11      	ldr	r3, [pc, #68]	; (18c60 <smp_ident_info+0x7c>)
   18c1a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18c1e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18c22:	f44f 7300 	mov.w	r3, #512	; 0x200
   18c26:	8393      	strh	r3, [r2, #28]
   18c28:	4b0e      	ldr	r3, [pc, #56]	; (18c64 <smp_ident_info+0x80>)
   18c2a:	480f      	ldr	r0, [pc, #60]	; (18c68 <smp_ident_info+0x84>)
   18c2c:	f842 3f10 	str.w	r3, [r2, #16]!
   18c30:	f011 f842 	bl	29cb8 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18c34:	2008      	movs	r0, #8
   18c36:	46a5      	mov	sp, r4
}
   18c38:	46bd      	mov	sp, r7
   18c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18c3c:	4622      	mov	r2, r4
   18c3e:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   18c42:	f104 0110 	add.w	r1, r4, #16
   18c46:	f852 0b04 	ldr.w	r0, [r2], #4
   18c4a:	428a      	cmp	r2, r1
   18c4c:	f843 0b04 	str.w	r0, [r3], #4
   18c50:	d1f9      	bne.n	18c46 <smp_ident_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   18c52:	4628      	mov	r0, r5
   18c54:	2109      	movs	r1, #9
   18c56:	f011 f83d 	bl	29cd4 <atomic_set_bit>
	return 0;
   18c5a:	2000      	movs	r0, #0
   18c5c:	e7ec      	b.n	18c38 <smp_ident_info+0x54>
   18c5e:	bf00      	nop
   18c60:	00031827 	.word	0x00031827
   18c64:	01000003 	.word	0x01000003
   18c68:	0002cd10 	.word	0x0002cd10

00018c6c <smp_encrypt_info>:
{
   18c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c6e:	4605      	mov	r5, r0
   18c70:	460b      	mov	r3, r1
   18c72:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18c74:	210d      	movs	r1, #13
   18c76:	3004      	adds	r0, #4
   18c78:	f010 ffc6 	bl	29c08 <atomic_test_bit>
   18c7c:	b368      	cbz	r0, 18cda <smp_encrypt_info+0x6e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   18c7e:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18c80:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18c84:	2004      	movs	r0, #4
   18c86:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18c8a:	4632      	mov	r2, r6
   18c8c:	7a19      	ldrb	r1, [r3, #8]
   18c8e:	f001 fd17 	bl	1a6c0 <bt_keys_get_type>
		if (!keys) {
   18c92:	b9b8      	cbnz	r0, 18cc4 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18c94:	4630      	mov	r0, r6
   18c96:	f7f8 ff6b 	bl	11b70 <bt_addr_le_str>
   18c9a:	466c      	mov	r4, sp
   18c9c:	b088      	sub	sp, #32
   18c9e:	466a      	mov	r2, sp
   18ca0:	4b11      	ldr	r3, [pc, #68]	; (18ce8 <smp_encrypt_info+0x7c>)
   18ca2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18ca6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18caa:	f44f 7300 	mov.w	r3, #512	; 0x200
   18cae:	8393      	strh	r3, [r2, #28]
   18cb0:	4b0e      	ldr	r3, [pc, #56]	; (18cec <smp_encrypt_info+0x80>)
   18cb2:	480f      	ldr	r0, [pc, #60]	; (18cf0 <smp_encrypt_info+0x84>)
   18cb4:	f842 3f10 	str.w	r3, [r2, #16]!
   18cb8:	f010 fffe 	bl	29cb8 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18cbc:	2008      	movs	r0, #8
   18cbe:	46a5      	mov	sp, r4
}
   18cc0:	46bd      	mov	sp, r7
   18cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18cc4:	4622      	mov	r2, r4
   18cc6:	f100 031a 	add.w	r3, r0, #26
   18cca:	f104 0110 	add.w	r1, r4, #16
   18cce:	f852 0b04 	ldr.w	r0, [r2], #4
   18cd2:	428a      	cmp	r2, r1
   18cd4:	f843 0b04 	str.w	r0, [r3], #4
   18cd8:	d1f9      	bne.n	18cce <smp_encrypt_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   18cda:	4628      	mov	r0, r5
   18cdc:	2107      	movs	r1, #7
   18cde:	f010 fff9 	bl	29cd4 <atomic_set_bit>
	return 0;
   18ce2:	2000      	movs	r0, #0
   18ce4:	e7ec      	b.n	18cc0 <smp_encrypt_info+0x54>
   18ce6:	bf00      	nop
   18ce8:	00031827 	.word	0x00031827
   18cec:	01000003 	.word	0x01000003
   18cf0:	0002cd10 	.word	0x0002cd10

00018cf4 <smp_send_pairing_confirm>:
{
   18cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18cf6:	b083      	sub	sp, #12
	switch (smp->method) {
   18cf8:	7a04      	ldrb	r4, [r0, #8]
{
   18cfa:	4605      	mov	r5, r0
	switch (smp->method) {
   18cfc:	2c02      	cmp	r4, #2
{
   18cfe:	af02      	add	r7, sp, #8
	switch (smp->method) {
   18d00:	d823      	bhi.n	18d4a <smp_send_pairing_confirm+0x56>
   18d02:	b144      	cbz	r4, 18d16 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18d04:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   18d08:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18d0c:	40dc      	lsrs	r4, r3
   18d0e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   18d12:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   18d16:	2103      	movs	r1, #3
   18d18:	4628      	mov	r0, r5
   18d1a:	f010 ffeb 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!buf) {
   18d1e:	4606      	mov	r6, r0
   18d20:	b320      	cbz	r0, 18d6c <smp_send_pairing_confirm+0x78>
   18d22:	2110      	movs	r1, #16
   18d24:	300c      	adds	r0, #12
   18d26:	f002 fa79 	bl	1b21c <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18d2a:	9000      	str	r0, [sp, #0]
   18d2c:	4818      	ldr	r0, [pc, #96]	; (18d90 <smp_send_pairing_confirm+0x9c>)
   18d2e:	4623      	mov	r3, r4
   18d30:	6800      	ldr	r0, [r0, #0]
   18d32:	f105 0227 	add.w	r2, r5, #39	; 0x27
   18d36:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18d3a:	f011 fa5d 	bl	2a1f8 <bt_crypto_f4>
   18d3e:	4604      	mov	r4, r0
   18d40:	b1d0      	cbz	r0, 18d78 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   18d42:	4630      	mov	r0, r6
   18d44:	f002 f948 	bl	1afd8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   18d48:	e010      	b.n	18d6c <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   18d4a:	2c03      	cmp	r4, #3
   18d4c:	d012      	beq.n	18d74 <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18d4e:	466d      	mov	r5, sp
   18d50:	b088      	sub	sp, #32
   18d52:	aa02      	add	r2, sp, #8
   18d54:	4b0f      	ldr	r3, [pc, #60]	; (18d94 <smp_send_pairing_confirm+0xa0>)
   18d56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (smp->method) {
   18d5a:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18d5e:	2303      	movs	r3, #3
   18d60:	480d      	ldr	r0, [pc, #52]	; (18d98 <smp_send_pairing_confirm+0xa4>)
   18d62:	f842 3f10 	str.w	r3, [r2, #16]!
   18d66:	f010 ffa7 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   18d6a:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   18d6c:	2008      	movs	r0, #8
}
   18d6e:	3704      	adds	r7, #4
   18d70:	46bd      	mov	sp, r7
   18d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   18d74:	2400      	movs	r4, #0
   18d76:	e7ce      	b.n	18d16 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   18d78:	4602      	mov	r2, r0
   18d7a:	4631      	mov	r1, r6
   18d7c:	4628      	mov	r0, r5
   18d7e:	f010 ff7e 	bl	29c7e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18d82:	1d28      	adds	r0, r5, #4
   18d84:	4621      	mov	r1, r4
   18d86:	f010 ff66 	bl	29c56 <atomic_clear_bit>
	return 0;
   18d8a:	4620      	mov	r0, r4
   18d8c:	e7ef      	b.n	18d6e <smp_send_pairing_confirm+0x7a>
   18d8e:	bf00      	nop
   18d90:	200216d0 	.word	0x200216d0
   18d94:	00031841 	.word	0x00031841
   18d98:	0002cd10 	.word	0x0002cd10

00018d9c <smp_public_key_periph>:
{
   18d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18da0:	b086      	sub	sp, #24
   18da2:	4604      	mov	r4, r0
   18da4:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18da6:	f7ff fe33 	bl	18a10 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18daa:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18dac:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18dae:	210e      	movs	r1, #14
   18db0:	4628      	mov	r0, r5
   18db2:	f010 ff29 	bl	29c08 <atomic_test_bit>
   18db6:	b9a0      	cbnz	r0, 18de2 <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   18db8:	4b54      	ldr	r3, [pc, #336]	; (18f0c <smp_public_key_periph+0x170>)
   18dba:	2220      	movs	r2, #32
   18dbc:	6819      	ldr	r1, [r3, #0]
   18dbe:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18dc2:	f012 ffeb 	bl	2bd9c <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18dc6:	b960      	cbnz	r0, 18de2 <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   18dc8:	4b51      	ldr	r3, [pc, #324]	; (18f10 <smp_public_key_periph+0x174>)
   18dca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18dce:	617b      	str	r3, [r7, #20]
   18dd0:	2302      	movs	r3, #2
   18dd2:	4850      	ldr	r0, [pc, #320]	; (18f14 <smp_public_key_periph+0x178>)
   18dd4:	613b      	str	r3, [r7, #16]
   18dd6:	f107 0210 	add.w	r2, r7, #16
   18dda:	f010 ff6d 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18dde:	2008      	movs	r0, #8
   18de0:	e034      	b.n	18e4c <smp_public_key_periph+0xb0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18de2:	210c      	movs	r1, #12
   18de4:	4620      	mov	r0, r4
   18de6:	f010 ff85 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18dea:	4680      	mov	r8, r0
   18dec:	2800      	cmp	r0, #0
   18dee:	d0f6      	beq.n	18dde <smp_public_key_periph+0x42>
   18df0:	2140      	movs	r1, #64	; 0x40
   18df2:	300c      	adds	r0, #12
   18df4:	f002 fa12 	bl	1b21c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18df8:	4b44      	ldr	r3, [pc, #272]	; (18f0c <smp_public_key_periph+0x170>)
   18dfa:	4602      	mov	r2, r0
   18dfc:	681b      	ldr	r3, [r3, #0]
   18dfe:	4601      	mov	r1, r0
   18e00:	f103 0020 	add.w	r0, r3, #32
   18e04:	f853 cb04 	ldr.w	ip, [r3], #4
   18e08:	4283      	cmp	r3, r0
   18e0a:	f841 cb04 	str.w	ip, [r1], #4
   18e0e:	d1f9      	bne.n	18e04 <smp_public_key_periph+0x68>
   18e10:	3220      	adds	r2, #32
   18e12:	f103 0120 	add.w	r1, r3, #32
   18e16:	f853 0b04 	ldr.w	r0, [r3], #4
   18e1a:	428b      	cmp	r3, r1
   18e1c:	f842 0b04 	str.w	r0, [r2], #4
   18e20:	d1f9      	bne.n	18e16 <smp_public_key_periph+0x7a>
	smp_send(smp, req_buf, NULL, NULL);
   18e22:	2200      	movs	r2, #0
   18e24:	4641      	mov	r1, r8
   18e26:	4620      	mov	r0, r4
   18e28:	f010 ff29 	bl	29c7e <smp_send.constprop.0>
	switch (smp->method) {
   18e2c:	7a23      	ldrb	r3, [r4, #8]
   18e2e:	2b05      	cmp	r3, #5
   18e30:	d85a      	bhi.n	18ee8 <smp_public_key_periph+0x14c>
   18e32:	e8df f003 	tbb	[pc, r3]
   18e36:	3b03      	.short	0x3b03
   18e38:	5659030f 	.word	0x5659030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18e3c:	2104      	movs	r1, #4
   18e3e:	4620      	mov	r0, r4
   18e40:	f010 ff48 	bl	29cd4 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18e44:	f7ff ff56 	bl	18cf4 <smp_send_pairing_confirm>
		if (err) {
   18e48:	2800      	cmp	r0, #0
   18e4a:	d03e      	beq.n	18eca <smp_public_key_periph+0x12e>
}
   18e4c:	3718      	adds	r7, #24
   18e4e:	46bd      	mov	sp, r7
   18e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18e54:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   18e56:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18e5a:	f7ff fdd9 	bl	18a10 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18e5e:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18e60:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18e62:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   18e66:	f7fb fbcf 	bl	14608 <bt_rand>
   18e6a:	2800      	cmp	r0, #0
   18e6c:	d1b7      	bne.n	18dde <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   18e6e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18e72:	4a29      	ldr	r2, [pc, #164]	; (18f18 <smp_public_key_periph+0x17c>)
	smp->passkey_round = 0U;
   18e74:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   18e78:	fbb3 f1f2 	udiv	r1, r3, r2
   18e7c:	fb02 3311 	mls	r3, r2, r1, r3
   18e80:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18e84:	b156      	cbz	r6, 18e9c <smp_public_key_periph+0x100>
   18e86:	6833      	ldr	r3, [r6, #0]
   18e88:	b143      	cbz	r3, 18e9c <smp_public_key_periph+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18e8a:	210b      	movs	r1, #11
   18e8c:	4628      	mov	r0, r5
   18e8e:	f010 ff21 	bl	29cd4 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   18e92:	4640      	mov	r0, r8
   18e94:	6833      	ldr	r3, [r6, #0]
   18e96:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18e9a:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18e9c:	2103      	movs	r1, #3
   18e9e:	4620      	mov	r0, r4
   18ea0:	f010 ff18 	bl	29cd4 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18ea4:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18ea6:	f010 ff15 	bl	29cd4 <atomic_set_bit>
		break;
   18eaa:	e00e      	b.n	18eca <smp_public_key_periph+0x12e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18eac:	4620      	mov	r0, r4
   18eae:	2103      	movs	r1, #3
   18eb0:	f010 ff10 	bl	29cd4 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18eb4:	210e      	movs	r1, #14
   18eb6:	f010 ff0d 	bl	29cd4 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18eba:	4628      	mov	r0, r5
   18ebc:	210a      	movs	r1, #10
   18ebe:	f010 ff09 	bl	29cd4 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   18ec2:	6873      	ldr	r3, [r6, #4]
   18ec4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18ec8:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   18eca:	4628      	mov	r0, r5
   18ecc:	2107      	movs	r1, #7
   18ece:	f010 ff01 	bl	29cd4 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18ed2:	2008      	movs	r0, #8
   18ed4:	f7ff fd8e 	bl	189f4 <smp_find>
   18ed8:	b9b0      	cbnz	r0, 18f08 <smp_public_key_periph+0x16c>
		return smp_dhkey_generate(smp);
   18eda:	4620      	mov	r0, r4
   18edc:	f7ff fe5c 	bl	18b98 <smp_dhkey_generate>
   18ee0:	e7b4      	b.n	18e4c <smp_public_key_periph+0xb0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18ee2:	2104      	movs	r1, #4
   18ee4:	4620      	mov	r0, r4
   18ee6:	e7de      	b.n	18ea6 <smp_public_key_periph+0x10a>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18ee8:	466c      	mov	r4, sp
   18eea:	b088      	sub	sp, #32
   18eec:	466a      	mov	r2, sp
   18eee:	490b      	ldr	r1, [pc, #44]	; (18f1c <smp_public_key_periph+0x180>)
   18ef0:	4808      	ldr	r0, [pc, #32]	; (18f14 <smp_public_key_periph+0x178>)
	switch (smp->method) {
   18ef2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18ef6:	2303      	movs	r3, #3
   18ef8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18efc:	f842 3f10 	str.w	r3, [r2, #16]!
   18f00:	f010 feda 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   18f04:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   18f06:	e76a      	b.n	18dde <smp_public_key_periph+0x42>
	return 0;
   18f08:	2000      	movs	r0, #0
   18f0a:	e79f      	b.n	18e4c <smp_public_key_periph+0xb0>
   18f0c:	200216d0 	.word	0x200216d0
   18f10:	0003185d 	.word	0x0003185d
   18f14:	0002cd10 	.word	0x0002cd10
   18f18:	000f4240 	.word	0x000f4240
   18f1c:	00031841 	.word	0x00031841

00018f20 <smp_public_key>:
{
   18f20:	b530      	push	{r4, r5, lr}
   18f22:	4604      	mov	r4, r0
   18f24:	460d      	mov	r5, r1
   18f26:	b087      	sub	sp, #28
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f28:	f7ff fd72 	bl	18a10 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18f2c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18f30:	4602      	mov	r2, r0
   18f32:	68eb      	ldr	r3, [r5, #12]
   18f34:	f103 0120 	add.w	r1, r3, #32
   18f38:	f853 5b04 	ldr.w	r5, [r3], #4
   18f3c:	428b      	cmp	r3, r1
   18f3e:	f842 5b04 	str.w	r5, [r2], #4
   18f42:	d1f9      	bne.n	18f38 <smp_public_key+0x18>
   18f44:	f104 0277 	add.w	r2, r4, #119	; 0x77
   18f48:	f103 0120 	add.w	r1, r3, #32
   18f4c:	f853 5b04 	ldr.w	r5, [r3], #4
   18f50:	428b      	cmp	r3, r1
   18f52:	f842 5b04 	str.w	r5, [r2], #4
   18f56:	d1f9      	bne.n	18f4c <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18f58:	f7fb fb74 	bl	14644 <bt_pub_key_is_debug>
   18f5c:	b940      	cbnz	r0, 18f70 <smp_public_key+0x50>
	if (!sc_public_key) {
   18f5e:	4b1c      	ldr	r3, [pc, #112]	; (18fd0 <smp_public_key+0xb0>)
   18f60:	681d      	ldr	r5, [r3, #0]
   18f62:	bb75      	cbnz	r5, 18fc2 <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18f64:	1d20      	adds	r0, r4, #4
   18f66:	2106      	movs	r1, #6
   18f68:	f010 feb4 	bl	29cd4 <atomic_set_bit>
	return 0;
   18f6c:	4628      	mov	r0, r5
		return 0;
   18f6e:	e026      	b.n	18fbe <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   18f70:	4b18      	ldr	r3, [pc, #96]	; (18fd4 <smp_public_key+0xb4>)
   18f72:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   18f76:	9305      	str	r3, [sp, #20]
   18f78:	2302      	movs	r3, #2
   18f7a:	4817      	ldr	r0, [pc, #92]	; (18fd8 <smp_public_key+0xb8>)
   18f7c:	aa04      	add	r2, sp, #16
   18f7e:	9304      	str	r3, [sp, #16]
   18f80:	f010 fe9a 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18f84:	210e      	movs	r1, #14
   18f86:	1d20      	adds	r0, r4, #4
   18f88:	f010 fea4 	bl	29cd4 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   18f8c:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   18f90:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18f94:	b933      	cbnz	r3, 18fa4 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18f96:	7a28      	ldrb	r0, [r5, #8]
   18f98:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18f9c:	f001 fa8e 	bl	1a4bc <bt_keys_get_addr>
   18fa0:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   18fa4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18fa8:	2b00      	cmp	r3, #0
   18faa:	d0d8      	beq.n	18f5e <smp_public_key+0x3e>
   18fac:	89da      	ldrh	r2, [r3, #14]
   18fae:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18fb2:	2a00      	cmp	r2, #0
   18fb4:	d0d3      	beq.n	18f5e <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18fb6:	7b5b      	ldrb	r3, [r3, #13]
   18fb8:	079b      	lsls	r3, r3, #30
   18fba:	d4d0      	bmi.n	18f5e <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18fbc:	2003      	movs	r0, #3
}
   18fbe:	b007      	add	sp, #28
   18fc0:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   18fc2:	4620      	mov	r0, r4
}
   18fc4:	b007      	add	sp, #28
   18fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   18fca:	f7ff bee7 	b.w	18d9c <smp_public_key_periph>
   18fce:	bf00      	nop
   18fd0:	200216d0 	.word	0x200216d0
   18fd4:	00031878 	.word	0x00031878
   18fd8:	0002cd10 	.word	0x0002cd10

00018fdc <smp_pairing_req>:
{
   18fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18fe0:	b087      	sub	sp, #28
   18fe2:	460d      	mov	r5, r1
   18fe4:	af00      	add	r7, sp, #0
   18fe6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18fe8:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18fec:	f7ff fd10 	bl	18a10 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   18ff0:	f8d5 900c 	ldr.w	r9, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18ff4:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18ff6:	f899 3003 	ldrb.w	r3, [r9, #3]
   18ffa:	3b07      	subs	r3, #7
   18ffc:	2b09      	cmp	r3, #9
   18ffe:	d904      	bls.n	1900a <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   19000:	2006      	movs	r0, #6
}
   19002:	371c      	adds	r7, #28
   19004:	46bd      	mov	sp, r7
   19006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1900a:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   1900e:	b15b      	cbz	r3, 19028 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19010:	1d25      	adds	r5, r4, #4
   19012:	210f      	movs	r1, #15
   19014:	4628      	mov	r0, r5
   19016:	f010 fdf7 	bl	29c08 <atomic_test_bit>
   1901a:	b980      	cbnz	r0, 1903e <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1901c:	4620      	mov	r0, r4
   1901e:	f7ff fd9f 	bl	18b60 <smp_init>
		if (ret) {
   19022:	b160      	cbz	r0, 1903e <smp_pairing_req+0x62>
			return ret;
   19024:	b2c0      	uxtb	r0, r0
   19026:	e7ec      	b.n	19002 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19028:	7a30      	ldrb	r0, [r6, #8]
   1902a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1902e:	f001 fa45 	bl	1a4bc <bt_keys_get_addr>
   19032:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   19036:	2800      	cmp	r0, #0
   19038:	d1ea      	bne.n	19010 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   1903a:	2008      	movs	r0, #8
   1903c:	e7e1      	b.n	19002 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1903e:	2301      	movs	r3, #1
   19040:	7263      	strb	r3, [r4, #9]
   19042:	f8d9 3000 	ldr.w	r3, [r9]
	rsp->auth_req = get_auth(smp, req->auth_req);
   19046:	4620      	mov	r0, r4
   19048:	f8c4 300a 	str.w	r3, [r4, #10]
   1904c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   19050:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   19052:	2302      	movs	r3, #2
   19054:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   19056:	f899 1002 	ldrb.w	r1, [r9, #2]
   1905a:	f7ff fd15 	bl	18a88 <get_auth>
   1905e:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   19060:	4620      	mov	r0, r4
   19062:	f7ff fceb 	bl	18a3c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   19066:	4bac      	ldr	r3, [pc, #688]	; (19318 <smp_pairing_req+0x33c>)
	rsp->io_capability = get_io_capa(smp);
   19068:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1906a:	781b      	ldrb	r3, [r3, #0]
   1906c:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1906e:	2310      	movs	r3, #16
   19070:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   19072:	f899 3004 	ldrb.w	r3, [r9, #4]
   19076:	f003 0303 	and.w	r3, r3, #3
   1907a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1907c:	f899 3005 	ldrb.w	r3, [r9, #5]
   19080:	f003 0301 	and.w	r3, r3, #1
   19084:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   19086:	7ce3      	ldrb	r3, [r4, #19]
   19088:	071b      	lsls	r3, r3, #28
   1908a:	d50d      	bpl.n	190a8 <smp_pairing_req+0xcc>
   1908c:	f899 3002 	ldrb.w	r3, [r9, #2]
   19090:	0718      	lsls	r0, r3, #28
   19092:	d509      	bpl.n	190a8 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   19094:	2105      	movs	r1, #5
   19096:	4628      	mov	r0, r5
   19098:	f010 fe1c 	bl	29cd4 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1909c:	7d63      	ldrb	r3, [r4, #21]
   1909e:	f003 0302 	and.w	r3, r3, #2
   190a2:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   190a4:	2300      	movs	r3, #0
   190a6:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   190a8:	7ce3      	ldrb	r3, [r4, #19]
   190aa:	0699      	lsls	r1, r3, #26
   190ac:	d507      	bpl.n	190be <smp_pairing_req+0xe2>
   190ae:	f899 3002 	ldrb.w	r3, [r9, #2]
   190b2:	069a      	lsls	r2, r3, #26
   190b4:	d503      	bpl.n	190be <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   190b6:	2114      	movs	r1, #20
   190b8:	4628      	mov	r0, r5
   190ba:	f010 fe0b 	bl	29cd4 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   190be:	7da3      	ldrb	r3, [r4, #22]
   190c0:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   190c4:	7d63      	ldrb	r3, [r4, #21]
   190c6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   190ca:	7ce3      	ldrb	r3, [r4, #19]
   190cc:	07db      	lsls	r3, r3, #31
   190ce:	d507      	bpl.n	190e0 <smp_pairing_req+0x104>
   190d0:	f899 3002 	ldrb.w	r3, [r9, #2]
   190d4:	07d8      	lsls	r0, r3, #31
   190d6:	d503      	bpl.n	190e0 <smp_pairing_req+0x104>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   190d8:	210d      	movs	r1, #13
   190da:	4628      	mov	r0, r5
   190dc:	f010 fdfa 	bl	29cd4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   190e0:	2103      	movs	r1, #3
   190e2:	4628      	mov	r0, r5
   190e4:	f010 fdf6 	bl	29cd4 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   190e8:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   190ea:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   190ee:	f010 fd8b 	bl	29c08 <atomic_test_bit>
   190f2:	bb40      	cbnz	r0, 19146 <smp_pairing_req+0x16a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   190f4:	f1b9 0f04 	cmp.w	r9, #4
   190f8:	d845      	bhi.n	19186 <smp_pairing_req+0x1aa>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   190fa:	7ae3      	ldrb	r3, [r4, #11]
   190fc:	7ca2      	ldrb	r2, [r4, #18]
   190fe:	4013      	ands	r3, r2
   19100:	07d9      	lsls	r1, r3, #31
   19102:	d43e      	bmi.n	19182 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19104:	7b21      	ldrb	r1, [r4, #12]
   19106:	7ce3      	ldrb	r3, [r4, #19]
   19108:	4319      	orrs	r1, r3
   1910a:	f011 0104 	ands.w	r1, r1, #4
   1910e:	d011      	beq.n	19134 <smp_pairing_req+0x158>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   19110:	4620      	mov	r0, r4
   19112:	f7ff fc93 	bl	18a3c <get_io_capa>
   19116:	4b81      	ldr	r3, [pc, #516]	; (1931c <smp_pairing_req+0x340>)
   19118:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1911c:	4499      	add	r9, r3
   1911e:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   19122:	2904      	cmp	r1, #4
   19124:	d106      	bne.n	19134 <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   19126:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1912a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1912c:	2b00      	cmp	r3, #0
   1912e:	bf14      	ite	ne
   19130:	2101      	movne	r1, #1
   19132:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   19134:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   19136:	4620      	mov	r0, r4
   19138:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   1913c:	f010 fd6a 	bl	29c14 <update_keys_check>
   19140:	bb18      	cbnz	r0, 1918a <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19142:	2003      	movs	r0, #3
   19144:	e75d      	b.n	19002 <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   19146:	7b23      	ldrb	r3, [r4, #12]
   19148:	7ce0      	ldrb	r0, [r4, #19]
   1914a:	ea03 0200 	and.w	r2, r3, r0
   1914e:	0712      	lsls	r2, r2, #28
   19150:	d506      	bpl.n	19160 <smp_pairing_req+0x184>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   19152:	7ae2      	ldrb	r2, [r4, #11]
   19154:	f894 c012 	ldrb.w	ip, [r4, #18]
   19158:	ea42 020c 	orr.w	r2, r2, ip
   1915c:	07d2      	lsls	r2, r2, #31
   1915e:	d4e9      	bmi.n	19134 <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19160:	f1b9 0f04 	cmp.w	r9, #4
   19164:	d80f      	bhi.n	19186 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19166:	ea43 0100 	orr.w	r1, r3, r0
   1916a:	f011 0104 	ands.w	r1, r1, #4
   1916e:	d0e1      	beq.n	19134 <smp_pairing_req+0x158>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   19170:	4620      	mov	r0, r4
   19172:	f7ff fc63 	bl	18a3c <get_io_capa>
   19176:	4b6a      	ldr	r3, [pc, #424]	; (19320 <smp_pairing_req+0x344>)
   19178:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1917c:	444b      	add	r3, r9
   1917e:	5c19      	ldrb	r1, [r3, r0]
   19180:	e7d8      	b.n	19134 <smp_pairing_req+0x158>
		return LEGACY_OOB;
   19182:	2106      	movs	r1, #6
   19184:	e7d6      	b.n	19134 <smp_pairing_req+0x158>
		return JUST_WORKS;
   19186:	2100      	movs	r1, #0
   19188:	e7d4      	b.n	19134 <smp_pairing_req+0x158>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1918a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1918e:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   19190:	2b03      	cmp	r3, #3
   19192:	d03e      	beq.n	19212 <smp_pairing_req+0x236>
   19194:	d82c      	bhi.n	191f0 <smp_pairing_req+0x214>
   19196:	3b01      	subs	r3, #1
   19198:	2b01      	cmp	r3, #1
   1919a:	f63f af4e 	bhi.w	1903a <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1919e:	2105      	movs	r1, #5
   191a0:	4628      	mov	r0, r5
   191a2:	f010 fd31 	bl	29c08 <atomic_test_bit>
   191a6:	2800      	cmp	r0, #0
   191a8:	f040 80c4 	bne.w	19334 <smp_pairing_req+0x358>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   191ac:	4620      	mov	r0, r4
   191ae:	f7ff fc2f 	bl	18a10 <latch_auth_cb>
   191b2:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   191b4:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   191b6:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   191ba:	f7ff fc29 	bl	18a10 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   191be:	f109 0190 	add.w	r1, r9, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   191c2:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   191c4:	f899 0008 	ldrb.w	r0, [r9, #8]
   191c8:	f001 fa3e 	bl	1a648 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   191cc:	7a23      	ldrb	r3, [r4, #8]
   191ce:	b320      	cbz	r0, 1921a <smp_pairing_req+0x23e>
   191d0:	7b42      	ldrb	r2, [r0, #13]
   191d2:	07d2      	lsls	r2, r2, #31
   191d4:	d521      	bpl.n	1921a <smp_pairing_req+0x23e>
   191d6:	bb03      	cbnz	r3, 1921a <smp_pairing_req+0x23e>
		LOG_ERR("JustWorks failed, authenticated keys present");
   191d8:	4b52      	ldr	r3, [pc, #328]	; (19324 <smp_pairing_req+0x348>)
   191da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   191de:	617b      	str	r3, [r7, #20]
   191e0:	2302      	movs	r3, #2
   191e2:	4851      	ldr	r0, [pc, #324]	; (19328 <smp_pairing_req+0x34c>)
   191e4:	613b      	str	r3, [r7, #16]
   191e6:	f107 0210 	add.w	r2, r7, #16
   191ea:	f010 fd65 	bl	29cb8 <z_log_msg_static_create.constprop.0>
	if (ret) {
   191ee:	e724      	b.n	1903a <smp_pairing_req+0x5e>
	switch (sec) {
   191f0:	2b04      	cmp	r3, #4
   191f2:	f47f af22 	bne.w	1903a <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   191f6:	7d23      	ldrb	r3, [r4, #20]
   191f8:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   191fa:	4293      	cmp	r3, r2
   191fc:	bf28      	it	cs
   191fe:	4613      	movcs	r3, r2
   19200:	2b10      	cmp	r3, #16
   19202:	f47f aefd 	bne.w	19000 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19206:	2105      	movs	r1, #5
   19208:	4628      	mov	r0, r5
   1920a:	f010 fcfd 	bl	29c08 <atomic_test_bit>
   1920e:	2800      	cmp	r0, #0
   19210:	d097      	beq.n	19142 <smp_pairing_req+0x166>
		if (smp->method == JUST_WORKS) {
   19212:	7a23      	ldrb	r3, [r4, #8]
   19214:	2b00      	cmp	r3, #0
   19216:	d1c2      	bne.n	1919e <smp_pairing_req+0x1c2>
   19218:	e793      	b.n	19142 <smp_pairing_req+0x166>
	switch (smp->method) {
   1921a:	2b06      	cmp	r3, #6
   1921c:	d85f      	bhi.n	192de <smp_pairing_req+0x302>
   1921e:	e8df f003 	tbb	[pc, r3]
   19222:	5617      	.short	0x5617
   19224:	5e5e5e2f 	.word	0x5e5e5e2f
   19228:	04          	.byte	0x04
   19229:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1922a:	2e00      	cmp	r6, #0
   1922c:	d067      	beq.n	192fe <smp_pairing_req+0x322>
   1922e:	68f3      	ldr	r3, [r6, #12]
   19230:	2b00      	cmp	r3, #0
   19232:	d064      	beq.n	192fe <smp_pairing_req+0x322>
			struct bt_conn_oob_info info = {
   19234:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19236:	210a      	movs	r1, #10
   19238:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1923a:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1923c:	f010 fd4a 	bl	29cd4 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   19240:	4639      	mov	r1, r7
   19242:	68f3      	ldr	r3, [r6, #12]
   19244:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19248:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1924a:	7a23      	ldrb	r3, [r4, #8]
   1924c:	2b00      	cmp	r3, #0
   1924e:	d158      	bne.n	19302 <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19250:	210f      	movs	r1, #15
   19252:	4628      	mov	r0, r5
   19254:	f010 fcd8 	bl	29c08 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19258:	2800      	cmp	r0, #0
   1925a:	d152      	bne.n	19302 <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1925c:	f1b8 0f00 	cmp.w	r8, #0
   19260:	d04f      	beq.n	19302 <smp_pairing_req+0x326>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   19262:	f8d8 3014 	ldr.w	r3, [r8, #20]
   19266:	2b00      	cmp	r3, #0
   19268:	d04b      	beq.n	19302 <smp_pairing_req+0x326>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1926a:	4628      	mov	r0, r5
   1926c:	210a      	movs	r1, #10
   1926e:	f010 fd31 	bl	29cd4 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   19272:	f8d8 3014 	ldr.w	r3, [r8, #20]
   19276:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1927a:	4798      	blx	r3
		return 0;
   1927c:	2000      	movs	r0, #0
   1927e:	e6c0      	b.n	19002 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   19280:	2104      	movs	r1, #4
   19282:	4638      	mov	r0, r7
   19284:	f7fb f9c0 	bl	14608 <bt_rand>
   19288:	2800      	cmp	r0, #0
   1928a:	f47f aed6 	bne.w	1903a <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1928e:	683b      	ldr	r3, [r7, #0]
   19290:	4a26      	ldr	r2, [pc, #152]	; (1932c <smp_pairing_req+0x350>)
   19292:	fbb3 f1f2 	udiv	r1, r3, r2
   19296:	fb02 3311 	mls	r3, r2, r1, r3
   1929a:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1929c:	b14e      	cbz	r6, 192b2 <smp_pairing_req+0x2d6>
   1929e:	6833      	ldr	r3, [r6, #0]
   192a0:	b13b      	cbz	r3, 192b2 <smp_pairing_req+0x2d6>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   192a2:	210b      	movs	r1, #11
   192a4:	4628      	mov	r0, r5
   192a6:	f010 fd15 	bl	29cd4 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   192aa:	4648      	mov	r0, r9
   192ac:	6833      	ldr	r3, [r6, #0]
   192ae:	6839      	ldr	r1, [r7, #0]
   192b0:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   192b2:	683b      	ldr	r3, [r7, #0]
	dst[1] = val >> 8;
   192b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   192b8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   192bc:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   192be:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   192c2:	0a1b      	lsrs	r3, r3, #8
   192c4:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   192c8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   192cc:	e7bd      	b.n	1924a <smp_pairing_req+0x26e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   192ce:	4628      	mov	r0, r5
   192d0:	210a      	movs	r1, #10
   192d2:	f010 fcff 	bl	29cd4 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   192d6:	4648      	mov	r0, r9
   192d8:	6873      	ldr	r3, [r6, #4]
   192da:	4798      	blx	r3
	if (ret) {
   192dc:	e7b5      	b.n	1924a <smp_pairing_req+0x26e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   192de:	466c      	mov	r4, sp
   192e0:	b088      	sub	sp, #32
   192e2:	466a      	mov	r2, sp
   192e4:	4912      	ldr	r1, [pc, #72]	; (19330 <smp_pairing_req+0x354>)
   192e6:	4810      	ldr	r0, [pc, #64]	; (19328 <smp_pairing_req+0x34c>)
	switch (smp->method) {
   192e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   192ec:	2303      	movs	r3, #3
   192ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   192f2:	f842 3f10 	str.w	r3, [r2, #16]!
   192f6:	f010 fcdf 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   192fa:	46a5      	mov	sp, r4
	if (ret) {
   192fc:	e69d      	b.n	1903a <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   192fe:	2002      	movs	r0, #2
   19300:	e67f      	b.n	19002 <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19302:	2103      	movs	r1, #3
   19304:	4620      	mov	r0, r4
   19306:	f010 fce5 	bl	29cd4 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1930a:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1930c:	f010 fce2 	bl	29cd4 <atomic_set_bit>
	return send_pairing_rsp(smp);
   19310:	f010 fd0f 	bl	29d32 <send_pairing_rsp>
   19314:	e675      	b.n	19002 <smp_pairing_req+0x26>
   19316:	bf00      	nop
   19318:	20022391 	.word	0x20022391
   1931c:	00031c00 	.word	0x00031c00
   19320:	00031be7 	.word	0x00031be7
   19324:	00031899 	.word	0x00031899
   19328:	0002cd10 	.word	0x0002cd10
   1932c:	000f4240 	.word	0x000f4240
   19330:	00031841 	.word	0x00031841
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   19334:	7a23      	ldrb	r3, [r4, #8]
   19336:	b993      	cbnz	r3, 1935e <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19338:	210f      	movs	r1, #15
   1933a:	4628      	mov	r0, r5
   1933c:	f010 fc64 	bl	29c08 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19340:	b968      	cbnz	r0, 1935e <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19342:	f1b8 0f00 	cmp.w	r8, #0
   19346:	d00a      	beq.n	1935e <smp_pairing_req+0x382>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   19348:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1934c:	b13b      	cbz	r3, 1935e <smp_pairing_req+0x382>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1934e:	4628      	mov	r0, r5
   19350:	210a      	movs	r1, #10
   19352:	f010 fcbf 	bl	29cd4 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   19356:	4630      	mov	r0, r6
   19358:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1935c:	e78d      	b.n	1927a <smp_pairing_req+0x29e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1935e:	210c      	movs	r1, #12
   19360:	4620      	mov	r0, r4
   19362:	e7d3      	b.n	1930c <smp_pairing_req+0x330>

00019364 <compute_and_check_and_send_periph_dhcheck>:
{
   19364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19368:	4604      	mov	r4, r0
   1936a:	b096      	sub	sp, #88	; 0x58
   1936c:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1936e:	f107 0520 	add.w	r5, r7, #32
   19372:	2210      	movs	r2, #16
   19374:	2100      	movs	r1, #0
   19376:	4628      	mov	r0, r5
   19378:	f012 fd5a 	bl	2be30 <memset>
	switch (smp->method) {
   1937c:	7a23      	ldrb	r3, [r4, #8]
   1937e:	2b05      	cmp	r3, #5
   19380:	d83a      	bhi.n	193f8 <compute_and_check_and_send_periph_dhcheck+0x94>
   19382:	e8df f003 	tbb	[pc, r3]
   19386:	0306      	.short	0x0306
   19388:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1938c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   19390:	623b      	str	r3, [r7, #32]
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   19392:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   19396:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1939a:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1939e:	e9cd 8201 	strd	r8, r2, [sp, #4]
   193a2:	f104 0937 	add.w	r9, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   193a6:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   193aa:	f104 0a27 	add.w	sl, r4, #39	; 0x27
   193ae:	9200      	str	r2, [sp, #0]
   193b0:	4649      	mov	r1, r9
   193b2:	4652      	mov	r2, sl
   193b4:	3397      	adds	r3, #151	; 0x97
   193b6:	f104 0097 	add.w	r0, r4, #151	; 0x97
   193ba:	f001 fb2f 	bl	1aa1c <bt_crypto_f5>
   193be:	b378      	cbz	r0, 19420 <compute_and_check_and_send_periph_dhcheck+0xbc>
		LOG_ERR("Calculate LTK failed");
   193c0:	4b4c      	ldr	r3, [pc, #304]	; (194f4 <compute_and_check_and_send_periph_dhcheck+0x190>)
   193c2:	647b      	str	r3, [r7, #68]	; 0x44
   193c4:	2302      	movs	r3, #2
   193c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   193ca:	484b      	ldr	r0, [pc, #300]	; (194f8 <compute_and_check_and_send_periph_dhcheck+0x194>)
   193cc:	643b      	str	r3, [r7, #64]	; 0x40
   193ce:	f107 0240 	add.w	r2, r7, #64	; 0x40
   193d2:	f010 fc71 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   193d6:	e01e      	b.n	19416 <compute_and_check_and_send_periph_dhcheck+0xb2>
		if (smp->oobd_remote) {
   193d8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   193dc:	2b00      	cmp	r3, #0
   193de:	d0d8      	beq.n	19392 <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   193e0:	462e      	mov	r6, r5
   193e2:	f103 0c10 	add.w	ip, r3, #16
   193e6:	4632      	mov	r2, r6
   193e8:	6818      	ldr	r0, [r3, #0]
   193ea:	6859      	ldr	r1, [r3, #4]
   193ec:	3308      	adds	r3, #8
   193ee:	c203      	stmia	r2!, {r0, r1}
   193f0:	4563      	cmp	r3, ip
   193f2:	4616      	mov	r6, r2
   193f4:	d1f7      	bne.n	193e6 <compute_and_check_and_send_periph_dhcheck+0x82>
   193f6:	e7cc      	b.n	19392 <compute_and_check_and_send_periph_dhcheck+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   193f8:	466c      	mov	r4, sp
   193fa:	b088      	sub	sp, #32
   193fc:	aa04      	add	r2, sp, #16
   193fe:	493f      	ldr	r1, [pc, #252]	; (194fc <compute_and_check_and_send_periph_dhcheck+0x198>)
   19400:	483d      	ldr	r0, [pc, #244]	; (194f8 <compute_and_check_and_send_periph_dhcheck+0x194>)
	switch (smp->method) {
   19402:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19406:	2303      	movs	r3, #3
   19408:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1940c:	f842 3f10 	str.w	r3, [r2, #16]!
   19410:	f010 fc52 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   19414:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19416:	2008      	movs	r0, #8
}
   19418:	3748      	adds	r7, #72	; 0x48
   1941a:	46bd      	mov	sp, r7
   1941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   19420:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   19424:	f107 0610 	add.w	r6, r7, #16
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   19428:	f103 0297 	add.w	r2, r3, #151	; 0x97
   1942c:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1942e:	9301      	str	r3, [sp, #4]
   19430:	f104 0311 	add.w	r3, r4, #17
   19434:	9202      	str	r2, [sp, #8]
   19436:	9300      	str	r3, [sp, #0]
   19438:	464a      	mov	r2, r9
   1943a:	462b      	mov	r3, r5
   1943c:	4651      	mov	r1, sl
   1943e:	4640      	mov	r0, r8
   19440:	9603      	str	r6, [sp, #12]
   19442:	f010 fefe 	bl	2a242 <bt_crypto_f6>
   19446:	b108      	cbz	r0, 1944c <compute_and_check_and_send_periph_dhcheck+0xe8>
		LOG_ERR("Calculate local DHKey check failed");
   19448:	4b2d      	ldr	r3, [pc, #180]	; (19500 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   1944a:	e7ba      	b.n	193c2 <compute_and_check_and_send_periph_dhcheck+0x5e>
	if (smp->method == LE_SC_OOB) {
   1944c:	7a23      	ldrb	r3, [r4, #8]
   1944e:	2b05      	cmp	r3, #5
   19450:	d10e      	bne.n	19470 <compute_and_check_and_send_periph_dhcheck+0x10c>
		if (smp->oobd_local) {
   19452:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   19456:	b1f9      	cbz	r1, 19498 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   19458:	460b      	mov	r3, r1
   1945a:	46ac      	mov	ip, r5
   1945c:	f101 0e10 	add.w	lr, r1, #16
   19460:	4662      	mov	r2, ip
   19462:	6818      	ldr	r0, [r3, #0]
   19464:	6859      	ldr	r1, [r3, #4]
   19466:	3308      	adds	r3, #8
   19468:	c203      	stmia	r2!, {r0, r1}
   1946a:	4573      	cmp	r3, lr
   1946c:	4694      	mov	ip, r2
   1946e:	d1f7      	bne.n	19460 <compute_and_check_and_send_periph_dhcheck+0xfc>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   19470:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   19474:	4649      	mov	r1, r9
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   19476:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1947a:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1947c:	9301      	str	r3, [sp, #4]
   1947e:	f104 030a 	add.w	r3, r4, #10
   19482:	9202      	str	r2, [sp, #8]
   19484:	9300      	str	r3, [sp, #0]
   19486:	4652      	mov	r2, sl
   19488:	462b      	mov	r3, r5
   1948a:	4640      	mov	r0, r8
   1948c:	9703      	str	r7, [sp, #12]
   1948e:	f010 fed8 	bl	2a242 <bt_crypto_f6>
   19492:	b130      	cbz	r0, 194a2 <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   19494:	4b1b      	ldr	r3, [pc, #108]	; (19504 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   19496:	e794      	b.n	193c2 <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
   19498:	2210      	movs	r2, #16
   1949a:	4628      	mov	r0, r5
   1949c:	f012 fcc8 	bl	2be30 <memset>
   194a0:	e7e6      	b.n	19470 <compute_and_check_and_send_periph_dhcheck+0x10c>
	if (memcmp(smp->e, re, 16)) {
   194a2:	2210      	movs	r2, #16
   194a4:	4639      	mov	r1, r7
   194a6:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   194aa:	f012 fc77 	bl	2bd9c <memcmp>
   194ae:	b9f8      	cbnz	r0, 194f0 <compute_and_check_and_send_periph_dhcheck+0x18c>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   194b0:	210d      	movs	r1, #13
   194b2:	4620      	mov	r0, r4
   194b4:	f010 fc1e 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!buf) {
   194b8:	4680      	mov	r8, r0
   194ba:	2800      	cmp	r0, #0
   194bc:	d0ab      	beq.n	19416 <compute_and_check_and_send_periph_dhcheck+0xb2>
   194be:	2110      	movs	r1, #16
   194c0:	300c      	adds	r0, #12
   194c2:	f001 feab 	bl	1b21c <net_buf_simple_add>
   194c6:	4603      	mov	r3, r0
   194c8:	4632      	mov	r2, r6
   194ca:	ca03      	ldmia	r2!, {r0, r1}
   194cc:	42aa      	cmp	r2, r5
   194ce:	6018      	str	r0, [r3, #0]
   194d0:	6059      	str	r1, [r3, #4]
   194d2:	4616      	mov	r6, r2
   194d4:	f103 0308 	add.w	r3, r3, #8
   194d8:	d1f6      	bne.n	194c8 <compute_and_check_and_send_periph_dhcheck+0x164>
	smp_send(smp, buf, NULL, NULL);
   194da:	2200      	movs	r2, #0
   194dc:	4641      	mov	r1, r8
   194de:	4620      	mov	r0, r4
   194e0:	f010 fbcd 	bl	29c7e <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   194e4:	1d20      	adds	r0, r4, #4
   194e6:	2101      	movs	r1, #1
   194e8:	f010 fbf4 	bl	29cd4 <atomic_set_bit>
	return 0;
   194ec:	2000      	movs	r0, #0
   194ee:	e793      	b.n	19418 <compute_and_check_and_send_periph_dhcheck+0xb4>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   194f0:	200b      	movs	r0, #11
   194f2:	e791      	b.n	19418 <compute_and_check_and_send_periph_dhcheck+0xb4>
   194f4:	000318c6 	.word	0x000318c6
   194f8:	0002cd10 	.word	0x0002cd10
   194fc:	00031841 	.word	0x00031841
   19500:	000318db 	.word	0x000318db
   19504:	000318fe 	.word	0x000318fe

00019508 <bt_smp_connected>:
{
   19508:	b538      	push	{r3, r4, r5, lr}
   1950a:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1950c:	4908      	ldr	r1, [pc, #32]	; (19530 <bt_smp_connected+0x28>)
   1950e:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   19512:	3094      	adds	r0, #148	; 0x94
   19514:	f009 f840 	bl	22598 <k_work_init_delayable>
	smp_reset(smp);
   19518:	4628      	mov	r0, r5
   1951a:	f010 fc84 	bl	29e26 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1951e:	4b05      	ldr	r3, [pc, #20]	; (19534 <bt_smp_connected+0x2c>)
   19520:	34c4      	adds	r4, #196	; 0xc4
   19522:	e8d4 2fef 	ldaex	r2, [r4]
   19526:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1952a:	2900      	cmp	r1, #0
   1952c:	d1f9      	bne.n	19522 <bt_smp_connected+0x1a>
}
   1952e:	bd38      	pop	{r3, r4, r5, pc}
   19530:	0001a239 	.word	0x0001a239
   19534:	20009f20 	.word	0x20009f20

00019538 <smp_pairing_confirm>:
{
   19538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1953a:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1953c:	68cd      	ldr	r5, [r1, #12]
{
   1953e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19540:	210b      	movs	r1, #11
   19542:	4630      	mov	r0, r6
{
   19544:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19546:	f010 fb86 	bl	29c56 <atomic_clear_bit>
   1954a:	462b      	mov	r3, r5
   1954c:	f104 0217 	add.w	r2, r4, #23
   19550:	f105 0110 	add.w	r1, r5, #16
   19554:	f853 0b04 	ldr.w	r0, [r3], #4
   19558:	428b      	cmp	r3, r1
   1955a:	f842 0b04 	str.w	r0, [r2], #4
   1955e:	d1f9      	bne.n	19554 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19560:	2105      	movs	r1, #5
   19562:	4630      	mov	r0, r6
   19564:	f010 fb50 	bl	29c08 <atomic_test_bit>
   19568:	b920      	cbnz	r0, 19574 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   1956a:	4620      	mov	r0, r4
   1956c:	f010 fcd1 	bl	29f12 <legacy_pairing_confirm>
}
   19570:	46bd      	mov	sp, r7
   19572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   19574:	7a23      	ldrb	r3, [r4, #8]
   19576:	2b01      	cmp	r3, #1
   19578:	d008      	beq.n	1958c <smp_pairing_confirm+0x54>
   1957a:	2b02      	cmp	r3, #2
   1957c:	d112      	bne.n	195a4 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1957e:	2104      	movs	r1, #4
   19580:	4620      	mov	r0, r4
   19582:	f010 fba7 	bl	29cd4 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   19586:	f7ff fbb5 	bl	18cf4 <smp_send_pairing_confirm>
   1958a:	e7f1      	b.n	19570 <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1958c:	210a      	movs	r1, #10
   1958e:	4630      	mov	r0, r6
   19590:	f010 fb3a 	bl	29c08 <atomic_test_bit>
   19594:	2800      	cmp	r0, #0
   19596:	d0f2      	beq.n	1957e <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   19598:	4630      	mov	r0, r6
   1959a:	2100      	movs	r1, #0
   1959c:	f010 fb9a 	bl	29cd4 <atomic_set_bit>
			return 0;
   195a0:	2000      	movs	r0, #0
   195a2:	e7e5      	b.n	19570 <smp_pairing_confirm+0x38>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   195a4:	466c      	mov	r4, sp
   195a6:	b088      	sub	sp, #32
   195a8:	466a      	mov	r2, sp
   195aa:	4907      	ldr	r1, [pc, #28]	; (195c8 <smp_pairing_confirm+0x90>)
   195ac:	4807      	ldr	r0, [pc, #28]	; (195cc <smp_pairing_confirm+0x94>)
	switch (smp->method) {
   195ae:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   195b2:	2303      	movs	r3, #3
   195b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   195b8:	f842 3f10 	str.w	r3, [r2, #16]!
   195bc:	f010 fb7c 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   195c0:	2008      	movs	r0, #8
   195c2:	46a5      	mov	sp, r4
   195c4:	e7d4      	b.n	19570 <smp_pairing_confirm+0x38>
   195c6:	bf00      	nop
   195c8:	00031841 	.word	0x00031841
   195cc:	0002cd10 	.word	0x0002cd10

000195d0 <smp_pairing_random>:
{
   195d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195d4:	b08e      	sub	sp, #56	; 0x38
   195d6:	4604      	mov	r4, r0
   195d8:	af04      	add	r7, sp, #16
   195da:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   195dc:	f7ff fa18 	bl	18a10 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   195e0:	f104 0837 	add.w	r8, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   195e4:	4605      	mov	r5, r0
   195e6:	4642      	mov	r2, r8
   195e8:	68f3      	ldr	r3, [r6, #12]
   195ea:	f103 0110 	add.w	r1, r3, #16
   195ee:	f853 0b04 	ldr.w	r0, [r3], #4
   195f2:	428b      	cmp	r3, r1
   195f4:	f842 0b04 	str.w	r0, [r2], #4
   195f8:	d1f9      	bne.n	195ee <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   195fa:	1d26      	adds	r6, r4, #4
   195fc:	2105      	movs	r1, #5
   195fe:	4630      	mov	r0, r6
   19600:	f010 fb02 	bl	29c08 <atomic_test_bit>
   19604:	2800      	cmp	r0, #0
   19606:	d150      	bne.n	196aa <smp_pairing_random+0xda>
	struct bt_conn *conn = smp->chan.chan.conn;
   19608:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1960c:	f104 0547 	add.w	r5, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   19610:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   19614:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19616:	9201      	str	r2, [sp, #4]
   19618:	9300      	str	r3, [sp, #0]
   1961a:	4641      	mov	r1, r8
   1961c:	4628      	mov	r0, r5
   1961e:	9702      	str	r7, [sp, #8]
   19620:	f104 0310 	add.w	r3, r4, #16
   19624:	f104 0209 	add.w	r2, r4, #9
   19628:	f010 fc18 	bl	29e5c <smp_c1>
	if (err) {
   1962c:	bb18      	cbnz	r0, 19676 <smp_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1962e:	2210      	movs	r2, #16
   19630:	4639      	mov	r1, r7
   19632:	f104 0017 	add.w	r0, r4, #23
   19636:	f012 fbb1 	bl	2bd9c <memcmp>
   1963a:	2800      	cmp	r0, #0
   1963c:	d176      	bne.n	1972c <smp_pairing_random+0x15c>
	memcpy(out, r2, 8);
   1963e:	463b      	mov	r3, r7
   19640:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   19644:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return bt_encrypt_le(k, out, out);
   19648:	463a      	mov	r2, r7
	memcpy(out, r2, 8);
   1964a:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1964c:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   19650:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   19654:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   19656:	4639      	mov	r1, r7
   19658:	4628      	mov	r0, r5
   1965a:	f00f fa96 	bl	28b8a <bt_encrypt_le>
		if (err) {
   1965e:	b178      	cbz	r0, 19680 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   19660:	4b63      	ldr	r3, [pc, #396]	; (197f0 <smp_pairing_random+0x220>)
		LOG_ERR("Calculate confirm failed");
   19662:	627b      	str	r3, [r7, #36]	; 0x24
   19664:	2302      	movs	r3, #2
   19666:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1966a:	4862      	ldr	r0, [pc, #392]	; (197f4 <smp_pairing_random+0x224>)
   1966c:	623b      	str	r3, [r7, #32]
   1966e:	f107 0220 	add.w	r2, r7, #32
   19672:	f010 fb21 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   19676:	2008      	movs	r0, #8
}
   19678:	3728      	adds	r7, #40	; 0x28
   1967a:	46bd      	mov	sp, r7
   1967c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19680:	463b      	mov	r3, r7
   19682:	462a      	mov	r2, r5
   19684:	f107 0c10 	add.w	ip, r7, #16
   19688:	461d      	mov	r5, r3
   1968a:	cd03      	ldmia	r5!, {r0, r1}
   1968c:	4565      	cmp	r5, ip
   1968e:	6010      	str	r0, [r2, #0]
   19690:	6051      	str	r1, [r2, #4]
   19692:	462b      	mov	r3, r5
   19694:	f102 0208 	add.w	r2, r2, #8
   19698:	d1f6      	bne.n	19688 <smp_pairing_random+0xb8>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1969a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1969c:	4630      	mov	r0, r6
   1969e:	f010 fb19 	bl	29cd4 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   196a2:	4620      	mov	r0, r4
   196a4:	f010 fb5f 	bl	29d66 <smp_send_pairing_random>
   196a8:	e7e6      	b.n	19678 <smp_pairing_random+0xa8>
	switch (smp->method) {
   196aa:	7a23      	ldrb	r3, [r4, #8]
   196ac:	2b05      	cmp	r3, #5
   196ae:	f200 808c 	bhi.w	197ca <smp_pairing_random+0x1fa>
   196b2:	e8df f003 	tbb	[pc, r3]
   196b6:	201a      	.short	0x201a
   196b8:	618a0320 	.word	0x618a0320
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   196bc:	f107 0310 	add.w	r3, r7, #16
   196c0:	494d      	ldr	r1, [pc, #308]	; (197f8 <smp_pairing_random+0x228>)
   196c2:	9300      	str	r3, [sp, #0]
   196c4:	4642      	mov	r2, r8
   196c6:	6809      	ldr	r1, [r1, #0]
   196c8:	f104 0327 	add.w	r3, r4, #39	; 0x27
   196cc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   196d0:	f001 fa0c 	bl	1aaec <bt_crypto_g2>
   196d4:	2800      	cmp	r0, #0
   196d6:	d1ce      	bne.n	19676 <smp_pairing_random+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   196d8:	210a      	movs	r1, #10
   196da:	4630      	mov	r0, r6
   196dc:	f010 fafa 	bl	29cd4 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   196e0:	68ab      	ldr	r3, [r5, #8]
   196e2:	6939      	ldr	r1, [r7, #16]
   196e4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   196e8:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   196ea:	210d      	movs	r1, #13
   196ec:	4620      	mov	r0, r4
   196ee:	f010 faf1 	bl	29cd4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   196f2:	2110      	movs	r1, #16
   196f4:	e7d2      	b.n	1969c <smp_pairing_random+0xcc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   196f6:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   196fa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   196fe:	493e      	ldr	r1, [pc, #248]	; (197f8 <smp_pairing_random+0x228>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19700:	40d3      	lsrs	r3, r2
   19702:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19706:	9700      	str	r7, [sp, #0]
   19708:	4642      	mov	r2, r8
   1970a:	6809      	ldr	r1, [r1, #0]
   1970c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19710:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19714:	f010 fd70 	bl	2a1f8 <bt_crypto_f4>
   19718:	b108      	cbz	r0, 1971e <smp_pairing_random+0x14e>
		LOG_ERR("Calculate confirm failed");
   1971a:	4b38      	ldr	r3, [pc, #224]	; (197fc <smp_pairing_random+0x22c>)
   1971c:	e7a1      	b.n	19662 <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1971e:	2210      	movs	r2, #16
   19720:	4639      	mov	r1, r7
   19722:	f104 0017 	add.w	r0, r4, #23
   19726:	f012 fb39 	bl	2bd9c <memcmp>
   1972a:	b108      	cbz	r0, 19730 <smp_pairing_random+0x160>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1972c:	2004      	movs	r0, #4
   1972e:	e7a3      	b.n	19678 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->allowed_cmds,
   19730:	2103      	movs	r1, #3
   19732:	4620      	mov	r0, r4
   19734:	f010 face 	bl	29cd4 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   19738:	f010 fb15 	bl	29d66 <smp_send_pairing_random>
		if (err) {
   1973c:	2800      	cmp	r0, #0
   1973e:	d19b      	bne.n	19678 <smp_pairing_random+0xa8>
		smp->passkey_round++;
   19740:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19744:	3301      	adds	r3, #1
   19746:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   19748:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1974a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1974e:	d109      	bne.n	19764 <smp_pairing_random+0x194>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19750:	210d      	movs	r1, #13
   19752:	4620      	mov	r0, r4
   19754:	f010 fabe 	bl	29cd4 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19758:	2110      	movs	r1, #16
   1975a:	4630      	mov	r0, r6
   1975c:	f010 faba 	bl	29cd4 <atomic_set_bit>
			return 0;
   19760:	2000      	movs	r0, #0
   19762:	e789      	b.n	19678 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   19764:	2110      	movs	r1, #16
   19766:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1976a:	f7fa ff4d 	bl	14608 <bt_rand>
   1976e:	3800      	subs	r0, #0
   19770:	bf18      	it	ne
   19772:	2001      	movne	r0, #1
   19774:	00c0      	lsls	r0, r0, #3
   19776:	e77f      	b.n	19678 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   19778:	2110      	movs	r1, #16
   1977a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1977e:	f7fa ff43 	bl	14608 <bt_rand>
   19782:	2800      	cmp	r0, #0
   19784:	f47f af77 	bne.w	19676 <smp_pairing_random+0xa6>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   19788:	b37d      	cbz	r5, 197ea <smp_pairing_random+0x21a>
   1978a:	68eb      	ldr	r3, [r5, #12]
   1978c:	b36b      	cbz	r3, 197ea <smp_pairing_random+0x21a>
			struct bt_conn_oob_info info = {
   1978e:	4b1c      	ldr	r3, [pc, #112]	; (19800 <smp_pairing_random+0x230>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   19790:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   19792:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   19794:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   19796:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   19798:	7ca3      	ldrb	r3, [r4, #18]
   1979a:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1979e:	d412      	bmi.n	197c6 <smp_pairing_random+0x1f6>
   197a0:	2b00      	cmp	r3, #0
   197a2:	bf14      	ite	ne
   197a4:	2301      	movne	r3, #1
   197a6:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   197a8:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   197aa:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   197ac:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
   197ae:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   197b2:	210c      	movs	r1, #12
   197b4:	f010 fa8e 	bl	29cd4 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   197b8:	68eb      	ldr	r3, [r5, #12]
   197ba:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   197be:	f107 0110 	add.w	r1, r7, #16
   197c2:	4798      	blx	r3
			return 0;
   197c4:	e7cc      	b.n	19760 <smp_pairing_random+0x190>
		if (rsp_oob_present) {
   197c6:	005b      	lsls	r3, r3, #1
   197c8:	e7ee      	b.n	197a8 <smp_pairing_random+0x1d8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   197ca:	466c      	mov	r4, sp
   197cc:	b088      	sub	sp, #32
   197ce:	aa04      	add	r2, sp, #16
   197d0:	490c      	ldr	r1, [pc, #48]	; (19804 <smp_pairing_random+0x234>)
   197d2:	4808      	ldr	r0, [pc, #32]	; (197f4 <smp_pairing_random+0x224>)
	switch (smp->method) {
   197d4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   197d8:	2303      	movs	r3, #3
   197da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   197de:	f842 3f10 	str.w	r3, [r2, #16]!
   197e2:	f010 fa69 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   197e6:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   197e8:	e745      	b.n	19676 <smp_pairing_random+0xa6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   197ea:	2002      	movs	r0, #2
   197ec:	e744      	b.n	19678 <smp_pairing_random+0xa8>
   197ee:	bf00      	nop
   197f0:	00031922 	.word	0x00031922
   197f4:	0002cd10 	.word	0x0002cd10
   197f8:	200216d0 	.word	0x200216d0
   197fc:	00031937 	.word	0x00031937
   19800:	0002ced2 	.word	0x0002ced2
   19804:	00031841 	.word	0x00031841

00019808 <bt_smp_start_security>:
{
   19808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1980c:	78c6      	ldrb	r6, [r0, #3]
{
   1980e:	4604      	mov	r4, r0
	switch (conn->role) {
   19810:	2e01      	cmp	r6, #1
   19812:	d005      	beq.n	19820 <bt_smp_start_security+0x18>
		return -EINVAL;
   19814:	f06f 0415 	mvn.w	r4, #21
}
   19818:	4620      	mov	r0, r4
   1981a:	b003      	add	sp, #12
   1981c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   19820:	f010 fa4d 	bl	29cbe <smp_chan_get>
	if (!smp) {
   19824:	4605      	mov	r5, r0
   19826:	2800      	cmp	r0, #0
   19828:	f000 80ac 	beq.w	19984 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1982c:	1d07      	adds	r7, r0, #4
   1982e:	2104      	movs	r1, #4
   19830:	4638      	mov	r0, r7
   19832:	f010 f9e9 	bl	29c08 <atomic_test_bit>
   19836:	2800      	cmp	r0, #0
   19838:	f040 80a7 	bne.w	1998a <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1983c:	2103      	movs	r1, #3
   1983e:	4638      	mov	r0, r7
   19840:	f010 f9e2 	bl	29c08 <atomic_test_bit>
   19844:	b110      	cbz	r0, 1984c <bt_smp_start_security+0x44>
		return -EBUSY;
   19846:	f06f 040f 	mvn.w	r4, #15
   1984a:	e7e5      	b.n	19818 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1984c:	4631      	mov	r1, r6
   1984e:	4638      	mov	r0, r7
   19850:	f010 f9da 	bl	29c08 <atomic_test_bit>
   19854:	2800      	cmp	r0, #0
   19856:	d1f6      	bne.n	19846 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19858:	4628      	mov	r0, r5
   1985a:	f7ff f8d9 	bl	18a10 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1985e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19862:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   19864:	7a9b      	ldrb	r3, [r3, #10]
   19866:	2b03      	cmp	r3, #3
   19868:	d042      	beq.n	198f0 <bt_smp_start_security+0xe8>
   1986a:	d832      	bhi.n	198d2 <bt_smp_start_security+0xca>
   1986c:	3b01      	subs	r3, #1
   1986e:	2b01      	cmp	r3, #1
   19870:	d948      	bls.n	19904 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   19872:	210b      	movs	r1, #11
   19874:	1d20      	adds	r0, r4, #4
   19876:	f010 f9c7 	bl	29c08 <atomic_test_bit>
   1987a:	2800      	cmp	r0, #0
   1987c:	d1ca      	bne.n	19814 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1987e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19882:	b983      	cbnz	r3, 198a6 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   19884:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   19888:	4632      	mov	r2, r6
   1988a:	2020      	movs	r0, #32
   1988c:	7a21      	ldrb	r1, [r4, #8]
   1988e:	f000 fe55 	bl	1a53c <bt_keys_find>
   19892:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   19896:	b930      	cbnz	r0, 198a6 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   19898:	4632      	mov	r2, r6
   1989a:	2004      	movs	r0, #4
   1989c:	7a21      	ldrb	r1, [r4, #8]
   1989e:	f000 fe4d 	bl	1a53c <bt_keys_find>
   198a2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   198a6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   198aa:	2b00      	cmp	r3, #0
   198ac:	d0b2      	beq.n	19814 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   198ae:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   198b0:	f012 0f24 	tst.w	r2, #36	; 0x24
   198b4:	d0ae      	beq.n	19814 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   198b6:	7aa1      	ldrb	r1, [r4, #10]
   198b8:	2902      	cmp	r1, #2
   198ba:	d923      	bls.n	19904 <bt_smp_start_security+0xfc>
   198bc:	7b58      	ldrb	r0, [r3, #13]
   198be:	07c0      	lsls	r0, r0, #31
   198c0:	d5a8      	bpl.n	19814 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   198c2:	2903      	cmp	r1, #3
   198c4:	d01e      	beq.n	19904 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   198c6:	0692      	lsls	r2, r2, #26
   198c8:	d5a4      	bpl.n	19814 <bt_smp_start_security+0xc>
   198ca:	7b1b      	ldrb	r3, [r3, #12]
   198cc:	2b10      	cmp	r3, #16
   198ce:	d1a1      	bne.n	19814 <bt_smp_start_security+0xc>
   198d0:	e018      	b.n	19904 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   198d2:	2b04      	cmp	r3, #4
   198d4:	d1cd      	bne.n	19872 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   198d6:	4628      	mov	r0, r5
   198d8:	f7ff f8b0 	bl	18a3c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   198dc:	2803      	cmp	r0, #3
   198de:	d104      	bne.n	198ea <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   198e0:	2e00      	cmp	r6, #0
   198e2:	d0c6      	beq.n	19872 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   198e4:	68f3      	ldr	r3, [r6, #12]
   198e6:	2b00      	cmp	r3, #0
   198e8:	d0c3      	beq.n	19872 <bt_smp_start_security+0x6a>
   198ea:	4b29      	ldr	r3, [pc, #164]	; (19990 <bt_smp_start_security+0x188>)
   198ec:	781b      	ldrb	r3, [r3, #0]
   198ee:	e007      	b.n	19900 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   198f0:	4628      	mov	r0, r5
   198f2:	f7ff f8a3 	bl	18a3c <get_io_capa>
   198f6:	2803      	cmp	r0, #3
   198f8:	d104      	bne.n	19904 <bt_smp_start_security+0xfc>
   198fa:	2e00      	cmp	r6, #0
   198fc:	d0b9      	beq.n	19872 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   198fe:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19900:	2b00      	cmp	r3, #0
   19902:	d0b6      	beq.n	19872 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   19904:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19908:	b13b      	cbz	r3, 1991a <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1990a:	4628      	mov	r0, r5
   1990c:	f7ff f928 	bl	18b60 <smp_init>
   19910:	4680      	mov	r8, r0
   19912:	b170      	cbz	r0, 19932 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   19914:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19918:	e77e      	b.n	19818 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1991a:	7a20      	ldrb	r0, [r4, #8]
   1991c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   19920:	f000 fdcc 	bl	1a4bc <bt_keys_get_addr>
   19924:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   19928:	2800      	cmp	r0, #0
   1992a:	d1ee      	bne.n	1990a <bt_smp_start_security+0x102>
			return -ENOMEM;
   1992c:	f06f 040b 	mvn.w	r4, #11
   19930:	e772      	b.n	19818 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   19932:	210b      	movs	r1, #11
   19934:	4628      	mov	r0, r5
   19936:	f010 f9dd 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1993a:	4606      	mov	r6, r0
   1993c:	2800      	cmp	r0, #0
   1993e:	d0e9      	beq.n	19914 <bt_smp_start_security+0x10c>
   19940:	2101      	movs	r1, #1
   19942:	300c      	adds	r0, #12
   19944:	f001 fc6a 	bl	1b21c <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   19948:	2109      	movs	r1, #9
   1994a:	4681      	mov	r9, r0
   1994c:	4628      	mov	r0, r5
   1994e:	f7ff f89b 	bl	18a88 <get_auth>
   19952:	4643      	mov	r3, r8
   19954:	f889 0000 	strb.w	r0, [r9]
   19958:	4632      	mov	r2, r6
   1995a:	4620      	mov	r0, r4
   1995c:	2106      	movs	r1, #6
   1995e:	f8cd 8000 	str.w	r8, [sp]
   19962:	f00f faa3 	bl	28eac <bt_l2cap_send_cb>
	if (err) {
   19966:	4604      	mov	r4, r0
   19968:	b118      	cbz	r0, 19972 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1996a:	4630      	mov	r0, r6
   1996c:	f001 fb34 	bl	1afd8 <net_buf_unref>
		return err;
   19970:	e752      	b.n	19818 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   19972:	4638      	mov	r0, r7
   19974:	210f      	movs	r1, #15
   19976:	f010 f9ad 	bl	29cd4 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1997a:	2101      	movs	r1, #1
   1997c:	4628      	mov	r0, r5
   1997e:	f010 f9a9 	bl	29cd4 <atomic_set_bit>
	return 0;
   19982:	e749      	b.n	19818 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   19984:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   19988:	e746      	b.n	19818 <bt_smp_start_security+0x10>
		return -EIO;
   1998a:	f06f 0404 	mvn.w	r4, #4
   1998e:	e743      	b.n	19818 <bt_smp_start_security+0x10>
   19990:	20022390 	.word	0x20022390

00019994 <smp_pairing_complete>:
{
   19994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19996:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19998:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1999c:	1d04      	adds	r4, r0, #4
	if (!status) {
   1999e:	bb61      	cbnz	r1, 199fa <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   199a0:	210d      	movs	r1, #13
   199a2:	4620      	mov	r0, r4
   199a4:	f010 f930 	bl	29c08 <atomic_test_bit>
		if (bond_flag) {
   199a8:	4607      	mov	r7, r0
   199aa:	b118      	cbz	r0, 199b4 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   199ac:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   199b0:	f000 ffbe 	bl	1a930 <bt_keys_store>
	return list->head;
   199b4:	4b36      	ldr	r3, [pc, #216]	; (19a90 <smp_pairing_complete+0xfc>)
   199b6:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   199b8:	b19b      	cbz	r3, 199e2 <smp_pairing_complete+0x4e>
	return node->next;
   199ba:	681c      	ldr	r4, [r3, #0]
   199bc:	b104      	cbz	r4, 199c0 <smp_pairing_complete+0x2c>
   199be:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   199c0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   199c4:	b113      	cbz	r3, 199cc <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   199c6:	4639      	mov	r1, r7
   199c8:	4628      	mov	r0, r5
   199ca:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   199cc:	b14c      	cbz	r4, 199e2 <smp_pairing_complete+0x4e>
   199ce:	4623      	mov	r3, r4
   199d0:	68e4      	ldr	r4, [r4, #12]
   199d2:	681b      	ldr	r3, [r3, #0]
   199d4:	b11c      	cbz	r4, 199de <smp_pairing_complete+0x4a>
   199d6:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   199d8:	2b00      	cmp	r3, #0
   199da:	d1f4      	bne.n	199c6 <smp_pairing_complete+0x32>
   199dc:	e7f7      	b.n	199ce <smp_pairing_complete+0x3a>
   199de:	2b00      	cmp	r3, #0
   199e0:	d1f1      	bne.n	199c6 <smp_pairing_complete+0x32>
	smp_reset(smp);
   199e2:	4630      	mov	r0, r6
   199e4:	f010 fa1f 	bl	29e26 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   199e8:	7a6a      	ldrb	r2, [r5, #9]
   199ea:	7aab      	ldrb	r3, [r5, #10]
   199ec:	429a      	cmp	r2, r3
   199ee:	d04d      	beq.n	19a8c <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   199f0:	4628      	mov	r0, r5
}
   199f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   199f6:	f7ff bf07 	b.w	19808 <bt_smp_start_security>
	switch (smp_err) {
   199fa:	3901      	subs	r1, #1
   199fc:	b2c9      	uxtb	r1, r1
   199fe:	290e      	cmp	r1, #14
   19a00:	bf96      	itet	ls
   19a02:	4b24      	ldrls	r3, [pc, #144]	; (19a94 <smp_pairing_complete+0x100>)
	if (!status) {
   19a04:	2709      	movhi	r7, #9
   19a06:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   19a08:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   19a0c:	b143      	cbz	r3, 19a20 <smp_pairing_complete+0x8c>
   19a0e:	7b1b      	ldrb	r3, [r3, #12]
   19a10:	bb33      	cbnz	r3, 19a60 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   19a12:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   19a16:	f000 fe77 	bl	1a708 <bt_keys_clear>
			conn->le.keys = NULL;
   19a1a:	2300      	movs	r3, #0
   19a1c:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19a20:	2102      	movs	r1, #2
   19a22:	4620      	mov	r0, r4
   19a24:	f010 f8f0 	bl	29c08 <atomic_test_bit>
   19a28:	b948      	cbnz	r0, 19a3e <smp_pairing_complete+0xaa>
	switch (err) {
   19a2a:	2f07      	cmp	r7, #7
   19a2c:	bf94      	ite	ls
   19a2e:	4b1a      	ldrls	r3, [pc, #104]	; (19a98 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19a30:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   19a32:	463a      	mov	r2, r7
   19a34:	4628      	mov	r0, r5
   19a36:	bf98      	it	ls
   19a38:	5dd9      	ldrbls	r1, [r3, r7]
   19a3a:	f7fb fce5 	bl	15408 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19a3e:	2103      	movs	r1, #3
   19a40:	4620      	mov	r0, r4
   19a42:	f010 f8e1 	bl	29c08 <atomic_test_bit>
   19a46:	2800      	cmp	r0, #0
   19a48:	d0cb      	beq.n	199e2 <smp_pairing_complete+0x4e>
	return list->head;
   19a4a:	4b11      	ldr	r3, [pc, #68]	; (19a90 <smp_pairing_complete+0xfc>)
   19a4c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19a4e:	2b00      	cmp	r3, #0
   19a50:	d0c7      	beq.n	199e2 <smp_pairing_complete+0x4e>
	return node->next;
   19a52:	681c      	ldr	r4, [r3, #0]
   19a54:	b104      	cbz	r4, 19a58 <smp_pairing_complete+0xc4>
   19a56:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   19a58:	f853 3c08 	ldr.w	r3, [r3, #-8]
   19a5c:	b94b      	cbnz	r3, 19a72 <smp_pairing_complete+0xde>
   19a5e:	e00b      	b.n	19a78 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   19a60:	2102      	movs	r1, #2
   19a62:	4620      	mov	r0, r4
   19a64:	f010 f8d0 	bl	29c08 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   19a68:	2800      	cmp	r0, #0
   19a6a:	d1d2      	bne.n	19a12 <smp_pairing_complete+0x7e>
   19a6c:	e7d8      	b.n	19a20 <smp_pairing_complete+0x8c>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19a6e:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   19a70:	b123      	cbz	r3, 19a7c <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   19a72:	4639      	mov	r1, r7
   19a74:	4628      	mov	r0, r5
   19a76:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19a78:	2c00      	cmp	r4, #0
   19a7a:	d0b2      	beq.n	199e2 <smp_pairing_complete+0x4e>
   19a7c:	4623      	mov	r3, r4
   19a7e:	68e4      	ldr	r4, [r4, #12]
   19a80:	685b      	ldr	r3, [r3, #4]
   19a82:	2c00      	cmp	r4, #0
   19a84:	d1f3      	bne.n	19a6e <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   19a86:	2b00      	cmp	r3, #0
   19a88:	d1f3      	bne.n	19a72 <smp_pairing_complete+0xde>
   19a8a:	e7aa      	b.n	199e2 <smp_pairing_complete+0x4e>
}
   19a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a8e:	bf00      	nop
   19a90:	200215a0 	.word	0x200215a0
   19a94:	00031bd8 	.word	0x00031bd8
   19a98:	00031bc7 	.word	0x00031bc7

00019a9c <smp_error>:
{
   19a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   19a9e:	1d03      	adds	r3, r0, #4
{
   19aa0:	4606      	mov	r6, r0
   19aa2:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   19aa4:	4618      	mov	r0, r3
   19aa6:	2102      	movs	r1, #2
{
   19aa8:	b089      	sub	sp, #36	; 0x24
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   19aaa:	f010 f8ad 	bl	29c08 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   19aae:	4604      	mov	r4, r0
   19ab0:	b120      	cbz	r0, 19abc <smp_error+0x20>
   19ab2:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   19ab6:	fab4 f484 	clz	r4, r4
   19aba:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19abc:	2103      	movs	r1, #3
   19abe:	4618      	mov	r0, r3
   19ac0:	f010 f8a2 	bl	29c08 <atomic_test_bit>
   19ac4:	b1b0      	cbz	r0, 19af4 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   19ac6:	4639      	mov	r1, r7
   19ac8:	4630      	mov	r0, r6
   19aca:	f7ff ff63 	bl	19994 <smp_pairing_complete>
	if (remote_already_completed) {
   19ace:	b1f4      	cbz	r4, 19b0e <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   19ad0:	4b1d      	ldr	r3, [pc, #116]	; (19b48 <smp_error+0xac>)
   19ad2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19ad6:	9307      	str	r3, [sp, #28]
   19ad8:	2302      	movs	r3, #2
   19ada:	481c      	ldr	r0, [pc, #112]	; (19b4c <smp_error+0xb0>)
   19adc:	aa06      	add	r2, sp, #24
   19ade:	9306      	str	r3, [sp, #24]
   19ae0:	f010 f8ea 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   19ae4:	2105      	movs	r1, #5
   19ae6:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19aea:	f00f f8da 	bl	28ca2 <bt_conn_disconnect>
		return 0;
   19aee:	2000      	movs	r0, #0
}
   19af0:	b009      	add	sp, #36	; 0x24
   19af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19af4:	2101      	movs	r1, #1
   19af6:	4618      	mov	r0, r3
   19af8:	f010 f886 	bl	29c08 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19afc:	2800      	cmp	r0, #0
   19afe:	d1e2      	bne.n	19ac6 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19b00:	210f      	movs	r1, #15
   19b02:	4618      	mov	r0, r3
   19b04:	f010 f880 	bl	29c08 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19b08:	2800      	cmp	r0, #0
   19b0a:	d1dc      	bne.n	19ac6 <smp_error+0x2a>
   19b0c:	e7df      	b.n	19ace <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   19b0e:	2105      	movs	r1, #5
   19b10:	4630      	mov	r0, r6
   19b12:	f010 f8ef 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!buf) {
   19b16:	4605      	mov	r5, r0
   19b18:	b190      	cbz	r0, 19b40 <smp_error+0xa4>
   19b1a:	2101      	movs	r1, #1
   19b1c:	300c      	adds	r0, #12
   19b1e:	f001 fb7d 	bl	1b21c <net_buf_simple_add>
	rsp->reason = reason;
   19b22:	7007      	strb	r7, [r0, #0]
   19b24:	9400      	str	r4, [sp, #0]
   19b26:	4623      	mov	r3, r4
   19b28:	462a      	mov	r2, r5
   19b2a:	2106      	movs	r1, #6
   19b2c:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19b30:	f00f f9bc 	bl	28eac <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   19b34:	2800      	cmp	r0, #0
   19b36:	d0da      	beq.n	19aee <smp_error+0x52>
		net_buf_unref(buf);
   19b38:	4628      	mov	r0, r5
   19b3a:	f001 fa4d 	bl	1afd8 <net_buf_unref>
   19b3e:	e7d6      	b.n	19aee <smp_error+0x52>
		return -ENOBUFS;
   19b40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19b44:	e7d4      	b.n	19af0 <smp_error+0x54>
   19b46:	bf00      	nop
   19b48:	00031950 	.word	0x00031950
   19b4c:	0002cd10 	.word	0x0002cd10

00019b50 <bt_smp_recv>:
{
   19b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b54:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19b56:	8a0b      	ldrh	r3, [r1, #16]
{
   19b58:	4680      	mov	r8, r0
   19b5a:	460d      	mov	r5, r1
   19b5c:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   19b5e:	b97b      	cbnz	r3, 19b80 <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   19b60:	4b44      	ldr	r3, [pc, #272]	; (19c74 <bt_smp_recv+0x124>)
   19b62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19b66:	617b      	str	r3, [r7, #20]
   19b68:	2302      	movs	r3, #2
   19b6a:	4843      	ldr	r0, [pc, #268]	; (19c78 <bt_smp_recv+0x128>)
   19b6c:	613b      	str	r3, [r7, #16]
   19b6e:	f107 0210 	add.w	r2, r7, #16
   19b72:	f010 f8a1 	bl	29cb8 <z_log_msg_static_create.constprop.0>
}
   19b76:	2000      	movs	r0, #0
   19b78:	3718      	adds	r7, #24
   19b7a:	46bd      	mov	sp, r7
   19b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19b80:	2101      	movs	r1, #1
   19b82:	f105 000c 	add.w	r0, r5, #12
   19b86:	f001 fb2b 	bl	1b1e0 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19b8a:	2104      	movs	r1, #4
   19b8c:	4606      	mov	r6, r0
   19b8e:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   19b92:	f010 f839 	bl	29c08 <atomic_test_bit>
   19b96:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   19b9a:	7831      	ldrb	r1, [r6, #0]
   19b9c:	b178      	cbz	r0, 19bbe <bt_smp_recv+0x6e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   19b9e:	466c      	mov	r4, sp
   19ba0:	b088      	sub	sp, #32
   19ba2:	466a      	mov	r2, sp
   19ba4:	4b35      	ldr	r3, [pc, #212]	; (19c7c <bt_smp_recv+0x12c>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19ba6:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19baa:	2303      	movs	r3, #3
   19bac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19bb0:	4831      	ldr	r0, [pc, #196]	; (19c78 <bt_smp_recv+0x128>)
   19bb2:	f842 3f10 	str.w	r3, [r2, #16]!
   19bb6:	f010 f87f 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   19bba:	46a5      	mov	sp, r4
		return 0;
   19bbc:	e7db      	b.n	19b76 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   19bbe:	290e      	cmp	r1, #14
   19bc0:	d904      	bls.n	19bcc <bt_smp_recv+0x7c>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19bc2:	466c      	mov	r4, sp
   19bc4:	b088      	sub	sp, #32
   19bc6:	466a      	mov	r2, sp
   19bc8:	4b2d      	ldr	r3, [pc, #180]	; (19c80 <bt_smp_recv+0x130>)
   19bca:	e7ec      	b.n	19ba6 <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   19bcc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19c84 <bt_smp_recv+0x134>
   19bd0:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   19bd4:	b99b      	cbnz	r3, 19bfe <bt_smp_recv+0xae>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   19bd6:	466d      	mov	r5, sp
   19bd8:	b088      	sub	sp, #32
   19bda:	466a      	mov	r2, sp
   19bdc:	4b2a      	ldr	r3, [pc, #168]	; (19c88 <bt_smp_recv+0x138>)
   19bde:	4826      	ldr	r0, [pc, #152]	; (19c78 <bt_smp_recv+0x128>)
   19be0:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19be4:	2303      	movs	r3, #3
   19be6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19bea:	f842 3f10 	str.w	r3, [r2, #16]!
   19bee:	f010 f863 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   19bf2:	2107      	movs	r1, #7
   19bf4:	46ad      	mov	sp, r5
		smp_error(smp, err);
   19bf6:	4620      	mov	r0, r4
   19bf8:	f7ff ff50 	bl	19a9c <smp_error>
   19bfc:	e7bb      	b.n	19b76 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   19bfe:	4620      	mov	r0, r4
   19c00:	f010 f8ff 	bl	29e02 <atomic_test_and_clear_bit>
   19c04:	7833      	ldrb	r3, [r6, #0]
   19c06:	b998      	cbnz	r0, 19c30 <bt_smp_recv+0xe0>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   19c08:	466d      	mov	r5, sp
   19c0a:	b088      	sub	sp, #32
   19c0c:	466a      	mov	r2, sp
   19c0e:	491f      	ldr	r1, [pc, #124]	; (19c8c <bt_smp_recv+0x13c>)
   19c10:	4819      	ldr	r0, [pc, #100]	; (19c78 <bt_smp_recv+0x128>)
   19c12:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19c16:	2303      	movs	r3, #3
   19c18:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19c1c:	f842 3f10 	str.w	r3, [r2, #16]!
   19c20:	f010 f84a 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   19c24:	7833      	ldrb	r3, [r6, #0]
   19c26:	46ad      	mov	sp, r5
   19c28:	2b05      	cmp	r3, #5
   19c2a:	d0a4      	beq.n	19b76 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19c2c:	2108      	movs	r1, #8
   19c2e:	e7e2      	b.n	19bf6 <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   19c30:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19c34:	8a29      	ldrh	r1, [r5, #16]
   19c36:	7912      	ldrb	r2, [r2, #4]
   19c38:	428a      	cmp	r2, r1
   19c3a:	d011      	beq.n	19c60 <bt_smp_recv+0x110>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19c3c:	466d      	mov	r5, sp
   19c3e:	b088      	sub	sp, #32
   19c40:	466a      	mov	r2, sp
   19c42:	61d3      	str	r3, [r2, #28]
   19c44:	2304      	movs	r3, #4
   19c46:	4812      	ldr	r0, [pc, #72]	; (19c90 <bt_smp_recv+0x140>)
   19c48:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19c4c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19c50:	4809      	ldr	r0, [pc, #36]	; (19c78 <bt_smp_recv+0x128>)
   19c52:	f842 3f10 	str.w	r3, [r2, #16]!
   19c56:	f010 f82f 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19c5a:	210a      	movs	r1, #10
   19c5c:	46ad      	mov	sp, r5
   19c5e:	e7ca      	b.n	19bf6 <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   19c60:	4629      	mov	r1, r5
   19c62:	4620      	mov	r0, r4
   19c64:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   19c68:	4798      	blx	r3
	if (err) {
   19c6a:	4601      	mov	r1, r0
   19c6c:	2800      	cmp	r0, #0
   19c6e:	d082      	beq.n	19b76 <bt_smp_recv+0x26>
   19c70:	e7c1      	b.n	19bf6 <bt_smp_recv+0xa6>
   19c72:	bf00      	nop
   19c74:	000319a8 	.word	0x000319a8
   19c78:	0002cd10 	.word	0x0002cd10
   19c7c:	000319c3 	.word	0x000319c3
   19c80:	000319f4 	.word	0x000319f4
   19c84:	0002d94c 	.word	0x0002d94c
   19c88:	00031a16 	.word	0x00031a16
   19c8c:	00031a30 	.word	0x00031a30
   19c90:	000312fc 	.word	0x000312fc

00019c94 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   19c94:	4b0c      	ldr	r3, [pc, #48]	; (19cc8 <bt_smp_pkey_ready+0x34>)
{
   19c96:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   19c98:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   19c9a:	b918      	cbnz	r0, 19ca4 <bt_smp_pkey_ready+0x10>
}
   19c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19ca0:	f7fe bf10 	b.w	18ac4 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   19ca4:	4809      	ldr	r0, [pc, #36]	; (19ccc <bt_smp_pkey_ready+0x38>)
   19ca6:	f007 fff3 	bl	21c90 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19caa:	4b09      	ldr	r3, [pc, #36]	; (19cd0 <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   19cac:	1f1c      	subs	r4, r3, #4
   19cae:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   19cb2:	065b      	lsls	r3, r3, #25
   19cb4:	d507      	bpl.n	19cc6 <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   19cb6:	4620      	mov	r0, r4
   19cb8:	f7ff f870 	bl	18d9c <smp_public_key_periph>
		if (err) {
   19cbc:	4601      	mov	r1, r0
   19cbe:	b110      	cbz	r0, 19cc6 <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   19cc0:	4620      	mov	r0, r4
   19cc2:	f7ff feeb 	bl	19a9c <smp_error>
}
   19cc6:	bd10      	pop	{r4, pc}
   19cc8:	200216d0 	.word	0x200216d0
   19ccc:	20008bdc 	.word	0x20008bdc
   19cd0:	20009f24 	.word	0x20009f24

00019cd4 <smp_ident_addr_info>:
{
   19cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19cd8:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19cda:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   19cde:	f8d1 800c 	ldr.w	r8, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19ce2:	f023 0302 	bic.w	r3, r3, #2
   19ce6:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   19cea:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19cee:	f898 3000 	ldrb.w	r3, [r8]
{
   19cf2:	4604      	mov	r4, r0
   19cf4:	af00      	add	r7, sp, #0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19cf6:	f106 0990 	add.w	r9, r6, #144	; 0x90
   19cfa:	b3ab      	cbz	r3, 19d68 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19cfc:	f898 3006 	ldrb.w	r3, [r8, #6]
   19d00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19d04:	2bc0      	cmp	r3, #192	; 0xc0
   19d06:	d02f      	beq.n	19d68 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   19d08:	4640      	mov	r0, r8
   19d0a:	f7f7 ff31 	bl	11b70 <bt_addr_le_str>
   19d0e:	466e      	mov	r6, sp
   19d10:	b088      	sub	sp, #32
   19d12:	466c      	mov	r4, sp
   19d14:	f44f 7a00 	mov.w	sl, #512	; 0x200
   19d18:	4625      	mov	r5, r4
   19d1a:	4b65      	ldr	r3, [pc, #404]	; (19eb0 <smp_ident_addr_info+0x1dc>)
   19d1c:	f8df 8194 	ldr.w	r8, [pc, #404]	; 19eb4 <smp_ident_addr_info+0x1e0>
   19d20:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19d24:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19d28:	f845 8f10 	str.w	r8, [r5, #16]!
   19d2c:	462a      	mov	r2, r5
   19d2e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19d32:	4861      	ldr	r0, [pc, #388]	; (19eb8 <smp_ident_addr_info+0x1e4>)
   19d34:	f00f ffc0 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19d38:	4648      	mov	r0, r9
   19d3a:	46b5      	mov	sp, r6
   19d3c:	f7f7 ff18 	bl	11b70 <bt_addr_le_str>
   19d40:	46a5      	mov	sp, r4
   19d42:	4b5e      	ldr	r3, [pc, #376]	; (19ebc <smp_ident_addr_info+0x1e8>)
   19d44:	462a      	mov	r2, r5
   19d46:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19d4a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19d4e:	485a      	ldr	r0, [pc, #360]	; (19eb8 <smp_ident_addr_info+0x1e4>)
   19d50:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19d54:	f8c4 8010 	str.w	r8, [r4, #16]
   19d58:	f00f ffae 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   19d5c:	200a      	movs	r0, #10
   19d5e:	46b5      	mov	sp, r6
}
   19d60:	3718      	adds	r7, #24
   19d62:	46bd      	mov	sp, r7
   19d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   19d68:	2207      	movs	r2, #7
   19d6a:	4641      	mov	r1, r8
   19d6c:	4648      	mov	r0, r9
   19d6e:	f012 f815 	bl	2bd9c <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   19d72:	b168      	cbz	r0, 19d90 <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   19d74:	4641      	mov	r1, r8
   19d76:	7a30      	ldrb	r0, [r6, #8]
   19d78:	f000 fc66 	bl	1a648 <bt_keys_find_addr>
		if (keys) {
   19d7c:	4605      	mov	r5, r0
   19d7e:	b138      	cbz	r0, 19d90 <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   19d80:	4601      	mov	r1, r0
   19d82:	4620      	mov	r0, r4
   19d84:	f00f ff46 	bl	29c14 <update_keys_check>
   19d88:	b320      	cbz	r0, 19dd4 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   19d8a:	4628      	mov	r0, r5
   19d8c:	f000 fcbc 	bl	1a708 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19d90:	210d      	movs	r1, #13
   19d92:	1d20      	adds	r0, r4, #4
   19d94:	f00f ff38 	bl	29c08 <atomic_test_bit>
   19d98:	2800      	cmp	r0, #0
   19d9a:	d078      	beq.n	19e8e <smp_ident_addr_info+0x1ba>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19d9c:	464a      	mov	r2, r9
   19d9e:	2002      	movs	r0, #2
   19da0:	7a31      	ldrb	r1, [r6, #8]
   19da2:	f000 fc8d 	bl	1a6c0 <bt_keys_get_type>
		if (!keys) {
   19da6:	4605      	mov	r5, r0
   19da8:	b9b0      	cbnz	r0, 19dd8 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19daa:	4648      	mov	r0, r9
   19dac:	f7f7 fee0 	bl	11b70 <bt_addr_le_str>
   19db0:	466c      	mov	r4, sp
   19db2:	b088      	sub	sp, #32
   19db4:	466a      	mov	r2, sp
   19db6:	4b42      	ldr	r3, [pc, #264]	; (19ec0 <smp_ident_addr_info+0x1ec>)
   19db8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19dbc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
   19dc4:	8393      	strh	r3, [r2, #28]
   19dc6:	4b3b      	ldr	r3, [pc, #236]	; (19eb4 <smp_ident_addr_info+0x1e0>)
   19dc8:	483b      	ldr	r0, [pc, #236]	; (19eb8 <smp_ident_addr_info+0x1e4>)
   19dca:	f842 3f10 	str.w	r3, [r2, #16]!
   19dce:	f00f ff73 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   19dd2:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   19dd4:	2008      	movs	r0, #8
   19dd6:	e7c3      	b.n	19d60 <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19dd8:	78f3      	ldrb	r3, [r6, #3]
   19dda:	bb9b      	cbnz	r3, 19e44 <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   19ddc:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19de0:	781a      	ldrb	r2, [r3, #0]
   19de2:	2a01      	cmp	r2, #1
   19de4:	d11e      	bne.n	19e24 <smp_ident_addr_info+0x150>
		if (bt_addr_le_is_rpa(dst)) {
   19de6:	799a      	ldrb	r2, [r3, #6]
   19de8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19dec:	2a40      	cmp	r2, #64	; 0x40
   19dee:	d119      	bne.n	19e24 <smp_ident_addr_info+0x150>
   19df0:	f8d3 2001 	ldr.w	r2, [r3, #1]
   19df4:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   19df8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   19dfc:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19dfe:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   19e02:	b17b      	cbz	r3, 19e24 <smp_ident_addr_info+0x150>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   19e04:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   19e08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19e0c:	2bc0      	cmp	r3, #192	; 0xc0
   19e0e:	d009      	beq.n	19e24 <smp_ident_addr_info+0x150>
				bt_addr_le_copy(&keys->addr, &req->addr);
   19e10:	4641      	mov	r1, r8
   19e12:	1c68      	adds	r0, r5, #1
   19e14:	f00f ff2a 	bl	29c6c <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   19e18:	4648      	mov	r0, r9
   19e1a:	f00f ff27 	bl	29c6c <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   19e1e:	4630      	mov	r0, r6
   19e20:	f7fb faac 	bl	1537c <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   19e24:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19e28:	079a      	lsls	r2, r3, #30
   19e2a:	d50e      	bpl.n	19e4a <smp_ident_addr_info+0x176>
   19e2c:	4925      	ldr	r1, [pc, #148]	; (19ec4 <smp_ident_addr_info+0x1f0>)
   19e2e:	f640 6363 	movw	r3, #3683	; 0xe63
   19e32:	4a25      	ldr	r2, [pc, #148]	; (19ec8 <smp_ident_addr_info+0x1f4>)
   19e34:	4825      	ldr	r0, [pc, #148]	; (19ecc <smp_ident_addr_info+0x1f8>)
   19e36:	f00c ff9c 	bl	26d72 <assert_print>
   19e3a:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19e3e:	4822      	ldr	r0, [pc, #136]	; (19ec8 <smp_ident_addr_info+0x1f4>)
   19e40:	f00c ff90 	bl	26d64 <assert_post_action>
			dst = &conn->le.init_addr;
   19e44:	f106 0397 	add.w	r3, r6, #151	; 0x97
   19e48:	e7ca      	b.n	19de0 <smp_ident_addr_info+0x10c>
	conflict = bt_id_find_conflict(new_bond);
   19e4a:	4628      	mov	r0, r5
   19e4c:	f7f9 fdf8 	bl	13a40 <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   19e50:	b160      	cbz	r0, 19e6c <smp_ident_addr_info+0x198>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   19e52:	4b1f      	ldr	r3, [pc, #124]	; (19ed0 <smp_ident_addr_info+0x1fc>)
   19e54:	4818      	ldr	r0, [pc, #96]	; (19eb8 <smp_ident_addr_info+0x1e4>)
   19e56:	617b      	str	r3, [r7, #20]
   19e58:	2302      	movs	r3, #2
   19e5a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19e5e:	613b      	str	r3, [r7, #16]
   19e60:	f107 0210 	add.w	r2, r7, #16
   19e64:	f00f ff28 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19e68:	2003      	movs	r0, #3
   19e6a:	e779      	b.n	19d60 <smp_ident_addr_info+0x8c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19e6c:	4628      	mov	r0, r5
   19e6e:	f7f9 fde7 	bl	13a40 <bt_id_find_conflict>
   19e72:	b148      	cbz	r0, 19e88 <smp_ident_addr_info+0x1b4>
   19e74:	4917      	ldr	r1, [pc, #92]	; (19ed4 <smp_ident_addr_info+0x200>)
   19e76:	f640 637f 	movw	r3, #3711	; 0xe7f
   19e7a:	4a13      	ldr	r2, [pc, #76]	; (19ec8 <smp_ident_addr_info+0x1f4>)
   19e7c:	4813      	ldr	r0, [pc, #76]	; (19ecc <smp_ident_addr_info+0x1f8>)
   19e7e:	f00c ff78 	bl	26d72 <assert_print>
   19e82:	f640 617f 	movw	r1, #3711	; 0xe7f
   19e86:	e7da      	b.n	19e3e <smp_ident_addr_info+0x16a>
	bt_id_add(new_bond);
   19e88:	4628      	mov	r0, r5
   19e8a:	f7f9 fde9 	bl	13a60 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19e8e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19e92:	075b      	lsls	r3, r3, #29
   19e94:	d503      	bpl.n	19e9e <smp_ident_addr_info+0x1ca>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19e96:	210a      	movs	r1, #10
   19e98:	4620      	mov	r0, r4
   19e9a:	f00f ff1b 	bl	29cd4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19e9e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19ea2:	b109      	cbz	r1, 19ea8 <smp_ident_addr_info+0x1d4>
	return 0;
   19ea4:	2000      	movs	r0, #0
   19ea6:	e75b      	b.n	19d60 <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   19ea8:	4620      	mov	r0, r4
   19eaa:	f7ff fd73 	bl	19994 <smp_pairing_complete>
   19eae:	e7f9      	b.n	19ea4 <smp_ident_addr_info+0x1d0>
   19eb0:	00031a4b 	.word	0x00031a4b
   19eb4:	01000003 	.word	0x01000003
   19eb8:	0002cd10 	.word	0x0002cd10
   19ebc:	00031b32 	.word	0x00031b32
   19ec0:	00031827 	.word	0x00031827
   19ec4:	00031a8e 	.word	0x00031a8e
   19ec8:	00031a5f 	.word	0x00031a5f
   19ecc:	0002dd81 	.word	0x0002dd81
   19ed0:	00031aa9 	.word	0x00031aa9
   19ed4:	00031ae4 	.word	0x00031ae4

00019ed8 <smp_central_ident>:
{
   19ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19edc:	460b      	mov	r3, r1
   19ede:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19ee0:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   19ee4:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19ee6:	210d      	movs	r1, #13
   19ee8:	3004      	adds	r0, #4
   19eea:	f00f fe8d 	bl	29c08 <atomic_test_bit>
   19eee:	b358      	cbz	r0, 19f48 <smp_central_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19ef0:	f108 0690 	add.w	r6, r8, #144	; 0x90
   19ef4:	4632      	mov	r2, r6
   19ef6:	2004      	movs	r0, #4
   19ef8:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   19efc:	68dd      	ldr	r5, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19efe:	f000 fbdf 	bl	1a6c0 <bt_keys_get_type>
		if (!keys) {
   19f02:	b9c0      	cbnz	r0, 19f36 <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19f04:	4630      	mov	r0, r6
   19f06:	f7f7 fe33 	bl	11b70 <bt_addr_le_str>
   19f0a:	466c      	mov	r4, sp
   19f0c:	b088      	sub	sp, #32
   19f0e:	466a      	mov	r2, sp
   19f10:	4b1a      	ldr	r3, [pc, #104]	; (19f7c <smp_central_ident+0xa4>)
   19f12:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19f16:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
   19f1e:	8393      	strh	r3, [r2, #28]
   19f20:	4b17      	ldr	r3, [pc, #92]	; (19f80 <smp_central_ident+0xa8>)
   19f22:	4818      	ldr	r0, [pc, #96]	; (19f84 <smp_central_ident+0xac>)
   19f24:	f842 3f10 	str.w	r3, [r2, #16]!
   19f28:	f00f fec6 	bl	29cb8 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19f2c:	2008      	movs	r0, #8
   19f2e:	46a5      	mov	sp, r4
}
   19f30:	46bd      	mov	sp, r7
   19f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f36:	462a      	mov	r2, r5
   19f38:	f832 3b02 	ldrh.w	r3, [r2], #2
   19f3c:	8303      	strh	r3, [r0, #24]
   19f3e:	f8d5 3002 	ldr.w	r3, [r5, #2]
   19f42:	6103      	str	r3, [r0, #16]
   19f44:	6853      	ldr	r3, [r2, #4]
   19f46:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   19f48:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19f4c:	f023 0201 	bic.w	r2, r3, #1
   19f50:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19f54:	079a      	lsls	r2, r3, #30
   19f56:	d508      	bpl.n	19f6a <smp_central_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19f58:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19f5a:	4620      	mov	r0, r4
   19f5c:	f00f feba 	bl	29cd4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19f60:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19f64:	b129      	cbz	r1, 19f72 <smp_central_ident+0x9a>
	return 0;
   19f66:	2000      	movs	r0, #0
   19f68:	e7e2      	b.n	19f30 <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19f6a:	075b      	lsls	r3, r3, #29
   19f6c:	d5f8      	bpl.n	19f60 <smp_central_ident+0x88>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19f6e:	210a      	movs	r1, #10
   19f70:	e7f3      	b.n	19f5a <smp_central_ident+0x82>
		smp_pairing_complete(smp, 0);
   19f72:	4620      	mov	r0, r4
   19f74:	f7ff fd0e 	bl	19994 <smp_pairing_complete>
   19f78:	e7f5      	b.n	19f66 <smp_central_ident+0x8e>
   19f7a:	bf00      	nop
   19f7c:	00031827 	.word	0x00031827
   19f80:	01000003 	.word	0x01000003
   19f84:	0002cd10 	.word	0x0002cd10

00019f88 <smp_pairing_failed>:
{
   19f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f8c:	460e      	mov	r6, r1
   19f8e:	af00      	add	r7, sp, #0
   19f90:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19f92:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19f96:	f7fe fd3b 	bl	18a10 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19f9a:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19f9c:	46e9      	mov	r9, sp
   19f9e:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19fa0:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19fa2:	466a      	mov	r2, sp
   19fa4:	7833      	ldrb	r3, [r6, #0]
   19fa6:	4914      	ldr	r1, [pc, #80]	; (19ff8 <smp_pairing_failed+0x70>)
   19fa8:	4814      	ldr	r0, [pc, #80]	; (19ffc <smp_pairing_failed+0x74>)
   19faa:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19fae:	2303      	movs	r3, #3
   19fb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19fb4:	f842 3f10 	str.w	r3, [r2, #16]!
   19fb8:	f00f fe7e 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   19fbc:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19fbe:	f104 0904 	add.w	r9, r4, #4
   19fc2:	210a      	movs	r1, #10
   19fc4:	4648      	mov	r0, r9
   19fc6:	f00f ff1c 	bl	29e02 <atomic_test_and_clear_bit>
   19fca:	b140      	cbz	r0, 19fde <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19fcc:	b975      	cbnz	r5, 19fec <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   19fce:	4620      	mov	r0, r4
   19fd0:	7831      	ldrb	r1, [r6, #0]
   19fd2:	f7ff fcdf 	bl	19994 <smp_pairing_complete>
}
   19fd6:	2000      	movs	r0, #0
   19fd8:	46bd      	mov	sp, r7
   19fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   19fde:	210b      	movs	r1, #11
   19fe0:	4648      	mov	r0, r9
   19fe2:	f00f ff0e 	bl	29e02 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19fe6:	2800      	cmp	r0, #0
   19fe8:	d1f0      	bne.n	19fcc <smp_pairing_failed+0x44>
   19fea:	e7f0      	b.n	19fce <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19fec:	692b      	ldr	r3, [r5, #16]
   19fee:	2b00      	cmp	r3, #0
   19ff0:	d0ed      	beq.n	19fce <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   19ff2:	4640      	mov	r0, r8
   19ff4:	4798      	blx	r3
   19ff6:	e7ea      	b.n	19fce <smp_pairing_failed+0x46>
   19ff8:	00031b03 	.word	0x00031b03
   19ffc:	0002cd10 	.word	0x0002cd10

0001a000 <bt_smp_encrypt_change>:
{
   1a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a004:	b08f      	sub	sp, #60	; 0x3c
	struct bt_conn *conn = chan->conn;
   1a006:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a008:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1a00c:	4604      	mov	r4, r0
   1a00e:	4688      	mov	r8, r1
   1a010:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a012:	2101      	movs	r1, #1
   1a014:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   1a016:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a01a:	f00f fef2 	bl	29e02 <atomic_test_and_clear_bit>
   1a01e:	b338      	cbz	r0, 1a070 <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   1a020:	f1b8 0f00 	cmp.w	r8, #0
   1a024:	d019      	beq.n	1a05a <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a026:	2103      	movs	r1, #3
   1a028:	4630      	mov	r0, r6
   1a02a:	f00f fded 	bl	29c08 <atomic_test_bit>
   1a02e:	b1f8      	cbz	r0, 1a070 <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   1a030:	4640      	mov	r0, r8
   1a032:	f7f8 fee5 	bl	12e00 <bt_security_err_get>
	switch (auth_err) {
   1a036:	3801      	subs	r0, #1
   1a038:	b2c0      	uxtb	r0, r0
   1a03a:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1a03c:	bf8c      	ite	hi
   1a03e:	2400      	movhi	r4, #0
   1a040:	4b75      	ldrls	r3, [pc, #468]	; (1a218 <bt_smp_encrypt_change+0x218>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1a042:	f04f 0102 	mov.w	r1, #2
   1a046:	bf98      	it	ls
   1a048:	5c1c      	ldrbls	r4, [r3, r0]
   1a04a:	4630      	mov	r0, r6
   1a04c:	f00f fe42 	bl	29cd4 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1a050:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1a052:	4628      	mov	r0, r5
   1a054:	f7ff fc9e 	bl	19994 <smp_pairing_complete>
   1a058:	e00a      	b.n	1a070 <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   1a05a:	f899 300b 	ldrb.w	r3, [r9, #11]
   1a05e:	b13b      	cbz	r3, 1a070 <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a060:	2103      	movs	r1, #3
   1a062:	4630      	mov	r0, r6
   1a064:	f00f fdd0 	bl	29c08 <atomic_test_bit>
   1a068:	b930      	cbnz	r0, 1a078 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   1a06a:	4628      	mov	r0, r5
   1a06c:	f00f fedb 	bl	29e26 <smp_reset>
}
   1a070:	373c      	adds	r7, #60	; 0x3c
   1a072:	46bd      	mov	sp, r7
   1a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a078:	2105      	movs	r1, #5
   1a07a:	4630      	mov	r0, r6
   1a07c:	f00f fdc4 	bl	29c08 <atomic_test_bit>
   1a080:	b1b8      	cbz	r0, 1a0b2 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1a082:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1a086:	071a      	lsls	r2, r3, #28
   1a088:	d507      	bpl.n	1a09a <bt_smp_encrypt_change+0x9a>
   1a08a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1a08e:	071b      	lsls	r3, r3, #28
   1a090:	d503      	bpl.n	1a09a <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1a092:	2111      	movs	r1, #17
   1a094:	4630      	mov	r0, r6
   1a096:	f00f fe1d 	bl	29cd4 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1a09a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1a09e:	f023 0308 	bic.w	r3, r3, #8
   1a0a2:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1a0a6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1a0aa:	f023 0308 	bic.w	r3, r3, #8
   1a0ae:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1a0b2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1a0b6:	07d8      	lsls	r0, r3, #31
   1a0b8:	d522      	bpl.n	1a100 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1a0ba:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a0bc:	4628      	mov	r0, r5
   1a0be:	f00f fe09 	bl	29cd4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1a0c2:	2102      	movs	r1, #2
   1a0c4:	4630      	mov	r0, r6
   1a0c6:	f00f fe05 	bl	29cd4 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1a0ca:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1a0cc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1a0d0:	b9f2      	cbnz	r2, 1a110 <bt_smp_encrypt_change+0x110>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1a0d2:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1a0d6:	f7f7 fd4b 	bl	11b70 <bt_addr_le_str>
   1a0da:	466c      	mov	r4, sp
   1a0dc:	b088      	sub	sp, #32
   1a0de:	466a      	mov	r2, sp
   1a0e0:	4b4e      	ldr	r3, [pc, #312]	; (1a21c <bt_smp_encrypt_change+0x21c>)
   1a0e2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a0e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a0ea:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a0ee:	8393      	strh	r3, [r2, #28]
   1a0f0:	4b4b      	ldr	r3, [pc, #300]	; (1a220 <bt_smp_encrypt_change+0x220>)
   1a0f2:	484c      	ldr	r0, [pc, #304]	; (1a224 <bt_smp_encrypt_change+0x224>)
   1a0f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a0f8:	f00f fdde 	bl	29cb8 <z_log_msg_static_create.constprop.0>
   1a0fc:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1a0fe:	e7b7      	b.n	1a070 <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1a100:	0799      	lsls	r1, r3, #30
   1a102:	d501      	bpl.n	1a108 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1a104:	2108      	movs	r1, #8
   1a106:	e7d9      	b.n	1a0bc <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a108:	075a      	lsls	r2, r3, #29
   1a10a:	d5da      	bpl.n	1a0c2 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a10c:	210a      	movs	r1, #10
   1a10e:	e7d5      	b.n	1a0bc <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a110:	2105      	movs	r1, #5
   1a112:	f00f fd79 	bl	29c08 <atomic_test_bit>
   1a116:	b9c0      	cbnz	r0, 1a14a <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1a118:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1a11c:	07db      	lsls	r3, r3, #31
   1a11e:	d514      	bpl.n	1a14a <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1a120:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a122:	211a      	movs	r1, #26
   1a124:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   1a128:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a12c:	f7fa fa6c 	bl	14608 <bt_rand>
   1a130:	4682      	mov	sl, r0
   1a132:	b178      	cbz	r0, 1a154 <bt_smp_encrypt_change+0x154>
			LOG_ERR("Unable to get random bytes");
   1a134:	4b3c      	ldr	r3, [pc, #240]	; (1a228 <bt_smp_encrypt_change+0x228>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a136:	617b      	str	r3, [r7, #20]
   1a138:	2302      	movs	r3, #2
   1a13a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a13e:	4839      	ldr	r0, [pc, #228]	; (1a224 <bt_smp_encrypt_change+0x224>)
   1a140:	613b      	str	r3, [r7, #16]
   1a142:	f107 0210 	add.w	r2, r7, #16
   1a146:	f00f fdb7 	bl	29cb8 <z_log_msg_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1a14a:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1a14e:	2900      	cmp	r1, #0
   1a150:	d18e      	bne.n	1a070 <bt_smp_encrypt_change+0x70>
   1a152:	e77e      	b.n	1a052 <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1a154:	2106      	movs	r1, #6
   1a156:	4628      	mov	r0, r5
   1a158:	f00f fdcc 	bl	29cf4 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a15c:	4681      	mov	r9, r0
   1a15e:	b908      	cbnz	r0, 1a164 <bt_smp_encrypt_change+0x164>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a160:	4b32      	ldr	r3, [pc, #200]	; (1a22c <bt_smp_encrypt_change+0x22c>)
   1a162:	e7e8      	b.n	1a136 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1a164:	2110      	movs	r1, #16
   1a166:	300c      	adds	r0, #12
   1a168:	f001 f858 	bl	1b21c <net_buf_simple_add>
   1a16c:	f898 200c 	ldrb.w	r2, [r8, #12]
   1a170:	f107 011c 	add.w	r1, r7, #28
   1a174:	4683      	mov	fp, r0
   1a176:	f011 fe21 	bl	2bdbc <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1a17a:	f898 000c 	ldrb.w	r0, [r8, #12]
   1a17e:	280f      	cmp	r0, #15
   1a180:	d805      	bhi.n	1a18e <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   1a182:	f1c0 0210 	rsb	r2, r0, #16
   1a186:	4651      	mov	r1, sl
   1a188:	4458      	add	r0, fp
   1a18a:	f011 fe51 	bl	2be30 <memset>
		smp_send(smp, buf, NULL, NULL);
   1a18e:	4649      	mov	r1, r9
   1a190:	2200      	movs	r2, #0
   1a192:	4628      	mov	r0, r5
   1a194:	f00f fd73 	bl	29c7e <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1a198:	2107      	movs	r1, #7
   1a19a:	4628      	mov	r0, r5
   1a19c:	f00f fdaa 	bl	29cf4 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a1a0:	4681      	mov	r9, r0
   1a1a2:	b908      	cbnz	r0, 1a1a8 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1a1a4:	4b22      	ldr	r3, [pc, #136]	; (1a230 <bt_smp_encrypt_change+0x230>)
   1a1a6:	e7c6      	b.n	1a136 <bt_smp_encrypt_change+0x136>
   1a1a8:	210a      	movs	r1, #10
   1a1aa:	300c      	adds	r0, #12
   1a1ac:	f001 f836 	bl	1b21c <net_buf_simple_add>
   1a1b0:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a1b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1a1b6:	ca03      	ldmia	r2!, {r0, r1}
   1a1b8:	f8c3 0002 	str.w	r0, [r3, #2]
   1a1bc:	f8c3 1006 	str.w	r1, [r3, #6]
   1a1c0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
		smp_send(smp, buf, smp_ident_sent, NULL);
   1a1c2:	4649      	mov	r1, r9
   1a1c4:	4628      	mov	r0, r5
   1a1c6:	801a      	strh	r2, [r3, #0]
   1a1c8:	4a1a      	ldr	r2, [pc, #104]	; (1a234 <bt_smp_encrypt_change+0x234>)
   1a1ca:	f00f fd58 	bl	29c7e <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a1ce:	4630      	mov	r0, r6
   1a1d0:	210d      	movs	r1, #13
   1a1d2:	f00f fd19 	bl	29c08 <atomic_test_bit>
   1a1d6:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   1a1da:	2800      	cmp	r0, #0
   1a1dc:	d0b5      	beq.n	1a14a <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1a1de:	2101      	movs	r1, #1
   1a1e0:	4640      	mov	r0, r8
   1a1e2:	f000 fa55 	bl	1a690 <bt_keys_add_type>
   1a1e6:	f107 031c 	add.w	r3, r7, #28
   1a1ea:	f108 0c4a 	add.w	ip, r8, #74	; 0x4a
   1a1ee:	461a      	mov	r2, r3
   1a1f0:	ca03      	ldmia	r2!, {r0, r1}
   1a1f2:	42b2      	cmp	r2, r6
   1a1f4:	f8cc 0000 	str.w	r0, [ip]
   1a1f8:	f8cc 1004 	str.w	r1, [ip, #4]
   1a1fc:	4613      	mov	r3, r2
   1a1fe:	f10c 0c08 	add.w	ip, ip, #8
   1a202:	d1f4      	bne.n	1a1ee <bt_smp_encrypt_change+0x1ee>
   1a204:	4633      	mov	r3, r6
   1a206:	cb03      	ldmia	r3!, {r0, r1}
   1a208:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   1a20a:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   1a20e:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   1a212:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   1a216:	e798      	b.n	1a14a <bt_smp_encrypt_change+0x14a>
   1a218:	00031bcf 	.word	0x00031bcf
   1a21c:	00031b25 	.word	0x00031b25
   1a220:	01000003 	.word	0x01000003
   1a224:	0002cd10 	.word	0x0002cd10
   1a228:	00031b3a 	.word	0x00031b3a
   1a22c:	00031b55 	.word	0x00031b55
   1a230:	00031b7c 	.word	0x00031b7c
   1a234:	0001a275 	.word	0x0001a275

0001a238 <smp_timeout>:
{
   1a238:	b510      	push	{r4, lr}
   1a23a:	4604      	mov	r4, r0
   1a23c:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   1a23e:	4b0b      	ldr	r3, [pc, #44]	; (1a26c <smp_timeout+0x34>)
   1a240:	aa04      	add	r2, sp, #16
   1a242:	9305      	str	r3, [sp, #20]
   1a244:	2302      	movs	r3, #2
   1a246:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a24a:	4809      	ldr	r0, [pc, #36]	; (1a270 <smp_timeout+0x38>)
   1a24c:	9304      	str	r3, [sp, #16]
   1a24e:	f00f fd33 	bl	29cb8 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1a252:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1a256:	2108      	movs	r1, #8
   1a258:	f7ff fb9c 	bl	19994 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a25c:	2104      	movs	r1, #4
   1a25e:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   1a262:	b006      	add	sp, #24
   1a264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a268:	f00f bd34 	b.w	29cd4 <atomic_set_bit>
   1a26c:	00031ba4 	.word	0x00031ba4
   1a270:	0002cd10 	.word	0x0002cd10

0001a274 <smp_ident_sent>:
{
   1a274:	b508      	push	{r3, lr}
	if (!err) {
   1a276:	bb1a      	cbnz	r2, 1a2c0 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a278:	7883      	ldrb	r3, [r0, #2]
   1a27a:	2b01      	cmp	r3, #1
   1a27c:	d120      	bne.n	1a2c0 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1a27e:	2106      	movs	r1, #6
   1a280:	f00e fe2d 	bl	28ede <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1a284:	b970      	cbnz	r0, 1a2a4 <smp_ident_sent+0x30>
   1a286:	490f      	ldr	r1, [pc, #60]	; (1a2c4 <smp_ident_sent+0x50>)
   1a288:	f240 2365 	movw	r3, #613	; 0x265
   1a28c:	4a0e      	ldr	r2, [pc, #56]	; (1a2c8 <smp_ident_sent+0x54>)
   1a28e:	480f      	ldr	r0, [pc, #60]	; (1a2cc <smp_ident_sent+0x58>)
   1a290:	f00c fd6f 	bl	26d72 <assert_print>
   1a294:	480e      	ldr	r0, [pc, #56]	; (1a2d0 <smp_ident_sent+0x5c>)
   1a296:	f00c fd6c 	bl	26d72 <assert_print>
   1a29a:	f240 2165 	movw	r1, #613	; 0x265
   1a29e:	480a      	ldr	r0, [pc, #40]	; (1a2c8 <smp_ident_sent+0x54>)
   1a2a0:	f00c fd60 	bl	26d64 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1a2a4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1a2a8:	f023 0301 	bic.w	r3, r3, #1
   1a2ac:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1a2b0:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1a2b4:	b921      	cbnz	r1, 1a2c0 <smp_ident_sent+0x4c>
}
   1a2b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1a2ba:	38ec      	subs	r0, #236	; 0xec
   1a2bc:	f7ff bb6a 	b.w	19994 <smp_pairing_complete>
}
   1a2c0:	bd08      	pop	{r3, pc}
   1a2c2:	bf00      	nop
   1a2c4:	0003116f 	.word	0x0003116f
   1a2c8:	00031a5f 	.word	0x00031a5f
   1a2cc:	0002dd81 	.word	0x0002dd81
   1a2d0:	00031bb0 	.word	0x00031bb0

0001a2d4 <bt_smp_update_keys>:
{
   1a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2d8:	af00      	add	r7, sp, #0
   1a2da:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1a2dc:	f00f fcef 	bl	29cbe <smp_chan_get>
	if (!smp) {
   1a2e0:	4605      	mov	r5, r0
   1a2e2:	b360      	cbz	r0, 1a33e <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a2e4:	1d06      	adds	r6, r0, #4
   1a2e6:	2103      	movs	r1, #3
   1a2e8:	4630      	mov	r0, r6
   1a2ea:	f00f fc8d 	bl	29c08 <atomic_test_bit>
   1a2ee:	b330      	cbz	r0, 1a33e <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   1a2f0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a2f4:	b108      	cbz	r0, 1a2fa <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1a2f6:	f000 fa07 	bl	1a708 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a2fa:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1a2fe:	4641      	mov	r1, r8
   1a300:	7a20      	ldrb	r0, [r4, #8]
   1a302:	f000 f8db 	bl	1a4bc <bt_keys_get_addr>
   1a306:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   1a30a:	b9d8      	cbnz	r0, 1a344 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1a30c:	4640      	mov	r0, r8
   1a30e:	f7f7 fc2f 	bl	11b70 <bt_addr_le_str>
   1a312:	466c      	mov	r4, sp
   1a314:	b088      	sub	sp, #32
   1a316:	466a      	mov	r2, sp
   1a318:	4b3a      	ldr	r3, [pc, #232]	; (1a404 <bt_smp_update_keys+0x130>)
   1a31a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a31e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a322:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a326:	8393      	strh	r3, [r2, #28]
   1a328:	4b37      	ldr	r3, [pc, #220]	; (1a408 <bt_smp_update_keys+0x134>)
   1a32a:	4838      	ldr	r0, [pc, #224]	; (1a40c <bt_smp_update_keys+0x138>)
   1a32c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a330:	f00f fcc2 	bl	29cb8 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a334:	2108      	movs	r1, #8
   1a336:	46a5      	mov	sp, r4
   1a338:	4628      	mov	r0, r5
   1a33a:	f7ff fbaf 	bl	19a9c <smp_error>
}
   1a33e:	46bd      	mov	sp, r7
   1a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1a344:	210e      	movs	r1, #14
   1a346:	4630      	mov	r0, r6
   1a348:	f00f fc5e 	bl	29c08 <atomic_test_bit>
   1a34c:	b128      	cbz	r0, 1a35a <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1a34e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a352:	7b53      	ldrb	r3, [r2, #13]
   1a354:	f043 0302 	orr.w	r3, r3, #2
   1a358:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1a35a:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a35c:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   1a360:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a362:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1a364:	d83a      	bhi.n	1a3dc <bt_smp_update_keys+0x108>
   1a366:	2a00      	cmp	r2, #0
   1a368:	d03f      	beq.n	1a3ea <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1a36a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a36e:	7b53      	ldrb	r3, [r2, #13]
   1a370:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a374:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1a376:	7d2b      	ldrb	r3, [r5, #20]
   1a378:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a37a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   1a37e:	428b      	cmp	r3, r1
   1a380:	bf28      	it	cs
   1a382:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a384:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a386:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a388:	2105      	movs	r1, #5
   1a38a:	f00f fc3d 	bl	29c08 <atomic_test_bit>
   1a38e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   1a392:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a394:	b390      	cbz	r0, 1a3fc <bt_smp_update_keys+0x128>
		conn->le.keys->flags |= BT_KEYS_SC;
   1a396:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a39a:	210d      	movs	r1, #13
   1a39c:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   1a39e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a3a0:	f00f fc32 	bl	29c08 <atomic_test_bit>
   1a3a4:	2800      	cmp	r0, #0
   1a3a6:	d0ca      	beq.n	1a33e <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1a3a8:	2120      	movs	r1, #32
   1a3aa:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a3ae:	f000 f96f 	bl	1a690 <bt_keys_add_type>
   1a3b2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1a3b6:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1a3ba:	331a      	adds	r3, #26
   1a3bc:	3557      	adds	r5, #87	; 0x57
   1a3be:	f852 1b04 	ldr.w	r1, [r2], #4
   1a3c2:	42aa      	cmp	r2, r5
   1a3c4:	f843 1b04 	str.w	r1, [r3], #4
   1a3c8:	d1f9      	bne.n	1a3be <bt_smp_update_keys+0xea>
__ssp_bos_icheck3(memset, void *, int)
   1a3ca:	2300      	movs	r3, #0
   1a3cc:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a3d0:	6113      	str	r3, [r2, #16]
   1a3d2:	6153      	str	r3, [r2, #20]
   1a3d4:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a3d8:	8313      	strh	r3, [r2, #24]
   1a3da:	e7b0      	b.n	1a33e <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1a3dc:	3a05      	subs	r2, #5
   1a3de:	2a01      	cmp	r2, #1
   1a3e0:	d803      	bhi.n	1a3ea <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a3e2:	f043 0320 	orr.w	r3, r3, #32
   1a3e6:	734b      	strb	r3, [r1, #13]
   1a3e8:	e7bf      	b.n	1a36a <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1a3ea:	f023 0320 	bic.w	r3, r3, #32
   1a3ee:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a3f0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a3f4:	7b53      	ldrb	r3, [r2, #13]
   1a3f6:	f023 0301 	bic.w	r3, r3, #1
   1a3fa:	e7bb      	b.n	1a374 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1a3fc:	f022 0210 	bic.w	r2, r2, #16
   1a400:	735a      	strb	r2, [r3, #13]
   1a402:	e79c      	b.n	1a33e <bt_smp_update_keys+0x6a>
   1a404:	00031827 	.word	0x00031827
   1a408:	01000003 	.word	0x01000003
   1a40c:	0002cd10 	.word	0x0002cd10

0001a410 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1a410:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a412:	4b07      	ldr	r3, [pc, #28]	; (1a430 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1a414:	4807      	ldr	r0, [pc, #28]	; (1a434 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a416:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1a41a:	f003 0306 	and.w	r3, r3, #6
   1a41e:	1f9a      	subs	r2, r3, #6
   1a420:	4253      	negs	r3, r2
   1a422:	4153      	adcs	r3, r2
   1a424:	4a04      	ldr	r2, [pc, #16]	; (1a438 <bt_smp_init+0x28>)
   1a426:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1a428:	f7fa f918 	bl	1465c <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1a42c:	2000      	movs	r0, #0
   1a42e:	bd08      	pop	{r3, pc}
   1a430:	20008000 	.word	0x20008000
   1a434:	20008554 	.word	0x20008554
   1a438:	20022390 	.word	0x20022390

0001a43c <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1a43c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a43e:	b958      	cbnz	r0, 1a458 <id_add+0x1c>
   1a440:	4907      	ldr	r1, [pc, #28]	; (1a460 <id_add+0x24>)
   1a442:	4808      	ldr	r0, [pc, #32]	; (1a464 <id_add+0x28>)
   1a444:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1a448:	4a07      	ldr	r2, [pc, #28]	; (1a468 <id_add+0x2c>)
   1a44a:	f00c fc92 	bl	26d72 <assert_print>
   1a44e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1a452:	4805      	ldr	r0, [pc, #20]	; (1a468 <id_add+0x2c>)
   1a454:	f00c fc86 	bl	26d64 <assert_post_action>

	bt_id_add(keys);
}
   1a458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1a45c:	f7f9 bb00 	b.w	13a60 <bt_id_add>
   1a460:	00031c50 	.word	0x00031c50
   1a464:	0002dd81 	.word	0x0002dd81
   1a468:	00031c20 	.word	0x00031c20

0001a46c <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a46c:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a46e:	4c10      	ldr	r4, [pc, #64]	; (1a4b0 <bt_keys_get_addr.part.0+0x44>)
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a470:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a472:	f814 3b01 	ldrb.w	r3, [r4], #1
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a476:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a478:	4283      	cmp	r3, r0
   1a47a:	d007      	beq.n	1a48c <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1a47c:	2207      	movs	r2, #7
   1a47e:	490d      	ldr	r1, [pc, #52]	; (1a4b4 <bt_keys_get_addr.part.0+0x48>)
   1a480:	480d      	ldr	r0, [pc, #52]	; (1a4b8 <bt_keys_get_addr.part.0+0x4c>)
   1a482:	f011 fc8b 	bl	2bd9c <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1a486:	b148      	cbz	r0, 1a49c <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1a488:	2000      	movs	r0, #0
}
   1a48a:	bd70      	pop	{r4, r5, r6, pc}
   1a48c:	2207      	movs	r2, #7
   1a48e:	4620      	mov	r0, r4
   1a490:	f011 fc84 	bl	2bd9c <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a494:	2800      	cmp	r0, #0
   1a496:	d1f1      	bne.n	1a47c <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1a498:	4805      	ldr	r0, [pc, #20]	; (1a4b0 <bt_keys_get_addr.part.0+0x44>)
   1a49a:	e7f6      	b.n	1a48a <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1a49c:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1a4a0:	682b      	ldr	r3, [r5, #0]
   1a4a2:	6023      	str	r3, [r4, #0]
   1a4a4:	88ab      	ldrh	r3, [r5, #4]
   1a4a6:	80a3      	strh	r3, [r4, #4]
   1a4a8:	79ab      	ldrb	r3, [r5, #6]
   1a4aa:	71a3      	strb	r3, [r4, #6]
		return keys;
   1a4ac:	e7f4      	b.n	1a498 <bt_keys_get_addr.part.0+0x2c>
   1a4ae:	bf00      	nop
   1a4b0:	200216d4 	.word	0x200216d4
   1a4b4:	0002fdbe 	.word	0x0002fdbe
   1a4b8:	200216d5 	.word	0x200216d5

0001a4bc <bt_keys_get_addr>:
{
   1a4bc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a4be:	b949      	cbnz	r1, 1a4d4 <bt_keys_get_addr+0x18>
   1a4c0:	4906      	ldr	r1, [pc, #24]	; (1a4dc <bt_keys_get_addr+0x20>)
   1a4c2:	4807      	ldr	r0, [pc, #28]	; (1a4e0 <bt_keys_get_addr+0x24>)
   1a4c4:	2359      	movs	r3, #89	; 0x59
   1a4c6:	4a07      	ldr	r2, [pc, #28]	; (1a4e4 <bt_keys_get_addr+0x28>)
   1a4c8:	f00c fc53 	bl	26d72 <assert_print>
   1a4cc:	2159      	movs	r1, #89	; 0x59
   1a4ce:	4805      	ldr	r0, [pc, #20]	; (1a4e4 <bt_keys_get_addr+0x28>)
   1a4d0:	f00c fc48 	bl	26d64 <assert_post_action>
}
   1a4d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a4d8:	f7ff bfc8 	b.w	1a46c <bt_keys_get_addr.part.0>
   1a4dc:	00031c64 	.word	0x00031c64
   1a4e0:	0002dd81 	.word	0x0002dd81
   1a4e4:	00031c20 	.word	0x00031c20

0001a4e8 <bt_keys_foreach_type>:
{
   1a4e8:	460b      	mov	r3, r1
   1a4ea:	b510      	push	{r4, lr}
   1a4ec:	4611      	mov	r1, r2
   1a4ee:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1a4f0:	b963      	cbnz	r3, 1a50c <bt_keys_foreach_type+0x24>
   1a4f2:	4909      	ldr	r1, [pc, #36]	; (1a518 <bt_keys_foreach_type+0x30>)
   1a4f4:	4809      	ldr	r0, [pc, #36]	; (1a51c <bt_keys_foreach_type+0x34>)
   1a4f6:	23b3      	movs	r3, #179	; 0xb3
   1a4f8:	4a09      	ldr	r2, [pc, #36]	; (1a520 <bt_keys_foreach_type+0x38>)
   1a4fa:	f00c fc3a 	bl	26d72 <assert_print>
   1a4fe:	21b3      	movs	r1, #179	; 0xb3
   1a500:	4807      	ldr	r0, [pc, #28]	; (1a520 <bt_keys_foreach_type+0x38>)
   1a502:	f00c fc2f 	bl	26d64 <assert_post_action>
}
   1a506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1a50a:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1a50c:	4805      	ldr	r0, [pc, #20]	; (1a524 <bt_keys_foreach_type+0x3c>)
   1a50e:	89c2      	ldrh	r2, [r0, #14]
   1a510:	4222      	tst	r2, r4
   1a512:	d1f8      	bne.n	1a506 <bt_keys_foreach_type+0x1e>
}
   1a514:	bd10      	pop	{r4, pc}
   1a516:	bf00      	nop
   1a518:	00031c78 	.word	0x00031c78
   1a51c:	0002dd81 	.word	0x0002dd81
   1a520:	00031c20 	.word	0x00031c20
   1a524:	200216d4 	.word	0x200216d4

0001a528 <keys_commit>:

static int keys_commit(void)
{
   1a528:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1a52a:	2200      	movs	r2, #0
   1a52c:	2002      	movs	r0, #2
   1a52e:	4902      	ldr	r1, [pc, #8]	; (1a538 <keys_commit+0x10>)
   1a530:	f7ff ffda 	bl	1a4e8 <bt_keys_foreach_type>
	}

	return 0;
}
   1a534:	2000      	movs	r0, #0
   1a536:	bd08      	pop	{r3, pc}
   1a538:	0001a43d 	.word	0x0001a43d

0001a53c <bt_keys_find>:
{
   1a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a53e:	4605      	mov	r5, r0
   1a540:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a542:	4614      	mov	r4, r2
   1a544:	b9aa      	cbnz	r2, 1a572 <bt_keys_find+0x36>
   1a546:	490f      	ldr	r1, [pc, #60]	; (1a584 <bt_keys_find+0x48>)
   1a548:	480f      	ldr	r0, [pc, #60]	; (1a588 <bt_keys_find+0x4c>)
   1a54a:	23c0      	movs	r3, #192	; 0xc0
   1a54c:	4a0f      	ldr	r2, [pc, #60]	; (1a58c <bt_keys_find+0x50>)
   1a54e:	f00c fc10 	bl	26d72 <assert_print>
   1a552:	21c0      	movs	r1, #192	; 0xc0
   1a554:	480d      	ldr	r0, [pc, #52]	; (1a58c <bt_keys_find+0x50>)
   1a556:	f00c fc05 	bl	26d64 <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a55a:	b18a      	cbz	r2, 1a580 <bt_keys_find+0x44>
   1a55c:	428e      	cmp	r6, r1
   1a55e:	d10f      	bne.n	1a580 <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   1a560:	2207      	movs	r2, #7
   1a562:	4621      	mov	r1, r4
   1a564:	480a      	ldr	r0, [pc, #40]	; (1a590 <bt_keys_find+0x54>)
   1a566:	f011 fc19 	bl	2bd9c <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a56a:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a56c:	b918      	cbnz	r0, 1a576 <bt_keys_find+0x3a>
			return &key_pool[i];
   1a56e:	4809      	ldr	r0, [pc, #36]	; (1a594 <bt_keys_find+0x58>)
   1a570:	e007      	b.n	1a582 <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a572:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a574:	4f07      	ldr	r7, [pc, #28]	; (1a594 <bt_keys_find+0x58>)
   1a576:	89fa      	ldrh	r2, [r7, #14]
   1a578:	7839      	ldrb	r1, [r7, #0]
   1a57a:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a57c:	2b00      	cmp	r3, #0
   1a57e:	d0ec      	beq.n	1a55a <bt_keys_find+0x1e>
	return NULL;
   1a580:	2000      	movs	r0, #0
}
   1a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a584:	00031c64 	.word	0x00031c64
   1a588:	0002dd81 	.word	0x0002dd81
   1a58c:	00031c20 	.word	0x00031c20
   1a590:	200216d5 	.word	0x200216d5
   1a594:	200216d4 	.word	0x200216d4

0001a598 <bt_keys_find_irk>:
{
   1a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a59a:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1a59c:	460c      	mov	r4, r1
   1a59e:	b949      	cbnz	r1, 1a5b4 <bt_keys_find_irk+0x1c>
   1a5a0:	4923      	ldr	r1, [pc, #140]	; (1a630 <bt_keys_find_irk+0x98>)
   1a5a2:	4824      	ldr	r0, [pc, #144]	; (1a634 <bt_keys_find_irk+0x9c>)
   1a5a4:	23e9      	movs	r3, #233	; 0xe9
   1a5a6:	4a24      	ldr	r2, [pc, #144]	; (1a638 <bt_keys_find_irk+0xa0>)
   1a5a8:	f00c fbe3 	bl	26d72 <assert_print>
   1a5ac:	21e9      	movs	r1, #233	; 0xe9
   1a5ae:	4822      	ldr	r0, [pc, #136]	; (1a638 <bt_keys_find_irk+0xa0>)
   1a5b0:	f00c fbd8 	bl	26d64 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a5b4:	780b      	ldrb	r3, [r1, #0]
   1a5b6:	2b01      	cmp	r3, #1
   1a5b8:	d001      	beq.n	1a5be <bt_keys_find_irk+0x26>
		return NULL;
   1a5ba:	2000      	movs	r0, #0
}
   1a5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1a5be:	798b      	ldrb	r3, [r1, #6]
   1a5c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a5c4:	2b40      	cmp	r3, #64	; 0x40
   1a5c6:	d1f8      	bne.n	1a5ba <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a5c8:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a5ca:	4d1c      	ldr	r5, [pc, #112]	; (1a63c <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   1a5cc:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1a5d0:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1a5d2:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a5d4:	f002 0202 	and.w	r2, r2, #2
   1a5d8:	b1db      	cbz	r3, 1a612 <bt_keys_find_irk+0x7a>
   1a5da:	2300      	movs	r3, #0
   1a5dc:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1a5de:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a5e0:	f002 0202 	and.w	r2, r2, #2
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d1e8      	bne.n	1a5ba <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a5e8:	2a00      	cmp	r2, #0
   1a5ea:	d0e6      	beq.n	1a5ba <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   1a5ec:	42b1      	cmp	r1, r6
   1a5ee:	d1e4      	bne.n	1a5ba <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1a5f0:	1c67      	adds	r7, r4, #1
   1a5f2:	4639      	mov	r1, r7
   1a5f4:	4812      	ldr	r0, [pc, #72]	; (1a640 <bt_keys_find_irk+0xa8>)
   1a5f6:	f00d ff59 	bl	284ac <bt_rpa_irk_matches>
   1a5fa:	2301      	movs	r3, #1
   1a5fc:	2800      	cmp	r0, #0
   1a5fe:	d0ed      	beq.n	1a5dc <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   1a600:	f8d4 3001 	ldr.w	r3, [r4, #1]
   1a604:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   1a608:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1a60c:	4b0d      	ldr	r3, [pc, #52]	; (1a644 <bt_keys_find_irk+0xac>)
   1a60e:	809a      	strh	r2, [r3, #4]
}
   1a610:	e00b      	b.n	1a62a <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a612:	2a00      	cmp	r2, #0
   1a614:	d0e2      	beq.n	1a5dc <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   1a616:	42b0      	cmp	r0, r6
   1a618:	d1e0      	bne.n	1a5dc <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1a61a:	2206      	movs	r2, #6
   1a61c:	4639      	mov	r1, r7
   1a61e:	1c60      	adds	r0, r4, #1
   1a620:	f011 fbbc 	bl	2bd9c <memcmp>
   1a624:	2301      	movs	r3, #1
   1a626:	2800      	cmp	r0, #0
   1a628:	d1d2      	bne.n	1a5d0 <bt_keys_find_irk+0x38>
			return &key_pool[i];
   1a62a:	4804      	ldr	r0, [pc, #16]	; (1a63c <bt_keys_find_irk+0xa4>)
   1a62c:	e7c6      	b.n	1a5bc <bt_keys_find_irk+0x24>
   1a62e:	bf00      	nop
   1a630:	00031c64 	.word	0x00031c64
   1a634:	0002dd81 	.word	0x0002dd81
   1a638:	00031c20 	.word	0x00031c20
   1a63c:	200216d4 	.word	0x200216d4
   1a640:	200216fe 	.word	0x200216fe
   1a644:	2002170e 	.word	0x2002170e

0001a648 <bt_keys_find_addr>:
{
   1a648:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a64a:	b959      	cbnz	r1, 1a664 <bt_keys_find_addr+0x1c>
   1a64c:	490c      	ldr	r1, [pc, #48]	; (1a680 <bt_keys_find_addr+0x38>)
   1a64e:	480d      	ldr	r0, [pc, #52]	; (1a684 <bt_keys_find_addr+0x3c>)
   1a650:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1a654:	4a0c      	ldr	r2, [pc, #48]	; (1a688 <bt_keys_find_addr+0x40>)
   1a656:	f00c fb8c 	bl	26d72 <assert_print>
   1a65a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1a65e:	480a      	ldr	r0, [pc, #40]	; (1a688 <bt_keys_find_addr+0x40>)
   1a660:	f00c fb80 	bl	26d64 <assert_post_action>
		if (key_pool[i].id == id &&
   1a664:	4c09      	ldr	r4, [pc, #36]	; (1a68c <bt_keys_find_addr+0x44>)
   1a666:	7823      	ldrb	r3, [r4, #0]
   1a668:	4283      	cmp	r3, r0
   1a66a:	d104      	bne.n	1a676 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   1a66c:	2207      	movs	r2, #7
   1a66e:	1c60      	adds	r0, r4, #1
   1a670:	f011 fb94 	bl	2bd9c <memcmp>
   1a674:	b108      	cbz	r0, 1a67a <bt_keys_find_addr+0x32>
	return NULL;
   1a676:	2000      	movs	r0, #0
}
   1a678:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a67a:	4620      	mov	r0, r4
   1a67c:	e7fc      	b.n	1a678 <bt_keys_find_addr+0x30>
   1a67e:	bf00      	nop
   1a680:	00031c64 	.word	0x00031c64
   1a684:	0002dd81 	.word	0x0002dd81
   1a688:	00031c20 	.word	0x00031c20
   1a68c:	200216d4 	.word	0x200216d4

0001a690 <bt_keys_add_type>:
{
   1a690:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a692:	b958      	cbnz	r0, 1a6ac <bt_keys_add_type+0x1c>
   1a694:	4907      	ldr	r1, [pc, #28]	; (1a6b4 <bt_keys_add_type+0x24>)
   1a696:	4808      	ldr	r0, [pc, #32]	; (1a6b8 <bt_keys_add_type+0x28>)
   1a698:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1a69c:	4a07      	ldr	r2, [pc, #28]	; (1a6bc <bt_keys_add_type+0x2c>)
   1a69e:	f00c fb68 	bl	26d72 <assert_print>
   1a6a2:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1a6a6:	4805      	ldr	r0, [pc, #20]	; (1a6bc <bt_keys_add_type+0x2c>)
   1a6a8:	f00c fb5c 	bl	26d64 <assert_post_action>
	keys->keys |= type;
   1a6ac:	89c3      	ldrh	r3, [r0, #14]
   1a6ae:	4319      	orrs	r1, r3
   1a6b0:	81c1      	strh	r1, [r0, #14]
}
   1a6b2:	bd08      	pop	{r3, pc}
   1a6b4:	00031c50 	.word	0x00031c50
   1a6b8:	0002dd81 	.word	0x0002dd81
   1a6bc:	00031c20 	.word	0x00031c20

0001a6c0 <bt_keys_get_type>:
{
   1a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a6c2:	4606      	mov	r6, r0
   1a6c4:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a6c6:	4615      	mov	r5, r2
   1a6c8:	b94a      	cbnz	r2, 1a6de <bt_keys_get_type+0x1e>
   1a6ca:	490c      	ldr	r1, [pc, #48]	; (1a6fc <bt_keys_get_type+0x3c>)
   1a6cc:	480c      	ldr	r0, [pc, #48]	; (1a700 <bt_keys_get_type+0x40>)
   1a6ce:	23d2      	movs	r3, #210	; 0xd2
   1a6d0:	4a0c      	ldr	r2, [pc, #48]	; (1a704 <bt_keys_get_type+0x44>)
   1a6d2:	f00c fb4e 	bl	26d72 <assert_print>
   1a6d6:	21d2      	movs	r1, #210	; 0xd2
   1a6d8:	480a      	ldr	r0, [pc, #40]	; (1a704 <bt_keys_get_type+0x44>)
   1a6da:	f00c fb43 	bl	26d64 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1a6de:	f7ff ff2d 	bl	1a53c <bt_keys_find>
	if (keys) {
   1a6e2:	4604      	mov	r4, r0
   1a6e4:	b940      	cbnz	r0, 1a6f8 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   1a6e6:	4629      	mov	r1, r5
   1a6e8:	4638      	mov	r0, r7
   1a6ea:	f7ff fee7 	bl	1a4bc <bt_keys_get_addr>
	if (!keys) {
   1a6ee:	4604      	mov	r4, r0
   1a6f0:	b110      	cbz	r0, 1a6f8 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   1a6f2:	4631      	mov	r1, r6
   1a6f4:	f7ff ffcc 	bl	1a690 <bt_keys_add_type>
}
   1a6f8:	4620      	mov	r0, r4
   1a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6fc:	00031c64 	.word	0x00031c64
   1a700:	0002dd81 	.word	0x0002dd81
   1a704:	00031c20 	.word	0x00031c20

0001a708 <bt_keys_clear>:
{
   1a708:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a70a:	4604      	mov	r4, r0
{
   1a70c:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a70e:	b958      	cbnz	r0, 1a728 <bt_keys_clear+0x20>
   1a710:	4916      	ldr	r1, [pc, #88]	; (1a76c <bt_keys_clear+0x64>)
   1a712:	4817      	ldr	r0, [pc, #92]	; (1a770 <bt_keys_clear+0x68>)
   1a714:	f240 1331 	movw	r3, #305	; 0x131
   1a718:	4a16      	ldr	r2, [pc, #88]	; (1a774 <bt_keys_clear+0x6c>)
   1a71a:	f00c fb2a 	bl	26d72 <assert_print>
   1a71e:	f240 1131 	movw	r1, #305	; 0x131
   1a722:	4814      	ldr	r0, [pc, #80]	; (1a774 <bt_keys_clear+0x6c>)
   1a724:	f00c fb1e 	bl	26d64 <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a728:	7a03      	ldrb	r3, [r0, #8]
   1a72a:	075b      	lsls	r3, r3, #29
   1a72c:	d501      	bpl.n	1a732 <bt_keys_clear+0x2a>
		bt_id_del(keys);
   1a72e:	f7f9 f9b1 	bl	13a94 <bt_id_del>
		if (keys->id) {
   1a732:	4625      	mov	r5, r4
   1a734:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a738:	b1b2      	cbz	r2, 1a768 <bt_keys_clear+0x60>
			u8_to_dec(id, sizeof(id), keys->id);
   1a73a:	ae02      	add	r6, sp, #8
   1a73c:	2104      	movs	r1, #4
   1a73e:	4630      	mov	r0, r6
   1a740:	f00c f8c7 	bl	268d2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a744:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a746:	462b      	mov	r3, r5
   1a748:	2124      	movs	r1, #36	; 0x24
   1a74a:	4a0b      	ldr	r2, [pc, #44]	; (1a778 <bt_keys_clear+0x70>)
   1a74c:	a803      	add	r0, sp, #12
   1a74e:	f7f7 fae5 	bl	11d1c <bt_settings_encode_key>
		settings_delete(key);
   1a752:	a803      	add	r0, sp, #12
   1a754:	f00d f905 	bl	27962 <settings_delete>
   1a758:	225c      	movs	r2, #92	; 0x5c
   1a75a:	2100      	movs	r1, #0
   1a75c:	4620      	mov	r0, r4
}
   1a75e:	b00c      	add	sp, #48	; 0x30
   1a760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a764:	f011 bb64 	b.w	2be30 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a768:	9200      	str	r2, [sp, #0]
   1a76a:	e7ec      	b.n	1a746 <bt_keys_clear+0x3e>
   1a76c:	00031c50 	.word	0x00031c50
   1a770:	0002dd81 	.word	0x0002dd81
   1a774:	00031c20 	.word	0x00031c20
   1a778:	00031d2b 	.word	0x00031d2b

0001a77c <keys_set>:
{
   1a77c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a77e:	b099      	sub	sp, #100	; 0x64
   1a780:	4614      	mov	r4, r2
	if (!name) {
   1a782:	4606      	mov	r6, r0
{
   1a784:	af00      	add	r7, sp, #0
	if (!name) {
   1a786:	b988      	cbnz	r0, 1a7ac <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   1a788:	4b60      	ldr	r3, [pc, #384]	; (1a90c <keys_set+0x190>)
   1a78a:	627b      	str	r3, [r7, #36]	; 0x24
   1a78c:	2302      	movs	r3, #2
   1a78e:	623b      	str	r3, [r7, #32]
   1a790:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a794:	4603      	mov	r3, r0
   1a796:	f107 0220 	add.w	r2, r7, #32
   1a79a:	485d      	ldr	r0, [pc, #372]	; (1a910 <keys_set+0x194>)
   1a79c:	f7f4 f8da 	bl	e954 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1a7a0:	f06f 0515 	mvn.w	r5, #21
}
   1a7a4:	4628      	mov	r0, r5
   1a7a6:	3764      	adds	r7, #100	; 0x64
   1a7a8:	46bd      	mov	sp, r7
   1a7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1a7ac:	2250      	movs	r2, #80	; 0x50
   1a7ae:	4618      	mov	r0, r3
   1a7b0:	f107 0110 	add.w	r1, r7, #16
   1a7b4:	47a0      	blx	r4
	if (len < 0) {
   1a7b6:	1e04      	subs	r4, r0, #0
   1a7b8:	da10      	bge.n	1a7dc <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   1a7ba:	466d      	mov	r5, sp
   1a7bc:	b088      	sub	sp, #32
   1a7be:	466a      	mov	r2, sp
   1a7c0:	4b54      	ldr	r3, [pc, #336]	; (1a914 <keys_set+0x198>)
   1a7c2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a7c6:	2303      	movs	r3, #3
   1a7c8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7cc:	2300      	movs	r3, #0
   1a7ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a7d2:	484f      	ldr	r0, [pc, #316]	; (1a910 <keys_set+0x194>)
   1a7d4:	f7f4 f8be 	bl	e954 <z_impl_z_log_msg_static_create>
   1a7d8:	46ad      	mov	sp, r5
		return -EINVAL;
   1a7da:	e7e1      	b.n	1a7a0 <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   1a7dc:	4630      	mov	r0, r6
   1a7de:	f107 0108 	add.w	r1, r7, #8
   1a7e2:	f00d fe8c 	bl	284fe <bt_settings_decode_key>
	if (err) {
   1a7e6:	4605      	mov	r5, r0
   1a7e8:	b198      	cbz	r0, 1a812 <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   1a7ea:	466c      	mov	r4, sp
   1a7ec:	b088      	sub	sp, #32
   1a7ee:	466a      	mov	r2, sp
   1a7f0:	4b49      	ldr	r3, [pc, #292]	; (1a918 <keys_set+0x19c>)
   1a7f2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a7f6:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a7fa:	8393      	strh	r3, [r2, #28]
   1a7fc:	4b47      	ldr	r3, [pc, #284]	; (1a91c <keys_set+0x1a0>)
   1a7fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1a802:	2300      	movs	r3, #0
   1a804:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a808:	4841      	ldr	r0, [pc, #260]	; (1a910 <keys_set+0x194>)
   1a80a:	f7f4 f8a3 	bl	e954 <z_impl_z_log_msg_static_create>
   1a80e:	46a5      	mov	sp, r4
			return -EINVAL;
   1a810:	e7c6      	b.n	1a7a0 <keys_set+0x24>
	settings_name_next(name, &next);
   1a812:	4630      	mov	r0, r6
   1a814:	1d39      	adds	r1, r7, #4
   1a816:	f00d f8cc 	bl	279b2 <settings_name_next>
	if (!next) {
   1a81a:	6878      	ldr	r0, [r7, #4]
   1a81c:	b188      	cbz	r0, 1a842 <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a81e:	220a      	movs	r2, #10
   1a820:	4629      	mov	r1, r5
   1a822:	f00a ff55 	bl	256d0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a826:	b160      	cbz	r0, 1a842 <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1a828:	466c      	mov	r4, sp
   1a82a:	b088      	sub	sp, #32
   1a82c:	466a      	mov	r2, sp
   1a82e:	4b3c      	ldr	r3, [pc, #240]	; (1a920 <keys_set+0x1a4>)
   1a830:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a834:	2303      	movs	r3, #3
   1a836:	f842 3f10 	str.w	r3, [r2, #16]!
   1a83a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a83e:	462b      	mov	r3, r5
   1a840:	e7e2      	b.n	1a808 <keys_set+0x8c>
	if (!len) {
   1a842:	bb1c      	cbnz	r4, 1a88c <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1a844:	4621      	mov	r1, r4
   1a846:	203f      	movs	r0, #63	; 0x3f
   1a848:	f107 0208 	add.w	r2, r7, #8
   1a84c:	f7ff fe76 	bl	1a53c <bt_keys_find>
		if (keys) {
   1a850:	b120      	cbz	r0, 1a85c <keys_set+0xe0>
   1a852:	225c      	movs	r2, #92	; 0x5c
   1a854:	4621      	mov	r1, r4
   1a856:	f011 faeb 	bl	2be30 <memset>
   1a85a:	e7a3      	b.n	1a7a4 <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1a85c:	f107 0008 	add.w	r0, r7, #8
   1a860:	f7f7 f986 	bl	11b70 <bt_addr_le_str>
   1a864:	466e      	mov	r6, sp
   1a866:	b088      	sub	sp, #32
   1a868:	466a      	mov	r2, sp
   1a86a:	4b2e      	ldr	r3, [pc, #184]	; (1a924 <keys_set+0x1a8>)
   1a86c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a870:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a874:	8393      	strh	r3, [r2, #28]
   1a876:	4b29      	ldr	r3, [pc, #164]	; (1a91c <keys_set+0x1a0>)
   1a878:	f842 3f10 	str.w	r3, [r2, #16]!
   1a87c:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1a880:	4623      	mov	r3, r4
   1a882:	4823      	ldr	r0, [pc, #140]	; (1a910 <keys_set+0x194>)
   1a884:	f7f4 f866 	bl	e954 <z_impl_z_log_msg_static_create>
   1a888:	46b5      	mov	sp, r6
   1a88a:	e78b      	b.n	1a7a4 <keys_set+0x28>
	__ASSERT_NO_MSG(addr != NULL);
   1a88c:	2000      	movs	r0, #0
   1a88e:	f107 0108 	add.w	r1, r7, #8
   1a892:	f7ff fdeb 	bl	1a46c <bt_keys_get_addr.part.0>
	if (!keys) {
   1a896:	4606      	mov	r6, r0
   1a898:	b9c8      	cbnz	r0, 1a8ce <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1a89a:	f107 0008 	add.w	r0, r7, #8
   1a89e:	f7f7 f967 	bl	11b70 <bt_addr_le_str>
   1a8a2:	466c      	mov	r4, sp
   1a8a4:	b088      	sub	sp, #32
   1a8a6:	466a      	mov	r2, sp
   1a8a8:	4b1f      	ldr	r3, [pc, #124]	; (1a928 <keys_set+0x1ac>)
   1a8aa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a8ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a8b2:	8393      	strh	r3, [r2, #28]
   1a8b4:	4b19      	ldr	r3, [pc, #100]	; (1a91c <keys_set+0x1a0>)
   1a8b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8ba:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a8be:	4633      	mov	r3, r6
   1a8c0:	4813      	ldr	r0, [pc, #76]	; (1a910 <keys_set+0x194>)
   1a8c2:	f7f4 f847 	bl	e954 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1a8c6:	f06f 050b 	mvn.w	r5, #11
   1a8ca:	46a5      	mov	sp, r4
   1a8cc:	e76a      	b.n	1a7a4 <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   1a8ce:	2c50      	cmp	r4, #80	; 0x50
   1a8d0:	d015      	beq.n	1a8fe <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1a8d2:	466d      	mov	r5, sp
   1a8d4:	b088      	sub	sp, #32
   1a8d6:	466a      	mov	r2, sp
   1a8d8:	4b14      	ldr	r3, [pc, #80]	; (1a92c <keys_set+0x1b0>)
   1a8da:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a8de:	2350      	movs	r3, #80	; 0x50
   1a8e0:	61d3      	str	r3, [r2, #28]
   1a8e2:	2304      	movs	r3, #4
   1a8e4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8e8:	2300      	movs	r3, #0
   1a8ea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a8ee:	4808      	ldr	r0, [pc, #32]	; (1a910 <keys_set+0x194>)
   1a8f0:	f7f4 f830 	bl	e954 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1a8f4:	4630      	mov	r0, r6
   1a8f6:	46ad      	mov	sp, r5
   1a8f8:	f7ff ff06 	bl	1a708 <bt_keys_clear>
			return -EINVAL;
   1a8fc:	e750      	b.n	1a7a0 <keys_set+0x24>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a8fe:	4622      	mov	r2, r4
   1a900:	f107 0110 	add.w	r1, r7, #16
   1a904:	300c      	adds	r0, #12
   1a906:	f011 fa59 	bl	2bdbc <memcpy>
   1a90a:	e74b      	b.n	1a7a4 <keys_set+0x28>
   1a90c:	0002fe14 	.word	0x0002fe14
   1a910:	0002cce8 	.word	0x0002cce8
   1a914:	00031c8c 	.word	0x00031c8c
   1a918:	000313a0 	.word	0x000313a0
   1a91c:	01000003 	.word	0x01000003
   1a920:	000313bc 	.word	0x000313bc
   1a924:	00031cab 	.word	0x00031cab
   1a928:	00031cce 	.word	0x00031cce
   1a92c:	00031ced 	.word	0x00031ced

0001a930 <bt_keys_store>:
{
   1a930:	b5b0      	push	{r4, r5, r7, lr}
   1a932:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a934:	4604      	mov	r4, r0
{
   1a936:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(keys != NULL);
   1a938:	b958      	cbnz	r0, 1a952 <bt_keys_store+0x22>
   1a93a:	491c      	ldr	r1, [pc, #112]	; (1a9ac <bt_keys_store+0x7c>)
   1a93c:	481c      	ldr	r0, [pc, #112]	; (1a9b0 <bt_keys_store+0x80>)
   1a93e:	f240 1355 	movw	r3, #341	; 0x155
   1a942:	4a1c      	ldr	r2, [pc, #112]	; (1a9b4 <bt_keys_store+0x84>)
   1a944:	f00c fa15 	bl	26d72 <assert_print>
   1a948:	f240 1155 	movw	r1, #341	; 0x155
   1a94c:	4819      	ldr	r0, [pc, #100]	; (1a9b4 <bt_keys_store+0x84>)
   1a94e:	f00c fa09 	bl	26d64 <assert_post_action>
	if (keys->id) {
   1a952:	4605      	mov	r5, r0
   1a954:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a958:	b332      	cbz	r2, 1a9a8 <bt_keys_store+0x78>
		u8_to_dec(id, sizeof(id), keys->id);
   1a95a:	2104      	movs	r1, #4
   1a95c:	4638      	mov	r0, r7
   1a95e:	f00b ffb8 	bl	268d2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a962:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a964:	462b      	mov	r3, r5
   1a966:	2124      	movs	r1, #36	; 0x24
   1a968:	4a13      	ldr	r2, [pc, #76]	; (1a9b8 <bt_keys_store+0x88>)
   1a96a:	1d38      	adds	r0, r7, #4
   1a96c:	f7f7 f9d6 	bl	11d1c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1a970:	f104 010c 	add.w	r1, r4, #12
   1a974:	2250      	movs	r2, #80	; 0x50
   1a976:	1d38      	adds	r0, r7, #4
   1a978:	f7f5 fa86 	bl	fe88 <settings_save_one>
	if (err) {
   1a97c:	4604      	mov	r4, r0
   1a97e:	b178      	cbz	r0, 1a9a0 <bt_keys_store+0x70>
		LOG_ERR("Failed to save keys (err %d)", err);
   1a980:	466d      	mov	r5, sp
   1a982:	b088      	sub	sp, #32
   1a984:	aa02      	add	r2, sp, #8
   1a986:	4b0d      	ldr	r3, [pc, #52]	; (1a9bc <bt_keys_store+0x8c>)
   1a988:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a98c:	2303      	movs	r3, #3
   1a98e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a992:	2300      	movs	r3, #0
   1a994:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a998:	4809      	ldr	r0, [pc, #36]	; (1a9c0 <bt_keys_store+0x90>)
   1a99a:	f7f3 ffdb 	bl	e954 <z_impl_z_log_msg_static_create>
   1a99e:	46ad      	mov	sp, r5
}
   1a9a0:	4620      	mov	r0, r4
   1a9a2:	3728      	adds	r7, #40	; 0x28
   1a9a4:	46bd      	mov	sp, r7
   1a9a6:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a9a8:	9200      	str	r2, [sp, #0]
   1a9aa:	e7db      	b.n	1a964 <bt_keys_store+0x34>
   1a9ac:	00031c50 	.word	0x00031c50
   1a9b0:	0002dd81 	.word	0x0002dd81
   1a9b4:	00031c20 	.word	0x00031c20
   1a9b8:	00031d2b 	.word	0x00031d2b
   1a9bc:	00031d0b 	.word	0x00031d0b
   1a9c0:	0002cce8 	.word	0x0002cce8

0001a9c4 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a9c4:	4288      	cmp	r0, r1
{
   1a9c6:	b510      	push	{r4, lr}
   1a9c8:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a9cc:	d911      	bls.n	1a9f2 <sys_memcpy_swap+0x2e>
   1a9ce:	188c      	adds	r4, r1, r2
   1a9d0:	42a0      	cmp	r0, r4
   1a9d2:	d211      	bcs.n	1a9f8 <sys_memcpy_swap+0x34>
   1a9d4:	490d      	ldr	r1, [pc, #52]	; (1aa0c <sys_memcpy_swap+0x48>)
   1a9d6:	f240 2315 	movw	r3, #533	; 0x215
   1a9da:	4a0d      	ldr	r2, [pc, #52]	; (1aa10 <sys_memcpy_swap+0x4c>)
   1a9dc:	480d      	ldr	r0, [pc, #52]	; (1aa14 <sys_memcpy_swap+0x50>)
   1a9de:	f00c f9c8 	bl	26d72 <assert_print>
   1a9e2:	480d      	ldr	r0, [pc, #52]	; (1aa18 <sys_memcpy_swap+0x54>)
   1a9e4:	f00c f9c5 	bl	26d72 <assert_print>
   1a9e8:	f240 2115 	movw	r1, #533	; 0x215
   1a9ec:	4808      	ldr	r0, [pc, #32]	; (1aa10 <sys_memcpy_swap+0x4c>)
   1a9ee:	f00c f9b9 	bl	26d64 <assert_post_action>
   1a9f2:	d0ef      	beq.n	1a9d4 <sys_memcpy_swap+0x10>
   1a9f4:	4299      	cmp	r1, r3
   1a9f6:	e7ec      	b.n	1a9d2 <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1a9f8:	3a01      	subs	r2, #1
   1a9fa:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1a9fc:	f811 2901 	ldrb.w	r2, [r1], #-1
   1aa00:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1aa04:	4283      	cmp	r3, r0
   1aa06:	d1f9      	bne.n	1a9fc <sys_memcpy_swap+0x38>
}
   1aa08:	bd10      	pop	{r4, pc}
   1aa0a:	bf00      	nop
   1aa0c:	00030985 	.word	0x00030985
   1aa10:	00030953 	.word	0x00030953
   1aa14:	0002dd81 	.word	0x0002dd81
   1aa18:	000309dc 	.word	0x000309dc

0001aa1c <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1aa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa20:	b09a      	sub	sp, #104	; 0x68
   1aa22:	4616      	mov	r6, r2
   1aa24:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1aa28:	aa0c      	add	r2, sp, #48	; 0x30
{
   1aa2a:	4684      	mov	ip, r0
   1aa2c:	468a      	mov	sl, r1
   1aa2e:	4690      	mov	r8, r2
   1aa30:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   1aa32:	4b2c      	ldr	r3, [pc, #176]	; (1aae4 <bt_crypto_f5+0xc8>)
   1aa34:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1aa38:	4614      	mov	r4, r2
   1aa3a:	6818      	ldr	r0, [r3, #0]
   1aa3c:	6859      	ldr	r1, [r3, #4]
   1aa3e:	3308      	adds	r3, #8
   1aa40:	c403      	stmia	r4!, {r0, r1}
   1aa42:	4573      	cmp	r3, lr
   1aa44:	4622      	mov	r2, r4
   1aa46:	d1f7      	bne.n	1aa38 <bt_crypto_f5+0x1c>
   1aa48:	6818      	ldr	r0, [r3, #0]
   1aa4a:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1aa4c:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   1aa4e:	6020      	str	r0, [r4, #0]
   1aa50:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1aa52:	2220      	movs	r2, #32
   1aa54:	a804      	add	r0, sp, #16
   1aa56:	f7ff ffb5 	bl	1a9c4 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1aa5a:	466b      	mov	r3, sp
   1aa5c:	2220      	movs	r2, #32
   1aa5e:	4822      	ldr	r0, [pc, #136]	; (1aae8 <bt_crypto_f5+0xcc>)
   1aa60:	a904      	add	r1, sp, #16
   1aa62:	f00f fbab 	bl	2a1bc <bt_crypto_aes_cmac>
	if (err) {
   1aa66:	4604      	mov	r4, r0
   1aa68:	bbc0      	cbnz	r0, 1aadc <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1aa6a:	2210      	movs	r2, #16
   1aa6c:	4651      	mov	r1, sl
   1aa6e:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1aa72:	f7ff ffa7 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1aa76:	2210      	movs	r2, #16
   1aa78:	4631      	mov	r1, r6
   1aa7a:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1aa7e:	f7ff ffa1 	bl	1a9c4 <sys_memcpy_swap>
	m[37] = a1->type;
   1aa82:	4629      	mov	r1, r5
   1aa84:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1aa88:	2206      	movs	r2, #6
   1aa8a:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   1aa8e:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1aa92:	f7ff ff97 	bl	1a9c4 <sys_memcpy_swap>
	m[44] = a2->type;
   1aa96:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1aa98:	2206      	movs	r2, #6
	m[44] = a2->type;
   1aa9a:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1aa9e:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   1aaa2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1aaa6:	f7ff ff8d 	bl	1a9c4 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1aaaa:	464b      	mov	r3, r9
   1aaac:	2235      	movs	r2, #53	; 0x35
   1aaae:	4641      	mov	r1, r8
   1aab0:	4668      	mov	r0, sp
   1aab2:	f00f fb83 	bl	2a1bc <bt_crypto_aes_cmac>
	if (err) {
   1aab6:	4604      	mov	r4, r0
   1aab8:	b980      	cbnz	r0, 1aadc <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1aaba:	4648      	mov	r0, r9
   1aabc:	f00f fb70 	bl	2a1a0 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1aac0:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1aac2:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   1aac4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1aac8:	4641      	mov	r1, r8
   1aaca:	463b      	mov	r3, r7
   1aacc:	4668      	mov	r0, sp
   1aace:	f00f fb75 	bl	2a1bc <bt_crypto_aes_cmac>
	if (err) {
   1aad2:	4604      	mov	r4, r0
   1aad4:	b910      	cbnz	r0, 1aadc <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1aad6:	4638      	mov	r0, r7
   1aad8:	f00f fb62 	bl	2a1a0 <sys_mem_swap.constprop.0>

	return 0;
}
   1aadc:	4620      	mov	r0, r4
   1aade:	b01a      	add	sp, #104	; 0x68
   1aae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aae4:	0002ced4 	.word	0x0002ced4
   1aae8:	00031d38 	.word	0x00031d38

0001aaec <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1aaec:	b570      	push	{r4, r5, r6, lr}
   1aaee:	460e      	mov	r6, r1
   1aaf0:	461d      	mov	r5, r3
   1aaf2:	4614      	mov	r4, r2
   1aaf4:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1aaf6:	4601      	mov	r1, r0
   1aaf8:	2220      	movs	r2, #32
   1aafa:	a804      	add	r0, sp, #16
   1aafc:	f7ff ff62 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1ab00:	2220      	movs	r2, #32
   1ab02:	4631      	mov	r1, r6
   1ab04:	a80c      	add	r0, sp, #48	; 0x30
   1ab06:	f7ff ff5d 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1ab0a:	2210      	movs	r2, #16
   1ab0c:	4629      	mov	r1, r5
   1ab0e:	a814      	add	r0, sp, #80	; 0x50
   1ab10:	f7ff ff58 	bl	1a9c4 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1ab14:	2210      	movs	r2, #16
   1ab16:	4621      	mov	r1, r4
   1ab18:	4668      	mov	r0, sp
   1ab1a:	f7ff ff53 	bl	1a9c4 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1ab1e:	466b      	mov	r3, sp
   1ab20:	2250      	movs	r2, #80	; 0x50
   1ab22:	4618      	mov	r0, r3
   1ab24:	a904      	add	r1, sp, #16
   1ab26:	f00f fb49 	bl	2a1bc <bt_crypto_aes_cmac>
	if (err) {
   1ab2a:	b940      	cbnz	r0, 1ab3e <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1ab2c:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1ab2e:	4a05      	ldr	r2, [pc, #20]	; (1ab44 <bt_crypto_g2+0x58>)
   1ab30:	ba1b      	rev	r3, r3
   1ab32:	fbb3 f1f2 	udiv	r1, r3, r2
   1ab36:	fb02 3311 	mls	r3, r2, r1, r3
   1ab3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1ab3c:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1ab3e:	b018      	add	sp, #96	; 0x60
   1ab40:	bd70      	pop	{r4, r5, r6, pc}
   1ab42:	bf00      	nop
   1ab44:	000f4240 	.word	0x000f4240

0001ab48 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   1ab48:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   1ab4a:	4804      	ldr	r0, [pc, #16]	; (1ab5c <fs_init+0x14>)
   1ab4c:	f010 ff3f 	bl	2b9ce <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1ab50:	4b03      	ldr	r3, [pc, #12]	; (1ab60 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   1ab52:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   1ab54:	e9c3 3300 	strd	r3, r3, [r3]
   1ab58:	bd08      	pop	{r3, pc}
   1ab5a:	bf00      	nop
   1ab5c:	20021730 	.word	0x20021730
   1ab60:	20021744 	.word	0x20021744

0001ab64 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1ab64:	2234      	movs	r2, #52	; 0x34
   1ab66:	4b02      	ldr	r3, [pc, #8]	; (1ab70 <net_buf_pool_get+0xc>)
   1ab68:	fb02 3000 	mla	r0, r2, r0, r3
   1ab6c:	4770      	bx	lr
   1ab6e:	bf00      	nop
   1ab70:	20008c7c 	.word	0x20008c7c

0001ab74 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ab74:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab76:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ab78:	4b06      	ldr	r3, [pc, #24]	; (1ab94 <net_buf_id+0x20>)
   1ab7a:	fb01 3302 	mla	r3, r1, r2, r3
   1ab7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ab80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ab84:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ab86:	331b      	adds	r3, #27
   1ab88:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1ab8c:	fbb0 f0f3 	udiv	r0, r0, r3
   1ab90:	4770      	bx	lr
   1ab92:	bf00      	nop
   1ab94:	20008c7c 	.word	0x20008c7c

0001ab98 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ab98:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab9a:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab9c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab9e:	4b09      	ldr	r3, [pc, #36]	; (1abc4 <fixed_data_alloc+0x2c>)
   1aba0:	fb04 3302 	mla	r3, r4, r2, r3
   1aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1aba6:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1aba8:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1abaa:	681a      	ldr	r2, [r3, #0]
   1abac:	4294      	cmp	r4, r2
   1abae:	bf94      	ite	ls
   1abb0:	600c      	strls	r4, [r1, #0]
   1abb2:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1abb4:	e9d3 5400 	ldrd	r5, r4, [r3]
   1abb8:	f7ff ffdc 	bl	1ab74 <net_buf_id>
}
   1abbc:	fb05 4000 	mla	r0, r5, r0, r4
   1abc0:	bd38      	pop	{r3, r4, r5, pc}
   1abc2:	bf00      	nop
   1abc4:	20008c7c 	.word	0x20008c7c

0001abc8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abcc:	b085      	sub	sp, #20
   1abce:	9103      	str	r1, [sp, #12]
   1abd0:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1abd2:	4619      	mov	r1, r3
   1abd4:	4610      	mov	r0, r2
{
   1abd6:	4692      	mov	sl, r2
   1abd8:	4699      	mov	r9, r3
   1abda:	4690      	mov	r8, r2
   1abdc:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1abde:	f010 ffda 	bl	2bb96 <sys_clock_timeout_end_calc>
   1abe2:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1abe6:	b945      	cbnz	r5, 1abfa <net_buf_alloc_len+0x32>
   1abe8:	4966      	ldr	r1, [pc, #408]	; (1ad84 <net_buf_alloc_len+0x1bc>)
   1abea:	23f4      	movs	r3, #244	; 0xf4
   1abec:	4a66      	ldr	r2, [pc, #408]	; (1ad88 <net_buf_alloc_len+0x1c0>)
   1abee:	4867      	ldr	r0, [pc, #412]	; (1ad8c <net_buf_alloc_len+0x1c4>)
   1abf0:	f00c f8bf 	bl	26d72 <assert_print>
   1abf4:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1abf6:	4864      	ldr	r0, [pc, #400]	; (1ad88 <net_buf_alloc_len+0x1c0>)
   1abf8:	e019      	b.n	1ac2e <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1abfa:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1abfe:	f04f 0320 	mov.w	r3, #32
   1ac02:	f3ef 8b11 	mrs	fp, BASEPRI
   1ac06:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac0e:	4630      	mov	r0, r6
   1ac10:	f006 fd86 	bl	21720 <z_spin_lock_valid>
   1ac14:	b968      	cbnz	r0, 1ac32 <net_buf_alloc_len+0x6a>
   1ac16:	2394      	movs	r3, #148	; 0x94
   1ac18:	4a5d      	ldr	r2, [pc, #372]	; (1ad90 <net_buf_alloc_len+0x1c8>)
   1ac1a:	495e      	ldr	r1, [pc, #376]	; (1ad94 <net_buf_alloc_len+0x1cc>)
   1ac1c:	485b      	ldr	r0, [pc, #364]	; (1ad8c <net_buf_alloc_len+0x1c4>)
   1ac1e:	f00c f8a8 	bl	26d72 <assert_print>
   1ac22:	4631      	mov	r1, r6
   1ac24:	485c      	ldr	r0, [pc, #368]	; (1ad98 <net_buf_alloc_len+0x1d0>)
   1ac26:	f00c f8a4 	bl	26d72 <assert_print>
   1ac2a:	2194      	movs	r1, #148	; 0x94
   1ac2c:	4858      	ldr	r0, [pc, #352]	; (1ad90 <net_buf_alloc_len+0x1c8>)
   1ac2e:	f00c f899 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac32:	4630      	mov	r0, r6
   1ac34:	f006 fd90 	bl	21758 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1ac38:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1ac3a:	2b00      	cmp	r3, #0
   1ac3c:	d070      	beq.n	1ad20 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1ac3e:	8c2a      	ldrh	r2, [r5, #32]
   1ac40:	429a      	cmp	r2, r3
   1ac42:	d94d      	bls.n	1ace0 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1ac44:	2200      	movs	r2, #0
   1ac46:	2300      	movs	r3, #0
   1ac48:	4628      	mov	r0, r5
   1ac4a:	f006 ffb7 	bl	21bbc <z_impl_k_queue_get>
			if (buf) {
   1ac4e:	4604      	mov	r4, r0
   1ac50:	2800      	cmp	r0, #0
   1ac52:	d045      	beq.n	1ace0 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac54:	4630      	mov	r0, r6
   1ac56:	f006 fd71 	bl	2173c <z_spin_unlock_valid>
   1ac5a:	b958      	cbnz	r0, 1ac74 <net_buf_alloc_len+0xac>
   1ac5c:	23c2      	movs	r3, #194	; 0xc2
   1ac5e:	4a4c      	ldr	r2, [pc, #304]	; (1ad90 <net_buf_alloc_len+0x1c8>)
   1ac60:	494e      	ldr	r1, [pc, #312]	; (1ad9c <net_buf_alloc_len+0x1d4>)
   1ac62:	484a      	ldr	r0, [pc, #296]	; (1ad8c <net_buf_alloc_len+0x1c4>)
   1ac64:	f00c f885 	bl	26d72 <assert_print>
   1ac68:	4631      	mov	r1, r6
   1ac6a:	484d      	ldr	r0, [pc, #308]	; (1ada0 <net_buf_alloc_len+0x1d8>)
   1ac6c:	f00c f881 	bl	26d72 <assert_print>
   1ac70:	21c2      	movs	r1, #194	; 0xc2
   1ac72:	e7db      	b.n	1ac2c <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1ac74:	f38b 8811 	msr	BASEPRI, fp
   1ac78:	f3bf 8f6f 	isb	sy
	if (size) {
   1ac7c:	9d03      	ldr	r5, [sp, #12]
   1ac7e:	2d00      	cmp	r5, #0
   1ac80:	d074      	beq.n	1ad6c <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ac82:	ea59 030a 	orrs.w	r3, r9, sl
   1ac86:	d012      	beq.n	1acae <net_buf_alloc_len+0xe6>
   1ac88:	f1b9 3fff 	cmp.w	r9, #4294967295
   1ac8c:	bf08      	it	eq
   1ac8e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1ac92:	d00c      	beq.n	1acae <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1ac94:	f009 fb12 	bl	242bc <sys_clock_tick_get>
   1ac98:	9b01      	ldr	r3, [sp, #4]
   1ac9a:	ebb3 0800 	subs.w	r8, r3, r0
   1ac9e:	9b02      	ldr	r3, [sp, #8]
   1aca0:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1aca4:	2f00      	cmp	r7, #0
   1aca6:	bfbc      	itt	lt
   1aca8:	f04f 0800 	movlt.w	r8, #0
   1acac:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1acae:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1acb2:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1acb4:	4e3b      	ldr	r6, [pc, #236]	; (1ada4 <net_buf_alloc_len+0x1dc>)
   1acb6:	4642      	mov	r2, r8
   1acb8:	fb09 6303 	mla	r3, r9, r3, r6
   1acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1acbe:	4620      	mov	r0, r4
   1acc0:	681b      	ldr	r3, [r3, #0]
   1acc2:	a903      	add	r1, sp, #12
   1acc4:	f8d3 a000 	ldr.w	sl, [r3]
   1acc8:	463b      	mov	r3, r7
   1acca:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1accc:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1acce:	2800      	cmp	r0, #0
   1acd0:	d13c      	bne.n	1ad4c <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1acd2:	7aa0      	ldrb	r0, [r4, #10]
   1acd4:	4621      	mov	r1, r4
   1acd6:	fb00 6009 	mla	r0, r0, r9, r6
   1acda:	f010 fea3 	bl	2ba24 <k_queue_prepend>
}
   1acde:	e030      	b.n	1ad42 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1ace0:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1ace2:	4630      	mov	r0, r6
   1ace4:	1e63      	subs	r3, r4, #1
   1ace6:	846b      	strh	r3, [r5, #34]	; 0x22
   1ace8:	f006 fd28 	bl	2173c <z_spin_unlock_valid>
   1acec:	2800      	cmp	r0, #0
   1acee:	d0b5      	beq.n	1ac5c <net_buf_alloc_len+0x94>
   1acf0:	f38b 8811 	msr	BASEPRI, fp
   1acf4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1acf8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1acfc:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1acfe:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ad00:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ad02:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ad04:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ad08:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1ad0c:	4b25      	ldr	r3, [pc, #148]	; (1ada4 <net_buf_alloc_len+0x1dc>)
   1ad0e:	4a26      	ldr	r2, [pc, #152]	; (1ada8 <net_buf_alloc_len+0x1e0>)
   1ad10:	1aeb      	subs	r3, r5, r3
   1ad12:	109b      	asrs	r3, r3, #2
   1ad14:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1ad16:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1ad18:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1ad1c:	72e3      	strb	r3, [r4, #11]
		goto success;
   1ad1e:	e7ad      	b.n	1ac7c <net_buf_alloc_len+0xb4>
   1ad20:	4630      	mov	r0, r6
   1ad22:	f006 fd0b 	bl	2173c <z_spin_unlock_valid>
   1ad26:	2800      	cmp	r0, #0
   1ad28:	d098      	beq.n	1ac5c <net_buf_alloc_len+0x94>
   1ad2a:	f38b 8811 	msr	BASEPRI, fp
   1ad2e:	f3bf 8f6f 	isb	sy
   1ad32:	4652      	mov	r2, sl
   1ad34:	464b      	mov	r3, r9
   1ad36:	4628      	mov	r0, r5
   1ad38:	f006 ff40 	bl	21bbc <z_impl_k_queue_get>
	if (!buf) {
   1ad3c:	4604      	mov	r4, r0
   1ad3e:	2800      	cmp	r0, #0
   1ad40:	d19c      	bne.n	1ac7c <net_buf_alloc_len+0xb4>
		return NULL;
   1ad42:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ad44:	4620      	mov	r0, r4
   1ad46:	b005      	add	sp, #20
   1ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1ad4c:	9b03      	ldr	r3, [sp, #12]
   1ad4e:	429d      	cmp	r5, r3
   1ad50:	d90d      	bls.n	1ad6e <net_buf_alloc_len+0x1a6>
   1ad52:	4916      	ldr	r1, [pc, #88]	; (1adac <net_buf_alloc_len+0x1e4>)
   1ad54:	f240 1355 	movw	r3, #341	; 0x155
   1ad58:	4a0b      	ldr	r2, [pc, #44]	; (1ad88 <net_buf_alloc_len+0x1c0>)
   1ad5a:	480c      	ldr	r0, [pc, #48]	; (1ad8c <net_buf_alloc_len+0x1c4>)
   1ad5c:	f00c f809 	bl	26d72 <assert_print>
   1ad60:	4813      	ldr	r0, [pc, #76]	; (1adb0 <net_buf_alloc_len+0x1e8>)
   1ad62:	f00c f806 	bl	26d72 <assert_print>
   1ad66:	f240 1155 	movw	r1, #341	; 0x155
   1ad6a:	e744      	b.n	1abf6 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1ad6c:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1ad6e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ad70:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ad72:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ad74:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ad76:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ad78:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1ad7a:	6963      	ldr	r3, [r4, #20]
   1ad7c:	8262      	strh	r2, [r4, #18]
   1ad7e:	60e3      	str	r3, [r4, #12]
}
   1ad80:	e7e0      	b.n	1ad44 <net_buf_alloc_len+0x17c>
   1ad82:	bf00      	nop
   1ad84:	00031da4 	.word	0x00031da4
   1ad88:	00031d55 	.word	0x00031d55
   1ad8c:	0002dd81 	.word	0x0002dd81
   1ad90:	0002ebe3 	.word	0x0002ebe3
   1ad94:	0002ec3c 	.word	0x0002ec3c
   1ad98:	0002ec51 	.word	0x0002ec51
   1ad9c:	0002ec10 	.word	0x0002ec10
   1ada0:	0002ec27 	.word	0x0002ec27
   1ada4:	20008c7c 	.word	0x20008c7c
   1ada8:	c4ec4ec5 	.word	0xc4ec4ec5
   1adac:	00031da9 	.word	0x00031da9
   1adb0:	00031dba 	.word	0x00031dba

0001adb4 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1adb4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1adb6:	b958      	cbnz	r0, 1add0 <net_buf_simple_reserve+0x1c>
   1adb8:	490d      	ldr	r1, [pc, #52]	; (1adf0 <net_buf_simple_reserve+0x3c>)
   1adba:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1adbe:	4a0d      	ldr	r2, [pc, #52]	; (1adf4 <net_buf_simple_reserve+0x40>)
   1adc0:	480d      	ldr	r0, [pc, #52]	; (1adf8 <net_buf_simple_reserve+0x44>)
   1adc2:	f00b ffd6 	bl	26d72 <assert_print>
   1adc6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1adca:	480a      	ldr	r0, [pc, #40]	; (1adf4 <net_buf_simple_reserve+0x40>)
   1adcc:	f00b ffca 	bl	26d64 <assert_post_action>
   1add0:	8883      	ldrh	r3, [r0, #4]
   1add2:	b14b      	cbz	r3, 1ade8 <net_buf_simple_reserve+0x34>
   1add4:	4909      	ldr	r1, [pc, #36]	; (1adfc <net_buf_simple_reserve+0x48>)
   1add6:	f240 13b9 	movw	r3, #441	; 0x1b9
   1adda:	4a06      	ldr	r2, [pc, #24]	; (1adf4 <net_buf_simple_reserve+0x40>)
   1addc:	4806      	ldr	r0, [pc, #24]	; (1adf8 <net_buf_simple_reserve+0x44>)
   1adde:	f00b ffc8 	bl	26d72 <assert_print>
   1ade2:	f240 11b9 	movw	r1, #441	; 0x1b9
   1ade6:	e7f0      	b.n	1adca <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ade8:	6883      	ldr	r3, [r0, #8]
   1adea:	440b      	add	r3, r1
   1adec:	6003      	str	r3, [r0, #0]
}
   1adee:	bd08      	pop	{r3, pc}
   1adf0:	00031e39 	.word	0x00031e39
   1adf4:	00031d55 	.word	0x00031d55
   1adf8:	0002dd81 	.word	0x0002dd81
   1adfc:	00031dbd 	.word	0x00031dbd

0001ae00 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1ae00:	b570      	push	{r4, r5, r6, lr}
   1ae02:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ae04:	4605      	mov	r5, r0
   1ae06:	b958      	cbnz	r0, 1ae20 <net_buf_slist_put+0x20>
   1ae08:	4928      	ldr	r1, [pc, #160]	; (1aeac <net_buf_slist_put+0xac>)
   1ae0a:	f240 13c5 	movw	r3, #453	; 0x1c5
   1ae0e:	4a28      	ldr	r2, [pc, #160]	; (1aeb0 <net_buf_slist_put+0xb0>)
   1ae10:	4828      	ldr	r0, [pc, #160]	; (1aeb4 <net_buf_slist_put+0xb4>)
   1ae12:	f00b ffae 	bl	26d72 <assert_print>
   1ae16:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1ae1a:	4825      	ldr	r0, [pc, #148]	; (1aeb0 <net_buf_slist_put+0xb0>)
   1ae1c:	f00b ffa2 	bl	26d64 <assert_post_action>
   1ae20:	b949      	cbnz	r1, 1ae36 <net_buf_slist_put+0x36>
   1ae22:	4925      	ldr	r1, [pc, #148]	; (1aeb8 <net_buf_slist_put+0xb8>)
   1ae24:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1ae28:	4a21      	ldr	r2, [pc, #132]	; (1aeb0 <net_buf_slist_put+0xb0>)
   1ae2a:	4822      	ldr	r0, [pc, #136]	; (1aeb4 <net_buf_slist_put+0xb4>)
   1ae2c:	f00b ffa1 	bl	26d72 <assert_print>
   1ae30:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1ae34:	e7f1      	b.n	1ae1a <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1ae36:	f04f 0320 	mov.w	r3, #32
   1ae3a:	f3ef 8611 	mrs	r6, BASEPRI
   1ae3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae46:	481d      	ldr	r0, [pc, #116]	; (1aebc <net_buf_slist_put+0xbc>)
   1ae48:	f006 fc6a 	bl	21720 <z_spin_lock_valid>
   1ae4c:	b960      	cbnz	r0, 1ae68 <net_buf_slist_put+0x68>
   1ae4e:	2394      	movs	r3, #148	; 0x94
   1ae50:	4a1b      	ldr	r2, [pc, #108]	; (1aec0 <net_buf_slist_put+0xc0>)
   1ae52:	491c      	ldr	r1, [pc, #112]	; (1aec4 <net_buf_slist_put+0xc4>)
   1ae54:	4817      	ldr	r0, [pc, #92]	; (1aeb4 <net_buf_slist_put+0xb4>)
   1ae56:	f00b ff8c 	bl	26d72 <assert_print>
   1ae5a:	4918      	ldr	r1, [pc, #96]	; (1aebc <net_buf_slist_put+0xbc>)
   1ae5c:	481a      	ldr	r0, [pc, #104]	; (1aec8 <net_buf_slist_put+0xc8>)
   1ae5e:	f00b ff88 	bl	26d72 <assert_print>
   1ae62:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae64:	4816      	ldr	r0, [pc, #88]	; (1aec0 <net_buf_slist_put+0xc0>)
   1ae66:	e7d9      	b.n	1ae1c <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1ae68:	4814      	ldr	r0, [pc, #80]	; (1aebc <net_buf_slist_put+0xbc>)
   1ae6a:	f006 fc75 	bl	21758 <z_spin_lock_set_owner>
	parent->next = child;
   1ae6e:	2300      	movs	r3, #0
   1ae70:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ae72:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ae74:	b98b      	cbnz	r3, 1ae9a <net_buf_slist_put+0x9a>
	list->head = node;
   1ae76:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae7a:	4810      	ldr	r0, [pc, #64]	; (1aebc <net_buf_slist_put+0xbc>)
   1ae7c:	f006 fc5e 	bl	2173c <z_spin_unlock_valid>
   1ae80:	b970      	cbnz	r0, 1aea0 <net_buf_slist_put+0xa0>
   1ae82:	23c2      	movs	r3, #194	; 0xc2
   1ae84:	4a0e      	ldr	r2, [pc, #56]	; (1aec0 <net_buf_slist_put+0xc0>)
   1ae86:	4911      	ldr	r1, [pc, #68]	; (1aecc <net_buf_slist_put+0xcc>)
   1ae88:	480a      	ldr	r0, [pc, #40]	; (1aeb4 <net_buf_slist_put+0xb4>)
   1ae8a:	f00b ff72 	bl	26d72 <assert_print>
   1ae8e:	490b      	ldr	r1, [pc, #44]	; (1aebc <net_buf_slist_put+0xbc>)
   1ae90:	480f      	ldr	r0, [pc, #60]	; (1aed0 <net_buf_slist_put+0xd0>)
   1ae92:	f00b ff6e 	bl	26d72 <assert_print>
   1ae96:	21c2      	movs	r1, #194	; 0xc2
   1ae98:	e7e4      	b.n	1ae64 <net_buf_slist_put+0x64>
	parent->next = child;
   1ae9a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ae9c:	606c      	str	r4, [r5, #4]
}
   1ae9e:	e7ec      	b.n	1ae7a <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1aea0:	f386 8811 	msr	BASEPRI, r6
   1aea4:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1aea8:	bd70      	pop	{r4, r5, r6, pc}
   1aeaa:	bf00      	nop
   1aeac:	00030744 	.word	0x00030744
   1aeb0:	00031d55 	.word	0x00031d55
   1aeb4:	0002dd81 	.word	0x0002dd81
   1aeb8:	00031e39 	.word	0x00031e39
   1aebc:	2002174c 	.word	0x2002174c
   1aec0:	0002ebe3 	.word	0x0002ebe3
   1aec4:	0002ec3c 	.word	0x0002ec3c
   1aec8:	0002ec51 	.word	0x0002ec51
   1aecc:	0002ec10 	.word	0x0002ec10
   1aed0:	0002ec27 	.word	0x0002ec27

0001aed4 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1aed4:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1aed6:	4604      	mov	r4, r0
   1aed8:	b958      	cbnz	r0, 1aef2 <net_buf_slist_get+0x1e>
   1aeda:	4923      	ldr	r1, [pc, #140]	; (1af68 <net_buf_slist_get+0x94>)
   1aedc:	4823      	ldr	r0, [pc, #140]	; (1af6c <net_buf_slist_get+0x98>)
   1aede:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1aee2:	4a23      	ldr	r2, [pc, #140]	; (1af70 <net_buf_slist_get+0x9c>)
   1aee4:	f00b ff45 	bl	26d72 <assert_print>
   1aee8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1aeec:	4820      	ldr	r0, [pc, #128]	; (1af70 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aeee:	f00b ff39 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   1aef2:	f04f 0320 	mov.w	r3, #32
   1aef6:	f3ef 8611 	mrs	r6, BASEPRI
   1aefa:	f383 8812 	msr	BASEPRI_MAX, r3
   1aefe:	f3bf 8f6f 	isb	sy
   1af02:	481c      	ldr	r0, [pc, #112]	; (1af74 <net_buf_slist_get+0xa0>)
   1af04:	f006 fc0c 	bl	21720 <z_spin_lock_valid>
   1af08:	b960      	cbnz	r0, 1af24 <net_buf_slist_get+0x50>
   1af0a:	2394      	movs	r3, #148	; 0x94
   1af0c:	4a1a      	ldr	r2, [pc, #104]	; (1af78 <net_buf_slist_get+0xa4>)
   1af0e:	491b      	ldr	r1, [pc, #108]	; (1af7c <net_buf_slist_get+0xa8>)
   1af10:	4816      	ldr	r0, [pc, #88]	; (1af6c <net_buf_slist_get+0x98>)
   1af12:	f00b ff2e 	bl	26d72 <assert_print>
   1af16:	4917      	ldr	r1, [pc, #92]	; (1af74 <net_buf_slist_get+0xa0>)
   1af18:	4819      	ldr	r0, [pc, #100]	; (1af80 <net_buf_slist_get+0xac>)
   1af1a:	f00b ff2a 	bl	26d72 <assert_print>
   1af1e:	2194      	movs	r1, #148	; 0x94
   1af20:	4815      	ldr	r0, [pc, #84]	; (1af78 <net_buf_slist_get+0xa4>)
   1af22:	e7e4      	b.n	1aeee <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1af24:	4813      	ldr	r0, [pc, #76]	; (1af74 <net_buf_slist_get+0xa0>)
   1af26:	f006 fc17 	bl	21758 <z_spin_lock_set_owner>
	return list->head;
   1af2a:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1af2c:	b12d      	cbz	r5, 1af3a <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1af2e:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1af30:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1af32:	4295      	cmp	r5, r2
	list->head = node;
   1af34:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1af36:	bf08      	it	eq
   1af38:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af3a:	480e      	ldr	r0, [pc, #56]	; (1af74 <net_buf_slist_get+0xa0>)
   1af3c:	f006 fbfe 	bl	2173c <z_spin_unlock_valid>
   1af40:	b958      	cbnz	r0, 1af5a <net_buf_slist_get+0x86>
   1af42:	23c2      	movs	r3, #194	; 0xc2
   1af44:	4a0c      	ldr	r2, [pc, #48]	; (1af78 <net_buf_slist_get+0xa4>)
   1af46:	490f      	ldr	r1, [pc, #60]	; (1af84 <net_buf_slist_get+0xb0>)
   1af48:	4808      	ldr	r0, [pc, #32]	; (1af6c <net_buf_slist_get+0x98>)
   1af4a:	f00b ff12 	bl	26d72 <assert_print>
   1af4e:	4909      	ldr	r1, [pc, #36]	; (1af74 <net_buf_slist_get+0xa0>)
   1af50:	480d      	ldr	r0, [pc, #52]	; (1af88 <net_buf_slist_get+0xb4>)
   1af52:	f00b ff0e 	bl	26d72 <assert_print>
   1af56:	21c2      	movs	r1, #194	; 0xc2
   1af58:	e7e2      	b.n	1af20 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1af5a:	f386 8811 	msr	BASEPRI, r6
   1af5e:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1af62:	4628      	mov	r0, r5
   1af64:	bd70      	pop	{r4, r5, r6, pc}
   1af66:	bf00      	nop
   1af68:	00030744 	.word	0x00030744
   1af6c:	0002dd81 	.word	0x0002dd81
   1af70:	00031d55 	.word	0x00031d55
   1af74:	2002174c 	.word	0x2002174c
   1af78:	0002ebe3 	.word	0x0002ebe3
   1af7c:	0002ec3c 	.word	0x0002ec3c
   1af80:	0002ec51 	.word	0x0002ec51
   1af84:	0002ec10 	.word	0x0002ec10
   1af88:	0002ec27 	.word	0x0002ec27

0001af8c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1af8c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1af8e:	b958      	cbnz	r0, 1afa8 <net_buf_put+0x1c>
   1af90:	490d      	ldr	r1, [pc, #52]	; (1afc8 <net_buf_put+0x3c>)
   1af92:	f240 13df 	movw	r3, #479	; 0x1df
   1af96:	4a0d      	ldr	r2, [pc, #52]	; (1afcc <net_buf_put+0x40>)
   1af98:	480d      	ldr	r0, [pc, #52]	; (1afd0 <net_buf_put+0x44>)
   1af9a:	f00b feea 	bl	26d72 <assert_print>
   1af9e:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1afa2:	480a      	ldr	r0, [pc, #40]	; (1afcc <net_buf_put+0x40>)
   1afa4:	f00b fede 	bl	26d64 <assert_post_action>
   1afa8:	b949      	cbnz	r1, 1afbe <net_buf_put+0x32>
   1afaa:	490a      	ldr	r1, [pc, #40]	; (1afd4 <net_buf_put+0x48>)
   1afac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1afb0:	4a06      	ldr	r2, [pc, #24]	; (1afcc <net_buf_put+0x40>)
   1afb2:	4807      	ldr	r0, [pc, #28]	; (1afd0 <net_buf_put+0x44>)
   1afb4:	f00b fedd 	bl	26d72 <assert_print>
   1afb8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1afbc:	e7f1      	b.n	1afa2 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1afbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1afc2:	f010 bd24 	b.w	2ba0e <k_queue_append>
   1afc6:	bf00      	nop
   1afc8:	00031dcc 	.word	0x00031dcc
   1afcc:	00031d55 	.word	0x00031d55
   1afd0:	0002dd81 	.word	0x0002dd81
   1afd4:	00031e39 	.word	0x00031e39

0001afd8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1afd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1afdc:	4605      	mov	r5, r0
   1afde:	b328      	cbz	r0, 1b02c <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1afe0:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1afe2:	f04f 0834 	mov.w	r8, #52	; 0x34
   1afe6:	4e1a      	ldr	r6, [pc, #104]	; (1b050 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1afe8:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1afea:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1afec:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1afee:	3b01      	subs	r3, #1
   1aff0:	b2db      	uxtb	r3, r3
   1aff2:	7223      	strb	r3, [r4, #8]
   1aff4:	b9c3      	cbnz	r3, 1b028 <net_buf_unref+0x50>
		if (buf->__buf) {
   1aff6:	6961      	ldr	r1, [r4, #20]
   1aff8:	b159      	cbz	r1, 1b012 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1affa:	7a63      	ldrb	r3, [r4, #9]
   1affc:	07db      	lsls	r3, r3, #31
   1affe:	d407      	bmi.n	1b010 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b000:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1b002:	4620      	mov	r0, r4
   1b004:	fb08 6303 	mla	r3, r8, r3, r6
   1b008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b00a:	681b      	ldr	r3, [r3, #0]
   1b00c:	689b      	ldr	r3, [r3, #8]
   1b00e:	4798      	blx	r3
			buf->__buf = NULL;
   1b010:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1b012:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1b014:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1b016:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1b01a:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1b01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b01e:	b18b      	cbz	r3, 1b044 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1b020:	4620      	mov	r0, r4
   1b022:	4798      	blx	r3
	while (buf) {
   1b024:	2d00      	cmp	r5, #0
   1b026:	d1df      	bne.n	1afe8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1b028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1b02c:	4909      	ldr	r1, [pc, #36]	; (1b054 <net_buf_unref+0x7c>)
   1b02e:	480a      	ldr	r0, [pc, #40]	; (1b058 <net_buf_unref+0x80>)
   1b030:	f240 13eb 	movw	r3, #491	; 0x1eb
   1b034:	4a09      	ldr	r2, [pc, #36]	; (1b05c <net_buf_unref+0x84>)
   1b036:	f00b fe9c 	bl	26d72 <assert_print>
   1b03a:	f240 11eb 	movw	r1, #491	; 0x1eb
   1b03e:	4807      	ldr	r0, [pc, #28]	; (1b05c <net_buf_unref+0x84>)
   1b040:	f00b fe90 	bl	26d64 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1b044:	4621      	mov	r1, r4
   1b046:	fb00 6008 	mla	r0, r0, r8, r6
   1b04a:	f010 fceb 	bl	2ba24 <k_queue_prepend>
}
   1b04e:	e7e9      	b.n	1b024 <net_buf_unref+0x4c>
   1b050:	20008c7c 	.word	0x20008c7c
   1b054:	00031e39 	.word	0x00031e39
   1b058:	0002dd81 	.word	0x0002dd81
   1b05c:	00031d55 	.word	0x00031d55

0001b060 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1b060:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b062:	b958      	cbnz	r0, 1b07c <net_buf_ref+0x1c>
   1b064:	4907      	ldr	r1, [pc, #28]	; (1b084 <net_buf_ref+0x24>)
   1b066:	4808      	ldr	r0, [pc, #32]	; (1b088 <net_buf_ref+0x28>)
   1b068:	f240 231a 	movw	r3, #538	; 0x21a
   1b06c:	4a07      	ldr	r2, [pc, #28]	; (1b08c <net_buf_ref+0x2c>)
   1b06e:	f00b fe80 	bl	26d72 <assert_print>
   1b072:	f240 211a 	movw	r1, #538	; 0x21a
   1b076:	4805      	ldr	r0, [pc, #20]	; (1b08c <net_buf_ref+0x2c>)
   1b078:	f00b fe74 	bl	26d64 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b07c:	7a02      	ldrb	r2, [r0, #8]
   1b07e:	3201      	adds	r2, #1
   1b080:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1b082:	bd08      	pop	{r3, pc}
   1b084:	00031e39 	.word	0x00031e39
   1b088:	0002dd81 	.word	0x0002dd81
   1b08c:	00031d55 	.word	0x00031d55

0001b090 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1b090:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b092:	4603      	mov	r3, r0
   1b094:	b958      	cbnz	r0, 1b0ae <net_buf_frag_last+0x1e>
   1b096:	4908      	ldr	r1, [pc, #32]	; (1b0b8 <net_buf_frag_last+0x28>)
   1b098:	4808      	ldr	r0, [pc, #32]	; (1b0bc <net_buf_frag_last+0x2c>)
   1b09a:	f240 2357 	movw	r3, #599	; 0x257
   1b09e:	4a08      	ldr	r2, [pc, #32]	; (1b0c0 <net_buf_frag_last+0x30>)
   1b0a0:	f00b fe67 	bl	26d72 <assert_print>
   1b0a4:	f240 2157 	movw	r1, #599	; 0x257
   1b0a8:	4805      	ldr	r0, [pc, #20]	; (1b0c0 <net_buf_frag_last+0x30>)
   1b0aa:	f00b fe5b 	bl	26d64 <assert_post_action>

	while (buf->frags) {
   1b0ae:	4618      	mov	r0, r3
   1b0b0:	685b      	ldr	r3, [r3, #4]
   1b0b2:	2b00      	cmp	r3, #0
   1b0b4:	d1fb      	bne.n	1b0ae <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1b0b6:	bd08      	pop	{r3, pc}
   1b0b8:	00031e39 	.word	0x00031e39
   1b0bc:	0002dd81 	.word	0x0002dd81
   1b0c0:	00031d55 	.word	0x00031d55

0001b0c4 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1b0c4:	b570      	push	{r4, r5, r6, lr}
   1b0c6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1b0c8:	4604      	mov	r4, r0
   1b0ca:	b958      	cbnz	r0, 1b0e4 <net_buf_frag_insert+0x20>
   1b0cc:	490f      	ldr	r1, [pc, #60]	; (1b10c <net_buf_frag_insert+0x48>)
   1b0ce:	f240 2362 	movw	r3, #610	; 0x262
   1b0d2:	4a0f      	ldr	r2, [pc, #60]	; (1b110 <net_buf_frag_insert+0x4c>)
   1b0d4:	480f      	ldr	r0, [pc, #60]	; (1b114 <net_buf_frag_insert+0x50>)
   1b0d6:	f00b fe4c 	bl	26d72 <assert_print>
   1b0da:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1b0de:	480c      	ldr	r0, [pc, #48]	; (1b110 <net_buf_frag_insert+0x4c>)
   1b0e0:	f00b fe40 	bl	26d64 <assert_post_action>
   1b0e4:	b949      	cbnz	r1, 1b0fa <net_buf_frag_insert+0x36>
   1b0e6:	490c      	ldr	r1, [pc, #48]	; (1b118 <net_buf_frag_insert+0x54>)
   1b0e8:	f240 2363 	movw	r3, #611	; 0x263
   1b0ec:	4a08      	ldr	r2, [pc, #32]	; (1b110 <net_buf_frag_insert+0x4c>)
   1b0ee:	4809      	ldr	r0, [pc, #36]	; (1b114 <net_buf_frag_insert+0x50>)
   1b0f0:	f00b fe3f 	bl	26d72 <assert_print>
   1b0f4:	f240 2163 	movw	r1, #611	; 0x263
   1b0f8:	e7f1      	b.n	1b0de <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1b0fa:	6846      	ldr	r6, [r0, #4]
   1b0fc:	b11e      	cbz	r6, 1b106 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1b0fe:	4608      	mov	r0, r1
   1b100:	f7ff ffc6 	bl	1b090 <net_buf_frag_last>
   1b104:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1b106:	6065      	str	r5, [r4, #4]
}
   1b108:	bd70      	pop	{r4, r5, r6, pc}
   1b10a:	bf00      	nop
   1b10c:	00031dd1 	.word	0x00031dd1
   1b110:	00031d55 	.word	0x00031d55
   1b114:	0002dd81 	.word	0x0002dd81
   1b118:	00031dd8 	.word	0x00031dd8

0001b11c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1b11c:	b538      	push	{r3, r4, r5, lr}
   1b11e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1b120:	460c      	mov	r4, r1
   1b122:	b959      	cbnz	r1, 1b13c <net_buf_frag_add+0x20>
   1b124:	490c      	ldr	r1, [pc, #48]	; (1b158 <net_buf_frag_add+0x3c>)
   1b126:	480d      	ldr	r0, [pc, #52]	; (1b15c <net_buf_frag_add+0x40>)
   1b128:	f240 236e 	movw	r3, #622	; 0x26e
   1b12c:	4a0c      	ldr	r2, [pc, #48]	; (1b160 <net_buf_frag_add+0x44>)
   1b12e:	f00b fe20 	bl	26d72 <assert_print>
   1b132:	f240 216e 	movw	r1, #622	; 0x26e
   1b136:	480a      	ldr	r0, [pc, #40]	; (1b160 <net_buf_frag_add+0x44>)
   1b138:	f00b fe14 	bl	26d64 <assert_post_action>

	if (!head) {
   1b13c:	b920      	cbnz	r0, 1b148 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1b13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1b142:	4608      	mov	r0, r1
   1b144:	f7ff bf8c 	b.w	1b060 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1b148:	f7ff ffa2 	bl	1b090 <net_buf_frag_last>
   1b14c:	4621      	mov	r1, r4
   1b14e:	f7ff ffb9 	bl	1b0c4 <net_buf_frag_insert>
}
   1b152:	4628      	mov	r0, r5
   1b154:	bd38      	pop	{r3, r4, r5, pc}
   1b156:	bf00      	nop
   1b158:	00031dd8 	.word	0x00031dd8
   1b15c:	0002dd81 	.word	0x0002dd81
   1b160:	00031d55 	.word	0x00031d55

0001b164 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1b164:	b508      	push	{r3, lr}
   1b166:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b168:	6800      	ldr	r0, [r0, #0]
   1b16a:	689a      	ldr	r2, [r3, #8]
   1b16c:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1b16e:	4291      	cmp	r1, r2
   1b170:	d90b      	bls.n	1b18a <net_buf_simple_push+0x26>
   1b172:	4909      	ldr	r1, [pc, #36]	; (1b198 <net_buf_simple_push+0x34>)
   1b174:	4809      	ldr	r0, [pc, #36]	; (1b19c <net_buf_simple_push+0x38>)
   1b176:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1b17a:	4a09      	ldr	r2, [pc, #36]	; (1b1a0 <net_buf_simple_push+0x3c>)
   1b17c:	f00b fdf9 	bl	26d72 <assert_print>
   1b180:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1b184:	4806      	ldr	r0, [pc, #24]	; (1b1a0 <net_buf_simple_push+0x3c>)
   1b186:	f00b fded 	bl	26d64 <assert_post_action>
	buf->len += len;
   1b18a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1b18c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1b18e:	4411      	add	r1, r2
	buf->data -= len;
   1b190:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1b192:	8099      	strh	r1, [r3, #4]
}
   1b194:	bd08      	pop	{r3, pc}
   1b196:	bf00      	nop
   1b198:	00031ded 	.word	0x00031ded
   1b19c:	0002dd81 	.word	0x0002dd81
   1b1a0:	00031d55 	.word	0x00031d55

0001b1a4 <net_buf_simple_pull>:
{
   1b1a4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1b1a6:	8882      	ldrh	r2, [r0, #4]
{
   1b1a8:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b1aa:	428a      	cmp	r2, r1
   1b1ac:	d20b      	bcs.n	1b1c6 <net_buf_simple_pull+0x22>
   1b1ae:	4909      	ldr	r1, [pc, #36]	; (1b1d4 <net_buf_simple_pull+0x30>)
   1b1b0:	4809      	ldr	r0, [pc, #36]	; (1b1d8 <net_buf_simple_pull+0x34>)
   1b1b2:	f240 4352 	movw	r3, #1106	; 0x452
   1b1b6:	4a09      	ldr	r2, [pc, #36]	; (1b1dc <net_buf_simple_pull+0x38>)
   1b1b8:	f00b fddb 	bl	26d72 <assert_print>
   1b1bc:	f240 4152 	movw	r1, #1106	; 0x452
   1b1c0:	4806      	ldr	r0, [pc, #24]	; (1b1dc <net_buf_simple_pull+0x38>)
   1b1c2:	f00b fdcf 	bl	26d64 <assert_post_action>
	buf->len -= len;
   1b1c6:	1a52      	subs	r2, r2, r1
   1b1c8:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1b1ca:	6800      	ldr	r0, [r0, #0]
   1b1cc:	4408      	add	r0, r1
   1b1ce:	6018      	str	r0, [r3, #0]
}
   1b1d0:	bd08      	pop	{r3, pc}
   1b1d2:	bf00      	nop
   1b1d4:	00031ddd 	.word	0x00031ddd
   1b1d8:	0002dd81 	.word	0x0002dd81
   1b1dc:	00031d55 	.word	0x00031d55

0001b1e0 <net_buf_simple_pull_mem>:
{
   1b1e0:	b508      	push	{r3, lr}
   1b1e2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b1e4:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1b1e6:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1b1e8:	428a      	cmp	r2, r1
   1b1ea:	d20b      	bcs.n	1b204 <net_buf_simple_pull_mem+0x24>
   1b1ec:	4908      	ldr	r1, [pc, #32]	; (1b210 <net_buf_simple_pull_mem+0x30>)
   1b1ee:	4809      	ldr	r0, [pc, #36]	; (1b214 <net_buf_simple_pull_mem+0x34>)
   1b1f0:	f240 435e 	movw	r3, #1118	; 0x45e
   1b1f4:	4a08      	ldr	r2, [pc, #32]	; (1b218 <net_buf_simple_pull_mem+0x38>)
   1b1f6:	f00b fdbc 	bl	26d72 <assert_print>
   1b1fa:	f240 415e 	movw	r1, #1118	; 0x45e
   1b1fe:	4806      	ldr	r0, [pc, #24]	; (1b218 <net_buf_simple_pull_mem+0x38>)
   1b200:	f00b fdb0 	bl	26d64 <assert_post_action>
	buf->len -= len;
   1b204:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1b206:	4401      	add	r1, r0
	buf->len -= len;
   1b208:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1b20a:	6019      	str	r1, [r3, #0]
}
   1b20c:	bd08      	pop	{r3, pc}
   1b20e:	bf00      	nop
   1b210:	00031ddd 	.word	0x00031ddd
   1b214:	0002dd81 	.word	0x0002dd81
   1b218:	00031d55 	.word	0x00031d55

0001b21c <net_buf_simple_add>:
{
   1b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1b21e:	8885      	ldrh	r5, [r0, #4]
   1b220:	6803      	ldr	r3, [r0, #0]
   1b222:	460e      	mov	r6, r1
   1b224:	4604      	mov	r4, r0
   1b226:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1b228:	f00f f876 	bl	2a318 <net_buf_simple_tailroom>
   1b22c:	42b0      	cmp	r0, r6
   1b22e:	d20b      	bcs.n	1b248 <net_buf_simple_add+0x2c>
   1b230:	4907      	ldr	r1, [pc, #28]	; (1b250 <net_buf_simple_add+0x34>)
   1b232:	4808      	ldr	r0, [pc, #32]	; (1b254 <net_buf_simple_add+0x38>)
   1b234:	f240 3303 	movw	r3, #771	; 0x303
   1b238:	4a07      	ldr	r2, [pc, #28]	; (1b258 <net_buf_simple_add+0x3c>)
   1b23a:	f00b fd9a 	bl	26d72 <assert_print>
   1b23e:	f240 3103 	movw	r1, #771	; 0x303
   1b242:	4805      	ldr	r0, [pc, #20]	; (1b258 <net_buf_simple_add+0x3c>)
   1b244:	f00b fd8e 	bl	26d64 <assert_post_action>
	buf->len += len;
   1b248:	4435      	add	r5, r6
   1b24a:	80a5      	strh	r5, [r4, #4]
}
   1b24c:	4638      	mov	r0, r7
   1b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b250:	00031e11 	.word	0x00031e11
   1b254:	0002dd81 	.word	0x0002dd81
   1b258:	00031d55 	.word	0x00031d55

0001b25c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1b25c:	b508      	push	{r3, lr}
   1b25e:	4804      	ldr	r0, [pc, #16]	; (1b270 <xoshiro128_initialize+0x14>)
   1b260:	f010 fb6c 	bl	2b93c <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1b264:	2800      	cmp	r0, #0
}
   1b266:	bf0c      	ite	eq
   1b268:	f06f 0012 	mvneq.w	r0, #18
   1b26c:	2000      	movne	r0, #0
   1b26e:	bd08      	pop	{r3, pc}
   1b270:	0002c768 	.word	0x0002c768

0001b274 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1b274:	2813      	cmp	r0, #19
   1b276:	d80e      	bhi.n	1b296 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1b278:	4a08      	ldr	r2, [pc, #32]	; (1b29c <adc_gain_invert+0x28>)
   1b27a:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1b27e:	b153      	cbz	r3, 1b296 <adc_gain_invert+0x22>
   1b280:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1b284:	7852      	ldrb	r2, [r2, #1]
   1b286:	b132      	cbz	r2, 1b296 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1b288:	6808      	ldr	r0, [r1, #0]
   1b28a:	4343      	muls	r3, r0
   1b28c:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1b290:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1b292:	600b      	str	r3, [r1, #0]
			rv = 0;
   1b294:	4770      	bx	lr
	int rv = -EINVAL;
   1b296:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1b29a:	4770      	bx	lr
   1b29c:	00031e3d 	.word	0x00031e3d

0001b2a0 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1b2a0:	2201      	movs	r2, #1
   1b2a2:	4b05      	ldr	r3, [pc, #20]	; (1b2b8 <adc_context_start_sampling+0x18>)
   1b2a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1b2a8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1b2ac:	b109      	cbz	r1, 1b2b2 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b2ae:	60da      	str	r2, [r3, #12]
}
   1b2b0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b2b2:	601a      	str	r2, [r3, #0]
   1b2b4:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1b2b6:	4770      	bx	lr
   1b2b8:	4000e000 	.word	0x4000e000

0001b2bc <adc_nrfx_channel_setup>:
{
   1b2bc:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1b2be:	7908      	ldrb	r0, [r1, #4]
{
   1b2c0:	b086      	sub	sp, #24
	uint8_t channel_id = channel_cfg->channel_id;
   1b2c2:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1b2c6:	2c07      	cmp	r4, #7
   1b2c8:	d823      	bhi.n	1b312 <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->gain) {
   1b2ca:	780b      	ldrb	r3, [r1, #0]
   1b2cc:	2b0b      	cmp	r3, #11
   1b2ce:	d815      	bhi.n	1b2fc <adc_nrfx_channel_setup+0x40>
   1b2d0:	e8df f003 	tbb	[pc, r3]
   1b2d4:	07070707 	.word	0x07070707
   1b2d8:	14140614 	.word	0x14140614
   1b2dc:	1214100e 	.word	0x1214100e
		config.gain = NRF_SAADC_GAIN1_2;
   1b2e0:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1b2e2:	784a      	ldrb	r2, [r1, #1]
   1b2e4:	2a03      	cmp	r2, #3
   1b2e6:	d018      	beq.n	1b31a <adc_nrfx_channel_setup+0x5e>
   1b2e8:	2a04      	cmp	r2, #4
   1b2ea:	d028      	beq.n	1b33e <adc_nrfx_channel_setup+0x82>
		LOG_ERR("Selected ADC reference is not valid");
   1b2ec:	4b31      	ldr	r3, [pc, #196]	; (1b3b4 <adc_nrfx_channel_setup+0xf8>)
   1b2ee:	e006      	b.n	1b2fe <adc_nrfx_channel_setup+0x42>
		config.gain = NRF_SAADC_GAIN1;
   1b2f0:	2305      	movs	r3, #5
		break;
   1b2f2:	e7f6      	b.n	1b2e2 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1b2f4:	2306      	movs	r3, #6
		break;
   1b2f6:	e7f4      	b.n	1b2e2 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   1b2f8:	2307      	movs	r3, #7
		break;
   1b2fa:	e7f2      	b.n	1b2e2 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   1b2fc:	4b2e      	ldr	r3, [pc, #184]	; (1b3b8 <adc_nrfx_channel_setup+0xfc>)
   1b2fe:	9305      	str	r3, [sp, #20]
   1b300:	2302      	movs	r3, #2
   1b302:	9304      	str	r3, [sp, #16]
   1b304:	2300      	movs	r3, #0
   1b306:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b30a:	482c      	ldr	r0, [pc, #176]	; (1b3bc <adc_nrfx_channel_setup+0x100>)
   1b30c:	aa04      	add	r2, sp, #16
   1b30e:	f7f3 fb21 	bl	e954 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1b312:	f06f 0015 	mvn.w	r0, #21
}
   1b316:	b006      	add	sp, #24
   1b318:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1b31a:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1b31c:	f244 060a 	movw	r6, #16394	; 0x400a
   1b320:	884a      	ldrh	r2, [r1, #2]
   1b322:	42b2      	cmp	r2, r6
   1b324:	d03f      	beq.n	1b3a6 <adc_nrfx_channel_setup+0xea>
   1b326:	d80c      	bhi.n	1b342 <adc_nrfx_channel_setup+0x86>
   1b328:	f244 0603 	movw	r6, #16387	; 0x4003
   1b32c:	42b2      	cmp	r2, r6
   1b32e:	d016      	beq.n	1b35e <adc_nrfx_channel_setup+0xa2>
   1b330:	f244 0605 	movw	r6, #16389	; 0x4005
   1b334:	42b2      	cmp	r2, r6
   1b336:	d034      	beq.n	1b3a2 <adc_nrfx_channel_setup+0xe6>
   1b338:	b3aa      	cbz	r2, 1b3a6 <adc_nrfx_channel_setup+0xea>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1b33a:	4b21      	ldr	r3, [pc, #132]	; (1b3c0 <adc_nrfx_channel_setup+0x104>)
   1b33c:	e7df      	b.n	1b2fe <adc_nrfx_channel_setup+0x42>
	nrf_saadc_channel_config_t config = {
   1b33e:	2500      	movs	r5, #0
   1b340:	e7ec      	b.n	1b31c <adc_nrfx_channel_setup+0x60>
	switch (channel_cfg->acquisition_time) {
   1b342:	f244 0614 	movw	r6, #16404	; 0x4014
   1b346:	42b2      	cmp	r2, r6
   1b348:	d02f      	beq.n	1b3aa <adc_nrfx_channel_setup+0xee>
   1b34a:	f244 0628 	movw	r6, #16424	; 0x4028
   1b34e:	42b2      	cmp	r2, r6
   1b350:	d02d      	beq.n	1b3ae <adc_nrfx_channel_setup+0xf2>
   1b352:	f244 060f 	movw	r6, #16399	; 0x400f
   1b356:	42b2      	cmp	r2, r6
   1b358:	d1ef      	bne.n	1b33a <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1b35a:	2203      	movs	r2, #3
   1b35c:	e000      	b.n	1b360 <adc_nrfx_channel_setup+0xa4>
	nrf_saadc_channel_config_t config = {
   1b35e:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b360:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1b364:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b366:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   1b36a:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b36c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1b370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1b374:	0122      	lsls	r2, r4, #4
   1b376:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b37a:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1b37e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1b382:	0123      	lsls	r3, r4, #4
   1b384:	798a      	ldrb	r2, [r1, #6]
   1b386:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b38a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1b38e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1b392:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1b396:	4b0b      	ldr	r3, [pc, #44]	; (1b3c4 <adc_nrfx_channel_setup+0x108>)
   1b398:	794a      	ldrb	r2, [r1, #5]
   1b39a:	4423      	add	r3, r4
   1b39c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1b3a0:	e7b9      	b.n	1b316 <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
   1b3a2:	2201      	movs	r2, #1
   1b3a4:	e7dc      	b.n	1b360 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1b3a6:	2202      	movs	r2, #2
   1b3a8:	e7da      	b.n	1b360 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1b3aa:	2204      	movs	r2, #4
   1b3ac:	e7d8      	b.n	1b360 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1b3ae:	2205      	movs	r2, #5
   1b3b0:	e7d6      	b.n	1b360 <adc_nrfx_channel_setup+0xa4>
   1b3b2:	bf00      	nop
   1b3b4:	00031e84 	.word	0x00031e84
   1b3b8:	00031e65 	.word	0x00031e65
   1b3bc:	0002cc90 	.word	0x0002cc90
   1b3c0:	00031ea8 	.word	0x00031ea8
   1b3c4:	20008168 	.word	0x20008168

0001b3c8 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3cc:	b088      	sub	sp, #32
   1b3ce:	460c      	mov	r4, r1
   1b3d0:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   1b3d2:	f04f 33ff 	mov.w	r3, #4294967295
   1b3d6:	f04f 32ff 	mov.w	r2, #4294967295
   1b3da:	4876      	ldr	r0, [pc, #472]	; (1b5b4 <adc_nrfx_read+0x1ec>)
   1b3dc:	f006 fc9c 	bl	21d18 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1b3e0:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1b3e2:	1e73      	subs	r3, r6, #1
   1b3e4:	2bfe      	cmp	r3, #254	; 0xfe
   1b3e6:	d90c      	bls.n	1b402 <adc_nrfx_read+0x3a>
		LOG_ERR("Invalid selection of channels");
   1b3e8:	4b73      	ldr	r3, [pc, #460]	; (1b5b8 <adc_nrfx_read+0x1f0>)
		LOG_ERR(
   1b3ea:	617b      	str	r3, [r7, #20]
   1b3ec:	2302      	movs	r3, #2
   1b3ee:	613b      	str	r3, [r7, #16]
   1b3f0:	2300      	movs	r3, #0
   1b3f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b3f6:	4871      	ldr	r0, [pc, #452]	; (1b5bc <adc_nrfx_read+0x1f4>)
   1b3f8:	f107 0210 	add.w	r2, r7, #16
   1b3fc:	f7f3 faaa 	bl	e954 <z_impl_z_log_msg_static_create>
	if (error) {
   1b400:	e01b      	b.n	1b43a <adc_nrfx_read+0x72>
   1b402:	2100      	movs	r1, #0
	active_channels = 0U;
   1b404:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   1b406:	4d6e      	ldr	r5, [pc, #440]	; (1b5c0 <adc_nrfx_read+0x1f8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b408:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 1b5c4 <adc_nrfx_read+0x1fc>
		if (selected_channels & BIT(channel_id)) {
   1b40c:	fa26 f301 	lsr.w	r3, r6, r1
   1b410:	f013 0301 	ands.w	r3, r3, #1
   1b414:	d040      	beq.n	1b498 <adc_nrfx_read+0xd0>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b416:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1b41a:	b9c3      	cbnz	r3, 1b44e <adc_nrfx_read+0x86>
				LOG_ERR("Channel %u not configured",
   1b41c:	466c      	mov	r4, sp
   1b41e:	b088      	sub	sp, #32
   1b420:	aa02      	add	r2, sp, #8
   1b422:	4869      	ldr	r0, [pc, #420]	; (1b5c8 <adc_nrfx_read+0x200>)
   1b424:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b428:	2103      	movs	r1, #3
   1b42a:	f842 1f10 	str.w	r1, [r2, #16]!
   1b42e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b432:	4862      	ldr	r0, [pc, #392]	; (1b5bc <adc_nrfx_read+0x1f4>)
   1b434:	f7f3 fa8e 	bl	e954 <z_impl_z_log_msg_static_create>
   1b438:	46a5      	mov	sp, r4
		return -EINVAL;
   1b43a:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1b43e:	485d      	ldr	r0, [pc, #372]	; (1b5b4 <adc_nrfx_read+0x1ec>)
   1b440:	f006 fc26 	bl	21c90 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1b444:	4620      	mov	r0, r4
   1b446:	3718      	adds	r7, #24
   1b448:	46bd      	mov	sp, r7
   1b44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1b44e:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1b452:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   1b456:	f1be 0e00 	subs.w	lr, lr, #0
   1b45a:	bf18      	it	ne
   1b45c:	f04f 0e01 	movne.w	lr, #1
   1b460:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   1b464:	3201      	adds	r2, #1
   1b466:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   1b46a:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   1b46e:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1b472:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1b476:	0100      	lsls	r0, r0, #4
   1b478:	502b      	str	r3, [r5, r0]
   1b47a:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   1b47c:	3101      	adds	r1, #1
   1b47e:	2908      	cmp	r1, #8
   1b480:	d1c4      	bne.n	1b40c <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
   1b482:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   1b484:	f1a3 0108 	sub.w	r1, r3, #8
   1b488:	2906      	cmp	r1, #6
   1b48a:	d816      	bhi.n	1b4ba <adc_nrfx_read+0xf2>
   1b48c:	e8df f001 	tbb	[pc, r1]
   1b490:	15221520 	.word	0x15221520
   1b494:	1509      	.short	0x1509
   1b496:	13          	.byte	0x13
   1b497:	00          	.byte	0x00
   1b498:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1b49c:	0100      	lsls	r0, r0, #4
   1b49e:	502b      	str	r3, [r5, r0]
}
   1b4a0:	e7ec      	b.n	1b47c <adc_nrfx_read+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1b4a2:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1b4a4:	4946      	ldr	r1, [pc, #280]	; (1b5c0 <adc_nrfx_read+0x1f8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1b4a6:	2a01      	cmp	r2, #1
   1b4a8:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1b4ac:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1b4ae:	d913      	bls.n	1b4d8 <adc_nrfx_read+0x110>
   1b4b0:	b1a3      	cbz	r3, 1b4dc <adc_nrfx_read+0x114>
		LOG_ERR(
   1b4b2:	4b46      	ldr	r3, [pc, #280]	; (1b5cc <adc_nrfx_read+0x204>)
   1b4b4:	e799      	b.n	1b3ea <adc_nrfx_read+0x22>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1b4b6:	2303      	movs	r3, #3
		break;
   1b4b8:	e7f4      	b.n	1b4a4 <adc_nrfx_read+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   1b4ba:	466c      	mov	r4, sp
   1b4bc:	b088      	sub	sp, #32
   1b4be:	aa02      	add	r2, sp, #8
   1b4c0:	4943      	ldr	r1, [pc, #268]	; (1b5d0 <adc_nrfx_read+0x208>)
	switch (sequence->oversampling) {
   1b4c2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   1b4c6:	2303      	movs	r3, #3
   1b4c8:	f842 3f10 	str.w	r3, [r2, #16]!
   1b4cc:	2300      	movs	r3, #0
   1b4ce:	e7ae      	b.n	1b42e <adc_nrfx_read+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1b4d0:	2300      	movs	r3, #0
   1b4d2:	e7e7      	b.n	1b4a4 <adc_nrfx_read+0xdc>
	switch (sequence->resolution) {
   1b4d4:	2301      	movs	r3, #1
   1b4d6:	e7e5      	b.n	1b4a4 <adc_nrfx_read+0xdc>
	switch (sequence->oversampling) {
   1b4d8:	2b08      	cmp	r3, #8
   1b4da:	d81b      	bhi.n	1b514 <adc_nrfx_read+0x14c>
    p_reg->OVERSAMPLE = oversample;
   1b4dc:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   1b4e0:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1b4e2:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   1b4e4:	b9d9      	cbnz	r1, 1b51e <adc_nrfx_read+0x156>
	if (sequence->buffer_size < needed_buffer_size) {
   1b4e6:	68e1      	ldr	r1, [r4, #12]
   1b4e8:	4299      	cmp	r1, r3
   1b4ea:	d21c      	bcs.n	1b526 <adc_nrfx_read+0x15e>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1b4ec:	466c      	mov	r4, sp
   1b4ee:	b088      	sub	sp, #32
   1b4f0:	aa02      	add	r2, sp, #8
   1b4f2:	61d3      	str	r3, [r2, #28]
   1b4f4:	2304      	movs	r3, #4
   1b4f6:	4837      	ldr	r0, [pc, #220]	; (1b5d4 <adc_nrfx_read+0x20c>)
   1b4f8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b4fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1b500:	2300      	movs	r3, #0
   1b502:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b506:	482d      	ldr	r0, [pc, #180]	; (1b5bc <adc_nrfx_read+0x1f4>)
   1b508:	f7f3 fa24 	bl	e954 <z_impl_z_log_msg_static_create>
   1b50c:	46a5      	mov	sp, r4
		return -ENOMEM;
   1b50e:	f06f 040b 	mvn.w	r4, #11
   1b512:	e794      	b.n	1b43e <adc_nrfx_read+0x76>
		LOG_ERR("Oversampling value %d is not valid",
   1b514:	466c      	mov	r4, sp
   1b516:	b088      	sub	sp, #32
   1b518:	aa02      	add	r2, sp, #8
   1b51a:	492f      	ldr	r1, [pc, #188]	; (1b5d8 <adc_nrfx_read+0x210>)
   1b51c:	e7d1      	b.n	1b4c2 <adc_nrfx_read+0xfa>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1b51e:	8989      	ldrh	r1, [r1, #12]
   1b520:	fb01 3303 	mla	r3, r1, r3, r3
   1b524:	e7df      	b.n	1b4e6 <adc_nrfx_read+0x11e>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1b526:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1b528:	68a1      	ldr	r1, [r4, #8]
   1b52a:	4b25      	ldr	r3, [pc, #148]	; (1b5c0 <adc_nrfx_read+0x1f8>)
   1b52c:	4d2b      	ldr	r5, [pc, #172]	; (1b5dc <adc_nrfx_read+0x214>)
   1b52e:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   1b532:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   1b536:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   1b53a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b53e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1b540:	f8dc 3000 	ldr.w	r3, [ip]
   1b544:	46ac      	mov	ip, r5
   1b546:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   1b548:	2600      	movs	r6, #0
   1b54a:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   1b54c:	6823      	ldr	r3, [r4, #0]
   1b54e:	b36b      	cbz	r3, 1b5ac <adc_nrfx_read+0x1e4>
		ctx->options = *sequence->options;
   1b550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1b552:	f105 0488 	add.w	r4, r5, #136	; 0x88
   1b556:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1b55a:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   1b55c:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1b560:	b320      	cbz	r0, 1b5ac <adc_nrfx_read+0x1e4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b562:	e8dc 3fef 	ldaex	r3, [ip]
   1b566:	e8cc 6fe2 	stlex	r2, r6, [ip]
   1b56a:	2a00      	cmp	r2, #0
   1b56c:	d1f9      	bne.n	1b562 <adc_nrfx_read+0x19a>
   1b56e:	491c      	ldr	r1, [pc, #112]	; (1b5e0 <adc_nrfx_read+0x218>)
   1b570:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1b574:	468c      	mov	ip, r1
   1b576:	4631      	mov	r1, r6
   1b578:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1b57c:	2300      	movs	r3, #0
   1b57e:	fbe0 c104 	umlal	ip, r1, r0, r4
   1b582:	4a18      	ldr	r2, [pc, #96]	; (1b5e4 <adc_nrfx_read+0x21c>)
   1b584:	4660      	mov	r0, ip
   1b586:	f7ed fcb3 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1b58a:	2200      	movs	r2, #0
   1b58c:	e9cd 0100 	strd	r0, r1, [sp]
   1b590:	2300      	movs	r3, #0
   1b592:	f105 0008 	add.w	r0, r5, #8
   1b596:	f008 ff8d 	bl	244b4 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1b59a:	f04f 32ff 	mov.w	r2, #4294967295
   1b59e:	f04f 33ff 	mov.w	r3, #4294967295
   1b5a2:	4811      	ldr	r0, [pc, #68]	; (1b5e8 <adc_nrfx_read+0x220>)
   1b5a4:	f006 fbb8 	bl	21d18 <z_impl_k_sem_take>
	return ctx->status;
   1b5a8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   1b5aa:	e748      	b.n	1b43e <adc_nrfx_read+0x76>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1b5ac:	480b      	ldr	r0, [pc, #44]	; (1b5dc <adc_nrfx_read+0x214>)
   1b5ae:	f7ff fe77 	bl	1b2a0 <adc_context_start_sampling>
   1b5b2:	e7f2      	b.n	1b59a <adc_nrfx_read+0x1d2>
   1b5b4:	200081a8 	.word	0x200081a8
   1b5b8:	00031ed3 	.word	0x00031ed3
   1b5bc:	0002cc90 	.word	0x0002cc90
   1b5c0:	4000e000 	.word	0x4000e000
   1b5c4:	20008208 	.word	0x20008208
   1b5c8:	00031ef1 	.word	0x00031ef1
   1b5cc:	00031f30 	.word	0x00031f30
   1b5d0:	00031f0b 	.word	0x00031f0b
   1b5d4:	00031f85 	.word	0x00031f85
   1b5d8:	00031f62 	.word	0x00031f62
   1b5dc:	20008168 	.word	0x20008168
   1b5e0:	000f423f 	.word	0x000f423f
   1b5e4:	000f4240 	.word	0x000f4240
   1b5e8:	200081c0 	.word	0x200081c0

0001b5ec <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1b5ec:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b5ee:	2400      	movs	r4, #0
   1b5f0:	4b0d      	ldr	r3, [pc, #52]	; (1b628 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1b5f2:	200e      	movs	r0, #14
   1b5f4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1b5f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1b5fc:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1b600:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1b604:	2212      	movs	r2, #18
   1b606:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1b60a:	f7f5 fa69 	bl	10ae0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b60e:	4622      	mov	r2, r4
   1b610:	2101      	movs	r1, #1
   1b612:	200e      	movs	r0, #14
   1b614:	f7f5 fa94 	bl	10b40 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1b618:	4804      	ldr	r0, [pc, #16]	; (1b62c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1b61a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b61c:	b913      	cbnz	r3, 1b624 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1b61e:	3040      	adds	r0, #64	; 0x40
   1b620:	f006 fb36 	bl	21c90 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1b624:	2000      	movs	r0, #0
   1b626:	bd10      	pop	{r4, pc}
   1b628:	4000e000 	.word	0x4000e000
   1b62c:	20008168 	.word	0x20008168

0001b630 <saadc_irq_handler>:
{
   1b630:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b632:	4b2d      	ldr	r3, [pc, #180]	; (1b6e8 <saadc_irq_handler+0xb8>)
   1b634:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1b638:	2a00      	cmp	r2, #0
   1b63a:	d048      	beq.n	1b6ce <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b63c:	2200      	movs	r2, #0
   1b63e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1b642:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b646:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1b648:	4c28      	ldr	r4, [pc, #160]	; (1b6ec <saadc_irq_handler+0xbc>)
   1b64a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1b64c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1b650:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1b652:	4625      	mov	r5, r4
   1b654:	b3b3      	cbz	r3, 1b6c4 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   1b656:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1b65a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1b65e:	b133      	cbz	r3, 1b66e <saadc_irq_handler+0x3e>
			action = callback(dev,
   1b660:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1b664:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1b666:	2801      	cmp	r0, #1
   1b668:	d014      	beq.n	1b694 <saadc_irq_handler+0x64>
   1b66a:	2802      	cmp	r0, #2
   1b66c:	d024      	beq.n	1b6b8 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1b66e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1b672:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1b676:	429a      	cmp	r2, r3
   1b678:	d91e      	bls.n	1b6b8 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1b67a:	3301      	adds	r3, #1
   1b67c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1b680:	4b19      	ldr	r3, [pc, #100]	; (1b6e8 <saadc_irq_handler+0xb8>)
   1b682:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1b686:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1b68a:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1b68c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1b690:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1b694:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1b698:	b923      	cbnz	r3, 1b6a4 <saadc_irq_handler+0x74>
}
   1b69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1b69e:	4813      	ldr	r0, [pc, #76]	; (1b6ec <saadc_irq_handler+0xbc>)
   1b6a0:	f7ff bdfe 	b.w	1b2a0 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b6a4:	e8d5 3fef 	ldaex	r3, [r5]
   1b6a8:	1e5a      	subs	r2, r3, #1
   1b6aa:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1b6ae:	2900      	cmp	r1, #0
   1b6b0:	d1f8      	bne.n	1b6a4 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1b6b2:	2b01      	cmp	r3, #1
   1b6b4:	dcf1      	bgt.n	1b69a <saadc_irq_handler+0x6a>
   1b6b6:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1b6b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1b6bc:	b113      	cbz	r3, 1b6c4 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1b6be:	480c      	ldr	r0, [pc, #48]	; (1b6f0 <saadc_irq_handler+0xc0>)
   1b6c0:	f010 fa97 	bl	2bbf2 <z_impl_k_timer_stop>
   1b6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1b6c8:	480a      	ldr	r0, [pc, #40]	; (1b6f4 <saadc_irq_handler+0xc4>)
   1b6ca:	f006 bae1 	b.w	21c90 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b6ce:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1b6d2:	2900      	cmp	r1, #0
   1b6d4:	d0ef      	beq.n	1b6b6 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b6d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1b6da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b6de:	2201      	movs	r2, #1
   1b6e0:	609a      	str	r2, [r3, #8]
   1b6e2:	601a      	str	r2, [r3, #0]
   1b6e4:	605a      	str	r2, [r3, #4]
}
   1b6e6:	e7e6      	b.n	1b6b6 <saadc_irq_handler+0x86>
   1b6e8:	4000e000 	.word	0x4000e000
   1b6ec:	20008168 	.word	0x20008168
   1b6f0:	20008170 	.word	0x20008170
   1b6f4:	200081c0 	.word	0x200081c0

0001b6f8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1b6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b6fa:	2340      	movs	r3, #64	; 0x40
{
   1b6fc:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1b6fe:	490a      	ldr	r1, [pc, #40]	; (1b728 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b700:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1b702:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b704:	1149      	asrs	r1, r1, #5
{
   1b706:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b708:	4623      	mov	r3, r4
   1b70a:	4a08      	ldr	r2, [pc, #32]	; (1b72c <onoff_start+0x34>)
   1b70c:	4808      	ldr	r0, [pc, #32]	; (1b730 <onoff_start+0x38>)
   1b70e:	f00e fe44 	bl	2a39a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1b712:	1e01      	subs	r1, r0, #0
   1b714:	da05      	bge.n	1b722 <onoff_start+0x2a>
		notify(mgr, err);
   1b716:	4628      	mov	r0, r5
   1b718:	4623      	mov	r3, r4
	}
}
   1b71a:	b003      	add	sp, #12
   1b71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1b720:	4718      	bx	r3
}
   1b722:	b003      	add	sp, #12
   1b724:	bd30      	pop	{r4, r5, pc}
   1b726:	bf00      	nop
   1b728:	20021764 	.word	0x20021764
   1b72c:	0002a409 	.word	0x0002a409
   1b730:	0002c708 	.word	0x0002c708

0001b734 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b734:	b2c9      	uxtb	r1, r1
   1b736:	2903      	cmp	r1, #3
{
   1b738:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b73a:	d909      	bls.n	1b750 <get_status+0x1c>
   1b73c:	4909      	ldr	r1, [pc, #36]	; (1b764 <get_status+0x30>)
   1b73e:	480a      	ldr	r0, [pc, #40]	; (1b768 <get_status+0x34>)
   1b740:	237a      	movs	r3, #122	; 0x7a
   1b742:	4a0a      	ldr	r2, [pc, #40]	; (1b76c <get_status+0x38>)
   1b744:	f00b fb15 	bl	26d72 <assert_print>
   1b748:	217a      	movs	r1, #122	; 0x7a
   1b74a:	4808      	ldr	r0, [pc, #32]	; (1b76c <get_status+0x38>)
   1b74c:	f00b fb0a 	bl	26d64 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1b750:	220c      	movs	r2, #12
   1b752:	6903      	ldr	r3, [r0, #16]
   1b754:	fb01 3302 	mla	r3, r1, r2, r3
   1b758:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1b75c:	f000 0007 	and.w	r0, r0, #7
   1b760:	bd08      	pop	{r3, pc}
   1b762:	bf00      	nop
   1b764:	00031fff 	.word	0x00031fff
   1b768:	0002dd81 	.word	0x0002dd81
   1b76c:	00031fc2 	.word	0x00031fc2

0001b770 <stop>:
{
   1b770:	b570      	push	{r4, r5, r6, lr}
   1b772:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b774:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   1b776:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b778:	d90b      	bls.n	1b792 <stop+0x22>
   1b77a:	491a      	ldr	r1, [pc, #104]	; (1b7e4 <stop+0x74>)
   1b77c:	481a      	ldr	r0, [pc, #104]	; (1b7e8 <stop+0x78>)
   1b77e:	f240 135d 	movw	r3, #349	; 0x15d
   1b782:	4a1a      	ldr	r2, [pc, #104]	; (1b7ec <stop+0x7c>)
   1b784:	f00b faf5 	bl	26d72 <assert_print>
   1b788:	f240 115d 	movw	r1, #349	; 0x15d
   1b78c:	4817      	ldr	r0, [pc, #92]	; (1b7ec <stop+0x7c>)
   1b78e:	f00b fae9 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   1b792:	f04f 0420 	mov.w	r4, #32
   1b796:	f3ef 8511 	mrs	r5, BASEPRI
   1b79a:	f384 8812 	msr	BASEPRI_MAX, r4
   1b79e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b7a2:	260c      	movs	r6, #12
   1b7a4:	fb06 3401 	mla	r4, r6, r1, r3
   1b7a8:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1b7ac:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1b7b0:	d008      	beq.n	1b7c4 <stop+0x54>
   1b7b2:	42a2      	cmp	r2, r4
   1b7b4:	d006      	beq.n	1b7c4 <stop+0x54>
	__asm__ volatile(
   1b7b6:	f385 8811 	msr	BASEPRI, r5
   1b7ba:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1b7be:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b7c2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1b7c4:	2201      	movs	r2, #1
   1b7c6:	4371      	muls	r1, r6
   1b7c8:	440b      	add	r3, r1
   1b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1b7ce:	f385 8811 	msr	BASEPRI, r5
   1b7d2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1b7d6:	6843      	ldr	r3, [r0, #4]
   1b7d8:	440b      	add	r3, r1
   1b7da:	685b      	ldr	r3, [r3, #4]
   1b7dc:	4798      	blx	r3
	return 0;
   1b7de:	2000      	movs	r0, #0
   1b7e0:	e7ef      	b.n	1b7c2 <stop+0x52>
   1b7e2:	bf00      	nop
   1b7e4:	00031fff 	.word	0x00031fff
   1b7e8:	0002dd81 	.word	0x0002dd81
   1b7ec:	00031fc2 	.word	0x00031fc2

0001b7f0 <onoff_stop>:
{
   1b7f0:	b570      	push	{r4, r5, r6, lr}
   1b7f2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1b7f4:	4906      	ldr	r1, [pc, #24]	; (1b810 <onoff_stop+0x20>)
{
   1b7f6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1b7f8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1b7fa:	1149      	asrs	r1, r1, #5
   1b7fc:	2240      	movs	r2, #64	; 0x40
   1b7fe:	4805      	ldr	r0, [pc, #20]	; (1b814 <onoff_stop+0x24>)
   1b800:	f7ff ffb6 	bl	1b770 <stop>
	notify(mgr, res);
   1b804:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1b806:	4601      	mov	r1, r0
	notify(mgr, res);
   1b808:	4620      	mov	r0, r4
}
   1b80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1b80e:	4718      	bx	r3
   1b810:	20021764 	.word	0x20021764
   1b814:	0002c708 	.word	0x0002c708

0001b818 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b81c:	2200      	movs	r2, #0
   1b81e:	2101      	movs	r1, #1
{
   1b820:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b822:	2005      	movs	r0, #5
   1b824:	f7f5 f98c 	bl	10b40 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1b828:	4811      	ldr	r0, [pc, #68]	; (1b870 <clk_init+0x58>)
   1b82a:	f003 f813 	bl	1e854 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1b82e:	4b11      	ldr	r3, [pc, #68]	; (1b874 <clk_init+0x5c>)
   1b830:	4298      	cmp	r0, r3
   1b832:	d119      	bne.n	1b868 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1b834:	f003 f832 	bl	1e89c <nrfx_clock_enable>
   1b838:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b83a:	f04f 080c 	mov.w	r8, #12
   1b83e:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1b840:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1b878 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1b844:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1b846:	4649      	mov	r1, r9
   1b848:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1b84c:	f00b fa4c 	bl	26ce8 <onoff_manager_init>
		if (err < 0) {
   1b850:	2800      	cmp	r0, #0
   1b852:	db07      	blt.n	1b864 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b854:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1b858:	3401      	adds	r4, #1
   1b85a:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b85c:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1b860:	d1f0      	bne.n	1b844 <clk_init+0x2c>
	}

	return 0;
   1b862:	2000      	movs	r0, #0
}
   1b864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1b868:	f06f 0004 	mvn.w	r0, #4
   1b86c:	e7fa      	b.n	1b864 <clk_init+0x4c>
   1b86e:	bf00      	nop
   1b870:	0001b8b5 	.word	0x0001b8b5
   1b874:	0bad0000 	.word	0x0bad0000
   1b878:	0002d9dc 	.word	0x0002d9dc

0001b87c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1b87c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1b87e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1b880:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1b882:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1b884:	434b      	muls	r3, r1
   1b886:	4809      	ldr	r0, [pc, #36]	; (1b8ac <clkstarted_handle.constprop.0+0x30>)
   1b888:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1b88a:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1b88c:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1b890:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1b892:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1b896:	f00e fd6d 	bl	2a374 <set_on_state>
	if (callback) {
   1b89a:	b12d      	cbz	r5, 1b8a8 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1b89c:	4632      	mov	r2, r6
   1b89e:	462b      	mov	r3, r5
}
   1b8a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1b8a4:	4802      	ldr	r0, [pc, #8]	; (1b8b0 <clkstarted_handle.constprop.0+0x34>)
   1b8a6:	4718      	bx	r3
}
   1b8a8:	bd70      	pop	{r4, r5, r6, pc}
   1b8aa:	bf00      	nop
   1b8ac:	20021764 	.word	0x20021764
   1b8b0:	0002c708 	.word	0x0002c708

0001b8b4 <clock_event_handler>:
{
   1b8b4:	b508      	push	{r3, lr}
	switch (event) {
   1b8b6:	2805      	cmp	r0, #5
   1b8b8:	d820      	bhi.n	1b8fc <clock_event_handler+0x48>
   1b8ba:	e8df f000 	tbb	[pc, r0]
   1b8be:	1103      	.short	0x1103
   1b8c0:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1b8c4:	4b13      	ldr	r3, [pc, #76]	; (1b914 <clock_event_handler+0x60>)
   1b8c6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1b8ca:	f010 0007 	ands.w	r0, r0, #7
   1b8ce:	d11f      	bne.n	1b910 <clock_event_handler+0x5c>
}
   1b8d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1b8d4:	f7ff bfd2 	b.w	1b87c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1b8d8:	2002      	movs	r0, #2
   1b8da:	e7f9      	b.n	1b8d0 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1b8dc:	2003      	movs	r0, #3
   1b8de:	e7f7      	b.n	1b8d0 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1b8e0:	2001      	movs	r0, #1
   1b8e2:	e7f5      	b.n	1b8d0 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1b8e4:	490c      	ldr	r1, [pc, #48]	; (1b918 <clock_event_handler+0x64>)
   1b8e6:	f240 236e 	movw	r3, #622	; 0x26e
   1b8ea:	4a0c      	ldr	r2, [pc, #48]	; (1b91c <clock_event_handler+0x68>)
   1b8ec:	480c      	ldr	r0, [pc, #48]	; (1b920 <clock_event_handler+0x6c>)
   1b8ee:	f00b fa40 	bl	26d72 <assert_print>
   1b8f2:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1b8f6:	4809      	ldr	r0, [pc, #36]	; (1b91c <clock_event_handler+0x68>)
   1b8f8:	f00b fa34 	bl	26d64 <assert_post_action>
   1b8fc:	4906      	ldr	r1, [pc, #24]	; (1b918 <clock_event_handler+0x64>)
   1b8fe:	f240 2372 	movw	r3, #626	; 0x272
   1b902:	4a06      	ldr	r2, [pc, #24]	; (1b91c <clock_event_handler+0x68>)
   1b904:	4806      	ldr	r0, [pc, #24]	; (1b920 <clock_event_handler+0x6c>)
   1b906:	f00b fa34 	bl	26d72 <assert_print>
   1b90a:	f240 2172 	movw	r1, #626	; 0x272
   1b90e:	e7f2      	b.n	1b8f6 <clock_event_handler+0x42>
}
   1b910:	bd08      	pop	{r3, pc}
   1b912:	bf00      	nop
   1b914:	20021764 	.word	0x20021764
   1b918:	00033a12 	.word	0x00033a12
   1b91c:	00031fc2 	.word	0x00031fc2
   1b920:	0002dd81 	.word	0x0002dd81

0001b924 <generic_hfclk_start>:
{
   1b924:	b508      	push	{r3, lr}
	__asm__ volatile(
   1b926:	f04f 0320 	mov.w	r3, #32
   1b92a:	f3ef 8111 	mrs	r1, BASEPRI
   1b92e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b932:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1b936:	4a11      	ldr	r2, [pc, #68]	; (1b97c <generic_hfclk_start+0x58>)
   1b938:	6813      	ldr	r3, [r2, #0]
   1b93a:	f043 0002 	orr.w	r0, r3, #2
   1b93e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1b940:	07da      	lsls	r2, r3, #31
   1b942:	d408      	bmi.n	1b956 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1b944:	f381 8811 	msr	BASEPRI, r1
   1b948:	f3bf 8f6f 	isb	sy
}
   1b94c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1b950:	2001      	movs	r0, #1
   1b952:	f002 bfcd 	b.w	1e8f0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1b956:	4b0a      	ldr	r3, [pc, #40]	; (1b980 <generic_hfclk_start+0x5c>)
   1b958:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1b95c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1b960:	07d3      	lsls	r3, r2, #31
   1b962:	d5ef      	bpl.n	1b944 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1b964:	4807      	ldr	r0, [pc, #28]	; (1b984 <generic_hfclk_start+0x60>)
   1b966:	f00e fd05 	bl	2a374 <set_on_state>
   1b96a:	f381 8811 	msr	BASEPRI, r1
   1b96e:	f3bf 8f6f 	isb	sy
}
   1b972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1b976:	2000      	movs	r0, #0
   1b978:	f7ff bf80 	b.w	1b87c <clkstarted_handle.constprop.0>
   1b97c:	20021814 	.word	0x20021814
   1b980:	40005000 	.word	0x40005000
   1b984:	200217ec 	.word	0x200217ec

0001b988 <api_blocking_start>:
{
   1b988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b98a:	2200      	movs	r2, #0
   1b98c:	2301      	movs	r3, #1
   1b98e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b992:	ab04      	add	r3, sp, #16
   1b994:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b998:	4a09      	ldr	r2, [pc, #36]	; (1b9c0 <api_blocking_start+0x38>)
   1b99a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b99c:	f8cd d000 	str.w	sp, [sp]
   1b9a0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b9a4:	f00e fd29 	bl	2a3fa <api_start>
	if (err < 0) {
   1b9a8:	2800      	cmp	r0, #0
   1b9aa:	db05      	blt.n	1b9b8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1b9ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b9b0:	2300      	movs	r3, #0
   1b9b2:	4668      	mov	r0, sp
   1b9b4:	f006 f9b0 	bl	21d18 <z_impl_k_sem_take>
}
   1b9b8:	b007      	add	sp, #28
   1b9ba:	f85d fb04 	ldr.w	pc, [sp], #4
   1b9be:	bf00      	nop
   1b9c0:	0002a439 	.word	0x0002a439

0001b9c4 <generic_hfclk_stop>:
{
   1b9c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b9c6:	f04f 0320 	mov.w	r3, #32
   1b9ca:	f3ef 8411 	mrs	r4, BASEPRI
   1b9ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9d2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1b9d6:	4a07      	ldr	r2, [pc, #28]	; (1b9f4 <generic_hfclk_stop+0x30>)
   1b9d8:	6813      	ldr	r3, [r2, #0]
   1b9da:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1b9de:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1b9e0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1b9e2:	d402      	bmi.n	1b9ea <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1b9e4:	2001      	movs	r0, #1
   1b9e6:	f003 f801 	bl	1e9ec <nrfx_clock_stop>
	__asm__ volatile(
   1b9ea:	f384 8811 	msr	BASEPRI, r4
   1b9ee:	f3bf 8f6f 	isb	sy
}
   1b9f2:	bd10      	pop	{r4, pc}
   1b9f4:	20021814 	.word	0x20021814

0001b9f8 <z_nrf_clock_control_lf_on>:
{
   1b9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b9fc:	2201      	movs	r2, #1
   1b9fe:	4606      	mov	r6, r0
   1ba00:	4941      	ldr	r1, [pc, #260]	; (1bb08 <z_nrf_clock_control_lf_on+0x110>)
   1ba02:	e8d1 3fef 	ldaex	r3, [r1]
   1ba06:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1ba0a:	2800      	cmp	r0, #0
   1ba0c:	d1f9      	bne.n	1ba02 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1ba0e:	b9a3      	cbnz	r3, 1ba3a <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1ba10:	493e      	ldr	r1, [pc, #248]	; (1bb0c <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1ba12:	483f      	ldr	r0, [pc, #252]	; (1bb10 <z_nrf_clock_control_lf_on+0x118>)
   1ba14:	604b      	str	r3, [r1, #4]
   1ba16:	60cb      	str	r3, [r1, #12]
   1ba18:	608a      	str	r2, [r1, #8]
   1ba1a:	f7f1 fb75 	bl	d108 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1ba1e:	2800      	cmp	r0, #0
   1ba20:	da0b      	bge.n	1ba3a <z_nrf_clock_control_lf_on+0x42>
   1ba22:	493c      	ldr	r1, [pc, #240]	; (1bb14 <z_nrf_clock_control_lf_on+0x11c>)
   1ba24:	f44f 730c 	mov.w	r3, #560	; 0x230
   1ba28:	4a3b      	ldr	r2, [pc, #236]	; (1bb18 <z_nrf_clock_control_lf_on+0x120>)
   1ba2a:	483c      	ldr	r0, [pc, #240]	; (1bb1c <z_nrf_clock_control_lf_on+0x124>)
   1ba2c:	f00b f9a1 	bl	26d72 <assert_print>
   1ba30:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1ba34:	4838      	ldr	r0, [pc, #224]	; (1bb18 <z_nrf_clock_control_lf_on+0x120>)
   1ba36:	f00b f995 	bl	26d64 <assert_post_action>
	switch (start_mode) {
   1ba3a:	b35e      	cbz	r6, 1ba94 <z_nrf_clock_control_lf_on+0x9c>
   1ba3c:	1e73      	subs	r3, r6, #1
   1ba3e:	2b01      	cmp	r3, #1
   1ba40:	d858      	bhi.n	1baf4 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1ba42:	2e01      	cmp	r6, #1
   1ba44:	d106      	bne.n	1ba54 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ba46:	4b36      	ldr	r3, [pc, #216]	; (1bb20 <z_nrf_clock_control_lf_on+0x128>)
   1ba48:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1ba4c:	f003 0303 	and.w	r3, r3, #3
   1ba50:	2b02      	cmp	r3, #2
   1ba52:	d01f      	beq.n	1ba94 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ba54:	f00f ff9f 	bl	2b996 <k_is_in_isr>
   1ba58:	4605      	mov	r5, r0
   1ba5a:	b9e8      	cbnz	r0, 1ba98 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1ba5c:	4b31      	ldr	r3, [pc, #196]	; (1bb24 <z_nrf_clock_control_lf_on+0x12c>)
   1ba5e:	781b      	ldrb	r3, [r3, #0]
   1ba60:	b1d3      	cbz	r3, 1ba98 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1ba62:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1ba64:	4607      	mov	r7, r0
   1ba66:	4b2e      	ldr	r3, [pc, #184]	; (1bb20 <z_nrf_clock_control_lf_on+0x128>)
   1ba68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ba6c:	4c2c      	ldr	r4, [pc, #176]	; (1bb20 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ba6e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1bb28 <z_nrf_clock_control_lf_on+0x130>
   1ba72:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ba76:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1ba7a:	03d2      	lsls	r2, r2, #15
   1ba7c:	d516      	bpl.n	1baac <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1ba7e:	f003 0303 	and.w	r3, r3, #3
   1ba82:	2b02      	cmp	r3, #2
   1ba84:	d001      	beq.n	1ba8a <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1ba86:	2e01      	cmp	r6, #1
   1ba88:	d110      	bne.n	1baac <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1ba8a:	b375      	cbz	r5, 1baea <z_nrf_clock_control_lf_on+0xf2>
   1ba8c:	f387 8811 	msr	BASEPRI, r7
   1ba90:	f3bf 8f6f 	isb	sy
}
   1ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1ba98:	f04f 0320 	mov.w	r3, #32
   1ba9c:	f3ef 8711 	mrs	r7, BASEPRI
   1baa0:	f383 8812 	msr	BASEPRI_MAX, r3
   1baa4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1baa8:	2501      	movs	r5, #1
   1baaa:	e7df      	b.n	1ba6c <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1baac:	b1c5      	cbz	r5, 1bae0 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1baae:	4638      	mov	r0, r7
   1bab0:	f7f4 ffa6 	bl	10a00 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1bab4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1bab8:	b2db      	uxtb	r3, r3
   1baba:	2b01      	cmp	r3, #1
   1babc:	d1d9      	bne.n	1ba72 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1babe:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1bac2:	2a00      	cmp	r2, #0
   1bac4:	d0d5      	beq.n	1ba72 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bac6:	2200      	movs	r2, #0
   1bac8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1bacc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bad0:	2202      	movs	r2, #2
   1bad2:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1bad6:	2220      	movs	r2, #32
   1bad8:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1badc:	60a3      	str	r3, [r4, #8]
}
   1bade:	e7c8      	b.n	1ba72 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1bae0:	2100      	movs	r1, #0
   1bae2:	2021      	movs	r0, #33	; 0x21
   1bae4:	f007 ffc8 	bl	23a78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1bae8:	e7e4      	b.n	1bab4 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1baea:	2202      	movs	r2, #2
   1baec:	4b0c      	ldr	r3, [pc, #48]	; (1bb20 <z_nrf_clock_control_lf_on+0x128>)
   1baee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1baf2:	e7cf      	b.n	1ba94 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1baf4:	490d      	ldr	r1, [pc, #52]	; (1bb2c <z_nrf_clock_control_lf_on+0x134>)
   1baf6:	f240 2342 	movw	r3, #578	; 0x242
   1bafa:	4a07      	ldr	r2, [pc, #28]	; (1bb18 <z_nrf_clock_control_lf_on+0x120>)
   1bafc:	4807      	ldr	r0, [pc, #28]	; (1bb1c <z_nrf_clock_control_lf_on+0x124>)
   1bafe:	f00b f938 	bl	26d72 <assert_print>
   1bb02:	f240 2142 	movw	r1, #578	; 0x242
   1bb06:	e795      	b.n	1ba34 <z_nrf_clock_control_lf_on+0x3c>
   1bb08:	20021760 	.word	0x20021760
   1bb0c:	20021750 	.word	0x20021750
   1bb10:	20021784 	.word	0x20021784
   1bb14:	0002f092 	.word	0x0002f092
   1bb18:	00031fc2 	.word	0x00031fc2
   1bb1c:	0002dd81 	.word	0x0002dd81
   1bb20:	40005000 	.word	0x40005000
   1bb24:	200227bf 	.word	0x200227bf
   1bb28:	e000e100 	.word	0xe000e100
   1bb2c:	00033a12 	.word	0x00033a12

0001bb30 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1bb30:	b508      	push	{r3, lr}
   1bb32:	4807      	ldr	r0, [pc, #28]	; (1bb50 <uart_console_init+0x20>)
   1bb34:	f00f ff02 	bl	2b93c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1bb38:	b138      	cbz	r0, 1bb4a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1bb3a:	4806      	ldr	r0, [pc, #24]	; (1bb54 <uart_console_init+0x24>)
   1bb3c:	f7f5 ff2e 	bl	1199c <__stdout_hook_install>
	__printk_hook_install(console_out);
   1bb40:	4804      	ldr	r0, [pc, #16]	; (1bb54 <uart_console_init+0x24>)
   1bb42:	f7f0 ff5f 	bl	ca04 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1bb46:	2000      	movs	r0, #0
}
   1bb48:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1bb4a:	f06f 0012 	mvn.w	r0, #18
   1bb4e:	e7fb      	b.n	1bb48 <uart_console_init+0x18>
   1bb50:	0002c798 	.word	0x0002c798
   1bb54:	0001bb59 	.word	0x0001bb59

0001bb58 <console_out>:
	if ('\n' == c) {
   1bb58:	280a      	cmp	r0, #10
{
   1bb5a:	b538      	push	{r3, r4, r5, lr}
   1bb5c:	4604      	mov	r4, r0
   1bb5e:	4d07      	ldr	r5, [pc, #28]	; (1bb7c <console_out+0x24>)
	if ('\n' == c) {
   1bb60:	d104      	bne.n	1bb6c <console_out+0x14>
	api->poll_out(dev, out_char);
   1bb62:	68ab      	ldr	r3, [r5, #8]
   1bb64:	210d      	movs	r1, #13
   1bb66:	4628      	mov	r0, r5
   1bb68:	69db      	ldr	r3, [r3, #28]
   1bb6a:	4798      	blx	r3
   1bb6c:	68ab      	ldr	r3, [r5, #8]
   1bb6e:	4803      	ldr	r0, [pc, #12]	; (1bb7c <console_out+0x24>)
   1bb70:	69db      	ldr	r3, [r3, #28]
   1bb72:	b2e1      	uxtb	r1, r4
   1bb74:	4798      	blx	r3
}
   1bb76:	4620      	mov	r0, r4
   1bb78:	bd38      	pop	{r3, r4, r5, pc}
   1bb7a:	bf00      	nop
   1bb7c:	0002c798 	.word	0x0002c798

0001bb80 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1bb80:	b510      	push	{r4, lr}
	return port->data;
   1bb82:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1bb84:	b961      	cbnz	r1, 1bba0 <gpio_nrfx_manage_callback+0x20>
   1bb86:	4920      	ldr	r1, [pc, #128]	; (1bc08 <gpio_nrfx_manage_callback+0x88>)
   1bb88:	232a      	movs	r3, #42	; 0x2a
   1bb8a:	4a20      	ldr	r2, [pc, #128]	; (1bc0c <gpio_nrfx_manage_callback+0x8c>)
   1bb8c:	4820      	ldr	r0, [pc, #128]	; (1bc10 <gpio_nrfx_manage_callback+0x90>)
   1bb8e:	f00b f8f0 	bl	26d72 <assert_print>
   1bb92:	4820      	ldr	r0, [pc, #128]	; (1bc14 <gpio_nrfx_manage_callback+0x94>)
   1bb94:	f00b f8ed 	bl	26d72 <assert_print>
   1bb98:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1bb9a:	481c      	ldr	r0, [pc, #112]	; (1bc0c <gpio_nrfx_manage_callback+0x8c>)
   1bb9c:	f00b f8e2 	bl	26d64 <assert_post_action>
   1bba0:	6848      	ldr	r0, [r1, #4]
   1bba2:	b950      	cbnz	r0, 1bbba <gpio_nrfx_manage_callback+0x3a>
   1bba4:	491c      	ldr	r1, [pc, #112]	; (1bc18 <gpio_nrfx_manage_callback+0x98>)
   1bba6:	232b      	movs	r3, #43	; 0x2b
   1bba8:	4a18      	ldr	r2, [pc, #96]	; (1bc0c <gpio_nrfx_manage_callback+0x8c>)
   1bbaa:	4819      	ldr	r0, [pc, #100]	; (1bc10 <gpio_nrfx_manage_callback+0x90>)
   1bbac:	f00b f8e1 	bl	26d72 <assert_print>
   1bbb0:	481a      	ldr	r0, [pc, #104]	; (1bc1c <gpio_nrfx_manage_callback+0x9c>)
   1bbb2:	f00b f8de 	bl	26d72 <assert_print>
   1bbb6:	212b      	movs	r1, #43	; 0x2b
   1bbb8:	e7ef      	b.n	1bb9a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1bbba:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1bbbc:	b1f8      	cbz	r0, 1bbfe <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bbbe:	4288      	cmp	r0, r1
   1bbc0:	d119      	bne.n	1bbf6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1bbc2:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1bbc4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bbc6:	42a1      	cmp	r1, r4
	list->head = node;
   1bbc8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bbca:	d100      	bne.n	1bbce <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1bbcc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1bbce:	2000      	movs	r0, #0
   1bbd0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1bbd2:	b12a      	cbz	r2, 1bbe0 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1bbd4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1bbd6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bbd8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1bbda:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bbdc:	b902      	cbnz	r2, 1bbe0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1bbde:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1bbe0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1bbe2:	e010      	b.n	1bc06 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bbe4:	4281      	cmp	r1, r0
   1bbe6:	d106      	bne.n	1bbf6 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1bbe8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1bbea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bbec:	6898      	ldr	r0, [r3, #8]
   1bbee:	4281      	cmp	r1, r0
   1bbf0:	d1ed      	bne.n	1bbce <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1bbf2:	609c      	str	r4, [r3, #8]
}
   1bbf4:	e7eb      	b.n	1bbce <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1bbf6:	4604      	mov	r4, r0
   1bbf8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bbfa:	2800      	cmp	r0, #0
   1bbfc:	d1f2      	bne.n	1bbe4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1bbfe:	2a00      	cmp	r2, #0
   1bc00:	d1e8      	bne.n	1bbd4 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1bc02:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1bc06:	bd10      	pop	{r4, pc}
   1bc08:	0002e438 	.word	0x0002e438
   1bc0c:	0003205d 	.word	0x0003205d
   1bc10:	0002dd81 	.word	0x0002dd81
   1bc14:	00032099 	.word	0x00032099
   1bc18:	000320a8 	.word	0x000320a8
   1bc1c:	000320ba 	.word	0x000320ba

0001bc20 <gpio_nrfx_pin_interrupt_configure>:
{
   1bc20:	b530      	push	{r4, r5, lr}
	return port->config;
   1bc22:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc24:	f001 041f 	and.w	r4, r1, #31
   1bc28:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1bc2a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1bc2e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bc30:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1bc34:	d105      	bne.n	1bc42 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1bc36:	4620      	mov	r0, r4
   1bc38:	f003 fa22 	bl	1f080 <nrfx_gpiote_trigger_disable>
		return 0;
   1bc3c:	2000      	movs	r0, #0
}
   1bc3e:	b005      	add	sp, #20
   1bc40:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bc42:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1bc44:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bc48:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1bc4c:	d114      	bne.n	1bc78 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1bc4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bc52:	bf0c      	ite	eq
   1bc54:	2304      	moveq	r3, #4
   1bc56:	2305      	movne	r3, #5
   1bc58:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1bc5c:	2300      	movs	r3, #0
   1bc5e:	4620      	mov	r0, r4
   1bc60:	4619      	mov	r1, r3
   1bc62:	aa02      	add	r2, sp, #8
   1bc64:	f003 f816 	bl	1ec94 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1bc68:	4b2a      	ldr	r3, [pc, #168]	; (1bd14 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1bc6a:	4298      	cmp	r0, r3
   1bc6c:	d14f      	bne.n	1bd0e <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1bc6e:	2101      	movs	r1, #1
   1bc70:	4620      	mov	r0, r4
   1bc72:	f003 f99b 	bl	1efac <nrfx_gpiote_trigger_enable>
	return 0;
   1bc76:	e7e1      	b.n	1bc3c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1bc78:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1bc7c:	d024      	beq.n	1bcc8 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1bc7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1bc82:	bf14      	ite	ne
   1bc84:	2301      	movne	r3, #1
   1bc86:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bc88:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1bc8c:	6883      	ldr	r3, [r0, #8]
   1bc8e:	40cb      	lsrs	r3, r1
   1bc90:	07d8      	lsls	r0, r3, #31
   1bc92:	d4e3      	bmi.n	1bc5c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1bc94:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1bc98:	d1e0      	bne.n	1bc5c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1bc9a:	0962      	lsrs	r2, r4, #5
   1bc9c:	f004 031f 	and.w	r3, r4, #31
   1bca0:	d014      	beq.n	1bccc <gpio_nrfx_pin_interrupt_configure+0xac>
   1bca2:	2a01      	cmp	r2, #1
   1bca4:	d104      	bne.n	1bcb0 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1bca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bcaa:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1bcac:	07d1      	lsls	r1, r2, #31
   1bcae:	d414      	bmi.n	1bcda <gpio_nrfx_pin_interrupt_configure+0xba>
   1bcb0:	4919      	ldr	r1, [pc, #100]	; (1bd18 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1bcb2:	481a      	ldr	r0, [pc, #104]	; (1bd1c <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1bcb4:	f240 2347 	movw	r3, #583	; 0x247
   1bcb8:	4a19      	ldr	r2, [pc, #100]	; (1bd20 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1bcba:	f00b f85a 	bl	26d72 <assert_print>
   1bcbe:	f240 2147 	movw	r1, #583	; 0x247
   1bcc2:	4817      	ldr	r0, [pc, #92]	; (1bd20 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1bcc4:	f00b f84e 	bl	26d64 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1bcc8:	2303      	movs	r3, #3
   1bcca:	e7dd      	b.n	1bc88 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1bccc:	f04f 32ff 	mov.w	r2, #4294967295
   1bcd0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1bcd2:	07d2      	lsls	r2, r2, #31
   1bcd4:	d5ec      	bpl.n	1bcb0 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1bcd6:	4a13      	ldr	r2, [pc, #76]	; (1bd24 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1bcd8:	e000      	b.n	1bcdc <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1bcda:	4a13      	ldr	r2, [pc, #76]	; (1bd28 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1bcdc:	3380      	adds	r3, #128	; 0x80
   1bcde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1bce2:	07db      	lsls	r3, r3, #31
   1bce4:	d4ba      	bmi.n	1bc5c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1bce6:	f10d 0507 	add.w	r5, sp, #7
   1bcea:	4629      	mov	r1, r5
   1bcec:	4620      	mov	r0, r4
   1bcee:	f003 f8f7 	bl	1eee0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1bcf2:	4b0e      	ldr	r3, [pc, #56]	; (1bd2c <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1bcf4:	4298      	cmp	r0, r3
   1bcf6:	d001      	beq.n	1bcfc <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1bcf8:	9503      	str	r5, [sp, #12]
   1bcfa:	e7af      	b.n	1bc5c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1bcfc:	4628      	mov	r0, r5
   1bcfe:	f003 f94f 	bl	1efa0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1bd02:	4b04      	ldr	r3, [pc, #16]	; (1bd14 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1bd04:	4298      	cmp	r0, r3
   1bd06:	d0f7      	beq.n	1bcf8 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1bd08:	f06f 000b 	mvn.w	r0, #11
   1bd0c:	e797      	b.n	1bc3e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1bd0e:	f06f 0015 	mvn.w	r0, #21
   1bd12:	e794      	b.n	1bc3e <gpio_nrfx_pin_interrupt_configure+0x1e>
   1bd14:	0bad0000 	.word	0x0bad0000
   1bd18:	00032104 	.word	0x00032104
   1bd1c:	0002dd81 	.word	0x0002dd81
   1bd20:	000320d1 	.word	0x000320d1
   1bd24:	40842500 	.word	0x40842500
   1bd28:	40842800 	.word	0x40842800
   1bd2c:	0bad0004 	.word	0x0bad0004

0001bd30 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1bd30:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1bd32:	f003 f925 	bl	1ef80 <nrfx_gpiote_is_init>
   1bd36:	4604      	mov	r4, r0
   1bd38:	b968      	cbnz	r0, 1bd56 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1bd3a:	f003 f8f9 	bl	1ef30 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1bd3e:	4b08      	ldr	r3, [pc, #32]	; (1bd60 <gpio_nrfx_init+0x30>)
   1bd40:	4298      	cmp	r0, r3
   1bd42:	d10a      	bne.n	1bd5a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1bd44:	4621      	mov	r1, r4
   1bd46:	4807      	ldr	r0, [pc, #28]	; (1bd64 <gpio_nrfx_init+0x34>)
   1bd48:	f003 f8c4 	bl	1eed4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1bd4c:	4622      	mov	r2, r4
   1bd4e:	2105      	movs	r1, #5
   1bd50:	202f      	movs	r0, #47	; 0x2f
   1bd52:	f7f4 fef5 	bl	10b40 <z_arm_irq_priority_set>
		return 0;
   1bd56:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1bd58:	bd10      	pop	{r4, pc}
		return -EIO;
   1bd5a:	f06f 0004 	mvn.w	r0, #4
   1bd5e:	e7fb      	b.n	1bd58 <gpio_nrfx_init+0x28>
   1bd60:	0bad0000 	.word	0x0bad0000
   1bd64:	0001bd69 	.word	0x0001bd69

0001bd68 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1bd68:	0942      	lsrs	r2, r0, #5
{
   1bd6a:	4603      	mov	r3, r0
   1bd6c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1bd6e:	d002      	beq.n	1bd76 <nrfx_gpio_handler+0xe>
   1bd70:	2a01      	cmp	r2, #1
   1bd72:	d01e      	beq.n	1bdb2 <nrfx_gpio_handler+0x4a>
}
   1bd74:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1bd76:	4e14      	ldr	r6, [pc, #80]	; (1bdc8 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1bd78:	6932      	ldr	r2, [r6, #16]
   1bd7a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1bd7c:	2900      	cmp	r1, #0
   1bd7e:	d0f9      	beq.n	1bd74 <nrfx_gpio_handler+0xc>
   1bd80:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1bd82:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1bd86:	680c      	ldr	r4, [r1, #0]
   1bd88:	409d      	lsls	r5, r3
   1bd8a:	2900      	cmp	r1, #0
   1bd8c:	d0f2      	beq.n	1bd74 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1bd8e:	688a      	ldr	r2, [r1, #8]
   1bd90:	402a      	ands	r2, r5
   1bd92:	d012      	beq.n	1bdba <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1bd94:	684b      	ldr	r3, [r1, #4]
   1bd96:	b973      	cbnz	r3, 1bdb6 <nrfx_gpio_handler+0x4e>
   1bd98:	490c      	ldr	r1, [pc, #48]	; (1bdcc <nrfx_gpio_handler+0x64>)
   1bd9a:	234d      	movs	r3, #77	; 0x4d
   1bd9c:	4a0c      	ldr	r2, [pc, #48]	; (1bdd0 <nrfx_gpio_handler+0x68>)
   1bd9e:	480d      	ldr	r0, [pc, #52]	; (1bdd4 <nrfx_gpio_handler+0x6c>)
   1bda0:	f00a ffe7 	bl	26d72 <assert_print>
   1bda4:	480c      	ldr	r0, [pc, #48]	; (1bdd8 <nrfx_gpio_handler+0x70>)
   1bda6:	f00a ffe4 	bl	26d72 <assert_print>
   1bdaa:	214d      	movs	r1, #77	; 0x4d
   1bdac:	4808      	ldr	r0, [pc, #32]	; (1bdd0 <nrfx_gpio_handler+0x68>)
   1bdae:	f00a ffd9 	bl	26d64 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1bdb2:	4e0a      	ldr	r6, [pc, #40]	; (1bddc <nrfx_gpio_handler+0x74>)
   1bdb4:	e7e0      	b.n	1bd78 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1bdb6:	4630      	mov	r0, r6
   1bdb8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1bdba:	b11c      	cbz	r4, 1bdc4 <nrfx_gpio_handler+0x5c>
   1bdbc:	6823      	ldr	r3, [r4, #0]
   1bdbe:	4621      	mov	r1, r4
   1bdc0:	461c      	mov	r4, r3
   1bdc2:	e7e2      	b.n	1bd8a <nrfx_gpio_handler+0x22>
   1bdc4:	4623      	mov	r3, r4
   1bdc6:	e7fa      	b.n	1bdbe <nrfx_gpio_handler+0x56>
   1bdc8:	0002c738 	.word	0x0002c738
   1bdcc:	00032e2e 	.word	0x00032e2e
   1bdd0:	0003205d 	.word	0x0003205d
   1bdd4:	0002dd81 	.word	0x0002dd81
   1bdd8:	000320ba 	.word	0x000320ba
   1bddc:	0002c720 	.word	0x0002c720

0001bde0 <gpio_nrfx_pin_configure>:
{
   1bde0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1bde4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1bde8:	f001 051f 	and.w	r5, r1, #31
   1bdec:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1bdf0:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1bdf2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1bdf6:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1bdf8:	4628      	mov	r0, r5
   1bdfa:	f10d 0103 	add.w	r1, sp, #3
   1bdfe:	f003 f86f 	bl	1eee0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1be02:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1be06:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1be08:	d115      	bne.n	1be36 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1be0a:	4628      	mov	r0, r5
   1be0c:	f003 f962 	bl	1f0d4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1be10:	4b48      	ldr	r3, [pc, #288]	; (1bf34 <gpio_nrfx_pin_configure+0x154>)
   1be12:	429e      	cmp	r6, r3
   1be14:	d170      	bne.n	1bef8 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1be16:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1be1a:	f003 f8bb 	bl	1ef94 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1be1e:	42b0      	cmp	r0, r6
   1be20:	d06a      	beq.n	1bef8 <gpio_nrfx_pin_configure+0x118>
   1be22:	4945      	ldr	r1, [pc, #276]	; (1bf38 <gpio_nrfx_pin_configure+0x158>)
   1be24:	236a      	movs	r3, #106	; 0x6a
   1be26:	4a45      	ldr	r2, [pc, #276]	; (1bf3c <gpio_nrfx_pin_configure+0x15c>)
   1be28:	4845      	ldr	r0, [pc, #276]	; (1bf40 <gpio_nrfx_pin_configure+0x160>)
   1be2a:	f00a ffa2 	bl	26d72 <assert_print>
   1be2e:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1be30:	4842      	ldr	r0, [pc, #264]	; (1bf3c <gpio_nrfx_pin_configure+0x15c>)
   1be32:	f00a ff97 	bl	26d64 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1be36:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1be38:	4628      	mov	r0, r5
   1be3a:	4619      	mov	r1, r3
   1be3c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1be3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1be42:	f002 ff27 	bl	1ec94 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1be46:	4b3b      	ldr	r3, [pc, #236]	; (1bf34 <gpio_nrfx_pin_configure+0x154>)
   1be48:	4298      	cmp	r0, r3
   1be4a:	d004      	beq.n	1be56 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1be4c:	f06f 0015 	mvn.w	r0, #21
}
   1be50:	b004      	add	sp, #16
   1be52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1be56:	4286      	cmp	r6, r0
   1be58:	d10d      	bne.n	1be76 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1be5a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1be5e:	f003 f899 	bl	1ef94 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1be62:	42b0      	cmp	r0, r6
   1be64:	d007      	beq.n	1be76 <gpio_nrfx_pin_configure+0x96>
   1be66:	4934      	ldr	r1, [pc, #208]	; (1bf38 <gpio_nrfx_pin_configure+0x158>)
   1be68:	237c      	movs	r3, #124	; 0x7c
   1be6a:	4a34      	ldr	r2, [pc, #208]	; (1bf3c <gpio_nrfx_pin_configure+0x15c>)
   1be6c:	4834      	ldr	r0, [pc, #208]	; (1bf40 <gpio_nrfx_pin_configure+0x160>)
   1be6e:	f00a ff80 	bl	26d72 <assert_print>
   1be72:	217c      	movs	r1, #124	; 0x7c
   1be74:	e7dc      	b.n	1be30 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1be76:	03a6      	lsls	r6, r4, #14
   1be78:	d54c      	bpl.n	1bf14 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1be7a:	f240 3306 	movw	r3, #774	; 0x306
   1be7e:	4023      	ands	r3, r4
   1be80:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1be84:	d019      	beq.n	1beba <gpio_nrfx_pin_configure+0xda>
   1be86:	d80c      	bhi.n	1bea2 <gpio_nrfx_pin_configure+0xc2>
   1be88:	2b06      	cmp	r3, #6
   1be8a:	d017      	beq.n	1bebc <gpio_nrfx_pin_configure+0xdc>
   1be8c:	d804      	bhi.n	1be98 <gpio_nrfx_pin_configure+0xb8>
   1be8e:	b1ab      	cbz	r3, 1bebc <gpio_nrfx_pin_configure+0xdc>
   1be90:	2b02      	cmp	r3, #2
   1be92:	d1db      	bne.n	1be4c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1be94:	2304      	movs	r3, #4
   1be96:	e011      	b.n	1bebc <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1be98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1be9c:	d1d6      	bne.n	1be4c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1be9e:	2301      	movs	r3, #1
   1bea0:	e00c      	b.n	1bebc <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bea2:	f240 2202 	movw	r2, #514	; 0x202
   1bea6:	4293      	cmp	r3, r2
   1bea8:	d028      	beq.n	1befc <gpio_nrfx_pin_configure+0x11c>
   1beaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1beae:	d027      	beq.n	1bf00 <gpio_nrfx_pin_configure+0x120>
   1beb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1beb4:	d1ca      	bne.n	1be4c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1beb6:	2302      	movs	r3, #2
   1beb8:	e000      	b.n	1bebc <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1beba:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1bebc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1bec0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1bec4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1bec8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1beca:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1bece:	bf4c      	ite	mi
   1bed0:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1bed2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1bed6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1bed8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1bedc:	d512      	bpl.n	1bf04 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1bede:	2301      	movs	r3, #1
   1bee0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1bee4:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1bee6:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1bee8:	2200      	movs	r2, #0
   1beea:	4628      	mov	r0, r5
   1beec:	a901      	add	r1, sp, #4
   1beee:	f002 ff79 	bl	1ede4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1bef2:	4b10      	ldr	r3, [pc, #64]	; (1bf34 <gpio_nrfx_pin_configure+0x154>)
   1bef4:	4298      	cmp	r0, r3
   1bef6:	d1a9      	bne.n	1be4c <gpio_nrfx_pin_configure+0x6c>
   1bef8:	2000      	movs	r0, #0
   1befa:	e7a9      	b.n	1be50 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1befc:	2305      	movs	r3, #5
   1befe:	e7dd      	b.n	1bebc <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bf00:	2303      	movs	r3, #3
   1bf02:	e7db      	b.n	1bebc <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1bf04:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1bf06:	bf41      	itttt	mi
   1bf08:	2301      	movmi	r3, #1
   1bf0a:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1bf0e:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1bf10:	60d3      	strmi	r3, [r2, #12]
}
   1bf12:	e7e9      	b.n	1bee8 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1bf14:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bf16:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1bf1a:	bf4c      	ite	mi
   1bf1c:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1bf1e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bf22:	461a      	mov	r2, r3
   1bf24:	4628      	mov	r0, r5
   1bf26:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1bf28:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bf2c:	f002 feb2 	bl	1ec94 <nrfx_gpiote_input_configure>
   1bf30:	e7df      	b.n	1bef2 <gpio_nrfx_pin_configure+0x112>
   1bf32:	bf00      	nop
   1bf34:	0bad0000 	.word	0x0bad0000
   1bf38:	0002edb1 	.word	0x0002edb1
   1bf3c:	00032127 	.word	0x00032127
   1bf40:	0002dd81 	.word	0x0002dd81

0001bf44 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1bf44:	4603      	mov	r3, r0
   1bf46:	b510      	push	{r4, lr}
   1bf48:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bf4a:	7919      	ldrb	r1, [r3, #4]
   1bf4c:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1bf4e:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bf50:	fa03 f101 	lsl.w	r1, r3, r1
   1bf54:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1bf56:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bf58:	681b      	ldr	r3, [r3, #0]
   1bf5a:	4219      	tst	r1, r3
   1bf5c:	d10e      	bne.n	1bf7c <gpio_pin_set_dt.isra.0+0x38>
   1bf5e:	490e      	ldr	r1, [pc, #56]	; (1bf98 <gpio_pin_set_dt.isra.0+0x54>)
   1bf60:	f240 533d 	movw	r3, #1341	; 0x53d
   1bf64:	4a0d      	ldr	r2, [pc, #52]	; (1bf9c <gpio_pin_set_dt.isra.0+0x58>)
   1bf66:	480e      	ldr	r0, [pc, #56]	; (1bfa0 <gpio_pin_set_dt.isra.0+0x5c>)
   1bf68:	f00a ff03 	bl	26d72 <assert_print>
   1bf6c:	480d      	ldr	r0, [pc, #52]	; (1bfa4 <gpio_pin_set_dt.isra.0+0x60>)
   1bf6e:	f00a ff00 	bl	26d72 <assert_print>
   1bf72:	f240 513d 	movw	r1, #1341	; 0x53d
   1bf76:	4809      	ldr	r0, [pc, #36]	; (1bf9c <gpio_pin_set_dt.isra.0+0x58>)
   1bf78:	f00a fef4 	bl	26d64 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1bf7c:	6823      	ldr	r3, [r4, #0]
   1bf7e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1bf80:	bf18      	it	ne
   1bf82:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1bf86:	b122      	cbz	r2, 1bf92 <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1bf88:	6883      	ldr	r3, [r0, #8]
   1bf8a:	68db      	ldr	r3, [r3, #12]
}
   1bf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1bf90:	4718      	bx	r3
   1bf92:	6883      	ldr	r3, [r0, #8]
   1bf94:	691b      	ldr	r3, [r3, #16]
   1bf96:	e7f9      	b.n	1bf8c <gpio_pin_set_dt.isra.0+0x48>
   1bf98:	0002dd43 	.word	0x0002dd43
   1bf9c:	0002dd12 	.word	0x0002dd12
   1bfa0:	0002dd81 	.word	0x0002dd81
   1bfa4:	0002dd9e 	.word	0x0002dd9e

0001bfa8 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1bfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bfac:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1bfae:	6844      	ldr	r4, [r0, #4]
{
   1bfb0:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1bfb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1bfb4:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1bfb6:	2100      	movs	r1, #0
   1bfb8:	4630      	mov	r0, r6
   1bfba:	1d3a      	adds	r2, r7, #4
   1bfbc:	f00e fdc2 	bl	2ab44 <pinctrl_lookup_state>
	if (ret < 0) {
   1bfc0:	2800      	cmp	r0, #0
   1bfc2:	db32      	blt.n	1c02a <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1bfc4:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1bfc6:	6832      	ldr	r2, [r6, #0]
   1bfc8:	7919      	ldrb	r1, [r3, #4]
   1bfca:	6818      	ldr	r0, [r3, #0]
   1bfcc:	f00e fdcd 	bl	2ab6a <pinctrl_configure_pins>
	if (err < 0) {
   1bfd0:	2800      	cmp	r0, #0
   1bfd2:	db2a      	blt.n	1c02a <spi_nrfx_init+0x82>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bfd4:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1bfd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bfd8:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1bfda:	68ac      	ldr	r4, [r5, #8]
   1bfdc:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1bfe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1bfe4:	429c      	cmp	r4, r3
   1bfe6:	d304      	bcc.n	1bff2 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1bfe8:	4628      	mov	r0, r5
   1bfea:	f00e fa8c 	bl	2a506 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1bfee:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1bff0:	e01b      	b.n	1c02a <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1bff2:	6820      	ldr	r0, [r4, #0]
   1bff4:	f00f fca2 	bl	2b93c <z_device_is_ready>
   1bff8:	b9d8      	cbnz	r0, 1c032 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1bffa:	6823      	ldr	r3, [r4, #0]
   1bffc:	6819      	ldr	r1, [r3, #0]
   1bffe:	7923      	ldrb	r3, [r4, #4]
   1c000:	466c      	mov	r4, sp
   1c002:	b08a      	sub	sp, #40	; 0x28
   1c004:	466a      	mov	r2, sp
   1c006:	61d3      	str	r3, [r2, #28]
   1c008:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c00c:	4833      	ldr	r0, [pc, #204]	; (1c0dc <spi_nrfx_init+0x134>)
   1c00e:	8413      	strh	r3, [r2, #32]
   1c010:	4b33      	ldr	r3, [pc, #204]	; (1c0e0 <spi_nrfx_init+0x138>)
   1c012:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c016:	4833      	ldr	r0, [pc, #204]	; (1c0e4 <spi_nrfx_init+0x13c>)
   1c018:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c01c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c020:	f00e fa4c 	bl	2a4bc <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1c024:	f06f 0012 	mvn.w	r0, #18
   1c028:	46a5      	mov	sp, r4
#endif
}
   1c02a:	370c      	adds	r7, #12
   1c02c:	46bd      	mov	sp, r7
   1c02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1c032:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1c034:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1c036:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c038:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1c03c:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1c03e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1c042:	e9d0 c901 	ldrd	ip, r9, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c046:	d10e      	bne.n	1c066 <spi_nrfx_init+0xbe>
   1c048:	4927      	ldr	r1, [pc, #156]	; (1c0e8 <spi_nrfx_init+0x140>)
   1c04a:	f240 23b7 	movw	r3, #695	; 0x2b7
   1c04e:	4a27      	ldr	r2, [pc, #156]	; (1c0ec <spi_nrfx_init+0x144>)
   1c050:	4827      	ldr	r0, [pc, #156]	; (1c0f0 <spi_nrfx_init+0x148>)
   1c052:	f00a fe8e 	bl	26d72 <assert_print>
   1c056:	4827      	ldr	r0, [pc, #156]	; (1c0f4 <spi_nrfx_init+0x14c>)
   1c058:	f00a fe8b 	bl	26d72 <assert_print>
   1c05c:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1c060:	4822      	ldr	r0, [pc, #136]	; (1c0ec <spi_nrfx_init+0x144>)
   1c062:	f00a fe7f 	bl	26d64 <assert_post_action>
   1c066:	f003 0206 	and.w	r2, r3, #6
   1c06a:	2a04      	cmp	r2, #4
   1c06c:	d109      	bne.n	1c082 <spi_nrfx_init+0xda>
   1c06e:	4922      	ldr	r1, [pc, #136]	; (1c0f8 <spi_nrfx_init+0x150>)
   1c070:	f240 23bf 	movw	r3, #703	; 0x2bf
   1c074:	4a1d      	ldr	r2, [pc, #116]	; (1c0ec <spi_nrfx_init+0x144>)
   1c076:	481e      	ldr	r0, [pc, #120]	; (1c0f0 <spi_nrfx_init+0x148>)
   1c078:	f00a fe7b 	bl	26d72 <assert_print>
   1c07c:	f240 21bf 	movw	r1, #703	; 0x2bf
   1c080:	e7ee      	b.n	1c060 <spi_nrfx_init+0xb8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c082:	f8dc c000 	ldr.w	ip, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c086:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c088:	fa06 fe01 	lsl.w	lr, r6, r1
	return gpio_pin_configure(spec->port,
   1c08c:	bf54      	ite	pl
   1c08e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c092:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c096:	ea1e 0f0c 	tst.w	lr, ip
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c09a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c09e:	d10c      	bne.n	1c0ba <spi_nrfx_init+0x112>
   1c0a0:	4916      	ldr	r1, [pc, #88]	; (1c0fc <spi_nrfx_init+0x154>)
   1c0a2:	f240 23d2 	movw	r3, #722	; 0x2d2
   1c0a6:	4a11      	ldr	r2, [pc, #68]	; (1c0ec <spi_nrfx_init+0x144>)
   1c0a8:	4811      	ldr	r0, [pc, #68]	; (1c0f0 <spi_nrfx_init+0x148>)
   1c0aa:	f00a fe62 	bl	26d72 <assert_print>
   1c0ae:	4814      	ldr	r0, [pc, #80]	; (1c100 <spi_nrfx_init+0x158>)
   1c0b0:	f00a fe5f 	bl	26d72 <assert_print>
   1c0b4:	f240 21d2 	movw	r1, #722	; 0x2d2
   1c0b8:	e7d2      	b.n	1c060 <spi_nrfx_init+0xb8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c0ba:	f8d8 c000 	ldr.w	ip, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c0be:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c0c0:	bf4c      	ite	mi
   1c0c2:	ea4c 030e 	orrmi.w	r3, ip, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c0c6:	ea2c 030e 	bicpl.w	r3, ip, lr
   1c0ca:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   1c0ce:	f8d9 3000 	ldr.w	r3, [r9]
   1c0d2:	4798      	blx	r3
		if (ret < 0) {
   1c0d4:	2800      	cmp	r0, #0
   1c0d6:	dba8      	blt.n	1c02a <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c0d8:	3408      	adds	r4, #8
   1c0da:	e77f      	b.n	1bfdc <spi_nrfx_init+0x34>
   1c0dc:	0003216b 	.word	0x0003216b
   1c0e0:	01000004 	.word	0x01000004
   1c0e4:	0002cdb8 	.word	0x0002cdb8
   1c0e8:	0002e01a 	.word	0x0002e01a
   1c0ec:	0002dd12 	.word	0x0002dd12
   1c0f0:	0002dd81 	.word	0x0002dd81
   1c0f4:	0002e053 	.word	0x0002e053
   1c0f8:	0002e117 	.word	0x0002e117
   1c0fc:	0002dd43 	.word	0x0002dd43
   1c100:	0002dd9e 	.word	0x0002dd9e

0001c104 <transfer_next_chunk>:
{
   1c104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1c106:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c108:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1c10a:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1c10c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1c10e:	b98d      	cbnz	r5, 1c134 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1c110:	2b00      	cmp	r3, #0
   1c112:	d137      	bne.n	1c184 <transfer_next_chunk+0x80>
	int error = 0;
   1c114:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1c116:	2200      	movs	r2, #0
   1c118:	4620      	mov	r0, r4
   1c11a:	4611      	mov	r1, r2
   1c11c:	f00e f9d1 	bl	2a4c2 <_spi_context_cs_control>
	ctx->sync_status = status;
   1c120:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1c122:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c126:	f005 fdb3 	bl	21c90 <z_impl_k_sem_give>
	dev_data->busy = false;
   1c12a:	2300      	movs	r3, #0
   1c12c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1c130:	b004      	add	sp, #16
   1c132:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1c134:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1c136:	bb0b      	cbnz	r3, 1c17c <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1c138:	bb39      	cbnz	r1, 1c18a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1c13a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c13e:	42aa      	cmp	r2, r5
   1c140:	bf28      	it	cs
   1c142:	462a      	movcs	r2, r5
   1c144:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1c146:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1c148:	9100      	str	r1, [sp, #0]
   1c14a:	b11b      	cbz	r3, 1c154 <transfer_next_chunk+0x50>
   1c14c:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1c14e:	2b00      	cmp	r3, #0
   1c150:	bf18      	it	ne
   1c152:	4613      	movne	r3, r2
   1c154:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1c156:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c158:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1c15a:	b11b      	cbz	r3, 1c164 <transfer_next_chunk+0x60>
   1c15c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c15e:	2b00      	cmp	r3, #0
   1c160:	bf18      	it	ne
   1c162:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c164:	2200      	movs	r2, #0
   1c166:	4669      	mov	r1, sp
   1c168:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c16a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c16c:	f003 ff56 	bl	2001c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1c170:	4b0d      	ldr	r3, [pc, #52]	; (1c1a8 <transfer_next_chunk+0xa4>)
   1c172:	4298      	cmp	r0, r3
   1c174:	d0dc      	beq.n	1c130 <transfer_next_chunk+0x2c>
			error = -EIO;
   1c176:	f06f 0504 	mvn.w	r5, #4
   1c17a:	e7cc      	b.n	1c116 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1c17c:	429d      	cmp	r5, r3
   1c17e:	bf28      	it	cs
   1c180:	461d      	movcs	r5, r3
   1c182:	e7d9      	b.n	1c138 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1c184:	461d      	mov	r5, r3
   1c186:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1c188:	e7d7      	b.n	1c13a <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1c18a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1c18e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c192:	d0d2      	beq.n	1c13a <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1c194:	2d08      	cmp	r5, #8
   1c196:	bf28      	it	cs
   1c198:	2508      	movcs	r5, #8
   1c19a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1c19c:	462a      	mov	r2, r5
   1c19e:	f00f fe0d 	bl	2bdbc <memcpy>
			tx_buf = dev_data->buffer;
   1c1a2:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1c1a4:	e7c9      	b.n	1c13a <transfer_next_chunk+0x36>
   1c1a6:	bf00      	nop
   1c1a8:	0bad0000 	.word	0x0bad0000

0001c1ac <event_handler>:
{
   1c1ac:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c1ae:	7803      	ldrb	r3, [r0, #0]
{
   1c1b0:	460c      	mov	r4, r1
   1c1b2:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c1b4:	2b00      	cmp	r3, #0
   1c1b6:	d154      	bne.n	1c262 <event_handler+0xb6>
	if (!ctx->tx_len) {
   1c1b8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c1ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1c1bc:	b15b      	cbz	r3, 1c1d6 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1c1be:	429a      	cmp	r2, r3
   1c1c0:	d91e      	bls.n	1c200 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1c1c2:	4b29      	ldr	r3, [pc, #164]	; (1c268 <event_handler+0xbc>)
   1c1c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c1c8:	9305      	str	r3, [sp, #20]
   1c1ca:	2302      	movs	r3, #2
   1c1cc:	4827      	ldr	r0, [pc, #156]	; (1c26c <event_handler+0xc0>)
   1c1ce:	aa04      	add	r2, sp, #16
   1c1d0:	9304      	str	r3, [sp, #16]
   1c1d2:	f00e f973 	bl	2a4bc <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1c1d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c1d8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1c1da:	b15b      	cbz	r3, 1c1f4 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1c1dc:	429a      	cmp	r2, r3
   1c1de:	d927      	bls.n	1c230 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1c1e0:	4b21      	ldr	r3, [pc, #132]	; (1c268 <event_handler+0xbc>)
   1c1e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c1e6:	9305      	str	r3, [sp, #20]
   1c1e8:	2302      	movs	r3, #2
   1c1ea:	4820      	ldr	r0, [pc, #128]	; (1c26c <event_handler+0xc0>)
   1c1ec:	aa04      	add	r2, sp, #16
   1c1ee:	9304      	str	r3, [sp, #16]
   1c1f0:	f00e f964 	bl	2a4bc <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1c1f4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1c1f6:	b006      	add	sp, #24
   1c1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1c1fc:	f7ff bf82 	b.w	1c104 <transfer_next_chunk>
	ctx->tx_len -= len;
   1c200:	1a9b      	subs	r3, r3, r2
   1c202:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1c204:	b973      	cbnz	r3, 1c224 <event_handler+0x78>
		++ctx->current_tx;
   1c206:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1c208:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1c20c:	3308      	adds	r3, #8
   1c20e:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1c210:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c212:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1c216:	3b01      	subs	r3, #1
   1c218:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c21a:	3148      	adds	r1, #72	; 0x48
   1c21c:	f00e f93b 	bl	2a496 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1c220:	6560      	str	r0, [r4, #84]	; 0x54
   1c222:	e7d8      	b.n	1c1d6 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1c224:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c226:	2b00      	cmp	r3, #0
   1c228:	d0d5      	beq.n	1c1d6 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1c22a:	4413      	add	r3, r2
   1c22c:	654b      	str	r3, [r1, #84]	; 0x54
   1c22e:	e7d2      	b.n	1c1d6 <event_handler+0x2a>
	ctx->rx_len -= len;
   1c230:	1a9b      	subs	r3, r3, r2
   1c232:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1c234:	b97b      	cbnz	r3, 1c256 <event_handler+0xaa>
		++ctx->current_rx;
   1c236:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1c238:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1c23c:	3308      	adds	r3, #8
   1c23e:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1c240:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c242:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1c246:	3b01      	subs	r3, #1
   1c248:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c24a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1c24e:	f00e f922 	bl	2a496 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1c252:	65e0      	str	r0, [r4, #92]	; 0x5c
   1c254:	e7ce      	b.n	1c1f4 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1c256:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c258:	2b00      	cmp	r3, #0
   1c25a:	d0cb      	beq.n	1c1f4 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1c25c:	4413      	add	r3, r2
   1c25e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1c260:	e7c8      	b.n	1c1f4 <event_handler+0x48>
}
   1c262:	b006      	add	sp, #24
   1c264:	bd10      	pop	{r4, pc}
   1c266:	bf00      	nop
   1c268:	0003218f 	.word	0x0003218f
   1c26c:	0002cdb8 	.word	0x0002cdb8

0001c270 <spi_nrfx_transceive>:
{
   1c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c274:	b08b      	sub	sp, #44	; 0x2c
   1c276:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c278:	888b      	ldrh	r3, [r1, #4]
   1c27a:	af00      	add	r7, sp, #0
   1c27c:	049b      	lsls	r3, r3, #18
   1c27e:	4680      	mov	r8, r0
   1c280:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1c282:	6904      	ldr	r4, [r0, #16]
{
   1c284:	60ba      	str	r2, [r7, #8]
   1c286:	d438      	bmi.n	1c2fa <spi_nrfx_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   1c288:	f04f 32ff 	mov.w	r2, #4294967295
   1c28c:	f04f 33ff 	mov.w	r3, #4294967295
   1c290:	f104 0010 	add.w	r0, r4, #16
   1c294:	f005 fd40 	bl	21d18 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1c298:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c29a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1c29e:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1c2a2:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c2a4:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1c2a6:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1c2aa:	607b      	str	r3, [r7, #4]
   1c2ac:	b123      	cbz	r3, 1c2b8 <spi_nrfx_transceive+0x48>
   1c2ae:	f8d9 3000 	ldr.w	r3, [r9]
   1c2b2:	429e      	cmp	r6, r3
   1c2b4:	f000 80e8 	beq.w	1c488 <spi_nrfx_transceive+0x218>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1c2b8:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1c2bc:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1c2c0:	d022      	beq.n	1c308 <spi_nrfx_transceive+0x98>
		LOG_ERR("Half-duplex not supported");
   1c2c2:	4ba8      	ldr	r3, [pc, #672]	; (1c564 <spi_nrfx_transceive+0x2f4>)
		return -ENOTSUP;
   1c2c4:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1c2c8:	627b      	str	r3, [r7, #36]	; 0x24
   1c2ca:	2302      	movs	r3, #2
   1c2cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c2d0:	48a5      	ldr	r0, [pc, #660]	; (1c568 <spi_nrfx_transceive+0x2f8>)
   1c2d2:	623b      	str	r3, [r7, #32]
   1c2d4:	f107 0220 	add.w	r2, r7, #32
   1c2d8:	f00e f8f0 	bl	2a4bc <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1c2dc:	6823      	ldr	r3, [r4, #0]
   1c2de:	889b      	ldrh	r3, [r3, #4]
   1c2e0:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1c2e4:	d104      	bne.n	1c2f0 <spi_nrfx_transceive+0x80>
		ctx->owner = NULL;
   1c2e6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1c2e8:	f104 0010 	add.w	r0, r4, #16
   1c2ec:	f005 fcd0 	bl	21c90 <z_impl_k_sem_give>
}
   1c2f0:	4628      	mov	r0, r5
   1c2f2:	372c      	adds	r7, #44	; 0x2c
   1c2f4:	46bd      	mov	sp, r7
   1c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c2fa:	69a3      	ldr	r3, [r4, #24]
   1c2fc:	2b00      	cmp	r3, #0
   1c2fe:	d1c3      	bne.n	1c288 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1c300:	6863      	ldr	r3, [r4, #4]
   1c302:	4299      	cmp	r1, r3
   1c304:	d1c0      	bne.n	1c288 <spi_nrfx_transceive+0x18>
   1c306:	e7c8      	b.n	1c29a <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1c308:	f01c 0f01 	tst.w	ip, #1
   1c30c:	d016      	beq.n	1c33c <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1c30e:	466d      	mov	r5, sp
   1c310:	b088      	sub	sp, #32
   1c312:	f8d8 3000 	ldr.w	r3, [r8]
   1c316:	466a      	mov	r2, sp
   1c318:	4994      	ldr	r1, [pc, #592]	; (1c56c <spi_nrfx_transceive+0x2fc>)
   1c31a:	4893      	ldr	r0, [pc, #588]	; (1c568 <spi_nrfx_transceive+0x2f8>)
   1c31c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c320:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c324:	8393      	strh	r3, [r2, #28]
   1c326:	4b92      	ldr	r3, [pc, #584]	; (1c570 <spi_nrfx_transceive+0x300>)
   1c328:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1c32c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c330:	f00e f8c4 	bl	2a4bc <z_log_msg_static_create.constprop.0>
   1c334:	46ad      	mov	sp, r5
		return -EINVAL;
   1c336:	f06f 0515 	mvn.w	r5, #21
   1c33a:	e7cf      	b.n	1c2dc <spi_nrfx_transceive+0x6c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1c33c:	f01c 0f08 	tst.w	ip, #8
   1c340:	d00b      	beq.n	1c35a <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
   1c342:	4b8c      	ldr	r3, [pc, #560]	; (1c574 <spi_nrfx_transceive+0x304>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c344:	627b      	str	r3, [r7, #36]	; 0x24
   1c346:	2302      	movs	r3, #2
   1c348:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c34c:	4886      	ldr	r0, [pc, #536]	; (1c568 <spi_nrfx_transceive+0x2f8>)
   1c34e:	623b      	str	r3, [r7, #32]
   1c350:	f107 0220 	add.w	r2, r7, #32
   1c354:	f00e f8b2 	bl	2a4bc <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1c358:	e7ed      	b.n	1c336 <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1c35a:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1c35e:	2b08      	cmp	r3, #8
   1c360:	d001      	beq.n	1c366 <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c362:	4b85      	ldr	r3, [pc, #532]	; (1c578 <spi_nrfx_transceive+0x308>)
   1c364:	e7ee      	b.n	1c344 <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
   1c366:	6833      	ldr	r3, [r6, #0]
   1c368:	603b      	str	r3, [r7, #0]
   1c36a:	683a      	ldr	r2, [r7, #0]
   1c36c:	4b83      	ldr	r3, [pc, #524]	; (1c57c <spi_nrfx_transceive+0x30c>)
   1c36e:	429a      	cmp	r2, r3
   1c370:	d801      	bhi.n	1c376 <spi_nrfx_transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1c372:	4b83      	ldr	r3, [pc, #524]	; (1c580 <spi_nrfx_transceive+0x310>)
   1c374:	e7e6      	b.n	1c344 <spi_nrfx_transceive+0xd4>
	if (max_freq > 16000000 &&
   1c376:	4b83      	ldr	r3, [pc, #524]	; (1c584 <spi_nrfx_transceive+0x314>)
   1c378:	429d      	cmp	r5, r3
   1c37a:	d906      	bls.n	1c38a <spi_nrfx_transceive+0x11a>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1c37c:	4a82      	ldr	r2, [pc, #520]	; (1c588 <spi_nrfx_transceive+0x318>)
   1c37e:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1c382:	f012 0f03 	tst.w	r2, #3
   1c386:	bf18      	it	ne
   1c388:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1c38a:	68fb      	ldr	r3, [r7, #12]
   1c38c:	f107 0e10 	add.w	lr, r7, #16
   1c390:	f103 0b0c 	add.w	fp, r3, #12
   1c394:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1c398:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c39c:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
   1c39e:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c3a2:	42ab      	cmp	r3, r5
   1c3a4:	bf28      	it	cs
   1c3a6:	462b      	movcs	r3, r5
   1c3a8:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1c3aa:	4b78      	ldr	r3, [pc, #480]	; (1c58c <spi_nrfx_transceive+0x31c>)
	config = dev_config->def_config;
   1c3ac:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   1c3b0:	429d      	cmp	r5, r3
   1c3b2:	d94b      	bls.n	1c44c <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 500000) {
   1c3b4:	4b76      	ldr	r3, [pc, #472]	; (1c590 <spi_nrfx_transceive+0x320>)
   1c3b6:	429d      	cmp	r5, r3
   1c3b8:	d94b      	bls.n	1c452 <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 1000000) {
   1c3ba:	4b76      	ldr	r3, [pc, #472]	; (1c594 <spi_nrfx_transceive+0x324>)
   1c3bc:	429d      	cmp	r5, r3
   1c3be:	d94b      	bls.n	1c458 <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 2000000) {
   1c3c0:	4b75      	ldr	r3, [pc, #468]	; (1c598 <spi_nrfx_transceive+0x328>)
   1c3c2:	429d      	cmp	r5, r3
   1c3c4:	d94b      	bls.n	1c45e <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 4000000) {
   1c3c6:	4b75      	ldr	r3, [pc, #468]	; (1c59c <spi_nrfx_transceive+0x32c>)
   1c3c8:	429d      	cmp	r5, r3
   1c3ca:	d94b      	bls.n	1c464 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 8000000) {
   1c3cc:	4b74      	ldr	r3, [pc, #464]	; (1c5a0 <spi_nrfx_transceive+0x330>)
   1c3ce:	429d      	cmp	r5, r3
   1c3d0:	d34b      	bcc.n	1c46a <spi_nrfx_transceive+0x1fa>
	} else if (frequency < 16000000) {
   1c3d2:	4b6c      	ldr	r3, [pc, #432]	; (1c584 <spi_nrfx_transceive+0x314>)
   1c3d4:	429d      	cmp	r5, r3
   1c3d6:	d34b      	bcc.n	1c470 <spi_nrfx_transceive+0x200>
		return NRF_SPIM_FREQ_16M;
   1c3d8:	4b72      	ldr	r3, [pc, #456]	; (1c5a4 <spi_nrfx_transceive+0x334>)
   1c3da:	429d      	cmp	r5, r3
   1c3dc:	bf2c      	ite	cs
   1c3de:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1c3e2:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c3e6:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c3ea:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c3ec:	f00c 0304 	and.w	r3, ip, #4
   1c3f0:	d041      	beq.n	1c476 <spi_nrfx_transceive+0x206>
			return NRF_SPIM_MODE_2;
   1c3f2:	2b00      	cmp	r3, #0
   1c3f4:	bf14      	ite	ne
   1c3f6:	2303      	movne	r3, #3
   1c3f8:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1c3fa:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1c3fc:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1c3fe:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1c402:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1c406:	b12b      	cbz	r3, 1c414 <spi_nrfx_transceive+0x1a4>
		nrfx_spim_uninit(&dev_config->spim);
   1c408:	68f8      	ldr	r0, [r7, #12]
   1c40a:	f003 fd9d 	bl	1ff48 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1c40e:	2300      	movs	r3, #0
   1c410:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1c414:	464b      	mov	r3, r9
   1c416:	4a64      	ldr	r2, [pc, #400]	; (1c5a8 <spi_nrfx_transceive+0x338>)
   1c418:	68f8      	ldr	r0, [r7, #12]
   1c41a:	f107 0110 	add.w	r1, r7, #16
   1c41e:	f003 fc61 	bl	1fce4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1c422:	4b62      	ldr	r3, [pc, #392]	; (1c5ac <spi_nrfx_transceive+0x33c>)
   1c424:	4298      	cmp	r0, r3
   1c426:	d02a      	beq.n	1c47e <spi_nrfx_transceive+0x20e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1c428:	466d      	mov	r5, sp
   1c42a:	b088      	sub	sp, #32
   1c42c:	466a      	mov	r2, sp
   1c42e:	4b60      	ldr	r3, [pc, #384]	; (1c5b0 <spi_nrfx_transceive+0x340>)
   1c430:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c434:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c438:	2303      	movs	r3, #3
   1c43a:	484b      	ldr	r0, [pc, #300]	; (1c568 <spi_nrfx_transceive+0x2f8>)
   1c43c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c440:	f00e f83c 	bl	2a4bc <z_log_msg_static_create.constprop.0>
   1c444:	46ad      	mov	sp, r5
		return -EIO;
   1c446:	f06f 0504 	mvn.w	r5, #4
   1c44a:	e747      	b.n	1c2dc <spi_nrfx_transceive+0x6c>
		return NRF_SPIM_FREQ_125K;
   1c44c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1c450:	e7c9      	b.n	1c3e6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_250K;
   1c452:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1c456:	e7c6      	b.n	1c3e6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_500K;
   1c458:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1c45c:	e7c3      	b.n	1c3e6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_1M;
   1c45e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c462:	e7c0      	b.n	1c3e6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_2M;
   1c464:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1c468:	e7bd      	b.n	1c3e6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_4M;
   1c46a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1c46e:	e7ba      	b.n	1c3e6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_8M;
   1c470:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1c474:	e7b7      	b.n	1c3e6 <spi_nrfx_transceive+0x176>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1c476:	3b00      	subs	r3, #0
   1c478:	bf18      	it	ne
   1c47a:	2301      	movne	r3, #1
   1c47c:	e7bd      	b.n	1c3fa <spi_nrfx_transceive+0x18a>
	dev_data->initialized = true;
   1c47e:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1c480:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1c484:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1c488:	2301      	movs	r3, #1
   1c48a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1c48e:	68bb      	ldr	r3, [r7, #8]
   1c490:	2b00      	cmp	r3, #0
   1c492:	d154      	bne.n	1c53e <spi_nrfx_transceive+0x2ce>
   1c494:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1c496:	2300      	movs	r3, #0
   1c498:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1c49a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1c49e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1c4a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1c4a6:	f00d fff6 	bl	2a496 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1c4aa:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1c4ac:	f1ba 0f00 	cmp.w	sl, #0
   1c4b0:	d14d      	bne.n	1c54e <spi_nrfx_transceive+0x2de>
   1c4b2:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1c4b6:	2300      	movs	r3, #0
   1c4b8:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1c4ba:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1c4be:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1c4c2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1c4c6:	f00d ffe6 	bl	2a496 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1c4ca:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1c4cc:	2101      	movs	r1, #1
   1c4ce:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1c4d0:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1c4d2:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1c4d4:	4620      	mov	r0, r4
   1c4d6:	f00d fff4 	bl	2a4c2 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1c4da:	4640      	mov	r0, r8
   1c4dc:	f7ff fe12 	bl	1c104 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c4e0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1c4e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1c4e4:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c4e6:	429d      	cmp	r5, r3
   1c4e8:	bf38      	it	cc
   1c4ea:	461d      	movcc	r5, r3
   1c4ec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1c4f0:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1c4f2:	f858 3b28 	ldr.w	r3, [r8], #40
   1c4f6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c4fa:	681b      	ldr	r3, [r3, #0]
   1c4fc:	4631      	mov	r1, r6
   1c4fe:	fbb5 f5f3 	udiv	r5, r5, r3
   1c502:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1c506:	35c8      	adds	r5, #200	; 0xc8
   1c508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c50c:	2300      	movs	r3, #0
   1c50e:	fbe5 010c 	umlal	r0, r1, r5, ip
   1c512:	f7ec fced 	bl	8ef0 <__aeabi_uldivmod>
   1c516:	4602      	mov	r2, r0
   1c518:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1c51a:	4640      	mov	r0, r8
   1c51c:	f005 fbfc 	bl	21d18 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1c520:	b1e8      	cbz	r0, 1c55e <spi_nrfx_transceive+0x2ee>
		LOG_ERR("Timeout waiting for transfer complete");
   1c522:	4b24      	ldr	r3, [pc, #144]	; (1c5b4 <spi_nrfx_transceive+0x344>)
   1c524:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c528:	627b      	str	r3, [r7, #36]	; 0x24
   1c52a:	2302      	movs	r3, #2
   1c52c:	480e      	ldr	r0, [pc, #56]	; (1c568 <spi_nrfx_transceive+0x2f8>)
   1c52e:	623b      	str	r3, [r7, #32]
   1c530:	f107 0220 	add.w	r2, r7, #32
   1c534:	f00d ffc2 	bl	2a4bc <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1c538:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1c53c:	e6ce      	b.n	1c2dc <spi_nrfx_transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1c53e:	68bb      	ldr	r3, [r7, #8]
   1c540:	681b      	ldr	r3, [r3, #0]
   1c542:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1c544:	2b00      	cmp	r3, #0
   1c546:	d0a6      	beq.n	1c496 <spi_nrfx_transceive+0x226>
   1c548:	68bb      	ldr	r3, [r7, #8]
   1c54a:	685b      	ldr	r3, [r3, #4]
   1c54c:	e7a4      	b.n	1c498 <spi_nrfx_transceive+0x228>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1c54e:	f8da 3000 	ldr.w	r3, [sl]
   1c552:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1c554:	2b00      	cmp	r3, #0
   1c556:	d0ae      	beq.n	1c4b6 <spi_nrfx_transceive+0x246>
   1c558:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c55c:	e7ac      	b.n	1c4b8 <spi_nrfx_transceive+0x248>
	status = ctx->sync_status;
   1c55e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1c560:	e6bc      	b.n	1c2dc <spi_nrfx_transceive+0x6c>
   1c562:	bf00      	nop
   1c564:	000321ad 	.word	0x000321ad
   1c568:	0002cdb8 	.word	0x0002cdb8
   1c56c:	000321c7 	.word	0x000321c7
   1c570:	01000003 	.word	0x01000003
   1c574:	000321e9 	.word	0x000321e9
   1c578:	00032208 	.word	0x00032208
   1c57c:	0001e847 	.word	0x0001e847
   1c580:	00032237 	.word	0x00032237
   1c584:	00f42400 	.word	0x00f42400
   1c588:	40005000 	.word	0x40005000
   1c58c:	0003d08f 	.word	0x0003d08f
   1c590:	0007a11f 	.word	0x0007a11f
   1c594:	000f423f 	.word	0x000f423f
   1c598:	001e847f 	.word	0x001e847f
   1c59c:	003d08ff 	.word	0x003d08ff
   1c5a0:	007a1200 	.word	0x007a1200
   1c5a4:	01e84800 	.word	0x01e84800
   1c5a8:	0001c1ad 	.word	0x0001c1ad
   1c5ac:	0bad0000 	.word	0x0bad0000
   1c5b0:	00032268 	.word	0x00032268
   1c5b4:	0003228f 	.word	0x0003228f

0001c5b8 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1c5b8:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1c5bc:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1c5c0:	280a      	cmp	r0, #10
   1c5c2:	bf9a      	itte	ls
   1c5c4:	4b02      	ldrls	r3, [pc, #8]	; (1c5d0 <qspi_get_zephyr_ret_code+0x18>)
   1c5c6:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1c5ca:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1c5ce:	4770      	bx	lr
   1c5d0:	0002dcfc 	.word	0x0002dcfc

0001c5d4 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1c5d4:	4b02      	ldr	r3, [pc, #8]	; (1c5e0 <qspi_nor_pages_layout+0xc>)
   1c5d6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c5d8:	2301      	movs	r3, #1
   1c5da:	6013      	str	r3, [r2, #0]
}
   1c5dc:	4770      	bx	lr
   1c5de:	bf00      	nop
   1c5e0:	0002db40 	.word	0x0002db40

0001c5e4 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1c5e4:	4800      	ldr	r0, [pc, #0]	; (1c5e8 <qspi_flash_get_parameters+0x4>)
   1c5e6:	4770      	bx	lr
   1c5e8:	0002dad4 	.word	0x0002dad4

0001c5ec <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1c5ec:	4b05      	ldr	r3, [pc, #20]	; (1c604 <qspi_wait_for_completion.isra.0+0x18>)
   1c5ee:	4299      	cmp	r1, r3
   1c5f0:	d106      	bne.n	1c600 <qspi_wait_for_completion.isra.0+0x14>
   1c5f2:	f04f 32ff 	mov.w	r2, #4294967295
   1c5f6:	f04f 33ff 	mov.w	r3, #4294967295
   1c5fa:	3030      	adds	r0, #48	; 0x30
   1c5fc:	f005 bb8c 	b.w	21d18 <z_impl_k_sem_take>
}
   1c600:	4770      	bx	lr
   1c602:	bf00      	nop
   1c604:	0bad0000 	.word	0x0bad0000

0001c608 <qspi_device_init>:
{
   1c608:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1c60a:	6905      	ldr	r5, [r0, #16]
{
   1c60c:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1c60e:	4e0f      	ldr	r6, [pc, #60]	; (1c64c <qspi_device_init+0x44>)
	qspi_lock(dev);
   1c610:	4628      	mov	r0, r5
   1c612:	f00d ffa2 	bl	2a55a <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1c616:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c61a:	f00d ff96 	bl	2a54a <k_sem_give>
	if (!qspi_initialized) {
   1c61e:	7833      	ldrb	r3, [r6, #0]
   1c620:	b98b      	cbnz	r3, 1c646 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1c622:	462a      	mov	r2, r5
   1c624:	490a      	ldr	r1, [pc, #40]	; (1c650 <qspi_device_init+0x48>)
   1c626:	6860      	ldr	r0, [r4, #4]
   1c628:	f003 f8dc 	bl	1f7e4 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1c62c:	f7ff ffc4 	bl	1c5b8 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1c630:	fab0 f380 	clz	r3, r0
   1c634:	4605      	mov	r5, r0
   1c636:	095b      	lsrs	r3, r3, #5
   1c638:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1c63a:	6920      	ldr	r0, [r4, #16]
   1c63c:	3018      	adds	r0, #24
   1c63e:	f00d ff84 	bl	2a54a <k_sem_give>
}
   1c642:	4628      	mov	r0, r5
   1c644:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1c646:	2500      	movs	r5, #0
   1c648:	e7f7      	b.n	1c63a <qspi_device_init+0x32>
   1c64a:	bf00      	nop
   1c64c:	2002239a 	.word	0x2002239a
   1c650:	0002a54f 	.word	0x0002a54f

0001c654 <qspi_device_uninit>:
{
   1c654:	b538      	push	{r3, r4, r5, lr}
   1c656:	4604      	mov	r4, r0
	qspi_lock(dev);
   1c658:	6900      	ldr	r0, [r0, #16]
   1c65a:	f00d ff7e 	bl	2a55a <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1c65e:	6925      	ldr	r5, [r4, #16]
   1c660:	2200      	movs	r2, #0
   1c662:	2300      	movs	r3, #0
   1c664:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c668:	f005 fb56 	bl	21d18 <z_impl_k_sem_take>
	if (last) {
   1c66c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1c66e:	b94b      	cbnz	r3, 1c684 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1c670:	4d0a      	ldr	r5, [pc, #40]	; (1c69c <qspi_device_uninit+0x48>)
   1c672:	f003 fa0b 	bl	1fa8c <nrfx_qspi_mem_busy_check>
   1c676:	42a8      	cmp	r0, r5
   1c678:	d10a      	bne.n	1c690 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1c67a:	f003 fa29 	bl	1fad0 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1c67e:	2200      	movs	r2, #0
   1c680:	4b07      	ldr	r3, [pc, #28]	; (1c6a0 <qspi_device_uninit+0x4c>)
   1c682:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1c684:	6920      	ldr	r0, [r4, #16]
}
   1c686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1c68a:	3018      	adds	r0, #24
   1c68c:	f00d bf5d 	b.w	2a54a <k_sem_give>
	return z_impl_k_sleep(timeout);
   1c690:	2100      	movs	r1, #0
   1c692:	f240 6067 	movw	r0, #1639	; 0x667
   1c696:	f007 f9ef 	bl	23a78 <z_impl_k_sleep>
   1c69a:	e7ea      	b.n	1c672 <qspi_device_uninit+0x1e>
   1c69c:	0bad0000 	.word	0x0bad0000
   1c6a0:	2002239a 	.word	0x2002239a

0001c6a4 <qspi_send_cmd>:
{
   1c6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6a6:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   1c6a8:	684c      	ldr	r4, [r1, #4]
{
   1c6aa:	4605      	mov	r5, r0
   1c6ac:	af00      	add	r7, sp, #0
	if (cmd->tx_buf) {
   1c6ae:	b174      	cbz	r4, 1c6ce <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   1c6b0:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1c6b4:	6888      	ldr	r0, [r1, #8]
   1c6b6:	b310      	cbz	r0, 1c6fe <qspi_send_cmd+0x5a>
		rx_len = cmd->rx_buf->len;
   1c6b8:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1c6bc:	b300      	cbz	r0, 1c700 <qspi_send_cmd+0x5c>
   1c6be:	b1fb      	cbz	r3, 1c700 <qspi_send_cmd+0x5c>
		if (rx_len != tx_len) {
   1c6c0:	4298      	cmp	r0, r3
   1c6c2:	d006      	beq.n	1c6d2 <qspi_send_cmd+0x2e>
		return -EINVAL;
   1c6c4:	f06f 0015 	mvn.w	r0, #21
}
   1c6c8:	370c      	adds	r7, #12
   1c6ca:	46bd      	mov	sp, r7
   1c6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1c6ce:	4623      	mov	r3, r4
   1c6d0:	e7f0      	b.n	1c6b4 <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   1c6d2:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1c6d4:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1c6d6:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1c6d8:	d915      	bls.n	1c706 <qspi_send_cmd+0x62>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1c6da:	466c      	mov	r4, sp
   1c6dc:	b088      	sub	sp, #32
   1c6de:	466a      	mov	r2, sp
   1c6e0:	61d3      	str	r3, [r2, #28]
   1c6e2:	2304      	movs	r3, #4
   1c6e4:	4814      	ldr	r0, [pc, #80]	; (1c738 <qspi_send_cmd+0x94>)
   1c6e6:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c6ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1c6ee:	2300      	movs	r3, #0
   1c6f0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1c6f4:	4811      	ldr	r0, [pc, #68]	; (1c73c <qspi_send_cmd+0x98>)
   1c6f6:	f7f2 f92d 	bl	e954 <z_impl_z_log_msg_static_create>
   1c6fa:	46a5      	mov	sp, r4
		return -EINVAL;
   1c6fc:	e7e2      	b.n	1c6c4 <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   1c6fe:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1c700:	3301      	adds	r3, #1
   1c702:	4403      	add	r3, r0
   1c704:	e7e6      	b.n	1c6d4 <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1c706:	707b      	strb	r3, [r7, #1]
   1c708:	f240 1301 	movw	r3, #257	; 0x101
   1c70c:	807b      	strh	r3, [r7, #2]
   1c70e:	2300      	movs	r3, #0
	qspi_lock(dev);
   1c710:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1c712:	713b      	strb	r3, [r7, #4]
   1c714:	7039      	strb	r1, [r7, #0]
   1c716:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   1c718:	f00d ff1f 	bl	2a55a <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1c71c:	4621      	mov	r1, r4
   1c71e:	4632      	mov	r2, r6
   1c720:	4638      	mov	r0, r7
   1c722:	f003 f951 	bl	1f9c8 <nrfx_qspi_cinstr_xfer>
   1c726:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1c728:	6928      	ldr	r0, [r5, #16]
   1c72a:	3018      	adds	r0, #24
   1c72c:	f00d ff0d 	bl	2a54a <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1c730:	4620      	mov	r0, r4
   1c732:	f7ff ff41 	bl	1c5b8 <qspi_get_zephyr_ret_code>
   1c736:	e7c7      	b.n	1c6c8 <qspi_send_cmd+0x24>
   1c738:	000322cc 	.word	0x000322cc
   1c73c:	0002cda0 	.word	0x0002cda0

0001c740 <qspi_nor_init>:
{
   1c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1c744:	2202      	movs	r2, #2
   1c746:	b086      	sub	sp, #24
   1c748:	4b6a      	ldr	r3, [pc, #424]	; (1c8f4 <qspi_nor_init+0x1b4>)
   1c74a:	af00      	add	r7, sp, #0
   1c74c:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c750:	6843      	ldr	r3, [r0, #4]
{
   1c752:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c754:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1c756:	2100      	movs	r1, #0
   1c758:	4630      	mov	r0, r6
   1c75a:	f107 020c 	add.w	r2, r7, #12
   1c75e:	f00e f9f1 	bl	2ab44 <pinctrl_lookup_state>
	if (ret < 0) {
   1c762:	1e04      	subs	r4, r0, #0
   1c764:	db3a      	blt.n	1c7dc <qspi_nor_init+0x9c>
	return pinctrl_apply_state_direct(config, state);
   1c766:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c768:	6832      	ldr	r2, [r6, #0]
   1c76a:	7919      	ldrb	r1, [r3, #4]
   1c76c:	6818      	ldr	r0, [r3, #0]
   1c76e:	f00e f9fc 	bl	2ab6a <pinctrl_configure_pins>
	if (ret < 0) {
   1c772:	1e04      	subs	r4, r0, #0
   1c774:	db32      	blt.n	1c7dc <qspi_nor_init+0x9c>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1c776:	2200      	movs	r2, #0
   1c778:	2101      	movs	r1, #1
   1c77a:	202b      	movs	r0, #43	; 0x2b
   1c77c:	f7f4 f9e0 	bl	10b40 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1c780:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1c782:	692a      	ldr	r2, [r5, #16]
   1c784:	4630      	mov	r0, r6
   1c786:	495c      	ldr	r1, [pc, #368]	; (1c8f8 <qspi_nor_init+0x1b8>)
   1c788:	f003 f82c 	bl	1f7e4 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1c78c:	f7ff ff14 	bl	1c5b8 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1c790:	1e04      	subs	r4, r0, #0
   1c792:	db23      	blt.n	1c7dc <qspi_nor_init+0x9c>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1c794:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1c796:	3b02      	subs	r3, #2
   1c798:	2b01      	cmp	r3, #1
   1c79a:	d924      	bls.n	1c7e6 <qspi_nor_init+0xa6>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1c79c:	f896 800a 	ldrb.w	r8, [r6, #10]
   1c7a0:	f1a8 0803 	sub.w	r8, r8, #3
   1c7a4:	f1b8 0f01 	cmp.w	r8, #1
   1c7a8:	bf8c      	ite	hi
   1c7aa:	f04f 0800 	movhi.w	r8, #0
   1c7ae:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1c7b2:	4628      	mov	r0, r5
   1c7b4:	f00d fef3 	bl	2a59e <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1c7b8:	1e04      	subs	r4, r0, #0
   1c7ba:	da17      	bge.n	1c7ec <qspi_nor_init+0xac>
			LOG_ERR("RDSR failed: %d", ret);
   1c7bc:	466d      	mov	r5, sp
   1c7be:	b088      	sub	sp, #32
   1c7c0:	466a      	mov	r2, sp
   1c7c2:	4b4e      	ldr	r3, [pc, #312]	; (1c8fc <qspi_nor_init+0x1bc>)
   1c7c4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c7c8:	2303      	movs	r3, #3
   1c7ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7ce:	2300      	movs	r3, #0
   1c7d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c7d4:	484a      	ldr	r0, [pc, #296]	; (1c900 <qspi_nor_init+0x1c0>)
   1c7d6:	f7f2 f8bd 	bl	e954 <z_impl_z_log_msg_static_create>
   1c7da:	46ad      	mov	sp, r5
}
   1c7dc:	4620      	mov	r0, r4
   1c7de:	3718      	adds	r7, #24
   1c7e0:	46bd      	mov	sp, r7
   1c7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1c7e6:	f04f 0801 	mov.w	r8, #1
   1c7ea:	e7e2      	b.n	1c7b2 <qspi_nor_init+0x72>
		uint8_t sr = (uint8_t)ret;
   1c7ec:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1c7ee:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1c7f2:	45a0      	cmp	r8, r4
   1c7f4:	f107 0604 	add.w	r6, r7, #4
   1c7f8:	d031      	beq.n	1c85e <qspi_nor_init+0x11e>
	uint8_t sr_array[2] = {0};
   1c7fa:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1c7fc:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1c800:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   1c802:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   1c804:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1c806:	4628      	mov	r0, r5
	struct qspi_cmd cmd = {
   1c808:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   1c80c:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   1c80e:	617b      	str	r3, [r7, #20]
   1c810:	733a      	strb	r2, [r7, #12]
   1c812:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1c814:	f107 010c 	add.w	r1, r7, #12
   1c818:	f7ff ff44 	bl	1c6a4 <qspi_send_cmd>
	if (ret == 0) {
   1c81c:	1e04      	subs	r4, r0, #0
   1c81e:	d017      	beq.n	1c850 <qspi_nor_init+0x110>
		if (ret < 0) {
   1c820:	dadc      	bge.n	1c7dc <qspi_nor_init+0x9c>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1c822:	4a38      	ldr	r2, [pc, #224]	; (1c904 <qspi_nor_init+0x1c4>)
   1c824:	4b38      	ldr	r3, [pc, #224]	; (1c908 <qspi_nor_init+0x1c8>)
   1c826:	466d      	mov	r5, sp
   1c828:	b08a      	sub	sp, #40	; 0x28
   1c82a:	f1b8 0f00 	cmp.w	r8, #0
   1c82e:	bf18      	it	ne
   1c830:	4613      	movne	r3, r2
   1c832:	466a      	mov	r2, sp
   1c834:	4935      	ldr	r1, [pc, #212]	; (1c90c <qspi_nor_init+0x1cc>)
   1c836:	61d4      	str	r4, [r2, #28]
   1c838:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c83c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c840:	8413      	strh	r3, [r2, #32]
   1c842:	4b33      	ldr	r3, [pc, #204]	; (1c910 <qspi_nor_init+0x1d0>)
   1c844:	f842 3f10 	str.w	r3, [r2, #16]!
   1c848:	2300      	movs	r3, #0
   1c84a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c84e:	e7c1      	b.n	1c7d4 <qspi_nor_init+0x94>
		ret = qspi_rdsr(dev, 1);
   1c850:	4628      	mov	r0, r5
   1c852:	f00d fea4 	bl	2a59e <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1c856:	1e04      	subs	r4, r0, #0
   1c858:	dbe3      	blt.n	1c822 <qspi_nor_init+0xe2>
   1c85a:	07e3      	lsls	r3, r4, #31
   1c85c:	d4f8      	bmi.n	1c850 <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
   1c85e:	4628      	mov	r0, r5
   1c860:	f7ff fef8 	bl	1c654 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1c864:	2403      	movs	r4, #3
   1c866:	2300      	movs	r3, #0
   1c868:	e9c7 4302 	strd	r4, r3, [r7, #8]
   1c86c:	613b      	str	r3, [r7, #16]
   1c86e:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1c870:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1c872:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   1c874:	733b      	strb	r3, [r7, #12]
   1c876:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   1c878:	f7ff fec6 	bl	1c608 <qspi_device_init>
	if (ret == 0) {
   1c87c:	4602      	mov	r2, r0
   1c87e:	b128      	cbz	r0, 1c88c <qspi_nor_init+0x14c>
	qspi_device_uninit(dev);
   1c880:	4628      	mov	r0, r5
   1c882:	f7ff fee7 	bl	1c654 <qspi_device_uninit>
		return -ENODEV;
   1c886:	f06f 0412 	mvn.w	r4, #18
   1c88a:	e7a7      	b.n	1c7dc <qspi_nor_init+0x9c>
		ret = qspi_send_cmd(dev, &cmd, false);
   1c88c:	4628      	mov	r0, r5
   1c88e:	f107 010c 	add.w	r1, r7, #12
   1c892:	f7ff ff07 	bl	1c6a4 <qspi_send_cmd>
   1c896:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   1c898:	4628      	mov	r0, r5
   1c89a:	f7ff fedb 	bl	1c654 <qspi_device_uninit>
	if (ret != 0) {
   1c89e:	2e00      	cmp	r6, #0
   1c8a0:	d1f1      	bne.n	1c886 <qspi_nor_init+0x146>
	const struct qspi_nor_config *qnc = dev->config;
   1c8a2:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1c8a4:	4622      	mov	r2, r4
   1c8a6:	4639      	mov	r1, r7
   1c8a8:	f105 001c 	add.w	r0, r5, #28
   1c8ac:	f00f fa76 	bl	2bd9c <memcmp>
   1c8b0:	4604      	mov	r4, r0
   1c8b2:	2800      	cmp	r0, #0
   1c8b4:	d092      	beq.n	1c7dc <qspi_nor_init+0x9c>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1c8b6:	466c      	mov	r4, sp
   1c8b8:	b08c      	sub	sp, #48	; 0x30
   1c8ba:	466a      	mov	r2, sp
   1c8bc:	f897 8000 	ldrb.w	r8, [r7]
   1c8c0:	f897 e001 	ldrb.w	lr, [r7, #1]
   1c8c4:	f897 c002 	ldrb.w	ip, [r7, #2]
   1c8c8:	7f28      	ldrb	r0, [r5, #28]
   1c8ca:	7f69      	ldrb	r1, [r5, #29]
   1c8cc:	7fab      	ldrb	r3, [r5, #30]
   1c8ce:	62d3      	str	r3, [r2, #44]	; 0x2c
   1c8d0:	2308      	movs	r3, #8
   1c8d2:	4d10      	ldr	r5, [pc, #64]	; (1c914 <qspi_nor_init+0x1d4>)
   1c8d4:	e9c2 ec07 	strd	lr, ip, [r2, #28]
   1c8d8:	e9c2 5805 	strd	r5, r8, [r2, #20]
   1c8dc:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   1c8e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8e4:	f244 0140 	movw	r1, #16448	; 0x4040
   1c8e8:	4633      	mov	r3, r6
   1c8ea:	4805      	ldr	r0, [pc, #20]	; (1c900 <qspi_nor_init+0x1c0>)
   1c8ec:	f7f2 f832 	bl	e954 <z_impl_z_log_msg_static_create>
   1c8f0:	46a5      	mov	sp, r4
		return -ENODEV;
   1c8f2:	e7c8      	b.n	1c886 <qspi_nor_init+0x146>
   1c8f4:	40005000 	.word	0x40005000
   1c8f8:	0002a54f 	.word	0x0002a54f
   1c8fc:	000322f5 	.word	0x000322f5
   1c900:	0002cda0 	.word	0x0002cda0
   1c904:	00030d2f 	.word	0x00030d2f
   1c908:	000322ef 	.word	0x000322ef
   1c90c:	00032305 	.word	0x00032305
   1c910:	01000004 	.word	0x01000004
   1c914:	00032316 	.word	0x00032316

0001c918 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   1c918:	b580      	push	{r7, lr}
   1c91a:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   1c91c:	b088      	sub	sp, #32
   1c91e:	466a      	mov	r2, sp
   1c920:	4b08      	ldr	r3, [pc, #32]	; (1c944 <qspi_nor_erase.part.0+0x2c>)
   1c922:	61d1      	str	r1, [r2, #28]
   1c924:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c928:	2304      	movs	r3, #4
   1c92a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c92e:	2300      	movs	r3, #0
   1c930:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c934:	4804      	ldr	r0, [pc, #16]	; (1c948 <qspi_nor_erase.part.0+0x30>)
   1c936:	f7f2 f80d 	bl	e954 <z_impl_z_log_msg_static_create>
}
   1c93a:	f06f 0015 	mvn.w	r0, #21
   1c93e:	46bd      	mov	sp, r7
   1c940:	bd80      	pop	{r7, pc}
   1c942:	bf00      	nop
   1c944:	00032348 	.word	0x00032348
   1c948:	0002cda0 	.word	0x0002cda0

0001c94c <qspi_nor_erase>:
{
   1c94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1c950:	1e0b      	subs	r3, r1, #0
{
   1c952:	4606      	mov	r6, r0
   1c954:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1c956:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1c95a:	af00      	add	r7, sp, #0
	if (addr < 0 ||
   1c95c:	db05      	blt.n	1c96a <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   1c95e:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   1c960:	f8da 2018 	ldr.w	r2, [sl, #24]
	    (addr + size) > params->size) {
   1c964:	4699      	mov	r9, r3
	if (addr < 0 ||
   1c966:	4291      	cmp	r1, r2
   1c968:	d908      	bls.n	1c97c <qspi_nor_erase+0x30>
   1c96a:	4629      	mov	r1, r5
   1c96c:	4618      	mov	r0, r3
   1c96e:	f7ff ffd3 	bl	1c918 <qspi_nor_erase.part.0>
   1c972:	4604      	mov	r4, r0
}
   1c974:	4620      	mov	r0, r4
   1c976:	46bd      	mov	sp, r7
   1c978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1c97c:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1c980:	2d00      	cmp	r5, #0
   1c982:	f000 8081 	beq.w	1ca88 <qspi_nor_erase+0x13c>
   1c986:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1c98a:	4313      	orrs	r3, r2
   1c98c:	d17c      	bne.n	1ca88 <qspi_nor_erase+0x13c>
	rv = qspi_device_init(dev);
   1c98e:	f7ff fe3b 	bl	1c608 <qspi_device_init>
	if (rv != 0) {
   1c992:	4604      	mov	r4, r0
   1c994:	bb60      	cbnz	r0, 1c9f0 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   1c996:	6930      	ldr	r0, [r6, #16]
   1c998:	f00d fde6 	bl	2a568 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1c99c:	4621      	mov	r1, r4
   1c99e:	4630      	mov	r0, r6
   1c9a0:	f00d fde8 	bl	2a574 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1c9a4:	4604      	mov	r4, r0
   1c9a6:	bb00      	cbnz	r0, 1c9ea <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   1c9a8:	6930      	ldr	r0, [r6, #16]
   1c9aa:	f00d fdd6 	bl	2a55a <qspi_lock.isra.0>
		if (size == params->size) {
   1c9ae:	f8da 3018 	ldr.w	r3, [sl, #24]
   1c9b2:	42ab      	cmp	r3, r5
   1c9b4:	d120      	bne.n	1c9f8 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   1c9b6:	f00e fa8e 	bl	2aed6 <nrfx_qspi_chip_erase>
   1c9ba:	46ab      	mov	fp, r5
   1c9bc:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1c9be:	4641      	mov	r1, r8
   1c9c0:	6930      	ldr	r0, [r6, #16]
   1c9c2:	f7ff fe13 	bl	1c5ec <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1c9c6:	4b32      	ldr	r3, [pc, #200]	; (1ca90 <qspi_nor_erase+0x144>)
   1c9c8:	4598      	cmp	r8, r3
   1c9ca:	d147      	bne.n	1ca5c <qspi_nor_erase+0x110>
	while (size > 0) {
   1c9cc:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1c9d0:	44d9      	add	r9, fp
	while (size > 0) {
   1c9d2:	d1ec      	bne.n	1c9ae <qspi_nor_erase+0x62>
	k_sem_give(&dev_data->sem);
   1c9d4:	6930      	ldr	r0, [r6, #16]
   1c9d6:	3018      	adds	r0, #24
   1c9d8:	f00d fdb7 	bl	2a54a <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1c9dc:	2101      	movs	r1, #1
   1c9de:	4630      	mov	r0, r6
   1c9e0:	f00d fdc8 	bl	2a574 <qspi_nor_write_protection_set>
   1c9e4:	2c00      	cmp	r4, #0
   1c9e6:	bf08      	it	eq
   1c9e8:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1c9ea:	6930      	ldr	r0, [r6, #16]
   1c9ec:	f00d fdad 	bl	2a54a <k_sem_give>
	qspi_device_uninit(dev);
   1c9f0:	4630      	mov	r0, r6
   1c9f2:	f7ff fe2f 	bl	1c654 <qspi_device_uninit>
	return rv;
   1c9f6:	e7bd      	b.n	1c974 <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1c9f8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1c9fc:	d30a      	bcc.n	1ca14 <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1c9fe:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1ca02:	b953      	cbnz	r3, 1ca1a <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1ca04:	4649      	mov	r1, r9
   1ca06:	2001      	movs	r0, #1
   1ca08:	f003 f8c4 	bl	1fb94 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1ca0c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1ca10:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   1ca12:	e7d4      	b.n	1c9be <qspi_nor_erase+0x72>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1ca14:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ca18:	d309      	bcc.n	1ca2e <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1ca1a:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1ca1e:	b930      	cbnz	r0, 1ca2e <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1ca20:	4649      	mov	r1, r9
   1ca22:	f003 f8b7 	bl	1fb94 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1ca26:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1ca2a:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   1ca2c:	e7c7      	b.n	1c9be <qspi_nor_erase+0x72>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1ca2e:	466c      	mov	r4, sp
   1ca30:	b088      	sub	sp, #32
   1ca32:	466a      	mov	r2, sp
   1ca34:	4b17      	ldr	r3, [pc, #92]	; (1ca94 <qspi_nor_erase+0x148>)
   1ca36:	61d5      	str	r5, [r2, #28]
   1ca38:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1ca3c:	2304      	movs	r3, #4
   1ca3e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca42:	2300      	movs	r3, #0
   1ca44:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ca48:	4813      	ldr	r0, [pc, #76]	; (1ca98 <qspi_nor_erase+0x14c>)
   1ca4a:	f7f1 ff83 	bl	e954 <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   1ca4e:	4913      	ldr	r1, [pc, #76]	; (1ca9c <qspi_nor_erase+0x150>)
   1ca50:	46a5      	mov	sp, r4
   1ca52:	6930      	ldr	r0, [r6, #16]
   1ca54:	f7ff fdca 	bl	1c5ec <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1ca58:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1ca9c <qspi_nor_erase+0x150>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1ca5c:	466c      	mov	r4, sp
   1ca5e:	b088      	sub	sp, #32
   1ca60:	466a      	mov	r2, sp
   1ca62:	4b0f      	ldr	r3, [pc, #60]	; (1caa0 <qspi_nor_erase+0x154>)
   1ca64:	61d5      	str	r5, [r2, #28]
   1ca66:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1ca6a:	2304      	movs	r3, #4
   1ca6c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca70:	2300      	movs	r3, #0
   1ca72:	4809      	ldr	r0, [pc, #36]	; (1ca98 <qspi_nor_erase+0x14c>)
   1ca74:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ca78:	f7f1 ff6c 	bl	e954 <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   1ca7c:	4640      	mov	r0, r8
   1ca7e:	46a5      	mov	sp, r4
   1ca80:	f7ff fd9a 	bl	1c5b8 <qspi_get_zephyr_ret_code>
   1ca84:	4604      	mov	r4, r0
			break;
   1ca86:	e7a5      	b.n	1c9d4 <qspi_nor_erase+0x88>
		return -EINVAL;
   1ca88:	f06f 0415 	mvn.w	r4, #21
   1ca8c:	e772      	b.n	1c974 <qspi_nor_erase+0x28>
   1ca8e:	bf00      	nop
   1ca90:	0bad0000 	.word	0x0bad0000
   1ca94:	00032392 	.word	0x00032392
   1ca98:	0002cda0 	.word	0x0002cda0
   1ca9c:	0bad0004 	.word	0x0bad0004
   1caa0:	000323b0 	.word	0x000323b0

0001caa4 <qspi_nor_write>:
{
   1caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caa8:	b083      	sub	sp, #12
   1caaa:	4605      	mov	r5, r0
   1caac:	4688      	mov	r8, r1
   1caae:	461e      	mov	r6, r3
	if (!src) {
   1cab0:	4691      	mov	r9, r2
{
   1cab2:	af00      	add	r7, sp, #0
	if (!src) {
   1cab4:	b30a      	cbz	r2, 1cafa <qspi_nor_write+0x56>
	if ((size == 0)
   1cab6:	b303      	cbz	r3, 1cafa <qspi_nor_write+0x56>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1cab8:	2b04      	cmp	r3, #4
   1caba:	d901      	bls.n	1cac0 <qspi_nor_write+0x1c>
   1cabc:	07b3      	lsls	r3, r6, #30
   1cabe:	d11c      	bne.n	1cafa <qspi_nor_write+0x56>
	if ((addr % 4U) != 0) {
   1cac0:	f018 0f03 	tst.w	r8, #3
   1cac4:	d119      	bne.n	1cafa <qspi_nor_write+0x56>
	if (addr < 0 ||
   1cac6:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   1caca:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1cacc:	db04      	blt.n	1cad8 <qspi_nor_write+0x34>
   1cace:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1cad0:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   1cad4:	4293      	cmp	r3, r2
   1cad6:	d917      	bls.n	1cb08 <qspi_nor_write+0x64>
		LOG_ERR("write error: address or size "
   1cad8:	466c      	mov	r4, sp
   1cada:	b088      	sub	sp, #32
   1cadc:	466a      	mov	r2, sp
   1cade:	4b42      	ldr	r3, [pc, #264]	; (1cbe8 <qspi_nor_write+0x144>)
   1cae0:	61d6      	str	r6, [r2, #28]
   1cae2:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1cae6:	2304      	movs	r3, #4
   1cae8:	f842 3f10 	str.w	r3, [r2, #16]!
   1caec:	2300      	movs	r3, #0
   1caee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1caf2:	483e      	ldr	r0, [pc, #248]	; (1cbec <qspi_nor_write+0x148>)
   1caf4:	f7f1 ff2e 	bl	e954 <z_impl_z_log_msg_static_create>
   1caf8:	46a5      	mov	sp, r4
		return -EINVAL;
   1cafa:	f06f 0415 	mvn.w	r4, #21
}
   1cafe:	4620      	mov	r0, r4
   1cb00:	370c      	adds	r7, #12
   1cb02:	46bd      	mov	sp, r7
   1cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1cb08:	4628      	mov	r0, r5
   1cb0a:	f7ff fd7d 	bl	1c608 <qspi_device_init>
	if (rc != 0) {
   1cb0e:	4604      	mov	r4, r0
   1cb10:	2800      	cmp	r0, #0
   1cb12:	d160      	bne.n	1cbd6 <qspi_nor_write+0x132>
	qspi_trans_lock(dev);
   1cb14:	6928      	ldr	r0, [r5, #16]
   1cb16:	f00d fd27 	bl	2a568 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1cb1a:	4621      	mov	r1, r4
   1cb1c:	4628      	mov	r0, r5
   1cb1e:	f00d fd29 	bl	2a574 <qspi_nor_write_protection_set>
   1cb22:	4604      	mov	r4, r0
	qspi_lock(dev);
   1cb24:	6928      	ldr	r0, [r5, #16]
   1cb26:	f00d fd18 	bl	2a55a <qspi_lock.isra.0>
	if (!res) {
   1cb2a:	2c00      	cmp	r4, #0
   1cb2c:	d140      	bne.n	1cbb0 <qspi_nor_write+0x10c>
		if (size < 4U) {
   1cb2e:	2e03      	cmp	r6, #3
   1cb30:	d81c      	bhi.n	1cb6c <qspi_nor_write+0xc8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1cb32:	2104      	movs	r1, #4
   1cb34:	4642      	mov	r2, r8
   1cb36:	1878      	adds	r0, r7, r1
   1cb38:	f00e f9ca 	bl	2aed0 <nrfx_qspi_read>
   1cb3c:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1cb3e:	4601      	mov	r1, r0
   1cb40:	6928      	ldr	r0, [r5, #16]
   1cb42:	f7ff fd53 	bl	1c5ec <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1cb46:	4b2a      	ldr	r3, [pc, #168]	; (1cbf0 <qspi_nor_write+0x14c>)
   1cb48:	429c      	cmp	r4, r3
   1cb4a:	d131      	bne.n	1cbb0 <qspi_nor_write+0x10c>
		memcpy(buf, sptr, slen);
   1cb4c:	4632      	mov	r2, r6
   1cb4e:	4649      	mov	r1, r9
   1cb50:	1d38      	adds	r0, r7, #4
   1cb52:	f00f f933 	bl	2bdbc <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1cb56:	2104      	movs	r1, #4
   1cb58:	4642      	mov	r2, r8
   1cb5a:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   1cb5c:	f00e f9b5 	bl	2aeca <nrfx_qspi_write>
   1cb60:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1cb62:	4601      	mov	r1, r0
   1cb64:	6928      	ldr	r0, [r5, #16]
   1cb66:	f7ff fd41 	bl	1c5ec <qspi_wait_for_completion.isra.0>
   1cb6a:	e021      	b.n	1cbb0 <qspi_nor_write+0x10c>
   1cb6c:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1cb70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cb74:	d033      	beq.n	1cbde <qspi_nor_write+0x13a>
			if (res == NRFX_SUCCESS) {
   1cb76:	f8df b078 	ldr.w	fp, [pc, #120]	; 1cbf0 <qspi_nor_write+0x14c>
			size_t len = MIN(slen, sizeof(buf));
   1cb7a:	2e04      	cmp	r6, #4
   1cb7c:	46b2      	mov	sl, r6
   1cb7e:	bf28      	it	cs
   1cb80:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   1cb84:	4649      	mov	r1, r9
   1cb86:	4652      	mov	r2, sl
   1cb88:	1d38      	adds	r0, r7, #4
   1cb8a:	f00f f917 	bl	2bdbc <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1cb8e:	2104      	movs	r1, #4
   1cb90:	4642      	mov	r2, r8
   1cb92:	1878      	adds	r0, r7, r1
   1cb94:	f00e f999 	bl	2aeca <nrfx_qspi_write>
   1cb98:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1cb9a:	4601      	mov	r1, r0
   1cb9c:	6928      	ldr	r0, [r5, #16]
   1cb9e:	f7ff fd25 	bl	1c5ec <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1cba2:	455c      	cmp	r4, fp
   1cba4:	d104      	bne.n	1cbb0 <qspi_nor_write+0x10c>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1cba6:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   1cbaa:	44d1      	add	r9, sl
				addr += len;
   1cbac:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1cbae:	d1e4      	bne.n	1cb7a <qspi_nor_write+0xd6>
	k_sem_give(&dev_data->sem);
   1cbb0:	6928      	ldr	r0, [r5, #16]
   1cbb2:	3018      	adds	r0, #24
   1cbb4:	f00d fcc9 	bl	2a54a <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1cbb8:	2101      	movs	r1, #1
   1cbba:	4628      	mov	r0, r5
   1cbbc:	f00d fcda 	bl	2a574 <qspi_nor_write_protection_set>
   1cbc0:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1cbc2:	6928      	ldr	r0, [r5, #16]
   1cbc4:	f00d fcc1 	bl	2a54a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1cbc8:	2c00      	cmp	r4, #0
   1cbca:	bf14      	ite	ne
   1cbcc:	4620      	movne	r0, r4
   1cbce:	4630      	moveq	r0, r6
   1cbd0:	f7ff fcf2 	bl	1c5b8 <qspi_get_zephyr_ret_code>
   1cbd4:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1cbd6:	4628      	mov	r0, r5
   1cbd8:	f7ff fd3c 	bl	1c654 <qspi_device_uninit>
	return rc;
   1cbdc:	e78f      	b.n	1cafe <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
   1cbde:	4642      	mov	r2, r8
   1cbe0:	4631      	mov	r1, r6
   1cbe2:	4648      	mov	r0, r9
   1cbe4:	e7ba      	b.n	1cb5c <qspi_nor_write+0xb8>
   1cbe6:	bf00      	nop
   1cbe8:	000323ce 	.word	0x000323ce
   1cbec:	0002cda0 	.word	0x0002cda0
   1cbf0:	0bad0000 	.word	0x0bad0000

0001cbf4 <qspi_nor_read>:
{
   1cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbf8:	b085      	sub	sp, #20
   1cbfa:	4681      	mov	r9, r0
   1cbfc:	460e      	mov	r6, r1
   1cbfe:	461c      	mov	r4, r3
	if (!dest) {
   1cc00:	4690      	mov	r8, r2
{
   1cc02:	af00      	add	r7, sp, #0
	if (!dest) {
   1cc04:	b1d2      	cbz	r2, 1cc3c <qspi_nor_read+0x48>
	if (!size) {
   1cc06:	2b00      	cmp	r3, #0
   1cc08:	f000 80ac 	beq.w	1cd64 <qspi_nor_read+0x170>
	if (addr < 0 ||
   1cc0c:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1cc0e:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1cc10:	db03      	blt.n	1cc1a <qspi_nor_read+0x26>
   1cc12:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1cc14:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1cc16:	4293      	cmp	r3, r2
   1cc18:	d917      	bls.n	1cc4a <qspi_nor_read+0x56>
		LOG_ERR("read error: address or size "
   1cc1a:	466d      	mov	r5, sp
   1cc1c:	b088      	sub	sp, #32
   1cc1e:	466a      	mov	r2, sp
   1cc20:	4b51      	ldr	r3, [pc, #324]	; (1cd68 <qspi_nor_read+0x174>)
   1cc22:	61d4      	str	r4, [r2, #28]
   1cc24:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1cc28:	2304      	movs	r3, #4
   1cc2a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc2e:	2300      	movs	r3, #0
   1cc30:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cc34:	484d      	ldr	r0, [pc, #308]	; (1cd6c <qspi_nor_read+0x178>)
   1cc36:	f7f1 fe8d 	bl	e954 <z_impl_z_log_msg_static_create>
   1cc3a:	46ad      	mov	sp, r5
		return -EINVAL;
   1cc3c:	f06f 0515 	mvn.w	r5, #21
}
   1cc40:	4628      	mov	r0, r5
   1cc42:	3714      	adds	r7, #20
   1cc44:	46bd      	mov	sp, r7
   1cc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1cc4a:	f7ff fcdd 	bl	1c608 <qspi_device_init>
	if (rc != 0) {
   1cc4e:	4605      	mov	r5, r0
   1cc50:	2800      	cmp	r0, #0
   1cc52:	f040 8081 	bne.w	1cd58 <qspi_nor_read+0x164>
	qspi_lock(dev);
   1cc56:	4275      	negs	r5, r6
   1cc58:	f005 0503 	and.w	r5, r5, #3
   1cc5c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1cc60:	f00d fc7b 	bl	2a55a <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1cc64:	42a5      	cmp	r5, r4
   1cc66:	bf28      	it	cs
   1cc68:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1cc6a:	f1d8 0200 	rsbs	r2, r8, #0
   1cc6e:	f002 0203 	and.w	r2, r2, #3
   1cc72:	f008 0303 	and.w	r3, r8, #3
   1cc76:	bf58      	it	pl
   1cc78:	4253      	negpl	r3, r2
   1cc7a:	425b      	negs	r3, r3
   1cc7c:	f003 0303 	and.w	r3, r3, #3
   1cc80:	42a3      	cmp	r3, r4
   1cc82:	bf28      	it	cs
   1cc84:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1cc86:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1cc88:	1ae4      	subs	r4, r4, r3
   1cc8a:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1cc8e:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   1cc92:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1cc94:	bfc8      	it	gt
   1cc96:	46a2      	movgt	sl, r4
   1cc98:	f002 0b03 	and.w	fp, r2, #3
   1cc9c:	bfc8      	it	gt
   1cc9e:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   1cca2:	f1ba 0f00 	cmp.w	sl, #0
   1cca6:	d01a      	beq.n	1ccde <qspi_nor_read+0xea>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1cca8:	eb08 0203 	add.w	r2, r8, r3
   1ccac:	e9c7 3200 	strd	r3, r2, [r7]
   1ccb0:	4651      	mov	r1, sl
   1ccb2:	1972      	adds	r2, r6, r5
   1ccb4:	6878      	ldr	r0, [r7, #4]
   1ccb6:	f00e f90b 	bl	2aed0 <nrfx_qspi_read>
   1ccba:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ccbc:	4601      	mov	r1, r0
   1ccbe:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ccc2:	f7ff fc93 	bl	1c5ec <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ccc6:	4a2a      	ldr	r2, [pc, #168]	; (1cd70 <qspi_nor_read+0x17c>)
   1ccc8:	4294      	cmp	r4, r2
   1ccca:	d13c      	bne.n	1cd46 <qspi_nor_read+0x152>
		if (flash_prefix != dest_prefix) {
   1cccc:	683b      	ldr	r3, [r7, #0]
   1ccce:	429d      	cmp	r5, r3
   1ccd0:	d005      	beq.n	1ccde <qspi_nor_read+0xea>
__ssp_bos_icheck3(memmove, void *, const void *)
   1ccd2:	4652      	mov	r2, sl
   1ccd4:	6879      	ldr	r1, [r7, #4]
   1ccd6:	eb08 0005 	add.w	r0, r8, r5
   1ccda:	f00f f88f 	bl	2bdfc <memmove>
	if (flash_prefix != 0) {
   1ccde:	b1c5      	cbz	r5, 1cd12 <qspi_nor_read+0x11e>
				     (WORD_SIZE - flash_prefix));
   1cce0:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1cce4:	1af2      	subs	r2, r6, r3
   1cce6:	2104      	movs	r1, #4
   1cce8:	f107 0008 	add.w	r0, r7, #8
   1ccec:	607b      	str	r3, [r7, #4]
   1ccee:	f00e f8ef 	bl	2aed0 <nrfx_qspi_read>
   1ccf2:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ccf4:	4601      	mov	r1, r0
   1ccf6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ccfa:	f7ff fc77 	bl	1c5ec <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ccfe:	4a1c      	ldr	r2, [pc, #112]	; (1cd70 <qspi_nor_read+0x17c>)
   1cd00:	4294      	cmp	r4, r2
   1cd02:	d120      	bne.n	1cd46 <qspi_nor_read+0x152>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1cd04:	687b      	ldr	r3, [r7, #4]
   1cd06:	462a      	mov	r2, r5
   1cd08:	3308      	adds	r3, #8
   1cd0a:	4640      	mov	r0, r8
   1cd0c:	19d9      	adds	r1, r3, r7
   1cd0e:	f00f f855 	bl	2bdbc <memcpy>
	if (flash_suffix != 0) {
   1cd12:	f1bb 0f00 	cmp.w	fp, #0
   1cd16:	d023      	beq.n	1cd60 <qspi_nor_read+0x16c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1cd18:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1cd1a:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1cd1c:	4452      	add	r2, sl
   1cd1e:	1878      	adds	r0, r7, r1
   1cd20:	f00e f8d6 	bl	2aed0 <nrfx_qspi_read>
   1cd24:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1cd26:	4601      	mov	r1, r0
   1cd28:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1cd2c:	f7ff fc5e 	bl	1c5ec <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1cd30:	4b0f      	ldr	r3, [pc, #60]	; (1cd70 <qspi_nor_read+0x17c>)
   1cd32:	429c      	cmp	r4, r3
   1cd34:	d107      	bne.n	1cd46 <qspi_nor_read+0x152>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1cd36:	eb0a 0005 	add.w	r0, sl, r5
   1cd3a:	465a      	mov	r2, fp
   1cd3c:	f107 0108 	add.w	r1, r7, #8
   1cd40:	4440      	add	r0, r8
   1cd42:	f00f f83b 	bl	2bdbc <memcpy>
	k_sem_give(&dev_data->sem);
   1cd46:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1cd4a:	3018      	adds	r0, #24
   1cd4c:	f00d fbfd 	bl	2a54a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1cd50:	4620      	mov	r0, r4
   1cd52:	f7ff fc31 	bl	1c5b8 <qspi_get_zephyr_ret_code>
   1cd56:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1cd58:	4648      	mov	r0, r9
   1cd5a:	f7ff fc7b 	bl	1c654 <qspi_device_uninit>
	return rc;
   1cd5e:	e76f      	b.n	1cc40 <qspi_nor_read+0x4c>
	return res;
   1cd60:	4c03      	ldr	r4, [pc, #12]	; (1cd70 <qspi_nor_read+0x17c>)
   1cd62:	e7f0      	b.n	1cd46 <qspi_nor_read+0x152>
		return 0;
   1cd64:	461d      	mov	r5, r3
   1cd66:	e76b      	b.n	1cc40 <qspi_nor_read+0x4c>
   1cd68:	00032418 	.word	0x00032418
   1cd6c:	0002cda0 	.word	0x0002cda0
   1cd70:	0bad0000 	.word	0x0bad0000

0001cd74 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1cd74:	4b02      	ldr	r3, [pc, #8]	; (1cd80 <flash_nrf_pages_layout+0xc>)
   1cd76:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1cd78:	2301      	movs	r3, #1
   1cd7a:	6013      	str	r3, [r2, #0]
}
   1cd7c:	4770      	bx	lr
   1cd7e:	bf00      	nop
   1cd80:	20021830 	.word	0x20021830

0001cd84 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1cd84:	4800      	ldr	r0, [pc, #0]	; (1cd88 <flash_nrf_get_parameters+0x4>)
   1cd86:	4770      	bx	lr
   1cd88:	0002db5c 	.word	0x0002db5c

0001cd8c <flash_nrf_read>:
{
   1cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd90:	460d      	mov	r5, r1
   1cd92:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1cd94:	4619      	mov	r1, r3
   1cd96:	4628      	mov	r0, r5
{
   1cd98:	461e      	mov	r6, r3
   1cd9a:	4614      	mov	r4, r2
	if (is_regular_addr_valid(addr, len)) {
   1cd9c:	f00d fc1a 	bl	2a5d4 <is_regular_addr_valid>
   1cda0:	4603      	mov	r3, r0
   1cda2:	b9a8      	cbnz	r0, 1cdd0 <flash_nrf_read+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1cda4:	46e8      	mov	r8, sp
   1cda6:	b088      	sub	sp, #32
   1cda8:	466c      	mov	r4, sp
   1cdaa:	4a10      	ldr	r2, [pc, #64]	; (1cdec <flash_nrf_read+0x60>)
   1cdac:	2104      	movs	r1, #4
   1cdae:	e9c4 2505 	strd	r2, r5, [r4, #20]
   1cdb2:	4622      	mov	r2, r4
   1cdb4:	61e6      	str	r6, [r4, #28]
   1cdb6:	f842 1f10 	str.w	r1, [r2, #16]!
   1cdba:	480d      	ldr	r0, [pc, #52]	; (1cdf0 <flash_nrf_read+0x64>)
   1cdbc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cdc0:	f7f1 fdc8 	bl	e954 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1cdc4:	f06f 0015 	mvn.w	r0, #21
   1cdc8:	46c5      	mov	sp, r8
}
   1cdca:	46bd      	mov	sp, r7
   1cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!len) {
   1cdd0:	b156      	cbz	r6, 1cde8 <flash_nrf_read+0x5c>
	if (addr < PM_APP_ADDRESS) {
   1cdd2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1cdd6:	4632      	mov	r2, r6
   1cdd8:	4629      	mov	r1, r5
   1cdda:	4620      	mov	r0, r4
	if (addr < PM_APP_ADDRESS) {
   1cddc:	da02      	bge.n	1cde4 <flash_nrf_read+0x58>
		return soc_secure_mem_read(data, (void *)addr, len);
   1cdde:	f00a f8ca 	bl	26f76 <soc_secure_mem_read>
   1cde2:	e7f2      	b.n	1cdca <flash_nrf_read+0x3e>
   1cde4:	f00e ffea 	bl	2bdbc <memcpy>
		return 0;
   1cde8:	2000      	movs	r0, #0
   1cdea:	e7ee      	b.n	1cdca <flash_nrf_read+0x3e>
   1cdec:	00032472 	.word	0x00032472
   1cdf0:	0002cd38 	.word	0x0002cd38

0001cdf4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1cdf4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cdf6:	2201      	movs	r2, #1
   1cdf8:	4806      	ldr	r0, [pc, #24]	; (1ce14 <nrf_flash_init+0x20>)
   1cdfa:	4611      	mov	r1, r2
   1cdfc:	f00e fe1c 	bl	2ba38 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1ce00:	f00e f85d 	bl	2aebe <nrfx_nvmc_flash_page_count_get>
   1ce04:	4c04      	ldr	r4, [pc, #16]	; (1ce18 <nrf_flash_init+0x24>)
   1ce06:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1ce08:	f00e f856 	bl	2aeb8 <nrfx_nvmc_flash_page_size_get>
   1ce0c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1ce0e:	2000      	movs	r0, #0
   1ce10:	bd10      	pop	{r4, pc}
   1ce12:	bf00      	nop
   1ce14:	20021838 	.word	0x20021838
   1ce18:	20021830 	.word	0x20021830

0001ce1c <flash_nrf_erase>:
{
   1ce1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce20:	af00      	add	r7, sp, #0
   1ce22:	460e      	mov	r6, r1
   1ce24:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ce26:	f00e f847 	bl	2aeb8 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1ce2a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ce2c:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1ce2e:	4630      	mov	r0, r6
   1ce30:	f00d fbd0 	bl	2a5d4 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ce34:	46b0      	mov	r8, r6
	if (is_regular_addr_valid(addr, size)) {
   1ce36:	4603      	mov	r3, r0
   1ce38:	b3b8      	cbz	r0, 1ceaa <flash_nrf_erase+0x8e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ce3a:	fbb6 f3f5 	udiv	r3, r6, r5
   1ce3e:	fb05 6313 	mls	r3, r5, r3, r6
   1ce42:	b923      	cbnz	r3, 1ce4e <flash_nrf_erase+0x32>
   1ce44:	fbb4 f3f5 	udiv	r3, r4, r5
   1ce48:	fb05 4313 	mls	r3, r5, r3, r4
   1ce4c:	b19b      	cbz	r3, 1ce76 <flash_nrf_erase+0x5a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1ce4e:	466d      	mov	r5, sp
   1ce50:	b088      	sub	sp, #32
   1ce52:	466a      	mov	r2, sp
   1ce54:	4b1a      	ldr	r3, [pc, #104]	; (1cec0 <flash_nrf_erase+0xa4>)
   1ce56:	61d4      	str	r4, [r2, #28]
   1ce58:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1ce5c:	2304      	movs	r3, #4
   1ce5e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce62:	2300      	movs	r3, #0
   1ce64:	4817      	ldr	r0, [pc, #92]	; (1cec4 <flash_nrf_erase+0xa8>)
   1ce66:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ce6a:	f7f1 fd73 	bl	e954 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1ce6e:	f06f 0015 	mvn.w	r0, #21
   1ce72:	46ad      	mov	sp, r5
		return -EINVAL;
   1ce74:	e002      	b.n	1ce7c <flash_nrf_erase+0x60>
		if (!n_pages) {
   1ce76:	42ac      	cmp	r4, r5
   1ce78:	d203      	bcs.n	1ce82 <flash_nrf_erase+0x66>
			return 0;
   1ce7a:	2000      	movs	r0, #0
}
   1ce7c:	46bd      	mov	sp, r7
   1ce7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   1ce82:	f04f 32ff 	mov.w	r2, #4294967295
   1ce86:	f04f 33ff 	mov.w	r3, #4294967295
   1ce8a:	480f      	ldr	r0, [pc, #60]	; (1cec8 <flash_nrf_erase+0xac>)
   1ce8c:	f004 ff44 	bl	21d18 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ce90:	f00e f812 	bl	2aeb8 <nrfx_nvmc_flash_page_size_get>
   1ce94:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1ce96:	4640      	mov	r0, r8
   1ce98:	f002 faf4 	bl	1f484 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1ce9c:	1b64      	subs	r4, r4, r5
   1ce9e:	44a8      	add	r8, r5
   1cea0:	d1f9      	bne.n	1ce96 <flash_nrf_erase+0x7a>
	z_impl_k_sem_give(sem);
   1cea2:	4809      	ldr	r0, [pc, #36]	; (1cec8 <flash_nrf_erase+0xac>)
   1cea4:	f004 fef4 	bl	21c90 <z_impl_k_sem_give>
}
   1cea8:	e7e7      	b.n	1ce7a <flash_nrf_erase+0x5e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ceaa:	466d      	mov	r5, sp
   1ceac:	b088      	sub	sp, #32
   1ceae:	466a      	mov	r2, sp
   1ceb0:	4906      	ldr	r1, [pc, #24]	; (1cecc <flash_nrf_erase+0xb0>)
   1ceb2:	61d4      	str	r4, [r2, #28]
   1ceb4:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1ceb8:	2104      	movs	r1, #4
   1ceba:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1cebe:	e7d1      	b.n	1ce64 <flash_nrf_erase+0x48>
   1cec0:	0003248f 	.word	0x0003248f
   1cec4:	0002cd38 	.word	0x0002cd38
   1cec8:	20021838 	.word	0x20021838
   1cecc:	00032472 	.word	0x00032472

0001ced0 <flash_nrf_write>:
{
   1ced0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ced4:	460e      	mov	r6, r1
   1ced6:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1ced8:	4619      	mov	r1, r3
   1ceda:	4630      	mov	r0, r6
{
   1cedc:	461c      	mov	r4, r3
   1cede:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
   1cee0:	f00d fb78 	bl	2a5d4 <is_regular_addr_valid>
   1cee4:	4603      	mov	r3, r0
   1cee6:	b9a0      	cbnz	r0, 1cf12 <flash_nrf_write+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1cee8:	466d      	mov	r5, sp
   1ceea:	b088      	sub	sp, #32
   1ceec:	466a      	mov	r2, sp
   1ceee:	4920      	ldr	r1, [pc, #128]	; (1cf70 <flash_nrf_write+0xa0>)
   1cef0:	61d4      	str	r4, [r2, #28]
   1cef2:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1cef6:	2104      	movs	r1, #4
   1cef8:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1cefc:	481d      	ldr	r0, [pc, #116]	; (1cf74 <flash_nrf_write+0xa4>)
   1cefe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cf02:	f7f1 fd27 	bl	e954 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1cf06:	f06f 0015 	mvn.w	r0, #21
   1cf0a:	46ad      	mov	sp, r5
}
   1cf0c:	46bd      	mov	sp, r7
   1cf0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1cf12:	ea46 0504 	orr.w	r5, r6, r4
   1cf16:	f015 0503 	ands.w	r5, r5, #3
   1cf1a:	d00b      	beq.n	1cf34 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1cf1c:	466d      	mov	r5, sp
   1cf1e:	b088      	sub	sp, #32
   1cf20:	466a      	mov	r2, sp
   1cf22:	4b15      	ldr	r3, [pc, #84]	; (1cf78 <flash_nrf_write+0xa8>)
   1cf24:	61d4      	str	r4, [r2, #28]
   1cf26:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1cf2a:	2304      	movs	r3, #4
   1cf2c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cf30:	2300      	movs	r3, #0
   1cf32:	e7e3      	b.n	1cefc <flash_nrf_write+0x2c>
	if (!len) {
   1cf34:	b1a4      	cbz	r4, 1cf60 <flash_nrf_write+0x90>
	return z_impl_k_sem_take(sem, timeout);
   1cf36:	f04f 32ff 	mov.w	r2, #4294967295
   1cf3a:	f04f 33ff 	mov.w	r3, #4294967295
   1cf3e:	480f      	ldr	r0, [pc, #60]	; (1cf7c <flash_nrf_write+0xac>)
   1cf40:	f004 feea 	bl	21d18 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1cf44:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1cf48:	42a5      	cmp	r5, r4
   1cf4a:	eb05 0006 	add.w	r0, r5, r6
   1cf4e:	d109      	bne.n	1cf64 <flash_nrf_write+0x94>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1cf50:	4a0b      	ldr	r2, [pc, #44]	; (1cf80 <flash_nrf_write+0xb0>)
   1cf52:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1cf56:	07db      	lsls	r3, r3, #31
   1cf58:	d5fb      	bpl.n	1cf52 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   1cf5a:	4808      	ldr	r0, [pc, #32]	; (1cf7c <flash_nrf_write+0xac>)
   1cf5c:	f004 fe98 	bl	21c90 <z_impl_k_sem_give>
	return ret;
   1cf60:	2000      	movs	r0, #0
   1cf62:	e7d3      	b.n	1cf0c <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1cf64:	f858 1005 	ldr.w	r1, [r8, r5]
   1cf68:	f002 fabe 	bl	1f4e8 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1cf6c:	3504      	adds	r5, #4
}
   1cf6e:	e7eb      	b.n	1cf48 <flash_nrf_write+0x78>
   1cf70:	00032472 	.word	0x00032472
   1cf74:	0002cd38 	.word	0x0002cd38
   1cf78:	000324ae 	.word	0x000324ae
   1cf7c:	20021838 	.word	0x20021838
   1cf80:	40039000 	.word	0x40039000

0001cf84 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1cf84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cf86:	461d      	mov	r5, r3
	return config->uarte_regs;
   1cf88:	6843      	ldr	r3, [r0, #4]
{
   1cf8a:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1cf8c:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1cf8e:	f8d3 c000 	ldr.w	ip, [r3]
   1cf92:	f04f 0320 	mov.w	r3, #32
   1cf96:	f3ef 8711 	mrs	r7, BASEPRI
   1cf9a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf9e:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1cfa2:	68e3      	ldr	r3, [r4, #12]
   1cfa4:	68d8      	ldr	r0, [r3, #12]
   1cfa6:	b138      	cbz	r0, 1cfb8 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1cfa8:	f387 8811 	msr	BASEPRI, r7
   1cfac:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1cfb0:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1cfb4:	b003      	add	sp, #12
   1cfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1cfb8:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1cfba:	68e3      	ldr	r3, [r4, #12]
   1cfbc:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1cfbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1cfc2:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1cfc6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1cfca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cfce:	68e3      	ldr	r3, [r4, #12]
   1cfd0:	d111      	bne.n	1cff6 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1cfd2:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1cfd4:	68e3      	ldr	r3, [r4, #12]
   1cfd6:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1cfd8:	4621      	mov	r1, r4
   1cfda:	4630      	mov	r0, r6
   1cfdc:	f00d fce2 	bl	2a9a4 <start_tx_locked>
   1cfe0:	f387 8811 	msr	BASEPRI, r7
   1cfe4:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1cfe8:	7ae3      	ldrb	r3, [r4, #11]
   1cfea:	2b01      	cmp	r3, #1
   1cfec:	d101      	bne.n	1cff2 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1cfee:	1c6b      	adds	r3, r5, #1
   1cff0:	d106      	bne.n	1d000 <uarte_nrfx_tx+0x7c>
	return 0;
   1cff2:	2000      	movs	r0, #0
   1cff4:	e7de      	b.n	1cfb4 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1cff6:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1cff8:	4620      	mov	r0, r4
   1cffa:	f00d fc4c 	bl	2a896 <setup_tx_cache>
   1cffe:	e7eb      	b.n	1cfd8 <uarte_nrfx_tx+0x54>
   1d000:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d004:	2100      	movs	r1, #0
   1d006:	480a      	ldr	r0, [pc, #40]	; (1d030 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1d008:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1d00c:	2300      	movs	r3, #0
   1d00e:	fbc5 0106 	smlal	r0, r1, r5, r6
   1d012:	4a08      	ldr	r2, [pc, #32]	; (1d034 <uarte_nrfx_tx+0xb0>)
   1d014:	f7eb ff6c 	bl	8ef0 <__aeabi_uldivmod>
   1d018:	68e4      	ldr	r4, [r4, #12]
   1d01a:	4602      	mov	r2, r0
   1d01c:	460b      	mov	r3, r1
   1d01e:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1d020:	2000      	movs	r0, #0
   1d022:	2100      	movs	r1, #0
   1d024:	e9cd 0100 	strd	r0, r1, [sp]
   1d028:	4620      	mov	r0, r4
   1d02a:	f007 fa43 	bl	244b4 <z_impl_k_timer_start>
   1d02e:	e7e0      	b.n	1cff2 <uarte_nrfx_tx+0x6e>
   1d030:	000f423f 	.word	0x000f423f
   1d034:	000f4240 	.word	0x000f4240

0001d038 <uarte_nrfx_configure>:
{
   1d038:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1d03a:	794b      	ldrb	r3, [r1, #5]
   1d03c:	2b01      	cmp	r3, #1
   1d03e:	d029      	beq.n	1d094 <uarte_nrfx_configure+0x5c>
   1d040:	2b03      	cmp	r3, #3
   1d042:	d124      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d044:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d046:	798b      	ldrb	r3, [r1, #6]
   1d048:	2b03      	cmp	r3, #3
   1d04a:	d120      	bne.n	1d08e <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1d04c:	79ce      	ldrb	r6, [r1, #7]
   1d04e:	b10e      	cbz	r6, 1d054 <uarte_nrfx_configure+0x1c>
   1d050:	2e01      	cmp	r6, #1
   1d052:	d11c      	bne.n	1d08e <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1d054:	790a      	ldrb	r2, [r1, #4]
   1d056:	2a01      	cmp	r2, #1
   1d058:	d01e      	beq.n	1d098 <uarte_nrfx_configure+0x60>
   1d05a:	2a02      	cmp	r2, #2
   1d05c:	d020      	beq.n	1d0a0 <uarte_nrfx_configure+0x68>
   1d05e:	b9b2      	cbnz	r2, 1d08e <uarte_nrfx_configure+0x56>
   1d060:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d062:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d064:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1d066:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d06a:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1d06e:	d06e      	beq.n	1d14e <uarte_nrfx_configure+0x116>
   1d070:	d833      	bhi.n	1d0da <uarte_nrfx_configure+0xa2>
   1d072:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d076:	d06d      	beq.n	1d154 <uarte_nrfx_configure+0x11c>
   1d078:	d81c      	bhi.n	1d0b4 <uarte_nrfx_configure+0x7c>
   1d07a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d07e:	d06b      	beq.n	1d158 <uarte_nrfx_configure+0x120>
   1d080:	d810      	bhi.n	1d0a4 <uarte_nrfx_configure+0x6c>
   1d082:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d086:	d06a      	beq.n	1d15e <uarte_nrfx_configure+0x126>
   1d088:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d08c:	d06a      	beq.n	1d164 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1d08e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d092:	e05b      	b.n	1d14c <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1d094:	2700      	movs	r7, #0
   1d096:	e7d6      	b.n	1d046 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1d098:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d09c:	220e      	movs	r2, #14
   1d09e:	e7e0      	b.n	1d062 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1d0a0:	2400      	movs	r4, #0
   1d0a2:	e7fb      	b.n	1d09c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1d0a4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d0a8:	d05f      	beq.n	1d16a <uarte_nrfx_configure+0x132>
   1d0aa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d0ae:	d1ee      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d0b0:	4b38      	ldr	r3, [pc, #224]	; (1d194 <uarte_nrfx_configure+0x15c>)
   1d0b2:	e03c      	b.n	1d12e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d0b4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d0b8:	d05a      	beq.n	1d170 <uarte_nrfx_configure+0x138>
   1d0ba:	d807      	bhi.n	1d0cc <uarte_nrfx_configure+0x94>
   1d0bc:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d0c0:	d058      	beq.n	1d174 <uarte_nrfx_configure+0x13c>
   1d0c2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d0c6:	d1e2      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d0c8:	4b33      	ldr	r3, [pc, #204]	; (1d198 <uarte_nrfx_configure+0x160>)
   1d0ca:	e030      	b.n	1d12e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d0cc:	f647 2512 	movw	r5, #31250	; 0x7a12
   1d0d0:	42ab      	cmp	r3, r5
   1d0d2:	d1dc      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d0d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d0d8:	e029      	b.n	1d12e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d0da:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d0de:	d04b      	beq.n	1d178 <uarte_nrfx_configure+0x140>
   1d0e0:	d813      	bhi.n	1d10a <uarte_nrfx_configure+0xd2>
   1d0e2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d0e6:	d04a      	beq.n	1d17e <uarte_nrfx_configure+0x146>
   1d0e8:	d809      	bhi.n	1d0fe <uarte_nrfx_configure+0xc6>
   1d0ea:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1d0ee:	42ab      	cmp	r3, r5
   1d0f0:	d047      	beq.n	1d182 <uarte_nrfx_configure+0x14a>
   1d0f2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d0f6:	d1ca      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d0f8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d0fc:	e017      	b.n	1d12e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d0fe:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d102:	d1c4      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d104:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d108:	e011      	b.n	1d12e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d10a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d10e:	d03b      	beq.n	1d188 <uarte_nrfx_configure+0x150>
   1d110:	d808      	bhi.n	1d124 <uarte_nrfx_configure+0xec>
   1d112:	4d22      	ldr	r5, [pc, #136]	; (1d19c <uarte_nrfx_configure+0x164>)
   1d114:	42ab      	cmp	r3, r5
   1d116:	d03a      	beq.n	1d18e <uarte_nrfx_configure+0x156>
   1d118:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d11c:	d1b7      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d11e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d122:	e004      	b.n	1d12e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d124:	4d1e      	ldr	r5, [pc, #120]	; (1d1a0 <uarte_nrfx_configure+0x168>)
   1d126:	42ab      	cmp	r3, r5
   1d128:	d1b1      	bne.n	1d08e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d12a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d12e:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d130:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1d134:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1d136:	433a      	orrs	r2, r7
   1d138:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1d13a:	4334      	orrs	r4, r6
   1d13c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d13e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1d142:	1d2b      	adds	r3, r5, #4
   1d144:	c903      	ldmia	r1, {r0, r1}
   1d146:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1d14a:	2000      	movs	r0, #0
}
   1d14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d14e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d152:	e7ec      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d154:	4b13      	ldr	r3, [pc, #76]	; (1d1a4 <uarte_nrfx_configure+0x16c>)
   1d156:	e7ea      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d158:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d15c:	e7e7      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1d15e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d162:	e7e4      	b.n	1d12e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d164:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d168:	e7e1      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d16a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d16e:	e7de      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d170:	4b0d      	ldr	r3, [pc, #52]	; (1d1a8 <uarte_nrfx_configure+0x170>)
   1d172:	e7dc      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d174:	4b0d      	ldr	r3, [pc, #52]	; (1d1ac <uarte_nrfx_configure+0x174>)
   1d176:	e7da      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d178:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d17c:	e7d7      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d17e:	4b0c      	ldr	r3, [pc, #48]	; (1d1b0 <uarte_nrfx_configure+0x178>)
   1d180:	e7d5      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d182:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d186:	e7d2      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d188:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d18c:	e7cf      	b.n	1d12e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d18e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d192:	e7cc      	b.n	1d12e <uarte_nrfx_configure+0xf6>
   1d194:	0013b000 	.word	0x0013b000
   1d198:	004ea000 	.word	0x004ea000
   1d19c:	0003d090 	.word	0x0003d090
   1d1a0:	000f4240 	.word	0x000f4240
   1d1a4:	00275000 	.word	0x00275000
   1d1a8:	0075c000 	.word	0x0075c000
   1d1ac:	003af000 	.word	0x003af000
   1d1b0:	013a9000 	.word	0x013a9000

0001d1b4 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d1b4:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1d1b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1d1ba:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1d1be:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1d1c0:	f8d9 4000 	ldr.w	r4, [r9]
static int uarte_instance_init(const struct device *dev,
   1d1c4:	b087      	sub	sp, #28
   1d1c6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1d1ca:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d1cc:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1d1d0:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1d1d2:	466a      	mov	r2, sp
   1d1d4:	4640      	mov	r0, r8
   1d1d6:	f00d fcb5 	bl	2ab44 <pinctrl_lookup_state>
	if (ret < 0) {
   1d1da:	1e05      	subs	r5, r0, #0
   1d1dc:	db26      	blt.n	1d22c <uarte_instance_init.constprop.0+0x78>
	return pinctrl_apply_state_direct(config, state);
   1d1de:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d1e0:	f8d8 2000 	ldr.w	r2, [r8]
   1d1e4:	7919      	ldrb	r1, [r3, #4]
   1d1e6:	6818      	ldr	r0, [r3, #0]
   1d1e8:	f00d fcbf 	bl	2ab6a <pinctrl_configure_pins>
	if (err < 0) {
   1d1ec:	1e05      	subs	r5, r0, #0
   1d1ee:	db1d      	blt.n	1d22c <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d1f0:	4638      	mov	r0, r7
   1d1f2:	1d31      	adds	r1, r6, #4
   1d1f4:	f7ff ff20 	bl	1d038 <uarte_nrfx_configure>
	if (err) {
   1d1f8:	4605      	mov	r5, r0
   1d1fa:	b9b8      	cbnz	r0, 1d22c <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d1fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d200:	0799      	lsls	r1, r3, #30
   1d202:	d533      	bpl.n	1d26c <uarte_instance_init.constprop.0+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d204:	f106 001c 	add.w	r0, r6, #28
   1d208:	f001 fc62 	bl	1ead0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d20c:	4b4f      	ldr	r3, [pc, #316]	; (1d34c <uarte_instance_init.constprop.0+0x198>)
   1d20e:	4298      	cmp	r0, r3
   1d210:	d010      	beq.n	1d234 <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1d212:	4b4f      	ldr	r3, [pc, #316]	; (1d350 <uarte_instance_init.constprop.0+0x19c>)
   1d214:	9305      	str	r3, [sp, #20]
   1d216:	2302      	movs	r3, #2
   1d218:	9304      	str	r3, [sp, #16]
   1d21a:	462b      	mov	r3, r5
		return -EIO;
   1d21c:	f06f 0504 	mvn.w	r5, #4
   1d220:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d224:	484b      	ldr	r0, [pc, #300]	; (1d354 <uarte_instance_init.constprop.0+0x1a0>)
   1d226:	aa04      	add	r2, sp, #16
   1d228:	f7f1 fb94 	bl	e954 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1d22c:	4628      	mov	r0, r5
   1d22e:	b007      	add	sp, #28
   1d230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d234:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1d236:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d23a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d23e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1d242:	d10b      	bne.n	1d25c <uarte_instance_init.constprop.0+0xa8>
   1d244:	4944      	ldr	r1, [pc, #272]	; (1d358 <uarte_instance_init.constprop.0+0x1a4>)
   1d246:	4845      	ldr	r0, [pc, #276]	; (1d35c <uarte_instance_init.constprop.0+0x1a8>)
   1d248:	f240 234e 	movw	r3, #590	; 0x24e
   1d24c:	4a44      	ldr	r2, [pc, #272]	; (1d360 <uarte_instance_init.constprop.0+0x1ac>)
   1d24e:	f009 fd90 	bl	26d72 <assert_print>
   1d252:	f240 214e 	movw	r1, #590	; 0x24e
   1d256:	4842      	ldr	r0, [pc, #264]	; (1d360 <uarte_instance_init.constprop.0+0x1ac>)
   1d258:	f009 fd84 	bl	26d64 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d25c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d260:	2301      	movs	r3, #1
   1d262:	7f32      	ldrb	r2, [r6, #28]
   1d264:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1d266:	4a3f      	ldr	r2, [pc, #252]	; (1d364 <uarte_instance_init.constprop.0+0x1b0>)
   1d268:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1d26c:	68f3      	ldr	r3, [r6, #12]
   1d26e:	2b00      	cmp	r3, #0
   1d270:	d059      	beq.n	1d326 <uarte_instance_init.constprop.0+0x172>
    p_reg->INTENSET = mask;
   1d272:	2204      	movs	r2, #4
	return config->uarte_regs;
   1d274:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d276:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1d27a:	681b      	ldr	r3, [r3, #0]
   1d27c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1d280:	2201      	movs	r2, #1
   1d282:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1d286:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1d28a:	4937      	ldr	r1, [pc, #220]	; (1d368 <uarte_instance_init.constprop.0+0x1b4>)
   1d28c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d290:	2108      	movs	r1, #8
   1d292:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d296:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d29a:	b1a1      	cbz	r1, 1d2c6 <uarte_instance_init.constprop.0+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d29c:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d29e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d2a2:	b91a      	cbnz	r2, 1d2ac <uarte_instance_init.constprop.0+0xf8>
   1d2a4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1d2a8:	2a00      	cmp	r2, #0
   1d2aa:	d0f8      	beq.n	1d29e <uarte_instance_init.constprop.0+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d2ac:	2200      	movs	r2, #0
   1d2ae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1d2b2:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1d2b6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d2ba:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1d2be:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1d2c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1d2c6:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d2ca:	2200      	movs	r2, #0
   1d2cc:	4927      	ldr	r1, [pc, #156]	; (1d36c <uarte_instance_init.constprop.0+0x1b8>)
   1d2ce:	3080      	adds	r0, #128	; 0x80
   1d2d0:	f00e fc83 	bl	2bbda <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1d2d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1d2d8:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1d2dc:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d2e0:	2200      	movs	r2, #0
   1d2e2:	4923      	ldr	r1, [pc, #140]	; (1d370 <uarte_instance_init.constprop.0+0x1bc>)
   1d2e4:	3020      	adds	r0, #32
   1d2e6:	f00e fc78 	bl	2bbda <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1d2ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1d2ee:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d2f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d2f6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d2f8:	bf5c      	itt	pl
   1d2fa:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d2fe:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d302:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d306:	06db      	lsls	r3, r3, #27
   1d308:	bf44      	itt	mi
   1d30a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d30e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d312:	6973      	ldr	r3, [r6, #20]
   1d314:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d318:	2300      	movs	r3, #0
   1d31a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d31e:	2301      	movs	r3, #1
   1d320:	60a3      	str	r3, [r4, #8]
   1d322:	60e3      	str	r3, [r4, #12]
	return 0;
   1d324:	e782      	b.n	1d22c <uarte_instance_init.constprop.0+0x78>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d326:	2308      	movs	r3, #8
   1d328:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d32c:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d330:	2b00      	cmp	r3, #0
   1d332:	d1de      	bne.n	1d2f2 <uarte_instance_init.constprop.0+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d334:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d338:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d33c:	69b3      	ldr	r3, [r6, #24]
   1d33e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d342:	2301      	movs	r3, #1
   1d344:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d348:	6023      	str	r3, [r4, #0]
}
   1d34a:	e7d2      	b.n	1d2f2 <uarte_instance_init.constprop.0+0x13e>
   1d34c:	0bad0000 	.word	0x0bad0000
   1d350:	000324ed 	.word	0x000324ed
   1d354:	0002cdc8 	.word	0x0002cdc8
   1d358:	0002ed4a 	.word	0x0002ed4a
   1d35c:	0002dd81 	.word	0x0002dd81
   1d360:	0002ed12 	.word	0x0002ed12
   1d364:	40017000 	.word	0x40017000
   1d368:	000a0210 	.word	0x000a0210
   1d36c:	0002aa17 	.word	0x0002aa17
   1d370:	0002aae7 	.word	0x0002aae7

0001d374 <uarte_nrfx_poll_out>:
{
   1d374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d378:	4604      	mov	r4, r0
   1d37a:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1d37c:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d37e:	f00e fb0a 	bl	2b996 <k_is_in_isr>
   1d382:	b9b0      	cbnz	r0, 1d3b2 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1d384:	4b2a      	ldr	r3, [pc, #168]	; (1d430 <uarte_nrfx_poll_out+0xbc>)
   1d386:	781b      	ldrb	r3, [r3, #0]
   1d388:	b19b      	cbz	r3, 1d3b2 <uarte_nrfx_poll_out+0x3e>
{
   1d38a:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d38c:	6860      	ldr	r0, [r4, #4]
   1d38e:	f00d faf9 	bl	2a984 <is_tx_ready.isra.0>
   1d392:	2800      	cmp	r0, #0
   1d394:	d138      	bne.n	1d408 <uarte_nrfx_poll_out+0x94>
   1d396:	2001      	movs	r0, #1
   1d398:	f00d fd11 	bl	2adbe <nrfx_busy_wait>
   1d39c:	3f01      	subs	r7, #1
   1d39e:	d1f5      	bne.n	1d38c <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1d3a0:	2100      	movs	r1, #0
   1d3a2:	2021      	movs	r0, #33	; 0x21
   1d3a4:	f006 fb68 	bl	23a78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d3a8:	e7ef      	b.n	1d38a <uarte_nrfx_poll_out+0x16>
   1d3aa:	f381 8811 	msr	BASEPRI, r1
   1d3ae:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d3b2:	f04f 0320 	mov.w	r3, #32
   1d3b6:	f3ef 8111 	mrs	r1, BASEPRI
   1d3ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3be:	f3bf 8f6f 	isb	sy
   1d3c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1d3c6:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1d3c8:	4640      	mov	r0, r8
   1d3ca:	f00d fadb 	bl	2a984 <is_tx_ready.isra.0>
   1d3ce:	2800      	cmp	r0, #0
   1d3d0:	d0eb      	beq.n	1d3aa <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1d3d2:	68eb      	ldr	r3, [r5, #12]
   1d3d4:	b15b      	cbz	r3, 1d3ee <uarte_nrfx_poll_out+0x7a>
   1d3d6:	68da      	ldr	r2, [r3, #12]
   1d3d8:	b14a      	cbz	r2, 1d3ee <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1d3da:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1d3de:	2a00      	cmp	r2, #0
   1d3e0:	da05      	bge.n	1d3ee <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1d3e2:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1d3e6:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d3ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1d3ee:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1d3f0:	2201      	movs	r2, #1
	*data->char_out = c;
   1d3f2:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d3f4:	4620      	mov	r0, r4
   1d3f6:	6969      	ldr	r1, [r5, #20]
   1d3f8:	f00d f96d 	bl	2a6d6 <tx_start>
	__asm__ volatile(
   1d3fc:	f387 8811 	msr	BASEPRI, r7
   1d400:	f3bf 8f6f 	isb	sy
}
   1d404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d408:	f04f 0320 	mov.w	r3, #32
   1d40c:	f3ef 8111 	mrs	r1, BASEPRI
   1d410:	f383 8812 	msr	BASEPRI_MAX, r3
   1d414:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d418:	6860      	ldr	r0, [r4, #4]
   1d41a:	460f      	mov	r7, r1
   1d41c:	f00d fab2 	bl	2a984 <is_tx_ready.isra.0>
   1d420:	2800      	cmp	r0, #0
   1d422:	d1e4      	bne.n	1d3ee <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1d424:	f381 8811 	msr	BASEPRI, r1
   1d428:	f3bf 8f6f 	isb	sy
}
   1d42c:	e7b8      	b.n	1d3a0 <uarte_nrfx_poll_out+0x2c>
   1d42e:	bf00      	nop
   1d430:	200227bf 	.word	0x200227bf

0001d434 <uarte_nrfx_rx_enable>:
{
   1d434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1d438:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1d43c:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1d43e:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1d442:	4605      	mov	r5, r0
   1d444:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1d446:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d448:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1d44c:	b172      	cbz	r2, 1d46c <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1d44e:	4944      	ldr	r1, [pc, #272]	; (1d560 <uarte_nrfx_rx_enable+0x12c>)
   1d450:	f240 337d 	movw	r3, #893	; 0x37d
   1d454:	4a43      	ldr	r2, [pc, #268]	; (1d564 <uarte_nrfx_rx_enable+0x130>)
   1d456:	4844      	ldr	r0, [pc, #272]	; (1d568 <uarte_nrfx_rx_enable+0x134>)
   1d458:	f009 fc8b 	bl	26d72 <assert_print>
   1d45c:	4843      	ldr	r0, [pc, #268]	; (1d56c <uarte_nrfx_rx_enable+0x138>)
   1d45e:	f009 fc88 	bl	26d72 <assert_print>
   1d462:	f240 317d 	movw	r1, #893	; 0x37d
   1d466:	483f      	ldr	r0, [pc, #252]	; (1d564 <uarte_nrfx_rx_enable+0x130>)
   1d468:	f009 fc7c 	bl	26d64 <assert_post_action>
	if (data->async->rx_enabled) {
   1d46c:	68e2      	ldr	r2, [r4, #12]
   1d46e:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1d472:	2900      	cmp	r1, #0
   1d474:	d170      	bne.n	1d558 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1d476:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1d47a:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1d47c:	bfca      	itet	gt
   1d47e:	2205      	movgt	r2, #5
   1d480:	235c      	movle	r3, #92	; 0x5c
   1d482:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1d486:	68e2      	ldr	r2, [r4, #12]
   1d488:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1d48a:	68e3      	ldr	r3, [r4, #12]
   1d48c:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1d490:	68e3      	ldr	r3, [r4, #12]
   1d492:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1d494:	2300      	movs	r3, #0
   1d496:	68e2      	ldr	r2, [r4, #12]
   1d498:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1d49a:	68e2      	ldr	r2, [r4, #12]
   1d49c:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1d49e:	68e2      	ldr	r2, [r4, #12]
   1d4a0:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d4a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d4a6:	06da      	lsls	r2, r3, #27
   1d4a8:	d523      	bpl.n	1d4f2 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1d4aa:	68e1      	ldr	r1, [r4, #12]
   1d4ac:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1d4b0:	b1fe      	cbz	r6, 1d4f2 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1d4b2:	42be      	cmp	r6, r7
   1d4b4:	bf28      	it	cs
   1d4b6:	463e      	movcs	r6, r7
   1d4b8:	4640      	mov	r0, r8
   1d4ba:	4632      	mov	r2, r6
   1d4bc:	31c4      	adds	r1, #196	; 0xc4
   1d4be:	f00e fc7d 	bl	2bdbc <memcpy>
			if (!len) {
   1d4c2:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1d4c4:	44b0      	add	r8, r6
			if (!len) {
   1d4c6:	d114      	bne.n	1d4f2 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1d4c8:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1d4ca:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1d4cc:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1d4d0:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1d4d2:	1b9b      	subs	r3, r3, r6
   1d4d4:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1d4d8:	f00d f92c 	bl	2a734 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1d4dc:	68e1      	ldr	r1, [r4, #12]
   1d4de:	4628      	mov	r0, r5
   1d4e0:	3158      	adds	r1, #88	; 0x58
   1d4e2:	f00d f940 	bl	2a766 <rx_buf_release>
				notify_rx_disable(dev);
   1d4e6:	4628      	mov	r0, r5
   1d4e8:	f00d f955 	bl	2a796 <notify_rx_disable>
	return 0;
   1d4ec:	2000      	movs	r0, #0
}
   1d4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4f2:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d4f4:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d4f8:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4fc:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1d500:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1d504:	2201      	movs	r2, #1
   1d506:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1d50a:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1d50e:	68e3      	ldr	r3, [r4, #12]
   1d510:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d514:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d518:	06db      	lsls	r3, r3, #27
   1d51a:	d519      	bpl.n	1d550 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1d51c:	f04f 0320 	mov.w	r3, #32
   1d520:	f3ef 8111 	mrs	r1, BASEPRI
   1d524:	f383 8812 	msr	BASEPRI_MAX, r3
   1d528:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1d52c:	692b      	ldr	r3, [r5, #16]
   1d52e:	68db      	ldr	r3, [r3, #12]
   1d530:	b12b      	cbz	r3, 1d53e <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1d532:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1d536:	f042 0202 	orr.w	r2, r2, #2
   1d53a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d53e:	2208      	movs	r2, #8
	return config->uarte_regs;
   1d540:	686b      	ldr	r3, [r5, #4]
   1d542:	681b      	ldr	r3, [r3, #0]
   1d544:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1d548:	f381 8811 	msr	BASEPRI, r1
   1d54c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d550:	2301      	movs	r3, #1
   1d552:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1d556:	e7c9      	b.n	1d4ec <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1d558:	f06f 000f 	mvn.w	r0, #15
   1d55c:	e7c7      	b.n	1d4ee <uarte_nrfx_rx_enable+0xba>
   1d55e:	bf00      	nop
   1d560:	00033a12 	.word	0x00033a12
   1d564:	0003250c 	.word	0x0003250c
   1d568:	0002dd81 	.word	0x0002dd81
   1d56c:	00032540 	.word	0x00032540

0001d570 <uarte_nrfx_isr_async>:
{
   1d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1d574:	6843      	ldr	r3, [r0, #4]
{
   1d576:	4604      	mov	r4, r0
	return config->uarte_regs;
   1d578:	681d      	ldr	r5, [r3, #0]
{
   1d57a:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d57c:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1d580:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1d582:	b169      	cbz	r1, 1d5a0 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d584:	2200      	movs	r2, #0
   1d586:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1d58a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1d58e:	68da      	ldr	r2, [r3, #12]
   1d590:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1d594:	3301      	adds	r3, #1
   1d596:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1d59a:	b008      	add	sp, #32
   1d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d5a0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d5a4:	b323      	cbz	r3, 1d5f0 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d5a6:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1d5aa:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1d5ae:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1d5b0:	2214      	movs	r2, #20
	return config->uarte_regs;
   1d5b2:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1d5b4:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d5b6:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d5ba:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1d5be:	f00e fc37 	bl	2be30 <memset>
   1d5c2:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d5c4:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1d5c6:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d5ca:	f100 8103 	bmi.w	1d7d4 <uarte_nrfx_isr_async+0x264>
   1d5ce:	07b3      	lsls	r3, r6, #30
   1d5d0:	f100 8102 	bmi.w	1d7d8 <uarte_nrfx_isr_async+0x268>
   1d5d4:	0777      	lsls	r7, r6, #29
   1d5d6:	f100 8101 	bmi.w	1d7dc <uarte_nrfx_isr_async+0x26c>
   1d5da:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1d5de:	4620      	mov	r0, r4
   1d5e0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d5e2:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1d5e6:	f00d f89e 	bl	2a726 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1d5ea:	4620      	mov	r0, r4
   1d5ec:	f00d f931 	bl	2a852 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d5f0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1d5f4:	b38b      	cbz	r3, 1d65a <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1d5f6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1d5fa:	06d8      	lsls	r0, r3, #27
   1d5fc:	d52d      	bpl.n	1d65a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d5fe:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1d602:	2201      	movs	r2, #1
   1d604:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1d608:	6926      	ldr	r6, [r4, #16]
   1d60a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1d60e:	6863      	ldr	r3, [r4, #4]
   1d610:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1d612:	68f3      	ldr	r3, [r6, #12]
   1d614:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1d618:	68f0      	ldr	r0, [r6, #12]
   1d61a:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1d61c:	f00e fae9 	bl	2bbf2 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1d620:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1d622:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1d626:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1d62a:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1d62e:	68f2      	ldr	r2, [r6, #12]
   1d630:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1d632:	1a1b      	subs	r3, r3, r0
   1d634:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1d636:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1d638:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1d63c:	4408      	add	r0, r1
	if (rx_len > 0) {
   1d63e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1d640:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1d642:	dd02      	ble.n	1d64a <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1d644:	4620      	mov	r0, r4
   1d646:	f00d f875 	bl	2a734 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1d64a:	68f1      	ldr	r1, [r6, #12]
   1d64c:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1d650:	2b00      	cmp	r3, #0
   1d652:	f040 80c5 	bne.w	1d7e0 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1d656:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d65a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1d65e:	b383      	cbz	r3, 1d6c2 <uarte_nrfx_isr_async+0x152>
   1d660:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d664:	bb6e      	cbnz	r6, 1d6c2 <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1d666:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d668:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1d66c:	4631      	mov	r1, r6
   1d66e:	a803      	add	r0, sp, #12
   1d670:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1d674:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1d676:	f00e fbdb 	bl	2be30 <memset>
   1d67a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1d67c:	a903      	add	r1, sp, #12
   1d67e:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d680:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1d684:	f00d f84f 	bl	2a726 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1d688:	68fb      	ldr	r3, [r7, #12]
   1d68a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1d68c:	1c51      	adds	r1, r2, #1
   1d68e:	d018      	beq.n	1d6c2 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1d690:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1d692:	68ff      	ldr	r7, [r7, #12]
   1d694:	498e      	ldr	r1, [pc, #568]	; (1d8d0 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1d696:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1d698:	468e      	mov	lr, r1
   1d69a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1d69e:	4631      	mov	r1, r6
   1d6a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d6a4:	fbcc e100 	smlal	lr, r1, ip, r0
   1d6a8:	2300      	movs	r3, #0
   1d6aa:	4670      	mov	r0, lr
   1d6ac:	4a89      	ldr	r2, [pc, #548]	; (1d8d4 <uarte_nrfx_isr_async+0x364>)
   1d6ae:	f7eb fc1f 	bl	8ef0 <__aeabi_uldivmod>
   1d6b2:	4602      	mov	r2, r0
   1d6b4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1d6b6:	e9cd 0100 	strd	r0, r1, [sp]
   1d6ba:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1d6be:	f006 fef9 	bl	244b4 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6c2:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d6c6:	b333      	cbz	r3, 1d716 <uarte_nrfx_isr_async+0x1a6>
   1d6c8:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d6cc:	bb1e      	cbnz	r6, 1d716 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6ce:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1d6d2:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1d6d4:	4620      	mov	r0, r4
   1d6d6:	68f9      	ldr	r1, [r7, #12]
   1d6d8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1d6dc:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1d6de:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1d6e2:	f00d f840 	bl	2a766 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1d6e6:	68f9      	ldr	r1, [r7, #12]
   1d6e8:	4620      	mov	r0, r4
   1d6ea:	3164      	adds	r1, #100	; 0x64
   1d6ec:	f00d f83b 	bl	2a766 <rx_buf_release>
	if (data->async->rx_enabled) {
   1d6f0:	68fb      	ldr	r3, [r7, #12]
   1d6f2:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1d6f6:	2a00      	cmp	r2, #0
   1d6f8:	f000 80a3 	beq.w	1d842 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1d6fc:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d700:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d704:	06d8      	lsls	r0, r3, #27
   1d706:	d503      	bpl.n	1d710 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1d708:	2102      	movs	r1, #2
   1d70a:	4620      	mov	r0, r4
   1d70c:	f00d f910 	bl	2a930 <async_uart_release>
	notify_rx_disable(dev);
   1d710:	4620      	mov	r0, r4
   1d712:	f00d f840 	bl	2a796 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d716:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1d71a:	b1db      	cbz	r3, 1d754 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1d71c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1d720:	05d9      	lsls	r1, r3, #23
   1d722:	d517      	bpl.n	1d754 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1d724:	6863      	ldr	r3, [r4, #4]
   1d726:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1d728:	f04f 0120 	mov.w	r1, #32
   1d72c:	f3ef 8211 	mrs	r2, BASEPRI
   1d730:	f381 8812 	msr	BASEPRI_MAX, r1
   1d734:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d738:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d73c:	b131      	cbz	r1, 1d74c <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d73e:	2100      	movs	r1, #0
   1d740:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d744:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d748:	2101      	movs	r1, #1
   1d74a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d74c:	f382 8811 	msr	BASEPRI, r2
   1d750:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d754:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1d758:	2b00      	cmp	r3, #0
   1d75a:	f43f af1e 	beq.w	1d59a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1d75e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1d762:	025a      	lsls	r2, r3, #9
   1d764:	f57f af19 	bpl.w	1d59a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1d768:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d76a:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d76c:	e9d3 7300 	ldrd	r7, r3, [r3]
   1d770:	06db      	lsls	r3, r3, #27
   1d772:	d46b      	bmi.n	1d84c <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1d774:	68eb      	ldr	r3, [r5, #12]
   1d776:	689b      	ldr	r3, [r3, #8]
   1d778:	2b00      	cmp	r3, #0
   1d77a:	f43f af0e 	beq.w	1d59a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1d77e:	f04f 0320 	mov.w	r3, #32
   1d782:	f3ef 8211 	mrs	r2, BASEPRI
   1d786:	f383 8812 	msr	BASEPRI_MAX, r3
   1d78a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1d78e:	68eb      	ldr	r3, [r5, #12]
   1d790:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1d794:	2900      	cmp	r1, #0
   1d796:	bfac      	ite	ge
   1d798:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1d79c:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1d7a0:	f382 8811 	msr	BASEPRI, r2
   1d7a4:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1d7a8:	68eb      	ldr	r3, [r5, #12]
   1d7aa:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1d7ae:	2a00      	cmp	r2, #0
   1d7b0:	d059      	beq.n	1d866 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1d7b2:	f04f 0320 	mov.w	r3, #32
   1d7b6:	f3ef 8611 	mrs	r6, BASEPRI
   1d7ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7be:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1d7c2:	4629      	mov	r1, r5
   1d7c4:	4620      	mov	r0, r4
   1d7c6:	f00d f8ed 	bl	2a9a4 <start_tx_locked>
	__asm__ volatile(
   1d7ca:	f386 8811 	msr	BASEPRI, r6
   1d7ce:	f3bf 8f6f 	isb	sy
				return;
   1d7d2:	e6e2      	b.n	1d59a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d7d4:	2601      	movs	r6, #1
   1d7d6:	e702      	b.n	1d5de <uarte_nrfx_isr_async+0x6e>
   1d7d8:	2602      	movs	r6, #2
   1d7da:	e700      	b.n	1d5de <uarte_nrfx_isr_async+0x6e>
   1d7dc:	2604      	movs	r6, #4
   1d7de:	e6fe      	b.n	1d5de <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1d7e0:	4620      	mov	r0, r4
   1d7e2:	3158      	adds	r1, #88	; 0x58
   1d7e4:	f00c ffbf 	bl	2a766 <rx_buf_release>
	__asm__ volatile(
   1d7e8:	f04f 0320 	mov.w	r3, #32
   1d7ec:	f3ef 8111 	mrs	r1, BASEPRI
   1d7f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7f4:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1d7f8:	68f3      	ldr	r3, [r6, #12]
   1d7fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1d7fc:	b1f2      	cbz	r2, 1d83c <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1d7fe:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1d800:	68f3      	ldr	r3, [r6, #12]
   1d802:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d804:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1d806:	2300      	movs	r3, #0
   1d808:	68f2      	ldr	r2, [r6, #12]
   1d80a:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1d80c:	68f2      	ldr	r2, [r6, #12]
   1d80e:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1d810:	68f2      	ldr	r2, [r6, #12]
   1d812:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d814:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d818:	b90b      	cbnz	r3, 1d81e <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d81a:	2301      	movs	r3, #1
   1d81c:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1d81e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1d822:	f023 0320 	bic.w	r3, r3, #32
   1d826:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1d82a:	f381 8811 	msr	BASEPRI, r1
   1d82e:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1d832:	2200      	movs	r2, #0
   1d834:	68f3      	ldr	r3, [r6, #12]
   1d836:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1d83a:	e70e      	b.n	1d65a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d83c:	2301      	movs	r3, #1
   1d83e:	607b      	str	r3, [r7, #4]
}
   1d840:	e7f3      	b.n	1d82a <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1d842:	4611      	mov	r1, r2
   1d844:	6860      	ldr	r0, [r4, #4]
   1d846:	f00d f83e 	bl	2a8c6 <rx_flush.isra.0>
   1d84a:	e759      	b.n	1d700 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1d84c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1d850:	2101      	movs	r1, #1
   1d852:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1d856:	4620      	mov	r0, r4
   1d858:	f00d f86a 	bl	2a930 <async_uart_release>
		if (!data->async->tx_size) {
   1d85c:	68eb      	ldr	r3, [r5, #12]
   1d85e:	68db      	ldr	r3, [r3, #12]
   1d860:	2b00      	cmp	r3, #0
   1d862:	d187      	bne.n	1d774 <uarte_nrfx_isr_async+0x204>
   1d864:	e699      	b.n	1d59a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1d866:	6899      	ldr	r1, [r3, #8]
   1d868:	691a      	ldr	r2, [r3, #16]
   1d86a:	4291      	cmp	r1, r2
   1d86c:	d00c      	beq.n	1d888 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1d86e:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1d870:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1d872:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1d874:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1d876:	d128      	bne.n	1d8ca <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1d878:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1d87a:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1d87c:	f00d f80b 	bl	2a896 <setup_tx_cache>
   1d880:	2800      	cmp	r0, #0
   1d882:	d196      	bne.n	1d7b2 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1d884:	68eb      	ldr	r3, [r5, #12]
   1d886:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1d888:	68e8      	ldr	r0, [r5, #12]
   1d88a:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1d88c:	f00e f9b1 	bl	2bbf2 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1d890:	2214      	movs	r2, #20
   1d892:	2100      	movs	r1, #0
   1d894:	a803      	add	r0, sp, #12
   1d896:	f00e facb 	bl	2be30 <memset>
		.data.tx.buf = data->async->tx_buf,
   1d89a:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1d89c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d89e:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1d8a0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d8a2:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1d8a6:	68db      	ldr	r3, [r3, #12]
   1d8a8:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1d8aa:	bf1c      	itt	ne
   1d8ac:	2301      	movne	r3, #1
   1d8ae:	f88d 300c 	strbne.w	r3, [sp, #12]
   1d8b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d8b6:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1d8ba:	2300      	movs	r3, #0
   1d8bc:	68ea      	ldr	r2, [r5, #12]
   1d8be:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1d8c0:	68ea      	ldr	r2, [r5, #12]
   1d8c2:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1d8c4:	f00c ff2f 	bl	2a726 <user_callback>
   1d8c8:	e667      	b.n	1d59a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1d8ca:	4616      	mov	r6, r2
   1d8cc:	e7dc      	b.n	1d888 <uarte_nrfx_isr_async+0x318>
   1d8ce:	bf00      	nop
   1d8d0:	000f423f 	.word	0x000f423f
   1d8d4:	000f4240 	.word	0x000f4240

0001d8d8 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1d8d8:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1d8da:	7e01      	ldrb	r1, [r0, #24]
   1d8dc:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1d8de:	2902      	cmp	r1, #2
{
   1d8e0:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   1d8e2:	d018      	beq.n	1d916 <bt_rpmsg_send+0x3e>
   1d8e4:	2904      	cmp	r1, #4
   1d8e6:	d015      	beq.n	1d914 <bt_rpmsg_send+0x3c>
   1d8e8:	b339      	cbz	r1, 1d93a <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1d8ea:	466d      	mov	r5, sp
   1d8ec:	b088      	sub	sp, #32
   1d8ee:	466a      	mov	r2, sp
   1d8f0:	4b13      	ldr	r3, [pc, #76]	; (1d940 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   1d8f2:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1d8f6:	2303      	movs	r3, #3
   1d8f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d8fc:	4811      	ldr	r0, [pc, #68]	; (1d944 <bt_rpmsg_send+0x6c>)
   1d8fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1d902:	f00d f8f4 	bl	2aaee <z_log_msg_static_create.constprop.0>
   1d906:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   1d908:	4620      	mov	r0, r4
   1d90a:	f7fd fb65 	bl	1afd8 <net_buf_unref>
	return 0;
}
   1d90e:	2000      	movs	r0, #0
   1d910:	46bd      	mov	sp, r7
   1d912:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   1d914:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1d916:	f104 000c 	add.w	r0, r4, #12
   1d91a:	f00c fcea 	bl	2a2f2 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1d91e:	8a22      	ldrh	r2, [r4, #16]
   1d920:	68e1      	ldr	r1, [r4, #12]
   1d922:	4809      	ldr	r0, [pc, #36]	; (1d948 <bt_rpmsg_send+0x70>)
   1d924:	f7f1 fee0 	bl	f6e8 <ipc_service_send>
	if (err < 0) {
   1d928:	2800      	cmp	r0, #0
   1d92a:	daed      	bge.n	1d908 <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   1d92c:	466d      	mov	r5, sp
   1d92e:	b088      	sub	sp, #32
   1d930:	466a      	mov	r2, sp
   1d932:	4b06      	ldr	r3, [pc, #24]	; (1d94c <bt_rpmsg_send+0x74>)
   1d934:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d938:	e7dd      	b.n	1d8f6 <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   1d93a:	2101      	movs	r1, #1
   1d93c:	e7eb      	b.n	1d916 <bt_rpmsg_send+0x3e>
   1d93e:	bf00      	nop
   1d940:	0003257c 	.word	0x0003257c
   1d944:	0002ccd0 	.word	0x0002ccd0
   1d948:	20021850 	.word	0x20021850
   1d94c:	0003258c 	.word	0x0003258c

0001d950 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1d950:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1d952:	480c      	ldr	r0, [pc, #48]	; (1d984 <bt_rpmsg_init+0x34>)
{
   1d954:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   1d956:	f7f5 fde1 	bl	1351c <bt_hci_driver_register>
	if (err < 0) {
   1d95a:	1e04      	subs	r4, r0, #0
   1d95c:	da0e      	bge.n	1d97c <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1d95e:	466d      	mov	r5, sp
   1d960:	b088      	sub	sp, #32
   1d962:	466a      	mov	r2, sp
   1d964:	4b08      	ldr	r3, [pc, #32]	; (1d988 <bt_rpmsg_init+0x38>)
   1d966:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d96a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d96e:	2303      	movs	r3, #3
   1d970:	4806      	ldr	r0, [pc, #24]	; (1d98c <bt_rpmsg_init+0x3c>)
   1d972:	f842 3f10 	str.w	r3, [r2, #16]!
   1d976:	f00d f8ba 	bl	2aaee <z_log_msg_static_create.constprop.0>
   1d97a:	46ad      	mov	sp, r5
	}

	return err;
}
   1d97c:	4620      	mov	r0, r4
   1d97e:	46bd      	mov	sp, r7
   1d980:	bdb0      	pop	{r4, r5, r7, pc}
   1d982:	bf00      	nop
   1d984:	0002dc00 	.word	0x0002dc00
   1d988:	000325a4 	.word	0x000325a4
   1d98c:	0002ccd0 	.word	0x0002ccd0

0001d990 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1d990:	4801      	ldr	r0, [pc, #4]	; (1d998 <hci_ept_bound+0x8>)
   1d992:	f004 b97d 	b.w	21c90 <z_impl_k_sem_give>
   1d996:	bf00      	nop
   1d998:	20008b94 	.word	0x20008b94

0001d99c <bt_rpmsg_open>:
{
   1d99c:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1d99e:	481a      	ldr	r0, [pc, #104]	; (1da08 <bt_rpmsg_open+0x6c>)
{
   1d9a0:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1d9a2:	f7f1 fe41 	bl	f628 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1d9a6:	4604      	mov	r4, r0
   1d9a8:	b1a0      	cbz	r0, 1d9d4 <bt_rpmsg_open+0x38>
   1d9aa:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1d9ae:	d011      	beq.n	1d9d4 <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1d9b0:	466d      	mov	r5, sp
   1d9b2:	b088      	sub	sp, #32
   1d9b4:	466a      	mov	r2, sp
   1d9b6:	4b15      	ldr	r3, [pc, #84]	; (1da0c <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   1d9b8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d9bc:	2303      	movs	r3, #3
   1d9be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d9c2:	4813      	ldr	r0, [pc, #76]	; (1da10 <bt_rpmsg_open+0x74>)
   1d9c4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d9c8:	f00d f891 	bl	2aaee <z_log_msg_static_create.constprop.0>
   1d9cc:	46ad      	mov	sp, r5
}
   1d9ce:	4620      	mov	r0, r4
   1d9d0:	46bd      	mov	sp, r7
   1d9d2:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1d9d4:	4a0f      	ldr	r2, [pc, #60]	; (1da14 <bt_rpmsg_open+0x78>)
   1d9d6:	4910      	ldr	r1, [pc, #64]	; (1da18 <bt_rpmsg_open+0x7c>)
   1d9d8:	480b      	ldr	r0, [pc, #44]	; (1da08 <bt_rpmsg_open+0x6c>)
   1d9da:	f7f1 fe53 	bl	f684 <ipc_service_register_endpoint>
	if (err) {
   1d9de:	4604      	mov	r4, r0
   1d9e0:	b120      	cbz	r0, 1d9ec <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   1d9e2:	466d      	mov	r5, sp
   1d9e4:	b088      	sub	sp, #32
   1d9e6:	466a      	mov	r2, sp
   1d9e8:	4b0c      	ldr	r3, [pc, #48]	; (1da1c <bt_rpmsg_open+0x80>)
   1d9ea:	e7e5      	b.n	1d9b8 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   1d9ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1d9f0:	2300      	movs	r3, #0
   1d9f2:	480b      	ldr	r0, [pc, #44]	; (1da20 <bt_rpmsg_open+0x84>)
   1d9f4:	f004 f990 	bl	21d18 <z_impl_k_sem_take>
	if (err) {
   1d9f8:	4604      	mov	r4, r0
   1d9fa:	2800      	cmp	r0, #0
   1d9fc:	d0e7      	beq.n	1d9ce <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   1d9fe:	466d      	mov	r5, sp
   1da00:	b088      	sub	sp, #32
   1da02:	466a      	mov	r2, sp
   1da04:	4b07      	ldr	r3, [pc, #28]	; (1da24 <bt_rpmsg_open+0x88>)
   1da06:	e7d7      	b.n	1d9b8 <bt_rpmsg_open+0x1c>
   1da08:	0002c7b0 	.word	0x0002c7b0
   1da0c:	000325ce 	.word	0x000325ce
   1da10:	0002ccd0 	.word	0x0002ccd0
   1da14:	20008674 	.word	0x20008674
   1da18:	20021850 	.word	0x20021850
   1da1c:	000325fe 	.word	0x000325fe
   1da20:	20008b94 	.word	0x20008b94
   1da24:	00032622 	.word	0x00032622

0001da28 <hci_ept_recv>:
{
   1da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da2c:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   1da2e:	f890 8000 	ldrb.w	r8, [r0]
{
   1da32:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   1da34:	f1b8 0f04 	cmp.w	r8, #4
{
   1da38:	460c      	mov	r4, r1
   1da3a:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1da3c:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1da40:	d00d      	beq.n	1da5e <hci_ept_recv+0x36>
   1da42:	f1b8 0f05 	cmp.w	r8, #5
   1da46:	f000 80a8 	beq.w	1db9a <hci_ept_recv+0x172>
   1da4a:	f1b8 0f02 	cmp.w	r8, #2
   1da4e:	f040 80cf 	bne.w	1dbf0 <hci_ept_recv+0x1c8>
	if (remaining < sizeof(hdr)) {
   1da52:	2b03      	cmp	r3, #3
   1da54:	d86e      	bhi.n	1db34 <hci_ept_recv+0x10c>
		LOG_ERR("Not enough data for ACL header");
   1da56:	4b6e      	ldr	r3, [pc, #440]	; (1dc10 <hci_ept_recv+0x1e8>)
		LOG_ERR("No available ACL buffers!");
   1da58:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1da5c:	e005      	b.n	1da6a <hci_ept_recv+0x42>
	if (remaining < sizeof(hdr)) {
   1da5e:	2b01      	cmp	r3, #1
   1da60:	d80e      	bhi.n	1da80 <hci_ept_recv+0x58>
		LOG_ERR("Not enough data for event header");
   1da62:	4b6c      	ldr	r3, [pc, #432]	; (1dc14 <hci_ept_recv+0x1ec>)
		LOG_ERR("Event payload length is not correct");
   1da64:	61fb      	str	r3, [r7, #28]
   1da66:	2302      	movs	r3, #2
   1da68:	61bb      	str	r3, [r7, #24]
   1da6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da6e:	486a      	ldr	r0, [pc, #424]	; (1dc18 <hci_ept_recv+0x1f0>)
   1da70:	f107 0218 	add.w	r2, r7, #24
   1da74:	f00d f83b 	bl	2aaee <z_log_msg_static_create.constprop.0>
}
   1da78:	3724      	adds	r7, #36	; 0x24
   1da7a:	46bd      	mov	sp, r7
   1da7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1da80:	7843      	ldrb	r3, [r0, #1]
   1da82:	2b3e      	cmp	r3, #62	; 0x3e
   1da84:	d13c      	bne.n	1db00 <hci_ept_recv+0xd8>
		switch (subevt_type) {
   1da86:	f890 a003 	ldrb.w	sl, [r0, #3]
   1da8a:	f1aa 0302 	sub.w	r3, sl, #2
   1da8e:	f1d3 0a00 	rsbs	sl, r3, #0
   1da92:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1da96:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1da9a:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   1da9c:	ebb4 2f13 	cmp.w	r4, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1daa0:	80bb      	strh	r3, [r7, #4]
	if (remaining != hdr.len) {
   1daa2:	d133      	bne.n	1db0c <hci_ept_recv+0xe4>
   1daa4:	f1ba 0f00 	cmp.w	sl, #0
   1daa8:	d02d      	beq.n	1db06 <hci_ept_recv+0xde>
   1daaa:	f04f 0800 	mov.w	r8, #0
   1daae:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1dab2:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1dab6:	4642      	mov	r2, r8
   1dab8:	464b      	mov	r3, r9
   1daba:	4651      	mov	r1, sl
   1dabc:	7938      	ldrb	r0, [r7, #4]
   1dabe:	f7f4 fa77 	bl	11fb0 <bt_buf_get_evt>
		if (!buf) {
   1dac2:	4605      	mov	r5, r0
   1dac4:	b320      	cbz	r0, 1db10 <hci_ept_recv+0xe8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1dac6:	f100 080c 	add.w	r8, r0, #12
   1daca:	2202      	movs	r2, #2
   1dacc:	1d39      	adds	r1, r7, #4
   1dace:	4640      	mov	r0, r8
   1dad0:	f00c fc2a 	bl	2a328 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1dad4:	4640      	mov	r0, r8
   1dad6:	f00c fc1f 	bl	2a318 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1dada:	4284      	cmp	r4, r0
   1dadc:	d926      	bls.n	1db2c <hci_ept_recv+0x104>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1dade:	466e      	mov	r6, sp
   1dae0:	b088      	sub	sp, #32
   1dae2:	466a      	mov	r2, sp
   1dae4:	4b4d      	ldr	r3, [pc, #308]	; (1dc1c <hci_ept_recv+0x1f4>)
   1dae6:	61d0      	str	r0, [r2, #28]
   1dae8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1daec:	2304      	movs	r3, #4
   1daee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1daf2:	4849      	ldr	r0, [pc, #292]	; (1dc18 <hci_ept_recv+0x1f0>)
   1daf4:	f842 3f10 	str.w	r3, [r2, #16]!
   1daf8:	f00c fff9 	bl	2aaee <z_log_msg_static_create.constprop.0>
   1dafc:	46b5      	mov	sp, r6
   1dafe:	e038      	b.n	1db72 <hci_ept_recv+0x14a>
			return false;
   1db00:	f04f 0a00 	mov.w	sl, #0
   1db04:	e7c7      	b.n	1da96 <hci_ept_recv+0x6e>
   1db06:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1db0a:	e7d0      	b.n	1daae <hci_ept_recv+0x86>
		LOG_ERR("Event payload length is not correct");
   1db0c:	4b44      	ldr	r3, [pc, #272]	; (1dc20 <hci_ept_recv+0x1f8>)
   1db0e:	e7a9      	b.n	1da64 <hci_ept_recv+0x3c>
			if (discardable) {
   1db10:	f1ba 0f00 	cmp.w	sl, #0
   1db14:	d1b0      	bne.n	1da78 <hci_ept_recv+0x50>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1db16:	4b43      	ldr	r3, [pc, #268]	; (1dc24 <hci_ept_recv+0x1fc>)
   1db18:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1db1c:	e9c7 b306 	strd	fp, r3, [r7, #24]
   1db20:	483d      	ldr	r0, [pc, #244]	; (1dc18 <hci_ept_recv+0x1f0>)
   1db22:	f107 0218 	add.w	r2, r7, #24
   1db26:	f00c ffe2 	bl	2aaee <z_log_msg_static_create.constprop.0>
	} while (!buf);
   1db2a:	e7c4      	b.n	1dab6 <hci_ept_recv+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1db2c:	4622      	mov	r2, r4
   1db2e:	1cf1      	adds	r1, r6, #3
   1db30:	4640      	mov	r0, r8
   1db32:	e02c      	b.n	1db8e <hci_ept_recv+0x166>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1db34:	2200      	movs	r2, #0
   1db36:	2300      	movs	r3, #0
   1db38:	2003      	movs	r0, #3
   1db3a:	f7f4 f9eb 	bl	11f14 <bt_buf_get_rx>
	if (buf) {
   1db3e:	4605      	mov	r5, r0
   1db40:	b1d8      	cbz	r0, 1db7a <hci_ept_recv+0x152>
   1db42:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1db44:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1db48:	f100 090c 	add.w	r9, r0, #12
   1db4c:	607b      	str	r3, [r7, #4]
   1db4e:	4648      	mov	r0, r9
   1db50:	18b9      	adds	r1, r7, r2
   1db52:	f00c fbe9 	bl	2a328 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1db56:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1db58:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1db5a:	429c      	cmp	r4, r3
   1db5c:	d00f      	beq.n	1db7e <hci_ept_recv+0x156>
		LOG_ERR("ACL payload length is not correct");
   1db5e:	4b32      	ldr	r3, [pc, #200]	; (1dc28 <hci_ept_recv+0x200>)
   1db60:	e9c7 8306 	strd	r8, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   1db64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1db68:	482b      	ldr	r0, [pc, #172]	; (1dc18 <hci_ept_recv+0x1f0>)
   1db6a:	f107 0218 	add.w	r2, r7, #24
   1db6e:	f00c ffbe 	bl	2aaee <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1db72:	4628      	mov	r0, r5
   1db74:	f7fd fa30 	bl	1afd8 <net_buf_unref>
	if (buf) {
   1db78:	e77e      	b.n	1da78 <hci_ept_recv+0x50>
		LOG_ERR("No available ACL buffers!");
   1db7a:	4b2c      	ldr	r3, [pc, #176]	; (1dc2c <hci_ept_recv+0x204>)
   1db7c:	e76c      	b.n	1da58 <hci_ept_recv+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1db7e:	4648      	mov	r0, r9
   1db80:	f00c fbca 	bl	2a318 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1db84:	4284      	cmp	r4, r0
   1db86:	d8aa      	bhi.n	1dade <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1db88:	4622      	mov	r2, r4
   1db8a:	4648      	mov	r0, r9
   1db8c:	1d71      	adds	r1, r6, #5
   1db8e:	f00c fbcb 	bl	2a328 <net_buf_simple_add_mem>
		bt_recv(buf);
   1db92:	4628      	mov	r0, r5
   1db94:	f7f5 fc8e 	bl	134b4 <bt_recv>
}
   1db98:	e76e      	b.n	1da78 <hci_ept_recv+0x50>
	if (remaining < sizeof(hdr)) {
   1db9a:	2b03      	cmp	r3, #3
   1db9c:	d801      	bhi.n	1dba2 <hci_ept_recv+0x17a>
		LOG_ERR("Not enough data for ISO header");
   1db9e:	4b24      	ldr	r3, [pc, #144]	; (1dc30 <hci_ept_recv+0x208>)
   1dba0:	e760      	b.n	1da64 <hci_ept_recv+0x3c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1dba2:	2200      	movs	r2, #0
   1dba4:	2300      	movs	r3, #0
   1dba6:	4640      	mov	r0, r8
   1dba8:	f7f4 f9b4 	bl	11f14 <bt_buf_get_rx>
	if (buf) {
   1dbac:	4605      	mov	r5, r0
   1dbae:	b1a0      	cbz	r0, 1dbda <hci_ept_recv+0x1b2>
   1dbb0:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1dbb2:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1dbb6:	f100 080c 	add.w	r8, r0, #12
   1dbba:	607b      	str	r3, [r7, #4]
   1dbbc:	4640      	mov	r0, r8
   1dbbe:	18b9      	adds	r1, r7, r2
   1dbc0:	f00c fbb2 	bl	2a328 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1dbc4:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1dbc6:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1dbc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1dbcc:	429c      	cmp	r4, r3
   1dbce:	d006      	beq.n	1dbde <hci_ept_recv+0x1b6>
		LOG_ERR("ISO payload length is not correct");
   1dbd0:	4b18      	ldr	r3, [pc, #96]	; (1dc34 <hci_ept_recv+0x20c>)
   1dbd2:	61fb      	str	r3, [r7, #28]
   1dbd4:	2302      	movs	r3, #2
   1dbd6:	61bb      	str	r3, [r7, #24]
   1dbd8:	e7c4      	b.n	1db64 <hci_ept_recv+0x13c>
		LOG_ERR("No available ISO buffers!");
   1dbda:	4b17      	ldr	r3, [pc, #92]	; (1dc38 <hci_ept_recv+0x210>)
   1dbdc:	e742      	b.n	1da64 <hci_ept_recv+0x3c>
	return net_buf_simple_tailroom(&buf->b);
   1dbde:	4640      	mov	r0, r8
   1dbe0:	f00c fb9a 	bl	2a318 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1dbe4:	4284      	cmp	r4, r0
   1dbe6:	f63f af7a 	bhi.w	1dade <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1dbea:	4622      	mov	r2, r4
   1dbec:	1d71      	adds	r1, r6, #5
   1dbee:	e79f      	b.n	1db30 <hci_ept_recv+0x108>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1dbf0:	466c      	mov	r4, sp
   1dbf2:	b088      	sub	sp, #32
   1dbf4:	466a      	mov	r2, sp
   1dbf6:	4b11      	ldr	r3, [pc, #68]	; (1dc3c <hci_ept_recv+0x214>)
   1dbf8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   1dbfc:	e9c2 3805 	strd	r3, r8, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1dc00:	2303      	movs	r3, #3
   1dc02:	4805      	ldr	r0, [pc, #20]	; (1dc18 <hci_ept_recv+0x1f0>)
   1dc04:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc08:	f00c ff71 	bl	2aaee <z_log_msg_static_create.constprop.0>
   1dc0c:	46a5      	mov	sp, r4
   1dc0e:	e733      	b.n	1da78 <hci_ept_recv+0x50>
   1dc10:	000326df 	.word	0x000326df
   1dc14:	00032642 	.word	0x00032642
   1dc18:	0002ccd0 	.word	0x0002ccd0
   1dc1c:	000326bc 	.word	0x000326bc
   1dc20:	00032663 	.word	0x00032663
   1dc24:	00032687 	.word	0x00032687
   1dc28:	00032718 	.word	0x00032718
   1dc2c:	000326fe 	.word	0x000326fe
   1dc30:	0003273a 	.word	0x0003273a
   1dc34:	00032773 	.word	0x00032773
   1dc38:	00032759 	.word	0x00032759
   1dc3c:	00032795 	.word	0x00032795

0001dc40 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1dc40:	2301      	movs	r3, #1
   1dc42:	4083      	lsls	r3, r0
{
   1dc44:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1dc46:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dc48:	4a0b      	ldr	r2, [pc, #44]	; (1dc78 <compare_int_lock+0x38>)
   1dc4a:	e8d2 1fef 	ldaex	r1, [r2]
   1dc4e:	ea01 0504 	and.w	r5, r1, r4
   1dc52:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1dc56:	2e00      	cmp	r6, #0
   1dc58:	d1f7      	bne.n	1dc4a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dc5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1dc5e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1dc60:	4806      	ldr	r0, [pc, #24]	; (1dc7c <compare_int_lock+0x3c>)
   1dc62:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1dc66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1dc6a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1dc6e:	420b      	tst	r3, r1
}
   1dc70:	bf14      	ite	ne
   1dc72:	2001      	movne	r0, #1
   1dc74:	2000      	moveq	r0, #0
   1dc76:	bd70      	pop	{r4, r5, r6, pc}
   1dc78:	20021860 	.word	0x20021860
   1dc7c:	40015000 	.word	0x40015000

0001dc80 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1dc82:	491b      	ldr	r1, [pc, #108]	; (1dcf0 <sys_clock_timeout_handler+0x70>)
{
   1dc84:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1dc86:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1dc8a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1dc8c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1dc90:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1dc94:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1dc96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1dc9a:	d30f      	bcc.n	1dcbc <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1dc9c:	f006 fa6e 	bl	2417c <sys_clock_announce>
    return p_reg->CC[ch];
   1dca0:	00a3      	lsls	r3, r4, #2
   1dca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dca6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1dcaa:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1dcae:	4295      	cmp	r5, r2
   1dcb0:	d11d      	bne.n	1dcee <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1dcb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1dcb6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1dcba:	e012      	b.n	1dce2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1dcbc:	4b0d      	ldr	r3, [pc, #52]	; (1dcf4 <sys_clock_timeout_handler+0x74>)
   1dcbe:	681b      	ldr	r3, [r3, #0]
   1dcc0:	0a1a      	lsrs	r2, r3, #8
   1dcc2:	061b      	lsls	r3, r3, #24
   1dcc4:	195e      	adds	r6, r3, r5
   1dcc6:	4b0c      	ldr	r3, [pc, #48]	; (1dcf8 <sys_clock_timeout_handler+0x78>)
   1dcc8:	f142 0700 	adc.w	r7, r2, #0
   1dccc:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1dcd0:	f006 fa54 	bl	2417c <sys_clock_announce>
    return p_reg->CC[ch];
   1dcd4:	4a09      	ldr	r2, [pc, #36]	; (1dcfc <sys_clock_timeout_handler+0x7c>)
   1dcd6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1dcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1dcde:	429d      	cmp	r5, r3
   1dce0:	d105      	bne.n	1dcee <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1dce6:	4a05      	ldr	r2, [pc, #20]	; (1dcfc <sys_clock_timeout_handler+0x7c>)
   1dce8:	40a3      	lsls	r3, r4
   1dcea:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1dcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dcf0:	2000a0f8 	.word	0x2000a0f8
   1dcf4:	20021864 	.word	0x20021864
   1dcf8:	2000a100 	.word	0x2000a100
   1dcfc:	40015000 	.word	0x40015000

0001dd00 <compare_int_unlock>:
	if (key) {
   1dd00:	b1d9      	cbz	r1, 1dd3a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1dd02:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dd04:	4a0d      	ldr	r2, [pc, #52]	; (1dd3c <compare_int_unlock+0x3c>)
   1dd06:	4083      	lsls	r3, r0
   1dd08:	e8d2 cfef 	ldaex	ip, [r2]
   1dd0c:	ea4c 0c03 	orr.w	ip, ip, r3
   1dd10:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1dd14:	2900      	cmp	r1, #0
   1dd16:	d1f7      	bne.n	1dd08 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dd18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1dd1c:	4a08      	ldr	r2, [pc, #32]	; (1dd40 <compare_int_unlock+0x40>)
   1dd1e:	4083      	lsls	r3, r0
   1dd20:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dd24:	4b07      	ldr	r3, [pc, #28]	; (1dd44 <compare_int_unlock+0x44>)
   1dd26:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1dd2a:	40c3      	lsrs	r3, r0
   1dd2c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dd2e:	bf42      	ittt	mi
   1dd30:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1dd34:	4b04      	ldrmi	r3, [pc, #16]	; (1dd48 <compare_int_unlock+0x48>)
   1dd36:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1dd3a:	4770      	bx	lr
   1dd3c:	20021860 	.word	0x20021860
   1dd40:	40015000 	.word	0x40015000
   1dd44:	20021858 	.word	0x20021858
   1dd48:	e000e100 	.word	0xe000e100

0001dd4c <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1dd4c:	2801      	cmp	r0, #1
{
   1dd4e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1dd50:	d909      	bls.n	1dd66 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1dd52:	4907      	ldr	r1, [pc, #28]	; (1dd70 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1dd54:	4807      	ldr	r0, [pc, #28]	; (1dd74 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1dd56:	237c      	movs	r3, #124	; 0x7c
   1dd58:	4a07      	ldr	r2, [pc, #28]	; (1dd78 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1dd5a:	f009 f80a 	bl	26d72 <assert_print>
   1dd5e:	217c      	movs	r1, #124	; 0x7c
   1dd60:	4805      	ldr	r0, [pc, #20]	; (1dd78 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1dd62:	f008 ffff 	bl	26d64 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1dd66:	0083      	lsls	r3, r0, #2
}
   1dd68:	4804      	ldr	r0, [pc, #16]	; (1dd7c <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1dd6a:	4418      	add	r0, r3
   1dd6c:	bd08      	pop	{r3, pc}
   1dd6e:	bf00      	nop
   1dd70:	00032810 	.word	0x00032810
   1dd74:	0002dd81 	.word	0x0002dd81
   1dd78:	000327df 	.word	0x000327df
   1dd7c:	40015140 	.word	0x40015140

0001dd80 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1dd80:	2801      	cmp	r0, #1
{
   1dd82:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1dd84:	d909      	bls.n	1dd9a <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1dd86:	4907      	ldr	r1, [pc, #28]	; (1dda4 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1dd88:	4807      	ldr	r0, [pc, #28]	; (1dda8 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1dd8a:	2383      	movs	r3, #131	; 0x83
   1dd8c:	4a07      	ldr	r2, [pc, #28]	; (1ddac <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1dd8e:	f008 fff0 	bl	26d72 <assert_print>
   1dd92:	2183      	movs	r1, #131	; 0x83
   1dd94:	4805      	ldr	r0, [pc, #20]	; (1ddac <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1dd96:	f008 ffe5 	bl	26d64 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1dd9a:	2800      	cmp	r0, #0
}
   1dd9c:	4804      	ldr	r0, [pc, #16]	; (1ddb0 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1dd9e:	bf08      	it	eq
   1dda0:	2000      	moveq	r0, #0
   1dda2:	bd08      	pop	{r3, pc}
   1dda4:	00032810 	.word	0x00032810
   1dda8:	0002dd81 	.word	0x0002dd81
   1ddac:	000327df 	.word	0x000327df
   1ddb0:	40015044 	.word	0x40015044

0001ddb4 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1ddb4:	2801      	cmp	r0, #1
{
   1ddb6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1ddb8:	d909      	bls.n	1ddce <z_nrf_rtc_timer_compare_read+0x1a>
   1ddba:	4908      	ldr	r1, [pc, #32]	; (1dddc <z_nrf_rtc_timer_compare_read+0x28>)
   1ddbc:	4808      	ldr	r0, [pc, #32]	; (1dde0 <z_nrf_rtc_timer_compare_read+0x2c>)
   1ddbe:	23b9      	movs	r3, #185	; 0xb9
   1ddc0:	4a08      	ldr	r2, [pc, #32]	; (1dde4 <z_nrf_rtc_timer_compare_read+0x30>)
   1ddc2:	f008 ffd6 	bl	26d72 <assert_print>
   1ddc6:	21b9      	movs	r1, #185	; 0xb9
   1ddc8:	4806      	ldr	r0, [pc, #24]	; (1dde4 <z_nrf_rtc_timer_compare_read+0x30>)
   1ddca:	f008 ffcb 	bl	26d64 <assert_post_action>
    return p_reg->CC[ch];
   1ddce:	4b06      	ldr	r3, [pc, #24]	; (1dde8 <z_nrf_rtc_timer_compare_read+0x34>)
   1ddd0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1ddd4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1ddd8:	bd08      	pop	{r3, pc}
   1ddda:	bf00      	nop
   1dddc:	00032810 	.word	0x00032810
   1dde0:	0002dd81 	.word	0x0002dd81
   1dde4:	000327df 	.word	0x000327df
   1dde8:	40015000 	.word	0x40015000

0001ddec <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ddec:	4b0d      	ldr	r3, [pc, #52]	; (1de24 <z_nrf_rtc_timer_read+0x38>)
   1ddee:	6818      	ldr	r0, [r3, #0]
   1ddf0:	0a01      	lsrs	r1, r0, #8
   1ddf2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ddf4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1ddf8:	4b0b      	ldr	r3, [pc, #44]	; (1de28 <z_nrf_rtc_timer_read+0x3c>)
   1ddfa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ddfe:	1818      	adds	r0, r3, r0
   1de00:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1de04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1de08:	d20a      	bcs.n	1de20 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1de0a:	4b08      	ldr	r3, [pc, #32]	; (1de2c <z_nrf_rtc_timer_read+0x40>)
   1de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1de10:	4290      	cmp	r0, r2
   1de12:	eb71 0303 	sbcs.w	r3, r1, r3
   1de16:	d203      	bcs.n	1de20 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1de18:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1de1c:	f141 0100 	adc.w	r1, r1, #0
}
   1de20:	4770      	bx	lr
   1de22:	bf00      	nop
   1de24:	20021864 	.word	0x20021864
   1de28:	40015000 	.word	0x40015000
   1de2c:	2000a100 	.word	0x2000a100

0001de30 <compare_set>:
{
   1de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de34:	b085      	sub	sp, #20
   1de36:	4614      	mov	r4, r2
   1de38:	461d      	mov	r5, r3
   1de3a:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1de3c:	f7ff ff00 	bl	1dc40 <compare_int_lock>
   1de40:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1de42:	f7ff ffd3 	bl	1ddec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1de46:	42a0      	cmp	r0, r4
   1de48:	eb71 0305 	sbcs.w	r3, r1, r5
   1de4c:	f080 8086 	bcs.w	1df5c <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1de50:	4b49      	ldr	r3, [pc, #292]	; (1df78 <compare_set+0x148>)
   1de52:	1a20      	subs	r0, r4, r0
   1de54:	eb65 0101 	sbc.w	r1, r5, r1
   1de58:	4298      	cmp	r0, r3
   1de5a:	f171 0100 	sbcs.w	r1, r1, #0
   1de5e:	f080 8088 	bcs.w	1df72 <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1de62:	4b46      	ldr	r3, [pc, #280]	; (1df7c <compare_set+0x14c>)
   1de64:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1de68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1de6c:	429d      	cmp	r5, r3
   1de6e:	bf08      	it	eq
   1de70:	4294      	cmpeq	r4, r2
   1de72:	d05e      	beq.n	1df32 <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1de74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1de78:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1de7c:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1de7e:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1de82:	f06f 0101 	mvn.w	r1, #1
   1de86:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1de8a:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1de8e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1de92:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1de96:	40bb      	lsls	r3, r7
   1de98:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1de9c:	fa1f f888 	uxth.w	r8, r8
   1dea0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1dea4:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1dea6:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1deaa:	4b35      	ldr	r3, [pc, #212]	; (1df80 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1deac:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1deb0:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1deb4:	eba0 000a 	sub.w	r0, r0, sl
   1deb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1debc:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1dec0:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1dec2:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1dec6:	d107      	bne.n	1ded8 <compare_set+0xa8>
   1dec8:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1deca:	2013      	movs	r0, #19
   1decc:	f00d fe5f 	bl	2bb8e <z_impl_k_busy_wait>
   1ded0:	f06f 0101 	mvn.w	r1, #1
   1ded4:	4b2a      	ldr	r3, [pc, #168]	; (1df80 <compare_set+0x150>)
   1ded6:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1ded8:	eba1 000a 	sub.w	r0, r1, sl
   1dedc:	4430      	add	r0, r6
   1dede:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1dee2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dee6:	f04f 0000 	mov.w	r0, #0
   1deea:	f8c8 0000 	str.w	r0, [r8]
   1deee:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1def2:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1def4:	bf88      	it	hi
   1def6:	eb0a 060b 	addhi.w	r6, sl, fp
   1defa:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1defe:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1df02:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1df06:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1df0a:	bf88      	it	hi
   1df0c:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1df10:	4582      	cmp	sl, r0
   1df12:	d006      	beq.n	1df22 <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1df14:	1a08      	subs	r0, r1, r0
   1df16:	4430      	add	r0, r6
   1df18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1df1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1df20:	d81a      	bhi.n	1df58 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1df22:	1ab6      	subs	r6, r6, r2
   1df24:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1df28:	1936      	adds	r6, r6, r4
   1df2a:	f145 0300 	adc.w	r3, r5, #0
   1df2e:	4634      	mov	r4, r6
   1df30:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1df32:	4912      	ldr	r1, [pc, #72]	; (1df7c <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1df34:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1df36:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1df3a:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1df3e:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1df40:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1df42:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1df44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1df46:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1df48:	4638      	mov	r0, r7
   1df4a:	9901      	ldr	r1, [sp, #4]
   1df4c:	f7ff fed8 	bl	1dd00 <compare_int_unlock>
}
   1df50:	4620      	mov	r0, r4
   1df52:	b005      	add	sp, #20
   1df54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df58:	4630      	mov	r0, r6
   1df5a:	e7a9      	b.n	1deb0 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1df5c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1df5e:	4a09      	ldr	r2, [pc, #36]	; (1df84 <compare_set+0x154>)
   1df60:	40bb      	lsls	r3, r7
   1df62:	e8d2 0fef 	ldaex	r0, [r2]
   1df66:	4318      	orrs	r0, r3
   1df68:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1df6c:	2900      	cmp	r1, #0
   1df6e:	d0e0      	beq.n	1df32 <compare_set+0x102>
   1df70:	e7f7      	b.n	1df62 <compare_set+0x132>
			return -EINVAL;
   1df72:	f06f 0415 	mvn.w	r4, #21
   1df76:	e7e7      	b.n	1df48 <compare_set+0x118>
   1df78:	01000001 	.word	0x01000001
   1df7c:	2000a0d8 	.word	0x2000a0d8
   1df80:	40015000 	.word	0x40015000
   1df84:	20021858 	.word	0x20021858

0001df88 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1df88:	2801      	cmp	r0, #1
{
   1df8a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1df8c:	d00b      	beq.n	1dfa6 <z_nrf_rtc_timer_set+0x1e>
   1df8e:	4908      	ldr	r1, [pc, #32]	; (1dfb0 <z_nrf_rtc_timer_set+0x28>)
   1df90:	4808      	ldr	r0, [pc, #32]	; (1dfb4 <z_nrf_rtc_timer_set+0x2c>)
   1df92:	f240 1353 	movw	r3, #339	; 0x153
   1df96:	4a08      	ldr	r2, [pc, #32]	; (1dfb8 <z_nrf_rtc_timer_set+0x30>)
   1df98:	f008 feeb 	bl	26d72 <assert_print>
   1df9c:	f240 1153 	movw	r1, #339	; 0x153
   1dfa0:	4805      	ldr	r0, [pc, #20]	; (1dfb8 <z_nrf_rtc_timer_set+0x30>)
   1dfa2:	f008 fedf 	bl	26d64 <assert_post_action>
}
   1dfa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1dfaa:	f7ff bf41 	b.w	1de30 <compare_set>
   1dfae:	bf00      	nop
   1dfb0:	0003282c 	.word	0x0003282c
   1dfb4:	0002dd81 	.word	0x0002dd81
   1dfb8:	000327df 	.word	0x000327df

0001dfbc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1dfbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1dfbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1dfc2:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dfc4:	f04f 30ff 	mov.w	r0, #4294967295
   1dfc8:	f04f 31ff 	mov.w	r1, #4294967295
   1dfcc:	4c19      	ldr	r4, [pc, #100]	; (1e034 <sys_clock_driver_init+0x78>)
   1dfce:	4b1a      	ldr	r3, [pc, #104]	; (1e038 <sys_clock_driver_init+0x7c>)
   1dfd0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1dfd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1dfd8:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1dfdc:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1dfe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1dfe4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dfe6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1dfea:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1dfee:	4b13      	ldr	r3, [pc, #76]	; (1e03c <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1dff0:	2101      	movs	r1, #1
   1dff2:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1dff6:	2015      	movs	r0, #21
   1dff8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1dffc:	462a      	mov	r2, r5
   1dffe:	f7f2 fd9f 	bl	10b40 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e002:	2015      	movs	r0, #21
   1e004:	f7f2 fd6c 	bl	10ae0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e008:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e00a:	2203      	movs	r2, #3
   1e00c:	60a3      	str	r3, [r4, #8]
   1e00e:	6023      	str	r3, [r4, #0]
   1e010:	4b0b      	ldr	r3, [pc, #44]	; (1e040 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e012:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1e014:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e016:	4b0b      	ldr	r3, [pc, #44]	; (1e044 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e018:	4a0b      	ldr	r2, [pc, #44]	; (1e048 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e01a:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e01c:	4b0b      	ldr	r3, [pc, #44]	; (1e04c <sys_clock_driver_init+0x90>)
   1e01e:	9501      	str	r5, [sp, #4]
   1e020:	9300      	str	r3, [sp, #0]
   1e022:	2300      	movs	r3, #0
   1e024:	f7ff ff04 	bl	1de30 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e028:	4630      	mov	r0, r6
   1e02a:	f7fd fce5 	bl	1b9f8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e02e:	4628      	mov	r0, r5
   1e030:	b002      	add	sp, #8
   1e032:	bd70      	pop	{r4, r5, r6, pc}
   1e034:	40015000 	.word	0x40015000
   1e038:	2000a0d8 	.word	0x2000a0d8
   1e03c:	e000e100 	.word	0xe000e100
   1e040:	20021860 	.word	0x20021860
   1e044:	2002185c 	.word	0x2002185c
   1e048:	007fffff 	.word	0x007fffff
   1e04c:	0001dc81 	.word	0x0001dc81

0001e050 <rtc_nrf_isr>:
{
   1e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1e054:	4b3f      	ldr	r3, [pc, #252]	; (1e154 <rtc_nrf_isr+0x104>)
   1e056:	b085      	sub	sp, #20
   1e058:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e05c:	0792      	lsls	r2, r2, #30
   1e05e:	d50b      	bpl.n	1e078 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e060:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e064:	b142      	cbz	r2, 1e078 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e066:	2200      	movs	r2, #0
   1e068:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1e06c:	4a3a      	ldr	r2, [pc, #232]	; (1e158 <rtc_nrf_isr+0x108>)
   1e06e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e072:	6813      	ldr	r3, [r2, #0]
   1e074:	3301      	adds	r3, #1
   1e076:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e078:	4d38      	ldr	r5, [pc, #224]	; (1e15c <rtc_nrf_isr+0x10c>)
   1e07a:	2400      	movs	r4, #0
   1e07c:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e07e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1e082:	4e34      	ldr	r6, [pc, #208]	; (1e154 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1e084:	f04f 0320 	mov.w	r3, #32
   1e088:	f3ef 8211 	mrs	r2, BASEPRI
   1e08c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e090:	f3bf 8f6f 	isb	sy
   1e094:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1e098:	fa0b f904 	lsl.w	r9, fp, r4
   1e09c:	ea19 0f03 	tst.w	r9, r3
   1e0a0:	d10a      	bne.n	1e0b8 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1e0a2:	f382 8811 	msr	BASEPRI, r2
   1e0a6:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e0aa:	3510      	adds	r5, #16
   1e0ac:	b114      	cbz	r4, 1e0b4 <rtc_nrf_isr+0x64>
}
   1e0ae:	b005      	add	sp, #20
   1e0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e0b4:	2401      	movs	r4, #1
   1e0b6:	e7e5      	b.n	1e084 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e0b8:	2301      	movs	r3, #1
   1e0ba:	40a3      	lsls	r3, r4
   1e0bc:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e0be:	4928      	ldr	r1, [pc, #160]	; (1e160 <rtc_nrf_isr+0x110>)
   1e0c0:	e8d1 0fef 	ldaex	r0, [r1]
   1e0c4:	ea00 0c03 	and.w	ip, r0, r3
   1e0c8:	e8c1 cfee 	stlex	lr, ip, [r1]
   1e0cc:	f1be 0f00 	cmp.w	lr, #0
   1e0d0:	d1f6      	bne.n	1e0c0 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e0d2:	4b24      	ldr	r3, [pc, #144]	; (1e164 <rtc_nrf_isr+0x114>)
   1e0d4:	00a1      	lsls	r1, r4, #2
   1e0d6:	b918      	cbnz	r0, 1e0e0 <rtc_nrf_isr+0x90>
   1e0d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1e0dc:	2800      	cmp	r0, #0
   1e0de:	d0e0      	beq.n	1e0a2 <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e0e0:	f04f 0a00 	mov.w	sl, #0
   1e0e4:	f841 a003 	str.w	sl, [r1, r3]
   1e0e8:	58cb      	ldr	r3, [r1, r3]
   1e0ea:	f382 8811 	msr	BASEPRI, r2
   1e0ee:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1e0f2:	f7ff fe7b 	bl	1ddec <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1e0f6:	f04f 0320 	mov.w	r3, #32
   1e0fa:	f3ef 8c11 	mrs	ip, BASEPRI
   1e0fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1e102:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1e106:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1e10a:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1e10e:	4290      	cmp	r0, r2
   1e110:	4199      	sbcs	r1, r3
   1e112:	d204      	bcs.n	1e11e <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1e114:	f38c 8811 	msr	BASEPRI, ip
   1e118:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e11c:	e7c5      	b.n	1e0aa <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1e11e:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e122:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1e126:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e128:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1e12c:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e130:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1e134:	4907      	ldr	r1, [pc, #28]	; (1e154 <rtc_nrf_isr+0x104>)
   1e136:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1e13a:	f38c 8811 	msr	BASEPRI, ip
   1e13e:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e142:	f1b8 0f00 	cmp.w	r8, #0
   1e146:	d0b0      	beq.n	1e0aa <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1e148:	9903      	ldr	r1, [sp, #12]
   1e14a:	4620      	mov	r0, r4
   1e14c:	9100      	str	r1, [sp, #0]
   1e14e:	47c0      	blx	r8
   1e150:	e7ab      	b.n	1e0aa <rtc_nrf_isr+0x5a>
   1e152:	bf00      	nop
   1e154:	40015000 	.word	0x40015000
   1e158:	20021864 	.word	0x20021864
   1e15c:	2000a0d8 	.word	0x2000a0d8
   1e160:	20021858 	.word	0x20021858
   1e164:	40015140 	.word	0x40015140

0001e168 <z_nrf_rtc_timer_chan_alloc>:
{
   1e168:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e16a:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1e16c:	4b0c      	ldr	r3, [pc, #48]	; (1e1a0 <z_nrf_rtc_timer_chan_alloc+0x38>)
   1e16e:	6818      	ldr	r0, [r3, #0]
   1e170:	b190      	cbz	r0, 1e198 <z_nrf_rtc_timer_chan_alloc+0x30>
   1e172:	fab0 f080 	clz	r0, r0
   1e176:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e17a:	fa04 f100 	lsl.w	r1, r4, r0
   1e17e:	43c9      	mvns	r1, r1
   1e180:	e8d3 2fef 	ldaex	r2, [r3]
   1e184:	ea02 0501 	and.w	r5, r2, r1
   1e188:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1e18c:	2e00      	cmp	r6, #0
   1e18e:	d1f7      	bne.n	1e180 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1e190:	40c2      	lsrs	r2, r0
   1e192:	07d2      	lsls	r2, r2, #31
   1e194:	d5eb      	bpl.n	1e16e <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1e196:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1e198:	f06f 000b 	mvn.w	r0, #11
   1e19c:	e7fb      	b.n	1e196 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1e19e:	bf00      	nop
   1e1a0:	2002185c 	.word	0x2002185c

0001e1a4 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e1a4:	2801      	cmp	r0, #1
{
   1e1a6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e1a8:	d00b      	beq.n	1e1c2 <z_nrf_rtc_timer_chan_free+0x1e>
   1e1aa:	490b      	ldr	r1, [pc, #44]	; (1e1d8 <z_nrf_rtc_timer_chan_free+0x34>)
   1e1ac:	480b      	ldr	r0, [pc, #44]	; (1e1dc <z_nrf_rtc_timer_chan_free+0x38>)
   1e1ae:	f240 2321 	movw	r3, #545	; 0x221
   1e1b2:	4a0b      	ldr	r2, [pc, #44]	; (1e1e0 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e1b4:	f008 fddd 	bl	26d72 <assert_print>
   1e1b8:	f240 2121 	movw	r1, #545	; 0x221
   1e1bc:	4808      	ldr	r0, [pc, #32]	; (1e1e0 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e1be:	f008 fdd1 	bl	26d64 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e1c2:	4b08      	ldr	r3, [pc, #32]	; (1e1e4 <z_nrf_rtc_timer_chan_free+0x40>)
   1e1c4:	e8d3 1fef 	ldaex	r1, [r3]
   1e1c8:	f041 0102 	orr.w	r1, r1, #2
   1e1cc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e1d0:	2a00      	cmp	r2, #0
   1e1d2:	d1f7      	bne.n	1e1c4 <z_nrf_rtc_timer_chan_free+0x20>
}
   1e1d4:	bd08      	pop	{r3, pc}
   1e1d6:	bf00      	nop
   1e1d8:	0003282c 	.word	0x0003282c
   1e1dc:	0002dd81 	.word	0x0002dd81
   1e1e0:	000327df 	.word	0x000327df
   1e1e4:	2002185c 	.word	0x2002185c

0001e1e8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e1e8:	1c43      	adds	r3, r0, #1
{
   1e1ea:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e1ec:	d020      	beq.n	1e230 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e1ee:	2801      	cmp	r0, #1
   1e1f0:	dd20      	ble.n	1e234 <sys_clock_set_timeout+0x4c>
   1e1f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e1f6:	da1f      	bge.n	1e238 <sys_clock_set_timeout+0x50>
   1e1f8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e1fa:	f7ff fdf7 	bl	1ddec <z_nrf_rtc_timer_read>
   1e1fe:	4b0f      	ldr	r3, [pc, #60]	; (1e23c <sys_clock_set_timeout+0x54>)
   1e200:	e9d3 1300 	ldrd	r1, r3, [r3]
   1e204:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1e206:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1e20a:	bf28      	it	cs
   1e20c:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1e20e:	480c      	ldr	r0, [pc, #48]	; (1e240 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e210:	3201      	adds	r2, #1
   1e212:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1e214:	4282      	cmp	r2, r0
   1e216:	bf28      	it	cs
   1e218:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1e21a:	2000      	movs	r0, #0
   1e21c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e21e:	4909      	ldr	r1, [pc, #36]	; (1e244 <sys_clock_set_timeout+0x5c>)
   1e220:	9001      	str	r0, [sp, #4]
   1e222:	9100      	str	r1, [sp, #0]
   1e224:	f143 0300 	adc.w	r3, r3, #0
   1e228:	f7ff fe02 	bl	1de30 <compare_set>
}
   1e22c:	b002      	add	sp, #8
   1e22e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e230:	4803      	ldr	r0, [pc, #12]	; (1e240 <sys_clock_set_timeout+0x58>)
   1e232:	e7e1      	b.n	1e1f8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e234:	2400      	movs	r4, #0
   1e236:	e7e0      	b.n	1e1fa <sys_clock_set_timeout+0x12>
   1e238:	4c01      	ldr	r4, [pc, #4]	; (1e240 <sys_clock_set_timeout+0x58>)
   1e23a:	e7de      	b.n	1e1fa <sys_clock_set_timeout+0x12>
   1e23c:	2000a0f8 	.word	0x2000a0f8
   1e240:	007fffff 	.word	0x007fffff
   1e244:	0001dc81 	.word	0x0001dc81

0001e248 <sys_clock_elapsed>:
{
   1e248:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e24a:	f7ff fdcf 	bl	1ddec <z_nrf_rtc_timer_read>
   1e24e:	4b02      	ldr	r3, [pc, #8]	; (1e258 <sys_clock_elapsed+0x10>)
   1e250:	681b      	ldr	r3, [r3, #0]
}
   1e252:	1ac0      	subs	r0, r0, r3
   1e254:	bd08      	pop	{r3, pc}
   1e256:	bf00      	nop
   1e258:	2000a0f8 	.word	0x2000a0f8

0001e25c <nrf_gpio_pin_port_decode>:
{
   1e25c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e25e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1e260:	095a      	lsrs	r2, r3, #5
   1e262:	d00d      	beq.n	1e280 <nrf_gpio_pin_port_decode+0x24>
   1e264:	2a01      	cmp	r2, #1
   1e266:	d013      	beq.n	1e290 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e268:	490e      	ldr	r1, [pc, #56]	; (1e2a4 <nrf_gpio_pin_port_decode+0x48>)
   1e26a:	480f      	ldr	r0, [pc, #60]	; (1e2a8 <nrf_gpio_pin_port_decode+0x4c>)
   1e26c:	f240 2347 	movw	r3, #583	; 0x247
   1e270:	4a0e      	ldr	r2, [pc, #56]	; (1e2ac <nrf_gpio_pin_port_decode+0x50>)
   1e272:	f008 fd7e 	bl	26d72 <assert_print>
   1e276:	f240 2147 	movw	r1, #583	; 0x247
   1e27a:	480c      	ldr	r0, [pc, #48]	; (1e2ac <nrf_gpio_pin_port_decode+0x50>)
   1e27c:	f008 fd72 	bl	26d64 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1e280:	f04f 32ff 	mov.w	r2, #4294967295
   1e284:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e288:	07d9      	lsls	r1, r3, #31
   1e28a:	d5ed      	bpl.n	1e268 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1e28c:	4808      	ldr	r0, [pc, #32]	; (1e2b0 <nrf_gpio_pin_port_decode+0x54>)
   1e28e:	e008      	b.n	1e2a2 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1e290:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1e294:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e298:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e29a:	07d2      	lsls	r2, r2, #31
   1e29c:	d5e4      	bpl.n	1e268 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1e29e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1e2a0:	4804      	ldr	r0, [pc, #16]	; (1e2b4 <nrf_gpio_pin_port_decode+0x58>)
}
   1e2a2:	bd08      	pop	{r3, pc}
   1e2a4:	00032104 	.word	0x00032104
   1e2a8:	0002dd81 	.word	0x0002dd81
   1e2ac:	000320d1 	.word	0x000320d1
   1e2b0:	40842500 	.word	0x40842500
   1e2b4:	40842800 	.word	0x40842800

0001e2b8 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1e2b8:	b510      	push	{r4, lr}
   1e2ba:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1e2bc:	6902      	ldr	r2, [r0, #16]
{
   1e2be:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   1e2c0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1e2c4:	4925      	ldr	r1, [pc, #148]	; (1e35c <mbox_nrf_init+0xa4>)
   1e2c6:	2000      	movs	r0, #0
   1e2c8:	f001 f806 	bl	1f2d8 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e2cc:	2200      	movs	r2, #0
   1e2ce:	2101      	movs	r1, #1
   1e2d0:	202a      	movs	r0, #42	; 0x2a
   1e2d2:	f7f2 fc35 	bl	10b40 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1e2d6:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1e2d8:	2284      	movs	r2, #132	; 0x84
   1e2da:	2100      	movs	r1, #0
   1e2dc:	a807      	add	r0, sp, #28
   1e2de:	f00d fda7 	bl	2be30 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1e2e2:	6863      	ldr	r3, [r4, #4]
   1e2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e2e8:	d30a      	bcc.n	1e300 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1e2ea:	4b1d      	ldr	r3, [pc, #116]	; (1e360 <mbox_nrf_init+0xa8>)
   1e2ec:	9305      	str	r3, [sp, #20]
   1e2ee:	2302      	movs	r3, #2
   1e2f0:	9304      	str	r3, [sp, #16]
   1e2f2:	2300      	movs	r3, #0
   1e2f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e2f8:	481a      	ldr	r0, [pc, #104]	; (1e364 <mbox_nrf_init+0xac>)
   1e2fa:	aa04      	add	r2, sp, #16
   1e2fc:	f7f0 fb2a 	bl	e954 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1e300:	6823      	ldr	r3, [r4, #0]
   1e302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e306:	d30a      	bcc.n	1e31e <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1e308:	4b17      	ldr	r3, [pc, #92]	; (1e368 <mbox_nrf_init+0xb0>)
   1e30a:	9305      	str	r3, [sp, #20]
   1e30c:	2302      	movs	r3, #2
   1e30e:	9304      	str	r3, [sp, #16]
   1e310:	2300      	movs	r3, #0
   1e312:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e316:	4813      	ldr	r0, [pc, #76]	; (1e364 <mbox_nrf_init+0xac>)
   1e318:	aa04      	add	r2, sp, #16
   1e31a:	f7f0 fb1b 	bl	e954 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   1e31e:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1e320:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1e322:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e324:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   1e326:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e328:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1e32a:	40d9      	lsrs	r1, r3
   1e32c:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1e32e:	bf44      	itt	mi
   1e330:	fa00 f103 	lslmi.w	r1, r0, r3
   1e334:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1e338:	6821      	ldr	r1, [r4, #0]
   1e33a:	40d9      	lsrs	r1, r3
   1e33c:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1e33e:	bf48      	it	mi
   1e340:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e344:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1e348:	bf48      	it	mi
   1e34a:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e34c:	2b10      	cmp	r3, #16
   1e34e:	d1ea      	bne.n	1e326 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   1e350:	a807      	add	r0, sp, #28
   1e352:	f000 ffd9 	bl	1f308 <nrfx_ipc_config_load>

	return 0;
}
   1e356:	2000      	movs	r0, #0
   1e358:	b028      	add	sp, #160	; 0xa0
   1e35a:	bd10      	pop	{r4, pc}
   1e35c:	0001e461 	.word	0x0001e461
   1e360:	00032847 	.word	0x00032847
   1e364:	0002cd68 	.word	0x0002cd68
   1e368:	00032873 	.word	0x00032873

0001e36c <mbox_nrf_set_enabled>:
{
   1e36c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e36e:	290f      	cmp	r1, #15
{
   1e370:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1e372:	6905      	ldr	r5, [r0, #16]
{
   1e374:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e376:	d842      	bhi.n	1e3fe <mbox_nrf_set_enabled+0x92>
   1e378:	6843      	ldr	r3, [r0, #4]
   1e37a:	681b      	ldr	r3, [r3, #0]
   1e37c:	40cb      	lsrs	r3, r1
   1e37e:	07db      	lsls	r3, r3, #31
   1e380:	d53d      	bpl.n	1e3fe <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1e382:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e386:	40cb      	lsrs	r3, r1
   1e388:	f003 0301 	and.w	r3, r3, #1
   1e38c:	b91a      	cbnz	r2, 1e396 <mbox_nrf_set_enabled+0x2a>
   1e38e:	bb13      	cbnz	r3, 1e3d6 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   1e390:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e394:	e031      	b.n	1e3fa <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1e396:	2b00      	cmp	r3, #0
   1e398:	d1fa      	bne.n	1e390 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1e39a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1e39e:	b94b      	cbnz	r3, 1e3b4 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   1e3a0:	4a18      	ldr	r2, [pc, #96]	; (1e404 <mbox_nrf_set_enabled+0x98>)
   1e3a2:	9205      	str	r2, [sp, #20]
   1e3a4:	2202      	movs	r2, #2
   1e3a6:	9204      	str	r2, [sp, #16]
   1e3a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e3ac:	4816      	ldr	r0, [pc, #88]	; (1e408 <mbox_nrf_set_enabled+0x9c>)
   1e3ae:	aa04      	add	r2, sp, #16
   1e3b0:	f7f0 fad0 	bl	e954 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   1e3b4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e3b8:	b913      	cbnz	r3, 1e3c0 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   1e3ba:	202a      	movs	r0, #42	; 0x2a
   1e3bc:	f7f2 fb90 	bl	10ae0 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1e3c0:	2201      	movs	r2, #1
   1e3c2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e3c6:	40a2      	lsls	r2, r4
   1e3c8:	4313      	orrs	r3, r2
   1e3ca:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1e3ce:	b2e0      	uxtb	r0, r4
   1e3d0:	f000 ffdc 	bl	1f38c <nrfx_ipc_receive_event_enable>
   1e3d4:	e00a      	b.n	1e3ec <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   1e3d6:	b2c8      	uxtb	r0, r1
   1e3d8:	f000 fff6 	bl	1f3c8 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1e3dc:	2201      	movs	r2, #1
   1e3de:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e3e2:	40a2      	lsls	r2, r4
   1e3e4:	ea23 0302 	bic.w	r3, r3, r2
   1e3e8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1e3ec:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e3f0:	b913      	cbnz	r3, 1e3f8 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   1e3f2:	202a      	movs	r0, #42	; 0x2a
   1e3f4:	f7f2 fb82 	bl	10afc <arch_irq_disable>
	return 0;
   1e3f8:	2000      	movs	r0, #0
}
   1e3fa:	b007      	add	sp, #28
   1e3fc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e3fe:	f06f 0015 	mvn.w	r0, #21
   1e402:	e7fa      	b.n	1e3fa <mbox_nrf_set_enabled+0x8e>
   1e404:	0003289f 	.word	0x0003289f
   1e408:	0002cd68 	.word	0x0002cd68

0001e40c <mbox_nrf_send>:
{
   1e40c:	b530      	push	{r4, r5, lr}
   1e40e:	4605      	mov	r5, r0
   1e410:	460c      	mov	r4, r1
   1e412:	b087      	sub	sp, #28
	if (msg) {
   1e414:	b152      	cbz	r2, 1e42c <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   1e416:	4b10      	ldr	r3, [pc, #64]	; (1e458 <mbox_nrf_send+0x4c>)
   1e418:	9305      	str	r3, [sp, #20]
   1e41a:	2302      	movs	r3, #2
   1e41c:	9304      	str	r3, [sp, #16]
   1e41e:	2300      	movs	r3, #0
   1e420:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e424:	480d      	ldr	r0, [pc, #52]	; (1e45c <mbox_nrf_send+0x50>)
   1e426:	aa04      	add	r2, sp, #16
   1e428:	f7f0 fa94 	bl	e954 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1e42c:	2c0f      	cmp	r4, #15
   1e42e:	d80f      	bhi.n	1e450 <mbox_nrf_send+0x44>
   1e430:	686b      	ldr	r3, [r5, #4]
   1e432:	685b      	ldr	r3, [r3, #4]
   1e434:	40e3      	lsrs	r3, r4
   1e436:	07db      	lsls	r3, r3, #31
   1e438:	d50a      	bpl.n	1e450 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e43a:	2301      	movs	r3, #1
	return 0;
   1e43c:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1e43e:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e440:	b2e4      	uxtb	r4, r4
   1e442:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e446:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1e44a:	6023      	str	r3, [r4, #0]
}
   1e44c:	b007      	add	sp, #28
   1e44e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e450:	f06f 0015 	mvn.w	r0, #21
   1e454:	e7fa      	b.n	1e44c <mbox_nrf_send+0x40>
   1e456:	bf00      	nop
   1e458:	000328cf 	.word	0x000328cf
   1e45c:	0002cd68 	.word	0x0002cd68

0001e460 <mbox_dispatcher>:
{
   1e460:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1e462:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e466:	280f      	cmp	r0, #15
{
   1e468:	4604      	mov	r4, r0
   1e46a:	460d      	mov	r5, r1
   1e46c:	6873      	ldr	r3, [r6, #4]
   1e46e:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e470:	d803      	bhi.n	1e47a <mbox_dispatcher+0x1a>
   1e472:	681b      	ldr	r3, [r3, #0]
   1e474:	40c3      	lsrs	r3, r0
   1e476:	07db      	lsls	r3, r3, #31
   1e478:	d40a      	bmi.n	1e490 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   1e47a:	4b15      	ldr	r3, [pc, #84]	; (1e4d0 <mbox_dispatcher+0x70>)
   1e47c:	9305      	str	r3, [sp, #20]
   1e47e:	2302      	movs	r3, #2
   1e480:	9304      	str	r3, [sp, #16]
   1e482:	2300      	movs	r3, #0
   1e484:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e488:	4812      	ldr	r0, [pc, #72]	; (1e4d4 <mbox_dispatcher+0x74>)
   1e48a:	aa04      	add	r2, sp, #16
   1e48c:	f7f0 fa62 	bl	e954 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   1e490:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e494:	40e3      	lsrs	r3, r4
   1e496:	f013 0301 	ands.w	r3, r3, #1
   1e49a:	d109      	bne.n	1e4b0 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   1e49c:	4a0e      	ldr	r2, [pc, #56]	; (1e4d8 <mbox_dispatcher+0x78>)
   1e49e:	9205      	str	r2, [sp, #20]
   1e4a0:	2202      	movs	r2, #2
   1e4a2:	9204      	str	r2, [sp, #16]
   1e4a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e4a8:	480a      	ldr	r0, [pc, #40]	; (1e4d4 <mbox_dispatcher+0x74>)
   1e4aa:	aa04      	add	r2, sp, #16
   1e4ac:	f7f0 fa52 	bl	e954 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   1e4b0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1e4b4:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1e4b8:	b145      	cbz	r5, 1e4cc <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1e4ba:	2300      	movs	r3, #0
   1e4bc:	4621      	mov	r1, r4
   1e4be:	4630      	mov	r0, r6
   1e4c0:	46ac      	mov	ip, r5
   1e4c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1e4c4:	b006      	add	sp, #24
   1e4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1e4ca:	4760      	bx	ip
}
   1e4cc:	b006      	add	sp, #24
   1e4ce:	bd70      	pop	{r4, r5, r6, pc}
   1e4d0:	000328ea 	.word	0x000328ea
   1e4d4:	0002cd68 	.word	0x0002cd68
   1e4d8:	00032906 	.word	0x00032906

0001e4dc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1e4dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1e4de:	f7f0 f8d3 	bl	e688 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1e4e2:	4b07      	ldr	r3, [pc, #28]	; (1e500 <k_sys_fatal_error_handler+0x24>)
   1e4e4:	9305      	str	r3, [sp, #20]
   1e4e6:	2302      	movs	r3, #2
   1e4e8:	9304      	str	r3, [sp, #16]
   1e4ea:	4806      	ldr	r0, [pc, #24]	; (1e504 <k_sys_fatal_error_handler+0x28>)
   1e4ec:	2300      	movs	r3, #0
   1e4ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e4f2:	aa04      	add	r2, sp, #16
   1e4f4:	f7f0 fa2e 	bl	e954 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1e4f8:	2000      	movs	r0, #0
   1e4fa:	f7f2 ffaf 	bl	1145c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1e4fe:	bf00      	nop
   1e500:	00032950 	.word	0x00032950
   1e504:	0002cd30 	.word	0x0002cd30

0001e508 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e50c:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1e50e:	4b15      	ldr	r3, [pc, #84]	; (1e564 <tfm_ns_interface_dispatch+0x5c>)
   1e510:	4604      	mov	r4, r0
   1e512:	f893 8000 	ldrb.w	r8, [r3]
   1e516:	460d      	mov	r5, r1
   1e518:	4616      	mov	r6, r2
   1e51a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1e51c:	f1b8 0f00 	cmp.w	r8, #0
   1e520:	d115      	bne.n	1e54e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1e522:	4668      	mov	r0, sp
   1e524:	f009 ff75 	bl	28412 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1e528:	463a      	mov	r2, r7
   1e52a:	4631      	mov	r1, r6
   1e52c:	4628      	mov	r0, r5
   1e52e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1e530:	47a0      	blx	r4
   1e532:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1e534:	4668      	mov	r0, sp
   1e536:	f009 ff6d 	bl	28414 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1e53a:	f1b8 0f00 	cmp.w	r8, #0
   1e53e:	d002      	beq.n	1e546 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1e540:	4809      	ldr	r0, [pc, #36]	; (1e568 <tfm_ns_interface_dispatch+0x60>)
   1e542:	f003 fa13 	bl	2196c <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1e546:	4620      	mov	r0, r4
   1e548:	b022      	add	sp, #136	; 0x88
   1e54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1e54e:	f04f 32ff 	mov.w	r2, #4294967295
   1e552:	f04f 33ff 	mov.w	r3, #4294967295
   1e556:	4804      	ldr	r0, [pc, #16]	; (1e568 <tfm_ns_interface_dispatch+0x60>)
   1e558:	f003 f938 	bl	217cc <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1e55c:	2800      	cmp	r0, #0
   1e55e:	d0e0      	beq.n	1e522 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1e560:	241f      	movs	r4, #31
   1e562:	e7f0      	b.n	1e546 <tfm_ns_interface_dispatch+0x3e>
   1e564:	200227bf 	.word	0x200227bf
   1e568:	20008b38 	.word	0x20008b38

0001e56c <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1e56c:	b530      	push	{r4, r5, lr}
   1e56e:	b095      	sub	sp, #84	; 0x54
   1e570:	4605      	mov	r5, r0
   1e572:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1e574:	2230      	movs	r2, #48	; 0x30
   1e576:	2100      	movs	r1, #0
   1e578:	a808      	add	r0, sp, #32
   1e57a:	f00d fc59 	bl	2be30 <memset>
   1e57e:	233f      	movs	r3, #63	; 0x3f
   1e580:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1e582:	ab07      	add	r3, sp, #28
   1e584:	9303      	str	r3, [sp, #12]
   1e586:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1e588:	9406      	str	r4, [sp, #24]
   1e58a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1e58e:	b154      	cbz	r4, 1e5a6 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1e590:	2301      	movs	r3, #1
   1e592:	aa05      	add	r2, sp, #20
   1e594:	9200      	str	r2, [sp, #0]
   1e596:	2100      	movs	r1, #0
   1e598:	4804      	ldr	r0, [pc, #16]	; (1e5ac <psa_generate_random+0x40>)
   1e59a:	9301      	str	r3, [sp, #4]
   1e59c:	aa03      	add	r2, sp, #12
   1e59e:	f000 f807 	bl	1e5b0 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1e5a2:	b015      	add	sp, #84	; 0x54
   1e5a4:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1e5a6:	4620      	mov	r0, r4
   1e5a8:	e7fb      	b.n	1e5a2 <psa_generate_random+0x36>
   1e5aa:	bf00      	nop
   1e5ac:	40000100 	.word	0x40000100

0001e5b0 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1e5b0:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1e5b2:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1e5b6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1e5ba:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1e5bc:	d20d      	bcs.n	1e5da <psa_call+0x2a>
        (type < INT16_MIN) ||
   1e5be:	ea43 0504 	orr.w	r5, r3, r4
   1e5c2:	2dff      	cmp	r5, #255	; 0xff
   1e5c4:	d809      	bhi.n	1e5da <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1e5c6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1e5ca:	4613      	mov	r3, r2
   1e5cc:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1e5d0:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1e5d2:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1e5d4:	4803      	ldr	r0, [pc, #12]	; (1e5e4 <psa_call+0x34>)
   1e5d6:	f7ff bf97 	b.w	1e508 <tfm_ns_interface_dispatch>
}
   1e5da:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1e5de:	bc30      	pop	{r4, r5}
   1e5e0:	4770      	bx	lr
   1e5e2:	bf00      	nop
   1e5e4:	00007c21 	.word	0x00007c21

0001e5e8 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1e5e8:	2300      	movs	r3, #0
{
   1e5ea:	b507      	push	{r0, r1, r2, lr}
   1e5ec:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1e5ee:	9300      	str	r3, [sp, #0]
   1e5f0:	4601      	mov	r1, r0
   1e5f2:	4803      	ldr	r0, [pc, #12]	; (1e600 <psa_connect+0x18>)
   1e5f4:	f7ff ff88 	bl	1e508 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1e5f8:	b003      	add	sp, #12
   1e5fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1e5fe:	bf00      	nop
   1e600:	00007c19 	.word	0x00007c19

0001e604 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1e604:	2300      	movs	r3, #0
{
   1e606:	b507      	push	{r0, r1, r2, lr}
   1e608:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1e60a:	461a      	mov	r2, r3
   1e60c:	9300      	str	r3, [sp, #0]
   1e60e:	4803      	ldr	r0, [pc, #12]	; (1e61c <psa_close+0x18>)
   1e610:	f7ff ff7a 	bl	1e508 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1e614:	b003      	add	sp, #12
   1e616:	f85d fb04 	ldr.w	pc, [sp], #4
   1e61a:	bf00      	nop
   1e61c:	00007c11 	.word	0x00007c11

0001e620 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1e620:	4b04      	ldr	r3, [pc, #16]	; (1e634 <SystemCoreClockUpdate+0x14>)
   1e622:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1e626:	4b04      	ldr	r3, [pc, #16]	; (1e638 <SystemCoreClockUpdate+0x18>)
   1e628:	f002 0203 	and.w	r2, r2, #3
   1e62c:	40d3      	lsrs	r3, r2
   1e62e:	4a03      	ldr	r2, [pc, #12]	; (1e63c <SystemCoreClockUpdate+0x1c>)
   1e630:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1e632:	4770      	bx	lr
   1e634:	40005000 	.word	0x40005000
   1e638:	07a12000 	.word	0x07a12000
   1e63c:	20008694 	.word	0x20008694

0001e640 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1e640:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e642:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1e644:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1e646:	fab2 f382 	clz	r3, r2
   1e64a:	f1c3 031f 	rsb	r3, r3, #31
   1e64e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e650:	fa05 f403 	lsl.w	r4, r5, r3
   1e654:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e658:	e8d0 6fef 	ldaex	r6, [r0]
   1e65c:	4296      	cmp	r6, r2
   1e65e:	d104      	bne.n	1e66a <nrfx_flag32_alloc+0x2a>
   1e660:	e8c0 4fec 	stlex	ip, r4, [r0]
   1e664:	f1bc 0f00 	cmp.w	ip, #0
   1e668:	d1f6      	bne.n	1e658 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e66a:	d1eb      	bne.n	1e644 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1e66c:	4801      	ldr	r0, [pc, #4]	; (1e674 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1e66e:	700b      	strb	r3, [r1, #0]
}
   1e670:	bd70      	pop	{r4, r5, r6, pc}
   1e672:	bf00      	nop
   1e674:	0bad0000 	.word	0x0bad0000

0001e678 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1e678:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1e67a:	6803      	ldr	r3, [r0, #0]
   1e67c:	40cb      	lsrs	r3, r1
   1e67e:	07db      	lsls	r3, r3, #31
   1e680:	d410      	bmi.n	1e6a4 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1e682:	2301      	movs	r3, #1
   1e684:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1e686:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1e688:	ea43 0102 	orr.w	r1, r3, r2
   1e68c:	e8d0 4fef 	ldaex	r4, [r0]
   1e690:	4294      	cmp	r4, r2
   1e692:	d104      	bne.n	1e69e <nrfx_flag32_free+0x26>
   1e694:	e8c0 1fec 	stlex	ip, r1, [r0]
   1e698:	f1bc 0f00 	cmp.w	ip, #0
   1e69c:	d1f6      	bne.n	1e68c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e69e:	d1f2      	bne.n	1e686 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1e6a0:	4801      	ldr	r0, [pc, #4]	; (1e6a8 <nrfx_flag32_free+0x30>)
}
   1e6a2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e6a4:	4801      	ldr	r0, [pc, #4]	; (1e6ac <nrfx_flag32_free+0x34>)
   1e6a6:	e7fc      	b.n	1e6a2 <nrfx_flag32_free+0x2a>
   1e6a8:	0bad0000 	.word	0x0bad0000
   1e6ac:	0bad0004 	.word	0x0bad0004

0001e6b0 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1e6b0:	2200      	movs	r2, #0
{
   1e6b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e6b4:	4b62      	ldr	r3, [pc, #392]	; (1e840 <clock_stop+0x190>)
    switch (domain)
   1e6b6:	2803      	cmp	r0, #3
   1e6b8:	d838      	bhi.n	1e72c <clock_stop+0x7c>
   1e6ba:	e8df f000 	tbb	[pc, r0]
   1e6be:	0d02      	.short	0x0d02
   1e6c0:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1e6c2:	2102      	movs	r1, #2
   1e6c4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e6cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e6d0:	2201      	movs	r2, #1
   1e6d2:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1e6d4:	2400      	movs	r4, #0
   1e6d6:	e009      	b.n	1e6ec <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1e6d8:	2101      	movs	r1, #1
   1e6da:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e6e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1e6e6:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e6ea:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1e6ec:	2301      	movs	r3, #1
   1e6ee:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1e6f2:	2803      	cmp	r0, #3
   1e6f4:	f200 8093 	bhi.w	1e81e <clock_stop+0x16e>
   1e6f8:	e8df f000 	tbb	[pc, r0]
   1e6fc:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1e700:	f44f 7100 	mov.w	r1, #512	; 0x200
   1e704:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e708:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1e70c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e710:	2201      	movs	r2, #1
   1e712:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1e714:	e7de      	b.n	1e6d4 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1e716:	f44f 7180 	mov.w	r1, #256	; 0x100
   1e71a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e71e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1e722:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e726:	2201      	movs	r2, #1
   1e728:	61da      	str	r2, [r3, #28]
   1e72a:	e7d3      	b.n	1e6d4 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1e72c:	4945      	ldr	r1, [pc, #276]	; (1e844 <clock_stop+0x194>)
   1e72e:	4846      	ldr	r0, [pc, #280]	; (1e848 <clock_stop+0x198>)
   1e730:	23d8      	movs	r3, #216	; 0xd8
   1e732:	4a46      	ldr	r2, [pc, #280]	; (1e84c <clock_stop+0x19c>)
   1e734:	f008 fb1d 	bl	26d72 <assert_print>
   1e738:	21d8      	movs	r1, #216	; 0xd8
   1e73a:	4844      	ldr	r0, [pc, #272]	; (1e84c <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1e73c:	f008 fb12 	bl	26d64 <assert_post_action>
    switch (domain)
   1e740:	f242 7510 	movw	r5, #10000	; 0x2710
   1e744:	4e3e      	ldr	r6, [pc, #248]	; (1e840 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1e746:	b194      	cbz	r4, 1e76e <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e748:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e74c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1e750:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e752:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e756:	03d9      	lsls	r1, r3, #15
   1e758:	d507      	bpl.n	1e76a <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1e75a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e75e:	2801      	cmp	r0, #1
   1e760:	d103      	bne.n	1e76a <clock_stop+0xba>
   1e762:	f00c fb2c 	bl	2adbe <nrfx_busy_wait>
   1e766:	3d01      	subs	r5, #1
   1e768:	d1ed      	bne.n	1e746 <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1e76a:	b002      	add	sp, #8
   1e76c:	bd70      	pop	{r4, r5, r6, pc}
   1e76e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e772:	03da      	lsls	r2, r3, #15
   1e774:	d5f9      	bpl.n	1e76a <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1e776:	2001      	movs	r0, #1
   1e778:	f00c fb21 	bl	2adbe <nrfx_busy_wait>
   1e77c:	3d01      	subs	r5, #1
   1e77e:	d1f6      	bne.n	1e76e <clock_stop+0xbe>
   1e780:	e7f3      	b.n	1e76a <clock_stop+0xba>
    switch (domain)
   1e782:	f242 7510 	movw	r5, #10000	; 0x2710
   1e786:	4e2e      	ldr	r6, [pc, #184]	; (1e840 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1e788:	b18c      	cbz	r4, 1e7ae <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e78a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e78e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1e792:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e794:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e798:	03db      	lsls	r3, r3, #15
   1e79a:	d5e6      	bpl.n	1e76a <clock_stop+0xba>
   1e79c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e7a0:	2801      	cmp	r0, #1
   1e7a2:	d1e2      	bne.n	1e76a <clock_stop+0xba>
   1e7a4:	f00c fb0b 	bl	2adbe <nrfx_busy_wait>
   1e7a8:	3d01      	subs	r5, #1
   1e7aa:	d1ed      	bne.n	1e788 <clock_stop+0xd8>
   1e7ac:	e7dd      	b.n	1e76a <clock_stop+0xba>
   1e7ae:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e7b2:	03d8      	lsls	r0, r3, #15
   1e7b4:	d5d9      	bpl.n	1e76a <clock_stop+0xba>
   1e7b6:	2001      	movs	r0, #1
   1e7b8:	f00c fb01 	bl	2adbe <nrfx_busy_wait>
   1e7bc:	3d01      	subs	r5, #1
   1e7be:	d1f6      	bne.n	1e7ae <clock_stop+0xfe>
   1e7c0:	e7d3      	b.n	1e76a <clock_stop+0xba>
    switch (domain)
   1e7c2:	f242 7510 	movw	r5, #10000	; 0x2710
   1e7c6:	4e1e      	ldr	r6, [pc, #120]	; (1e840 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1e7c8:	b18c      	cbz	r4, 1e7ee <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1e7ca:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1e7ce:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1e7d2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1e7d4:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1e7d8:	03d9      	lsls	r1, r3, #15
   1e7da:	d5c6      	bpl.n	1e76a <clock_stop+0xba>
   1e7dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e7e0:	2801      	cmp	r0, #1
   1e7e2:	d1c2      	bne.n	1e76a <clock_stop+0xba>
   1e7e4:	f00c faeb 	bl	2adbe <nrfx_busy_wait>
   1e7e8:	3d01      	subs	r5, #1
   1e7ea:	d1ed      	bne.n	1e7c8 <clock_stop+0x118>
   1e7ec:	e7bd      	b.n	1e76a <clock_stop+0xba>
   1e7ee:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1e7f2:	03da      	lsls	r2, r3, #15
   1e7f4:	d5b9      	bpl.n	1e76a <clock_stop+0xba>
   1e7f6:	2001      	movs	r0, #1
   1e7f8:	f00c fae1 	bl	2adbe <nrfx_busy_wait>
   1e7fc:	3d01      	subs	r5, #1
   1e7fe:	d1f6      	bne.n	1e7ee <clock_stop+0x13e>
   1e800:	e7b3      	b.n	1e76a <clock_stop+0xba>
    switch (domain)
   1e802:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1e806:	4e0e      	ldr	r6, [pc, #56]	; (1e840 <clock_stop+0x190>)
   1e808:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1e80c:	03db      	lsls	r3, r3, #15
   1e80e:	d5ac      	bpl.n	1e76a <clock_stop+0xba>
   1e810:	b984      	cbnz	r4, 1e834 <clock_stop+0x184>
   1e812:	2001      	movs	r0, #1
   1e814:	f00c fad3 	bl	2adbe <nrfx_busy_wait>
   1e818:	3d01      	subs	r5, #1
   1e81a:	d1f5      	bne.n	1e808 <clock_stop+0x158>
   1e81c:	e7a5      	b.n	1e76a <clock_stop+0xba>
            NRFX_ASSERT(0);
   1e81e:	4909      	ldr	r1, [pc, #36]	; (1e844 <clock_stop+0x194>)
   1e820:	4809      	ldr	r0, [pc, #36]	; (1e848 <clock_stop+0x198>)
   1e822:	f240 3347 	movw	r3, #839	; 0x347
   1e826:	4a0a      	ldr	r2, [pc, #40]	; (1e850 <clock_stop+0x1a0>)
   1e828:	f008 faa3 	bl	26d72 <assert_print>
   1e82c:	f240 3147 	movw	r1, #839	; 0x347
   1e830:	4807      	ldr	r0, [pc, #28]	; (1e850 <clock_stop+0x1a0>)
   1e832:	e783      	b.n	1e73c <clock_stop+0x8c>
   1e834:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e838:	2801      	cmp	r0, #1
   1e83a:	d0eb      	beq.n	1e814 <clock_stop+0x164>
   1e83c:	e795      	b.n	1e76a <clock_stop+0xba>
   1e83e:	bf00      	nop
   1e840:	40005000 	.word	0x40005000
   1e844:	00033a12 	.word	0x00033a12
   1e848:	0002dd81 	.word	0x0002dd81
   1e84c:	0003296d 	.word	0x0003296d
   1e850:	000329aa 	.word	0x000329aa

0001e854 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1e854:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1e856:	b958      	cbnz	r0, 1e870 <nrfx_clock_init+0x1c>
   1e858:	490a      	ldr	r1, [pc, #40]	; (1e884 <nrfx_clock_init+0x30>)
   1e85a:	480b      	ldr	r0, [pc, #44]	; (1e888 <nrfx_clock_init+0x34>)
   1e85c:	f240 1315 	movw	r3, #277	; 0x115
   1e860:	4a0a      	ldr	r2, [pc, #40]	; (1e88c <nrfx_clock_init+0x38>)
   1e862:	f008 fa86 	bl	26d72 <assert_print>
   1e866:	f240 1115 	movw	r1, #277	; 0x115
   1e86a:	4808      	ldr	r0, [pc, #32]	; (1e88c <nrfx_clock_init+0x38>)
   1e86c:	f008 fa7a 	bl	26d64 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1e870:	4b07      	ldr	r3, [pc, #28]	; (1e890 <nrfx_clock_init+0x3c>)
   1e872:	791a      	ldrb	r2, [r3, #4]
   1e874:	b922      	cbnz	r2, 1e880 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1e876:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1e878:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1e87a:	4806      	ldr	r0, [pc, #24]	; (1e894 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1e87c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e87e:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1e880:	4805      	ldr	r0, [pc, #20]	; (1e898 <nrfx_clock_init+0x44>)
    return err_code;
   1e882:	e7fc      	b.n	1e87e <nrfx_clock_init+0x2a>
   1e884:	000329de 	.word	0x000329de
   1e888:	0002dd81 	.word	0x0002dd81
   1e88c:	0003296d 	.word	0x0003296d
   1e890:	200218f0 	.word	0x200218f0
   1e894:	0bad0000 	.word	0x0bad0000
   1e898:	0bad000c 	.word	0x0bad000c

0001e89c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1e89c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1e89e:	4b0f      	ldr	r3, [pc, #60]	; (1e8dc <nrfx_clock_enable+0x40>)
   1e8a0:	791b      	ldrb	r3, [r3, #4]
   1e8a2:	b95b      	cbnz	r3, 1e8bc <nrfx_clock_enable+0x20>
   1e8a4:	490e      	ldr	r1, [pc, #56]	; (1e8e0 <nrfx_clock_enable+0x44>)
   1e8a6:	480f      	ldr	r0, [pc, #60]	; (1e8e4 <nrfx_clock_enable+0x48>)
   1e8a8:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1e8ac:	4a0e      	ldr	r2, [pc, #56]	; (1e8e8 <nrfx_clock_enable+0x4c>)
   1e8ae:	f008 fa60 	bl	26d72 <assert_print>
   1e8b2:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1e8b6:	480c      	ldr	r0, [pc, #48]	; (1e8e8 <nrfx_clock_enable+0x4c>)
   1e8b8:	f008 fa54 	bl	26d64 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1e8bc:	2005      	movs	r0, #5
   1e8be:	f7f2 f931 	bl	10b24 <arch_irq_is_enabled>
   1e8c2:	b910      	cbnz	r0, 1e8ca <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1e8c4:	2005      	movs	r0, #5
   1e8c6:	f7f2 f90b 	bl	10ae0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e8ca:	2201      	movs	r2, #1
   1e8cc:	4b07      	ldr	r3, [pc, #28]	; (1e8ec <nrfx_clock_enable+0x50>)
   1e8ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1e8d2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1e8d6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1e8da:	bd08      	pop	{r3, pc}
   1e8dc:	200218f0 	.word	0x200218f0
   1e8e0:	000329ec 	.word	0x000329ec
   1e8e4:	0002dd81 	.word	0x0002dd81
   1e8e8:	0003296d 	.word	0x0003296d
   1e8ec:	40005000 	.word	0x40005000

0001e8f0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1e8f0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1e8f2:	4b38      	ldr	r3, [pc, #224]	; (1e9d4 <nrfx_clock_start+0xe4>)
   1e8f4:	791b      	ldrb	r3, [r3, #4]
   1e8f6:	b95b      	cbnz	r3, 1e910 <nrfx_clock_start+0x20>
   1e8f8:	4937      	ldr	r1, [pc, #220]	; (1e9d8 <nrfx_clock_start+0xe8>)
   1e8fa:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1e8fe:	4a37      	ldr	r2, [pc, #220]	; (1e9dc <nrfx_clock_start+0xec>)
   1e900:	4837      	ldr	r0, [pc, #220]	; (1e9e0 <nrfx_clock_start+0xf0>)
   1e902:	f008 fa36 	bl	26d72 <assert_print>
   1e906:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1e90a:	4834      	ldr	r0, [pc, #208]	; (1e9dc <nrfx_clock_start+0xec>)
   1e90c:	f008 fa2a 	bl	26d64 <assert_post_action>
    switch (domain)
   1e910:	4b34      	ldr	r3, [pc, #208]	; (1e9e4 <nrfx_clock_start+0xf4>)
   1e912:	2803      	cmp	r0, #3
   1e914:	d853      	bhi.n	1e9be <nrfx_clock_start+0xce>
   1e916:	e8df f000 	tbb	[pc, r0]
   1e91a:	3002      	.short	0x3002
   1e91c:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e91e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e922:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1e926:	03c9      	lsls	r1, r1, #15
   1e928:	d511      	bpl.n	1e94e <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e92a:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e92e:	2b02      	cmp	r3, #2
   1e930:	d11c      	bne.n	1e96c <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e932:	4a2c      	ldr	r2, [pc, #176]	; (1e9e4 <nrfx_clock_start+0xf4>)
   1e934:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e938:	2300      	movs	r3, #0
   1e93a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1e93e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1e942:	2302      	movs	r3, #2
   1e944:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e948:	2301      	movs	r3, #1
   1e94a:	6093      	str	r3, [r2, #8]
}
   1e94c:	e00d      	b.n	1e96a <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1e94e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1e952:	07d2      	lsls	r2, r2, #31
   1e954:	d50f      	bpl.n	1e976 <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e956:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1e95a:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e95e:	3a01      	subs	r2, #1
   1e960:	2a01      	cmp	r2, #1
   1e962:	d805      	bhi.n	1e970 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1e964:	2202      	movs	r2, #2
   1e966:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1e96a:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e96c:	2b01      	cmp	r3, #1
   1e96e:	d002      	beq.n	1e976 <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e970:	2000      	movs	r0, #0
   1e972:	f7ff fe9d 	bl	1e6b0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1e976:	2301      	movs	r3, #1
   1e978:	e7db      	b.n	1e932 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e97a:	2200      	movs	r2, #0
   1e97c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e980:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e984:	2201      	movs	r2, #1
   1e986:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e98a:	601a      	str	r2, [r3, #0]
}
   1e98c:	e7ed      	b.n	1e96a <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e98e:	2200      	movs	r2, #0
   1e990:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1e994:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1e998:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e99c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9a0:	2201      	movs	r2, #1
   1e9a2:	621a      	str	r2, [r3, #32]
}
   1e9a4:	e7e1      	b.n	1e96a <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e9a6:	2200      	movs	r2, #0
   1e9a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1e9ac:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1e9b0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e9b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9b8:	2201      	movs	r2, #1
   1e9ba:	619a      	str	r2, [r3, #24]
}
   1e9bc:	e7d5      	b.n	1e96a <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1e9be:	490a      	ldr	r1, [pc, #40]	; (1e9e8 <nrfx_clock_start+0xf8>)
   1e9c0:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1e9c4:	4a05      	ldr	r2, [pc, #20]	; (1e9dc <nrfx_clock_start+0xec>)
   1e9c6:	4806      	ldr	r0, [pc, #24]	; (1e9e0 <nrfx_clock_start+0xf0>)
   1e9c8:	f008 f9d3 	bl	26d72 <assert_print>
   1e9cc:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1e9d0:	e79b      	b.n	1e90a <nrfx_clock_start+0x1a>
   1e9d2:	bf00      	nop
   1e9d4:	200218f0 	.word	0x200218f0
   1e9d8:	000329ec 	.word	0x000329ec
   1e9dc:	0003296d 	.word	0x0003296d
   1e9e0:	0002dd81 	.word	0x0002dd81
   1e9e4:	40005000 	.word	0x40005000
   1e9e8:	00033a12 	.word	0x00033a12

0001e9ec <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1e9ec:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1e9ee:	4b09      	ldr	r3, [pc, #36]	; (1ea14 <nrfx_clock_stop+0x28>)
   1e9f0:	791b      	ldrb	r3, [r3, #4]
   1e9f2:	b95b      	cbnz	r3, 1ea0c <nrfx_clock_stop+0x20>
   1e9f4:	4908      	ldr	r1, [pc, #32]	; (1ea18 <nrfx_clock_stop+0x2c>)
   1e9f6:	4809      	ldr	r0, [pc, #36]	; (1ea1c <nrfx_clock_stop+0x30>)
   1e9f8:	f240 13ad 	movw	r3, #429	; 0x1ad
   1e9fc:	4a08      	ldr	r2, [pc, #32]	; (1ea20 <nrfx_clock_stop+0x34>)
   1e9fe:	f008 f9b8 	bl	26d72 <assert_print>
   1ea02:	f240 11ad 	movw	r1, #429	; 0x1ad
   1ea06:	4806      	ldr	r0, [pc, #24]	; (1ea20 <nrfx_clock_stop+0x34>)
   1ea08:	f008 f9ac 	bl	26d64 <assert_post_action>
    clock_stop(domain);
}
   1ea0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1ea10:	f7ff be4e 	b.w	1e6b0 <clock_stop>
   1ea14:	200218f0 	.word	0x200218f0
   1ea18:	000329ec 	.word	0x000329ec
   1ea1c:	0002dd81 	.word	0x0002dd81
   1ea20:	0003296d 	.word	0x0003296d

0001ea24 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1ea24:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ea26:	4b28      	ldr	r3, [pc, #160]	; (1eac8 <nrfx_power_clock_irq_handler+0xa4>)
   1ea28:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1ea2c:	b152      	cbz	r2, 1ea44 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea2e:	2000      	movs	r0, #0
   1ea30:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1ea34:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1ea38:	2201      	movs	r2, #1
   1ea3a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ea3e:	4b23      	ldr	r3, [pc, #140]	; (1eacc <nrfx_power_clock_irq_handler+0xa8>)
   1ea40:	681b      	ldr	r3, [r3, #0]
   1ea42:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ea44:	4b20      	ldr	r3, [pc, #128]	; (1eac8 <nrfx_power_clock_irq_handler+0xa4>)
   1ea46:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1ea4a:	b18a      	cbz	r2, 1ea70 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea4c:	2200      	movs	r2, #0
   1ea4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ea52:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ea56:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ea5a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1ea5e:	f002 0203 	and.w	r2, r2, #3
   1ea62:	2a01      	cmp	r2, #1
   1ea64:	f04f 0102 	mov.w	r1, #2
   1ea68:	d126      	bne.n	1eab8 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ea6a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea6e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ea70:	4b15      	ldr	r3, [pc, #84]	; (1eac8 <nrfx_power_clock_irq_handler+0xa4>)
   1ea72:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1ea76:	b162      	cbz	r2, 1ea92 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea78:	2200      	movs	r2, #0
   1ea7a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ea7e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1ea82:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ea86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1ea8a:	4b10      	ldr	r3, [pc, #64]	; (1eacc <nrfx_power_clock_irq_handler+0xa8>)
   1ea8c:	2004      	movs	r0, #4
   1ea8e:	681b      	ldr	r3, [r3, #0]
   1ea90:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ea92:	4b0d      	ldr	r3, [pc, #52]	; (1eac8 <nrfx_power_clock_irq_handler+0xa4>)
   1ea94:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1ea98:	b1aa      	cbz	r2, 1eac6 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea9a:	2200      	movs	r2, #0
   1ea9c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1eaa0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1eaa4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1eaa8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1eaac:	4b07      	ldr	r3, [pc, #28]	; (1eacc <nrfx_power_clock_irq_handler+0xa8>)
   1eaae:	2005      	movs	r0, #5
    }
#endif
}
   1eab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1eab4:	681b      	ldr	r3, [r3, #0]
   1eab6:	4718      	bx	r3
   1eab8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1eabc:	4b03      	ldr	r3, [pc, #12]	; (1eacc <nrfx_power_clock_irq_handler+0xa8>)
   1eabe:	2001      	movs	r0, #1
   1eac0:	681b      	ldr	r3, [r3, #0]
   1eac2:	4798      	blx	r3
   1eac4:	e7d4      	b.n	1ea70 <nrfx_power_clock_irq_handler+0x4c>
}
   1eac6:	bd10      	pop	{r4, pc}
   1eac8:	40005000 	.word	0x40005000
   1eacc:	200218f0 	.word	0x200218f0

0001ead0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1ead0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1ead2:	4801      	ldr	r0, [pc, #4]	; (1ead8 <nrfx_dppi_channel_alloc+0x8>)
   1ead4:	f7ff bdb4 	b.w	1e640 <nrfx_flag32_alloc>
   1ead8:	20008698 	.word	0x20008698

0001eadc <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1eadc:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1eade:	4a04      	ldr	r2, [pc, #16]	; (1eaf0 <nrfx_dppi_channel_free+0x14>)
   1eae0:	4083      	lsls	r3, r0
{
   1eae2:	4601      	mov	r1, r0
   1eae4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1eae8:	4802      	ldr	r0, [pc, #8]	; (1eaf4 <nrfx_dppi_channel_free+0x18>)
   1eaea:	f7ff bdc5 	b.w	1e678 <nrfx_flag32_free>
   1eaee:	bf00      	nop
   1eaf0:	40017000 	.word	0x40017000
   1eaf4:	20008698 	.word	0x20008698

0001eaf8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1eaf8:	4b03      	ldr	r3, [pc, #12]	; (1eb08 <pin_in_use_by_te+0x10>)
   1eafa:	3008      	adds	r0, #8
   1eafc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1eb00:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1eb04:	4770      	bx	lr
   1eb06:	bf00      	nop
   1eb08:	2000869c 	.word	0x2000869c

0001eb0c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1eb0c:	4b04      	ldr	r3, [pc, #16]	; (1eb20 <pin_has_trigger+0x14>)
   1eb0e:	3008      	adds	r0, #8
   1eb10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1eb14:	f010 001c 	ands.w	r0, r0, #28
   1eb18:	bf18      	it	ne
   1eb1a:	2001      	movne	r0, #1
   1eb1c:	4770      	bx	lr
   1eb1e:	bf00      	nop
   1eb20:	2000869c 	.word	0x2000869c

0001eb24 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1eb24:	4b03      	ldr	r3, [pc, #12]	; (1eb34 <pin_is_output+0x10>)
   1eb26:	3008      	adds	r0, #8
   1eb28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1eb2c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1eb30:	4770      	bx	lr
   1eb32:	bf00      	nop
   1eb34:	2000869c 	.word	0x2000869c

0001eb38 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1eb38:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1eb3a:	4c0d      	ldr	r4, [pc, #52]	; (1eb70 <call_handler+0x38>)
   1eb3c:	f100 0308 	add.w	r3, r0, #8
   1eb40:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1eb44:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1eb46:	05da      	lsls	r2, r3, #23
{
   1eb48:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1eb4a:	d507      	bpl.n	1eb5c <call_handler+0x24>
   1eb4c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1eb50:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1eb54:	6852      	ldr	r2, [r2, #4]
   1eb56:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1eb5a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1eb5c:	68a3      	ldr	r3, [r4, #8]
   1eb5e:	b12b      	cbz	r3, 1eb6c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1eb60:	4631      	mov	r1, r6
   1eb62:	4628      	mov	r0, r5
   1eb64:	68e2      	ldr	r2, [r4, #12]
    }
}
   1eb66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1eb6a:	4718      	bx	r3
}
   1eb6c:	bd70      	pop	{r4, r5, r6, pc}
   1eb6e:	bf00      	nop
   1eb70:	2000869c 	.word	0x2000869c

0001eb74 <release_handler>:
{
   1eb74:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1eb76:	4a18      	ldr	r2, [pc, #96]	; (1ebd8 <release_handler+0x64>)
   1eb78:	3008      	adds	r0, #8
   1eb7a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1eb7e:	05d9      	lsls	r1, r3, #23
   1eb80:	d51d      	bpl.n	1ebbe <release_handler+0x4a>
   1eb82:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1eb86:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1eb8a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1eb8e:	2000      	movs	r0, #0
   1eb90:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1eb94:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1eb98:	f413 7f80 	tst.w	r3, #256	; 0x100
   1eb9c:	d003      	beq.n	1eba6 <release_handler+0x32>
   1eb9e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1eba2:	4299      	cmp	r1, r3
   1eba4:	d00b      	beq.n	1ebbe <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1eba6:	3001      	adds	r0, #1
   1eba8:	2830      	cmp	r0, #48	; 0x30
   1ebaa:	d1f3      	bne.n	1eb94 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1ebac:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1ebae:	480b      	ldr	r0, [pc, #44]	; (1ebdc <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1ebb0:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1ebb4:	f7ff fd60 	bl	1e678 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1ebb8:	4b09      	ldr	r3, [pc, #36]	; (1ebe0 <release_handler+0x6c>)
   1ebba:	4298      	cmp	r0, r3
   1ebbc:	d100      	bne.n	1ebc0 <release_handler+0x4c>
}
   1ebbe:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1ebc0:	4908      	ldr	r1, [pc, #32]	; (1ebe4 <release_handler+0x70>)
   1ebc2:	4809      	ldr	r0, [pc, #36]	; (1ebe8 <release_handler+0x74>)
   1ebc4:	f44f 7399 	mov.w	r3, #306	; 0x132
   1ebc8:	4a08      	ldr	r2, [pc, #32]	; (1ebec <release_handler+0x78>)
   1ebca:	f008 f8d2 	bl	26d72 <assert_print>
   1ebce:	f44f 7199 	mov.w	r1, #306	; 0x132
   1ebd2:	4806      	ldr	r0, [pc, #24]	; (1ebec <release_handler+0x78>)
   1ebd4:	f008 f8c6 	bl	26d64 <assert_post_action>
   1ebd8:	2000869c 	.word	0x2000869c
   1ebdc:	20008710 	.word	0x20008710
   1ebe0:	0bad0000 	.word	0x0bad0000
   1ebe4:	0002edb1 	.word	0x0002edb1
   1ebe8:	0002dd81 	.word	0x0002dd81
   1ebec:	00032a1f 	.word	0x00032a1f

0001ebf0 <pin_handler_trigger_uninit>:
{
   1ebf0:	b538      	push	{r3, r4, r5, lr}
   1ebf2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1ebf4:	f7ff ff80 	bl	1eaf8 <pin_in_use_by_te>
   1ebf8:	4c0b      	ldr	r4, [pc, #44]	; (1ec28 <pin_handler_trigger_uninit+0x38>)
   1ebfa:	f102 0508 	add.w	r5, r2, #8
   1ebfe:	b160      	cbz	r0, 1ec1a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1ec00:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ec02:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1ec06:	0b5b      	lsrs	r3, r3, #13
   1ec08:	009b      	lsls	r3, r3, #2
   1ec0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ec0e:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1ec12:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1ec16:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1ec1a:	4610      	mov	r0, r2
   1ec1c:	f7ff ffaa 	bl	1eb74 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1ec20:	2300      	movs	r3, #0
   1ec22:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1ec26:	bd38      	pop	{r3, r4, r5, pc}
   1ec28:	2000869c 	.word	0x2000869c

0001ec2c <nrf_gpio_pin_port_decode>:
{
   1ec2c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ec2e:	6802      	ldr	r2, [r0, #0]
{
   1ec30:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ec32:	4610      	mov	r0, r2
   1ec34:	f00c f8c5 	bl	2adc2 <nrf_gpio_pin_present_check>
   1ec38:	b958      	cbnz	r0, 1ec52 <nrf_gpio_pin_port_decode+0x26>
   1ec3a:	4910      	ldr	r1, [pc, #64]	; (1ec7c <nrf_gpio_pin_port_decode+0x50>)
   1ec3c:	f240 2347 	movw	r3, #583	; 0x247
   1ec40:	4a0f      	ldr	r2, [pc, #60]	; (1ec80 <nrf_gpio_pin_port_decode+0x54>)
   1ec42:	4810      	ldr	r0, [pc, #64]	; (1ec84 <nrf_gpio_pin_port_decode+0x58>)
   1ec44:	f008 f895 	bl	26d72 <assert_print>
   1ec48:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1ec4c:	480c      	ldr	r0, [pc, #48]	; (1ec80 <nrf_gpio_pin_port_decode+0x54>)
   1ec4e:	f008 f889 	bl	26d64 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1ec52:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec56:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1ec58:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec5a:	d00b      	beq.n	1ec74 <nrf_gpio_pin_port_decode+0x48>
   1ec5c:	2a01      	cmp	r2, #1
   1ec5e:	d00b      	beq.n	1ec78 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1ec60:	4909      	ldr	r1, [pc, #36]	; (1ec88 <nrf_gpio_pin_port_decode+0x5c>)
   1ec62:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1ec66:	4a06      	ldr	r2, [pc, #24]	; (1ec80 <nrf_gpio_pin_port_decode+0x54>)
   1ec68:	4806      	ldr	r0, [pc, #24]	; (1ec84 <nrf_gpio_pin_port_decode+0x58>)
   1ec6a:	f008 f882 	bl	26d72 <assert_print>
   1ec6e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1ec72:	e7eb      	b.n	1ec4c <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1ec74:	4805      	ldr	r0, [pc, #20]	; (1ec8c <nrf_gpio_pin_port_decode+0x60>)
}
   1ec76:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec78:	4805      	ldr	r0, [pc, #20]	; (1ec90 <nrf_gpio_pin_port_decode+0x64>)
   1ec7a:	e7fc      	b.n	1ec76 <nrf_gpio_pin_port_decode+0x4a>
   1ec7c:	00032104 	.word	0x00032104
   1ec80:	000320d1 	.word	0x000320d1
   1ec84:	0002dd81 	.word	0x0002dd81
   1ec88:	00033a12 	.word	0x00033a12
   1ec8c:	40842500 	.word	0x40842500
   1ec90:	40842800 	.word	0x40842800

0001ec94 <nrfx_gpiote_input_configure>:
{
   1ec94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec96:	4604      	mov	r4, r0
   1ec98:	4617      	mov	r7, r2
   1ec9a:	461d      	mov	r5, r3
   1ec9c:	b085      	sub	sp, #20
    if (p_input_config)
   1ec9e:	b1d9      	cbz	r1, 1ecd8 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1eca0:	f00c f8a0 	bl	2ade4 <pin_is_task_output>
   1eca4:	bb00      	cbnz	r0, 1ece8 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1eca6:	460b      	mov	r3, r1
   1eca8:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1ecac:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1ecb0:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1ecb4:	f10d 020f 	add.w	r2, sp, #15
   1ecb8:	f10d 010e 	add.w	r1, sp, #14
   1ecbc:	4620      	mov	r0, r4
   1ecbe:	f00c f89c 	bl	2adfa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1ecc2:	4a44      	ldr	r2, [pc, #272]	; (1edd4 <nrfx_gpiote_input_configure+0x140>)
   1ecc4:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1ecc8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1eccc:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1ecd0:	f043 0301 	orr.w	r3, r3, #1
   1ecd4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1ecd8:	b36f      	cbz	r7, 1ed36 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1ecda:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1ecdc:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1ecde:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1ece0:	f7ff ff20 	bl	1eb24 <pin_is_output>
   1ece4:	b110      	cbz	r0, 1ecec <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1ece6:	b1da      	cbz	r2, 1ed20 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1ece8:	483b      	ldr	r0, [pc, #236]	; (1edd8 <nrfx_gpiote_input_configure+0x144>)
   1ecea:	e026      	b.n	1ed3a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1ecec:	4839      	ldr	r0, [pc, #228]	; (1edd4 <nrfx_gpiote_input_configure+0x140>)
   1ecee:	f104 0c08 	add.w	ip, r4, #8
   1ecf2:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1ecf6:	f021 0120 	bic.w	r1, r1, #32
   1ecfa:	04c9      	lsls	r1, r1, #19
   1ecfc:	0cc9      	lsrs	r1, r1, #19
   1ecfe:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1ed02:	b16a      	cbz	r2, 1ed20 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1ed04:	2e03      	cmp	r6, #3
   1ed06:	d8ef      	bhi.n	1ece8 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1ed08:	687b      	ldr	r3, [r7, #4]
   1ed0a:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1ed0c:	00ba      	lsls	r2, r7, #2
   1ed0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ed12:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1ed16:	b996      	cbnz	r6, 1ed3e <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1ed18:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1ed1c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1ed20:	4a2c      	ldr	r2, [pc, #176]	; (1edd4 <nrfx_gpiote_input_configure+0x140>)
   1ed22:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1ed26:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1ed2a:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1ed2e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1ed32:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1ed36:	bb15      	cbnz	r5, 1ed7e <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1ed38:	4828      	ldr	r0, [pc, #160]	; (1eddc <nrfx_gpiote_input_configure+0x148>)
}
   1ed3a:	b005      	add	sp, #20
   1ed3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1ed3e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1ed42:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1ed46:	f023 0303 	bic.w	r3, r3, #3
   1ed4a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ed4e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1ed52:	f041 0120 	orr.w	r1, r1, #32
   1ed56:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1ed5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1ed5e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ed62:	0223      	lsls	r3, r4, #8
   1ed64:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1ed68:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1ed6c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1ed70:	ea43 030e 	orr.w	r3, r3, lr
   1ed74:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1ed78:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1ed7c:	e7d0      	b.n	1ed20 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1ed7e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1ed80:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1ed84:	f7ff fef6 	bl	1eb74 <release_handler>
    if (!handler)
   1ed88:	2e00      	cmp	r6, #0
   1ed8a:	d0d5      	beq.n	1ed38 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ed8c:	4d11      	ldr	r5, [pc, #68]	; (1edd4 <nrfx_gpiote_input_configure+0x140>)
   1ed8e:	e9d5 2300 	ldrd	r2, r3, [r5]
   1ed92:	4296      	cmp	r6, r2
   1ed94:	d101      	bne.n	1ed9a <nrfx_gpiote_input_configure+0x106>
   1ed96:	429f      	cmp	r7, r3
   1ed98:	d019      	beq.n	1edce <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1ed9a:	4811      	ldr	r0, [pc, #68]	; (1ede0 <nrfx_gpiote_input_configure+0x14c>)
   1ed9c:	f10d 010f 	add.w	r1, sp, #15
   1eda0:	f7ff fc4e 	bl	1e640 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1eda4:	4b0d      	ldr	r3, [pc, #52]	; (1eddc <nrfx_gpiote_input_configure+0x148>)
   1eda6:	4298      	cmp	r0, r3
   1eda8:	d1c7      	bne.n	1ed3a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1edaa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1edae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1edb2:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1edb6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1edb8:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1edbc:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1edc0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1edc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1edc8:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1edcc:	e7b4      	b.n	1ed38 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1edce:	2200      	movs	r2, #0
   1edd0:	e7ed      	b.n	1edae <nrfx_gpiote_input_configure+0x11a>
   1edd2:	bf00      	nop
   1edd4:	2000869c 	.word	0x2000869c
   1edd8:	0bad0004 	.word	0x0bad0004
   1eddc:	0bad0000 	.word	0x0bad0000
   1ede0:	20008710 	.word	0x20008710

0001ede4 <nrfx_gpiote_output_configure>:
{
   1ede4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ede6:	4604      	mov	r4, r0
   1ede8:	4615      	mov	r5, r2
   1edea:	b085      	sub	sp, #20
    if (p_config)
   1edec:	b321      	cbz	r1, 1ee38 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1edee:	f7ff fe99 	bl	1eb24 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1edf2:	b920      	cbnz	r0, 1edfe <nrfx_gpiote_output_configure+0x1a>
   1edf4:	4620      	mov	r0, r4
   1edf6:	f7ff fe7f 	bl	1eaf8 <pin_in_use_by_te>
   1edfa:	2800      	cmp	r0, #0
   1edfc:	d161      	bne.n	1eec2 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1edfe:	4620      	mov	r0, r4
   1ee00:	f7ff fe84 	bl	1eb0c <pin_has_trigger>
   1ee04:	b110      	cbz	r0, 1ee0c <nrfx_gpiote_output_configure+0x28>
   1ee06:	784b      	ldrb	r3, [r1, #1]
   1ee08:	2b01      	cmp	r3, #1
   1ee0a:	d05a      	beq.n	1eec2 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ee0c:	2301      	movs	r3, #1
   1ee0e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1ee12:	2300      	movs	r3, #0
   1ee14:	1c4a      	adds	r2, r1, #1
   1ee16:	e9cd 1300 	strd	r1, r3, [sp]
   1ee1a:	4620      	mov	r0, r4
   1ee1c:	1c8b      	adds	r3, r1, #2
   1ee1e:	f10d 010f 	add.w	r1, sp, #15
   1ee22:	f00b ffea 	bl	2adfa <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1ee26:	4a28      	ldr	r2, [pc, #160]	; (1eec8 <nrfx_gpiote_output_configure+0xe4>)
   1ee28:	f104 0108 	add.w	r1, r4, #8
   1ee2c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1ee30:	f043 0303 	orr.w	r3, r3, #3
   1ee34:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1ee38:	b915      	cbnz	r5, 1ee40 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1ee3a:	4824      	ldr	r0, [pc, #144]	; (1eecc <nrfx_gpiote_output_configure+0xe8>)
}
   1ee3c:	b005      	add	sp, #20
   1ee3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1ee40:	4620      	mov	r0, r4
   1ee42:	f7ff fe6f 	bl	1eb24 <pin_is_output>
        if (pin_is_input(pin))
   1ee46:	2800      	cmp	r0, #0
   1ee48:	d03b      	beq.n	1eec2 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1ee4a:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1ee4e:	2300      	movs	r3, #0
   1ee50:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1ee52:	4e1d      	ldr	r6, [pc, #116]	; (1eec8 <nrfx_gpiote_output_configure+0xe4>)
   1ee54:	f104 0708 	add.w	r7, r4, #8
   1ee58:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1ee5c:	0089      	lsls	r1, r1, #2
   1ee5e:	f020 0020 	bic.w	r0, r0, #32
   1ee62:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1ee66:	04c0      	lsls	r0, r0, #19
   1ee68:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1ee6c:	0cc0      	lsrs	r0, r0, #19
   1ee6e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1ee72:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1ee76:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1ee7a:	786a      	ldrb	r2, [r5, #1]
   1ee7c:	2a00      	cmp	r2, #0
   1ee7e:	d0dc      	beq.n	1ee3a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1ee80:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1ee84:	78ad      	ldrb	r5, [r5, #2]
   1ee86:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1ee8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1ee8e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ee92:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1ee96:	0223      	lsls	r3, r4, #8
   1ee98:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1ee9c:	0412      	lsls	r2, r2, #16
   1ee9e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eea2:	ea43 030e 	orr.w	r3, r3, lr
   1eea6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1eea8:	052a      	lsls	r2, r5, #20
   1eeaa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1eeae:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eeb2:	4313      	orrs	r3, r2
   1eeb4:	f040 0020 	orr.w	r0, r0, #32
   1eeb8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1eebc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1eec0:	e7bb      	b.n	1ee3a <nrfx_gpiote_output_configure+0x56>
{
   1eec2:	4803      	ldr	r0, [pc, #12]	; (1eed0 <nrfx_gpiote_output_configure+0xec>)
   1eec4:	e7ba      	b.n	1ee3c <nrfx_gpiote_output_configure+0x58>
   1eec6:	bf00      	nop
   1eec8:	2000869c 	.word	0x2000869c
   1eecc:	0bad0000 	.word	0x0bad0000
   1eed0:	0bad0004 	.word	0x0bad0004

0001eed4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1eed4:	4b01      	ldr	r3, [pc, #4]	; (1eedc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1eed6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1eeda:	4770      	bx	lr
   1eedc:	2000869c 	.word	0x2000869c

0001eee0 <nrfx_gpiote_channel_get>:
{
   1eee0:	4602      	mov	r2, r0
   1eee2:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1eee4:	b959      	cbnz	r1, 1eefe <nrfx_gpiote_channel_get+0x1e>
   1eee6:	490c      	ldr	r1, [pc, #48]	; (1ef18 <nrfx_gpiote_channel_get+0x38>)
   1eee8:	480c      	ldr	r0, [pc, #48]	; (1ef1c <nrfx_gpiote_channel_get+0x3c>)
   1eeea:	f240 2335 	movw	r3, #565	; 0x235
   1eeee:	4a0c      	ldr	r2, [pc, #48]	; (1ef20 <nrfx_gpiote_channel_get+0x40>)
   1eef0:	f007 ff3f 	bl	26d72 <assert_print>
   1eef4:	f240 2135 	movw	r1, #565	; 0x235
   1eef8:	4809      	ldr	r0, [pc, #36]	; (1ef20 <nrfx_gpiote_channel_get+0x40>)
   1eefa:	f007 ff33 	bl	26d64 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1eefe:	f7ff fdfb 	bl	1eaf8 <pin_in_use_by_te>
   1ef02:	b138      	cbz	r0, 1ef14 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ef04:	4b07      	ldr	r3, [pc, #28]	; (1ef24 <nrfx_gpiote_channel_get+0x44>)
   1ef06:	3208      	adds	r2, #8
   1ef08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1ef0c:	4806      	ldr	r0, [pc, #24]	; (1ef28 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ef0e:	0b5b      	lsrs	r3, r3, #13
   1ef10:	700b      	strb	r3, [r1, #0]
}
   1ef12:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ef14:	4805      	ldr	r0, [pc, #20]	; (1ef2c <nrfx_gpiote_channel_get+0x4c>)
   1ef16:	e7fc      	b.n	1ef12 <nrfx_gpiote_channel_get+0x32>
   1ef18:	00032a5d 	.word	0x00032a5d
   1ef1c:	0002dd81 	.word	0x0002dd81
   1ef20:	00032a1f 	.word	0x00032a1f
   1ef24:	2000869c 	.word	0x2000869c
   1ef28:	0bad0000 	.word	0x0bad0000
   1ef2c:	0bad0004 	.word	0x0bad0004

0001ef30 <nrfx_gpiote_init>:
{
   1ef30:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ef32:	4c0f      	ldr	r4, [pc, #60]	; (1ef70 <nrfx_gpiote_init+0x40>)
   1ef34:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1ef38:	b9bd      	cbnz	r5, 1ef6a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1ef3a:	2260      	movs	r2, #96	; 0x60
   1ef3c:	4629      	mov	r1, r5
   1ef3e:	f104 0010 	add.w	r0, r4, #16
   1ef42:	f00c ff75 	bl	2be30 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1ef46:	202f      	movs	r0, #47	; 0x2f
   1ef48:	f7f1 fdca 	bl	10ae0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ef4c:	4b09      	ldr	r3, [pc, #36]	; (1ef74 <nrfx_gpiote_init+0x44>)
    return err_code;
   1ef4e:	480a      	ldr	r0, [pc, #40]	; (1ef78 <nrfx_gpiote_init+0x48>)
   1ef50:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1ef54:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1ef58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ef5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ef60:	2301      	movs	r3, #1
   1ef62:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1ef66:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ef68:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1ef6a:	4804      	ldr	r0, [pc, #16]	; (1ef7c <nrfx_gpiote_init+0x4c>)
   1ef6c:	e7fc      	b.n	1ef68 <nrfx_gpiote_init+0x38>
   1ef6e:	bf00      	nop
   1ef70:	2000869c 	.word	0x2000869c
   1ef74:	4002f000 	.word	0x4002f000
   1ef78:	0bad0000 	.word	0x0bad0000
   1ef7c:	0bad0005 	.word	0x0bad0005

0001ef80 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1ef80:	4b03      	ldr	r3, [pc, #12]	; (1ef90 <nrfx_gpiote_is_init+0x10>)
   1ef82:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1ef86:	3800      	subs	r0, #0
   1ef88:	bf18      	it	ne
   1ef8a:	2001      	movne	r0, #1
   1ef8c:	4770      	bx	lr
   1ef8e:	bf00      	nop
   1ef90:	2000869c 	.word	0x2000869c

0001ef94 <nrfx_gpiote_channel_free>:
{
   1ef94:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1ef96:	4801      	ldr	r0, [pc, #4]	; (1ef9c <nrfx_gpiote_channel_free+0x8>)
   1ef98:	f7ff bb6e 	b.w	1e678 <nrfx_flag32_free>
   1ef9c:	2000870c 	.word	0x2000870c

0001efa0 <nrfx_gpiote_channel_alloc>:
{
   1efa0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1efa2:	4801      	ldr	r0, [pc, #4]	; (1efa8 <nrfx_gpiote_channel_alloc+0x8>)
   1efa4:	f7ff bb4c 	b.w	1e640 <nrfx_flag32_alloc>
   1efa8:	2000870c 	.word	0x2000870c

0001efac <nrfx_gpiote_trigger_enable>:
{
   1efac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1efae:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1efb0:	f7ff fdac 	bl	1eb0c <pin_has_trigger>
   1efb4:	b958      	cbnz	r0, 1efce <nrfx_gpiote_trigger_enable+0x22>
   1efb6:	492b      	ldr	r1, [pc, #172]	; (1f064 <nrfx_gpiote_trigger_enable+0xb8>)
   1efb8:	f240 33df 	movw	r3, #991	; 0x3df
   1efbc:	4a2a      	ldr	r2, [pc, #168]	; (1f068 <nrfx_gpiote_trigger_enable+0xbc>)
   1efbe:	482b      	ldr	r0, [pc, #172]	; (1f06c <nrfx_gpiote_trigger_enable+0xc0>)
   1efc0:	f007 fed7 	bl	26d72 <assert_print>
   1efc4:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1efc8:	4827      	ldr	r0, [pc, #156]	; (1f068 <nrfx_gpiote_trigger_enable+0xbc>)
   1efca:	f007 fecb 	bl	26d64 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1efce:	4620      	mov	r0, r4
   1efd0:	f7ff fd92 	bl	1eaf8 <pin_in_use_by_te>
   1efd4:	4a26      	ldr	r2, [pc, #152]	; (1f070 <nrfx_gpiote_trigger_enable+0xc4>)
   1efd6:	f104 0508 	add.w	r5, r4, #8
   1efda:	b1e0      	cbz	r0, 1f016 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1efdc:	4620      	mov	r0, r4
   1efde:	f7ff fda1 	bl	1eb24 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1efe2:	b9c0      	cbnz	r0, 1f016 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1efe4:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1efe8:	4c22      	ldr	r4, [pc, #136]	; (1f074 <nrfx_gpiote_trigger_enable+0xc8>)
   1efea:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1efec:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1efee:	50e0      	str	r0, [r4, r3]
   1eff0:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1eff2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eff6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1effa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1effe:	f040 0001 	orr.w	r0, r0, #1
   1f002:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1f006:	b121      	cbz	r1, 1f012 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f008:	2301      	movs	r3, #1
   1f00a:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1f00c:	4a1a      	ldr	r2, [pc, #104]	; (1f078 <nrfx_gpiote_trigger_enable+0xcc>)
   1f00e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f012:	b003      	add	sp, #12
   1f014:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1f016:	b949      	cbnz	r1, 1f02c <nrfx_gpiote_trigger_enable+0x80>
   1f018:	4918      	ldr	r1, [pc, #96]	; (1f07c <nrfx_gpiote_trigger_enable+0xd0>)
   1f01a:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1f01e:	4a12      	ldr	r2, [pc, #72]	; (1f068 <nrfx_gpiote_trigger_enable+0xbc>)
   1f020:	4812      	ldr	r0, [pc, #72]	; (1f06c <nrfx_gpiote_trigger_enable+0xc0>)
   1f022:	f007 fea6 	bl	26d72 <assert_print>
   1f026:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f02a:	e7cd      	b.n	1efc8 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f02c:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1f030:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f034:	2b04      	cmp	r3, #4
   1f036:	d011      	beq.n	1f05c <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f038:	2b05      	cmp	r3, #5
   1f03a:	d011      	beq.n	1f060 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f03c:	a801      	add	r0, sp, #4
   1f03e:	9401      	str	r4, [sp, #4]
   1f040:	f7ff fdf4 	bl	1ec2c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f044:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f046:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f048:	40d9      	lsrs	r1, r3
   1f04a:	f001 0101 	and.w	r1, r1, #1
   1f04e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f050:	4620      	mov	r0, r4
}
   1f052:	b003      	add	sp, #12
   1f054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f058:	f00b bf1c 	b.w	2ae94 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f05c:	2103      	movs	r1, #3
   1f05e:	e7f7      	b.n	1f050 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f060:	2102      	movs	r1, #2
   1f062:	e7f5      	b.n	1f050 <nrfx_gpiote_trigger_enable+0xa4>
   1f064:	00032a67 	.word	0x00032a67
   1f068:	00032a1f 	.word	0x00032a1f
   1f06c:	0002dd81 	.word	0x0002dd81
   1f070:	2000869c 	.word	0x2000869c
   1f074:	4002f100 	.word	0x4002f100
   1f078:	4002f000 	.word	0x4002f000
   1f07c:	00032a7c 	.word	0x00032a7c

0001f080 <nrfx_gpiote_trigger_disable>:
{
   1f080:	b508      	push	{r3, lr}
   1f082:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f084:	f7ff fd38 	bl	1eaf8 <pin_in_use_by_te>
   1f088:	b1c8      	cbz	r0, 1f0be <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1f08a:	4610      	mov	r0, r2
   1f08c:	f7ff fd4a 	bl	1eb24 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f090:	b9a8      	cbnz	r0, 1f0be <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f092:	4b0e      	ldr	r3, [pc, #56]	; (1f0cc <nrfx_gpiote_trigger_disable+0x4c>)
   1f094:	3208      	adds	r2, #8
   1f096:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f09a:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f09c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f09e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1f0a0:	490b      	ldr	r1, [pc, #44]	; (1f0d0 <nrfx_gpiote_trigger_disable+0x50>)
   1f0a2:	009b      	lsls	r3, r3, #2
   1f0a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f0a8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f0ac:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f0b0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f0b4:	f022 0203 	bic.w	r2, r2, #3
   1f0b8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f0bc:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f0be:	2100      	movs	r1, #0
}
   1f0c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f0c4:	4610      	mov	r0, r2
   1f0c6:	f00b bee5 	b.w	2ae94 <nrf_gpio_cfg_sense_set>
   1f0ca:	bf00      	nop
   1f0cc:	2000869c 	.word	0x2000869c
   1f0d0:	4002f000 	.word	0x4002f000

0001f0d4 <nrfx_gpiote_pin_uninit>:
{
   1f0d4:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f0d6:	4b10      	ldr	r3, [pc, #64]	; (1f118 <nrfx_gpiote_pin_uninit+0x44>)
   1f0d8:	f100 0208 	add.w	r2, r0, #8
   1f0dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1f0e0:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1f0e2:	07db      	lsls	r3, r3, #31
   1f0e4:	d516      	bpl.n	1f114 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1f0e6:	f7ff ffcb 	bl	1f080 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f0ea:	4620      	mov	r0, r4
   1f0ec:	f7ff fd80 	bl	1ebf0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f0f0:	a801      	add	r0, sp, #4
   1f0f2:	9401      	str	r4, [sp, #4]
   1f0f4:	f7ff fd9a 	bl	1ec2c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f0f8:	9b01      	ldr	r3, [sp, #4]
   1f0fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f0fe:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1f102:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f106:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f10a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1f10e:	4803      	ldr	r0, [pc, #12]	; (1f11c <nrfx_gpiote_pin_uninit+0x48>)
}
   1f110:	b002      	add	sp, #8
   1f112:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f114:	4802      	ldr	r0, [pc, #8]	; (1f120 <nrfx_gpiote_pin_uninit+0x4c>)
   1f116:	e7fb      	b.n	1f110 <nrfx_gpiote_pin_uninit+0x3c>
   1f118:	2000869c 	.word	0x2000869c
   1f11c:	0bad0000 	.word	0x0bad0000
   1f120:	0bad0004 	.word	0x0bad0004

0001f124 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1f128:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f12a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f12c:	4634      	mov	r4, r6
{
   1f12e:	4b64      	ldr	r3, [pc, #400]	; (1f2c0 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1f130:	4864      	ldr	r0, [pc, #400]	; (1f2c4 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f132:	4965      	ldr	r1, [pc, #404]	; (1f2c8 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1f134:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f136:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f138:	b135      	cbz	r5, 1f148 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1f13a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f13e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f140:	bf1e      	ittt	ne
   1f142:	601c      	strne	r4, [r3, #0]
   1f144:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f146:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f148:	3304      	adds	r3, #4
   1f14a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1f14c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f150:	d1f1      	bne.n	1f136 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f152:	f8df a170 	ldr.w	sl, [pc, #368]	; 1f2c4 <nrfx_gpiote_irq_handler+0x1a0>
   1f156:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f15a:	2b00      	cmp	r3, #0
   1f15c:	f000 8093 	beq.w	1f286 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1f160:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f2cc <nrfx_gpiote_irq_handler+0x1a8>
   1f164:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f168:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f16a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f16e:	4b58      	ldr	r3, [pc, #352]	; (1f2d0 <nrfx_gpiote_irq_handler+0x1ac>)
   1f170:	6a1a      	ldr	r2, [r3, #32]
   1f172:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f174:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f176:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1f17a:	f10d 0b10 	add.w	fp, sp, #16
   1f17e:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1f182:	9300      	str	r3, [sp, #0]
   1f184:	e04a      	b.n	1f21c <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1f186:	fa94 f4a4 	rbit	r4, r4
   1f18a:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1f18e:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f190:	4a50      	ldr	r2, [pc, #320]	; (1f2d4 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1f192:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f194:	f104 0308 	add.w	r3, r4, #8
   1f198:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f19c:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f19e:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1f1a0:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1f1a4:	fa03 f101 	lsl.w	r1, r3, r1
   1f1a8:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1f1ac:	08ba      	lsrs	r2, r7, #2
   1f1ae:	ea23 0301 	bic.w	r3, r3, r1
   1f1b2:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f1b6:	a803      	add	r0, sp, #12
   1f1b8:	9201      	str	r2, [sp, #4]
   1f1ba:	9403      	str	r4, [sp, #12]
   1f1bc:	f7ff fd36 	bl	1ec2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f1c0:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1f1c2:	9a01      	ldr	r2, [sp, #4]
   1f1c4:	3380      	adds	r3, #128	; 0x80
   1f1c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f1ca:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1f1ce:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f1d0:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f1d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1f1d6:	d52b      	bpl.n	1f230 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1f1d8:	4639      	mov	r1, r7
   1f1da:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f1dc:	b2dd      	uxtb	r5, r3
   1f1de:	f7ff fcab 	bl	1eb38 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f1e2:	a803      	add	r0, sp, #12
   1f1e4:	9403      	str	r4, [sp, #12]
   1f1e6:	f7ff fd21 	bl	1ec2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f1ea:	9b03      	ldr	r3, [sp, #12]
   1f1ec:	3380      	adds	r3, #128	; 0x80
   1f1ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f1f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f1f6:	429d      	cmp	r5, r3
   1f1f8:	d107      	bne.n	1f20a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f1fa:	2100      	movs	r1, #0
   1f1fc:	4620      	mov	r0, r4
   1f1fe:	f00b fe49 	bl	2ae94 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f202:	4629      	mov	r1, r5
   1f204:	4620      	mov	r0, r4
   1f206:	f00b fe45 	bl	2ae94 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f20a:	a803      	add	r0, sp, #12
   1f20c:	9403      	str	r4, [sp, #12]
   1f20e:	f7ff fd0d 	bl	1ec2c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f212:	2201      	movs	r2, #1
   1f214:	9b03      	ldr	r3, [sp, #12]
   1f216:	fa02 f303 	lsl.w	r3, r2, r3
   1f21a:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1f21c:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1f220:	2c00      	cmp	r4, #0
   1f222:	d1b0      	bne.n	1f186 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f224:	f1b9 0f00 	cmp.w	r9, #0
   1f228:	d11d      	bne.n	1f266 <nrfx_gpiote_irq_handler+0x142>
   1f22a:	f04f 0901 	mov.w	r9, #1
   1f22e:	e7a6      	b.n	1f17e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f230:	2b02      	cmp	r3, #2
   1f232:	d10c      	bne.n	1f24e <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f234:	2103      	movs	r1, #3
   1f236:	4620      	mov	r0, r4
   1f238:	f00b fe2c 	bl	2ae94 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f23c:	f005 0305 	and.w	r3, r5, #5
   1f240:	2b01      	cmp	r3, #1
   1f242:	d1e2      	bne.n	1f20a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1f244:	4639      	mov	r1, r7
   1f246:	4620      	mov	r0, r4
   1f248:	f7ff fc76 	bl	1eb38 <call_handler>
   1f24c:	e7dd      	b.n	1f20a <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f24e:	2102      	movs	r1, #2
   1f250:	4620      	mov	r0, r4
   1f252:	9301      	str	r3, [sp, #4]
   1f254:	f00b fe1e 	bl	2ae94 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f258:	2d03      	cmp	r5, #3
   1f25a:	d0f3      	beq.n	1f244 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f25c:	9b01      	ldr	r3, [sp, #4]
   1f25e:	2b03      	cmp	r3, #3
   1f260:	d1d3      	bne.n	1f20a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f262:	2d02      	cmp	r5, #2
   1f264:	e7ed      	b.n	1f242 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f266:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1f26a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1f26e:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f272:	4917      	ldr	r1, [pc, #92]	; (1f2d0 <nrfx_gpiote_irq_handler+0x1ac>)
   1f274:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f276:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f27a:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1f27c:	4313      	orrs	r3, r2
   1f27e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f280:	620a      	str	r2, [r1, #32]
   1f282:	f47f af78 	bne.w	1f176 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1f286:	2401      	movs	r4, #1
    while (mask)
   1f288:	b916      	cbnz	r6, 1f290 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f28a:	b007      	add	sp, #28
   1f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1f290:	fa96 f3a6 	rbit	r3, r6
   1f294:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f298:	fa04 f203 	lsl.w	r2, r4, r3
   1f29c:	009b      	lsls	r3, r3, #2
   1f29e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f2a2:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f2a6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f2aa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f2ae:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1f2b2:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1f2b6:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f2ba:	f7ff fc3d 	bl	1eb38 <call_handler>
   1f2be:	e7e3      	b.n	1f288 <nrfx_gpiote_irq_handler+0x164>
   1f2c0:	4002f100 	.word	0x4002f100
   1f2c4:	4002f000 	.word	0x4002f000
   1f2c8:	4002f120 	.word	0x4002f120
   1f2cc:	40842500 	.word	0x40842500
   1f2d0:	40842800 	.word	0x40842800
   1f2d4:	2000869c 	.word	0x2000869c

0001f2d8 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1f2d8:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f2da:	4c08      	ldr	r4, [pc, #32]	; (1f2fc <nrfx_ipc_init+0x24>)
{
   1f2dc:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f2de:	7923      	ldrb	r3, [r4, #4]
{
   1f2e0:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f2e2:	b943      	cbnz	r3, 1f2f6 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1f2e4:	202a      	movs	r0, #42	; 0x2a
   1f2e6:	f7f1 fbfb 	bl	10ae0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f2ea:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1f2ec:	4804      	ldr	r0, [pc, #16]	; (1f300 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f2ee:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1f2f0:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1f2f2:	60a5      	str	r5, [r4, #8]
}
   1f2f4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1f2f6:	4803      	ldr	r0, [pc, #12]	; (1f304 <nrfx_ipc_init+0x2c>)
   1f2f8:	e7fc      	b.n	1f2f4 <nrfx_ipc_init+0x1c>
   1f2fa:	bf00      	nop
   1f2fc:	200218f8 	.word	0x200218f8
   1f300:	0bad0000 	.word	0x0bad0000
   1f304:	0bad000c 	.word	0x0bad000c

0001f308 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1f308:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1f30a:	b948      	cbnz	r0, 1f320 <nrfx_ipc_config_load+0x18>
   1f30c:	4919      	ldr	r1, [pc, #100]	; (1f374 <nrfx_ipc_config_load+0x6c>)
   1f30e:	2345      	movs	r3, #69	; 0x45
   1f310:	4a19      	ldr	r2, [pc, #100]	; (1f378 <nrfx_ipc_config_load+0x70>)
   1f312:	481a      	ldr	r0, [pc, #104]	; (1f37c <nrfx_ipc_config_load+0x74>)
   1f314:	f007 fd2d 	bl	26d72 <assert_print>
   1f318:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f31a:	4817      	ldr	r0, [pc, #92]	; (1f378 <nrfx_ipc_config_load+0x70>)
   1f31c:	f007 fd22 	bl	26d64 <assert_post_action>
   1f320:	4b17      	ldr	r3, [pc, #92]	; (1f380 <nrfx_ipc_config_load+0x78>)
   1f322:	791b      	ldrb	r3, [r3, #4]
   1f324:	2b01      	cmp	r3, #1
   1f326:	d007      	beq.n	1f338 <nrfx_ipc_config_load+0x30>
   1f328:	4916      	ldr	r1, [pc, #88]	; (1f384 <nrfx_ipc_config_load+0x7c>)
   1f32a:	2346      	movs	r3, #70	; 0x46
   1f32c:	4a12      	ldr	r2, [pc, #72]	; (1f378 <nrfx_ipc_config_load+0x70>)
   1f32e:	4813      	ldr	r0, [pc, #76]	; (1f37c <nrfx_ipc_config_load+0x74>)
   1f330:	f007 fd1f 	bl	26d72 <assert_print>
   1f334:	2146      	movs	r1, #70	; 0x46
   1f336:	e7f0      	b.n	1f31a <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f338:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1f33a:	4a13      	ldr	r2, [pc, #76]	; (1f388 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1f33c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f340:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f344:	3301      	adds	r3, #1
   1f346:	2b10      	cmp	r3, #16
   1f348:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1f34c:	d1f6      	bne.n	1f33c <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f34e:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1f350:	4a0d      	ldr	r2, [pc, #52]	; (1f388 <nrfx_ipc_config_load+0x80>)
   1f352:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1f356:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1f35a:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f35e:	3301      	adds	r3, #1
   1f360:	2b10      	cmp	r3, #16
   1f362:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1f366:	d1f6      	bne.n	1f356 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1f368:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1f36c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f370:	bd38      	pop	{r3, r4, r5, pc}
   1f372:	bf00      	nop
   1f374:	00032ace 	.word	0x00032ace
   1f378:	00032a93 	.word	0x00032a93
   1f37c:	0002dd81 	.word	0x0002dd81
   1f380:	200218f8 	.word	0x200218f8
   1f384:	00032ad7 	.word	0x00032ad7
   1f388:	4002a000 	.word	0x4002a000

0001f38c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1f38c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f38e:	4b09      	ldr	r3, [pc, #36]	; (1f3b4 <nrfx_ipc_receive_event_enable+0x28>)
   1f390:	791b      	ldrb	r3, [r3, #4]
   1f392:	2b01      	cmp	r3, #1
   1f394:	d009      	beq.n	1f3aa <nrfx_ipc_receive_event_enable+0x1e>
   1f396:	4908      	ldr	r1, [pc, #32]	; (1f3b8 <nrfx_ipc_receive_event_enable+0x2c>)
   1f398:	4808      	ldr	r0, [pc, #32]	; (1f3bc <nrfx_ipc_receive_event_enable+0x30>)
   1f39a:	236b      	movs	r3, #107	; 0x6b
   1f39c:	4a08      	ldr	r2, [pc, #32]	; (1f3c0 <nrfx_ipc_receive_event_enable+0x34>)
   1f39e:	f007 fce8 	bl	26d72 <assert_print>
   1f3a2:	216b      	movs	r1, #107	; 0x6b
   1f3a4:	4806      	ldr	r0, [pc, #24]	; (1f3c0 <nrfx_ipc_receive_event_enable+0x34>)
   1f3a6:	f007 fcdd 	bl	26d64 <assert_post_action>
   1f3aa:	4a06      	ldr	r2, [pc, #24]	; (1f3c4 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1f3ac:	4083      	lsls	r3, r0
   1f3ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f3b2:	bd08      	pop	{r3, pc}
   1f3b4:	200218f8 	.word	0x200218f8
   1f3b8:	00032ad7 	.word	0x00032ad7
   1f3bc:	0002dd81 	.word	0x0002dd81
   1f3c0:	00032a93 	.word	0x00032a93
   1f3c4:	4002a000 	.word	0x4002a000

0001f3c8 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1f3c8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f3ca:	4b09      	ldr	r3, [pc, #36]	; (1f3f0 <nrfx_ipc_receive_event_disable+0x28>)
   1f3cc:	791b      	ldrb	r3, [r3, #4]
   1f3ce:	2b01      	cmp	r3, #1
   1f3d0:	d009      	beq.n	1f3e6 <nrfx_ipc_receive_event_disable+0x1e>
   1f3d2:	4908      	ldr	r1, [pc, #32]	; (1f3f4 <nrfx_ipc_receive_event_disable+0x2c>)
   1f3d4:	4808      	ldr	r0, [pc, #32]	; (1f3f8 <nrfx_ipc_receive_event_disable+0x30>)
   1f3d6:	2371      	movs	r3, #113	; 0x71
   1f3d8:	4a08      	ldr	r2, [pc, #32]	; (1f3fc <nrfx_ipc_receive_event_disable+0x34>)
   1f3da:	f007 fcca 	bl	26d72 <assert_print>
   1f3de:	2171      	movs	r1, #113	; 0x71
   1f3e0:	4806      	ldr	r0, [pc, #24]	; (1f3fc <nrfx_ipc_receive_event_disable+0x34>)
   1f3e2:	f007 fcbf 	bl	26d64 <assert_post_action>
    p_reg->INTENCLR = mask;
   1f3e6:	4a06      	ldr	r2, [pc, #24]	; (1f400 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1f3e8:	4083      	lsls	r3, r0
   1f3ea:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1f3ee:	bd08      	pop	{r3, pc}
   1f3f0:	200218f8 	.word	0x200218f8
   1f3f4:	00032ad7 	.word	0x00032ad7
   1f3f8:	0002dd81 	.word	0x0002dd81
   1f3fc:	00032a93 	.word	0x00032a93
   1f400:	4002a000 	.word	0x4002a000

0001f404 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1f406:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f408:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1f40a:	4b12      	ldr	r3, [pc, #72]	; (1f454 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1f40c:	4d12      	ldr	r5, [pc, #72]	; (1f458 <nrfx_ipc_irq_handler+0x54>)
   1f40e:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1f412:	b904      	cbnz	r4, 1f416 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1f414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1f416:	fa94 f0a4 	rbit	r0, r4
   1f41a:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1f41e:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1f422:	280f      	cmp	r0, #15
   1f424:	ea24 0403 	bic.w	r4, r4, r3
   1f428:	dd0b      	ble.n	1f442 <nrfx_ipc_irq_handler+0x3e>
   1f42a:	490c      	ldr	r1, [pc, #48]	; (1f45c <nrfx_ipc_irq_handler+0x58>)
   1f42c:	480c      	ldr	r0, [pc, #48]	; (1f460 <nrfx_ipc_irq_handler+0x5c>)
   1f42e:	f240 13e7 	movw	r3, #487	; 0x1e7
   1f432:	4a0c      	ldr	r2, [pc, #48]	; (1f464 <nrfx_ipc_irq_handler+0x60>)
   1f434:	f007 fc9d 	bl	26d72 <assert_print>
   1f438:	f240 11e7 	movw	r1, #487	; 0x1e7
   1f43c:	4809      	ldr	r0, [pc, #36]	; (1f464 <nrfx_ipc_irq_handler+0x60>)
   1f43e:	f007 fc91 	bl	26d64 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f442:	4b09      	ldr	r3, [pc, #36]	; (1f468 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1f444:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f446:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1f448:	682b      	ldr	r3, [r5, #0]
   1f44a:	2b00      	cmp	r3, #0
   1f44c:	d0e1      	beq.n	1f412 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1f44e:	68a9      	ldr	r1, [r5, #8]
   1f450:	4798      	blx	r3
   1f452:	e7de      	b.n	1f412 <nrfx_ipc_irq_handler+0xe>
   1f454:	4002a000 	.word	0x4002a000
   1f458:	200218f8 	.word	0x200218f8
   1f45c:	0002ed07 	.word	0x0002ed07
   1f460:	0002dd81 	.word	0x0002dd81
   1f464:	0002ecd5 	.word	0x0002ecd5
   1f468:	4002a100 	.word	0x4002a100

0001f46c <nvmc_word_write>:
   1f46c:	4a04      	ldr	r2, [pc, #16]	; (1f480 <nvmc_word_write+0x14>)
   1f46e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f472:	07db      	lsls	r3, r3, #31
   1f474:	d5fb      	bpl.n	1f46e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f476:	6001      	str	r1, [r0, #0]
   1f478:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1f47c:	4770      	bx	lr
   1f47e:	bf00      	nop
   1f480:	40039000 	.word	0x40039000

0001f484 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f484:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1f488:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f48a:	d30b      	bcc.n	1f4a4 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1f48c:	4910      	ldr	r1, [pc, #64]	; (1f4d0 <nrfx_nvmc_page_erase+0x4c>)
   1f48e:	4811      	ldr	r0, [pc, #68]	; (1f4d4 <nrfx_nvmc_page_erase+0x50>)
   1f490:	f44f 7383 	mov.w	r3, #262	; 0x106
   1f494:	4a10      	ldr	r2, [pc, #64]	; (1f4d8 <nrfx_nvmc_page_erase+0x54>)
   1f496:	f007 fc6c 	bl	26d72 <assert_print>
   1f49a:	f44f 7183 	mov.w	r1, #262	; 0x106
   1f49e:	480e      	ldr	r0, [pc, #56]	; (1f4d8 <nrfx_nvmc_page_erase+0x54>)
   1f4a0:	f007 fc60 	bl	26d64 <assert_post_action>
    return !(addr % flash_page_size_get());
   1f4a4:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1f4a8:	b97b      	cbnz	r3, 1f4ca <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1f4aa:	2202      	movs	r2, #2
   1f4ac:	4b0b      	ldr	r3, [pc, #44]	; (1f4dc <nrfx_nvmc_page_erase+0x58>)
   1f4ae:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1f4b2:	f04f 32ff 	mov.w	r2, #4294967295
   1f4b6:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f4b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f4bc:	07d2      	lsls	r2, r2, #31
   1f4be:	d5fb      	bpl.n	1f4b8 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1f4c0:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f4c2:	4807      	ldr	r0, [pc, #28]	; (1f4e0 <nrfx_nvmc_page_erase+0x5c>)
   1f4c4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1f4c8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1f4ca:	4806      	ldr	r0, [pc, #24]	; (1f4e4 <nrfx_nvmc_page_erase+0x60>)
   1f4cc:	e7fc      	b.n	1f4c8 <nrfx_nvmc_page_erase+0x44>
   1f4ce:	bf00      	nop
   1f4d0:	00032b60 	.word	0x00032b60
   1f4d4:	0002dd81 	.word	0x0002dd81
   1f4d8:	00032b04 	.word	0x00032b04
   1f4dc:	40039000 	.word	0x40039000
   1f4e0:	0bad0000 	.word	0x0bad0000
   1f4e4:	0bad000a 	.word	0x0bad000a

0001f4e8 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f4e8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1f4ec:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f4ee:	d30b      	bcc.n	1f508 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1f4f0:	4910      	ldr	r1, [pc, #64]	; (1f534 <nrfx_nvmc_word_write+0x4c>)
   1f4f2:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1f4f6:	4a10      	ldr	r2, [pc, #64]	; (1f538 <nrfx_nvmc_word_write+0x50>)
   1f4f8:	4810      	ldr	r0, [pc, #64]	; (1f53c <nrfx_nvmc_word_write+0x54>)
   1f4fa:	f007 fc3a 	bl	26d72 <assert_print>
   1f4fe:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1f502:	480d      	ldr	r0, [pc, #52]	; (1f538 <nrfx_nvmc_word_write+0x50>)
   1f504:	f007 fc2e 	bl	26d64 <assert_post_action>
   1f508:	f010 0403 	ands.w	r4, r0, #3
   1f50c:	d009      	beq.n	1f522 <nrfx_nvmc_word_write+0x3a>
   1f50e:	490c      	ldr	r1, [pc, #48]	; (1f540 <nrfx_nvmc_word_write+0x58>)
   1f510:	f240 1395 	movw	r3, #405	; 0x195
   1f514:	4a08      	ldr	r2, [pc, #32]	; (1f538 <nrfx_nvmc_word_write+0x50>)
   1f516:	4809      	ldr	r0, [pc, #36]	; (1f53c <nrfx_nvmc_word_write+0x54>)
   1f518:	f007 fc2b 	bl	26d72 <assert_print>
   1f51c:	f240 1195 	movw	r1, #405	; 0x195
   1f520:	e7ef      	b.n	1f502 <nrfx_nvmc_word_write+0x1a>
   1f522:	2301      	movs	r3, #1
   1f524:	4d07      	ldr	r5, [pc, #28]	; (1f544 <nrfx_nvmc_word_write+0x5c>)
   1f526:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1f52a:	f7ff ff9f 	bl	1f46c <nvmc_word_write>
   1f52e:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1f532:	bd38      	pop	{r3, r4, r5, pc}
   1f534:	00032b7a 	.word	0x00032b7a
   1f538:	00032b04 	.word	0x00032b04
   1f53c:	0002dd81 	.word	0x0002dd81
   1f540:	00032b94 	.word	0x00032b94
   1f544:	40039000 	.word	0x40039000

0001f548 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1f548:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f54a:	4d43      	ldr	r5, [pc, #268]	; (1f658 <qspi_xfer+0x110>)
   1f54c:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1f550:	b94c      	cbnz	r4, 1f566 <qspi_xfer+0x1e>
   1f552:	4942      	ldr	r1, [pc, #264]	; (1f65c <qspi_xfer+0x114>)
   1f554:	2368      	movs	r3, #104	; 0x68
   1f556:	4a42      	ldr	r2, [pc, #264]	; (1f660 <qspi_xfer+0x118>)
   1f558:	4842      	ldr	r0, [pc, #264]	; (1f664 <qspi_xfer+0x11c>)
   1f55a:	f007 fc0a 	bl	26d72 <assert_print>
   1f55e:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1f560:	483f      	ldr	r0, [pc, #252]	; (1f660 <qspi_xfer+0x118>)
   1f562:	f007 fbff 	bl	26d64 <assert_post_action>
   1f566:	b938      	cbnz	r0, 1f578 <qspi_xfer+0x30>
   1f568:	493f      	ldr	r1, [pc, #252]	; (1f668 <qspi_xfer+0x120>)
   1f56a:	2369      	movs	r3, #105	; 0x69
   1f56c:	4a3c      	ldr	r2, [pc, #240]	; (1f660 <qspi_xfer+0x118>)
   1f56e:	483d      	ldr	r0, [pc, #244]	; (1f664 <qspi_xfer+0x11c>)
   1f570:	f007 fbff 	bl	26d72 <assert_print>
   1f574:	2169      	movs	r1, #105	; 0x69
   1f576:	e7f3      	b.n	1f560 <qspi_xfer+0x18>
   1f578:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1f57c:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1f580:	d165      	bne.n	1f64e <qspi_xfer+0x106>
   1f582:	0786      	lsls	r6, r0, #30
   1f584:	d163      	bne.n	1f64e <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1f586:	2c01      	cmp	r4, #1
   1f588:	d001      	beq.n	1f58e <qspi_xfer+0x46>
   1f58a:	429c      	cmp	r4, r3
   1f58c:	d161      	bne.n	1f652 <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1f58e:	682c      	ldr	r4, [r5, #0]
   1f590:	bb04      	cbnz	r4, 1f5d4 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f592:	2b02      	cmp	r3, #2
   1f594:	4b35      	ldr	r3, [pc, #212]	; (1f66c <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1f596:	bf0b      	itete	eq
   1f598:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1f59c:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1f5a0:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1f5a4:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1f5a8:	bf0b      	itete	eq
   1f5aa:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1f5ae:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1f5b2:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1f5b4:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f5b6:	2100      	movs	r1, #0
   1f5b8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5bc:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1f5c0:	2201      	movs	r2, #1
   1f5c2:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1f5c6:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f5c8:	4a28      	ldr	r2, [pc, #160]	; (1f66c <qspi_xfer+0x124>)
   1f5ca:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1f5ce:	2b00      	cmp	r3, #0
   1f5d0:	d0fb      	beq.n	1f5ca <qspi_xfer+0x82>
   1f5d2:	e00d      	b.n	1f5f0 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1f5d4:	68ae      	ldr	r6, [r5, #8]
   1f5d6:	4c25      	ldr	r4, [pc, #148]	; (1f66c <qspi_xfer+0x124>)
   1f5d8:	b166      	cbz	r6, 1f5f4 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f5da:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1f5dc:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1f5de:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1f5e0:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f5e2:	d12d      	bne.n	1f640 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1f5e4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1f5e8:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1f5ec:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1f5f0:	481f      	ldr	r0, [pc, #124]	; (1f670 <qspi_xfer+0x128>)
}
   1f5f2:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f5f4:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1f5f6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1f5fa:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1f5fc:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1f5fe:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1f600:	bf0c      	ite	eq
   1f602:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1f606:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f60a:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1f60e:	bf0b      	itete	eq
   1f610:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1f614:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1f618:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1f61c:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1f620:	bf08      	it	eq
   1f622:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f624:	4911      	ldr	r1, [pc, #68]	; (1f66c <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1f626:	bf18      	it	ne
   1f628:	2304      	movne	r3, #4
   1f62a:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1f62e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f634:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1f638:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f63c:	601a      	str	r2, [r3, #0]
}
   1f63e:	e7d7      	b.n	1f5f0 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1f640:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1f644:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1f648:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1f64c:	e7d0      	b.n	1f5f0 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1f64e:	4809      	ldr	r0, [pc, #36]	; (1f674 <qspi_xfer+0x12c>)
   1f650:	e7cf      	b.n	1f5f2 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1f652:	4809      	ldr	r0, [pc, #36]	; (1f678 <qspi_xfer+0x130>)
   1f654:	e7cd      	b.n	1f5f2 <qspi_xfer+0xaa>
   1f656:	bf00      	nop
   1f658:	20021904 	.word	0x20021904
   1f65c:	00032bf9 	.word	0x00032bf9
   1f660:	00032bbd 	.word	0x00032bbd
   1f664:	0002dd81 	.word	0x0002dd81
   1f668:	00032c25 	.word	0x00032c25
   1f66c:	4002b000 	.word	0x4002b000
   1f670:	0bad0000 	.word	0x0bad0000
   1f674:	0bad000a 	.word	0x0bad000a
   1f678:	0bad000b 	.word	0x0bad000b

0001f67c <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1f67c:	b538      	push	{r3, r4, r5, lr}
   1f67e:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f680:	4d06      	ldr	r5, [pc, #24]	; (1f69c <qspi_ready_wait+0x20>)
   1f682:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1f686:	b933      	cbnz	r3, 1f696 <qspi_ready_wait+0x1a>
   1f688:	200a      	movs	r0, #10
   1f68a:	f00b fb98 	bl	2adbe <nrfx_busy_wait>
   1f68e:	3c01      	subs	r4, #1
   1f690:	d1f7      	bne.n	1f682 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1f692:	4803      	ldr	r0, [pc, #12]	; (1f6a0 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1f694:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1f696:	4803      	ldr	r0, [pc, #12]	; (1f6a4 <qspi_ready_wait+0x28>)
   1f698:	e7fc      	b.n	1f694 <qspi_ready_wait+0x18>
   1f69a:	bf00      	nop
   1f69c:	4002b000 	.word	0x4002b000
   1f6a0:	0bad0007 	.word	0x0bad0007
   1f6a4:	0bad0000 	.word	0x0bad0000

0001f6a8 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1f6a8:	4b08      	ldr	r3, [pc, #32]	; (1f6cc <qspi_event_xfer_handle.constprop.0+0x24>)
   1f6aa:	689a      	ldr	r2, [r3, #8]
   1f6ac:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1f6ae:	691a      	ldr	r2, [r3, #16]
   1f6b0:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1f6b2:	699a      	ldr	r2, [r3, #24]
   1f6b4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1f6b6:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1f6b8:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1f6ba:	b132      	cbz	r2, 1f6ca <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1f6bc:	695a      	ldr	r2, [r3, #20]
   1f6be:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1f6c0:	69da      	ldr	r2, [r3, #28]
   1f6c2:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1f6c4:	2200      	movs	r2, #0
   1f6c6:	60da      	str	r2, [r3, #12]
   1f6c8:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1f6ca:	4770      	bx	lr
   1f6cc:	20021904 	.word	0x20021904

0001f6d0 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1f6d0:	b508      	push	{r3, lr}
    switch (port)
   1f6d2:	0943      	lsrs	r3, r0, #5
   1f6d4:	d00d      	beq.n	1f6f2 <nrf_gpio_cfg.constprop.0+0x22>
   1f6d6:	2b01      	cmp	r3, #1
   1f6d8:	d01e      	beq.n	1f718 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f6da:	4914      	ldr	r1, [pc, #80]	; (1f72c <nrf_gpio_cfg.constprop.0+0x5c>)
   1f6dc:	4814      	ldr	r0, [pc, #80]	; (1f730 <nrf_gpio_cfg.constprop.0+0x60>)
   1f6de:	f240 2347 	movw	r3, #583	; 0x247
   1f6e2:	4a14      	ldr	r2, [pc, #80]	; (1f734 <nrf_gpio_cfg.constprop.0+0x64>)
   1f6e4:	f007 fb45 	bl	26d72 <assert_print>
   1f6e8:	f240 2147 	movw	r1, #583	; 0x247
   1f6ec:	4811      	ldr	r0, [pc, #68]	; (1f734 <nrf_gpio_cfg.constprop.0+0x64>)
   1f6ee:	f007 fb39 	bl	26d64 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1f6f2:	f04f 33ff 	mov.w	r3, #4294967295
   1f6f6:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f6f8:	07da      	lsls	r2, r3, #31
   1f6fa:	d5ee      	bpl.n	1f6da <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1f6fc:	4a0e      	ldr	r2, [pc, #56]	; (1f738 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f6fe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1f702:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1f706:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1f70a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f70e:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f712:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1f716:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1f718:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f71c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f720:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f722:	07db      	lsls	r3, r3, #31
   1f724:	d5d9      	bpl.n	1f6da <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1f726:	4a05      	ldr	r2, [pc, #20]	; (1f73c <nrf_gpio_cfg.constprop.0+0x6c>)
   1f728:	e7e9      	b.n	1f6fe <nrf_gpio_cfg.constprop.0+0x2e>
   1f72a:	bf00      	nop
   1f72c:	00032104 	.word	0x00032104
   1f730:	0002dd81 	.word	0x0002dd81
   1f734:	000320d1 	.word	0x000320d1
   1f738:	40842500 	.word	0x40842500
   1f73c:	40842800 	.word	0x40842800

0001f740 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1f740:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1f742:	4b0e      	ldr	r3, [pc, #56]	; (1f77c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1f744:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1f746:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1f74a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1f74e:	2807      	cmp	r0, #7
   1f750:	d813      	bhi.n	1f77a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1f752:	e8df f000 	tbb	[pc, r0]
   1f756:	0f11      	.short	0x0f11
   1f758:	080a0b0d 	.word	0x080a0b0d
   1f75c:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1f75e:	0e10      	lsrs	r0, r2, #24
   1f760:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1f762:	0c10      	lsrs	r0, r2, #16
   1f764:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1f766:	0a10      	lsrs	r0, r2, #8
   1f768:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1f76a:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1f76c:	0e1a      	lsrs	r2, r3, #24
   1f76e:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1f770:	0c1a      	lsrs	r2, r3, #16
   1f772:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1f774:	0a1a      	lsrs	r2, r3, #8
   1f776:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1f778:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1f77a:	bd10      	pop	{r4, pc}
   1f77c:	4002b000 	.word	0x4002b000

0001f780 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1f780:	3802      	subs	r0, #2
   1f782:	2807      	cmp	r0, #7
   1f784:	d81f      	bhi.n	1f7c6 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1f786:	e8df f000 	tbb	[pc, r0]
   1f78a:	2729      	.short	0x2729
   1f78c:	21231125 	.word	0x21231125
   1f790:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1f792:	79cb      	ldrb	r3, [r1, #7]
   1f794:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1f796:	798a      	ldrb	r2, [r1, #6]
   1f798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1f79c:	794a      	ldrb	r2, [r1, #5]
   1f79e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1f7a2:	790a      	ldrb	r2, [r1, #4]
   1f7a4:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1f7a6:	4a0e      	ldr	r2, [pc, #56]	; (1f7e0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1f7a8:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1f7ac:	78cb      	ldrb	r3, [r1, #3]
   1f7ae:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1f7b0:	788a      	ldrb	r2, [r1, #2]
   1f7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1f7b6:	784a      	ldrb	r2, [r1, #1]
   1f7b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1f7bc:	780a      	ldrb	r2, [r1, #0]
   1f7be:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1f7c0:	4a07      	ldr	r2, [pc, #28]	; (1f7e0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1f7c2:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1f7c6:	4770      	bx	lr
    switch (length)
   1f7c8:	2300      	movs	r3, #0
   1f7ca:	e7e4      	b.n	1f796 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1f7cc:	2300      	movs	r3, #0
   1f7ce:	e7e5      	b.n	1f79c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1f7d0:	2300      	movs	r3, #0
   1f7d2:	e7e6      	b.n	1f7a2 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1f7d4:	2300      	movs	r3, #0
   1f7d6:	e7eb      	b.n	1f7b0 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1f7d8:	2300      	movs	r3, #0
   1f7da:	e7ec      	b.n	1f7b6 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1f7dc:	2300      	movs	r3, #0
   1f7de:	e7ed      	b.n	1f7bc <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1f7e0:	4002b000 	.word	0x4002b000

0001f7e4 <nrfx_qspi_init>:
{
   1f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f7e6:	460d      	mov	r5, r1
   1f7e8:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1f7ea:	4604      	mov	r4, r0
   1f7ec:	b958      	cbnz	r0, 1f806 <nrfx_qspi_init+0x22>
   1f7ee:	496e      	ldr	r1, [pc, #440]	; (1f9a8 <nrfx_qspi_init+0x1c4>)
   1f7f0:	486e      	ldr	r0, [pc, #440]	; (1f9ac <nrfx_qspi_init+0x1c8>)
   1f7f2:	f44f 7388 	mov.w	r3, #272	; 0x110
   1f7f6:	4a6e      	ldr	r2, [pc, #440]	; (1f9b0 <nrfx_qspi_init+0x1cc>)
   1f7f8:	f007 fabb 	bl	26d72 <assert_print>
   1f7fc:	f44f 7188 	mov.w	r1, #272	; 0x110
   1f800:	486b      	ldr	r0, [pc, #428]	; (1f9b0 <nrfx_qspi_init+0x1cc>)
   1f802:	f007 faaf 	bl	26d64 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1f806:	4f6b      	ldr	r7, [pc, #428]	; (1f9b4 <nrfx_qspi_init+0x1d0>)
   1f808:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1f80c:	2b00      	cmp	r3, #0
   1f80e:	f040 80c6 	bne.w	1f99e <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1f812:	7cc2      	ldrb	r2, [r0, #19]
   1f814:	b112      	cbz	r2, 1f81c <nrfx_qspi_init+0x38>
   1f816:	7d03      	ldrb	r3, [r0, #20]
   1f818:	2b00      	cmp	r3, #0
   1f81a:	d170      	bne.n	1f8fe <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1f81c:	7920      	ldrb	r0, [r4, #4]
   1f81e:	28ff      	cmp	r0, #255	; 0xff
   1f820:	f000 80bf 	beq.w	1f9a2 <nrfx_qspi_init+0x1be>
   1f824:	7963      	ldrb	r3, [r4, #5]
   1f826:	2bff      	cmp	r3, #255	; 0xff
   1f828:	f000 80bb 	beq.w	1f9a2 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1f82c:	79a3      	ldrb	r3, [r4, #6]
   1f82e:	2bff      	cmp	r3, #255	; 0xff
   1f830:	f000 80b7 	beq.w	1f9a2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1f834:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1f836:	29ff      	cmp	r1, #255	; 0xff
   1f838:	f000 80b3 	beq.w	1f9a2 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1f83c:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1f83e:	f8df c178 	ldr.w	ip, [pc, #376]	; 1f9b8 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1f842:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1f846:	4563      	cmp	r3, ip
   1f848:	f040 80ab 	bne.w	1f9a2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1f84c:	290e      	cmp	r1, #14
   1f84e:	f040 80a8 	bne.w	1f9a2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f852:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1f854:	2bff      	cmp	r3, #255	; 0xff
   1f856:	d002      	beq.n	1f85e <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f858:	2b0f      	cmp	r3, #15
   1f85a:	f040 80a2 	bne.w	1f9a2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f85e:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1f860:	2bff      	cmp	r3, #255	; 0xff
   1f862:	d002      	beq.n	1f86a <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f864:	2b10      	cmp	r3, #16
   1f866:	f040 809c 	bne.w	1f9a2 <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1f86a:	b9d2      	cbnz	r2, 1f8a2 <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1f86c:	2103      	movs	r1, #3
   1f86e:	f7ff ff2f 	bl	1f6d0 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1f872:	2103      	movs	r1, #3
   1f874:	7960      	ldrb	r0, [r4, #5]
   1f876:	f7ff ff2b 	bl	1f6d0 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1f87a:	2103      	movs	r1, #3
   1f87c:	79a0      	ldrb	r0, [r4, #6]
   1f87e:	f7ff ff27 	bl	1f6d0 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1f882:	79e0      	ldrb	r0, [r4, #7]
   1f884:	2103      	movs	r1, #3
   1f886:	f7ff ff23 	bl	1f6d0 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1f88a:	7a20      	ldrb	r0, [r4, #8]
   1f88c:	28ff      	cmp	r0, #255	; 0xff
   1f88e:	d002      	beq.n	1f896 <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1f890:	2103      	movs	r1, #3
   1f892:	f7ff ff1d 	bl	1f6d0 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1f896:	7a60      	ldrb	r0, [r4, #9]
   1f898:	28ff      	cmp	r0, #255	; 0xff
   1f89a:	d002      	beq.n	1f8a2 <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1f89c:	2103      	movs	r1, #3
   1f89e:	f7ff ff17 	bl	1f6d0 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1f8a2:	7d23      	ldrb	r3, [r4, #20]
   1f8a4:	bb5b      	cbnz	r3, 1f8fe <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1f8a6:	7923      	ldrb	r3, [r4, #4]
   1f8a8:	2bff      	cmp	r3, #255	; 0xff
   1f8aa:	bf14      	ite	ne
   1f8ac:	461a      	movne	r2, r3
   1f8ae:	f04f 32ff 	moveq.w	r2, #4294967295
   1f8b2:	4b42      	ldr	r3, [pc, #264]	; (1f9bc <nrfx_qspi_init+0x1d8>)
   1f8b4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1f8b8:	7962      	ldrb	r2, [r4, #5]
   1f8ba:	2aff      	cmp	r2, #255	; 0xff
   1f8bc:	bf08      	it	eq
   1f8be:	f04f 32ff 	moveq.w	r2, #4294967295
   1f8c2:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1f8c6:	79a2      	ldrb	r2, [r4, #6]
   1f8c8:	2aff      	cmp	r2, #255	; 0xff
   1f8ca:	bf08      	it	eq
   1f8cc:	f04f 32ff 	moveq.w	r2, #4294967295
   1f8d0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1f8d4:	79e2      	ldrb	r2, [r4, #7]
   1f8d6:	2aff      	cmp	r2, #255	; 0xff
   1f8d8:	bf08      	it	eq
   1f8da:	f04f 32ff 	moveq.w	r2, #4294967295
   1f8de:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1f8e2:	7a22      	ldrb	r2, [r4, #8]
   1f8e4:	2aff      	cmp	r2, #255	; 0xff
   1f8e6:	bf08      	it	eq
   1f8e8:	f04f 32ff 	moveq.w	r2, #4294967295
   1f8ec:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1f8f0:	7a62      	ldrb	r2, [r4, #9]
   1f8f2:	2aff      	cmp	r2, #255	; 0xff
   1f8f4:	bf08      	it	eq
   1f8f6:	f04f 32ff 	moveq.w	r2, #4294967295
   1f8fa:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1f8fe:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1f900:	4a2e      	ldr	r2, [pc, #184]	; (1f9bc <nrfx_qspi_init+0x1d8>)
   1f902:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1f906:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1f908:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1f90a:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1f90c:	019b      	lsls	r3, r3, #6
   1f90e:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1f912:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1f914:	7b61      	ldrb	r1, [r4, #13]
   1f916:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1f91a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1f91e:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1f920:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1f924:	bbb1      	cbnz	r1, 1f994 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1f926:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1f92a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1f92e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1f932:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1f936:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1f93a:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1f93c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1f940:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1f944:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1f946:	7be1      	ldrb	r1, [r4, #15]
   1f948:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1f94c:	7c21      	ldrb	r1, [r4, #16]
   1f94e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1f952:	7c61      	ldrb	r1, [r4, #17]
   1f954:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1f958:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1f95c:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1f95e:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1f962:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1f966:	2301      	movs	r3, #1
   1f968:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1f96c:	b115      	cbz	r5, 1f974 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1f96e:	202b      	movs	r0, #43	; 0x2b
   1f970:	f7f1 f8b6 	bl	10ae0 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1f974:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1f976:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1f978:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1f97c:	4b0f      	ldr	r3, [pc, #60]	; (1f9bc <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1f97e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1f982:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f986:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f98a:	601a      	str	r2, [r3, #0]
}
   1f98c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1f990:	f7ff be74 	b.w	1f67c <qspi_ready_wait>
        regval &= ~(1 << 17);
   1f994:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1f998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1f99c:	e7c5      	b.n	1f92a <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1f99e:	4808      	ldr	r0, [pc, #32]	; (1f9c0 <nrfx_qspi_init+0x1dc>)
}
   1f9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f9a2:	4808      	ldr	r0, [pc, #32]	; (1f9c4 <nrfx_qspi_init+0x1e0>)
   1f9a4:	e7fc      	b.n	1f9a0 <nrfx_qspi_init+0x1bc>
   1f9a6:	bf00      	nop
   1f9a8:	00032ace 	.word	0x00032ace
   1f9ac:	0002dd81 	.word	0x0002dd81
   1f9b0:	00032bbd 	.word	0x00032bbd
   1f9b4:	20021904 	.word	0x20021904
   1f9b8:	000d1211 	.word	0x000d1211
   1f9bc:	4002b000 	.word	0x4002b000
   1f9c0:	0bad0005 	.word	0x0bad0005
   1f9c4:	0bad0004 	.word	0x0bad0004

0001f9c8 <nrfx_qspi_cinstr_xfer>:
{
   1f9c8:	b570      	push	{r4, r5, r6, lr}
   1f9ca:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f9cc:	4a26      	ldr	r2, [pc, #152]	; (1fa68 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1f9ce:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f9d0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1f9d4:	b95a      	cbnz	r2, 1f9ee <nrfx_qspi_cinstr_xfer+0x26>
   1f9d6:	4925      	ldr	r1, [pc, #148]	; (1fa6c <nrfx_qspi_cinstr_xfer+0xa4>)
   1f9d8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1f9dc:	4a24      	ldr	r2, [pc, #144]	; (1fa70 <nrfx_qspi_cinstr_xfer+0xa8>)
   1f9de:	4825      	ldr	r0, [pc, #148]	; (1fa74 <nrfx_qspi_cinstr_xfer+0xac>)
   1f9e0:	f007 f9c7 	bl	26d72 <assert_print>
   1f9e4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1f9e8:	4821      	ldr	r0, [pc, #132]	; (1fa70 <nrfx_qspi_cinstr_xfer+0xa8>)
   1f9ea:	f007 f9bb 	bl	26d64 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1f9ee:	2a01      	cmp	r2, #1
   1f9f0:	d137      	bne.n	1fa62 <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9f2:	2200      	movs	r2, #0
   1f9f4:	4e20      	ldr	r6, [pc, #128]	; (1fa78 <nrfx_qspi_cinstr_xfer+0xb0>)
   1f9f6:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1f9fa:	b111      	cbz	r1, 1fa02 <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1f9fc:	7840      	ldrb	r0, [r0, #1]
   1f9fe:	f7ff febf 	bl	1f780 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1fa02:	2301      	movs	r3, #1
   1fa04:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1fa08:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1fa0a:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1fa0c:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1fa0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1fa12:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1fa14:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1fa16:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1fa18:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1fa1c:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1fa1e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1fa22:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1fa24:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1fa28:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1fa2c:	f7ff fe26 	bl	1f67c <qspi_ready_wait>
   1fa30:	4b12      	ldr	r3, [pc, #72]	; (1fa7c <nrfx_qspi_cinstr_xfer+0xb4>)
   1fa32:	4298      	cmp	r0, r3
   1fa34:	d10b      	bne.n	1fa4e <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1fa36:	792b      	ldrb	r3, [r5, #4]
   1fa38:	b993      	cbnz	r3, 1fa60 <nrfx_qspi_cinstr_xfer+0x98>
   1fa3a:	4911      	ldr	r1, [pc, #68]	; (1fa80 <nrfx_qspi_cinstr_xfer+0xb8>)
   1fa3c:	f240 136b 	movw	r3, #363	; 0x16b
   1fa40:	4a0b      	ldr	r2, [pc, #44]	; (1fa70 <nrfx_qspi_cinstr_xfer+0xa8>)
   1fa42:	480c      	ldr	r0, [pc, #48]	; (1fa74 <nrfx_qspi_cinstr_xfer+0xac>)
   1fa44:	f007 f995 	bl	26d72 <assert_print>
   1fa48:	f240 116b 	movw	r1, #363	; 0x16b
   1fa4c:	e7cc      	b.n	1f9e8 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fa4e:	2300      	movs	r3, #0
   1fa50:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1fa54:	b11c      	cbz	r4, 1fa5e <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1fa56:	4621      	mov	r1, r4
   1fa58:	7868      	ldrb	r0, [r5, #1]
   1fa5a:	f7ff fe71 	bl	1f740 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1fa5e:	4809      	ldr	r0, [pc, #36]	; (1fa84 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1fa60:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1fa62:	4809      	ldr	r0, [pc, #36]	; (1fa88 <nrfx_qspi_cinstr_xfer+0xc0>)
   1fa64:	e7fc      	b.n	1fa60 <nrfx_qspi_cinstr_xfer+0x98>
   1fa66:	bf00      	nop
   1fa68:	20021904 	.word	0x20021904
   1fa6c:	00032bf9 	.word	0x00032bf9
   1fa70:	00032bbd 	.word	0x00032bbd
   1fa74:	0002dd81 	.word	0x0002dd81
   1fa78:	4002b000 	.word	0x4002b000
   1fa7c:	0bad0007 	.word	0x0bad0007
   1fa80:	00032c3d 	.word	0x00032c3d
   1fa84:	0bad0000 	.word	0x0bad0000
   1fa88:	0bad000b 	.word	0x0bad000b

0001fa8c <nrfx_qspi_mem_busy_check>:
{
   1fa8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1fa8e:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1fa90:	4a0c      	ldr	r2, [pc, #48]	; (1fac4 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1fa92:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1fa94:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1fa96:	f10d 0207 	add.w	r2, sp, #7
   1fa9a:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1fa9c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1faa0:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1faa4:	f7ff ff90 	bl	1f9c8 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1faa8:	4b07      	ldr	r3, [pc, #28]	; (1fac8 <nrfx_qspi_mem_busy_check+0x3c>)
   1faaa:	4298      	cmp	r0, r3
   1faac:	d106      	bne.n	1fabc <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1faae:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1fab2:	f013 0f01 	tst.w	r3, #1
   1fab6:	4b05      	ldr	r3, [pc, #20]	; (1facc <nrfx_qspi_mem_busy_check+0x40>)
   1fab8:	bf18      	it	ne
   1faba:	4618      	movne	r0, r3
}
   1fabc:	b005      	add	sp, #20
   1fabe:	f85d fb04 	ldr.w	pc, [sp], #4
   1fac2:	bf00      	nop
   1fac4:	01000205 	.word	0x01000205
   1fac8:	0bad0000 	.word	0x0bad0000
   1facc:	0bad000b 	.word	0x0bad000b

0001fad0 <nrfx_qspi_uninit>:
{
   1fad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1fad4:	4e29      	ldr	r6, [pc, #164]	; (1fb7c <nrfx_qspi_uninit+0xac>)
   1fad6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1fada:	b95b      	cbnz	r3, 1faf4 <nrfx_qspi_uninit+0x24>
   1fadc:	4928      	ldr	r1, [pc, #160]	; (1fb80 <nrfx_qspi_uninit+0xb0>)
   1fade:	4829      	ldr	r0, [pc, #164]	; (1fb84 <nrfx_qspi_uninit+0xb4>)
   1fae0:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1fae4:	4a28      	ldr	r2, [pc, #160]	; (1fb88 <nrfx_qspi_uninit+0xb8>)
   1fae6:	f007 f944 	bl	26d72 <assert_print>
   1faea:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1faee:	4826      	ldr	r0, [pc, #152]	; (1fb88 <nrfx_qspi_uninit+0xb8>)
   1faf0:	f007 f938 	bl	26d64 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1faf4:	202b      	movs	r0, #43	; 0x2b
   1faf6:	f7f1 f801 	bl	10afc <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1fafa:	4b24      	ldr	r3, [pc, #144]	; (1fb8c <nrfx_qspi_uninit+0xbc>)
   1fafc:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1fb00:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1fb04:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1fb08:	bf04      	itt	eq
   1fb0a:	4a21      	ldreq	r2, [pc, #132]	; (1fb90 <nrfx_qspi_uninit+0xc0>)
   1fb0c:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1fb10:	2201      	movs	r2, #1
   1fb12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fb16:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1fb18:	2200      	movs	r2, #0
   1fb1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fb1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1fb22:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1fb26:	bb22      	cbnz	r2, 1fb72 <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1fb28:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1fb2c:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1fb30:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1fb32:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1fb36:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1fb3a:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1fb3e:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1fb42:	f00b f9bf 	bl	2aec4 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1fb46:	fa5f f089 	uxtb.w	r0, r9
   1fb4a:	f00b f9bb 	bl	2aec4 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1fb4e:	fa5f f088 	uxtb.w	r0, r8
   1fb52:	f00b f9b7 	bl	2aec4 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1fb56:	b2f8      	uxtb	r0, r7
   1fb58:	f00b f9b4 	bl	2aec4 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fb5c:	b2e8      	uxtb	r0, r5
   1fb5e:	28ff      	cmp	r0, #255	; 0xff
   1fb60:	b2e4      	uxtb	r4, r4
   1fb62:	d001      	beq.n	1fb68 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1fb64:	f00b f9ae 	bl	2aec4 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fb68:	2cff      	cmp	r4, #255	; 0xff
   1fb6a:	d002      	beq.n	1fb72 <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1fb6c:	4620      	mov	r0, r4
   1fb6e:	f00b f9a9 	bl	2aec4 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1fb72:	2300      	movs	r3, #0
   1fb74:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1fb78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fb7c:	20021904 	.word	0x20021904
   1fb80:	00032bf9 	.word	0x00032bf9
   1fb84:	0002dd81 	.word	0x0002dd81
   1fb88:	00032bbd 	.word	0x00032bbd
   1fb8c:	4002b000 	.word	0x4002b000
   1fb90:	00030100 	.word	0x00030100

0001fb94 <nrfx_qspi_erase>:
{
   1fb94:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1fb96:	4a1a      	ldr	r2, [pc, #104]	; (1fc00 <nrfx_qspi_erase+0x6c>)
   1fb98:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1fb9c:	b95b      	cbnz	r3, 1fbb6 <nrfx_qspi_erase+0x22>
   1fb9e:	4919      	ldr	r1, [pc, #100]	; (1fc04 <nrfx_qspi_erase+0x70>)
   1fba0:	4819      	ldr	r0, [pc, #100]	; (1fc08 <nrfx_qspi_erase+0x74>)
   1fba2:	f44f 730a 	mov.w	r3, #552	; 0x228
   1fba6:	4a19      	ldr	r2, [pc, #100]	; (1fc0c <nrfx_qspi_erase+0x78>)
   1fba8:	f007 f8e3 	bl	26d72 <assert_print>
   1fbac:	f44f 710a 	mov.w	r1, #552	; 0x228
   1fbb0:	4816      	ldr	r0, [pc, #88]	; (1fc0c <nrfx_qspi_erase+0x78>)
   1fbb2:	f007 f8d7 	bl	26d64 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1fbb6:	078c      	lsls	r4, r1, #30
   1fbb8:	d11e      	bne.n	1fbf8 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1fbba:	6814      	ldr	r4, [r2, #0]
   1fbbc:	b10c      	cbz	r4, 1fbc2 <nrfx_qspi_erase+0x2e>
   1fbbe:	2b01      	cmp	r3, #1
   1fbc0:	d11c      	bne.n	1fbfc <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1fbc2:	2304      	movs	r3, #4
   1fbc4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1fbc8:	4b11      	ldr	r3, [pc, #68]	; (1fc10 <nrfx_qspi_erase+0x7c>)
   1fbca:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fbce:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1fbd0:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fbd4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fbd8:	2101      	movs	r1, #1
   1fbda:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1fbdc:	6810      	ldr	r0, [r2, #0]
   1fbde:	b940      	cbnz	r0, 1fbf2 <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fbe0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1fbe4:	2900      	cmp	r1, #0
   1fbe6:	d0fb      	beq.n	1fbe0 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1fbe8:	2301      	movs	r3, #1
   1fbea:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1fbee:	4809      	ldr	r0, [pc, #36]	; (1fc14 <nrfx_qspi_erase+0x80>)
}
   1fbf0:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1fbf2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1fbf6:	e7fa      	b.n	1fbee <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1fbf8:	4807      	ldr	r0, [pc, #28]	; (1fc18 <nrfx_qspi_erase+0x84>)
   1fbfa:	e7f9      	b.n	1fbf0 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1fbfc:	4807      	ldr	r0, [pc, #28]	; (1fc1c <nrfx_qspi_erase+0x88>)
   1fbfe:	e7f7      	b.n	1fbf0 <nrfx_qspi_erase+0x5c>
   1fc00:	20021904 	.word	0x20021904
   1fc04:	00032bf9 	.word	0x00032bf9
   1fc08:	0002dd81 	.word	0x0002dd81
   1fc0c:	00032bbd 	.word	0x00032bbd
   1fc10:	4002b000 	.word	0x4002b000
   1fc14:	0bad0000 	.word	0x0bad0000
   1fc18:	0bad000a 	.word	0x0bad000a
   1fc1c:	0bad000b 	.word	0x0bad000b

0001fc20 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1fc20:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fc22:	4b17      	ldr	r3, [pc, #92]	; (1fc80 <nrfx_qspi_irq_handler+0x60>)
   1fc24:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1fc28:	b1e2      	cbz	r2, 1fc64 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fc2a:	2200      	movs	r2, #0
    switch (m_cb.state)
   1fc2c:	4c15      	ldr	r4, [pc, #84]	; (1fc84 <nrfx_qspi_irq_handler+0x64>)
   1fc2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1fc32:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1fc36:	2a03      	cmp	r2, #3
   1fc38:	d015      	beq.n	1fc66 <nrfx_qspi_irq_handler+0x46>
   1fc3a:	2a04      	cmp	r2, #4
   1fc3c:	d015      	beq.n	1fc6a <nrfx_qspi_irq_handler+0x4a>
   1fc3e:	2a02      	cmp	r2, #2
   1fc40:	d104      	bne.n	1fc4c <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1fc42:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1fc44:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1fc48:	f7ff fd2e 	bl	1f6a8 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1fc4c:	68a3      	ldr	r3, [r4, #8]
   1fc4e:	b913      	cbnz	r3, 1fc56 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1fc50:	2301      	movs	r3, #1
   1fc52:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1fc56:	e9d4 3100 	ldrd	r3, r1, [r4]
   1fc5a:	2000      	movs	r0, #0
   1fc5c:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1fc5e:	2300      	movs	r3, #0
   1fc60:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1fc64:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1fc66:	2302      	movs	r3, #2
   1fc68:	e7ec      	b.n	1fc44 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1fc6a:	2203      	movs	r2, #3
   1fc6c:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1fc70:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1fc74:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1fc76:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1fc7a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1fc7e:	e7e5      	b.n	1fc4c <nrfx_qspi_irq_handler+0x2c>
   1fc80:	4002b000 	.word	0x4002b000
   1fc84:	20021904 	.word	0x20021904

0001fc88 <nrf_gpio_pin_port_decode>:
{
   1fc88:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc8a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1fc8c:	095a      	lsrs	r2, r3, #5
   1fc8e:	d00d      	beq.n	1fcac <nrf_gpio_pin_port_decode+0x24>
   1fc90:	2a01      	cmp	r2, #1
   1fc92:	d013      	beq.n	1fcbc <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc94:	490e      	ldr	r1, [pc, #56]	; (1fcd0 <nrf_gpio_pin_port_decode+0x48>)
   1fc96:	480f      	ldr	r0, [pc, #60]	; (1fcd4 <nrf_gpio_pin_port_decode+0x4c>)
   1fc98:	f240 2347 	movw	r3, #583	; 0x247
   1fc9c:	4a0e      	ldr	r2, [pc, #56]	; (1fcd8 <nrf_gpio_pin_port_decode+0x50>)
   1fc9e:	f007 f868 	bl	26d72 <assert_print>
   1fca2:	f240 2147 	movw	r1, #583	; 0x247
   1fca6:	480c      	ldr	r0, [pc, #48]	; (1fcd8 <nrf_gpio_pin_port_decode+0x50>)
   1fca8:	f007 f85c 	bl	26d64 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1fcac:	f04f 32ff 	mov.w	r2, #4294967295
   1fcb0:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcb4:	07d9      	lsls	r1, r3, #31
   1fcb6:	d5ed      	bpl.n	1fc94 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1fcb8:	4808      	ldr	r0, [pc, #32]	; (1fcdc <nrf_gpio_pin_port_decode+0x54>)
   1fcba:	e008      	b.n	1fcce <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1fcbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1fcc0:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1fcc4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcc6:	07d2      	lsls	r2, r2, #31
   1fcc8:	d5e4      	bpl.n	1fc94 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1fcca:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1fccc:	4804      	ldr	r0, [pc, #16]	; (1fce0 <nrf_gpio_pin_port_decode+0x58>)
}
   1fcce:	bd08      	pop	{r3, pc}
   1fcd0:	00032104 	.word	0x00032104
   1fcd4:	0002dd81 	.word	0x0002dd81
   1fcd8:	000320d1 	.word	0x000320d1
   1fcdc:	40842500 	.word	0x40842500
   1fce0:	40842800 	.word	0x40842800

0001fce4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1fce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fce8:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1fcea:	460c      	mov	r4, r1
   1fcec:	b959      	cbnz	r1, 1fd06 <nrfx_spim_init+0x22>
   1fcee:	498d      	ldr	r1, [pc, #564]	; (1ff24 <nrfx_spim_init+0x240>)
   1fcf0:	488d      	ldr	r0, [pc, #564]	; (1ff28 <nrfx_spim_init+0x244>)
   1fcf2:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1fcf6:	4a8d      	ldr	r2, [pc, #564]	; (1ff2c <nrfx_spim_init+0x248>)
   1fcf8:	f007 f83b 	bl	26d72 <assert_print>
   1fcfc:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1fd00:	488a      	ldr	r0, [pc, #552]	; (1ff2c <nrfx_spim_init+0x248>)
   1fd02:	f007 f82f 	bl	26d64 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fd06:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fd08:	4d89      	ldr	r5, [pc, #548]	; (1ff30 <nrfx_spim_init+0x24c>)
   1fd0a:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1fd0e:	7f09      	ldrb	r1, [r1, #28]
   1fd10:	2900      	cmp	r1, #0
   1fd12:	f040 8100 	bne.w	1ff16 <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1fd16:	2f00      	cmp	r7, #0
   1fd18:	f040 80ff 	bne.w	1ff1a <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1fd1c:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1fd20:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1fd22:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1fd24:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1fd28:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1fd2a:	d027      	beq.n	1fd7c <nrfx_spim_init+0x98>
   1fd2c:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1fd30:	d124      	bne.n	1fd7c <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1fd32:	b119      	cbz	r1, 1fd3c <nrfx_spim_init+0x58>
   1fd34:	7d20      	ldrb	r0, [r4, #20]
   1fd36:	2800      	cmp	r0, #0
   1fd38:	f040 80d5 	bne.w	1fee6 <nrfx_spim_init+0x202>
   1fd3c:	487d      	ldr	r0, [pc, #500]	; (1ff34 <nrfx_spim_init+0x250>)
   1fd3e:	4581      	cmp	r9, r0
   1fd40:	d11c      	bne.n	1fd7c <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1fd42:	7820      	ldrb	r0, [r4, #0]
   1fd44:	28ff      	cmp	r0, #255	; 0xff
   1fd46:	d002      	beq.n	1fd4e <nrfx_spim_init+0x6a>
   1fd48:	2808      	cmp	r0, #8
   1fd4a:	f040 80e8 	bne.w	1ff1e <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1fd4e:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1fd50:	28ff      	cmp	r0, #255	; 0xff
   1fd52:	d002      	beq.n	1fd5a <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1fd54:	280b      	cmp	r0, #11
   1fd56:	f040 80e2 	bne.w	1ff1e <nrfx_spim_init+0x23a>
   1fd5a:	2eff      	cmp	r6, #255	; 0xff
   1fd5c:	d002      	beq.n	1fd64 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1fd5e:	2e0c      	cmp	r6, #12
   1fd60:	f040 80dd 	bne.w	1ff1e <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1fd64:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1fd66:	28ff      	cmp	r0, #255	; 0xff
   1fd68:	d002      	beq.n	1fd70 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1fd6a:	2809      	cmp	r0, #9
   1fd6c:	f040 80d7 	bne.w	1ff1e <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1fd70:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1fd72:	28ff      	cmp	r0, #255	; 0xff
   1fd74:	d002      	beq.n	1fd7c <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1fd76:	280a      	cmp	r0, #10
   1fd78:	f040 80d1 	bne.w	1ff1e <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1fd7c:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1fd80:	7fab      	ldrb	r3, [r5, #30]
   1fd82:	f361 0300 	bfi	r3, r1, #0, #1
   1fd86:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1fd88:	7922      	ldrb	r2, [r4, #4]
   1fd8a:	b2db      	uxtb	r3, r3
   1fd8c:	f362 0341 	bfi	r3, r2, #1, #1
   1fd90:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1fd92:	7c62      	ldrb	r2, [r4, #17]
   1fd94:	b2db      	uxtb	r3, r3
   1fd96:	f362 0382 	bfi	r3, r2, #2, #1
   1fd9a:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1fd9c:	78e3      	ldrb	r3, [r4, #3]
   1fd9e:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1fda0:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1fda2:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1fda6:	2b00      	cmp	r3, #0
   1fda8:	d142      	bne.n	1fe30 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1fdaa:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1fdac:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1fdae:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1fdb2:	7b23      	ldrb	r3, [r4, #12]
   1fdb4:	bf08      	it	eq
   1fdb6:	2703      	moveq	r7, #3
   1fdb8:	2b01      	cmp	r3, #1
   1fdba:	f200 8096 	bhi.w	1feea <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1fdbe:	f00b f88e 	bl	2aede <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1fdc2:	2300      	movs	r3, #0
   1fdc4:	9700      	str	r7, [sp, #0]
   1fdc6:	7820      	ldrb	r0, [r4, #0]
   1fdc8:	461a      	mov	r2, r3
   1fdca:	2101      	movs	r1, #1
   1fdcc:	f00b f8af 	bl	2af2e <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1fdd0:	7860      	ldrb	r0, [r4, #1]
   1fdd2:	28ff      	cmp	r0, #255	; 0xff
   1fdd4:	d008      	beq.n	1fde8 <nrfx_spim_init+0x104>
   1fdd6:	f00b f882 	bl	2aede <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1fdda:	2201      	movs	r2, #1
   1fddc:	9700      	str	r7, [sp, #0]
   1fdde:	2300      	movs	r3, #0
   1fde0:	4611      	mov	r1, r2
   1fde2:	7860      	ldrb	r0, [r4, #1]
   1fde4:	f00b f8a3 	bl	2af2e <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1fde8:	78a0      	ldrb	r0, [r4, #2]
   1fdea:	28ff      	cmp	r0, #255	; 0xff
   1fdec:	d005      	beq.n	1fdfa <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1fdee:	2200      	movs	r2, #0
   1fdf0:	9700      	str	r7, [sp, #0]
   1fdf2:	4611      	mov	r1, r2
   1fdf4:	7ba3      	ldrb	r3, [r4, #14]
   1fdf6:	f00b f89a 	bl	2af2e <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1fdfa:	78e0      	ldrb	r0, [r4, #3]
   1fdfc:	28ff      	cmp	r0, #255	; 0xff
   1fdfe:	d00b      	beq.n	1fe18 <nrfx_spim_init+0x134>
    if (value == 0)
   1fe00:	7923      	ldrb	r3, [r4, #4]
   1fe02:	2b00      	cmp	r3, #0
   1fe04:	d074      	beq.n	1fef0 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1fe06:	f00b f86a 	bl	2aede <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1fe0a:	2201      	movs	r2, #1
   1fe0c:	9700      	str	r7, [sp, #0]
   1fe0e:	2300      	movs	r3, #0
   1fe10:	4611      	mov	r1, r2
   1fe12:	78e0      	ldrb	r0, [r4, #3]
   1fe14:	f00b f88b 	bl	2af2e <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1fe18:	7be0      	ldrb	r0, [r4, #15]
   1fe1a:	28ff      	cmp	r0, #255	; 0xff
   1fe1c:	d008      	beq.n	1fe30 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1fe1e:	f00b f86a 	bl	2aef6 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1fe22:	2201      	movs	r2, #1
   1fe24:	9700      	str	r7, [sp, #0]
   1fe26:	2300      	movs	r3, #0
   1fe28:	4611      	mov	r1, r2
   1fe2a:	7be0      	ldrb	r0, [r4, #15]
   1fe2c:	f00b f87f 	bl	2af2e <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1fe30:	7d23      	ldrb	r3, [r4, #20]
   1fe32:	bb6b      	cbnz	r3, 1fe90 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1fe34:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1fe36:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1fe38:	2bff      	cmp	r3, #255	; 0xff
   1fe3a:	bf18      	it	ne
   1fe3c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1fe3e:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1fe40:	bf08      	it	eq
   1fe42:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1fe46:	2bff      	cmp	r3, #255	; 0xff
   1fe48:	bf08      	it	eq
   1fe4a:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1fe4e:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1fe52:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1fe56:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1fe5a:	f898 3004 	ldrb.w	r3, [r8, #4]
   1fe5e:	b9bb      	cbnz	r3, 1fe90 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1fe60:	78e3      	ldrb	r3, [r4, #3]
   1fe62:	2bff      	cmp	r3, #255	; 0xff
   1fe64:	d047      	beq.n	1fef6 <nrfx_spim_init+0x212>
   1fe66:	7c62      	ldrb	r2, [r4, #17]
   1fe68:	2a00      	cmp	r2, #0
   1fe6a:	d044      	beq.n	1fef6 <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1fe6c:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1fe6e:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1fe70:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1fe74:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1fe78:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1fe7c:	f898 3004 	ldrb.w	r3, [r8, #4]
   1fe80:	b933      	cbnz	r3, 1fe90 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1fe82:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1fe84:	2bff      	cmp	r3, #255	; 0xff
   1fe86:	bf08      	it	eq
   1fe88:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1fe8c:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1fe90:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1fe92:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1fe96:	68a3      	ldr	r3, [r4, #8]
   1fe98:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1fe9c:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1fe9e:	7b22      	ldrb	r2, [r4, #12]
   1fea0:	3b00      	subs	r3, #0
   1fea2:	bf18      	it	ne
   1fea4:	2301      	movne	r3, #1
    switch (spi_mode)
   1fea6:	2a02      	cmp	r2, #2
   1fea8:	d02f      	beq.n	1ff0a <nrfx_spim_init+0x226>
   1feaa:	2a03      	cmp	r2, #3
   1feac:	d030      	beq.n	1ff10 <nrfx_spim_init+0x22c>
   1feae:	2a01      	cmp	r2, #1
   1feb0:	d101      	bne.n	1feb6 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1feb2:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1feb6:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1feba:	79a3      	ldrb	r3, [r4, #6]
   1febc:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1fec0:	2307      	movs	r3, #7
   1fec2:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1fec6:	682b      	ldr	r3, [r5, #0]
   1fec8:	b12b      	cbz	r3, 1fed6 <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1feca:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1fece:	f340 3007 	sbfx	r0, r0, #12, #8
   1fed2:	f7f0 fe05 	bl	10ae0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1fed6:	2300      	movs	r3, #0
   1fed8:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1feda:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1fedc:	4816      	ldr	r0, [pc, #88]	; (1ff38 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fede:	772b      	strb	r3, [r5, #28]
}
   1fee0:	b003      	add	sp, #12
   1fee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1fee6:	4601      	mov	r1, r0
   1fee8:	e748      	b.n	1fd7c <nrfx_spim_init+0x98>
   1feea:	f00b f804 	bl	2aef6 <nrf_gpio_pin_set>
   1feee:	e768      	b.n	1fdc2 <nrfx_spim_init+0xde>
   1fef0:	f00b f801 	bl	2aef6 <nrf_gpio_pin_set>
   1fef4:	e789      	b.n	1fe0a <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1fef6:	f04f 33ff 	mov.w	r3, #4294967295
   1fefa:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1fefe:	2300      	movs	r3, #0
   1ff00:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1ff04:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1ff08:	e7b8      	b.n	1fe7c <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1ff0a:	f043 0304 	orr.w	r3, r3, #4
        break;
   1ff0e:	e7d2      	b.n	1feb6 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1ff10:	f043 0306 	orr.w	r3, r3, #6
        break;
   1ff14:	e7cf      	b.n	1feb6 <nrfx_spim_init+0x1d2>
        return err_code;
   1ff16:	4809      	ldr	r0, [pc, #36]	; (1ff3c <nrfx_spim_init+0x258>)
   1ff18:	e7e2      	b.n	1fee0 <nrfx_spim_init+0x1fc>
        return err_code;
   1ff1a:	4809      	ldr	r0, [pc, #36]	; (1ff40 <nrfx_spim_init+0x25c>)
   1ff1c:	e7e0      	b.n	1fee0 <nrfx_spim_init+0x1fc>
            return err_code;
   1ff1e:	4809      	ldr	r0, [pc, #36]	; (1ff44 <nrfx_spim_init+0x260>)
   1ff20:	e7de      	b.n	1fee0 <nrfx_spim_init+0x1fc>
   1ff22:	bf00      	nop
   1ff24:	00032ace 	.word	0x00032ace
   1ff28:	0002dd81 	.word	0x0002dd81
   1ff2c:	00032c4f 	.word	0x00032c4f
   1ff30:	20021938 	.word	0x20021938
   1ff34:	4000a000 	.word	0x4000a000
   1ff38:	0bad0000 	.word	0x0bad0000
   1ff3c:	0bad0005 	.word	0x0bad0005
   1ff40:	0bad0003 	.word	0x0bad0003
   1ff44:	0bad0004 	.word	0x0bad0004

0001ff48 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1ff48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1ff4c:	4d2e      	ldr	r5, [pc, #184]	; (20008 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ff4e:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1ff52:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1ff54:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1ff58:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1ff5c:	f898 301c 	ldrb.w	r3, [r8, #28]
   1ff60:	b95b      	cbnz	r3, 1ff7a <nrfx_spim_uninit+0x32>
   1ff62:	492a      	ldr	r1, [pc, #168]	; (2000c <nrfx_spim_uninit+0xc4>)
   1ff64:	482a      	ldr	r0, [pc, #168]	; (20010 <nrfx_spim_uninit+0xc8>)
   1ff66:	f240 230f 	movw	r3, #527	; 0x20f
   1ff6a:	4a2a      	ldr	r2, [pc, #168]	; (20014 <nrfx_spim_uninit+0xcc>)
   1ff6c:	f006 ff01 	bl	26d72 <assert_print>
   1ff70:	f240 210f 	movw	r1, #527	; 0x20f
   1ff74:	4827      	ldr	r0, [pc, #156]	; (20014 <nrfx_spim_uninit+0xcc>)
   1ff76:	f006 fef5 	bl	26d64 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1ff7a:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1ff7c:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1ff7e:	b1cb      	cbz	r3, 1ffb4 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1ff80:	f344 3007 	sbfx	r0, r4, #12, #8
   1ff84:	f7f0 fdba 	bl	10afc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1ff88:	4b23      	ldr	r3, [pc, #140]	; (20018 <nrfx_spim_uninit+0xd0>)
   1ff8a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1ff8e:	f898 301d 	ldrb.w	r3, [r8, #29]
   1ff92:	b17b      	cbz	r3, 1ffb4 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff94:	2301      	movs	r3, #1
   1ff96:	f04f 0864 	mov.w	r8, #100	; 0x64
   1ff9a:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff9c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1ffa0:	b92b      	cbnz	r3, 1ffae <nrfx_spim_uninit+0x66>
   1ffa2:	2001      	movs	r0, #1
   1ffa4:	f00a ff0b 	bl	2adbe <nrfx_busy_wait>
   1ffa8:	f1b8 0801 	subs.w	r8, r8, #1
   1ffac:	d1f6      	bne.n	1ff9c <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1ffae:	2200      	movs	r2, #0
   1ffb0:	19ab      	adds	r3, r5, r6
   1ffb2:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1ffb4:	2300      	movs	r3, #0
   1ffb6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1ffba:	19ab      	adds	r3, r5, r6
   1ffbc:	7f9b      	ldrb	r3, [r3, #30]
   1ffbe:	07db      	lsls	r3, r3, #31
   1ffc0:	d41b      	bmi.n	1fffa <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1ffc2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1ffc6:	f00a ffd1 	bl	2af6c <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1ffca:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1ffce:	f00a ffcd 	bl	2af6c <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1ffd2:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1ffd6:	f00a ffc9 	bl	2af6c <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1ffda:	793b      	ldrb	r3, [r7, #4]
   1ffdc:	b91b      	cbnz	r3, 1ffe6 <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1ffde:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1ffe2:	f00a ffc3 	bl	2af6c <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1ffe6:	19ab      	adds	r3, r5, r6
   1ffe8:	7fd8      	ldrb	r0, [r3, #31]
   1ffea:	28ff      	cmp	r0, #255	; 0xff
   1ffec:	d005      	beq.n	1fffa <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1ffee:	2300      	movs	r3, #0
   1fff0:	2201      	movs	r2, #1
   1fff2:	4619      	mov	r1, r3
   1fff4:	9300      	str	r3, [sp, #0]
   1fff6:	f00a ff9a 	bl	2af2e <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1fffa:	2300      	movs	r3, #0
   1fffc:	4435      	add	r5, r6
   1fffe:	772b      	strb	r3, [r5, #28]
}
   20000:	b002      	add	sp, #8
   20002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20006:	bf00      	nop
   20008:	20021938 	.word	0x20021938
   2000c:	00032c8b 	.word	0x00032c8b
   20010:	0002dd81 	.word	0x0002dd81
   20014:	00032c4f 	.word	0x00032c4f
   20018:	00080152 	.word	0x00080152

0002001c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2001c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20020:	4e60      	ldr	r6, [pc, #384]	; (201a4 <nrfx_spim_xfer+0x188>)
   20022:	7903      	ldrb	r3, [r0, #4]
{
   20024:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20026:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2002a:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   2002e:	4607      	mov	r7, r0
   20030:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   20032:	b95a      	cbnz	r2, 2004c <nrfx_spim_xfer+0x30>
   20034:	495c      	ldr	r1, [pc, #368]	; (201a8 <nrfx_spim_xfer+0x18c>)
   20036:	f240 23de 	movw	r3, #734	; 0x2de
   2003a:	4a5c      	ldr	r2, [pc, #368]	; (201ac <nrfx_spim_xfer+0x190>)
   2003c:	485c      	ldr	r0, [pc, #368]	; (201b0 <nrfx_spim_xfer+0x194>)
   2003e:	f006 fe98 	bl	26d72 <assert_print>
   20042:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   20046:	4859      	ldr	r0, [pc, #356]	; (201ac <nrfx_spim_xfer+0x190>)
   20048:	f006 fe8c 	bl	26d64 <assert_post_action>
   2004c:	680a      	ldr	r2, [r1, #0]
   2004e:	b95a      	cbnz	r2, 20068 <nrfx_spim_xfer+0x4c>
   20050:	684a      	ldr	r2, [r1, #4]
   20052:	b14a      	cbz	r2, 20068 <nrfx_spim_xfer+0x4c>
   20054:	4957      	ldr	r1, [pc, #348]	; (201b4 <nrfx_spim_xfer+0x198>)
   20056:	f240 23df 	movw	r3, #735	; 0x2df
   2005a:	4a54      	ldr	r2, [pc, #336]	; (201ac <nrfx_spim_xfer+0x190>)
   2005c:	4854      	ldr	r0, [pc, #336]	; (201b0 <nrfx_spim_xfer+0x194>)
   2005e:	f006 fe88 	bl	26d72 <assert_print>
   20062:	f240 21df 	movw	r1, #735	; 0x2df
   20066:	e7ee      	b.n	20046 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   20068:	68a2      	ldr	r2, [r4, #8]
   2006a:	b96a      	cbnz	r2, 20088 <nrfx_spim_xfer+0x6c>
   2006c:	68e2      	ldr	r2, [r4, #12]
   2006e:	2a00      	cmp	r2, #0
   20070:	f000 8094 	beq.w	2019c <nrfx_spim_xfer+0x180>
   20074:	4950      	ldr	r1, [pc, #320]	; (201b8 <nrfx_spim_xfer+0x19c>)
   20076:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   2007a:	4a4c      	ldr	r2, [pc, #304]	; (201ac <nrfx_spim_xfer+0x190>)
   2007c:	484c      	ldr	r0, [pc, #304]	; (201b0 <nrfx_spim_xfer+0x194>)
   2007e:	f006 fe78 	bl	26d72 <assert_print>
   20082:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   20086:	e7de      	b.n	20046 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   20088:	b93b      	cbnz	r3, 2009a <nrfx_spim_xfer+0x7e>
   2008a:	68e3      	ldr	r3, [r4, #12]
   2008c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20090:	d203      	bcs.n	2009a <nrfx_spim_xfer+0x7e>
   20092:	6863      	ldr	r3, [r4, #4]
   20094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20098:	d309      	bcc.n	200ae <nrfx_spim_xfer+0x92>
   2009a:	4948      	ldr	r1, [pc, #288]	; (201bc <nrfx_spim_xfer+0x1a0>)
   2009c:	f240 23e1 	movw	r3, #737	; 0x2e1
   200a0:	4a42      	ldr	r2, [pc, #264]	; (201ac <nrfx_spim_xfer+0x190>)
   200a2:	4843      	ldr	r0, [pc, #268]	; (201b0 <nrfx_spim_xfer+0x194>)
   200a4:	f006 fe65 	bl	26d72 <assert_print>
   200a8:	f240 21e1 	movw	r1, #737	; 0x2e1
   200ac:	e7cb      	b.n	20046 <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   200ae:	f015 0908 	ands.w	r9, r5, #8
   200b2:	d00f      	beq.n	200d4 <nrfx_spim_xfer+0xb8>
   200b4:	7fb3      	ldrb	r3, [r6, #30]
   200b6:	075b      	lsls	r3, r3, #29
   200b8:	d40c      	bmi.n	200d4 <nrfx_spim_xfer+0xb8>
   200ba:	7ff3      	ldrb	r3, [r6, #31]
   200bc:	2bff      	cmp	r3, #255	; 0xff
   200be:	d009      	beq.n	200d4 <nrfx_spim_xfer+0xb8>
   200c0:	493f      	ldr	r1, [pc, #252]	; (201c0 <nrfx_spim_xfer+0x1a4>)
   200c2:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   200c6:	4a39      	ldr	r2, [pc, #228]	; (201ac <nrfx_spim_xfer+0x190>)
   200c8:	4839      	ldr	r0, [pc, #228]	; (201b0 <nrfx_spim_xfer+0x194>)
   200ca:	f006 fe52 	bl	26d72 <assert_print>
   200ce:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   200d2:	e7b8      	b.n	20046 <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   200d4:	7f73      	ldrb	r3, [r6, #29]
   200d6:	2b00      	cmp	r3, #0
   200d8:	d15e      	bne.n	20198 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   200da:	6833      	ldr	r3, [r6, #0]
   200dc:	b123      	cbz	r3, 200e8 <nrfx_spim_xfer+0xcc>
   200de:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   200e2:	bf04      	itt	eq
   200e4:	2301      	moveq	r3, #1
   200e6:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   200e8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 201c4 <nrfx_spim_xfer+0x1a8>
   200ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   200f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   200f4:	2101      	movs	r1, #1
   200f6:	4640      	mov	r0, r8
   200f8:	f00a ff09 	bl	2af0e <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   200fc:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   200fe:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   20100:	b121      	cbz	r1, 2010c <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   20102:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   20106:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2010a:	d106      	bne.n	2011a <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2010c:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2010e:	b14a      	cbz	r2, 20124 <nrfx_spim_xfer+0x108>
   20110:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   20114:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   20118:	d004      	beq.n	20124 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   2011a:	2300      	movs	r3, #0
        return err_code;
   2011c:	482a      	ldr	r0, [pc, #168]	; (201c8 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   2011e:	7773      	strb	r3, [r6, #29]
}
   20120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   20124:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20126:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2012a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2012e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   20132:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20136:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2013a:	2200      	movs	r2, #0
   2013c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   20140:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   20144:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   20148:	bf18      	it	ne
   2014a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   2014c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   20150:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   20154:	bf18      	it	ne
   20156:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   20158:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   2015c:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2015e:	f1b9 0f00 	cmp.w	r9, #0
   20162:	d006      	beq.n	20172 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   20164:	b96a      	cbnz	r2, 20182 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   20166:	2100      	movs	r1, #0
   20168:	4640      	mov	r0, r8
   2016a:	f00a fed0 	bl	2af0e <set_ss_pin_state>
    return err_code;
   2016e:	4817      	ldr	r0, [pc, #92]	; (201cc <nrfx_spim_xfer+0x1b0>)
   20170:	e7d6      	b.n	20120 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20172:	2101      	movs	r1, #1
   20174:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   20176:	b922      	cbnz	r2, 20182 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20178:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2017c:	2a00      	cmp	r2, #0
   2017e:	d0fb      	beq.n	20178 <nrfx_spim_xfer+0x15c>
   20180:	e7f1      	b.n	20166 <nrfx_spim_xfer+0x14a>
    if (!enable)
   20182:	f015 0f04 	tst.w	r5, #4
   20186:	f04f 0240 	mov.w	r2, #64	; 0x40
   2018a:	d002      	beq.n	20192 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   2018c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20190:	e7ed      	b.n	2016e <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   20192:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20196:	e7ea      	b.n	2016e <nrfx_spim_xfer+0x152>
        return err_code;
   20198:	480d      	ldr	r0, [pc, #52]	; (201d0 <nrfx_spim_xfer+0x1b4>)
   2019a:	e7c1      	b.n	20120 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2019c:	2b00      	cmp	r3, #0
   2019e:	f43f af78 	beq.w	20092 <nrfx_spim_xfer+0x76>
   201a2:	e77a      	b.n	2009a <nrfx_spim_xfer+0x7e>
   201a4:	20021938 	.word	0x20021938
   201a8:	00032c8b 	.word	0x00032c8b
   201ac:	00032c4f 	.word	0x00032c4f
   201b0:	0002dd81 	.word	0x0002dd81
   201b4:	00032cb7 	.word	0x00032cb7
   201b8:	00032cfe 	.word	0x00032cfe
   201bc:	00032d45 	.word	0x00032d45
   201c0:	00032de9 	.word	0x00032de9
   201c4:	20021944 	.word	0x20021944
   201c8:	0bad000a 	.word	0x0bad000a
   201cc:	0bad0000 	.word	0x0bad0000
   201d0:	0bad000b 	.word	0x0bad000b

000201d4 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   201d4:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201d6:	4b13      	ldr	r3, [pc, #76]	; (20224 <nrfx_spim_4_irq_handler+0x50>)
   201d8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   201dc:	b302      	cbz	r2, 20220 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201de:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   201e0:	4c11      	ldr	r4, [pc, #68]	; (20228 <nrfx_spim_4_irq_handler+0x54>)
   201e2:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   201e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   201ea:	6823      	ldr	r3, [r4, #0]
   201ec:	b95b      	cbnz	r3, 20206 <nrfx_spim_4_irq_handler+0x32>
   201ee:	490f      	ldr	r1, [pc, #60]	; (2022c <nrfx_spim_4_irq_handler+0x58>)
   201f0:	480f      	ldr	r0, [pc, #60]	; (20230 <nrfx_spim_4_irq_handler+0x5c>)
   201f2:	f240 333b 	movw	r3, #827	; 0x33b
   201f6:	4a0f      	ldr	r2, [pc, #60]	; (20234 <nrfx_spim_4_irq_handler+0x60>)
   201f8:	f006 fdbb 	bl	26d72 <assert_print>
   201fc:	f240 313b 	movw	r1, #827	; 0x33b
   20200:	480c      	ldr	r0, [pc, #48]	; (20234 <nrfx_spim_4_irq_handler+0x60>)
   20202:	f006 fdaf 	bl	26d64 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   20206:	4629      	mov	r1, r5
   20208:	4620      	mov	r0, r4
   2020a:	f00a fe80 	bl	2af0e <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2020e:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   20212:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   20214:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   20216:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   2021a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2021e:	4718      	bx	r3
}
   20220:	bd70      	pop	{r4, r5, r6, pc}
   20222:	bf00      	nop
   20224:	4000a000 	.word	0x4000a000
   20228:	20021938 	.word	0x20021938
   2022c:	00032e2c 	.word	0x00032e2c
   20230:	0002dd81 	.word	0x0002dd81
   20234:	00032c4f 	.word	0x00032c4f

00020238 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   20238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2023c:	460e      	mov	r6, r1
   2023e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   20240:	4d0c      	ldr	r5, [pc, #48]	; (20274 <metal_generic_dev_open+0x3c>)
   20242:	f855 4f18 	ldr.w	r4, [r5, #24]!
   20246:	42ac      	cmp	r4, r5
   20248:	d103      	bne.n	20252 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   2024a:	f06f 0012 	mvn.w	r0, #18
   2024e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   20252:	4631      	mov	r1, r6
   20254:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   20258:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   2025c:	f7e9 f876 	bl	934c <strcmp>
   20260:	b930      	cbnz	r0, 20270 <metal_generic_dev_open+0x38>
			*device = dev;
   20262:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   20266:	4640      	mov	r0, r8
}
   20268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   2026c:	f00a bf83 	b.w	2b176 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   20270:	6824      	ldr	r4, [r4, #0]
   20272:	e7e8      	b.n	20246 <metal_generic_dev_open+0xe>
   20274:	20021958 	.word	0x20021958

00020278 <metal_bus_unregister>:
{
   20278:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   2027a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2027e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   20280:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   20282:	f100 0324 	add.w	r3, r0, #36	; 0x24
   20286:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   20288:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   2028c:	6843      	ldr	r3, [r0, #4]
{
   2028e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   20290:	b103      	cbz	r3, 20294 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   20292:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   20294:	4b05      	ldr	r3, [pc, #20]	; (202ac <metal_bus_unregister+0x34>)
   20296:	781a      	ldrb	r2, [r3, #0]
   20298:	2a06      	cmp	r2, #6
   2029a:	d905      	bls.n	202a8 <metal_bus_unregister+0x30>
   2029c:	685b      	ldr	r3, [r3, #4]
   2029e:	b11b      	cbz	r3, 202a8 <metal_bus_unregister+0x30>
   202a0:	2007      	movs	r0, #7
   202a2:	6822      	ldr	r2, [r4, #0]
   202a4:	4902      	ldr	r1, [pc, #8]	; (202b0 <metal_bus_unregister+0x38>)
   202a6:	4798      	blx	r3
}
   202a8:	2000      	movs	r0, #0
   202aa:	bd10      	pop	{r4, pc}
   202ac:	20021958 	.word	0x20021958
   202b0:	00032e4f 	.word	0x00032e4f

000202b4 <metal_bus_find>:
{
   202b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202b8:	4607      	mov	r7, r0
   202ba:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   202bc:	4e0b      	ldr	r6, [pc, #44]	; (202ec <metal_bus_find+0x38>)
   202be:	f856 4f08 	ldr.w	r4, [r6, #8]!
   202c2:	42b4      	cmp	r4, r6
   202c4:	d102      	bne.n	202cc <metal_bus_find+0x18>
	return -ENOENT;
   202c6:	f06f 0001 	mvn.w	r0, #1
   202ca:	e00a      	b.n	202e2 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   202cc:	4639      	mov	r1, r7
   202ce:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   202d2:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   202d6:	f7e9 f839 	bl	934c <strcmp>
   202da:	b920      	cbnz	r0, 202e6 <metal_bus_find+0x32>
   202dc:	b11d      	cbz	r5, 202e6 <metal_bus_find+0x32>
			*result = bus;
   202de:	f8c5 8000 	str.w	r8, [r5]
}
   202e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   202e6:	6824      	ldr	r4, [r4, #0]
   202e8:	e7eb      	b.n	202c2 <metal_bus_find+0xe>
   202ea:	bf00      	nop
   202ec:	20021958 	.word	0x20021958

000202f0 <metal_bus_register>:
{
   202f0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   202f2:	4604      	mov	r4, r0
   202f4:	b910      	cbnz	r0, 202fc <metal_bus_register+0xc>
		return -EINVAL;
   202f6:	f06f 0015 	mvn.w	r0, #21
}
   202fa:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   202fc:	6800      	ldr	r0, [r0, #0]
   202fe:	2800      	cmp	r0, #0
   20300:	d0f9      	beq.n	202f6 <metal_bus_register+0x6>
   20302:	f7e9 f82d 	bl	9360 <strlen>
   20306:	2800      	cmp	r0, #0
   20308:	d0f5      	beq.n	202f6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   2030a:	2100      	movs	r1, #0
   2030c:	6820      	ldr	r0, [r4, #0]
   2030e:	f7ff ffd1 	bl	202b4 <metal_bus_find>
   20312:	b1c8      	cbz	r0, 20348 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   20314:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   20318:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   2031c:	4b0c      	ldr	r3, [pc, #48]	; (20350 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   2031e:	f104 0224 	add.w	r2, r4, #36	; 0x24
   20322:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   20324:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   20328:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   2032a:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   2032c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   2032e:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   20330:	781a      	ldrb	r2, [r3, #0]
   20332:	2a06      	cmp	r2, #6
   20334:	d901      	bls.n	2033a <metal_bus_register+0x4a>
   20336:	685b      	ldr	r3, [r3, #4]
   20338:	b90b      	cbnz	r3, 2033e <metal_bus_register+0x4e>
	return 0;
   2033a:	2000      	movs	r0, #0
   2033c:	e7dd      	b.n	202fa <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   2033e:	2007      	movs	r0, #7
   20340:	6822      	ldr	r2, [r4, #0]
   20342:	4904      	ldr	r1, [pc, #16]	; (20354 <metal_bus_register+0x64>)
   20344:	4798      	blx	r3
   20346:	e7f8      	b.n	2033a <metal_bus_register+0x4a>
		return -EEXIST;
   20348:	f06f 0010 	mvn.w	r0, #16
   2034c:	e7d5      	b.n	202fa <metal_bus_register+0xa>
   2034e:	bf00      	nop
   20350:	20021958 	.word	0x20021958
   20354:	00032e51 	.word	0x00032e51

00020358 <metal_device_close>:
	metal_assert(device && device->bus);
   20358:	4601      	mov	r1, r0
{
   2035a:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   2035c:	b108      	cbz	r0, 20362 <metal_device_close+0xa>
   2035e:	6840      	ldr	r0, [r0, #4]
   20360:	b948      	cbnz	r0, 20376 <metal_device_close+0x1e>
   20362:	4908      	ldr	r1, [pc, #32]	; (20384 <metal_device_close+0x2c>)
   20364:	4808      	ldr	r0, [pc, #32]	; (20388 <metal_device_close+0x30>)
   20366:	2351      	movs	r3, #81	; 0x51
   20368:	4a08      	ldr	r2, [pc, #32]	; (2038c <metal_device_close+0x34>)
   2036a:	f006 fd02 	bl	26d72 <assert_print>
   2036e:	2151      	movs	r1, #81	; 0x51
   20370:	4806      	ldr	r0, [pc, #24]	; (2038c <metal_device_close+0x34>)
   20372:	f006 fcf7 	bl	26d64 <assert_post_action>
	if (device->bus->ops.dev_close)
   20376:	68c3      	ldr	r3, [r0, #12]
   20378:	b113      	cbz	r3, 20380 <metal_device_close+0x28>
}
   2037a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   2037e:	4718      	bx	r3
}
   20380:	bd10      	pop	{r4, pc}
   20382:	bf00      	nop
   20384:	00032e9b 	.word	0x00032e9b
   20388:	0002dd81 	.word	0x0002dd81
   2038c:	00032e64 	.word	0x00032e64

00020390 <metal_register_generic_device>:
{
   20390:	b510      	push	{r4, lr}
   20392:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   20394:	6800      	ldr	r0, [r0, #0]
   20396:	b910      	cbnz	r0, 2039e <metal_register_generic_device+0xe>
		return -EINVAL;
   20398:	f06f 0015 	mvn.w	r0, #21
}
   2039c:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   2039e:	f7e8 ffdf 	bl	9360 <strlen>
   203a2:	2800      	cmp	r0, #0
   203a4:	d0f8      	beq.n	20398 <metal_register_generic_device+0x8>
   203a6:	68a3      	ldr	r3, [r4, #8]
   203a8:	2b01      	cmp	r3, #1
   203aa:	d8f5      	bhi.n	20398 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   203ac:	4b06      	ldr	r3, [pc, #24]	; (203c8 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   203ae:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   203b2:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   203b4:	4b05      	ldr	r3, [pc, #20]	; (203cc <metal_register_generic_device+0x3c>)
   203b6:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   203b8:	f103 0018 	add.w	r0, r3, #24
   203bc:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   203be:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   203c0:	61d9      	str	r1, [r3, #28]
	return 0;
   203c2:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   203c4:	6011      	str	r1, [r2, #0]
}
   203c6:	e7e9      	b.n	2039c <metal_register_generic_device+0xc>
   203c8:	20008718 	.word	0x20008718
   203cc:	20021958 	.word	0x20021958

000203d0 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   203d0:	4b0e      	ldr	r3, [pc, #56]	; (2040c <metal_init+0x3c>)
{
   203d2:	b510      	push	{r4, lr}
   203d4:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   203d6:	2220      	movs	r2, #32
   203d8:	2100      	movs	r1, #0
   203da:	4618      	mov	r0, r3
   203dc:	f00b fd28 	bl	2be30 <memset>

	_metal.common.log_handler   = params->log_handler;
   203e0:	6822      	ldr	r2, [r4, #0]
   203e2:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   203e4:	4602      	mov	r2, r0
   203e6:	7921      	ldrb	r1, [r4, #4]
   203e8:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   203ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   203f0:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   203f4:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   203f8:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   203fc:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   20400:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   20402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   20406:	f000 b80f 	b.w	20428 <metal_sys_init>
   2040a:	bf00      	nop
   2040c:	20021958 	.word	0x20021958

00020410 <metal_finish>:

void metal_finish(void)
{
   20410:	b508      	push	{r3, lr}
	metal_sys_finish();
   20412:	f000 f811 	bl	20438 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   20416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   2041a:	2220      	movs	r2, #32
   2041c:	2100      	movs	r1, #0
   2041e:	4801      	ldr	r0, [pc, #4]	; (20424 <metal_finish+0x14>)
   20420:	f00b bd06 	b.w	2be30 <memset>
   20424:	20021958 	.word	0x20021958

00020428 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   20428:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   2042a:	4802      	ldr	r0, [pc, #8]	; (20434 <metal_sys_init+0xc>)
   2042c:	f7ff ff60 	bl	202f0 <metal_bus_register>
	return 0;
}
   20430:	2000      	movs	r0, #0
   20432:	bd08      	pop	{r3, pc}
   20434:	20008718 	.word	0x20008718

00020438 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   20438:	4801      	ldr	r0, [pc, #4]	; (20440 <metal_sys_finish+0x8>)
   2043a:	f7ff bf1d 	b.w	20278 <metal_bus_unregister>
   2043e:	bf00      	nop
   20440:	20008718 	.word	0x20008718

00020444 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   20444:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   20446:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   20448:	2b06      	cmp	r3, #6
{
   2044a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   2044c:	bf88      	it	hi
   2044e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   20450:	4b09      	ldr	r3, [pc, #36]	; (20478 <metal_zephyr_log_handler+0x34>)
{
   20452:	ac05      	add	r4, sp, #20
   20454:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   20458:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   2045c:	4807      	ldr	r0, [pc, #28]	; (2047c <metal_zephyr_log_handler+0x38>)
   2045e:	f006 fac6 	bl	269ee <printk>

	va_start(args, format);
	vprintk(format, args);
   20462:	4621      	mov	r1, r4
   20464:	4628      	mov	r0, r5
	va_start(args, format);
   20466:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   20468:	f7ec fad2 	bl	ca10 <vprintk>
	va_end(args);
}
   2046c:	b002      	add	sp, #8
   2046e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20472:	b003      	add	sp, #12
   20474:	4770      	bx	lr
   20476:	bf00      	nop
   20478:	0002dc3c 	.word	0x0002dc3c
   2047c:	0002df34 	.word	0x0002df34

00020480 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   20480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20484:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   20486:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   20488:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   2048a:	4293      	cmp	r3, r2
{
   2048c:	4617      	mov	r7, r2
   2048e:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   20490:	d341      	bcc.n	20516 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   20492:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   20494:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   20498:	42bd      	cmp	r5, r7
   2049a:	d103      	bne.n	204a4 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   2049c:	2000      	movs	r0, #0
}
   2049e:	b007      	add	sp, #28
   204a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   204a4:	fb0b f805 	mul.w	r8, fp, r5
   204a8:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   204ac:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   204ae:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   204b2:	1d23      	adds	r3, r4, #4
   204b4:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   204b6:	b9ca      	cbnz	r2, 204ec <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   204b8:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   204ba:	6861      	ldr	r1, [r4, #4]
   204bc:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   204be:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   204c2:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   204c4:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   204c6:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   204ca:	1e5c      	subs	r4, r3, #1
   204cc:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   204d0:	425b      	negs	r3, r3
   204d2:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   204d6:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   204d8:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   204dc:	6884      	ldr	r4, [r0, #8]
   204de:	3306      	adds	r3, #6
   204e0:	42a1      	cmp	r1, r4
   204e2:	bf28      	it	cs
   204e4:	f04f 31ff 	movcs.w	r1, #4294967295
   204e8:	f00a fe11 	bl	2b10e <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   204ec:	f859 3008 	ldr.w	r3, [r9, r8]
   204f0:	4630      	mov	r0, r6
   204f2:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   204f4:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   204f6:	b2a9      	uxth	r1, r5
   204f8:	6a1b      	ldr	r3, [r3, #32]
   204fa:	9301      	str	r3, [sp, #4]
   204fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   204fe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   20502:	9300      	str	r3, [sp, #0]
   20504:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   20508:	9b05      	ldr	r3, [sp, #20]
   2050a:	f00a fe79 	bl	2b200 <virtqueue_create>
		if (ret)
   2050e:	2800      	cmp	r0, #0
   20510:	d1c5      	bne.n	2049e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   20512:	3501      	adds	r5, #1
   20514:	e7c0      	b.n	20498 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   20516:	4801      	ldr	r0, [pc, #4]	; (2051c <virtio_create_virtqueues+0x9c>)
   20518:	e7c1      	b.n	2049e <virtio_create_virtqueues+0x1e>
   2051a:	bf00      	nop
   2051c:	fffff440 	.word	0xfffff440

00020520 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   20520:	b510      	push	{r4, lr}
	if (vq) {
   20522:	4604      	mov	r4, r0
   20524:	b190      	cbz	r0, 2054c <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   20526:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   20528:	8943      	ldrh	r3, [r0, #10]
   2052a:	429a      	cmp	r2, r3
   2052c:	d009      	beq.n	20542 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   2052e:	4b08      	ldr	r3, [pc, #32]	; (20550 <virtqueue_free+0x30>)
   20530:	781a      	ldrb	r2, [r3, #0]
   20532:	2a03      	cmp	r2, #3
   20534:	d905      	bls.n	20542 <virtqueue_free+0x22>
   20536:	685b      	ldr	r3, [r3, #4]
   20538:	b11b      	cbz	r3, 20542 <virtqueue_free+0x22>
   2053a:	6842      	ldr	r2, [r0, #4]
   2053c:	4905      	ldr	r1, [pc, #20]	; (20554 <virtqueue_free+0x34>)
   2053e:	2004      	movs	r0, #4
   20540:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   20542:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   20544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20548:	f00b bc0e 	b.w	2bd68 <k_free>
   2054c:	bd10      	pop	{r4, pc}
   2054e:	bf00      	nop
   20550:	20021958 	.word	0x20021958
   20554:	00032f49 	.word	0x00032f49

00020558 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   20558:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   2055a:	8944      	ldrh	r4, [r0, #10]
   2055c:	428c      	cmp	r4, r1
   2055e:	d912      	bls.n	20586 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   20560:	6a03      	ldr	r3, [r0, #32]
   20562:	3c01      	subs	r4, #1
   20564:	885d      	ldrh	r5, [r3, #2]
   20566:	402c      	ands	r4, r5
   20568:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   2056c:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   2056e:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   20570:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   20574:	6a02      	ldr	r2, [r0, #32]
   20576:	8853      	ldrh	r3, [r2, #2]
   20578:	3301      	adds	r3, #1
   2057a:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2057c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   2057e:	3301      	adds	r3, #1
   20580:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   20582:	2000      	movs	r0, #0
}
   20584:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   20586:	4801      	ldr	r0, [pc, #4]	; (2058c <virtqueue_add_consumed_buffer+0x34>)
   20588:	e7fc      	b.n	20584 <virtqueue_add_consumed_buffer+0x2c>
   2058a:	bf00      	nop
   2058c:	fffff441 	.word	0xfffff441

00020590 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   20590:	b470      	push	{r4, r5, r6}
   20592:	9e03      	ldr	r6, [sp, #12]
   20594:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   20596:	b158      	cbz	r0, 205b0 <rpmsg_send_offchannel_raw+0x20>
   20598:	6a00      	ldr	r0, [r0, #32]
   2059a:	b148      	cbz	r0, 205b0 <rpmsg_send_offchannel_raw+0x20>
   2059c:	b143      	cbz	r3, 205b0 <rpmsg_send_offchannel_raw+0x20>
   2059e:	3401      	adds	r4, #1
   205a0:	d006      	beq.n	205b0 <rpmsg_send_offchannel_raw+0x20>
   205a2:	2e00      	cmp	r6, #0
   205a4:	db04      	blt.n	205b0 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   205a6:	6f84      	ldr	r4, [r0, #120]	; 0x78
   205a8:	b114      	cbz	r4, 205b0 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   205aa:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   205ac:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   205ae:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   205b0:	4801      	ldr	r0, [pc, #4]	; (205b8 <rpmsg_send_offchannel_raw+0x28>)
}
   205b2:	bc70      	pop	{r4, r5, r6}
   205b4:	4770      	bx	lr
   205b6:	bf00      	nop
   205b8:	fffff82d 	.word	0xfffff82d

000205bc <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   205bc:	b470      	push	{r4, r5, r6}
   205be:	9e03      	ldr	r6, [sp, #12]
   205c0:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   205c2:	b160      	cbz	r0, 205de <rpmsg_send_offchannel_nocopy+0x22>
   205c4:	6a00      	ldr	r0, [r0, #32]
   205c6:	b150      	cbz	r0, 205de <rpmsg_send_offchannel_nocopy+0x22>
   205c8:	b14b      	cbz	r3, 205de <rpmsg_send_offchannel_nocopy+0x22>
   205ca:	3401      	adds	r4, #1
   205cc:	d007      	beq.n	205de <rpmsg_send_offchannel_nocopy+0x22>
   205ce:	2e00      	cmp	r6, #0
   205d0:	db05      	blt.n	205de <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   205d2:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   205d6:	b114      	cbz	r4, 205de <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   205d8:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   205da:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   205dc:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   205de:	4801      	ldr	r0, [pc, #4]	; (205e4 <rpmsg_send_offchannel_nocopy+0x28>)
}
   205e0:	bc70      	pop	{r4, r5, r6}
   205e2:	4770      	bx	lr
   205e4:	fffff82d 	.word	0xfffff82d

000205e8 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   205e8:	b570      	push	{r4, r5, r6, lr}
   205ea:	460c      	mov	r4, r1
   205ec:	4611      	mov	r1, r2
   205ee:	4605      	mov	r5, r0
   205f0:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   205f2:	4b0c      	ldr	r3, [pc, #48]	; (20624 <rpmsg_register_endpoint+0x3c>)
   205f4:	2220      	movs	r2, #32
   205f6:	2900      	cmp	r1, #0
   205f8:	bf08      	it	eq
   205fa:	4619      	moveq	r1, r3
   205fc:	4620      	mov	r0, r4
   205fe:	f00b fd59 	bl	2c0b4 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   20602:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   20604:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   20606:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   20608:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   2060a:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   2060c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   2060e:	9b06      	ldr	r3, [sp, #24]
   20610:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   20612:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   20614:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   20618:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   2061c:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   2061e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   20620:	6013      	str	r3, [r2, #0]
}
   20622:	bd70      	pop	{r4, r5, r6, pc}
   20624:	00031dbc 	.word	0x00031dbc

00020628 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   20628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2062c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   20630:	460d      	mov	r5, r1
   20632:	4692      	mov	sl, r2
   20634:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   20636:	4606      	mov	r6, r0
   20638:	2800      	cmp	r0, #0
   2063a:	d06c      	beq.n	20716 <rpmsg_create_ept+0xee>
   2063c:	2900      	cmp	r1, #0
   2063e:	d06a      	beq.n	20716 <rpmsg_create_ept+0xee>
   20640:	f1b9 0f00 	cmp.w	r9, #0
   20644:	d067      	beq.n	20716 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   20646:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   2064a:	4640      	mov	r0, r8
   2064c:	f00a ff41 	bl	2b4d2 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   20650:	1c78      	adds	r0, r7, #1
   20652:	d140      	bne.n	206d6 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   20654:	6cac      	ldr	r4, [r5, #72]	; 0x48
   20656:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   2065a:	f014 0401 	ands.w	r4, r4, #1
   2065e:	d00b      	beq.n	20678 <rpmsg_create_ept+0x50>
	for (bit = start;
   20660:	2400      	movs	r4, #0
	     bit++)
   20662:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   20664:	2c80      	cmp	r4, #128	; 0x80
   20666:	d054      	beq.n	20712 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   20668:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   2066a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2066e:	f004 011f 	and.w	r1, r4, #31
   20672:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   20674:	07d1      	lsls	r1, r2, #31
   20676:	d4f4      	bmi.n	20662 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   20678:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   2067a:	0960      	lsrs	r0, r4, #5
   2067c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   20680:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   20684:	f004 041f 	and.w	r4, r4, #31
   20688:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   2068a:	430a      	orrs	r2, r1
   2068c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   20690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20692:	4652      	mov	r2, sl
   20694:	e9cd 9301 	strd	r9, r3, [sp, #4]
   20698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2069a:	4631      	mov	r1, r6
   2069c:	9300      	str	r3, [sp, #0]
   2069e:	4628      	mov	r0, r5
   206a0:	463b      	mov	r3, r7
   206a2:	f7ff ffa1 	bl	205e8 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   206a6:	4640      	mov	r0, r8
   206a8:	f001 faf2 	bl	21c90 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   206ac:	7834      	ldrb	r4, [r6, #0]
   206ae:	b174      	cbz	r4, 206ce <rpmsg_create_ept+0xa6>
   206b0:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   206b4:	b15c      	cbz	r4, 206ce <rpmsg_create_ept+0xa6>
   206b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   206b8:	3301      	adds	r3, #1
   206ba:	d12e      	bne.n	2071a <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   206bc:	2100      	movs	r1, #0
   206be:	4630      	mov	r0, r6
   206c0:	f00a ff36 	bl	2b530 <rpmsg_send_ns_message>

	if (status)
   206c4:	4604      	mov	r4, r0
   206c6:	b110      	cbz	r0, 206ce <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   206c8:	4630      	mov	r0, r6
   206ca:	f00a ff08 	bl	2b4de <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   206ce:	4620      	mov	r0, r4
   206d0:	b004      	add	sp, #16
   206d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   206d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   206da:	d3d9      	bcc.n	20690 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   206dc:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   206e0:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   206e2:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   206e6:	d80f      	bhi.n	20708 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   206e8:	0958      	lsrs	r0, r3, #5
   206ea:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   206ee:	f003 031f 	and.w	r3, r3, #31
   206f2:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   206f6:	07d2      	lsls	r2, r2, #31
   206f8:	d40b      	bmi.n	20712 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   206fa:	2201      	movs	r2, #1
   206fc:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   20700:	4323      	orrs	r3, r4
   20702:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   20706:	e7c3      	b.n	20690 <rpmsg_create_ept+0x68>
   20708:	4c05      	ldr	r4, [pc, #20]	; (20720 <rpmsg_create_ept+0xf8>)
   2070a:	4640      	mov	r0, r8
   2070c:	f001 fac0 	bl	21c90 <z_impl_k_sem_give>
}
   20710:	e7dd      	b.n	206ce <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   20712:	4c04      	ldr	r4, [pc, #16]	; (20724 <rpmsg_create_ept+0xfc>)
   20714:	e7f9      	b.n	2070a <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   20716:	4c02      	ldr	r4, [pc, #8]	; (20720 <rpmsg_create_ept+0xf8>)
   20718:	e7d9      	b.n	206ce <rpmsg_create_ept+0xa6>
   2071a:	2400      	movs	r4, #0
   2071c:	e7d7      	b.n	206ce <rpmsg_create_ept+0xa6>
   2071e:	bf00      	nop
   20720:	fffff82d 	.word	0xfffff82d
   20724:	fffff829 	.word	0xfffff829

00020728 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   20728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   2072c:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   20730:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   20734:	2300      	movs	r3, #0
{
   20736:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   20738:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   2073a:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   2073e:	2310      	movs	r3, #16
	rp_hdr.src = src;
   20740:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   20744:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20746:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   20748:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   2074c:	f8ad 501c 	strh.w	r5, [sp, #28]
   20750:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   20752:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   20754:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   20758:	42b1      	cmp	r1, r6
   2075a:	bf28      	it	cs
   2075c:	f04f 31ff 	movcs.w	r1, #4294967295
   20760:	eb0d 0203 	add.w	r2, sp, r3
   20764:	f00a fc99 	bl	2b09a <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   20768:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   2076a:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   2076c:	d00b      	beq.n	20786 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   2076e:	4924      	ldr	r1, [pc, #144]	; (20800 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   20770:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   20774:	4a23      	ldr	r2, [pc, #140]	; (20804 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   20776:	4824      	ldr	r0, [pc, #144]	; (20808 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   20778:	f006 fafb 	bl	26d72 <assert_print>
   2077c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   20780:	4820      	ldr	r0, [pc, #128]	; (20804 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   20782:	f006 faef 	bl	26d64 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   20786:	f104 0658 	add.w	r6, r4, #88	; 0x58
   2078a:	4630      	mov	r0, r6
   2078c:	f00a ff60 	bl	2b650 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   20790:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   20794:	699b      	ldr	r3, [r3, #24]
   20796:	b9d3      	cbnz	r3, 207ce <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   20798:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2079c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   207a0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   207a4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   207a6:	b9cb      	cbnz	r3, 207dc <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   207a8:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   207ac:	f8cd 8000 	str.w	r8, [sp]
   207b0:	2201      	movs	r2, #1
   207b2:	a902      	add	r1, sp, #8
   207b4:	f00a fd51 	bl	2b25a <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   207b8:	b1b0      	cbz	r0, 207e8 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   207ba:	4914      	ldr	r1, [pc, #80]	; (2080c <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   207bc:	f240 13b9 	movw	r3, #441	; 0x1b9
   207c0:	4a10      	ldr	r2, [pc, #64]	; (20804 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   207c2:	4811      	ldr	r0, [pc, #68]	; (20808 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   207c4:	f006 fad5 	bl	26d72 <assert_print>
   207c8:	f240 11b9 	movw	r1, #441	; 0x1b9
   207cc:	e7d8      	b.n	20780 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   207ce:	4639      	mov	r1, r7
   207d0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   207d4:	f00a fdd7 	bl	2b386 <virtqueue_get_buffer_length>
   207d8:	4602      	mov	r2, r0
   207da:	e7df      	b.n	2079c <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   207dc:	2b01      	cmp	r3, #1
   207de:	d103      	bne.n	207e8 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   207e0:	4639      	mov	r1, r7
   207e2:	f7ff feb9 	bl	20558 <virtqueue_add_consumed_buffer>
   207e6:	e7e7      	b.n	207b8 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   207e8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   207ec:	f00a fe22 	bl	2b434 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   207f0:	4630      	mov	r0, r6
   207f2:	f00a ff2b 	bl	2b64c <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   207f6:	4628      	mov	r0, r5
   207f8:	b008      	add	sp, #32
   207fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207fe:	bf00      	nop
   20800:	00032fae 	.word	0x00032fae
   20804:	00032f6b 	.word	0x00032f6b
   20808:	0002dd81 	.word	0x0002dd81
   2080c:	00032fc7 	.word	0x00032fc7

00020810 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   20810:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   20814:	6803      	ldr	r3, [r0, #0]
   20816:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   20818:	f107 0658 	add.w	r6, r7, #88	; 0x58
   2081c:	4630      	mov	r0, r6
   2081e:	f00a ff17 	bl	2b650 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   20822:	4638      	mov	r0, r7
   20824:	f10d 020a 	add.w	r2, sp, #10
   20828:	a903      	add	r1, sp, #12
   2082a:	f00a ff84 	bl	2b736 <rpmsg_virtio_get_rx_buffer>
   2082e:	4604      	mov	r4, r0
   20830:	4630      	mov	r0, r6
   20832:	f00a ff0b 	bl	2b64c <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   20836:	2c00      	cmp	r4, #0
   20838:	d04f      	beq.n	208da <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   2083a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2083e:	4630      	mov	r0, r6
   20840:	60a3      	str	r3, [r4, #8]
   20842:	f00a ff05 	bl	2b650 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   20846:	f04f 33ff 	mov.w	r3, #4294967295
   2084a:	2100      	movs	r1, #0
   2084c:	4638      	mov	r0, r7
   2084e:	6862      	ldr	r2, [r4, #4]
   20850:	f00a fea2 	bl	2b598 <rpmsg_get_endpoint>
   20854:	4605      	mov	r5, r0
   20856:	4630      	mov	r0, r6
   20858:	f00a fef8 	bl	2b64c <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   2085c:	b1ed      	cbz	r5, 2089a <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   2085e:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   20860:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   20862:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   20864:	bf08      	it	eq
   20866:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   20868:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   2086a:	bf08      	it	eq
   2086c:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   2086e:	6823      	ldr	r3, [r4, #0]
   20870:	89a2      	ldrh	r2, [r4, #12]
   20872:	9100      	str	r1, [sp, #0]
   20874:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   20878:	f104 0110 	add.w	r1, r4, #16
   2087c:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   2087e:	2800      	cmp	r0, #0
   20880:	da0b      	bge.n	2089a <rpmsg_virtio_rx_callback+0x8a>
   20882:	4917      	ldr	r1, [pc, #92]	; (208e0 <rpmsg_virtio_rx_callback+0xd0>)
   20884:	4817      	ldr	r0, [pc, #92]	; (208e4 <rpmsg_virtio_rx_callback+0xd4>)
   20886:	f240 2343 	movw	r3, #579	; 0x243
   2088a:	4a17      	ldr	r2, [pc, #92]	; (208e8 <rpmsg_virtio_rx_callback+0xd8>)
   2088c:	f006 fa71 	bl	26d72 <assert_print>
   20890:	f240 2143 	movw	r1, #579	; 0x243
   20894:	4814      	ldr	r0, [pc, #80]	; (208e8 <rpmsg_virtio_rx_callback+0xd8>)
   20896:	f006 fa65 	bl	26d64 <assert_post_action>
   2089a:	4630      	mov	r0, r6
   2089c:	f00a fed8 	bl	2b650 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   208a0:	68a3      	ldr	r3, [r4, #8]
   208a2:	2b00      	cmp	r3, #0
   208a4:	db06      	blt.n	208b4 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   208a6:	4621      	mov	r1, r4
   208a8:	4638      	mov	r0, r7
   208aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   208ae:	9a03      	ldr	r2, [sp, #12]
   208b0:	f00a ff58 	bl	2b764 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   208b4:	4638      	mov	r0, r7
   208b6:	f10d 020a 	add.w	r2, sp, #10
   208ba:	a903      	add	r1, sp, #12
   208bc:	f00a ff3b 	bl	2b736 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   208c0:	4604      	mov	r4, r0
   208c2:	b118      	cbz	r0, 208cc <rpmsg_virtio_rx_callback+0xbc>
   208c4:	4630      	mov	r0, r6
   208c6:	f00a fec1 	bl	2b64c <k_sem_give>
	while (rp_hdr) {
   208ca:	e7b6      	b.n	2083a <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   208cc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   208d0:	f00a fdb0 	bl	2b434 <virtqueue_kick>
   208d4:	4630      	mov	r0, r6
   208d6:	f00a feb9 	bl	2b64c <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   208da:	b004      	add	sp, #16
   208dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   208e0:	00032fd3 	.word	0x00032fd3
   208e4:	0002dd81 	.word	0x0002dd81
   208e8:	00032f6b 	.word	0x00032f6b

000208ec <rpmsg_virtio_send_offchannel_raw>:
{
   208ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   208f0:	b085      	sub	sp, #20
   208f2:	460f      	mov	r7, r1
   208f4:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   208f6:	a903      	add	r1, sp, #12
   208f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   208fa:	4606      	mov	r6, r0
   208fc:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   208fe:	f00a ff7c 	bl	2b7fa <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   20902:	4604      	mov	r4, r0
   20904:	b350      	cbz	r0, 2095c <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   20906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20908:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   2090a:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   2090e:	429d      	cmp	r5, r3
   20910:	bfa8      	it	ge
   20912:	461d      	movge	r5, r3
   20914:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   20916:	f8d0 c008 	ldr.w	ip, [r0, #8]
   2091a:	1a61      	subs	r1, r4, r1
   2091c:	4561      	cmp	r1, ip
   2091e:	bf28      	it	cs
   20920:	f04f 31ff 	movcs.w	r1, #4294967295
   20924:	462b      	mov	r3, r5
   20926:	464a      	mov	r2, r9
   20928:	f00a fbb7 	bl	2b09a <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   2092c:	4285      	cmp	r5, r0
   2092e:	d00b      	beq.n	20948 <rpmsg_virtio_send_offchannel_raw+0x5c>
   20930:	490b      	ldr	r1, [pc, #44]	; (20960 <rpmsg_virtio_send_offchannel_raw+0x74>)
   20932:	480c      	ldr	r0, [pc, #48]	; (20964 <rpmsg_virtio_send_offchannel_raw+0x78>)
   20934:	f240 2303 	movw	r3, #515	; 0x203
   20938:	4a0b      	ldr	r2, [pc, #44]	; (20968 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   2093a:	f006 fa1a 	bl	26d72 <assert_print>
   2093e:	f240 2103 	movw	r1, #515	; 0x203
   20942:	4809      	ldr	r0, [pc, #36]	; (20968 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   20944:	f006 fa0e 	bl	26d64 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   20948:	4623      	mov	r3, r4
   2094a:	4642      	mov	r2, r8
   2094c:	4639      	mov	r1, r7
   2094e:	4630      	mov	r0, r6
   20950:	9500      	str	r5, [sp, #0]
   20952:	f7ff fee9 	bl	20728 <rpmsg_virtio_send_offchannel_nocopy>
}
   20956:	b005      	add	sp, #20
   20958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   2095c:	4803      	ldr	r0, [pc, #12]	; (2096c <rpmsg_virtio_send_offchannel_raw+0x80>)
   2095e:	e7fa      	b.n	20956 <rpmsg_virtio_send_offchannel_raw+0x6a>
   20960:	00032fdf 	.word	0x00032fdf
   20964:	0002dd81 	.word	0x0002dd81
   20968:	00032f6b 	.word	0x00032f6b
   2096c:	fffff82e 	.word	0xfffff82e

00020970 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   20970:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   20972:	4604      	mov	r4, r0
   20974:	b1e0      	cbz	r0, 209b0 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   20976:	f100 0558 	add.w	r5, r0, #88	; 0x58
   2097a:	4628      	mov	r0, r5
   2097c:	f00a fe68 	bl	2b650 <__metal_mutex_acquire>
   20980:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   20984:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   20986:	b953      	cbnz	r3, 2099e <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   20988:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   2098c:	3c10      	subs	r4, #16
	if (length <= 0) {
   2098e:	2c00      	cmp	r4, #0
   20990:	dc00      	bgt.n	20994 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   20992:	4c08      	ldr	r4, [pc, #32]	; (209b4 <rpmsg_virtio_get_buffer_size+0x44>)
   20994:	4628      	mov	r0, r5
   20996:	f00a fe59 	bl	2b64c <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   2099a:	4620      	mov	r0, r4
   2099c:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   2099e:	2b01      	cmp	r3, #1
   209a0:	d1f7      	bne.n	20992 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   209a2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   209a6:	f00a fd7c 	bl	2b4a2 <virtqueue_get_desc_size>
   209aa:	f1a0 0410 	sub.w	r4, r0, #16
   209ae:	e7ee      	b.n	2098e <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   209b0:	4c01      	ldr	r4, [pc, #4]	; (209b8 <rpmsg_virtio_get_buffer_size+0x48>)
   209b2:	e7f2      	b.n	2099a <rpmsg_virtio_get_buffer_size+0x2a>
   209b4:	fffff82e 	.word	0xfffff82e
   209b8:	fffff82d 	.word	0xfffff82d

000209bc <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   209bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   209c0:	b08a      	sub	sp, #40	; 0x28
   209c2:	460d      	mov	r5, r1
   209c4:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   209c8:	4690      	mov	r8, r2
   209ca:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   209cc:	4604      	mov	r4, r0
   209ce:	b920      	cbnz	r0, 209da <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   209d0:	4f81      	ldr	r7, [pc, #516]	; (20bd8 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   209d2:	4638      	mov	r0, r7
   209d4:	b00a      	add	sp, #40	; 0x28
   209d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   209da:	2900      	cmp	r1, #0
   209dc:	d0f8      	beq.n	209d0 <rpmsg_init_vdev_with_config+0x14>
   209de:	2b00      	cmp	r3, #0
   209e0:	d0f6      	beq.n	209d0 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   209e2:	2294      	movs	r2, #148	; 0x94
   209e4:	2100      	movs	r1, #0
   209e6:	f00b fa23 	bl	2be30 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   209ea:	2201      	movs	r2, #1
   209ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   209f0:	4611      	mov	r1, r2
   209f2:	f00b f821 	bl	2ba38 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   209f6:	4b79      	ldr	r3, [pc, #484]	; (20bdc <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   209f8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   209fc:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   20a00:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   20a02:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   20a04:	4b76      	ldr	r3, [pc, #472]	; (20be0 <rpmsg_init_vdev_with_config+0x224>)
   20a06:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   20a08:	4b76      	ldr	r3, [pc, #472]	; (20be4 <rpmsg_init_vdev_with_config+0x228>)
   20a0a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   20a0e:	4b76      	ldr	r3, [pc, #472]	; (20be8 <rpmsg_init_vdev_with_config+0x22c>)
   20a10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   20a14:	4b75      	ldr	r3, [pc, #468]	; (20bec <rpmsg_init_vdev_with_config+0x230>)
   20a16:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   20a1a:	4b75      	ldr	r3, [pc, #468]	; (20bf0 <rpmsg_init_vdev_with_config+0x234>)
   20a1c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   20a20:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   20a24:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   20a28:	f1b8 0f00 	cmp.w	r8, #0
   20a2c:	d16e      	bne.n	20b0c <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   20a2e:	2f00      	cmp	r7, #0
   20a30:	d0ce      	beq.n	209d0 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   20a32:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   20a36:	f104 0394 	add.w	r3, r4, #148	; 0x94
   20a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   20a3e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   20a42:	6a03      	ldr	r3, [r0, #32]
   20a44:	689b      	ldr	r3, [r3, #8]
   20a46:	4798      	blx	r3
   20a48:	2300      	movs	r3, #0
   20a4a:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   20a4c:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   20a50:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   20a52:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   20a56:	f1b8 0f00 	cmp.w	r8, #0
   20a5a:	d16d      	bne.n	20b38 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   20a5c:	7a3b      	ldrb	r3, [r7, #8]
   20a5e:	2b00      	cmp	r3, #0
   20a60:	d068      	beq.n	20b34 <rpmsg_init_vdev_with_config+0x178>
   20a62:	f109 030c 	add.w	r3, r9, #12
   20a66:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   20a6a:	f1b9 0f00 	cmp.w	r9, #0
   20a6e:	d0af      	beq.n	209d0 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   20a70:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20a74:	2a00      	cmp	r2, #0
   20a76:	f000 80ad 	beq.w	20bd4 <rpmsg_init_vdev_with_config+0x218>
   20a7a:	689b      	ldr	r3, [r3, #8]
   20a7c:	2b00      	cmp	r3, #0
   20a7e:	f000 80a9 	beq.w	20bd4 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   20a82:	4b5c      	ldr	r3, [pc, #368]	; (20bf4 <rpmsg_init_vdev_with_config+0x238>)
   20a84:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   20a86:	4b5c      	ldr	r3, [pc, #368]	; (20bf8 <rpmsg_init_vdev_with_config+0x23c>)
   20a88:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   20a8a:	4b5c      	ldr	r3, [pc, #368]	; (20bfc <rpmsg_init_vdev_with_config+0x240>)
   20a8c:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   20a8e:	4b5c      	ldr	r3, [pc, #368]	; (20c00 <rpmsg_init_vdev_with_config+0x244>)
   20a90:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   20a92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20a94:	681b      	ldr	r3, [r3, #0]
   20a96:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   20a9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20a9c:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   20a9e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   20aa2:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   20aa6:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   20aaa:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   20aac:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   20ab0:	9300      	str	r3, [sp, #0]
   20ab2:	2202      	movs	r2, #2
   20ab4:	2100      	movs	r1, #0
   20ab6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   20aba:	ab04      	add	r3, sp, #16
   20abc:	f7ff fce0 	bl	20480 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   20ac0:	4607      	mov	r7, r0
   20ac2:	2800      	cmp	r0, #0
   20ac4:	d185      	bne.n	209d2 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   20ac6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   20aca:	f00a fc85 	bl	2b3d8 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   20ace:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20ad0:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   20ad2:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   20ad4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20ad6:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   20ad8:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   20ada:	f1b8 0f00 	cmp.w	r8, #0
   20ade:	d161      	bne.n	20ba4 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   20ae0:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   20ae2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20ae6:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   20ae8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   20aec:	895b      	ldrh	r3, [r3, #10]
   20aee:	4553      	cmp	r3, sl
   20af0:	d834      	bhi.n	20b5c <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   20af2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   20af6:	e9c4 4400 	strd	r4, r4, [r4]
   20afa:	2b00      	cmp	r3, #0
   20afc:	d159      	bne.n	20bb2 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   20afe:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   20b02:	2104      	movs	r1, #4
   20b04:	6a03      	ldr	r3, [r0, #32]
   20b06:	685b      	ldr	r3, [r3, #4]
   20b08:	4798      	blx	r3
}
   20b0a:	e762      	b.n	209d2 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   20b0c:	f1b8 0f01 	cmp.w	r8, #1
   20b10:	d195      	bne.n	20a3e <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   20b12:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   20b16:	6a03      	ldr	r3, [r0, #32]
   20b18:	681b      	ldr	r3, [r3, #0]
   20b1a:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   20b1c:	0642      	lsls	r2, r0, #25
   20b1e:	d506      	bpl.n	20b2e <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   20b20:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   20b24:	2100      	movs	r1, #0
   20b26:	6a03      	ldr	r3, [r0, #32]
   20b28:	685b      	ldr	r3, [r3, #4]
   20b2a:	4798      	blx	r3
}
   20b2c:	e7f1      	b.n	20b12 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   20b2e:	0743      	lsls	r3, r0, #29
   20b30:	d5ef      	bpl.n	20b12 <rpmsg_init_vdev_with_config+0x156>
   20b32:	e784      	b.n	20a3e <rpmsg_init_vdev_with_config+0x82>
   20b34:	464b      	mov	r3, r9
   20b36:	e796      	b.n	20a66 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   20b38:	f1b8 0f01 	cmp.w	r8, #1
   20b3c:	d1b1      	bne.n	20aa2 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   20b3e:	4b2e      	ldr	r3, [pc, #184]	; (20bf8 <rpmsg_init_vdev_with_config+0x23c>)
   20b40:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   20b42:	4b2c      	ldr	r3, [pc, #176]	; (20bf4 <rpmsg_init_vdev_with_config+0x238>)
   20b44:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   20b46:	4b2e      	ldr	r3, [pc, #184]	; (20c00 <rpmsg_init_vdev_with_config+0x244>)
   20b48:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   20b4a:	4b2c      	ldr	r3, [pc, #176]	; (20bfc <rpmsg_init_vdev_with_config+0x240>)
   20b4c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   20b4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20b50:	699b      	ldr	r3, [r3, #24]
   20b52:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   20b56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20b58:	681b      	ldr	r3, [r3, #0]
   20b5a:	e7a0      	b.n	20a9e <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   20b5c:	4648      	mov	r0, r9
   20b5e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   20b62:	f00a fe3b 	bl	2b7dc <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   20b66:	4605      	mov	r5, r0
   20b68:	b1c8      	cbz	r0, 20b9e <rpmsg_init_vdev_with_config+0x1e2>
   20b6a:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   20b6c:	9008      	str	r0, [sp, #32]
   20b6e:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   20b70:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   20b72:	2200      	movs	r2, #0
   20b74:	4281      	cmp	r1, r0
   20b76:	bf28      	it	cs
   20b78:	f04f 31ff 	movcs.w	r1, #4294967295
   20b7c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20b80:	4630      	mov	r0, r6
   20b82:	f00a fac4 	bl	2b10e <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   20b86:	9500      	str	r5, [sp, #0]
   20b88:	2301      	movs	r3, #1
   20b8a:	2200      	movs	r2, #0
   20b8c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   20b90:	a908      	add	r1, sp, #32
   20b92:	f00a fb62 	bl	2b25a <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   20b96:	b918      	cbnz	r0, 20ba0 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   20b98:	f10a 0a01 	add.w	sl, sl, #1
   20b9c:	e7a4      	b.n	20ae8 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   20b9e:	4819      	ldr	r0, [pc, #100]	; (20c04 <rpmsg_init_vdev_with_config+0x248>)
   20ba0:	4607      	mov	r7, r0
   20ba2:	e716      	b.n	209d2 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   20ba4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   20ba8:	e9c4 4400 	strd	r4, r4, [r4]
   20bac:	2b00      	cmp	r3, #0
   20bae:	f43f af10 	beq.w	209d2 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   20bb2:	2300      	movs	r3, #0
   20bb4:	9302      	str	r3, [sp, #8]
   20bb6:	4b14      	ldr	r3, [pc, #80]	; (20c08 <rpmsg_init_vdev_with_config+0x24c>)
   20bb8:	4620      	mov	r0, r4
   20bba:	9301      	str	r3, [sp, #4]
   20bbc:	2335      	movs	r3, #53	; 0x35
   20bbe:	4a13      	ldr	r2, [pc, #76]	; (20c0c <rpmsg_init_vdev_with_config+0x250>)
   20bc0:	9300      	str	r3, [sp, #0]
   20bc2:	f104 0108 	add.w	r1, r4, #8
   20bc6:	f7ff fd0f 	bl	205e8 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   20bca:	f1b8 0f00 	cmp.w	r8, #0
   20bce:	f47f af00 	bne.w	209d2 <rpmsg_init_vdev_with_config+0x16>
   20bd2:	e794      	b.n	20afe <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   20bd4:	4f0b      	ldr	r7, [pc, #44]	; (20c04 <rpmsg_init_vdev_with_config+0x248>)
   20bd6:	e6fc      	b.n	209d2 <rpmsg_init_vdev_with_config+0x16>
   20bd8:	fffff82d 	.word	0xfffff82d
   20bdc:	000208ed 	.word	0x000208ed
   20be0:	0002b63d 	.word	0x0002b63d
   20be4:	0002b79d 	.word	0x0002b79d
   20be8:	0002b7fb 	.word	0x0002b7fb
   20bec:	00020729 	.word	0x00020729
   20bf0:	0002b65d 	.word	0x0002b65d
   20bf4:	00032fed 	.word	0x00032fed
   20bf8:	00032ff3 	.word	0x00032ff3
   20bfc:	00020811 	.word	0x00020811
   20c00:	0002b64b 	.word	0x0002b64b
   20c04:	fffff82e 	.word	0xfffff82e
   20c08:	0002b69f 	.word	0x0002b69f
   20c0c:	00032ff9 	.word	0x00032ff9

00020c10 <rpmsg_init_vdev>:
{
   20c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c12:	4605      	mov	r5, r0
   20c14:	460e      	mov	r6, r1
   20c16:	4617      	mov	r7, r2
   20c18:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   20c1a:	4a07      	ldr	r2, [pc, #28]	; (20c38 <rpmsg_init_vdev+0x28>)
   20c1c:	ac03      	add	r4, sp, #12
   20c1e:	ca07      	ldmia	r2, {r0, r1, r2}
   20c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   20c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20c26:	4631      	mov	r1, r6
   20c28:	9200      	str	r2, [sp, #0]
   20c2a:	4628      	mov	r0, r5
   20c2c:	463a      	mov	r2, r7
   20c2e:	9401      	str	r4, [sp, #4]
   20c30:	f7ff fec4 	bl	209bc <rpmsg_init_vdev_with_config>
}
   20c34:	b007      	add	sp, #28
   20c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20c38:	0002cea8 	.word	0x0002cea8

00020c3c <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20c3c:	2203      	movs	r2, #3
   20c3e:	4b11      	ldr	r3, [pc, #68]	; (20c84 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   20c40:	4911      	ldr	r1, [pc, #68]	; (20c88 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20c42:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   20c44:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20c46:	4a11      	ldr	r2, [pc, #68]	; (20c8c <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   20c48:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20c4a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   20c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20c50:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   20c52:	2200      	movs	r2, #0
   20c54:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   20c56:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20c58:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   20c5a:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   20c5c:	490c      	ldr	r1, [pc, #48]	; (20c90 <_DoInit+0x54>)
   20c5e:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   20c60:	2110      	movs	r1, #16
   20c62:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   20c64:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   20c66:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20c68:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   20c6a:	4a0a      	ldr	r2, [pc, #40]	; (20c94 <_DoInit+0x58>)
   20c6c:	6812      	ldr	r2, [r2, #0]
   20c6e:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   20c72:	4a09      	ldr	r2, [pc, #36]	; (20c98 <_DoInit+0x5c>)
   20c74:	6810      	ldr	r0, [r2, #0]
   20c76:	8892      	ldrh	r2, [r2, #4]
   20c78:	6018      	str	r0, [r3, #0]
   20c7a:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   20c7c:	2220      	movs	r2, #32
   20c7e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   20c80:	4770      	bx	lr
   20c82:	bf00      	nop
   20c84:	20021978 	.word	0x20021978
   20c88:	00032ffc 	.word	0x00032ffc
   20c8c:	200223bf 	.word	0x200223bf
   20c90:	200223af 	.word	0x200223af
   20c94:	00033005 	.word	0x00033005
   20c98:	00033009 	.word	0x00033009

00020c9c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   20ca0:	f04f 0b18 	mov.w	fp, #24
   20ca4:	4f20      	ldr	r7, [pc, #128]	; (20d28 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20ca6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   20ca8:	fb0b 7200 	mla	r2, fp, r0, r7
   20cac:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   20cae:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20cb0:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20cb2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20cb4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20cb6:	d831      	bhi.n	20d1c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   20cb8:	f8d2 a020 	ldr.w	sl, [r2, #32]
   20cbc:	ebaa 0905 	sub.w	r9, sl, r5
   20cc0:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   20cc4:	4294      	cmp	r4, r2
   20cc6:	d811      	bhi.n	20cec <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20cc8:	2318      	movs	r3, #24
   20cca:	fb06 3303 	mla	r3, r6, r3, r3
   20cce:	443b      	add	r3, r7
   20cd0:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20cd2:	4622      	mov	r2, r4
   20cd4:	4641      	mov	r1, r8
   20cd6:	4428      	add	r0, r5
   20cd8:	f00b f870 	bl	2bdbc <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   20cdc:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   20cde:	2318      	movs	r3, #24
      return 1;
   20ce0:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   20ce2:	fb03 7306 	mla	r3, r3, r6, r7
   20ce6:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   20ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   20cec:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   20cee:	429c      	cmp	r4, r3
   20cf0:	d818      	bhi.n	20d24 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20cf2:	fb00 bb0b 	mla	fp, r0, fp, fp
   20cf6:	44bb      	add	fp, r7
   20cf8:	f8db 0004 	ldr.w	r0, [fp, #4]
   20cfc:	464a      	mov	r2, r9
   20cfe:	4428      	add	r0, r5
   20d00:	442c      	add	r4, r5
   20d02:	f00b f85b 	bl	2bdbc <memcpy>
      if (NumBytes) {
   20d06:	ebb4 040a 	subs.w	r4, r4, sl
   20d0a:	d0e8      	beq.n	20cde <SEGGER_RTT_WriteSkipNoLock+0x42>
   20d0c:	4622      	mov	r2, r4
   20d0e:	f8db 0004 	ldr.w	r0, [fp, #4]
   20d12:	eb08 0109 	add.w	r1, r8, r9
   20d16:	f00b f851 	bl	2bdbc <memcpy>
      return 1;
   20d1a:	e7e0      	b.n	20cde <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   20d1c:	3b01      	subs	r3, #1
   20d1e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   20d20:	42a3      	cmp	r3, r4
   20d22:	d2d1      	bcs.n	20cc8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   20d24:	2000      	movs	r0, #0
   20d26:	e7df      	b.n	20ce8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   20d28:	20021978 	.word	0x20021978

00020d2c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   20d2c:	2218      	movs	r2, #24
   20d2e:	4b03      	ldr	r3, [pc, #12]	; (20d3c <SEGGER_RTT_HasDataUp+0x10>)
   20d30:	fb02 3300 	mla	r3, r2, r0, r3
   20d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   20d36:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   20d38:	1a80      	subs	r0, r0, r2
   20d3a:	4770      	bx	lr
   20d3c:	20021978 	.word	0x20021978

00020d40 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   20d40:	f04f 32ff 	mov.w	r2, #4294967295
   20d44:	f04f 33ff 	mov.w	r3, #4294967295
   20d48:	4801      	ldr	r0, [pc, #4]	; (20d50 <zephyr_rtt_mutex_lock+0x10>)
   20d4a:	f000 bd3f 	b.w	217cc <z_impl_k_mutex_lock>
   20d4e:	bf00      	nop
   20d50:	20008b10 	.word	0x20008b10

00020d54 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   20d54:	4801      	ldr	r0, [pc, #4]	; (20d5c <zephyr_rtt_mutex_unlock+0x8>)
   20d56:	f000 be09 	b.w	2196c <z_impl_k_mutex_unlock>
   20d5a:	bf00      	nop
   20d5c:	20008b10 	.word	0x20008b10

00020d60 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
   20d60:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   20d62:	4605      	mov	r5, r0
   20d64:	b910      	cbnz	r0, 20d6c <z_impl_device_get_binding+0xc>
		return NULL;
   20d66:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   20d68:	4620      	mov	r0, r4
   20d6a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   20d6c:	7803      	ldrb	r3, [r0, #0]
   20d6e:	2b00      	cmp	r3, #0
   20d70:	d0f9      	beq.n	20d66 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   20d72:	4c0e      	ldr	r4, [pc, #56]	; (20dac <z_impl_device_get_binding+0x4c>)
   20d74:	4e0e      	ldr	r6, [pc, #56]	; (20db0 <z_impl_device_get_binding+0x50>)
   20d76:	42b4      	cmp	r4, r6
   20d78:	d108      	bne.n	20d8c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   20d7a:	4c0c      	ldr	r4, [pc, #48]	; (20dac <z_impl_device_get_binding+0x4c>)
   20d7c:	42b4      	cmp	r4, r6
   20d7e:	d0f2      	beq.n	20d66 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20d80:	4620      	mov	r0, r4
   20d82:	f00a fddb 	bl	2b93c <z_device_is_ready>
   20d86:	b950      	cbnz	r0, 20d9e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   20d88:	3418      	adds	r4, #24
   20d8a:	e7f7      	b.n	20d7c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   20d8c:	4620      	mov	r0, r4
   20d8e:	f00a fdd5 	bl	2b93c <z_device_is_ready>
   20d92:	b110      	cbz	r0, 20d9a <z_impl_device_get_binding+0x3a>
   20d94:	6823      	ldr	r3, [r4, #0]
   20d96:	42ab      	cmp	r3, r5
   20d98:	d0e6      	beq.n	20d68 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   20d9a:	3418      	adds	r4, #24
   20d9c:	e7eb      	b.n	20d76 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20d9e:	4628      	mov	r0, r5
   20da0:	6821      	ldr	r1, [r4, #0]
   20da2:	f7e8 fad3 	bl	934c <strcmp>
   20da6:	2800      	cmp	r0, #0
   20da8:	d1ee      	bne.n	20d88 <z_impl_device_get_binding+0x28>
   20daa:	e7dd      	b.n	20d68 <z_impl_device_get_binding+0x8>
   20dac:	0002c708 	.word	0x0002c708
   20db0:	0002c840 	.word	0x0002c840

00020db4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20db4:	4b01      	ldr	r3, [pc, #4]	; (20dbc <z_impl_z_errno+0x8>)
   20db6:	6898      	ldr	r0, [r3, #8]
}
   20db8:	3064      	adds	r0, #100	; 0x64
   20dba:	4770      	bx	lr
   20dbc:	20021a20 	.word	0x20021a20

00020dc0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20dc4:	b086      	sub	sp, #24
   20dc6:	4604      	mov	r4, r0
   20dc8:	460e      	mov	r6, r1
   20dca:	af00      	add	r7, sp, #0
	__asm__ volatile(
   20dcc:	f04f 0320 	mov.w	r3, #32
   20dd0:	f3ef 8811 	mrs	r8, BASEPRI
   20dd4:	f383 8812 	msr	BASEPRI_MAX, r3
   20dd8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   20ddc:	f002 fe80 	bl	23ae0 <z_impl_z_current_get>
   20de0:	2c04      	cmp	r4, #4
   20de2:	bf98      	it	ls
   20de4:	4b34      	ldrls	r3, [pc, #208]	; (20eb8 <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20de6:	46e9      	mov	r9, sp
   20de8:	b08a      	sub	sp, #40	; 0x28
   20dea:	4605      	mov	r5, r0
   20dec:	466a      	mov	r2, sp
   20dee:	bf94      	ite	ls
   20df0:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   20df4:	4b31      	ldrhi	r3, [pc, #196]	; (20ebc <z_fatal_error+0xfc>)
   20df6:	61d3      	str	r3, [r2, #28]
   20df8:	f240 3301 	movw	r3, #769	; 0x301
   20dfc:	f04f 0a00 	mov.w	sl, #0
   20e00:	8493      	strh	r3, [r2, #36]	; 0x24
   20e02:	492f      	ldr	r1, [pc, #188]	; (20ec0 <z_fatal_error+0x100>)
   20e04:	4b2f      	ldr	r3, [pc, #188]	; (20ec4 <z_fatal_error+0x104>)
   20e06:	e9c2 1405 	strd	r1, r4, [r2, #20]
   20e0a:	f8c2 a020 	str.w	sl, [r2, #32]
   20e0e:	f842 3f10 	str.w	r3, [r2, #16]!
   20e12:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   20e16:	4653      	mov	r3, sl
   20e18:	482b      	ldr	r0, [pc, #172]	; (20ec8 <z_fatal_error+0x108>)
   20e1a:	f7ed fd9b 	bl	e954 <z_impl_z_log_msg_static_create>
   20e1e:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20e20:	b17e      	cbz	r6, 20e42 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20e22:	69f3      	ldr	r3, [r6, #28]
   20e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20e28:	b15b      	cbz	r3, 20e42 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   20e2a:	4b28      	ldr	r3, [pc, #160]	; (20ecc <z_fatal_error+0x10c>)
   20e2c:	617b      	str	r3, [r7, #20]
   20e2e:	2302      	movs	r3, #2
   20e30:	613b      	str	r3, [r7, #16]
   20e32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20e36:	4653      	mov	r3, sl
   20e38:	4823      	ldr	r0, [pc, #140]	; (20ec8 <z_fatal_error+0x108>)
   20e3a:	f107 0210 	add.w	r2, r7, #16
   20e3e:	f7ed fd89 	bl	e954 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20e42:	b12d      	cbz	r5, 20e50 <z_fatal_error+0x90>
   20e44:	4628      	mov	r0, r5
   20e46:	f00a fdaf 	bl	2b9a8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   20e4a:	b108      	cbz	r0, 20e50 <z_fatal_error+0x90>
   20e4c:	7803      	ldrb	r3, [r0, #0]
   20e4e:	b903      	cbnz	r3, 20e52 <z_fatal_error+0x92>
		thread_name = "unknown";
   20e50:	481f      	ldr	r0, [pc, #124]	; (20ed0 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   20e52:	46e9      	mov	r9, sp
   20e54:	b08a      	sub	sp, #40	; 0x28
   20e56:	466a      	mov	r2, sp
   20e58:	4b1e      	ldr	r3, [pc, #120]	; (20ed4 <z_fatal_error+0x114>)
   20e5a:	61d0      	str	r0, [r2, #28]
   20e5c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   20e60:	f240 3301 	movw	r3, #769	; 0x301
   20e64:	8413      	strh	r3, [r2, #32]
   20e66:	4b1c      	ldr	r3, [pc, #112]	; (20ed8 <z_fatal_error+0x118>)
   20e68:	f842 3f10 	str.w	r3, [r2, #16]!
   20e6c:	2300      	movs	r3, #0
   20e6e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   20e72:	4815      	ldr	r0, [pc, #84]	; (20ec8 <z_fatal_error+0x108>)
   20e74:	f7ed fd6e 	bl	e954 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   20e78:	4631      	mov	r1, r6
   20e7a:	46cd      	mov	sp, r9
   20e7c:	4620      	mov	r0, r4
   20e7e:	f7fd fb2d 	bl	1e4dc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   20e82:	2c04      	cmp	r4, #4
   20e84:	d10c      	bne.n	20ea0 <z_fatal_error+0xe0>
   20e86:	4915      	ldr	r1, [pc, #84]	; (20edc <z_fatal_error+0x11c>)
   20e88:	2393      	movs	r3, #147	; 0x93
   20e8a:	4a15      	ldr	r2, [pc, #84]	; (20ee0 <z_fatal_error+0x120>)
   20e8c:	4815      	ldr	r0, [pc, #84]	; (20ee4 <z_fatal_error+0x124>)
   20e8e:	f005 ff70 	bl	26d72 <assert_print>
   20e92:	4815      	ldr	r0, [pc, #84]	; (20ee8 <z_fatal_error+0x128>)
   20e94:	f005 ff6d 	bl	26d72 <assert_print>
   20e98:	2193      	movs	r1, #147	; 0x93
   20e9a:	4811      	ldr	r0, [pc, #68]	; (20ee0 <z_fatal_error+0x120>)
   20e9c:	f005 ff62 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   20ea0:	f388 8811 	msr	BASEPRI, r8
   20ea4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20ea8:	4628      	mov	r0, r5
   20eaa:	f7f0 fb21 	bl	114f0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   20eae:	3718      	adds	r7, #24
   20eb0:	46bd      	mov	sp, r7
   20eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20eb6:	bf00      	nop
   20eb8:	0002dc60 	.word	0x0002dc60
   20ebc:	00033010 	.word	0x00033010
   20ec0:	00033026 	.word	0x00033026
   20ec4:	01000005 	.word	0x01000005
   20ec8:	0002cd88 	.word	0x0002cd88
   20ecc:	0003304e 	.word	0x0003304e
   20ed0:	0003301e 	.word	0x0003301e
   20ed4:	0003306f 	.word	0x0003306f
   20ed8:	01000004 	.word	0x01000004
   20edc:	000330a9 	.word	0x000330a9
   20ee0:	00033087 	.word	0x00033087
   20ee4:	0002dd81 	.word	0x0002dd81
   20ee8:	000330c6 	.word	0x000330c6

00020eec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20eec:	4b0f      	ldr	r3, [pc, #60]	; (20f2c <z_sys_init_run_level+0x40>)
{
   20eee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20ef0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20ef4:	3001      	adds	r0, #1
   20ef6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   20efa:	42a6      	cmp	r6, r4
   20efc:	d800      	bhi.n	20f00 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   20efe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20f00:	e9d4 3500 	ldrd	r3, r5, [r4]
   20f04:	4628      	mov	r0, r5
   20f06:	4798      	blx	r3
		if (dev != NULL) {
   20f08:	b16d      	cbz	r5, 20f26 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   20f0a:	b138      	cbz	r0, 20f1c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   20f0c:	2800      	cmp	r0, #0
   20f0e:	bfb8      	it	lt
   20f10:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   20f12:	28ff      	cmp	r0, #255	; 0xff
   20f14:	bfa8      	it	ge
   20f16:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   20f18:	68eb      	ldr	r3, [r5, #12]
   20f1a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   20f1c:	68ea      	ldr	r2, [r5, #12]
   20f1e:	7853      	ldrb	r3, [r2, #1]
   20f20:	f043 0301 	orr.w	r3, r3, #1
   20f24:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20f26:	3408      	adds	r4, #8
   20f28:	e7e7      	b.n	20efa <z_sys_init_run_level+0xe>
   20f2a:	bf00      	nop
   20f2c:	0002dc74 	.word	0x0002dc74

00020f30 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   20f30:	2201      	movs	r2, #1
{
   20f32:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   20f34:	4b09      	ldr	r3, [pc, #36]	; (20f5c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   20f36:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   20f38:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   20f3a:	f7ff ffd7 	bl	20eec <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   20f3e:	f003 fed7 	bl	24cf0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   20f42:	2004      	movs	r0, #4
   20f44:	f7ff ffd2 	bl	20eec <z_sys_init_run_level>

	z_init_static_threads();
   20f48:	f000 fb66 	bl	21618 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   20f4c:	f7ea fd22 	bl	b994 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20f50:	4a03      	ldr	r2, [pc, #12]	; (20f60 <bg_thread_main+0x30>)
   20f52:	7b13      	ldrb	r3, [r2, #12]
   20f54:	f023 0301 	bic.w	r3, r3, #1
   20f58:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20f5a:	bd08      	pop	{r3, pc}
   20f5c:	200227bf 	.word	0x200227bf
   20f60:	2000a190 	.word	0x2000a190

00020f64 <z_bss_zero>:
{
   20f64:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   20f66:	4803      	ldr	r0, [pc, #12]	; (20f74 <z_bss_zero+0x10>)
   20f68:	4a03      	ldr	r2, [pc, #12]	; (20f78 <z_bss_zero+0x14>)
   20f6a:	2100      	movs	r1, #0
   20f6c:	1a12      	subs	r2, r2, r0
   20f6e:	f00a fcf0 	bl	2b952 <z_early_memset>
}
   20f72:	bd08      	pop	{r3, pc}
   20f74:	20008de8 	.word	0x20008de8
   20f78:	200227c0 	.word	0x200227c0

00020f7c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   20f7c:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   20f7e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   20f80:	4e13      	ldr	r6, [pc, #76]	; (20fd0 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   20f82:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   20f84:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   20f88:	2300      	movs	r3, #0
{
   20f8a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   20f8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20f90:	220f      	movs	r2, #15
   20f92:	9301      	str	r3, [sp, #4]
   20f94:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20f98:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   20f9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20f9e:	4d0d      	ldr	r5, [pc, #52]	; (20fd4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   20fa0:	490d      	ldr	r1, [pc, #52]	; (20fd8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20fa2:	fb03 5500 	mla	r5, r3, r0, r5
{
   20fa6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   20fa8:	fb02 1100 	mla	r1, r2, r0, r1
   20fac:	4b0b      	ldr	r3, [pc, #44]	; (20fdc <z_init_cpu+0x60>)
   20fae:	4630      	mov	r0, r6
   20fb0:	9500      	str	r5, [sp, #0]
   20fb2:	f000 fa97 	bl	214e4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20fb6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   20fb8:	752c      	strb	r4, [r5, #20]
   20fba:	f023 0304 	bic.w	r3, r3, #4
   20fbe:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   20fc0:	4b07      	ldr	r3, [pc, #28]	; (20fe0 <z_init_cpu+0x64>)
   20fc2:	3401      	adds	r4, #1
   20fc4:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   20fc8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   20fca:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   20fcc:	b006      	add	sp, #24
   20fce:	bd70      	pop	{r4, r5, r6, pc}
   20fd0:	2000a108 	.word	0x2000a108
   20fd4:	20021a20 	.word	0x20021a20
   20fd8:	20033cc8 	.word	0x20033cc8
   20fdc:	00021769 	.word	0x00021769
   20fe0:	200334c8 	.word	0x200334c8

00020fe4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20fe4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   20fe6:	2000      	movs	r0, #0
{
   20fe8:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   20fea:	f7ff ff7f 	bl	20eec <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   20fee:	4b2f      	ldr	r3, [pc, #188]	; (210ac <z_cstart+0xc8>)
	uint32_t msp =
   20ff0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20ff4:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   20ff8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20ffc:	2400      	movs	r4, #0
   20ffe:	23e0      	movs	r3, #224	; 0xe0
   21000:	4d2b      	ldr	r5, [pc, #172]	; (210b0 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   21002:	4e2c      	ldr	r6, [pc, #176]	; (210b4 <z_cstart+0xd0>)
   21004:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21008:	77ec      	strb	r4, [r5, #31]
   2100a:	762c      	strb	r4, [r5, #24]
   2100c:	766c      	strb	r4, [r5, #25]
   2100e:	76ac      	strb	r4, [r5, #26]
   21010:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21014:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21016:	4f28      	ldr	r7, [pc, #160]	; (210b8 <z_cstart+0xd4>)
   21018:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2101c:	626b      	str	r3, [r5, #36]	; 0x24
   2101e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21022:	f7f0 f9c9 	bl	113b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21026:	f7ef fcd7 	bl	109d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2102a:	f04f 33ff 	mov.w	r3, #4294967295
   2102e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21030:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   21032:	f7f0 fc3d 	bl	118b0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21036:	f7f0 fa71 	bl	1151c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2103a:	f7ed fa81 	bl	e540 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2103e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   21042:	ad06      	add	r5, sp, #24
   21044:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   21046:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   2104a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   2104e:	f003 fe31 	bl	24cb4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   21052:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   21054:	f00a fc71 	bl	2b93a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   21058:	2001      	movs	r0, #1
   2105a:	f7ff ff47 	bl	20eec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2105e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   21060:	4d16      	ldr	r5, [pc, #88]	; (210bc <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   21062:	f7ff ff43 	bl	20eec <z_sys_init_run_level>
	z_sched_init();
   21066:	f002 fbc1 	bl	237ec <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2106a:	4b15      	ldr	r3, [pc, #84]	; (210c0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   2106c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2106e:	9305      	str	r3, [sp, #20]
   21070:	2301      	movs	r3, #1
   21072:	4914      	ldr	r1, [pc, #80]	; (210c4 <z_cstart+0xe0>)
   21074:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21078:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2107c:	4628      	mov	r0, r5
   2107e:	463b      	mov	r3, r7
   21080:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21084:	9400      	str	r4, [sp, #0]
   21086:	f000 fa2d 	bl	214e4 <z_setup_new_thread>
   2108a:	4606      	mov	r6, r0
   2108c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   2108e:	4628      	mov	r0, r5
   21090:	f022 0204 	bic.w	r2, r2, #4
   21094:	736a      	strb	r2, [r5, #13]
   21096:	f001 fd81 	bl	22b9c <z_ready_thread>
	z_init_cpu(0);
   2109a:	4620      	mov	r0, r4
   2109c:	f7ff ff6e 	bl	20f7c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   210a0:	463a      	mov	r2, r7
   210a2:	4631      	mov	r1, r6
   210a4:	4628      	mov	r0, r5
   210a6:	f7ef fe17 	bl	10cd8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   210aa:	bf00      	nop
   210ac:	200334c8 	.word	0x200334c8
   210b0:	e000ed00 	.word	0xe000ed00
   210b4:	20021a20 	.word	0x20021a20
   210b8:	00020f31 	.word	0x00020f31
   210bc:	2000a190 	.word	0x2000a190
   210c0:	00033145 	.word	0x00033145
   210c4:	20033e08 	.word	0x20033e08

000210c8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   210c8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   210ca:	4c0d      	ldr	r4, [pc, #52]	; (21100 <statics_init+0x38>)
   210cc:	4d0d      	ldr	r5, [pc, #52]	; (21104 <statics_init+0x3c>)
   210ce:	42ac      	cmp	r4, r5
   210d0:	d913      	bls.n	210fa <statics_init+0x32>
   210d2:	490d      	ldr	r1, [pc, #52]	; (21108 <statics_init+0x40>)
   210d4:	2318      	movs	r3, #24
   210d6:	4a0d      	ldr	r2, [pc, #52]	; (2110c <statics_init+0x44>)
   210d8:	480d      	ldr	r0, [pc, #52]	; (21110 <statics_init+0x48>)
   210da:	f005 fe4a 	bl	26d72 <assert_print>
   210de:	480d      	ldr	r0, [pc, #52]	; (21114 <statics_init+0x4c>)
   210e0:	f005 fe47 	bl	26d72 <assert_print>
   210e4:	2118      	movs	r1, #24
   210e6:	4809      	ldr	r0, [pc, #36]	; (2110c <statics_init+0x44>)
   210e8:	f005 fe3c 	bl	26d64 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   210ec:	4620      	mov	r0, r4
   210ee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   210f2:	f00a fc32 	bl	2b95a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   210f6:	3418      	adds	r4, #24
   210f8:	e7e9      	b.n	210ce <statics_init+0x6>
   210fa:	d3f7      	bcc.n	210ec <statics_init+0x24>
		}
	}
	return 0;
}
   210fc:	2000      	movs	r0, #0
   210fe:	bd38      	pop	{r3, r4, r5, pc}
   21100:	20008abc 	.word	0x20008abc
   21104:	20008ad4 	.word	0x20008ad4
   21108:	0003316f 	.word	0x0003316f
   2110c:	0003314d 	.word	0x0003314d
   21110:	0002dd81 	.word	0x0002dd81
   21114:	0002eee2 	.word	0x0002eee2

00021118 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2111c:	b085      	sub	sp, #20
   2111e:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   21122:	4680      	mov	r8, r0
   21124:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21126:	4648      	mov	r0, r9
   21128:	4659      	mov	r1, fp
{
   2112a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2112c:	f00a fd33 	bl	2bb96 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   21130:	f1bb 3fff 	cmp.w	fp, #4294967295
   21134:	bf08      	it	eq
   21136:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2113a:	4606      	mov	r6, r0
   2113c:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2113e:	bf04      	itt	eq
   21140:	f04f 36ff 	moveq.w	r6, #4294967295
   21144:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21148:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   2114c:	f04f 0320 	mov.w	r3, #32
   21150:	f3ef 8511 	mrs	r5, BASEPRI
   21154:	f383 8812 	msr	BASEPRI_MAX, r3
   21158:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2115c:	4620      	mov	r0, r4
   2115e:	f000 fadf 	bl	21720 <z_spin_lock_valid>
   21162:	b960      	cbnz	r0, 2117e <k_heap_aligned_alloc+0x66>
   21164:	2394      	movs	r3, #148	; 0x94
   21166:	4a33      	ldr	r2, [pc, #204]	; (21234 <k_heap_aligned_alloc+0x11c>)
   21168:	4933      	ldr	r1, [pc, #204]	; (21238 <k_heap_aligned_alloc+0x120>)
   2116a:	4834      	ldr	r0, [pc, #208]	; (2123c <k_heap_aligned_alloc+0x124>)
   2116c:	f005 fe01 	bl	26d72 <assert_print>
   21170:	4621      	mov	r1, r4
   21172:	4833      	ldr	r0, [pc, #204]	; (21240 <k_heap_aligned_alloc+0x128>)
   21174:	f005 fdfd 	bl	26d72 <assert_print>
   21178:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2117a:	482e      	ldr	r0, [pc, #184]	; (21234 <k_heap_aligned_alloc+0x11c>)
   2117c:	e031      	b.n	211e2 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   2117e:	4620      	mov	r0, r4
   21180:	f000 faea 	bl	21758 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21184:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21188:	b113      	cbz	r3, 21190 <k_heap_aligned_alloc+0x78>
   2118a:	ea5b 0909 	orrs.w	r9, fp, r9
   2118e:	d11d      	bne.n	211cc <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21190:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21194:	4652      	mov	r2, sl
   21196:	4640      	mov	r0, r8
   21198:	9903      	ldr	r1, [sp, #12]
   2119a:	f7eb fca3 	bl	cae4 <sys_heap_aligned_alloc>
   2119e:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   211a0:	f003 f88c 	bl	242bc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   211a4:	f1b9 0f00 	cmp.w	r9, #0
   211a8:	d01d      	beq.n	211e6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211aa:	4620      	mov	r0, r4
   211ac:	f000 fac6 	bl	2173c <z_spin_unlock_valid>
   211b0:	2800      	cmp	r0, #0
   211b2:	d137      	bne.n	21224 <k_heap_aligned_alloc+0x10c>
   211b4:	23c2      	movs	r3, #194	; 0xc2
   211b6:	4a1f      	ldr	r2, [pc, #124]	; (21234 <k_heap_aligned_alloc+0x11c>)
   211b8:	4922      	ldr	r1, [pc, #136]	; (21244 <k_heap_aligned_alloc+0x12c>)
   211ba:	4820      	ldr	r0, [pc, #128]	; (2123c <k_heap_aligned_alloc+0x124>)
   211bc:	f005 fdd9 	bl	26d72 <assert_print>
   211c0:	4621      	mov	r1, r4
   211c2:	4821      	ldr	r0, [pc, #132]	; (21248 <k_heap_aligned_alloc+0x130>)
   211c4:	f005 fdd5 	bl	26d72 <assert_print>
   211c8:	21c2      	movs	r1, #194	; 0xc2
   211ca:	e7d6      	b.n	2117a <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   211cc:	491f      	ldr	r1, [pc, #124]	; (2124c <k_heap_aligned_alloc+0x134>)
   211ce:	234c      	movs	r3, #76	; 0x4c
   211d0:	4a1f      	ldr	r2, [pc, #124]	; (21250 <k_heap_aligned_alloc+0x138>)
   211d2:	481a      	ldr	r0, [pc, #104]	; (2123c <k_heap_aligned_alloc+0x124>)
   211d4:	f005 fdcd 	bl	26d72 <assert_print>
   211d8:	481e      	ldr	r0, [pc, #120]	; (21254 <k_heap_aligned_alloc+0x13c>)
   211da:	f005 fdca 	bl	26d72 <assert_print>
   211de:	214c      	movs	r1, #76	; 0x4c
   211e0:	481b      	ldr	r0, [pc, #108]	; (21250 <k_heap_aligned_alloc+0x138>)
   211e2:	f005 fdbf 	bl	26d64 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   211e6:	1a30      	subs	r0, r6, r0
   211e8:	eb67 0101 	sbc.w	r1, r7, r1
   211ec:	2801      	cmp	r0, #1
   211ee:	f171 0300 	sbcs.w	r3, r1, #0
   211f2:	dbda      	blt.n	211aa <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   211f4:	e9cd 0100 	strd	r0, r1, [sp]
   211f8:	465a      	mov	r2, fp
   211fa:	4629      	mov	r1, r5
   211fc:	4620      	mov	r0, r4
   211fe:	f002 f827 	bl	23250 <z_pend_curr>
   21202:	f04f 0320 	mov.w	r3, #32
   21206:	f3ef 8511 	mrs	r5, BASEPRI
   2120a:	f383 8812 	msr	BASEPRI_MAX, r3
   2120e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21212:	4620      	mov	r0, r4
   21214:	f000 fa84 	bl	21720 <z_spin_lock_valid>
   21218:	2800      	cmp	r0, #0
   2121a:	d0a3      	beq.n	21164 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   2121c:	4620      	mov	r0, r4
   2121e:	f000 fa9b 	bl	21758 <z_spin_lock_set_owner>
	return k;
   21222:	e7b7      	b.n	21194 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   21224:	f385 8811 	msr	BASEPRI, r5
   21228:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2122c:	4648      	mov	r0, r9
   2122e:	b005      	add	sp, #20
   21230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21234:	0002ebe3 	.word	0x0002ebe3
   21238:	0002ec3c 	.word	0x0002ec3c
   2123c:	0002dd81 	.word	0x0002dd81
   21240:	0002ec51 	.word	0x0002ec51
   21244:	0002ec10 	.word	0x0002ec10
   21248:	0002ec27 	.word	0x0002ec27
   2124c:	00033185 	.word	0x00033185
   21250:	0003314d 	.word	0x0003314d
   21254:	00031dba 	.word	0x00031dba

00021258 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   21258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2125a:	4605      	mov	r5, r0
   2125c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2125e:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   21262:	f04f 0320 	mov.w	r3, #32
   21266:	f3ef 8711 	mrs	r7, BASEPRI
   2126a:	f383 8812 	msr	BASEPRI_MAX, r3
   2126e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21272:	4620      	mov	r0, r4
   21274:	f000 fa54 	bl	21720 <z_spin_lock_valid>
   21278:	b968      	cbnz	r0, 21296 <k_heap_free+0x3e>
   2127a:	2394      	movs	r3, #148	; 0x94
   2127c:	4a19      	ldr	r2, [pc, #100]	; (212e4 <k_heap_free+0x8c>)
   2127e:	491a      	ldr	r1, [pc, #104]	; (212e8 <k_heap_free+0x90>)
   21280:	481a      	ldr	r0, [pc, #104]	; (212ec <k_heap_free+0x94>)
   21282:	f005 fd76 	bl	26d72 <assert_print>
   21286:	4621      	mov	r1, r4
   21288:	4819      	ldr	r0, [pc, #100]	; (212f0 <k_heap_free+0x98>)
   2128a:	f005 fd72 	bl	26d72 <assert_print>
   2128e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21290:	4814      	ldr	r0, [pc, #80]	; (212e4 <k_heap_free+0x8c>)
   21292:	f005 fd67 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   21296:	4620      	mov	r0, r4
   21298:	f000 fa5e 	bl	21758 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2129c:	4628      	mov	r0, r5
   2129e:	4631      	mov	r1, r6
   212a0:	f7eb fbda 	bl	ca58 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   212a4:	f105 000c 	add.w	r0, r5, #12
   212a8:	f00a fc5b 	bl	2bb62 <z_unpend_all>
   212ac:	b128      	cbz	r0, 212ba <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   212ae:	4639      	mov	r1, r7
   212b0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   212b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   212b6:	f001 bcfd 	b.w	22cb4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212ba:	4620      	mov	r0, r4
   212bc:	f000 fa3e 	bl	2173c <z_spin_unlock_valid>
   212c0:	b958      	cbnz	r0, 212da <k_heap_free+0x82>
   212c2:	23c2      	movs	r3, #194	; 0xc2
   212c4:	4a07      	ldr	r2, [pc, #28]	; (212e4 <k_heap_free+0x8c>)
   212c6:	490b      	ldr	r1, [pc, #44]	; (212f4 <k_heap_free+0x9c>)
   212c8:	4808      	ldr	r0, [pc, #32]	; (212ec <k_heap_free+0x94>)
   212ca:	f005 fd52 	bl	26d72 <assert_print>
   212ce:	4621      	mov	r1, r4
   212d0:	4809      	ldr	r0, [pc, #36]	; (212f8 <k_heap_free+0xa0>)
   212d2:	f005 fd4e 	bl	26d72 <assert_print>
   212d6:	21c2      	movs	r1, #194	; 0xc2
   212d8:	e7da      	b.n	21290 <k_heap_free+0x38>
	__asm__ volatile(
   212da:	f387 8811 	msr	BASEPRI, r7
   212de:	f3bf 8f6f 	isb	sy
}
   212e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   212e4:	0002ebe3 	.word	0x0002ebe3
   212e8:	0002ec3c 	.word	0x0002ec3c
   212ec:	0002dd81 	.word	0x0002dd81
   212f0:	0002ec51 	.word	0x0002ec51
   212f4:	0002ec10 	.word	0x0002ec10
   212f8:	0002ec27 	.word	0x0002ec27

000212fc <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   212fc:	2000      	movs	r0, #0
{
   212fe:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21300:	4c0c      	ldr	r4, [pc, #48]	; (21334 <init_mem_slab_module+0x38>)
   21302:	4d0d      	ldr	r5, [pc, #52]	; (21338 <init_mem_slab_module+0x3c>)
   21304:	42ac      	cmp	r4, r5
   21306:	d913      	bls.n	21330 <init_mem_slab_module+0x34>
   21308:	490c      	ldr	r1, [pc, #48]	; (2133c <init_mem_slab_module+0x40>)
   2130a:	233d      	movs	r3, #61	; 0x3d
   2130c:	4a0c      	ldr	r2, [pc, #48]	; (21340 <init_mem_slab_module+0x44>)
   2130e:	480d      	ldr	r0, [pc, #52]	; (21344 <init_mem_slab_module+0x48>)
   21310:	f005 fd2f 	bl	26d72 <assert_print>
   21314:	480c      	ldr	r0, [pc, #48]	; (21348 <init_mem_slab_module+0x4c>)
   21316:	f005 fd2c 	bl	26d72 <assert_print>
   2131a:	213d      	movs	r1, #61	; 0x3d
   2131c:	4808      	ldr	r0, [pc, #32]	; (21340 <init_mem_slab_module+0x44>)
   2131e:	f005 fd21 	bl	26d64 <assert_post_action>
		rc = create_free_list(slab);
   21322:	4620      	mov	r0, r4
   21324:	f00a fb21 	bl	2b96a <create_free_list>
		if (rc < 0) {
   21328:	2800      	cmp	r0, #0
   2132a:	db02      	blt.n	21332 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2132c:	3420      	adds	r4, #32
   2132e:	e7e9      	b.n	21304 <init_mem_slab_module+0x8>
   21330:	d3f7      	bcc.n	21322 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   21332:	bd38      	pop	{r3, r4, r5, pc}
   21334:	20008a5c 	.word	0x20008a5c
   21338:	20008abc 	.word	0x20008abc
   2133c:	000331f0 	.word	0x000331f0
   21340:	000331cb 	.word	0x000331cb
   21344:	0002dd81 	.word	0x0002dd81
   21348:	0002eee2 	.word	0x0002eee2

0002134c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2134c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21350:	4604      	mov	r4, r0
   21352:	460e      	mov	r6, r1
   21354:	4690      	mov	r8, r2
   21356:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21358:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2135c:	f04f 0320 	mov.w	r3, #32
   21360:	f3ef 8911 	mrs	r9, BASEPRI
   21364:	f383 8812 	msr	BASEPRI_MAX, r3
   21368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2136c:	4628      	mov	r0, r5
   2136e:	f000 f9d7 	bl	21720 <z_spin_lock_valid>
   21372:	b968      	cbnz	r0, 21390 <k_mem_slab_alloc+0x44>
   21374:	2394      	movs	r3, #148	; 0x94
   21376:	4a23      	ldr	r2, [pc, #140]	; (21404 <k_mem_slab_alloc+0xb8>)
   21378:	4923      	ldr	r1, [pc, #140]	; (21408 <k_mem_slab_alloc+0xbc>)
   2137a:	4824      	ldr	r0, [pc, #144]	; (2140c <k_mem_slab_alloc+0xc0>)
   2137c:	f005 fcf9 	bl	26d72 <assert_print>
   21380:	4629      	mov	r1, r5
   21382:	4823      	ldr	r0, [pc, #140]	; (21410 <k_mem_slab_alloc+0xc4>)
   21384:	f005 fcf5 	bl	26d72 <assert_print>
   21388:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2138a:	481e      	ldr	r0, [pc, #120]	; (21404 <k_mem_slab_alloc+0xb8>)
   2138c:	f005 fcea 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   21390:	4628      	mov	r0, r5
   21392:	f000 f9e1 	bl	21758 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21396:	69a3      	ldr	r3, [r4, #24]
   21398:	b1b3      	cbz	r3, 213c8 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   2139a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   2139c:	681b      	ldr	r3, [r3, #0]
   2139e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   213a0:	69e3      	ldr	r3, [r4, #28]
   213a2:	3301      	adds	r3, #1
   213a4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   213a6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213a8:	4628      	mov	r0, r5
   213aa:	f000 f9c7 	bl	2173c <z_spin_unlock_valid>
   213ae:	bb18      	cbnz	r0, 213f8 <k_mem_slab_alloc+0xac>
   213b0:	23c2      	movs	r3, #194	; 0xc2
   213b2:	4a14      	ldr	r2, [pc, #80]	; (21404 <k_mem_slab_alloc+0xb8>)
   213b4:	4917      	ldr	r1, [pc, #92]	; (21414 <k_mem_slab_alloc+0xc8>)
   213b6:	4815      	ldr	r0, [pc, #84]	; (2140c <k_mem_slab_alloc+0xc0>)
   213b8:	f005 fcdb 	bl	26d72 <assert_print>
   213bc:	4629      	mov	r1, r5
   213be:	4816      	ldr	r0, [pc, #88]	; (21418 <k_mem_slab_alloc+0xcc>)
   213c0:	f005 fcd7 	bl	26d72 <assert_print>
   213c4:	21c2      	movs	r1, #194	; 0xc2
   213c6:	e7e0      	b.n	2138a <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   213c8:	ea58 0207 	orrs.w	r2, r8, r7
   213cc:	d103      	bne.n	213d6 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   213ce:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   213d2:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   213d4:	e7e8      	b.n	213a8 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   213d6:	4622      	mov	r2, r4
   213d8:	4649      	mov	r1, r9
   213da:	4628      	mov	r0, r5
   213dc:	e9cd 8700 	strd	r8, r7, [sp]
   213e0:	f001 ff36 	bl	23250 <z_pend_curr>
		if (result == 0) {
   213e4:	4604      	mov	r4, r0
   213e6:	b918      	cbnz	r0, 213f0 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   213e8:	4b0c      	ldr	r3, [pc, #48]	; (2141c <k_mem_slab_alloc+0xd0>)
   213ea:	689b      	ldr	r3, [r3, #8]
   213ec:	695b      	ldr	r3, [r3, #20]
   213ee:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   213f0:	4620      	mov	r0, r4
   213f2:	b003      	add	sp, #12
   213f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   213f8:	f389 8811 	msr	BASEPRI, r9
   213fc:	f3bf 8f6f 	isb	sy
	return result;
   21400:	e7f6      	b.n	213f0 <k_mem_slab_alloc+0xa4>
   21402:	bf00      	nop
   21404:	0002ebe3 	.word	0x0002ebe3
   21408:	0002ec3c 	.word	0x0002ec3c
   2140c:	0002dd81 	.word	0x0002dd81
   21410:	0002ec51 	.word	0x0002ec51
   21414:	0002ec10 	.word	0x0002ec10
   21418:	0002ec27 	.word	0x0002ec27
   2141c:	20021a20 	.word	0x20021a20

00021420 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21424:	4604      	mov	r4, r0
   21426:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21428:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2142c:	f04f 0320 	mov.w	r3, #32
   21430:	f3ef 8711 	mrs	r7, BASEPRI
   21434:	f383 8812 	msr	BASEPRI_MAX, r3
   21438:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2143c:	4628      	mov	r0, r5
   2143e:	f000 f96f 	bl	21720 <z_spin_lock_valid>
   21442:	b968      	cbnz	r0, 21460 <k_mem_slab_free+0x40>
   21444:	2394      	movs	r3, #148	; 0x94
   21446:	4a21      	ldr	r2, [pc, #132]	; (214cc <k_mem_slab_free+0xac>)
   21448:	4921      	ldr	r1, [pc, #132]	; (214d0 <k_mem_slab_free+0xb0>)
   2144a:	4822      	ldr	r0, [pc, #136]	; (214d4 <k_mem_slab_free+0xb4>)
   2144c:	f005 fc91 	bl	26d72 <assert_print>
   21450:	4629      	mov	r1, r5
   21452:	4821      	ldr	r0, [pc, #132]	; (214d8 <k_mem_slab_free+0xb8>)
   21454:	f005 fc8d 	bl	26d72 <assert_print>
   21458:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2145a:	481c      	ldr	r0, [pc, #112]	; (214cc <k_mem_slab_free+0xac>)
   2145c:	f005 fc82 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   21460:	4628      	mov	r0, r5
   21462:	f000 f979 	bl	21758 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   21466:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2146a:	f1b8 0f00 	cmp.w	r8, #0
   2146e:	d10f      	bne.n	21490 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   21470:	4620      	mov	r0, r4
   21472:	f002 f96b 	bl	2374c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   21476:	b158      	cbz	r0, 21490 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21478:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2147a:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2147e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   21480:	f001 fb8c 	bl	22b9c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   21484:	4639      	mov	r1, r7
   21486:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   21488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   2148c:	f001 bc12 	b.w	22cb4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   21490:	6833      	ldr	r3, [r6, #0]
   21492:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21494:	4628      	mov	r0, r5
   21496:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21498:	6833      	ldr	r3, [r6, #0]
   2149a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   2149c:	69e3      	ldr	r3, [r4, #28]
   2149e:	3b01      	subs	r3, #1
   214a0:	61e3      	str	r3, [r4, #28]
   214a2:	f000 f94b 	bl	2173c <z_spin_unlock_valid>
   214a6:	b958      	cbnz	r0, 214c0 <k_mem_slab_free+0xa0>
   214a8:	23c2      	movs	r3, #194	; 0xc2
   214aa:	4a08      	ldr	r2, [pc, #32]	; (214cc <k_mem_slab_free+0xac>)
   214ac:	490b      	ldr	r1, [pc, #44]	; (214dc <k_mem_slab_free+0xbc>)
   214ae:	4809      	ldr	r0, [pc, #36]	; (214d4 <k_mem_slab_free+0xb4>)
   214b0:	f005 fc5f 	bl	26d72 <assert_print>
   214b4:	4629      	mov	r1, r5
   214b6:	480a      	ldr	r0, [pc, #40]	; (214e0 <k_mem_slab_free+0xc0>)
   214b8:	f005 fc5b 	bl	26d72 <assert_print>
   214bc:	21c2      	movs	r1, #194	; 0xc2
   214be:	e7cc      	b.n	2145a <k_mem_slab_free+0x3a>
	__asm__ volatile(
   214c0:	f387 8811 	msr	BASEPRI, r7
   214c4:	f3bf 8f6f 	isb	sy
}
   214c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   214cc:	0002ebe3 	.word	0x0002ebe3
   214d0:	0002ec3c 	.word	0x0002ec3c
   214d4:	0002dd81 	.word	0x0002dd81
   214d8:	0002ec51 	.word	0x0002ec51
   214dc:	0002ec10 	.word	0x0002ec10
   214e0:	0002ec27 	.word	0x0002ec27

000214e4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   214e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   214e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   214e8:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   214ea:	2e0f      	cmp	r6, #15
   214ec:	d12a      	bne.n	21544 <z_setup_new_thread+0x60>
   214ee:	4821      	ldr	r0, [pc, #132]	; (21574 <z_setup_new_thread+0x90>)
   214f0:	4283      	cmp	r3, r0
   214f2:	d12b      	bne.n	2154c <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   214f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   214f8:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   214fc:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   214fe:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   21500:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   21502:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21504:	3207      	adds	r2, #7
   21506:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   2150a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   2150e:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   21510:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   21514:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   21516:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   2151a:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   2151c:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   2151e:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21520:	9202      	str	r2, [sp, #8]
   21522:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21524:	4620      	mov	r0, r4
   21526:	9201      	str	r2, [sp, #4]
   21528:	9a08      	ldr	r2, [sp, #32]
   2152a:	9200      	str	r2, [sp, #0]
   2152c:	4632      	mov	r2, r6
   2152e:	f7ef fbb3 	bl	10c98 <arch_new_thread>
	if (!_current) {
   21532:	4b11      	ldr	r3, [pc, #68]	; (21578 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   21534:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   21536:	689b      	ldr	r3, [r3, #8]
   21538:	b103      	cbz	r3, 2153c <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   2153a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   2153c:	4630      	mov	r0, r6
   2153e:	6763      	str	r3, [r4, #116]	; 0x74
   21540:	b004      	add	sp, #16
   21542:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   21544:	f106 0010 	add.w	r0, r6, #16
   21548:	281e      	cmp	r0, #30
   2154a:	d9d3      	bls.n	214f4 <z_setup_new_thread+0x10>
   2154c:	f44f 7306 	mov.w	r3, #536	; 0x218
   21550:	4a0a      	ldr	r2, [pc, #40]	; (2157c <z_setup_new_thread+0x98>)
   21552:	490b      	ldr	r1, [pc, #44]	; (21580 <z_setup_new_thread+0x9c>)
   21554:	480b      	ldr	r0, [pc, #44]	; (21584 <z_setup_new_thread+0xa0>)
   21556:	f005 fc0c 	bl	26d72 <assert_print>
   2155a:	4631      	mov	r1, r6
   2155c:	480a      	ldr	r0, [pc, #40]	; (21588 <z_setup_new_thread+0xa4>)
   2155e:	f06f 030f 	mvn.w	r3, #15
   21562:	220e      	movs	r2, #14
   21564:	f005 fc05 	bl	26d72 <assert_print>
   21568:	f44f 7106 	mov.w	r1, #536	; 0x218
   2156c:	4803      	ldr	r0, [pc, #12]	; (2157c <z_setup_new_thread+0x98>)
   2156e:	f005 fbf9 	bl	26d64 <assert_post_action>
   21572:	bf00      	nop
   21574:	00021769 	.word	0x00021769
   21578:	20021a20 	.word	0x20021a20
   2157c:	0003320d 	.word	0x0003320d
   21580:	00033230 	.word	0x00033230
   21584:	0002dd81 	.word	0x0002dd81
   21588:	000332b0 	.word	0x000332b0

0002158c <z_impl_k_thread_create>:
{
   2158c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2158e:	b087      	sub	sp, #28
   21590:	4604      	mov	r4, r0
   21592:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   21596:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2159a:	b175      	cbz	r5, 215ba <z_impl_k_thread_create+0x2e>
   2159c:	4919      	ldr	r1, [pc, #100]	; (21604 <z_impl_k_thread_create+0x78>)
   2159e:	f240 2387 	movw	r3, #647	; 0x287
   215a2:	4a19      	ldr	r2, [pc, #100]	; (21608 <z_impl_k_thread_create+0x7c>)
   215a4:	4819      	ldr	r0, [pc, #100]	; (2160c <z_impl_k_thread_create+0x80>)
   215a6:	f005 fbe4 	bl	26d72 <assert_print>
   215aa:	4819      	ldr	r0, [pc, #100]	; (21610 <z_impl_k_thread_create+0x84>)
   215ac:	f005 fbe1 	bl	26d72 <assert_print>
   215b0:	f240 2187 	movw	r1, #647	; 0x287
   215b4:	4814      	ldr	r0, [pc, #80]	; (21608 <z_impl_k_thread_create+0x7c>)
   215b6:	f005 fbd5 	bl	26d64 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   215ba:	9505      	str	r5, [sp, #20]
   215bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   215be:	9504      	str	r5, [sp, #16]
   215c0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   215c2:	9503      	str	r5, [sp, #12]
   215c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   215c6:	9502      	str	r5, [sp, #8]
   215c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   215ca:	9501      	str	r5, [sp, #4]
   215cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   215ce:	9500      	str	r5, [sp, #0]
   215d0:	f7ff ff88 	bl	214e4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   215d4:	f1b6 3fff 	cmp.w	r6, #4294967295
   215d8:	bf08      	it	eq
   215da:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   215de:	d005      	beq.n	215ec <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   215e0:	ea56 0307 	orrs.w	r3, r6, r7
   215e4:	d105      	bne.n	215f2 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   215e6:	4620      	mov	r0, r4
   215e8:	f001 fba6 	bl	22d38 <z_sched_start>
}
   215ec:	4620      	mov	r0, r4
   215ee:	b007      	add	sp, #28
   215f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   215f2:	463a      	mov	r2, r7
   215f4:	4633      	mov	r3, r6
   215f6:	4907      	ldr	r1, [pc, #28]	; (21614 <z_impl_k_thread_create+0x88>)
   215f8:	f104 0018 	add.w	r0, r4, #24
   215fc:	f002 fc16 	bl	23e2c <z_add_timeout>
   21600:	e7f4      	b.n	215ec <z_impl_k_thread_create+0x60>
   21602:	bf00      	nop
   21604:	000332e1 	.word	0x000332e1
   21608:	0003320d 	.word	0x0003320d
   2160c:	0002dd81 	.word	0x0002dd81
   21610:	000332f3 	.word	0x000332f3
   21614:	00023605 	.word	0x00023605

00021618 <z_init_static_threads>:
{
   21618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2161c:	4c39      	ldr	r4, [pc, #228]	; (21704 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2161e:	4d3a      	ldr	r5, [pc, #232]	; (21708 <z_init_static_threads+0xf0>)
{
   21620:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   21622:	42ac      	cmp	r4, r5
   21624:	4626      	mov	r6, r4
   21626:	d92a      	bls.n	2167e <z_init_static_threads+0x66>
   21628:	4938      	ldr	r1, [pc, #224]	; (2170c <z_init_static_threads+0xf4>)
   2162a:	f240 23ee 	movw	r3, #750	; 0x2ee
   2162e:	4a38      	ldr	r2, [pc, #224]	; (21710 <z_init_static_threads+0xf8>)
   21630:	4838      	ldr	r0, [pc, #224]	; (21714 <z_init_static_threads+0xfc>)
   21632:	f005 fb9e 	bl	26d72 <assert_print>
   21636:	4838      	ldr	r0, [pc, #224]	; (21718 <z_init_static_threads+0x100>)
   21638:	f005 fb9b 	bl	26d72 <assert_print>
   2163c:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   21640:	4833      	ldr	r0, [pc, #204]	; (21710 <z_init_static_threads+0xf8>)
   21642:	f005 fb8f 	bl	26d64 <assert_post_action>
		z_setup_new_thread(
   21646:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2164a:	9305      	str	r3, [sp, #20]
   2164c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   21650:	9304      	str	r3, [sp, #16]
   21652:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21656:	9303      	str	r3, [sp, #12]
   21658:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2165c:	9302      	str	r3, [sp, #8]
   2165e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   21662:	9301      	str	r3, [sp, #4]
   21664:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21668:	9300      	str	r3, [sp, #0]
   2166a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2166e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   21672:	f7ff ff37 	bl	214e4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21676:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2167a:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2167c:	e7d1      	b.n	21622 <z_init_static_threads+0xa>
   2167e:	42ae      	cmp	r6, r5
   21680:	f104 0430 	add.w	r4, r4, #48	; 0x30
   21684:	d3df      	bcc.n	21646 <z_init_static_threads+0x2e>
	k_sched_lock();
   21686:	f001 fba9 	bl	22ddc <k_sched_lock>
   2168a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2168e:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   21692:	4c1c      	ldr	r4, [pc, #112]	; (21704 <z_init_static_threads+0xec>)
   21694:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2171c <z_init_static_threads+0x104>
   21698:	42ac      	cmp	r4, r5
   2169a:	d92c      	bls.n	216f6 <z_init_static_threads+0xde>
   2169c:	491b      	ldr	r1, [pc, #108]	; (2170c <z_init_static_threads+0xf4>)
   2169e:	f240 330d 	movw	r3, #781	; 0x30d
   216a2:	4a1b      	ldr	r2, [pc, #108]	; (21710 <z_init_static_threads+0xf8>)
   216a4:	481b      	ldr	r0, [pc, #108]	; (21714 <z_init_static_threads+0xfc>)
   216a6:	f005 fb64 	bl	26d72 <assert_print>
   216aa:	481b      	ldr	r0, [pc, #108]	; (21718 <z_init_static_threads+0x100>)
   216ac:	f005 fb61 	bl	26d72 <assert_print>
   216b0:	f240 310d 	movw	r1, #781	; 0x30d
   216b4:	e7c4      	b.n	21640 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   216b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   216b8:	1c5a      	adds	r2, r3, #1
   216ba:	d00d      	beq.n	216d8 <z_init_static_threads+0xc0>
   216bc:	2100      	movs	r1, #0
   216be:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   216c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   216c4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   216c8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   216cc:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   216d0:	d104      	bne.n	216dc <z_init_static_threads+0xc4>
	z_sched_start(thread);
   216d2:	4640      	mov	r0, r8
   216d4:	f001 fb30 	bl	22d38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   216d8:	3430      	adds	r4, #48	; 0x30
   216da:	e7dd      	b.n	21698 <z_init_static_threads+0x80>
   216dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   216e0:	2300      	movs	r3, #0
   216e2:	f7e7 fc05 	bl	8ef0 <__aeabi_uldivmod>
   216e6:	4602      	mov	r2, r0
   216e8:	460b      	mov	r3, r1
   216ea:	f108 0018 	add.w	r0, r8, #24
   216ee:	4649      	mov	r1, r9
   216f0:	f002 fb9c 	bl	23e2c <z_add_timeout>
   216f4:	e7f0      	b.n	216d8 <z_init_static_threads+0xc0>
   216f6:	d3de      	bcc.n	216b6 <z_init_static_threads+0x9e>
}
   216f8:	b007      	add	sp, #28
   216fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   216fe:	f001 bbd9 	b.w	22eb4 <k_sched_unlock>
   21702:	bf00      	nop
   21704:	0002ca68 	.word	0x0002ca68
   21708:	0002cbb8 	.word	0x0002cbb8
   2170c:	00033318 	.word	0x00033318
   21710:	0003320d 	.word	0x0003320d
   21714:	0002dd81 	.word	0x0002dd81
   21718:	0002eee2 	.word	0x0002eee2
   2171c:	00023605 	.word	0x00023605

00021720 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   21720:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   21722:	b138      	cbz	r0, 21734 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   21724:	4b04      	ldr	r3, [pc, #16]	; (21738 <z_spin_lock_valid+0x18>)
   21726:	f000 0003 	and.w	r0, r0, #3
   2172a:	7d1b      	ldrb	r3, [r3, #20]
   2172c:	1ac0      	subs	r0, r0, r3
   2172e:	bf18      	it	ne
   21730:	2001      	movne	r0, #1
   21732:	4770      	bx	lr
			return false;
		}
	}
	return true;
   21734:	2001      	movs	r0, #1
}
   21736:	4770      	bx	lr
   21738:	20021a20 	.word	0x20021a20

0002173c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2173c:	4a05      	ldr	r2, [pc, #20]	; (21754 <z_spin_unlock_valid+0x18>)
{
   2173e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21740:	7d11      	ldrb	r1, [r2, #20]
   21742:	6892      	ldr	r2, [r2, #8]
   21744:	430a      	orrs	r2, r1
   21746:	6801      	ldr	r1, [r0, #0]
   21748:	2000      	movs	r0, #0
   2174a:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   2174c:	bf04      	itt	eq
   2174e:	6018      	streq	r0, [r3, #0]
	return true;
   21750:	2001      	moveq	r0, #1
}
   21752:	4770      	bx	lr
   21754:	20021a20 	.word	0x20021a20

00021758 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   21758:	4b02      	ldr	r3, [pc, #8]	; (21764 <z_spin_lock_set_owner+0xc>)
   2175a:	7d1a      	ldrb	r2, [r3, #20]
   2175c:	689b      	ldr	r3, [r3, #8]
   2175e:	4313      	orrs	r3, r2
   21760:	6003      	str	r3, [r0, #0]
}
   21762:	4770      	bx	lr
   21764:	20021a20 	.word	0x20021a20

00021768 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   21768:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2176a:	4c13      	ldr	r4, [pc, #76]	; (217b8 <idle+0x50>)
   2176c:	68a3      	ldr	r3, [r4, #8]
   2176e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   21772:	2b00      	cmp	r3, #0
   21774:	db10      	blt.n	21798 <idle+0x30>
   21776:	4d11      	ldr	r5, [pc, #68]	; (217bc <idle+0x54>)
	__asm__ volatile(
   21778:	f04f 0220 	mov.w	r2, #32
   2177c:	f3ef 8311 	mrs	r3, BASEPRI
   21780:	f382 8812 	msr	BASEPRI_MAX, r2
   21784:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   21788:	f002 fc62 	bl	24050 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2178c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2178e:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   21790:	b963      	cbnz	r3, 217ac <idle+0x44>
	arch_cpu_idle();
   21792:	f7ef f927 	bl	109e4 <arch_cpu_idle>
}
   21796:	e7ef      	b.n	21778 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   21798:	4909      	ldr	r1, [pc, #36]	; (217c0 <idle+0x58>)
   2179a:	480a      	ldr	r0, [pc, #40]	; (217c4 <idle+0x5c>)
   2179c:	2327      	movs	r3, #39	; 0x27
   2179e:	4a0a      	ldr	r2, [pc, #40]	; (217c8 <idle+0x60>)
   217a0:	f005 fae7 	bl	26d72 <assert_print>
   217a4:	2127      	movs	r1, #39	; 0x27
   217a6:	4808      	ldr	r0, [pc, #32]	; (217c8 <idle+0x60>)
   217a8:	f005 fadc 	bl	26d64 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   217ac:	f7ee fe52 	bl	10454 <pm_system_suspend>
   217b0:	2800      	cmp	r0, #0
   217b2:	d1e1      	bne.n	21778 <idle+0x10>
   217b4:	e7ed      	b.n	21792 <idle+0x2a>
   217b6:	bf00      	nop
   217b8:	20021a20 	.word	0x20021a20
   217bc:	200227bf 	.word	0x200227bf
   217c0:	00033366 	.word	0x00033366
   217c4:	0002dd81 	.word	0x0002dd81
   217c8:	00033345 	.word	0x00033345

000217cc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   217cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   217d0:	4604      	mov	r4, r0
   217d2:	4617      	mov	r7, r2
   217d4:	461e      	mov	r6, r3
   217d6:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   217da:	b165      	cbz	r5, 217f6 <z_impl_k_mutex_lock+0x2a>
   217dc:	4958      	ldr	r1, [pc, #352]	; (21940 <z_impl_k_mutex_lock+0x174>)
   217de:	2365      	movs	r3, #101	; 0x65
   217e0:	4a58      	ldr	r2, [pc, #352]	; (21944 <z_impl_k_mutex_lock+0x178>)
   217e2:	4859      	ldr	r0, [pc, #356]	; (21948 <z_impl_k_mutex_lock+0x17c>)
   217e4:	f005 fac5 	bl	26d72 <assert_print>
   217e8:	4858      	ldr	r0, [pc, #352]	; (2194c <z_impl_k_mutex_lock+0x180>)
   217ea:	f005 fac2 	bl	26d72 <assert_print>
   217ee:	2165      	movs	r1, #101	; 0x65
   217f0:	4854      	ldr	r0, [pc, #336]	; (21944 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217f2:	f005 fab7 	bl	26d64 <assert_post_action>
   217f6:	f04f 0320 	mov.w	r3, #32
   217fa:	f3ef 8811 	mrs	r8, BASEPRI
   217fe:	f383 8812 	msr	BASEPRI_MAX, r3
   21802:	f3bf 8f6f 	isb	sy
   21806:	4852      	ldr	r0, [pc, #328]	; (21950 <z_impl_k_mutex_lock+0x184>)
   21808:	f7ff ff8a 	bl	21720 <z_spin_lock_valid>
   2180c:	b960      	cbnz	r0, 21828 <z_impl_k_mutex_lock+0x5c>
   2180e:	2394      	movs	r3, #148	; 0x94
   21810:	4a50      	ldr	r2, [pc, #320]	; (21954 <z_impl_k_mutex_lock+0x188>)
   21812:	4951      	ldr	r1, [pc, #324]	; (21958 <z_impl_k_mutex_lock+0x18c>)
   21814:	484c      	ldr	r0, [pc, #304]	; (21948 <z_impl_k_mutex_lock+0x17c>)
   21816:	f005 faac 	bl	26d72 <assert_print>
   2181a:	494d      	ldr	r1, [pc, #308]	; (21950 <z_impl_k_mutex_lock+0x184>)
   2181c:	484f      	ldr	r0, [pc, #316]	; (2195c <z_impl_k_mutex_lock+0x190>)
   2181e:	f005 faa8 	bl	26d72 <assert_print>
   21822:	2194      	movs	r1, #148	; 0x94
   21824:	484b      	ldr	r0, [pc, #300]	; (21954 <z_impl_k_mutex_lock+0x188>)
   21826:	e7e4      	b.n	217f2 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   21828:	4849      	ldr	r0, [pc, #292]	; (21950 <z_impl_k_mutex_lock+0x184>)
   2182a:	f7ff ff95 	bl	21758 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2182e:	68e3      	ldr	r3, [r4, #12]
   21830:	4a4b      	ldr	r2, [pc, #300]	; (21960 <z_impl_k_mutex_lock+0x194>)
   21832:	b19b      	cbz	r3, 2185c <z_impl_k_mutex_lock+0x90>
   21834:	68a0      	ldr	r0, [r4, #8]
   21836:	6891      	ldr	r1, [r2, #8]
   21838:	4288      	cmp	r0, r1
   2183a:	d027      	beq.n	2188c <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2183c:	ea57 0306 	orrs.w	r3, r7, r6
   21840:	d12c      	bne.n	2189c <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21842:	4843      	ldr	r0, [pc, #268]	; (21950 <z_impl_k_mutex_lock+0x184>)
   21844:	f7ff ff7a 	bl	2173c <z_spin_unlock_valid>
   21848:	b1a0      	cbz	r0, 21874 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   2184a:	f388 8811 	msr	BASEPRI, r8
   2184e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21852:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   21856:	b002      	add	sp, #8
   21858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2185c:	6891      	ldr	r1, [r2, #8]
   2185e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   21862:	3301      	adds	r3, #1
   21864:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   21866:	6893      	ldr	r3, [r2, #8]
   21868:	4839      	ldr	r0, [pc, #228]	; (21950 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2186a:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2186c:	60a3      	str	r3, [r4, #8]
   2186e:	f7ff ff65 	bl	2173c <z_spin_unlock_valid>
   21872:	b968      	cbnz	r0, 21890 <z_impl_k_mutex_lock+0xc4>
   21874:	23c2      	movs	r3, #194	; 0xc2
   21876:	4a37      	ldr	r2, [pc, #220]	; (21954 <z_impl_k_mutex_lock+0x188>)
   21878:	493a      	ldr	r1, [pc, #232]	; (21964 <z_impl_k_mutex_lock+0x198>)
   2187a:	4833      	ldr	r0, [pc, #204]	; (21948 <z_impl_k_mutex_lock+0x17c>)
   2187c:	f005 fa79 	bl	26d72 <assert_print>
   21880:	4933      	ldr	r1, [pc, #204]	; (21950 <z_impl_k_mutex_lock+0x184>)
   21882:	4839      	ldr	r0, [pc, #228]	; (21968 <z_impl_k_mutex_lock+0x19c>)
   21884:	f005 fa75 	bl	26d72 <assert_print>
   21888:	21c2      	movs	r1, #194	; 0xc2
   2188a:	e7cb      	b.n	21824 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   2188c:	6921      	ldr	r1, [r4, #16]
   2188e:	e7e8      	b.n	21862 <z_impl_k_mutex_lock+0x96>
   21890:	f388 8811 	msr	BASEPRI, r8
   21894:	f3bf 8f6f 	isb	sy
		return 0;
   21898:	2000      	movs	r0, #0
   2189a:	e7dc      	b.n	21856 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2189c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   218a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   218a4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   218a8:	4299      	cmp	r1, r3
   218aa:	bfa8      	it	ge
   218ac:	4619      	movge	r1, r3
   218ae:	4291      	cmp	r1, r2
   218b0:	bfb8      	it	lt
   218b2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   218b4:	428b      	cmp	r3, r1
   218b6:	dd02      	ble.n	218be <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   218b8:	f00a f881 	bl	2b9be <adjust_owner_prio.isra.0>
   218bc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   218be:	4622      	mov	r2, r4
   218c0:	4641      	mov	r1, r8
   218c2:	e9cd 7600 	strd	r7, r6, [sp]
   218c6:	4822      	ldr	r0, [pc, #136]	; (21950 <z_impl_k_mutex_lock+0x184>)
   218c8:	f001 fcc2 	bl	23250 <z_pend_curr>
	if (got_mutex == 0) {
   218cc:	2800      	cmp	r0, #0
   218ce:	d0e3      	beq.n	21898 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   218d0:	f04f 0320 	mov.w	r3, #32
   218d4:	f3ef 8611 	mrs	r6, BASEPRI
   218d8:	f383 8812 	msr	BASEPRI_MAX, r3
   218dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218e0:	481b      	ldr	r0, [pc, #108]	; (21950 <z_impl_k_mutex_lock+0x184>)
   218e2:	f7ff ff1d 	bl	21720 <z_spin_lock_valid>
   218e6:	2800      	cmp	r0, #0
   218e8:	d091      	beq.n	2180e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   218ea:	4819      	ldr	r0, [pc, #100]	; (21950 <z_impl_k_mutex_lock+0x184>)
   218ec:	f7ff ff34 	bl	21758 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   218f0:	68a0      	ldr	r0, [r4, #8]
   218f2:	b1c0      	cbz	r0, 21926 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   218f4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   218f6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218f8:	429c      	cmp	r4, r3
   218fa:	d00a      	beq.n	21912 <z_impl_k_mutex_lock+0x146>
   218fc:	b14b      	cbz	r3, 21912 <z_impl_k_mutex_lock+0x146>
   218fe:	f993 300e 	ldrsb.w	r3, [r3, #14]
   21902:	4299      	cmp	r1, r3
   21904:	bfa8      	it	ge
   21906:	4619      	movge	r1, r3
   21908:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2190c:	4299      	cmp	r1, r3
   2190e:	bfb8      	it	lt
   21910:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   21912:	f00a f854 	bl	2b9be <adjust_owner_prio.isra.0>
   21916:	b130      	cbz	r0, 21926 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   21918:	4631      	mov	r1, r6
   2191a:	480d      	ldr	r0, [pc, #52]	; (21950 <z_impl_k_mutex_lock+0x184>)
   2191c:	f001 f9ca 	bl	22cb4 <z_reschedule>
	return -EAGAIN;
   21920:	f06f 000a 	mvn.w	r0, #10
   21924:	e797      	b.n	21856 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   21926:	2d00      	cmp	r5, #0
   21928:	d1f6      	bne.n	21918 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2192a:	4809      	ldr	r0, [pc, #36]	; (21950 <z_impl_k_mutex_lock+0x184>)
   2192c:	f7ff ff06 	bl	2173c <z_spin_unlock_valid>
   21930:	2800      	cmp	r0, #0
   21932:	d09f      	beq.n	21874 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   21934:	f386 8811 	msr	BASEPRI, r6
   21938:	f3bf 8f6f 	isb	sy
   2193c:	e7f0      	b.n	21920 <z_impl_k_mutex_lock+0x154>
   2193e:	bf00      	nop
   21940:	000332e1 	.word	0x000332e1
   21944:	0003338e 	.word	0x0003338e
   21948:	0002dd81 	.word	0x0002dd81
   2194c:	000333b0 	.word	0x000333b0
   21950:	20021a48 	.word	0x20021a48
   21954:	0002ebe3 	.word	0x0002ebe3
   21958:	0002ec3c 	.word	0x0002ec3c
   2195c:	0002ec51 	.word	0x0002ec51
   21960:	20021a20 	.word	0x20021a20
   21964:	0002ec10 	.word	0x0002ec10
   21968:	0002ec27 	.word	0x0002ec27

0002196c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2196c:	b570      	push	{r4, r5, r6, lr}
   2196e:	4604      	mov	r4, r0
   21970:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   21974:	b166      	cbz	r6, 21990 <z_impl_k_mutex_unlock+0x24>
   21976:	4938      	ldr	r1, [pc, #224]	; (21a58 <z_impl_k_mutex_unlock+0xec>)
   21978:	23cd      	movs	r3, #205	; 0xcd
   2197a:	4a38      	ldr	r2, [pc, #224]	; (21a5c <z_impl_k_mutex_unlock+0xf0>)
   2197c:	4838      	ldr	r0, [pc, #224]	; (21a60 <z_impl_k_mutex_unlock+0xf4>)
   2197e:	f005 f9f8 	bl	26d72 <assert_print>
   21982:	4838      	ldr	r0, [pc, #224]	; (21a64 <z_impl_k_mutex_unlock+0xf8>)
   21984:	f005 f9f5 	bl	26d72 <assert_print>
   21988:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2198a:	4834      	ldr	r0, [pc, #208]	; (21a5c <z_impl_k_mutex_unlock+0xf0>)
   2198c:	f005 f9ea 	bl	26d64 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   21990:	6883      	ldr	r3, [r0, #8]
   21992:	2b00      	cmp	r3, #0
   21994:	d059      	beq.n	21a4a <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   21996:	4a34      	ldr	r2, [pc, #208]	; (21a68 <z_impl_k_mutex_unlock+0xfc>)
   21998:	6892      	ldr	r2, [r2, #8]
   2199a:	4293      	cmp	r3, r2
   2199c:	d158      	bne.n	21a50 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2199e:	68c3      	ldr	r3, [r0, #12]
   219a0:	b93b      	cbnz	r3, 219b2 <z_impl_k_mutex_unlock+0x46>
   219a2:	4932      	ldr	r1, [pc, #200]	; (21a6c <z_impl_k_mutex_unlock+0x100>)
   219a4:	23e5      	movs	r3, #229	; 0xe5
   219a6:	4a2d      	ldr	r2, [pc, #180]	; (21a5c <z_impl_k_mutex_unlock+0xf0>)
   219a8:	482d      	ldr	r0, [pc, #180]	; (21a60 <z_impl_k_mutex_unlock+0xf4>)
   219aa:	f005 f9e2 	bl	26d72 <assert_print>
   219ae:	21e5      	movs	r1, #229	; 0xe5
   219b0:	e7eb      	b.n	2198a <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   219b2:	2b01      	cmp	r3, #1
   219b4:	d003      	beq.n	219be <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   219b6:	3b01      	subs	r3, #1
   219b8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   219ba:	2000      	movs	r0, #0
}
   219bc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   219be:	f04f 0320 	mov.w	r3, #32
   219c2:	f3ef 8511 	mrs	r5, BASEPRI
   219c6:	f383 8812 	msr	BASEPRI_MAX, r3
   219ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219ce:	4828      	ldr	r0, [pc, #160]	; (21a70 <z_impl_k_mutex_unlock+0x104>)
   219d0:	f7ff fea6 	bl	21720 <z_spin_lock_valid>
   219d4:	b960      	cbnz	r0, 219f0 <z_impl_k_mutex_unlock+0x84>
   219d6:	2394      	movs	r3, #148	; 0x94
   219d8:	4a26      	ldr	r2, [pc, #152]	; (21a74 <z_impl_k_mutex_unlock+0x108>)
   219da:	4927      	ldr	r1, [pc, #156]	; (21a78 <z_impl_k_mutex_unlock+0x10c>)
   219dc:	4820      	ldr	r0, [pc, #128]	; (21a60 <z_impl_k_mutex_unlock+0xf4>)
   219de:	f005 f9c8 	bl	26d72 <assert_print>
   219e2:	4923      	ldr	r1, [pc, #140]	; (21a70 <z_impl_k_mutex_unlock+0x104>)
   219e4:	4825      	ldr	r0, [pc, #148]	; (21a7c <z_impl_k_mutex_unlock+0x110>)
   219e6:	f005 f9c4 	bl	26d72 <assert_print>
   219ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219ec:	4821      	ldr	r0, [pc, #132]	; (21a74 <z_impl_k_mutex_unlock+0x108>)
   219ee:	e7cd      	b.n	2198c <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   219f0:	481f      	ldr	r0, [pc, #124]	; (21a70 <z_impl_k_mutex_unlock+0x104>)
   219f2:	f7ff feb1 	bl	21758 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   219f6:	6921      	ldr	r1, [r4, #16]
   219f8:	68a0      	ldr	r0, [r4, #8]
   219fa:	f009 ffe0 	bl	2b9be <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   219fe:	4620      	mov	r0, r4
   21a00:	f001 fea4 	bl	2374c <z_unpend_first_thread>
	mutex->owner = new_owner;
   21a04:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   21a06:	b150      	cbz	r0, 21a1e <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   21a08:	f990 200e 	ldrsb.w	r2, [r0, #14]
   21a0c:	6122      	str	r2, [r4, #16]
   21a0e:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   21a10:	f001 f8c4 	bl	22b9c <z_ready_thread>
		z_reschedule(&lock, key);
   21a14:	4629      	mov	r1, r5
   21a16:	4816      	ldr	r0, [pc, #88]	; (21a70 <z_impl_k_mutex_unlock+0x104>)
   21a18:	f001 f94c 	bl	22cb4 <z_reschedule>
   21a1c:	e7cd      	b.n	219ba <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   21a1e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a20:	4813      	ldr	r0, [pc, #76]	; (21a70 <z_impl_k_mutex_unlock+0x104>)
   21a22:	f7ff fe8b 	bl	2173c <z_spin_unlock_valid>
   21a26:	b958      	cbnz	r0, 21a40 <z_impl_k_mutex_unlock+0xd4>
   21a28:	23c2      	movs	r3, #194	; 0xc2
   21a2a:	4a12      	ldr	r2, [pc, #72]	; (21a74 <z_impl_k_mutex_unlock+0x108>)
   21a2c:	4914      	ldr	r1, [pc, #80]	; (21a80 <z_impl_k_mutex_unlock+0x114>)
   21a2e:	480c      	ldr	r0, [pc, #48]	; (21a60 <z_impl_k_mutex_unlock+0xf4>)
   21a30:	f005 f99f 	bl	26d72 <assert_print>
   21a34:	490e      	ldr	r1, [pc, #56]	; (21a70 <z_impl_k_mutex_unlock+0x104>)
   21a36:	4813      	ldr	r0, [pc, #76]	; (21a84 <z_impl_k_mutex_unlock+0x118>)
   21a38:	f005 f99b 	bl	26d72 <assert_print>
   21a3c:	21c2      	movs	r1, #194	; 0xc2
   21a3e:	e7d5      	b.n	219ec <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   21a40:	f385 8811 	msr	BASEPRI, r5
   21a44:	f3bf 8f6f 	isb	sy
   21a48:	e7b7      	b.n	219ba <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   21a4a:	f06f 0015 	mvn.w	r0, #21
   21a4e:	e7b5      	b.n	219bc <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   21a50:	f04f 30ff 	mov.w	r0, #4294967295
   21a54:	e7b2      	b.n	219bc <z_impl_k_mutex_unlock+0x50>
   21a56:	bf00      	nop
   21a58:	000332e1 	.word	0x000332e1
   21a5c:	0003338e 	.word	0x0003338e
   21a60:	0002dd81 	.word	0x0002dd81
   21a64:	000333b0 	.word	0x000333b0
   21a68:	20021a20 	.word	0x20021a20
   21a6c:	000333d5 	.word	0x000333d5
   21a70:	20021a48 	.word	0x20021a48
   21a74:	0002ebe3 	.word	0x0002ebe3
   21a78:	0002ec3c 	.word	0x0002ec3c
   21a7c:	0002ec51 	.word	0x0002ec51
   21a80:	0002ec10 	.word	0x0002ec10
   21a84:	0002ec27 	.word	0x0002ec27

00021a88 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   21a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a8c:	4604      	mov	r4, r0
   21a8e:	460e      	mov	r6, r1
   21a90:	4690      	mov	r8, r2
   21a92:	4699      	mov	r9, r3
   21a94:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21a98:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21a9c:	f04f 0320 	mov.w	r3, #32
   21aa0:	f3ef 8711 	mrs	r7, BASEPRI
   21aa4:	f383 8812 	msr	BASEPRI_MAX, r3
   21aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21aac:	4628      	mov	r0, r5
   21aae:	f7ff fe37 	bl	21720 <z_spin_lock_valid>
   21ab2:	b968      	cbnz	r0, 21ad0 <queue_insert+0x48>
   21ab4:	2394      	movs	r3, #148	; 0x94
   21ab6:	4a3b      	ldr	r2, [pc, #236]	; (21ba4 <queue_insert+0x11c>)
   21ab8:	493b      	ldr	r1, [pc, #236]	; (21ba8 <queue_insert+0x120>)
   21aba:	483c      	ldr	r0, [pc, #240]	; (21bac <queue_insert+0x124>)
   21abc:	f005 f959 	bl	26d72 <assert_print>
   21ac0:	4629      	mov	r1, r5
   21ac2:	483b      	ldr	r0, [pc, #236]	; (21bb0 <queue_insert+0x128>)
   21ac4:	f005 f955 	bl	26d72 <assert_print>
   21ac8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21aca:	4836      	ldr	r0, [pc, #216]	; (21ba4 <queue_insert+0x11c>)
   21acc:	f005 f94a 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ad0:	4628      	mov	r0, r5
   21ad2:	f7ff fe41 	bl	21758 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   21ad6:	f1ba 0f00 	cmp.w	sl, #0
   21ada:	d000      	beq.n	21ade <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   21adc:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   21ade:	f104 000c 	add.w	r0, r4, #12
   21ae2:	f001 fe33 	bl	2374c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   21ae6:	b158      	cbz	r0, 21b00 <queue_insert+0x78>
   21ae8:	2300      	movs	r3, #0
   21aea:	f8c0 8014 	str.w	r8, [r0, #20]
   21aee:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   21af0:	f001 f854 	bl	22b9c <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   21af4:	4628      	mov	r0, r5
   21af6:	4639      	mov	r1, r7
   21af8:	f001 f8dc 	bl	22cb4 <z_reschedule>
		return 0;
   21afc:	2000      	movs	r0, #0
   21afe:	e01c      	b.n	21b3a <queue_insert+0xb2>
	if (alloc) {
   21b00:	f1b9 0f00 	cmp.w	r9, #0
   21b04:	d02b      	beq.n	21b5e <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   21b06:	2108      	movs	r1, #8
   21b08:	f003 f8da 	bl	24cc0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   21b0c:	b9b8      	cbnz	r0, 21b3e <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b0e:	4628      	mov	r0, r5
   21b10:	f7ff fe14 	bl	2173c <z_spin_unlock_valid>
   21b14:	b958      	cbnz	r0, 21b2e <queue_insert+0xa6>
   21b16:	23c2      	movs	r3, #194	; 0xc2
   21b18:	4a22      	ldr	r2, [pc, #136]	; (21ba4 <queue_insert+0x11c>)
   21b1a:	4926      	ldr	r1, [pc, #152]	; (21bb4 <queue_insert+0x12c>)
   21b1c:	4823      	ldr	r0, [pc, #140]	; (21bac <queue_insert+0x124>)
   21b1e:	f005 f928 	bl	26d72 <assert_print>
   21b22:	4629      	mov	r1, r5
   21b24:	4824      	ldr	r0, [pc, #144]	; (21bb8 <queue_insert+0x130>)
   21b26:	f005 f924 	bl	26d72 <assert_print>
   21b2a:	21c2      	movs	r1, #194	; 0xc2
   21b2c:	e7cd      	b.n	21aca <queue_insert+0x42>
	__asm__ volatile(
   21b2e:	f387 8811 	msr	BASEPRI, r7
   21b32:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   21b36:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   21b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   21b3e:	2201      	movs	r2, #1
		anode->data = data;
   21b40:	f8c0 8004 	str.w	r8, [r0, #4]
   21b44:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21b46:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b48:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   21b4c:	b95e      	cbnz	r6, 21b66 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b4e:	6822      	ldr	r2, [r4, #0]
   21b50:	430a      	orrs	r2, r1
   21b52:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21b54:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   21b56:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21b58:	b96a      	cbnz	r2, 21b76 <queue_insert+0xee>
	list->tail = node;
   21b5a:	6060      	str	r0, [r4, #4]
}
   21b5c:	e00b      	b.n	21b76 <queue_insert+0xee>
}
   21b5e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   21b60:	f8c8 9000 	str.w	r9, [r8]
}
   21b64:	e7ef      	b.n	21b46 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21b66:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   21b68:	2a03      	cmp	r2, #3
   21b6a:	d810      	bhi.n	21b8e <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b6c:	6001      	str	r1, [r0, #0]
	return list->tail;
   21b6e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   21b70:	b939      	cbnz	r1, 21b82 <queue_insert+0xfa>
	list->head = node;
   21b72:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21b76:	2104      	movs	r1, #4
   21b78:	f104 0014 	add.w	r0, r4, #20
   21b7c:	f00a f8e1 	bl	2bd42 <z_handle_obj_poll_events>
   21b80:	e7b8      	b.n	21af4 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21b82:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b84:	f002 0203 	and.w	r2, r2, #3
   21b88:	4302      	orrs	r2, r0
   21b8a:	600a      	str	r2, [r1, #0]
   21b8c:	e7e5      	b.n	21b5a <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21b8e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b92:	430a      	orrs	r2, r1
   21b94:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21b96:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b98:	f002 0203 	and.w	r2, r2, #3
   21b9c:	ea40 0302 	orr.w	r3, r0, r2
   21ba0:	6033      	str	r3, [r6, #0]
}
   21ba2:	e7e8      	b.n	21b76 <queue_insert+0xee>
   21ba4:	0002ebe3 	.word	0x0002ebe3
   21ba8:	0002ec3c 	.word	0x0002ec3c
   21bac:	0002dd81 	.word	0x0002dd81
   21bb0:	0002ec51 	.word	0x0002ec51
   21bb4:	0002ec10 	.word	0x0002ec10
   21bb8:	0002ec27 	.word	0x0002ec27

00021bbc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   21bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21bc0:	4606      	mov	r6, r0
   21bc2:	4691      	mov	r9, r2
   21bc4:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21bc6:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21bca:	f04f 0320 	mov.w	r3, #32
   21bce:	f3ef 8811 	mrs	r8, BASEPRI
   21bd2:	f383 8812 	msr	BASEPRI_MAX, r3
   21bd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bda:	4628      	mov	r0, r5
   21bdc:	f7ff fda0 	bl	21720 <z_spin_lock_valid>
   21be0:	b968      	cbnz	r0, 21bfe <z_impl_k_queue_get+0x42>
   21be2:	2394      	movs	r3, #148	; 0x94
   21be4:	4a23      	ldr	r2, [pc, #140]	; (21c74 <z_impl_k_queue_get+0xb8>)
   21be6:	4924      	ldr	r1, [pc, #144]	; (21c78 <z_impl_k_queue_get+0xbc>)
   21be8:	4824      	ldr	r0, [pc, #144]	; (21c7c <z_impl_k_queue_get+0xc0>)
   21bea:	f005 f8c2 	bl	26d72 <assert_print>
   21bee:	4629      	mov	r1, r5
   21bf0:	4823      	ldr	r0, [pc, #140]	; (21c80 <z_impl_k_queue_get+0xc4>)
   21bf2:	f005 f8be 	bl	26d72 <assert_print>
   21bf6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21bf8:	481e      	ldr	r0, [pc, #120]	; (21c74 <z_impl_k_queue_get+0xb8>)
   21bfa:	f005 f8b3 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   21bfe:	4628      	mov	r0, r5
   21c00:	f7ff fdaa 	bl	21758 <z_spin_lock_set_owner>
	return list->head;
   21c04:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   21c06:	b1ec      	cbz	r4, 21c44 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21c08:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21c0a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21c0c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21c10:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   21c12:	4620      	mov	r0, r4
   21c14:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   21c18:	6033      	str	r3, [r6, #0]
	list->tail = node;
   21c1a:	bf08      	it	eq
   21c1c:	6073      	streq	r3, [r6, #4]
   21c1e:	f009 fedd 	bl	2b9dc <z_queue_node_peek>
   21c22:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c24:	4628      	mov	r0, r5
   21c26:	f7ff fd89 	bl	2173c <z_spin_unlock_valid>
   21c2a:	b9d8      	cbnz	r0, 21c64 <z_impl_k_queue_get+0xa8>
   21c2c:	23c2      	movs	r3, #194	; 0xc2
   21c2e:	4a11      	ldr	r2, [pc, #68]	; (21c74 <z_impl_k_queue_get+0xb8>)
   21c30:	4914      	ldr	r1, [pc, #80]	; (21c84 <z_impl_k_queue_get+0xc8>)
   21c32:	4812      	ldr	r0, [pc, #72]	; (21c7c <z_impl_k_queue_get+0xc0>)
   21c34:	f005 f89d 	bl	26d72 <assert_print>
   21c38:	4629      	mov	r1, r5
   21c3a:	4813      	ldr	r0, [pc, #76]	; (21c88 <z_impl_k_queue_get+0xcc>)
   21c3c:	f005 f899 	bl	26d72 <assert_print>
   21c40:	21c2      	movs	r1, #194	; 0xc2
   21c42:	e7d9      	b.n	21bf8 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21c44:	ea59 0307 	orrs.w	r3, r9, r7
   21c48:	d0ec      	beq.n	21c24 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   21c4a:	4641      	mov	r1, r8
   21c4c:	4628      	mov	r0, r5
   21c4e:	e9cd 9700 	strd	r9, r7, [sp]
   21c52:	f106 020c 	add.w	r2, r6, #12
   21c56:	f001 fafb 	bl	23250 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   21c5a:	b938      	cbnz	r0, 21c6c <z_impl_k_queue_get+0xb0>
   21c5c:	4b0b      	ldr	r3, [pc, #44]	; (21c8c <z_impl_k_queue_get+0xd0>)
   21c5e:	689b      	ldr	r3, [r3, #8]
   21c60:	695c      	ldr	r4, [r3, #20]
   21c62:	e003      	b.n	21c6c <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   21c64:	f388 8811 	msr	BASEPRI, r8
   21c68:	f3bf 8f6f 	isb	sy
}
   21c6c:	4620      	mov	r0, r4
   21c6e:	b003      	add	sp, #12
   21c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21c74:	0002ebe3 	.word	0x0002ebe3
   21c78:	0002ec3c 	.word	0x0002ec3c
   21c7c:	0002dd81 	.word	0x0002dd81
   21c80:	0002ec51 	.word	0x0002ec51
   21c84:	0002ec10 	.word	0x0002ec10
   21c88:	0002ec27 	.word	0x0002ec27
   21c8c:	20021a20 	.word	0x20021a20

00021c90 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21c90:	b538      	push	{r3, r4, r5, lr}
   21c92:	4604      	mov	r4, r0
	__asm__ volatile(
   21c94:	f04f 0320 	mov.w	r3, #32
   21c98:	f3ef 8511 	mrs	r5, BASEPRI
   21c9c:	f383 8812 	msr	BASEPRI_MAX, r3
   21ca0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ca4:	4817      	ldr	r0, [pc, #92]	; (21d04 <z_impl_k_sem_give+0x74>)
   21ca6:	f7ff fd3b 	bl	21720 <z_spin_lock_valid>
   21caa:	b968      	cbnz	r0, 21cc8 <z_impl_k_sem_give+0x38>
   21cac:	2394      	movs	r3, #148	; 0x94
   21cae:	4a16      	ldr	r2, [pc, #88]	; (21d08 <z_impl_k_sem_give+0x78>)
   21cb0:	4916      	ldr	r1, [pc, #88]	; (21d0c <z_impl_k_sem_give+0x7c>)
   21cb2:	4817      	ldr	r0, [pc, #92]	; (21d10 <z_impl_k_sem_give+0x80>)
   21cb4:	f005 f85d 	bl	26d72 <assert_print>
   21cb8:	4912      	ldr	r1, [pc, #72]	; (21d04 <z_impl_k_sem_give+0x74>)
   21cba:	4816      	ldr	r0, [pc, #88]	; (21d14 <z_impl_k_sem_give+0x84>)
   21cbc:	f005 f859 	bl	26d72 <assert_print>
   21cc0:	2194      	movs	r1, #148	; 0x94
   21cc2:	4811      	ldr	r0, [pc, #68]	; (21d08 <z_impl_k_sem_give+0x78>)
   21cc4:	f005 f84e 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   21cc8:	480e      	ldr	r0, [pc, #56]	; (21d04 <z_impl_k_sem_give+0x74>)
   21cca:	f7ff fd45 	bl	21758 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21cce:	4620      	mov	r0, r4
   21cd0:	f001 fd3c 	bl	2374c <z_unpend_first_thread>

	if (thread != NULL) {
   21cd4:	b148      	cbz	r0, 21cea <z_impl_k_sem_give+0x5a>
   21cd6:	2200      	movs	r2, #0
   21cd8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21cda:	f000 ff5f 	bl	22b9c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21cde:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21ce4:	4807      	ldr	r0, [pc, #28]	; (21d04 <z_impl_k_sem_give+0x74>)
   21ce6:	f000 bfe5 	b.w	22cb4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21cea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21cee:	429a      	cmp	r2, r3
   21cf0:	bf18      	it	ne
   21cf2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21cf4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21cf6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21cf8:	f104 0010 	add.w	r0, r4, #16
   21cfc:	f00a f821 	bl	2bd42 <z_handle_obj_poll_events>
}
   21d00:	e7ed      	b.n	21cde <z_impl_k_sem_give+0x4e>
   21d02:	bf00      	nop
   21d04:	20021a4c 	.word	0x20021a4c
   21d08:	0002ebe3 	.word	0x0002ebe3
   21d0c:	0002ec3c 	.word	0x0002ec3c
   21d10:	0002dd81 	.word	0x0002dd81
   21d14:	0002ec51 	.word	0x0002ec51

00021d18 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21d1a:	4604      	mov	r4, r0
   21d1c:	4616      	mov	r6, r2
   21d1e:	461d      	mov	r5, r3
   21d20:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   21d24:	b17b      	cbz	r3, 21d46 <z_impl_k_sem_take+0x2e>
   21d26:	ea52 0305 	orrs.w	r3, r2, r5
   21d2a:	d00c      	beq.n	21d46 <z_impl_k_sem_take+0x2e>
   21d2c:	492d      	ldr	r1, [pc, #180]	; (21de4 <z_impl_k_sem_take+0xcc>)
   21d2e:	2379      	movs	r3, #121	; 0x79
   21d30:	4a2d      	ldr	r2, [pc, #180]	; (21de8 <z_impl_k_sem_take+0xd0>)
   21d32:	482e      	ldr	r0, [pc, #184]	; (21dec <z_impl_k_sem_take+0xd4>)
   21d34:	f005 f81d 	bl	26d72 <assert_print>
   21d38:	482d      	ldr	r0, [pc, #180]	; (21df0 <z_impl_k_sem_take+0xd8>)
   21d3a:	f005 f81a 	bl	26d72 <assert_print>
   21d3e:	2179      	movs	r1, #121	; 0x79
   21d40:	4829      	ldr	r0, [pc, #164]	; (21de8 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d42:	f005 f80f 	bl	26d64 <assert_post_action>
   21d46:	f04f 0320 	mov.w	r3, #32
   21d4a:	f3ef 8711 	mrs	r7, BASEPRI
   21d4e:	f383 8812 	msr	BASEPRI_MAX, r3
   21d52:	f3bf 8f6f 	isb	sy
   21d56:	4827      	ldr	r0, [pc, #156]	; (21df4 <z_impl_k_sem_take+0xdc>)
   21d58:	f7ff fce2 	bl	21720 <z_spin_lock_valid>
   21d5c:	b960      	cbnz	r0, 21d78 <z_impl_k_sem_take+0x60>
   21d5e:	2394      	movs	r3, #148	; 0x94
   21d60:	4a25      	ldr	r2, [pc, #148]	; (21df8 <z_impl_k_sem_take+0xe0>)
   21d62:	4926      	ldr	r1, [pc, #152]	; (21dfc <z_impl_k_sem_take+0xe4>)
   21d64:	4821      	ldr	r0, [pc, #132]	; (21dec <z_impl_k_sem_take+0xd4>)
   21d66:	f005 f804 	bl	26d72 <assert_print>
   21d6a:	4922      	ldr	r1, [pc, #136]	; (21df4 <z_impl_k_sem_take+0xdc>)
   21d6c:	4824      	ldr	r0, [pc, #144]	; (21e00 <z_impl_k_sem_take+0xe8>)
   21d6e:	f005 f800 	bl	26d72 <assert_print>
   21d72:	2194      	movs	r1, #148	; 0x94
   21d74:	4820      	ldr	r0, [pc, #128]	; (21df8 <z_impl_k_sem_take+0xe0>)
   21d76:	e7e4      	b.n	21d42 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   21d78:	481e      	ldr	r0, [pc, #120]	; (21df4 <z_impl_k_sem_take+0xdc>)
   21d7a:	f7ff fced 	bl	21758 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21d7e:	68a3      	ldr	r3, [r4, #8]
   21d80:	b1c3      	cbz	r3, 21db4 <z_impl_k_sem_take+0x9c>
		sem->count--;
   21d82:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d84:	481b      	ldr	r0, [pc, #108]	; (21df4 <z_impl_k_sem_take+0xdc>)
   21d86:	60a3      	str	r3, [r4, #8]
   21d88:	f7ff fcd8 	bl	2173c <z_spin_unlock_valid>
   21d8c:	b958      	cbnz	r0, 21da6 <z_impl_k_sem_take+0x8e>
   21d8e:	23c2      	movs	r3, #194	; 0xc2
   21d90:	4a19      	ldr	r2, [pc, #100]	; (21df8 <z_impl_k_sem_take+0xe0>)
   21d92:	491c      	ldr	r1, [pc, #112]	; (21e04 <z_impl_k_sem_take+0xec>)
   21d94:	4815      	ldr	r0, [pc, #84]	; (21dec <z_impl_k_sem_take+0xd4>)
   21d96:	f004 ffec 	bl	26d72 <assert_print>
   21d9a:	4916      	ldr	r1, [pc, #88]	; (21df4 <z_impl_k_sem_take+0xdc>)
   21d9c:	481a      	ldr	r0, [pc, #104]	; (21e08 <z_impl_k_sem_take+0xf0>)
   21d9e:	f004 ffe8 	bl	26d72 <assert_print>
   21da2:	21c2      	movs	r1, #194	; 0xc2
   21da4:	e7e6      	b.n	21d74 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   21da6:	f387 8811 	msr	BASEPRI, r7
   21daa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21dae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21db0:	b003      	add	sp, #12
   21db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21db4:	ea56 0305 	orrs.w	r3, r6, r5
   21db8:	d10b      	bne.n	21dd2 <z_impl_k_sem_take+0xba>
   21dba:	480e      	ldr	r0, [pc, #56]	; (21df4 <z_impl_k_sem_take+0xdc>)
   21dbc:	f7ff fcbe 	bl	2173c <z_spin_unlock_valid>
   21dc0:	2800      	cmp	r0, #0
   21dc2:	d0e4      	beq.n	21d8e <z_impl_k_sem_take+0x76>
   21dc4:	f387 8811 	msr	BASEPRI, r7
   21dc8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21dcc:	f06f 000f 	mvn.w	r0, #15
   21dd0:	e7ee      	b.n	21db0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21dd2:	4622      	mov	r2, r4
   21dd4:	4639      	mov	r1, r7
   21dd6:	e9cd 6500 	strd	r6, r5, [sp]
   21dda:	4806      	ldr	r0, [pc, #24]	; (21df4 <z_impl_k_sem_take+0xdc>)
   21ddc:	f001 fa38 	bl	23250 <z_pend_curr>
	return ret;
   21de0:	e7e6      	b.n	21db0 <z_impl_k_sem_take+0x98>
   21de2:	bf00      	nop
   21de4:	0003340c 	.word	0x0003340c
   21de8:	000333ec 	.word	0x000333ec
   21dec:	0002dd81 	.word	0x0002dd81
   21df0:	00031dba 	.word	0x00031dba
   21df4:	20021a4c 	.word	0x20021a4c
   21df8:	0002ebe3 	.word	0x0002ebe3
   21dfc:	0002ec3c 	.word	0x0002ec3c
   21e00:	0002ec51 	.word	0x0002ec51
   21e04:	0002ec10 	.word	0x0002ec10
   21e08:	0002ec27 	.word	0x0002ec27

00021e0c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21e0e:	2400      	movs	r4, #0
   21e10:	4b08      	ldr	r3, [pc, #32]	; (21e34 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   21e16:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   21e18:	ab02      	add	r3, sp, #8
   21e1a:	9300      	str	r3, [sp, #0]
   21e1c:	4906      	ldr	r1, [pc, #24]	; (21e38 <k_sys_work_q_init+0x2c>)
   21e1e:	f04f 33ff 	mov.w	r3, #4294967295
   21e22:	4806      	ldr	r0, [pc, #24]	; (21e3c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21e24:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21e28:	f000 fac0 	bl	223ac <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21e2c:	4620      	mov	r0, r4
   21e2e:	b004      	add	sp, #16
   21e30:	bd10      	pop	{r4, pc}
   21e32:	bf00      	nop
   21e34:	0003345a 	.word	0x0003345a
   21e38:	20034208 	.word	0x20034208
   21e3c:	2000a218 	.word	0x2000a218

00021e40 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e44:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e46:	4e6e      	ldr	r6, [pc, #440]	; (22000 <work_queue_main+0x1c0>)
	return list->head;
   21e48:	4f6e      	ldr	r7, [pc, #440]	; (22004 <work_queue_main+0x1c4>)
   21e4a:	b085      	sub	sp, #20
	__asm__ volatile(
   21e4c:	f04f 0320 	mov.w	r3, #32
   21e50:	f3ef 8811 	mrs	r8, BASEPRI
   21e54:	f383 8812 	msr	BASEPRI_MAX, r3
   21e58:	f3bf 8f6f 	isb	sy
   21e5c:	4630      	mov	r0, r6
   21e5e:	f7ff fc5f 	bl	21720 <z_spin_lock_valid>
   21e62:	b968      	cbnz	r0, 21e80 <work_queue_main+0x40>
   21e64:	2394      	movs	r3, #148	; 0x94
   21e66:	4a68      	ldr	r2, [pc, #416]	; (22008 <work_queue_main+0x1c8>)
   21e68:	4968      	ldr	r1, [pc, #416]	; (2200c <work_queue_main+0x1cc>)
   21e6a:	4869      	ldr	r0, [pc, #420]	; (22010 <work_queue_main+0x1d0>)
   21e6c:	f004 ff81 	bl	26d72 <assert_print>
   21e70:	4963      	ldr	r1, [pc, #396]	; (22000 <work_queue_main+0x1c0>)
   21e72:	4868      	ldr	r0, [pc, #416]	; (22014 <work_queue_main+0x1d4>)
   21e74:	f004 ff7d 	bl	26d72 <assert_print>
   21e78:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e7a:	4863      	ldr	r0, [pc, #396]	; (22008 <work_queue_main+0x1c8>)
   21e7c:	f004 ff72 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e80:	4630      	mov	r0, r6
   21e82:	f7ff fc69 	bl	21758 <z_spin_lock_set_owner>
   21e86:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   21e8a:	b9ad      	cbnz	r5, 21eb8 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   21e8c:	2102      	movs	r1, #2
   21e8e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   21e92:	f009 fde1 	bl	2ba58 <flag_test_and_clear>
   21e96:	2800      	cmp	r0, #0
   21e98:	d135      	bne.n	21f06 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21e9a:	2300      	movs	r3, #0
   21e9c:	f04f 32ff 	mov.w	r2, #4294967295
   21ea0:	9302      	str	r3, [sp, #8]
   21ea2:	f04f 33ff 	mov.w	r3, #4294967295
   21ea6:	4641      	mov	r1, r8
   21ea8:	e9cd 2300 	strd	r2, r3, [sp]
   21eac:	4630      	mov	r0, r6
   21eae:	f104 0290 	add.w	r2, r4, #144	; 0x90
   21eb2:	f001 ff41 	bl	23d38 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   21eb6:	e7c9      	b.n	21e4c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21eb8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   21ebc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21ebe:	4295      	cmp	r5, r2
	list->tail = node;
   21ec0:	bf08      	it	eq
   21ec2:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   21ec6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   21eca:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ece:	4630      	mov	r0, r6
   21ed0:	f043 0302 	orr.w	r3, r3, #2
   21ed4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   21ed8:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   21eda:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   21ede:	f023 0304 	bic.w	r3, r3, #4
   21ee2:	f043 0301 	orr.w	r3, r3, #1
   21ee6:	60eb      	str	r3, [r5, #12]
   21ee8:	f7ff fc28 	bl	2173c <z_spin_unlock_valid>
   21eec:	b9a8      	cbnz	r0, 21f1a <work_queue_main+0xda>
   21eee:	23c2      	movs	r3, #194	; 0xc2
   21ef0:	4a45      	ldr	r2, [pc, #276]	; (22008 <work_queue_main+0x1c8>)
   21ef2:	4949      	ldr	r1, [pc, #292]	; (22018 <work_queue_main+0x1d8>)
   21ef4:	4846      	ldr	r0, [pc, #280]	; (22010 <work_queue_main+0x1d0>)
   21ef6:	f004 ff3c 	bl	26d72 <assert_print>
   21efa:	4941      	ldr	r1, [pc, #260]	; (22000 <work_queue_main+0x1c0>)
   21efc:	4847      	ldr	r0, [pc, #284]	; (2201c <work_queue_main+0x1dc>)
   21efe:	f004 ff38 	bl	26d72 <assert_print>
   21f02:	21c2      	movs	r1, #194	; 0xc2
   21f04:	e7b9      	b.n	21e7a <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21f06:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21f0a:	2200      	movs	r2, #0
   21f0c:	2101      	movs	r1, #1
   21f0e:	4628      	mov	r0, r5
   21f10:	f001 feb4 	bl	23c7c <z_sched_wake>
   21f14:	2800      	cmp	r0, #0
   21f16:	d1f8      	bne.n	21f0a <work_queue_main+0xca>
   21f18:	e7bf      	b.n	21e9a <work_queue_main+0x5a>
	__asm__ volatile(
   21f1a:	f388 8811 	msr	BASEPRI, r8
   21f1e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   21f22:	f1b9 0f00 	cmp.w	r9, #0
   21f26:	d10a      	bne.n	21f3e <work_queue_main+0xfe>
   21f28:	493d      	ldr	r1, [pc, #244]	; (22020 <work_queue_main+0x1e0>)
   21f2a:	4839      	ldr	r0, [pc, #228]	; (22010 <work_queue_main+0x1d0>)
   21f2c:	f240 239b 	movw	r3, #667	; 0x29b
   21f30:	4a3c      	ldr	r2, [pc, #240]	; (22024 <work_queue_main+0x1e4>)
   21f32:	f004 ff1e 	bl	26d72 <assert_print>
   21f36:	f240 219b 	movw	r1, #667	; 0x29b
   21f3a:	483a      	ldr	r0, [pc, #232]	; (22024 <work_queue_main+0x1e4>)
   21f3c:	e79e      	b.n	21e7c <work_queue_main+0x3c>
		handler(work);
   21f3e:	4628      	mov	r0, r5
   21f40:	47c8      	blx	r9
	__asm__ volatile(
   21f42:	f04f 0320 	mov.w	r3, #32
   21f46:	f3ef 8a11 	mrs	sl, BASEPRI
   21f4a:	f383 8812 	msr	BASEPRI_MAX, r3
   21f4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f52:	4630      	mov	r0, r6
   21f54:	f7ff fbe4 	bl	21720 <z_spin_lock_valid>
   21f58:	2800      	cmp	r0, #0
   21f5a:	d083      	beq.n	21e64 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   21f5c:	4630      	mov	r0, r6
   21f5e:	f7ff fbfb 	bl	21758 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   21f62:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21f64:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   21f66:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21f6a:	d417      	bmi.n	21f9c <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   21f6c:	60ea      	str	r2, [r5, #12]
   21f6e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f72:	4630      	mov	r0, r6
   21f74:	f023 0302 	bic.w	r3, r3, #2
   21f78:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   21f7c:	f3c3 2500 	ubfx	r5, r3, #8, #1
   21f80:	f7ff fbdc 	bl	2173c <z_spin_unlock_valid>
   21f84:	2800      	cmp	r0, #0
   21f86:	d0b2      	beq.n	21eee <work_queue_main+0xae>
	__asm__ volatile(
   21f88:	f38a 8811 	msr	BASEPRI, sl
   21f8c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   21f90:	2d00      	cmp	r5, #0
   21f92:	f47f af5b 	bne.w	21e4c <work_queue_main+0xc>
	z_impl_k_yield();
   21f96:	f001 fc35 	bl	23804 <z_impl_k_yield>
}
   21f9a:	e757      	b.n	21e4c <work_queue_main+0xc>
	return list->head;
   21f9c:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   21f9e:	f023 0303 	bic.w	r3, r3, #3
   21fa2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21fa4:	2800      	cmp	r0, #0
   21fa6:	d0e2      	beq.n	21f6e <work_queue_main+0x12e>
	return node->next;
   21fa8:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   21fac:	46c3      	mov	fp, r8
	return node->next;
   21fae:	f8d0 9000 	ldr.w	r9, [r0]
   21fb2:	2800      	cmp	r0, #0
   21fb4:	d0db      	beq.n	21f6e <work_queue_main+0x12e>
		if (wc->work == work) {
   21fb6:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   21fb8:	4602      	mov	r2, r0
		if (wc->work == work) {
   21fba:	429d      	cmp	r5, r3
   21fbc:	d10d      	bne.n	21fda <work_queue_main+0x19a>
   21fbe:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21fc0:	f1b8 0f00 	cmp.w	r8, #0
   21fc4:	d112      	bne.n	21fec <work_queue_main+0x1ac>
   21fc6:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   21fc8:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21fca:	4283      	cmp	r3, r0
   21fcc:	d100      	bne.n	21fd0 <work_queue_main+0x190>
	list->tail = node;
   21fce:	607a      	str	r2, [r7, #4]
	parent->next = child;
   21fd0:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   21fd4:	f7ff fe5c 	bl	21c90 <z_impl_k_sem_give>
}
   21fd8:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21fda:	f1b9 0f00 	cmp.w	r9, #0
   21fde:	d00d      	beq.n	21ffc <work_queue_main+0x1bc>
	return node->next;
   21fe0:	f8d9 3000 	ldr.w	r3, [r9]
   21fe4:	4648      	mov	r0, r9
   21fe6:	4690      	mov	r8, r2
   21fe8:	4699      	mov	r9, r3
   21fea:	e7e2      	b.n	21fb2 <work_queue_main+0x172>
	parent->next = child;
   21fec:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   21ff0:	687b      	ldr	r3, [r7, #4]
   21ff2:	4283      	cmp	r3, r0
	list->tail = node;
   21ff4:	bf08      	it	eq
   21ff6:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   21ffa:	e7e9      	b.n	21fd0 <work_queue_main+0x190>
   21ffc:	464b      	mov	r3, r9
   21ffe:	e7f1      	b.n	21fe4 <work_queue_main+0x1a4>
   22000:	20021a58 	.word	0x20021a58
   22004:	20021a50 	.word	0x20021a50
   22008:	0002ebe3 	.word	0x0002ebe3
   2200c:	0002ec3c 	.word	0x0002ec3c
   22010:	0002dd81 	.word	0x0002dd81
   22014:	0002ec51 	.word	0x0002ec51
   22018:	0002ec10 	.word	0x0002ec10
   2201c:	0002ec27 	.word	0x0002ec27
   22020:	00033484 	.word	0x00033484
   22024:	00033463 	.word	0x00033463

00022028 <cancel_sync_locked>:
{
   22028:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2202a:	68c3      	ldr	r3, [r0, #12]
{
   2202c:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   2202e:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   22032:	079b      	lsls	r3, r3, #30
{
   22034:	460c      	mov	r4, r1
	if (ret) {
   22036:	d50d      	bpl.n	22054 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   22038:	2201      	movs	r2, #1
   2203a:	2100      	movs	r1, #0
   2203c:	f104 0008 	add.w	r0, r4, #8
   22040:	f009 fcfa 	bl	2ba38 <z_impl_k_sem_init>
	parent->next = child;
   22044:	2300      	movs	r3, #0
   22046:	6023      	str	r3, [r4, #0]
	return list->tail;
   22048:	4b05      	ldr	r3, [pc, #20]	; (22060 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2204a:	6065      	str	r5, [r4, #4]
   2204c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2204e:	b91a      	cbnz	r2, 22058 <cancel_sync_locked+0x30>
	list->head = node;
   22050:	e9c3 4400 	strd	r4, r4, [r3]
}
   22054:	4630      	mov	r0, r6
   22056:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   22058:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2205a:	605c      	str	r4, [r3, #4]
}
   2205c:	e7fa      	b.n	22054 <cancel_sync_locked+0x2c>
   2205e:	bf00      	nop
   22060:	20021a50 	.word	0x20021a50

00022064 <submit_to_queue_locked>:
{
   22064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   22066:	68c3      	ldr	r3, [r0, #12]
{
   22068:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2206a:	079a      	lsls	r2, r3, #30
{
   2206c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2206e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   22072:	d439      	bmi.n	220e8 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   22074:	075b      	lsls	r3, r3, #29
   22076:	d425      	bmi.n	220c4 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   22078:	680b      	ldr	r3, [r1, #0]
   2207a:	b90b      	cbnz	r3, 22080 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2207c:	6883      	ldr	r3, [r0, #8]
   2207e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   22080:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   22082:	07dd      	lsls	r5, r3, #31
   22084:	d521      	bpl.n	220ca <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   22086:	68a3      	ldr	r3, [r4, #8]
   22088:	b95b      	cbnz	r3, 220a2 <submit_to_queue_locked+0x3e>
   2208a:	4928      	ldr	r1, [pc, #160]	; (2212c <submit_to_queue_locked+0xc8>)
   2208c:	4828      	ldr	r0, [pc, #160]	; (22130 <submit_to_queue_locked+0xcc>)
   2208e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   22092:	4a28      	ldr	r2, [pc, #160]	; (22134 <submit_to_queue_locked+0xd0>)
   22094:	f004 fe6d 	bl	26d72 <assert_print>
   22098:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2209c:	4825      	ldr	r0, [pc, #148]	; (22134 <submit_to_queue_locked+0xd0>)
   2209e:	f004 fe61 	bl	26d64 <assert_post_action>
			ret = 2;
   220a2:	2602      	movs	r6, #2
			*queuep = work->queue;
   220a4:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   220a6:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   220a8:	2d00      	cmp	r5, #0
   220aa:	d03c      	beq.n	22126 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   220ac:	4b22      	ldr	r3, [pc, #136]	; (22138 <submit_to_queue_locked+0xd4>)
   220ae:	689b      	ldr	r3, [r3, #8]
   220b0:	42ab      	cmp	r3, r5
   220b2:	d00c      	beq.n	220ce <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   220b4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   220b8:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   220ba:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   220be:	d416      	bmi.n	220ee <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   220c0:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   220c4:	2300      	movs	r3, #0
   220c6:	603b      	str	r3, [r7, #0]
	return ret;
   220c8:	e027      	b.n	2211a <submit_to_queue_locked+0xb6>
		ret = 1;
   220ca:	2601      	movs	r6, #1
   220cc:	e7eb      	b.n	220a6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   220ce:	f009 fc62 	bl	2b996 <k_is_in_isr>
   220d2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   220d6:	2800      	cmp	r0, #0
   220d8:	d1ee      	bne.n	220b8 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   220da:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   220dc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   220e0:	d5ee      	bpl.n	220c0 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   220e2:	b152      	cbz	r2, 220fa <submit_to_queue_locked+0x96>
   220e4:	075b      	lsls	r3, r3, #29
   220e6:	d408      	bmi.n	220fa <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   220e8:	f06f 060f 	mvn.w	r6, #15
   220ec:	e7ea      	b.n	220c4 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   220ee:	2a00      	cmp	r2, #0
   220f0:	d1fa      	bne.n	220e8 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   220f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   220f6:	2b00      	cmp	r3, #0
   220f8:	d1f6      	bne.n	220e8 <submit_to_queue_locked+0x84>
	parent->next = child;
   220fa:	2300      	movs	r3, #0
   220fc:	6023      	str	r3, [r4, #0]
	return list->tail;
   220fe:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   22102:	b963      	cbnz	r3, 2211e <submit_to_queue_locked+0xba>
	list->head = node;
   22104:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   22108:	4628      	mov	r0, r5
   2210a:	f009 fcbe 	bl	2ba8a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2210e:	68e3      	ldr	r3, [r4, #12]
   22110:	f043 0304 	orr.w	r3, r3, #4
   22114:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   22116:	683b      	ldr	r3, [r7, #0]
   22118:	60a3      	str	r3, [r4, #8]
}
   2211a:	4630      	mov	r0, r6
   2211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2211e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22120:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   22124:	e7f0      	b.n	22108 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   22126:	f06f 0615 	mvn.w	r6, #21
   2212a:	e7cb      	b.n	220c4 <submit_to_queue_locked+0x60>
   2212c:	0003349b 	.word	0x0003349b
   22130:	0002dd81 	.word	0x0002dd81
   22134:	00033463 	.word	0x00033463
   22138:	20021a20 	.word	0x20021a20

0002213c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   2213c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2213e:	4604      	mov	r4, r0
	__asm__ volatile(
   22140:	f04f 0320 	mov.w	r3, #32
   22144:	f3ef 8511 	mrs	r5, BASEPRI
   22148:	f383 8812 	msr	BASEPRI_MAX, r3
   2214c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22150:	481c      	ldr	r0, [pc, #112]	; (221c4 <work_timeout+0x88>)
   22152:	f7ff fae5 	bl	21720 <z_spin_lock_valid>
   22156:	b968      	cbnz	r0, 22174 <work_timeout+0x38>
   22158:	2394      	movs	r3, #148	; 0x94
   2215a:	4a1b      	ldr	r2, [pc, #108]	; (221c8 <work_timeout+0x8c>)
   2215c:	491b      	ldr	r1, [pc, #108]	; (221cc <work_timeout+0x90>)
   2215e:	481c      	ldr	r0, [pc, #112]	; (221d0 <work_timeout+0x94>)
   22160:	f004 fe07 	bl	26d72 <assert_print>
   22164:	4917      	ldr	r1, [pc, #92]	; (221c4 <work_timeout+0x88>)
   22166:	481b      	ldr	r0, [pc, #108]	; (221d4 <work_timeout+0x98>)
   22168:	f004 fe03 	bl	26d72 <assert_print>
   2216c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2216e:	4816      	ldr	r0, [pc, #88]	; (221c8 <work_timeout+0x8c>)
   22170:	f004 fdf8 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   22174:	4813      	ldr	r0, [pc, #76]	; (221c4 <work_timeout+0x88>)
   22176:	f7ff faef 	bl	21758 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   2217a:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2217c:	2103      	movs	r1, #3
   2217e:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   22180:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22182:	f1a4 0610 	sub.w	r6, r4, #16
   22186:	f009 fc67 	bl	2ba58 <flag_test_and_clear>
   2218a:	b128      	cbz	r0, 22198 <work_timeout+0x5c>
		queue = dw->queue;
   2218c:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   2218e:	4630      	mov	r0, r6
   22190:	a901      	add	r1, sp, #4
		queue = dw->queue;
   22192:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22194:	f7ff ff66 	bl	22064 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22198:	480a      	ldr	r0, [pc, #40]	; (221c4 <work_timeout+0x88>)
   2219a:	f7ff facf 	bl	2173c <z_spin_unlock_valid>
   2219e:	b958      	cbnz	r0, 221b8 <work_timeout+0x7c>
   221a0:	23c2      	movs	r3, #194	; 0xc2
   221a2:	4a09      	ldr	r2, [pc, #36]	; (221c8 <work_timeout+0x8c>)
   221a4:	490c      	ldr	r1, [pc, #48]	; (221d8 <work_timeout+0x9c>)
   221a6:	480a      	ldr	r0, [pc, #40]	; (221d0 <work_timeout+0x94>)
   221a8:	f004 fde3 	bl	26d72 <assert_print>
   221ac:	4905      	ldr	r1, [pc, #20]	; (221c4 <work_timeout+0x88>)
   221ae:	480b      	ldr	r0, [pc, #44]	; (221dc <work_timeout+0xa0>)
   221b0:	f004 fddf 	bl	26d72 <assert_print>
   221b4:	21c2      	movs	r1, #194	; 0xc2
   221b6:	e7da      	b.n	2216e <work_timeout+0x32>
	__asm__ volatile(
   221b8:	f385 8811 	msr	BASEPRI, r5
   221bc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   221c0:	b002      	add	sp, #8
   221c2:	bd70      	pop	{r4, r5, r6, pc}
   221c4:	20021a58 	.word	0x20021a58
   221c8:	0002ebe3 	.word	0x0002ebe3
   221cc:	0002ec3c 	.word	0x0002ec3c
   221d0:	0002dd81 	.word	0x0002dd81
   221d4:	0002ec51 	.word	0x0002ec51
   221d8:	0002ec10 	.word	0x0002ec10
   221dc:	0002ec27 	.word	0x0002ec27

000221e0 <k_work_init>:
{
   221e0:	b538      	push	{r3, r4, r5, lr}
   221e2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   221e4:	4604      	mov	r4, r0
   221e6:	b948      	cbnz	r0, 221fc <k_work_init+0x1c>
   221e8:	490c      	ldr	r1, [pc, #48]	; (2221c <k_work_init+0x3c>)
   221ea:	2389      	movs	r3, #137	; 0x89
   221ec:	4a0c      	ldr	r2, [pc, #48]	; (22220 <k_work_init+0x40>)
   221ee:	480d      	ldr	r0, [pc, #52]	; (22224 <k_work_init+0x44>)
   221f0:	f004 fdbf 	bl	26d72 <assert_print>
   221f4:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   221f6:	480a      	ldr	r0, [pc, #40]	; (22220 <k_work_init+0x40>)
   221f8:	f004 fdb4 	bl	26d64 <assert_post_action>
   221fc:	b939      	cbnz	r1, 2220e <k_work_init+0x2e>
   221fe:	490a      	ldr	r1, [pc, #40]	; (22228 <k_work_init+0x48>)
   22200:	238a      	movs	r3, #138	; 0x8a
   22202:	4a07      	ldr	r2, [pc, #28]	; (22220 <k_work_init+0x40>)
   22204:	4807      	ldr	r0, [pc, #28]	; (22224 <k_work_init+0x44>)
   22206:	f004 fdb4 	bl	26d72 <assert_print>
   2220a:	218a      	movs	r1, #138	; 0x8a
   2220c:	e7f3      	b.n	221f6 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2220e:	2210      	movs	r2, #16
   22210:	2100      	movs	r1, #0
   22212:	f009 fe0d 	bl	2be30 <memset>
   22216:	6065      	str	r5, [r4, #4]
}
   22218:	bd38      	pop	{r3, r4, r5, pc}
   2221a:	bf00      	nop
   2221c:	0003353a 	.word	0x0003353a
   22220:	00033463 	.word	0x00033463
   22224:	0002dd81 	.word	0x0002dd81
   22228:	00033484 	.word	0x00033484

0002222c <k_work_busy_get>:
{
   2222c:	b538      	push	{r3, r4, r5, lr}
   2222e:	4604      	mov	r4, r0
	__asm__ volatile(
   22230:	f04f 0320 	mov.w	r3, #32
   22234:	f3ef 8511 	mrs	r5, BASEPRI
   22238:	f383 8812 	msr	BASEPRI_MAX, r3
   2223c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22240:	4816      	ldr	r0, [pc, #88]	; (2229c <k_work_busy_get+0x70>)
   22242:	f7ff fa6d 	bl	21720 <z_spin_lock_valid>
   22246:	b968      	cbnz	r0, 22264 <k_work_busy_get+0x38>
   22248:	2394      	movs	r3, #148	; 0x94
   2224a:	4a15      	ldr	r2, [pc, #84]	; (222a0 <k_work_busy_get+0x74>)
   2224c:	4915      	ldr	r1, [pc, #84]	; (222a4 <k_work_busy_get+0x78>)
   2224e:	4816      	ldr	r0, [pc, #88]	; (222a8 <k_work_busy_get+0x7c>)
   22250:	f004 fd8f 	bl	26d72 <assert_print>
   22254:	4911      	ldr	r1, [pc, #68]	; (2229c <k_work_busy_get+0x70>)
   22256:	4815      	ldr	r0, [pc, #84]	; (222ac <k_work_busy_get+0x80>)
   22258:	f004 fd8b 	bl	26d72 <assert_print>
   2225c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2225e:	4810      	ldr	r0, [pc, #64]	; (222a0 <k_work_busy_get+0x74>)
   22260:	f004 fd80 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   22264:	480d      	ldr	r0, [pc, #52]	; (2229c <k_work_busy_get+0x70>)
   22266:	f7ff fa77 	bl	21758 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2226a:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2226c:	480b      	ldr	r0, [pc, #44]	; (2229c <k_work_busy_get+0x70>)
   2226e:	f004 040f 	and.w	r4, r4, #15
   22272:	f7ff fa63 	bl	2173c <z_spin_unlock_valid>
   22276:	b958      	cbnz	r0, 22290 <k_work_busy_get+0x64>
   22278:	23c2      	movs	r3, #194	; 0xc2
   2227a:	4a09      	ldr	r2, [pc, #36]	; (222a0 <k_work_busy_get+0x74>)
   2227c:	490c      	ldr	r1, [pc, #48]	; (222b0 <k_work_busy_get+0x84>)
   2227e:	480a      	ldr	r0, [pc, #40]	; (222a8 <k_work_busy_get+0x7c>)
   22280:	f004 fd77 	bl	26d72 <assert_print>
   22284:	4905      	ldr	r1, [pc, #20]	; (2229c <k_work_busy_get+0x70>)
   22286:	480b      	ldr	r0, [pc, #44]	; (222b4 <k_work_busy_get+0x88>)
   22288:	f004 fd73 	bl	26d72 <assert_print>
   2228c:	21c2      	movs	r1, #194	; 0xc2
   2228e:	e7e6      	b.n	2225e <k_work_busy_get+0x32>
	__asm__ volatile(
   22290:	f385 8811 	msr	BASEPRI, r5
   22294:	f3bf 8f6f 	isb	sy
}
   22298:	4620      	mov	r0, r4
   2229a:	bd38      	pop	{r3, r4, r5, pc}
   2229c:	20021a58 	.word	0x20021a58
   222a0:	0002ebe3 	.word	0x0002ebe3
   222a4:	0002ec3c 	.word	0x0002ec3c
   222a8:	0002dd81 	.word	0x0002dd81
   222ac:	0002ec51 	.word	0x0002ec51
   222b0:	0002ec10 	.word	0x0002ec10
   222b4:	0002ec27 	.word	0x0002ec27

000222b8 <z_work_submit_to_queue>:
{
   222b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   222ba:	460c      	mov	r4, r1
{
   222bc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   222be:	b959      	cbnz	r1, 222d8 <z_work_submit_to_queue+0x20>
   222c0:	4921      	ldr	r1, [pc, #132]	; (22348 <z_work_submit_to_queue+0x90>)
   222c2:	4822      	ldr	r0, [pc, #136]	; (2234c <z_work_submit_to_queue+0x94>)
   222c4:	f44f 73ba 	mov.w	r3, #372	; 0x174
   222c8:	4a21      	ldr	r2, [pc, #132]	; (22350 <z_work_submit_to_queue+0x98>)
   222ca:	f004 fd52 	bl	26d72 <assert_print>
   222ce:	f44f 71ba 	mov.w	r1, #372	; 0x174
   222d2:	481f      	ldr	r0, [pc, #124]	; (22350 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222d4:	f004 fd46 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   222d8:	f04f 0320 	mov.w	r3, #32
   222dc:	f3ef 8511 	mrs	r5, BASEPRI
   222e0:	f383 8812 	msr	BASEPRI_MAX, r3
   222e4:	f3bf 8f6f 	isb	sy
   222e8:	481a      	ldr	r0, [pc, #104]	; (22354 <z_work_submit_to_queue+0x9c>)
   222ea:	f7ff fa19 	bl	21720 <z_spin_lock_valid>
   222ee:	b960      	cbnz	r0, 2230a <z_work_submit_to_queue+0x52>
   222f0:	2394      	movs	r3, #148	; 0x94
   222f2:	4a19      	ldr	r2, [pc, #100]	; (22358 <z_work_submit_to_queue+0xa0>)
   222f4:	4919      	ldr	r1, [pc, #100]	; (2235c <z_work_submit_to_queue+0xa4>)
   222f6:	4815      	ldr	r0, [pc, #84]	; (2234c <z_work_submit_to_queue+0x94>)
   222f8:	f004 fd3b 	bl	26d72 <assert_print>
   222fc:	4915      	ldr	r1, [pc, #84]	; (22354 <z_work_submit_to_queue+0x9c>)
   222fe:	4818      	ldr	r0, [pc, #96]	; (22360 <z_work_submit_to_queue+0xa8>)
   22300:	f004 fd37 	bl	26d72 <assert_print>
   22304:	2194      	movs	r1, #148	; 0x94
   22306:	4814      	ldr	r0, [pc, #80]	; (22358 <z_work_submit_to_queue+0xa0>)
   22308:	e7e4      	b.n	222d4 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   2230a:	4812      	ldr	r0, [pc, #72]	; (22354 <z_work_submit_to_queue+0x9c>)
   2230c:	f7ff fa24 	bl	21758 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   22310:	4620      	mov	r0, r4
   22312:	a901      	add	r1, sp, #4
   22314:	f7ff fea6 	bl	22064 <submit_to_queue_locked>
   22318:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2231a:	480e      	ldr	r0, [pc, #56]	; (22354 <z_work_submit_to_queue+0x9c>)
   2231c:	f7ff fa0e 	bl	2173c <z_spin_unlock_valid>
   22320:	b958      	cbnz	r0, 2233a <z_work_submit_to_queue+0x82>
   22322:	23c2      	movs	r3, #194	; 0xc2
   22324:	4a0c      	ldr	r2, [pc, #48]	; (22358 <z_work_submit_to_queue+0xa0>)
   22326:	490f      	ldr	r1, [pc, #60]	; (22364 <z_work_submit_to_queue+0xac>)
   22328:	4808      	ldr	r0, [pc, #32]	; (2234c <z_work_submit_to_queue+0x94>)
   2232a:	f004 fd22 	bl	26d72 <assert_print>
   2232e:	4909      	ldr	r1, [pc, #36]	; (22354 <z_work_submit_to_queue+0x9c>)
   22330:	480d      	ldr	r0, [pc, #52]	; (22368 <z_work_submit_to_queue+0xb0>)
   22332:	f004 fd1e 	bl	26d72 <assert_print>
   22336:	21c2      	movs	r1, #194	; 0xc2
   22338:	e7e5      	b.n	22306 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   2233a:	f385 8811 	msr	BASEPRI, r5
   2233e:	f3bf 8f6f 	isb	sy
}
   22342:	4620      	mov	r0, r4
   22344:	b003      	add	sp, #12
   22346:	bd30      	pop	{r4, r5, pc}
   22348:	0003353a 	.word	0x0003353a
   2234c:	0002dd81 	.word	0x0002dd81
   22350:	00033463 	.word	0x00033463
   22354:	20021a58 	.word	0x20021a58
   22358:	0002ebe3 	.word	0x0002ebe3
   2235c:	0002ec3c 	.word	0x0002ec3c
   22360:	0002ec51 	.word	0x0002ec51
   22364:	0002ec10 	.word	0x0002ec10
   22368:	0002ec27 	.word	0x0002ec27

0002236c <k_work_submit>:
{
   2236c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2236e:	4801      	ldr	r0, [pc, #4]	; (22374 <k_work_submit+0x8>)
   22370:	f009 bbc5 	b.w	2bafe <k_work_submit_to_queue>
   22374:	2000a218 	.word	0x2000a218

00022378 <k_work_queue_init>:
{
   22378:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   2237a:	b958      	cbnz	r0, 22394 <k_work_queue_init+0x1c>
   2237c:	4908      	ldr	r1, [pc, #32]	; (223a0 <k_work_queue_init+0x28>)
   2237e:	4809      	ldr	r0, [pc, #36]	; (223a4 <k_work_queue_init+0x2c>)
   22380:	f240 23b9 	movw	r3, #697	; 0x2b9
   22384:	4a08      	ldr	r2, [pc, #32]	; (223a8 <k_work_queue_init+0x30>)
   22386:	f004 fcf4 	bl	26d72 <assert_print>
   2238a:	f240 21b9 	movw	r1, #697	; 0x2b9
   2238e:	4806      	ldr	r0, [pc, #24]	; (223a8 <k_work_queue_init+0x30>)
   22390:	f004 fce8 	bl	26d64 <assert_post_action>
	*queue = (struct k_work_q) {
   22394:	22a8      	movs	r2, #168	; 0xa8
   22396:	2100      	movs	r1, #0
   22398:	f009 fd4a 	bl	2be30 <memset>
}
   2239c:	bd08      	pop	{r3, pc}
   2239e:	bf00      	nop
   223a0:	000334a1 	.word	0x000334a1
   223a4:	0002dd81 	.word	0x0002dd81
   223a8:	00033463 	.word	0x00033463

000223ac <k_work_queue_start>:
{
   223ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   223ae:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   223b0:	4604      	mov	r4, r0
{
   223b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   223b4:	b958      	cbnz	r0, 223ce <k_work_queue_start+0x22>
   223b6:	492b      	ldr	r1, [pc, #172]	; (22464 <k_work_queue_start+0xb8>)
   223b8:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   223bc:	4a2a      	ldr	r2, [pc, #168]	; (22468 <k_work_queue_start+0xbc>)
   223be:	482b      	ldr	r0, [pc, #172]	; (2246c <k_work_queue_start+0xc0>)
   223c0:	f004 fcd7 	bl	26d72 <assert_print>
   223c4:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   223c8:	4827      	ldr	r0, [pc, #156]	; (22468 <k_work_queue_start+0xbc>)
   223ca:	f004 fccb 	bl	26d64 <assert_post_action>
   223ce:	b949      	cbnz	r1, 223e4 <k_work_queue_start+0x38>
   223d0:	4927      	ldr	r1, [pc, #156]	; (22470 <k_work_queue_start+0xc4>)
   223d2:	f240 23c9 	movw	r3, #713	; 0x2c9
   223d6:	4a24      	ldr	r2, [pc, #144]	; (22468 <k_work_queue_start+0xbc>)
   223d8:	4824      	ldr	r0, [pc, #144]	; (2246c <k_work_queue_start+0xc0>)
   223da:	f004 fcca 	bl	26d72 <assert_print>
   223de:	f240 21c9 	movw	r1, #713	; 0x2c9
   223e2:	e7f1      	b.n	223c8 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   223e4:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   223e8:	f010 0001 	ands.w	r0, r0, #1
   223ec:	d009      	beq.n	22402 <k_work_queue_start+0x56>
   223ee:	4921      	ldr	r1, [pc, #132]	; (22474 <k_work_queue_start+0xc8>)
   223f0:	f240 23ca 	movw	r3, #714	; 0x2ca
   223f4:	4a1c      	ldr	r2, [pc, #112]	; (22468 <k_work_queue_start+0xbc>)
   223f6:	481d      	ldr	r0, [pc, #116]	; (2246c <k_work_queue_start+0xc0>)
   223f8:	f004 fcbb 	bl	26d72 <assert_print>
   223fc:	f240 21ca 	movw	r1, #714	; 0x2ca
   22400:	e7e2      	b.n	223c8 <k_work_queue_start+0x1c>
	list->tail = NULL;
   22402:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   22406:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   2240a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   2240e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   22412:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   22416:	b31d      	cbz	r5, 22460 <k_work_queue_start+0xb4>
   22418:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2241a:	2800      	cmp	r0, #0
   2241c:	f240 1001 	movw	r0, #257	; 0x101
   22420:	bf08      	it	eq
   22422:	2001      	moveq	r0, #1
	*flagp = flags;
   22424:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22428:	2000      	movs	r0, #0
   2242a:	f04f 36ff 	mov.w	r6, #4294967295
   2242e:	f04f 37ff 	mov.w	r7, #4294967295
   22432:	e9cd 3003 	strd	r3, r0, [sp, #12]
   22436:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2243a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2243e:	4620      	mov	r0, r4
   22440:	4b0d      	ldr	r3, [pc, #52]	; (22478 <k_work_queue_start+0xcc>)
   22442:	9400      	str	r4, [sp, #0]
   22444:	f7ff f8a2 	bl	2158c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22448:	b125      	cbz	r5, 22454 <k_work_queue_start+0xa8>
   2244a:	6829      	ldr	r1, [r5, #0]
   2244c:	b111      	cbz	r1, 22454 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   2244e:	4620      	mov	r0, r4
   22450:	f009 faa7 	bl	2b9a2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22454:	4620      	mov	r0, r4
}
   22456:	b009      	add	sp, #36	; 0x24
   22458:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2245c:	f009 baa6 	b.w	2b9ac <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22460:	2001      	movs	r0, #1
   22462:	e7df      	b.n	22424 <k_work_queue_start+0x78>
   22464:	000334f9 	.word	0x000334f9
   22468:	00033463 	.word	0x00033463
   2246c:	0002dd81 	.word	0x0002dd81
   22470:	000334ff 	.word	0x000334ff
   22474:	00033505 	.word	0x00033505
   22478:	00021e41 	.word	0x00021e41

0002247c <k_work_queue_drain>:
{
   2247c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2247e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   22480:	4604      	mov	r4, r0
   22482:	b958      	cbnz	r0, 2249c <k_work_queue_drain+0x20>
   22484:	493a      	ldr	r1, [pc, #232]	; (22570 <k_work_queue_drain+0xf4>)
   22486:	f240 23ed 	movw	r3, #749	; 0x2ed
   2248a:	4a3a      	ldr	r2, [pc, #232]	; (22574 <k_work_queue_drain+0xf8>)
   2248c:	483a      	ldr	r0, [pc, #232]	; (22578 <k_work_queue_drain+0xfc>)
   2248e:	f004 fc70 	bl	26d72 <assert_print>
   22492:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   22496:	4837      	ldr	r0, [pc, #220]	; (22574 <k_work_queue_drain+0xf8>)
   22498:	f004 fc64 	bl	26d64 <assert_post_action>
   2249c:	f009 fa7b 	bl	2b996 <k_is_in_isr>
   224a0:	b148      	cbz	r0, 224b6 <k_work_queue_drain+0x3a>
   224a2:	4936      	ldr	r1, [pc, #216]	; (2257c <k_work_queue_drain+0x100>)
   224a4:	f240 23ee 	movw	r3, #750	; 0x2ee
   224a8:	4a32      	ldr	r2, [pc, #200]	; (22574 <k_work_queue_drain+0xf8>)
   224aa:	4833      	ldr	r0, [pc, #204]	; (22578 <k_work_queue_drain+0xfc>)
   224ac:	f004 fc61 	bl	26d72 <assert_print>
   224b0:	f240 21ee 	movw	r1, #750	; 0x2ee
   224b4:	e7ef      	b.n	22496 <k_work_queue_drain+0x1a>
	__asm__ volatile(
   224b6:	f04f 0320 	mov.w	r3, #32
   224ba:	f3ef 8611 	mrs	r6, BASEPRI
   224be:	f383 8812 	msr	BASEPRI_MAX, r3
   224c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224c6:	482e      	ldr	r0, [pc, #184]	; (22580 <k_work_queue_drain+0x104>)
   224c8:	f7ff f92a 	bl	21720 <z_spin_lock_valid>
   224cc:	b960      	cbnz	r0, 224e8 <k_work_queue_drain+0x6c>
   224ce:	2394      	movs	r3, #148	; 0x94
   224d0:	4a2c      	ldr	r2, [pc, #176]	; (22584 <k_work_queue_drain+0x108>)
   224d2:	492d      	ldr	r1, [pc, #180]	; (22588 <k_work_queue_drain+0x10c>)
   224d4:	4828      	ldr	r0, [pc, #160]	; (22578 <k_work_queue_drain+0xfc>)
   224d6:	f004 fc4c 	bl	26d72 <assert_print>
   224da:	4929      	ldr	r1, [pc, #164]	; (22580 <k_work_queue_drain+0x104>)
   224dc:	482b      	ldr	r0, [pc, #172]	; (2258c <k_work_queue_drain+0x110>)
   224de:	f004 fc48 	bl	26d72 <assert_print>
   224e2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224e4:	4827      	ldr	r0, [pc, #156]	; (22584 <k_work_queue_drain+0x108>)
   224e6:	e7d7      	b.n	22498 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   224e8:	4825      	ldr	r0, [pc, #148]	; (22580 <k_work_queue_drain+0x104>)
   224ea:	f7ff f935 	bl	21758 <z_spin_lock_set_owner>
	return *flagp;
   224ee:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   224f2:	f013 0f06 	tst.w	r3, #6
   224f6:	d11d      	bne.n	22534 <k_work_queue_drain+0xb8>
	    || plug
   224f8:	b1b5      	cbz	r5, 22528 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   224fa:	f043 030c 	orr.w	r3, r3, #12
   224fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   22502:	4620      	mov	r0, r4
   22504:	f009 fac1 	bl	2ba8a <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   22508:	2300      	movs	r3, #0
   2250a:	f04f 32ff 	mov.w	r2, #4294967295
   2250e:	9302      	str	r3, [sp, #8]
   22510:	f04f 33ff 	mov.w	r3, #4294967295
   22514:	4631      	mov	r1, r6
   22516:	e9cd 2300 	strd	r2, r3, [sp]
   2251a:	4819      	ldr	r0, [pc, #100]	; (22580 <k_work_queue_drain+0x104>)
   2251c:	f104 0298 	add.w	r2, r4, #152	; 0x98
   22520:	f001 fc0a 	bl	23d38 <z_sched_wait>
}
   22524:	b004      	add	sp, #16
   22526:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   22528:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   2252c:	b14d      	cbz	r5, 22542 <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   2252e:	f043 0304 	orr.w	r3, r3, #4
   22532:	e7e4      	b.n	224fe <k_work_queue_drain+0x82>
   22534:	f043 0204 	orr.w	r2, r3, #4
   22538:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   2253c:	2d00      	cmp	r5, #0
   2253e:	d0e0      	beq.n	22502 <k_work_queue_drain+0x86>
   22540:	e7db      	b.n	224fa <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22542:	480f      	ldr	r0, [pc, #60]	; (22580 <k_work_queue_drain+0x104>)
   22544:	f7ff f8fa 	bl	2173c <z_spin_unlock_valid>
   22548:	b958      	cbnz	r0, 22562 <k_work_queue_drain+0xe6>
   2254a:	23c2      	movs	r3, #194	; 0xc2
   2254c:	4a0d      	ldr	r2, [pc, #52]	; (22584 <k_work_queue_drain+0x108>)
   2254e:	4910      	ldr	r1, [pc, #64]	; (22590 <k_work_queue_drain+0x114>)
   22550:	4809      	ldr	r0, [pc, #36]	; (22578 <k_work_queue_drain+0xfc>)
   22552:	f004 fc0e 	bl	26d72 <assert_print>
   22556:	490a      	ldr	r1, [pc, #40]	; (22580 <k_work_queue_drain+0x104>)
   22558:	480e      	ldr	r0, [pc, #56]	; (22594 <k_work_queue_drain+0x118>)
   2255a:	f004 fc0a 	bl	26d72 <assert_print>
   2255e:	21c2      	movs	r1, #194	; 0xc2
   22560:	e7c0      	b.n	224e4 <k_work_queue_drain+0x68>
	__asm__ volatile(
   22562:	f386 8811 	msr	BASEPRI, r6
   22566:	f3bf 8f6f 	isb	sy
	int ret = 0;
   2256a:	4628      	mov	r0, r5
	return ret;
   2256c:	e7da      	b.n	22524 <k_work_queue_drain+0xa8>
   2256e:	bf00      	nop
   22570:	000334f9 	.word	0x000334f9
   22574:	00033463 	.word	0x00033463
   22578:	0002dd81 	.word	0x0002dd81
   2257c:	00030e16 	.word	0x00030e16
   22580:	20021a58 	.word	0x20021a58
   22584:	0002ebe3 	.word	0x0002ebe3
   22588:	0002ec3c 	.word	0x0002ec3c
   2258c:	0002ec51 	.word	0x0002ec51
   22590:	0002ec10 	.word	0x0002ec10
   22594:	0002ec27 	.word	0x0002ec27

00022598 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   22598:	b538      	push	{r3, r4, r5, lr}
   2259a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2259c:	4604      	mov	r4, r0
   2259e:	b958      	cbnz	r0, 225b8 <k_work_init_delayable+0x20>
   225a0:	490f      	ldr	r1, [pc, #60]	; (225e0 <k_work_init_delayable+0x48>)
   225a2:	f44f 7350 	mov.w	r3, #832	; 0x340
   225a6:	4a0f      	ldr	r2, [pc, #60]	; (225e4 <k_work_init_delayable+0x4c>)
   225a8:	480f      	ldr	r0, [pc, #60]	; (225e8 <k_work_init_delayable+0x50>)
   225aa:	f004 fbe2 	bl	26d72 <assert_print>
   225ae:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   225b2:	480c      	ldr	r0, [pc, #48]	; (225e4 <k_work_init_delayable+0x4c>)
   225b4:	f004 fbd6 	bl	26d64 <assert_post_action>
   225b8:	b949      	cbnz	r1, 225ce <k_work_init_delayable+0x36>
   225ba:	490c      	ldr	r1, [pc, #48]	; (225ec <k_work_init_delayable+0x54>)
   225bc:	f240 3341 	movw	r3, #833	; 0x341
   225c0:	4a08      	ldr	r2, [pc, #32]	; (225e4 <k_work_init_delayable+0x4c>)
   225c2:	4809      	ldr	r0, [pc, #36]	; (225e8 <k_work_init_delayable+0x50>)
   225c4:	f004 fbd5 	bl	26d72 <assert_print>
   225c8:	f240 3141 	movw	r1, #833	; 0x341
   225cc:	e7f1      	b.n	225b2 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   225ce:	2230      	movs	r2, #48	; 0x30
   225d0:	2100      	movs	r1, #0
   225d2:	f009 fc2d 	bl	2be30 <memset>
   225d6:	f44f 7380 	mov.w	r3, #256	; 0x100
   225da:	6065      	str	r5, [r4, #4]
   225dc:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   225de:	bd38      	pop	{r3, r4, r5, pc}
   225e0:	00033539 	.word	0x00033539
   225e4:	00033463 	.word	0x00033463
   225e8:	0002dd81 	.word	0x0002dd81
   225ec:	00033484 	.word	0x00033484

000225f0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   225f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   225f2:	4616      	mov	r6, r2
   225f4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   225f6:	460c      	mov	r4, r1
{
   225f8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   225fa:	b959      	cbnz	r1, 22614 <k_work_schedule_for_queue+0x24>
   225fc:	492d      	ldr	r1, [pc, #180]	; (226b4 <k_work_schedule_for_queue+0xc4>)
   225fe:	482e      	ldr	r0, [pc, #184]	; (226b8 <k_work_schedule_for_queue+0xc8>)
   22600:	f240 33b7 	movw	r3, #951	; 0x3b7
   22604:	4a2d      	ldr	r2, [pc, #180]	; (226bc <k_work_schedule_for_queue+0xcc>)
   22606:	f004 fbb4 	bl	26d72 <assert_print>
   2260a:	f240 31b7 	movw	r1, #951	; 0x3b7
   2260e:	482b      	ldr	r0, [pc, #172]	; (226bc <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22610:	f004 fba8 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   22614:	f04f 0320 	mov.w	r3, #32
   22618:	f3ef 8711 	mrs	r7, BASEPRI
   2261c:	f383 8812 	msr	BASEPRI_MAX, r3
   22620:	f3bf 8f6f 	isb	sy
   22624:	4826      	ldr	r0, [pc, #152]	; (226c0 <k_work_schedule_for_queue+0xd0>)
   22626:	f7ff f87b 	bl	21720 <z_spin_lock_valid>
   2262a:	b960      	cbnz	r0, 22646 <k_work_schedule_for_queue+0x56>
   2262c:	2394      	movs	r3, #148	; 0x94
   2262e:	4a25      	ldr	r2, [pc, #148]	; (226c4 <k_work_schedule_for_queue+0xd4>)
   22630:	4925      	ldr	r1, [pc, #148]	; (226c8 <k_work_schedule_for_queue+0xd8>)
   22632:	4821      	ldr	r0, [pc, #132]	; (226b8 <k_work_schedule_for_queue+0xc8>)
   22634:	f004 fb9d 	bl	26d72 <assert_print>
   22638:	4921      	ldr	r1, [pc, #132]	; (226c0 <k_work_schedule_for_queue+0xd0>)
   2263a:	4824      	ldr	r0, [pc, #144]	; (226cc <k_work_schedule_for_queue+0xdc>)
   2263c:	f004 fb99 	bl	26d72 <assert_print>
   22640:	2194      	movs	r1, #148	; 0x94
   22642:	4820      	ldr	r0, [pc, #128]	; (226c4 <k_work_schedule_for_queue+0xd4>)
   22644:	e7e4      	b.n	22610 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   22646:	481e      	ldr	r0, [pc, #120]	; (226c0 <k_work_schedule_for_queue+0xd0>)
   22648:	f7ff f886 	bl	21758 <z_spin_lock_set_owner>
	return *flagp;
   2264c:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2264e:	f013 0f0e 	tst.w	r3, #14
   22652:	d125      	bne.n	226a0 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22654:	ea55 0206 	orrs.w	r2, r5, r6
   22658:	d114      	bne.n	22684 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   2265a:	4620      	mov	r0, r4
   2265c:	a901      	add	r1, sp, #4
   2265e:	f7ff fd01 	bl	22064 <submit_to_queue_locked>
   22662:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22664:	4816      	ldr	r0, [pc, #88]	; (226c0 <k_work_schedule_for_queue+0xd0>)
   22666:	f7ff f869 	bl	2173c <z_spin_unlock_valid>
   2266a:	b9d8      	cbnz	r0, 226a4 <k_work_schedule_for_queue+0xb4>
   2266c:	23c2      	movs	r3, #194	; 0xc2
   2266e:	4a15      	ldr	r2, [pc, #84]	; (226c4 <k_work_schedule_for_queue+0xd4>)
   22670:	4917      	ldr	r1, [pc, #92]	; (226d0 <k_work_schedule_for_queue+0xe0>)
   22672:	4811      	ldr	r0, [pc, #68]	; (226b8 <k_work_schedule_for_queue+0xc8>)
   22674:	f004 fb7d 	bl	26d72 <assert_print>
   22678:	4911      	ldr	r1, [pc, #68]	; (226c0 <k_work_schedule_for_queue+0xd0>)
   2267a:	4816      	ldr	r0, [pc, #88]	; (226d4 <k_work_schedule_for_queue+0xe4>)
   2267c:	f004 fb79 	bl	26d72 <assert_print>
   22680:	21c2      	movs	r1, #194	; 0xc2
   22682:	e7de      	b.n	22642 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   22684:	f043 0308 	orr.w	r3, r3, #8
   22688:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2268a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2268c:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   22690:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22692:	4632      	mov	r2, r6
   22694:	462b      	mov	r3, r5
   22696:	4910      	ldr	r1, [pc, #64]	; (226d8 <k_work_schedule_for_queue+0xe8>)
   22698:	f001 fbc8 	bl	23e2c <z_add_timeout>
	return ret;
   2269c:	2401      	movs	r4, #1
   2269e:	e7e1      	b.n	22664 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   226a0:	2400      	movs	r4, #0
   226a2:	e7df      	b.n	22664 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   226a4:	f387 8811 	msr	BASEPRI, r7
   226a8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   226ac:	4620      	mov	r0, r4
   226ae:	b003      	add	sp, #12
   226b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226b2:	bf00      	nop
   226b4:	00033539 	.word	0x00033539
   226b8:	0002dd81 	.word	0x0002dd81
   226bc:	00033463 	.word	0x00033463
   226c0:	20021a58 	.word	0x20021a58
   226c4:	0002ebe3 	.word	0x0002ebe3
   226c8:	0002ec3c 	.word	0x0002ec3c
   226cc:	0002ec51 	.word	0x0002ec51
   226d0:	0002ec10 	.word	0x0002ec10
   226d4:	0002ec27 	.word	0x0002ec27
   226d8:	0002213d 	.word	0x0002213d

000226dc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   226dc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   226de:	4801      	ldr	r0, [pc, #4]	; (226e4 <k_work_schedule+0x8>)
   226e0:	f7ff bf86 	b.w	225f0 <k_work_schedule_for_queue>
   226e4:	2000a218 	.word	0x2000a218

000226e8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   226e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   226ea:	4616      	mov	r6, r2
   226ec:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   226ee:	460c      	mov	r4, r1
{
   226f0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   226f2:	b959      	cbnz	r1, 2270c <k_work_reschedule_for_queue+0x24>
   226f4:	492c      	ldr	r1, [pc, #176]	; (227a8 <k_work_reschedule_for_queue+0xc0>)
   226f6:	482d      	ldr	r0, [pc, #180]	; (227ac <k_work_reschedule_for_queue+0xc4>)
   226f8:	f240 33db 	movw	r3, #987	; 0x3db
   226fc:	4a2c      	ldr	r2, [pc, #176]	; (227b0 <k_work_reschedule_for_queue+0xc8>)
   226fe:	f004 fb38 	bl	26d72 <assert_print>
   22702:	f240 31db 	movw	r1, #987	; 0x3db
   22706:	482a      	ldr	r0, [pc, #168]	; (227b0 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22708:	f004 fb2c 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   2270c:	f04f 0320 	mov.w	r3, #32
   22710:	f3ef 8711 	mrs	r7, BASEPRI
   22714:	f383 8812 	msr	BASEPRI_MAX, r3
   22718:	f3bf 8f6f 	isb	sy
   2271c:	4825      	ldr	r0, [pc, #148]	; (227b4 <k_work_reschedule_for_queue+0xcc>)
   2271e:	f7fe ffff 	bl	21720 <z_spin_lock_valid>
   22722:	b960      	cbnz	r0, 2273e <k_work_reschedule_for_queue+0x56>
   22724:	2394      	movs	r3, #148	; 0x94
   22726:	4a24      	ldr	r2, [pc, #144]	; (227b8 <k_work_reschedule_for_queue+0xd0>)
   22728:	4924      	ldr	r1, [pc, #144]	; (227bc <k_work_reschedule_for_queue+0xd4>)
   2272a:	4820      	ldr	r0, [pc, #128]	; (227ac <k_work_reschedule_for_queue+0xc4>)
   2272c:	f004 fb21 	bl	26d72 <assert_print>
   22730:	4920      	ldr	r1, [pc, #128]	; (227b4 <k_work_reschedule_for_queue+0xcc>)
   22732:	4823      	ldr	r0, [pc, #140]	; (227c0 <k_work_reschedule_for_queue+0xd8>)
   22734:	f004 fb1d 	bl	26d72 <assert_print>
   22738:	2194      	movs	r1, #148	; 0x94
   2273a:	481f      	ldr	r0, [pc, #124]	; (227b8 <k_work_reschedule_for_queue+0xd0>)
   2273c:	e7e4      	b.n	22708 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2273e:	481d      	ldr	r0, [pc, #116]	; (227b4 <k_work_reschedule_for_queue+0xcc>)
   22740:	f7ff f80a 	bl	21758 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   22744:	4620      	mov	r0, r4
   22746:	f009 f992 	bl	2ba6e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2274a:	ea55 0306 	orrs.w	r3, r5, r6
   2274e:	d114      	bne.n	2277a <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   22750:	4620      	mov	r0, r4
   22752:	a901      	add	r1, sp, #4
   22754:	f7ff fc86 	bl	22064 <submit_to_queue_locked>
   22758:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2275a:	4816      	ldr	r0, [pc, #88]	; (227b4 <k_work_reschedule_for_queue+0xcc>)
   2275c:	f7fe ffee 	bl	2173c <z_spin_unlock_valid>
   22760:	b9d0      	cbnz	r0, 22798 <k_work_reschedule_for_queue+0xb0>
   22762:	23c2      	movs	r3, #194	; 0xc2
   22764:	4a14      	ldr	r2, [pc, #80]	; (227b8 <k_work_reschedule_for_queue+0xd0>)
   22766:	4917      	ldr	r1, [pc, #92]	; (227c4 <k_work_reschedule_for_queue+0xdc>)
   22768:	4810      	ldr	r0, [pc, #64]	; (227ac <k_work_reschedule_for_queue+0xc4>)
   2276a:	f004 fb02 	bl	26d72 <assert_print>
   2276e:	4911      	ldr	r1, [pc, #68]	; (227b4 <k_work_reschedule_for_queue+0xcc>)
   22770:	4815      	ldr	r0, [pc, #84]	; (227c8 <k_work_reschedule_for_queue+0xe0>)
   22772:	f004 fafe 	bl	26d72 <assert_print>
   22776:	21c2      	movs	r1, #194	; 0xc2
   22778:	e7df      	b.n	2273a <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   2277a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2277c:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   22780:	f043 0308 	orr.w	r3, r3, #8
   22784:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   22786:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22788:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2278a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2278c:	490f      	ldr	r1, [pc, #60]	; (227cc <k_work_reschedule_for_queue+0xe4>)
   2278e:	462b      	mov	r3, r5
   22790:	f001 fb4c 	bl	23e2c <z_add_timeout>
	return ret;
   22794:	2401      	movs	r4, #1
   22796:	e7e0      	b.n	2275a <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   22798:	f387 8811 	msr	BASEPRI, r7
   2279c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   227a0:	4620      	mov	r0, r4
   227a2:	b003      	add	sp, #12
   227a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227a6:	bf00      	nop
   227a8:	00033539 	.word	0x00033539
   227ac:	0002dd81 	.word	0x0002dd81
   227b0:	00033463 	.word	0x00033463
   227b4:	20021a58 	.word	0x20021a58
   227b8:	0002ebe3 	.word	0x0002ebe3
   227bc:	0002ec3c 	.word	0x0002ec3c
   227c0:	0002ec51 	.word	0x0002ec51
   227c4:	0002ec10 	.word	0x0002ec10
   227c8:	0002ec27 	.word	0x0002ec27
   227cc:	0002213d 	.word	0x0002213d

000227d0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   227d0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   227d2:	4801      	ldr	r0, [pc, #4]	; (227d8 <k_work_reschedule+0x8>)
   227d4:	f7ff bf88 	b.w	226e8 <k_work_reschedule_for_queue>
   227d8:	2000a218 	.word	0x2000a218

000227dc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   227dc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   227de:	4604      	mov	r4, r0
   227e0:	b958      	cbnz	r0, 227fa <k_work_cancel_delayable+0x1e>
   227e2:	4922      	ldr	r1, [pc, #136]	; (2286c <k_work_cancel_delayable+0x90>)
   227e4:	4822      	ldr	r0, [pc, #136]	; (22870 <k_work_cancel_delayable+0x94>)
   227e6:	f240 33fd 	movw	r3, #1021	; 0x3fd
   227ea:	4a22      	ldr	r2, [pc, #136]	; (22874 <k_work_cancel_delayable+0x98>)
   227ec:	f004 fac1 	bl	26d72 <assert_print>
   227f0:	f240 31fd 	movw	r1, #1021	; 0x3fd
   227f4:	481f      	ldr	r0, [pc, #124]	; (22874 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227f6:	f004 fab5 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   227fa:	f04f 0320 	mov.w	r3, #32
   227fe:	f3ef 8511 	mrs	r5, BASEPRI
   22802:	f383 8812 	msr	BASEPRI_MAX, r3
   22806:	f3bf 8f6f 	isb	sy
   2280a:	481b      	ldr	r0, [pc, #108]	; (22878 <k_work_cancel_delayable+0x9c>)
   2280c:	f7fe ff88 	bl	21720 <z_spin_lock_valid>
   22810:	b960      	cbnz	r0, 2282c <k_work_cancel_delayable+0x50>
   22812:	2394      	movs	r3, #148	; 0x94
   22814:	4a19      	ldr	r2, [pc, #100]	; (2287c <k_work_cancel_delayable+0xa0>)
   22816:	491a      	ldr	r1, [pc, #104]	; (22880 <k_work_cancel_delayable+0xa4>)
   22818:	4815      	ldr	r0, [pc, #84]	; (22870 <k_work_cancel_delayable+0x94>)
   2281a:	f004 faaa 	bl	26d72 <assert_print>
   2281e:	4916      	ldr	r1, [pc, #88]	; (22878 <k_work_cancel_delayable+0x9c>)
   22820:	4818      	ldr	r0, [pc, #96]	; (22884 <k_work_cancel_delayable+0xa8>)
   22822:	f004 faa6 	bl	26d72 <assert_print>
   22826:	2194      	movs	r1, #148	; 0x94
   22828:	4814      	ldr	r0, [pc, #80]	; (2287c <k_work_cancel_delayable+0xa0>)
   2282a:	e7e4      	b.n	227f6 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   2282c:	4812      	ldr	r0, [pc, #72]	; (22878 <k_work_cancel_delayable+0x9c>)
   2282e:	f7fe ff93 	bl	21758 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   22832:	4620      	mov	r0, r4
   22834:	f009 f91b 	bl	2ba6e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22838:	4620      	mov	r0, r4
   2283a:	f009 f92d 	bl	2ba98 <cancel_async_locked>
   2283e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22840:	480d      	ldr	r0, [pc, #52]	; (22878 <k_work_cancel_delayable+0x9c>)
   22842:	f7fe ff7b 	bl	2173c <z_spin_unlock_valid>
   22846:	b958      	cbnz	r0, 22860 <k_work_cancel_delayable+0x84>
   22848:	23c2      	movs	r3, #194	; 0xc2
   2284a:	4a0c      	ldr	r2, [pc, #48]	; (2287c <k_work_cancel_delayable+0xa0>)
   2284c:	490e      	ldr	r1, [pc, #56]	; (22888 <k_work_cancel_delayable+0xac>)
   2284e:	4808      	ldr	r0, [pc, #32]	; (22870 <k_work_cancel_delayable+0x94>)
   22850:	f004 fa8f 	bl	26d72 <assert_print>
   22854:	4908      	ldr	r1, [pc, #32]	; (22878 <k_work_cancel_delayable+0x9c>)
   22856:	480d      	ldr	r0, [pc, #52]	; (2288c <k_work_cancel_delayable+0xb0>)
   22858:	f004 fa8b 	bl	26d72 <assert_print>
   2285c:	21c2      	movs	r1, #194	; 0xc2
   2285e:	e7e3      	b.n	22828 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   22860:	f385 8811 	msr	BASEPRI, r5
   22864:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   22868:	4620      	mov	r0, r4
   2286a:	bd38      	pop	{r3, r4, r5, pc}
   2286c:	00033539 	.word	0x00033539
   22870:	0002dd81 	.word	0x0002dd81
   22874:	00033463 	.word	0x00033463
   22878:	20021a58 	.word	0x20021a58
   2287c:	0002ebe3 	.word	0x0002ebe3
   22880:	0002ec3c 	.word	0x0002ec3c
   22884:	0002ec51 	.word	0x0002ec51
   22888:	0002ec10 	.word	0x0002ec10
   2288c:	0002ec27 	.word	0x0002ec27

00022890 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   22890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22894:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   22896:	4605      	mov	r5, r0
   22898:	b958      	cbnz	r0, 228b2 <k_work_cancel_delayable_sync+0x22>
   2289a:	493a      	ldr	r1, [pc, #232]	; (22984 <k_work_cancel_delayable_sync+0xf4>)
   2289c:	f240 430e 	movw	r3, #1038	; 0x40e
   228a0:	4a39      	ldr	r2, [pc, #228]	; (22988 <k_work_cancel_delayable_sync+0xf8>)
   228a2:	483a      	ldr	r0, [pc, #232]	; (2298c <k_work_cancel_delayable_sync+0xfc>)
   228a4:	f004 fa65 	bl	26d72 <assert_print>
   228a8:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   228ac:	4836      	ldr	r0, [pc, #216]	; (22988 <k_work_cancel_delayable_sync+0xf8>)
   228ae:	f004 fa59 	bl	26d64 <assert_post_action>
   228b2:	b949      	cbnz	r1, 228c8 <k_work_cancel_delayable_sync+0x38>
   228b4:	4936      	ldr	r1, [pc, #216]	; (22990 <k_work_cancel_delayable_sync+0x100>)
   228b6:	f240 430f 	movw	r3, #1039	; 0x40f
   228ba:	4a33      	ldr	r2, [pc, #204]	; (22988 <k_work_cancel_delayable_sync+0xf8>)
   228bc:	4833      	ldr	r0, [pc, #204]	; (2298c <k_work_cancel_delayable_sync+0xfc>)
   228be:	f004 fa58 	bl	26d72 <assert_print>
   228c2:	f240 410f 	movw	r1, #1039	; 0x40f
   228c6:	e7f1      	b.n	228ac <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   228c8:	f009 f865 	bl	2b996 <k_is_in_isr>
   228cc:	4604      	mov	r4, r0
   228ce:	b148      	cbz	r0, 228e4 <k_work_cancel_delayable_sync+0x54>
   228d0:	4930      	ldr	r1, [pc, #192]	; (22994 <k_work_cancel_delayable_sync+0x104>)
   228d2:	f44f 6382 	mov.w	r3, #1040	; 0x410
   228d6:	4a2c      	ldr	r2, [pc, #176]	; (22988 <k_work_cancel_delayable_sync+0xf8>)
   228d8:	482c      	ldr	r0, [pc, #176]	; (2298c <k_work_cancel_delayable_sync+0xfc>)
   228da:	f004 fa4a 	bl	26d72 <assert_print>
   228de:	f44f 6182 	mov.w	r1, #1040	; 0x410
   228e2:	e7e3      	b.n	228ac <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   228e4:	f04f 0320 	mov.w	r3, #32
   228e8:	f3ef 8811 	mrs	r8, BASEPRI
   228ec:	f383 8812 	msr	BASEPRI_MAX, r3
   228f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228f4:	4828      	ldr	r0, [pc, #160]	; (22998 <k_work_cancel_delayable_sync+0x108>)
   228f6:	f7fe ff13 	bl	21720 <z_spin_lock_valid>
   228fa:	b960      	cbnz	r0, 22916 <k_work_cancel_delayable_sync+0x86>
   228fc:	2394      	movs	r3, #148	; 0x94
   228fe:	4a27      	ldr	r2, [pc, #156]	; (2299c <k_work_cancel_delayable_sync+0x10c>)
   22900:	4927      	ldr	r1, [pc, #156]	; (229a0 <k_work_cancel_delayable_sync+0x110>)
   22902:	4822      	ldr	r0, [pc, #136]	; (2298c <k_work_cancel_delayable_sync+0xfc>)
   22904:	f004 fa35 	bl	26d72 <assert_print>
   22908:	4923      	ldr	r1, [pc, #140]	; (22998 <k_work_cancel_delayable_sync+0x108>)
   2290a:	4826      	ldr	r0, [pc, #152]	; (229a4 <k_work_cancel_delayable_sync+0x114>)
   2290c:	f004 fa31 	bl	26d72 <assert_print>
   22910:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22912:	4822      	ldr	r0, [pc, #136]	; (2299c <k_work_cancel_delayable_sync+0x10c>)
   22914:	e7cb      	b.n	228ae <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   22916:	4820      	ldr	r0, [pc, #128]	; (22998 <k_work_cancel_delayable_sync+0x108>)
   22918:	f7fe ff1e 	bl	21758 <z_spin_lock_set_owner>
	return *flagp;
   2291c:	68eb      	ldr	r3, [r5, #12]
   2291e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   22922:	2b00      	cmp	r3, #0
   22924:	bf14      	ite	ne
   22926:	2701      	movne	r7, #1
   22928:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2292a:	d00a      	beq.n	22942 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   2292c:	4628      	mov	r0, r5
   2292e:	f009 f89e 	bl	2ba6e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22932:	4628      	mov	r0, r5
   22934:	f009 f8b0 	bl	2ba98 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   22938:	4631      	mov	r1, r6
   2293a:	4628      	mov	r0, r5
   2293c:	f7ff fb74 	bl	22028 <cancel_sync_locked>
   22940:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22942:	4815      	ldr	r0, [pc, #84]	; (22998 <k_work_cancel_delayable_sync+0x108>)
   22944:	f7fe fefa 	bl	2173c <z_spin_unlock_valid>
   22948:	b958      	cbnz	r0, 22962 <k_work_cancel_delayable_sync+0xd2>
   2294a:	23c2      	movs	r3, #194	; 0xc2
   2294c:	4a13      	ldr	r2, [pc, #76]	; (2299c <k_work_cancel_delayable_sync+0x10c>)
   2294e:	4916      	ldr	r1, [pc, #88]	; (229a8 <k_work_cancel_delayable_sync+0x118>)
   22950:	480e      	ldr	r0, [pc, #56]	; (2298c <k_work_cancel_delayable_sync+0xfc>)
   22952:	f004 fa0e 	bl	26d72 <assert_print>
   22956:	4910      	ldr	r1, [pc, #64]	; (22998 <k_work_cancel_delayable_sync+0x108>)
   22958:	4814      	ldr	r0, [pc, #80]	; (229ac <k_work_cancel_delayable_sync+0x11c>)
   2295a:	f004 fa0a 	bl	26d72 <assert_print>
   2295e:	21c2      	movs	r1, #194	; 0xc2
   22960:	e7d7      	b.n	22912 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   22962:	f388 8811 	msr	BASEPRI, r8
   22966:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2296a:	b13c      	cbz	r4, 2297c <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   2296c:	f04f 32ff 	mov.w	r2, #4294967295
   22970:	f04f 33ff 	mov.w	r3, #4294967295
   22974:	f106 0008 	add.w	r0, r6, #8
   22978:	f7ff f9ce 	bl	21d18 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2297c:	4638      	mov	r0, r7
   2297e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22982:	bf00      	nop
   22984:	00033539 	.word	0x00033539
   22988:	00033463 	.word	0x00033463
   2298c:	0002dd81 	.word	0x0002dd81
   22990:	000334e5 	.word	0x000334e5
   22994:	00030e16 	.word	0x00030e16
   22998:	20021a58 	.word	0x20021a58
   2299c:	0002ebe3 	.word	0x0002ebe3
   229a0:	0002ec3c 	.word	0x0002ec3c
   229a4:	0002ec51 	.word	0x0002ec51
   229a8:	0002ec10 	.word	0x0002ec10
   229ac:	0002ec27 	.word	0x0002ec27

000229b0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   229b0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   229b2:	4d07      	ldr	r5, [pc, #28]	; (229d0 <z_reset_time_slice+0x20>)
   229b4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   229b6:	b154      	cbz	r4, 229ce <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   229b8:	f7fb fc46 	bl	1e248 <sys_clock_elapsed>
   229bc:	4b05      	ldr	r3, [pc, #20]	; (229d4 <z_reset_time_slice+0x24>)
   229be:	4404      	add	r4, r0
   229c0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   229c2:	6828      	ldr	r0, [r5, #0]
   229c4:	2100      	movs	r1, #0
	}
}
   229c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   229ca:	f001 bb87 	b.w	240dc <z_set_timeout_expiry>
}
   229ce:	bd38      	pop	{r3, r4, r5, pc}
   229d0:	20021a64 	.word	0x20021a64
   229d4:	20021a20 	.word	0x20021a20

000229d8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   229d8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   229da:	4d14      	ldr	r5, [pc, #80]	; (22a2c <update_cache+0x54>)
   229dc:	462b      	mov	r3, r5
   229de:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   229e2:	429c      	cmp	r4, r3
   229e4:	d000      	beq.n	229e8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   229e6:	b904      	cbnz	r4, 229ea <update_cache+0x12>
   229e8:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   229ea:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   229ec:	b9a8      	cbnz	r0, 22a1a <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   229ee:	b963      	cbnz	r3, 22a0a <update_cache+0x32>
   229f0:	490f      	ldr	r1, [pc, #60]	; (22a30 <update_cache+0x58>)
   229f2:	2389      	movs	r3, #137	; 0x89
   229f4:	4a0f      	ldr	r2, [pc, #60]	; (22a34 <update_cache+0x5c>)
   229f6:	4810      	ldr	r0, [pc, #64]	; (22a38 <update_cache+0x60>)
   229f8:	f004 f9bb 	bl	26d72 <assert_print>
   229fc:	480f      	ldr	r0, [pc, #60]	; (22a3c <update_cache+0x64>)
   229fe:	f004 f9b8 	bl	26d72 <assert_print>
   22a02:	2189      	movs	r1, #137	; 0x89
   22a04:	480b      	ldr	r0, [pc, #44]	; (22a34 <update_cache+0x5c>)
   22a06:	f004 f9ad 	bl	26d64 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   22a0a:	7b5a      	ldrb	r2, [r3, #13]
   22a0c:	06d2      	lsls	r2, r2, #27
   22a0e:	d104      	bne.n	22a1a <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22a10:	69a2      	ldr	r2, [r4, #24]
   22a12:	b912      	cbnz	r2, 22a1a <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   22a14:	89da      	ldrh	r2, [r3, #14]
   22a16:	2a7f      	cmp	r2, #127	; 0x7f
   22a18:	d805      	bhi.n	22a26 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   22a1a:	429c      	cmp	r4, r3
   22a1c:	d002      	beq.n	22a24 <update_cache+0x4c>
			z_reset_time_slice(thread);
   22a1e:	4620      	mov	r0, r4
   22a20:	f7ff ffc6 	bl	229b0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   22a24:	4623      	mov	r3, r4
   22a26:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   22a28:	bd38      	pop	{r3, r4, r5, pc}
   22a2a:	bf00      	nop
   22a2c:	20021a20 	.word	0x20021a20
   22a30:	00033570 	.word	0x00033570
   22a34:	0003354e 	.word	0x0003354e
   22a38:	0002dd81 	.word	0x0002dd81
   22a3c:	00031dba 	.word	0x00031dba

00022a40 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   22a40:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22a42:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   22a46:	7b42      	ldrb	r2, [r0, #13]
   22a48:	2b00      	cmp	r3, #0
   22a4a:	db38      	blt.n	22abe <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22a4c:	06d3      	lsls	r3, r2, #27
   22a4e:	d136      	bne.n	22abe <ready_thread+0x7e>
	return node->next != NULL;
   22a50:	6983      	ldr	r3, [r0, #24]
   22a52:	2b00      	cmp	r3, #0
   22a54:	d133      	bne.n	22abe <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   22a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
   22a5a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22a5c:	4a18      	ldr	r2, [pc, #96]	; (22ac0 <ready_thread+0x80>)
   22a5e:	4290      	cmp	r0, r2
   22a60:	d109      	bne.n	22a76 <ready_thread+0x36>
   22a62:	4918      	ldr	r1, [pc, #96]	; (22ac4 <ready_thread+0x84>)
   22a64:	4818      	ldr	r0, [pc, #96]	; (22ac8 <ready_thread+0x88>)
   22a66:	23ba      	movs	r3, #186	; 0xba
   22a68:	4a18      	ldr	r2, [pc, #96]	; (22acc <ready_thread+0x8c>)
   22a6a:	f004 f982 	bl	26d72 <assert_print>
   22a6e:	21ba      	movs	r1, #186	; 0xba
   22a70:	4816      	ldr	r0, [pc, #88]	; (22acc <ready_thread+0x8c>)
   22a72:	f004 f977 	bl	26d64 <assert_post_action>
	return list->head == list;
   22a76:	4916      	ldr	r1, [pc, #88]	; (22ad0 <ready_thread+0x90>)
   22a78:	460a      	mov	r2, r1
   22a7a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a7e:	4294      	cmp	r4, r2
   22a80:	bf18      	it	ne
   22a82:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   22a84:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a86:	b923      	cbnz	r3, 22a92 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   22a88:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   22a8c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   22a8e:	6248      	str	r0, [r1, #36]	; 0x24
}
   22a90:	e00c      	b.n	22aac <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   22a92:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22a96:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   22a9a:	42b5      	cmp	r5, r6
   22a9c:	d00b      	beq.n	22ab6 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22a9e:	42ae      	cmp	r6, r5
   22aa0:	dd09      	ble.n	22ab6 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   22aa2:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   22aa4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   22aa8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   22aaa:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   22aac:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   22aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   22ab2:	f7ff bf91 	b.w	229d8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22ab6:	42a3      	cmp	r3, r4
   22ab8:	d0e6      	beq.n	22a88 <ready_thread+0x48>
   22aba:	681b      	ldr	r3, [r3, #0]
   22abc:	e7e3      	b.n	22a86 <ready_thread+0x46>
}
   22abe:	bd70      	pop	{r4, r5, r6, pc}
   22ac0:	2000a108 	.word	0x2000a108
   22ac4:	00033597 	.word	0x00033597
   22ac8:	0002dd81 	.word	0x0002dd81
   22acc:	0003354e 	.word	0x0003354e
   22ad0:	20021a20 	.word	0x20021a20

00022ad4 <k_sched_time_slice_set>:
{
   22ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ad6:	4604      	mov	r4, r0
   22ad8:	460d      	mov	r5, r1
	__asm__ volatile(
   22ada:	f04f 0320 	mov.w	r3, #32
   22ade:	f3ef 8711 	mrs	r7, BASEPRI
   22ae2:	f383 8812 	msr	BASEPRI_MAX, r3
   22ae6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22aea:	4822      	ldr	r0, [pc, #136]	; (22b74 <k_sched_time_slice_set+0xa0>)
   22aec:	f7fe fe18 	bl	21720 <z_spin_lock_valid>
   22af0:	b968      	cbnz	r0, 22b0e <k_sched_time_slice_set+0x3a>
   22af2:	2394      	movs	r3, #148	; 0x94
   22af4:	4a20      	ldr	r2, [pc, #128]	; (22b78 <k_sched_time_slice_set+0xa4>)
   22af6:	4921      	ldr	r1, [pc, #132]	; (22b7c <k_sched_time_slice_set+0xa8>)
   22af8:	4821      	ldr	r0, [pc, #132]	; (22b80 <k_sched_time_slice_set+0xac>)
   22afa:	f004 f93a 	bl	26d72 <assert_print>
   22afe:	491d      	ldr	r1, [pc, #116]	; (22b74 <k_sched_time_slice_set+0xa0>)
   22b00:	4820      	ldr	r0, [pc, #128]	; (22b84 <k_sched_time_slice_set+0xb0>)
   22b02:	f004 f936 	bl	26d72 <assert_print>
   22b06:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b08:	481b      	ldr	r0, [pc, #108]	; (22b78 <k_sched_time_slice_set+0xa4>)
   22b0a:	f004 f92b 	bl	26d64 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   22b0e:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   22b10:	4818      	ldr	r0, [pc, #96]	; (22b74 <k_sched_time_slice_set+0xa0>)
   22b12:	f7fe fe21 	bl	21758 <z_spin_lock_set_owner>
   22b16:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   22b1a:	f240 30e7 	movw	r0, #999	; 0x3e7
   22b1e:	4631      	mov	r1, r6
   22b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22b24:	2300      	movs	r3, #0
   22b26:	fbe4 010c 	umlal	r0, r1, r4, ip
   22b2a:	f7e6 f9e1 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   22b2e:	42b4      	cmp	r4, r6
   22b30:	dd02      	ble.n	22b38 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   22b32:	2802      	cmp	r0, #2
   22b34:	bfb8      	it	lt
   22b36:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   22b38:	4a13      	ldr	r2, [pc, #76]	; (22b88 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   22b3a:	4b14      	ldr	r3, [pc, #80]	; (22b8c <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   22b3c:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   22b3e:	4a14      	ldr	r2, [pc, #80]	; (22b90 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   22b40:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   22b42:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   22b44:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   22b46:	f7ff ff33 	bl	229b0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b4a:	480a      	ldr	r0, [pc, #40]	; (22b74 <k_sched_time_slice_set+0xa0>)
   22b4c:	f7fe fdf6 	bl	2173c <z_spin_unlock_valid>
   22b50:	b958      	cbnz	r0, 22b6a <k_sched_time_slice_set+0x96>
   22b52:	23c2      	movs	r3, #194	; 0xc2
   22b54:	4a08      	ldr	r2, [pc, #32]	; (22b78 <k_sched_time_slice_set+0xa4>)
   22b56:	490f      	ldr	r1, [pc, #60]	; (22b94 <k_sched_time_slice_set+0xc0>)
   22b58:	4809      	ldr	r0, [pc, #36]	; (22b80 <k_sched_time_slice_set+0xac>)
   22b5a:	f004 f90a 	bl	26d72 <assert_print>
   22b5e:	4905      	ldr	r1, [pc, #20]	; (22b74 <k_sched_time_slice_set+0xa0>)
   22b60:	480d      	ldr	r0, [pc, #52]	; (22b98 <k_sched_time_slice_set+0xc4>)
   22b62:	f004 f906 	bl	26d72 <assert_print>
   22b66:	21c2      	movs	r1, #194	; 0xc2
   22b68:	e7ce      	b.n	22b08 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   22b6a:	f387 8811 	msr	BASEPRI, r7
   22b6e:	f3bf 8f6f 	isb	sy
}
   22b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b74:	20021a68 	.word	0x20021a68
   22b78:	0002ebe3 	.word	0x0002ebe3
   22b7c:	0002ec3c 	.word	0x0002ec3c
   22b80:	0002dd81 	.word	0x0002dd81
   22b84:	0002ec51 	.word	0x0002ec51
   22b88:	20021a64 	.word	0x20021a64
   22b8c:	20021a20 	.word	0x20021a20
   22b90:	20021a60 	.word	0x20021a60
   22b94:	0002ec10 	.word	0x0002ec10
   22b98:	0002ec27 	.word	0x0002ec27

00022b9c <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   22b9c:	b538      	push	{r3, r4, r5, lr}
   22b9e:	4604      	mov	r4, r0
	__asm__ volatile(
   22ba0:	f04f 0320 	mov.w	r3, #32
   22ba4:	f3ef 8511 	mrs	r5, BASEPRI
   22ba8:	f383 8812 	msr	BASEPRI_MAX, r3
   22bac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bb0:	4816      	ldr	r0, [pc, #88]	; (22c0c <z_ready_thread+0x70>)
   22bb2:	f7fe fdb5 	bl	21720 <z_spin_lock_valid>
   22bb6:	b968      	cbnz	r0, 22bd4 <z_ready_thread+0x38>
   22bb8:	2394      	movs	r3, #148	; 0x94
   22bba:	4a15      	ldr	r2, [pc, #84]	; (22c10 <z_ready_thread+0x74>)
   22bbc:	4915      	ldr	r1, [pc, #84]	; (22c14 <z_ready_thread+0x78>)
   22bbe:	4816      	ldr	r0, [pc, #88]	; (22c18 <z_ready_thread+0x7c>)
   22bc0:	f004 f8d7 	bl	26d72 <assert_print>
   22bc4:	4911      	ldr	r1, [pc, #68]	; (22c0c <z_ready_thread+0x70>)
   22bc6:	4815      	ldr	r0, [pc, #84]	; (22c1c <z_ready_thread+0x80>)
   22bc8:	f004 f8d3 	bl	26d72 <assert_print>
   22bcc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bce:	4810      	ldr	r0, [pc, #64]	; (22c10 <z_ready_thread+0x74>)
   22bd0:	f004 f8c8 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   22bd4:	480d      	ldr	r0, [pc, #52]	; (22c0c <z_ready_thread+0x70>)
   22bd6:	f7fe fdbf 	bl	21758 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   22bda:	4620      	mov	r0, r4
   22bdc:	f7ff ff30 	bl	22a40 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22be0:	480a      	ldr	r0, [pc, #40]	; (22c0c <z_ready_thread+0x70>)
   22be2:	f7fe fdab 	bl	2173c <z_spin_unlock_valid>
   22be6:	b958      	cbnz	r0, 22c00 <z_ready_thread+0x64>
   22be8:	23c2      	movs	r3, #194	; 0xc2
   22bea:	4a09      	ldr	r2, [pc, #36]	; (22c10 <z_ready_thread+0x74>)
   22bec:	490c      	ldr	r1, [pc, #48]	; (22c20 <z_ready_thread+0x84>)
   22bee:	480a      	ldr	r0, [pc, #40]	; (22c18 <z_ready_thread+0x7c>)
   22bf0:	f004 f8bf 	bl	26d72 <assert_print>
   22bf4:	4905      	ldr	r1, [pc, #20]	; (22c0c <z_ready_thread+0x70>)
   22bf6:	480b      	ldr	r0, [pc, #44]	; (22c24 <z_ready_thread+0x88>)
   22bf8:	f004 f8bb 	bl	26d72 <assert_print>
   22bfc:	21c2      	movs	r1, #194	; 0xc2
   22bfe:	e7e6      	b.n	22bce <z_ready_thread+0x32>
	__asm__ volatile(
   22c00:	f385 8811 	msr	BASEPRI, r5
   22c04:	f3bf 8f6f 	isb	sy
		}
	}
}
   22c08:	bd38      	pop	{r3, r4, r5, pc}
   22c0a:	bf00      	nop
   22c0c:	20021a68 	.word	0x20021a68
   22c10:	0002ebe3 	.word	0x0002ebe3
   22c14:	0002ec3c 	.word	0x0002ec3c
   22c18:	0002dd81 	.word	0x0002dd81
   22c1c:	0002ec51 	.word	0x0002ec51
   22c20:	0002ec10 	.word	0x0002ec10
   22c24:	0002ec27 	.word	0x0002ec27

00022c28 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   22c28:	b538      	push	{r3, r4, r5, lr}
   22c2a:	4604      	mov	r4, r0
	__asm__ volatile(
   22c2c:	f04f 0320 	mov.w	r3, #32
   22c30:	f3ef 8511 	mrs	r5, BASEPRI
   22c34:	f383 8812 	msr	BASEPRI_MAX, r3
   22c38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c3c:	4816      	ldr	r0, [pc, #88]	; (22c98 <z_unpend_thread_no_timeout+0x70>)
   22c3e:	f7fe fd6f 	bl	21720 <z_spin_lock_valid>
   22c42:	b968      	cbnz	r0, 22c60 <z_unpend_thread_no_timeout+0x38>
   22c44:	2394      	movs	r3, #148	; 0x94
   22c46:	4a15      	ldr	r2, [pc, #84]	; (22c9c <z_unpend_thread_no_timeout+0x74>)
   22c48:	4915      	ldr	r1, [pc, #84]	; (22ca0 <z_unpend_thread_no_timeout+0x78>)
   22c4a:	4816      	ldr	r0, [pc, #88]	; (22ca4 <z_unpend_thread_no_timeout+0x7c>)
   22c4c:	f004 f891 	bl	26d72 <assert_print>
   22c50:	4911      	ldr	r1, [pc, #68]	; (22c98 <z_unpend_thread_no_timeout+0x70>)
   22c52:	4815      	ldr	r0, [pc, #84]	; (22ca8 <z_unpend_thread_no_timeout+0x80>)
   22c54:	f004 f88d 	bl	26d72 <assert_print>
   22c58:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c5a:	4810      	ldr	r0, [pc, #64]	; (22c9c <z_unpend_thread_no_timeout+0x74>)
   22c5c:	f004 f882 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   22c60:	480d      	ldr	r0, [pc, #52]	; (22c98 <z_unpend_thread_no_timeout+0x70>)
   22c62:	f7fe fd79 	bl	21758 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   22c66:	4620      	mov	r0, r4
   22c68:	f000 fc62 	bl	23530 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c6c:	480a      	ldr	r0, [pc, #40]	; (22c98 <z_unpend_thread_no_timeout+0x70>)
   22c6e:	f7fe fd65 	bl	2173c <z_spin_unlock_valid>
   22c72:	b958      	cbnz	r0, 22c8c <z_unpend_thread_no_timeout+0x64>
   22c74:	23c2      	movs	r3, #194	; 0xc2
   22c76:	4a09      	ldr	r2, [pc, #36]	; (22c9c <z_unpend_thread_no_timeout+0x74>)
   22c78:	490c      	ldr	r1, [pc, #48]	; (22cac <z_unpend_thread_no_timeout+0x84>)
   22c7a:	480a      	ldr	r0, [pc, #40]	; (22ca4 <z_unpend_thread_no_timeout+0x7c>)
   22c7c:	f004 f879 	bl	26d72 <assert_print>
   22c80:	4905      	ldr	r1, [pc, #20]	; (22c98 <z_unpend_thread_no_timeout+0x70>)
   22c82:	480b      	ldr	r0, [pc, #44]	; (22cb0 <z_unpend_thread_no_timeout+0x88>)
   22c84:	f004 f875 	bl	26d72 <assert_print>
   22c88:	21c2      	movs	r1, #194	; 0xc2
   22c8a:	e7e6      	b.n	22c5a <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   22c8c:	f385 8811 	msr	BASEPRI, r5
   22c90:	f3bf 8f6f 	isb	sy
	}
}
   22c94:	bd38      	pop	{r3, r4, r5, pc}
   22c96:	bf00      	nop
   22c98:	20021a68 	.word	0x20021a68
   22c9c:	0002ebe3 	.word	0x0002ebe3
   22ca0:	0002ec3c 	.word	0x0002ec3c
   22ca4:	0002dd81 	.word	0x0002dd81
   22ca8:	0002ec51 	.word	0x0002ec51
   22cac:	0002ec10 	.word	0x0002ec10
   22cb0:	0002ec27 	.word	0x0002ec27

00022cb4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   22cb4:	b570      	push	{r4, r5, r6, lr}
   22cb6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22cb8:	460d      	mov	r5, r1
   22cba:	b9e9      	cbnz	r1, 22cf8 <z_reschedule+0x44>
   22cbc:	f3ef 8605 	mrs	r6, IPSR
   22cc0:	b9d6      	cbnz	r6, 22cf8 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   22cc2:	4b18      	ldr	r3, [pc, #96]	; (22d24 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   22cc4:	69da      	ldr	r2, [r3, #28]
   22cc6:	689b      	ldr	r3, [r3, #8]
   22cc8:	429a      	cmp	r2, r3
   22cca:	d015      	beq.n	22cf8 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ccc:	f7fe fd36 	bl	2173c <z_spin_unlock_valid>
   22cd0:	b968      	cbnz	r0, 22cee <z_reschedule+0x3a>
   22cd2:	23e1      	movs	r3, #225	; 0xe1
   22cd4:	4a14      	ldr	r2, [pc, #80]	; (22d28 <z_reschedule+0x74>)
   22cd6:	4915      	ldr	r1, [pc, #84]	; (22d2c <z_reschedule+0x78>)
   22cd8:	4815      	ldr	r0, [pc, #84]	; (22d30 <z_reschedule+0x7c>)
   22cda:	f004 f84a 	bl	26d72 <assert_print>
   22cde:	4621      	mov	r1, r4
   22ce0:	4814      	ldr	r0, [pc, #80]	; (22d34 <z_reschedule+0x80>)
   22ce2:	f004 f846 	bl	26d72 <assert_print>
   22ce6:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ce8:	480f      	ldr	r0, [pc, #60]	; (22d28 <z_reschedule+0x74>)
   22cea:	f004 f83b 	bl	26d64 <assert_post_action>
	ret = arch_swap(key);
   22cee:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   22cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22cf4:	f7ed bf76 	b.w	10be4 <arch_swap>
   22cf8:	4620      	mov	r0, r4
   22cfa:	f7fe fd1f 	bl	2173c <z_spin_unlock_valid>
   22cfe:	b958      	cbnz	r0, 22d18 <z_reschedule+0x64>
   22d00:	23c2      	movs	r3, #194	; 0xc2
   22d02:	4a09      	ldr	r2, [pc, #36]	; (22d28 <z_reschedule+0x74>)
   22d04:	4909      	ldr	r1, [pc, #36]	; (22d2c <z_reschedule+0x78>)
   22d06:	480a      	ldr	r0, [pc, #40]	; (22d30 <z_reschedule+0x7c>)
   22d08:	f004 f833 	bl	26d72 <assert_print>
   22d0c:	4621      	mov	r1, r4
   22d0e:	4809      	ldr	r0, [pc, #36]	; (22d34 <z_reschedule+0x80>)
   22d10:	f004 f82f 	bl	26d72 <assert_print>
   22d14:	21c2      	movs	r1, #194	; 0xc2
   22d16:	e7e7      	b.n	22ce8 <z_reschedule+0x34>
   22d18:	f385 8811 	msr	BASEPRI, r5
   22d1c:	f3bf 8f6f 	isb	sy
   22d20:	bd70      	pop	{r4, r5, r6, pc}
   22d22:	bf00      	nop
   22d24:	20021a20 	.word	0x20021a20
   22d28:	0002ebe3 	.word	0x0002ebe3
   22d2c:	0002ec10 	.word	0x0002ec10
   22d30:	0002dd81 	.word	0x0002dd81
   22d34:	0002ec27 	.word	0x0002ec27

00022d38 <z_sched_start>:
{
   22d38:	b538      	push	{r3, r4, r5, lr}
   22d3a:	4604      	mov	r4, r0
	__asm__ volatile(
   22d3c:	f04f 0320 	mov.w	r3, #32
   22d40:	f3ef 8511 	mrs	r5, BASEPRI
   22d44:	f383 8812 	msr	BASEPRI_MAX, r3
   22d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d4c:	481c      	ldr	r0, [pc, #112]	; (22dc0 <z_sched_start+0x88>)
   22d4e:	f7fe fce7 	bl	21720 <z_spin_lock_valid>
   22d52:	b968      	cbnz	r0, 22d70 <z_sched_start+0x38>
   22d54:	2394      	movs	r3, #148	; 0x94
   22d56:	4a1b      	ldr	r2, [pc, #108]	; (22dc4 <z_sched_start+0x8c>)
   22d58:	491b      	ldr	r1, [pc, #108]	; (22dc8 <z_sched_start+0x90>)
   22d5a:	481c      	ldr	r0, [pc, #112]	; (22dcc <z_sched_start+0x94>)
   22d5c:	f004 f809 	bl	26d72 <assert_print>
   22d60:	4917      	ldr	r1, [pc, #92]	; (22dc0 <z_sched_start+0x88>)
   22d62:	481b      	ldr	r0, [pc, #108]	; (22dd0 <z_sched_start+0x98>)
   22d64:	f004 f805 	bl	26d72 <assert_print>
   22d68:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d6a:	4816      	ldr	r0, [pc, #88]	; (22dc4 <z_sched_start+0x8c>)
   22d6c:	f003 fffa 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d70:	4813      	ldr	r0, [pc, #76]	; (22dc0 <z_sched_start+0x88>)
   22d72:	f7fe fcf1 	bl	21758 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   22d76:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   22d78:	075a      	lsls	r2, r3, #29
   22d7a:	d414      	bmi.n	22da6 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d7c:	4810      	ldr	r0, [pc, #64]	; (22dc0 <z_sched_start+0x88>)
   22d7e:	f7fe fcdd 	bl	2173c <z_spin_unlock_valid>
   22d82:	b958      	cbnz	r0, 22d9c <z_sched_start+0x64>
   22d84:	23c2      	movs	r3, #194	; 0xc2
   22d86:	4a0f      	ldr	r2, [pc, #60]	; (22dc4 <z_sched_start+0x8c>)
   22d88:	4912      	ldr	r1, [pc, #72]	; (22dd4 <z_sched_start+0x9c>)
   22d8a:	4810      	ldr	r0, [pc, #64]	; (22dcc <z_sched_start+0x94>)
   22d8c:	f003 fff1 	bl	26d72 <assert_print>
   22d90:	490b      	ldr	r1, [pc, #44]	; (22dc0 <z_sched_start+0x88>)
   22d92:	4811      	ldr	r0, [pc, #68]	; (22dd8 <z_sched_start+0xa0>)
   22d94:	f003 ffed 	bl	26d72 <assert_print>
   22d98:	21c2      	movs	r1, #194	; 0xc2
   22d9a:	e7e6      	b.n	22d6a <z_sched_start+0x32>
	__asm__ volatile(
   22d9c:	f385 8811 	msr	BASEPRI, r5
   22da0:	f3bf 8f6f 	isb	sy
}
   22da4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22da6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   22daa:	4620      	mov	r0, r4
   22dac:	7363      	strb	r3, [r4, #13]
   22dae:	f7ff fe47 	bl	22a40 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   22db2:	4629      	mov	r1, r5
}
   22db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   22db8:	4801      	ldr	r0, [pc, #4]	; (22dc0 <z_sched_start+0x88>)
   22dba:	f7ff bf7b 	b.w	22cb4 <z_reschedule>
   22dbe:	bf00      	nop
   22dc0:	20021a68 	.word	0x20021a68
   22dc4:	0002ebe3 	.word	0x0002ebe3
   22dc8:	0002ec3c 	.word	0x0002ec3c
   22dcc:	0002dd81 	.word	0x0002dd81
   22dd0:	0002ec51 	.word	0x0002ec51
   22dd4:	0002ec10 	.word	0x0002ec10
   22dd8:	0002ec27 	.word	0x0002ec27

00022ddc <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   22ddc:	b510      	push	{r4, lr}
	__asm__ volatile(
   22dde:	f04f 0320 	mov.w	r3, #32
   22de2:	f3ef 8411 	mrs	r4, BASEPRI
   22de6:	f383 8812 	msr	BASEPRI_MAX, r3
   22dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22dee:	4825      	ldr	r0, [pc, #148]	; (22e84 <k_sched_lock+0xa8>)
   22df0:	f7fe fc96 	bl	21720 <z_spin_lock_valid>
   22df4:	b960      	cbnz	r0, 22e10 <k_sched_lock+0x34>
   22df6:	2394      	movs	r3, #148	; 0x94
   22df8:	4a23      	ldr	r2, [pc, #140]	; (22e88 <k_sched_lock+0xac>)
   22dfa:	4924      	ldr	r1, [pc, #144]	; (22e8c <k_sched_lock+0xb0>)
   22dfc:	4824      	ldr	r0, [pc, #144]	; (22e90 <k_sched_lock+0xb4>)
   22dfe:	f003 ffb8 	bl	26d72 <assert_print>
   22e02:	4920      	ldr	r1, [pc, #128]	; (22e84 <k_sched_lock+0xa8>)
   22e04:	4823      	ldr	r0, [pc, #140]	; (22e94 <k_sched_lock+0xb8>)
   22e06:	f003 ffb4 	bl	26d72 <assert_print>
   22e0a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e0c:	481e      	ldr	r0, [pc, #120]	; (22e88 <k_sched_lock+0xac>)
   22e0e:	e010      	b.n	22e32 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   22e10:	481c      	ldr	r0, [pc, #112]	; (22e84 <k_sched_lock+0xa8>)
   22e12:	f7fe fca1 	bl	21758 <z_spin_lock_set_owner>
   22e16:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   22e1a:	b163      	cbz	r3, 22e36 <k_sched_lock+0x5a>
   22e1c:	491e      	ldr	r1, [pc, #120]	; (22e98 <k_sched_lock+0xbc>)
   22e1e:	23fd      	movs	r3, #253	; 0xfd
   22e20:	4a1e      	ldr	r2, [pc, #120]	; (22e9c <k_sched_lock+0xc0>)
   22e22:	481b      	ldr	r0, [pc, #108]	; (22e90 <k_sched_lock+0xb4>)
   22e24:	f003 ffa5 	bl	26d72 <assert_print>
   22e28:	481d      	ldr	r0, [pc, #116]	; (22ea0 <k_sched_lock+0xc4>)
   22e2a:	f003 ffa2 	bl	26d72 <assert_print>
   22e2e:	21fd      	movs	r1, #253	; 0xfd
   22e30:	481a      	ldr	r0, [pc, #104]	; (22e9c <k_sched_lock+0xc0>)
   22e32:	f003 ff97 	bl	26d64 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   22e36:	4b1b      	ldr	r3, [pc, #108]	; (22ea4 <k_sched_lock+0xc8>)
   22e38:	689a      	ldr	r2, [r3, #8]
   22e3a:	7bd3      	ldrb	r3, [r2, #15]
   22e3c:	2b01      	cmp	r3, #1
   22e3e:	d10a      	bne.n	22e56 <k_sched_lock+0x7a>
   22e40:	4919      	ldr	r1, [pc, #100]	; (22ea8 <k_sched_lock+0xcc>)
   22e42:	23fe      	movs	r3, #254	; 0xfe
   22e44:	4a15      	ldr	r2, [pc, #84]	; (22e9c <k_sched_lock+0xc0>)
   22e46:	4812      	ldr	r0, [pc, #72]	; (22e90 <k_sched_lock+0xb4>)
   22e48:	f003 ff93 	bl	26d72 <assert_print>
   22e4c:	4814      	ldr	r0, [pc, #80]	; (22ea0 <k_sched_lock+0xc4>)
   22e4e:	f003 ff90 	bl	26d72 <assert_print>
   22e52:	21fe      	movs	r1, #254	; 0xfe
   22e54:	e7ec      	b.n	22e30 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   22e56:	3b01      	subs	r3, #1
   22e58:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e5a:	480a      	ldr	r0, [pc, #40]	; (22e84 <k_sched_lock+0xa8>)
   22e5c:	f7fe fc6e 	bl	2173c <z_spin_unlock_valid>
   22e60:	b958      	cbnz	r0, 22e7a <k_sched_lock+0x9e>
   22e62:	23c2      	movs	r3, #194	; 0xc2
   22e64:	4a08      	ldr	r2, [pc, #32]	; (22e88 <k_sched_lock+0xac>)
   22e66:	4911      	ldr	r1, [pc, #68]	; (22eac <k_sched_lock+0xd0>)
   22e68:	4809      	ldr	r0, [pc, #36]	; (22e90 <k_sched_lock+0xb4>)
   22e6a:	f003 ff82 	bl	26d72 <assert_print>
   22e6e:	4905      	ldr	r1, [pc, #20]	; (22e84 <k_sched_lock+0xa8>)
   22e70:	480f      	ldr	r0, [pc, #60]	; (22eb0 <k_sched_lock+0xd4>)
   22e72:	f003 ff7e 	bl	26d72 <assert_print>
   22e76:	21c2      	movs	r1, #194	; 0xc2
   22e78:	e7c8      	b.n	22e0c <k_sched_lock+0x30>
	__asm__ volatile(
   22e7a:	f384 8811 	msr	BASEPRI, r4
   22e7e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   22e82:	bd10      	pop	{r4, pc}
   22e84:	20021a68 	.word	0x20021a68
   22e88:	0002ebe3 	.word	0x0002ebe3
   22e8c:	0002ec3c 	.word	0x0002ec3c
   22e90:	0002dd81 	.word	0x0002dd81
   22e94:	0002ec51 	.word	0x0002ec51
   22e98:	000332e1 	.word	0x000332e1
   22e9c:	000335b8 	.word	0x000335b8
   22ea0:	00031dba 	.word	0x00031dba
   22ea4:	20021a20 	.word	0x20021a20
   22ea8:	000335e3 	.word	0x000335e3
   22eac:	0002ec10 	.word	0x0002ec10
   22eb0:	0002ec27 	.word	0x0002ec27

00022eb4 <k_sched_unlock>:

void k_sched_unlock(void)
{
   22eb4:	b510      	push	{r4, lr}
	__asm__ volatile(
   22eb6:	f04f 0320 	mov.w	r3, #32
   22eba:	f3ef 8411 	mrs	r4, BASEPRI
   22ebe:	f383 8812 	msr	BASEPRI_MAX, r3
   22ec2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ec6:	4829      	ldr	r0, [pc, #164]	; (22f6c <k_sched_unlock+0xb8>)
   22ec8:	f7fe fc2a 	bl	21720 <z_spin_lock_valid>
   22ecc:	b960      	cbnz	r0, 22ee8 <k_sched_unlock+0x34>
   22ece:	2394      	movs	r3, #148	; 0x94
   22ed0:	4a27      	ldr	r2, [pc, #156]	; (22f70 <k_sched_unlock+0xbc>)
   22ed2:	4928      	ldr	r1, [pc, #160]	; (22f74 <k_sched_unlock+0xc0>)
   22ed4:	4828      	ldr	r0, [pc, #160]	; (22f78 <k_sched_unlock+0xc4>)
   22ed6:	f003 ff4c 	bl	26d72 <assert_print>
   22eda:	4924      	ldr	r1, [pc, #144]	; (22f6c <k_sched_unlock+0xb8>)
   22edc:	4827      	ldr	r0, [pc, #156]	; (22f7c <k_sched_unlock+0xc8>)
   22ede:	f003 ff48 	bl	26d72 <assert_print>
   22ee2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ee4:	4822      	ldr	r0, [pc, #136]	; (22f70 <k_sched_unlock+0xbc>)
   22ee6:	e013      	b.n	22f10 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   22ee8:	4820      	ldr	r0, [pc, #128]	; (22f6c <k_sched_unlock+0xb8>)
   22eea:	f7fe fc35 	bl	21758 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   22eee:	4b24      	ldr	r3, [pc, #144]	; (22f80 <k_sched_unlock+0xcc>)
   22ef0:	689a      	ldr	r2, [r3, #8]
   22ef2:	7bd3      	ldrb	r3, [r2, #15]
   22ef4:	b973      	cbnz	r3, 22f14 <k_sched_unlock+0x60>
   22ef6:	4923      	ldr	r1, [pc, #140]	; (22f84 <k_sched_unlock+0xd0>)
   22ef8:	f240 33e7 	movw	r3, #999	; 0x3e7
   22efc:	4a22      	ldr	r2, [pc, #136]	; (22f88 <k_sched_unlock+0xd4>)
   22efe:	481e      	ldr	r0, [pc, #120]	; (22f78 <k_sched_unlock+0xc4>)
   22f00:	f003 ff37 	bl	26d72 <assert_print>
   22f04:	4821      	ldr	r0, [pc, #132]	; (22f8c <k_sched_unlock+0xd8>)
   22f06:	f003 ff34 	bl	26d72 <assert_print>
   22f0a:	f240 31e7 	movw	r1, #999	; 0x3e7
   22f0e:	481e      	ldr	r0, [pc, #120]	; (22f88 <k_sched_unlock+0xd4>)
   22f10:	f003 ff28 	bl	26d64 <assert_post_action>
   22f14:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   22f18:	b160      	cbz	r0, 22f34 <k_sched_unlock+0x80>
   22f1a:	491d      	ldr	r1, [pc, #116]	; (22f90 <k_sched_unlock+0xdc>)
   22f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22f20:	4a19      	ldr	r2, [pc, #100]	; (22f88 <k_sched_unlock+0xd4>)
   22f22:	4815      	ldr	r0, [pc, #84]	; (22f78 <k_sched_unlock+0xc4>)
   22f24:	f003 ff25 	bl	26d72 <assert_print>
   22f28:	4818      	ldr	r0, [pc, #96]	; (22f8c <k_sched_unlock+0xd8>)
   22f2a:	f003 ff22 	bl	26d72 <assert_print>
   22f2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   22f32:	e7ec      	b.n	22f0e <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   22f34:	3301      	adds	r3, #1
   22f36:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22f38:	f7ff fd4e 	bl	229d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f3c:	480b      	ldr	r0, [pc, #44]	; (22f6c <k_sched_unlock+0xb8>)
   22f3e:	f7fe fbfd 	bl	2173c <z_spin_unlock_valid>
   22f42:	b958      	cbnz	r0, 22f5c <k_sched_unlock+0xa8>
   22f44:	23c2      	movs	r3, #194	; 0xc2
   22f46:	4a0a      	ldr	r2, [pc, #40]	; (22f70 <k_sched_unlock+0xbc>)
   22f48:	4912      	ldr	r1, [pc, #72]	; (22f94 <k_sched_unlock+0xe0>)
   22f4a:	480b      	ldr	r0, [pc, #44]	; (22f78 <k_sched_unlock+0xc4>)
   22f4c:	f003 ff11 	bl	26d72 <assert_print>
   22f50:	4906      	ldr	r1, [pc, #24]	; (22f6c <k_sched_unlock+0xb8>)
   22f52:	4811      	ldr	r0, [pc, #68]	; (22f98 <k_sched_unlock+0xe4>)
   22f54:	f003 ff0d 	bl	26d72 <assert_print>
   22f58:	21c2      	movs	r1, #194	; 0xc2
   22f5a:	e7c3      	b.n	22ee4 <k_sched_unlock+0x30>
	__asm__ volatile(
   22f5c:	f384 8811 	msr	BASEPRI, r4
   22f60:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   22f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   22f68:	f008 bdf1 	b.w	2bb4e <z_reschedule_unlocked>
   22f6c:	20021a68 	.word	0x20021a68
   22f70:	0002ebe3 	.word	0x0002ebe3
   22f74:	0002ec3c 	.word	0x0002ec3c
   22f78:	0002dd81 	.word	0x0002dd81
   22f7c:	0002ec51 	.word	0x0002ec51
   22f80:	20021a20 	.word	0x20021a20
   22f84:	00033614 	.word	0x00033614
   22f88:	0003354e 	.word	0x0003354e
   22f8c:	00031dba 	.word	0x00031dba
   22f90:	000332e1 	.word	0x000332e1
   22f94:	0002ec10 	.word	0x0002ec10
   22f98:	0002ec27 	.word	0x0002ec27

00022f9c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   22f9c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22f9e:	4b0b      	ldr	r3, [pc, #44]	; (22fcc <z_priq_dumb_remove+0x30>)
   22fa0:	4299      	cmp	r1, r3
   22fa2:	d10b      	bne.n	22fbc <z_priq_dumb_remove+0x20>
   22fa4:	490a      	ldr	r1, [pc, #40]	; (22fd0 <z_priq_dumb_remove+0x34>)
   22fa6:	480b      	ldr	r0, [pc, #44]	; (22fd4 <z_priq_dumb_remove+0x38>)
   22fa8:	f240 4373 	movw	r3, #1139	; 0x473
   22fac:	4a0a      	ldr	r2, [pc, #40]	; (22fd8 <z_priq_dumb_remove+0x3c>)
   22fae:	f003 fee0 	bl	26d72 <assert_print>
   22fb2:	f240 4173 	movw	r1, #1139	; 0x473
   22fb6:	4808      	ldr	r0, [pc, #32]	; (22fd8 <z_priq_dumb_remove+0x3c>)
   22fb8:	f003 fed4 	bl	26d64 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   22fbc:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   22fc0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22fc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22fc4:	2300      	movs	r3, #0
	node->prev = NULL;
   22fc6:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   22fca:	bd08      	pop	{r3, pc}
   22fcc:	2000a108 	.word	0x2000a108
   22fd0:	00033597 	.word	0x00033597
   22fd4:	0002dd81 	.word	0x0002dd81
   22fd8:	0003354e 	.word	0x0003354e

00022fdc <move_thread_to_end_of_prio_q>:
{
   22fdc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22fde:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   22fe2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22fe4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   22fe6:	7b43      	ldrb	r3, [r0, #13]
   22fe8:	da06      	bge.n	22ff8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   22fee:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22ff0:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22ff2:	481d      	ldr	r0, [pc, #116]	; (23068 <move_thread_to_end_of_prio_q+0x8c>)
   22ff4:	f7ff ffd2 	bl	22f9c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22ff8:	7b63      	ldrb	r3, [r4, #13]
   22ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22ffe:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23000:	4b1a      	ldr	r3, [pc, #104]	; (2306c <move_thread_to_end_of_prio_q+0x90>)
   23002:	429c      	cmp	r4, r3
   23004:	d109      	bne.n	2301a <move_thread_to_end_of_prio_q+0x3e>
   23006:	491a      	ldr	r1, [pc, #104]	; (23070 <move_thread_to_end_of_prio_q+0x94>)
   23008:	481a      	ldr	r0, [pc, #104]	; (23074 <move_thread_to_end_of_prio_q+0x98>)
   2300a:	23ba      	movs	r3, #186	; 0xba
   2300c:	4a1a      	ldr	r2, [pc, #104]	; (23078 <move_thread_to_end_of_prio_q+0x9c>)
   2300e:	f003 feb0 	bl	26d72 <assert_print>
   23012:	21ba      	movs	r1, #186	; 0xba
   23014:	4818      	ldr	r0, [pc, #96]	; (23078 <move_thread_to_end_of_prio_q+0x9c>)
   23016:	f003 fea5 	bl	26d64 <assert_post_action>
	return list->head == list;
   2301a:	4a18      	ldr	r2, [pc, #96]	; (2307c <move_thread_to_end_of_prio_q+0xa0>)
   2301c:	4611      	mov	r1, r2
   2301e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   23022:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23024:	428b      	cmp	r3, r1
   23026:	bf08      	it	eq
   23028:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2302a:	b923      	cbnz	r3, 23036 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   2302c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   23030:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23032:	6254      	str	r4, [r2, #36]	; 0x24
}
   23034:	e00c      	b.n	23050 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   23036:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2303a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2303e:	42b5      	cmp	r5, r6
   23040:	d00e      	beq.n	23060 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23042:	42ae      	cmp	r6, r5
   23044:	dd0c      	ble.n	23060 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   23046:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23048:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2304c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2304e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   23050:	6890      	ldr	r0, [r2, #8]
   23052:	1b03      	subs	r3, r0, r4
   23054:	4258      	negs	r0, r3
   23056:	4158      	adcs	r0, r3
}
   23058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2305c:	f7ff bcbc 	b.w	229d8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23060:	4298      	cmp	r0, r3
   23062:	d0e3      	beq.n	2302c <move_thread_to_end_of_prio_q+0x50>
   23064:	681b      	ldr	r3, [r3, #0]
   23066:	e7e0      	b.n	2302a <move_thread_to_end_of_prio_q+0x4e>
   23068:	20021a40 	.word	0x20021a40
   2306c:	2000a108 	.word	0x2000a108
   23070:	00033597 	.word	0x00033597
   23074:	0002dd81 	.word	0x0002dd81
   23078:	0003354e 	.word	0x0003354e
   2307c:	20021a20 	.word	0x20021a20

00023080 <z_time_slice>:
{
   23080:	b570      	push	{r4, r5, r6, lr}
   23082:	4605      	mov	r5, r0
	__asm__ volatile(
   23084:	f04f 0320 	mov.w	r3, #32
   23088:	f3ef 8611 	mrs	r6, BASEPRI
   2308c:	f383 8812 	msr	BASEPRI_MAX, r3
   23090:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23094:	4829      	ldr	r0, [pc, #164]	; (2313c <z_time_slice+0xbc>)
   23096:	f7fe fb43 	bl	21720 <z_spin_lock_valid>
   2309a:	b968      	cbnz	r0, 230b8 <z_time_slice+0x38>
   2309c:	2394      	movs	r3, #148	; 0x94
   2309e:	4a28      	ldr	r2, [pc, #160]	; (23140 <z_time_slice+0xc0>)
   230a0:	4928      	ldr	r1, [pc, #160]	; (23144 <z_time_slice+0xc4>)
   230a2:	4829      	ldr	r0, [pc, #164]	; (23148 <z_time_slice+0xc8>)
   230a4:	f003 fe65 	bl	26d72 <assert_print>
   230a8:	4924      	ldr	r1, [pc, #144]	; (2313c <z_time_slice+0xbc>)
   230aa:	4828      	ldr	r0, [pc, #160]	; (2314c <z_time_slice+0xcc>)
   230ac:	f003 fe61 	bl	26d72 <assert_print>
   230b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230b2:	4823      	ldr	r0, [pc, #140]	; (23140 <z_time_slice+0xc0>)
   230b4:	f003 fe56 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   230b8:	4820      	ldr	r0, [pc, #128]	; (2313c <z_time_slice+0xbc>)
   230ba:	f7fe fb4d 	bl	21758 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   230be:	4b24      	ldr	r3, [pc, #144]	; (23150 <z_time_slice+0xd0>)
   230c0:	4a24      	ldr	r2, [pc, #144]	; (23154 <z_time_slice+0xd4>)
   230c2:	689c      	ldr	r4, [r3, #8]
   230c4:	6811      	ldr	r1, [r2, #0]
   230c6:	428c      	cmp	r4, r1
   230c8:	d112      	bne.n	230f0 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   230ca:	4620      	mov	r0, r4
   230cc:	f7ff fc70 	bl	229b0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230d0:	481a      	ldr	r0, [pc, #104]	; (2313c <z_time_slice+0xbc>)
   230d2:	f7fe fb33 	bl	2173c <z_spin_unlock_valid>
   230d6:	bb58      	cbnz	r0, 23130 <z_time_slice+0xb0>
   230d8:	23c2      	movs	r3, #194	; 0xc2
   230da:	4a19      	ldr	r2, [pc, #100]	; (23140 <z_time_slice+0xc0>)
   230dc:	491e      	ldr	r1, [pc, #120]	; (23158 <z_time_slice+0xd8>)
   230de:	481a      	ldr	r0, [pc, #104]	; (23148 <z_time_slice+0xc8>)
   230e0:	f003 fe47 	bl	26d72 <assert_print>
   230e4:	4915      	ldr	r1, [pc, #84]	; (2313c <z_time_slice+0xbc>)
   230e6:	481d      	ldr	r0, [pc, #116]	; (2315c <z_time_slice+0xdc>)
   230e8:	f003 fe43 	bl	26d72 <assert_print>
   230ec:	21c2      	movs	r1, #194	; 0xc2
   230ee:	e7e0      	b.n	230b2 <z_time_slice+0x32>
	pending_current = NULL;
   230f0:	2100      	movs	r1, #0
   230f2:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   230f4:	4a1a      	ldr	r2, [pc, #104]	; (23160 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   230f6:	6812      	ldr	r2, [r2, #0]
   230f8:	b1c2      	cbz	r2, 2312c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   230fa:	89e2      	ldrh	r2, [r4, #14]
   230fc:	2a7f      	cmp	r2, #127	; 0x7f
   230fe:	d815      	bhi.n	2312c <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   23100:	7b62      	ldrb	r2, [r4, #13]
   23102:	06d2      	lsls	r2, r2, #27
   23104:	d112      	bne.n	2312c <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23106:	4a17      	ldr	r2, [pc, #92]	; (23164 <z_time_slice+0xe4>)
   23108:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2310c:	6812      	ldr	r2, [r2, #0]
   2310e:	4291      	cmp	r1, r2
   23110:	db0c      	blt.n	2312c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   23112:	4a15      	ldr	r2, [pc, #84]	; (23168 <z_time_slice+0xe8>)
   23114:	4294      	cmp	r4, r2
   23116:	d009      	beq.n	2312c <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   23118:	691a      	ldr	r2, [r3, #16]
   2311a:	42aa      	cmp	r2, r5
   2311c:	dc03      	bgt.n	23126 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   2311e:	4620      	mov	r0, r4
   23120:	f7ff ff5c 	bl	22fdc <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   23124:	e7d1      	b.n	230ca <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   23126:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   23128:	611a      	str	r2, [r3, #16]
   2312a:	e7d1      	b.n	230d0 <z_time_slice+0x50>
   2312c:	2200      	movs	r2, #0
   2312e:	e7fb      	b.n	23128 <z_time_slice+0xa8>
	__asm__ volatile(
   23130:	f386 8811 	msr	BASEPRI, r6
   23134:	f3bf 8f6f 	isb	sy
}
   23138:	bd70      	pop	{r4, r5, r6, pc}
   2313a:	bf00      	nop
   2313c:	20021a68 	.word	0x20021a68
   23140:	0002ebe3 	.word	0x0002ebe3
   23144:	0002ec3c 	.word	0x0002ec3c
   23148:	0002dd81 	.word	0x0002dd81
   2314c:	0002ec51 	.word	0x0002ec51
   23150:	20021a20 	.word	0x20021a20
   23154:	20021a5c 	.word	0x20021a5c
   23158:	0002ec10 	.word	0x0002ec10
   2315c:	0002ec27 	.word	0x0002ec27
   23160:	20021a64 	.word	0x20021a64
   23164:	20021a60 	.word	0x20021a60
   23168:	2000a108 	.word	0x2000a108

0002316c <unready_thread>:
{
   2316c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2316e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   23172:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23174:	2a00      	cmp	r2, #0
   23176:	7b43      	ldrb	r3, [r0, #13]
   23178:	da06      	bge.n	23188 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2317a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2317e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23180:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23182:	4806      	ldr	r0, [pc, #24]	; (2319c <unready_thread+0x30>)
   23184:	f7ff ff0a 	bl	22f9c <z_priq_dumb_remove>
	update_cache(thread == _current);
   23188:	4b05      	ldr	r3, [pc, #20]	; (231a0 <unready_thread+0x34>)
   2318a:	6898      	ldr	r0, [r3, #8]
   2318c:	1b03      	subs	r3, r0, r4
   2318e:	4258      	negs	r0, r3
   23190:	4158      	adcs	r0, r3
}
   23192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   23196:	f7ff bc1f 	b.w	229d8 <update_cache>
   2319a:	bf00      	nop
   2319c:	20021a40 	.word	0x20021a40
   231a0:	20021a20 	.word	0x20021a20

000231a4 <add_to_waitq_locked>:
{
   231a4:	b538      	push	{r3, r4, r5, lr}
   231a6:	4604      	mov	r4, r0
   231a8:	460d      	mov	r5, r1
	unready_thread(thread);
   231aa:	f7ff ffdf 	bl	2316c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   231ae:	7b63      	ldrb	r3, [r4, #13]
   231b0:	f043 0302 	orr.w	r3, r3, #2
   231b4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   231b6:	b34d      	cbz	r5, 2320c <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   231b8:	4b15      	ldr	r3, [pc, #84]	; (23210 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   231ba:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   231bc:	429c      	cmp	r4, r3
   231be:	d109      	bne.n	231d4 <add_to_waitq_locked+0x30>
   231c0:	4914      	ldr	r1, [pc, #80]	; (23214 <add_to_waitq_locked+0x70>)
   231c2:	4815      	ldr	r0, [pc, #84]	; (23218 <add_to_waitq_locked+0x74>)
   231c4:	23ba      	movs	r3, #186	; 0xba
   231c6:	4a15      	ldr	r2, [pc, #84]	; (2321c <add_to_waitq_locked+0x78>)
   231c8:	f003 fdd3 	bl	26d72 <assert_print>
   231cc:	21ba      	movs	r1, #186	; 0xba
   231ce:	4813      	ldr	r0, [pc, #76]	; (2321c <add_to_waitq_locked+0x78>)
   231d0:	f003 fdc8 	bl	26d64 <assert_post_action>
	return list->head == list;
   231d4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   231d6:	429d      	cmp	r5, r3
   231d8:	d109      	bne.n	231ee <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   231da:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   231dc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   231e0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   231e2:	606c      	str	r4, [r5, #4]
}
   231e4:	e012      	b.n	2320c <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   231e6:	686a      	ldr	r2, [r5, #4]
   231e8:	4293      	cmp	r3, r2
   231ea:	d0f6      	beq.n	231da <add_to_waitq_locked+0x36>
   231ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   231ee:	2b00      	cmp	r3, #0
   231f0:	d0f3      	beq.n	231da <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   231f2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   231f6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   231fa:	428a      	cmp	r2, r1
   231fc:	d0f3      	beq.n	231e6 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   231fe:	4291      	cmp	r1, r2
   23200:	ddf1      	ble.n	231e6 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   23202:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23204:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23208:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2320a:	605c      	str	r4, [r3, #4]
}
   2320c:	bd38      	pop	{r3, r4, r5, pc}
   2320e:	bf00      	nop
   23210:	2000a108 	.word	0x2000a108
   23214:	00033597 	.word	0x00033597
   23218:	0002dd81 	.word	0x0002dd81
   2321c:	0003354e 	.word	0x0003354e

00023220 <pend_locked>:
{
   23220:	b570      	push	{r4, r5, r6, lr}
   23222:	4615      	mov	r5, r2
   23224:	461c      	mov	r4, r3
   23226:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   23228:	f7ff ffbc 	bl	231a4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2322c:	f1b4 3fff 	cmp.w	r4, #4294967295
   23230:	bf08      	it	eq
   23232:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   23236:	d008      	beq.n	2324a <pend_locked+0x2a>
   23238:	462a      	mov	r2, r5
   2323a:	4623      	mov	r3, r4
   2323c:	f106 0018 	add.w	r0, r6, #24
   23240:	4902      	ldr	r1, [pc, #8]	; (2324c <pend_locked+0x2c>)
}
   23242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23246:	f000 bdf1 	b.w	23e2c <z_add_timeout>
   2324a:	bd70      	pop	{r4, r5, r6, pc}
   2324c:	00023605 	.word	0x00023605

00023250 <z_pend_curr>:
{
   23250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23254:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   23258:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 23310 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2325c:	4c2d      	ldr	r4, [pc, #180]	; (23314 <z_pend_curr+0xc4>)
{
   2325e:	4617      	mov	r7, r2
	pending_current = _current;
   23260:	4b2d      	ldr	r3, [pc, #180]	; (23318 <z_pend_curr+0xc8>)
   23262:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   23266:	42a0      	cmp	r0, r4
{
   23268:	4605      	mov	r5, r0
   2326a:	460e      	mov	r6, r1
	pending_current = _current;
   2326c:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2326e:	d10b      	bne.n	23288 <z_pend_curr+0x38>
   23270:	492a      	ldr	r1, [pc, #168]	; (2331c <z_pend_curr+0xcc>)
   23272:	482b      	ldr	r0, [pc, #172]	; (23320 <z_pend_curr+0xd0>)
   23274:	f240 334e 	movw	r3, #846	; 0x34e
   23278:	4a2a      	ldr	r2, [pc, #168]	; (23324 <z_pend_curr+0xd4>)
   2327a:	f003 fd7a 	bl	26d72 <assert_print>
   2327e:	f240 314e 	movw	r1, #846	; 0x34e
   23282:	4828      	ldr	r0, [pc, #160]	; (23324 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23284:	f003 fd6e 	bl	26d64 <assert_post_action>
	__asm__ volatile(
   23288:	f04f 0220 	mov.w	r2, #32
   2328c:	f3ef 8311 	mrs	r3, BASEPRI
   23290:	f382 8812 	msr	BASEPRI_MAX, r2
   23294:	f3bf 8f6f 	isb	sy
   23298:	4620      	mov	r0, r4
   2329a:	f7fe fa41 	bl	21720 <z_spin_lock_valid>
   2329e:	b960      	cbnz	r0, 232ba <z_pend_curr+0x6a>
   232a0:	2394      	movs	r3, #148	; 0x94
   232a2:	4a21      	ldr	r2, [pc, #132]	; (23328 <z_pend_curr+0xd8>)
   232a4:	4921      	ldr	r1, [pc, #132]	; (2332c <z_pend_curr+0xdc>)
   232a6:	481e      	ldr	r0, [pc, #120]	; (23320 <z_pend_curr+0xd0>)
   232a8:	f003 fd63 	bl	26d72 <assert_print>
   232ac:	4621      	mov	r1, r4
   232ae:	4820      	ldr	r0, [pc, #128]	; (23330 <z_pend_curr+0xe0>)
   232b0:	f003 fd5f 	bl	26d72 <assert_print>
   232b4:	2194      	movs	r1, #148	; 0x94
   232b6:	481c      	ldr	r0, [pc, #112]	; (23328 <z_pend_curr+0xd8>)
   232b8:	e7e4      	b.n	23284 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   232ba:	4620      	mov	r0, r4
   232bc:	f7fe fa4c 	bl	21758 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   232c0:	f8da 0008 	ldr.w	r0, [sl, #8]
   232c4:	4642      	mov	r2, r8
   232c6:	464b      	mov	r3, r9
   232c8:	4639      	mov	r1, r7
   232ca:	f7ff ffa9 	bl	23220 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232ce:	4628      	mov	r0, r5
   232d0:	f7fe fa34 	bl	2173c <z_spin_unlock_valid>
   232d4:	b958      	cbnz	r0, 232ee <z_pend_curr+0x9e>
   232d6:	4917      	ldr	r1, [pc, #92]	; (23334 <z_pend_curr+0xe4>)
   232d8:	23e1      	movs	r3, #225	; 0xe1
   232da:	4a13      	ldr	r2, [pc, #76]	; (23328 <z_pend_curr+0xd8>)
   232dc:	4810      	ldr	r0, [pc, #64]	; (23320 <z_pend_curr+0xd0>)
   232de:	f003 fd48 	bl	26d72 <assert_print>
   232e2:	4629      	mov	r1, r5
   232e4:	4814      	ldr	r0, [pc, #80]	; (23338 <z_pend_curr+0xe8>)
   232e6:	f003 fd44 	bl	26d72 <assert_print>
   232ea:	21e1      	movs	r1, #225	; 0xe1
   232ec:	e7e3      	b.n	232b6 <z_pend_curr+0x66>
   232ee:	4620      	mov	r0, r4
   232f0:	f7fe fa24 	bl	2173c <z_spin_unlock_valid>
   232f4:	b938      	cbnz	r0, 23306 <z_pend_curr+0xb6>
   232f6:	490f      	ldr	r1, [pc, #60]	; (23334 <z_pend_curr+0xe4>)
   232f8:	23e1      	movs	r3, #225	; 0xe1
   232fa:	4a0b      	ldr	r2, [pc, #44]	; (23328 <z_pend_curr+0xd8>)
   232fc:	4808      	ldr	r0, [pc, #32]	; (23320 <z_pend_curr+0xd0>)
   232fe:	f003 fd38 	bl	26d72 <assert_print>
   23302:	4621      	mov	r1, r4
   23304:	e7ee      	b.n	232e4 <z_pend_curr+0x94>
   23306:	4630      	mov	r0, r6
}
   23308:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2330c:	f7ed bc6a 	b.w	10be4 <arch_swap>
   23310:	20021a20 	.word	0x20021a20
   23314:	20021a68 	.word	0x20021a68
   23318:	20021a5c 	.word	0x20021a5c
   2331c:	00033645 	.word	0x00033645
   23320:	0002dd81 	.word	0x0002dd81
   23324:	0003354e 	.word	0x0003354e
   23328:	0002ebe3 	.word	0x0002ebe3
   2332c:	0002ec3c 	.word	0x0002ec3c
   23330:	0002ec51 	.word	0x0002ec51
   23334:	0002ec10 	.word	0x0002ec10
   23338:	0002ec27 	.word	0x0002ec27

0002333c <z_set_prio>:
{
   2333c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23340:	4604      	mov	r4, r0
   23342:	460e      	mov	r6, r1
   23344:	f04f 0320 	mov.w	r3, #32
   23348:	f3ef 8911 	mrs	r9, BASEPRI
   2334c:	f383 8812 	msr	BASEPRI_MAX, r3
   23350:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23354:	4837      	ldr	r0, [pc, #220]	; (23434 <z_set_prio+0xf8>)
   23356:	f7fe f9e3 	bl	21720 <z_spin_lock_valid>
   2335a:	4607      	mov	r7, r0
   2335c:	b960      	cbnz	r0, 23378 <z_set_prio+0x3c>
   2335e:	2394      	movs	r3, #148	; 0x94
   23360:	4a35      	ldr	r2, [pc, #212]	; (23438 <z_set_prio+0xfc>)
   23362:	4936      	ldr	r1, [pc, #216]	; (2343c <z_set_prio+0x100>)
   23364:	4836      	ldr	r0, [pc, #216]	; (23440 <z_set_prio+0x104>)
   23366:	f003 fd04 	bl	26d72 <assert_print>
   2336a:	4932      	ldr	r1, [pc, #200]	; (23434 <z_set_prio+0xf8>)
   2336c:	4835      	ldr	r0, [pc, #212]	; (23444 <z_set_prio+0x108>)
   2336e:	f003 fd00 	bl	26d72 <assert_print>
   23372:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23374:	4830      	ldr	r0, [pc, #192]	; (23438 <z_set_prio+0xfc>)
   23376:	e021      	b.n	233bc <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   23378:	482e      	ldr	r0, [pc, #184]	; (23434 <z_set_prio+0xf8>)
   2337a:	f7fe f9ed 	bl	21758 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2337e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   23380:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23382:	06da      	lsls	r2, r3, #27
   23384:	d11c      	bne.n	233c0 <z_set_prio+0x84>
	return node->next != NULL;
   23386:	69a5      	ldr	r5, [r4, #24]
   23388:	b9d5      	cbnz	r5, 233c0 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   2338a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23448 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2338e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23392:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23394:	4621      	mov	r1, r4
   23396:	4640      	mov	r0, r8
   23398:	f7ff fe00 	bl	22f9c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2339c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2339e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   233a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   233a4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   233a6:	4b29      	ldr	r3, [pc, #164]	; (2344c <z_set_prio+0x110>)
   233a8:	429c      	cmp	r4, r3
   233aa:	d11b      	bne.n	233e4 <z_set_prio+0xa8>
   233ac:	4928      	ldr	r1, [pc, #160]	; (23450 <z_set_prio+0x114>)
   233ae:	4824      	ldr	r0, [pc, #144]	; (23440 <z_set_prio+0x104>)
   233b0:	23ba      	movs	r3, #186	; 0xba
   233b2:	4a28      	ldr	r2, [pc, #160]	; (23454 <z_set_prio+0x118>)
   233b4:	f003 fcdd 	bl	26d72 <assert_print>
   233b8:	21ba      	movs	r1, #186	; 0xba
   233ba:	4826      	ldr	r0, [pc, #152]	; (23454 <z_set_prio+0x118>)
   233bc:	f003 fcd2 	bl	26d64 <assert_post_action>
   233c0:	2700      	movs	r7, #0
			thread->base.prio = prio;
   233c2:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233c4:	481b      	ldr	r0, [pc, #108]	; (23434 <z_set_prio+0xf8>)
   233c6:	f7fe f9b9 	bl	2173c <z_spin_unlock_valid>
   233ca:	bb58      	cbnz	r0, 23424 <z_set_prio+0xe8>
   233cc:	23c2      	movs	r3, #194	; 0xc2
   233ce:	4a1a      	ldr	r2, [pc, #104]	; (23438 <z_set_prio+0xfc>)
   233d0:	4921      	ldr	r1, [pc, #132]	; (23458 <z_set_prio+0x11c>)
   233d2:	481b      	ldr	r0, [pc, #108]	; (23440 <z_set_prio+0x104>)
   233d4:	f003 fccd 	bl	26d72 <assert_print>
   233d8:	4916      	ldr	r1, [pc, #88]	; (23434 <z_set_prio+0xf8>)
   233da:	4820      	ldr	r0, [pc, #128]	; (2345c <z_set_prio+0x120>)
   233dc:	f003 fcc9 	bl	26d72 <assert_print>
   233e0:	21c2      	movs	r1, #194	; 0xc2
   233e2:	e7c7      	b.n	23374 <z_set_prio+0x38>
	return list->head == list;
   233e4:	4643      	mov	r3, r8
   233e6:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   233ea:	4542      	cmp	r2, r8
   233ec:	bf18      	it	ne
   233ee:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   233f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   233f2:	b925      	cbnz	r5, 233fe <z_set_prio+0xc2>
	node->prev = tail;
   233f4:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   233f8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   233fa:	625c      	str	r4, [r3, #36]	; 0x24
}
   233fc:	e00a      	b.n	23414 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   233fe:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   23402:	428e      	cmp	r6, r1
   23404:	d00a      	beq.n	2341c <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23406:	42b1      	cmp	r1, r6
   23408:	dd08      	ble.n	2341c <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   2340a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2340c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   23410:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   23412:	606c      	str	r4, [r5, #4]
			update_cache(1);
   23414:	2001      	movs	r0, #1
   23416:	f7ff fadf 	bl	229d8 <update_cache>
   2341a:	e7d3      	b.n	233c4 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   2341c:	42aa      	cmp	r2, r5
   2341e:	d0e9      	beq.n	233f4 <z_set_prio+0xb8>
   23420:	682d      	ldr	r5, [r5, #0]
   23422:	e7e6      	b.n	233f2 <z_set_prio+0xb6>
	__asm__ volatile(
   23424:	f389 8811 	msr	BASEPRI, r9
   23428:	f3bf 8f6f 	isb	sy
}
   2342c:	4638      	mov	r0, r7
   2342e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23432:	bf00      	nop
   23434:	20021a68 	.word	0x20021a68
   23438:	0002ebe3 	.word	0x0002ebe3
   2343c:	0002ec3c 	.word	0x0002ec3c
   23440:	0002dd81 	.word	0x0002dd81
   23444:	0002ec51 	.word	0x0002ec51
   23448:	20021a40 	.word	0x20021a40
   2344c:	2000a108 	.word	0x2000a108
   23450:	00033597 	.word	0x00033597
   23454:	0003354e 	.word	0x0003354e
   23458:	0002ec10 	.word	0x0002ec10
   2345c:	0002ec27 	.word	0x0002ec27

00023460 <z_impl_k_thread_suspend>:
{
   23460:	b570      	push	{r4, r5, r6, lr}
   23462:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23464:	3018      	adds	r0, #24
   23466:	f000 fda7 	bl	23fb8 <z_abort_timeout>
	__asm__ volatile(
   2346a:	f04f 0320 	mov.w	r3, #32
   2346e:	f3ef 8611 	mrs	r6, BASEPRI
   23472:	f383 8812 	msr	BASEPRI_MAX, r3
   23476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2347a:	4824      	ldr	r0, [pc, #144]	; (2350c <z_impl_k_thread_suspend+0xac>)
   2347c:	f7fe f950 	bl	21720 <z_spin_lock_valid>
   23480:	b968      	cbnz	r0, 2349e <z_impl_k_thread_suspend+0x3e>
   23482:	2394      	movs	r3, #148	; 0x94
   23484:	4a22      	ldr	r2, [pc, #136]	; (23510 <z_impl_k_thread_suspend+0xb0>)
   23486:	4923      	ldr	r1, [pc, #140]	; (23514 <z_impl_k_thread_suspend+0xb4>)
   23488:	4823      	ldr	r0, [pc, #140]	; (23518 <z_impl_k_thread_suspend+0xb8>)
   2348a:	f003 fc72 	bl	26d72 <assert_print>
   2348e:	491f      	ldr	r1, [pc, #124]	; (2350c <z_impl_k_thread_suspend+0xac>)
   23490:	4822      	ldr	r0, [pc, #136]	; (2351c <z_impl_k_thread_suspend+0xbc>)
   23492:	f003 fc6e 	bl	26d72 <assert_print>
   23496:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23498:	481d      	ldr	r0, [pc, #116]	; (23510 <z_impl_k_thread_suspend+0xb0>)
   2349a:	f003 fc63 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   2349e:	481b      	ldr	r0, [pc, #108]	; (2350c <z_impl_k_thread_suspend+0xac>)
   234a0:	f7fe f95a 	bl	21758 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   234a4:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   234a8:	7b63      	ldrb	r3, [r4, #13]
   234aa:	2a00      	cmp	r2, #0
   234ac:	da06      	bge.n	234bc <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   234ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   234b2:	4621      	mov	r1, r4
   234b4:	481a      	ldr	r0, [pc, #104]	; (23520 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   234b6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   234b8:	f7ff fd70 	bl	22f9c <z_priq_dumb_remove>
		update_cache(thread == _current);
   234bc:	4d19      	ldr	r5, [pc, #100]	; (23524 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   234be:	7b63      	ldrb	r3, [r4, #13]
   234c0:	68a8      	ldr	r0, [r5, #8]
   234c2:	f043 0310 	orr.w	r3, r3, #16
   234c6:	7363      	strb	r3, [r4, #13]
   234c8:	1b03      	subs	r3, r0, r4
   234ca:	4258      	negs	r0, r3
   234cc:	4158      	adcs	r0, r3
   234ce:	f7ff fa83 	bl	229d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234d2:	480e      	ldr	r0, [pc, #56]	; (2350c <z_impl_k_thread_suspend+0xac>)
   234d4:	f7fe f932 	bl	2173c <z_spin_unlock_valid>
   234d8:	b958      	cbnz	r0, 234f2 <z_impl_k_thread_suspend+0x92>
   234da:	23c2      	movs	r3, #194	; 0xc2
   234dc:	4a0c      	ldr	r2, [pc, #48]	; (23510 <z_impl_k_thread_suspend+0xb0>)
   234de:	4912      	ldr	r1, [pc, #72]	; (23528 <z_impl_k_thread_suspend+0xc8>)
   234e0:	480d      	ldr	r0, [pc, #52]	; (23518 <z_impl_k_thread_suspend+0xb8>)
   234e2:	f003 fc46 	bl	26d72 <assert_print>
   234e6:	4909      	ldr	r1, [pc, #36]	; (2350c <z_impl_k_thread_suspend+0xac>)
   234e8:	4810      	ldr	r0, [pc, #64]	; (2352c <z_impl_k_thread_suspend+0xcc>)
   234ea:	f003 fc42 	bl	26d72 <assert_print>
   234ee:	21c2      	movs	r1, #194	; 0xc2
   234f0:	e7d2      	b.n	23498 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   234f2:	f386 8811 	msr	BASEPRI, r6
   234f6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   234fa:	68ab      	ldr	r3, [r5, #8]
   234fc:	42a3      	cmp	r3, r4
   234fe:	d103      	bne.n	23508 <z_impl_k_thread_suspend+0xa8>
}
   23500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23504:	f008 bb23 	b.w	2bb4e <z_reschedule_unlocked>
}
   23508:	bd70      	pop	{r4, r5, r6, pc}
   2350a:	bf00      	nop
   2350c:	20021a68 	.word	0x20021a68
   23510:	0002ebe3 	.word	0x0002ebe3
   23514:	0002ec3c 	.word	0x0002ec3c
   23518:	0002dd81 	.word	0x0002dd81
   2351c:	0002ec51 	.word	0x0002ec51
   23520:	20021a40 	.word	0x20021a40
   23524:	20021a20 	.word	0x20021a20
   23528:	0002ec10 	.word	0x0002ec10
   2352c:	0002ec27 	.word	0x0002ec27

00023530 <unpend_thread_no_timeout>:
{
   23530:	b510      	push	{r4, lr}
   23532:	4604      	mov	r4, r0
   23534:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   23536:	b958      	cbnz	r0, 23550 <unpend_thread_no_timeout+0x20>
   23538:	490a      	ldr	r1, [pc, #40]	; (23564 <unpend_thread_no_timeout+0x34>)
   2353a:	480b      	ldr	r0, [pc, #44]	; (23568 <unpend_thread_no_timeout+0x38>)
   2353c:	f240 23d6 	movw	r3, #726	; 0x2d6
   23540:	4a0a      	ldr	r2, [pc, #40]	; (2356c <unpend_thread_no_timeout+0x3c>)
   23542:	f003 fc16 	bl	26d72 <assert_print>
   23546:	f240 21d6 	movw	r1, #726	; 0x2d6
   2354a:	4808      	ldr	r0, [pc, #32]	; (2356c <unpend_thread_no_timeout+0x3c>)
   2354c:	f003 fc0a 	bl	26d64 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   23550:	4621      	mov	r1, r4
   23552:	f7ff fd23 	bl	22f9c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23556:	7b63      	ldrb	r3, [r4, #13]
   23558:	f023 0302 	bic.w	r3, r3, #2
   2355c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2355e:	2300      	movs	r3, #0
   23560:	60a3      	str	r3, [r4, #8]
}
   23562:	bd10      	pop	{r4, pc}
   23564:	0003367c 	.word	0x0003367c
   23568:	0002dd81 	.word	0x0002dd81
   2356c:	0003354e 	.word	0x0003354e

00023570 <z_unpend_thread>:
{
   23570:	b538      	push	{r3, r4, r5, lr}
   23572:	4604      	mov	r4, r0
	__asm__ volatile(
   23574:	f04f 0320 	mov.w	r3, #32
   23578:	f3ef 8511 	mrs	r5, BASEPRI
   2357c:	f383 8812 	msr	BASEPRI_MAX, r3
   23580:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23584:	4818      	ldr	r0, [pc, #96]	; (235e8 <z_unpend_thread+0x78>)
   23586:	f7fe f8cb 	bl	21720 <z_spin_lock_valid>
   2358a:	b968      	cbnz	r0, 235a8 <z_unpend_thread+0x38>
   2358c:	2394      	movs	r3, #148	; 0x94
   2358e:	4a17      	ldr	r2, [pc, #92]	; (235ec <z_unpend_thread+0x7c>)
   23590:	4917      	ldr	r1, [pc, #92]	; (235f0 <z_unpend_thread+0x80>)
   23592:	4818      	ldr	r0, [pc, #96]	; (235f4 <z_unpend_thread+0x84>)
   23594:	f003 fbed 	bl	26d72 <assert_print>
   23598:	4913      	ldr	r1, [pc, #76]	; (235e8 <z_unpend_thread+0x78>)
   2359a:	4817      	ldr	r0, [pc, #92]	; (235f8 <z_unpend_thread+0x88>)
   2359c:	f003 fbe9 	bl	26d72 <assert_print>
   235a0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   235a2:	4812      	ldr	r0, [pc, #72]	; (235ec <z_unpend_thread+0x7c>)
   235a4:	f003 fbde 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   235a8:	480f      	ldr	r0, [pc, #60]	; (235e8 <z_unpend_thread+0x78>)
   235aa:	f7fe f8d5 	bl	21758 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   235ae:	4620      	mov	r0, r4
   235b0:	f7ff ffbe 	bl	23530 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   235b4:	480c      	ldr	r0, [pc, #48]	; (235e8 <z_unpend_thread+0x78>)
   235b6:	f7fe f8c1 	bl	2173c <z_spin_unlock_valid>
   235ba:	b958      	cbnz	r0, 235d4 <z_unpend_thread+0x64>
   235bc:	23c2      	movs	r3, #194	; 0xc2
   235be:	4a0b      	ldr	r2, [pc, #44]	; (235ec <z_unpend_thread+0x7c>)
   235c0:	490e      	ldr	r1, [pc, #56]	; (235fc <z_unpend_thread+0x8c>)
   235c2:	480c      	ldr	r0, [pc, #48]	; (235f4 <z_unpend_thread+0x84>)
   235c4:	f003 fbd5 	bl	26d72 <assert_print>
   235c8:	4907      	ldr	r1, [pc, #28]	; (235e8 <z_unpend_thread+0x78>)
   235ca:	480d      	ldr	r0, [pc, #52]	; (23600 <z_unpend_thread+0x90>)
   235cc:	f003 fbd1 	bl	26d72 <assert_print>
   235d0:	21c2      	movs	r1, #194	; 0xc2
   235d2:	e7e6      	b.n	235a2 <z_unpend_thread+0x32>
	__asm__ volatile(
   235d4:	f385 8811 	msr	BASEPRI, r5
   235d8:	f3bf 8f6f 	isb	sy
   235dc:	f104 0018 	add.w	r0, r4, #24
}
   235e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   235e4:	f000 bce8 	b.w	23fb8 <z_abort_timeout>
   235e8:	20021a68 	.word	0x20021a68
   235ec:	0002ebe3 	.word	0x0002ebe3
   235f0:	0002ec3c 	.word	0x0002ec3c
   235f4:	0002dd81 	.word	0x0002dd81
   235f8:	0002ec51 	.word	0x0002ec51
   235fc:	0002ec10 	.word	0x0002ec10
   23600:	0002ec27 	.word	0x0002ec27

00023604 <z_thread_timeout>:
{
   23604:	b570      	push	{r4, r5, r6, lr}
   23606:	4604      	mov	r4, r0
	__asm__ volatile(
   23608:	f04f 0320 	mov.w	r3, #32
   2360c:	f3ef 8611 	mrs	r6, BASEPRI
   23610:	f383 8812 	msr	BASEPRI_MAX, r3
   23614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23618:	481f      	ldr	r0, [pc, #124]	; (23698 <z_thread_timeout+0x94>)
   2361a:	f7fe f881 	bl	21720 <z_spin_lock_valid>
   2361e:	b968      	cbnz	r0, 2363c <z_thread_timeout+0x38>
   23620:	2394      	movs	r3, #148	; 0x94
   23622:	4a1e      	ldr	r2, [pc, #120]	; (2369c <z_thread_timeout+0x98>)
   23624:	491e      	ldr	r1, [pc, #120]	; (236a0 <z_thread_timeout+0x9c>)
   23626:	481f      	ldr	r0, [pc, #124]	; (236a4 <z_thread_timeout+0xa0>)
   23628:	f003 fba3 	bl	26d72 <assert_print>
   2362c:	491a      	ldr	r1, [pc, #104]	; (23698 <z_thread_timeout+0x94>)
   2362e:	481e      	ldr	r0, [pc, #120]	; (236a8 <z_thread_timeout+0xa4>)
   23630:	f003 fb9f 	bl	26d72 <assert_print>
   23634:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23636:	4819      	ldr	r0, [pc, #100]	; (2369c <z_thread_timeout+0x98>)
   23638:	f003 fb94 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   2363c:	4816      	ldr	r0, [pc, #88]	; (23698 <z_thread_timeout+0x94>)
   2363e:	f7fe f88b 	bl	21758 <z_spin_lock_set_owner>
		if (!killed) {
   23642:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23646:	f013 0f28 	tst.w	r3, #40	; 0x28
   2364a:	d110      	bne.n	2366e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   2364c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   23650:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   23654:	b113      	cbz	r3, 2365c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   23656:	4628      	mov	r0, r5
   23658:	f7ff ff6a 	bl	23530 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2365c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   23660:	4628      	mov	r0, r5
   23662:	f023 0314 	bic.w	r3, r3, #20
   23666:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2366a:	f7ff f9e9 	bl	22a40 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2366e:	480a      	ldr	r0, [pc, #40]	; (23698 <z_thread_timeout+0x94>)
   23670:	f7fe f864 	bl	2173c <z_spin_unlock_valid>
   23674:	b958      	cbnz	r0, 2368e <z_thread_timeout+0x8a>
   23676:	23c2      	movs	r3, #194	; 0xc2
   23678:	4a08      	ldr	r2, [pc, #32]	; (2369c <z_thread_timeout+0x98>)
   2367a:	490c      	ldr	r1, [pc, #48]	; (236ac <z_thread_timeout+0xa8>)
   2367c:	4809      	ldr	r0, [pc, #36]	; (236a4 <z_thread_timeout+0xa0>)
   2367e:	f003 fb78 	bl	26d72 <assert_print>
   23682:	4905      	ldr	r1, [pc, #20]	; (23698 <z_thread_timeout+0x94>)
   23684:	480a      	ldr	r0, [pc, #40]	; (236b0 <z_thread_timeout+0xac>)
   23686:	f003 fb74 	bl	26d72 <assert_print>
   2368a:	21c2      	movs	r1, #194	; 0xc2
   2368c:	e7d3      	b.n	23636 <z_thread_timeout+0x32>
	__asm__ volatile(
   2368e:	f386 8811 	msr	BASEPRI, r6
   23692:	f3bf 8f6f 	isb	sy
}
   23696:	bd70      	pop	{r4, r5, r6, pc}
   23698:	20021a68 	.word	0x20021a68
   2369c:	0002ebe3 	.word	0x0002ebe3
   236a0:	0002ec3c 	.word	0x0002ec3c
   236a4:	0002dd81 	.word	0x0002dd81
   236a8:	0002ec51 	.word	0x0002ec51
   236ac:	0002ec10 	.word	0x0002ec10
   236b0:	0002ec27 	.word	0x0002ec27

000236b4 <z_unpend1_no_timeout>:
{
   236b4:	b570      	push	{r4, r5, r6, lr}
   236b6:	4605      	mov	r5, r0
	__asm__ volatile(
   236b8:	f04f 0320 	mov.w	r3, #32
   236bc:	f3ef 8611 	mrs	r6, BASEPRI
   236c0:	f383 8812 	msr	BASEPRI_MAX, r3
   236c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   236c8:	4819      	ldr	r0, [pc, #100]	; (23730 <z_unpend1_no_timeout+0x7c>)
   236ca:	f7fe f829 	bl	21720 <z_spin_lock_valid>
   236ce:	b968      	cbnz	r0, 236ec <z_unpend1_no_timeout+0x38>
   236d0:	2394      	movs	r3, #148	; 0x94
   236d2:	4a18      	ldr	r2, [pc, #96]	; (23734 <z_unpend1_no_timeout+0x80>)
   236d4:	4918      	ldr	r1, [pc, #96]	; (23738 <z_unpend1_no_timeout+0x84>)
   236d6:	4819      	ldr	r0, [pc, #100]	; (2373c <z_unpend1_no_timeout+0x88>)
   236d8:	f003 fb4b 	bl	26d72 <assert_print>
   236dc:	4914      	ldr	r1, [pc, #80]	; (23730 <z_unpend1_no_timeout+0x7c>)
   236de:	4818      	ldr	r0, [pc, #96]	; (23740 <z_unpend1_no_timeout+0x8c>)
   236e0:	f003 fb47 	bl	26d72 <assert_print>
   236e4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236e6:	4813      	ldr	r0, [pc, #76]	; (23734 <z_unpend1_no_timeout+0x80>)
   236e8:	f003 fb3c 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   236ec:	4810      	ldr	r0, [pc, #64]	; (23730 <z_unpend1_no_timeout+0x7c>)
   236ee:	f7fe f833 	bl	21758 <z_spin_lock_set_owner>
	return list->head == list;
   236f2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   236f4:	42a5      	cmp	r5, r4
   236f6:	d013      	beq.n	23720 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   236f8:	b114      	cbz	r4, 23700 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   236fa:	4620      	mov	r0, r4
   236fc:	f7ff ff18 	bl	23530 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23700:	480b      	ldr	r0, [pc, #44]	; (23730 <z_unpend1_no_timeout+0x7c>)
   23702:	f7fe f81b 	bl	2173c <z_spin_unlock_valid>
   23706:	b968      	cbnz	r0, 23724 <z_unpend1_no_timeout+0x70>
   23708:	23c2      	movs	r3, #194	; 0xc2
   2370a:	4a0a      	ldr	r2, [pc, #40]	; (23734 <z_unpend1_no_timeout+0x80>)
   2370c:	490d      	ldr	r1, [pc, #52]	; (23744 <z_unpend1_no_timeout+0x90>)
   2370e:	480b      	ldr	r0, [pc, #44]	; (2373c <z_unpend1_no_timeout+0x88>)
   23710:	f003 fb2f 	bl	26d72 <assert_print>
   23714:	4906      	ldr	r1, [pc, #24]	; (23730 <z_unpend1_no_timeout+0x7c>)
   23716:	480c      	ldr	r0, [pc, #48]	; (23748 <z_unpend1_no_timeout+0x94>)
   23718:	f003 fb2b 	bl	26d72 <assert_print>
   2371c:	21c2      	movs	r1, #194	; 0xc2
   2371e:	e7e2      	b.n	236e6 <z_unpend1_no_timeout+0x32>
   23720:	2400      	movs	r4, #0
   23722:	e7ed      	b.n	23700 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   23724:	f386 8811 	msr	BASEPRI, r6
   23728:	f3bf 8f6f 	isb	sy
}
   2372c:	4620      	mov	r0, r4
   2372e:	bd70      	pop	{r4, r5, r6, pc}
   23730:	20021a68 	.word	0x20021a68
   23734:	0002ebe3 	.word	0x0002ebe3
   23738:	0002ec3c 	.word	0x0002ec3c
   2373c:	0002dd81 	.word	0x0002dd81
   23740:	0002ec51 	.word	0x0002ec51
   23744:	0002ec10 	.word	0x0002ec10
   23748:	0002ec27 	.word	0x0002ec27

0002374c <z_unpend_first_thread>:
{
   2374c:	b570      	push	{r4, r5, r6, lr}
   2374e:	4605      	mov	r5, r0
	__asm__ volatile(
   23750:	f04f 0320 	mov.w	r3, #32
   23754:	f3ef 8611 	mrs	r6, BASEPRI
   23758:	f383 8812 	msr	BASEPRI_MAX, r3
   2375c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23760:	481b      	ldr	r0, [pc, #108]	; (237d0 <z_unpend_first_thread+0x84>)
   23762:	f7fd ffdd 	bl	21720 <z_spin_lock_valid>
   23766:	b968      	cbnz	r0, 23784 <z_unpend_first_thread+0x38>
   23768:	2394      	movs	r3, #148	; 0x94
   2376a:	4a1a      	ldr	r2, [pc, #104]	; (237d4 <z_unpend_first_thread+0x88>)
   2376c:	491a      	ldr	r1, [pc, #104]	; (237d8 <z_unpend_first_thread+0x8c>)
   2376e:	481b      	ldr	r0, [pc, #108]	; (237dc <z_unpend_first_thread+0x90>)
   23770:	f003 faff 	bl	26d72 <assert_print>
   23774:	4916      	ldr	r1, [pc, #88]	; (237d0 <z_unpend_first_thread+0x84>)
   23776:	481a      	ldr	r0, [pc, #104]	; (237e0 <z_unpend_first_thread+0x94>)
   23778:	f003 fafb 	bl	26d72 <assert_print>
   2377c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2377e:	4815      	ldr	r0, [pc, #84]	; (237d4 <z_unpend_first_thread+0x88>)
   23780:	f003 faf0 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   23784:	4812      	ldr	r0, [pc, #72]	; (237d0 <z_unpend_first_thread+0x84>)
   23786:	f7fd ffe7 	bl	21758 <z_spin_lock_set_owner>
	return list->head == list;
   2378a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2378c:	42a5      	cmp	r5, r4
   2378e:	d017      	beq.n	237c0 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   23790:	b134      	cbz	r4, 237a0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   23792:	4620      	mov	r0, r4
   23794:	f7ff fecc 	bl	23530 <unpend_thread_no_timeout>
   23798:	f104 0018 	add.w	r0, r4, #24
   2379c:	f000 fc0c 	bl	23fb8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237a0:	480b      	ldr	r0, [pc, #44]	; (237d0 <z_unpend_first_thread+0x84>)
   237a2:	f7fd ffcb 	bl	2173c <z_spin_unlock_valid>
   237a6:	b968      	cbnz	r0, 237c4 <z_unpend_first_thread+0x78>
   237a8:	23c2      	movs	r3, #194	; 0xc2
   237aa:	4a0a      	ldr	r2, [pc, #40]	; (237d4 <z_unpend_first_thread+0x88>)
   237ac:	490d      	ldr	r1, [pc, #52]	; (237e4 <z_unpend_first_thread+0x98>)
   237ae:	480b      	ldr	r0, [pc, #44]	; (237dc <z_unpend_first_thread+0x90>)
   237b0:	f003 fadf 	bl	26d72 <assert_print>
   237b4:	4906      	ldr	r1, [pc, #24]	; (237d0 <z_unpend_first_thread+0x84>)
   237b6:	480c      	ldr	r0, [pc, #48]	; (237e8 <z_unpend_first_thread+0x9c>)
   237b8:	f003 fadb 	bl	26d72 <assert_print>
   237bc:	21c2      	movs	r1, #194	; 0xc2
   237be:	e7de      	b.n	2377e <z_unpend_first_thread+0x32>
   237c0:	2400      	movs	r4, #0
   237c2:	e7ed      	b.n	237a0 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   237c4:	f386 8811 	msr	BASEPRI, r6
   237c8:	f3bf 8f6f 	isb	sy
}
   237cc:	4620      	mov	r0, r4
   237ce:	bd70      	pop	{r4, r5, r6, pc}
   237d0:	20021a68 	.word	0x20021a68
   237d4:	0002ebe3 	.word	0x0002ebe3
   237d8:	0002ec3c 	.word	0x0002ec3c
   237dc:	0002dd81 	.word	0x0002dd81
   237e0:	0002ec51 	.word	0x0002ec51
   237e4:	0002ec10 	.word	0x0002ec10
   237e8:	0002ec27 	.word	0x0002ec27

000237ec <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   237ec:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   237ee:	4b04      	ldr	r3, [pc, #16]	; (23800 <z_sched_init+0x14>)
   237f0:	4608      	mov	r0, r1
   237f2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   237f6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   237fa:	f7ff b96b 	b.w	22ad4 <k_sched_time_slice_set>
   237fe:	bf00      	nop
   23800:	20021a20 	.word	0x20021a20

00023804 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   23804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23806:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2380a:	b16b      	cbz	r3, 23828 <z_impl_k_yield+0x24>
   2380c:	493c      	ldr	r1, [pc, #240]	; (23900 <z_impl_k_yield+0xfc>)
   2380e:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   23812:	4a3c      	ldr	r2, [pc, #240]	; (23904 <z_impl_k_yield+0x100>)
   23814:	483c      	ldr	r0, [pc, #240]	; (23908 <z_impl_k_yield+0x104>)
   23816:	f003 faac 	bl	26d72 <assert_print>
   2381a:	483c      	ldr	r0, [pc, #240]	; (2390c <z_impl_k_yield+0x108>)
   2381c:	f003 faa9 	bl	26d72 <assert_print>
   23820:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23824:	4837      	ldr	r0, [pc, #220]	; (23904 <z_impl_k_yield+0x100>)
   23826:	e017      	b.n	23858 <z_impl_k_yield+0x54>
	__asm__ volatile(
   23828:	f04f 0320 	mov.w	r3, #32
   2382c:	f3ef 8611 	mrs	r6, BASEPRI
   23830:	f383 8812 	msr	BASEPRI_MAX, r3
   23834:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23838:	4835      	ldr	r0, [pc, #212]	; (23910 <z_impl_k_yield+0x10c>)
   2383a:	f7fd ff71 	bl	21720 <z_spin_lock_valid>
   2383e:	b968      	cbnz	r0, 2385c <z_impl_k_yield+0x58>
   23840:	2394      	movs	r3, #148	; 0x94
   23842:	4a34      	ldr	r2, [pc, #208]	; (23914 <z_impl_k_yield+0x110>)
   23844:	4934      	ldr	r1, [pc, #208]	; (23918 <z_impl_k_yield+0x114>)
   23846:	4830      	ldr	r0, [pc, #192]	; (23908 <z_impl_k_yield+0x104>)
   23848:	f003 fa93 	bl	26d72 <assert_print>
   2384c:	4930      	ldr	r1, [pc, #192]	; (23910 <z_impl_k_yield+0x10c>)
   2384e:	4833      	ldr	r0, [pc, #204]	; (2391c <z_impl_k_yield+0x118>)
   23850:	f003 fa8f 	bl	26d72 <assert_print>
   23854:	2194      	movs	r1, #148	; 0x94
   23856:	482f      	ldr	r0, [pc, #188]	; (23914 <z_impl_k_yield+0x110>)
   23858:	f003 fa84 	bl	26d64 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2385c:	4c30      	ldr	r4, [pc, #192]	; (23920 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   2385e:	482c      	ldr	r0, [pc, #176]	; (23910 <z_impl_k_yield+0x10c>)
   23860:	f7fd ff7a 	bl	21758 <z_spin_lock_set_owner>
   23864:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   23866:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2386a:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2386c:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2386e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23872:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23874:	f7ff fb92 	bl	22f9c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   23878:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2387a:	7b5a      	ldrb	r2, [r3, #13]
   2387c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23880:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23882:	4a28      	ldr	r2, [pc, #160]	; (23924 <z_impl_k_yield+0x120>)
   23884:	4293      	cmp	r3, r2
   23886:	d107      	bne.n	23898 <z_impl_k_yield+0x94>
   23888:	4927      	ldr	r1, [pc, #156]	; (23928 <z_impl_k_yield+0x124>)
   2388a:	23ba      	movs	r3, #186	; 0xba
   2388c:	4a1d      	ldr	r2, [pc, #116]	; (23904 <z_impl_k_yield+0x100>)
   2388e:	481e      	ldr	r0, [pc, #120]	; (23908 <z_impl_k_yield+0x104>)
   23890:	f003 fa6f 	bl	26d72 <assert_print>
   23894:	21ba      	movs	r1, #186	; 0xba
   23896:	e7c5      	b.n	23824 <z_impl_k_yield+0x20>
	return list->head == list;
   23898:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   2389a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2389c:	42aa      	cmp	r2, r5
   2389e:	bf08      	it	eq
   238a0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   238a2:	b922      	cbnz	r2, 238ae <z_impl_k_yield+0xaa>
	node->prev = tail;
   238a4:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   238a8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   238aa:	6263      	str	r3, [r4, #36]	; 0x24
}
   238ac:	e00c      	b.n	238c8 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   238ae:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   238b2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   238b6:	42b8      	cmp	r0, r7
   238b8:	d019      	beq.n	238ee <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   238ba:	4287      	cmp	r7, r0
   238bc:	dd17      	ble.n	238ee <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   238be:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   238c0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   238c4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   238c6:	6053      	str	r3, [r2, #4]
	update_cache(1);
   238c8:	2001      	movs	r0, #1
   238ca:	f7ff f885 	bl	229d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238ce:	4810      	ldr	r0, [pc, #64]	; (23910 <z_impl_k_yield+0x10c>)
   238d0:	f7fd ff34 	bl	2173c <z_spin_unlock_valid>
   238d4:	b978      	cbnz	r0, 238f6 <z_impl_k_yield+0xf2>
   238d6:	23e1      	movs	r3, #225	; 0xe1
   238d8:	4a0e      	ldr	r2, [pc, #56]	; (23914 <z_impl_k_yield+0x110>)
   238da:	4914      	ldr	r1, [pc, #80]	; (2392c <z_impl_k_yield+0x128>)
   238dc:	480a      	ldr	r0, [pc, #40]	; (23908 <z_impl_k_yield+0x104>)
   238de:	f003 fa48 	bl	26d72 <assert_print>
   238e2:	490b      	ldr	r1, [pc, #44]	; (23910 <z_impl_k_yield+0x10c>)
   238e4:	4812      	ldr	r0, [pc, #72]	; (23930 <z_impl_k_yield+0x12c>)
   238e6:	f003 fa44 	bl	26d72 <assert_print>
   238ea:	21e1      	movs	r1, #225	; 0xe1
   238ec:	e7b3      	b.n	23856 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   238ee:	428a      	cmp	r2, r1
   238f0:	d0d8      	beq.n	238a4 <z_impl_k_yield+0xa0>
   238f2:	6812      	ldr	r2, [r2, #0]
   238f4:	e7d5      	b.n	238a2 <z_impl_k_yield+0x9e>
   238f6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   238f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   238fc:	f7ed b972 	b.w	10be4 <arch_swap>
   23900:	000332e1 	.word	0x000332e1
   23904:	0003354e 	.word	0x0003354e
   23908:	0002dd81 	.word	0x0002dd81
   2390c:	00031dba 	.word	0x00031dba
   23910:	20021a68 	.word	0x20021a68
   23914:	0002ebe3 	.word	0x0002ebe3
   23918:	0002ec3c 	.word	0x0002ec3c
   2391c:	0002ec51 	.word	0x0002ec51
   23920:	20021a20 	.word	0x20021a20
   23924:	2000a108 	.word	0x2000a108
   23928:	00033597 	.word	0x00033597
   2392c:	0002ec10 	.word	0x0002ec10
   23930:	0002ec27 	.word	0x0002ec27

00023934 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   23934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23938:	4605      	mov	r5, r0
   2393a:	460e      	mov	r6, r1
   2393c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23940:	b16b      	cbz	r3, 2395e <z_tick_sleep+0x2a>
   23942:	493f      	ldr	r1, [pc, #252]	; (23a40 <z_tick_sleep+0x10c>)
   23944:	f240 538c 	movw	r3, #1420	; 0x58c
   23948:	4a3e      	ldr	r2, [pc, #248]	; (23a44 <z_tick_sleep+0x110>)
   2394a:	483f      	ldr	r0, [pc, #252]	; (23a48 <z_tick_sleep+0x114>)
   2394c:	f003 fa11 	bl	26d72 <assert_print>
   23950:	483e      	ldr	r0, [pc, #248]	; (23a4c <z_tick_sleep+0x118>)
   23952:	f003 fa0e 	bl	26d72 <assert_print>
   23956:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2395a:	483a      	ldr	r0, [pc, #232]	; (23a44 <z_tick_sleep+0x110>)
   2395c:	e025      	b.n	239aa <z_tick_sleep+0x76>
	if (ticks == 0) {
   2395e:	ea50 0301 	orrs.w	r3, r0, r1
   23962:	d103      	bne.n	2396c <z_tick_sleep+0x38>
	z_impl_k_yield();
   23964:	f7ff ff4e 	bl	23804 <z_impl_k_yield>
		return 0;
   23968:	2000      	movs	r0, #0
   2396a:	e066      	b.n	23a3a <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   2396c:	1c82      	adds	r2, r0, #2
   2396e:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   23972:	db1c      	blt.n	239ae <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   23974:	f008 f905 	bl	2bb82 <sys_clock_tick_get_32>
   23978:	182c      	adds	r4, r5, r0
   2397a:	f04f 0320 	mov.w	r3, #32
   2397e:	f3ef 8811 	mrs	r8, BASEPRI
   23982:	f383 8812 	msr	BASEPRI_MAX, r3
   23986:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2398a:	4831      	ldr	r0, [pc, #196]	; (23a50 <z_tick_sleep+0x11c>)
   2398c:	f7fd fec8 	bl	21720 <z_spin_lock_valid>
   23990:	b988      	cbnz	r0, 239b6 <z_tick_sleep+0x82>
   23992:	2394      	movs	r3, #148	; 0x94
   23994:	4a2f      	ldr	r2, [pc, #188]	; (23a54 <z_tick_sleep+0x120>)
   23996:	4930      	ldr	r1, [pc, #192]	; (23a58 <z_tick_sleep+0x124>)
   23998:	482b      	ldr	r0, [pc, #172]	; (23a48 <z_tick_sleep+0x114>)
   2399a:	f003 f9ea 	bl	26d72 <assert_print>
   2399e:	492c      	ldr	r1, [pc, #176]	; (23a50 <z_tick_sleep+0x11c>)
   239a0:	482e      	ldr	r0, [pc, #184]	; (23a5c <z_tick_sleep+0x128>)
   239a2:	f003 f9e6 	bl	26d72 <assert_print>
   239a6:	2194      	movs	r1, #148	; 0x94
   239a8:	482a      	ldr	r0, [pc, #168]	; (23a54 <z_tick_sleep+0x120>)
   239aa:	f003 f9db 	bl	26d64 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   239ae:	f06f 0401 	mvn.w	r4, #1
   239b2:	1a24      	subs	r4, r4, r0
   239b4:	e7e1      	b.n	2397a <z_tick_sleep+0x46>
	pending_current = _current;
   239b6:	4f2a      	ldr	r7, [pc, #168]	; (23a60 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   239b8:	4825      	ldr	r0, [pc, #148]	; (23a50 <z_tick_sleep+0x11c>)
   239ba:	f7fd fecd 	bl	21758 <z_spin_lock_set_owner>
   239be:	68b8      	ldr	r0, [r7, #8]
   239c0:	4b28      	ldr	r3, [pc, #160]	; (23a64 <z_tick_sleep+0x130>)
   239c2:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   239c4:	f7ff fbd2 	bl	2316c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   239c8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   239ca:	462a      	mov	r2, r5
   239cc:	4633      	mov	r3, r6
   239ce:	3018      	adds	r0, #24
   239d0:	4925      	ldr	r1, [pc, #148]	; (23a68 <z_tick_sleep+0x134>)
   239d2:	f000 fa2b 	bl	23e2c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   239d6:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239d8:	481d      	ldr	r0, [pc, #116]	; (23a50 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   239da:	7b53      	ldrb	r3, [r2, #13]
   239dc:	f043 0310 	orr.w	r3, r3, #16
   239e0:	7353      	strb	r3, [r2, #13]
   239e2:	f7fd feab 	bl	2173c <z_spin_unlock_valid>
   239e6:	b958      	cbnz	r0, 23a00 <z_tick_sleep+0xcc>
   239e8:	23e1      	movs	r3, #225	; 0xe1
   239ea:	4a1a      	ldr	r2, [pc, #104]	; (23a54 <z_tick_sleep+0x120>)
   239ec:	491f      	ldr	r1, [pc, #124]	; (23a6c <z_tick_sleep+0x138>)
   239ee:	4816      	ldr	r0, [pc, #88]	; (23a48 <z_tick_sleep+0x114>)
   239f0:	f003 f9bf 	bl	26d72 <assert_print>
   239f4:	4916      	ldr	r1, [pc, #88]	; (23a50 <z_tick_sleep+0x11c>)
   239f6:	481e      	ldr	r0, [pc, #120]	; (23a70 <z_tick_sleep+0x13c>)
   239f8:	f003 f9bb 	bl	26d72 <assert_print>
   239fc:	21e1      	movs	r1, #225	; 0xe1
   239fe:	e7d3      	b.n	239a8 <z_tick_sleep+0x74>
   23a00:	4640      	mov	r0, r8
   23a02:	f7ed f8ef 	bl	10be4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   23a06:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   23a08:	7b5b      	ldrb	r3, [r3, #13]
   23a0a:	06db      	lsls	r3, r3, #27
   23a0c:	d50c      	bpl.n	23a28 <z_tick_sleep+0xf4>
   23a0e:	4919      	ldr	r1, [pc, #100]	; (23a74 <z_tick_sleep+0x140>)
   23a10:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   23a14:	4a0b      	ldr	r2, [pc, #44]	; (23a44 <z_tick_sleep+0x110>)
   23a16:	480c      	ldr	r0, [pc, #48]	; (23a48 <z_tick_sleep+0x114>)
   23a18:	f003 f9ab 	bl	26d72 <assert_print>
   23a1c:	480b      	ldr	r0, [pc, #44]	; (23a4c <z_tick_sleep+0x118>)
   23a1e:	f003 f9a8 	bl	26d72 <assert_print>
   23a22:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   23a26:	e798      	b.n	2395a <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   23a28:	f008 f8ab 	bl	2bb82 <sys_clock_tick_get_32>
   23a2c:	1a20      	subs	r0, r4, r0
   23a2e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   23a32:	2801      	cmp	r0, #1
   23a34:	f173 0300 	sbcs.w	r3, r3, #0
   23a38:	db96      	blt.n	23968 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   23a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23a3e:	bf00      	nop
   23a40:	000332e1 	.word	0x000332e1
   23a44:	0003354e 	.word	0x0003354e
   23a48:	0002dd81 	.word	0x0002dd81
   23a4c:	00031dba 	.word	0x00031dba
   23a50:	20021a68 	.word	0x20021a68
   23a54:	0002ebe3 	.word	0x0002ebe3
   23a58:	0002ec3c 	.word	0x0002ec3c
   23a5c:	0002ec51 	.word	0x0002ec51
   23a60:	20021a20 	.word	0x20021a20
   23a64:	20021a5c 	.word	0x20021a5c
   23a68:	00023605 	.word	0x00023605
   23a6c:	0002ec10 	.word	0x0002ec10
   23a70:	0002ec27 	.word	0x0002ec27
   23a74:	00033693 	.word	0x00033693

00023a78 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   23a78:	b508      	push	{r3, lr}
   23a7a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23a7e:	b173      	cbz	r3, 23a9e <z_impl_k_sleep+0x26>
   23a80:	4912      	ldr	r1, [pc, #72]	; (23acc <z_impl_k_sleep+0x54>)
   23a82:	f240 53b7 	movw	r3, #1463	; 0x5b7
   23a86:	4a12      	ldr	r2, [pc, #72]	; (23ad0 <z_impl_k_sleep+0x58>)
   23a88:	4812      	ldr	r0, [pc, #72]	; (23ad4 <z_impl_k_sleep+0x5c>)
   23a8a:	f003 f972 	bl	26d72 <assert_print>
   23a8e:	4812      	ldr	r0, [pc, #72]	; (23ad8 <z_impl_k_sleep+0x60>)
   23a90:	f003 f96f 	bl	26d72 <assert_print>
   23a94:	f240 51b7 	movw	r1, #1463	; 0x5b7
   23a98:	480d      	ldr	r0, [pc, #52]	; (23ad0 <z_impl_k_sleep+0x58>)
   23a9a:	f003 f963 	bl	26d64 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23a9e:	f1b1 3fff 	cmp.w	r1, #4294967295
   23aa2:	bf08      	it	eq
   23aa4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   23aa8:	d106      	bne.n	23ab8 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   23aaa:	4b0c      	ldr	r3, [pc, #48]	; (23adc <z_impl_k_sleep+0x64>)
   23aac:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23aae:	f7ff fcd7 	bl	23460 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   23ab2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   23ab6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   23ab8:	f7ff ff3c 	bl	23934 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   23abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23ac0:	fb80 0303 	smull	r0, r3, r0, r3
   23ac4:	0bc0      	lsrs	r0, r0, #15
   23ac6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   23aca:	e7f4      	b.n	23ab6 <z_impl_k_sleep+0x3e>
   23acc:	000332e1 	.word	0x000332e1
   23ad0:	0003354e 	.word	0x0003354e
   23ad4:	0002dd81 	.word	0x0002dd81
   23ad8:	00031dba 	.word	0x00031dba
   23adc:	20021a20 	.word	0x20021a20

00023ae0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   23ae0:	4b01      	ldr	r3, [pc, #4]	; (23ae8 <z_impl_z_current_get+0x8>)
   23ae2:	6898      	ldr	r0, [r3, #8]
   23ae4:	4770      	bx	lr
   23ae6:	bf00      	nop
   23ae8:	20021a20 	.word	0x20021a20

00023aec <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   23aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23af0:	4604      	mov	r4, r0
   23af2:	f04f 0320 	mov.w	r3, #32
   23af6:	f3ef 8611 	mrs	r6, BASEPRI
   23afa:	f383 8812 	msr	BASEPRI_MAX, r3
   23afe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b02:	4851      	ldr	r0, [pc, #324]	; (23c48 <z_thread_abort+0x15c>)
   23b04:	f7fd fe0c 	bl	21720 <z_spin_lock_valid>
   23b08:	b968      	cbnz	r0, 23b26 <z_thread_abort+0x3a>
   23b0a:	2394      	movs	r3, #148	; 0x94
   23b0c:	4a4f      	ldr	r2, [pc, #316]	; (23c4c <z_thread_abort+0x160>)
   23b0e:	4950      	ldr	r1, [pc, #320]	; (23c50 <z_thread_abort+0x164>)
   23b10:	4850      	ldr	r0, [pc, #320]	; (23c54 <z_thread_abort+0x168>)
   23b12:	f003 f92e 	bl	26d72 <assert_print>
   23b16:	494c      	ldr	r1, [pc, #304]	; (23c48 <z_thread_abort+0x15c>)
   23b18:	484f      	ldr	r0, [pc, #316]	; (23c58 <z_thread_abort+0x16c>)
   23b1a:	f003 f92a 	bl	26d72 <assert_print>
   23b1e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b20:	484a      	ldr	r0, [pc, #296]	; (23c4c <z_thread_abort+0x160>)
   23b22:	f003 f91f 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   23b26:	4848      	ldr	r0, [pc, #288]	; (23c48 <z_thread_abort+0x15c>)
   23b28:	f7fd fe16 	bl	21758 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   23b2c:	7b23      	ldrb	r3, [r4, #12]
   23b2e:	07d9      	lsls	r1, r3, #31
   23b30:	d522      	bpl.n	23b78 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b32:	4845      	ldr	r0, [pc, #276]	; (23c48 <z_thread_abort+0x15c>)
   23b34:	f7fd fe02 	bl	2173c <z_spin_unlock_valid>
   23b38:	b958      	cbnz	r0, 23b52 <z_thread_abort+0x66>
   23b3a:	23c2      	movs	r3, #194	; 0xc2
   23b3c:	4a43      	ldr	r2, [pc, #268]	; (23c4c <z_thread_abort+0x160>)
   23b3e:	4947      	ldr	r1, [pc, #284]	; (23c5c <z_thread_abort+0x170>)
   23b40:	4844      	ldr	r0, [pc, #272]	; (23c54 <z_thread_abort+0x168>)
   23b42:	f003 f916 	bl	26d72 <assert_print>
   23b46:	4940      	ldr	r1, [pc, #256]	; (23c48 <z_thread_abort+0x15c>)
   23b48:	4845      	ldr	r0, [pc, #276]	; (23c60 <z_thread_abort+0x174>)
   23b4a:	f003 f912 	bl	26d72 <assert_print>
   23b4e:	21c2      	movs	r1, #194	; 0xc2
   23b50:	e7e6      	b.n	23b20 <z_thread_abort+0x34>
	__asm__ volatile(
   23b52:	f386 8811 	msr	BASEPRI, r6
   23b56:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   23b5a:	f240 63c3 	movw	r3, #1731	; 0x6c3
   23b5e:	4a41      	ldr	r2, [pc, #260]	; (23c64 <z_thread_abort+0x178>)
   23b60:	4941      	ldr	r1, [pc, #260]	; (23c68 <z_thread_abort+0x17c>)
   23b62:	483c      	ldr	r0, [pc, #240]	; (23c54 <z_thread_abort+0x168>)
   23b64:	f003 f905 	bl	26d72 <assert_print>
   23b68:	4621      	mov	r1, r4
   23b6a:	4840      	ldr	r0, [pc, #256]	; (23c6c <z_thread_abort+0x180>)
   23b6c:	f003 f901 	bl	26d72 <assert_print>
   23b70:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   23b74:	483b      	ldr	r0, [pc, #236]	; (23c64 <z_thread_abort+0x178>)
   23b76:	e7d4      	b.n	23b22 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   23b78:	7b63      	ldrb	r3, [r4, #13]
   23b7a:	071a      	lsls	r2, r3, #28
   23b7c:	d50a      	bpl.n	23b94 <z_thread_abort+0xa8>
   23b7e:	4832      	ldr	r0, [pc, #200]	; (23c48 <z_thread_abort+0x15c>)
   23b80:	f7fd fddc 	bl	2173c <z_spin_unlock_valid>
   23b84:	2800      	cmp	r0, #0
   23b86:	d0d8      	beq.n	23b3a <z_thread_abort+0x4e>
   23b88:	f386 8811 	msr	BASEPRI, r6
   23b8c:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   23b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23b94:	f023 0220 	bic.w	r2, r3, #32
   23b98:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   23b9c:	09d2      	lsrs	r2, r2, #7
   23b9e:	d12c      	bne.n	23bfa <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23ba0:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   23ba2:	68a3      	ldr	r3, [r4, #8]
   23ba4:	b113      	cbz	r3, 23bac <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   23ba6:	4620      	mov	r0, r4
   23ba8:	f7ff fcc2 	bl	23530 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   23bac:	f104 0018 	add.w	r0, r4, #24
   23bb0:	f000 fa02 	bl	23fb8 <z_abort_timeout>
   23bb4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   23bb8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   23bbc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23bbe:	42bd      	cmp	r5, r7
   23bc0:	d000      	beq.n	23bc4 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23bc2:	bb25      	cbnz	r5, 23c0e <z_thread_abort+0x122>
		update_cache(1);
   23bc4:	2001      	movs	r0, #1
   23bc6:	f7fe ff07 	bl	229d8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   23bca:	4b29      	ldr	r3, [pc, #164]	; (23c70 <z_thread_abort+0x184>)
   23bcc:	689b      	ldr	r3, [r3, #8]
   23bce:	42a3      	cmp	r3, r4
   23bd0:	d1d5      	bne.n	23b7e <z_thread_abort+0x92>
   23bd2:	f3ef 8305 	mrs	r3, IPSR
   23bd6:	2b00      	cmp	r3, #0
   23bd8:	d1d1      	bne.n	23b7e <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bda:	481b      	ldr	r0, [pc, #108]	; (23c48 <z_thread_abort+0x15c>)
   23bdc:	f7fd fdae 	bl	2173c <z_spin_unlock_valid>
   23be0:	bb10      	cbnz	r0, 23c28 <z_thread_abort+0x13c>
   23be2:	23e1      	movs	r3, #225	; 0xe1
   23be4:	4a19      	ldr	r2, [pc, #100]	; (23c4c <z_thread_abort+0x160>)
   23be6:	491d      	ldr	r1, [pc, #116]	; (23c5c <z_thread_abort+0x170>)
   23be8:	481a      	ldr	r0, [pc, #104]	; (23c54 <z_thread_abort+0x168>)
   23bea:	f003 f8c2 	bl	26d72 <assert_print>
   23bee:	4916      	ldr	r1, [pc, #88]	; (23c48 <z_thread_abort+0x15c>)
   23bf0:	481b      	ldr	r0, [pc, #108]	; (23c60 <z_thread_abort+0x174>)
   23bf2:	f003 f8be 	bl	26d72 <assert_print>
   23bf6:	21e1      	movs	r1, #225	; 0xe1
   23bf8:	e792      	b.n	23b20 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23bfa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   23bfe:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   23c02:	4621      	mov	r1, r4
   23c04:	481b      	ldr	r0, [pc, #108]	; (23c74 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23c06:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23c08:	f7ff f9c8 	bl	22f9c <z_priq_dumb_remove>
}
   23c0c:	e7c9      	b.n	23ba2 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   23c0e:	4628      	mov	r0, r5
   23c10:	f7ff fc8e 	bl	23530 <unpend_thread_no_timeout>
   23c14:	f105 0018 	add.w	r0, r5, #24
   23c18:	f000 f9ce 	bl	23fb8 <z_abort_timeout>
		ready_thread(thread);
   23c1c:	4628      	mov	r0, r5
   23c1e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   23c22:	f7fe ff0d 	bl	22a40 <ready_thread>
   23c26:	e7c9      	b.n	23bbc <z_thread_abort+0xd0>
   23c28:	4630      	mov	r0, r6
   23c2a:	f7ec ffdb 	bl	10be4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   23c2e:	490e      	ldr	r1, [pc, #56]	; (23c68 <z_thread_abort+0x17c>)
   23c30:	f240 63f2 	movw	r3, #1778	; 0x6f2
   23c34:	4a0b      	ldr	r2, [pc, #44]	; (23c64 <z_thread_abort+0x178>)
   23c36:	4807      	ldr	r0, [pc, #28]	; (23c54 <z_thread_abort+0x168>)
   23c38:	f003 f89b 	bl	26d72 <assert_print>
   23c3c:	480e      	ldr	r0, [pc, #56]	; (23c78 <z_thread_abort+0x18c>)
   23c3e:	f003 f898 	bl	26d72 <assert_print>
   23c42:	f240 61f2 	movw	r1, #1778	; 0x6f2
   23c46:	e795      	b.n	23b74 <z_thread_abort+0x88>
   23c48:	20021a68 	.word	0x20021a68
   23c4c:	0002ebe3 	.word	0x0002ebe3
   23c50:	0002ec3c 	.word	0x0002ec3c
   23c54:	0002dd81 	.word	0x0002dd81
   23c58:	0002ec51 	.word	0x0002ec51
   23c5c:	0002ec10 	.word	0x0002ec10
   23c60:	0002ec27 	.word	0x0002ec27
   23c64:	0003354e 	.word	0x0003354e
   23c68:	00033a12 	.word	0x00033a12
   23c6c:	000336d3 	.word	0x000336d3
   23c70:	20021a20 	.word	0x20021a20
   23c74:	20021a40 	.word	0x20021a40
   23c78:	000336f2 	.word	0x000336f2

00023c7c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   23c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23c80:	4606      	mov	r6, r0
   23c82:	4688      	mov	r8, r1
   23c84:	4617      	mov	r7, r2
	__asm__ volatile(
   23c86:	f04f 0320 	mov.w	r3, #32
   23c8a:	f3ef 8911 	mrs	r9, BASEPRI
   23c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c96:	4821      	ldr	r0, [pc, #132]	; (23d1c <z_sched_wake+0xa0>)
   23c98:	f7fd fd42 	bl	21720 <z_spin_lock_valid>
   23c9c:	4605      	mov	r5, r0
   23c9e:	b968      	cbnz	r0, 23cbc <z_sched_wake+0x40>
   23ca0:	2394      	movs	r3, #148	; 0x94
   23ca2:	4a1f      	ldr	r2, [pc, #124]	; (23d20 <z_sched_wake+0xa4>)
   23ca4:	491f      	ldr	r1, [pc, #124]	; (23d24 <z_sched_wake+0xa8>)
   23ca6:	4820      	ldr	r0, [pc, #128]	; (23d28 <z_sched_wake+0xac>)
   23ca8:	f003 f863 	bl	26d72 <assert_print>
   23cac:	491b      	ldr	r1, [pc, #108]	; (23d1c <z_sched_wake+0xa0>)
   23cae:	481f      	ldr	r0, [pc, #124]	; (23d2c <z_sched_wake+0xb0>)
   23cb0:	f003 f85f 	bl	26d72 <assert_print>
   23cb4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cb6:	481a      	ldr	r0, [pc, #104]	; (23d20 <z_sched_wake+0xa4>)
   23cb8:	f003 f854 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   23cbc:	4817      	ldr	r0, [pc, #92]	; (23d1c <z_sched_wake+0xa0>)
   23cbe:	f7fd fd4b 	bl	21758 <z_spin_lock_set_owner>
	return list->head == list;
   23cc2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23cc4:	42a6      	cmp	r6, r4
   23cc6:	d01d      	beq.n	23d04 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   23cc8:	b1f4      	cbz	r4, 23d08 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   23cca:	4620      	mov	r0, r4
   23ccc:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   23cd0:	6167      	str	r7, [r4, #20]
   23cd2:	f7ff fc2d 	bl	23530 <unpend_thread_no_timeout>
   23cd6:	f104 0018 	add.w	r0, r4, #24
   23cda:	f000 f96d 	bl	23fb8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   23cde:	4620      	mov	r0, r4
   23ce0:	f7fe feae 	bl	22a40 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ce4:	480d      	ldr	r0, [pc, #52]	; (23d1c <z_sched_wake+0xa0>)
   23ce6:	f7fd fd29 	bl	2173c <z_spin_unlock_valid>
   23cea:	b978      	cbnz	r0, 23d0c <z_sched_wake+0x90>
   23cec:	23c2      	movs	r3, #194	; 0xc2
   23cee:	4a0c      	ldr	r2, [pc, #48]	; (23d20 <z_sched_wake+0xa4>)
   23cf0:	490f      	ldr	r1, [pc, #60]	; (23d30 <z_sched_wake+0xb4>)
   23cf2:	480d      	ldr	r0, [pc, #52]	; (23d28 <z_sched_wake+0xac>)
   23cf4:	f003 f83d 	bl	26d72 <assert_print>
   23cf8:	4908      	ldr	r1, [pc, #32]	; (23d1c <z_sched_wake+0xa0>)
   23cfa:	480e      	ldr	r0, [pc, #56]	; (23d34 <z_sched_wake+0xb8>)
   23cfc:	f003 f839 	bl	26d72 <assert_print>
   23d00:	21c2      	movs	r1, #194	; 0xc2
   23d02:	e7d8      	b.n	23cb6 <z_sched_wake+0x3a>
	bool ret = false;
   23d04:	2500      	movs	r5, #0
   23d06:	e7ed      	b.n	23ce4 <z_sched_wake+0x68>
   23d08:	4625      	mov	r5, r4
   23d0a:	e7eb      	b.n	23ce4 <z_sched_wake+0x68>
	__asm__ volatile(
   23d0c:	f389 8811 	msr	BASEPRI, r9
   23d10:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   23d14:	4628      	mov	r0, r5
   23d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23d1a:	bf00      	nop
   23d1c:	20021a68 	.word	0x20021a68
   23d20:	0002ebe3 	.word	0x0002ebe3
   23d24:	0002ec3c 	.word	0x0002ec3c
   23d28:	0002dd81 	.word	0x0002dd81
   23d2c:	0002ec51 	.word	0x0002ec51
   23d30:	0002ec10 	.word	0x0002ec10
   23d34:	0002ec27 	.word	0x0002ec27

00023d38 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   23d38:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23d3a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   23d3e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23d40:	e9cd 6700 	strd	r6, r7, [sp]
   23d44:	f7ff fa84 	bl	23250 <z_pend_curr>

	if (data != NULL) {
   23d48:	b11c      	cbz	r4, 23d52 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   23d4a:	4b03      	ldr	r3, [pc, #12]	; (23d58 <z_sched_wait+0x20>)
   23d4c:	689b      	ldr	r3, [r3, #8]
   23d4e:	695b      	ldr	r3, [r3, #20]
   23d50:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   23d52:	b002      	add	sp, #8
   23d54:	bdd0      	pop	{r4, r6, r7, pc}
   23d56:	bf00      	nop
   23d58:	20021a20 	.word	0x20021a20

00023d5c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   23d5c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   23d5e:	4806      	ldr	r0, [pc, #24]	; (23d78 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   23d60:	4a06      	ldr	r2, [pc, #24]	; (23d7c <z_data_copy+0x20>)
   23d62:	4907      	ldr	r1, [pc, #28]	; (23d80 <z_data_copy+0x24>)
   23d64:	1a12      	subs	r2, r2, r0
   23d66:	f007 fdf6 	bl	2b956 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   23d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   23d6e:	4a05      	ldr	r2, [pc, #20]	; (23d84 <z_data_copy+0x28>)
   23d70:	4905      	ldr	r1, [pc, #20]	; (23d88 <z_data_copy+0x2c>)
   23d72:	4806      	ldr	r0, [pc, #24]	; (23d8c <z_data_copy+0x30>)
   23d74:	f007 bdef 	b.w	2b956 <z_early_memcpy>
   23d78:	20008000 	.word	0x20008000
   23d7c:	20008de8 	.word	0x20008de8
   23d80:	00033d14 	.word	0x00033d14
   23d84:	00000000 	.word	0x00000000
   23d88:	00033d14 	.word	0x00033d14
   23d8c:	20008000 	.word	0x20008000

00023d90 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   23d90:	4b03      	ldr	r3, [pc, #12]	; (23da0 <elapsed+0x10>)
   23d92:	681b      	ldr	r3, [r3, #0]
   23d94:	b90b      	cbnz	r3, 23d9a <elapsed+0xa>
   23d96:	f7fa ba57 	b.w	1e248 <sys_clock_elapsed>
}
   23d9a:	2000      	movs	r0, #0
   23d9c:	4770      	bx	lr
   23d9e:	bf00      	nop
   23da0:	20021a6c 	.word	0x20021a6c

00023da4 <next_timeout>:

static int32_t next_timeout(void)
{
   23da4:	b510      	push	{r4, lr}
	return list->head == list;
   23da6:	4b11      	ldr	r3, [pc, #68]	; (23dec <next_timeout+0x48>)
   23da8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23daa:	429c      	cmp	r4, r3
   23dac:	d10a      	bne.n	23dc4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   23dae:	f7ff ffef 	bl	23d90 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   23db2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23db6:	4b0e      	ldr	r3, [pc, #56]	; (23df0 <next_timeout+0x4c>)
   23db8:	691b      	ldr	r3, [r3, #16]
   23dba:	b113      	cbz	r3, 23dc2 <next_timeout+0x1e>
   23dbc:	4298      	cmp	r0, r3
   23dbe:	bfa8      	it	ge
   23dc0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   23dc2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   23dc4:	f7ff ffe4 	bl	23d90 <elapsed>
	if ((to == NULL) ||
   23dc8:	2c00      	cmp	r4, #0
   23dca:	d0f2      	beq.n	23db2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   23dcc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   23dd0:	1a1b      	subs	r3, r3, r0
   23dd2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   23dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   23dda:	f172 0100 	sbcs.w	r1, r2, #0
   23dde:	dae8      	bge.n	23db2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   23de0:	2a00      	cmp	r2, #0
   23de2:	bfac      	ite	ge
   23de4:	4618      	movge	r0, r3
   23de6:	2000      	movlt	r0, #0
   23de8:	e7e5      	b.n	23db6 <next_timeout+0x12>
   23dea:	bf00      	nop
   23dec:	20008744 	.word	0x20008744
   23df0:	20021a20 	.word	0x20021a20

00023df4 <remove_timeout>:
{
   23df4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23df6:	b170      	cbz	r0, 23e16 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   23df8:	4b0b      	ldr	r3, [pc, #44]	; (23e28 <remove_timeout+0x34>)
   23dfa:	685b      	ldr	r3, [r3, #4]
   23dfc:	4298      	cmp	r0, r3
   23dfe:	d00a      	beq.n	23e16 <remove_timeout+0x22>
   23e00:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   23e02:	b143      	cbz	r3, 23e16 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23e04:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23e08:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23e0c:	1912      	adds	r2, r2, r4
   23e0e:	eb41 0105 	adc.w	r1, r1, r5
   23e12:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   23e16:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23e1a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23e1c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23e1e:	2300      	movs	r3, #0
	node->prev = NULL;
   23e20:	e9c0 3300 	strd	r3, r3, [r0]
}
   23e24:	bd30      	pop	{r4, r5, pc}
   23e26:	bf00      	nop
   23e28:	20008744 	.word	0x20008744

00023e2c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
   23e30:	bf08      	it	eq
   23e32:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e3a:	4604      	mov	r4, r0
   23e3c:	4692      	mov	sl, r2
   23e3e:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23e40:	f000 809e 	beq.w	23f80 <z_add_timeout+0x154>
	return node->next != NULL;
   23e44:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   23e46:	b166      	cbz	r6, 23e62 <z_add_timeout+0x36>
   23e48:	494e      	ldr	r1, [pc, #312]	; (23f84 <z_add_timeout+0x158>)
   23e4a:	2363      	movs	r3, #99	; 0x63
   23e4c:	4a4e      	ldr	r2, [pc, #312]	; (23f88 <z_add_timeout+0x15c>)
   23e4e:	484f      	ldr	r0, [pc, #316]	; (23f8c <z_add_timeout+0x160>)
   23e50:	f002 ff8f 	bl	26d72 <assert_print>
   23e54:	484e      	ldr	r0, [pc, #312]	; (23f90 <z_add_timeout+0x164>)
   23e56:	f002 ff8c 	bl	26d72 <assert_print>
   23e5a:	2163      	movs	r1, #99	; 0x63
   23e5c:	484a      	ldr	r0, [pc, #296]	; (23f88 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e5e:	f002 ff81 	bl	26d64 <assert_post_action>
	to->fn = fn;
   23e62:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   23e64:	f04f 0320 	mov.w	r3, #32
   23e68:	f3ef 8711 	mrs	r7, BASEPRI
   23e6c:	f383 8812 	msr	BASEPRI_MAX, r3
   23e70:	f3bf 8f6f 	isb	sy
   23e74:	4847      	ldr	r0, [pc, #284]	; (23f94 <z_add_timeout+0x168>)
   23e76:	f7fd fc53 	bl	21720 <z_spin_lock_valid>
   23e7a:	b960      	cbnz	r0, 23e96 <z_add_timeout+0x6a>
   23e7c:	2394      	movs	r3, #148	; 0x94
   23e7e:	4a46      	ldr	r2, [pc, #280]	; (23f98 <z_add_timeout+0x16c>)
   23e80:	4946      	ldr	r1, [pc, #280]	; (23f9c <z_add_timeout+0x170>)
   23e82:	4842      	ldr	r0, [pc, #264]	; (23f8c <z_add_timeout+0x160>)
   23e84:	f002 ff75 	bl	26d72 <assert_print>
   23e88:	4942      	ldr	r1, [pc, #264]	; (23f94 <z_add_timeout+0x168>)
   23e8a:	4845      	ldr	r0, [pc, #276]	; (23fa0 <z_add_timeout+0x174>)
   23e8c:	f002 ff71 	bl	26d72 <assert_print>
   23e90:	2194      	movs	r1, #148	; 0x94
   23e92:	4841      	ldr	r0, [pc, #260]	; (23f98 <z_add_timeout+0x16c>)
   23e94:	e7e3      	b.n	23e5e <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   23e96:	483f      	ldr	r0, [pc, #252]	; (23f94 <z_add_timeout+0x168>)
   23e98:	f7fd fc5e 	bl	21758 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   23e9c:	f1ba 3fff 	cmp.w	sl, #4294967295
   23ea0:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   23ea4:	da23      	bge.n	23eee <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   23ea6:	f06f 0301 	mvn.w	r3, #1
   23eaa:	493e      	ldr	r1, [pc, #248]	; (23fa4 <z_add_timeout+0x178>)
   23eac:	e9d1 2000 	ldrd	r2, r0, [r1]
   23eb0:	1a9b      	subs	r3, r3, r2
   23eb2:	f04f 32ff 	mov.w	r2, #4294967295
   23eb6:	eb62 0000 	sbc.w	r0, r2, r0
   23eba:	ebb3 030a 	subs.w	r3, r3, sl
   23ebe:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   23ec2:	2b01      	cmp	r3, #1
   23ec4:	f170 0200 	sbcs.w	r2, r0, #0
   23ec8:	da01      	bge.n	23ece <z_add_timeout+0xa2>
   23eca:	2301      	movs	r3, #1
   23ecc:	4630      	mov	r0, r6
   23ece:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   23ed2:	4b35      	ldr	r3, [pc, #212]	; (23fa8 <z_add_timeout+0x17c>)
   23ed4:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   23ed6:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23eda:	429a      	cmp	r2, r3
   23edc:	bf18      	it	ne
   23ede:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   23ee0:	b986      	cbnz	r6, 23f04 <z_add_timeout+0xd8>
	node->prev = tail;
   23ee2:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   23ee6:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   23eea:	605c      	str	r4, [r3, #4]
}
   23eec:	e01c      	b.n	23f28 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   23eee:	f7ff ff4f 	bl	23d90 <elapsed>
   23ef2:	f11a 0801 	adds.w	r8, sl, #1
   23ef6:	f145 0500 	adc.w	r5, r5, #0
   23efa:	eb18 0300 	adds.w	r3, r8, r0
   23efe:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   23f02:	e7e4      	b.n	23ece <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   23f04:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   23f08:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   23f0c:	428a      	cmp	r2, r1
   23f0e:	eb70 0e05 	sbcs.w	lr, r0, r5
   23f12:	da28      	bge.n	23f66 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   23f14:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   23f16:	6872      	ldr	r2, [r6, #4]
   23f18:	eb65 0500 	sbc.w	r5, r5, r0
   23f1c:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   23f20:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   23f24:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23f26:	6074      	str	r4, [r6, #4]
	return list->head == list;
   23f28:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f2a:	429a      	cmp	r2, r3
   23f2c:	d00b      	beq.n	23f46 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   23f2e:	4294      	cmp	r4, r2
   23f30:	d109      	bne.n	23f46 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   23f32:	f7ff ff37 	bl	23da4 <next_timeout>

			if (next_time == 0 ||
   23f36:	b118      	cbz	r0, 23f40 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   23f38:	4b1c      	ldr	r3, [pc, #112]	; (23fac <z_add_timeout+0x180>)
			if (next_time == 0 ||
   23f3a:	691b      	ldr	r3, [r3, #16]
   23f3c:	4283      	cmp	r3, r0
   23f3e:	d002      	beq.n	23f46 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   23f40:	2100      	movs	r1, #0
   23f42:	f7fa f951 	bl	1e1e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f46:	4813      	ldr	r0, [pc, #76]	; (23f94 <z_add_timeout+0x168>)
   23f48:	f7fd fbf8 	bl	2173c <z_spin_unlock_valid>
   23f4c:	b9a0      	cbnz	r0, 23f78 <z_add_timeout+0x14c>
   23f4e:	23c2      	movs	r3, #194	; 0xc2
   23f50:	4a11      	ldr	r2, [pc, #68]	; (23f98 <z_add_timeout+0x16c>)
   23f52:	4917      	ldr	r1, [pc, #92]	; (23fb0 <z_add_timeout+0x184>)
   23f54:	480d      	ldr	r0, [pc, #52]	; (23f8c <z_add_timeout+0x160>)
   23f56:	f002 ff0c 	bl	26d72 <assert_print>
   23f5a:	490e      	ldr	r1, [pc, #56]	; (23f94 <z_add_timeout+0x168>)
   23f5c:	4815      	ldr	r0, [pc, #84]	; (23fb4 <z_add_timeout+0x188>)
   23f5e:	f002 ff08 	bl	26d72 <assert_print>
   23f62:	21c2      	movs	r1, #194	; 0xc2
   23f64:	e795      	b.n	23e92 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   23f66:	1a52      	subs	r2, r2, r1
   23f68:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   23f6c:	4566      	cmp	r6, ip
   23f6e:	e9c4 2004 	strd	r2, r0, [r4, #16]
   23f72:	d0b6      	beq.n	23ee2 <z_add_timeout+0xb6>
   23f74:	6836      	ldr	r6, [r6, #0]
   23f76:	e7b3      	b.n	23ee0 <z_add_timeout+0xb4>
	__asm__ volatile(
   23f78:	f387 8811 	msr	BASEPRI, r7
   23f7c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   23f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23f84:	00033738 	.word	0x00033738
   23f88:	00033714 	.word	0x00033714
   23f8c:	0002dd81 	.word	0x0002dd81
   23f90:	00031dba 	.word	0x00031dba
   23f94:	20021a70 	.word	0x20021a70
   23f98:	0002ebe3 	.word	0x0002ebe3
   23f9c:	0002ec3c 	.word	0x0002ec3c
   23fa0:	0002ec51 	.word	0x0002ec51
   23fa4:	2000a2c0 	.word	0x2000a2c0
   23fa8:	20008744 	.word	0x20008744
   23fac:	20021a20 	.word	0x20021a20
   23fb0:	0002ec10 	.word	0x0002ec10
   23fb4:	0002ec27 	.word	0x0002ec27

00023fb8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   23fb8:	b538      	push	{r3, r4, r5, lr}
   23fba:	4604      	mov	r4, r0
	__asm__ volatile(
   23fbc:	f04f 0320 	mov.w	r3, #32
   23fc0:	f3ef 8511 	mrs	r5, BASEPRI
   23fc4:	f383 8812 	msr	BASEPRI_MAX, r3
   23fc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fcc:	4819      	ldr	r0, [pc, #100]	; (24034 <z_abort_timeout+0x7c>)
   23fce:	f7fd fba7 	bl	21720 <z_spin_lock_valid>
   23fd2:	b968      	cbnz	r0, 23ff0 <z_abort_timeout+0x38>
   23fd4:	2394      	movs	r3, #148	; 0x94
   23fd6:	4a18      	ldr	r2, [pc, #96]	; (24038 <z_abort_timeout+0x80>)
   23fd8:	4918      	ldr	r1, [pc, #96]	; (2403c <z_abort_timeout+0x84>)
   23fda:	4819      	ldr	r0, [pc, #100]	; (24040 <z_abort_timeout+0x88>)
   23fdc:	f002 fec9 	bl	26d72 <assert_print>
   23fe0:	4914      	ldr	r1, [pc, #80]	; (24034 <z_abort_timeout+0x7c>)
   23fe2:	4818      	ldr	r0, [pc, #96]	; (24044 <z_abort_timeout+0x8c>)
   23fe4:	f002 fec5 	bl	26d72 <assert_print>
   23fe8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fea:	4813      	ldr	r0, [pc, #76]	; (24038 <z_abort_timeout+0x80>)
   23fec:	f002 feba 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ff0:	4810      	ldr	r0, [pc, #64]	; (24034 <z_abort_timeout+0x7c>)
   23ff2:	f7fd fbb1 	bl	21758 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   23ff6:	6823      	ldr	r3, [r4, #0]
   23ff8:	b19b      	cbz	r3, 24022 <z_abort_timeout+0x6a>
			remove_timeout(to);
   23ffa:	4620      	mov	r0, r4
   23ffc:	f7ff fefa 	bl	23df4 <remove_timeout>
			ret = 0;
   24000:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24002:	480c      	ldr	r0, [pc, #48]	; (24034 <z_abort_timeout+0x7c>)
   24004:	f7fd fb9a 	bl	2173c <z_spin_unlock_valid>
   24008:	b970      	cbnz	r0, 24028 <z_abort_timeout+0x70>
   2400a:	23c2      	movs	r3, #194	; 0xc2
   2400c:	4a0a      	ldr	r2, [pc, #40]	; (24038 <z_abort_timeout+0x80>)
   2400e:	490e      	ldr	r1, [pc, #56]	; (24048 <z_abort_timeout+0x90>)
   24010:	480b      	ldr	r0, [pc, #44]	; (24040 <z_abort_timeout+0x88>)
   24012:	f002 feae 	bl	26d72 <assert_print>
   24016:	4907      	ldr	r1, [pc, #28]	; (24034 <z_abort_timeout+0x7c>)
   24018:	480c      	ldr	r0, [pc, #48]	; (2404c <z_abort_timeout+0x94>)
   2401a:	f002 feaa 	bl	26d72 <assert_print>
   2401e:	21c2      	movs	r1, #194	; 0xc2
   24020:	e7e3      	b.n	23fea <z_abort_timeout+0x32>
	int ret = -EINVAL;
   24022:	f06f 0415 	mvn.w	r4, #21
   24026:	e7ec      	b.n	24002 <z_abort_timeout+0x4a>
	__asm__ volatile(
   24028:	f385 8811 	msr	BASEPRI, r5
   2402c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   24030:	4620      	mov	r0, r4
   24032:	bd38      	pop	{r3, r4, r5, pc}
   24034:	20021a70 	.word	0x20021a70
   24038:	0002ebe3 	.word	0x0002ebe3
   2403c:	0002ec3c 	.word	0x0002ec3c
   24040:	0002dd81 	.word	0x0002dd81
   24044:	0002ec51 	.word	0x0002ec51
   24048:	0002ec10 	.word	0x0002ec10
   2404c:	0002ec27 	.word	0x0002ec27

00024050 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   24050:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24052:	f04f 0320 	mov.w	r3, #32
   24056:	f3ef 8511 	mrs	r5, BASEPRI
   2405a:	f383 8812 	msr	BASEPRI_MAX, r3
   2405e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24062:	4817      	ldr	r0, [pc, #92]	; (240c0 <z_get_next_timeout_expiry+0x70>)
   24064:	f7fd fb5c 	bl	21720 <z_spin_lock_valid>
   24068:	b968      	cbnz	r0, 24086 <z_get_next_timeout_expiry+0x36>
   2406a:	2394      	movs	r3, #148	; 0x94
   2406c:	4a15      	ldr	r2, [pc, #84]	; (240c4 <z_get_next_timeout_expiry+0x74>)
   2406e:	4916      	ldr	r1, [pc, #88]	; (240c8 <z_get_next_timeout_expiry+0x78>)
   24070:	4816      	ldr	r0, [pc, #88]	; (240cc <z_get_next_timeout_expiry+0x7c>)
   24072:	f002 fe7e 	bl	26d72 <assert_print>
   24076:	4912      	ldr	r1, [pc, #72]	; (240c0 <z_get_next_timeout_expiry+0x70>)
   24078:	4815      	ldr	r0, [pc, #84]	; (240d0 <z_get_next_timeout_expiry+0x80>)
   2407a:	f002 fe7a 	bl	26d72 <assert_print>
   2407e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24080:	4810      	ldr	r0, [pc, #64]	; (240c4 <z_get_next_timeout_expiry+0x74>)
   24082:	f002 fe6f 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   24086:	480e      	ldr	r0, [pc, #56]	; (240c0 <z_get_next_timeout_expiry+0x70>)
   24088:	f7fd fb66 	bl	21758 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2408c:	f7ff fe8a 	bl	23da4 <next_timeout>
   24090:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24092:	480b      	ldr	r0, [pc, #44]	; (240c0 <z_get_next_timeout_expiry+0x70>)
   24094:	f7fd fb52 	bl	2173c <z_spin_unlock_valid>
   24098:	b958      	cbnz	r0, 240b2 <z_get_next_timeout_expiry+0x62>
   2409a:	23c2      	movs	r3, #194	; 0xc2
   2409c:	4a09      	ldr	r2, [pc, #36]	; (240c4 <z_get_next_timeout_expiry+0x74>)
   2409e:	490d      	ldr	r1, [pc, #52]	; (240d4 <z_get_next_timeout_expiry+0x84>)
   240a0:	480a      	ldr	r0, [pc, #40]	; (240cc <z_get_next_timeout_expiry+0x7c>)
   240a2:	f002 fe66 	bl	26d72 <assert_print>
   240a6:	4906      	ldr	r1, [pc, #24]	; (240c0 <z_get_next_timeout_expiry+0x70>)
   240a8:	480b      	ldr	r0, [pc, #44]	; (240d8 <z_get_next_timeout_expiry+0x88>)
   240aa:	f002 fe62 	bl	26d72 <assert_print>
   240ae:	21c2      	movs	r1, #194	; 0xc2
   240b0:	e7e6      	b.n	24080 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   240b2:	f385 8811 	msr	BASEPRI, r5
   240b6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   240ba:	4620      	mov	r0, r4
   240bc:	bd38      	pop	{r3, r4, r5, pc}
   240be:	bf00      	nop
   240c0:	20021a70 	.word	0x20021a70
   240c4:	0002ebe3 	.word	0x0002ebe3
   240c8:	0002ec3c 	.word	0x0002ec3c
   240cc:	0002dd81 	.word	0x0002dd81
   240d0:	0002ec51 	.word	0x0002ec51
   240d4:	0002ec10 	.word	0x0002ec10
   240d8:	0002ec27 	.word	0x0002ec27

000240dc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   240dc:	b570      	push	{r4, r5, r6, lr}
   240de:	4604      	mov	r4, r0
   240e0:	460d      	mov	r5, r1
	__asm__ volatile(
   240e2:	f04f 0320 	mov.w	r3, #32
   240e6:	f3ef 8611 	mrs	r6, BASEPRI
   240ea:	f383 8812 	msr	BASEPRI_MAX, r3
   240ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240f2:	481b      	ldr	r0, [pc, #108]	; (24160 <z_set_timeout_expiry+0x84>)
   240f4:	f7fd fb14 	bl	21720 <z_spin_lock_valid>
   240f8:	b968      	cbnz	r0, 24116 <z_set_timeout_expiry+0x3a>
   240fa:	2394      	movs	r3, #148	; 0x94
   240fc:	4a19      	ldr	r2, [pc, #100]	; (24164 <z_set_timeout_expiry+0x88>)
   240fe:	491a      	ldr	r1, [pc, #104]	; (24168 <z_set_timeout_expiry+0x8c>)
   24100:	481a      	ldr	r0, [pc, #104]	; (2416c <z_set_timeout_expiry+0x90>)
   24102:	f002 fe36 	bl	26d72 <assert_print>
   24106:	4916      	ldr	r1, [pc, #88]	; (24160 <z_set_timeout_expiry+0x84>)
   24108:	4819      	ldr	r0, [pc, #100]	; (24170 <z_set_timeout_expiry+0x94>)
   2410a:	f002 fe32 	bl	26d72 <assert_print>
   2410e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24110:	4814      	ldr	r0, [pc, #80]	; (24164 <z_set_timeout_expiry+0x88>)
   24112:	f002 fe27 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   24116:	4812      	ldr	r0, [pc, #72]	; (24160 <z_set_timeout_expiry+0x84>)
   24118:	f7fd fb1e 	bl	21758 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   2411c:	f7ff fe42 	bl	23da4 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   24120:	2801      	cmp	r0, #1
   24122:	dd07      	ble.n	24134 <z_set_timeout_expiry+0x58>
   24124:	42a0      	cmp	r0, r4
   24126:	db05      	blt.n	24134 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24128:	42a0      	cmp	r0, r4
   2412a:	4629      	mov	r1, r5
   2412c:	bfa8      	it	ge
   2412e:	4620      	movge	r0, r4
   24130:	f7fa f85a 	bl	1e1e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24134:	480a      	ldr	r0, [pc, #40]	; (24160 <z_set_timeout_expiry+0x84>)
   24136:	f7fd fb01 	bl	2173c <z_spin_unlock_valid>
   2413a:	b958      	cbnz	r0, 24154 <z_set_timeout_expiry+0x78>
   2413c:	23c2      	movs	r3, #194	; 0xc2
   2413e:	4a09      	ldr	r2, [pc, #36]	; (24164 <z_set_timeout_expiry+0x88>)
   24140:	490c      	ldr	r1, [pc, #48]	; (24174 <z_set_timeout_expiry+0x98>)
   24142:	480a      	ldr	r0, [pc, #40]	; (2416c <z_set_timeout_expiry+0x90>)
   24144:	f002 fe15 	bl	26d72 <assert_print>
   24148:	4905      	ldr	r1, [pc, #20]	; (24160 <z_set_timeout_expiry+0x84>)
   2414a:	480b      	ldr	r0, [pc, #44]	; (24178 <z_set_timeout_expiry+0x9c>)
   2414c:	f002 fe11 	bl	26d72 <assert_print>
   24150:	21c2      	movs	r1, #194	; 0xc2
   24152:	e7dd      	b.n	24110 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   24154:	f386 8811 	msr	BASEPRI, r6
   24158:	f3bf 8f6f 	isb	sy
		}
	}
}
   2415c:	bd70      	pop	{r4, r5, r6, pc}
   2415e:	bf00      	nop
   24160:	20021a70 	.word	0x20021a70
   24164:	0002ebe3 	.word	0x0002ebe3
   24168:	0002ec3c 	.word	0x0002ec3c
   2416c:	0002dd81 	.word	0x0002dd81
   24170:	0002ec51 	.word	0x0002ec51
   24174:	0002ec10 	.word	0x0002ec10
   24178:	0002ec27 	.word	0x0002ec27

0002417c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2417c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24180:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24182:	f7fe ff7d 	bl	23080 <z_time_slice>
	__asm__ volatile(
   24186:	f04f 0320 	mov.w	r3, #32
   2418a:	f3ef 8711 	mrs	r7, BASEPRI
   2418e:	f383 8812 	msr	BASEPRI_MAX, r3
   24192:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24196:	483f      	ldr	r0, [pc, #252]	; (24294 <sys_clock_announce+0x118>)
   24198:	f7fd fac2 	bl	21720 <z_spin_lock_valid>
   2419c:	b968      	cbnz	r0, 241ba <sys_clock_announce+0x3e>
   2419e:	2394      	movs	r3, #148	; 0x94
   241a0:	4a3d      	ldr	r2, [pc, #244]	; (24298 <sys_clock_announce+0x11c>)
   241a2:	493e      	ldr	r1, [pc, #248]	; (2429c <sys_clock_announce+0x120>)
   241a4:	483e      	ldr	r0, [pc, #248]	; (242a0 <sys_clock_announce+0x124>)
   241a6:	f002 fde4 	bl	26d72 <assert_print>
   241aa:	493a      	ldr	r1, [pc, #232]	; (24294 <sys_clock_announce+0x118>)
   241ac:	483d      	ldr	r0, [pc, #244]	; (242a4 <sys_clock_announce+0x128>)
   241ae:	f002 fde0 	bl	26d72 <assert_print>
   241b2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241b4:	4838      	ldr	r0, [pc, #224]	; (24298 <sys_clock_announce+0x11c>)
   241b6:	f002 fdd5 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   241ba:	4836      	ldr	r0, [pc, #216]	; (24294 <sys_clock_announce+0x118>)
   241bc:	f7fd facc 	bl	21758 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   241c0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 242a8 <sys_clock_announce+0x12c>
	return list->head == list;
   241c4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 242ac <sys_clock_announce+0x130>
   241c8:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   241cc:	4a38      	ldr	r2, [pc, #224]	; (242b0 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241ce:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   241d0:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   241d4:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   241d8:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241dc:	d00b      	beq.n	241f6 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   241de:	b155      	cbz	r5, 241f6 <sys_clock_announce+0x7a>
   241e0:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   241e4:	42b4      	cmp	r4, r6
   241e6:	eb71 0e00 	sbcs.w	lr, r1, r0
   241ea:	da1c      	bge.n	24226 <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   241ec:	1b36      	subs	r6, r6, r4
   241ee:	eb60 0001 	sbc.w	r0, r0, r1
   241f2:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   241f6:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   241f8:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   241fc:	eb4c 0101 	adc.w	r1, ip, r1
   24200:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   24204:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   24208:	f7ff fdcc 	bl	23da4 <next_timeout>
   2420c:	4621      	mov	r1, r4
   2420e:	f7f9 ffeb 	bl	1e1e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24212:	4820      	ldr	r0, [pc, #128]	; (24294 <sys_clock_announce+0x118>)
   24214:	f7fd fa92 	bl	2173c <z_spin_unlock_valid>
   24218:	b1a8      	cbz	r0, 24246 <sys_clock_announce+0xca>
	__asm__ volatile(
   2421a:	f387 8811 	msr	BASEPRI, r7
   2421e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   24226:	18f3      	adds	r3, r6, r3
   24228:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   2422c:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   24230:	2200      	movs	r2, #0
   24232:	2300      	movs	r3, #0
		remove_timeout(t);
   24234:	4628      	mov	r0, r5
		t->dticks = 0;
   24236:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   2423a:	f7ff fddb 	bl	23df4 <remove_timeout>
   2423e:	4815      	ldr	r0, [pc, #84]	; (24294 <sys_clock_announce+0x118>)
   24240:	f7fd fa7c 	bl	2173c <z_spin_unlock_valid>
   24244:	b958      	cbnz	r0, 2425e <sys_clock_announce+0xe2>
   24246:	23c2      	movs	r3, #194	; 0xc2
   24248:	4a13      	ldr	r2, [pc, #76]	; (24298 <sys_clock_announce+0x11c>)
   2424a:	491a      	ldr	r1, [pc, #104]	; (242b4 <sys_clock_announce+0x138>)
   2424c:	4814      	ldr	r0, [pc, #80]	; (242a0 <sys_clock_announce+0x124>)
   2424e:	f002 fd90 	bl	26d72 <assert_print>
   24252:	4910      	ldr	r1, [pc, #64]	; (24294 <sys_clock_announce+0x118>)
   24254:	4818      	ldr	r0, [pc, #96]	; (242b8 <sys_clock_announce+0x13c>)
   24256:	f002 fd8c 	bl	26d72 <assert_print>
   2425a:	21c2      	movs	r1, #194	; 0xc2
   2425c:	e7aa      	b.n	241b4 <sys_clock_announce+0x38>
   2425e:	f387 8811 	msr	BASEPRI, r7
   24262:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24266:	4628      	mov	r0, r5
   24268:	68ab      	ldr	r3, [r5, #8]
   2426a:	4798      	blx	r3
	__asm__ volatile(
   2426c:	f04f 0320 	mov.w	r3, #32
   24270:	f3ef 8711 	mrs	r7, BASEPRI
   24274:	f383 8812 	msr	BASEPRI_MAX, r3
   24278:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2427c:	4805      	ldr	r0, [pc, #20]	; (24294 <sys_clock_announce+0x118>)
   2427e:	f7fd fa4f 	bl	21720 <z_spin_lock_valid>
   24282:	2800      	cmp	r0, #0
   24284:	d08b      	beq.n	2419e <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   24286:	4803      	ldr	r0, [pc, #12]	; (24294 <sys_clock_announce+0x118>)
   24288:	f7fd fa66 	bl	21758 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   2428c:	f8d8 4000 	ldr.w	r4, [r8]
   24290:	1ba4      	subs	r4, r4, r6
   24292:	e799      	b.n	241c8 <sys_clock_announce+0x4c>
   24294:	20021a70 	.word	0x20021a70
   24298:	0002ebe3 	.word	0x0002ebe3
   2429c:	0002ec3c 	.word	0x0002ec3c
   242a0:	0002dd81 	.word	0x0002dd81
   242a4:	0002ec51 	.word	0x0002ec51
   242a8:	20021a6c 	.word	0x20021a6c
   242ac:	20008744 	.word	0x20008744
   242b0:	2000a2c0 	.word	0x2000a2c0
   242b4:	0002ec10 	.word	0x0002ec10
   242b8:	0002ec27 	.word	0x0002ec27

000242bc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   242bc:	b570      	push	{r4, r5, r6, lr}
   242be:	f04f 0320 	mov.w	r3, #32
   242c2:	f3ef 8611 	mrs	r6, BASEPRI
   242c6:	f383 8812 	msr	BASEPRI_MAX, r3
   242ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242ce:	481a      	ldr	r0, [pc, #104]	; (24338 <sys_clock_tick_get+0x7c>)
   242d0:	f7fd fa26 	bl	21720 <z_spin_lock_valid>
   242d4:	b968      	cbnz	r0, 242f2 <sys_clock_tick_get+0x36>
   242d6:	2394      	movs	r3, #148	; 0x94
   242d8:	4a18      	ldr	r2, [pc, #96]	; (2433c <sys_clock_tick_get+0x80>)
   242da:	4919      	ldr	r1, [pc, #100]	; (24340 <sys_clock_tick_get+0x84>)
   242dc:	4819      	ldr	r0, [pc, #100]	; (24344 <sys_clock_tick_get+0x88>)
   242de:	f002 fd48 	bl	26d72 <assert_print>
   242e2:	4915      	ldr	r1, [pc, #84]	; (24338 <sys_clock_tick_get+0x7c>)
   242e4:	4818      	ldr	r0, [pc, #96]	; (24348 <sys_clock_tick_get+0x8c>)
   242e6:	f002 fd44 	bl	26d72 <assert_print>
   242ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   242ec:	4813      	ldr	r0, [pc, #76]	; (2433c <sys_clock_tick_get+0x80>)
   242ee:	f002 fd39 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   242f2:	4811      	ldr	r0, [pc, #68]	; (24338 <sys_clock_tick_get+0x7c>)
   242f4:	f7fd fa30 	bl	21758 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   242f8:	f7ff fd4a 	bl	23d90 <elapsed>
   242fc:	4a13      	ldr	r2, [pc, #76]	; (2434c <sys_clock_tick_get+0x90>)
   242fe:	e9d2 4500 	ldrd	r4, r5, [r2]
   24302:	1904      	adds	r4, r0, r4
   24304:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24308:	480b      	ldr	r0, [pc, #44]	; (24338 <sys_clock_tick_get+0x7c>)
   2430a:	f7fd fa17 	bl	2173c <z_spin_unlock_valid>
   2430e:	b958      	cbnz	r0, 24328 <sys_clock_tick_get+0x6c>
   24310:	23c2      	movs	r3, #194	; 0xc2
   24312:	4a0a      	ldr	r2, [pc, #40]	; (2433c <sys_clock_tick_get+0x80>)
   24314:	490e      	ldr	r1, [pc, #56]	; (24350 <sys_clock_tick_get+0x94>)
   24316:	480b      	ldr	r0, [pc, #44]	; (24344 <sys_clock_tick_get+0x88>)
   24318:	f002 fd2b 	bl	26d72 <assert_print>
   2431c:	4906      	ldr	r1, [pc, #24]	; (24338 <sys_clock_tick_get+0x7c>)
   2431e:	480d      	ldr	r0, [pc, #52]	; (24354 <sys_clock_tick_get+0x98>)
   24320:	f002 fd27 	bl	26d72 <assert_print>
   24324:	21c2      	movs	r1, #194	; 0xc2
   24326:	e7e1      	b.n	242ec <sys_clock_tick_get+0x30>
	__asm__ volatile(
   24328:	f386 8811 	msr	BASEPRI, r6
   2432c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24330:	4620      	mov	r0, r4
   24332:	4629      	mov	r1, r5
   24334:	bd70      	pop	{r4, r5, r6, pc}
   24336:	bf00      	nop
   24338:	20021a70 	.word	0x20021a70
   2433c:	0002ebe3 	.word	0x0002ebe3
   24340:	0002ec3c 	.word	0x0002ec3c
   24344:	0002dd81 	.word	0x0002dd81
   24348:	0002ec51 	.word	0x0002ec51
   2434c:	2000a2c0 	.word	0x2000a2c0
   24350:	0002ec10 	.word	0x0002ec10
   24354:	0002ec27 	.word	0x0002ec27

00024358 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24358:	b570      	push	{r4, r5, r6, lr}
   2435a:	4604      	mov	r4, r0
	__asm__ volatile(
   2435c:	f04f 0320 	mov.w	r3, #32
   24360:	f3ef 8511 	mrs	r5, BASEPRI
   24364:	f383 8812 	msr	BASEPRI_MAX, r3
   24368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2436c:	4849      	ldr	r0, [pc, #292]	; (24494 <z_timer_expiration_handler+0x13c>)
   2436e:	f7fd f9d7 	bl	21720 <z_spin_lock_valid>
   24372:	b968      	cbnz	r0, 24390 <z_timer_expiration_handler+0x38>
   24374:	2394      	movs	r3, #148	; 0x94
   24376:	4a48      	ldr	r2, [pc, #288]	; (24498 <z_timer_expiration_handler+0x140>)
   24378:	4948      	ldr	r1, [pc, #288]	; (2449c <z_timer_expiration_handler+0x144>)
   2437a:	4849      	ldr	r0, [pc, #292]	; (244a0 <z_timer_expiration_handler+0x148>)
   2437c:	f002 fcf9 	bl	26d72 <assert_print>
   24380:	4944      	ldr	r1, [pc, #272]	; (24494 <z_timer_expiration_handler+0x13c>)
   24382:	4848      	ldr	r0, [pc, #288]	; (244a4 <z_timer_expiration_handler+0x14c>)
   24384:	f002 fcf5 	bl	26d72 <assert_print>
   24388:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2438a:	4843      	ldr	r0, [pc, #268]	; (24498 <z_timer_expiration_handler+0x140>)
   2438c:	f002 fcea 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   24390:	4840      	ldr	r0, [pc, #256]	; (24494 <z_timer_expiration_handler+0x13c>)
   24392:	f7fd f9e1 	bl	21758 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24396:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2439a:	3301      	adds	r3, #1
   2439c:	f142 0200 	adc.w	r2, r2, #0
   243a0:	2b02      	cmp	r3, #2
   243a2:	f172 0200 	sbcs.w	r2, r2, #0
   243a6:	d322      	bcc.n	243ee <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   243a8:	f007 fbef 	bl	2bb8a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   243ac:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   243b0:	3001      	adds	r0, #1
   243b2:	f141 0100 	adc.w	r1, r1, #0
   243b6:	18c0      	adds	r0, r0, r3
   243b8:	eb41 0102 	adc.w	r1, r1, r2
   243bc:	2801      	cmp	r0, #1
   243be:	f171 0100 	sbcs.w	r1, r1, #0
   243c2:	db29      	blt.n	24418 <z_timer_expiration_handler+0xc0>
   243c4:	f007 fbe1 	bl	2bb8a <z_impl_k_uptime_ticks>
   243c8:	3001      	adds	r0, #1
   243ca:	f141 0300 	adc.w	r3, r1, #0
   243ce:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   243d2:	1880      	adds	r0, r0, r2
   243d4:	f06f 0201 	mvn.w	r2, #1
   243d8:	eb43 0301 	adc.w	r3, r3, r1
   243dc:	f04f 31ff 	mov.w	r1, #4294967295
   243e0:	1a12      	subs	r2, r2, r0
   243e2:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   243e6:	4620      	mov	r0, r4
   243e8:	492f      	ldr	r1, [pc, #188]	; (244a8 <z_timer_expiration_handler+0x150>)
   243ea:	f7ff fd1f 	bl	23e2c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   243ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   243f0:	3301      	adds	r3, #1
   243f2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   243f4:	6a23      	ldr	r3, [r4, #32]
   243f6:	b35b      	cbz	r3, 24450 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   243f8:	4826      	ldr	r0, [pc, #152]	; (24494 <z_timer_expiration_handler+0x13c>)
   243fa:	f7fd f99f 	bl	2173c <z_spin_unlock_valid>
   243fe:	b980      	cbnz	r0, 24422 <z_timer_expiration_handler+0xca>
   24400:	23c2      	movs	r3, #194	; 0xc2
   24402:	4a25      	ldr	r2, [pc, #148]	; (24498 <z_timer_expiration_handler+0x140>)
   24404:	4929      	ldr	r1, [pc, #164]	; (244ac <z_timer_expiration_handler+0x154>)
   24406:	4826      	ldr	r0, [pc, #152]	; (244a0 <z_timer_expiration_handler+0x148>)
   24408:	f002 fcb3 	bl	26d72 <assert_print>
   2440c:	4921      	ldr	r1, [pc, #132]	; (24494 <z_timer_expiration_handler+0x13c>)
   2440e:	4828      	ldr	r0, [pc, #160]	; (244b0 <z_timer_expiration_handler+0x158>)
   24410:	f002 fcaf 	bl	26d72 <assert_print>
   24414:	21c2      	movs	r1, #194	; 0xc2
   24416:	e7b8      	b.n	2438a <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24418:	f06f 0201 	mvn.w	r2, #1
   2441c:	f04f 33ff 	mov.w	r3, #4294967295
   24420:	e7e1      	b.n	243e6 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   24422:	f385 8811 	msr	BASEPRI, r5
   24426:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2442a:	4620      	mov	r0, r4
   2442c:	6a23      	ldr	r3, [r4, #32]
   2442e:	4798      	blx	r3
	__asm__ volatile(
   24430:	f04f 0320 	mov.w	r3, #32
   24434:	f3ef 8511 	mrs	r5, BASEPRI
   24438:	f383 8812 	msr	BASEPRI_MAX, r3
   2443c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24440:	4814      	ldr	r0, [pc, #80]	; (24494 <z_timer_expiration_handler+0x13c>)
   24442:	f7fd f96d 	bl	21720 <z_spin_lock_valid>
   24446:	2800      	cmp	r0, #0
   24448:	d094      	beq.n	24374 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   2444a:	4812      	ldr	r0, [pc, #72]	; (24494 <z_timer_expiration_handler+0x13c>)
   2444c:	f7fd f984 	bl	21758 <z_spin_lock_set_owner>
	return list->head == list;
   24450:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24454:	42a6      	cmp	r6, r4
   24456:	d000      	beq.n	2445a <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24458:	b94e      	cbnz	r6, 2446e <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2445a:	480e      	ldr	r0, [pc, #56]	; (24494 <z_timer_expiration_handler+0x13c>)
   2445c:	f7fd f96e 	bl	2173c <z_spin_unlock_valid>
   24460:	2800      	cmp	r0, #0
   24462:	d0cd      	beq.n	24400 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   24464:	f385 8811 	msr	BASEPRI, r5
   24468:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   2446c:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   2446e:	4630      	mov	r0, r6
   24470:	f7fe fbda 	bl	22c28 <z_unpend_thread_no_timeout>
   24474:	2300      	movs	r3, #0
   24476:	4807      	ldr	r0, [pc, #28]	; (24494 <z_timer_expiration_handler+0x13c>)
   24478:	67f3      	str	r3, [r6, #124]	; 0x7c
   2447a:	f7fd f95f 	bl	2173c <z_spin_unlock_valid>
   2447e:	2800      	cmp	r0, #0
   24480:	d0be      	beq.n	24400 <z_timer_expiration_handler+0xa8>
   24482:	f385 8811 	msr	BASEPRI, r5
   24486:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2448a:	4630      	mov	r0, r6
}
   2448c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   24490:	f7fe bb84 	b.w	22b9c <z_ready_thread>
   24494:	20021a74 	.word	0x20021a74
   24498:	0002ebe3 	.word	0x0002ebe3
   2449c:	0002ec3c 	.word	0x0002ec3c
   244a0:	0002dd81 	.word	0x0002dd81
   244a4:	0002ec51 	.word	0x0002ec51
   244a8:	00024359 	.word	0x00024359
   244ac:	0002ec10 	.word	0x0002ec10
   244b0:	0002ec27 	.word	0x0002ec27

000244b4 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   244b4:	f1b3 3fff 	cmp.w	r3, #4294967295
   244b8:	bf08      	it	eq
   244ba:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   244be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   244c2:	4619      	mov	r1, r3
   244c4:	4605      	mov	r5, r0
   244c6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   244ca:	4614      	mov	r4, r2
   244cc:	4691      	mov	r9, r2
   244ce:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   244d0:	d037      	beq.n	24542 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   244d2:	f1b0 3fff 	cmp.w	r0, #4294967295
   244d6:	bf08      	it	eq
   244d8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   244dc:	4637      	mov	r7, r6
   244de:	4682      	mov	sl, r0
   244e0:	d011      	beq.n	24506 <z_impl_k_timer_start+0x52>
   244e2:	ea50 0306 	orrs.w	r3, r0, r6
   244e6:	d00e      	beq.n	24506 <z_impl_k_timer_start+0x52>
   244e8:	1c72      	adds	r2, r6, #1
   244ea:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   244ee:	db0a      	blt.n	24506 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   244f0:	2e02      	cmp	r6, #2
   244f2:	4684      	mov	ip, r0
   244f4:	f170 0000 	sbcs.w	r0, r0, #0
   244f8:	bfbc      	itt	lt
   244fa:	2702      	movlt	r7, #2
   244fc:	f04f 0c00 	movlt.w	ip, #0
   24500:	3f01      	subs	r7, #1
   24502:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24506:	1c63      	adds	r3, r4, #1
   24508:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   2450c:	db0a      	blt.n	24524 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2450e:	2c01      	cmp	r4, #1
   24510:	f171 0300 	sbcs.w	r3, r1, #0
   24514:	4622      	mov	r2, r4
   24516:	bfbc      	itt	lt
   24518:	2201      	movlt	r2, #1
   2451a:	2100      	movlt	r1, #0
   2451c:	f112 39ff 	adds.w	r9, r2, #4294967295
   24520:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   24524:	4628      	mov	r0, r5
   24526:	f7ff fd47 	bl	23fb8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2452a:	2300      	movs	r3, #0
	timer->period = period;
   2452c:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   24530:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24532:	464a      	mov	r2, r9
   24534:	4643      	mov	r3, r8
   24536:	4628      	mov	r0, r5
		     duration);
}
   24538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2453c:	4902      	ldr	r1, [pc, #8]	; (24548 <z_impl_k_timer_start+0x94>)
   2453e:	f7ff bc75 	b.w	23e2c <z_add_timeout>
}
   24542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24546:	bf00      	nop
   24548:	00024359 	.word	0x00024359

0002454c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2454c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   24550:	2600      	movs	r6, #0
{
   24552:	4688      	mov	r8, r1
   24554:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   24556:	4604      	mov	r4, r0
	int events_registered = 0;
   24558:	4637      	mov	r7, r6
	event->poller = NULL;
   2455a:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2455c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 2471c <register_events+0x1d0>
{
   24560:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   24562:	4546      	cmp	r6, r8
   24564:	db03      	blt.n	2456e <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   24566:	4638      	mov	r0, r7
   24568:	b003      	add	sp, #12
   2456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2456e:	f04f 0320 	mov.w	r3, #32
   24572:	f3ef 8b11 	mrs	fp, BASEPRI
   24576:	f383 8812 	msr	BASEPRI_MAX, r3
   2457a:	f3bf 8f6f 	isb	sy
   2457e:	4648      	mov	r0, r9
   24580:	f7fd f8ce 	bl	21720 <z_spin_lock_valid>
   24584:	b960      	cbnz	r0, 245a0 <register_events+0x54>
   24586:	2394      	movs	r3, #148	; 0x94
   24588:	4a65      	ldr	r2, [pc, #404]	; (24720 <register_events+0x1d4>)
   2458a:	4966      	ldr	r1, [pc, #408]	; (24724 <register_events+0x1d8>)
   2458c:	4866      	ldr	r0, [pc, #408]	; (24728 <register_events+0x1dc>)
   2458e:	f002 fbf0 	bl	26d72 <assert_print>
   24592:	4962      	ldr	r1, [pc, #392]	; (2471c <register_events+0x1d0>)
   24594:	4865      	ldr	r0, [pc, #404]	; (2472c <register_events+0x1e0>)
   24596:	f002 fbec 	bl	26d72 <assert_print>
   2459a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2459c:	4860      	ldr	r0, [pc, #384]	; (24720 <register_events+0x1d4>)
   2459e:	e060      	b.n	24662 <register_events+0x116>
	z_spin_lock_set_owner(l);
   245a0:	4648      	mov	r0, r9
   245a2:	f7fd f8d9 	bl	21758 <z_spin_lock_set_owner>
	switch (event->type) {
   245a6:	7b63      	ldrb	r3, [r4, #13]
   245a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   245ac:	2b08      	cmp	r3, #8
   245ae:	d84a      	bhi.n	24646 <register_events+0xfa>
   245b0:	e8df f003 	tbb	[pc, r3]
   245b4:	49053d2b 	.word	0x49053d2b
   245b8:	49494927 	.word	0x49494927
   245bc:	43          	.byte	0x43
   245bd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   245be:	6923      	ldr	r3, [r4, #16]
   245c0:	689b      	ldr	r3, [r3, #8]
   245c2:	b313      	cbz	r3, 2460a <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   245c4:	2302      	movs	r3, #2
	event->state |= state;
   245c6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   245c8:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   245cc:	f3c2 3186 	ubfx	r1, r2, #14, #7
   245d0:	430b      	orrs	r3, r1
   245d2:	f363 3294 	bfi	r2, r3, #14, #7
   245d6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   245d8:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   245dc:	4648      	mov	r0, r9
   245de:	f7fd f8ad 	bl	2173c <z_spin_unlock_valid>
   245e2:	3414      	adds	r4, #20
   245e4:	2800      	cmp	r0, #0
   245e6:	f040 8092 	bne.w	2470e <register_events+0x1c2>
   245ea:	23c2      	movs	r3, #194	; 0xc2
   245ec:	4a4c      	ldr	r2, [pc, #304]	; (24720 <register_events+0x1d4>)
   245ee:	4950      	ldr	r1, [pc, #320]	; (24730 <register_events+0x1e4>)
   245f0:	484d      	ldr	r0, [pc, #308]	; (24728 <register_events+0x1dc>)
   245f2:	f002 fbbe 	bl	26d72 <assert_print>
   245f6:	4949      	ldr	r1, [pc, #292]	; (2471c <register_events+0x1d0>)
   245f8:	484e      	ldr	r0, [pc, #312]	; (24734 <register_events+0x1e8>)
   245fa:	f002 fbba 	bl	26d72 <assert_print>
   245fe:	21c2      	movs	r1, #194	; 0xc2
   24600:	e7cc      	b.n	2459c <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   24602:	6923      	ldr	r3, [r4, #16]
   24604:	681b      	ldr	r3, [r3, #0]
   24606:	2b00      	cmp	r3, #0
   24608:	d12d      	bne.n	24666 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   2460a:	9b01      	ldr	r3, [sp, #4]
   2460c:	2b00      	cmp	r3, #0
   2460e:	d1e5      	bne.n	245dc <register_events+0x90>
   24610:	782b      	ldrb	r3, [r5, #0]
   24612:	2b00      	cmp	r3, #0
   24614:	d0e2      	beq.n	245dc <register_events+0x90>
	switch (event->type) {
   24616:	7b63      	ldrb	r3, [r4, #13]
   24618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2461c:	2b08      	cmp	r3, #8
   2461e:	d86b      	bhi.n	246f8 <register_events+0x1ac>
   24620:	e8df f003 	tbb	[pc, r3]
   24624:	6a234935 	.word	0x6a234935
   24628:	6a6a6a38 	.word	0x6a6a6a38
   2462c:	59          	.byte	0x59
   2462d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2462e:	6923      	ldr	r3, [r4, #16]
   24630:	689b      	ldr	r3, [r3, #8]
   24632:	2b00      	cmp	r3, #0
   24634:	d0e9      	beq.n	2460a <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   24636:	2301      	movs	r3, #1
   24638:	e7c5      	b.n	245c6 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   2463a:	6923      	ldr	r3, [r4, #16]
   2463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2463e:	2b00      	cmp	r3, #0
   24640:	d0e3      	beq.n	2460a <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24642:	2310      	movs	r3, #16
   24644:	e7bf      	b.n	245c6 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24646:	2363      	movs	r3, #99	; 0x63
   24648:	4a3b      	ldr	r2, [pc, #236]	; (24738 <register_events+0x1ec>)
   2464a:	493c      	ldr	r1, [pc, #240]	; (2473c <register_events+0x1f0>)
   2464c:	4836      	ldr	r0, [pc, #216]	; (24728 <register_events+0x1dc>)
   2464e:	f002 fb90 	bl	26d72 <assert_print>
   24652:	7b61      	ldrb	r1, [r4, #13]
   24654:	483a      	ldr	r0, [pc, #232]	; (24740 <register_events+0x1f4>)
   24656:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   2465a:	f002 fb8a 	bl	26d72 <assert_print>
   2465e:	2163      	movs	r1, #99	; 0x63
   24660:	4835      	ldr	r0, [pc, #212]	; (24738 <register_events+0x1ec>)
   24662:	f002 fb7f 	bl	26d64 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   24666:	2304      	movs	r3, #4
   24668:	e7ad      	b.n	245c6 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2466a:	6920      	ldr	r0, [r4, #16]
   2466c:	b950      	cbnz	r0, 24684 <register_events+0x138>
   2466e:	4935      	ldr	r1, [pc, #212]	; (24744 <register_events+0x1f8>)
   24670:	238d      	movs	r3, #141	; 0x8d
   24672:	4a31      	ldr	r2, [pc, #196]	; (24738 <register_events+0x1ec>)
   24674:	482c      	ldr	r0, [pc, #176]	; (24728 <register_events+0x1dc>)
   24676:	f002 fb7c 	bl	26d72 <assert_print>
   2467a:	4833      	ldr	r0, [pc, #204]	; (24748 <register_events+0x1fc>)
   2467c:	f002 fb79 	bl	26d72 <assert_print>
   24680:	218d      	movs	r1, #141	; 0x8d
   24682:	e7ed      	b.n	24660 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   24684:	462a      	mov	r2, r5
   24686:	4621      	mov	r1, r4
   24688:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2468a:	f007 facf 	bl	2bc2c <add_event>
	event->poller = poller;
   2468e:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   24690:	3701      	adds	r7, #1
   24692:	e7a3      	b.n	245dc <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24694:	6920      	ldr	r0, [r4, #16]
   24696:	b950      	cbnz	r0, 246ae <register_events+0x162>
   24698:	492c      	ldr	r1, [pc, #176]	; (2474c <register_events+0x200>)
   2469a:	2391      	movs	r3, #145	; 0x91
   2469c:	4a26      	ldr	r2, [pc, #152]	; (24738 <register_events+0x1ec>)
   2469e:	4822      	ldr	r0, [pc, #136]	; (24728 <register_events+0x1dc>)
   246a0:	f002 fb67 	bl	26d72 <assert_print>
   246a4:	482a      	ldr	r0, [pc, #168]	; (24750 <register_events+0x204>)
   246a6:	f002 fb64 	bl	26d72 <assert_print>
   246aa:	2191      	movs	r1, #145	; 0x91
   246ac:	e7d8      	b.n	24660 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   246ae:	462a      	mov	r2, r5
   246b0:	4621      	mov	r1, r4
   246b2:	3014      	adds	r0, #20
   246b4:	e7e9      	b.n	2468a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   246b6:	6920      	ldr	r0, [r4, #16]
   246b8:	b950      	cbnz	r0, 246d0 <register_events+0x184>
   246ba:	4926      	ldr	r1, [pc, #152]	; (24754 <register_events+0x208>)
   246bc:	2395      	movs	r3, #149	; 0x95
   246be:	4a1e      	ldr	r2, [pc, #120]	; (24738 <register_events+0x1ec>)
   246c0:	4819      	ldr	r0, [pc, #100]	; (24728 <register_events+0x1dc>)
   246c2:	f002 fb56 	bl	26d72 <assert_print>
   246c6:	4824      	ldr	r0, [pc, #144]	; (24758 <register_events+0x20c>)
   246c8:	f002 fb53 	bl	26d72 <assert_print>
   246cc:	2195      	movs	r1, #149	; 0x95
   246ce:	e7c7      	b.n	24660 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   246d0:	462a      	mov	r2, r5
   246d2:	4621      	mov	r1, r4
   246d4:	e7d9      	b.n	2468a <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   246d6:	6920      	ldr	r0, [r4, #16]
   246d8:	b950      	cbnz	r0, 246f0 <register_events+0x1a4>
   246da:	4920      	ldr	r1, [pc, #128]	; (2475c <register_events+0x210>)
   246dc:	2399      	movs	r3, #153	; 0x99
   246de:	4a16      	ldr	r2, [pc, #88]	; (24738 <register_events+0x1ec>)
   246e0:	4811      	ldr	r0, [pc, #68]	; (24728 <register_events+0x1dc>)
   246e2:	f002 fb46 	bl	26d72 <assert_print>
   246e6:	481e      	ldr	r0, [pc, #120]	; (24760 <register_events+0x214>)
   246e8:	f002 fb43 	bl	26d72 <assert_print>
   246ec:	2199      	movs	r1, #153	; 0x99
   246ee:	e7b7      	b.n	24660 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   246f0:	462a      	mov	r2, r5
   246f2:	4621      	mov	r1, r4
   246f4:	3028      	adds	r0, #40	; 0x28
   246f6:	e7c8      	b.n	2468a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   246f8:	4910      	ldr	r1, [pc, #64]	; (2473c <register_events+0x1f0>)
   246fa:	23a6      	movs	r3, #166	; 0xa6
   246fc:	4a0e      	ldr	r2, [pc, #56]	; (24738 <register_events+0x1ec>)
   246fe:	480a      	ldr	r0, [pc, #40]	; (24728 <register_events+0x1dc>)
   24700:	f002 fb37 	bl	26d72 <assert_print>
   24704:	4817      	ldr	r0, [pc, #92]	; (24764 <register_events+0x218>)
   24706:	f002 fb34 	bl	26d72 <assert_print>
   2470a:	21a6      	movs	r1, #166	; 0xa6
   2470c:	e7a8      	b.n	24660 <register_events+0x114>
	__asm__ volatile(
   2470e:	f38b 8811 	msr	BASEPRI, fp
   24712:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24716:	3601      	adds	r6, #1
   24718:	e723      	b.n	24562 <register_events+0x16>
   2471a:	bf00      	nop
   2471c:	20021a78 	.word	0x20021a78
   24720:	0002ebe3 	.word	0x0002ebe3
   24724:	0002ec3c 	.word	0x0002ec3c
   24728:	0002dd81 	.word	0x0002dd81
   2472c:	0002ec51 	.word	0x0002ec51
   24730:	0002ec10 	.word	0x0002ec10
   24734:	0002ec27 	.word	0x0002ec27
   24738:	00033758 	.word	0x00033758
   2473c:	00033a12 	.word	0x00033a12
   24740:	00033779 	.word	0x00033779
   24744:	00033796 	.word	0x00033796
   24748:	000337b0 	.word	0x000337b0
   2474c:	000337c5 	.word	0x000337c5
   24750:	000337e1 	.word	0x000337e1
   24754:	000337f2 	.word	0x000337f2
   24758:	0003380f 	.word	0x0003380f
   2475c:	00033826 	.word	0x00033826
   24760:	00033841 	.word	0x00033841
   24764:	0003385a 	.word	0x0003385a

00024768 <clear_event_registrations>:
{
   24768:	2314      	movs	r3, #20
   2476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2476e:	4615      	mov	r5, r2
	while (num_events--) {
   24770:	460c      	mov	r4, r1
	event->poller = NULL;
   24772:	2600      	movs	r6, #0
   24774:	fb03 0001 	mla	r0, r3, r1, r0
   24778:	4f4b      	ldr	r7, [pc, #300]	; (248a8 <clear_event_registrations+0x140>)
	while (num_events--) {
   2477a:	b90c      	cbnz	r4, 24780 <clear_event_registrations+0x18>
}
   2477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   24780:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   24784:	f1a0 0814 	sub.w	r8, r0, #20
   24788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   2478c:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   24790:	2b08      	cmp	r3, #8
   24792:	d842      	bhi.n	2481a <clear_event_registrations+0xb2>
   24794:	e8df f003 	tbb	[pc, r3]
   24798:	41052555 	.word	0x41052555
   2479c:	41414116 	.word	0x41414116
   247a0:	33          	.byte	0x33
   247a1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   247a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   247a6:	2b00      	cmp	r3, #0
   247a8:	d142      	bne.n	24830 <clear_event_registrations+0xc8>
   247aa:	4940      	ldr	r1, [pc, #256]	; (248ac <clear_event_registrations+0x144>)
   247ac:	23b6      	movs	r3, #182	; 0xb6
   247ae:	4a40      	ldr	r2, [pc, #256]	; (248b0 <clear_event_registrations+0x148>)
   247b0:	4840      	ldr	r0, [pc, #256]	; (248b4 <clear_event_registrations+0x14c>)
   247b2:	f002 fade 	bl	26d72 <assert_print>
   247b6:	4840      	ldr	r0, [pc, #256]	; (248b8 <clear_event_registrations+0x150>)
   247b8:	f002 fadb 	bl	26d72 <assert_print>
   247bc:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   247be:	483c      	ldr	r0, [pc, #240]	; (248b0 <clear_event_registrations+0x148>)
   247c0:	f002 fad0 	bl	26d64 <assert_post_action>
   247c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   247c8:	2b00      	cmp	r3, #0
   247ca:	d131      	bne.n	24830 <clear_event_registrations+0xc8>
   247cc:	493b      	ldr	r1, [pc, #236]	; (248bc <clear_event_registrations+0x154>)
   247ce:	23ba      	movs	r3, #186	; 0xba
   247d0:	4a37      	ldr	r2, [pc, #220]	; (248b0 <clear_event_registrations+0x148>)
   247d2:	4838      	ldr	r0, [pc, #224]	; (248b4 <clear_event_registrations+0x14c>)
   247d4:	f002 facd 	bl	26d72 <assert_print>
   247d8:	4839      	ldr	r0, [pc, #228]	; (248c0 <clear_event_registrations+0x158>)
   247da:	f002 faca 	bl	26d72 <assert_print>
   247de:	21ba      	movs	r1, #186	; 0xba
   247e0:	e7ed      	b.n	247be <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   247e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   247e6:	bb1b      	cbnz	r3, 24830 <clear_event_registrations+0xc8>
   247e8:	4936      	ldr	r1, [pc, #216]	; (248c4 <clear_event_registrations+0x15c>)
   247ea:	23be      	movs	r3, #190	; 0xbe
   247ec:	4a30      	ldr	r2, [pc, #192]	; (248b0 <clear_event_registrations+0x148>)
   247ee:	4831      	ldr	r0, [pc, #196]	; (248b4 <clear_event_registrations+0x14c>)
   247f0:	f002 fabf 	bl	26d72 <assert_print>
   247f4:	4834      	ldr	r0, [pc, #208]	; (248c8 <clear_event_registrations+0x160>)
   247f6:	f002 fabc 	bl	26d72 <assert_print>
   247fa:	21be      	movs	r1, #190	; 0xbe
   247fc:	e7df      	b.n	247be <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   247fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
   24802:	b9ab      	cbnz	r3, 24830 <clear_event_registrations+0xc8>
   24804:	4931      	ldr	r1, [pc, #196]	; (248cc <clear_event_registrations+0x164>)
   24806:	23c2      	movs	r3, #194	; 0xc2
   24808:	4a29      	ldr	r2, [pc, #164]	; (248b0 <clear_event_registrations+0x148>)
   2480a:	482a      	ldr	r0, [pc, #168]	; (248b4 <clear_event_registrations+0x14c>)
   2480c:	f002 fab1 	bl	26d72 <assert_print>
   24810:	482f      	ldr	r0, [pc, #188]	; (248d0 <clear_event_registrations+0x168>)
   24812:	f002 faae 	bl	26d72 <assert_print>
   24816:	21c2      	movs	r1, #194	; 0xc2
   24818:	e7d1      	b.n	247be <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   2481a:	492e      	ldr	r1, [pc, #184]	; (248d4 <clear_event_registrations+0x16c>)
   2481c:	23cf      	movs	r3, #207	; 0xcf
   2481e:	4a24      	ldr	r2, [pc, #144]	; (248b0 <clear_event_registrations+0x148>)
   24820:	4824      	ldr	r0, [pc, #144]	; (248b4 <clear_event_registrations+0x14c>)
   24822:	f002 faa6 	bl	26d72 <assert_print>
   24826:	482c      	ldr	r0, [pc, #176]	; (248d8 <clear_event_registrations+0x170>)
   24828:	f002 faa3 	bl	26d72 <assert_print>
   2482c:	21cf      	movs	r1, #207	; 0xcf
   2482e:	e7c6      	b.n	247be <clear_event_registrations+0x56>
	return node->next != NULL;
   24830:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24834:	b12b      	cbz	r3, 24842 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   24836:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2483a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2483c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2483e:	e940 6605 	strd	r6, r6, [r0, #-20]
   24842:	4638      	mov	r0, r7
   24844:	f7fc ff7a 	bl	2173c <z_spin_unlock_valid>
   24848:	b960      	cbnz	r0, 24864 <clear_event_registrations+0xfc>
   2484a:	23c2      	movs	r3, #194	; 0xc2
   2484c:	4a23      	ldr	r2, [pc, #140]	; (248dc <clear_event_registrations+0x174>)
   2484e:	4924      	ldr	r1, [pc, #144]	; (248e0 <clear_event_registrations+0x178>)
   24850:	4818      	ldr	r0, [pc, #96]	; (248b4 <clear_event_registrations+0x14c>)
   24852:	f002 fa8e 	bl	26d72 <assert_print>
   24856:	4914      	ldr	r1, [pc, #80]	; (248a8 <clear_event_registrations+0x140>)
   24858:	4822      	ldr	r0, [pc, #136]	; (248e4 <clear_event_registrations+0x17c>)
   2485a:	f002 fa8a 	bl	26d72 <assert_print>
   2485e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24860:	481e      	ldr	r0, [pc, #120]	; (248dc <clear_event_registrations+0x174>)
   24862:	e7ad      	b.n	247c0 <clear_event_registrations+0x58>
   24864:	f385 8811 	msr	BASEPRI, r5
   24868:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2486c:	f04f 0320 	mov.w	r3, #32
   24870:	f3ef 8511 	mrs	r5, BASEPRI
   24874:	f383 8812 	msr	BASEPRI_MAX, r3
   24878:	f3bf 8f6f 	isb	sy
   2487c:	4638      	mov	r0, r7
   2487e:	f7fc ff4f 	bl	21720 <z_spin_lock_valid>
   24882:	3c01      	subs	r4, #1
   24884:	b958      	cbnz	r0, 2489e <clear_event_registrations+0x136>
   24886:	2394      	movs	r3, #148	; 0x94
   24888:	4a14      	ldr	r2, [pc, #80]	; (248dc <clear_event_registrations+0x174>)
   2488a:	4917      	ldr	r1, [pc, #92]	; (248e8 <clear_event_registrations+0x180>)
   2488c:	4809      	ldr	r0, [pc, #36]	; (248b4 <clear_event_registrations+0x14c>)
   2488e:	f002 fa70 	bl	26d72 <assert_print>
   24892:	4905      	ldr	r1, [pc, #20]	; (248a8 <clear_event_registrations+0x140>)
   24894:	4815      	ldr	r0, [pc, #84]	; (248ec <clear_event_registrations+0x184>)
   24896:	f002 fa6c 	bl	26d72 <assert_print>
   2489a:	2194      	movs	r1, #148	; 0x94
   2489c:	e7e0      	b.n	24860 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   2489e:	4638      	mov	r0, r7
   248a0:	f7fc ff5a 	bl	21758 <z_spin_lock_set_owner>
	return k;
   248a4:	4640      	mov	r0, r8
   248a6:	e768      	b.n	2477a <clear_event_registrations+0x12>
   248a8:	20021a78 	.word	0x20021a78
   248ac:	00033796 	.word	0x00033796
   248b0:	00033758 	.word	0x00033758
   248b4:	0002dd81 	.word	0x0002dd81
   248b8:	000337b0 	.word	0x000337b0
   248bc:	000337c5 	.word	0x000337c5
   248c0:	000337e1 	.word	0x000337e1
   248c4:	000337f2 	.word	0x000337f2
   248c8:	0003380f 	.word	0x0003380f
   248cc:	00033826 	.word	0x00033826
   248d0:	00033841 	.word	0x00033841
   248d4:	00033a12 	.word	0x00033a12
   248d8:	0003385a 	.word	0x0003385a
   248dc:	0002ebe3 	.word	0x0002ebe3
   248e0:	0002ec10 	.word	0x0002ec10
   248e4:	0002ec27 	.word	0x0002ec27
   248e8:	0002ec3c 	.word	0x0002ec3c
   248ec:	0002ec51 	.word	0x0002ec51

000248f0 <k_poll_event_init>:
{
   248f0:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   248f2:	b162      	cbz	r2, 2490e <k_poll_event_init+0x1e>
   248f4:	4917      	ldr	r1, [pc, #92]	; (24954 <k_poll_event_init+0x64>)
   248f6:	232d      	movs	r3, #45	; 0x2d
   248f8:	4a17      	ldr	r2, [pc, #92]	; (24958 <k_poll_event_init+0x68>)
   248fa:	4818      	ldr	r0, [pc, #96]	; (2495c <k_poll_event_init+0x6c>)
   248fc:	f002 fa39 	bl	26d72 <assert_print>
   24900:	4817      	ldr	r0, [pc, #92]	; (24960 <k_poll_event_init+0x70>)
   24902:	f002 fa36 	bl	26d72 <assert_print>
   24906:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24908:	4813      	ldr	r0, [pc, #76]	; (24958 <k_poll_event_init+0x68>)
   2490a:	f002 fa2b 	bl	26d64 <assert_post_action>
   2490e:	293f      	cmp	r1, #63	; 0x3f
   24910:	d90a      	bls.n	24928 <k_poll_event_init+0x38>
   24912:	4914      	ldr	r1, [pc, #80]	; (24964 <k_poll_event_init+0x74>)
   24914:	232f      	movs	r3, #47	; 0x2f
   24916:	4a10      	ldr	r2, [pc, #64]	; (24958 <k_poll_event_init+0x68>)
   24918:	4810      	ldr	r0, [pc, #64]	; (2495c <k_poll_event_init+0x6c>)
   2491a:	f002 fa2a 	bl	26d72 <assert_print>
   2491e:	4812      	ldr	r0, [pc, #72]	; (24968 <k_poll_event_init+0x78>)
   24920:	f002 fa27 	bl	26d72 <assert_print>
   24924:	212f      	movs	r1, #47	; 0x2f
   24926:	e7ef      	b.n	24908 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   24928:	b953      	cbnz	r3, 24940 <k_poll_event_init+0x50>
   2492a:	4910      	ldr	r1, [pc, #64]	; (2496c <k_poll_event_init+0x7c>)
   2492c:	2330      	movs	r3, #48	; 0x30
   2492e:	4a0a      	ldr	r2, [pc, #40]	; (24958 <k_poll_event_init+0x68>)
   24930:	480a      	ldr	r0, [pc, #40]	; (2495c <k_poll_event_init+0x6c>)
   24932:	f002 fa1e 	bl	26d72 <assert_print>
   24936:	480e      	ldr	r0, [pc, #56]	; (24970 <k_poll_event_init+0x80>)
   24938:	f002 fa1b 	bl	26d72 <assert_print>
   2493c:	2130      	movs	r1, #48	; 0x30
   2493e:	e7e3      	b.n	24908 <k_poll_event_init+0x18>
	event->poller = NULL;
   24940:	6082      	str	r2, [r0, #8]
	event->type = type;
   24942:	0209      	lsls	r1, r1, #8
   24944:	7b02      	ldrb	r2, [r0, #12]
   24946:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2494a:	4311      	orrs	r1, r2
	event->obj = obj;
   2494c:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   24950:	bd08      	pop	{r3, pc}
   24952:	bf00      	nop
   24954:	00033870 	.word	0x00033870
   24958:	00033758 	.word	0x00033758
   2495c:	0002dd81 	.word	0x0002dd81
   24960:	00033890 	.word	0x00033890
   24964:	000338b6 	.word	0x000338b6
   24968:	000338da 	.word	0x000338da
   2496c:	000338ea 	.word	0x000338ea
   24970:	000338fd 	.word	0x000338fd

00024974 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   24974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24978:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2497a:	4b5c      	ldr	r3, [pc, #368]	; (24aec <z_impl_k_poll+0x178>)
{
   2497c:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   2497e:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   24982:	2301      	movs	r3, #1
{
   24984:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   24986:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2498a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2498e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   24992:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   24996:	f1bb 0f00 	cmp.w	fp, #0
   2499a:	d00e      	beq.n	249ba <z_impl_k_poll+0x46>
   2499c:	4954      	ldr	r1, [pc, #336]	; (24af0 <z_impl_k_poll+0x17c>)
   2499e:	f240 132d 	movw	r3, #301	; 0x12d
   249a2:	4a54      	ldr	r2, [pc, #336]	; (24af4 <z_impl_k_poll+0x180>)
   249a4:	4854      	ldr	r0, [pc, #336]	; (24af8 <z_impl_k_poll+0x184>)
   249a6:	f002 f9e4 	bl	26d72 <assert_print>
   249aa:	4854      	ldr	r0, [pc, #336]	; (24afc <z_impl_k_poll+0x188>)
   249ac:	f002 f9e1 	bl	26d72 <assert_print>
   249b0:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   249b4:	484f      	ldr	r0, [pc, #316]	; (24af4 <z_impl_k_poll+0x180>)
   249b6:	f002 f9d5 	bl	26d64 <assert_post_action>
   249ba:	b960      	cbnz	r0, 249d6 <z_impl_k_poll+0x62>
   249bc:	4950      	ldr	r1, [pc, #320]	; (24b00 <z_impl_k_poll+0x18c>)
   249be:	f44f 7397 	mov.w	r3, #302	; 0x12e
   249c2:	4a4c      	ldr	r2, [pc, #304]	; (24af4 <z_impl_k_poll+0x180>)
   249c4:	484c      	ldr	r0, [pc, #304]	; (24af8 <z_impl_k_poll+0x184>)
   249c6:	f002 f9d4 	bl	26d72 <assert_print>
   249ca:	484e      	ldr	r0, [pc, #312]	; (24b04 <z_impl_k_poll+0x190>)
   249cc:	f002 f9d1 	bl	26d72 <assert_print>
   249d0:	f44f 7197 	mov.w	r1, #302	; 0x12e
   249d4:	e7ee      	b.n	249b4 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   249d6:	2900      	cmp	r1, #0
   249d8:	da0c      	bge.n	249f4 <z_impl_k_poll+0x80>
   249da:	494b      	ldr	r1, [pc, #300]	; (24b08 <z_impl_k_poll+0x194>)
   249dc:	f240 132f 	movw	r3, #303	; 0x12f
   249e0:	4a44      	ldr	r2, [pc, #272]	; (24af4 <z_impl_k_poll+0x180>)
   249e2:	4845      	ldr	r0, [pc, #276]	; (24af8 <z_impl_k_poll+0x184>)
   249e4:	f002 f9c5 	bl	26d72 <assert_print>
   249e8:	4848      	ldr	r0, [pc, #288]	; (24b0c <z_impl_k_poll+0x198>)
   249ea:	f002 f9c2 	bl	26d72 <assert_print>
   249ee:	f240 112f 	movw	r1, #303	; 0x12f
   249f2:	e7df      	b.n	249b4 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   249f4:	ea57 0306 	orrs.w	r3, r7, r6
   249f8:	bf0c      	ite	eq
   249fa:	2301      	moveq	r3, #1
   249fc:	2300      	movne	r3, #0
   249fe:	f7ff fda5 	bl	2454c <register_events>
   24a02:	4681      	mov	r9, r0
   24a04:	f04f 0320 	mov.w	r3, #32
   24a08:	f3ef 8a11 	mrs	sl, BASEPRI
   24a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   24a10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a14:	483e      	ldr	r0, [pc, #248]	; (24b10 <z_impl_k_poll+0x19c>)
   24a16:	f7fc fe83 	bl	21720 <z_spin_lock_valid>
   24a1a:	b960      	cbnz	r0, 24a36 <z_impl_k_poll+0xc2>
   24a1c:	2394      	movs	r3, #148	; 0x94
   24a1e:	4a3d      	ldr	r2, [pc, #244]	; (24b14 <z_impl_k_poll+0x1a0>)
   24a20:	493d      	ldr	r1, [pc, #244]	; (24b18 <z_impl_k_poll+0x1a4>)
   24a22:	4835      	ldr	r0, [pc, #212]	; (24af8 <z_impl_k_poll+0x184>)
   24a24:	f002 f9a5 	bl	26d72 <assert_print>
   24a28:	4939      	ldr	r1, [pc, #228]	; (24b10 <z_impl_k_poll+0x19c>)
   24a2a:	483c      	ldr	r0, [pc, #240]	; (24b1c <z_impl_k_poll+0x1a8>)
   24a2c:	f002 f9a1 	bl	26d72 <assert_print>
   24a30:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a32:	4838      	ldr	r0, [pc, #224]	; (24b14 <z_impl_k_poll+0x1a0>)
   24a34:	e7bf      	b.n	249b6 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   24a36:	4836      	ldr	r0, [pc, #216]	; (24b10 <z_impl_k_poll+0x19c>)
   24a38:	f7fc fe8e 	bl	21758 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24a3c:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   24a40:	b9e4      	cbnz	r4, 24a7c <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   24a42:	4628      	mov	r0, r5
   24a44:	4652      	mov	r2, sl
   24a46:	4649      	mov	r1, r9
   24a48:	f7ff fe8e 	bl	24768 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a4c:	4830      	ldr	r0, [pc, #192]	; (24b10 <z_impl_k_poll+0x19c>)
   24a4e:	f7fc fe75 	bl	2173c <z_spin_unlock_valid>
   24a52:	b958      	cbnz	r0, 24a6c <z_impl_k_poll+0xf8>
   24a54:	23c2      	movs	r3, #194	; 0xc2
   24a56:	4a2f      	ldr	r2, [pc, #188]	; (24b14 <z_impl_k_poll+0x1a0>)
   24a58:	4931      	ldr	r1, [pc, #196]	; (24b20 <z_impl_k_poll+0x1ac>)
   24a5a:	4827      	ldr	r0, [pc, #156]	; (24af8 <z_impl_k_poll+0x184>)
   24a5c:	f002 f989 	bl	26d72 <assert_print>
   24a60:	492b      	ldr	r1, [pc, #172]	; (24b10 <z_impl_k_poll+0x19c>)
   24a62:	4830      	ldr	r0, [pc, #192]	; (24b24 <z_impl_k_poll+0x1b0>)
   24a64:	f002 f985 	bl	26d72 <assert_print>
   24a68:	21c2      	movs	r1, #194	; 0xc2
   24a6a:	e7e2      	b.n	24a32 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   24a6c:	f38a 8811 	msr	BASEPRI, sl
   24a70:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24a74:	4620      	mov	r0, r4
   24a76:	b003      	add	sp, #12
   24a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a7c:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   24a80:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a84:	d10b      	bne.n	24a9e <z_impl_k_poll+0x12a>
   24a86:	4822      	ldr	r0, [pc, #136]	; (24b10 <z_impl_k_poll+0x19c>)
   24a88:	f7fc fe58 	bl	2173c <z_spin_unlock_valid>
   24a8c:	2800      	cmp	r0, #0
   24a8e:	d0e1      	beq.n	24a54 <z_impl_k_poll+0xe0>
   24a90:	f38a 8811 	msr	BASEPRI, sl
   24a94:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24a98:	f06f 040a 	mvn.w	r4, #10
   24a9c:	e7ea      	b.n	24a74 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24a9e:	4651      	mov	r1, sl
   24aa0:	e9cd 7600 	strd	r7, r6, [sp]
   24aa4:	4a20      	ldr	r2, [pc, #128]	; (24b28 <z_impl_k_poll+0x1b4>)
   24aa6:	481a      	ldr	r0, [pc, #104]	; (24b10 <z_impl_k_poll+0x19c>)
   24aa8:	f7fe fbd2 	bl	23250 <z_pend_curr>
   24aac:	4604      	mov	r4, r0
	__asm__ volatile(
   24aae:	f04f 0320 	mov.w	r3, #32
   24ab2:	f3ef 8611 	mrs	r6, BASEPRI
   24ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   24aba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24abe:	4814      	ldr	r0, [pc, #80]	; (24b10 <z_impl_k_poll+0x19c>)
   24ac0:	f7fc fe2e 	bl	21720 <z_spin_lock_valid>
   24ac4:	2800      	cmp	r0, #0
   24ac6:	d0a9      	beq.n	24a1c <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   24ac8:	4811      	ldr	r0, [pc, #68]	; (24b10 <z_impl_k_poll+0x19c>)
   24aca:	f7fc fe45 	bl	21758 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   24ace:	4628      	mov	r0, r5
   24ad0:	4632      	mov	r2, r6
   24ad2:	4649      	mov	r1, r9
   24ad4:	f7ff fe48 	bl	24768 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ad8:	480d      	ldr	r0, [pc, #52]	; (24b10 <z_impl_k_poll+0x19c>)
   24ada:	f7fc fe2f 	bl	2173c <z_spin_unlock_valid>
   24ade:	2800      	cmp	r0, #0
   24ae0:	d0b8      	beq.n	24a54 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   24ae2:	f386 8811 	msr	BASEPRI, r6
   24ae6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24aea:	e7c3      	b.n	24a74 <z_impl_k_poll+0x100>
   24aec:	20021a20 	.word	0x20021a20
   24af0:	000332e1 	.word	0x000332e1
   24af4:	00033758 	.word	0x00033758
   24af8:	0002dd81 	.word	0x0002dd81
   24afc:	00031dba 	.word	0x00031dba
   24b00:	00033917 	.word	0x00033917
   24b04:	0003392d 	.word	0x0003392d
   24b08:	0003393c 	.word	0x0003393c
   24b0c:	0003394c 	.word	0x0003394c
   24b10:	20021a78 	.word	0x20021a78
   24b14:	0002ebe3 	.word	0x0002ebe3
   24b18:	0002ec3c 	.word	0x0002ec3c
   24b1c:	0002ec51 	.word	0x0002ec51
   24b20:	0002ec10 	.word	0x0002ec10
   24b24:	0002ec27 	.word	0x0002ec27
   24b28:	2000874c 	.word	0x2000874c

00024b2c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24b2c:	b570      	push	{r4, r5, r6, lr}
   24b2e:	4604      	mov	r4, r0
   24b30:	460d      	mov	r5, r1
	__asm__ volatile(
   24b32:	f04f 0320 	mov.w	r3, #32
   24b36:	f3ef 8611 	mrs	r6, BASEPRI
   24b3a:	f383 8812 	msr	BASEPRI_MAX, r3
   24b3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b42:	4820      	ldr	r0, [pc, #128]	; (24bc4 <z_impl_k_poll_signal_raise+0x98>)
   24b44:	f7fc fdec 	bl	21720 <z_spin_lock_valid>
   24b48:	b968      	cbnz	r0, 24b66 <z_impl_k_poll_signal_raise+0x3a>
   24b4a:	2394      	movs	r3, #148	; 0x94
   24b4c:	4a1e      	ldr	r2, [pc, #120]	; (24bc8 <z_impl_k_poll_signal_raise+0x9c>)
   24b4e:	491f      	ldr	r1, [pc, #124]	; (24bcc <z_impl_k_poll_signal_raise+0xa0>)
   24b50:	481f      	ldr	r0, [pc, #124]	; (24bd0 <z_impl_k_poll_signal_raise+0xa4>)
   24b52:	f002 f90e 	bl	26d72 <assert_print>
   24b56:	491b      	ldr	r1, [pc, #108]	; (24bc4 <z_impl_k_poll_signal_raise+0x98>)
   24b58:	481e      	ldr	r0, [pc, #120]	; (24bd4 <z_impl_k_poll_signal_raise+0xa8>)
   24b5a:	f002 f90a 	bl	26d72 <assert_print>
   24b5e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b60:	4819      	ldr	r0, [pc, #100]	; (24bc8 <z_impl_k_poll_signal_raise+0x9c>)
   24b62:	f002 f8ff 	bl	26d64 <assert_post_action>
	z_spin_lock_set_owner(l);
   24b66:	4817      	ldr	r0, [pc, #92]	; (24bc4 <z_impl_k_poll_signal_raise+0x98>)
   24b68:	f7fc fdf6 	bl	21758 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   24b6c:	2101      	movs	r1, #1
	return list->head == list;
   24b6e:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   24b70:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24b72:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   24b74:	60a1      	str	r1, [r4, #8]
   24b76:	d10f      	bne.n	24b98 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b78:	4812      	ldr	r0, [pc, #72]	; (24bc4 <z_impl_k_poll_signal_raise+0x98>)
   24b7a:	f7fc fddf 	bl	2173c <z_spin_unlock_valid>
   24b7e:	b9d8      	cbnz	r0, 24bb8 <z_impl_k_poll_signal_raise+0x8c>
   24b80:	23c2      	movs	r3, #194	; 0xc2
   24b82:	4a11      	ldr	r2, [pc, #68]	; (24bc8 <z_impl_k_poll_signal_raise+0x9c>)
   24b84:	4914      	ldr	r1, [pc, #80]	; (24bd8 <z_impl_k_poll_signal_raise+0xac>)
   24b86:	4812      	ldr	r0, [pc, #72]	; (24bd0 <z_impl_k_poll_signal_raise+0xa4>)
   24b88:	f002 f8f3 	bl	26d72 <assert_print>
   24b8c:	490d      	ldr	r1, [pc, #52]	; (24bc4 <z_impl_k_poll_signal_raise+0x98>)
   24b8e:	4813      	ldr	r0, [pc, #76]	; (24bdc <z_impl_k_poll_signal_raise+0xb0>)
   24b90:	f002 f8ef 	bl	26d72 <assert_print>
   24b94:	21c2      	movs	r1, #194	; 0xc2
   24b96:	e7e3      	b.n	24b60 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   24b98:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24b9c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24b9e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24ba0:	2300      	movs	r3, #0
	node->prev = NULL;
   24ba2:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24ba6:	f007 f872 	bl	2bc8e <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   24baa:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24bac:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24bae:	4805      	ldr	r0, [pc, #20]	; (24bc4 <z_impl_k_poll_signal_raise+0x98>)
   24bb0:	f7fe f880 	bl	22cb4 <z_reschedule>
	return rc;
}
   24bb4:	4620      	mov	r0, r4
   24bb6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   24bb8:	f386 8811 	msr	BASEPRI, r6
   24bbc:	f3bf 8f6f 	isb	sy
		return 0;
   24bc0:	2400      	movs	r4, #0
   24bc2:	e7f7      	b.n	24bb4 <z_impl_k_poll_signal_raise+0x88>
   24bc4:	20021a78 	.word	0x20021a78
   24bc8:	0002ebe3 	.word	0x0002ebe3
   24bcc:	0002ec3c 	.word	0x0002ec3c
   24bd0:	0002dd81 	.word	0x0002dd81
   24bd4:	0002ec51 	.word	0x0002ec51
   24bd8:	0002ec10 	.word	0x0002ec10
   24bdc:	0002ec27 	.word	0x0002ec27

00024be0 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24be0:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   24be2:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   24be6:	4606      	mov	r6, r0
   24be8:	460d      	mov	r5, r1
   24bea:	d220      	bcs.n	24c2e <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   24bec:	f04f 0800 	mov.w	r8, #0
   24bf0:	f04f 0900 	mov.w	r9, #0
   24bf4:	f041 0104 	orr.w	r1, r1, #4
   24bf8:	e9cd 8900 	strd	r8, r9, [sp]
   24bfc:	f7fc fa8c 	bl	21118 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24c00:	4604      	mov	r4, r0
   24c02:	b1a0      	cbz	r0, 24c2e <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   24c04:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   24c08:	b195      	cbz	r5, 24c30 <z_heap_aligned_alloc+0x50>
   24c0a:	1e6b      	subs	r3, r5, #1
   24c0c:	421c      	tst	r4, r3
   24c0e:	d00f      	beq.n	24c30 <z_heap_aligned_alloc+0x50>
   24c10:	2325      	movs	r3, #37	; 0x25
   24c12:	4a09      	ldr	r2, [pc, #36]	; (24c38 <z_heap_aligned_alloc+0x58>)
   24c14:	4909      	ldr	r1, [pc, #36]	; (24c3c <z_heap_aligned_alloc+0x5c>)
   24c16:	480a      	ldr	r0, [pc, #40]	; (24c40 <z_heap_aligned_alloc+0x60>)
   24c18:	f002 f8ab 	bl	26d72 <assert_print>
   24c1c:	4621      	mov	r1, r4
   24c1e:	4809      	ldr	r0, [pc, #36]	; (24c44 <z_heap_aligned_alloc+0x64>)
   24c20:	462a      	mov	r2, r5
   24c22:	f002 f8a6 	bl	26d72 <assert_print>
   24c26:	2125      	movs	r1, #37	; 0x25
   24c28:	4803      	ldr	r0, [pc, #12]	; (24c38 <z_heap_aligned_alloc+0x58>)
   24c2a:	f002 f89b 	bl	26d64 <assert_post_action>
		return NULL;
   24c2e:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   24c30:	4620      	mov	r0, r4
   24c32:	b002      	add	sp, #8
   24c34:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   24c38:	00033959 	.word	0x00033959
   24c3c:	0003397d 	.word	0x0003397d
   24c40:	0002dd81 	.word	0x0002dd81
   24c44:	000339af 	.word	0x000339af

00024c48 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   24c48:	2803      	cmp	r0, #3
{
   24c4a:	460a      	mov	r2, r1
   24c4c:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   24c4e:	d901      	bls.n	24c54 <k_aligned_alloc+0xc>
   24c50:	0783      	lsls	r3, r0, #30
   24c52:	d00c      	beq.n	24c6e <k_aligned_alloc+0x26>
   24c54:	4910      	ldr	r1, [pc, #64]	; (24c98 <k_aligned_alloc+0x50>)
   24c56:	2342      	movs	r3, #66	; 0x42
   24c58:	4a10      	ldr	r2, [pc, #64]	; (24c9c <k_aligned_alloc+0x54>)
   24c5a:	4811      	ldr	r0, [pc, #68]	; (24ca0 <k_aligned_alloc+0x58>)
   24c5c:	f002 f889 	bl	26d72 <assert_print>
   24c60:	4810      	ldr	r0, [pc, #64]	; (24ca4 <k_aligned_alloc+0x5c>)
   24c62:	f002 f886 	bl	26d72 <assert_print>
   24c66:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   24c68:	480c      	ldr	r0, [pc, #48]	; (24c9c <k_aligned_alloc+0x54>)
   24c6a:	f002 f87b 	bl	26d64 <assert_post_action>
   24c6e:	1e43      	subs	r3, r0, #1
   24c70:	4203      	tst	r3, r0
   24c72:	d00a      	beq.n	24c8a <k_aligned_alloc+0x42>
   24c74:	490c      	ldr	r1, [pc, #48]	; (24ca8 <k_aligned_alloc+0x60>)
   24c76:	2346      	movs	r3, #70	; 0x46
   24c78:	4a08      	ldr	r2, [pc, #32]	; (24c9c <k_aligned_alloc+0x54>)
   24c7a:	4809      	ldr	r0, [pc, #36]	; (24ca0 <k_aligned_alloc+0x58>)
   24c7c:	f002 f879 	bl	26d72 <assert_print>
   24c80:	480a      	ldr	r0, [pc, #40]	; (24cac <k_aligned_alloc+0x64>)
   24c82:	f002 f876 	bl	26d72 <assert_print>
   24c86:	2146      	movs	r1, #70	; 0x46
   24c88:	e7ee      	b.n	24c68 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24c8a:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   24c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24c90:	4807      	ldr	r0, [pc, #28]	; (24cb0 <k_aligned_alloc+0x68>)
   24c92:	f7ff bfa5 	b.w	24be0 <z_heap_aligned_alloc>
   24c96:	bf00      	nop
   24c98:	000339d7 	.word	0x000339d7
   24c9c:	00033959 	.word	0x00033959
   24ca0:	0002dd81 	.word	0x0002dd81
   24ca4:	00033a14 	.word	0x00033a14
   24ca8:	0002ea4d 	.word	0x0002ea4d
   24cac:	0002ea68 	.word	0x0002ea68
   24cb0:	20008abc 	.word	0x20008abc

00024cb4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   24cb4:	4b01      	ldr	r3, [pc, #4]	; (24cbc <k_thread_system_pool_assign+0x8>)
   24cb6:	6743      	str	r3, [r0, #116]	; 0x74
}
   24cb8:	4770      	bx	lr
   24cba:	bf00      	nop
   24cbc:	20008abc 	.word	0x20008abc

00024cc0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24cc0:	b538      	push	{r3, r4, r5, lr}
   24cc2:	4604      	mov	r4, r0
   24cc4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24cc6:	f006 fe66 	bl	2b996 <k_is_in_isr>
   24cca:	b920      	cbnz	r0, 24cd6 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24ccc:	4b06      	ldr	r3, [pc, #24]	; (24ce8 <z_thread_aligned_alloc+0x28>)
   24cce:	689b      	ldr	r3, [r3, #8]
   24cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24cd2:	b90b      	cbnz	r3, 24cd8 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   24cd4:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   24cd6:	4b05      	ldr	r3, [pc, #20]	; (24cec <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   24cd8:	462a      	mov	r2, r5
   24cda:	4621      	mov	r1, r4
   24cdc:	4618      	mov	r0, r3
}
   24cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24ce2:	f7ff bf7d 	b.w	24be0 <z_heap_aligned_alloc>
   24ce6:	bf00      	nop
   24ce8:	20021a20 	.word	0x20021a20
   24cec:	20008abc 	.word	0x20008abc

00024cf0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   24cf0:	4801      	ldr	r0, [pc, #4]	; (24cf8 <boot_banner+0x8>)
   24cf2:	f001 be7c 	b.w	269ee <printk>
   24cf6:	bf00      	nop
   24cf8:	00033a41 	.word	0x00033a41

00024cfc <log>:
   24cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24cfe:	4604      	mov	r4, r0
   24d00:	460d      	mov	r5, r1
   24d02:	f7e4 fe0d 	bl	9920 <__ieee754_log>
   24d06:	4b17      	ldr	r3, [pc, #92]	; (24d64 <log+0x68>)
   24d08:	4606      	mov	r6, r0
   24d0a:	460f      	mov	r7, r1
   24d0c:	f993 3000 	ldrsb.w	r3, [r3]
   24d10:	3301      	adds	r3, #1
   24d12:	d01a      	beq.n	24d4a <log+0x4e>
   24d14:	4622      	mov	r2, r4
   24d16:	462b      	mov	r3, r5
   24d18:	4620      	mov	r0, r4
   24d1a:	4629      	mov	r1, r5
   24d1c:	f7e4 f98a 	bl	9034 <__aeabi_dcmpun>
   24d20:	b998      	cbnz	r0, 24d4a <log+0x4e>
   24d22:	2200      	movs	r2, #0
   24d24:	2300      	movs	r3, #0
   24d26:	4620      	mov	r0, r4
   24d28:	4629      	mov	r1, r5
   24d2a:	f7e4 f979 	bl	9020 <__aeabi_dcmpgt>
   24d2e:	b960      	cbnz	r0, 24d4a <log+0x4e>
   24d30:	2200      	movs	r2, #0
   24d32:	2300      	movs	r3, #0
   24d34:	4620      	mov	r0, r4
   24d36:	4629      	mov	r1, r5
   24d38:	f7e4 f94a 	bl	8fd0 <__aeabi_dcmpeq>
   24d3c:	b140      	cbz	r0, 24d50 <log+0x54>
   24d3e:	f003 fbb3 	bl	284a8 <__errno>
   24d42:	2600      	movs	r6, #0
   24d44:	2322      	movs	r3, #34	; 0x22
   24d46:	4f08      	ldr	r7, [pc, #32]	; (24d68 <log+0x6c>)
   24d48:	6003      	str	r3, [r0, #0]
   24d4a:	4630      	mov	r0, r6
   24d4c:	4639      	mov	r1, r7
   24d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24d50:	f003 fbaa 	bl	284a8 <__errno>
   24d54:	2321      	movs	r3, #33	; 0x21
   24d56:	6003      	str	r3, [r0, #0]
   24d58:	4804      	ldr	r0, [pc, #16]	; (24d6c <log+0x70>)
   24d5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24d5e:	f000 b807 	b.w	24d70 <nan>
   24d62:	bf00      	nop
   24d64:	200089f7 	.word	0x200089f7
   24d68:	fff00000 	.word	0xfff00000
   24d6c:	00031dbc 	.word	0x00031dbc

00024d70 <nan>:
   24d70:	2000      	movs	r0, #0
   24d72:	4901      	ldr	r1, [pc, #4]	; (24d78 <nan+0x8>)
   24d74:	4770      	bx	lr
   24d76:	bf00      	nop
   24d78:	7ff80000 	.word	0x7ff80000

00024d7c <malloc>:
   24d7c:	4b02      	ldr	r3, [pc, #8]	; (24d88 <malloc+0xc>)
   24d7e:	4601      	mov	r1, r0
   24d80:	6818      	ldr	r0, [r3, #0]
   24d82:	f000 b84d 	b.w	24e20 <_malloc_r>
   24d86:	bf00      	nop
   24d88:	20008754 	.word	0x20008754

00024d8c <_free_r>:
   24d8c:	b538      	push	{r3, r4, r5, lr}
   24d8e:	4605      	mov	r5, r0
   24d90:	2900      	cmp	r1, #0
   24d92:	d041      	beq.n	24e18 <_free_r+0x8c>
   24d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24d98:	1f0c      	subs	r4, r1, #4
   24d9a:	2b00      	cmp	r3, #0
   24d9c:	bfb8      	it	lt
   24d9e:	18e4      	addlt	r4, r4, r3
   24da0:	f000 fd94 	bl	258cc <__malloc_lock>
   24da4:	4a1d      	ldr	r2, [pc, #116]	; (24e1c <_free_r+0x90>)
   24da6:	6813      	ldr	r3, [r2, #0]
   24da8:	b933      	cbnz	r3, 24db8 <_free_r+0x2c>
   24daa:	6063      	str	r3, [r4, #4]
   24dac:	6014      	str	r4, [r2, #0]
   24dae:	4628      	mov	r0, r5
   24db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24db4:	f000 bd90 	b.w	258d8 <__malloc_unlock>
   24db8:	42a3      	cmp	r3, r4
   24dba:	d908      	bls.n	24dce <_free_r+0x42>
   24dbc:	6820      	ldr	r0, [r4, #0]
   24dbe:	1821      	adds	r1, r4, r0
   24dc0:	428b      	cmp	r3, r1
   24dc2:	bf01      	itttt	eq
   24dc4:	6819      	ldreq	r1, [r3, #0]
   24dc6:	685b      	ldreq	r3, [r3, #4]
   24dc8:	1809      	addeq	r1, r1, r0
   24dca:	6021      	streq	r1, [r4, #0]
   24dcc:	e7ed      	b.n	24daa <_free_r+0x1e>
   24dce:	461a      	mov	r2, r3
   24dd0:	685b      	ldr	r3, [r3, #4]
   24dd2:	b10b      	cbz	r3, 24dd8 <_free_r+0x4c>
   24dd4:	42a3      	cmp	r3, r4
   24dd6:	d9fa      	bls.n	24dce <_free_r+0x42>
   24dd8:	6811      	ldr	r1, [r2, #0]
   24dda:	1850      	adds	r0, r2, r1
   24ddc:	42a0      	cmp	r0, r4
   24dde:	d10b      	bne.n	24df8 <_free_r+0x6c>
   24de0:	6820      	ldr	r0, [r4, #0]
   24de2:	4401      	add	r1, r0
   24de4:	1850      	adds	r0, r2, r1
   24de6:	6011      	str	r1, [r2, #0]
   24de8:	4283      	cmp	r3, r0
   24dea:	d1e0      	bne.n	24dae <_free_r+0x22>
   24dec:	6818      	ldr	r0, [r3, #0]
   24dee:	685b      	ldr	r3, [r3, #4]
   24df0:	4408      	add	r0, r1
   24df2:	6053      	str	r3, [r2, #4]
   24df4:	6010      	str	r0, [r2, #0]
   24df6:	e7da      	b.n	24dae <_free_r+0x22>
   24df8:	d902      	bls.n	24e00 <_free_r+0x74>
   24dfa:	230c      	movs	r3, #12
   24dfc:	602b      	str	r3, [r5, #0]
   24dfe:	e7d6      	b.n	24dae <_free_r+0x22>
   24e00:	6820      	ldr	r0, [r4, #0]
   24e02:	1821      	adds	r1, r4, r0
   24e04:	428b      	cmp	r3, r1
   24e06:	bf02      	ittt	eq
   24e08:	6819      	ldreq	r1, [r3, #0]
   24e0a:	685b      	ldreq	r3, [r3, #4]
   24e0c:	1809      	addeq	r1, r1, r0
   24e0e:	6063      	str	r3, [r4, #4]
   24e10:	bf08      	it	eq
   24e12:	6021      	streq	r1, [r4, #0]
   24e14:	6054      	str	r4, [r2, #4]
   24e16:	e7ca      	b.n	24dae <_free_r+0x22>
   24e18:	bd38      	pop	{r3, r4, r5, pc}
   24e1a:	bf00      	nop
   24e1c:	20021a80 	.word	0x20021a80

00024e20 <_malloc_r>:
   24e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e22:	1ccd      	adds	r5, r1, #3
   24e24:	4606      	mov	r6, r0
   24e26:	f025 0503 	bic.w	r5, r5, #3
   24e2a:	3508      	adds	r5, #8
   24e2c:	2d0c      	cmp	r5, #12
   24e2e:	bf38      	it	cc
   24e30:	250c      	movcc	r5, #12
   24e32:	2d00      	cmp	r5, #0
   24e34:	db01      	blt.n	24e3a <_malloc_r+0x1a>
   24e36:	42a9      	cmp	r1, r5
   24e38:	d903      	bls.n	24e42 <_malloc_r+0x22>
   24e3a:	230c      	movs	r3, #12
   24e3c:	6033      	str	r3, [r6, #0]
   24e3e:	2000      	movs	r0, #0
   24e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24e42:	f000 fd43 	bl	258cc <__malloc_lock>
   24e46:	4921      	ldr	r1, [pc, #132]	; (24ecc <_malloc_r+0xac>)
   24e48:	680a      	ldr	r2, [r1, #0]
   24e4a:	4614      	mov	r4, r2
   24e4c:	b99c      	cbnz	r4, 24e76 <_malloc_r+0x56>
   24e4e:	4f20      	ldr	r7, [pc, #128]	; (24ed0 <_malloc_r+0xb0>)
   24e50:	683b      	ldr	r3, [r7, #0]
   24e52:	b923      	cbnz	r3, 24e5e <_malloc_r+0x3e>
   24e54:	4621      	mov	r1, r4
   24e56:	4630      	mov	r0, r6
   24e58:	f000 fbb8 	bl	255cc <_sbrk_r>
   24e5c:	6038      	str	r0, [r7, #0]
   24e5e:	4629      	mov	r1, r5
   24e60:	4630      	mov	r0, r6
   24e62:	f000 fbb3 	bl	255cc <_sbrk_r>
   24e66:	1c43      	adds	r3, r0, #1
   24e68:	d123      	bne.n	24eb2 <_malloc_r+0x92>
   24e6a:	230c      	movs	r3, #12
   24e6c:	4630      	mov	r0, r6
   24e6e:	6033      	str	r3, [r6, #0]
   24e70:	f000 fd32 	bl	258d8 <__malloc_unlock>
   24e74:	e7e3      	b.n	24e3e <_malloc_r+0x1e>
   24e76:	6823      	ldr	r3, [r4, #0]
   24e78:	1b5b      	subs	r3, r3, r5
   24e7a:	d417      	bmi.n	24eac <_malloc_r+0x8c>
   24e7c:	2b0b      	cmp	r3, #11
   24e7e:	d903      	bls.n	24e88 <_malloc_r+0x68>
   24e80:	6023      	str	r3, [r4, #0]
   24e82:	441c      	add	r4, r3
   24e84:	6025      	str	r5, [r4, #0]
   24e86:	e004      	b.n	24e92 <_malloc_r+0x72>
   24e88:	6863      	ldr	r3, [r4, #4]
   24e8a:	42a2      	cmp	r2, r4
   24e8c:	bf0c      	ite	eq
   24e8e:	600b      	streq	r3, [r1, #0]
   24e90:	6053      	strne	r3, [r2, #4]
   24e92:	4630      	mov	r0, r6
   24e94:	f000 fd20 	bl	258d8 <__malloc_unlock>
   24e98:	f104 000b 	add.w	r0, r4, #11
   24e9c:	1d23      	adds	r3, r4, #4
   24e9e:	f020 0007 	bic.w	r0, r0, #7
   24ea2:	1ac2      	subs	r2, r0, r3
   24ea4:	bf1c      	itt	ne
   24ea6:	1a1b      	subne	r3, r3, r0
   24ea8:	50a3      	strne	r3, [r4, r2]
   24eaa:	e7c9      	b.n	24e40 <_malloc_r+0x20>
   24eac:	4622      	mov	r2, r4
   24eae:	6864      	ldr	r4, [r4, #4]
   24eb0:	e7cc      	b.n	24e4c <_malloc_r+0x2c>
   24eb2:	1cc4      	adds	r4, r0, #3
   24eb4:	f024 0403 	bic.w	r4, r4, #3
   24eb8:	42a0      	cmp	r0, r4
   24eba:	d0e3      	beq.n	24e84 <_malloc_r+0x64>
   24ebc:	1a21      	subs	r1, r4, r0
   24ebe:	4630      	mov	r0, r6
   24ec0:	f000 fb84 	bl	255cc <_sbrk_r>
   24ec4:	3001      	adds	r0, #1
   24ec6:	d1dd      	bne.n	24e84 <_malloc_r+0x64>
   24ec8:	e7cf      	b.n	24e6a <_malloc_r+0x4a>
   24eca:	bf00      	nop
   24ecc:	20021a80 	.word	0x20021a80
   24ed0:	20021a7c 	.word	0x20021a7c

00024ed4 <_printf_float>:
   24ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ed8:	b091      	sub	sp, #68	; 0x44
   24eda:	460c      	mov	r4, r1
   24edc:	4616      	mov	r6, r2
   24ede:	461f      	mov	r7, r3
   24ee0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   24ee4:	4605      	mov	r5, r0
   24ee6:	f000 fced 	bl	258c4 <_localeconv_r>
   24eea:	6803      	ldr	r3, [r0, #0]
   24eec:	4618      	mov	r0, r3
   24eee:	9308      	str	r3, [sp, #32]
   24ef0:	f7e4 fa36 	bl	9360 <strlen>
   24ef4:	2300      	movs	r3, #0
   24ef6:	9009      	str	r0, [sp, #36]	; 0x24
   24ef8:	930e      	str	r3, [sp, #56]	; 0x38
   24efa:	f8d8 3000 	ldr.w	r3, [r8]
   24efe:	f894 a018 	ldrb.w	sl, [r4, #24]
   24f02:	3307      	adds	r3, #7
   24f04:	f8d4 b000 	ldr.w	fp, [r4]
   24f08:	f023 0307 	bic.w	r3, r3, #7
   24f0c:	f103 0208 	add.w	r2, r3, #8
   24f10:	f8c8 2000 	str.w	r2, [r8]
   24f14:	f04f 32ff 	mov.w	r2, #4294967295
   24f18:	e9d3 8900 	ldrd	r8, r9, [r3]
   24f1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   24f20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   24f24:	930b      	str	r3, [sp, #44]	; 0x2c
   24f26:	4b9d      	ldr	r3, [pc, #628]	; (2519c <_printf_float+0x2c8>)
   24f28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   24f2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   24f30:	f7e4 f880 	bl	9034 <__aeabi_dcmpun>
   24f34:	bb70      	cbnz	r0, 24f94 <_printf_float+0xc0>
   24f36:	f04f 32ff 	mov.w	r2, #4294967295
   24f3a:	4b98      	ldr	r3, [pc, #608]	; (2519c <_printf_float+0x2c8>)
   24f3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   24f40:	f7e4 f85a 	bl	8ff8 <__aeabi_dcmple>
   24f44:	bb30      	cbnz	r0, 24f94 <_printf_float+0xc0>
   24f46:	2200      	movs	r2, #0
   24f48:	2300      	movs	r3, #0
   24f4a:	4640      	mov	r0, r8
   24f4c:	4649      	mov	r1, r9
   24f4e:	f7e4 f849 	bl	8fe4 <__aeabi_dcmplt>
   24f52:	b110      	cbz	r0, 24f5a <_printf_float+0x86>
   24f54:	232d      	movs	r3, #45	; 0x2d
   24f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24f5a:	4a91      	ldr	r2, [pc, #580]	; (251a0 <_printf_float+0x2cc>)
   24f5c:	4b91      	ldr	r3, [pc, #580]	; (251a4 <_printf_float+0x2d0>)
   24f5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   24f62:	bf94      	ite	ls
   24f64:	4690      	movls	r8, r2
   24f66:	4698      	movhi	r8, r3
   24f68:	2303      	movs	r3, #3
   24f6a:	f04f 0900 	mov.w	r9, #0
   24f6e:	6123      	str	r3, [r4, #16]
   24f70:	f02b 0304 	bic.w	r3, fp, #4
   24f74:	6023      	str	r3, [r4, #0]
   24f76:	4633      	mov	r3, r6
   24f78:	aa0f      	add	r2, sp, #60	; 0x3c
   24f7a:	4621      	mov	r1, r4
   24f7c:	4628      	mov	r0, r5
   24f7e:	9700      	str	r7, [sp, #0]
   24f80:	f007 f80c 	bl	2bf9c <_printf_common>
   24f84:	3001      	adds	r0, #1
   24f86:	f040 8099 	bne.w	250bc <_printf_float+0x1e8>
   24f8a:	f04f 30ff 	mov.w	r0, #4294967295
   24f8e:	b011      	add	sp, #68	; 0x44
   24f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f94:	4642      	mov	r2, r8
   24f96:	464b      	mov	r3, r9
   24f98:	4640      	mov	r0, r8
   24f9a:	4649      	mov	r1, r9
   24f9c:	f7e4 f84a 	bl	9034 <__aeabi_dcmpun>
   24fa0:	b140      	cbz	r0, 24fb4 <_printf_float+0xe0>
   24fa2:	464b      	mov	r3, r9
   24fa4:	4a80      	ldr	r2, [pc, #512]	; (251a8 <_printf_float+0x2d4>)
   24fa6:	2b00      	cmp	r3, #0
   24fa8:	bfbc      	itt	lt
   24faa:	232d      	movlt	r3, #45	; 0x2d
   24fac:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   24fb0:	4b7e      	ldr	r3, [pc, #504]	; (251ac <_printf_float+0x2d8>)
   24fb2:	e7d4      	b.n	24f5e <_printf_float+0x8a>
   24fb4:	6863      	ldr	r3, [r4, #4]
   24fb6:	1c5a      	adds	r2, r3, #1
   24fb8:	d129      	bne.n	2500e <_printf_float+0x13a>
   24fba:	2306      	movs	r3, #6
   24fbc:	6063      	str	r3, [r4, #4]
   24fbe:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   24fc2:	2200      	movs	r2, #0
   24fc4:	4628      	mov	r0, r5
   24fc6:	6023      	str	r3, [r4, #0]
   24fc8:	9206      	str	r2, [sp, #24]
   24fca:	aa0e      	add	r2, sp, #56	; 0x38
   24fcc:	e9cd a204 	strd	sl, r2, [sp, #16]
   24fd0:	aa0d      	add	r2, sp, #52	; 0x34
   24fd2:	9203      	str	r2, [sp, #12]
   24fd4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   24fd8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   24fdc:	6863      	ldr	r3, [r4, #4]
   24fde:	4642      	mov	r2, r8
   24fe0:	9300      	str	r3, [sp, #0]
   24fe2:	464b      	mov	r3, r9
   24fe4:	f006 ff3a 	bl	2be5c <__cvt>
   24fe8:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   24fec:	4680      	mov	r8, r0
   24fee:	990d      	ldr	r1, [sp, #52]	; 0x34
   24ff0:	d115      	bne.n	2501e <_printf_float+0x14a>
   24ff2:	1ccb      	adds	r3, r1, #3
   24ff4:	db3b      	blt.n	2506e <_printf_float+0x19a>
   24ff6:	6863      	ldr	r3, [r4, #4]
   24ff8:	4299      	cmp	r1, r3
   24ffa:	dc38      	bgt.n	2506e <_printf_float+0x19a>
   24ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24ffe:	4299      	cmp	r1, r3
   25000:	db55      	blt.n	250ae <_printf_float+0x1da>
   25002:	6823      	ldr	r3, [r4, #0]
   25004:	6121      	str	r1, [r4, #16]
   25006:	07d8      	lsls	r0, r3, #31
   25008:	d545      	bpl.n	25096 <_printf_float+0x1c2>
   2500a:	1c4b      	adds	r3, r1, #1
   2500c:	e042      	b.n	25094 <_printf_float+0x1c0>
   2500e:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   25012:	2a47      	cmp	r2, #71	; 0x47
   25014:	d1d3      	bne.n	24fbe <_printf_float+0xea>
   25016:	2b00      	cmp	r3, #0
   25018:	d1d1      	bne.n	24fbe <_printf_float+0xea>
   2501a:	2301      	movs	r3, #1
   2501c:	e7ce      	b.n	24fbc <_printf_float+0xe8>
   2501e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   25022:	d107      	bne.n	25034 <_printf_float+0x160>
   25024:	1cc8      	adds	r0, r1, #3
   25026:	db25      	blt.n	25074 <_printf_float+0x1a0>
   25028:	6863      	ldr	r3, [r4, #4]
   2502a:	428b      	cmp	r3, r1
   2502c:	db22      	blt.n	25074 <_printf_float+0x1a0>
   2502e:	f04f 0a67 	mov.w	sl, #103	; 0x67
   25032:	e7e3      	b.n	24ffc <_printf_float+0x128>
   25034:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   25038:	d81f      	bhi.n	2507a <_printf_float+0x1a6>
   2503a:	3901      	subs	r1, #1
   2503c:	4652      	mov	r2, sl
   2503e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   25042:	910d      	str	r1, [sp, #52]	; 0x34
   25044:	f006 ff71 	bl	2bf2a <__exponent>
   25048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2504a:	4681      	mov	r9, r0
   2504c:	1813      	adds	r3, r2, r0
   2504e:	2a01      	cmp	r2, #1
   25050:	6123      	str	r3, [r4, #16]
   25052:	dc02      	bgt.n	2505a <_printf_float+0x186>
   25054:	6822      	ldr	r2, [r4, #0]
   25056:	07d2      	lsls	r2, r2, #31
   25058:	d501      	bpl.n	2505e <_printf_float+0x18a>
   2505a:	3301      	adds	r3, #1
   2505c:	6123      	str	r3, [r4, #16]
   2505e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   25062:	2b00      	cmp	r3, #0
   25064:	d087      	beq.n	24f76 <_printf_float+0xa2>
   25066:	232d      	movs	r3, #45	; 0x2d
   25068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2506c:	e783      	b.n	24f76 <_printf_float+0xa2>
   2506e:	f04f 0a65 	mov.w	sl, #101	; 0x65
   25072:	e7e2      	b.n	2503a <_printf_float+0x166>
   25074:	f04f 0a45 	mov.w	sl, #69	; 0x45
   25078:	e7df      	b.n	2503a <_printf_float+0x166>
   2507a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2507e:	d1bd      	bne.n	24ffc <_printf_float+0x128>
   25080:	2900      	cmp	r1, #0
   25082:	6863      	ldr	r3, [r4, #4]
   25084:	dd0b      	ble.n	2509e <_printf_float+0x1ca>
   25086:	6121      	str	r1, [r4, #16]
   25088:	b913      	cbnz	r3, 25090 <_printf_float+0x1bc>
   2508a:	6822      	ldr	r2, [r4, #0]
   2508c:	07d0      	lsls	r0, r2, #31
   2508e:	d502      	bpl.n	25096 <_printf_float+0x1c2>
   25090:	3301      	adds	r3, #1
   25092:	440b      	add	r3, r1
   25094:	6123      	str	r3, [r4, #16]
   25096:	f04f 0900 	mov.w	r9, #0
   2509a:	65a1      	str	r1, [r4, #88]	; 0x58
   2509c:	e7df      	b.n	2505e <_printf_float+0x18a>
   2509e:	b913      	cbnz	r3, 250a6 <_printf_float+0x1d2>
   250a0:	6822      	ldr	r2, [r4, #0]
   250a2:	07d2      	lsls	r2, r2, #31
   250a4:	d501      	bpl.n	250aa <_printf_float+0x1d6>
   250a6:	3302      	adds	r3, #2
   250a8:	e7f4      	b.n	25094 <_printf_float+0x1c0>
   250aa:	2301      	movs	r3, #1
   250ac:	e7f2      	b.n	25094 <_printf_float+0x1c0>
   250ae:	2900      	cmp	r1, #0
   250b0:	bfd4      	ite	le
   250b2:	f1c1 0202 	rsble	r2, r1, #2
   250b6:	2201      	movgt	r2, #1
   250b8:	4413      	add	r3, r2
   250ba:	e7eb      	b.n	25094 <_printf_float+0x1c0>
   250bc:	6823      	ldr	r3, [r4, #0]
   250be:	055a      	lsls	r2, r3, #21
   250c0:	d407      	bmi.n	250d2 <_printf_float+0x1fe>
   250c2:	6923      	ldr	r3, [r4, #16]
   250c4:	4642      	mov	r2, r8
   250c6:	4631      	mov	r1, r6
   250c8:	4628      	mov	r0, r5
   250ca:	47b8      	blx	r7
   250cc:	3001      	adds	r0, #1
   250ce:	d12b      	bne.n	25128 <_printf_float+0x254>
   250d0:	e75b      	b.n	24f8a <_printf_float+0xb6>
   250d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   250d6:	f240 80dc 	bls.w	25292 <_printf_float+0x3be>
   250da:	2200      	movs	r2, #0
   250dc:	2300      	movs	r3, #0
   250de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   250e2:	f7e3 ff75 	bl	8fd0 <__aeabi_dcmpeq>
   250e6:	2800      	cmp	r0, #0
   250e8:	d033      	beq.n	25152 <_printf_float+0x27e>
   250ea:	2301      	movs	r3, #1
   250ec:	4a30      	ldr	r2, [pc, #192]	; (251b0 <_printf_float+0x2dc>)
   250ee:	4631      	mov	r1, r6
   250f0:	4628      	mov	r0, r5
   250f2:	47b8      	blx	r7
   250f4:	3001      	adds	r0, #1
   250f6:	f43f af48 	beq.w	24f8a <_printf_float+0xb6>
   250fa:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   250fe:	4543      	cmp	r3, r8
   25100:	db02      	blt.n	25108 <_printf_float+0x234>
   25102:	6823      	ldr	r3, [r4, #0]
   25104:	07d8      	lsls	r0, r3, #31
   25106:	d50f      	bpl.n	25128 <_printf_float+0x254>
   25108:	4631      	mov	r1, r6
   2510a:	4628      	mov	r0, r5
   2510c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   25110:	47b8      	blx	r7
   25112:	3001      	adds	r0, #1
   25114:	f43f af39 	beq.w	24f8a <_printf_float+0xb6>
   25118:	f04f 0900 	mov.w	r9, #0
   2511c:	f108 38ff 	add.w	r8, r8, #4294967295
   25120:	f104 0a1a 	add.w	sl, r4, #26
   25124:	45c8      	cmp	r8, r9
   25126:	dc09      	bgt.n	2513c <_printf_float+0x268>
   25128:	6823      	ldr	r3, [r4, #0]
   2512a:	079b      	lsls	r3, r3, #30
   2512c:	f100 8102 	bmi.w	25334 <_printf_float+0x460>
   25130:	68e0      	ldr	r0, [r4, #12]
   25132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25134:	4298      	cmp	r0, r3
   25136:	bfb8      	it	lt
   25138:	4618      	movlt	r0, r3
   2513a:	e728      	b.n	24f8e <_printf_float+0xba>
   2513c:	2301      	movs	r3, #1
   2513e:	4652      	mov	r2, sl
   25140:	4631      	mov	r1, r6
   25142:	4628      	mov	r0, r5
   25144:	47b8      	blx	r7
   25146:	3001      	adds	r0, #1
   25148:	f43f af1f 	beq.w	24f8a <_printf_float+0xb6>
   2514c:	f109 0901 	add.w	r9, r9, #1
   25150:	e7e8      	b.n	25124 <_printf_float+0x250>
   25152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25154:	2b00      	cmp	r3, #0
   25156:	dc38      	bgt.n	251ca <_printf_float+0x2f6>
   25158:	2301      	movs	r3, #1
   2515a:	4a15      	ldr	r2, [pc, #84]	; (251b0 <_printf_float+0x2dc>)
   2515c:	4631      	mov	r1, r6
   2515e:	4628      	mov	r0, r5
   25160:	47b8      	blx	r7
   25162:	3001      	adds	r0, #1
   25164:	f43f af11 	beq.w	24f8a <_printf_float+0xb6>
   25168:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   2516c:	ea59 0303 	orrs.w	r3, r9, r3
   25170:	d102      	bne.n	25178 <_printf_float+0x2a4>
   25172:	6823      	ldr	r3, [r4, #0]
   25174:	07d9      	lsls	r1, r3, #31
   25176:	d5d7      	bpl.n	25128 <_printf_float+0x254>
   25178:	4631      	mov	r1, r6
   2517a:	4628      	mov	r0, r5
   2517c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   25180:	47b8      	blx	r7
   25182:	3001      	adds	r0, #1
   25184:	f43f af01 	beq.w	24f8a <_printf_float+0xb6>
   25188:	f04f 0a00 	mov.w	sl, #0
   2518c:	f104 0b1a 	add.w	fp, r4, #26
   25190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25192:	425b      	negs	r3, r3
   25194:	4553      	cmp	r3, sl
   25196:	dc0d      	bgt.n	251b4 <_printf_float+0x2e0>
   25198:	464b      	mov	r3, r9
   2519a:	e793      	b.n	250c4 <_printf_float+0x1f0>
   2519c:	7fefffff 	.word	0x7fefffff
   251a0:	00033b74 	.word	0x00033b74
   251a4:	0002f0e6 	.word	0x0002f0e6
   251a8:	00033b78 	.word	0x00033b78
   251ac:	00033b7c 	.word	0x00033b7c
   251b0:	00033a12 	.word	0x00033a12
   251b4:	2301      	movs	r3, #1
   251b6:	465a      	mov	r2, fp
   251b8:	4631      	mov	r1, r6
   251ba:	4628      	mov	r0, r5
   251bc:	47b8      	blx	r7
   251be:	3001      	adds	r0, #1
   251c0:	f43f aee3 	beq.w	24f8a <_printf_float+0xb6>
   251c4:	f10a 0a01 	add.w	sl, sl, #1
   251c8:	e7e2      	b.n	25190 <_printf_float+0x2bc>
   251ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
   251cc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   251d0:	4553      	cmp	r3, sl
   251d2:	bfa8      	it	ge
   251d4:	4653      	movge	r3, sl
   251d6:	2b00      	cmp	r3, #0
   251d8:	4699      	mov	r9, r3
   251da:	dc36      	bgt.n	2524a <_printf_float+0x376>
   251dc:	f04f 0b00 	mov.w	fp, #0
   251e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   251e4:	f104 021a 	add.w	r2, r4, #26
   251e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   251ea:	930a      	str	r3, [sp, #40]	; 0x28
   251ec:	eba3 0309 	sub.w	r3, r3, r9
   251f0:	455b      	cmp	r3, fp
   251f2:	dc31      	bgt.n	25258 <_printf_float+0x384>
   251f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   251f6:	459a      	cmp	sl, r3
   251f8:	dc3a      	bgt.n	25270 <_printf_float+0x39c>
   251fa:	6823      	ldr	r3, [r4, #0]
   251fc:	07da      	lsls	r2, r3, #31
   251fe:	d437      	bmi.n	25270 <_printf_float+0x39c>
   25200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25202:	ebaa 0903 	sub.w	r9, sl, r3
   25206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25208:	ebaa 0303 	sub.w	r3, sl, r3
   2520c:	4599      	cmp	r9, r3
   2520e:	bfa8      	it	ge
   25210:	4699      	movge	r9, r3
   25212:	f1b9 0f00 	cmp.w	r9, #0
   25216:	dc33      	bgt.n	25280 <_printf_float+0x3ac>
   25218:	f04f 0800 	mov.w	r8, #0
   2521c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   25220:	f104 0b1a 	add.w	fp, r4, #26
   25224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25226:	ebaa 0303 	sub.w	r3, sl, r3
   2522a:	eba3 0309 	sub.w	r3, r3, r9
   2522e:	4543      	cmp	r3, r8
   25230:	f77f af7a 	ble.w	25128 <_printf_float+0x254>
   25234:	2301      	movs	r3, #1
   25236:	465a      	mov	r2, fp
   25238:	4631      	mov	r1, r6
   2523a:	4628      	mov	r0, r5
   2523c:	47b8      	blx	r7
   2523e:	3001      	adds	r0, #1
   25240:	f43f aea3 	beq.w	24f8a <_printf_float+0xb6>
   25244:	f108 0801 	add.w	r8, r8, #1
   25248:	e7ec      	b.n	25224 <_printf_float+0x350>
   2524a:	4642      	mov	r2, r8
   2524c:	4631      	mov	r1, r6
   2524e:	4628      	mov	r0, r5
   25250:	47b8      	blx	r7
   25252:	3001      	adds	r0, #1
   25254:	d1c2      	bne.n	251dc <_printf_float+0x308>
   25256:	e698      	b.n	24f8a <_printf_float+0xb6>
   25258:	2301      	movs	r3, #1
   2525a:	4631      	mov	r1, r6
   2525c:	4628      	mov	r0, r5
   2525e:	920a      	str	r2, [sp, #40]	; 0x28
   25260:	47b8      	blx	r7
   25262:	3001      	adds	r0, #1
   25264:	f43f ae91 	beq.w	24f8a <_printf_float+0xb6>
   25268:	f10b 0b01 	add.w	fp, fp, #1
   2526c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2526e:	e7bb      	b.n	251e8 <_printf_float+0x314>
   25270:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   25274:	4631      	mov	r1, r6
   25276:	4628      	mov	r0, r5
   25278:	47b8      	blx	r7
   2527a:	3001      	adds	r0, #1
   2527c:	d1c0      	bne.n	25200 <_printf_float+0x32c>
   2527e:	e684      	b.n	24f8a <_printf_float+0xb6>
   25280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25282:	464b      	mov	r3, r9
   25284:	4631      	mov	r1, r6
   25286:	4628      	mov	r0, r5
   25288:	4442      	add	r2, r8
   2528a:	47b8      	blx	r7
   2528c:	3001      	adds	r0, #1
   2528e:	d1c3      	bne.n	25218 <_printf_float+0x344>
   25290:	e67b      	b.n	24f8a <_printf_float+0xb6>
   25292:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   25296:	f1ba 0f01 	cmp.w	sl, #1
   2529a:	dc01      	bgt.n	252a0 <_printf_float+0x3cc>
   2529c:	07db      	lsls	r3, r3, #31
   2529e:	d536      	bpl.n	2530e <_printf_float+0x43a>
   252a0:	2301      	movs	r3, #1
   252a2:	4642      	mov	r2, r8
   252a4:	4631      	mov	r1, r6
   252a6:	4628      	mov	r0, r5
   252a8:	47b8      	blx	r7
   252aa:	3001      	adds	r0, #1
   252ac:	f43f ae6d 	beq.w	24f8a <_printf_float+0xb6>
   252b0:	4631      	mov	r1, r6
   252b2:	4628      	mov	r0, r5
   252b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   252b8:	47b8      	blx	r7
   252ba:	3001      	adds	r0, #1
   252bc:	f43f ae65 	beq.w	24f8a <_printf_float+0xb6>
   252c0:	2200      	movs	r2, #0
   252c2:	2300      	movs	r3, #0
   252c4:	f10a 3aff 	add.w	sl, sl, #4294967295
   252c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   252cc:	f7e3 fe80 	bl	8fd0 <__aeabi_dcmpeq>
   252d0:	b9c0      	cbnz	r0, 25304 <_printf_float+0x430>
   252d2:	4653      	mov	r3, sl
   252d4:	f108 0201 	add.w	r2, r8, #1
   252d8:	4631      	mov	r1, r6
   252da:	4628      	mov	r0, r5
   252dc:	47b8      	blx	r7
   252de:	3001      	adds	r0, #1
   252e0:	d10c      	bne.n	252fc <_printf_float+0x428>
   252e2:	e652      	b.n	24f8a <_printf_float+0xb6>
   252e4:	2301      	movs	r3, #1
   252e6:	465a      	mov	r2, fp
   252e8:	4631      	mov	r1, r6
   252ea:	4628      	mov	r0, r5
   252ec:	47b8      	blx	r7
   252ee:	3001      	adds	r0, #1
   252f0:	f43f ae4b 	beq.w	24f8a <_printf_float+0xb6>
   252f4:	f108 0801 	add.w	r8, r8, #1
   252f8:	45d0      	cmp	r8, sl
   252fa:	dbf3      	blt.n	252e4 <_printf_float+0x410>
   252fc:	464b      	mov	r3, r9
   252fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
   25302:	e6e0      	b.n	250c6 <_printf_float+0x1f2>
   25304:	f04f 0800 	mov.w	r8, #0
   25308:	f104 0b1a 	add.w	fp, r4, #26
   2530c:	e7f4      	b.n	252f8 <_printf_float+0x424>
   2530e:	2301      	movs	r3, #1
   25310:	4642      	mov	r2, r8
   25312:	e7e1      	b.n	252d8 <_printf_float+0x404>
   25314:	2301      	movs	r3, #1
   25316:	464a      	mov	r2, r9
   25318:	4631      	mov	r1, r6
   2531a:	4628      	mov	r0, r5
   2531c:	47b8      	blx	r7
   2531e:	3001      	adds	r0, #1
   25320:	f43f ae33 	beq.w	24f8a <_printf_float+0xb6>
   25324:	f108 0801 	add.w	r8, r8, #1
   25328:	68e3      	ldr	r3, [r4, #12]
   2532a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2532c:	1a5b      	subs	r3, r3, r1
   2532e:	4543      	cmp	r3, r8
   25330:	dcf0      	bgt.n	25314 <_printf_float+0x440>
   25332:	e6fd      	b.n	25130 <_printf_float+0x25c>
   25334:	f04f 0800 	mov.w	r8, #0
   25338:	f104 0919 	add.w	r9, r4, #25
   2533c:	e7f4      	b.n	25328 <_printf_float+0x454>
   2533e:	bf00      	nop

00025340 <_printf_i>:
   25340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   25344:	7e0f      	ldrb	r7, [r1, #24]
   25346:	4691      	mov	r9, r2
   25348:	4680      	mov	r8, r0
   2534a:	460c      	mov	r4, r1
   2534c:	2f78      	cmp	r7, #120	; 0x78
   2534e:	469a      	mov	sl, r3
   25350:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   25352:	f101 0243 	add.w	r2, r1, #67	; 0x43
   25356:	d807      	bhi.n	25368 <_printf_i+0x28>
   25358:	2f62      	cmp	r7, #98	; 0x62
   2535a:	d80a      	bhi.n	25372 <_printf_i+0x32>
   2535c:	2f00      	cmp	r7, #0
   2535e:	f000 80e0 	beq.w	25522 <_printf_i+0x1e2>
   25362:	2f58      	cmp	r7, #88	; 0x58
   25364:	f000 80bb 	beq.w	254de <_printf_i+0x19e>
   25368:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2536c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   25370:	e03a      	b.n	253e8 <_printf_i+0xa8>
   25372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   25376:	2b15      	cmp	r3, #21
   25378:	d8f6      	bhi.n	25368 <_printf_i+0x28>
   2537a:	a101      	add	r1, pc, #4	; (adr r1, 25380 <_printf_i+0x40>)
   2537c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   25380:	000253d9 	.word	0x000253d9
   25384:	000253ed 	.word	0x000253ed
   25388:	00025369 	.word	0x00025369
   2538c:	00025369 	.word	0x00025369
   25390:	00025369 	.word	0x00025369
   25394:	00025369 	.word	0x00025369
   25398:	000253ed 	.word	0x000253ed
   2539c:	00025369 	.word	0x00025369
   253a0:	00025369 	.word	0x00025369
   253a4:	00025369 	.word	0x00025369
   253a8:	00025369 	.word	0x00025369
   253ac:	00025509 	.word	0x00025509
   253b0:	0002547d 	.word	0x0002547d
   253b4:	000254bf 	.word	0x000254bf
   253b8:	00025369 	.word	0x00025369
   253bc:	00025369 	.word	0x00025369
   253c0:	0002552b 	.word	0x0002552b
   253c4:	00025369 	.word	0x00025369
   253c8:	0002547d 	.word	0x0002547d
   253cc:	00025369 	.word	0x00025369
   253d0:	00025369 	.word	0x00025369
   253d4:	000254c7 	.word	0x000254c7
   253d8:	682b      	ldr	r3, [r5, #0]
   253da:	f104 0642 	add.w	r6, r4, #66	; 0x42
   253de:	1d1a      	adds	r2, r3, #4
   253e0:	681b      	ldr	r3, [r3, #0]
   253e2:	602a      	str	r2, [r5, #0]
   253e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   253e8:	2301      	movs	r3, #1
   253ea:	e0ab      	b.n	25544 <_printf_i+0x204>
   253ec:	6823      	ldr	r3, [r4, #0]
   253ee:	6829      	ldr	r1, [r5, #0]
   253f0:	061f      	lsls	r7, r3, #24
   253f2:	f101 0004 	add.w	r0, r1, #4
   253f6:	6028      	str	r0, [r5, #0]
   253f8:	d501      	bpl.n	253fe <_printf_i+0xbe>
   253fa:	680d      	ldr	r5, [r1, #0]
   253fc:	e003      	b.n	25406 <_printf_i+0xc6>
   253fe:	065e      	lsls	r6, r3, #25
   25400:	d5fb      	bpl.n	253fa <_printf_i+0xba>
   25402:	f9b1 5000 	ldrsh.w	r5, [r1]
   25406:	2d00      	cmp	r5, #0
   25408:	6861      	ldr	r1, [r4, #4]
   2540a:	da7a      	bge.n	25502 <_printf_i+0x1c2>
   2540c:	202d      	movs	r0, #45	; 0x2d
   2540e:	2900      	cmp	r1, #0
   25410:	60a1      	str	r1, [r4, #8]
   25412:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   25416:	da2d      	bge.n	25474 <_printf_i+0x134>
   25418:	426d      	negs	r5, r5
   2541a:	485e      	ldr	r0, [pc, #376]	; (25594 <_printf_i+0x254>)
   2541c:	230a      	movs	r3, #10
   2541e:	4616      	mov	r6, r2
   25420:	fbb5 f1f3 	udiv	r1, r5, r3
   25424:	fb03 5711 	mls	r7, r3, r1, r5
   25428:	5dc7      	ldrb	r7, [r0, r7]
   2542a:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2542e:	462f      	mov	r7, r5
   25430:	460d      	mov	r5, r1
   25432:	42bb      	cmp	r3, r7
   25434:	d9f4      	bls.n	25420 <_printf_i+0xe0>
   25436:	2b08      	cmp	r3, #8
   25438:	d10b      	bne.n	25452 <_printf_i+0x112>
   2543a:	6823      	ldr	r3, [r4, #0]
   2543c:	07df      	lsls	r7, r3, #31
   2543e:	d508      	bpl.n	25452 <_printf_i+0x112>
   25440:	6923      	ldr	r3, [r4, #16]
   25442:	6861      	ldr	r1, [r4, #4]
   25444:	4299      	cmp	r1, r3
   25446:	bfde      	ittt	le
   25448:	2330      	movle	r3, #48	; 0x30
   2544a:	f806 3c01 	strble.w	r3, [r6, #-1]
   2544e:	f106 36ff 	addle.w	r6, r6, #4294967295
   25452:	1b92      	subs	r2, r2, r6
   25454:	6122      	str	r2, [r4, #16]
   25456:	464b      	mov	r3, r9
   25458:	aa03      	add	r2, sp, #12
   2545a:	4621      	mov	r1, r4
   2545c:	4640      	mov	r0, r8
   2545e:	f8cd a000 	str.w	sl, [sp]
   25462:	f006 fd9b 	bl	2bf9c <_printf_common>
   25466:	3001      	adds	r0, #1
   25468:	d171      	bne.n	2554e <_printf_i+0x20e>
   2546a:	f04f 30ff 	mov.w	r0, #4294967295
   2546e:	b004      	add	sp, #16
   25470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25474:	f023 0304 	bic.w	r3, r3, #4
   25478:	6023      	str	r3, [r4, #0]
   2547a:	e7cd      	b.n	25418 <_printf_i+0xd8>
   2547c:	682b      	ldr	r3, [r5, #0]
   2547e:	6820      	ldr	r0, [r4, #0]
   25480:	1d19      	adds	r1, r3, #4
   25482:	6029      	str	r1, [r5, #0]
   25484:	0605      	lsls	r5, r0, #24
   25486:	d501      	bpl.n	2548c <_printf_i+0x14c>
   25488:	681d      	ldr	r5, [r3, #0]
   2548a:	e002      	b.n	25492 <_printf_i+0x152>
   2548c:	0641      	lsls	r1, r0, #25
   2548e:	d5fb      	bpl.n	25488 <_printf_i+0x148>
   25490:	881d      	ldrh	r5, [r3, #0]
   25492:	2f6f      	cmp	r7, #111	; 0x6f
   25494:	483f      	ldr	r0, [pc, #252]	; (25594 <_printf_i+0x254>)
   25496:	bf14      	ite	ne
   25498:	230a      	movne	r3, #10
   2549a:	2308      	moveq	r3, #8
   2549c:	2100      	movs	r1, #0
   2549e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   254a2:	6866      	ldr	r6, [r4, #4]
   254a4:	2e00      	cmp	r6, #0
   254a6:	60a6      	str	r6, [r4, #8]
   254a8:	dbb9      	blt.n	2541e <_printf_i+0xde>
   254aa:	6821      	ldr	r1, [r4, #0]
   254ac:	f021 0104 	bic.w	r1, r1, #4
   254b0:	6021      	str	r1, [r4, #0]
   254b2:	2d00      	cmp	r5, #0
   254b4:	d1b3      	bne.n	2541e <_printf_i+0xde>
   254b6:	2e00      	cmp	r6, #0
   254b8:	d1b1      	bne.n	2541e <_printf_i+0xde>
   254ba:	4616      	mov	r6, r2
   254bc:	e7bb      	b.n	25436 <_printf_i+0xf6>
   254be:	6823      	ldr	r3, [r4, #0]
   254c0:	f043 0320 	orr.w	r3, r3, #32
   254c4:	6023      	str	r3, [r4, #0]
   254c6:	2778      	movs	r7, #120	; 0x78
   254c8:	4833      	ldr	r0, [pc, #204]	; (25598 <_printf_i+0x258>)
   254ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   254ce:	6829      	ldr	r1, [r5, #0]
   254d0:	6823      	ldr	r3, [r4, #0]
   254d2:	1d0e      	adds	r6, r1, #4
   254d4:	602e      	str	r6, [r5, #0]
   254d6:	061e      	lsls	r6, r3, #24
   254d8:	d503      	bpl.n	254e2 <_printf_i+0x1a2>
   254da:	680d      	ldr	r5, [r1, #0]
   254dc:	e004      	b.n	254e8 <_printf_i+0x1a8>
   254de:	482d      	ldr	r0, [pc, #180]	; (25594 <_printf_i+0x254>)
   254e0:	e7f3      	b.n	254ca <_printf_i+0x18a>
   254e2:	065d      	lsls	r5, r3, #25
   254e4:	d5f9      	bpl.n	254da <_printf_i+0x19a>
   254e6:	880d      	ldrh	r5, [r1, #0]
   254e8:	07d9      	lsls	r1, r3, #31
   254ea:	bf44      	itt	mi
   254ec:	f043 0320 	orrmi.w	r3, r3, #32
   254f0:	6023      	strmi	r3, [r4, #0]
   254f2:	b10d      	cbz	r5, 254f8 <_printf_i+0x1b8>
   254f4:	2310      	movs	r3, #16
   254f6:	e7d1      	b.n	2549c <_printf_i+0x15c>
   254f8:	6823      	ldr	r3, [r4, #0]
   254fa:	f023 0320 	bic.w	r3, r3, #32
   254fe:	6023      	str	r3, [r4, #0]
   25500:	e7f8      	b.n	254f4 <_printf_i+0x1b4>
   25502:	4824      	ldr	r0, [pc, #144]	; (25594 <_printf_i+0x254>)
   25504:	230a      	movs	r3, #10
   25506:	e7cc      	b.n	254a2 <_printf_i+0x162>
   25508:	682b      	ldr	r3, [r5, #0]
   2550a:	6826      	ldr	r6, [r4, #0]
   2550c:	1d18      	adds	r0, r3, #4
   2550e:	6961      	ldr	r1, [r4, #20]
   25510:	6028      	str	r0, [r5, #0]
   25512:	0635      	lsls	r5, r6, #24
   25514:	681b      	ldr	r3, [r3, #0]
   25516:	d501      	bpl.n	2551c <_printf_i+0x1dc>
   25518:	6019      	str	r1, [r3, #0]
   2551a:	e002      	b.n	25522 <_printf_i+0x1e2>
   2551c:	0670      	lsls	r0, r6, #25
   2551e:	d5fb      	bpl.n	25518 <_printf_i+0x1d8>
   25520:	8019      	strh	r1, [r3, #0]
   25522:	2300      	movs	r3, #0
   25524:	4616      	mov	r6, r2
   25526:	6123      	str	r3, [r4, #16]
   25528:	e795      	b.n	25456 <_printf_i+0x116>
   2552a:	682b      	ldr	r3, [r5, #0]
   2552c:	2100      	movs	r1, #0
   2552e:	1d1a      	adds	r2, r3, #4
   25530:	602a      	str	r2, [r5, #0]
   25532:	681e      	ldr	r6, [r3, #0]
   25534:	6862      	ldr	r2, [r4, #4]
   25536:	4630      	mov	r0, r6
   25538:	f006 fc22 	bl	2bd80 <memchr>
   2553c:	b108      	cbz	r0, 25542 <_printf_i+0x202>
   2553e:	1b80      	subs	r0, r0, r6
   25540:	6060      	str	r0, [r4, #4]
   25542:	6863      	ldr	r3, [r4, #4]
   25544:	6123      	str	r3, [r4, #16]
   25546:	2300      	movs	r3, #0
   25548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2554c:	e783      	b.n	25456 <_printf_i+0x116>
   2554e:	6923      	ldr	r3, [r4, #16]
   25550:	4632      	mov	r2, r6
   25552:	4649      	mov	r1, r9
   25554:	4640      	mov	r0, r8
   25556:	47d0      	blx	sl
   25558:	3001      	adds	r0, #1
   2555a:	d086      	beq.n	2546a <_printf_i+0x12a>
   2555c:	6823      	ldr	r3, [r4, #0]
   2555e:	079b      	lsls	r3, r3, #30
   25560:	d414      	bmi.n	2558c <_printf_i+0x24c>
   25562:	68e0      	ldr	r0, [r4, #12]
   25564:	9b03      	ldr	r3, [sp, #12]
   25566:	4298      	cmp	r0, r3
   25568:	bfb8      	it	lt
   2556a:	4618      	movlt	r0, r3
   2556c:	e77f      	b.n	2546e <_printf_i+0x12e>
   2556e:	2301      	movs	r3, #1
   25570:	4632      	mov	r2, r6
   25572:	4649      	mov	r1, r9
   25574:	4640      	mov	r0, r8
   25576:	47d0      	blx	sl
   25578:	3001      	adds	r0, #1
   2557a:	f43f af76 	beq.w	2546a <_printf_i+0x12a>
   2557e:	3501      	adds	r5, #1
   25580:	68e3      	ldr	r3, [r4, #12]
   25582:	9903      	ldr	r1, [sp, #12]
   25584:	1a5b      	subs	r3, r3, r1
   25586:	42ab      	cmp	r3, r5
   25588:	dcf1      	bgt.n	2556e <_printf_i+0x22e>
   2558a:	e7ea      	b.n	25562 <_printf_i+0x222>
   2558c:	2500      	movs	r5, #0
   2558e:	f104 0619 	add.w	r6, r4, #25
   25592:	e7f5      	b.n	25580 <_printf_i+0x240>
   25594:	00033b80 	.word	0x00033b80
   25598:	00033b91 	.word	0x00033b91

0002559c <iprintf>:
   2559c:	b40f      	push	{r0, r1, r2, r3}
   2559e:	4b0a      	ldr	r3, [pc, #40]	; (255c8 <iprintf+0x2c>)
   255a0:	b513      	push	{r0, r1, r4, lr}
   255a2:	681c      	ldr	r4, [r3, #0]
   255a4:	b124      	cbz	r4, 255b0 <iprintf+0x14>
   255a6:	69a3      	ldr	r3, [r4, #24]
   255a8:	b913      	cbnz	r3, 255b0 <iprintf+0x14>
   255aa:	4620      	mov	r0, r4
   255ac:	f000 f8fa 	bl	257a4 <__sinit>
   255b0:	ab05      	add	r3, sp, #20
   255b2:	9a04      	ldr	r2, [sp, #16]
   255b4:	68a1      	ldr	r1, [r4, #8]
   255b6:	4620      	mov	r0, r4
   255b8:	9301      	str	r3, [sp, #4]
   255ba:	f000 fcb1 	bl	25f20 <_vfiprintf_r>
   255be:	b002      	add	sp, #8
   255c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   255c4:	b004      	add	sp, #16
   255c6:	4770      	bx	lr
   255c8:	20008754 	.word	0x20008754

000255cc <_sbrk_r>:
   255cc:	b538      	push	{r3, r4, r5, lr}
   255ce:	2300      	movs	r3, #0
   255d0:	4d05      	ldr	r5, [pc, #20]	; (255e8 <_sbrk_r+0x1c>)
   255d2:	4604      	mov	r4, r0
   255d4:	4608      	mov	r0, r1
   255d6:	602b      	str	r3, [r5, #0]
   255d8:	f7ec fa1a 	bl	11a10 <_sbrk>
   255dc:	1c43      	adds	r3, r0, #1
   255de:	d102      	bne.n	255e6 <_sbrk_r+0x1a>
   255e0:	682b      	ldr	r3, [r5, #0]
   255e2:	b103      	cbz	r3, 255e6 <_sbrk_r+0x1a>
   255e4:	6023      	str	r3, [r4, #0]
   255e6:	bd38      	pop	{r3, r4, r5, pc}
   255e8:	20021a84 	.word	0x20021a84

000255ec <_strtoul_l.constprop.0>:
   255ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   255f0:	4686      	mov	lr, r0
   255f2:	460d      	mov	r5, r1
   255f4:	4e35      	ldr	r6, [pc, #212]	; (256cc <_strtoul_l.constprop.0+0xe0>)
   255f6:	4628      	mov	r0, r5
   255f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   255fc:	5d37      	ldrb	r7, [r6, r4]
   255fe:	f017 0708 	ands.w	r7, r7, #8
   25602:	d1f8      	bne.n	255f6 <_strtoul_l.constprop.0+0xa>
   25604:	2c2d      	cmp	r4, #45	; 0x2d
   25606:	d126      	bne.n	25656 <_strtoul_l.constprop.0+0x6a>
   25608:	782c      	ldrb	r4, [r5, #0]
   2560a:	2701      	movs	r7, #1
   2560c:	1c85      	adds	r5, r0, #2
   2560e:	bb3b      	cbnz	r3, 25660 <_strtoul_l.constprop.0+0x74>
   25610:	2c30      	cmp	r4, #48	; 0x30
   25612:	d032      	beq.n	2567a <_strtoul_l.constprop.0+0x8e>
   25614:	230a      	movs	r3, #10
   25616:	f04f 38ff 	mov.w	r8, #4294967295
   2561a:	2600      	movs	r6, #0
   2561c:	fbb8 f8f3 	udiv	r8, r8, r3
   25620:	fb03 f908 	mul.w	r9, r3, r8
   25624:	4630      	mov	r0, r6
   25626:	ea6f 0909 	mvn.w	r9, r9
   2562a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2562e:	f1bc 0f09 	cmp.w	ip, #9
   25632:	d829      	bhi.n	25688 <_strtoul_l.constprop.0+0x9c>
   25634:	4664      	mov	r4, ip
   25636:	42a3      	cmp	r3, r4
   25638:	dd37      	ble.n	256aa <_strtoul_l.constprop.0+0xbe>
   2563a:	f1b6 3fff 	cmp.w	r6, #4294967295
   2563e:	d007      	beq.n	25650 <_strtoul_l.constprop.0+0x64>
   25640:	4580      	cmp	r8, r0
   25642:	d32f      	bcc.n	256a4 <_strtoul_l.constprop.0+0xb8>
   25644:	d101      	bne.n	2564a <_strtoul_l.constprop.0+0x5e>
   25646:	45a1      	cmp	r9, r4
   25648:	db2c      	blt.n	256a4 <_strtoul_l.constprop.0+0xb8>
   2564a:	fb00 4003 	mla	r0, r0, r3, r4
   2564e:	2601      	movs	r6, #1
   25650:	f815 4b01 	ldrb.w	r4, [r5], #1
   25654:	e7e9      	b.n	2562a <_strtoul_l.constprop.0+0x3e>
   25656:	2c2b      	cmp	r4, #43	; 0x2b
   25658:	bf04      	itt	eq
   2565a:	782c      	ldrbeq	r4, [r5, #0]
   2565c:	1c85      	addeq	r5, r0, #2
   2565e:	e7d6      	b.n	2560e <_strtoul_l.constprop.0+0x22>
   25660:	2b10      	cmp	r3, #16
   25662:	d1d8      	bne.n	25616 <_strtoul_l.constprop.0+0x2a>
   25664:	2c30      	cmp	r4, #48	; 0x30
   25666:	d1d6      	bne.n	25616 <_strtoul_l.constprop.0+0x2a>
   25668:	7828      	ldrb	r0, [r5, #0]
   2566a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2566e:	2858      	cmp	r0, #88	; 0x58
   25670:	d1d1      	bne.n	25616 <_strtoul_l.constprop.0+0x2a>
   25672:	786c      	ldrb	r4, [r5, #1]
   25674:	2310      	movs	r3, #16
   25676:	3502      	adds	r5, #2
   25678:	e7cd      	b.n	25616 <_strtoul_l.constprop.0+0x2a>
   2567a:	782b      	ldrb	r3, [r5, #0]
   2567c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25680:	2b58      	cmp	r3, #88	; 0x58
   25682:	d0f6      	beq.n	25672 <_strtoul_l.constprop.0+0x86>
   25684:	2308      	movs	r3, #8
   25686:	e7c6      	b.n	25616 <_strtoul_l.constprop.0+0x2a>
   25688:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2568c:	f1bc 0f19 	cmp.w	ip, #25
   25690:	d801      	bhi.n	25696 <_strtoul_l.constprop.0+0xaa>
   25692:	3c37      	subs	r4, #55	; 0x37
   25694:	e7cf      	b.n	25636 <_strtoul_l.constprop.0+0x4a>
   25696:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2569a:	f1bc 0f19 	cmp.w	ip, #25
   2569e:	d804      	bhi.n	256aa <_strtoul_l.constprop.0+0xbe>
   256a0:	3c57      	subs	r4, #87	; 0x57
   256a2:	e7c8      	b.n	25636 <_strtoul_l.constprop.0+0x4a>
   256a4:	f04f 36ff 	mov.w	r6, #4294967295
   256a8:	e7d2      	b.n	25650 <_strtoul_l.constprop.0+0x64>
   256aa:	1c73      	adds	r3, r6, #1
   256ac:	d106      	bne.n	256bc <_strtoul_l.constprop.0+0xd0>
   256ae:	2322      	movs	r3, #34	; 0x22
   256b0:	4630      	mov	r0, r6
   256b2:	f8ce 3000 	str.w	r3, [lr]
   256b6:	b932      	cbnz	r2, 256c6 <_strtoul_l.constprop.0+0xda>
   256b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   256bc:	b107      	cbz	r7, 256c0 <_strtoul_l.constprop.0+0xd4>
   256be:	4240      	negs	r0, r0
   256c0:	2a00      	cmp	r2, #0
   256c2:	d0f9      	beq.n	256b8 <_strtoul_l.constprop.0+0xcc>
   256c4:	b106      	cbz	r6, 256c8 <_strtoul_l.constprop.0+0xdc>
   256c6:	1e69      	subs	r1, r5, #1
   256c8:	6011      	str	r1, [r2, #0]
   256ca:	e7f5      	b.n	256b8 <_strtoul_l.constprop.0+0xcc>
   256cc:	00033a74 	.word	0x00033a74

000256d0 <strtoul>:
   256d0:	4613      	mov	r3, r2
   256d2:	460a      	mov	r2, r1
   256d4:	4601      	mov	r1, r0
   256d6:	4802      	ldr	r0, [pc, #8]	; (256e0 <strtoul+0x10>)
   256d8:	6800      	ldr	r0, [r0, #0]
   256da:	f7ff bf87 	b.w	255ec <_strtoul_l.constprop.0>
   256de:	bf00      	nop
   256e0:	20008754 	.word	0x20008754

000256e4 <__assert_func>:
   256e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   256e6:	4614      	mov	r4, r2
   256e8:	461a      	mov	r2, r3
   256ea:	4b09      	ldr	r3, [pc, #36]	; (25710 <__assert_func+0x2c>)
   256ec:	4605      	mov	r5, r0
   256ee:	681b      	ldr	r3, [r3, #0]
   256f0:	68d8      	ldr	r0, [r3, #12]
   256f2:	b954      	cbnz	r4, 2570a <__assert_func+0x26>
   256f4:	4b07      	ldr	r3, [pc, #28]	; (25714 <__assert_func+0x30>)
   256f6:	461c      	mov	r4, r3
   256f8:	9100      	str	r1, [sp, #0]
   256fa:	4907      	ldr	r1, [pc, #28]	; (25718 <__assert_func+0x34>)
   256fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   25700:	462b      	mov	r3, r5
   25702:	f000 f8cd 	bl	258a0 <fiprintf>
   25706:	f006 fe8a 	bl	2c41e <abort>
   2570a:	4b04      	ldr	r3, [pc, #16]	; (2571c <__assert_func+0x38>)
   2570c:	e7f4      	b.n	256f8 <__assert_func+0x14>
   2570e:	bf00      	nop
   25710:	20008754 	.word	0x20008754
   25714:	00031dbc 	.word	0x00031dbc
   25718:	00033baf 	.word	0x00033baf
   2571c:	00033ba2 	.word	0x00033ba2

00025720 <std>:
   25720:	2300      	movs	r3, #0
   25722:	b510      	push	{r4, lr}
   25724:	4604      	mov	r4, r0
   25726:	6083      	str	r3, [r0, #8]
   25728:	8181      	strh	r1, [r0, #12]
   2572a:	4619      	mov	r1, r3
   2572c:	6643      	str	r3, [r0, #100]	; 0x64
   2572e:	81c2      	strh	r2, [r0, #14]
   25730:	2208      	movs	r2, #8
   25732:	6183      	str	r3, [r0, #24]
   25734:	e9c0 3300 	strd	r3, r3, [r0]
   25738:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2573c:	305c      	adds	r0, #92	; 0x5c
   2573e:	f006 fb77 	bl	2be30 <memset>
   25742:	4b05      	ldr	r3, [pc, #20]	; (25758 <std+0x38>)
   25744:	6224      	str	r4, [r4, #32]
   25746:	6263      	str	r3, [r4, #36]	; 0x24
   25748:	4b04      	ldr	r3, [pc, #16]	; (2575c <std+0x3c>)
   2574a:	62a3      	str	r3, [r4, #40]	; 0x28
   2574c:	4b04      	ldr	r3, [pc, #16]	; (25760 <std+0x40>)
   2574e:	62e3      	str	r3, [r4, #44]	; 0x2c
   25750:	4b04      	ldr	r3, [pc, #16]	; (25764 <std+0x44>)
   25752:	6323      	str	r3, [r4, #48]	; 0x30
   25754:	bd10      	pop	{r4, pc}
   25756:	bf00      	nop
   25758:	0002c399 	.word	0x0002c399
   2575c:	0002c3bb 	.word	0x0002c3bb
   25760:	0002c3f3 	.word	0x0002c3f3
   25764:	0002c417 	.word	0x0002c417

00025768 <_cleanup_r>:
   25768:	4901      	ldr	r1, [pc, #4]	; (25770 <_cleanup_r+0x8>)
   2576a:	f006 bd65 	b.w	2c238 <_fwalk_reent>
   2576e:	bf00      	nop
   25770:	00026339 	.word	0x00026339

00025774 <__sfp_lock_acquire>:
   25774:	4801      	ldr	r0, [pc, #4]	; (2577c <__sfp_lock_acquire+0x8>)
   25776:	f7ec b98f 	b.w	11a98 <__retarget_lock_acquire_recursive>
   2577a:	bf00      	nop
   2577c:	20008ae8 	.word	0x20008ae8

00025780 <__sfp_lock_release>:
   25780:	4801      	ldr	r0, [pc, #4]	; (25788 <__sfp_lock_release+0x8>)
   25782:	f7ec b9a5 	b.w	11ad0 <__retarget_lock_release_recursive>
   25786:	bf00      	nop
   25788:	20008ae8 	.word	0x20008ae8

0002578c <__sinit_lock_acquire>:
   2578c:	4801      	ldr	r0, [pc, #4]	; (25794 <__sinit_lock_acquire+0x8>)
   2578e:	f7ec b983 	b.w	11a98 <__retarget_lock_acquire_recursive>
   25792:	bf00      	nop
   25794:	20008afc 	.word	0x20008afc

00025798 <__sinit_lock_release>:
   25798:	4801      	ldr	r0, [pc, #4]	; (257a0 <__sinit_lock_release+0x8>)
   2579a:	f7ec b999 	b.w	11ad0 <__retarget_lock_release_recursive>
   2579e:	bf00      	nop
   257a0:	20008afc 	.word	0x20008afc

000257a4 <__sinit>:
   257a4:	b510      	push	{r4, lr}
   257a6:	4604      	mov	r4, r0
   257a8:	f7ff fff0 	bl	2578c <__sinit_lock_acquire>
   257ac:	69a3      	ldr	r3, [r4, #24]
   257ae:	b11b      	cbz	r3, 257b8 <__sinit+0x14>
   257b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   257b4:	f7ff bff0 	b.w	25798 <__sinit_lock_release>
   257b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   257bc:	6523      	str	r3, [r4, #80]	; 0x50
   257be:	4620      	mov	r0, r4
   257c0:	4b12      	ldr	r3, [pc, #72]	; (2580c <__sinit+0x68>)
   257c2:	4a13      	ldr	r2, [pc, #76]	; (25810 <__sinit+0x6c>)
   257c4:	681b      	ldr	r3, [r3, #0]
   257c6:	62a2      	str	r2, [r4, #40]	; 0x28
   257c8:	42a3      	cmp	r3, r4
   257ca:	bf04      	itt	eq
   257cc:	2301      	moveq	r3, #1
   257ce:	61a3      	streq	r3, [r4, #24]
   257d0:	f000 f820 	bl	25814 <__sfp>
   257d4:	6060      	str	r0, [r4, #4]
   257d6:	4620      	mov	r0, r4
   257d8:	f000 f81c 	bl	25814 <__sfp>
   257dc:	60a0      	str	r0, [r4, #8]
   257de:	4620      	mov	r0, r4
   257e0:	f000 f818 	bl	25814 <__sfp>
   257e4:	2200      	movs	r2, #0
   257e6:	2104      	movs	r1, #4
   257e8:	60e0      	str	r0, [r4, #12]
   257ea:	6860      	ldr	r0, [r4, #4]
   257ec:	f7ff ff98 	bl	25720 <std>
   257f0:	2201      	movs	r2, #1
   257f2:	2109      	movs	r1, #9
   257f4:	68a0      	ldr	r0, [r4, #8]
   257f6:	f7ff ff93 	bl	25720 <std>
   257fa:	2202      	movs	r2, #2
   257fc:	2112      	movs	r1, #18
   257fe:	68e0      	ldr	r0, [r4, #12]
   25800:	f7ff ff8e 	bl	25720 <std>
   25804:	2301      	movs	r3, #1
   25806:	61a3      	str	r3, [r4, #24]
   25808:	e7d2      	b.n	257b0 <__sinit+0xc>
   2580a:	bf00      	nop
   2580c:	0002dc8c 	.word	0x0002dc8c
   25810:	00025769 	.word	0x00025769

00025814 <__sfp>:
   25814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25816:	4607      	mov	r7, r0
   25818:	f7ff ffac 	bl	25774 <__sfp_lock_acquire>
   2581c:	4b1e      	ldr	r3, [pc, #120]	; (25898 <__sfp+0x84>)
   2581e:	681e      	ldr	r6, [r3, #0]
   25820:	69b3      	ldr	r3, [r6, #24]
   25822:	b913      	cbnz	r3, 2582a <__sfp+0x16>
   25824:	4630      	mov	r0, r6
   25826:	f7ff ffbd 	bl	257a4 <__sinit>
   2582a:	3648      	adds	r6, #72	; 0x48
   2582c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   25830:	3b01      	subs	r3, #1
   25832:	d503      	bpl.n	2583c <__sfp+0x28>
   25834:	6833      	ldr	r3, [r6, #0]
   25836:	b30b      	cbz	r3, 2587c <__sfp+0x68>
   25838:	6836      	ldr	r6, [r6, #0]
   2583a:	e7f7      	b.n	2582c <__sfp+0x18>
   2583c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   25840:	b9d5      	cbnz	r5, 25878 <__sfp+0x64>
   25842:	4b16      	ldr	r3, [pc, #88]	; (2589c <__sfp+0x88>)
   25844:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25848:	6665      	str	r5, [r4, #100]	; 0x64
   2584a:	60e3      	str	r3, [r4, #12]
   2584c:	f7ec f8f4 	bl	11a38 <__retarget_lock_init_recursive>
   25850:	f7ff ff96 	bl	25780 <__sfp_lock_release>
   25854:	2208      	movs	r2, #8
   25856:	4629      	mov	r1, r5
   25858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2585c:	6025      	str	r5, [r4, #0]
   2585e:	61a5      	str	r5, [r4, #24]
   25860:	e9c4 5501 	strd	r5, r5, [r4, #4]
   25864:	e9c4 5504 	strd	r5, r5, [r4, #16]
   25868:	f006 fae2 	bl	2be30 <memset>
   2586c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   25870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   25874:	4620      	mov	r0, r4
   25876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25878:	3468      	adds	r4, #104	; 0x68
   2587a:	e7d9      	b.n	25830 <__sfp+0x1c>
   2587c:	2104      	movs	r1, #4
   2587e:	4638      	mov	r0, r7
   25880:	f006 fcc4 	bl	2c20c <__sfmoreglue>
   25884:	4604      	mov	r4, r0
   25886:	6030      	str	r0, [r6, #0]
   25888:	2800      	cmp	r0, #0
   2588a:	d1d5      	bne.n	25838 <__sfp+0x24>
   2588c:	f7ff ff78 	bl	25780 <__sfp_lock_release>
   25890:	230c      	movs	r3, #12
   25892:	603b      	str	r3, [r7, #0]
   25894:	e7ee      	b.n	25874 <__sfp+0x60>
   25896:	bf00      	nop
   25898:	0002dc8c 	.word	0x0002dc8c
   2589c:	ffff0001 	.word	0xffff0001

000258a0 <fiprintf>:
   258a0:	b40e      	push	{r1, r2, r3}
   258a2:	b503      	push	{r0, r1, lr}
   258a4:	ab03      	add	r3, sp, #12
   258a6:	4601      	mov	r1, r0
   258a8:	4805      	ldr	r0, [pc, #20]	; (258c0 <fiprintf+0x20>)
   258aa:	f853 2b04 	ldr.w	r2, [r3], #4
   258ae:	6800      	ldr	r0, [r0, #0]
   258b0:	9301      	str	r3, [sp, #4]
   258b2:	f000 fb35 	bl	25f20 <_vfiprintf_r>
   258b6:	b002      	add	sp, #8
   258b8:	f85d eb04 	ldr.w	lr, [sp], #4
   258bc:	b003      	add	sp, #12
   258be:	4770      	bx	lr
   258c0:	20008754 	.word	0x20008754

000258c4 <_localeconv_r>:
   258c4:	4800      	ldr	r0, [pc, #0]	; (258c8 <_localeconv_r+0x4>)
   258c6:	4770      	bx	lr
   258c8:	200088a8 	.word	0x200088a8

000258cc <__malloc_lock>:
   258cc:	4801      	ldr	r0, [pc, #4]	; (258d4 <__malloc_lock+0x8>)
   258ce:	f7ec b8e3 	b.w	11a98 <__retarget_lock_acquire_recursive>
   258d2:	bf00      	nop
   258d4:	20008ad4 	.word	0x20008ad4

000258d8 <__malloc_unlock>:
   258d8:	4801      	ldr	r0, [pc, #4]	; (258e0 <__malloc_unlock+0x8>)
   258da:	f7ec b8f9 	b.w	11ad0 <__retarget_lock_release_recursive>
   258de:	bf00      	nop
   258e0:	20008ad4 	.word	0x20008ad4

000258e4 <_Balloc>:
   258e4:	b570      	push	{r4, r5, r6, lr}
   258e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   258e8:	4604      	mov	r4, r0
   258ea:	460d      	mov	r5, r1
   258ec:	b976      	cbnz	r6, 2590c <_Balloc+0x28>
   258ee:	2010      	movs	r0, #16
   258f0:	f7ff fa44 	bl	24d7c <malloc>
   258f4:	4602      	mov	r2, r0
   258f6:	6260      	str	r0, [r4, #36]	; 0x24
   258f8:	b920      	cbnz	r0, 25904 <_Balloc+0x20>
   258fa:	4b18      	ldr	r3, [pc, #96]	; (2595c <_Balloc+0x78>)
   258fc:	2166      	movs	r1, #102	; 0x66
   258fe:	4818      	ldr	r0, [pc, #96]	; (25960 <_Balloc+0x7c>)
   25900:	f7ff fef0 	bl	256e4 <__assert_func>
   25904:	e9c0 6601 	strd	r6, r6, [r0, #4]
   25908:	6006      	str	r6, [r0, #0]
   2590a:	60c6      	str	r6, [r0, #12]
   2590c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2590e:	68f3      	ldr	r3, [r6, #12]
   25910:	b183      	cbz	r3, 25934 <_Balloc+0x50>
   25912:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25914:	68db      	ldr	r3, [r3, #12]
   25916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2591a:	b9b8      	cbnz	r0, 2594c <_Balloc+0x68>
   2591c:	2101      	movs	r1, #1
   2591e:	4620      	mov	r0, r4
   25920:	fa01 f605 	lsl.w	r6, r1, r5
   25924:	1d72      	adds	r2, r6, #5
   25926:	0092      	lsls	r2, r2, #2
   25928:	f006 fa8a 	bl	2be40 <_calloc_r>
   2592c:	b160      	cbz	r0, 25948 <_Balloc+0x64>
   2592e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   25932:	e00e      	b.n	25952 <_Balloc+0x6e>
   25934:	2221      	movs	r2, #33	; 0x21
   25936:	2104      	movs	r1, #4
   25938:	4620      	mov	r0, r4
   2593a:	f006 fa81 	bl	2be40 <_calloc_r>
   2593e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25940:	60f0      	str	r0, [r6, #12]
   25942:	68db      	ldr	r3, [r3, #12]
   25944:	2b00      	cmp	r3, #0
   25946:	d1e4      	bne.n	25912 <_Balloc+0x2e>
   25948:	2000      	movs	r0, #0
   2594a:	bd70      	pop	{r4, r5, r6, pc}
   2594c:	6802      	ldr	r2, [r0, #0]
   2594e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   25952:	2300      	movs	r3, #0
   25954:	e9c0 3303 	strd	r3, r3, [r0, #12]
   25958:	e7f7      	b.n	2594a <_Balloc+0x66>
   2595a:	bf00      	nop
   2595c:	00033beb 	.word	0x00033beb
   25960:	00033c87 	.word	0x00033c87

00025964 <_Bfree>:
   25964:	b570      	push	{r4, r5, r6, lr}
   25966:	6a46      	ldr	r6, [r0, #36]	; 0x24
   25968:	4605      	mov	r5, r0
   2596a:	460c      	mov	r4, r1
   2596c:	b976      	cbnz	r6, 2598c <_Bfree+0x28>
   2596e:	2010      	movs	r0, #16
   25970:	f7ff fa04 	bl	24d7c <malloc>
   25974:	4602      	mov	r2, r0
   25976:	6268      	str	r0, [r5, #36]	; 0x24
   25978:	b920      	cbnz	r0, 25984 <_Bfree+0x20>
   2597a:	4b09      	ldr	r3, [pc, #36]	; (259a0 <_Bfree+0x3c>)
   2597c:	218a      	movs	r1, #138	; 0x8a
   2597e:	4809      	ldr	r0, [pc, #36]	; (259a4 <_Bfree+0x40>)
   25980:	f7ff feb0 	bl	256e4 <__assert_func>
   25984:	e9c0 6601 	strd	r6, r6, [r0, #4]
   25988:	6006      	str	r6, [r0, #0]
   2598a:	60c6      	str	r6, [r0, #12]
   2598c:	b13c      	cbz	r4, 2599e <_Bfree+0x3a>
   2598e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   25990:	6862      	ldr	r2, [r4, #4]
   25992:	68db      	ldr	r3, [r3, #12]
   25994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   25998:	6021      	str	r1, [r4, #0]
   2599a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2599e:	bd70      	pop	{r4, r5, r6, pc}
   259a0:	00033beb 	.word	0x00033beb
   259a4:	00033c87 	.word	0x00033c87

000259a8 <__multadd>:
   259a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   259ac:	f101 0c14 	add.w	ip, r1, #20
   259b0:	4607      	mov	r7, r0
   259b2:	460c      	mov	r4, r1
   259b4:	461e      	mov	r6, r3
   259b6:	690d      	ldr	r5, [r1, #16]
   259b8:	2000      	movs	r0, #0
   259ba:	f8dc 3000 	ldr.w	r3, [ip]
   259be:	3001      	adds	r0, #1
   259c0:	b299      	uxth	r1, r3
   259c2:	4285      	cmp	r5, r0
   259c4:	fb02 6101 	mla	r1, r2, r1, r6
   259c8:	ea4f 4613 	mov.w	r6, r3, lsr #16
   259cc:	ea4f 4311 	mov.w	r3, r1, lsr #16
   259d0:	b289      	uxth	r1, r1
   259d2:	fb02 3306 	mla	r3, r2, r6, r3
   259d6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   259da:	ea4f 4613 	mov.w	r6, r3, lsr #16
   259de:	f84c 1b04 	str.w	r1, [ip], #4
   259e2:	dcea      	bgt.n	259ba <__multadd+0x12>
   259e4:	b30e      	cbz	r6, 25a2a <__multadd+0x82>
   259e6:	68a3      	ldr	r3, [r4, #8]
   259e8:	42ab      	cmp	r3, r5
   259ea:	dc19      	bgt.n	25a20 <__multadd+0x78>
   259ec:	6861      	ldr	r1, [r4, #4]
   259ee:	4638      	mov	r0, r7
   259f0:	3101      	adds	r1, #1
   259f2:	f7ff ff77 	bl	258e4 <_Balloc>
   259f6:	4680      	mov	r8, r0
   259f8:	b928      	cbnz	r0, 25a06 <__multadd+0x5e>
   259fa:	4602      	mov	r2, r0
   259fc:	4b0c      	ldr	r3, [pc, #48]	; (25a30 <__multadd+0x88>)
   259fe:	21b5      	movs	r1, #181	; 0xb5
   25a00:	480c      	ldr	r0, [pc, #48]	; (25a34 <__multadd+0x8c>)
   25a02:	f7ff fe6f 	bl	256e4 <__assert_func>
   25a06:	6922      	ldr	r2, [r4, #16]
   25a08:	f104 010c 	add.w	r1, r4, #12
   25a0c:	300c      	adds	r0, #12
   25a0e:	3202      	adds	r2, #2
   25a10:	0092      	lsls	r2, r2, #2
   25a12:	f006 f9d3 	bl	2bdbc <memcpy>
   25a16:	4621      	mov	r1, r4
   25a18:	4644      	mov	r4, r8
   25a1a:	4638      	mov	r0, r7
   25a1c:	f7ff ffa2 	bl	25964 <_Bfree>
   25a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   25a24:	3501      	adds	r5, #1
   25a26:	615e      	str	r6, [r3, #20]
   25a28:	6125      	str	r5, [r4, #16]
   25a2a:	4620      	mov	r0, r4
   25a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25a30:	00033c76 	.word	0x00033c76
   25a34:	00033c87 	.word	0x00033c87

00025a38 <__i2b>:
   25a38:	b510      	push	{r4, lr}
   25a3a:	460c      	mov	r4, r1
   25a3c:	2101      	movs	r1, #1
   25a3e:	f7ff ff51 	bl	258e4 <_Balloc>
   25a42:	4602      	mov	r2, r0
   25a44:	b928      	cbnz	r0, 25a52 <__i2b+0x1a>
   25a46:	4b05      	ldr	r3, [pc, #20]	; (25a5c <__i2b+0x24>)
   25a48:	f44f 71a0 	mov.w	r1, #320	; 0x140
   25a4c:	4804      	ldr	r0, [pc, #16]	; (25a60 <__i2b+0x28>)
   25a4e:	f7ff fe49 	bl	256e4 <__assert_func>
   25a52:	2301      	movs	r3, #1
   25a54:	6144      	str	r4, [r0, #20]
   25a56:	6103      	str	r3, [r0, #16]
   25a58:	bd10      	pop	{r4, pc}
   25a5a:	bf00      	nop
   25a5c:	00033c76 	.word	0x00033c76
   25a60:	00033c87 	.word	0x00033c87

00025a64 <__multiply>:
   25a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a68:	4614      	mov	r4, r2
   25a6a:	690a      	ldr	r2, [r1, #16]
   25a6c:	460f      	mov	r7, r1
   25a6e:	b085      	sub	sp, #20
   25a70:	6923      	ldr	r3, [r4, #16]
   25a72:	429a      	cmp	r2, r3
   25a74:	bfa2      	ittt	ge
   25a76:	4623      	movge	r3, r4
   25a78:	460c      	movge	r4, r1
   25a7a:	461f      	movge	r7, r3
   25a7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   25a80:	68a3      	ldr	r3, [r4, #8]
   25a82:	f8d7 9010 	ldr.w	r9, [r7, #16]
   25a86:	6861      	ldr	r1, [r4, #4]
   25a88:	eb0a 0609 	add.w	r6, sl, r9
   25a8c:	42b3      	cmp	r3, r6
   25a8e:	bfb8      	it	lt
   25a90:	3101      	addlt	r1, #1
   25a92:	f7ff ff27 	bl	258e4 <_Balloc>
   25a96:	b930      	cbnz	r0, 25aa6 <__multiply+0x42>
   25a98:	4602      	mov	r2, r0
   25a9a:	4b45      	ldr	r3, [pc, #276]	; (25bb0 <__multiply+0x14c>)
   25a9c:	f240 115d 	movw	r1, #349	; 0x15d
   25aa0:	4844      	ldr	r0, [pc, #272]	; (25bb4 <__multiply+0x150>)
   25aa2:	f7ff fe1f 	bl	256e4 <__assert_func>
   25aa6:	f100 0514 	add.w	r5, r0, #20
   25aaa:	2200      	movs	r2, #0
   25aac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   25ab0:	462b      	mov	r3, r5
   25ab2:	4543      	cmp	r3, r8
   25ab4:	d321      	bcc.n	25afa <__multiply+0x96>
   25ab6:	f107 0114 	add.w	r1, r7, #20
   25aba:	f104 0214 	add.w	r2, r4, #20
   25abe:	f104 0715 	add.w	r7, r4, #21
   25ac2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   25ac6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   25aca:	9302      	str	r3, [sp, #8]
   25acc:	1b13      	subs	r3, r2, r4
   25ace:	3b15      	subs	r3, #21
   25ad0:	f023 0303 	bic.w	r3, r3, #3
   25ad4:	3304      	adds	r3, #4
   25ad6:	42ba      	cmp	r2, r7
   25ad8:	bf38      	it	cc
   25ada:	2304      	movcc	r3, #4
   25adc:	9301      	str	r3, [sp, #4]
   25ade:	9b02      	ldr	r3, [sp, #8]
   25ae0:	9103      	str	r1, [sp, #12]
   25ae2:	428b      	cmp	r3, r1
   25ae4:	d80c      	bhi.n	25b00 <__multiply+0x9c>
   25ae6:	2e00      	cmp	r6, #0
   25ae8:	dd03      	ble.n	25af2 <__multiply+0x8e>
   25aea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   25aee:	2b00      	cmp	r3, #0
   25af0:	d05b      	beq.n	25baa <__multiply+0x146>
   25af2:	6106      	str	r6, [r0, #16]
   25af4:	b005      	add	sp, #20
   25af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25afa:	f843 2b04 	str.w	r2, [r3], #4
   25afe:	e7d8      	b.n	25ab2 <__multiply+0x4e>
   25b00:	f8b1 a000 	ldrh.w	sl, [r1]
   25b04:	f1ba 0f00 	cmp.w	sl, #0
   25b08:	d024      	beq.n	25b54 <__multiply+0xf0>
   25b0a:	f104 0e14 	add.w	lr, r4, #20
   25b0e:	46a9      	mov	r9, r5
   25b10:	f04f 0c00 	mov.w	ip, #0
   25b14:	f85e 7b04 	ldr.w	r7, [lr], #4
   25b18:	f8d9 3000 	ldr.w	r3, [r9]
   25b1c:	fa1f fb87 	uxth.w	fp, r7
   25b20:	4572      	cmp	r2, lr
   25b22:	b29b      	uxth	r3, r3
   25b24:	ea4f 4717 	mov.w	r7, r7, lsr #16
   25b28:	fb0a 330b 	mla	r3, sl, fp, r3
   25b2c:	4463      	add	r3, ip
   25b2e:	f8d9 c000 	ldr.w	ip, [r9]
   25b32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   25b36:	fb0a c707 	mla	r7, sl, r7, ip
   25b3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   25b3e:	b29b      	uxth	r3, r3
   25b40:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   25b44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25b48:	f849 3b04 	str.w	r3, [r9], #4
   25b4c:	d8e2      	bhi.n	25b14 <__multiply+0xb0>
   25b4e:	9b01      	ldr	r3, [sp, #4]
   25b50:	f845 c003 	str.w	ip, [r5, r3]
   25b54:	9b03      	ldr	r3, [sp, #12]
   25b56:	3104      	adds	r1, #4
   25b58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   25b5c:	f1b9 0f00 	cmp.w	r9, #0
   25b60:	d021      	beq.n	25ba6 <__multiply+0x142>
   25b62:	682b      	ldr	r3, [r5, #0]
   25b64:	f104 0c14 	add.w	ip, r4, #20
   25b68:	46ae      	mov	lr, r5
   25b6a:	f04f 0a00 	mov.w	sl, #0
   25b6e:	f8bc b000 	ldrh.w	fp, [ip]
   25b72:	b29b      	uxth	r3, r3
   25b74:	f8be 7002 	ldrh.w	r7, [lr, #2]
   25b78:	fb09 770b 	mla	r7, r9, fp, r7
   25b7c:	4457      	add	r7, sl
   25b7e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25b82:	f84e 3b04 	str.w	r3, [lr], #4
   25b86:	f85c 3b04 	ldr.w	r3, [ip], #4
   25b8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25b8e:	f8be 3000 	ldrh.w	r3, [lr]
   25b92:	4562      	cmp	r2, ip
   25b94:	fb09 330a 	mla	r3, r9, sl, r3
   25b98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   25b9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25ba0:	d8e5      	bhi.n	25b6e <__multiply+0x10a>
   25ba2:	9f01      	ldr	r7, [sp, #4]
   25ba4:	51eb      	str	r3, [r5, r7]
   25ba6:	3504      	adds	r5, #4
   25ba8:	e799      	b.n	25ade <__multiply+0x7a>
   25baa:	3e01      	subs	r6, #1
   25bac:	e79b      	b.n	25ae6 <__multiply+0x82>
   25bae:	bf00      	nop
   25bb0:	00033c76 	.word	0x00033c76
   25bb4:	00033c87 	.word	0x00033c87

00025bb8 <__pow5mult>:
   25bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25bbc:	4615      	mov	r5, r2
   25bbe:	f012 0203 	ands.w	r2, r2, #3
   25bc2:	4607      	mov	r7, r0
   25bc4:	460e      	mov	r6, r1
   25bc6:	d007      	beq.n	25bd8 <__pow5mult+0x20>
   25bc8:	3a01      	subs	r2, #1
   25bca:	4c25      	ldr	r4, [pc, #148]	; (25c60 <__pow5mult+0xa8>)
   25bcc:	2300      	movs	r3, #0
   25bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   25bd2:	f7ff fee9 	bl	259a8 <__multadd>
   25bd6:	4606      	mov	r6, r0
   25bd8:	10ad      	asrs	r5, r5, #2
   25bda:	d03d      	beq.n	25c58 <__pow5mult+0xa0>
   25bdc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   25bde:	b97c      	cbnz	r4, 25c00 <__pow5mult+0x48>
   25be0:	2010      	movs	r0, #16
   25be2:	f7ff f8cb 	bl	24d7c <malloc>
   25be6:	4602      	mov	r2, r0
   25be8:	6278      	str	r0, [r7, #36]	; 0x24
   25bea:	b928      	cbnz	r0, 25bf8 <__pow5mult+0x40>
   25bec:	4b1d      	ldr	r3, [pc, #116]	; (25c64 <__pow5mult+0xac>)
   25bee:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   25bf2:	481d      	ldr	r0, [pc, #116]	; (25c68 <__pow5mult+0xb0>)
   25bf4:	f7ff fd76 	bl	256e4 <__assert_func>
   25bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   25bfc:	6004      	str	r4, [r0, #0]
   25bfe:	60c4      	str	r4, [r0, #12]
   25c00:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   25c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
   25c08:	b94c      	cbnz	r4, 25c1e <__pow5mult+0x66>
   25c0a:	f240 2171 	movw	r1, #625	; 0x271
   25c0e:	4638      	mov	r0, r7
   25c10:	f7ff ff12 	bl	25a38 <__i2b>
   25c14:	2300      	movs	r3, #0
   25c16:	4604      	mov	r4, r0
   25c18:	f8c8 0008 	str.w	r0, [r8, #8]
   25c1c:	6003      	str	r3, [r0, #0]
   25c1e:	f04f 0900 	mov.w	r9, #0
   25c22:	07eb      	lsls	r3, r5, #31
   25c24:	d50a      	bpl.n	25c3c <__pow5mult+0x84>
   25c26:	4631      	mov	r1, r6
   25c28:	4622      	mov	r2, r4
   25c2a:	4638      	mov	r0, r7
   25c2c:	f7ff ff1a 	bl	25a64 <__multiply>
   25c30:	4680      	mov	r8, r0
   25c32:	4631      	mov	r1, r6
   25c34:	4638      	mov	r0, r7
   25c36:	4646      	mov	r6, r8
   25c38:	f7ff fe94 	bl	25964 <_Bfree>
   25c3c:	106d      	asrs	r5, r5, #1
   25c3e:	d00b      	beq.n	25c58 <__pow5mult+0xa0>
   25c40:	6820      	ldr	r0, [r4, #0]
   25c42:	b938      	cbnz	r0, 25c54 <__pow5mult+0x9c>
   25c44:	4622      	mov	r2, r4
   25c46:	4621      	mov	r1, r4
   25c48:	4638      	mov	r0, r7
   25c4a:	f7ff ff0b 	bl	25a64 <__multiply>
   25c4e:	6020      	str	r0, [r4, #0]
   25c50:	f8c0 9000 	str.w	r9, [r0]
   25c54:	4604      	mov	r4, r0
   25c56:	e7e4      	b.n	25c22 <__pow5mult+0x6a>
   25c58:	4630      	mov	r0, r6
   25c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25c5e:	bf00      	nop
   25c60:	0002dcf0 	.word	0x0002dcf0
   25c64:	00033beb 	.word	0x00033beb
   25c68:	00033c87 	.word	0x00033c87

00025c6c <__lshift>:
   25c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25c70:	460c      	mov	r4, r1
   25c72:	4607      	mov	r7, r0
   25c74:	4691      	mov	r9, r2
   25c76:	ea4f 1a62 	mov.w	sl, r2, asr #5
   25c7a:	6923      	ldr	r3, [r4, #16]
   25c7c:	6849      	ldr	r1, [r1, #4]
   25c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   25c82:	68a3      	ldr	r3, [r4, #8]
   25c84:	f108 0601 	add.w	r6, r8, #1
   25c88:	42b3      	cmp	r3, r6
   25c8a:	db0b      	blt.n	25ca4 <__lshift+0x38>
   25c8c:	4638      	mov	r0, r7
   25c8e:	f7ff fe29 	bl	258e4 <_Balloc>
   25c92:	4605      	mov	r5, r0
   25c94:	b948      	cbnz	r0, 25caa <__lshift+0x3e>
   25c96:	4602      	mov	r2, r0
   25c98:	4b28      	ldr	r3, [pc, #160]	; (25d3c <__lshift+0xd0>)
   25c9a:	f240 11d9 	movw	r1, #473	; 0x1d9
   25c9e:	4828      	ldr	r0, [pc, #160]	; (25d40 <__lshift+0xd4>)
   25ca0:	f7ff fd20 	bl	256e4 <__assert_func>
   25ca4:	3101      	adds	r1, #1
   25ca6:	005b      	lsls	r3, r3, #1
   25ca8:	e7ee      	b.n	25c88 <__lshift+0x1c>
   25caa:	2300      	movs	r3, #0
   25cac:	f100 0114 	add.w	r1, r0, #20
   25cb0:	f100 0210 	add.w	r2, r0, #16
   25cb4:	4618      	mov	r0, r3
   25cb6:	4553      	cmp	r3, sl
   25cb8:	db33      	blt.n	25d22 <__lshift+0xb6>
   25cba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   25cbe:	f104 0314 	add.w	r3, r4, #20
   25cc2:	6920      	ldr	r0, [r4, #16]
   25cc4:	f019 091f 	ands.w	r9, r9, #31
   25cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   25ccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   25cd0:	d02b      	beq.n	25d2a <__lshift+0xbe>
   25cd2:	f1c9 0e20 	rsb	lr, r9, #32
   25cd6:	468a      	mov	sl, r1
   25cd8:	2200      	movs	r2, #0
   25cda:	6818      	ldr	r0, [r3, #0]
   25cdc:	fa00 f009 	lsl.w	r0, r0, r9
   25ce0:	4310      	orrs	r0, r2
   25ce2:	f84a 0b04 	str.w	r0, [sl], #4
   25ce6:	f853 2b04 	ldr.w	r2, [r3], #4
   25cea:	459c      	cmp	ip, r3
   25cec:	fa22 f20e 	lsr.w	r2, r2, lr
   25cf0:	d8f3      	bhi.n	25cda <__lshift+0x6e>
   25cf2:	ebac 0304 	sub.w	r3, ip, r4
   25cf6:	f104 0015 	add.w	r0, r4, #21
   25cfa:	3b15      	subs	r3, #21
   25cfc:	f023 0303 	bic.w	r3, r3, #3
   25d00:	3304      	adds	r3, #4
   25d02:	4584      	cmp	ip, r0
   25d04:	bf38      	it	cc
   25d06:	2304      	movcc	r3, #4
   25d08:	50ca      	str	r2, [r1, r3]
   25d0a:	b10a      	cbz	r2, 25d10 <__lshift+0xa4>
   25d0c:	f108 0602 	add.w	r6, r8, #2
   25d10:	3e01      	subs	r6, #1
   25d12:	4638      	mov	r0, r7
   25d14:	4621      	mov	r1, r4
   25d16:	612e      	str	r6, [r5, #16]
   25d18:	f7ff fe24 	bl	25964 <_Bfree>
   25d1c:	4628      	mov	r0, r5
   25d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25d22:	3301      	adds	r3, #1
   25d24:	f842 0f04 	str.w	r0, [r2, #4]!
   25d28:	e7c5      	b.n	25cb6 <__lshift+0x4a>
   25d2a:	3904      	subs	r1, #4
   25d2c:	f853 2b04 	ldr.w	r2, [r3], #4
   25d30:	459c      	cmp	ip, r3
   25d32:	f841 2f04 	str.w	r2, [r1, #4]!
   25d36:	d8f9      	bhi.n	25d2c <__lshift+0xc0>
   25d38:	e7ea      	b.n	25d10 <__lshift+0xa4>
   25d3a:	bf00      	nop
   25d3c:	00033c76 	.word	0x00033c76
   25d40:	00033c87 	.word	0x00033c87

00025d44 <__mdiff>:
   25d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d48:	4689      	mov	r9, r1
   25d4a:	4606      	mov	r6, r0
   25d4c:	4611      	mov	r1, r2
   25d4e:	4614      	mov	r4, r2
   25d50:	4648      	mov	r0, r9
   25d52:	f006 fadf 	bl	2c314 <__mcmp>
   25d56:	1e05      	subs	r5, r0, #0
   25d58:	d112      	bne.n	25d80 <__mdiff+0x3c>
   25d5a:	4629      	mov	r1, r5
   25d5c:	4630      	mov	r0, r6
   25d5e:	f7ff fdc1 	bl	258e4 <_Balloc>
   25d62:	4602      	mov	r2, r0
   25d64:	b928      	cbnz	r0, 25d72 <__mdiff+0x2e>
   25d66:	4b40      	ldr	r3, [pc, #256]	; (25e68 <__mdiff+0x124>)
   25d68:	f240 2132 	movw	r1, #562	; 0x232
   25d6c:	483f      	ldr	r0, [pc, #252]	; (25e6c <__mdiff+0x128>)
   25d6e:	f7ff fcb9 	bl	256e4 <__assert_func>
   25d72:	2301      	movs	r3, #1
   25d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
   25d78:	4610      	mov	r0, r2
   25d7a:	b003      	add	sp, #12
   25d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d80:	bfbc      	itt	lt
   25d82:	464b      	movlt	r3, r9
   25d84:	46a1      	movlt	r9, r4
   25d86:	4630      	mov	r0, r6
   25d88:	bfb8      	it	lt
   25d8a:	2501      	movlt	r5, #1
   25d8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   25d90:	bfb4      	ite	lt
   25d92:	461c      	movlt	r4, r3
   25d94:	2500      	movge	r5, #0
   25d96:	f7ff fda5 	bl	258e4 <_Balloc>
   25d9a:	4602      	mov	r2, r0
   25d9c:	b918      	cbnz	r0, 25da6 <__mdiff+0x62>
   25d9e:	4b32      	ldr	r3, [pc, #200]	; (25e68 <__mdiff+0x124>)
   25da0:	f44f 7110 	mov.w	r1, #576	; 0x240
   25da4:	e7e2      	b.n	25d6c <__mdiff+0x28>
   25da6:	f8d9 7010 	ldr.w	r7, [r9, #16]
   25daa:	f104 0e14 	add.w	lr, r4, #20
   25dae:	6926      	ldr	r6, [r4, #16]
   25db0:	f100 0b14 	add.w	fp, r0, #20
   25db4:	60c5      	str	r5, [r0, #12]
   25db6:	f109 0514 	add.w	r5, r9, #20
   25dba:	f109 0310 	add.w	r3, r9, #16
   25dbe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   25dc2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   25dc6:	46d9      	mov	r9, fp
   25dc8:	f04f 0c00 	mov.w	ip, #0
   25dcc:	9301      	str	r3, [sp, #4]
   25dce:	9b01      	ldr	r3, [sp, #4]
   25dd0:	f85e 0b04 	ldr.w	r0, [lr], #4
   25dd4:	f853 af04 	ldr.w	sl, [r3, #4]!
   25dd8:	b281      	uxth	r1, r0
   25dda:	4576      	cmp	r6, lr
   25ddc:	9301      	str	r3, [sp, #4]
   25dde:	fa1f f38a 	uxth.w	r3, sl
   25de2:	ea4f 4010 	mov.w	r0, r0, lsr #16
   25de6:	eba3 0301 	sub.w	r3, r3, r1
   25dea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   25dee:	4463      	add	r3, ip
   25df0:	eb00 4023 	add.w	r0, r0, r3, asr #16
   25df4:	b29b      	uxth	r3, r3
   25df6:	ea4f 4c20 	mov.w	ip, r0, asr #16
   25dfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   25dfe:	f849 3b04 	str.w	r3, [r9], #4
   25e02:	d8e4      	bhi.n	25dce <__mdiff+0x8a>
   25e04:	1b33      	subs	r3, r6, r4
   25e06:	3415      	adds	r4, #21
   25e08:	3b15      	subs	r3, #21
   25e0a:	f023 0303 	bic.w	r3, r3, #3
   25e0e:	3304      	adds	r3, #4
   25e10:	42a6      	cmp	r6, r4
   25e12:	bf38      	it	cc
   25e14:	2304      	movcc	r3, #4
   25e16:	441d      	add	r5, r3
   25e18:	445b      	add	r3, fp
   25e1a:	462c      	mov	r4, r5
   25e1c:	461e      	mov	r6, r3
   25e1e:	4544      	cmp	r4, r8
   25e20:	d30e      	bcc.n	25e40 <__mdiff+0xfc>
   25e22:	f108 0103 	add.w	r1, r8, #3
   25e26:	1b49      	subs	r1, r1, r5
   25e28:	3d03      	subs	r5, #3
   25e2a:	f021 0103 	bic.w	r1, r1, #3
   25e2e:	45a8      	cmp	r8, r5
   25e30:	bf38      	it	cc
   25e32:	2100      	movcc	r1, #0
   25e34:	440b      	add	r3, r1
   25e36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   25e3a:	b199      	cbz	r1, 25e64 <__mdiff+0x120>
   25e3c:	6117      	str	r7, [r2, #16]
   25e3e:	e79b      	b.n	25d78 <__mdiff+0x34>
   25e40:	f854 1b04 	ldr.w	r1, [r4], #4
   25e44:	46e6      	mov	lr, ip
   25e46:	fa1f fc81 	uxth.w	ip, r1
   25e4a:	0c08      	lsrs	r0, r1, #16
   25e4c:	4471      	add	r1, lr
   25e4e:	44f4      	add	ip, lr
   25e50:	b289      	uxth	r1, r1
   25e52:	eb00 402c 	add.w	r0, r0, ip, asr #16
   25e56:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   25e5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   25e5e:	f846 1b04 	str.w	r1, [r6], #4
   25e62:	e7dc      	b.n	25e1e <__mdiff+0xda>
   25e64:	3f01      	subs	r7, #1
   25e66:	e7e6      	b.n	25e36 <__mdiff+0xf2>
   25e68:	00033c76 	.word	0x00033c76
   25e6c:	00033c87 	.word	0x00033c87

00025e70 <__d2b>:
   25e70:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   25e74:	2101      	movs	r1, #1
   25e76:	4690      	mov	r8, r2
   25e78:	4699      	mov	r9, r3
   25e7a:	9e08      	ldr	r6, [sp, #32]
   25e7c:	f7ff fd32 	bl	258e4 <_Balloc>
   25e80:	4604      	mov	r4, r0
   25e82:	b930      	cbnz	r0, 25e92 <__d2b+0x22>
   25e84:	4602      	mov	r2, r0
   25e86:	4b24      	ldr	r3, [pc, #144]	; (25f18 <__d2b+0xa8>)
   25e88:	f240 310a 	movw	r1, #778	; 0x30a
   25e8c:	4823      	ldr	r0, [pc, #140]	; (25f1c <__d2b+0xac>)
   25e8e:	f7ff fc29 	bl	256e4 <__assert_func>
   25e92:	f3c9 550a 	ubfx	r5, r9, #20, #11
   25e96:	f3c9 0313 	ubfx	r3, r9, #0, #20
   25e9a:	b10d      	cbz	r5, 25ea0 <__d2b+0x30>
   25e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25ea0:	9301      	str	r3, [sp, #4]
   25ea2:	f1b8 0300 	subs.w	r3, r8, #0
   25ea6:	d024      	beq.n	25ef2 <__d2b+0x82>
   25ea8:	4668      	mov	r0, sp
   25eaa:	9300      	str	r3, [sp, #0]
   25eac:	f006 fa05 	bl	2c2ba <__lo0bits>
   25eb0:	e9dd 1200 	ldrd	r1, r2, [sp]
   25eb4:	b1d8      	cbz	r0, 25eee <__d2b+0x7e>
   25eb6:	f1c0 0320 	rsb	r3, r0, #32
   25eba:	fa02 f303 	lsl.w	r3, r2, r3
   25ebe:	40c2      	lsrs	r2, r0
   25ec0:	430b      	orrs	r3, r1
   25ec2:	9201      	str	r2, [sp, #4]
   25ec4:	6163      	str	r3, [r4, #20]
   25ec6:	9b01      	ldr	r3, [sp, #4]
   25ec8:	2b00      	cmp	r3, #0
   25eca:	61a3      	str	r3, [r4, #24]
   25ecc:	bf0c      	ite	eq
   25ece:	2201      	moveq	r2, #1
   25ed0:	2202      	movne	r2, #2
   25ed2:	6122      	str	r2, [r4, #16]
   25ed4:	b1ad      	cbz	r5, 25f02 <__d2b+0x92>
   25ed6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   25eda:	4405      	add	r5, r0
   25edc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   25ee0:	6035      	str	r5, [r6, #0]
   25ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25ee4:	6018      	str	r0, [r3, #0]
   25ee6:	4620      	mov	r0, r4
   25ee8:	b002      	add	sp, #8
   25eea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   25eee:	6161      	str	r1, [r4, #20]
   25ef0:	e7e9      	b.n	25ec6 <__d2b+0x56>
   25ef2:	a801      	add	r0, sp, #4
   25ef4:	f006 f9e1 	bl	2c2ba <__lo0bits>
   25ef8:	9b01      	ldr	r3, [sp, #4]
   25efa:	3020      	adds	r0, #32
   25efc:	2201      	movs	r2, #1
   25efe:	6163      	str	r3, [r4, #20]
   25f00:	e7e7      	b.n	25ed2 <__d2b+0x62>
   25f02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   25f06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   25f0a:	6030      	str	r0, [r6, #0]
   25f0c:	6918      	ldr	r0, [r3, #16]
   25f0e:	f006 f9b2 	bl	2c276 <__hi0bits>
   25f12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   25f16:	e7e4      	b.n	25ee2 <__d2b+0x72>
   25f18:	00033c76 	.word	0x00033c76
   25f1c:	00033c87 	.word	0x00033c87

00025f20 <_vfiprintf_r>:
   25f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f24:	460d      	mov	r5, r1
   25f26:	b09d      	sub	sp, #116	; 0x74
   25f28:	4614      	mov	r4, r2
   25f2a:	4698      	mov	r8, r3
   25f2c:	4606      	mov	r6, r0
   25f2e:	b118      	cbz	r0, 25f38 <_vfiprintf_r+0x18>
   25f30:	6983      	ldr	r3, [r0, #24]
   25f32:	b90b      	cbnz	r3, 25f38 <_vfiprintf_r+0x18>
   25f34:	f7ff fc36 	bl	257a4 <__sinit>
   25f38:	4b87      	ldr	r3, [pc, #540]	; (26158 <_vfiprintf_r+0x238>)
   25f3a:	429d      	cmp	r5, r3
   25f3c:	d11b      	bne.n	25f76 <_vfiprintf_r+0x56>
   25f3e:	6875      	ldr	r5, [r6, #4]
   25f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   25f42:	07d9      	lsls	r1, r3, #31
   25f44:	d405      	bmi.n	25f52 <_vfiprintf_r+0x32>
   25f46:	89ab      	ldrh	r3, [r5, #12]
   25f48:	059a      	lsls	r2, r3, #22
   25f4a:	d402      	bmi.n	25f52 <_vfiprintf_r+0x32>
   25f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   25f4e:	f7eb fda3 	bl	11a98 <__retarget_lock_acquire_recursive>
   25f52:	89ab      	ldrh	r3, [r5, #12]
   25f54:	071b      	lsls	r3, r3, #28
   25f56:	d501      	bpl.n	25f5c <_vfiprintf_r+0x3c>
   25f58:	692b      	ldr	r3, [r5, #16]
   25f5a:	b9eb      	cbnz	r3, 25f98 <_vfiprintf_r+0x78>
   25f5c:	4629      	mov	r1, r5
   25f5e:	4630      	mov	r0, r6
   25f60:	f000 f96e 	bl	26240 <__swsetup_r>
   25f64:	b1c0      	cbz	r0, 25f98 <_vfiprintf_r+0x78>
   25f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   25f68:	07dc      	lsls	r4, r3, #31
   25f6a:	d50e      	bpl.n	25f8a <_vfiprintf_r+0x6a>
   25f6c:	f04f 30ff 	mov.w	r0, #4294967295
   25f70:	b01d      	add	sp, #116	; 0x74
   25f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f76:	4b79      	ldr	r3, [pc, #484]	; (2615c <_vfiprintf_r+0x23c>)
   25f78:	429d      	cmp	r5, r3
   25f7a:	d101      	bne.n	25f80 <_vfiprintf_r+0x60>
   25f7c:	68b5      	ldr	r5, [r6, #8]
   25f7e:	e7df      	b.n	25f40 <_vfiprintf_r+0x20>
   25f80:	4b77      	ldr	r3, [pc, #476]	; (26160 <_vfiprintf_r+0x240>)
   25f82:	429d      	cmp	r5, r3
   25f84:	bf08      	it	eq
   25f86:	68f5      	ldreq	r5, [r6, #12]
   25f88:	e7da      	b.n	25f40 <_vfiprintf_r+0x20>
   25f8a:	89ab      	ldrh	r3, [r5, #12]
   25f8c:	0598      	lsls	r0, r3, #22
   25f8e:	d4ed      	bmi.n	25f6c <_vfiprintf_r+0x4c>
   25f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
   25f92:	f7eb fd9d 	bl	11ad0 <__retarget_lock_release_recursive>
   25f96:	e7e9      	b.n	25f6c <_vfiprintf_r+0x4c>
   25f98:	2300      	movs	r3, #0
   25f9a:	f8cd 800c 	str.w	r8, [sp, #12]
   25f9e:	f04f 0901 	mov.w	r9, #1
   25fa2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 26164 <_vfiprintf_r+0x244>
   25fa6:	9309      	str	r3, [sp, #36]	; 0x24
   25fa8:	2320      	movs	r3, #32
   25faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25fae:	2330      	movs	r3, #48	; 0x30
   25fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   25fb4:	4623      	mov	r3, r4
   25fb6:	469a      	mov	sl, r3
   25fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
   25fbc:	b10a      	cbz	r2, 25fc2 <_vfiprintf_r+0xa2>
   25fbe:	2a25      	cmp	r2, #37	; 0x25
   25fc0:	d1f9      	bne.n	25fb6 <_vfiprintf_r+0x96>
   25fc2:	ebba 0b04 	subs.w	fp, sl, r4
   25fc6:	d00b      	beq.n	25fe0 <_vfiprintf_r+0xc0>
   25fc8:	465b      	mov	r3, fp
   25fca:	4622      	mov	r2, r4
   25fcc:	4629      	mov	r1, r5
   25fce:	4630      	mov	r0, r6
   25fd0:	f006 f9d0 	bl	2c374 <__sfputs_r>
   25fd4:	3001      	adds	r0, #1
   25fd6:	f000 80a6 	beq.w	26126 <_vfiprintf_r+0x206>
   25fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25fdc:	445a      	add	r2, fp
   25fde:	9209      	str	r2, [sp, #36]	; 0x24
   25fe0:	f89a 3000 	ldrb.w	r3, [sl]
   25fe4:	2b00      	cmp	r3, #0
   25fe6:	f000 809e 	beq.w	26126 <_vfiprintf_r+0x206>
   25fea:	2300      	movs	r3, #0
   25fec:	f04f 32ff 	mov.w	r2, #4294967295
   25ff0:	f10a 0a01 	add.w	sl, sl, #1
   25ff4:	9304      	str	r3, [sp, #16]
   25ff6:	9307      	str	r3, [sp, #28]
   25ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   25ffc:	931a      	str	r3, [sp, #104]	; 0x68
   25ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
   26002:	4654      	mov	r4, sl
   26004:	2205      	movs	r2, #5
   26006:	4857      	ldr	r0, [pc, #348]	; (26164 <_vfiprintf_r+0x244>)
   26008:	f814 1b01 	ldrb.w	r1, [r4], #1
   2600c:	f005 feb8 	bl	2bd80 <memchr>
   26010:	9b04      	ldr	r3, [sp, #16]
   26012:	b9d0      	cbnz	r0, 2604a <_vfiprintf_r+0x12a>
   26014:	06d9      	lsls	r1, r3, #27
   26016:	bf44      	itt	mi
   26018:	2220      	movmi	r2, #32
   2601a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2601e:	071a      	lsls	r2, r3, #28
   26020:	bf44      	itt	mi
   26022:	222b      	movmi	r2, #43	; 0x2b
   26024:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   26028:	f89a 2000 	ldrb.w	r2, [sl]
   2602c:	2a2a      	cmp	r2, #42	; 0x2a
   2602e:	d014      	beq.n	2605a <_vfiprintf_r+0x13a>
   26030:	9a07      	ldr	r2, [sp, #28]
   26032:	4654      	mov	r4, sl
   26034:	2000      	movs	r0, #0
   26036:	f04f 0c0a 	mov.w	ip, #10
   2603a:	4621      	mov	r1, r4
   2603c:	f811 3b01 	ldrb.w	r3, [r1], #1
   26040:	3b30      	subs	r3, #48	; 0x30
   26042:	2b09      	cmp	r3, #9
   26044:	d94a      	bls.n	260dc <_vfiprintf_r+0x1bc>
   26046:	b970      	cbnz	r0, 26066 <_vfiprintf_r+0x146>
   26048:	e014      	b.n	26074 <_vfiprintf_r+0x154>
   2604a:	eba0 0008 	sub.w	r0, r0, r8
   2604e:	46a2      	mov	sl, r4
   26050:	fa09 f000 	lsl.w	r0, r9, r0
   26054:	4318      	orrs	r0, r3
   26056:	9004      	str	r0, [sp, #16]
   26058:	e7d3      	b.n	26002 <_vfiprintf_r+0xe2>
   2605a:	9a03      	ldr	r2, [sp, #12]
   2605c:	1d11      	adds	r1, r2, #4
   2605e:	6812      	ldr	r2, [r2, #0]
   26060:	2a00      	cmp	r2, #0
   26062:	9103      	str	r1, [sp, #12]
   26064:	db01      	blt.n	2606a <_vfiprintf_r+0x14a>
   26066:	9207      	str	r2, [sp, #28]
   26068:	e004      	b.n	26074 <_vfiprintf_r+0x154>
   2606a:	4252      	negs	r2, r2
   2606c:	f043 0302 	orr.w	r3, r3, #2
   26070:	9207      	str	r2, [sp, #28]
   26072:	9304      	str	r3, [sp, #16]
   26074:	7823      	ldrb	r3, [r4, #0]
   26076:	2b2e      	cmp	r3, #46	; 0x2e
   26078:	d10a      	bne.n	26090 <_vfiprintf_r+0x170>
   2607a:	7863      	ldrb	r3, [r4, #1]
   2607c:	2b2a      	cmp	r3, #42	; 0x2a
   2607e:	d132      	bne.n	260e6 <_vfiprintf_r+0x1c6>
   26080:	9b03      	ldr	r3, [sp, #12]
   26082:	3402      	adds	r4, #2
   26084:	1d1a      	adds	r2, r3, #4
   26086:	681b      	ldr	r3, [r3, #0]
   26088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2608c:	9203      	str	r2, [sp, #12]
   2608e:	9305      	str	r3, [sp, #20]
   26090:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 26168 <_vfiprintf_r+0x248>
   26094:	2203      	movs	r2, #3
   26096:	7821      	ldrb	r1, [r4, #0]
   26098:	4650      	mov	r0, sl
   2609a:	f005 fe71 	bl	2bd80 <memchr>
   2609e:	b138      	cbz	r0, 260b0 <_vfiprintf_r+0x190>
   260a0:	eba0 000a 	sub.w	r0, r0, sl
   260a4:	2240      	movs	r2, #64	; 0x40
   260a6:	9b04      	ldr	r3, [sp, #16]
   260a8:	3401      	adds	r4, #1
   260aa:	4082      	lsls	r2, r0
   260ac:	4313      	orrs	r3, r2
   260ae:	9304      	str	r3, [sp, #16]
   260b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   260b4:	2206      	movs	r2, #6
   260b6:	482d      	ldr	r0, [pc, #180]	; (2616c <_vfiprintf_r+0x24c>)
   260b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   260bc:	f005 fe60 	bl	2bd80 <memchr>
   260c0:	2800      	cmp	r0, #0
   260c2:	d03f      	beq.n	26144 <_vfiprintf_r+0x224>
   260c4:	4b2a      	ldr	r3, [pc, #168]	; (26170 <_vfiprintf_r+0x250>)
   260c6:	bb1b      	cbnz	r3, 26110 <_vfiprintf_r+0x1f0>
   260c8:	9b03      	ldr	r3, [sp, #12]
   260ca:	3307      	adds	r3, #7
   260cc:	f023 0307 	bic.w	r3, r3, #7
   260d0:	3308      	adds	r3, #8
   260d2:	9303      	str	r3, [sp, #12]
   260d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   260d6:	443b      	add	r3, r7
   260d8:	9309      	str	r3, [sp, #36]	; 0x24
   260da:	e76b      	b.n	25fb4 <_vfiprintf_r+0x94>
   260dc:	fb0c 3202 	mla	r2, ip, r2, r3
   260e0:	460c      	mov	r4, r1
   260e2:	2001      	movs	r0, #1
   260e4:	e7a9      	b.n	2603a <_vfiprintf_r+0x11a>
   260e6:	2300      	movs	r3, #0
   260e8:	3401      	adds	r4, #1
   260ea:	f04f 0c0a 	mov.w	ip, #10
   260ee:	4619      	mov	r1, r3
   260f0:	9305      	str	r3, [sp, #20]
   260f2:	4620      	mov	r0, r4
   260f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   260f8:	3a30      	subs	r2, #48	; 0x30
   260fa:	2a09      	cmp	r2, #9
   260fc:	d903      	bls.n	26106 <_vfiprintf_r+0x1e6>
   260fe:	2b00      	cmp	r3, #0
   26100:	d0c6      	beq.n	26090 <_vfiprintf_r+0x170>
   26102:	9105      	str	r1, [sp, #20]
   26104:	e7c4      	b.n	26090 <_vfiprintf_r+0x170>
   26106:	fb0c 2101 	mla	r1, ip, r1, r2
   2610a:	4604      	mov	r4, r0
   2610c:	2301      	movs	r3, #1
   2610e:	e7f0      	b.n	260f2 <_vfiprintf_r+0x1d2>
   26110:	ab03      	add	r3, sp, #12
   26112:	462a      	mov	r2, r5
   26114:	a904      	add	r1, sp, #16
   26116:	4630      	mov	r0, r6
   26118:	9300      	str	r3, [sp, #0]
   2611a:	4b16      	ldr	r3, [pc, #88]	; (26174 <_vfiprintf_r+0x254>)
   2611c:	f7fe feda 	bl	24ed4 <_printf_float>
   26120:	4607      	mov	r7, r0
   26122:	1c78      	adds	r0, r7, #1
   26124:	d1d6      	bne.n	260d4 <_vfiprintf_r+0x1b4>
   26126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   26128:	07d9      	lsls	r1, r3, #31
   2612a:	d405      	bmi.n	26138 <_vfiprintf_r+0x218>
   2612c:	89ab      	ldrh	r3, [r5, #12]
   2612e:	059a      	lsls	r2, r3, #22
   26130:	d402      	bmi.n	26138 <_vfiprintf_r+0x218>
   26132:	6da8      	ldr	r0, [r5, #88]	; 0x58
   26134:	f7eb fccc 	bl	11ad0 <__retarget_lock_release_recursive>
   26138:	89ab      	ldrh	r3, [r5, #12]
   2613a:	065b      	lsls	r3, r3, #25
   2613c:	f53f af16 	bmi.w	25f6c <_vfiprintf_r+0x4c>
   26140:	9809      	ldr	r0, [sp, #36]	; 0x24
   26142:	e715      	b.n	25f70 <_vfiprintf_r+0x50>
   26144:	ab03      	add	r3, sp, #12
   26146:	462a      	mov	r2, r5
   26148:	a904      	add	r1, sp, #16
   2614a:	4630      	mov	r0, r6
   2614c:	9300      	str	r3, [sp, #0]
   2614e:	4b09      	ldr	r3, [pc, #36]	; (26174 <_vfiprintf_r+0x254>)
   26150:	f7ff f8f6 	bl	25340 <_printf_i>
   26154:	e7e4      	b.n	26120 <_vfiprintf_r+0x200>
   26156:	bf00      	nop
   26158:	0002dcd0 	.word	0x0002dcd0
   2615c:	0002dcb0 	.word	0x0002dcb0
   26160:	0002dc90 	.word	0x0002dc90
   26164:	00033cfc 	.word	0x00033cfc
   26168:	00033d02 	.word	0x00033d02
   2616c:	00033d06 	.word	0x00033d06
   26170:	00024ed5 	.word	0x00024ed5
   26174:	0002c375 	.word	0x0002c375

00026178 <__swbuf_r>:
   26178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2617a:	460e      	mov	r6, r1
   2617c:	4614      	mov	r4, r2
   2617e:	4605      	mov	r5, r0
   26180:	b118      	cbz	r0, 2618a <__swbuf_r+0x12>
   26182:	6983      	ldr	r3, [r0, #24]
   26184:	b90b      	cbnz	r3, 2618a <__swbuf_r+0x12>
   26186:	f7ff fb0d 	bl	257a4 <__sinit>
   2618a:	4b21      	ldr	r3, [pc, #132]	; (26210 <__swbuf_r+0x98>)
   2618c:	429c      	cmp	r4, r3
   2618e:	d110      	bne.n	261b2 <__swbuf_r+0x3a>
   26190:	686c      	ldr	r4, [r5, #4]
   26192:	69a3      	ldr	r3, [r4, #24]
   26194:	60a3      	str	r3, [r4, #8]
   26196:	89a3      	ldrh	r3, [r4, #12]
   26198:	071a      	lsls	r2, r3, #28
   2619a:	d501      	bpl.n	261a0 <__swbuf_r+0x28>
   2619c:	6923      	ldr	r3, [r4, #16]
   2619e:	b993      	cbnz	r3, 261c6 <__swbuf_r+0x4e>
   261a0:	4621      	mov	r1, r4
   261a2:	4628      	mov	r0, r5
   261a4:	f000 f84c 	bl	26240 <__swsetup_r>
   261a8:	b168      	cbz	r0, 261c6 <__swbuf_r+0x4e>
   261aa:	f04f 37ff 	mov.w	r7, #4294967295
   261ae:	4638      	mov	r0, r7
   261b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   261b2:	4b18      	ldr	r3, [pc, #96]	; (26214 <__swbuf_r+0x9c>)
   261b4:	429c      	cmp	r4, r3
   261b6:	d101      	bne.n	261bc <__swbuf_r+0x44>
   261b8:	68ac      	ldr	r4, [r5, #8]
   261ba:	e7ea      	b.n	26192 <__swbuf_r+0x1a>
   261bc:	4b16      	ldr	r3, [pc, #88]	; (26218 <__swbuf_r+0xa0>)
   261be:	429c      	cmp	r4, r3
   261c0:	bf08      	it	eq
   261c2:	68ec      	ldreq	r4, [r5, #12]
   261c4:	e7e5      	b.n	26192 <__swbuf_r+0x1a>
   261c6:	6923      	ldr	r3, [r4, #16]
   261c8:	b2f6      	uxtb	r6, r6
   261ca:	6820      	ldr	r0, [r4, #0]
   261cc:	4637      	mov	r7, r6
   261ce:	1ac0      	subs	r0, r0, r3
   261d0:	6963      	ldr	r3, [r4, #20]
   261d2:	4283      	cmp	r3, r0
   261d4:	dc05      	bgt.n	261e2 <__swbuf_r+0x6a>
   261d6:	4621      	mov	r1, r4
   261d8:	4628      	mov	r0, r5
   261da:	f000 f8ad 	bl	26338 <_fflush_r>
   261de:	2800      	cmp	r0, #0
   261e0:	d1e3      	bne.n	261aa <__swbuf_r+0x32>
   261e2:	68a3      	ldr	r3, [r4, #8]
   261e4:	3001      	adds	r0, #1
   261e6:	3b01      	subs	r3, #1
   261e8:	60a3      	str	r3, [r4, #8]
   261ea:	6823      	ldr	r3, [r4, #0]
   261ec:	1c5a      	adds	r2, r3, #1
   261ee:	6022      	str	r2, [r4, #0]
   261f0:	701e      	strb	r6, [r3, #0]
   261f2:	6963      	ldr	r3, [r4, #20]
   261f4:	4283      	cmp	r3, r0
   261f6:	d004      	beq.n	26202 <__swbuf_r+0x8a>
   261f8:	89a3      	ldrh	r3, [r4, #12]
   261fa:	07db      	lsls	r3, r3, #31
   261fc:	d5d7      	bpl.n	261ae <__swbuf_r+0x36>
   261fe:	2e0a      	cmp	r6, #10
   26200:	d1d5      	bne.n	261ae <__swbuf_r+0x36>
   26202:	4621      	mov	r1, r4
   26204:	4628      	mov	r0, r5
   26206:	f000 f897 	bl	26338 <_fflush_r>
   2620a:	2800      	cmp	r0, #0
   2620c:	d0cf      	beq.n	261ae <__swbuf_r+0x36>
   2620e:	e7cc      	b.n	261aa <__swbuf_r+0x32>
   26210:	0002dcd0 	.word	0x0002dcd0
   26214:	0002dcb0 	.word	0x0002dcb0
   26218:	0002dc90 	.word	0x0002dc90

0002621c <_write_r>:
   2621c:	b538      	push	{r3, r4, r5, lr}
   2621e:	4604      	mov	r4, r0
   26220:	4d06      	ldr	r5, [pc, #24]	; (2623c <_write_r+0x20>)
   26222:	4608      	mov	r0, r1
   26224:	4611      	mov	r1, r2
   26226:	2200      	movs	r2, #0
   26228:	602a      	str	r2, [r5, #0]
   2622a:	461a      	mov	r2, r3
   2622c:	f002 f925 	bl	2847a <_write>
   26230:	1c43      	adds	r3, r0, #1
   26232:	d102      	bne.n	2623a <_write_r+0x1e>
   26234:	682b      	ldr	r3, [r5, #0]
   26236:	b103      	cbz	r3, 2623a <_write_r+0x1e>
   26238:	6023      	str	r3, [r4, #0]
   2623a:	bd38      	pop	{r3, r4, r5, pc}
   2623c:	20021a84 	.word	0x20021a84

00026240 <__swsetup_r>:
   26240:	4b31      	ldr	r3, [pc, #196]	; (26308 <__swsetup_r+0xc8>)
   26242:	b570      	push	{r4, r5, r6, lr}
   26244:	681d      	ldr	r5, [r3, #0]
   26246:	4606      	mov	r6, r0
   26248:	460c      	mov	r4, r1
   2624a:	b125      	cbz	r5, 26256 <__swsetup_r+0x16>
   2624c:	69ab      	ldr	r3, [r5, #24]
   2624e:	b913      	cbnz	r3, 26256 <__swsetup_r+0x16>
   26250:	4628      	mov	r0, r5
   26252:	f7ff faa7 	bl	257a4 <__sinit>
   26256:	4b2d      	ldr	r3, [pc, #180]	; (2630c <__swsetup_r+0xcc>)
   26258:	429c      	cmp	r4, r3
   2625a:	d10e      	bne.n	2627a <__swsetup_r+0x3a>
   2625c:	686c      	ldr	r4, [r5, #4]
   2625e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26262:	071a      	lsls	r2, r3, #28
   26264:	d42c      	bmi.n	262c0 <__swsetup_r+0x80>
   26266:	06dd      	lsls	r5, r3, #27
   26268:	d411      	bmi.n	2628e <__swsetup_r+0x4e>
   2626a:	2209      	movs	r2, #9
   2626c:	6032      	str	r2, [r6, #0]
   2626e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26272:	f04f 30ff 	mov.w	r0, #4294967295
   26276:	81a3      	strh	r3, [r4, #12]
   26278:	e03d      	b.n	262f6 <__swsetup_r+0xb6>
   2627a:	4b25      	ldr	r3, [pc, #148]	; (26310 <__swsetup_r+0xd0>)
   2627c:	429c      	cmp	r4, r3
   2627e:	d101      	bne.n	26284 <__swsetup_r+0x44>
   26280:	68ac      	ldr	r4, [r5, #8]
   26282:	e7ec      	b.n	2625e <__swsetup_r+0x1e>
   26284:	4b23      	ldr	r3, [pc, #140]	; (26314 <__swsetup_r+0xd4>)
   26286:	429c      	cmp	r4, r3
   26288:	bf08      	it	eq
   2628a:	68ec      	ldreq	r4, [r5, #12]
   2628c:	e7e7      	b.n	2625e <__swsetup_r+0x1e>
   2628e:	0758      	lsls	r0, r3, #29
   26290:	d512      	bpl.n	262b8 <__swsetup_r+0x78>
   26292:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26294:	b141      	cbz	r1, 262a8 <__swsetup_r+0x68>
   26296:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2629a:	4299      	cmp	r1, r3
   2629c:	d002      	beq.n	262a4 <__swsetup_r+0x64>
   2629e:	4630      	mov	r0, r6
   262a0:	f7fe fd74 	bl	24d8c <_free_r>
   262a4:	2300      	movs	r3, #0
   262a6:	6363      	str	r3, [r4, #52]	; 0x34
   262a8:	89a3      	ldrh	r3, [r4, #12]
   262aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   262ae:	81a3      	strh	r3, [r4, #12]
   262b0:	2300      	movs	r3, #0
   262b2:	6063      	str	r3, [r4, #4]
   262b4:	6923      	ldr	r3, [r4, #16]
   262b6:	6023      	str	r3, [r4, #0]
   262b8:	89a3      	ldrh	r3, [r4, #12]
   262ba:	f043 0308 	orr.w	r3, r3, #8
   262be:	81a3      	strh	r3, [r4, #12]
   262c0:	6923      	ldr	r3, [r4, #16]
   262c2:	b94b      	cbnz	r3, 262d8 <__swsetup_r+0x98>
   262c4:	89a3      	ldrh	r3, [r4, #12]
   262c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
   262ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   262ce:	d003      	beq.n	262d8 <__swsetup_r+0x98>
   262d0:	4621      	mov	r1, r4
   262d2:	4630      	mov	r0, r6
   262d4:	f000 f87e 	bl	263d4 <__smakebuf_r>
   262d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   262dc:	f013 0201 	ands.w	r2, r3, #1
   262e0:	d00a      	beq.n	262f8 <__swsetup_r+0xb8>
   262e2:	2200      	movs	r2, #0
   262e4:	60a2      	str	r2, [r4, #8]
   262e6:	6962      	ldr	r2, [r4, #20]
   262e8:	4252      	negs	r2, r2
   262ea:	61a2      	str	r2, [r4, #24]
   262ec:	6922      	ldr	r2, [r4, #16]
   262ee:	b942      	cbnz	r2, 26302 <__swsetup_r+0xc2>
   262f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   262f4:	d1bb      	bne.n	2626e <__swsetup_r+0x2e>
   262f6:	bd70      	pop	{r4, r5, r6, pc}
   262f8:	0799      	lsls	r1, r3, #30
   262fa:	bf58      	it	pl
   262fc:	6962      	ldrpl	r2, [r4, #20]
   262fe:	60a2      	str	r2, [r4, #8]
   26300:	e7f4      	b.n	262ec <__swsetup_r+0xac>
   26302:	2000      	movs	r0, #0
   26304:	e7f7      	b.n	262f6 <__swsetup_r+0xb6>
   26306:	bf00      	nop
   26308:	20008754 	.word	0x20008754
   2630c:	0002dcd0 	.word	0x0002dcd0
   26310:	0002dcb0 	.word	0x0002dcb0
   26314:	0002dc90 	.word	0x0002dc90

00026318 <_close_r>:
   26318:	b538      	push	{r3, r4, r5, lr}
   2631a:	2300      	movs	r3, #0
   2631c:	4d05      	ldr	r5, [pc, #20]	; (26334 <_close_r+0x1c>)
   2631e:	4604      	mov	r4, r0
   26320:	4608      	mov	r0, r1
   26322:	602b      	str	r3, [r5, #0]
   26324:	f002 f8ad 	bl	28482 <_close>
   26328:	1c43      	adds	r3, r0, #1
   2632a:	d102      	bne.n	26332 <_close_r+0x1a>
   2632c:	682b      	ldr	r3, [r5, #0]
   2632e:	b103      	cbz	r3, 26332 <_close_r+0x1a>
   26330:	6023      	str	r3, [r4, #0]
   26332:	bd38      	pop	{r3, r4, r5, pc}
   26334:	20021a84 	.word	0x20021a84

00026338 <_fflush_r>:
   26338:	b538      	push	{r3, r4, r5, lr}
   2633a:	690b      	ldr	r3, [r1, #16]
   2633c:	4605      	mov	r5, r0
   2633e:	460c      	mov	r4, r1
   26340:	b913      	cbnz	r3, 26348 <_fflush_r+0x10>
   26342:	2500      	movs	r5, #0
   26344:	4628      	mov	r0, r5
   26346:	bd38      	pop	{r3, r4, r5, pc}
   26348:	b118      	cbz	r0, 26352 <_fflush_r+0x1a>
   2634a:	6983      	ldr	r3, [r0, #24]
   2634c:	b90b      	cbnz	r3, 26352 <_fflush_r+0x1a>
   2634e:	f7ff fa29 	bl	257a4 <__sinit>
   26352:	4b14      	ldr	r3, [pc, #80]	; (263a4 <_fflush_r+0x6c>)
   26354:	429c      	cmp	r4, r3
   26356:	d11b      	bne.n	26390 <_fflush_r+0x58>
   26358:	686c      	ldr	r4, [r5, #4]
   2635a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2635e:	2b00      	cmp	r3, #0
   26360:	d0ef      	beq.n	26342 <_fflush_r+0xa>
   26362:	6e62      	ldr	r2, [r4, #100]	; 0x64
   26364:	07d0      	lsls	r0, r2, #31
   26366:	d404      	bmi.n	26372 <_fflush_r+0x3a>
   26368:	0599      	lsls	r1, r3, #22
   2636a:	d402      	bmi.n	26372 <_fflush_r+0x3a>
   2636c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2636e:	f7eb fb93 	bl	11a98 <__retarget_lock_acquire_recursive>
   26372:	4628      	mov	r0, r5
   26374:	4621      	mov	r1, r4
   26376:	f006 f859 	bl	2c42c <__sflush_r>
   2637a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2637c:	4605      	mov	r5, r0
   2637e:	07da      	lsls	r2, r3, #31
   26380:	d4e0      	bmi.n	26344 <_fflush_r+0xc>
   26382:	89a3      	ldrh	r3, [r4, #12]
   26384:	059b      	lsls	r3, r3, #22
   26386:	d4dd      	bmi.n	26344 <_fflush_r+0xc>
   26388:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2638a:	f7eb fba1 	bl	11ad0 <__retarget_lock_release_recursive>
   2638e:	e7d9      	b.n	26344 <_fflush_r+0xc>
   26390:	4b05      	ldr	r3, [pc, #20]	; (263a8 <_fflush_r+0x70>)
   26392:	429c      	cmp	r4, r3
   26394:	d101      	bne.n	2639a <_fflush_r+0x62>
   26396:	68ac      	ldr	r4, [r5, #8]
   26398:	e7df      	b.n	2635a <_fflush_r+0x22>
   2639a:	4b04      	ldr	r3, [pc, #16]	; (263ac <_fflush_r+0x74>)
   2639c:	429c      	cmp	r4, r3
   2639e:	bf08      	it	eq
   263a0:	68ec      	ldreq	r4, [r5, #12]
   263a2:	e7da      	b.n	2635a <_fflush_r+0x22>
   263a4:	0002dcd0 	.word	0x0002dcd0
   263a8:	0002dcb0 	.word	0x0002dcb0
   263ac:	0002dc90 	.word	0x0002dc90

000263b0 <_lseek_r>:
   263b0:	b538      	push	{r3, r4, r5, lr}
   263b2:	4604      	mov	r4, r0
   263b4:	4d06      	ldr	r5, [pc, #24]	; (263d0 <_lseek_r+0x20>)
   263b6:	4608      	mov	r0, r1
   263b8:	4611      	mov	r1, r2
   263ba:	2200      	movs	r2, #0
   263bc:	602a      	str	r2, [r5, #0]
   263be:	461a      	mov	r2, r3
   263c0:	f002 f862 	bl	28488 <_lseek>
   263c4:	1c43      	adds	r3, r0, #1
   263c6:	d102      	bne.n	263ce <_lseek_r+0x1e>
   263c8:	682b      	ldr	r3, [r5, #0]
   263ca:	b103      	cbz	r3, 263ce <_lseek_r+0x1e>
   263cc:	6023      	str	r3, [r4, #0]
   263ce:	bd38      	pop	{r3, r4, r5, pc}
   263d0:	20021a84 	.word	0x20021a84

000263d4 <__smakebuf_r>:
   263d4:	898b      	ldrh	r3, [r1, #12]
   263d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   263d8:	079d      	lsls	r5, r3, #30
   263da:	4606      	mov	r6, r0
   263dc:	460c      	mov	r4, r1
   263de:	d507      	bpl.n	263f0 <__smakebuf_r+0x1c>
   263e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   263e4:	6023      	str	r3, [r4, #0]
   263e6:	6123      	str	r3, [r4, #16]
   263e8:	2301      	movs	r3, #1
   263ea:	6163      	str	r3, [r4, #20]
   263ec:	b003      	add	sp, #12
   263ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   263f0:	ab01      	add	r3, sp, #4
   263f2:	466a      	mov	r2, sp
   263f4:	f006 f899 	bl	2c52a <__swhatbuf_r>
   263f8:	9f00      	ldr	r7, [sp, #0]
   263fa:	4605      	mov	r5, r0
   263fc:	4630      	mov	r0, r6
   263fe:	4639      	mov	r1, r7
   26400:	f7fe fd0e 	bl	24e20 <_malloc_r>
   26404:	b948      	cbnz	r0, 2641a <__smakebuf_r+0x46>
   26406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2640a:	059a      	lsls	r2, r3, #22
   2640c:	d4ee      	bmi.n	263ec <__smakebuf_r+0x18>
   2640e:	f023 0303 	bic.w	r3, r3, #3
   26412:	f043 0302 	orr.w	r3, r3, #2
   26416:	81a3      	strh	r3, [r4, #12]
   26418:	e7e2      	b.n	263e0 <__smakebuf_r+0xc>
   2641a:	4b0d      	ldr	r3, [pc, #52]	; (26450 <__smakebuf_r+0x7c>)
   2641c:	62b3      	str	r3, [r6, #40]	; 0x28
   2641e:	89a3      	ldrh	r3, [r4, #12]
   26420:	6020      	str	r0, [r4, #0]
   26422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26426:	81a3      	strh	r3, [r4, #12]
   26428:	9b01      	ldr	r3, [sp, #4]
   2642a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2642e:	b15b      	cbz	r3, 26448 <__smakebuf_r+0x74>
   26430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26434:	4630      	mov	r0, r6
   26436:	f000 f84b 	bl	264d0 <_isatty_r>
   2643a:	b128      	cbz	r0, 26448 <__smakebuf_r+0x74>
   2643c:	89a3      	ldrh	r3, [r4, #12]
   2643e:	f023 0303 	bic.w	r3, r3, #3
   26442:	f043 0301 	orr.w	r3, r3, #1
   26446:	81a3      	strh	r3, [r4, #12]
   26448:	89a3      	ldrh	r3, [r4, #12]
   2644a:	431d      	orrs	r5, r3
   2644c:	81a5      	strh	r5, [r4, #12]
   2644e:	e7cd      	b.n	263ec <__smakebuf_r+0x18>
   26450:	00025769 	.word	0x00025769

00026454 <_read_r>:
   26454:	b538      	push	{r3, r4, r5, lr}
   26456:	4604      	mov	r4, r0
   26458:	4d06      	ldr	r5, [pc, #24]	; (26474 <_read_r+0x20>)
   2645a:	4608      	mov	r0, r1
   2645c:	4611      	mov	r1, r2
   2645e:	2200      	movs	r2, #0
   26460:	602a      	str	r2, [r5, #0]
   26462:	461a      	mov	r2, r3
   26464:	f002 f805 	bl	28472 <_read>
   26468:	1c43      	adds	r3, r0, #1
   2646a:	d102      	bne.n	26472 <_read_r+0x1e>
   2646c:	682b      	ldr	r3, [r5, #0]
   2646e:	b103      	cbz	r3, 26472 <_read_r+0x1e>
   26470:	6023      	str	r3, [r4, #0]
   26472:	bd38      	pop	{r3, r4, r5, pc}
   26474:	20021a84 	.word	0x20021a84

00026478 <raise>:
   26478:	4b02      	ldr	r3, [pc, #8]	; (26484 <raise+0xc>)
   2647a:	4601      	mov	r1, r0
   2647c:	6818      	ldr	r0, [r3, #0]
   2647e:	f006 b88b 	b.w	2c598 <_raise_r>
   26482:	bf00      	nop
   26484:	20008754 	.word	0x20008754

00026488 <_kill_r>:
   26488:	b538      	push	{r3, r4, r5, lr}
   2648a:	2300      	movs	r3, #0
   2648c:	4d06      	ldr	r5, [pc, #24]	; (264a8 <_kill_r+0x20>)
   2648e:	4604      	mov	r4, r0
   26490:	4608      	mov	r0, r1
   26492:	4611      	mov	r1, r2
   26494:	602b      	str	r3, [r5, #0]
   26496:	f001 fffe 	bl	28496 <_kill>
   2649a:	1c43      	adds	r3, r0, #1
   2649c:	d102      	bne.n	264a4 <_kill_r+0x1c>
   2649e:	682b      	ldr	r3, [r5, #0]
   264a0:	b103      	cbz	r3, 264a4 <_kill_r+0x1c>
   264a2:	6023      	str	r3, [r4, #0]
   264a4:	bd38      	pop	{r3, r4, r5, pc}
   264a6:	bf00      	nop
   264a8:	20021a84 	.word	0x20021a84

000264ac <_fstat_r>:
   264ac:	b538      	push	{r3, r4, r5, lr}
   264ae:	2300      	movs	r3, #0
   264b0:	4d06      	ldr	r5, [pc, #24]	; (264cc <_fstat_r+0x20>)
   264b2:	4604      	mov	r4, r0
   264b4:	4608      	mov	r0, r1
   264b6:	4611      	mov	r1, r2
   264b8:	602b      	str	r3, [r5, #0]
   264ba:	f001 fff0 	bl	2849e <_fstat>
   264be:	1c43      	adds	r3, r0, #1
   264c0:	d102      	bne.n	264c8 <_fstat_r+0x1c>
   264c2:	682b      	ldr	r3, [r5, #0]
   264c4:	b103      	cbz	r3, 264c8 <_fstat_r+0x1c>
   264c6:	6023      	str	r3, [r4, #0]
   264c8:	bd38      	pop	{r3, r4, r5, pc}
   264ca:	bf00      	nop
   264cc:	20021a84 	.word	0x20021a84

000264d0 <_isatty_r>:
   264d0:	b538      	push	{r3, r4, r5, lr}
   264d2:	2300      	movs	r3, #0
   264d4:	4d05      	ldr	r5, [pc, #20]	; (264ec <_isatty_r+0x1c>)
   264d6:	4604      	mov	r4, r0
   264d8:	4608      	mov	r0, r1
   264da:	602b      	str	r3, [r5, #0]
   264dc:	f001 ffd6 	bl	2848c <_isatty>
   264e0:	1c43      	adds	r3, r0, #1
   264e2:	d102      	bne.n	264ea <_isatty_r+0x1a>
   264e4:	682b      	ldr	r3, [r5, #0]
   264e6:	b103      	cbz	r3, 264ea <_isatty_r+0x1a>
   264e8:	6023      	str	r3, [r4, #0]
   264ea:	bd38      	pop	{r3, r4, r5, pc}
   264ec:	20021a84 	.word	0x20021a84

000264f0 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   264f0:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   264f2:	f7fd faf5 	bl	23ae0 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   264f6:	f7fe fbdd 	bl	24cb4 <k_thread_system_pool_assign>
    return 0;
}
   264fa:	2000      	movs	r0, #0
   264fc:	bd08      	pop	{r3, pc}

000264fe <uart_cb_2>:
}
   264fe:	4770      	bx	lr

00026500 <z_log_msg_static_create.constprop.0>:
   26500:	2300      	movs	r3, #0
   26502:	f7e8 ba27 	b.w	e954 <z_impl_z_log_msg_static_create>

00026506 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   26506:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   26508:	6883      	ldr	r3, [r0, #8]
   2650a:	2228      	movs	r2, #40	; 0x28
   2650c:	68dc      	ldr	r4, [r3, #12]
   2650e:	2332      	movs	r3, #50	; 0x32
   26510:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   26512:	bc10      	pop	{r4}
   26514:	4760      	bx	ip

00026516 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   26516:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   26518:	6883      	ldr	r3, [r0, #8]
   2651a:	685c      	ldr	r4, [r3, #4]
   2651c:	f04f 33ff 	mov.w	r3, #4294967295
   26520:	46a4      	mov	ip, r4
}
   26522:	bc10      	pop	{r4}
   26524:	4760      	bx	ip

00026526 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   26526:	f7fb bbf7 	b.w	21d18 <z_impl_k_sem_take>

0002652a <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2652a:	6883      	ldr	r3, [r0, #8]
   2652c:	69db      	ldr	r3, [r3, #28]
   2652e:	b10b      	cbz	r3, 26534 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   26530:	2201      	movs	r2, #1
   26532:	4718      	bx	r3
}
   26534:	4770      	bx	lr

00026536 <send_protobuf>:
void send_protobuf(void){
   26536:	b510      	push	{r4, lr}
   26538:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   2653c:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   26540:	4620      	mov	r0, r4
   26542:	f7e5 fc07 	bl	bd54 <send_array_dd_v0>
    send_bluetooth(buf_proto);
   26546:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   2654a:	f240 72cc 	movw	r2, #1996	; 0x7cc
   2654e:	4668      	mov	r0, sp
   26550:	f005 fc34 	bl	2bdbc <memcpy>
   26554:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26558:	f7e5 f872 	bl	b640 <send_bluetooth>
}
   2655c:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   26560:	bd10      	pop	{r4, pc}

00026562 <error>:
{
   26562:	b508      	push	{r3, lr}
	turn_off_all_leds();
   26564:	f7e5 f9cc 	bl	b900 <turn_off_all_leds>
	return z_impl_k_sleep(timeout);
   26568:	2100      	movs	r1, #0
   2656a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2656e:	f7fd fa83 	bl	23a78 <z_impl_k_sleep>
	while (true) {
   26572:	e7f9      	b.n	26568 <error+0x6>

00026574 <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   26574:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   26576:	6806      	ldr	r6, [r0, #0]
   26578:	8902      	ldrh	r2, [r0, #8]
   2657a:	8a33      	ldrh	r3, [r6, #16]
   2657c:	429a      	cmp	r2, r3
   2657e:	d271      	bcs.n	26664 <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   26580:	6831      	ldr	r1, [r6, #0]
   26582:	8942      	ldrh	r2, [r0, #10]
   26584:	0093      	lsls	r3, r2, #2
   26586:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   2658a:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   2658e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   26592:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   26594:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   26596:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   2659a:	d01f      	beq.n	265dc <load_descriptor_values+0x68>
   2659c:	2902      	cmp	r1, #2
   2659e:	d02a      	beq.n	265f6 <load_descriptor_values+0x82>
   265a0:	2900      	cmp	r1, #0
   265a2:	d135      	bne.n	26610 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   265a4:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   265a8:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   265ac:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   265b0:	0f12      	lsrs	r2, r2, #28
   265b2:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   265b4:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   265b6:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   265ba:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   265bc:	2a00      	cmp	r2, #0
   265be:	d134      	bne.n	2662a <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   265c0:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   265c2:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   265c4:	f004 040e 	and.w	r4, r4, #14
   265c8:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   265ca:	bf11      	iteee	ne
   265cc:	2300      	movne	r3, #0
   265ce:	89c2      	ldrheq	r2, [r0, #14]
   265d0:	6873      	ldreq	r3, [r6, #4]
   265d2:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   265d6:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   265d8:	2001      	movs	r0, #1
}
   265da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   265dc:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   265de:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   265e2:	4419      	add	r1, r3
   265e4:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   265e6:	0f0b      	lsrs	r3, r1, #28
   265e8:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   265ec:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   265ee:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   265f0:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   265f4:	e7dd      	b.n	265b2 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   265f6:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   265f8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   265fc:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   265fe:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   26602:	0a1a      	lsrs	r2, r3, #8
   26604:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   26608:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   2660a:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   2660c:	898a      	ldrh	r2, [r1, #12]
            break;
   2660e:	e7d0      	b.n	265b2 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   26610:	6832      	ldr	r2, [r6, #0]
   26612:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   26614:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   26618:	0a19      	lsrs	r1, r3, #8
   2661a:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   2661e:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   26622:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   26624:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   26626:	b25b      	sxtb	r3, r3
            break;
   26628:	e7c3      	b.n	265b2 <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   2662a:	443a      	add	r2, r7
   2662c:	6182      	str	r2, [r0, #24]
        if (size_offset)
   2662e:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   26632:	b123      	cbz	r3, 2663e <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   26634:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   26636:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   26638:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   2663a:	d109      	bne.n	26650 <load_descriptor_values+0xdc>
   2663c:	e00f      	b.n	2665e <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   2663e:	f004 0530 	and.w	r5, r4, #48	; 0x30
   26642:	2d20      	cmp	r5, #32
   26644:	d1f7      	bne.n	26636 <load_descriptor_values+0xc2>
   26646:	2c3f      	cmp	r4, #63	; 0x3f
   26648:	d804      	bhi.n	26654 <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   2664a:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   2664e:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   26650:	61c2      	str	r2, [r0, #28]
   26652:	e7b7      	b.n	265c4 <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   26654:	2980      	cmp	r1, #128	; 0x80
   26656:	d1fa      	bne.n	2664e <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   26658:	f100 0314 	add.w	r3, r0, #20
   2665c:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   2665e:	6813      	ldr	r3, [r2, #0]
   26660:	61c3      	str	r3, [r0, #28]
   26662:	e7af      	b.n	265c4 <load_descriptor_values+0x50>
        return false;
   26664:	2000      	movs	r0, #0
   26666:	e7b8      	b.n	265da <load_descriptor_values+0x66>

00026668 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   26668:	8903      	ldrh	r3, [r0, #8]
{
   2666a:	b510      	push	{r4, lr}
    iter->index++;
   2666c:	3301      	adds	r3, #1
   2666e:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   26670:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   26672:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   26674:	8a0a      	ldrh	r2, [r1, #16]
   26676:	429a      	cmp	r2, r3
   26678:	d803      	bhi.n	26682 <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   2667a:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   2667c:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   26680:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   26682:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   26684:	680b      	ldr	r3, [r1, #0]
   26686:	8942      	ldrh	r2, [r0, #10]
   26688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   2668c:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2668e:	f001 0103 	and.w	r1, r1, #3
   26692:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   26696:	440a      	add	r2, r1
   26698:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   2669a:	8982      	ldrh	r2, [r0, #12]
   2669c:	f003 0130 	and.w	r1, r3, #48	; 0x30
   266a0:	2900      	cmp	r1, #0
   266a2:	bf08      	it	eq
   266a4:	3201      	addeq	r2, #1
   266a6:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   266a8:	89c2      	ldrh	r2, [r0, #14]
   266aa:	f003 030e 	and.w	r3, r3, #14
   266ae:	2b08      	cmp	r3, #8
   266b0:	bf08      	it	eq
   266b2:	3201      	addeq	r2, #1
   266b4:	81c2      	strh	r2, [r0, #14]
}
   266b6:	e7e3      	b.n	26680 <advance_iterator+0x18>

000266b8 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   266b8:	b570      	push	{r4, r5, r6, lr}
   266ba:	4604      	mov	r4, r0
   266bc:	460e      	mov	r6, r1
   266be:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   266c0:	2100      	movs	r1, #0
   266c2:	2220      	movs	r2, #32
   266c4:	3008      	adds	r0, #8
   266c6:	f005 fbb3 	bl	2be30 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   266ca:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   266ce:	4620      	mov	r0, r4
}
   266d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   266d4:	f7ff bf4e 	b.w	26574 <load_descriptor_values>

000266d8 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   266d8:	b538      	push	{r3, r4, r5, lr}
   266da:	460c      	mov	r4, r1
   266dc:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   266de:	680b      	ldr	r3, [r1, #0]
   266e0:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   266e2:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   266e4:	681b      	ldr	r3, [r3, #0]
   266e6:	0a1b      	lsrs	r3, r3, #8
   266e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   266ec:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   266ee:	bf14      	ite	ne
   266f0:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   266f2:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   266f4:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   266f6:	f7ff ffdf 	bl	266b8 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   266fa:	622c      	str	r4, [r5, #32]
    return status;
}
   266fc:	bd38      	pop	{r3, r4, r5, pc}

000266fe <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   266fe:	b510      	push	{r4, lr}
   26700:	4604      	mov	r4, r0
    advance_iterator(iter);
   26702:	f7ff ffb1 	bl	26668 <advance_iterator>
    (void)load_descriptor_values(iter);
   26706:	f7ff ff35 	bl	26574 <load_descriptor_values>
    return iter->index != 0;
   2670a:	8920      	ldrh	r0, [r4, #8]
}
   2670c:	3800      	subs	r0, #0
   2670e:	bf18      	it	ne
   26710:	2001      	movne	r0, #1
   26712:	bd10      	pop	{r4, pc}

00026714 <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   26714:	f7ff bfd0 	b.w	266b8 <pb_field_iter_begin>

00026718 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   26718:	f7ff bfde 	b.w	266d8 <pb_field_iter_begin_extension>

0002671c <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   2671c:	b410      	push	{r4}
   2671e:	460b      	mov	r3, r1
   26720:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   26722:	8a52      	ldrh	r2, [r2, #18]
   26724:	2a08      	cmp	r2, #8
   26726:	d10e      	bne.n	26746 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   26728:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   2672a:	b162      	cbz	r2, 26746 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   2672c:	b128      	cbz	r0, 2673a <pb_default_field_callback+0x1e>
   2672e:	6814      	ldr	r4, [r2, #0]
   26730:	b11c      	cbz	r4, 2673a <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   26732:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   26734:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   26736:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   26738:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   2673a:	b123      	cbz	r3, 26746 <pb_default_field_callback+0x2a>
   2673c:	6814      	ldr	r4, [r2, #0]
   2673e:	b114      	cbz	r4, 26746 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   26740:	4618      	mov	r0, r3
   26742:	3204      	adds	r2, #4
   26744:	e7f6      	b.n	26734 <pb_default_field_callback+0x18>
}
   26746:	2001      	movs	r0, #1
   26748:	bc10      	pop	{r4}
   2674a:	4770      	bx	lr

0002674c <buf_write>:
{
   2674c:	4603      	mov	r3, r0
   2674e:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   26750:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   26752:	1884      	adds	r4, r0, r2
   26754:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26756:	f005 fb31 	bl	2bdbc <memcpy>
}
   2675a:	2001      	movs	r0, #1
   2675c:	bd10      	pop	{r4, pc}

0002675e <pb_encode_varint>:
{
   2675e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   26760:	2a80      	cmp	r2, #128	; 0x80
{
   26762:	b085      	sub	sp, #20
    if (value <= 0x7F)
   26764:	f173 0100 	sbcs.w	r1, r3, #0
{
   26768:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2676a:	b2d4      	uxtb	r4, r2
   2676c:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2676e:	d206      	bcs.n	2677e <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   26770:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   26772:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   26776:	f7e5 fc5d 	bl	c034 <pb_write>
}
   2677a:	b005      	add	sp, #20
   2677c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2677e:	09d5      	lsrs	r5, r2, #7
   26780:	4608      	mov	r0, r1
    size_t i = 0;
   26782:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   26784:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   26788:	ea53 0c05 	orrs.w	ip, r3, r5
   2678c:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2678e:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   26792:	d108      	bne.n	267a6 <pb_encode_varint+0x48>
   26794:	463a      	mov	r2, r7
    buffer[i++] = byte;
   26796:	f102 0310 	add.w	r3, r2, #16
   2679a:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2679c:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2679e:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   267a2:	3201      	adds	r2, #1
   267a4:	e7e7      	b.n	26776 <pb_encode_varint+0x18>
        byte |= 0x80;
   267a6:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   267aa:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   267ac:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   267b0:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   267b4:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   267b8:	d1e6      	bne.n	26788 <pb_encode_varint+0x2a>
    if (high)
   267ba:	2b00      	cmp	r3, #0
   267bc:	d0eb      	beq.n	26796 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   267be:	0118      	lsls	r0, r3, #4
   267c0:	f000 0070 	and.w	r0, r0, #112	; 0x70
   267c4:	4304      	orrs	r4, r0
        high >>= 3;
   267c6:	08db      	lsrs	r3, r3, #3
        while (high)
   267c8:	2b00      	cmp	r3, #0
   267ca:	d0e4      	beq.n	26796 <pb_encode_varint+0x38>
            byte |= 0x80;
   267cc:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   267d0:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   267d2:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   267d6:	3201      	adds	r2, #1
   267d8:	09db      	lsrs	r3, r3, #7
   267da:	e7f5      	b.n	267c8 <pb_encode_varint+0x6a>

000267dc <pb_encode_svarint>:
    if (value < 0)
   267dc:	1892      	adds	r2, r2, r2
   267de:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   267e2:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   267e6:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   267ea:	f7ff bfb8 	b.w	2675e <pb_encode_varint>

000267ee <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   267ee:	2204      	movs	r2, #4
   267f0:	f7e5 bc20 	b.w	c034 <pb_write>

000267f4 <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   267f4:	2208      	movs	r2, #8
   267f6:	f7e5 bc1d 	b.w	c034 <pb_write>

000267fa <pb_encode_tag>:
{
   267fa:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   267fc:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   26800:	0f5b      	lsrs	r3, r3, #29
   26802:	f7ff bfac 	b.w	2675e <pb_encode_varint>

00026806 <pb_encode_string>:
{
   26806:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   26808:	2300      	movs	r3, #0
{
   2680a:	4604      	mov	r4, r0
   2680c:	460d      	mov	r5, r1
   2680e:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   26810:	f7ff ffa5 	bl	2675e <pb_encode_varint>
   26814:	b130      	cbz	r0, 26824 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   26816:	4632      	mov	r2, r6
   26818:	4629      	mov	r1, r5
   2681a:	4620      	mov	r0, r4
}
   2681c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   26820:	f7e5 bc08 	b.w	c034 <pb_write>
}
   26824:	bd70      	pop	{r4, r5, r6, pc}

00026826 <cbpprintf_external>:
{
   26826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2682a:	4606      	mov	r6, r0
   2682c:	460d      	mov	r5, r1
   2682e:	4617      	mov	r7, r2
	if (buf == NULL) {
   26830:	4698      	mov	r8, r3
   26832:	b32b      	cbz	r3, 26880 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   26834:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   26838:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2683c:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   26840:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   26842:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   26844:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   26848:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2684c:	441c      	add	r4, r3
   2684e:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   26850:	45ca      	cmp	sl, r9
   26852:	d309      	bcc.n	26868 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   26854:	4639      	mov	r1, r7
   26856:	4630      	mov	r0, r6
   26858:	46ac      	mov	ip, r5
   2685a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2685e:	f108 0308 	add.w	r3, r8, #8
}
   26862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   26866:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   26868:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2686c:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   26870:	4620      	mov	r0, r4
		*ps = s;
   26872:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   26876:	f7e2 fd73 	bl	9360 <strlen>
   2687a:	3001      	adds	r0, #1
   2687c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2687e:	e7e7      	b.n	26850 <cbpprintf_external+0x2a>
}
   26880:	f06f 0015 	mvn.w	r0, #21
   26884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026888 <is_ptr>:
{
   26888:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2688a:	2500      	movs	r5, #0
{
   2688c:	4602      	mov	r2, r0
	bool mod = false;
   2688e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   26890:	4614      	mov	r4, r2
   26892:	f814 3b01 	ldrb.w	r3, [r4], #1
   26896:	b90b      	cbnz	r3, 2689c <is_ptr+0x14>
					return false;
   26898:	4618      	mov	r0, r3
   2689a:	e009      	b.n	268b0 <is_ptr+0x28>
		if (mod) {
   2689c:	b198      	cbz	r0, 268c6 <is_ptr+0x3e>
			if (cnt == n) {
   2689e:	428d      	cmp	r5, r1
   268a0:	d107      	bne.n	268b2 <is_ptr+0x2a>
				if (c == 'p') {
   268a2:	2b70      	cmp	r3, #112	; 0x70
   268a4:	d004      	beq.n	268b0 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   268a6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   268aa:	2a3a      	cmp	r2, #58	; 0x3a
   268ac:	d80b      	bhi.n	268c6 <is_ptr+0x3e>
					return false;
   268ae:	2000      	movs	r0, #0
}
   268b0:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   268b2:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   268b6:	2e3a      	cmp	r6, #58	; 0x3a
   268b8:	d805      	bhi.n	268c6 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   268ba:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   268bc:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   268be:	1c94      	adds	r4, r2, #2
   268c0:	2b00      	cmp	r3, #0
   268c2:	d0e9      	beq.n	26898 <is_ptr+0x10>
   268c4:	2000      	movs	r0, #0
		if (c == '%') {
   268c6:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   268c8:	4622      	mov	r2, r4
			mod = !mod;
   268ca:	bf08      	it	eq
   268cc:	f080 0001 	eoreq.w	r0, r0, #1
   268d0:	e7de      	b.n	26890 <is_ptr+0x8>

000268d2 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   268d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   268d4:	2364      	movs	r3, #100	; 0x64
{
   268d6:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   268d8:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   268da:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   268dc:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   268de:	b969      	cbnz	r1, 268fc <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   268e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   268e2:	429a      	cmp	r2, r3
   268e4:	fbb2 f4f3 	udiv	r4, r2, r3
   268e8:	d20c      	bcs.n	26904 <u8_to_dec+0x32>
   268ea:	2b01      	cmp	r3, #1
   268ec:	d00a      	beq.n	26904 <u8_to_dec+0x32>
   268ee:	b948      	cbnz	r0, 26904 <u8_to_dec+0x32>
		value -= digit * divisor;
   268f0:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   268f4:	240a      	movs	r4, #10
   268f6:	fbb3 f3f4 	udiv	r3, r3, r4
   268fa:	b2d2      	uxtb	r2, r2
	while (buflen > 0 && divisor > 0) {
   268fc:	3e01      	subs	r6, #1
   268fe:	d1f0      	bne.n	268e2 <u8_to_dec+0x10>
		*buf = '\0';
   26900:	702e      	strb	r6, [r5, #0]
	return num_digits;
   26902:	e7ed      	b.n	268e0 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   26904:	3430      	adds	r4, #48	; 0x30
   26906:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2690a:	fbb2 f4f3 	udiv	r4, r2, r3
   2690e:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   26912:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   26916:	3901      	subs	r1, #1
			num_digits++;
   26918:	3001      	adds	r0, #1
			buflen--;
   2691a:	b2c9      	uxtb	r1, r1
			num_digits++;
   2691c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2691e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   26920:	b2db      	uxtb	r3, r3
   26922:	e7dc      	b.n	268de <u8_to_dec+0xc>

00026924 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   26924:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   26928:	b2db      	uxtb	r3, r3
   2692a:	2b09      	cmp	r3, #9
   2692c:	d802      	bhi.n	26934 <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2692e:	2000      	movs	r0, #0
		*x = c - '0';
   26930:	700b      	strb	r3, [r1, #0]
   26932:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   26934:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   26938:	2b05      	cmp	r3, #5
   2693a:	d802      	bhi.n	26942 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2693c:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2693e:	b2c3      	uxtb	r3, r0
   26940:	e7f5      	b.n	2692e <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   26942:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   26946:	2b05      	cmp	r3, #5
   26948:	d801      	bhi.n	2694e <char2hex+0x2a>
		*x = c - 'A' + 10;
   2694a:	3837      	subs	r0, #55	; 0x37
   2694c:	e7f7      	b.n	2693e <char2hex+0x1a>
		return -EINVAL;
   2694e:	f06f 0015 	mvn.w	r0, #21
}
   26952:	4770      	bx	lr

00026954 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   26954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26956:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   26958:	f001 0001 	and.w	r0, r1, #1
   2695c:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   26960:	429e      	cmp	r6, r3
   26962:	ea4f 0751 	mov.w	r7, r1, lsr #1
   26966:	d903      	bls.n	26970 <hex2bin+0x1c>
		return 0;
   26968:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2696a:	4630      	mov	r0, r6
   2696c:	b003      	add	sp, #12
   2696e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   26970:	b158      	cbz	r0, 2698a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   26972:	7828      	ldrb	r0, [r5, #0]
   26974:	f10d 0107 	add.w	r1, sp, #7
   26978:	f7ff ffd4 	bl	26924 <char2hex>
   2697c:	2800      	cmp	r0, #0
   2697e:	dbf3      	blt.n	26968 <hex2bin+0x14>
		buf[0] = dec;
   26980:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   26984:	3501      	adds	r5, #1
		buf[0] = dec;
   26986:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2698a:	3501      	adds	r5, #1
   2698c:	4417      	add	r7, r2
   2698e:	42ba      	cmp	r2, r7
   26990:	d0eb      	beq.n	2696a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   26992:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   26996:	f10d 0107 	add.w	r1, sp, #7
   2699a:	f7ff ffc3 	bl	26924 <char2hex>
   2699e:	2800      	cmp	r0, #0
   269a0:	dbe2      	blt.n	26968 <hex2bin+0x14>
		buf[i] = dec << 4;
   269a2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   269a6:	0124      	lsls	r4, r4, #4
   269a8:	b2e4      	uxtb	r4, r4
   269aa:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   269ac:	f815 0b02 	ldrb.w	r0, [r5], #2
   269b0:	f7ff ffb8 	bl	26924 <char2hex>
   269b4:	2800      	cmp	r0, #0
   269b6:	dbd7      	blt.n	26968 <hex2bin+0x14>
		buf[i] += dec;
   269b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   269bc:	441c      	add	r4, r3
   269be:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   269c2:	e7e4      	b.n	2698e <hex2bin+0x3a>

000269c4 <arch_printk_char_out>:
}
   269c4:	2000      	movs	r0, #0
   269c6:	4770      	bx	lr

000269c8 <str_out>:
{
   269c8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   269ca:	688a      	ldr	r2, [r1, #8]
   269cc:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   269ce:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   269d0:	b114      	cbz	r4, 269d8 <str_out+0x10>
   269d2:	684b      	ldr	r3, [r1, #4]
   269d4:	4293      	cmp	r3, r2
   269d6:	dc01      	bgt.n	269dc <str_out+0x14>
		ctx->count++;
   269d8:	608d      	str	r5, [r1, #8]
}
   269da:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   269dc:	3b01      	subs	r3, #1
   269de:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   269e0:	bf08      	it	eq
   269e2:	2200      	moveq	r2, #0
   269e4:	608d      	str	r5, [r1, #8]
   269e6:	bf0c      	ite	eq
   269e8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   269ea:	54a0      	strbne	r0, [r4, r2]
   269ec:	e7f5      	b.n	269da <str_out+0x12>

000269ee <printk>:
{
   269ee:	b40f      	push	{r0, r1, r2, r3}
   269f0:	b507      	push	{r0, r1, r2, lr}
   269f2:	a904      	add	r1, sp, #16
   269f4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   269f8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   269fa:	f7e6 f809 	bl	ca10 <vprintk>
}
   269fe:	b003      	add	sp, #12
   26a00:	f85d eb04 	ldr.w	lr, [sp], #4
   26a04:	b004      	add	sp, #16
   26a06:	4770      	bx	lr

00026a08 <snprintk>:
{
   26a08:	b40c      	push	{r2, r3}
   26a0a:	b507      	push	{r0, r1, r2, lr}
   26a0c:	ab04      	add	r3, sp, #16
   26a0e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26a12:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26a14:	f7e6 f80a 	bl	ca2c <vsnprintk>
}
   26a18:	b003      	add	sp, #12
   26a1a:	f85d eb04 	ldr.w	lr, [sp], #4
   26a1e:	b002      	add	sp, #8
   26a20:	4770      	bx	lr

00026a22 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26a22:	4604      	mov	r4, r0
   26a24:	b508      	push	{r3, lr}
   26a26:	4608      	mov	r0, r1
   26a28:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26a2a:	461a      	mov	r2, r3
   26a2c:	47a0      	blx	r4
	return z_impl_z_current_get();
   26a2e:	f7fd f857 	bl	23ae0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26a32:	f7ea fd5d 	bl	114f0 <z_impl_k_thread_abort>

00026a36 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   26a36:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   26a3a:	8840      	ldrh	r0, [r0, #2]
}
   26a3c:	0840      	lsrs	r0, r0, #1
   26a3e:	4770      	bx	lr

00026a40 <free_list_add>:
{
   26a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a42:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26a44:	f7ff fff7 	bl	26a36 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26a48:	fab0 f080 	clz	r0, r0
   26a4c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   26a50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   26a54:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   26a58:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   26a5a:	1d17      	adds	r7, r2, #4
{
   26a5c:	460c      	mov	r4, r1
   26a5e:	3206      	adds	r2, #6
   26a60:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   26a62:	b956      	cbnz	r6, 26a7a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   26a64:	2101      	movs	r1, #1
   26a66:	fa01 f000 	lsl.w	r0, r1, r0
   26a6a:	68d9      	ldr	r1, [r3, #12]
   26a6c:	4301      	orrs	r1, r0
   26a6e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   26a70:	f8cc 4010 	str.w	r4, [ip, #16]
   26a74:	53dd      	strh	r5, [r3, r7]
   26a76:	529d      	strh	r5, [r3, r2]
}
   26a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   26a7a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   26a7c:	3104      	adds	r1, #4
   26a7e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   26a80:	53d8      	strh	r0, [r3, r7]
   26a82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26a86:	529e      	strh	r6, [r3, r2]
   26a88:	80c5      	strh	r5, [r0, #6]
   26a8a:	525d      	strh	r5, [r3, r1]
   26a8c:	e7f4      	b.n	26a78 <free_list_add+0x38>

00026a8e <free_list_remove_bidx>:
{
   26a8e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   26a90:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   26a94:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   26a96:	4299      	cmp	r1, r3
   26a98:	f102 0104 	add.w	r1, r2, #4
   26a9c:	d10a      	bne.n	26ab4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   26a9e:	2301      	movs	r3, #1
   26aa0:	fa03 f202 	lsl.w	r2, r3, r2
   26aa4:	68c3      	ldr	r3, [r0, #12]
   26aa6:	ea23 0302 	bic.w	r3, r3, r2
   26aaa:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   26aac:	2300      	movs	r3, #0
   26aae:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26ab2:	bd10      	pop	{r4, pc}
   26ab4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   26ab6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   26aba:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   26abe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26ac2:	80cb      	strh	r3, [r1, #6]
   26ac4:	8082      	strh	r2, [r0, #4]
}
   26ac6:	e7f4      	b.n	26ab2 <free_list_remove_bidx+0x24>

00026ac8 <free_list_remove>:
{
   26ac8:	b508      	push	{r3, lr}
   26aca:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26acc:	f7ff ffb3 	bl	26a36 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26ad0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   26ad4:	4618      	mov	r0, r3
}
   26ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   26ada:	f1c2 021f 	rsb	r2, r2, #31
   26ade:	f7ff bfd6 	b.w	26a8e <free_list_remove_bidx>

00026ae2 <alloc_chunk>:
{
   26ae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ae6:	fab1 f581 	clz	r5, r1
   26aea:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   26aee:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   26af2:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   26af6:	4603      	mov	r3, r0
   26af8:	460e      	mov	r6, r1
	if (b->next) {
   26afa:	b1c2      	cbz	r2, 26b2e <alloc_chunk+0x4c>
   26afc:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   26afe:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   26b02:	4618      	mov	r0, r3
   26b04:	4621      	mov	r1, r4
   26b06:	f7ff ff96 	bl	26a36 <chunk_size>
   26b0a:	42b0      	cmp	r0, r6
   26b0c:	d306      	bcc.n	26b1c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   26b0e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   26b10:	4618      	mov	r0, r3
   26b12:	f7ff ffbc 	bl	26a8e <free_list_remove_bidx>
}
   26b16:	4620      	mov	r0, r4
   26b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   26b1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   26b20:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   26b22:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   26b24:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   26b28:	d001      	beq.n	26b2e <alloc_chunk+0x4c>
   26b2a:	4282      	cmp	r2, r0
   26b2c:	d1e7      	bne.n	26afe <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   26b2e:	f04f 34ff 	mov.w	r4, #4294967295
   26b32:	f1c5 0220 	rsb	r2, r5, #32
   26b36:	4094      	lsls	r4, r2
   26b38:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   26b3a:	4014      	ands	r4, r2
   26b3c:	d0eb      	beq.n	26b16 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   26b3e:	fa94 f2a4 	rbit	r2, r4
   26b42:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   26b46:	1d11      	adds	r1, r2, #4
   26b48:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   26b4c:	4621      	mov	r1, r4
   26b4e:	e7df      	b.n	26b10 <alloc_chunk+0x2e>

00026b50 <merge_chunks>:
{
   26b50:	b538      	push	{r3, r4, r5, lr}
   26b52:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26b54:	f7ff ff6f 	bl	26a36 <chunk_size>
{
   26b58:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26b5a:	4604      	mov	r4, r0
   26b5c:	4611      	mov	r1, r2
   26b5e:	4618      	mov	r0, r3
   26b60:	f7ff ff69 	bl	26a36 <chunk_size>
   26b64:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26b66:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   26b68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   26b6c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   26b6e:	4618      	mov	r0, r3
   26b70:	f7ff ff61 	bl	26a36 <chunk_size>
	void *cmem = &buf[c];
   26b74:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26b76:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   26b7a:	bd38      	pop	{r3, r4, r5, pc}

00026b7c <split_chunks>:
{
   26b7c:	b538      	push	{r3, r4, r5, lr}
   26b7e:	460c      	mov	r4, r1
   26b80:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   26b82:	f7ff ff58 	bl	26a36 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   26b86:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   26b88:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   26b8a:	4405      	add	r5, r0
   26b8c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26b90:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   26b92:	8060      	strh	r0, [r4, #2]
   26b94:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26b98:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   26b9a:	8044      	strh	r4, [r0, #2]
   26b9c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   26ba0:	4618      	mov	r0, r3
   26ba2:	4611      	mov	r1, r2
   26ba4:	f7ff ff47 	bl	26a36 <chunk_size>
	void *cmem = &buf[c];
   26ba8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26baa:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   26bae:	bd38      	pop	{r3, r4, r5, pc}

00026bb0 <free_chunk>:
{
   26bb0:	b538      	push	{r3, r4, r5, lr}
   26bb2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26bb4:	f7ff ff3f 	bl	26a36 <chunk_size>
   26bb8:	460c      	mov	r4, r1
   26bba:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   26bbc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26bc0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26bc2:	07da      	lsls	r2, r3, #31
   26bc4:	d40a      	bmi.n	26bdc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   26bc6:	4628      	mov	r0, r5
   26bc8:	f7ff ff7e 	bl	26ac8 <free_list_remove>
	return c + chunk_size(h, c);
   26bcc:	4621      	mov	r1, r4
   26bce:	4628      	mov	r0, r5
   26bd0:	f7ff ff31 	bl	26a36 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26bd4:	1822      	adds	r2, r4, r0
   26bd6:	4628      	mov	r0, r5
   26bd8:	f7ff ffba 	bl	26b50 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   26bdc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26be0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   26be2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26be6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   26be8:	07db      	lsls	r3, r3, #31
   26bea:	d40c      	bmi.n	26c06 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   26bec:	4628      	mov	r0, r5
   26bee:	f7ff ff6b 	bl	26ac8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   26bf2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   26bf6:	4622      	mov	r2, r4
   26bf8:	1a61      	subs	r1, r4, r1
   26bfa:	4628      	mov	r0, r5
   26bfc:	f7ff ffa8 	bl	26b50 <merge_chunks>
   26c00:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26c04:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   26c06:	4621      	mov	r1, r4
   26c08:	4628      	mov	r0, r5
}
   26c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   26c0e:	f7ff bf17 	b.w	26a40 <free_list_add>

00026c12 <sys_heap_alloc>:
{
   26c12:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   26c14:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   26c16:	b909      	cbnz	r1, 26c1c <sys_heap_alloc+0xa>
		return NULL;
   26c18:	2000      	movs	r0, #0
}
   26c1a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   26c1c:	68ab      	ldr	r3, [r5, #8]
   26c1e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   26c22:	d9f9      	bls.n	26c18 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26c24:	310b      	adds	r1, #11
   26c26:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26c28:	4621      	mov	r1, r4
   26c2a:	4628      	mov	r0, r5
   26c2c:	f7ff ff59 	bl	26ae2 <alloc_chunk>
	if (c == 0U) {
   26c30:	4606      	mov	r6, r0
   26c32:	2800      	cmp	r0, #0
   26c34:	d0f0      	beq.n	26c18 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   26c36:	4601      	mov	r1, r0
   26c38:	4628      	mov	r0, r5
   26c3a:	f7ff fefc 	bl	26a36 <chunk_size>
   26c3e:	42a0      	cmp	r0, r4
   26c40:	d907      	bls.n	26c52 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   26c42:	4628      	mov	r0, r5
   26c44:	1932      	adds	r2, r6, r4
   26c46:	f7ff ff99 	bl	26b7c <split_chunks>
		free_list_add(h, c + chunk_sz);
   26c4a:	4611      	mov	r1, r2
   26c4c:	4628      	mov	r0, r5
   26c4e:	f7ff fef7 	bl	26a40 <free_list_add>
	void *cmem = &buf[c];
   26c52:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26c56:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26c58:	8853      	ldrh	r3, [r2, #2]
   26c5a:	3004      	adds	r0, #4
   26c5c:	f043 0301 	orr.w	r3, r3, #1
   26c60:	8053      	strh	r3, [r2, #2]
	return mem;
   26c62:	e7da      	b.n	26c1a <sys_heap_alloc+0x8>

00026c64 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26c64:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   26c66:	f013 0307 	ands.w	r3, r3, #7
   26c6a:	d105      	bne.n	26c78 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26c6c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   26c6e:	2b00      	cmp	r3, #0
   26c70:	bf0c      	ite	eq
   26c72:	2000      	moveq	r0, #0
   26c74:	2003      	movne	r0, #3
   26c76:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26c78:	2b02      	cmp	r3, #2
   26c7a:	d105      	bne.n	26c88 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26c7c:	8bc0      	ldrh	r0, [r0, #30]
   26c7e:	fab0 f080 	clz	r0, r0
   26c82:	0940      	lsrs	r0, r0, #5
   26c84:	0080      	lsls	r0, r0, #2
   26c86:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26c88:	2b01      	cmp	r3, #1
   26c8a:	d105      	bne.n	26c98 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   26c8c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   26c8e:	2b00      	cmp	r3, #0
   26c90:	bf0c      	ite	eq
   26c92:	2000      	moveq	r0, #0
   26c94:	2005      	movne	r0, #5
   26c96:	4770      	bx	lr
	int evt = EVT_NOP;
   26c98:	2000      	movs	r0, #0
}
   26c9a:	4770      	bx	lr

00026c9c <validate_args>:
{
   26c9c:	b510      	push	{r4, lr}
   26c9e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   26ca0:	b100      	cbz	r0, 26ca4 <validate_args+0x8>
   26ca2:	b911      	cbnz	r1, 26caa <validate_args+0xe>
		return -EINVAL;
   26ca4:	f06f 0015 	mvn.w	r0, #21
}
   26ca8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   26caa:	1d08      	adds	r0, r1, #4
   26cac:	f000 f82f 	bl	26d0e <sys_notify_validate>
	if ((rv == 0)
   26cb0:	2800      	cmp	r0, #0
   26cb2:	d1f9      	bne.n	26ca8 <validate_args+0xc>
	    && ((cli->notify.flags
   26cb4:	68a3      	ldr	r3, [r4, #8]
   26cb6:	2b03      	cmp	r3, #3
   26cb8:	d9f6      	bls.n	26ca8 <validate_args+0xc>
   26cba:	e7f3      	b.n	26ca4 <validate_args+0x8>

00026cbc <notify_one>:
{
   26cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26cc0:	460d      	mov	r5, r1
   26cc2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26cc4:	4619      	mov	r1, r3
   26cc6:	1d28      	adds	r0, r5, #4
{
   26cc8:	4690      	mov	r8, r2
   26cca:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26ccc:	f7e6 fab4 	bl	d238 <sys_notify_finalize>
	if (cb) {
   26cd0:	4604      	mov	r4, r0
   26cd2:	b138      	cbz	r0, 26ce4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   26cd4:	4633      	mov	r3, r6
   26cd6:	4642      	mov	r2, r8
   26cd8:	4629      	mov	r1, r5
   26cda:	4638      	mov	r0, r7
   26cdc:	46a4      	mov	ip, r4
}
   26cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   26ce2:	4760      	bx	ip
}
   26ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026ce8 <onoff_manager_init>:
{
   26ce8:	b538      	push	{r3, r4, r5, lr}
   26cea:	460c      	mov	r4, r1
	if ((mgr == NULL)
   26cec:	4605      	mov	r5, r0
   26cee:	b158      	cbz	r0, 26d08 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   26cf0:	b151      	cbz	r1, 26d08 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   26cf2:	680b      	ldr	r3, [r1, #0]
   26cf4:	b143      	cbz	r3, 26d08 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   26cf6:	684b      	ldr	r3, [r1, #4]
   26cf8:	b133      	cbz	r3, 26d08 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   26cfa:	2220      	movs	r2, #32
   26cfc:	2100      	movs	r1, #0
   26cfe:	f005 f897 	bl	2be30 <memset>
	return 0;
   26d02:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   26d04:	612c      	str	r4, [r5, #16]
}
   26d06:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26d08:	f06f 0015 	mvn.w	r0, #21
   26d0c:	e7fb      	b.n	26d06 <onoff_manager_init+0x1e>

00026d0e <sys_notify_validate>:
	if (notify == NULL) {
   26d0e:	4603      	mov	r3, r0
   26d10:	b140      	cbz	r0, 26d24 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   26d12:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26d14:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   26d18:	2a02      	cmp	r2, #2
   26d1a:	d006      	beq.n	26d2a <sys_notify_validate+0x1c>
   26d1c:	2a03      	cmp	r2, #3
   26d1e:	d004      	beq.n	26d2a <sys_notify_validate+0x1c>
   26d20:	2a01      	cmp	r2, #1
   26d22:	d005      	beq.n	26d30 <sys_notify_validate+0x22>
   26d24:	f06f 0015 	mvn.w	r0, #21
}
   26d28:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   26d2a:	681a      	ldr	r2, [r3, #0]
   26d2c:	2a00      	cmp	r2, #0
   26d2e:	d0f9      	beq.n	26d24 <sys_notify_validate+0x16>
		notify->result = 0;
   26d30:	2000      	movs	r0, #0
   26d32:	6098      	str	r0, [r3, #8]
   26d34:	4770      	bx	lr

00026d36 <outs>:
{
   26d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d3a:	4607      	mov	r7, r0
   26d3c:	4688      	mov	r8, r1
   26d3e:	4615      	mov	r5, r2
   26d40:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   26d42:	4614      	mov	r4, r2
   26d44:	42b4      	cmp	r4, r6
   26d46:	d305      	bcc.n	26d54 <outs+0x1e>
   26d48:	b10e      	cbz	r6, 26d4e <outs+0x18>
	return (int)count;
   26d4a:	1b60      	subs	r0, r4, r5
   26d4c:	e008      	b.n	26d60 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   26d4e:	7823      	ldrb	r3, [r4, #0]
   26d50:	2b00      	cmp	r3, #0
   26d52:	d0fa      	beq.n	26d4a <outs+0x14>
		int rc = out((int)*sp++, ctx);
   26d54:	4641      	mov	r1, r8
   26d56:	f814 0b01 	ldrb.w	r0, [r4], #1
   26d5a:	47b8      	blx	r7
		if (rc < 0) {
   26d5c:	2800      	cmp	r0, #0
   26d5e:	daf1      	bge.n	26d44 <outs+0xe>
}
   26d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026d64 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   26d64:	4040      	eors	r0, r0
   26d66:	f380 8811 	msr	BASEPRI, r0
   26d6a:	f04f 0004 	mov.w	r0, #4
   26d6e:	df02      	svc	2
}
   26d70:	4770      	bx	lr

00026d72 <assert_print>:

void assert_print(const char *fmt, ...)
{
   26d72:	b40f      	push	{r0, r1, r2, r3}
   26d74:	b507      	push	{r0, r1, r2, lr}
   26d76:	a904      	add	r1, sp, #16
   26d78:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   26d7c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   26d7e:	f7e5 fe47 	bl	ca10 <vprintk>

	va_end(ap);
}
   26d82:	b003      	add	sp, #12
   26d84:	f85d eb04 	ldr.w	lr, [sp], #4
   26d88:	b004      	add	sp, #16
   26d8a:	4770      	bx	lr

00026d8c <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   26d8c:	68c3      	ldr	r3, [r0, #12]
   26d8e:	6802      	ldr	r2, [r0, #0]
   26d90:	4293      	cmp	r3, r2
   26d92:	d904      	bls.n	26d9e <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   26d94:	3b01      	subs	r3, #1
   26d96:	1a9a      	subs	r2, r3, r2
		return false;
   26d98:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   26d9a:	600a      	str	r2, [r1, #0]
}
   26d9c:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   26d9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   26da0:	b913      	cbnz	r3, 26da8 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   26da2:	3801      	subs	r0, #1
   26da4:	1a82      	subs	r2, r0, r2
		return false;
   26da6:	e7f7      	b.n	26d98 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   26da8:	1a82      	subs	r2, r0, r2
	return true;
   26daa:	2001      	movs	r0, #1
   26dac:	e7f5      	b.n	26d9a <free_space+0xe>

00026dae <get_usage>:
{
   26dae:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   26db0:	a901      	add	r1, sp, #4
{
   26db2:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   26db4:	f7ff ffea 	bl	26d8c <free_space>
   26db8:	b120      	cbz	r0, 26dc4 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   26dba:	9b01      	ldr	r3, [sp, #4]
   26dbc:	68e2      	ldr	r2, [r4, #12]
   26dbe:	3b01      	subs	r3, #1
   26dc0:	4413      	add	r3, r2
   26dc2:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   26dc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   26dc6:	9b01      	ldr	r3, [sp, #4]
   26dc8:	1ac0      	subs	r0, r0, r3
}
   26dca:	3801      	subs	r0, #1
   26dcc:	b002      	add	sp, #8
   26dce:	bd10      	pop	{r4, pc}

00026dd0 <idx_inc>:
{
   26dd0:	b510      	push	{r4, lr}
   26dd2:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   26dd4:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26dd6:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   26dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26dda:	07d2      	lsls	r2, r2, #31
   26ddc:	d502      	bpl.n	26de4 <idx_inc+0x14>
		return i & (buffer->size - 1);
   26dde:	3b01      	subs	r3, #1
   26de0:	4018      	ands	r0, r3
}
   26de2:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   26de4:	4298      	cmp	r0, r3
   26de6:	bf28      	it	cs
   26de8:	1ac0      	subcs	r0, r0, r3
   26dea:	e7fa      	b.n	26de2 <idx_inc+0x12>

00026dec <add_skip_item>:
{
   26dec:	b538      	push	{r3, r4, r5, lr}
   26dee:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26df0:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   26df2:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26df4:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   26df6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26dfa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26dfe:	6801      	ldr	r1, [r0, #0]
   26e00:	462a      	mov	r2, r5
{
   26e02:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26e04:	f7ff ffe4 	bl	26dd0 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26e08:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26e0a:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26e0c:	462a      	mov	r2, r5
   26e0e:	4620      	mov	r0, r4
   26e10:	f7ff ffde 	bl	26dd0 <idx_inc>
   26e14:	6060      	str	r0, [r4, #4]
}
   26e16:	bd38      	pop	{r3, r4, r5, pc}

00026e18 <max_utilization_update>:
{
   26e18:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   26e1a:	6903      	ldr	r3, [r0, #16]
{
   26e1c:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   26e1e:	075b      	lsls	r3, r3, #29
   26e20:	d506      	bpl.n	26e30 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   26e22:	6a85      	ldr	r5, [r0, #40]	; 0x28
   26e24:	f7ff ffc3 	bl	26dae <get_usage>
   26e28:	4285      	cmp	r5, r0
   26e2a:	bf2c      	ite	cs
   26e2c:	62a5      	strcs	r5, [r4, #40]	; 0x28
   26e2e:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   26e30:	bd38      	pop	{r3, r4, r5, pc}

00026e32 <drop_item_locked>:
{
   26e32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e36:	461f      	mov	r7, r3
	*user_packet = false;
   26e38:	2300      	movs	r3, #0
   26e3a:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26e3c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   26e40:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   26e44:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   26e46:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   26e4a:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   26e4c:	f003 0303 	and.w	r3, r3, #3
   26e50:	2b02      	cmp	r3, #2
{
   26e52:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26e54:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26e58:	d103      	bne.n	26e62 <drop_item_locked+0x30>
		return item->skip.len;
   26e5a:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   26e5e:	08ad      	lsrs	r5, r5, #2
   26e60:	d12e      	bne.n	26ec0 <drop_item_locked+0x8e>
   26e62:	4630      	mov	r0, r6
   26e64:	69e3      	ldr	r3, [r4, #28]
   26e66:	4798      	blx	r3
   26e68:	4605      	mov	r5, r0
	} else if (allow_drop) {
   26e6a:	f1b8 0f00 	cmp.w	r8, #0
   26e6e:	d038      	beq.n	26ee2 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   26e70:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   26e74:	079b      	lsls	r3, r3, #30
   26e76:	d531      	bpl.n	26edc <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   26e78:	4620      	mov	r0, r4
   26e7a:	f10b 0101 	add.w	r1, fp, #1
   26e7e:	f7ff ffb5 	bl	26dec <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26e82:	6861      	ldr	r1, [r4, #4]
   26e84:	462a      	mov	r2, r5
   26e86:	4620      	mov	r0, r4
   26e88:	f7ff ffa2 	bl	26dd0 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26e8c:	6821      	ldr	r1, [r4, #0]
   26e8e:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26e90:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26e92:	4620      	mov	r0, r4
   26e94:	f7ff ff9c 	bl	26dd0 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26e98:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26e9a:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26e9c:	68e1      	ldr	r1, [r4, #12]
   26e9e:	4620      	mov	r0, r4
   26ea0:	f7ff ff96 	bl	26dd0 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   26ea4:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   26ea6:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   26eaa:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26eae:	f002 0203 	and.w	r2, r2, #3
   26eb2:	2a02      	cmp	r2, #2
   26eb4:	d10e      	bne.n	26ed4 <drop_item_locked+0xa2>
		return item->skip.len;
   26eb6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   26eba:	089b      	lsrs	r3, r3, #2
   26ebc:	d00a      	beq.n	26ed4 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   26ebe:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26ec0:	68e1      	ldr	r1, [r4, #12]
   26ec2:	462a      	mov	r2, r5
   26ec4:	4620      	mov	r0, r4
   26ec6:	f7ff ff83 	bl	26dd0 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   26eca:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   26ece:	4630      	mov	r0, r6
   26ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   26ed4:	4630      	mov	r0, r6
   26ed6:	69e3      	ldr	r3, [r4, #28]
   26ed8:	4798      	blx	r3
   26eda:	4405      	add	r5, r0
			*user_packet = true;
   26edc:	2301      	movs	r3, #1
   26ede:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   26ee0:	e7ee      	b.n	26ec0 <drop_item_locked+0x8e>
		item = NULL;
   26ee2:	4646      	mov	r6, r8
	return item;
   26ee4:	e7f3      	b.n	26ece <drop_item_locked+0x9c>

00026ee6 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26ee6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   26eea:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   26eec:	bf88      	it	hi
   26eee:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   26ef0:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   26ef2:	1e18      	subs	r0, r3, #0
   26ef4:	bf18      	it	ne
   26ef6:	2001      	movne	r0, #1
   26ef8:	4770      	bx	lr

00026efa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   26efa:	4770      	bx	lr

00026efc <nordicsemi_nrf53_init>:
{
   26efc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26efe:	f04f 0320 	mov.w	r3, #32
   26f02:	f3ef 8511 	mrs	r5, BASEPRI
   26f06:	f383 8812 	msr	BASEPRI_MAX, r3
   26f0a:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   26f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   26f12:	2401      	movs	r4, #1
   26f14:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   26f16:	4621      	mov	r1, r4
   26f18:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   26f1c:	2021      	movs	r0, #33	; 0x21
   26f1e:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   26f22:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   26f26:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   26f2a:	f7e7 f97f 	bl	e22c <soc_secure_gpio_pin_mcu_select>
   26f2e:	4621      	mov	r1, r4
   26f30:	2020      	movs	r0, #32
   26f32:	f7e7 f97b 	bl	e22c <soc_secure_gpio_pin_mcu_select>
   26f36:	4621      	mov	r1, r4
   26f38:	200b      	movs	r0, #11
   26f3a:	f7e7 f977 	bl	e22c <soc_secure_gpio_pin_mcu_select>
   26f3e:	4621      	mov	r1, r4
   26f40:	200a      	movs	r0, #10
   26f42:	f7e7 f973 	bl	e22c <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   26f46:	f385 8811 	msr	BASEPRI, r5
   26f4a:	f3bf 8f6f 	isb	sy
}
   26f4e:	2000      	movs	r0, #0
   26f50:	bd38      	pop	{r3, r4, r5, pc}

00026f52 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   26f52:	2806      	cmp	r0, #6
   26f54:	d108      	bne.n	26f68 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   26f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26f5a:	2201      	movs	r2, #1
   26f5c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26f60:	f3bf 8f4f 	dsb	sy
        __WFE();
   26f64:	bf20      	wfe
    while (true)
   26f66:	e7fd      	b.n	26f64 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   26f68:	4770      	bx	lr

00026f6a <pm_state_exit_post_ops>:
   26f6a:	2300      	movs	r3, #0
   26f6c:	f383 8811 	msr	BASEPRI, r3
   26f70:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26f74:	4770      	bx	lr

00026f76 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   26f76:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   26f78:	ab01      	add	r3, sp, #4
   26f7a:	f003 feec 	bl	2ad56 <tfm_platform_mem_read>

	switch (status) {
   26f7e:	2802      	cmp	r0, #2
   26f80:	d00a      	beq.n	26f98 <soc_secure_mem_read+0x22>
   26f82:	2803      	cmp	r0, #3
   26f84:	d00b      	beq.n	26f9e <soc_secure_mem_read+0x28>
   26f86:	b968      	cbnz	r0, 26fa4 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   26f88:	9801      	ldr	r0, [sp, #4]
   26f8a:	3800      	subs	r0, #0
   26f8c:	bf18      	it	ne
   26f8e:	2001      	movne	r0, #1
   26f90:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   26f92:	b003      	add	sp, #12
   26f94:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   26f98:	f06f 0015 	mvn.w	r0, #21
   26f9c:	e7f9      	b.n	26f92 <soc_secure_mem_read+0x1c>
	switch (status) {
   26f9e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26fa2:	e7f6      	b.n	26f92 <soc_secure_mem_read+0x1c>
		return -EPERM;
   26fa4:	f04f 30ff 	mov.w	r0, #4294967295
   26fa8:	e7f3      	b.n	26f92 <soc_secure_mem_read+0x1c>

00026faa <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26faa:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   26fac:	075b      	lsls	r3, r3, #29
   26fae:	d40b      	bmi.n	26fc8 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26fb0:	6803      	ldr	r3, [r0, #0]
   26fb2:	8842      	ldrh	r2, [r0, #2]
   26fb4:	f3c3 2349 	ubfx	r3, r3, #9, #10
   26fb8:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   26fbc:	1898      	adds	r0, r3, r2
   26fbe:	3017      	adds	r0, #23
   26fc0:	f020 0007 	bic.w	r0, r0, #7
   26fc4:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   26fc6:	4770      	bx	lr
	return 0;
   26fc8:	2000      	movs	r0, #0
}
   26fca:	4770      	bx	lr

00026fcc <dummy_timestamp>:
}
   26fcc:	2000      	movs	r0, #0
   26fce:	4770      	bx	lr

00026fd0 <default_get_timestamp>:
   26fd0:	f003 bdb4 	b.w	2ab3c <sys_clock_cycle_get_32>

00026fd4 <atomic_inc>:
{
   26fd4:	4603      	mov	r3, r0
}
   26fd6:	e8d3 0fef 	ldaex	r0, [r3]
   26fda:	1c42      	adds	r2, r0, #1
   26fdc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26fe0:	2900      	cmp	r1, #0
   26fe2:	d1f8      	bne.n	26fd6 <atomic_inc+0x2>
   26fe4:	4770      	bx	lr

00026fe6 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   26fe6:	2001      	movs	r0, #1
   26fe8:	f7e7 ba4a 	b.w	e480 <z_log_dropped>

00026fec <z_log_get_tag>:
}
   26fec:	2000      	movs	r0, #0
   26fee:	4770      	bx	lr

00026ff0 <z_cbprintf_cpy>:
{
   26ff0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   26ff2:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   26ff6:	1b9b      	subs	r3, r3, r6
   26ff8:	428b      	cmp	r3, r1
{
   26ffa:	460c      	mov	r4, r1
   26ffc:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   26ffe:	d30a      	bcc.n	27016 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   27000:	6813      	ldr	r3, [r2, #0]
   27002:	460a      	mov	r2, r1
   27004:	4601      	mov	r1, r0
   27006:	1998      	adds	r0, r3, r6
   27008:	f004 fed8 	bl	2bdbc <memcpy>
	return len;
   2700c:	4620      	mov	r0, r4
	desc->off += len;
   2700e:	68ab      	ldr	r3, [r5, #8]
   27010:	4423      	add	r3, r4
   27012:	60ab      	str	r3, [r5, #8]
}
   27014:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   27016:	f06f 001b 	mvn.w	r0, #27
   2701a:	e7fb      	b.n	27014 <z_cbprintf_cpy+0x24>

0002701c <z_log_msg_finalize>:
{
   2701c:	b570      	push	{r4, r5, r6, lr}
   2701e:	460e      	mov	r6, r1
   27020:	4615      	mov	r5, r2
   27022:	4619      	mov	r1, r3
	if (!msg) {
   27024:	4604      	mov	r4, r0
   27026:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2702a:	b918      	cbnz	r0, 27034 <z_log_msg_finalize+0x18>
}
   2702c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   27030:	f7e7 ba26 	b.w	e480 <z_log_dropped>
	if (data) {
   27034:	b12b      	cbz	r3, 27042 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   27036:	3010      	adds	r0, #16
   27038:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2703c:	4418      	add	r0, r3
   2703e:	f004 febd 	bl	2bdbc <memcpy>
	msg->hdr.source = source;
   27042:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   27046:	4620      	mov	r0, r4
}
   27048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2704c:	f7e7 bc3c 	b.w	e8c8 <z_log_msg_commit>

00027050 <buffer_write>:
{
   27050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27052:	4606      	mov	r6, r0
   27054:	460d      	mov	r5, r1
   27056:	4614      	mov	r4, r2
   27058:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2705a:	4621      	mov	r1, r4
   2705c:	4628      	mov	r0, r5
   2705e:	463a      	mov	r2, r7
   27060:	47b0      	blx	r6
	} while (len != 0);
   27062:	1a24      	subs	r4, r4, r0
		buf += processed;
   27064:	4405      	add	r5, r0
	} while (len != 0);
   27066:	d1f8      	bne.n	2705a <buffer_write+0xa>
}
   27068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002706a <cbvprintf>:
{
   2706a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2706c:	2400      	movs	r4, #0
   2706e:	9400      	str	r4, [sp, #0]
   27070:	f7e6 f986 	bl	d380 <z_cbvprintf_impl>
}
   27074:	b002      	add	sp, #8
   27076:	bd10      	pop	{r4, pc}

00027078 <log_output_flush>:
{
   27078:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2707a:	6842      	ldr	r2, [r0, #4]
{
   2707c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2707e:	e9d2 2300 	ldrd	r2, r3, [r2]
   27082:	6881      	ldr	r1, [r0, #8]
   27084:	6800      	ldr	r0, [r0, #0]
   27086:	f7ff ffe3 	bl	27050 <buffer_write>
	output->control_block->offset = 0;
   2708a:	2200      	movs	r2, #0
   2708c:	6863      	ldr	r3, [r4, #4]
   2708e:	601a      	str	r2, [r3, #0]
}
   27090:	bd10      	pop	{r4, pc}

00027092 <cr_out_func>:
	if (c == '\n') {
   27092:	280a      	cmp	r0, #10
{
   27094:	b538      	push	{r3, r4, r5, lr}
   27096:	4604      	mov	r4, r0
   27098:	460d      	mov	r5, r1
	if (c == '\n') {
   2709a:	d102      	bne.n	270a2 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2709c:	200d      	movs	r0, #13
   2709e:	f7e7 fcdf 	bl	ea60 <out_func>
	out_func(c, ctx);
   270a2:	4629      	mov	r1, r5
   270a4:	4620      	mov	r0, r4
   270a6:	f7e7 fcdb 	bl	ea60 <out_func>
}
   270aa:	2000      	movs	r0, #0
   270ac:	bd38      	pop	{r3, r4, r5, pc}

000270ae <nvs_flash_rd>:
{
   270ae:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   270b0:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   270b2:	8984      	ldrh	r4, [r0, #12]
   270b4:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   270b6:	fa16 f181 	uxtah	r1, r6, r1
   270ba:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   270be:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   270c0:	6884      	ldr	r4, [r0, #8]
   270c2:	6824      	ldr	r4, [r4, #0]
   270c4:	46a4      	mov	ip, r4
}
   270c6:	bc70      	pop	{r4, r5, r6}
   270c8:	4760      	bx	ip

000270ca <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   270ca:	680b      	ldr	r3, [r1, #0]
   270cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   270d0:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   270d2:	89c0      	ldrh	r0, [r0, #14]
   270d4:	0c1a      	lsrs	r2, r3, #16
   270d6:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   270da:	bf04      	itt	eq
   270dc:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   270e0:	600b      	streq	r3, [r1, #0]
}
   270e2:	4770      	bx	lr

000270e4 <nvs_flash_block_cmp>:
{
   270e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   270e8:	4681      	mov	r9, r0
   270ea:	460e      	mov	r6, r1
   270ec:	4617      	mov	r7, r2
   270ee:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   270f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   270f2:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   270f4:	681d      	ldr	r5, [r3, #0]
   270f6:	426d      	negs	r5, r5
	block_size =
   270f8:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   270fc:	b91c      	cbnz	r4, 27106 <nvs_flash_block_cmp+0x22>
	return 0;
   270fe:	4620      	mov	r0, r4
}
   27100:	b009      	add	sp, #36	; 0x24
   27102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   27106:	42ac      	cmp	r4, r5
   27108:	46a0      	mov	r8, r4
   2710a:	bf28      	it	cs
   2710c:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2710e:	466a      	mov	r2, sp
   27110:	4643      	mov	r3, r8
   27112:	4631      	mov	r1, r6
   27114:	4648      	mov	r0, r9
   27116:	f7ff ffca 	bl	270ae <nvs_flash_rd>
		if (rc) {
   2711a:	2800      	cmp	r0, #0
   2711c:	d1f0      	bne.n	27100 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2711e:	4642      	mov	r2, r8
   27120:	4669      	mov	r1, sp
   27122:	4638      	mov	r0, r7
   27124:	f004 fe3a 	bl	2bd9c <memcmp>
		if (rc) {
   27128:	b920      	cbnz	r0, 27134 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2712a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2712e:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   27130:	4447      	add	r7, r8
   27132:	e7e3      	b.n	270fc <nvs_flash_block_cmp+0x18>
			return 1;
   27134:	2001      	movs	r0, #1
   27136:	e7e3      	b.n	27100 <nvs_flash_block_cmp+0x1c>

00027138 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27138:	4601      	mov	r1, r0
{
   2713a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2713c:	2207      	movs	r2, #7
{
   2713e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27140:	20ff      	movs	r0, #255	; 0xff
   27142:	f7e6 f8a5 	bl	d290 <crc8_ccitt>
	entry->crc8 = crc8;
   27146:	71e0      	strb	r0, [r4, #7]
}
   27148:	bd10      	pop	{r4, pc}

0002714a <nvs_flash_cmp_const>:
{
   2714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2714e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27150:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   27152:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27154:	681d      	ldr	r5, [r3, #0]
{
   27156:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27158:	426d      	negs	r5, r5
	block_size =
   2715a:	f005 0520 	and.w	r5, r5, #32
{
   2715e:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   27160:	4668      	mov	r0, sp
{
   27162:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   27164:	462a      	mov	r2, r5
   27166:	f004 fe63 	bl	2be30 <memset>
	while (len) {
   2716a:	b91c      	cbnz	r4, 27174 <nvs_flash_cmp_const+0x2a>
	return 0;
   2716c:	4620      	mov	r0, r4
}
   2716e:	b008      	add	sp, #32
   27170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   27174:	42ac      	cmp	r4, r5
   27176:	46a0      	mov	r8, r4
   27178:	bf28      	it	cs
   2717a:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2717c:	466a      	mov	r2, sp
   2717e:	4643      	mov	r3, r8
   27180:	4631      	mov	r1, r6
   27182:	4638      	mov	r0, r7
   27184:	f7ff ffae 	bl	270e4 <nvs_flash_block_cmp>
		if (rc) {
   27188:	2800      	cmp	r0, #0
   2718a:	d1f0      	bne.n	2716e <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2718c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   27190:	4446      	add	r6, r8
   27192:	e7ea      	b.n	2716a <nvs_flash_cmp_const+0x20>

00027194 <nvs_flash_erase_sector>:
{
   27194:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27196:	8982      	ldrh	r2, [r0, #12]
   27198:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2719a:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2719c:	0c09      	lsrs	r1, r1, #16
{
   2719e:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   271a0:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   271a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   271a6:	042d      	lsls	r5, r5, #16
	rc = api->erase(dev, offset, size);
   271a8:	6883      	ldr	r3, [r0, #8]
   271aa:	689b      	ldr	r3, [r3, #8]
   271ac:	4798      	blx	r3
	if (rc) {
   271ae:	b950      	cbnz	r0, 271c6 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   271b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   271b2:	4629      	mov	r1, r5
   271b4:	4620      	mov	r0, r4
   271b6:	89a3      	ldrh	r3, [r4, #12]
   271b8:	7912      	ldrb	r2, [r2, #4]
   271ba:	f7ff ffc6 	bl	2714a <nvs_flash_cmp_const>
		rc = -ENXIO;
   271be:	2800      	cmp	r0, #0
   271c0:	bf18      	it	ne
   271c2:	f06f 0005 	mvnne.w	r0, #5
}
   271c6:	bd38      	pop	{r3, r4, r5, pc}

000271c8 <z_log_msg_static_create.constprop.0>:
   271c8:	2300      	movs	r3, #0
   271ca:	f7e7 bbc3 	b.w	e954 <z_impl_z_log_msg_static_create>

000271ce <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   271ce:	7803      	ldrb	r3, [r0, #0]
   271d0:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   271d2:	bf81      	itttt	hi
   271d4:	f101 31ff 	addhi.w	r1, r1, #4294967295
   271d8:	18c9      	addhi	r1, r1, r3
   271da:	425b      	neghi	r3, r3
   271dc:	4019      	andhi	r1, r3
}
   271de:	4608      	mov	r0, r1
   271e0:	4770      	bx	lr

000271e2 <nvs_ate_valid>:
{
   271e2:	b570      	push	{r4, r5, r6, lr}
   271e4:	460c      	mov	r4, r1
   271e6:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   271e8:	2108      	movs	r1, #8
   271ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   271ec:	f7ff ffef 	bl	271ce <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   271f0:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   271f2:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   271f4:	4621      	mov	r1, r4
   271f6:	20ff      	movs	r0, #255	; 0xff
   271f8:	f7e6 f84a 	bl	d290 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   271fc:	79e3      	ldrb	r3, [r4, #7]
   271fe:	4283      	cmp	r3, r0
   27200:	d107      	bne.n	27212 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   27202:	89aa      	ldrh	r2, [r5, #12]
   27204:	8863      	ldrh	r3, [r4, #2]
   27206:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   27208:	4283      	cmp	r3, r0
   2720a:	bf2c      	ite	cs
   2720c:	2000      	movcs	r0, #0
   2720e:	2001      	movcc	r0, #1
}
   27210:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   27212:	2000      	movs	r0, #0
   27214:	e7fc      	b.n	27210 <nvs_ate_valid+0x2e>

00027216 <nvs_close_ate_valid>:
{
   27216:	b538      	push	{r3, r4, r5, lr}
   27218:	4605      	mov	r5, r0
   2721a:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2721c:	f7ff ffe1 	bl	271e2 <nvs_ate_valid>
   27220:	b1a0      	cbz	r0, 2724c <nvs_close_ate_valid+0x36>
   27222:	88a0      	ldrh	r0, [r4, #4]
   27224:	b998      	cbnz	r0, 2724e <nvs_close_ate_valid+0x38>
   27226:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2722a:	8822      	ldrh	r2, [r4, #0]
   2722c:	429a      	cmp	r2, r3
   2722e:	d10d      	bne.n	2724c <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27230:	2108      	movs	r1, #8
   27232:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   27234:	f7ff ffcb 	bl	271ce <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   27238:	8862      	ldrh	r2, [r4, #2]
   2723a:	89ab      	ldrh	r3, [r5, #12]
   2723c:	1a9b      	subs	r3, r3, r2
   2723e:	fbb3 f2f0 	udiv	r2, r3, r0
   27242:	fb02 3010 	mls	r0, r2, r0, r3
   27246:	fab0 f080 	clz	r0, r0
   2724a:	0940      	lsrs	r0, r0, #5
}
   2724c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2724e:	2000      	movs	r0, #0
   27250:	e7fc      	b.n	2724c <nvs_close_ate_valid+0x36>

00027252 <nvs_prev_ate>:
{
   27252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27254:	4604      	mov	r4, r0
   27256:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27258:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2725a:	2108      	movs	r1, #8
   2725c:	f7ff ffb7 	bl	271ce <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27260:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27262:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27264:	6829      	ldr	r1, [r5, #0]
   27266:	4620      	mov	r0, r4
   27268:	f7ff ff21 	bl	270ae <nvs_flash_rd>
	if (rc) {
   2726c:	4606      	mov	r6, r0
   2726e:	2800      	cmp	r0, #0
   27270:	d136      	bne.n	272e0 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   27272:	682b      	ldr	r3, [r5, #0]
   27274:	443b      	add	r3, r7
   27276:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   27278:	89a2      	ldrh	r2, [r4, #12]
   2727a:	b299      	uxth	r1, r3
   2727c:	1bd2      	subs	r2, r2, r7
   2727e:	4291      	cmp	r1, r2
   27280:	d12e      	bne.n	272e0 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   27282:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   27284:	bf09      	itett	eq
   27286:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   27288:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2728c:	f102 32ff 	addeq.w	r2, r2, #4294967295
   27290:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27294:	4620      	mov	r0, r4
   27296:	2308      	movs	r3, #8
   27298:	466a      	mov	r2, sp
   2729a:	6029      	str	r1, [r5, #0]
   2729c:	f7ff ff07 	bl	270ae <nvs_flash_rd>
	if (rc) {
   272a0:	b9e8      	cbnz	r0, 272de <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   272a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   272a4:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   272a6:	466b      	mov	r3, sp
		if (data8[i] != value) {
   272a8:	f813 1b01 	ldrb.w	r1, [r3], #1
   272ac:	428a      	cmp	r2, r1
   272ae:	d10c      	bne.n	272ca <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   272b0:	3001      	adds	r0, #1
   272b2:	2808      	cmp	r0, #8
   272b4:	d1f8      	bne.n	272a8 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   272b6:	6863      	ldr	r3, [r4, #4]
   272b8:	e005      	b.n	272c6 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   272ba:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   272bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   272c0:	0c1b      	lsrs	r3, r3, #16
   272c2:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   272c4:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   272c6:	602b      	str	r3, [r5, #0]
		return 0;
   272c8:	e00a      	b.n	272e0 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   272ca:	4669      	mov	r1, sp
   272cc:	4620      	mov	r0, r4
   272ce:	f7ff ffa2 	bl	27216 <nvs_close_ate_valid>
   272d2:	2800      	cmp	r0, #0
   272d4:	d1f1      	bne.n	272ba <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   272d6:	4629      	mov	r1, r5
   272d8:	4620      	mov	r0, r4
   272da:	f7e7 fe51 	bl	ef80 <nvs_recover_last_ate>
   272de:	4606      	mov	r6, r0
}
   272e0:	4630      	mov	r0, r6
   272e2:	b003      	add	sp, #12
   272e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000272e6 <nvs_flash_al_wrt>:
{
   272e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   272ea:	4607      	mov	r7, r0
   272ec:	4690      	mov	r8, r2
	if (!len) {
   272ee:	461e      	mov	r6, r3
{
   272f0:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   272f2:	b91b      	cbnz	r3, 272fc <nvs_flash_al_wrt+0x16>
		return 0;
   272f4:	2000      	movs	r0, #0
}
   272f6:	b009      	add	sp, #36	; 0x24
   272f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   272fc:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   272fe:	8983      	ldrh	r3, [r0, #12]
   27300:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   27302:	fa14 f181 	uxtah	r1, r4, r1
   27306:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2730c:	681d      	ldr	r5, [r3, #0]
   2730e:	426d      	negs	r5, r5
	if (blen > 0) {
   27310:	4035      	ands	r5, r6
   27312:	d00c      	beq.n	2732e <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   27314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   27316:	6883      	ldr	r3, [r0, #8]
   27318:	4621      	mov	r1, r4
   2731a:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2731e:	462b      	mov	r3, r5
   27320:	47c8      	blx	r9
		if (rc) {
   27322:	2800      	cmp	r0, #0
   27324:	d1e7      	bne.n	272f6 <nvs_flash_al_wrt+0x10>
	if (len) {
   27326:	1b76      	subs	r6, r6, r5
   27328:	d0e4      	beq.n	272f4 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2732a:	442c      	add	r4, r5
		data8 += blen;
   2732c:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2732e:	2320      	movs	r3, #32
   27330:	4632      	mov	r2, r6
   27332:	4641      	mov	r1, r8
   27334:	4668      	mov	r0, sp
   27336:	f004 fd4e 	bl	2bdd6 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2733a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   2733c:	eb0d 0006 	add.w	r0, sp, r6
   27340:	682a      	ldr	r2, [r5, #0]
   27342:	7929      	ldrb	r1, [r5, #4]
   27344:	1b92      	subs	r2, r2, r6
   27346:	f004 fd73 	bl	2be30 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2734a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2734c:	682b      	ldr	r3, [r5, #0]
   2734e:	6882      	ldr	r2, [r0, #8]
   27350:	4621      	mov	r1, r4
   27352:	6855      	ldr	r5, [r2, #4]
   27354:	466a      	mov	r2, sp
   27356:	47a8      	blx	r5
	return rc;
   27358:	e7cd      	b.n	272f6 <nvs_flash_al_wrt+0x10>

0002735a <nvs_flash_ate_wrt>:
{
   2735a:	b510      	push	{r4, lr}
   2735c:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2735e:	2308      	movs	r3, #8
   27360:	6841      	ldr	r1, [r0, #4]
{
   27362:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   27364:	f7ff ffbf 	bl	272e6 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   27368:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2736a:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2736c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2736e:	f7ff ff2e 	bl	271ce <nvs_al_size.isra.0>
   27372:	6863      	ldr	r3, [r4, #4]
   27374:	1a1b      	subs	r3, r3, r0
   27376:	6063      	str	r3, [r4, #4]
}
   27378:	4610      	mov	r0, r2
   2737a:	bd10      	pop	{r4, pc}

0002737c <nvs_add_gc_done_ate>:
	gc_done_ate.id = 0xffff;
   2737c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   27380:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   27382:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   27386:	2300      	movs	r3, #0
{
   27388:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2738a:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2738e:	6883      	ldr	r3, [r0, #8]
	nvs_ate_crc8_update(&gc_done_ate);
   27390:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   27392:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   27396:	f7ff fecf 	bl	27138 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2739a:	4669      	mov	r1, sp
   2739c:	4620      	mov	r0, r4
   2739e:	f7ff ffdc 	bl	2735a <nvs_flash_ate_wrt>
}
   273a2:	b002      	add	sp, #8
   273a4:	bd10      	pop	{r4, pc}

000273a6 <nvs_gc>:
{
   273a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   273aa:	2108      	movs	r1, #8
{
   273ac:	b095      	sub	sp, #84	; 0x54
   273ae:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   273b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   273b2:	f7ff ff0c 	bl	271ce <nvs_al_size.isra.0>
   273b6:	4605      	mov	r5, r0
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   273b8:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
   273ba:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   273bc:	0c1b      	lsrs	r3, r3, #16
   273be:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   273c0:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   273c2:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   273c4:	f7ff fe81 	bl	270ca <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   273c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   273cc:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   273ce:	aa06      	add	r2, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   273d0:	445e      	add	r6, fp
   273d2:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   273d4:	2308      	movs	r3, #8
   273d6:	4631      	mov	r1, r6
   273d8:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   273da:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   273dc:	f7ff fe67 	bl	270ae <nvs_flash_rd>
	if (rc < 0) {
   273e0:	1e02      	subs	r2, r0, #0
   273e2:	f2c0 80a9 	blt.w	27538 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   273e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   273e8:	aa06      	add	r2, sp, #24
   273ea:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   273ec:	2300      	movs	r3, #0
		if (data8[i] != value) {
   273ee:	f812 0b01 	ldrb.w	r0, [r2], #1
   273f2:	4281      	cmp	r1, r0
   273f4:	f040 808f 	bne.w	27516 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   273f8:	3301      	adds	r3, #1
   273fa:	2b08      	cmp	r3, #8
   273fc:	d1f7      	bne.n	273ee <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   273fe:	68a3      	ldr	r3, [r4, #8]
   27400:	6862      	ldr	r2, [r4, #4]
   27402:	442b      	add	r3, r5
   27404:	429a      	cmp	r2, r3
   27406:	d27e      	bcs.n	27506 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   27408:	4659      	mov	r1, fp
   2740a:	4620      	mov	r0, r4
   2740c:	f7ff fec2 	bl	27194 <nvs_flash_erase_sector>
   27410:	4602      	mov	r2, r0
	if (rc) {
   27412:	e091      	b.n	27538 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   27414:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   27418:	0c36      	lsrs	r6, r6, #16
   2741a:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2741c:	441e      	add	r6, r3
   2741e:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   27420:	aa08      	add	r2, sp, #32
   27422:	4620      	mov	r0, r4
   27424:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   27426:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2742a:	f7ff ff12 	bl	27252 <nvs_prev_ate>
		if (rc) {
   2742e:	4602      	mov	r2, r0
   27430:	2800      	cmp	r0, #0
   27432:	f040 8081 	bne.w	27538 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   27436:	4620      	mov	r0, r4
   27438:	a908      	add	r1, sp, #32
   2743a:	f7ff fed2 	bl	271e2 <nvs_ate_valid>
   2743e:	b918      	cbnz	r0, 27448 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   27440:	9b01      	ldr	r3, [sp, #4]
   27442:	459a      	cmp	sl, r3
   27444:	d1ec      	bne.n	27420 <nvs_gc+0x7a>
   27446:	e7da      	b.n	273fe <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   27448:	6863      	ldr	r3, [r4, #4]
   2744a:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2744c:	aa0a      	add	r2, sp, #40	; 0x28
   2744e:	4620      	mov	r0, r4
   27450:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   27452:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   27454:	f7ff fefd 	bl	27252 <nvs_prev_ate>
			if (rc) {
   27458:	4602      	mov	r2, r0
   2745a:	2800      	cmp	r0, #0
   2745c:	d16c      	bne.n	27538 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2745e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   27462:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27466:	429a      	cmp	r2, r3
   27468:	d027      	beq.n	274ba <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2746a:	6862      	ldr	r2, [r4, #4]
   2746c:	9b05      	ldr	r3, [sp, #20]
   2746e:	429a      	cmp	r2, r3
   27470:	d1ec      	bne.n	2744c <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   27472:	4556      	cmp	r6, sl
   27474:	d1e4      	bne.n	27440 <nvs_gc+0x9a>
   27476:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2747a:	2b00      	cmp	r3, #0
   2747c:	d0e0      	beq.n	27440 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2747e:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   27482:	ea4f 431a 	mov.w	r3, sl, lsr #16
   27486:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   27488:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2748a:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
   2748c:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2748e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   27492:	f7ff fe51 	bl	27138 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   27498:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2749c:	681e      	ldr	r6, [r3, #0]
   2749e:	4276      	negs	r6, r6
	block_size =
   274a0:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   274a4:	f1b9 0f00 	cmp.w	r9, #0
   274a8:	d10e      	bne.n	274c8 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   274aa:	4620      	mov	r0, r4
   274ac:	a908      	add	r1, sp, #32
   274ae:	f7ff ff54 	bl	2735a <nvs_flash_ate_wrt>
			if (rc) {
   274b2:	4602      	mov	r2, r0
   274b4:	2800      	cmp	r0, #0
   274b6:	d0c3      	beq.n	27440 <nvs_gc+0x9a>
   274b8:	e03e      	b.n	27538 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   274ba:	4620      	mov	r0, r4
   274bc:	a90a      	add	r1, sp, #40	; 0x28
   274be:	f7ff fe90 	bl	271e2 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   274c2:	2800      	cmp	r0, #0
   274c4:	d0d1      	beq.n	2746a <nvs_gc+0xc4>
   274c6:	e7d4      	b.n	27472 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   274c8:	454e      	cmp	r6, r9
   274ca:	46b0      	mov	r8, r6
   274cc:	bf28      	it	cs
   274ce:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   274d0:	aa0c      	add	r2, sp, #48	; 0x30
   274d2:	4643      	mov	r3, r8
   274d4:	4639      	mov	r1, r7
   274d6:	4620      	mov	r0, r4
   274d8:	f7ff fde9 	bl	270ae <nvs_flash_rd>
		if (rc) {
   274dc:	4602      	mov	r2, r0
   274de:	bb58      	cbnz	r0, 27538 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   274e0:	4643      	mov	r3, r8
   274e2:	68a1      	ldr	r1, [r4, #8]
   274e4:	aa0c      	add	r2, sp, #48	; 0x30
   274e6:	4620      	mov	r0, r4
   274e8:	f7ff fefd 	bl	272e6 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   274ec:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   274ee:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   274f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   274f2:	f7ff fe6c 	bl	271ce <nvs_al_size.isra.0>
   274f6:	68a3      	ldr	r3, [r4, #8]
   274f8:	4403      	add	r3, r0
   274fa:	60a3      	str	r3, [r4, #8]
		if (rc) {
   274fc:	b9e2      	cbnz	r2, 27538 <nvs_gc+0x192>
		len -= bytes_to_copy;
   274fe:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   27502:	4447      	add	r7, r8
   27504:	e7ce      	b.n	274a4 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   27506:	4620      	mov	r0, r4
   27508:	f7ff ff38 	bl	2737c <nvs_add_gc_done_ate>
		if (rc) {
   2750c:	4602      	mov	r2, r0
   2750e:	2800      	cmp	r0, #0
   27510:	f43f af7a 	beq.w	27408 <nvs_gc+0x62>
   27514:	e010      	b.n	27538 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   27516:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   27518:	4620      	mov	r0, r4
   2751a:	a906      	add	r1, sp, #24
	stop_addr = gc_addr - ate_size;
   2751c:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2751e:	f7ff fe7a 	bl	27216 <nvs_close_ate_valid>
   27522:	2800      	cmp	r0, #0
   27524:	f47f af76 	bne.w	27414 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   27528:	4620      	mov	r0, r4
   2752a:	a904      	add	r1, sp, #16
   2752c:	f7e7 fd28 	bl	ef80 <nvs_recover_last_ate>
		if (rc) {
   27530:	4602      	mov	r2, r0
   27532:	2800      	cmp	r0, #0
   27534:	f43f af74 	beq.w	27420 <nvs_gc+0x7a>
}
   27538:	4610      	mov	r0, r2
   2753a:	b015      	add	sp, #84	; 0x54
   2753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027540 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   27540:	2300      	movs	r3, #0
   27542:	461a      	mov	r2, r3
   27544:	f7e7 bf26 	b.w	f394 <nvs_write>

00027548 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   27548:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2754a:	2400      	movs	r4, #0
   2754c:	9400      	str	r4, [sp, #0]
   2754e:	f7e7 fffd 	bl	f54c <nvs_read_hist>
	return rc;
}
   27552:	b002      	add	sp, #8
   27554:	bd10      	pop	{r4, pc}

00027556 <z_log_msg_static_create.constprop.0>:
   27556:	2300      	movs	r3, #0
   27558:	f7e7 b9fc 	b.w	e954 <z_impl_z_log_msg_static_create>

0002755c <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2755c:	6903      	ldr	r3, [r0, #16]
}
   2755e:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   27562:	4770      	bx	lr

00027564 <drop_tx_buffer>:
}
   27564:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27568:	4770      	bx	lr

0002756a <release_rx_buffer>:
{
   2756a:	4608      	mov	r0, r1
   2756c:	b508      	push	{r3, lr}
   2756e:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   27570:	b118      	cbz	r0, 2757a <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   27572:	f003 fffe 	bl	2b572 <rpmsg_release_rx_buffer>
	return 0;
   27576:	2000      	movs	r0, #0
}
   27578:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2757a:	f06f 0001 	mvn.w	r0, #1
   2757e:	e7fb      	b.n	27578 <release_rx_buffer+0xe>

00027580 <hold_rx_buffer>:
{
   27580:	4608      	mov	r0, r1
   27582:	b508      	push	{r3, lr}
   27584:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   27586:	b118      	cbz	r0, 27590 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   27588:	f003 ffeb 	bl	2b562 <rpmsg_hold_rx_buffer>
	return 0;
   2758c:	2000      	movs	r0, #0
}
   2758e:	bd08      	pop	{r3, pc}
		return -ENOENT;
   27590:	f06f 0001 	mvn.w	r0, #1
   27594:	e7fb      	b.n	2758e <hold_rx_buffer+0xe>

00027596 <send_nocopy>:
{
   27596:	b513      	push	{r0, r1, r4, lr}
   27598:	4604      	mov	r4, r0
   2759a:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2759c:	6921      	ldr	r1, [r4, #16]
   2759e:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   275a2:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   275a6:	2902      	cmp	r1, #2
   275a8:	d109      	bne.n	275be <send_nocopy+0x28>
	if (len == 0) {
   275aa:	b15b      	cbz	r3, 275c4 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   275ac:	b168      	cbz	r0, 275ca <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   275ae:	9300      	str	r3, [sp, #0]
   275b0:	4613      	mov	r3, r2
   275b2:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   275b6:	f7f9 f801 	bl	205bc <rpmsg_send_offchannel_nocopy>
}
   275ba:	b002      	add	sp, #8
   275bc:	bd10      	pop	{r4, pc}
		return -EBUSY;
   275be:	f06f 000f 	mvn.w	r0, #15
   275c2:	e7fa      	b.n	275ba <send_nocopy+0x24>
		return -EBADMSG;
   275c4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   275c8:	e7f7      	b.n	275ba <send_nocopy+0x24>
		return -ENOENT;
   275ca:	f06f 0001 	mvn.w	r0, #1
   275ce:	e7f4      	b.n	275ba <send_nocopy+0x24>

000275d0 <get_tx_buffer>:
{
   275d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   275d4:	461c      	mov	r4, r3
   275d6:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   275da:	4616      	mov	r6, r2
   275dc:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   275de:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   275e0:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   275e2:	b339      	cbz	r1, 27634 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   275e4:	b34a      	cbz	r2, 2763a <get_tx_buffer+0x6a>
   275e6:	b344      	cbz	r4, 2763a <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   275e8:	1c6a      	adds	r2, r5, #1
   275ea:	f143 0300 	adc.w	r3, r3, #0
   275ee:	2a02      	cmp	r2, #2
   275f0:	f173 0300 	sbcs.w	r3, r3, #0
   275f4:	d224      	bcs.n	27640 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   275f6:	6822      	ldr	r2, [r4, #0]
   275f8:	b142      	cbz	r2, 2760c <get_tx_buffer+0x3c>
   275fa:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   275fe:	429a      	cmp	r2, r3
   27600:	d904      	bls.n	2760c <get_tx_buffer+0x3c>
		return -ENOMEM;
   27602:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   27606:	6023      	str	r3, [r4, #0]
}
   27608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2760c:	ea05 0908 	and.w	r9, r5, r8
   27610:	f109 0301 	add.w	r3, r9, #1
   27614:	425a      	negs	r2, r3
   27616:	415a      	adcs	r2, r3
   27618:	4621      	mov	r1, r4
   2761a:	4638      	mov	r0, r7
   2761c:	f003 ffb2 	bl	2b584 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   27620:	b988      	cbnz	r0, 27646 <get_tx_buffer+0x76>
   27622:	f1b8 3fff 	cmp.w	r8, #4294967295
   27626:	bf08      	it	eq
   27628:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2762c:	d0f0      	beq.n	27610 <get_tx_buffer+0x40>
		return -ENOBUFS;
   2762e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27632:	e7e9      	b.n	27608 <get_tx_buffer+0x38>
		return -ENOENT;
   27634:	f06f 0001 	mvn.w	r0, #1
   27638:	e7e6      	b.n	27608 <get_tx_buffer+0x38>
		return -EINVAL;
   2763a:	f06f 0015 	mvn.w	r0, #21
   2763e:	e7e3      	b.n	27608 <get_tx_buffer+0x38>
		return -ENOTSUP;
   27640:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27644:	e7e0      	b.n	27608 <get_tx_buffer+0x38>
	(*r_data) = payload;
   27646:	6030      	str	r0, [r6, #0]
	return 0;
   27648:	2000      	movs	r0, #0
   2764a:	e7dd      	b.n	27608 <get_tx_buffer+0x38>

0002764c <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2764c:	f003 bfdf 	b.w	2b60e <rpmsg_destroy_ept>

00027650 <get_ept_slot_with_name>:
{
   27650:	b538      	push	{r3, r4, r5, lr}
   27652:	460d      	mov	r5, r1
   27654:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   27656:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2765a:	4628      	mov	r0, r5
   2765c:	f7e1 fe76 	bl	934c <strcmp>
   27660:	b130      	cbz	r0, 27670 <get_ept_slot_with_name+0x20>
   27662:	4628      	mov	r0, r5
   27664:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   27668:	f7e1 fe70 	bl	934c <strcmp>
   2766c:	b920      	cbnz	r0, 27678 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2766e:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   27670:	2370      	movs	r3, #112	; 0x70
   27672:	fb03 4000 	mla	r0, r3, r0, r4
}
   27676:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   27678:	2000      	movs	r0, #0
   2767a:	e7fc      	b.n	27676 <get_ept_slot_with_name+0x26>

0002767c <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2767c:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   27680:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   27684:	f004 ba3b 	b.w	2bafe <k_work_submit_to_queue>

00027688 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   27688:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   2768c:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   27690:	3b00      	subs	r3, #0
   27692:	bf18      	it	ne
   27694:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   27696:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2769a:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2769e:	f003 bf12 	b.w	2b4c6 <virtqueue_notification>

000276a2 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   276a2:	68cb      	ldr	r3, [r1, #12]
   276a4:	b133      	cbz	r3, 276b4 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   276a6:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   276a8:	6883      	ldr	r3, [r0, #8]
   276aa:	681b      	ldr	r3, [r3, #0]
   276ac:	b113      	cbz	r3, 276b4 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   276ae:	2200      	movs	r2, #0
   276b0:	6909      	ldr	r1, [r1, #16]
   276b2:	4718      	bx	r3
}
   276b4:	4770      	bx	lr

000276b6 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   276b6:	f7fa b959 	b.w	2196c <z_impl_k_mutex_unlock>

000276ba <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   276ba:	e8d0 3fef 	ldaex	r3, [r0]
   276be:	e8c0 1fe2 	stlex	r2, r1, [r0]
   276c2:	2a00      	cmp	r2, #0
   276c4:	d1f9      	bne.n	276ba <atomic_set.isra.0>
}
   276c6:	4770      	bx	lr

000276c8 <backend_init>:
{
   276c8:	b510      	push	{r4, lr}
	data->role = conf->role;
   276ca:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   276cc:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   276ce:	681b      	ldr	r3, [r3, #0]
   276d0:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   276d4:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   276d8:	f004 f979 	bl	2b9ce <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   276dc:	2100      	movs	r1, #0
   276de:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   276e2:	f7ff ffea 	bl	276ba <atomic_set.isra.0>
}
   276e6:	4608      	mov	r0, r1
   276e8:	bd10      	pop	{r4, pc}

000276ea <ns_bind_cb>:
{
   276ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   276ee:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   276f0:	460d      	mov	r5, r1
   276f2:	b379      	cbz	r1, 27754 <ns_bind_cb+0x6a>
   276f4:	780b      	ldrb	r3, [r1, #0]
   276f6:	b36b      	cbz	r3, 27754 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   276f8:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   276fc:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   27700:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   27702:	f04f 32ff 	mov.w	r2, #4294967295
   27706:	f04f 33ff 	mov.w	r3, #4294967295
   2770a:	4620      	mov	r0, r4
   2770c:	f7fa f85e 	bl	217cc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   27710:	462a      	mov	r2, r5
   27712:	4640      	mov	r0, r8
   27714:	a901      	add	r1, sp, #4
   27716:	f7e8 f851 	bl	f7bc <get_ept>
	if (rpmsg_ept == NULL) {
   2771a:	9e01      	ldr	r6, [sp, #4]
   2771c:	b92e      	cbnz	r6, 2772a <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2771e:	4620      	mov	r0, r4
}
   27720:	b002      	add	sp, #8
   27722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   27726:	f7ff bfc6 	b.w	276b6 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2772a:	b158      	cbz	r0, 27744 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2772c:	4620      	mov	r0, r4
   2772e:	f7ff ffc2 	bl	276b6 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   27732:	463b      	mov	r3, r7
   27734:	462a      	mov	r2, r5
   27736:	4631      	mov	r1, r6
   27738:	4640      	mov	r0, r8
}
   2773a:	b002      	add	sp, #8
   2773c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   27740:	f7e8 b81a 	b.w	f778 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   27744:	2220      	movs	r2, #32
   27746:	4629      	mov	r1, r5
   27748:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2774c:	f004 fcb2 	bl	2c0b4 <strncpy>
		rpmsg_ept->dest = dest;
   27750:	6637      	str	r7, [r6, #96]	; 0x60
   27752:	e7e4      	b.n	2771e <ns_bind_cb+0x34>
}
   27754:	b002      	add	sp, #8
   27756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002775a <ept_cb>:
{
   2775a:	b510      	push	{r4, lr}
   2775c:	4608      	mov	r0, r1
   2775e:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   27760:	4611      	mov	r1, r2
   27762:	b952      	cbnz	r2, 2777a <ept_cb+0x20>
		if (!ept->bound) {
   27764:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   27768:	b92a      	cbnz	r2, 27776 <ept_cb+0x1c>
			ept->bound = true;
   2776a:	2201      	movs	r2, #1
			bound_cb(ept);
   2776c:	4618      	mov	r0, r3
			ept->bound = true;
   2776e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   27772:	f7e8 f975 	bl	fa60 <bound_cb>
}
   27776:	2000      	movs	r0, #0
   27778:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2777a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2777c:	6854      	ldr	r4, [r2, #4]
   2777e:	2c00      	cmp	r4, #0
   27780:	d0f9      	beq.n	27776 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   27782:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   27784:	47a0      	blx	r4
   27786:	e7f6      	b.n	27776 <ept_cb+0x1c>

00027788 <deregister_ept>:
{
   27788:	b510      	push	{r4, lr}
   2778a:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2778c:	6903      	ldr	r3, [r0, #16]
   2778e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   27792:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   27796:	2b02      	cmp	r3, #2
   27798:	d10a      	bne.n	277b0 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2779a:	b161      	cbz	r1, 277b6 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2779c:	4608      	mov	r0, r1
   2779e:	f003 ff36 	bl	2b60e <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   277a2:	2270      	movs	r2, #112	; 0x70
   277a4:	2100      	movs	r1, #0
   277a6:	4620      	mov	r0, r4
   277a8:	f004 fb42 	bl	2be30 <memset>
	return 0;
   277ac:	2000      	movs	r0, #0
}
   277ae:	bd10      	pop	{r4, pc}
		return -EBUSY;
   277b0:	f06f 000f 	mvn.w	r0, #15
   277b4:	e7fb      	b.n	277ae <deregister_ept+0x26>
		return -ENOENT;
   277b6:	f06f 0001 	mvn.w	r0, #1
   277ba:	e7f8      	b.n	277ae <deregister_ept+0x26>

000277bc <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   277bc:	f003 bf27 	b.w	2b60e <rpmsg_destroy_ept>

000277c0 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   277c0:	b538      	push	{r3, r4, r5, lr}
   277c2:	460d      	mov	r5, r1
	if (!instance) {
   277c4:	4604      	mov	r4, r0
   277c6:	b160      	cbz	r0, 277e2 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   277c8:	30e0      	adds	r0, #224	; 0xe0
   277ca:	f004 f8a1 	bl	2b910 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   277ce:	b10d      	cbz	r5, 277d4 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   277d0:	2000      	movs	r0, #0
}
   277d2:	bd38      	pop	{r3, r4, r5, pc}
   277d4:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   277d8:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   277dc:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   277e0:	e7f6      	b.n	277d0 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   277e2:	f06f 0015 	mvn.w	r0, #21
   277e6:	e7f4      	b.n	277d2 <ipc_rpmsg_deinit+0x12>

000277e8 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   277e8:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   277ea:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   277ee:	b113      	cbz	r3, 277f6 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   277f0:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   277f4:	4718      	bx	r3
}
   277f6:	4770      	bx	lr

000277f8 <virtio_set_features>:
}
   277f8:	4770      	bx	lr

000277fa <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   277fa:	6983      	ldr	r3, [r0, #24]
   277fc:	b913      	cbnz	r3, 27804 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   277fe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   27802:	7019      	strb	r1, [r3, #0]
}
   27804:	4770      	bx	lr

00027806 <virtio_get_features>:
}
   27806:	2001      	movs	r0, #1
   27808:	4770      	bx	lr

0002780a <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2780a:	6983      	ldr	r3, [r0, #24]
   2780c:	2b01      	cmp	r3, #1
   2780e:	d104      	bne.n	2781a <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   27810:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   27814:	7818      	ldrb	r0, [r3, #0]
   27816:	b2c0      	uxtb	r0, r0
   27818:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2781a:	2004      	movs	r0, #4
}
   2781c:	4770      	bx	lr

0002781e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2781e:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   27820:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   27822:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   27824:	4620      	mov	r0, r4
   27826:	f004 faa6 	bl	2bd76 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2782a:	4605      	mov	r5, r0
   2782c:	b118      	cbz	r0, 27836 <virtqueue_allocate+0x18>
   2782e:	4622      	mov	r2, r4
   27830:	2100      	movs	r1, #0
   27832:	f004 fafd 	bl	2be30 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   27836:	4628      	mov	r0, r5
   27838:	bd38      	pop	{r3, r4, r5, pc}

0002783a <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2783a:	b538      	push	{r3, r4, r5, lr}
   2783c:	4604      	mov	r4, r0
   2783e:	2230      	movs	r2, #48	; 0x30
   27840:	2100      	movs	r1, #0
   27842:	f004 faf5 	bl	2be30 <memset>
   27846:	2218      	movs	r2, #24
   27848:	2100      	movs	r1, #0
   2784a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2784e:	f004 faef 	bl	2be30 <memset>
   27852:	2218      	movs	r2, #24
   27854:	2100      	movs	r1, #0
   27856:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2785a:	f004 fae9 	bl	2be30 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2785e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   27862:	f7f8 fe5d 	bl	20520 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   27866:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2786a:	f7f8 fe59 	bl	20520 <virtqueue_free>
	vr->shm_io = 0;
   2786e:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   27870:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   27874:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   27878:	f7f8 fd6e 	bl	20358 <metal_device_close>
	metal_finish();
   2787c:	f7f8 fdc8 	bl	20410 <metal_finish>
	if (io->ops.close)
   27880:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   27882:	f104 0540 	add.w	r5, r4, #64	; 0x40
   27886:	b10b      	cbz	r3, 2788c <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   27888:	4628      	mov	r0, r5
   2788a:	4798      	blx	r3
   2788c:	2238      	movs	r2, #56	; 0x38
   2788e:	2100      	movs	r1, #0
   27890:	4628      	mov	r0, r5
   27892:	f004 facd 	bl	2be30 <memset>

	return 0;
}
   27896:	2000      	movs	r0, #0
   27898:	bd38      	pop	{r3, r4, r5, pc}

0002789a <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2789a:	4770      	bx	lr

0002789c <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   2789c:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   2789e:	b430      	push	{r4, r5}
   278a0:	4604      	mov	r4, r0
   278a2:	4618      	mov	r0, r3
   278a4:	db0b      	blt.n	278be <flash_area_read+0x22>
   278a6:	68a5      	ldr	r5, [r4, #8]
   278a8:	4408      	add	r0, r1
   278aa:	42a8      	cmp	r0, r5
   278ac:	d807      	bhi.n	278be <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   278ae:	68e0      	ldr	r0, [r4, #12]
   278b0:	6864      	ldr	r4, [r4, #4]
   278b2:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   278b4:	6884      	ldr	r4, [r0, #8]
   278b6:	6824      	ldr	r4, [r4, #0]
   278b8:	46a4      	mov	ip, r4
}
   278ba:	bc30      	pop	{r4, r5}
   278bc:	4760      	bx	ip
   278be:	f06f 0015 	mvn.w	r0, #21
   278c2:	bc30      	pop	{r4, r5}
   278c4:	4770      	bx	lr

000278c6 <flash_area_write>:
   278c6:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   278c8:	b430      	push	{r4, r5}
   278ca:	4604      	mov	r4, r0
   278cc:	4618      	mov	r0, r3
   278ce:	db0b      	blt.n	278e8 <flash_area_write+0x22>
   278d0:	68a5      	ldr	r5, [r4, #8]
   278d2:	4408      	add	r0, r1
   278d4:	42a8      	cmp	r0, r5
   278d6:	d807      	bhi.n	278e8 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   278d8:	68e0      	ldr	r0, [r4, #12]
   278da:	6864      	ldr	r4, [r4, #4]
   278dc:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   278de:	6884      	ldr	r4, [r0, #8]
   278e0:	6864      	ldr	r4, [r4, #4]
   278e2:	46a4      	mov	ip, r4
}
   278e4:	bc30      	pop	{r4, r5}
   278e6:	4760      	bx	ip
   278e8:	f06f 0015 	mvn.w	r0, #21
   278ec:	bc30      	pop	{r4, r5}
   278ee:	4770      	bx	lr

000278f0 <flash_area_erase>:
   278f0:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   278f2:	4603      	mov	r3, r0
   278f4:	b410      	push	{r4}
   278f6:	4610      	mov	r0, r2
   278f8:	db0a      	blt.n	27910 <flash_area_erase+0x20>
   278fa:	689c      	ldr	r4, [r3, #8]
   278fc:	4408      	add	r0, r1
   278fe:	42a0      	cmp	r0, r4
   27900:	d806      	bhi.n	27910 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   27902:	68d8      	ldr	r0, [r3, #12]
   27904:	685b      	ldr	r3, [r3, #4]
   27906:	4419      	add	r1, r3
	rc = api->erase(dev, offset, size);
   27908:	6883      	ldr	r3, [r0, #8]
}
   2790a:	bc10      	pop	{r4}
   2790c:	689b      	ldr	r3, [r3, #8]
   2790e:	4718      	bx	r3
   27910:	f06f 0015 	mvn.w	r0, #21
   27914:	bc10      	pop	{r4}
   27916:	4770      	bx	lr

00027918 <get_sectors_cb>:
{
   27918:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2791a:	684c      	ldr	r4, [r1, #4]
   2791c:	6803      	ldr	r3, [r0, #0]
   2791e:	42a3      	cmp	r3, r4
   27920:	d201      	bcs.n	27926 <get_sectors_cb+0xe>
		*bail_value = true;
   27922:	2001      	movs	r0, #1
}
   27924:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   27926:	688a      	ldr	r2, [r1, #8]
   27928:	4422      	add	r2, r4
   2792a:	4293      	cmp	r3, r2
   2792c:	d301      	bcc.n	27932 <get_sectors_cb+0x1a>
		*bail_value = false;
   2792e:	2000      	movs	r0, #0
   27930:	e7f8      	b.n	27924 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   27932:	694e      	ldr	r6, [r1, #20]
   27934:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   27938:	42b5      	cmp	r5, r6
   2793a:	d303      	bcc.n	27944 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2793c:	f06f 030b 	mvn.w	r3, #11
   27940:	618b      	str	r3, [r1, #24]
		return true;
   27942:	e7f4      	b.n	2792e <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   27944:	1b1b      	subs	r3, r3, r4
   27946:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2794a:	6843      	ldr	r3, [r0, #4]
   2794c:	6908      	ldr	r0, [r1, #16]
   2794e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   27952:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   27954:	690b      	ldr	r3, [r1, #16]
   27956:	3301      	adds	r3, #1
   27958:	610b      	str	r3, [r1, #16]
	return true;
   2795a:	e7e2      	b.n	27922 <get_sectors_cb+0xa>

0002795c <settings_load>:
	return settings_load_subtree(NULL);
   2795c:	2000      	movs	r0, #0
   2795e:	f7e8 bacd 	b.w	fefc <settings_load_subtree>

00027962 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   27962:	2200      	movs	r2, #0
   27964:	4611      	mov	r1, r2
   27966:	f7e8 ba8f 	b.w	fe88 <settings_save_one>

0002796a <settings_name_steq>:
{
   2796a:	4603      	mov	r3, r0
   2796c:	b510      	push	{r4, lr}
   2796e:	4608      	mov	r0, r1
	if (next) {
   27970:	b10a      	cbz	r2, 27976 <settings_name_steq+0xc>
		*next = NULL;
   27972:	2100      	movs	r1, #0
   27974:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   27976:	b153      	cbz	r3, 2798e <settings_name_steq+0x24>
   27978:	b1d0      	cbz	r0, 279b0 <settings_name_steq+0x46>
   2797a:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2797c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   27980:	b180      	cbz	r0, 279a4 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   27982:	f813 4b01 	ldrb.w	r4, [r3], #1
   27986:	42a0      	cmp	r0, r4
   27988:	d101      	bne.n	2798e <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2798a:	283d      	cmp	r0, #61	; 0x3d
   2798c:	d1f6      	bne.n	2797c <settings_name_steq+0x12>
		return 0;
   2798e:	2000      	movs	r0, #0
   27990:	e00e      	b.n	279b0 <settings_name_steq+0x46>
			*next = name + 1;
   27992:	3301      	adds	r3, #1
   27994:	6013      	str	r3, [r2, #0]
   27996:	e00a      	b.n	279ae <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   27998:	283d      	cmp	r0, #61	; 0x3d
   2799a:	d008      	beq.n	279ae <settings_name_steq+0x44>
   2799c:	fab0 f080 	clz	r0, r0
   279a0:	0940      	lsrs	r0, r0, #5
   279a2:	e005      	b.n	279b0 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   279a4:	7818      	ldrb	r0, [r3, #0]
   279a6:	282f      	cmp	r0, #47	; 0x2f
   279a8:	d1f6      	bne.n	27998 <settings_name_steq+0x2e>
		if (next) {
   279aa:	2a00      	cmp	r2, #0
   279ac:	d1f1      	bne.n	27992 <settings_name_steq+0x28>
		return 1;
   279ae:	2001      	movs	r0, #1
}
   279b0:	bd10      	pop	{r4, pc}

000279b2 <settings_name_next>:
{
   279b2:	b510      	push	{r4, lr}
	if (next) {
   279b4:	b109      	cbz	r1, 279ba <settings_name_next+0x8>
		*next = NULL;
   279b6:	2300      	movs	r3, #0
   279b8:	600b      	str	r3, [r1, #0]
	if (!name) {
   279ba:	b158      	cbz	r0, 279d4 <settings_name_next+0x22>
   279bc:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   279be:	781a      	ldrb	r2, [r3, #0]
   279c0:	461c      	mov	r4, r3
   279c2:	3301      	adds	r3, #1
   279c4:	b12a      	cbz	r2, 279d2 <settings_name_next+0x20>
   279c6:	2a3d      	cmp	r2, #61	; 0x3d
   279c8:	d003      	beq.n	279d2 <settings_name_next+0x20>
   279ca:	2a2f      	cmp	r2, #47	; 0x2f
   279cc:	d1f7      	bne.n	279be <settings_name_next+0xc>
		if (next) {
   279ce:	b101      	cbz	r1, 279d2 <settings_name_next+0x20>
			*next = name + 1;
   279d0:	600b      	str	r3, [r1, #0]
   279d2:	1a20      	subs	r0, r4, r0
}
   279d4:	bd10      	pop	{r4, pc}

000279d6 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   279d6:	3008      	adds	r0, #8
   279d8:	4770      	bx	lr

000279da <settings_nvs_read_fn>:
{
   279da:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   279dc:	4613      	mov	r3, r2
{
   279de:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   279e0:	460a      	mov	r2, r1
   279e2:	8881      	ldrh	r1, [r0, #4]
   279e4:	6800      	ldr	r0, [r0, #0]
   279e6:	f7ff fdaf 	bl	27548 <nvs_read>
}
   279ea:	42a0      	cmp	r0, r4
   279ec:	bfa8      	it	ge
   279ee:	4620      	movge	r0, r4
   279f0:	bd10      	pop	{r4, pc}

000279f2 <settings_nvs_save>:
{
   279f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   279f6:	b097      	sub	sp, #92	; 0x5c
   279f8:	4604      	mov	r4, r0
   279fa:	469a      	mov	sl, r3
	if (!name) {
   279fc:	4689      	mov	r9, r1
{
   279fe:	9201      	str	r2, [sp, #4]
	if (!name) {
   27a00:	2900      	cmp	r1, #0
   27a02:	d07e      	beq.n	27b02 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   27a04:	b1da      	cbz	r2, 27a3e <settings_nvs_save+0x4c>
   27a06:	faba f78a 	clz	r7, sl
   27a0a:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   27a0c:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   27a0e:	f104 0b08 	add.w	fp, r4, #8
	name_id = cf->last_name_id + 1;
   27a12:	3501      	adds	r5, #1
   27a14:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   27a16:	46a8      	mov	r8, r5
		name_id--;
   27a18:	1e6e      	subs	r6, r5, #1
   27a1a:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   27a1c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   27a20:	d029      	beq.n	27a76 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   27a22:	234a      	movs	r3, #74	; 0x4a
   27a24:	4631      	mov	r1, r6
   27a26:	4658      	mov	r0, fp
   27a28:	aa03      	add	r2, sp, #12
   27a2a:	f7ff fd8d 	bl	27548 <nvs_read>
		if (rc < 0) {
   27a2e:	2800      	cmp	r0, #0
   27a30:	da07      	bge.n	27a42 <settings_nvs_save+0x50>
		name_id--;
   27a32:	f110 0f02 	cmn.w	r0, #2
   27a36:	bf08      	it	eq
   27a38:	46b0      	moveq	r8, r6
   27a3a:	4635      	mov	r5, r6
   27a3c:	e7ec      	b.n	27a18 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   27a3e:	2701      	movs	r7, #1
   27a40:	e7e4      	b.n	27a0c <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   27a42:	f100 0358 	add.w	r3, r0, #88	; 0x58
   27a46:	eb0d 0003 	add.w	r0, sp, r3
   27a4a:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   27a4c:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   27a4e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   27a52:	4648      	mov	r0, r9
   27a54:	f7e1 fc7a 	bl	934c <strcmp>
   27a58:	2800      	cmp	r0, #0
   27a5a:	d1ee      	bne.n	27a3a <settings_nvs_save+0x48>
		if (!delete) {
   27a5c:	b32f      	cbz	r7, 27aaa <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   27a5e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   27a60:	42b3      	cmp	r3, r6
   27a62:	d00b      	beq.n	27a7c <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   27a64:	4631      	mov	r1, r6
   27a66:	4658      	mov	r0, fp
   27a68:	f7ff fd6a 	bl	27540 <nvs_delete>
		if (rc >= 0) {
   27a6c:	2800      	cmp	r0, #0
   27a6e:	da12      	bge.n	27a96 <settings_nvs_save+0xa4>
}
   27a70:	b017      	add	sp, #92	; 0x5c
   27a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   27a76:	b3b7      	cbz	r7, 27ae6 <settings_nvs_save+0xf4>
			return 0;
   27a78:	2000      	movs	r0, #0
   27a7a:	e7f9      	b.n	27a70 <settings_nvs_save+0x7e>
			cf->last_name_id--;
   27a7c:	4622      	mov	r2, r4
   27a7e:	1e73      	subs	r3, r6, #1
   27a80:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   27a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27a88:	2302      	movs	r3, #2
   27a8a:	4658      	mov	r0, fp
   27a8c:	f7e7 fc82 	bl	f394 <nvs_write>
			if (rc < 0) {
   27a90:	2800      	cmp	r0, #0
   27a92:	dae7      	bge.n	27a64 <settings_nvs_save+0x72>
   27a94:	e7ec      	b.n	27a70 <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   27a96:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   27a9a:	313f      	adds	r1, #63	; 0x3f
   27a9c:	4658      	mov	r0, fp
   27a9e:	b289      	uxth	r1, r1
   27aa0:	f7ff fd4e 	bl	27540 <nvs_delete>
	if (rc < 0) {
   27aa4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27aa8:	e7e2      	b.n	27a70 <settings_nvs_save+0x7e>
		name_id--;
   27aaa:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   27aac:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   27ab0:	d02a      	beq.n	27b08 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   27ab2:	f104 0508 	add.w	r5, r4, #8
   27ab6:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   27aba:	4653      	mov	r3, sl
   27abc:	4628      	mov	r0, r5
   27abe:	9a01      	ldr	r2, [sp, #4]
   27ac0:	b289      	uxth	r1, r1
   27ac2:	f7e7 fc67 	bl	f394 <nvs_write>
	if (rc < 0) {
   27ac6:	2800      	cmp	r0, #0
   27ac8:	dbd2      	blt.n	27a70 <settings_nvs_save+0x7e>
	if (write_name) {
   27aca:	b977      	cbnz	r7, 27aea <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   27acc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   27ace:	4543      	cmp	r3, r8
   27ad0:	d2d2      	bcs.n	27a78 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   27ad2:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27ad4:	2302      	movs	r3, #2
   27ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27ada:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   27adc:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27ae0:	f7e7 fc58 	bl	f394 <nvs_write>
   27ae4:	e7de      	b.n	27aa4 <settings_nvs_save+0xb2>
	write_name = true;
   27ae6:	2701      	movs	r7, #1
   27ae8:	e7e0      	b.n	27aac <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   27aea:	4648      	mov	r0, r9
   27aec:	f7e1 fc38 	bl	9360 <strlen>
   27af0:	464a      	mov	r2, r9
   27af2:	4603      	mov	r3, r0
   27af4:	4641      	mov	r1, r8
   27af6:	4628      	mov	r0, r5
   27af8:	f7e7 fc4c 	bl	f394 <nvs_write>
		if (rc < 0) {
   27afc:	2800      	cmp	r0, #0
   27afe:	dae5      	bge.n	27acc <settings_nvs_save+0xda>
   27b00:	e7b6      	b.n	27a70 <settings_nvs_save+0x7e>
		return -EINVAL;
   27b02:	f06f 0015 	mvn.w	r0, #21
   27b06:	e7b3      	b.n	27a70 <settings_nvs_save+0x7e>
		return -ENOMEM;
   27b08:	f06f 000b 	mvn.w	r0, #11
   27b0c:	e7b0      	b.n	27a70 <settings_nvs_save+0x7e>

00027b0e <settings_nvs_backend_init>:
{
   27b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   27b10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   27b12:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   27b14:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   27b16:	b1c3      	cbz	r3, 27b4a <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   27b18:	f100 0608 	add.w	r6, r0, #8
   27b1c:	4630      	mov	r0, r6
   27b1e:	f7e7 fa61 	bl	efe4 <nvs_mount>
	if (rc) {
   27b22:	4605      	mov	r5, r0
   27b24:	b970      	cbnz	r0, 27b44 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   27b26:	2302      	movs	r3, #2
   27b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27b2c:	4630      	mov	r0, r6
   27b2e:	f10d 0206 	add.w	r2, sp, #6
   27b32:	f7ff fd09 	bl	27548 <nvs_read>
	if (rc < 0) {
   27b36:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   27b38:	bfb4      	ite	lt
   27b3a:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   27b3e:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   27b42:	8723      	strh	r3, [r4, #56]	; 0x38
}
   27b44:	4628      	mov	r0, r5
   27b46:	b002      	add	sp, #8
   27b48:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   27b4a:	f06f 0512 	mvn.w	r5, #18
   27b4e:	e7f9      	b.n	27b44 <settings_nvs_backend_init+0x36>

00027b50 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   27b50:	b538      	push	{r3, r4, r5, lr}
   27b52:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   27b54:	42ab      	cmp	r3, r5
{
   27b56:	4611      	mov	r1, r2
   27b58:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27b5a:	d804      	bhi.n	27b66 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27b5c:	461a      	mov	r2, r3
   27b5e:	f004 f92d 	bl	2bdbc <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   27b62:	4620      	mov	r0, r4
   27b64:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27b66:	2400      	movs	r4, #0
   27b68:	e7fb      	b.n	27b62 <_copy+0x12>

00027b6a <_set>:
__ssp_bos_icheck3(memset, void *, int)
   27b6a:	f004 b961 	b.w	2be30 <memset>

00027b6e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27b6e:	09c3      	lsrs	r3, r0, #7
   27b70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27b74:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27b78:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27b7c:	b2c0      	uxtb	r0, r0
   27b7e:	4770      	bx	lr

00027b80 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27b80:	78cb      	ldrb	r3, [r1, #3]
   27b82:	7802      	ldrb	r2, [r0, #0]
   27b84:	4053      	eors	r3, r2
   27b86:	7003      	strb	r3, [r0, #0]
   27b88:	884b      	ldrh	r3, [r1, #2]
   27b8a:	7842      	ldrb	r2, [r0, #1]
   27b8c:	4053      	eors	r3, r2
   27b8e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27b90:	680a      	ldr	r2, [r1, #0]
   27b92:	7883      	ldrb	r3, [r0, #2]
   27b94:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27b98:	7083      	strb	r3, [r0, #2]
   27b9a:	680a      	ldr	r2, [r1, #0]
   27b9c:	78c3      	ldrb	r3, [r0, #3]
   27b9e:	4053      	eors	r3, r2
   27ba0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   27ba2:	79cb      	ldrb	r3, [r1, #7]
   27ba4:	7902      	ldrb	r2, [r0, #4]
   27ba6:	4053      	eors	r3, r2
   27ba8:	7103      	strb	r3, [r0, #4]
   27baa:	88cb      	ldrh	r3, [r1, #6]
   27bac:	7942      	ldrb	r2, [r0, #5]
   27bae:	4053      	eors	r3, r2
   27bb0:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   27bb2:	684a      	ldr	r2, [r1, #4]
   27bb4:	7983      	ldrb	r3, [r0, #6]
   27bb6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27bba:	7183      	strb	r3, [r0, #6]
   27bbc:	684a      	ldr	r2, [r1, #4]
   27bbe:	79c3      	ldrb	r3, [r0, #7]
   27bc0:	4053      	eors	r3, r2
   27bc2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   27bc4:	7acb      	ldrb	r3, [r1, #11]
   27bc6:	7a02      	ldrb	r2, [r0, #8]
   27bc8:	4053      	eors	r3, r2
   27bca:	7203      	strb	r3, [r0, #8]
   27bcc:	7a42      	ldrb	r2, [r0, #9]
   27bce:	894b      	ldrh	r3, [r1, #10]
   27bd0:	4053      	eors	r3, r2
   27bd2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   27bd4:	688a      	ldr	r2, [r1, #8]
   27bd6:	7a83      	ldrb	r3, [r0, #10]
   27bd8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27bdc:	7283      	strb	r3, [r0, #10]
   27bde:	688a      	ldr	r2, [r1, #8]
   27be0:	7ac3      	ldrb	r3, [r0, #11]
   27be2:	4053      	eors	r3, r2
   27be4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   27be6:	7bcb      	ldrb	r3, [r1, #15]
   27be8:	7b02      	ldrb	r2, [r0, #12]
   27bea:	4053      	eors	r3, r2
   27bec:	7303      	strb	r3, [r0, #12]
   27bee:	89cb      	ldrh	r3, [r1, #14]
   27bf0:	7b42      	ldrb	r2, [r0, #13]
   27bf2:	4053      	eors	r3, r2
   27bf4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   27bf6:	68ca      	ldr	r2, [r1, #12]
   27bf8:	7b83      	ldrb	r3, [r0, #14]
   27bfa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27bfe:	7383      	strb	r3, [r0, #14]
   27c00:	68ca      	ldr	r2, [r1, #12]
   27c02:	7bc3      	ldrb	r3, [r0, #15]
   27c04:	4053      	eors	r3, r2
   27c06:	73c3      	strb	r3, [r0, #15]
}
   27c08:	4770      	bx	lr

00027c0a <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   27c0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27c0c:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27c0e:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27c10:	f88d 2000 	strb.w	r2, [sp]
   27c14:	7942      	ldrb	r2, [r0, #5]
   27c16:	f88d 2001 	strb.w	r2, [sp, #1]
   27c1a:	7a82      	ldrb	r2, [r0, #10]
   27c1c:	f88d 2002 	strb.w	r2, [sp, #2]
   27c20:	7bc2      	ldrb	r2, [r0, #15]
   27c22:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   27c26:	7902      	ldrb	r2, [r0, #4]
   27c28:	f88d 2004 	strb.w	r2, [sp, #4]
   27c2c:	7a42      	ldrb	r2, [r0, #9]
   27c2e:	f88d 2005 	strb.w	r2, [sp, #5]
   27c32:	7b82      	ldrb	r2, [r0, #14]
   27c34:	f88d 2006 	strb.w	r2, [sp, #6]
   27c38:	78c2      	ldrb	r2, [r0, #3]
   27c3a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   27c3e:	7a02      	ldrb	r2, [r0, #8]
   27c40:	f88d 2008 	strb.w	r2, [sp, #8]
   27c44:	7b42      	ldrb	r2, [r0, #13]
   27c46:	f88d 2009 	strb.w	r2, [sp, #9]
   27c4a:	7882      	ldrb	r2, [r0, #2]
   27c4c:	f88d 200a 	strb.w	r2, [sp, #10]
   27c50:	79c2      	ldrb	r2, [r0, #7]
   27c52:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27c56:	7b02      	ldrb	r2, [r0, #12]
   27c58:	f88d 200c 	strb.w	r2, [sp, #12]
   27c5c:	7842      	ldrb	r2, [r0, #1]
   27c5e:	f88d 200d 	strb.w	r2, [sp, #13]
   27c62:	7982      	ldrb	r2, [r0, #6]
   27c64:	f88d 200e 	strb.w	r2, [sp, #14]
   27c68:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27c6c:	2310      	movs	r3, #16
   27c6e:	466a      	mov	r2, sp
   27c70:	4619      	mov	r1, r3
   27c72:	f7ff ff6d 	bl	27b50 <_copy>
}
   27c76:	b005      	add	sp, #20
   27c78:	f85d fb04 	ldr.w	pc, [sp], #4

00027c7c <mult_row_column>:
{
   27c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27c7e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27c80:	7808      	ldrb	r0, [r1, #0]
{
   27c82:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27c84:	f7ff ff73 	bl	27b6e <_double_byte>
   27c88:	4605      	mov	r5, r0
   27c8a:	7860      	ldrb	r0, [r4, #1]
   27c8c:	f7ff ff6f 	bl	27b6e <_double_byte>
   27c90:	78a2      	ldrb	r2, [r4, #2]
   27c92:	7863      	ldrb	r3, [r4, #1]
   27c94:	4053      	eors	r3, r2
   27c96:	78e2      	ldrb	r2, [r4, #3]
   27c98:	4053      	eors	r3, r2
   27c9a:	405d      	eors	r5, r3
   27c9c:	4068      	eors	r0, r5
   27c9e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27ca0:	7860      	ldrb	r0, [r4, #1]
   27ca2:	7827      	ldrb	r7, [r4, #0]
   27ca4:	f7ff ff63 	bl	27b6e <_double_byte>
   27ca8:	4605      	mov	r5, r0
   27caa:	78a0      	ldrb	r0, [r4, #2]
   27cac:	f7ff ff5f 	bl	27b6e <_double_byte>
   27cb0:	78a3      	ldrb	r3, [r4, #2]
   27cb2:	405f      	eors	r7, r3
   27cb4:	78e3      	ldrb	r3, [r4, #3]
   27cb6:	405f      	eors	r7, r3
   27cb8:	407d      	eors	r5, r7
   27cba:	4068      	eors	r0, r5
   27cbc:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27cbe:	7863      	ldrb	r3, [r4, #1]
   27cc0:	7827      	ldrb	r7, [r4, #0]
   27cc2:	78a0      	ldrb	r0, [r4, #2]
   27cc4:	405f      	eors	r7, r3
   27cc6:	f7ff ff52 	bl	27b6e <_double_byte>
   27cca:	4605      	mov	r5, r0
   27ccc:	78e0      	ldrb	r0, [r4, #3]
   27cce:	f7ff ff4e 	bl	27b6e <_double_byte>
   27cd2:	78e3      	ldrb	r3, [r4, #3]
   27cd4:	405f      	eors	r7, r3
   27cd6:	407d      	eors	r5, r7
   27cd8:	4068      	eors	r0, r5
   27cda:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27cdc:	7820      	ldrb	r0, [r4, #0]
   27cde:	f7ff ff46 	bl	27b6e <_double_byte>
   27ce2:	7862      	ldrb	r2, [r4, #1]
   27ce4:	7823      	ldrb	r3, [r4, #0]
   27ce6:	4053      	eors	r3, r2
   27ce8:	78a2      	ldrb	r2, [r4, #2]
   27cea:	4053      	eors	r3, r2
   27cec:	ea80 0503 	eor.w	r5, r0, r3
   27cf0:	78e0      	ldrb	r0, [r4, #3]
   27cf2:	f7ff ff3c 	bl	27b6e <_double_byte>
   27cf6:	b2ed      	uxtb	r5, r5
   27cf8:	4045      	eors	r5, r0
   27cfa:	70f5      	strb	r5, [r6, #3]
}
   27cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027cfe <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   27cfe:	b570      	push	{r4, r5, r6, lr}
   27d00:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   27d02:	4605      	mov	r5, r0
{
   27d04:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   27d06:	2800      	cmp	r0, #0
   27d08:	d049      	beq.n	27d9e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   27d0a:	2900      	cmp	r1, #0
   27d0c:	d049      	beq.n	27da2 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   27d0e:	2a00      	cmp	r2, #0
   27d10:	d049      	beq.n	27da6 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   27d12:	2310      	movs	r3, #16
   27d14:	460a      	mov	r2, r1
   27d16:	4668      	mov	r0, sp
   27d18:	4619      	mov	r1, r3
   27d1a:	f7ff ff19 	bl	27b50 <_copy>
	add_round_key(state, s->words);
   27d1e:	4621      	mov	r1, r4
   27d20:	4668      	mov	r0, sp
   27d22:	f7ff ff2d 	bl	27b80 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   27d26:	3410      	adds	r4, #16
   27d28:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   27d2c:	4668      	mov	r0, sp
   27d2e:	f7e8 fcdd 	bl	106ec <sub_bytes>
		shift_rows(state);
   27d32:	4668      	mov	r0, sp
   27d34:	f7ff ff69 	bl	27c0a <shift_rows>
	mult_row_column(t, s);
   27d38:	4669      	mov	r1, sp
   27d3a:	a804      	add	r0, sp, #16
   27d3c:	f7ff ff9e 	bl	27c7c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   27d40:	a901      	add	r1, sp, #4
   27d42:	a805      	add	r0, sp, #20
   27d44:	f7ff ff9a 	bl	27c7c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   27d48:	a902      	add	r1, sp, #8
   27d4a:	a806      	add	r0, sp, #24
   27d4c:	f7ff ff96 	bl	27c7c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   27d50:	a903      	add	r1, sp, #12
   27d52:	a807      	add	r0, sp, #28
   27d54:	f7ff ff92 	bl	27c7c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27d58:	2310      	movs	r3, #16
   27d5a:	4668      	mov	r0, sp
   27d5c:	4619      	mov	r1, r3
   27d5e:	eb0d 0203 	add.w	r2, sp, r3
   27d62:	f7ff fef5 	bl	27b50 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   27d66:	4621      	mov	r1, r4
   27d68:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   27d6a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   27d6c:	f7ff ff08 	bl	27b80 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   27d70:	42b4      	cmp	r4, r6
   27d72:	d1db      	bne.n	27d2c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   27d74:	f7e8 fcba 	bl	106ec <sub_bytes>
	shift_rows(state);
   27d78:	4668      	mov	r0, sp
   27d7a:	f7ff ff46 	bl	27c0a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   27d7e:	4621      	mov	r1, r4
   27d80:	4668      	mov	r0, sp
   27d82:	f7ff fefd 	bl	27b80 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   27d86:	2310      	movs	r3, #16
   27d88:	466a      	mov	r2, sp
   27d8a:	4619      	mov	r1, r3
   27d8c:	4628      	mov	r0, r5
   27d8e:	f7ff fedf 	bl	27b50 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   27d92:	4668      	mov	r0, sp
   27d94:	2210      	movs	r2, #16
   27d96:	2100      	movs	r1, #0
   27d98:	f7ff fee7 	bl	27b6a <_set>

	return TC_CRYPTO_SUCCESS;
   27d9c:	2001      	movs	r0, #1
}
   27d9e:	b008      	add	sp, #32
   27da0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27da2:	4608      	mov	r0, r1
   27da4:	e7fb      	b.n	27d9e <tc_aes_encrypt+0xa0>
   27da6:	4610      	mov	r0, r2
   27da8:	e7f9      	b.n	27d9e <tc_aes_encrypt+0xa0>

00027daa <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27daa:	460a      	mov	r2, r1
{
   27dac:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27dae:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   27db2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27db4:	2b00      	cmp	r3, #0
   27db6:	bfac      	ite	ge
   27db8:	2300      	movge	r3, #0
   27dba:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   27dbc:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27dc0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   27dc4:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   27dc6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   27dca:	d002      	beq.n	27dd2 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   27dcc:	7813      	ldrb	r3, [r2, #0]
   27dce:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   27dd0:	e7f4      	b.n	27dbc <gf_double+0x12>
	}
}
   27dd2:	bd10      	pop	{r4, pc}

00027dd4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   27dd4:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   27dd6:	b120      	cbz	r0, 27de2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   27dd8:	2258      	movs	r2, #88	; 0x58
   27dda:	2100      	movs	r1, #0
   27ddc:	f7ff fec5 	bl	27b6a <_set>
   27de0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   27de2:	bd08      	pop	{r3, pc}

00027de4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   27de4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27de6:	4604      	mov	r4, r0
   27de8:	b188      	cbz	r0, 27e0e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27dea:	2210      	movs	r2, #16
   27dec:	2100      	movs	r1, #0
   27dee:	f7ff febc 	bl	27b6a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   27df2:	2210      	movs	r2, #16
   27df4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27df8:	2100      	movs	r1, #0
   27dfa:	f7ff feb6 	bl	27b6a <_set>
	s->leftover_offset = 0;
   27dfe:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   27e00:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   27e02:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   27e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   27e08:	2001      	movs	r0, #1
   27e0a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   27e0e:	bd10      	pop	{r4, pc}

00027e10 <tc_cmac_setup>:
{
   27e10:	b570      	push	{r4, r5, r6, lr}
   27e12:	4604      	mov	r4, r0
   27e14:	460d      	mov	r5, r1
   27e16:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   27e18:	b310      	cbz	r0, 27e60 <tc_cmac_setup+0x50>
   27e1a:	b311      	cbz	r1, 27e62 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   27e1c:	2258      	movs	r2, #88	; 0x58
   27e1e:	2100      	movs	r1, #0
   27e20:	f7ff fea3 	bl	27b6a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   27e24:	4629      	mov	r1, r5
   27e26:	4630      	mov	r0, r6
	s->sched = sched;
   27e28:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   27e2a:	f7e8 fc6b 	bl	10704 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27e2e:	2210      	movs	r2, #16
   27e30:	2100      	movs	r1, #0
   27e32:	4620      	mov	r0, r4
   27e34:	f7ff fe99 	bl	27b6a <_set>
	gf_double (s->K1, s->iv);
   27e38:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   27e3c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27e3e:	4621      	mov	r1, r4
   27e40:	4620      	mov	r0, r4
   27e42:	f7ff ff5c 	bl	27cfe <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   27e46:	4621      	mov	r1, r4
   27e48:	4628      	mov	r0, r5
   27e4a:	f7ff ffae 	bl	27daa <gf_double>
	gf_double (s->K2, s->K1);
   27e4e:	4629      	mov	r1, r5
   27e50:	f104 0020 	add.w	r0, r4, #32
   27e54:	f7ff ffa9 	bl	27daa <gf_double>
	tc_cmac_init(s);
   27e58:	4620      	mov	r0, r4
   27e5a:	f7ff ffc3 	bl	27de4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   27e5e:	2001      	movs	r0, #1
}
   27e60:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27e62:	4608      	mov	r0, r1
   27e64:	e7fc      	b.n	27e60 <tc_cmac_setup+0x50>

00027e66 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   27e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e6a:	460e      	mov	r6, r1
   27e6c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27e6e:	4604      	mov	r4, r0
   27e70:	2800      	cmp	r0, #0
   27e72:	d060      	beq.n	27f36 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   27e74:	b1fa      	cbz	r2, 27eb6 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   27e76:	2900      	cmp	r1, #0
   27e78:	d05d      	beq.n	27f36 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   27e7a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   27e7e:	ea53 0102 	orrs.w	r1, r3, r2
   27e82:	d058      	beq.n	27f36 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   27e84:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   27e86:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   27e8a:	f142 32ff 	adc.w	r2, r2, #4294967295
   27e8e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   27e92:	f1b8 0f00 	cmp.w	r8, #0
   27e96:	d02c      	beq.n	27ef2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   27e98:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27e9c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   27ea0:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27ea2:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   27ea4:	d20a      	bcs.n	27ebc <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27ea6:	462b      	mov	r3, r5
   27ea8:	4632      	mov	r2, r6
   27eaa:	4629      	mov	r1, r5
   27eac:	f7ff fe50 	bl	27b50 <_copy>
			s->leftover_offset += data_length;
   27eb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   27eb2:	442b      	add	r3, r5
   27eb4:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   27eb6:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   27eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   27ebc:	463b      	mov	r3, r7
   27ebe:	4632      	mov	r2, r6
   27ec0:	4639      	mov	r1, r7
   27ec2:	f7ff fe45 	bl	27b50 <_copy>
		s->leftover_offset = 0;
   27ec6:	2300      	movs	r3, #0
   27ec8:	3d10      	subs	r5, #16
   27eca:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   27ecc:	4445      	add	r5, r8
		data += remaining_space;
   27ece:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27ed0:	1e63      	subs	r3, r4, #1
   27ed2:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   27ed6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27eda:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27ede:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   27ee0:	ea82 0200 	eor.w	r2, r2, r0
   27ee4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27ee6:	d1f6      	bne.n	27ed6 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27ee8:	4621      	mov	r1, r4
   27eea:	4620      	mov	r0, r4
   27eec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27eee:	f7ff ff06 	bl	27cfe <tc_aes_encrypt>
   27ef2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   27ef6:	2d10      	cmp	r5, #16
   27ef8:	d80a      	bhi.n	27f10 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   27efa:	2d00      	cmp	r5, #0
   27efc:	d0db      	beq.n	27eb6 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   27efe:	462b      	mov	r3, r5
   27f00:	4632      	mov	r2, r6
   27f02:	4629      	mov	r1, r5
   27f04:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27f08:	f7ff fe22 	bl	27b50 <_copy>
		s->leftover_offset = data_length;
   27f0c:	6465      	str	r5, [r4, #68]	; 0x44
   27f0e:	e7d2      	b.n	27eb6 <tc_cmac_update+0x50>
   27f10:	1e63      	subs	r3, r4, #1
   27f12:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   27f14:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27f18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27f1c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   27f1e:	ea82 0200 	eor.w	r2, r2, r0
   27f22:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27f24:	d1f6      	bne.n	27f14 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27f26:	4621      	mov	r1, r4
   27f28:	4620      	mov	r0, r4
   27f2a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27f2c:	f7ff fee7 	bl	27cfe <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   27f30:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   27f32:	3d10      	subs	r5, #16
   27f34:	e7df      	b.n	27ef6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   27f36:	2000      	movs	r0, #0
   27f38:	e7be      	b.n	27eb8 <tc_cmac_update+0x52>

00027f3a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   27f3a:	b570      	push	{r4, r5, r6, lr}
   27f3c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27f3e:	4605      	mov	r5, r0
   27f40:	b1f0      	cbz	r0, 27f80 <tc_cmac_final+0x46>
   27f42:	b371      	cbz	r1, 27fa2 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   27f44:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   27f46:	2a10      	cmp	r2, #16
   27f48:	d11b      	bne.n	27f82 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   27f4a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27f4c:	1e63      	subs	r3, r4, #1
   27f4e:	3901      	subs	r1, #1
   27f50:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27f54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27f58:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27f5c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27f5e:	ea82 0206 	eor.w	r2, r2, r6
   27f62:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   27f66:	ea82 0206 	eor.w	r2, r2, r6
   27f6a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27f6c:	d1f2      	bne.n	27f54 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   27f6e:	4621      	mov	r1, r4
   27f70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27f72:	4628      	mov	r0, r5
   27f74:	f7ff fec3 	bl	27cfe <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   27f78:	4620      	mov	r0, r4
   27f7a:	f7ff ff2b 	bl	27dd4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   27f7e:	2001      	movs	r0, #1
}
   27f80:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   27f82:	f102 0030 	add.w	r0, r2, #48	; 0x30
   27f86:	2100      	movs	r1, #0
   27f88:	f1c2 0210 	rsb	r2, r2, #16
   27f8c:	4420      	add	r0, r4
   27f8e:	f7ff fdec 	bl	27b6a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27f92:	2280      	movs	r2, #128	; 0x80
   27f94:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   27f96:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27f9a:	4423      	add	r3, r4
   27f9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   27fa0:	e7d4      	b.n	27f4c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   27fa2:	4608      	mov	r0, r1
   27fa4:	e7ec      	b.n	27f80 <tc_cmac_final+0x46>

00027fa6 <tc_sha256_update>:
{
   27fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fa8:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   27faa:	b110      	cbz	r0, 27fb2 <tc_sha256_update+0xc>
   27fac:	b1f9      	cbz	r1, 27fee <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   27fae:	b90a      	cbnz	r2, 27fb4 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   27fb0:	2001      	movs	r0, #1
}
   27fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   27fb4:	2700      	movs	r7, #0
   27fb6:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   27fb8:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   27fbc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   27fbe:	1c5a      	adds	r2, r3, #1
   27fc0:	6682      	str	r2, [r0, #104]	; 0x68
   27fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
   27fc6:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   27fc8:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   27fca:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   27fce:	d90b      	bls.n	27fe8 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   27fd0:	4631      	mov	r1, r6
   27fd2:	f7e8 fbeb 	bl	107ac <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   27fd6:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   27fda:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   27fde:	f142 0200 	adc.w	r2, r2, #0
   27fe2:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   27fe6:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   27fe8:	42a5      	cmp	r5, r4
   27fea:	d1e7      	bne.n	27fbc <tc_sha256_update+0x16>
   27fec:	e7e0      	b.n	27fb0 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   27fee:	4608      	mov	r0, r1
   27ff0:	e7df      	b.n	27fb2 <tc_sha256_update+0xc>

00027ff2 <tc_sha256_final>:
{
   27ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ff4:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   27ff6:	4605      	mov	r5, r0
   27ff8:	2800      	cmp	r0, #0
   27ffa:	d054      	beq.n	280a6 <tc_sha256_final+0xb4>
   27ffc:	2900      	cmp	r1, #0
   27ffe:	d053      	beq.n	280a8 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   28000:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   28002:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   28006:	00d8      	lsls	r0, r3, #3
   28008:	1812      	adds	r2, r2, r0
   2800a:	f141 0100 	adc.w	r1, r1, #0
   2800e:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   28012:	2280      	movs	r2, #128	; 0x80
   28014:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   28016:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   28018:	4423      	add	r3, r4
   2801a:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2801c:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   28020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   28024:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   28028:	d90a      	bls.n	28040 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2802a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2802e:	4639      	mov	r1, r7
   28030:	4430      	add	r0, r6
   28032:	f7ff fd9a 	bl	27b6a <_set>
		compress(s->iv, s->leftover);
   28036:	4631      	mov	r1, r6
   28038:	4620      	mov	r0, r4
   2803a:	f7e8 fbb7 	bl	107ac <compress>
		s->leftover_offset = 0;
   2803e:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   28040:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   28042:	2100      	movs	r1, #0
   28044:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   28048:	4430      	add	r0, r6
   2804a:	f7ff fd8e 	bl	27b6a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2804e:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   28050:	4631      	mov	r1, r6
   28052:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   28054:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   28056:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   28058:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2805a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2805e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   28062:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   28064:	0e1b      	lsrs	r3, r3, #24
   28066:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2806a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2806c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   28070:	f7e8 fb9c 	bl	107ac <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   28074:	1d2b      	adds	r3, r5, #4
   28076:	1f21      	subs	r1, r4, #4
   28078:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2807a:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2807e:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   28080:	0e10      	lsrs	r0, r2, #24
   28082:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   28086:	0c10      	lsrs	r0, r2, #16
   28088:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2808c:	0a10      	lsrs	r0, r2, #8
   2808e:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   28092:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   28096:	42ab      	cmp	r3, r5
   28098:	d1ef      	bne.n	2807a <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2809a:	4620      	mov	r0, r4
   2809c:	2270      	movs	r2, #112	; 0x70
   2809e:	2100      	movs	r1, #0
   280a0:	f7ff fd63 	bl	27b6a <_set>
	return TC_CRYPTO_SUCCESS;
   280a4:	2001      	movs	r0, #1
}
   280a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   280a8:	4608      	mov	r0, r1
   280aa:	e7fc      	b.n	280a6 <tc_sha256_final+0xb4>

000280ac <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   280ac:	b530      	push	{r4, r5, lr}
   280ae:	1e43      	subs	r3, r0, #1
   280b0:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   280b2:	42a9      	cmp	r1, r5
   280b4:	d106      	bne.n	280c4 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   280b6:	2136      	movs	r1, #54	; 0x36
   280b8:	245c      	movs	r4, #92	; 0x5c
   280ba:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   280bc:	1a13      	subs	r3, r2, r0
   280be:	2b3f      	cmp	r3, #63	; 0x3f
   280c0:	d90c      	bls.n	280dc <rekey+0x30>
	}
}
   280c2:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   280c4:	780c      	ldrb	r4, [r1, #0]
   280c6:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   280ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   280ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   280d2:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   280d6:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   280da:	e7ea      	b.n	280b2 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   280dc:	f802 1b01 	strb.w	r1, [r2], #1
   280e0:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   280e4:	e7ea      	b.n	280bc <rekey+0x10>

000280e6 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   280e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   280e8:	460e      	mov	r6, r1
   280ea:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   280ec:	4605      	mov	r5, r0
{
   280ee:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   280f0:	b1b8      	cbz	r0, 28122 <tc_hmac_set_key+0x3c>
   280f2:	b341      	cbz	r1, 28146 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   280f4:	b34a      	cbz	r2, 2814a <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   280f6:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   280f8:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   280fc:	d813      	bhi.n	28126 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   280fe:	a810      	add	r0, sp, #64	; 0x40
   28100:	f7e8 fc3e 	bl	10980 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   28104:	4622      	mov	r2, r4
   28106:	4669      	mov	r1, sp
   28108:	a810      	add	r0, sp, #64	; 0x40
   2810a:	f7ff ff4c 	bl	27fa6 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2810e:	a910      	add	r1, sp, #64	; 0x40
   28110:	a834      	add	r0, sp, #208	; 0xd0
   28112:	f7ff ff6e 	bl	27ff2 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   28116:	4622      	mov	r2, r4
   28118:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2811a:	4638      	mov	r0, r7
   2811c:	f7ff ffc6 	bl	280ac <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   28120:	2001      	movs	r0, #1
}
   28122:	b04d      	add	sp, #308	; 0x134
   28124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   28126:	f7e8 fc2b 	bl	10980 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2812a:	4622      	mov	r2, r4
   2812c:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2812e:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   28132:	4628      	mov	r0, r5
   28134:	f7ff ff37 	bl	27fa6 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   28138:	4629      	mov	r1, r5
   2813a:	4620      	mov	r0, r4
   2813c:	f7ff ff59 	bl	27ff2 <tc_sha256_final>
		rekey(ctx->key,
   28140:	2220      	movs	r2, #32
   28142:	4621      	mov	r1, r4
   28144:	e7e9      	b.n	2811a <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   28146:	4608      	mov	r0, r1
   28148:	e7eb      	b.n	28122 <tc_hmac_set_key+0x3c>
   2814a:	4610      	mov	r0, r2
   2814c:	e7e9      	b.n	28122 <tc_hmac_set_key+0x3c>

0002814e <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2814e:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   28150:	4604      	mov	r4, r0
   28152:	b140      	cbz	r0, 28166 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   28154:	f7e8 fc14 	bl	10980 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   28158:	2240      	movs	r2, #64	; 0x40
   2815a:	4620      	mov	r0, r4
   2815c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   28160:	f7ff ff21 	bl	27fa6 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   28164:	2001      	movs	r0, #1
}
   28166:	bd10      	pop	{r4, pc}

00028168 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   28168:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2816a:	b110      	cbz	r0, 28172 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2816c:	f7ff ff1b 	bl	27fa6 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   28170:	2001      	movs	r0, #1
}
   28172:	bd08      	pop	{r3, pc}

00028174 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   28174:	b570      	push	{r4, r5, r6, lr}
   28176:	460e      	mov	r6, r1
   28178:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2817a:	4605      	mov	r5, r0
   2817c:	b1f0      	cbz	r0, 281bc <tc_hmac_final+0x48>
   2817e:	2920      	cmp	r1, #32
   28180:	d11c      	bne.n	281bc <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   28182:	b1ea      	cbz	r2, 281c0 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   28184:	4611      	mov	r1, r2
   28186:	f7ff ff34 	bl	27ff2 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2818a:	4620      	mov	r0, r4
   2818c:	f7e8 fbf8 	bl	10980 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   28190:	2240      	movs	r2, #64	; 0x40
   28192:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   28196:	4620      	mov	r0, r4
   28198:	f7ff ff05 	bl	27fa6 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2819c:	4632      	mov	r2, r6
   2819e:	4629      	mov	r1, r5
   281a0:	4620      	mov	r0, r4
   281a2:	f7ff ff00 	bl	27fa6 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   281a6:	4621      	mov	r1, r4
   281a8:	4628      	mov	r0, r5
   281aa:	f7ff ff22 	bl	27ff2 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   281ae:	4620      	mov	r0, r4
   281b0:	22f0      	movs	r2, #240	; 0xf0
   281b2:	2100      	movs	r1, #0
   281b4:	f7ff fcd9 	bl	27b6a <_set>

	return TC_CRYPTO_SUCCESS;
   281b8:	2001      	movs	r0, #1
}
   281ba:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   281bc:	2000      	movs	r0, #0
   281be:	e7fc      	b.n	281ba <tc_hmac_final+0x46>
   281c0:	4610      	mov	r0, r2
   281c2:	e7fa      	b.n	281ba <tc_hmac_final+0x46>

000281c4 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   281c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281c8:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   281ca:	f04f 0b01 	mov.w	fp, #1
{
   281ce:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   281d0:	2300      	movs	r3, #0
{
   281d2:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   281d4:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   281d8:	4631      	mov	r1, r6
{
   281da:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   281dc:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   281de:	f88d 3006 	strb.w	r3, [sp, #6]
{
   281e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   281e6:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   281ea:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   281ee:	f7ff ff7a 	bl	280e6 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   281f2:	4620      	mov	r0, r4
   281f4:	f7ff ffab 	bl	2814e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   281f8:	2220      	movs	r2, #32
   281fa:	4629      	mov	r1, r5
   281fc:	4620      	mov	r0, r4
   281fe:	f7ff ffb3 	bl	28168 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   28202:	465a      	mov	r2, fp
   28204:	4620      	mov	r0, r4
   28206:	f10d 0106 	add.w	r1, sp, #6
   2820a:	f7ff ffad 	bl	28168 <tc_hmac_update>

	if (data && datalen)
   2820e:	f1b8 0f00 	cmp.w	r8, #0
   28212:	d007      	beq.n	28224 <update+0x60>
   28214:	f1b9 0f00 	cmp.w	r9, #0
   28218:	d004      	beq.n	28224 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2821a:	464a      	mov	r2, r9
   2821c:	4641      	mov	r1, r8
   2821e:	4620      	mov	r0, r4
   28220:	f7ff ffa2 	bl	28168 <tc_hmac_update>
	if (additional_data && additional_datalen)
   28224:	b13f      	cbz	r7, 28236 <update+0x72>
   28226:	f1ba 0f00 	cmp.w	sl, #0
   2822a:	d004      	beq.n	28236 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2822c:	4652      	mov	r2, sl
   2822e:	4639      	mov	r1, r7
   28230:	4620      	mov	r0, r4
   28232:	f7ff ff99 	bl	28168 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   28236:	4622      	mov	r2, r4
   28238:	2120      	movs	r1, #32
   2823a:	4630      	mov	r0, r6
   2823c:	f7ff ff9a 	bl	28174 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28240:	2220      	movs	r2, #32
   28242:	4631      	mov	r1, r6
   28244:	4620      	mov	r0, r4
   28246:	f7ff ff4e 	bl	280e6 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2824a:	4620      	mov	r0, r4
   2824c:	f7ff ff7f 	bl	2814e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28250:	2220      	movs	r2, #32
   28252:	4629      	mov	r1, r5
   28254:	4620      	mov	r0, r4
   28256:	f7ff ff87 	bl	28168 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2825a:	4622      	mov	r2, r4
   2825c:	2120      	movs	r1, #32
   2825e:	4628      	mov	r0, r5
   28260:	f7ff ff88 	bl	28174 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   28264:	f1b8 0f00 	cmp.w	r8, #0
   28268:	d03a      	beq.n	282e0 <update+0x11c>
   2826a:	f1b9 0f00 	cmp.w	r9, #0
   2826e:	d037      	beq.n	282e0 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28270:	2220      	movs	r2, #32
   28272:	4631      	mov	r1, r6
   28274:	4620      	mov	r0, r4
   28276:	f7ff ff36 	bl	280e6 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2827a:	4620      	mov	r0, r4
   2827c:	f7ff ff67 	bl	2814e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28280:	2220      	movs	r2, #32
   28282:	4629      	mov	r1, r5
   28284:	4620      	mov	r0, r4
   28286:	f7ff ff6f 	bl	28168 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2828a:	2201      	movs	r2, #1
   2828c:	f10d 0107 	add.w	r1, sp, #7
   28290:	4620      	mov	r0, r4
   28292:	f7ff ff69 	bl	28168 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   28296:	464a      	mov	r2, r9
   28298:	4641      	mov	r1, r8
   2829a:	4620      	mov	r0, r4
   2829c:	f7ff ff64 	bl	28168 <tc_hmac_update>
	if (additional_data && additional_datalen)
   282a0:	b13f      	cbz	r7, 282b2 <update+0xee>
   282a2:	f1ba 0f00 	cmp.w	sl, #0
   282a6:	d004      	beq.n	282b2 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   282a8:	4652      	mov	r2, sl
   282aa:	4639      	mov	r1, r7
   282ac:	4620      	mov	r0, r4
   282ae:	f7ff ff5b 	bl	28168 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   282b2:	4622      	mov	r2, r4
   282b4:	2120      	movs	r1, #32
   282b6:	4630      	mov	r0, r6
   282b8:	f7ff ff5c 	bl	28174 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   282bc:	2220      	movs	r2, #32
   282be:	4631      	mov	r1, r6
   282c0:	4620      	mov	r0, r4
   282c2:	f7ff ff10 	bl	280e6 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   282c6:	4620      	mov	r0, r4
   282c8:	f7ff ff41 	bl	2814e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   282cc:	2220      	movs	r2, #32
   282ce:	4629      	mov	r1, r5
   282d0:	4620      	mov	r0, r4
   282d2:	f7ff ff49 	bl	28168 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   282d6:	4622      	mov	r2, r4
   282d8:	2120      	movs	r1, #32
   282da:	4628      	mov	r0, r5
   282dc:	f7ff ff4a 	bl	28174 <tc_hmac_final>
}
   282e0:	b003      	add	sp, #12
   282e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000282e6 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   282e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   282e8:	460c      	mov	r4, r1
   282ea:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   282ec:	4605      	mov	r5, r0
   282ee:	b1b0      	cbz	r0, 2831e <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   282f0:	b1b9      	cbz	r1, 28322 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   282f2:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   282f4:	2220      	movs	r2, #32
   282f6:	2100      	movs	r1, #0
   282f8:	30f0      	adds	r0, #240	; 0xf0
   282fa:	f7ff fc36 	bl	27b6a <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   282fe:	2220      	movs	r2, #32
   28300:	2101      	movs	r1, #1
   28302:	f505 7088 	add.w	r0, r5, #272	; 0x110
   28306:	f7ff fc30 	bl	27b6a <_set>
	update(prng, personalization, plen, 0, 0);
   2830a:	4628      	mov	r0, r5
   2830c:	4633      	mov	r3, r6
   2830e:	463a      	mov	r2, r7
   28310:	4621      	mov	r1, r4
   28312:	9600      	str	r6, [sp, #0]
   28314:	f7ff ff56 	bl	281c4 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   28318:	2001      	movs	r0, #1
	prng->countdown = 0;
   2831a:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2831e:	b003      	add	sp, #12
   28320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   28322:	4608      	mov	r0, r1
   28324:	e7fb      	b.n	2831e <tc_hmac_prng_init+0x38>

00028326 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   28326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28328:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2832a:	4605      	mov	r5, r0
   2832c:	b180      	cbz	r0, 28350 <tc_hmac_prng_reseed+0x2a>
   2832e:	b179      	cbz	r1, 28350 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   28330:	2a1f      	cmp	r2, #31
   28332:	d90d      	bls.n	28350 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   28334:	b153      	cbz	r3, 2834c <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   28336:	b16c      	cbz	r4, 28354 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   28338:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2833a:	f7ff ff43 	bl	281c4 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2833e:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   28342:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   28344:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   28348:	b003      	add	sp, #12
   2834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2834c:	9300      	str	r3, [sp, #0]
   2834e:	e7f4      	b.n	2833a <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   28350:	2000      	movs	r0, #0
   28352:	e7f9      	b.n	28348 <tc_hmac_prng_reseed+0x22>
   28354:	4620      	mov	r0, r4
   28356:	e7f7      	b.n	28348 <tc_hmac_prng_reseed+0x22>

00028358 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   28358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2835c:	460d      	mov	r5, r1
   2835e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   28360:	4680      	mov	r8, r0
   28362:	b3d8      	cbz	r0, 283dc <tc_hmac_prng_generate+0x84>
   28364:	b3d2      	cbz	r2, 283dc <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   28366:	1e4b      	subs	r3, r1, #1
   28368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2836c:	d236      	bcs.n	283dc <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2836e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   28372:	b3ab      	cbz	r3, 283e0 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   28374:	3b01      	subs	r3, #1
   28376:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2837a:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2837e:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28382:	2220      	movs	r2, #32
   28384:	4649      	mov	r1, r9
   28386:	4620      	mov	r0, r4
   28388:	f7ff fead 	bl	280e6 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2838c:	4620      	mov	r0, r4
   2838e:	f7ff fede 	bl	2814e <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28392:	2220      	movs	r2, #32
   28394:	4639      	mov	r1, r7
   28396:	4620      	mov	r0, r4
   28398:	f7ff fee6 	bl	28168 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2839c:	4622      	mov	r2, r4
   2839e:	2120      	movs	r1, #32
   283a0:	4638      	mov	r0, r7
   283a2:	f7ff fee7 	bl	28174 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   283a6:	2d20      	cmp	r5, #32
   283a8:	462e      	mov	r6, r5
   283aa:	bf28      	it	cs
   283ac:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   283ae:	4640      	mov	r0, r8
   283b0:	4633      	mov	r3, r6
   283b2:	463a      	mov	r2, r7
   283b4:	4631      	mov	r1, r6
   283b6:	f7ff fbcb 	bl	27b50 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   283ba:	2d20      	cmp	r5, #32
   283bc:	bf38      	it	cc
   283be:	2520      	movcc	r5, #32
	while (outlen != 0) {
   283c0:	3d20      	subs	r5, #32
		out += bufferlen;
   283c2:	44b0      	add	r8, r6
	while (outlen != 0) {
   283c4:	d1dd      	bne.n	28382 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   283c6:	4620      	mov	r0, r4
   283c8:	462b      	mov	r3, r5
   283ca:	462a      	mov	r2, r5
   283cc:	4629      	mov	r1, r5
   283ce:	9500      	str	r5, [sp, #0]
   283d0:	f7ff fef8 	bl	281c4 <update>

	return TC_CRYPTO_SUCCESS;
   283d4:	2001      	movs	r0, #1
}
   283d6:	b003      	add	sp, #12
   283d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   283dc:	2000      	movs	r0, #0
   283de:	e7fa      	b.n	283d6 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   283e0:	f04f 30ff 	mov.w	r0, #4294967295
   283e4:	e7f7      	b.n	283d6 <tc_hmac_prng_generate+0x7e>

000283e6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   283e6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   283e8:	6800      	ldr	r0, [r0, #0]
   283ea:	f7e8 bb13 	b.w	10a14 <z_arm_fatal_error>

000283ee <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   283ee:	2100      	movs	r1, #0
   283f0:	2001      	movs	r0, #1
   283f2:	f7e8 bb0f 	b.w	10a14 <z_arm_fatal_error>

000283f6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   283f6:	b508      	push	{r3, lr}
	handler();
   283f8:	f7e8 fbd4 	bl	10ba4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   283fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   28400:	f7e8 bc9e 	b.w	10d40 <z_arm_exc_exit>

00028404 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   28404:	6e83      	ldr	r3, [r0, #104]	; 0x68
   28406:	f383 880b 	msr	PSPLIM, r3
}
   2840a:	4770      	bx	lr

0002840c <z_log_msg_static_create.constprop.0>:
   2840c:	2300      	movs	r3, #0
   2840e:	f7e6 baa1 	b.w	e954 <z_impl_z_log_msg_static_create>

00028412 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   28412:	4770      	bx	lr

00028414 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   28414:	4770      	bx	lr

00028416 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   28416:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2841a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2841e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   28420:	bf08      	it	eq
   28422:	f06f 0015 	mvneq.w	r0, #21
   28426:	4770      	bx	lr

00028428 <mpu_configure_region>:
{
   28428:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2842a:	890a      	ldrh	r2, [r1, #8]
   2842c:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2842e:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   28430:	684c      	ldr	r4, [r1, #4]
   28432:	f002 021f 	and.w	r2, r2, #31
{
   28436:	b085      	sub	sp, #20
   28438:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2843c:	9300      	str	r3, [sp, #0]
   2843e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   28442:	f023 031f 	bic.w	r3, r3, #31
   28446:	1e62      	subs	r2, r4, #1
   28448:	4413      	add	r3, r2
   2844a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2844e:	2807      	cmp	r0, #7
   28450:	9303      	str	r3, [sp, #12]
   28452:	d904      	bls.n	2845e <mpu_configure_region+0x36>
}
   28454:	b005      	add	sp, #20
   28456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2845a:	f7e9 b895 	b.w	11588 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2845e:	4669      	mov	r1, sp
   28460:	f7e9 f878 	bl	11554 <region_init>
}
   28464:	b005      	add	sp, #20
   28466:	bd30      	pop	{r4, r5, pc}

00028468 <_stdout_hook_default>:
}
   28468:	f04f 30ff 	mov.w	r0, #4294967295
   2846c:	4770      	bx	lr

0002846e <_stdin_hook_default>:
}
   2846e:	2000      	movs	r0, #0
   28470:	4770      	bx	lr

00028472 <_read>:
{
   28472:	4608      	mov	r0, r1
   28474:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   28476:	f7e9 ba97 	b.w	119a8 <z_impl_zephyr_read_stdin>

0002847a <_write>:
{
   2847a:	4608      	mov	r0, r1
   2847c:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2847e:	f7e9 baa7 	b.w	119d0 <z_impl_zephyr_write_stdout>

00028482 <_close>:
int _close(int file)
   28482:	f04f 30ff 	mov.w	r0, #4294967295
   28486:	4770      	bx	lr

00028488 <_lseek>:
}
   28488:	2000      	movs	r0, #0
   2848a:	4770      	bx	lr

0002848c <_isatty>:
}
   2848c:	2802      	cmp	r0, #2
   2848e:	bfcc      	ite	gt
   28490:	2000      	movgt	r0, #0
   28492:	2001      	movle	r0, #1
   28494:	4770      	bx	lr

00028496 <_kill>:
}
   28496:	2000      	movs	r0, #0
   28498:	4770      	bx	lr

0002849a <_getpid>:
}
   2849a:	2000      	movs	r0, #0
   2849c:	4770      	bx	lr

0002849e <_fstat>:
	st->st_mode = S_IFCHR;
   2849e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   284a2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   284a4:	604b      	str	r3, [r1, #4]
}
   284a6:	4770      	bx	lr

000284a8 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   284a8:	f7f8 bc84 	b.w	20db4 <z_impl_z_errno>

000284ac <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   284ac:	b530      	push	{r4, r5, lr}
   284ae:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   284b0:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   284b4:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   284b6:	794b      	ldrb	r3, [r1, #5]
   284b8:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   284bc:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   284be:	220d      	movs	r2, #13
   284c0:	2100      	movs	r1, #0
   284c2:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   284c6:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   284ca:	f003 fcb1 	bl	2be30 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   284ce:	aa02      	add	r2, sp, #8
   284d0:	4611      	mov	r1, r2
   284d2:	4628      	mov	r0, r5
   284d4:	f000 fb59 	bl	28b8a <bt_encrypt_le>
	if (err) {
   284d8:	b110      	cbz	r0, 284e0 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   284da:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   284dc:	b007      	add	sp, #28
   284de:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   284e0:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   284e2:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   284e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   284e8:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   284ea:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   284ec:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   284ee:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   284f2:	f003 fc53 	bl	2bd9c <memcmp>
   284f6:	fab0 f080 	clz	r0, r0
   284fa:	0940      	lsrs	r0, r0, #5
   284fc:	e7ee      	b.n	284dc <bt_rpa_irk_matches+0x30>

000284fe <bt_settings_decode_key>:
{
   284fe:	b570      	push	{r4, r5, r6, lr}
   28500:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   28502:	2100      	movs	r1, #0
{
   28504:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   28506:	f7ff fa54 	bl	279b2 <settings_name_next>
   2850a:	280d      	cmp	r0, #13
   2850c:	d118      	bne.n	28540 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2850e:	7b23      	ldrb	r3, [r4, #12]
   28510:	2b30      	cmp	r3, #48	; 0x30
   28512:	d013      	beq.n	2853c <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   28514:	2b31      	cmp	r3, #49	; 0x31
   28516:	d113      	bne.n	28540 <bt_settings_decode_key+0x42>
   28518:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2851a:	f805 3b06 	strb.w	r3, [r5], #6
   2851e:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   28522:	462a      	mov	r2, r5
   28524:	4620      	mov	r0, r4
   28526:	2301      	movs	r3, #1
   28528:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2852a:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2852c:	f7fe fa12 	bl	26954 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   28530:	42b4      	cmp	r4, r6
   28532:	f105 35ff 	add.w	r5, r5, #4294967295
   28536:	d1f4      	bne.n	28522 <bt_settings_decode_key+0x24>
	return 0;
   28538:	2000      	movs	r0, #0
}
   2853a:	bd70      	pop	{r4, r5, r6, pc}
   2853c:	2300      	movs	r3, #0
   2853e:	e7ec      	b.n	2851a <bt_settings_decode_key+0x1c>
		return -EINVAL;
   28540:	f06f 0015 	mvn.w	r0, #21
   28544:	e7f9      	b.n	2853a <bt_settings_decode_key+0x3c>

00028546 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   28546:	b510      	push	{r4, lr}
   28548:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2854a:	7801      	ldrb	r1, [r0, #0]
   2854c:	7822      	ldrb	r2, [r4, #0]
{
   2854e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   28550:	428a      	cmp	r2, r1
   28552:	d00f      	beq.n	28574 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   28554:	4669      	mov	r1, sp
   28556:	f7e9 fca1 	bl	11e9c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2855a:	4620      	mov	r0, r4
   2855c:	a905      	add	r1, sp, #20
   2855e:	f7e9 fc9d 	bl	11e9c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   28562:	2210      	movs	r2, #16
   28564:	f10d 0115 	add.w	r1, sp, #21
   28568:	f10d 0001 	add.w	r0, sp, #1
   2856c:	f003 fc16 	bl	2bd9c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   28570:	b00a      	add	sp, #40	; 0x28
   28572:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   28574:	2a01      	cmp	r2, #1
   28576:	d006      	beq.n	28586 <bt_uuid_cmp+0x40>
   28578:	2a02      	cmp	r2, #2
   2857a:	d007      	beq.n	2858c <bt_uuid_cmp+0x46>
   2857c:	b972      	cbnz	r2, 2859c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2857e:	8840      	ldrh	r0, [r0, #2]
   28580:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   28582:	1ac0      	subs	r0, r0, r3
   28584:	e7f4      	b.n	28570 <bt_uuid_cmp+0x2a>
   28586:	6840      	ldr	r0, [r0, #4]
   28588:	6863      	ldr	r3, [r4, #4]
   2858a:	e7fa      	b.n	28582 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2858c:	2210      	movs	r2, #16
   2858e:	1c61      	adds	r1, r4, #1
   28590:	3001      	adds	r0, #1
}
   28592:	b00a      	add	sp, #40	; 0x28
   28594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28598:	f003 bc00 	b.w	2bd9c <memcmp>
	switch (u1->type) {
   2859c:	f06f 0015 	mvn.w	r0, #21
   285a0:	e7e6      	b.n	28570 <bt_uuid_cmp+0x2a>

000285a2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   285a2:	2a04      	cmp	r2, #4
   285a4:	d00a      	beq.n	285bc <bt_uuid_create+0x1a>
   285a6:	2a10      	cmp	r2, #16
   285a8:	d00d      	beq.n	285c6 <bt_uuid_create+0x24>
   285aa:	2a02      	cmp	r2, #2
   285ac:	f04f 0300 	mov.w	r3, #0
   285b0:	d115      	bne.n	285de <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   285b2:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   285b4:	880b      	ldrh	r3, [r1, #0]
   285b6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   285b8:	2001      	movs	r0, #1
   285ba:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   285bc:	2301      	movs	r3, #1
   285be:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   285c0:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   285c2:	6043      	str	r3, [r0, #4]
		break;
   285c4:	e7f8      	b.n	285b8 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   285c6:	2302      	movs	r3, #2
   285c8:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   285cc:	f101 0310 	add.w	r3, r1, #16
   285d0:	f851 2b04 	ldr.w	r2, [r1], #4
   285d4:	4299      	cmp	r1, r3
   285d6:	f840 2b04 	str.w	r2, [r0], #4
   285da:	d1f9      	bne.n	285d0 <bt_uuid_create+0x2e>
   285dc:	e7ec      	b.n	285b8 <bt_uuid_create+0x16>
	switch (data_len) {
   285de:	4618      	mov	r0, r3
}
   285e0:	4770      	bx	lr

000285e2 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   285e2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   285e4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   285e6:	2106      	movs	r1, #6
{
   285e8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   285ea:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   285ee:	f7ec f80b 	bl	14608 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   285f2:	b918      	cbnz	r0, 285fc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   285f4:	79a3      	ldrb	r3, [r4, #6]
   285f6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   285fa:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   285fc:	bd10      	pop	{r4, pc}

000285fe <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   285fe:	280f      	cmp	r0, #15
   28600:	d807      	bhi.n	28612 <bt_hci_evt_get_flags+0x14>
   28602:	280d      	cmp	r0, #13
   28604:	d80b      	bhi.n	2861e <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   28606:	2805      	cmp	r0, #5
   28608:	bf08      	it	eq
   2860a:	2003      	moveq	r0, #3
   2860c:	bf18      	it	ne
   2860e:	2002      	movne	r0, #2
   28610:	4770      	bx	lr
	switch (evt) {
   28612:	2813      	cmp	r0, #19
   28614:	d003      	beq.n	2861e <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   28616:	281a      	cmp	r0, #26
   28618:	bf08      	it	eq
   2861a:	2001      	moveq	r0, #1
   2861c:	e7f6      	b.n	2860c <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2861e:	2001      	movs	r0, #1
	}
}
   28620:	4770      	bx	lr

00028622 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   28622:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   28626:	b183      	cbz	r3, 2864a <update_sec_level+0x28>
   28628:	7b5a      	ldrb	r2, [r3, #13]
   2862a:	07d1      	lsls	r1, r2, #31
   2862c:	d50d      	bpl.n	2864a <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2862e:	06d2      	lsls	r2, r2, #27
   28630:	d50d      	bpl.n	2864e <update_sec_level+0x2c>
   28632:	7b1b      	ldrb	r3, [r3, #12]
   28634:	2b10      	cmp	r3, #16
   28636:	bf14      	ite	ne
   28638:	2303      	movne	r3, #3
   2863a:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2863c:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2863e:	7a80      	ldrb	r0, [r0, #10]
}
   28640:	4298      	cmp	r0, r3
   28642:	bf8c      	ite	hi
   28644:	2000      	movhi	r0, #0
   28646:	2001      	movls	r0, #1
   28648:	4770      	bx	lr
   2864a:	2302      	movs	r3, #2
   2864c:	e7f6      	b.n	2863c <update_sec_level+0x1a>
   2864e:	2303      	movs	r3, #3
   28650:	e7f4      	b.n	2863c <update_sec_level+0x1a>

00028652 <hci_vendor_event>:
}
   28652:	4770      	bx	lr

00028654 <atomic_or>:
{
   28654:	4603      	mov	r3, r0
   28656:	b510      	push	{r4, lr}
}
   28658:	e8d3 0fef 	ldaex	r0, [r3]
   2865c:	ea40 0201 	orr.w	r2, r0, r1
   28660:	e8c3 2fe4 	stlex	r4, r2, [r3]
   28664:	2c00      	cmp	r4, #0
   28666:	d1f7      	bne.n	28658 <atomic_or+0x4>
   28668:	bd10      	pop	{r4, pc}

0002866a <bt_addr_copy>:
   2866a:	680b      	ldr	r3, [r1, #0]
   2866c:	6003      	str	r3, [r0, #0]
   2866e:	888b      	ldrh	r3, [r1, #4]
   28670:	8083      	strh	r3, [r0, #4]
}
   28672:	4770      	bx	lr

00028674 <bt_addr_le_copy>:
   28674:	680b      	ldr	r3, [r1, #0]
   28676:	6003      	str	r3, [r0, #0]
   28678:	888b      	ldrh	r3, [r1, #4]
   2867a:	8083      	strh	r3, [r0, #4]
   2867c:	798b      	ldrb	r3, [r1, #6]
   2867e:	7183      	strb	r3, [r0, #6]
}
   28680:	4770      	bx	lr

00028682 <z_log_msg_static_create.constprop.0>:
   28682:	2300      	movs	r3, #0
   28684:	f7e6 b966 	b.w	e954 <z_impl_z_log_msg_static_create>

00028688 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28688:	e8d0 3fef 	ldaex	r3, [r0]
   2868c:	400b      	ands	r3, r1
   2868e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   28692:	2a00      	cmp	r2, #0
   28694:	d1f8      	bne.n	28688 <atomic_and.isra.0>
}
   28696:	4770      	bx	lr

00028698 <sys_put_le64>:
	dst[1] = val >> 8;
   28698:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2869c:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2869e:	2300      	movs	r3, #0
   286a0:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   286a2:	0e00      	lsrs	r0, r0, #24
   286a4:	70d0      	strb	r0, [r2, #3]
   286a6:	f3c1 2007 	ubfx	r0, r1, #8, #8
   286aa:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   286ac:	7093      	strb	r3, [r2, #2]
   286ae:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   286b0:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   286b2:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   286b4:	71d1      	strb	r1, [r2, #7]
}
   286b6:	4770      	bx	lr

000286b8 <bt_hci_disconnect>:
{
   286b8:	b570      	push	{r4, r5, r6, lr}
   286ba:	4606      	mov	r6, r0
   286bc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   286be:	f240 4006 	movw	r0, #1030	; 0x406
   286c2:	2103      	movs	r1, #3
   286c4:	f7ea f8da 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   286c8:	4604      	mov	r4, r0
   286ca:	b168      	cbz	r0, 286e8 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   286cc:	2103      	movs	r1, #3
   286ce:	300c      	adds	r0, #12
   286d0:	f7f2 fda4 	bl	1b21c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   286d4:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   286d6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   286d8:	4621      	mov	r1, r4
}
   286da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   286de:	2200      	movs	r2, #0
   286e0:	f240 4006 	movw	r0, #1030	; 0x406
   286e4:	f7ea b918 	b.w	12918 <bt_hci_cmd_send_sync>
}
   286e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   286ec:	bd70      	pop	{r4, r5, r6, pc}

000286ee <bt_le_set_data_len>:
{
   286ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   286f0:	4607      	mov	r7, r0
   286f2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   286f4:	f242 0022 	movw	r0, #8226	; 0x2022
   286f8:	2106      	movs	r1, #6
{
   286fa:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   286fc:	f7ea f8be 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   28700:	4604      	mov	r4, r0
   28702:	b178      	cbz	r0, 28724 <bt_le_set_data_len+0x36>
   28704:	2106      	movs	r1, #6
   28706:	300c      	adds	r0, #12
   28708:	f7f2 fd88 	bl	1b21c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2870c:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2870e:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28710:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   28712:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   28714:	4621      	mov	r1, r4
}
   28716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2871a:	2200      	movs	r2, #0
   2871c:	f242 0022 	movw	r0, #8226	; 0x2022
   28720:	f7ea b8fa 	b.w	12918 <bt_hci_cmd_send_sync>
}
   28724:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002872a <bt_le_set_phy>:
{
   2872a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2872e:	4681      	mov	r9, r0
   28730:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28732:	f242 0032 	movw	r0, #8242	; 0x2032
   28736:	2107      	movs	r1, #7
{
   28738:	4617      	mov	r7, r2
   2873a:	461e      	mov	r6, r3
   2873c:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28740:	f7ea f89c 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   28744:	4605      	mov	r5, r0
   28746:	b1a0      	cbz	r0, 28772 <bt_le_set_phy+0x48>
   28748:	2107      	movs	r1, #7
   2874a:	300c      	adds	r0, #12
   2874c:	f7f2 fd66 	bl	1b21c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28750:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   28754:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28758:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2875a:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2875c:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2875e:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   28762:	4629      	mov	r1, r5
}
   28764:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   28768:	2200      	movs	r2, #0
   2876a:	f242 0032 	movw	r0, #8242	; 0x2032
   2876e:	f7ea b8d3 	b.w	12918 <bt_hci_cmd_send_sync>
}
   28772:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002877a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2877a:	68c0      	ldr	r0, [r0, #12]
   2877c:	f7ea b99c 	b.w	12ab8 <bt_hci_le_enh_conn_complete>

00028780 <bt_le_conn_params_valid>:
{
   28780:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   28782:	8803      	ldrh	r3, [r0, #0]
   28784:	8842      	ldrh	r2, [r0, #2]
   28786:	4293      	cmp	r3, r2
   28788:	d819      	bhi.n	287be <bt_le_conn_params_valid+0x3e>
   2878a:	2b05      	cmp	r3, #5
   2878c:	d917      	bls.n	287be <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2878e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   28792:	d814      	bhi.n	287be <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   28794:	8883      	ldrh	r3, [r0, #4]
   28796:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2879a:	d210      	bcs.n	287be <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2879c:	f640 4476 	movw	r4, #3190	; 0xc76
   287a0:	88c0      	ldrh	r0, [r0, #6]
   287a2:	f1a0 010a 	sub.w	r1, r0, #10
   287a6:	b289      	uxth	r1, r1
   287a8:	42a1      	cmp	r1, r4
   287aa:	d808      	bhi.n	287be <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   287ac:	3301      	adds	r3, #1
   287ae:	b29b      	uxth	r3, r3
   287b0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   287b2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   287b6:	bf34      	ite	cc
   287b8:	2001      	movcc	r0, #1
   287ba:	2000      	movcs	r0, #0
}
   287bc:	bd10      	pop	{r4, pc}
		return false;
   287be:	2000      	movs	r0, #0
   287c0:	e7fc      	b.n	287bc <bt_le_conn_params_valid+0x3c>

000287c2 <le_conn_param_neg_reply>:
{
   287c2:	b570      	push	{r4, r5, r6, lr}
   287c4:	4606      	mov	r6, r0
   287c6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   287c8:	f242 0021 	movw	r0, #8225	; 0x2021
   287cc:	2103      	movs	r1, #3
   287ce:	f7ea f855 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   287d2:	4604      	mov	r4, r0
   287d4:	b918      	cbnz	r0, 287de <le_conn_param_neg_reply+0x1c>
}
   287d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   287da:	f7e9 bc61 	b.w	120a0 <le_conn_param_neg_reply.part.0>
   287de:	2103      	movs	r1, #3
   287e0:	300c      	adds	r0, #12
   287e2:	f7f2 fd1b 	bl	1b21c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   287e6:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   287e8:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   287ea:	4621      	mov	r1, r4
}
   287ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   287f0:	f242 0021 	movw	r0, #8225	; 0x2021
   287f4:	f7ea bbc6 	b.w	12f84 <bt_hci_cmd_send>

000287f8 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   287f8:	f240 3041 	movw	r0, #833	; 0x341
   287fc:	4770      	bx	lr

000287fe <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   287fe:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   28800:	f7f1 ff22 	bl	1a648 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   28804:	b118      	cbz	r0, 2880e <bt_addr_le_is_bonded+0x10>
   28806:	89c0      	ldrh	r0, [r0, #14]
   28808:	3800      	subs	r0, #0
   2880a:	bf18      	it	ne
   2880c:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2880e:	bd08      	pop	{r3, pc}

00028810 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   28810:	2207      	movs	r2, #7
{
   28812:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   28814:	f003 fac2 	bl	2bd9c <memcmp>
}
   28818:	fab0 f080 	clz	r0, r0
   2881c:	0940      	lsrs	r0, r0, #5
   2881e:	bd08      	pop	{r3, pc}

00028820 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28820:	e8d0 0faf 	lda	r0, [r0]
}
   28824:	4770      	bx	lr

00028826 <bt_addr_copy>:
   28826:	680b      	ldr	r3, [r1, #0]
   28828:	6003      	str	r3, [r0, #0]
   2882a:	888b      	ldrh	r3, [r1, #4]
   2882c:	8083      	strh	r3, [r0, #4]
}
   2882e:	4770      	bx	lr

00028830 <bt_addr_le_copy>:
   28830:	680b      	ldr	r3, [r1, #0]
   28832:	6003      	str	r3, [r0, #0]
   28834:	888b      	ldrh	r3, [r1, #4]
   28836:	8083      	strh	r3, [r0, #4]
   28838:	798b      	ldrb	r3, [r1, #6]
   2883a:	7183      	strb	r3, [r0, #6]
}
   2883c:	4770      	bx	lr

0002883e <hci_id_add>:
{
   2883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28840:	460f      	mov	r7, r1
   28842:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   28844:	bb30      	cbnz	r0, 28894 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   28846:	2127      	movs	r1, #39	; 0x27
   28848:	f242 0027 	movw	r0, #8231	; 0x2027
   2884c:	f7ea f816 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   28850:	4605      	mov	r5, r0
   28852:	b310      	cbz	r0, 2889a <hci_id_add+0x5c>
   28854:	2127      	movs	r1, #39	; 0x27
   28856:	300c      	adds	r0, #12
   28858:	f7f2 fce0 	bl	1b21c <net_buf_simple_add>
   2885c:	4622      	mov	r2, r4
   2885e:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   28860:	4639      	mov	r1, r7
   28862:	f7ff ffe5 	bl	28830 <bt_addr_le_copy>
   28866:	1dc3      	adds	r3, r0, #7
   28868:	f104 0110 	add.w	r1, r4, #16
   2886c:	f852 0b04 	ldr.w	r0, [r2], #4
   28870:	428a      	cmp	r2, r1
   28872:	f843 0b04 	str.w	r0, [r3], #4
   28876:	d1f9      	bne.n	2886c <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   28878:	2210      	movs	r2, #16
   2887a:	2100      	movs	r1, #0
   2887c:	f106 0017 	add.w	r0, r6, #23
   28880:	f003 fad6 	bl	2be30 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   28884:	4629      	mov	r1, r5
}
   28886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2888a:	2200      	movs	r2, #0
   2888c:	f242 0027 	movw	r0, #8231	; 0x2027
   28890:	f7ea b842 	b.w	12918 <bt_hci_cmd_send_sync>
		return -EINVAL;
   28894:	f06f 0015 	mvn.w	r0, #21
}
   28898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2889a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2889e:	e7fb      	b.n	28898 <hci_id_add+0x5a>

000288a0 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   288a0:	7a03      	ldrb	r3, [r0, #8]
{
   288a2:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   288a4:	075b      	lsls	r3, r3, #29
   288a6:	d505      	bpl.n	288b4 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   288a8:	4601      	mov	r1, r0
   288aa:	322a      	adds	r2, #42	; 0x2a
   288ac:	f811 0b01 	ldrb.w	r0, [r1], #1
   288b0:	f7ff bfc5 	b.w	2883e <hci_id_add>
}
   288b4:	4770      	bx	lr

000288b6 <z_log_msg_static_create.constprop.0>:
   288b6:	2300      	movs	r3, #0
   288b8:	f7e6 b84c 	b.w	e954 <z_impl_z_log_msg_static_create>

000288bc <addr_res_enable>:
{
   288bc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   288be:	2101      	movs	r1, #1
{
   288c0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   288c2:	f242 002d 	movw	r0, #8237	; 0x202d
   288c6:	f7e9 ffd9 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   288ca:	4604      	mov	r4, r0
   288cc:	b158      	cbz	r0, 288e6 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   288ce:	4629      	mov	r1, r5
   288d0:	300c      	adds	r0, #12
   288d2:	f001 fd35 	bl	2a340 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   288d6:	4621      	mov	r1, r4
}
   288d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   288dc:	2200      	movs	r2, #0
   288de:	f242 002d 	movw	r0, #8237	; 0x202d
   288e2:	f7ea b819 	b.w	12918 <bt_hci_cmd_send_sync>
}
   288e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   288ea:	bd38      	pop	{r3, r4, r5, pc}

000288ec <adv_unpause_enabled>:
{
   288ec:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   288ee:	f100 0310 	add.w	r3, r0, #16
   288f2:	e8d3 2fef 	ldaex	r2, [r3]
   288f6:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   288fa:	e8c3 1fe4 	stlex	r4, r1, [r3]
   288fe:	2c00      	cmp	r4, #0
   28900:	d1f7      	bne.n	288f2 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   28902:	0413      	lsls	r3, r2, #16
   28904:	d503      	bpl.n	2890e <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   28906:	2101      	movs	r1, #1
}
   28908:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2890a:	f000 b939 	b.w	28b80 <bt_le_adv_set_enable>
}
   2890e:	bc10      	pop	{r4}
   28910:	4770      	bx	lr

00028912 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28912:	f100 0210 	add.w	r2, r0, #16
{
   28916:	b508      	push	{r3, lr}
   28918:	4603      	mov	r3, r0
   2891a:	4610      	mov	r0, r2
   2891c:	f7ff ff80 	bl	28820 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28920:	0601      	lsls	r1, r0, #24
   28922:	d50d      	bpl.n	28940 <adv_pause_enabled+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28924:	e8d2 0fef 	ldaex	r0, [r2]
   28928:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   2892c:	e8c2 0fe1 	stlex	r1, r0, [r2]
   28930:	2900      	cmp	r1, #0
   28932:	d1f7      	bne.n	28924 <adv_pause_enabled+0x12>
		bt_le_adv_set_enable(adv, false);
   28934:	4618      	mov	r0, r3
}
   28936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   2893a:	2100      	movs	r1, #0
   2893c:	f000 b920 	b.w	28b80 <bt_le_adv_set_enable>
}
   28940:	bd08      	pop	{r3, pc}

00028942 <bt_lookup_id_addr>:
{
   28942:	b510      	push	{r4, lr}
   28944:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   28946:	b930      	cbnz	r0, 28956 <bt_lookup_id_addr+0x14>
   28948:	b119      	cbz	r1, 28952 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2894a:	f7f1 fe25 	bl	1a598 <bt_keys_find_irk>
		if (keys) {
   2894e:	b100      	cbz	r0, 28952 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   28950:	1c44      	adds	r4, r0, #1
}
   28952:	4620      	mov	r0, r4
   28954:	bd10      	pop	{r4, pc}
		return NULL;
   28956:	2400      	movs	r4, #0
   28958:	e7fb      	b.n	28952 <bt_lookup_id_addr+0x10>

0002895a <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2895a:	b118      	cbz	r0, 28964 <bt_id_set_adv_random_addr+0xa>
   2895c:	b111      	cbz	r1, 28964 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2895e:	4608      	mov	r0, r1
   28960:	f7ea bf12 	b.w	13788 <set_random_address>
}
   28964:	f06f 0015 	mvn.w	r0, #21
   28968:	4770      	bx	lr

0002896a <bt_id_set_adv_private_addr>:
{
   2896a:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2896c:	4604      	mov	r4, r0
   2896e:	b180      	cbz	r0, 28992 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   28970:	2106      	movs	r1, #6
   28972:	4668      	mov	r0, sp
   28974:	f7eb fe48 	bl	14608 <bt_rand>
	if (err) {
   28978:	b948      	cbnz	r0, 2898e <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2897a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2897e:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   28980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   28984:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   28986:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2898a:	f7ff ffe6 	bl	2895a <bt_id_set_adv_random_addr>
}
   2898e:	b002      	add	sp, #8
   28990:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28992:	f06f 0015 	mvn.w	r0, #21
   28996:	e7fa      	b.n	2898e <bt_id_set_adv_private_addr+0x24>

00028998 <bt_id_adv_random_addr_check>:
}
   28998:	3800      	subs	r0, #0
   2899a:	bf18      	it	ne
   2899c:	2001      	movne	r0, #1
   2899e:	4770      	bx	lr

000289a0 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   289a0:	7a03      	ldrb	r3, [r0, #8]
   289a2:	07d9      	lsls	r1, r3, #31
   289a4:	d504      	bpl.n	289b0 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   289a6:	f023 0301 	bic.w	r3, r3, #1
   289aa:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   289ac:	f7eb b858 	b.w	13a60 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   289b0:	0799      	lsls	r1, r3, #30
   289b2:	d504      	bpl.n	289be <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   289b4:	f023 0302 	bic.w	r3, r3, #2
   289b8:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   289ba:	f7eb b86b 	b.w	13a94 <bt_id_del>
}
   289be:	4770      	bx	lr

000289c0 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   289c0:	2000      	movs	r0, #0
   289c2:	4770      	bx	lr

000289c4 <get_adv_channel_map>:
{
   289c4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   289c6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   289ca:	bf0c      	ite	eq
   289cc:	2007      	moveq	r0, #7
   289ce:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   289d0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   289d2:	bf48      	it	mi
   289d4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   289d8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   289da:	bf48      	it	mi
   289dc:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   289e0:	4770      	bx	lr

000289e2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   289e2:	e8d0 0faf 	lda	r0, [r0]
}
   289e6:	4770      	bx	lr

000289e8 <atomic_and>:
{
   289e8:	4603      	mov	r3, r0
   289ea:	b510      	push	{r4, lr}
}
   289ec:	e8d3 0fef 	ldaex	r0, [r3]
   289f0:	ea00 0201 	and.w	r2, r0, r1
   289f4:	e8c3 2fe4 	stlex	r4, r2, [r3]
   289f8:	2c00      	cmp	r4, #0
   289fa:	d1f7      	bne.n	289ec <atomic_and+0x4>
   289fc:	bd10      	pop	{r4, pc}

000289fe <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   289fe:	680b      	ldr	r3, [r1, #0]
   28a00:	6003      	str	r3, [r0, #0]
   28a02:	888b      	ldrh	r3, [r1, #4]
   28a04:	8083      	strh	r3, [r0, #4]
   28a06:	798b      	ldrb	r3, [r1, #6]
   28a08:	7183      	strb	r3, [r0, #6]
   28a0a:	4770      	bx	lr

00028a0c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28a0c:	2301      	movs	r3, #1
{
   28a0e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28a10:	fa03 f101 	lsl.w	r1, r3, r1
{
   28a14:	4604      	mov	r4, r0
	if (val) {
   28a16:	b142      	cbz	r2, 28a2a <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28a18:	e8d4 3fef 	ldaex	r3, [r4]
   28a1c:	430b      	orrs	r3, r1
   28a1e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   28a22:	2a00      	cmp	r2, #0
   28a24:	d1f8      	bne.n	28a18 <atomic_set_bit_to+0xc>
	}
}
   28a26:	bc10      	pop	{r4}
   28a28:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28a2a:	43c9      	mvns	r1, r1
}
   28a2c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28a2e:	f7ff bfdb 	b.w	289e8 <atomic_and>

00028a32 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   28a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a36:	b087      	sub	sp, #28
   28a38:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   28a3c:	4605      	mov	r5, r0
   28a3e:	460c      	mov	r4, r1
   28a40:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   28a42:	2100      	movs	r1, #0
   28a44:	2210      	movs	r2, #16
   28a46:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   28a48:	461f      	mov	r7, r3
   28a4a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   28a4e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   28a52:	f003 f9ed 	bl	2be30 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   28a56:	b9ce      	cbnz	r6, 28a8c <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   28a58:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   28a5c:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   28a5e:	f242 0008 	movw	r0, #8200	; 0x2008
   28a62:	a902      	add	r1, sp, #8
   28a64:	f7eb fa52 	bl	13f0c <hci_set_ad>
		if (err) {
   28a68:	4604      	mov	r4, r0
   28a6a:	b958      	cbnz	r0, 28a84 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   28a6c:	f1ba 0f00 	cmp.w	sl, #0
   28a70:	d13a      	bne.n	28ae8 <le_adv_update.constprop.0+0xb6>
   28a72:	3510      	adds	r5, #16
   28a74:	e8d5 3fef 	ldaex	r3, [r5]
   28a78:	f043 0304 	orr.w	r3, r3, #4
   28a7c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   28a80:	2a00      	cmp	r2, #0
   28a82:	d1f7      	bne.n	28a74 <le_adv_update.constprop.0+0x42>
}
   28a84:	4620      	mov	r0, r4
   28a86:	b007      	add	sp, #28
   28a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   28a8c:	f7ea fe2a 	bl	136e4 <bt_get_name>
   28a90:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   28a92:	b9e4      	cbnz	r4, 28ace <le_adv_update.constprop.0+0x9c>
   28a94:	bb37      	cbnz	r7, 28ae4 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   28a96:	4658      	mov	r0, fp
   28a98:	f7e0 fc62 	bl	9360 <strlen>
   28a9c:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   28a9e:	2e01      	cmp	r6, #1
		d[0].data = ad;
   28aa0:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   28aa4:	f88d 3000 	strb.w	r3, [sp]
   28aa8:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   28aac:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   28ab0:	d1d4      	bne.n	28a5c <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   28ab2:	2202      	movs	r2, #2
			d[1].data = &data;
   28ab4:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   28ab8:	9605      	str	r6, [sp, #20]
			d_len = 2;
   28aba:	e7d0      	b.n	28a5e <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   28abc:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   28ac0:	3a08      	subs	r2, #8
   28ac2:	2a01      	cmp	r2, #1
   28ac4:	d924      	bls.n	28b10 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   28ac6:	3301      	adds	r3, #1
   28ac8:	4598      	cmp	r8, r3
   28aca:	d1f7      	bne.n	28abc <le_adv_update.constprop.0+0x8a>
   28acc:	e7e2      	b.n	28a94 <le_adv_update.constprop.0+0x62>
   28ace:	2300      	movs	r3, #0
   28ad0:	e7fa      	b.n	28ac8 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   28ad2:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   28ad6:	3a08      	subs	r2, #8
   28ad8:	2a01      	cmp	r2, #1
   28ada:	d919      	bls.n	28b10 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   28adc:	3301      	adds	r3, #1
   28ade:	4599      	cmp	r9, r3
   28ae0:	d1f7      	bne.n	28ad2 <le_adv_update.constprop.0+0xa0>
   28ae2:	e7d8      	b.n	28a96 <le_adv_update.constprop.0+0x64>
   28ae4:	2300      	movs	r3, #0
   28ae6:	e7fa      	b.n	28ade <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   28ae8:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   28aea:	2e02      	cmp	r6, #2
			d[1].len = 1;
   28aec:	bf08      	it	eq
   28aee:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28af0:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   28af4:	bf08      	it	eq
   28af6:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28af8:	a902      	add	r1, sp, #8
			d[1].data = &data;
   28afa:	bf08      	it	eq
   28afc:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   28b00:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28b04:	f7eb fa02 	bl	13f0c <hci_set_ad>
		if (err) {
   28b08:	2800      	cmp	r0, #0
   28b0a:	d0b2      	beq.n	28a72 <le_adv_update.constprop.0+0x40>
   28b0c:	4604      	mov	r4, r0
   28b0e:	e7b9      	b.n	28a84 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   28b10:	f06f 0415 	mvn.w	r4, #21
   28b14:	e7b6      	b.n	28a84 <le_adv_update.constprop.0+0x52>

00028b16 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   28b16:	6843      	ldr	r3, [r0, #4]
   28b18:	f013 0008 	ands.w	r0, r3, #8
   28b1c:	d00a      	beq.n	28b34 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   28b1e:	035a      	lsls	r2, r3, #13
   28b20:	d407      	bmi.n	28b32 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   28b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   28b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28b2a:	bf14      	ite	ne
   28b2c:	2002      	movne	r0, #2
   28b2e:	2001      	moveq	r0, #1
   28b30:	4770      	bx	lr
   28b32:	2001      	movs	r0, #1
}
   28b34:	4770      	bx	lr

00028b36 <bt_le_adv_set_enable_legacy>:
{
   28b36:	b570      	push	{r4, r5, r6, lr}
   28b38:	4606      	mov	r6, r0
   28b3a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   28b3c:	f242 000a 	movw	r0, #8202	; 0x200a
   28b40:	2101      	movs	r1, #1
{
   28b42:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   28b44:	f7e9 fe9a 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   28b48:	4604      	mov	r4, r0
   28b4a:	b1b0      	cbz	r0, 28b7a <bt_le_adv_set_enable_legacy+0x44>
   28b4c:	300c      	adds	r0, #12
	if (enable) {
   28b4e:	b195      	cbz	r5, 28b76 <bt_le_adv_set_enable_legacy+0x40>
   28b50:	2101      	movs	r1, #1
   28b52:	f001 fbf5 	bl	2a340 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   28b56:	4620      	mov	r0, r4
   28b58:	f106 0210 	add.w	r2, r6, #16
   28b5c:	a903      	add	r1, sp, #12
   28b5e:	2307      	movs	r3, #7
   28b60:	9500      	str	r5, [sp, #0]
   28b62:	f7e9 fe79 	bl	12858 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   28b66:	2200      	movs	r2, #0
   28b68:	4621      	mov	r1, r4
   28b6a:	f242 000a 	movw	r0, #8202	; 0x200a
   28b6e:	f7e9 fed3 	bl	12918 <bt_hci_cmd_send_sync>
}
   28b72:	b006      	add	sp, #24
   28b74:	bd70      	pop	{r4, r5, r6, pc}
   28b76:	4629      	mov	r1, r5
   28b78:	e7eb      	b.n	28b52 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   28b7a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28b7e:	e7f8      	b.n	28b72 <bt_le_adv_set_enable_legacy+0x3c>

00028b80 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   28b80:	f7ff bfd9 	b.w	28b36 <bt_le_adv_set_enable_legacy>

00028b84 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   28b84:	3018      	adds	r0, #24
   28b86:	f7f9 be29 	b.w	227dc <k_work_cancel_delayable>

00028b8a <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   28b8a:	b530      	push	{r4, r5, lr}
   28b8c:	460d      	mov	r5, r1
   28b8e:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   28b90:	4601      	mov	r1, r0
{
   28b92:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   28b94:	b310      	cbz	r0, 28bdc <bt_encrypt_le+0x52>
   28b96:	b30d      	cbz	r5, 28bdc <bt_encrypt_le+0x52>
   28b98:	b302      	cbz	r2, 28bdc <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   28b9a:	4668      	mov	r0, sp
   28b9c:	f7eb fcaa 	bl	144f4 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   28ba0:	4669      	mov	r1, sp
   28ba2:	a804      	add	r0, sp, #16
   28ba4:	f7e7 fdae 	bl	10704 <tc_aes128_set_encrypt_key>
   28ba8:	b1c0      	cbz	r0, 28bdc <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   28baa:	4629      	mov	r1, r5
   28bac:	4668      	mov	r0, sp
   28bae:	f7eb fca1 	bl	144f4 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   28bb2:	4669      	mov	r1, sp
   28bb4:	4620      	mov	r0, r4
   28bb6:	aa04      	add	r2, sp, #16
   28bb8:	f7ff f8a1 	bl	27cfe <tc_aes_encrypt>
   28bbc:	b170      	cbz	r0, 28bdc <bt_encrypt_le+0x52>
   28bbe:	1e63      	subs	r3, r4, #1
   28bc0:	f104 0210 	add.w	r2, r4, #16
   28bc4:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28bc6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28bca:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   28bce:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28bd0:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28bd2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28bd4:	d1f7      	bne.n	28bc6 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   28bd6:	2000      	movs	r0, #0
}
   28bd8:	b031      	add	sp, #196	; 0xc4
   28bda:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28bdc:	f06f 0015 	mvn.w	r0, #21
   28be0:	e7fa      	b.n	28bd8 <bt_encrypt_le+0x4e>

00028be2 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28be2:	2200      	movs	r2, #0
	return list->head;
   28be4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28be6:	b90b      	cbnz	r3, 28bec <sys_slist_find_and_remove+0xa>
   28be8:	4618      	mov	r0, r3
   28bea:	4770      	bx	lr
   28bec:	428b      	cmp	r3, r1
   28bee:	d110      	bne.n	28c12 <sys_slist_find_and_remove+0x30>
	return node->next;
   28bf0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28bf2:	b942      	cbnz	r2, 28c06 <sys_slist_find_and_remove+0x24>
   28bf4:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   28bf6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   28bf8:	4291      	cmp	r1, r2
   28bfa:	d100      	bne.n	28bfe <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   28bfc:	6043      	str	r3, [r0, #4]
	parent->next = child;
   28bfe:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28c00:	2001      	movs	r0, #1
	parent->next = child;
   28c02:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28c04:	4770      	bx	lr
	parent->next = child;
   28c06:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28c08:	6843      	ldr	r3, [r0, #4]
   28c0a:	4299      	cmp	r1, r3
	list->tail = node;
   28c0c:	bf08      	it	eq
   28c0e:	6042      	streq	r2, [r0, #4]
}
   28c10:	e7f5      	b.n	28bfe <sys_slist_find_and_remove+0x1c>
	return node->next;
   28c12:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28c14:	681b      	ldr	r3, [r3, #0]
   28c16:	e7e6      	b.n	28be6 <sys_slist_find_and_remove+0x4>

00028c18 <atomic_and>:
{
   28c18:	4603      	mov	r3, r0
   28c1a:	b510      	push	{r4, lr}
}
   28c1c:	e8d3 0fef 	ldaex	r0, [r3]
   28c20:	ea00 0201 	and.w	r2, r0, r1
   28c24:	e8c3 2fe4 	stlex	r4, r2, [r3]
   28c28:	2c00      	cmp	r4, #0
   28c2a:	d1f7      	bne.n	28c1c <atomic_and+0x4>
   28c2c:	bd10      	pop	{r4, pc}

00028c2e <z_log_msg_static_create.constprop.0>:
   28c2e:	2300      	movs	r3, #0
   28c30:	f7e5 be90 	b.w	e954 <z_impl_z_log_msg_static_create>

00028c34 <tx_complete_work>:
	tx_notify(conn);
   28c34:	3828      	subs	r0, #40	; 0x28
   28c36:	f7eb be7f 	b.w	14938 <tx_notify>

00028c3a <bt_conn_reset_rx_state>:
{
   28c3a:	b510      	push	{r4, lr}
   28c3c:	4604      	mov	r4, r0
	if (!conn->rx) {
   28c3e:	6900      	ldr	r0, [r0, #16]
   28c40:	b118      	cbz	r0, 28c4a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28c42:	f7f2 f9c9 	bl	1afd8 <net_buf_unref>
	conn->rx = NULL;
   28c46:	2300      	movs	r3, #0
   28c48:	6123      	str	r3, [r4, #16]
}
   28c4a:	bd10      	pop	{r4, pc}

00028c4c <conn_lookup_handle>:
{
   28c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28c50:	4607      	mov	r7, r0
   28c52:	460e      	mov	r6, r1
   28c54:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   28c56:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28c58:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   28c5c:	42b4      	cmp	r4, r6
   28c5e:	d103      	bne.n	28c68 <conn_lookup_handle+0x1c>
	return NULL;
   28c60:	2300      	movs	r3, #0
}
   28c62:	4618      	mov	r0, r3
   28c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28c68:	fb09 7004 	mla	r0, r9, r4, r7
   28c6c:	f7ec f924 	bl	14eb8 <bt_conn_ref>
   28c70:	4603      	mov	r3, r0
		if (!conn) {
   28c72:	b158      	cbz	r0, 28c8c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   28c74:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   28c76:	2d01      	cmp	r5, #1
   28c78:	d002      	beq.n	28c80 <conn_lookup_handle+0x34>
   28c7a:	3d07      	subs	r5, #7
   28c7c:	2d01      	cmp	r5, #1
   28c7e:	d803      	bhi.n	28c88 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   28c80:	881a      	ldrh	r2, [r3, #0]
   28c82:	4542      	cmp	r2, r8
   28c84:	d0ed      	beq.n	28c62 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   28c86:	4618      	mov	r0, r3
   28c88:	f7ec f93e 	bl	14f08 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   28c8c:	3401      	adds	r4, #1
   28c8e:	e7e5      	b.n	28c5c <conn_lookup_handle+0x10>

00028c90 <bt_conn_connected>:
{
   28c90:	b510      	push	{r4, lr}
   28c92:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28c94:	f7ec fe84 	bl	159a0 <bt_l2cap_connected>
	notify_connected(conn);
   28c98:	4620      	mov	r0, r4
}
   28c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   28c9e:	f7eb be15 	b.w	148cc <notify_connected>

00028ca2 <bt_conn_disconnect>:
{
   28ca2:	b510      	push	{r4, lr}
	switch (conn->state) {
   28ca4:	7b43      	ldrb	r3, [r0, #13]
{
   28ca6:	4604      	mov	r4, r0
	switch (conn->state) {
   28ca8:	3b02      	subs	r3, #2
   28caa:	2b06      	cmp	r3, #6
   28cac:	d816      	bhi.n	28cdc <bt_conn_disconnect+0x3a>
   28cae:	e8df f003 	tbb	[pc, r3]
   28cb2:	1504      	.short	0x1504
   28cb4:	0b091515 	.word	0x0b091515
   28cb8:	09          	.byte	0x09
   28cb9:	00          	.byte	0x00
		conn->err = reason;
   28cba:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28cbc:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   28cbe:	4620      	mov	r0, r4
   28cc0:	f7ec f95a 	bl	14f78 <bt_conn_set_state>
{
   28cc4:	2000      	movs	r0, #0
}
   28cc6:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   28cc8:	8800      	ldrh	r0, [r0, #0]
   28cca:	f7ff fcf5 	bl	286b8 <bt_hci_disconnect>
	if (err) {
   28cce:	2800      	cmp	r0, #0
   28cd0:	d1f9      	bne.n	28cc6 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   28cd2:	7b63      	ldrb	r3, [r4, #13]
   28cd4:	2b07      	cmp	r3, #7
   28cd6:	d1f5      	bne.n	28cc4 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   28cd8:	2108      	movs	r1, #8
   28cda:	e7f0      	b.n	28cbe <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   28cdc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28ce0:	e7f1      	b.n	28cc6 <bt_conn_disconnect+0x24>

00028ce2 <bt_conn_set_security>:
{
   28ce2:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28ce4:	7b43      	ldrb	r3, [r0, #13]
{
   28ce6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   28ce8:	2b07      	cmp	r3, #7
{
   28cea:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   28cec:	d122      	bne.n	28d34 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   28cee:	7a43      	ldrb	r3, [r0, #9]
   28cf0:	428b      	cmp	r3, r1
   28cf2:	d215      	bcs.n	28d20 <bt_conn_set_security+0x3e>
   28cf4:	7a83      	ldrb	r3, [r0, #10]
   28cf6:	428b      	cmp	r3, r1
   28cf8:	d212      	bcs.n	28d20 <bt_conn_set_security+0x3e>
	if (val) {
   28cfa:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   28cfc:	f100 0004 	add.w	r0, r0, #4
   28d00:	d510      	bpl.n	28d24 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28d02:	e8d0 3fef 	ldaex	r3, [r0]
   28d06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   28d0a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   28d0e:	2a00      	cmp	r2, #0
   28d10:	d1f7      	bne.n	28d02 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28d12:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   28d16:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28d18:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   28d1a:	f7f0 fd75 	bl	19808 <bt_smp_start_security>
	if (err) {
   28d1e:	b930      	cbnz	r0, 28d2e <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   28d20:	2000      	movs	r0, #0
}
   28d22:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28d24:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   28d28:	f7ff ff76 	bl	28c18 <atomic_and>
   28d2c:	e7f1      	b.n	28d12 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   28d2e:	7a63      	ldrb	r3, [r4, #9]
   28d30:	72a3      	strb	r3, [r4, #10]
   28d32:	e7f6      	b.n	28d22 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   28d34:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28d38:	e7f3      	b.n	28d22 <bt_conn_set_security+0x40>

00028d3a <bt_conn_get_security>:
}
   28d3a:	7a40      	ldrb	r0, [r0, #9]
   28d3c:	4770      	bx	lr

00028d3e <bt_conn_is_peer_addr_le>:
{
   28d3e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   28d40:	7a03      	ldrb	r3, [r0, #8]
{
   28d42:	4604      	mov	r4, r0
	if (id != conn->id) {
   28d44:	428b      	cmp	r3, r1
{
   28d46:	4615      	mov	r5, r2
	if (id != conn->id) {
   28d48:	d115      	bne.n	28d76 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   28d4a:	f100 0190 	add.w	r1, r0, #144	; 0x90
   28d4e:	2207      	movs	r2, #7
   28d50:	4628      	mov	r0, r5
   28d52:	f003 f823 	bl	2bd9c <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   28d56:	b180      	cbz	r0, 28d7a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28d58:	78e3      	ldrb	r3, [r4, #3]
   28d5a:	2207      	movs	r2, #7
   28d5c:	b943      	cbnz	r3, 28d70 <bt_conn_is_peer_addr_le+0x32>
   28d5e:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   28d62:	4628      	mov	r0, r5
   28d64:	f003 f81a 	bl	2bd9c <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   28d68:	fab0 f080 	clz	r0, r0
   28d6c:	0940      	lsrs	r0, r0, #5
}
   28d6e:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   28d70:	f104 0197 	add.w	r1, r4, #151	; 0x97
   28d74:	e7f5      	b.n	28d62 <bt_conn_is_peer_addr_le+0x24>
		return false;
   28d76:	2000      	movs	r0, #0
   28d78:	e7f9      	b.n	28d6e <bt_conn_is_peer_addr_le+0x30>
		return true;
   28d7a:	2001      	movs	r0, #1
   28d7c:	e7f7      	b.n	28d6e <bt_conn_is_peer_addr_le+0x30>

00028d7e <bt_conn_get_dst>:
}
   28d7e:	3090      	adds	r0, #144	; 0x90
   28d80:	4770      	bx	lr

00028d82 <bt_conn_le_conn_update>:
{
   28d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d84:	4607      	mov	r7, r0
   28d86:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   28d88:	f242 0013 	movw	r0, #8211	; 0x2013
   28d8c:	210e      	movs	r1, #14
   28d8e:	f7e9 fd75 	bl	1287c <bt_hci_cmd_create>
	if (!buf) {
   28d92:	4606      	mov	r6, r0
   28d94:	b1d0      	cbz	r0, 28dcc <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   28d96:	210e      	movs	r1, #14
   28d98:	300c      	adds	r0, #12
   28d9a:	f7f2 fa3f 	bl	1b21c <net_buf_simple_add>
   28d9e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   28da0:	220e      	movs	r2, #14
   28da2:	2100      	movs	r1, #0
   28da4:	f003 f844 	bl	2be30 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28da8:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28daa:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28dac:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   28dae:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28db0:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   28db2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28db4:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28db6:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28dba:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   28dbc:	88ab      	ldrh	r3, [r5, #4]
   28dbe:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   28dc0:	88eb      	ldrh	r3, [r5, #6]
   28dc2:	8123      	strh	r3, [r4, #8]
}
   28dc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28dc8:	f7e9 bda6 	b.w	12918 <bt_hci_cmd_send_sync>
}
   28dcc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028dd2 <l2cap_connected>:
}
   28dd2:	4770      	bx	lr

00028dd4 <z_log_msg_static_create.constprop.0>:
   28dd4:	2300      	movs	r3, #0
   28dd6:	f7e5 bdbd 	b.w	e954 <z_impl_z_log_msg_static_create>

00028dda <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   28dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ddc:	4605      	mov	r5, r0
   28dde:	460f      	mov	r7, r1
   28de0:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   28de2:	2300      	movs	r3, #0
   28de4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   28de8:	2104      	movs	r1, #4
   28dea:	2000      	movs	r0, #0
   28dec:	f7ec f9de 	bl	151ac <bt_conn_create_pdu_timeout>
	if (!buf) {
   28df0:	4604      	mov	r4, r0
   28df2:	b920      	cbnz	r0, 28dfe <l2cap_create_le_sig_pdu.constprop.0+0x24>
   28df4:	4628      	mov	r0, r5
}
   28df6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28dfa:	f7ec bd95 	b.w	15928 <l2cap_create_le_sig_pdu.part.0>
   28dfe:	2104      	movs	r1, #4
   28e00:	300c      	adds	r0, #12
   28e02:	f7f2 fa0b 	bl	1b21c <net_buf_simple_add>
	hdr->code = code;
   28e06:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   28e08:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   28e0a:	8046      	strh	r6, [r0, #2]
}
   28e0c:	4620      	mov	r0, r4
   28e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028e10 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   28e10:	4770      	bx	lr

00028e12 <bt_l2cap_chan_del>:
{
   28e12:	b570      	push	{r4, r5, r6, lr}
   28e14:	4604      	mov	r4, r0
	if (!chan->conn) {
   28e16:	e9d0 3500 	ldrd	r3, r5, [r0]
   28e1a:	b123      	cbz	r3, 28e26 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   28e1c:	686b      	ldr	r3, [r5, #4]
   28e1e:	b103      	cbz	r3, 28e22 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   28e20:	4798      	blx	r3
	chan->conn = NULL;
   28e22:	2300      	movs	r3, #0
   28e24:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   28e26:	68e3      	ldr	r3, [r4, #12]
   28e28:	b10b      	cbz	r3, 28e2e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   28e2a:	4620      	mov	r0, r4
   28e2c:	4798      	blx	r3
	if (ops->released) {
   28e2e:	6a2b      	ldr	r3, [r5, #32]
   28e30:	b11b      	cbz	r3, 28e3a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   28e32:	4620      	mov	r0, r4
}
   28e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   28e38:	4718      	bx	r3
}
   28e3a:	bd70      	pop	{r4, r5, r6, pc}

00028e3c <bt_l2cap_disconnected>:
{
   28e3c:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   28e3e:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e40:	b130      	cbz	r0, 28e50 <bt_l2cap_disconnected+0x14>
	return node->next;
   28e42:	f850 4908 	ldr.w	r4, [r0], #-8
   28e46:	b104      	cbz	r4, 28e4a <bt_l2cap_disconnected+0xe>
   28e48:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   28e4a:	f7ff ffe2 	bl	28e12 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e4e:	b904      	cbnz	r4, 28e52 <bt_l2cap_disconnected+0x16>
}
   28e50:	bd38      	pop	{r3, r4, r5, pc}
   28e52:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e54:	b12d      	cbz	r5, 28e62 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   28e56:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e58:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   28e5a:	f7ff ffda 	bl	28e12 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e5e:	462c      	mov	r4, r5
   28e60:	e7f7      	b.n	28e52 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   28e62:	4620      	mov	r0, r4
}
   28e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   28e68:	f7ff bfd3 	b.w	28e12 <bt_l2cap_chan_del>

00028e6c <bt_l2cap_security_changed>:
{
   28e6c:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   28e6e:	6d43      	ldr	r3, [r0, #84]	; 0x54
   28e70:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e72:	b1bb      	cbz	r3, 28ea4 <bt_l2cap_security_changed+0x38>
   28e74:	4618      	mov	r0, r3
	return node->next;
   28e76:	f850 4908 	ldr.w	r4, [r0], #-8
   28e7a:	b104      	cbz	r4, 28e7e <bt_l2cap_security_changed+0x12>
   28e7c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   28e7e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   28e82:	689b      	ldr	r3, [r3, #8]
   28e84:	b10b      	cbz	r3, 28e8a <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   28e86:	4629      	mov	r1, r5
   28e88:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e8a:	b15c      	cbz	r4, 28ea4 <bt_l2cap_security_changed+0x38>
   28e8c:	4620      	mov	r0, r4
   28e8e:	68a4      	ldr	r4, [r4, #8]
   28e90:	6843      	ldr	r3, [r0, #4]
   28e92:	b124      	cbz	r4, 28e9e <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   28e94:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e96:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   28e98:	2b00      	cmp	r3, #0
   28e9a:	d1f4      	bne.n	28e86 <bt_l2cap_security_changed+0x1a>
   28e9c:	e7f6      	b.n	28e8c <bt_l2cap_security_changed+0x20>
   28e9e:	689b      	ldr	r3, [r3, #8]
   28ea0:	2b00      	cmp	r3, #0
   28ea2:	d1f0      	bne.n	28e86 <bt_l2cap_security_changed+0x1a>
}
   28ea4:	bd38      	pop	{r3, r4, r5, pc}

00028ea6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   28ea6:	3104      	adds	r1, #4
   28ea8:	f7ec b980 	b.w	151ac <bt_conn_create_pdu_timeout>

00028eac <bt_l2cap_send_cb>:
{
   28eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28eb0:	4614      	mov	r4, r2
   28eb2:	4605      	mov	r5, r0
   28eb4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   28eb6:	f102 000c 	add.w	r0, r2, #12
   28eba:	2104      	movs	r1, #4
   28ebc:	461e      	mov	r6, r3
   28ebe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   28ec2:	f7f2 f94f 	bl	1b164 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28ec6:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   28ec8:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28eca:	3a04      	subs	r2, #4
   28ecc:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28ece:	4643      	mov	r3, r8
   28ed0:	4632      	mov	r2, r6
   28ed2:	4621      	mov	r1, r4
   28ed4:	4628      	mov	r0, r5
}
   28ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28eda:	f7eb bf4d 	b.w	14d78 <bt_conn_send_cb>

00028ede <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   28ede:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28ee0:	b128      	cbz	r0, 28eee <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28ee2:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28ee4:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28ee6:	428b      	cmp	r3, r1
   28ee8:	d001      	beq.n	28eee <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   28eea:	6880      	ldr	r0, [r0, #8]
   28eec:	e7f8      	b.n	28ee0 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   28eee:	4770      	bx	lr

00028ef0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   28ef0:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28ef2:	b128      	cbz	r0, 28f00 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28ef4:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28ef6:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28ef8:	428b      	cmp	r3, r1
   28efa:	d001      	beq.n	28f00 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   28efc:	6880      	ldr	r0, [r0, #8]
   28efe:	e7f8      	b.n	28ef2 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   28f00:	4770      	bx	lr

00028f02 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   28f02:	4770      	bx	lr

00028f04 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   28f04:	4603      	mov	r3, r0
	return list->head;
   28f06:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   28f08:	b128      	cbz	r0, 28f16 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28f0a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   28f0c:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28f0e:	4288      	cmp	r0, r1
	list->head = node;
   28f10:	601a      	str	r2, [r3, #0]
	list->tail = node;
   28f12:	bf08      	it	eq
   28f14:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   28f16:	4770      	bx	lr

00028f18 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   28f18:	4603      	mov	r3, r0
	size_t bytes = 0;
   28f1a:	2000      	movs	r0, #0

	while (buf) {
   28f1c:	b903      	cbnz	r3, 28f20 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   28f1e:	4770      	bx	lr
		bytes += buf->len;
   28f20:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   28f22:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   28f24:	4410      	add	r0, r2
		buf = buf->frags;
   28f26:	e7f9      	b.n	28f1c <net_buf_frags_len+0x4>

00028f28 <attr_read_type_cb>:
{
   28f28:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   28f2a:	68d4      	ldr	r4, [r2, #12]
   28f2c:	3102      	adds	r1, #2
   28f2e:	7823      	ldrb	r3, [r4, #0]
   28f30:	b913      	cbnz	r3, 28f38 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   28f32:	7021      	strb	r1, [r4, #0]
	return true;
   28f34:	2001      	movs	r0, #1
}
   28f36:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   28f38:	428b      	cmp	r3, r1
   28f3a:	d0fb      	beq.n	28f34 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   28f3c:	8a03      	ldrh	r3, [r0, #16]
   28f3e:	3b02      	subs	r3, #2
   28f40:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   28f42:	2000      	movs	r0, #0
   28f44:	6110      	str	r0, [r2, #16]
		return false;
   28f46:	e7f6      	b.n	28f36 <attr_read_type_cb+0xe>

00028f48 <att_prepare_write_req>:
}
   28f48:	2006      	movs	r0, #6
   28f4a:	4770      	bx	lr

00028f4c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28f4c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28f50:	4108      	asrs	r0, r1
}
   28f52:	f000 0001 	and.w	r0, r0, #1
   28f56:	4770      	bx	lr

00028f58 <write_cb>:
{
   28f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28f5a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   28f5c:	4601      	mov	r1, r0
{
   28f5e:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   28f60:	f44f 7295 	mov.w	r2, #298	; 0x12a
   28f64:	6820      	ldr	r0, [r4, #0]
   28f66:	f000 fdce 	bl	29b06 <bt_gatt_check_perm>
   28f6a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   28f6c:	bb00      	cbnz	r0, 28fb0 <write_cb+0x58>
	if (!data->req) {
   28f6e:	7a23      	ldrb	r3, [r4, #8]
   28f70:	b1b3      	cbz	r3, 28fa0 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   28f72:	f1a3 0218 	sub.w	r2, r3, #24
   28f76:	4253      	negs	r3, r2
   28f78:	4153      	adcs	r3, r2
   28f7a:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   28f7c:	9301      	str	r3, [sp, #4]
   28f7e:	8a63      	ldrh	r3, [r4, #18]
   28f80:	4629      	mov	r1, r5
   28f82:	9300      	str	r3, [sp, #0]
   28f84:	68ae      	ldr	r6, [r5, #8]
   28f86:	8a23      	ldrh	r3, [r4, #16]
   28f88:	68e2      	ldr	r2, [r4, #12]
   28f8a:	6820      	ldr	r0, [r4, #0]
   28f8c:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   28f8e:	2800      	cmp	r0, #0
   28f90:	db08      	blt.n	28fa4 <write_cb+0x4c>
   28f92:	8a23      	ldrh	r3, [r4, #16]
   28f94:	4298      	cmp	r0, r3
   28f96:	d10e      	bne.n	28fb6 <write_cb+0x5e>
	data->err = 0U;
   28f98:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   28f9a:	2001      	movs	r0, #1
	data->err = 0U;
   28f9c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   28f9e:	e008      	b.n	28fb2 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   28fa0:	2302      	movs	r3, #2
   28fa2:	e7eb      	b.n	28f7c <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   28fa4:	f110 0fff 	cmn.w	r0, #255	; 0xff
   28fa8:	d305      	bcc.n	28fb6 <write_cb+0x5e>
		return -err;
   28faa:	4240      	negs	r0, r0
   28fac:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   28fae:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   28fb0:	2000      	movs	r0, #0
}
   28fb2:	b002      	add	sp, #8
   28fb4:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   28fb6:	200e      	movs	r0, #14
   28fb8:	e7f9      	b.n	28fae <write_cb+0x56>

00028fba <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   28fba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28fbc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28fc0:	2300      	movs	r3, #0
   28fc2:	461a      	mov	r2, r3
   28fc4:	9300      	str	r3, [sp, #0]
   28fc6:	f7ee fd69 	bl	17a9c <bt_gatt_foreach_attr_type>
				  user_data);
}
   28fca:	b005      	add	sp, #20
   28fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00028fd0 <att_chan_mtu_updated>:
{
   28fd0:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   28fd2:	6805      	ldr	r5, [r0, #0]
	return list->head;
   28fd4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28fd6:	b352      	cbz	r2, 2902e <att_chan_mtu_updated+0x5e>
	return node->next;
   28fd8:	6813      	ldr	r3, [r2, #0]
   28fda:	b103      	cbz	r3, 28fde <att_chan_mtu_updated+0xe>
   28fdc:	3bf0      	subs	r3, #240	; 0xf0
   28fde:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   28fe2:	2200      	movs	r2, #0
   28fe4:	4611      	mov	r1, r2
   28fe6:	e000      	b.n	28fea <att_chan_mtu_updated+0x1a>
   28fe8:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   28fea:	4284      	cmp	r4, r0
   28fec:	d007      	beq.n	28ffe <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   28fee:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   28ff0:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   28ff2:	42b1      	cmp	r1, r6
   28ff4:	bf38      	it	cc
   28ff6:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   28ff8:	42a2      	cmp	r2, r4
   28ffa:	bf38      	it	cc
   28ffc:	4622      	movcc	r2, r4
   28ffe:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29000:	b12b      	cbz	r3, 2900e <att_chan_mtu_updated+0x3e>
   29002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   29006:	2b00      	cmp	r3, #0
   29008:	d1ee      	bne.n	28fe8 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2900a:	4284      	cmp	r4, r0
   2900c:	d1ef      	bne.n	28fee <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2900e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   29010:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   29012:	428b      	cmp	r3, r1
   29014:	d801      	bhi.n	2901a <att_chan_mtu_updated+0x4a>
   29016:	4290      	cmp	r0, r2
   29018:	d90b      	bls.n	29032 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2901a:	4282      	cmp	r2, r0
   2901c:	bf38      	it	cc
   2901e:	4602      	movcc	r2, r0
   29020:	4299      	cmp	r1, r3
   29022:	6828      	ldr	r0, [r5, #0]
   29024:	bf38      	it	cc
   29026:	4619      	movcc	r1, r3
}
   29028:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2902a:	f7ef bbdf 	b.w	187ec <bt_gatt_att_max_mtu_changed>
   2902e:	4611      	mov	r1, r2
   29030:	e7ed      	b.n	2900e <att_chan_mtu_updated+0x3e>
}
   29032:	bc70      	pop	{r4, r5, r6}
   29034:	4770      	bx	lr

00029036 <attr_read_group_cb>:
	if (!data->rsp->len) {
   29036:	68d0      	ldr	r0, [r2, #12]
   29038:	3104      	adds	r1, #4
   2903a:	7803      	ldrb	r3, [r0, #0]
   2903c:	b913      	cbnz	r3, 29044 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2903e:	7001      	strb	r1, [r0, #0]
	return true;
   29040:	2001      	movs	r0, #1
   29042:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   29044:	428b      	cmp	r3, r1
   29046:	d0fb      	beq.n	29040 <attr_read_group_cb+0xa>
		data->group = NULL;
   29048:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2904a:	6891      	ldr	r1, [r2, #8]
   2904c:	8a0b      	ldrh	r3, [r1, #16]
   2904e:	3b04      	subs	r3, #4
   29050:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   29052:	6110      	str	r0, [r2, #16]
}
   29054:	4770      	bx	lr

00029056 <find_info_cb>:
{
   29056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   29058:	6893      	ldr	r3, [r2, #8]
{
   2905a:	4605      	mov	r5, r0
   2905c:	460f      	mov	r7, r1
   2905e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   29060:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   29062:	b963      	cbnz	r3, 2907e <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   29064:	6850      	ldr	r0, [r2, #4]
   29066:	2101      	movs	r1, #1
   29068:	300c      	adds	r0, #12
   2906a:	f7f2 f8d7 	bl	1b21c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2906e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29070:	682b      	ldr	r3, [r5, #0]
   29072:	781b      	ldrb	r3, [r3, #0]
   29074:	2b00      	cmp	r3, #0
   29076:	bf14      	ite	ne
   29078:	2302      	movne	r3, #2
   2907a:	2301      	moveq	r3, #1
   2907c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2907e:	68a3      	ldr	r3, [r4, #8]
   29080:	781b      	ldrb	r3, [r3, #0]
   29082:	2b01      	cmp	r3, #1
   29084:	d003      	beq.n	2908e <find_info_cb+0x38>
   29086:	2b02      	cmp	r3, #2
   29088:	d019      	beq.n	290be <find_info_cb+0x68>
   2908a:	2000      	movs	r0, #0
   2908c:	e016      	b.n	290bc <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2908e:	682b      	ldr	r3, [r5, #0]
   29090:	781b      	ldrb	r3, [r3, #0]
   29092:	2b00      	cmp	r3, #0
   29094:	d1f9      	bne.n	2908a <find_info_cb+0x34>
   29096:	6860      	ldr	r0, [r4, #4]
   29098:	2104      	movs	r1, #4
   2909a:	300c      	adds	r0, #12
   2909c:	f7f2 f8be 	bl	1b21c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   290a0:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   290a2:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   290a4:	682a      	ldr	r2, [r5, #0]
   290a6:	68e3      	ldr	r3, [r4, #12]
   290a8:	8852      	ldrh	r2, [r2, #2]
   290aa:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   290ac:	6863      	ldr	r3, [r4, #4]
   290ae:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   290b0:	8a1b      	ldrh	r3, [r3, #16]
   290b2:	1ac0      	subs	r0, r0, r3
   290b4:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   290b6:	bf94      	ite	ls
   290b8:	2000      	movls	r0, #0
   290ba:	2001      	movhi	r0, #1
}
   290bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   290be:	682b      	ldr	r3, [r5, #0]
   290c0:	781b      	ldrb	r3, [r3, #0]
   290c2:	2b02      	cmp	r3, #2
   290c4:	d1e1      	bne.n	2908a <find_info_cb+0x34>
   290c6:	6860      	ldr	r0, [r4, #4]
   290c8:	2112      	movs	r1, #18
   290ca:	300c      	adds	r0, #12
   290cc:	f7f2 f8a6 	bl	1b21c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   290d0:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   290d2:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   290d4:	682b      	ldr	r3, [r5, #0]
   290d6:	68e2      	ldr	r2, [r4, #12]
   290d8:	1c59      	adds	r1, r3, #1
   290da:	3202      	adds	r2, #2
   290dc:	3311      	adds	r3, #17
   290de:	f851 0b04 	ldr.w	r0, [r1], #4
   290e2:	4299      	cmp	r1, r3
   290e4:	f842 0b04 	str.w	r0, [r2], #4
   290e8:	d1f9      	bne.n	290de <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   290ea:	6863      	ldr	r3, [r4, #4]
   290ec:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   290ee:	8a1b      	ldrh	r3, [r3, #16]
   290f0:	1ac0      	subs	r0, r0, r3
   290f2:	2812      	cmp	r0, #18
   290f4:	e7df      	b.n	290b6 <find_info_cb+0x60>

000290f6 <z_log_msg_static_create.constprop.0>:
   290f6:	2300      	movs	r3, #0
   290f8:	f7e5 bc2c 	b.w	e954 <z_impl_z_log_msg_static_create>

000290fc <chan_req_send>:
{
   290fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   290fe:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29100:	6888      	ldr	r0, [r1, #8]
   29102:	f7ff ff09 	bl	28f18 <net_buf_frags_len>
   29106:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   29108:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2910a:	4283      	cmp	r3, r0
   2910c:	d30d      	bcc.n	2912a <chan_req_send+0x2e>
	req->buf = NULL;
   2910e:	2600      	movs	r6, #0
	chan->req = req;
   29110:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   29114:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   29116:	4628      	mov	r0, r5
	req->buf = NULL;
   29118:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2911a:	4639      	mov	r1, r7
   2911c:	f7ec feaa 	bl	15e74 <chan_send>
	if (err) {
   29120:	b110      	cbz	r0, 29128 <chan_req_send+0x2c>
		req->buf = buf;
   29122:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   29124:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   29128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2912a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2912e:	e7fb      	b.n	29128 <chan_req_send+0x2c>

00029130 <process_queue>:
{
   29130:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   29132:	2200      	movs	r2, #0
{
   29134:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   29136:	2300      	movs	r3, #0
   29138:	4608      	mov	r0, r1
{
   2913a:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2913c:	f001 f8d7 	bl	2a2ee <net_buf_get>
	if (buf) {
   29140:	4605      	mov	r5, r0
   29142:	b158      	cbz	r0, 2915c <process_queue+0x2c>
	return chan_send(chan, buf);
   29144:	4601      	mov	r1, r0
   29146:	4620      	mov	r0, r4
   29148:	f7ec fe94 	bl	15e74 <chan_send>
		if (err) {
   2914c:	4604      	mov	r4, r0
   2914e:	b118      	cbz	r0, 29158 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   29150:	4629      	mov	r1, r5
   29152:	4630      	mov	r0, r6
   29154:	f002 fc66 	bl	2ba24 <k_queue_prepend>
}
   29158:	4620      	mov	r0, r4
   2915a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2915c:	f06f 0401 	mvn.w	r4, #1
   29160:	e7fa      	b.n	29158 <process_queue+0x28>

00029162 <bt_att_chan_send_rsp>:
{
   29162:	b538      	push	{r3, r4, r5, lr}
   29164:	4604      	mov	r4, r0
   29166:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   29168:	f7ec fe84 	bl	15e74 <chan_send>
	if (err) {
   2916c:	b130      	cbz	r0, 2917c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2916e:	4629      	mov	r1, r5
   29170:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   29174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   29178:	f7f1 bf08 	b.w	1af8c <net_buf_put>
}
   2917c:	bd38      	pop	{r3, r4, r5, pc}

0002917e <att_chan_read>:
{
   2917e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29182:	4680      	mov	r8, r0
   29184:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29186:	4610      	mov	r0, r2
{
   29188:	4699      	mov	r9, r3
   2918a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2918c:	f7ff fec4 	bl	28f18 <net_buf_frags_len>
   29190:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   29194:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29196:	4283      	cmp	r3, r0
   29198:	d97a      	bls.n	29290 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2919a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2919e:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   291a0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   291a2:	f7f1 ff75 	bl	1b090 <net_buf_frag_last>
	size_t len, total = 0;
   291a6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   291aa:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   291ac:	4630      	mov	r0, r6
   291ae:	f7ff feb3 	bl	28f18 <net_buf_frags_len>
   291b2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   291b6:	f105 070c 	add.w	r7, r5, #12
   291ba:	1a24      	subs	r4, r4, r0
   291bc:	4638      	mov	r0, r7
   291be:	f001 f8ab 	bl	2a318 <net_buf_simple_tailroom>
   291c2:	4284      	cmp	r4, r0
   291c4:	d211      	bcs.n	291ea <att_chan_read+0x6c>
   291c6:	4630      	mov	r0, r6
   291c8:	f7ff fea6 	bl	28f18 <net_buf_frags_len>
   291cc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   291d0:	1a24      	subs	r4, r4, r0
		if (!len) {
   291d2:	bb34      	cbnz	r4, 29222 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   291d4:	7ab0      	ldrb	r0, [r6, #10]
   291d6:	f7f1 fcc5 	bl	1ab64 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   291da:	2200      	movs	r2, #0
   291dc:	2300      	movs	r3, #0
   291de:	f001 f881 	bl	2a2e4 <net_buf_alloc_fixed>
			if (!frag) {
   291e2:	4605      	mov	r5, r0
   291e4:	b930      	cbnz	r0, 291f4 <att_chan_read+0x76>
	return total;
   291e6:	4657      	mov	r7, sl
   291e8:	e02c      	b.n	29244 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   291ea:	4638      	mov	r0, r7
   291ec:	f001 f894 	bl	2a318 <net_buf_simple_tailroom>
   291f0:	4604      	mov	r4, r0
   291f2:	e7ee      	b.n	291d2 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   291f4:	4601      	mov	r1, r0
   291f6:	4630      	mov	r0, r6
   291f8:	f7f1 ff90 	bl	1b11c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   291fc:	4630      	mov	r0, r6
   291fe:	f7ff fe8b 	bl	28f18 <net_buf_frags_len>
   29202:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   29206:	f105 070c 	add.w	r7, r5, #12
   2920a:	1a24      	subs	r4, r4, r0
   2920c:	4638      	mov	r0, r7
   2920e:	f001 f883 	bl	2a318 <net_buf_simple_tailroom>
   29212:	4284      	cmp	r4, r0
   29214:	d21a      	bcs.n	2924c <att_chan_read+0xce>
   29216:	4630      	mov	r0, r6
   29218:	f7ff fe7e 	bl	28f18 <net_buf_frags_len>
   2921c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   29220:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   29222:	68e9      	ldr	r1, [r5, #12]
   29224:	8a2a      	ldrh	r2, [r5, #16]
   29226:	f8cd 9000 	str.w	r9, [sp]
   2922a:	f8db 7004 	ldr.w	r7, [fp, #4]
   2922e:	440a      	add	r2, r1
   29230:	9803      	ldr	r0, [sp, #12]
   29232:	4659      	mov	r1, fp
   29234:	b2a3      	uxth	r3, r4
   29236:	47b8      	blx	r7
		if (read < 0) {
   29238:	1e07      	subs	r7, r0, #0
   2923a:	da0c      	bge.n	29256 <att_chan_read+0xd8>
				return total;
   2923c:	f1ba 0f00 	cmp.w	sl, #0
   29240:	bf18      	it	ne
   29242:	4657      	movne	r7, sl
}
   29244:	4638      	mov	r0, r7
   29246:	b005      	add	sp, #20
   29248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2924c:	4638      	mov	r0, r7
   2924e:	f001 f863 	bl	2a318 <net_buf_simple_tailroom>
   29252:	4604      	mov	r4, r0
   29254:	e7e5      	b.n	29222 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   29256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29258:	b993      	cbnz	r3, 29280 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2925a:	4639      	mov	r1, r7
   2925c:	f105 000c 	add.w	r0, r5, #12
   29260:	f7f1 ffdc 	bl	1b21c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29264:	4630      	mov	r0, r6
   29266:	f7ff fe57 	bl	28f18 <net_buf_frags_len>
   2926a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2926e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29270:	4283      	cmp	r3, r0
		total += read;
   29272:	44ba      	add	sl, r7
		offset += read;
   29274:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29278:	d9b5      	bls.n	291e6 <att_chan_read+0x68>
   2927a:	42a7      	cmp	r7, r4
   2927c:	d096      	beq.n	291ac <att_chan_read+0x2e>
   2927e:	e7b2      	b.n	291e6 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   29280:	4639      	mov	r1, r7
   29282:	4628      	mov	r0, r5
   29284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29288:	4798      	blx	r3
   2928a:	2800      	cmp	r0, #0
   2928c:	d1e5      	bne.n	2925a <att_chan_read+0xdc>
   2928e:	e7aa      	b.n	291e6 <att_chan_read+0x68>
		return 0;
   29290:	2700      	movs	r7, #0
   29292:	e7d7      	b.n	29244 <att_chan_read+0xc6>

00029294 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29294:	2200      	movs	r2, #0
	return list->head;
   29296:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29298:	b903      	cbnz	r3, 2929c <sys_slist_find_and_remove.isra.0+0x8>
   2929a:	4770      	bx	lr
   2929c:	428b      	cmp	r3, r1
   2929e:	d10f      	bne.n	292c0 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   292a0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   292a2:	b93a      	cbnz	r2, 292b4 <sys_slist_find_and_remove.isra.0+0x20>
   292a4:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   292a6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   292a8:	4291      	cmp	r1, r2
   292aa:	d100      	bne.n	292ae <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   292ac:	6043      	str	r3, [r0, #4]
	parent->next = child;
   292ae:	2300      	movs	r3, #0
   292b0:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   292b2:	4770      	bx	lr
	parent->next = child;
   292b4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   292b6:	6843      	ldr	r3, [r0, #4]
   292b8:	4299      	cmp	r1, r3
	list->tail = node;
   292ba:	bf08      	it	eq
   292bc:	6042      	streq	r2, [r0, #4]
}
   292be:	e7f6      	b.n	292ae <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   292c0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   292c2:	681b      	ldr	r3, [r3, #0]
   292c4:	e7e8      	b.n	29298 <sys_slist_find_and_remove.isra.0+0x4>

000292c6 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   292c6:	2006      	movs	r0, #6
   292c8:	4770      	bx	lr

000292ca <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   292ca:	2301      	movs	r3, #1
{
   292cc:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   292ce:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   292d2:	e8d0 3fef 	ldaex	r3, [r0]
   292d6:	ea43 0201 	orr.w	r2, r3, r1
   292da:	e8c0 2fe4 	stlex	r4, r2, [r0]
   292de:	2c00      	cmp	r4, #0
   292e0:	d1f7      	bne.n	292d2 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   292e2:	4219      	tst	r1, r3
}
   292e4:	bf14      	ite	ne
   292e6:	2001      	movne	r0, #1
   292e8:	2000      	moveq	r0, #0
   292ea:	bd10      	pop	{r4, pc}

000292ec <read_cb>:
{
   292ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   292ee:	2300      	movs	r3, #0
{
   292f0:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   292f2:	6816      	ldr	r6, [r2, #0]
{
   292f4:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   292f6:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   292f8:	4629      	mov	r1, r5
	data->err = 0x00;
   292fa:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   292fc:	2295      	movs	r2, #149	; 0x95
   292fe:	f000 fc02 	bl	29b06 <bt_gatt_check_perm>
   29302:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   29304:	b980      	cbnz	r0, 29328 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29306:	e9cd 0000 	strd	r0, r0, [sp]
   2930a:	4629      	mov	r1, r5
   2930c:	4630      	mov	r0, r6
   2930e:	88a3      	ldrh	r3, [r4, #4]
   29310:	68a2      	ldr	r2, [r4, #8]
   29312:	f7ff ff34 	bl	2917e <att_chan_read>
	if (ret < 0) {
   29316:	2800      	cmp	r0, #0
   29318:	da09      	bge.n	2932e <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2931a:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2931e:	bf32      	itee	cc
   29320:	200e      	movcc	r0, #14
		return -err;
   29322:	4240      	negcs	r0, r0
   29324:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   29326:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   29328:	2000      	movs	r0, #0
}
   2932a:	b002      	add	sp, #8
   2932c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2932e:	2001      	movs	r0, #1
   29330:	e7fb      	b.n	2932a <read_cb+0x3e>

00029332 <read_vl_cb>:
{
   29332:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   29336:	2300      	movs	r3, #0
{
   29338:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2933a:	f8d2 8000 	ldr.w	r8, [r2]
{
   2933e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   29340:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29344:	4631      	mov	r1, r6
	data->err = 0x00;
   29346:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29348:	2295      	movs	r2, #149	; 0x95
   2934a:	f000 fbdc 	bl	29b06 <bt_gatt_check_perm>
   2934e:	4605      	mov	r5, r0
   29350:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   29352:	b9e0      	cbnz	r0, 2938e <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   29354:	68a0      	ldr	r0, [r4, #8]
   29356:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2935a:	8a02      	ldrh	r2, [r0, #16]
   2935c:	1a9b      	subs	r3, r3, r2
   2935e:	2b01      	cmp	r3, #1
   29360:	dd15      	ble.n	2938e <read_vl_cb+0x5c>
   29362:	2102      	movs	r1, #2
   29364:	300c      	adds	r0, #12
   29366:	f7f1 ff59 	bl	1b21c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2936a:	e9cd 5500 	strd	r5, r5, [sp]
   2936e:	4607      	mov	r7, r0
   29370:	88a3      	ldrh	r3, [r4, #4]
   29372:	4631      	mov	r1, r6
   29374:	4640      	mov	r0, r8
   29376:	68a2      	ldr	r2, [r4, #8]
   29378:	f7ff ff01 	bl	2917e <att_chan_read>
	if (read < 0) {
   2937c:	1e03      	subs	r3, r0, #0
   2937e:	da0a      	bge.n	29396 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   29380:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   29384:	bf32      	itee	cc
   29386:	230e      	movcc	r3, #14
		return -err;
   29388:	425b      	negcs	r3, r3
   2938a:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2938c:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2938e:	2000      	movs	r0, #0
}
   29390:	b002      	add	sp, #8
   29392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   29396:	2001      	movs	r0, #1
	rsp->len = read;
   29398:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2939a:	e7f9      	b.n	29390 <read_vl_cb+0x5e>

0002939c <bt_att_sent>:
{
   2939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2939e:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   293a0:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   293a4:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   293a6:	f100 0394 	add.w	r3, r0, #148	; 0x94
   293aa:	e8d3 1fef 	ldaex	r1, [r3]
   293ae:	f021 0110 	bic.w	r1, r1, #16
   293b2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   293b6:	2a00      	cmp	r2, #0
   293b8:	d1f7      	bne.n	293aa <bt_att_sent+0xe>
	if (!att) {
   293ba:	b30c      	cbz	r4, 29400 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   293bc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   293c0:	b98b      	cbnz	r3, 293e6 <bt_att_sent+0x4a>
   293c2:	6863      	ldr	r3, [r4, #4]
   293c4:	b17b      	cbz	r3, 293e6 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   293c6:	1d20      	adds	r0, r4, #4
   293c8:	f7ff fd9c 	bl	28f04 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   293cc:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   293ce:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   293d0:	4638      	mov	r0, r7
   293d2:	f7ff fe93 	bl	290fc <chan_req_send>
   293d6:	2800      	cmp	r0, #0
   293d8:	da12      	bge.n	29400 <bt_att_sent+0x64>
	return list->head;
   293da:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   293dc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   293de:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   293e0:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   293e2:	b903      	cbnz	r3, 293e6 <bt_att_sent+0x4a>
	list->tail = node;
   293e4:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   293e6:	4638      	mov	r0, r7
   293e8:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   293ec:	f7ff fea0 	bl	29130 <process_queue>
	if (!err) {
   293f0:	b130      	cbz	r0, 29400 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   293f2:	4638      	mov	r0, r7
   293f4:	f104 010c 	add.w	r1, r4, #12
}
   293f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   293fc:	f7ff be98 	b.w	29130 <process_queue>
}
   29400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029402 <att_req_send_process>:
{
   29402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   29406:	6a84      	ldr	r4, [r0, #40]	; 0x28
   29408:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2940a:	2c00      	cmp	r4, #0
   2940c:	d03b      	beq.n	29486 <att_req_send_process+0x84>
	return node->next;
   2940e:	f854 69f0 	ldr.w	r6, [r4], #-240
   29412:	b106      	cbz	r6, 29416 <att_req_send_process+0x14>
   29414:	3ef0      	subs	r6, #240	; 0xf0
{
   29416:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   29418:	f108 0704 	add.w	r7, r8, #4
{
   2941c:	461d      	mov	r5, r3
   2941e:	e013      	b.n	29448 <att_req_send_process+0x46>
		if (!req && prev &&
   29420:	b1c3      	cbz	r3, 29454 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   29422:	2103      	movs	r1, #3
   29424:	f104 0098 	add.w	r0, r4, #152	; 0x98
   29428:	f7ff fd90 	bl	28f4c <atomic_test_bit>
   2942c:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2942e:	f103 0098 	add.w	r0, r3, #152	; 0x98
   29432:	f7ff fd8b 	bl	28f4c <atomic_test_bit>
		if (!req && prev &&
   29436:	4282      	cmp	r2, r0
   29438:	d10c      	bne.n	29454 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2943a:	b326      	cbz	r6, 29486 <att_req_send_process+0x84>
   2943c:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   29440:	b102      	cbz	r2, 29444 <att_req_send_process+0x42>
   29442:	3af0      	subs	r2, #240	; 0xf0
{
   29444:	4634      	mov	r4, r6
   29446:	4616      	mov	r6, r2
		if (chan->req) {
   29448:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2944c:	2a00      	cmp	r2, #0
   2944e:	d1f4      	bne.n	2943a <att_req_send_process+0x38>
		if (!req && prev &&
   29450:	2d00      	cmp	r5, #0
   29452:	d0e5      	beq.n	29420 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   29454:	4638      	mov	r0, r7
   29456:	f7ff fd55 	bl	28f04 <sys_slist_get>
	if (node) {
   2945a:	4605      	mov	r5, r0
   2945c:	b908      	cbnz	r0, 29462 <att_req_send_process+0x60>
   2945e:	4623      	mov	r3, r4
   29460:	e7eb      	b.n	2943a <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   29462:	4601      	mov	r1, r0
   29464:	4620      	mov	r0, r4
   29466:	f7ec fd79 	bl	15f5c <bt_att_chan_req_send>
   2946a:	2800      	cmp	r0, #0
   2946c:	da0b      	bge.n	29486 <att_req_send_process+0x84>
	return list->head;
   2946e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   29472:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   29474:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   29478:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2947c:	2b00      	cmp	r3, #0
   2947e:	d1ee      	bne.n	2945e <att_req_send_process+0x5c>
	list->tail = node;
   29480:	f8c8 5008 	str.w	r5, [r8, #8]
}
   29484:	e7eb      	b.n	2945e <att_req_send_process+0x5c>
}
   29486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002948a <bt_att_status>:
{
   2948a:	b538      	push	{r3, r4, r5, lr}
   2948c:	4605      	mov	r5, r0
   2948e:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   29490:	2100      	movs	r1, #0
   29492:	f7ff fd5b 	bl	28f4c <atomic_test_bit>
   29496:	b1c0      	cbz	r0, 294ca <bt_att_status+0x40>
	if (!chan->att) {
   29498:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2949c:	b1a8      	cbz	r0, 294ca <bt_att_status+0x40>
	if (chan->req) {
   2949e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   294a2:	b993      	cbnz	r3, 294ca <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   294a4:	3004      	adds	r0, #4
   294a6:	f7ff fd2d 	bl	28f04 <sys_slist_get>
	if (!node) {
   294aa:	4604      	mov	r4, r0
   294ac:	b168      	cbz	r0, 294ca <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   294ae:	4601      	mov	r1, r0
   294b0:	1f28      	subs	r0, r5, #4
   294b2:	f7ec fd53 	bl	15f5c <bt_att_chan_req_send>
   294b6:	2800      	cmp	r0, #0
   294b8:	da07      	bge.n	294ca <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   294ba:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   294be:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   294c0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   294c2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   294c4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   294c6:	b902      	cbnz	r2, 294ca <bt_att_status+0x40>
	list->tail = node;
   294c8:	609c      	str	r4, [r3, #8]
}
   294ca:	bd38      	pop	{r3, r4, r5, pc}

000294cc <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   294cc:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   294ce:	6883      	ldr	r3, [r0, #8]
   294d0:	699b      	ldr	r3, [r3, #24]
   294d2:	b10b      	cbz	r3, 294d8 <att_sent+0xc>
		chan->ops->sent(chan);
   294d4:	3004      	adds	r0, #4
   294d6:	4718      	bx	r3
}
   294d8:	4770      	bx	lr

000294da <att_tx_complete>:
{
   294da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   294de:	4606      	mov	r6, r0
   294e0:	460d      	mov	r5, r1
	if (!err) {
   294e2:	4614      	mov	r4, r2
   294e4:	b122      	cbz	r2, 294f0 <att_tx_complete+0x16>
}
   294e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   294ea:	4608      	mov	r0, r1
   294ec:	f7ec bbe2 	b.w	15cb4 <tx_meta_data_free>
		att_sent(conn, user_data);
   294f0:	f7ff ffec 	bl	294cc <att_sent>
	bt_gatt_complete_func_t func = data->func;
   294f4:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   294f6:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   294f8:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   294fc:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   29500:	f7ec fbd8 	bl	15cb4 <tx_meta_data_free>
	if (!err && func) {
   29504:	b92f      	cbnz	r7, 29512 <att_tx_complete+0x38>
}
   29506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2950a:	4649      	mov	r1, r9
   2950c:	4630      	mov	r0, r6
   2950e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   29510:	3401      	adds	r4, #1
   29512:	b2a3      	uxth	r3, r4
   29514:	4543      	cmp	r3, r8
   29516:	d3f8      	bcc.n	2950a <att_tx_complete+0x30>
   29518:	e7f5      	b.n	29506 <att_tx_complete+0x2c>

0002951a <att_req_sent>:
{
   2951a:	b510      	push	{r4, lr}
   2951c:	460c      	mov	r4, r1
	if (!err) {
   2951e:	b90a      	cbnz	r2, 29524 <att_req_sent+0xa>
		att_sent(conn, user_data);
   29520:	f7ff ffd4 	bl	294cc <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   29524:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   29526:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2952a:	b12b      	cbz	r3, 29538 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2952c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29530:	2300      	movs	r3, #0
   29532:	30c0      	adds	r0, #192	; 0xc0
   29534:	f7f9 f94c 	bl	227d0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   29538:	4620      	mov	r0, r4
}
   2953a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2953e:	f7ec bbb9 	b.w	15cb4 <tx_meta_data_free>

00029542 <att_cfm_sent>:
{
   29542:	b510      	push	{r4, lr}
   29544:	460c      	mov	r4, r1
	if (!err) {
   29546:	b90a      	cbnz	r2, 2954c <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   29548:	f7ff ffc0 	bl	294cc <att_sent>
   2954c:	6823      	ldr	r3, [r4, #0]
   2954e:	3398      	adds	r3, #152	; 0x98
   29550:	e8d3 1fef 	ldaex	r1, [r3]
   29554:	f021 0102 	bic.w	r1, r1, #2
   29558:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2955c:	2a00      	cmp	r2, #0
   2955e:	d1f7      	bne.n	29550 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   29560:	4620      	mov	r0, r4
}
   29562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   29566:	f7ec bba5 	b.w	15cb4 <tx_meta_data_free>

0002956a <att_rsp_sent>:
{
   2956a:	b510      	push	{r4, lr}
   2956c:	460c      	mov	r4, r1
	if (!err) {
   2956e:	b90a      	cbnz	r2, 29574 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   29570:	f7ff ffac 	bl	294cc <att_sent>
   29574:	6823      	ldr	r3, [r4, #0]
   29576:	3398      	adds	r3, #152	; 0x98
   29578:	e8d3 1fef 	ldaex	r1, [r3]
   2957c:	f021 0101 	bic.w	r1, r1, #1
   29580:	e8c3 1fe2 	stlex	r2, r1, [r3]
   29584:	2a00      	cmp	r2, #0
   29586:	d1f7      	bne.n	29578 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   29588:	4620      	mov	r0, r4
}
   2958a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2958e:	f7ec bb91 	b.w	15cb4 <tx_meta_data_free>

00029592 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29596:	4688      	mov	r8, r1
   29598:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2959a:	2101      	movs	r1, #1
   2959c:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2959e:	4605      	mov	r5, r0
   295a0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   295a2:	f7ec feb1 	bl	16308 <bt_att_chan_create_pdu>
	if (!buf) {
   295a6:	4604      	mov	r4, r0
   295a8:	b170      	cbz	r0, 295c8 <send_err_rsp.part.0+0x36>
   295aa:	2104      	movs	r1, #4
   295ac:	300c      	adds	r0, #12
   295ae:	f7f1 fe35 	bl	1b21c <net_buf_simple_add>
	rsp->request = req;
   295b2:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   295b6:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   295ba:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   295bc:	4621      	mov	r1, r4
   295be:	4628      	mov	r0, r5
}
   295c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   295c4:	f7ff bdcd 	b.w	29162 <bt_att_chan_send_rsp>
}
   295c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000295cc <att_write_req>:
{
   295cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   295ce:	460c      	mov	r4, r1
   295d0:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   295d2:	f101 000c 	add.w	r0, r1, #12
   295d6:	f000 fe93 	bl	2a300 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   295da:	8a22      	ldrh	r2, [r4, #16]
   295dc:	4603      	mov	r3, r0
   295de:	9201      	str	r2, [sp, #4]
   295e0:	68e2      	ldr	r2, [r4, #12]
   295e2:	2112      	movs	r1, #18
   295e4:	9200      	str	r2, [sp, #0]
   295e6:	4628      	mov	r0, r5
   295e8:	2213      	movs	r2, #19
   295ea:	f7ec ffa7 	bl	1653c <att_write_rsp.constprop.0>
}
   295ee:	b003      	add	sp, #12
   295f0:	bd30      	pop	{r4, r5, pc}

000295f2 <att_write_cmd>:
{
   295f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   295f4:	460c      	mov	r4, r1
   295f6:	4605      	mov	r5, r0
   295f8:	f101 000c 	add.w	r0, r1, #12
   295fc:	f000 fe80 	bl	2a300 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   29600:	8a22      	ldrh	r2, [r4, #16]
   29602:	4603      	mov	r3, r0
   29604:	9201      	str	r2, [sp, #4]
   29606:	68e2      	ldr	r2, [r4, #12]
   29608:	4628      	mov	r0, r5
   2960a:	9200      	str	r2, [sp, #0]
   2960c:	2200      	movs	r2, #0
   2960e:	4611      	mov	r1, r2
   29610:	f7ec ff94 	bl	1653c <att_write_rsp.constprop.0>
}
   29614:	b003      	add	sp, #12
   29616:	bd30      	pop	{r4, r5, pc}

00029618 <att_read_blob_req>:
{
   29618:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2961a:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2961c:	210c      	movs	r1, #12
   2961e:	8813      	ldrh	r3, [r2, #0]
   29620:	8852      	ldrh	r2, [r2, #2]
   29622:	9200      	str	r2, [sp, #0]
   29624:	220d      	movs	r2, #13
   29626:	f7ed f94d 	bl	168c4 <att_read_rsp>
}
   2962a:	b003      	add	sp, #12
   2962c:	f85d fb04 	ldr.w	pc, [sp], #4

00029630 <att_read_req>:
{
   29630:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   29632:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   29634:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   29636:	210a      	movs	r1, #10
   29638:	881b      	ldrh	r3, [r3, #0]
   2963a:	9200      	str	r2, [sp, #0]
   2963c:	220b      	movs	r2, #11
   2963e:	f7ed f941 	bl	168c4 <att_read_rsp>
}
   29642:	b003      	add	sp, #12
   29644:	f85d fb04 	ldr.w	pc, [sp], #4

00029648 <att_mtu_req>:
{
   29648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2964a:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2964c:	f850 2b98 	ldr.w	r2, [r0], #152
{
   29650:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29652:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   29654:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29656:	f7ff fc79 	bl	28f4c <atomic_test_bit>
   2965a:	4604      	mov	r4, r0
   2965c:	b9f0      	cbnz	r0, 2969c <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2965e:	68db      	ldr	r3, [r3, #12]
   29660:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   29662:	2e16      	cmp	r6, #22
   29664:	d91c      	bls.n	296a0 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29666:	4638      	mov	r0, r7
   29668:	2202      	movs	r2, #2
   2966a:	f7ec ffcb 	bl	16604 <bt_att_create_pdu>
	if (!pdu) {
   2966e:	4607      	mov	r7, r0
   29670:	b1c0      	cbz	r0, 296a4 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   29672:	2102      	movs	r1, #2
   29674:	300c      	adds	r0, #12
   29676:	f7f1 fdd1 	bl	1b21c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2967a:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2967c:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2967e:	7003      	strb	r3, [r0, #0]
   29680:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   29682:	4628      	mov	r0, r5
   29684:	f7ff fd6d 	bl	29162 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29688:	2e41      	cmp	r6, #65	; 0x41
   2968a:	bf28      	it	cs
   2968c:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2968e:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29690:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   29692:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   29694:	f7ff fc9c 	bl	28fd0 <att_chan_mtu_updated>
	return 0;
   29698:	4620      	mov	r0, r4
}
   2969a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2969c:	2006      	movs	r0, #6
   2969e:	e7fc      	b.n	2969a <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   296a0:	2004      	movs	r0, #4
   296a2:	e7fa      	b.n	2969a <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   296a4:	200e      	movs	r0, #14
   296a6:	e7f8      	b.n	2969a <att_mtu_req+0x52>

000296a8 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   296a8:	8a0a      	ldrh	r2, [r1, #16]
   296aa:	2300      	movs	r3, #0
   296ac:	68c9      	ldr	r1, [r1, #12]
   296ae:	f7ed bab3 	b.w	16c18 <att_handle_rsp>

000296b2 <bt_att_encrypt_change>:
{
   296b2:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   296b4:	4606      	mov	r6, r0
	if (!att_chan->att) {
   296b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   296ba:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   296bc:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   296c0:	2b00      	cmp	r3, #0
   296c2:	d038      	beq.n	29736 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   296c4:	b141      	cbz	r1, 296d8 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   296c6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   296ca:	2b00      	cmp	r3, #0
   296cc:	d033      	beq.n	29736 <bt_att_encrypt_change+0x84>
   296ce:	7c1b      	ldrb	r3, [r3, #16]
   296d0:	07da      	lsls	r2, r3, #31
   296d2:	d530      	bpl.n	29736 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   296d4:	2305      	movs	r3, #5
   296d6:	e021      	b.n	2971c <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   296d8:	4628      	mov	r0, r5
   296da:	f7ef f89b 	bl	18814 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   296de:	7a6b      	ldrb	r3, [r5, #9]
   296e0:	2b01      	cmp	r3, #1
   296e2:	d028      	beq.n	29736 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   296e4:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   296e8:	b32d      	cbz	r5, 29736 <bt_att_encrypt_change+0x84>
   296ea:	7c2b      	ldrb	r3, [r5, #16]
   296ec:	07db      	lsls	r3, r3, #31
   296ee:	d522      	bpl.n	29736 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   296f0:	68eb      	ldr	r3, [r5, #12]
   296f2:	2b00      	cmp	r3, #0
   296f4:	d0ee      	beq.n	296d4 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   296f6:	4630      	mov	r0, r6
   296f8:	696a      	ldr	r2, [r5, #20]
   296fa:	7c69      	ldrb	r1, [r5, #17]
   296fc:	f7ec fe04 	bl	16308 <bt_att_chan_create_pdu>
	if (!buf) {
   29700:	4604      	mov	r4, r0
   29702:	b150      	cbz	r0, 2971a <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   29704:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   29708:	68eb      	ldr	r3, [r5, #12]
   2970a:	4798      	blx	r3
   2970c:	b168      	cbz	r0, 2972a <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2970e:	69a0      	ldr	r0, [r4, #24]
   29710:	f7ec fad0 	bl	15cb4 <tx_meta_data_free>
		net_buf_unref(buf);
   29714:	4620      	mov	r0, r4
   29716:	f7f1 fc5f 	bl	1afd8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2971a:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2971c:	2200      	movs	r2, #0
   2971e:	4630      	mov	r0, r6
}
   29720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   29724:	4611      	mov	r1, r2
   29726:	f7ed ba77 	b.w	16c18 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2972a:	4621      	mov	r1, r4
   2972c:	4630      	mov	r0, r6
   2972e:	f7ec fba1 	bl	15e74 <chan_send>
   29732:	2800      	cmp	r0, #0
   29734:	d1eb      	bne.n	2970e <bt_att_encrypt_change+0x5c>
}
   29736:	bd70      	pop	{r4, r5, r6, pc}

00029738 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   29738:	2001      	movs	r0, #1
   2973a:	4770      	bx	lr

0002973c <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2973c:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2973e:	f7ec fc4f 	bl	15fe0 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   29742:	b178      	cbz	r0, 29764 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   29744:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   29746:	b16b      	cbz	r3, 29764 <bt_att_clear_out_of_sync_sent+0x28>
   29748:	3bf0      	subs	r3, #240	; 0xf0
   2974a:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2974e:	e8d2 0fef 	ldaex	r0, [r2]
   29752:	f020 0020 	bic.w	r0, r0, #32
   29756:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2975a:	2900      	cmp	r1, #0
   2975c:	d1f7      	bne.n	2974e <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2975e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   29762:	e7f0      	b.n	29746 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   29764:	bd08      	pop	{r3, pc}

00029766 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   29766:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   29768:	2104      	movs	r1, #4
   2976a:	f7ff fbc1 	bl	28ef0 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2976e:	b128      	cbz	r0, 2977c <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   29770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   29774:	2105      	movs	r1, #5
   29776:	3094      	adds	r0, #148	; 0x94
   29778:	f7ff bbe8 	b.w	28f4c <atomic_test_bit>
}
   2977c:	bd08      	pop	{r3, pc}

0002977e <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2977e:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   29780:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   29784:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   29786:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   29788:	8082      	strh	r2, [r0, #4]
}
   2978a:	4770      	bx	lr

0002978c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2978c:	6010      	str	r0, [r2, #0]
}
   2978e:	2000      	movs	r0, #0
   29790:	4770      	bx	lr

00029792 <gatt_ccc_changed>:
{
   29792:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   29794:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   29796:	895a      	ldrh	r2, [r3, #10]
   29798:	428a      	cmp	r2, r1
   2979a:	d003      	beq.n	297a4 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2979c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2979e:	68db      	ldr	r3, [r3, #12]
   297a0:	b103      	cbz	r3, 297a4 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   297a2:	4718      	bx	r3
}
   297a4:	4770      	bx	lr

000297a6 <gatt_indicate_rsp>:
{
   297a6:	b510      	push	{r4, lr}
   297a8:	9c02      	ldr	r4, [sp, #8]
   297aa:	460a      	mov	r2, r1
	if (params->func) {
   297ac:	68a3      	ldr	r3, [r4, #8]
   297ae:	b10b      	cbz	r3, 297b4 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   297b0:	4621      	mov	r1, r4
   297b2:	4798      	blx	r3
	params->_ref--;
   297b4:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   297b6:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   297b8:	3b01      	subs	r3, #1
   297ba:	b2db      	uxtb	r3, r3
   297bc:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   297be:	b122      	cbz	r2, 297ca <gatt_indicate_rsp+0x24>
   297c0:	b91b      	cbnz	r3, 297ca <gatt_indicate_rsp+0x24>
		params->destroy(params);
   297c2:	4620      	mov	r0, r4
}
   297c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   297c8:	4710      	bx	r2
}
   297ca:	bd10      	pop	{r4, pc}

000297cc <match_uuid>:
	data->attr = attr;
   297cc:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   297ce:	8091      	strh	r1, [r2, #4]
}
   297d0:	2000      	movs	r0, #0
   297d2:	4770      	bx	lr

000297d4 <ccc_set_cb>:
}
   297d4:	2000      	movs	r0, #0
   297d6:	4770      	bx	lr

000297d8 <gen_hash_m>:
{
   297d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   297da:	6807      	ldr	r7, [r0, #0]
{
   297dc:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   297de:	783d      	ldrb	r5, [r7, #0]
{
   297e0:	4614      	mov	r4, r2
   297e2:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   297e4:	b9dd      	cbnz	r5, 2981e <gen_hash_m+0x46>
	switch (u16->val) {
   297e6:	887b      	ldrh	r3, [r7, #2]
   297e8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   297ec:	d004      	beq.n	297f8 <gen_hash_m+0x20>
   297ee:	d810      	bhi.n	29812 <gen_hash_m+0x3a>
   297f0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   297f4:	2b03      	cmp	r3, #3
   297f6:	d812      	bhi.n	2981e <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   297f8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   297fc:	2202      	movs	r2, #2
   297fe:	4620      	mov	r0, r4
   29800:	f10d 010a 	add.w	r1, sp, #10
   29804:	f7fe fb2f 	bl	27e66 <tc_cmac_update>
   29808:	b968      	cbnz	r0, 29826 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2980a:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2980e:	65a2      	str	r2, [r4, #88]	; 0x58
   29810:	e006      	b.n	29820 <gen_hash_m+0x48>
	switch (u16->val) {
   29812:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   29816:	33ff      	adds	r3, #255	; 0xff
   29818:	b29b      	uxth	r3, r3
   2981a:	2b04      	cmp	r3, #4
   2981c:	d91e      	bls.n	2985c <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2981e:	2501      	movs	r5, #1
}
   29820:	4628      	mov	r0, r5
   29822:	b009      	add	sp, #36	; 0x24
   29824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   29826:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29828:	2202      	movs	r2, #2
   2982a:	4620      	mov	r0, r4
   2982c:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   29830:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29834:	f7fe fb17 	bl	27e66 <tc_cmac_update>
   29838:	2800      	cmp	r0, #0
   2983a:	d0e6      	beq.n	2980a <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2983c:	2000      	movs	r0, #0
   2983e:	9000      	str	r0, [sp, #0]
   29840:	aa03      	add	r2, sp, #12
   29842:	2313      	movs	r3, #19
   29844:	4631      	mov	r1, r6
   29846:	6877      	ldr	r7, [r6, #4]
   29848:	47b8      	blx	r7
		if (len < 0) {
   2984a:	1e02      	subs	r2, r0, #0
   2984c:	dbdf      	blt.n	2980e <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2984e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29850:	4620      	mov	r0, r4
   29852:	f7fe fb08 	bl	27e66 <tc_cmac_update>
   29856:	2800      	cmp	r0, #0
   29858:	d1e1      	bne.n	2981e <gen_hash_m+0x46>
   2985a:	e7d6      	b.n	2980a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2985c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29860:	2202      	movs	r2, #2
   29862:	4620      	mov	r0, r4
   29864:	f10d 010a 	add.w	r1, sp, #10
   29868:	f7fe fafd 	bl	27e66 <tc_cmac_update>
   2986c:	2800      	cmp	r0, #0
   2986e:	d0cc      	beq.n	2980a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   29870:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29872:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   29874:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29878:	f10d 010a 	add.w	r1, sp, #10
   2987c:	e7e8      	b.n	29850 <gen_hash_m+0x78>

0002987e <bt_addr_le_eq>:
   2987e:	2207      	movs	r2, #7
{
   29880:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   29882:	f002 fa8b 	bl	2bd9c <memcmp>
}
   29886:	fab0 f080 	clz	r0, r0
   2988a:	0940      	lsrs	r0, r0, #5
   2988c:	bd08      	pop	{r3, pc}

0002988e <ccc_find_cfg>:
{
   2988e:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   29890:	7803      	ldrb	r3, [r0, #0]
{
   29892:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   29894:	4293      	cmp	r3, r2
   29896:	d105      	bne.n	298a4 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   29898:	3001      	adds	r0, #1
   2989a:	f7ff fff0 	bl	2987e <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2989e:	b108      	cbz	r0, 298a4 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   298a0:	4620      	mov	r0, r4
}
   298a2:	bd10      	pop	{r4, pc}
	return NULL;
   298a4:	2000      	movs	r0, #0
   298a6:	e7fc      	b.n	298a2 <ccc_find_cfg+0x14>

000298a8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   298a8:	e8d0 0faf 	lda	r0, [r0]
}
   298ac:	4770      	bx	lr

000298ae <atomic_or>:
{
   298ae:	4603      	mov	r3, r0
   298b0:	b510      	push	{r4, lr}
}
   298b2:	e8d3 0fef 	ldaex	r0, [r3]
   298b6:	ea40 0201 	orr.w	r2, r0, r1
   298ba:	e8c3 2fe4 	stlex	r4, r2, [r3]
   298be:	2c00      	cmp	r4, #0
   298c0:	d1f7      	bne.n	298b2 <atomic_or+0x4>
   298c2:	bd10      	pop	{r4, pc}

000298c4 <atomic_and>:
{
   298c4:	4603      	mov	r3, r0
   298c6:	b510      	push	{r4, lr}
}
   298c8:	e8d3 0fef 	ldaex	r0, [r3]
   298cc:	ea00 0201 	and.w	r2, r0, r1
   298d0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   298d4:	2c00      	cmp	r4, #0
   298d6:	d1f7      	bne.n	298c8 <atomic_and+0x4>
   298d8:	bd10      	pop	{r4, pc}

000298da <bt_addr_le_copy>:
   298da:	680b      	ldr	r3, [r1, #0]
   298dc:	6003      	str	r3, [r0, #0]
   298de:	888b      	ldrh	r3, [r1, #4]
   298e0:	8083      	strh	r3, [r0, #4]
   298e2:	798b      	ldrb	r3, [r1, #6]
   298e4:	7183      	strb	r3, [r0, #6]
}
   298e6:	4770      	bx	lr

000298e8 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   298e8:	2300      	movs	r3, #0
   298ea:	6003      	str	r3, [r0, #0]
   298ec:	6043      	str	r3, [r0, #4]
   298ee:	6083      	str	r3, [r0, #8]
}
   298f0:	4770      	bx	lr

000298f2 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   298f2:	b538      	push	{r3, r4, r5, lr}
   298f4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   298f8:	4615      	mov	r5, r2
	if (offset > value_len) {
   298fa:	4294      	cmp	r4, r2
   298fc:	d30a      	bcc.n	29914 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   298fe:	1aa4      	subs	r4, r4, r2
   29900:	428c      	cmp	r4, r1
   29902:	bfa8      	it	ge
   29904:	460c      	movge	r4, r1
   29906:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29908:	4622      	mov	r2, r4
   2990a:	1959      	adds	r1, r3, r5
   2990c:	f002 fa56 	bl	2bdbc <memcpy>
}
   29910:	4620      	mov	r0, r4
   29912:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29914:	f06f 0406 	mvn.w	r4, #6
   29918:	e7fa      	b.n	29910 <bt_gatt_attr_read.constprop.0+0x1e>

0002991a <bt_gatt_attr_read_ccc>:
{
   2991a:	b530      	push	{r4, r5, lr}
   2991c:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2991e:	68c9      	ldr	r1, [r1, #12]
{
   29920:	4614      	mov	r4, r2
   29922:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   29924:	f7ed fb20 	bl	16f68 <find_ccc_cfg>
	if (cfg) {
   29928:	b100      	cbz	r0, 2992c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2992a:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2992c:	2302      	movs	r3, #2
   2992e:	f8ad 000e 	strh.w	r0, [sp, #14]
   29932:	9300      	str	r3, [sp, #0]
   29934:	4629      	mov	r1, r5
   29936:	4620      	mov	r0, r4
   29938:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2993c:	f10d 030e 	add.w	r3, sp, #14
   29940:	f7ff ffd7 	bl	298f2 <bt_gatt_attr_read.constprop.0>
}
   29944:	b005      	add	sp, #20
   29946:	bd30      	pop	{r4, r5, pc}

00029948 <bt_gatt_attr_read_service>:
{
   29948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2994a:	460c      	mov	r4, r1
   2994c:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2994e:	68e3      	ldr	r3, [r4, #12]
{
   29950:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   29952:	781c      	ldrb	r4, [r3, #0]
{
   29954:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   29958:	b13c      	cbz	r4, 2996a <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2995a:	2410      	movs	r4, #16
   2995c:	3301      	adds	r3, #1
   2995e:	9406      	str	r4, [sp, #24]
}
   29960:	b004      	add	sp, #16
   29962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29966:	f7ff bfc4 	b.w	298f2 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2996a:	885b      	ldrh	r3, [r3, #2]
   2996c:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29970:	2302      	movs	r3, #2
   29972:	9300      	str	r3, [sp, #0]
   29974:	f10d 030e 	add.w	r3, sp, #14
   29978:	f7ff ffbb 	bl	298f2 <bt_gatt_attr_read.constprop.0>
}
   2997c:	b004      	add	sp, #16
   2997e:	bd10      	pop	{r4, pc}

00029980 <cf_read>:
{
   29980:	b530      	push	{r4, r5, lr}
   29982:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   29984:	2300      	movs	r3, #0
{
   29986:	b085      	sub	sp, #20
   29988:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2998a:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2998e:	f7ed fa9b 	bl	16ec8 <find_cf_cfg>
	if (cfg) {
   29992:	b110      	cbz	r0, 2999a <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   29994:	7a03      	ldrb	r3, [r0, #8]
   29996:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2999a:	2301      	movs	r3, #1
   2999c:	4629      	mov	r1, r5
   2999e:	9300      	str	r3, [sp, #0]
   299a0:	4620      	mov	r0, r4
   299a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   299a6:	ab03      	add	r3, sp, #12
   299a8:	f7ff ffa3 	bl	298f2 <bt_gatt_attr_read.constprop.0>
}
   299ac:	b005      	add	sp, #20
   299ae:	bd30      	pop	{r4, r5, pc}

000299b0 <read_name>:
{
   299b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   299b4:	4614      	mov	r4, r2
   299b6:	461d      	mov	r5, r3
   299b8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   299bc:	f7e9 fe92 	bl	136e4 <bt_get_name>
   299c0:	4606      	mov	r6, r0
				 strlen(name));
   299c2:	f7df fccd 	bl	9360 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   299c6:	b280      	uxth	r0, r0
   299c8:	9006      	str	r0, [sp, #24]
   299ca:	4633      	mov	r3, r6
   299cc:	463a      	mov	r2, r7
   299ce:	4629      	mov	r1, r5
   299d0:	4620      	mov	r0, r4
}
   299d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   299d6:	f7ff bf8c 	b.w	298f2 <bt_gatt_attr_read.constprop.0>

000299da <read_appearance>:
{
   299da:	b530      	push	{r4, r5, lr}
   299dc:	b085      	sub	sp, #20
   299de:	4614      	mov	r4, r2
   299e0:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   299e2:	f7fe ff09 	bl	287f8 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   299e6:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   299e8:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   299ec:	9300      	str	r3, [sp, #0]
   299ee:	4629      	mov	r1, r5
   299f0:	4620      	mov	r0, r4
   299f2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   299f6:	f10d 030e 	add.w	r3, sp, #14
   299fa:	f7ff ff7a 	bl	298f2 <bt_gatt_attr_read.constprop.0>
}
   299fe:	b005      	add	sp, #20
   29a00:	bd30      	pop	{r4, r5, pc}

00029a02 <z_log_msg_static_create.constprop.0>:
   29a02:	2300      	movs	r3, #0
   29a04:	f7e4 bfa6 	b.w	e954 <z_impl_z_log_msg_static_create>

00029a08 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29a08:	2a02      	cmp	r2, #2
{
   29a0a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29a0c:	d108      	bne.n	29a20 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29a0e:	2300      	movs	r3, #0
   29a10:	f100 0190 	add.w	r1, r0, #144	; 0x90
   29a14:	461a      	mov	r2, r3
   29a16:	7a00      	ldrb	r0, [r0, #8]
   29a18:	f7ed fcac 	bl	17374 <sc_save>
}
   29a1c:	2002      	movs	r0, #2
   29a1e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   29a20:	f7ed fc48 	bl	172b4 <sc_clear>
   29a24:	e7fa      	b.n	29a1c <sc_ccc_cfg_write+0x14>

00029a26 <sc_restore_rsp>:
{
   29a26:	b538      	push	{r3, r4, r5, lr}
   29a28:	4604      	mov	r4, r0
   29a2a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   29a2c:	f7ff fe84 	bl	29738 <bt_att_fixed_chan_only>
   29a30:	b150      	cbz	r0, 29a48 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   29a32:	4620      	mov	r0, r4
   29a34:	f7ed fa48 	bl	16ec8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   29a38:	b130      	cbz	r0, 29a48 <sc_restore_rsp+0x22>
   29a3a:	7a03      	ldrb	r3, [r0, #8]
   29a3c:	07db      	lsls	r3, r3, #31
   29a3e:	d503      	bpl.n	29a48 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29a40:	2101      	movs	r1, #1
   29a42:	300c      	adds	r0, #12
   29a44:	f7ff ff33 	bl	298ae <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   29a48:	b955      	cbnz	r5, 29a60 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   29a4a:	7a20      	ldrb	r0, [r4, #8]
   29a4c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   29a50:	f7ed fa68 	bl	16f24 <find_sc_cfg>
		if (sc_cfg) {
   29a54:	b120      	cbz	r0, 29a60 <sc_restore_rsp+0x3a>
__ssp_bos_icheck3(memset, void *, int)
   29a56:	6085      	str	r5, [r0, #8]
}
   29a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   29a5c:	f7ed bc56 	b.w	1730c <sc_store>
}
   29a60:	bd38      	pop	{r3, r4, r5, pc}

00029a62 <bt_gatt_attr_value_handle>:
{
   29a62:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29a64:	4604      	mov	r4, r0
   29a66:	b910      	cbnz	r0, 29a6e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   29a68:	2000      	movs	r0, #0
}
   29a6a:	b002      	add	sp, #8
   29a6c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29a6e:	2300      	movs	r3, #0
   29a70:	f88d 3004 	strb.w	r3, [sp, #4]
   29a74:	f642 0303 	movw	r3, #10243	; 0x2803
   29a78:	6800      	ldr	r0, [r0, #0]
   29a7a:	a901      	add	r1, sp, #4
   29a7c:	f8ad 3006 	strh.w	r3, [sp, #6]
   29a80:	f7fe fd61 	bl	28546 <bt_uuid_cmp>
   29a84:	2800      	cmp	r0, #0
   29a86:	d1ef      	bne.n	29a68 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   29a88:	68e3      	ldr	r3, [r4, #12]
   29a8a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29a8c:	2800      	cmp	r0, #0
   29a8e:	d1ec      	bne.n	29a6a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   29a90:	4620      	mov	r0, r4
   29a92:	f7ed ffbb 	bl	17a0c <bt_gatt_attr_get_handle>
   29a96:	3001      	adds	r0, #1
   29a98:	b280      	uxth	r0, r0
	return handle;
   29a9a:	e7e6      	b.n	29a6a <bt_gatt_attr_value_handle+0x8>

00029a9c <bt_gatt_attr_read_chrc>:
{
   29a9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   29a9e:	68cc      	ldr	r4, [r1, #12]
{
   29aa0:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   29aa2:	79a3      	ldrb	r3, [r4, #6]
{
   29aa4:	b088      	sub	sp, #32
   29aa6:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   29aa8:	f88d 300c 	strb.w	r3, [sp, #12]
{
   29aac:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29aae:	f7ff ffd8 	bl	29a62 <bt_gatt_attr_value_handle>
   29ab2:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29ab6:	6824      	ldr	r4, [r4, #0]
   29ab8:	7823      	ldrb	r3, [r4, #0]
   29aba:	b96b      	cbnz	r3, 29ad8 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29abc:	8863      	ldrh	r3, [r4, #2]
   29abe:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   29ac2:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29ac4:	9300      	str	r3, [sp, #0]
   29ac6:	4631      	mov	r1, r6
   29ac8:	4628      	mov	r0, r5
   29aca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   29ace:	ab03      	add	r3, sp, #12
   29ad0:	f7ff ff0f 	bl	298f2 <bt_gatt_attr_read.constprop.0>
}
   29ad4:	b008      	add	sp, #32
   29ad6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29ad8:	1c63      	adds	r3, r4, #1
   29ada:	f10d 020f 	add.w	r2, sp, #15
   29ade:	3411      	adds	r4, #17
   29ae0:	f853 1b04 	ldr.w	r1, [r3], #4
   29ae4:	42a3      	cmp	r3, r4
   29ae6:	f842 1b04 	str.w	r1, [r2], #4
   29aea:	d1f9      	bne.n	29ae0 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   29aec:	2313      	movs	r3, #19
   29aee:	e7e9      	b.n	29ac4 <bt_gatt_attr_read_chrc+0x28>

00029af0 <bt_gatt_foreach_attr>:
{
   29af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29af2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29af6:	2300      	movs	r3, #0
   29af8:	461a      	mov	r2, r3
   29afa:	9300      	str	r3, [sp, #0]
   29afc:	f7ed ffce 	bl	17a9c <bt_gatt_foreach_attr_type>
}
   29b00:	b005      	add	sp, #20
   29b02:	f85d fb04 	ldr.w	pc, [sp], #4

00029b06 <bt_gatt_check_perm>:
{
   29b06:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   29b08:	07d4      	lsls	r4, r2, #31
{
   29b0a:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29b0c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   29b0e:	d504      	bpl.n	29b1a <bt_gatt_check_perm+0x14>
   29b10:	f013 0f95 	tst.w	r3, #149	; 0x95
   29b14:	d027      	beq.n	29b66 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29b16:	6848      	ldr	r0, [r1, #4]
   29b18:	b328      	cbz	r0, 29b66 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29b1a:	0790      	lsls	r0, r2, #30
   29b1c:	d504      	bpl.n	29b28 <bt_gatt_check_perm+0x22>
   29b1e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   29b22:	d022      	beq.n	29b6a <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29b24:	6889      	ldr	r1, [r1, #8]
   29b26:	b301      	cbz	r1, 29b6a <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   29b28:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   29b2c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   29b30:	d007      	beq.n	29b42 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29b32:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   29b36:	b90b      	cbnz	r3, 29b3c <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   29b38:	2005      	movs	r0, #5
}
   29b3a:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29b3c:	7b5b      	ldrb	r3, [r3, #13]
   29b3e:	06db      	lsls	r3, r3, #27
   29b40:	d5fa      	bpl.n	29b38 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29b42:	f014 0f30 	tst.w	r4, #48	; 0x30
   29b46:	d108      	bne.n	29b5a <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   29b48:	f014 000c 	ands.w	r0, r4, #12
   29b4c:	d0f5      	beq.n	29b3a <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   29b4e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   29b50:	2b00      	cmp	r3, #0
   29b52:	bf14      	ite	ne
   29b54:	2000      	movne	r0, #0
   29b56:	200f      	moveq	r0, #15
   29b58:	e7ef      	b.n	29b3a <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29b5a:	4628      	mov	r0, r5
   29b5c:	f7ff f8ed 	bl	28d3a <bt_conn_get_security>
   29b60:	2802      	cmp	r0, #2
   29b62:	d8f1      	bhi.n	29b48 <bt_gatt_check_perm+0x42>
   29b64:	e7e8      	b.n	29b38 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29b66:	2002      	movs	r0, #2
   29b68:	e7e7      	b.n	29b3a <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29b6a:	2003      	movs	r0, #3
   29b6c:	e7e5      	b.n	29b3a <bt_gatt_check_perm+0x34>

00029b6e <bt_gatt_change_aware>:
{
   29b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29b70:	4605      	mov	r5, r0
   29b72:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   29b74:	f7ed f9a8 	bl	16ec8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29b78:	b1d0      	cbz	r0, 29bb0 <bt_gatt_change_aware+0x42>
   29b7a:	7a03      	ldrb	r3, [r0, #8]
   29b7c:	07db      	lsls	r3, r3, #31
   29b7e:	d517      	bpl.n	29bb0 <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   29b80:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29b84:	4620      	mov	r0, r4
   29b86:	f7ff fe8f 	bl	298a8 <atomic_get>
   29b8a:	f010 0601 	ands.w	r6, r0, #1
   29b8e:	d10f      	bne.n	29bb0 <bt_gatt_change_aware+0x42>
	if (!req) {
   29b90:	b17f      	cbz	r7, 29bb2 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29b92:	f06f 0102 	mvn.w	r1, #2
   29b96:	4620      	mov	r0, r4
   29b98:	f7ff fe94 	bl	298c4 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29b9c:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   29ba0:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29ba2:	d008      	beq.n	29bb6 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   29ba4:	f7ff fdca 	bl	2973c <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29ba8:	2101      	movs	r1, #1
   29baa:	4620      	mov	r0, r4
   29bac:	f7ff fe7f 	bl	298ae <atomic_or>
		return true;
   29bb0:	2601      	movs	r6, #1
}
   29bb2:	4630      	mov	r0, r6
   29bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   29bb6:	f7ff fdbf 	bl	29738 <bt_att_fixed_chan_only>
   29bba:	2800      	cmp	r0, #0
   29bbc:	d0f9      	beq.n	29bb2 <bt_gatt_change_aware+0x44>
   29bbe:	4628      	mov	r0, r5
   29bc0:	f7ff fdd1 	bl	29766 <bt_att_out_of_sync_sent_on_fixed>
   29bc4:	2800      	cmp	r0, #0
   29bc6:	d0f4      	beq.n	29bb2 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29bc8:	f06f 0102 	mvn.w	r1, #2
   29bcc:	4620      	mov	r0, r4
   29bce:	f7ff fe79 	bl	298c4 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   29bd2:	4628      	mov	r0, r5
   29bd4:	e7e6      	b.n	29ba4 <bt_gatt_change_aware+0x36>

00029bd6 <ccc_delayed_store>:
{
   29bd6:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   29bd8:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   29bdc:	4605      	mov	r5, r0
		if (!conn) {
   29bde:	b184      	cbz	r4, 29c02 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29be0:	f104 0690 	add.w	r6, r4, #144	; 0x90
   29be4:	4631      	mov	r1, r6
   29be6:	7a20      	ldrb	r0, [r4, #8]
   29be8:	f7fe fe09 	bl	287fe <bt_addr_le_is_bonded>
   29bec:	b148      	cbz	r0, 29c02 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   29bee:	2300      	movs	r3, #0
   29bf0:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   29bf4:	4631      	mov	r1, r6
   29bf6:	7a20      	ldrb	r0, [r4, #8]
   29bf8:	f7ee fe1c 	bl	18834 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   29bfc:	4620      	mov	r0, r4
   29bfe:	f7eb f983 	bl	14f08 <bt_conn_unref>
}
   29c02:	bd70      	pop	{r4, r5, r6, pc}

00029c04 <smp_pairing_rsp>:
}
   29c04:	2007      	movs	r0, #7
   29c06:	4770      	bx	lr

00029c08 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29c08:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29c0c:	4108      	asrs	r0, r1
}
   29c0e:	f000 0001 	and.w	r0, r0, #1
   29c12:	4770      	bx	lr

00029c14 <update_keys_check>:
{
   29c14:	4603      	mov	r3, r0
   29c16:	b510      	push	{r4, lr}
	if (!keys ||
   29c18:	b1d9      	cbz	r1, 29c52 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   29c1a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   29c1c:	f010 0f24 	tst.w	r0, #36	; 0x24
   29c20:	d017      	beq.n	29c52 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   29c22:	7d1a      	ldrb	r2, [r3, #20]
   29c24:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   29c26:	7b09      	ldrb	r1, [r1, #12]
   29c28:	42a2      	cmp	r2, r4
   29c2a:	bf28      	it	cs
   29c2c:	4622      	movcs	r2, r4
   29c2e:	4291      	cmp	r1, r2
   29c30:	d901      	bls.n	29c36 <update_keys_check+0x22>
			return false;
   29c32:	2000      	movs	r0, #0
}
   29c34:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   29c36:	0682      	lsls	r2, r0, #26
   29c38:	d404      	bmi.n	29c44 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   29c3a:	7a18      	ldrb	r0, [r3, #8]
   29c3c:	3800      	subs	r0, #0
   29c3e:	bf18      	it	ne
   29c40:	2001      	movne	r0, #1
   29c42:	e7f7      	b.n	29c34 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   29c44:	2105      	movs	r1, #5
   29c46:	1d18      	adds	r0, r3, #4
   29c48:	f7ff ffde 	bl	29c08 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   29c4c:	2800      	cmp	r0, #0
   29c4e:	d1f4      	bne.n	29c3a <update_keys_check+0x26>
   29c50:	e7ef      	b.n	29c32 <update_keys_check+0x1e>
	return true;
   29c52:	2001      	movs	r0, #1
   29c54:	e7ee      	b.n	29c34 <update_keys_check+0x20>

00029c56 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29c56:	2301      	movs	r3, #1
   29c58:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29c5a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29c5c:	e8d0 2fef 	ldaex	r2, [r0]
   29c60:	401a      	ands	r2, r3
   29c62:	e8c0 2fe1 	stlex	r1, r2, [r0]
   29c66:	2900      	cmp	r1, #0
   29c68:	d1f8      	bne.n	29c5c <atomic_clear_bit+0x6>
}
   29c6a:	4770      	bx	lr

00029c6c <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29c6c:	680b      	ldr	r3, [r1, #0]
   29c6e:	6003      	str	r3, [r0, #0]
   29c70:	888b      	ldrh	r3, [r1, #4]
   29c72:	8083      	strh	r3, [r0, #4]
   29c74:	798b      	ldrb	r3, [r1, #6]
   29c76:	7183      	strb	r3, [r0, #6]
   29c78:	4770      	bx	lr

00029c7a <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   29c7a:	2007      	movs	r0, #7
   29c7c:	4770      	bx	lr

00029c7e <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29c7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29c80:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29c82:	2200      	movs	r2, #0
   29c84:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29c86:	4604      	mov	r4, r0
   29c88:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29c8a:	460a      	mov	r2, r1
   29c8c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   29c90:	2106      	movs	r1, #6
   29c92:	f7ff f90b 	bl	28eac <bt_l2cap_send_cb>
   29c96:	b128      	cbz	r0, 29ca4 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   29c98:	4628      	mov	r0, r5
}
   29c9a:	b003      	add	sp, #12
   29c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   29ca0:	f7f1 b99a 	b.w	1afd8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29ca4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29ca8:	2300      	movs	r3, #0
   29caa:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   29cae:	b003      	add	sp, #12
   29cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29cb4:	f7f8 bd8c 	b.w	227d0 <k_work_reschedule>

00029cb8 <z_log_msg_static_create.constprop.0>:
   29cb8:	2300      	movs	r3, #0
   29cba:	f7e4 be4b 	b.w	e954 <z_impl_z_log_msg_static_create>

00029cbe <smp_chan_get>:
{
   29cbe:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   29cc0:	2106      	movs	r1, #6
   29cc2:	f7ff f915 	bl	28ef0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   29cc6:	b918      	cbnz	r0, 29cd0 <smp_chan_get+0x12>
}
   29cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29ccc:	f7ee bf34 	b.w	18b38 <smp_chan_get.part.0>
   29cd0:	38ec      	subs	r0, #236	; 0xec
   29cd2:	bd08      	pop	{r3, pc}

00029cd4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29cd4:	2301      	movs	r3, #1
   29cd6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29cd8:	e8d0 2fef 	ldaex	r2, [r0]
   29cdc:	431a      	orrs	r2, r3
   29cde:	e8c0 2fe1 	stlex	r1, r2, [r0]
   29ce2:	2900      	cmp	r1, #0
   29ce4:	d1f8      	bne.n	29cd8 <atomic_set_bit+0x4>
}
   29ce6:	4770      	bx	lr

00029ce8 <smp_keypress_notif>:
{
   29ce8:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   29cea:	210e      	movs	r1, #14
   29cec:	f7ff fff2 	bl	29cd4 <atomic_set_bit>
}
   29cf0:	2000      	movs	r0, #0
   29cf2:	bd08      	pop	{r3, pc}

00029cf4 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   29cf4:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   29cf6:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   29cf8:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   29cfa:	4628      	mov	r0, r5
   29cfc:	2104      	movs	r1, #4
   29cfe:	f7ff ff83 	bl	29c08 <atomic_test_bit>
   29d02:	b168      	cbz	r0, 29d20 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   29d04:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29d06:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   29d08:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29d0a:	4608      	mov	r0, r1
   29d0c:	f7ff f8cb 	bl	28ea6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   29d10:	4604      	mov	r4, r0
   29d12:	b940      	cbnz	r0, 29d26 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   29d14:	2104      	movs	r1, #4
   29d16:	4628      	mov	r0, r5
   29d18:	f7ff ffdc 	bl	29cd4 <atomic_set_bit>
}
   29d1c:	4620      	mov	r0, r4
   29d1e:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   29d20:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29d24:	e7ef      	b.n	29d06 <smp_create_pdu.constprop.0+0x12>
   29d26:	2101      	movs	r1, #1
   29d28:	300c      	adds	r0, #12
   29d2a:	f7f1 fa77 	bl	1b21c <net_buf_simple_add>
	hdr->code = op;
   29d2e:	7006      	strb	r6, [r0, #0]
	return buf;
   29d30:	e7f4      	b.n	29d1c <smp_create_pdu.constprop.0+0x28>

00029d32 <send_pairing_rsp>:
{
   29d32:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   29d34:	2102      	movs	r1, #2
{
   29d36:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   29d38:	f7ff ffdc 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   29d3c:	4605      	mov	r5, r0
   29d3e:	b180      	cbz	r0, 29d62 <send_pairing_rsp+0x30>
   29d40:	2106      	movs	r1, #6
   29d42:	300c      	adds	r0, #12
   29d44:	f7f1 fa6a 	bl	1b21c <net_buf_simple_add>
   29d48:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   29d4c:	2200      	movs	r2, #0
   29d4e:	6003      	str	r3, [r0, #0]
   29d50:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   29d54:	4629      	mov	r1, r5
   29d56:	8083      	strh	r3, [r0, #4]
   29d58:	4620      	mov	r0, r4
   29d5a:	f7ff ff90 	bl	29c7e <smp_send.constprop.0>
	return 0;
   29d5e:	2000      	movs	r0, #0
}
   29d60:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   29d62:	2008      	movs	r0, #8
   29d64:	e7fc      	b.n	29d60 <send_pairing_rsp+0x2e>

00029d66 <smp_send_pairing_random>:
{
   29d66:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   29d68:	2104      	movs	r1, #4
{
   29d6a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   29d6c:	f7ff ffc2 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   29d70:	4605      	mov	r5, r0
   29d72:	b1a0      	cbz	r0, 29d9e <smp_send_pairing_random+0x38>
   29d74:	2110      	movs	r1, #16
   29d76:	300c      	adds	r0, #12
   29d78:	f7f1 fa50 	bl	1b21c <net_buf_simple_add>
   29d7c:	f104 0327 	add.w	r3, r4, #39	; 0x27
   29d80:	f104 0237 	add.w	r2, r4, #55	; 0x37
   29d84:	f853 1b04 	ldr.w	r1, [r3], #4
   29d88:	4293      	cmp	r3, r2
   29d8a:	f840 1b04 	str.w	r1, [r0], #4
   29d8e:	d1f9      	bne.n	29d84 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   29d90:	4620      	mov	r0, r4
   29d92:	2200      	movs	r2, #0
   29d94:	4629      	mov	r1, r5
   29d96:	f7ff ff72 	bl	29c7e <smp_send.constprop.0>
	return 0;
   29d9a:	2000      	movs	r0, #0
}
   29d9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   29d9e:	2008      	movs	r0, #8
   29da0:	e7fc      	b.n	29d9c <smp_send_pairing_random+0x36>

00029da2 <smp_dhkey_check>:
{
   29da2:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   29da4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   29da8:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   29daa:	78db      	ldrb	r3, [r3, #3]
   29dac:	2b01      	cmp	r3, #1
   29dae:	d119      	bne.n	29de4 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   29db0:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   29db2:	1d06      	adds	r6, r0, #4
   29db4:	2110      	movs	r1, #16
   29db6:	4630      	mov	r0, r6
   29db8:	f7ff ff4d 	bl	29c56 <atomic_clear_bit>
   29dbc:	462b      	mov	r3, r5
   29dbe:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   29dc2:	f105 0110 	add.w	r1, r5, #16
   29dc6:	f853 0b04 	ldr.w	r0, [r3], #4
   29dca:	428b      	cmp	r3, r1
   29dcc:	f842 0b04 	str.w	r0, [r2], #4
   29dd0:	d1f9      	bne.n	29dc6 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   29dd2:	2107      	movs	r1, #7
   29dd4:	4630      	mov	r0, r6
   29dd6:	f7ff ff17 	bl	29c08 <atomic_test_bit>
   29dda:	b128      	cbz	r0, 29de8 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29ddc:	2109      	movs	r1, #9
   29dde:	4630      	mov	r0, r6
   29de0:	f7ff ff78 	bl	29cd4 <atomic_set_bit>
}
   29de4:	2000      	movs	r0, #0
   29de6:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29de8:	210a      	movs	r1, #10
   29dea:	4630      	mov	r0, r6
   29dec:	f7ff ff0c 	bl	29c08 <atomic_test_bit>
   29df0:	2800      	cmp	r0, #0
   29df2:	d1f3      	bne.n	29ddc <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   29df4:	4620      	mov	r0, r4
}
   29df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   29dfa:	f7ef bab3 	b.w	19364 <compute_and_check_and_send_periph_dhcheck>

00029dfe <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   29dfe:	2007      	movs	r0, #7
   29e00:	4770      	bx	lr

00029e02 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29e02:	2301      	movs	r3, #1
   29e04:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29e08:	43ca      	mvns	r2, r1
{
   29e0a:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29e0c:	e8d0 3fef 	ldaex	r3, [r0]
   29e10:	ea03 0402 	and.w	r4, r3, r2
   29e14:	e8c0 4fe5 	stlex	r5, r4, [r0]
   29e18:	2d00      	cmp	r5, #0
   29e1a:	d1f7      	bne.n	29e0c <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   29e1c:	4219      	tst	r1, r3
}
   29e1e:	bf14      	ite	ne
   29e20:	2001      	movne	r0, #1
   29e22:	2000      	moveq	r0, #0
   29e24:	bd30      	pop	{r4, r5, pc}

00029e26 <smp_reset>:
{
   29e26:	b538      	push	{r3, r4, r5, lr}
   29e28:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29e2a:	2500      	movs	r5, #0
   29e2c:	1d03      	adds	r3, r0, #4
   29e2e:	e8d3 2fef 	ldaex	r2, [r3]
   29e32:	e8c3 5fe1 	stlex	r1, r5, [r3]
   29e36:	2900      	cmp	r1, #0
   29e38:	d1f9      	bne.n	29e2e <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   29e3a:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   29e3e:	f7f8 fccd 	bl	227dc <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   29e42:	7225      	strb	r5, [r4, #8]
   29e44:	e8d4 3fef 	ldaex	r3, [r4]
   29e48:	e8c4 5fe2 	stlex	r2, r5, [r4]
   29e4c:	2a00      	cmp	r2, #0
   29e4e:	d1f9      	bne.n	29e44 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   29e50:	4620      	mov	r0, r4
}
   29e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   29e56:	2101      	movs	r1, #1
   29e58:	f7ff bf3c 	b.w	29cd4 <atomic_set_bit>

00029e5c <smp_c1>:
{
   29e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29e5e:	b089      	sub	sp, #36	; 0x24
   29e60:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   29e64:	4605      	mov	r5, r0
	p1[0] = ia->type;
   29e66:	7830      	ldrb	r0, [r6, #0]
{
   29e68:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   29e6a:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   29e6e:	7838      	ldrb	r0, [r7, #0]
   29e70:	f101 0c10 	add.w	ip, r1, #16
   29e74:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   29e78:	6810      	ldr	r0, [r2, #0]
   29e7a:	f8cd 0002 	str.w	r0, [sp, #2]
   29e7e:	8890      	ldrh	r0, [r2, #4]
   29e80:	7992      	ldrb	r2, [r2, #6]
   29e82:	f8ad 0006 	strh.w	r0, [sp, #6]
   29e86:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   29e8a:	681a      	ldr	r2, [r3, #0]
   29e8c:	4668      	mov	r0, sp
   29e8e:	f8cd 2009 	str.w	r2, [sp, #9]
   29e92:	889a      	ldrh	r2, [r3, #4]
   29e94:	799b      	ldrb	r3, [r3, #6]
   29e96:	f8ad 200d 	strh.w	r2, [sp, #13]
   29e9a:	4622      	mov	r2, r4
   29e9c:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   29ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
   29ea4:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   29ea8:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   29eaa:	ea83 030e 	eor.w	r3, r3, lr
   29eae:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   29eb2:	d1f5      	bne.n	29ea0 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   29eb4:	4622      	mov	r2, r4
   29eb6:	4621      	mov	r1, r4
   29eb8:	4628      	mov	r0, r5
   29eba:	f7fe fe66 	bl	28b8a <bt_encrypt_le>
	if (err) {
   29ebe:	4603      	mov	r3, r0
   29ec0:	bb28      	cbnz	r0, 29f0e <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   29ec2:	9307      	str	r3, [sp, #28]
   29ec4:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   29ec6:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   29eca:	f8d7 0001 	ldr.w	r0, [r7, #1]
   29ece:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   29ed2:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   29ed6:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   29ed8:	f8cd 2016 	str.w	r2, [sp, #22]
   29edc:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   29ee0:	f104 0010 	add.w	r0, r4, #16
   29ee4:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   29ee8:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   29eea:	f813 2b01 	ldrb.w	r2, [r3], #1
   29eee:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   29ef2:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   29ef4:	ea82 0206 	eor.w	r2, r2, r6
   29ef8:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   29efc:	d1f5      	bne.n	29eea <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   29efe:	4622      	mov	r2, r4
   29f00:	4621      	mov	r1, r4
   29f02:	4628      	mov	r0, r5
}
   29f04:	b009      	add	sp, #36	; 0x24
   29f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   29f0a:	f7fe be3e 	b.w	28b8a <bt_encrypt_le>
}
   29f0e:	b009      	add	sp, #36	; 0x24
   29f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029f12 <legacy_pairing_confirm>:
{
   29f12:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29f14:	1d07      	adds	r7, r0, #4
{
   29f16:	4604      	mov	r4, r0
   29f18:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29f1a:	210a      	movs	r1, #10
   29f1c:	4638      	mov	r0, r7
   29f1e:	f7ff fe73 	bl	29c08 <atomic_test_bit>
   29f22:	bb88      	cbnz	r0, 29f88 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   29f24:	2104      	movs	r1, #4
   29f26:	4620      	mov	r0, r4
   29f28:	f7ff fed4 	bl	29cd4 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   29f2c:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   29f2e:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   29f32:	f7ff fedf 	bl	29cf4 <smp_create_pdu.constprop.0>
	if (!buf) {
   29f36:	4605      	mov	r5, r0
   29f38:	b1c0      	cbz	r0, 29f6c <legacy_pairing_confirm+0x5a>
   29f3a:	2110      	movs	r1, #16
   29f3c:	300c      	adds	r0, #12
   29f3e:	f7f1 f96d 	bl	1b21c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   29f42:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   29f46:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   29f48:	9002      	str	r0, [sp, #8]
   29f4a:	9301      	str	r3, [sp, #4]
   29f4c:	9600      	str	r6, [sp, #0]
   29f4e:	f104 0310 	add.w	r3, r4, #16
   29f52:	f104 0209 	add.w	r2, r4, #9
   29f56:	f104 0127 	add.w	r1, r4, #39	; 0x27
   29f5a:	f104 0047 	add.w	r0, r4, #71	; 0x47
   29f5e:	f7ff ff7d 	bl	29e5c <smp_c1>
   29f62:	4606      	mov	r6, r0
   29f64:	b128      	cbz	r0, 29f72 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   29f66:	4628      	mov	r0, r5
   29f68:	f7f1 f836 	bl	1afd8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   29f6c:	2008      	movs	r0, #8
}
   29f6e:	b005      	add	sp, #20
   29f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   29f72:	4602      	mov	r2, r0
   29f74:	4629      	mov	r1, r5
   29f76:	4620      	mov	r0, r4
   29f78:	f7ff fe81 	bl	29c7e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29f7c:	4631      	mov	r1, r6
   29f7e:	4638      	mov	r0, r7
   29f80:	f7ff fe69 	bl	29c56 <atomic_clear_bit>
	return 0;
   29f84:	2000      	movs	r0, #0
   29f86:	e7f2      	b.n	29f6e <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29f88:	2100      	movs	r1, #0
   29f8a:	4638      	mov	r0, r7
   29f8c:	f7ff fea2 	bl	29cd4 <atomic_set_bit>
	return 0;
   29f90:	e7f8      	b.n	29f84 <legacy_pairing_confirm+0x72>

00029f92 <bt_smp_request_ltk>:
{
   29f92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29f96:	9f09      	ldr	r7, [sp, #36]	; 0x24
   29f98:	4604      	mov	r4, r0
   29f9a:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   29f9e:	f7ff fe8e 	bl	29cbe <smp_chan_get>
	if (!smp) {
   29fa2:	4605      	mov	r5, r0
   29fa4:	2800      	cmp	r0, #0
   29fa6:	d07c      	beq.n	2a0a2 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   29fa8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29fac:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   29fae:	f1b8 0f00 	cmp.w	r8, #0
   29fb2:	d128      	bne.n	2a006 <bt_smp_request_ltk+0x74>
   29fb4:	e9dd 3200 	ldrd	r3, r2, [sp]
   29fb8:	4313      	orrs	r3, r2
   29fba:	d124      	bne.n	2a006 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29fbc:	2103      	movs	r1, #3
   29fbe:	4630      	mov	r0, r6
   29fc0:	f7ff fe22 	bl	29c08 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   29fc4:	b1f8      	cbz	r0, 2a006 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   29fc6:	2101      	movs	r1, #1
   29fc8:	4630      	mov	r0, r6
   29fca:	f7ff fe1d 	bl	29c08 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29fce:	b1d0      	cbz	r0, 2a006 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   29fd0:	7d2c      	ldrb	r4, [r5, #20]
   29fd2:	7b6b      	ldrb	r3, [r5, #13]
   29fd4:	f105 0147 	add.w	r1, r5, #71	; 0x47
   29fd8:	429c      	cmp	r4, r3
   29fda:	bf28      	it	cs
   29fdc:	461c      	movcs	r4, r3
   29fde:	4622      	mov	r2, r4
   29fe0:	4638      	mov	r0, r7
   29fe2:	f001 feeb 	bl	2bdbc <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   29fe6:	2c0f      	cmp	r4, #15
   29fe8:	d805      	bhi.n	29ff6 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   29fea:	4641      	mov	r1, r8
   29fec:	f1c4 0210 	rsb	r2, r4, #16
   29ff0:	1938      	adds	r0, r7, r4
   29ff2:	f001 ff1d 	bl	2be30 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   29ff6:	4630      	mov	r0, r6
   29ff8:	2101      	movs	r1, #1
   29ffa:	f7ff fe6b 	bl	29cd4 <atomic_set_bit>
		return true;
   29ffe:	2001      	movs	r0, #1
}
   2a000:	b002      	add	sp, #8
   2a002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2a006:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   2a00a:	b983      	cbnz	r3, 2a02e <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2a00c:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2a010:	4642      	mov	r2, r8
   2a012:	2020      	movs	r0, #32
   2a014:	7a21      	ldrb	r1, [r4, #8]
   2a016:	f7f0 fa91 	bl	1a53c <bt_keys_find>
   2a01a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   2a01e:	b930      	cbnz	r0, 2a02e <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2a020:	4642      	mov	r2, r8
   2a022:	2001      	movs	r0, #1
   2a024:	7a21      	ldrb	r1, [r4, #8]
   2a026:	f7f0 fa89 	bl	1a53c <bt_keys_find>
   2a02a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2a02e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a032:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2a036:	f1b8 0f00 	cmp.w	r8, #0
   2a03a:	d10c      	bne.n	2a056 <bt_smp_request_ltk+0xc4>
   2a03c:	e9dd 3200 	ldrd	r3, r2, [sp]
   2a040:	4313      	orrs	r3, r2
   2a042:	d108      	bne.n	2a056 <bt_smp_request_ltk+0xc4>
   2a044:	b300      	cbz	r0, 2a088 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a046:	89c3      	ldrh	r3, [r0, #14]
   2a048:	069a      	lsls	r2, r3, #26
   2a04a:	d505      	bpl.n	2a058 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2a04c:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a04e:	f100 011a 	add.w	r1, r0, #26
   2a052:	4622      	mov	r2, r4
   2a054:	e7c4      	b.n	29fe0 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a056:	b1b8      	cbz	r0, 2a088 <bt_smp_request_ltk+0xf6>
   2a058:	89c3      	ldrh	r3, [r0, #14]
   2a05a:	07db      	lsls	r3, r3, #31
   2a05c:	d514      	bpl.n	2a088 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a05e:	2208      	movs	r2, #8
   2a060:	4669      	mov	r1, sp
   2a062:	3040      	adds	r0, #64	; 0x40
   2a064:	f001 fe9a 	bl	2bd9c <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a068:	b970      	cbnz	r0, 2a088 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2a06a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   2a06e:	2202      	movs	r2, #2
   2a070:	a908      	add	r1, sp, #32
   2a072:	3048      	adds	r0, #72	; 0x48
   2a074:	f001 fe92 	bl	2bd9c <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a078:	4680      	mov	r8, r0
   2a07a:	b928      	cbnz	r0, 2a088 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2a07c:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   2a080:	7b0c      	ldrb	r4, [r1, #12]
   2a082:	314a      	adds	r1, #74	; 0x4a
   2a084:	4622      	mov	r2, r4
   2a086:	e7ab      	b.n	29fe0 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a088:	210f      	movs	r1, #15
   2a08a:	4630      	mov	r0, r6
   2a08c:	f7ff fdbc 	bl	29c08 <atomic_test_bit>
   2a090:	b120      	cbz	r0, 2a09c <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2a092:	2202      	movs	r2, #2
   2a094:	2106      	movs	r1, #6
   2a096:	4620      	mov	r0, r4
   2a098:	f7eb f9b6 	bl	15408 <bt_conn_security_changed>
	smp_reset(smp);
   2a09c:	4628      	mov	r0, r5
   2a09e:	f7ff fec2 	bl	29e26 <smp_reset>
		return false;
   2a0a2:	2000      	movs	r0, #0
   2a0a4:	e7ac      	b.n	2a000 <bt_smp_request_ltk+0x6e>

0002a0a6 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2a0a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a0aa:	4770      	bx	lr

0002a0ac <bt_smp_dhkey_ready>:
{
   2a0ac:	b570      	push	{r4, r5, r6, lr}
   2a0ae:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2a0b0:	2008      	movs	r0, #8
   2a0b2:	f7ee fc9f 	bl	189f4 <smp_find>
	if (smp) {
   2a0b6:	4605      	mov	r5, r0
   2a0b8:	b1e0      	cbz	r0, 2a0f4 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2a0ba:	1d06      	adds	r6, r0, #4
   2a0bc:	2108      	movs	r1, #8
   2a0be:	4630      	mov	r0, r6
   2a0c0:	f7ff fdc9 	bl	29c56 <atomic_clear_bit>
	if (!dhkey) {
   2a0c4:	b3bc      	cbz	r4, 2a136 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2a0c6:	2107      	movs	r1, #7
   2a0c8:	f7ff fdc5 	bl	29c56 <atomic_clear_bit>
   2a0cc:	4623      	mov	r3, r4
   2a0ce:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2a0d2:	f104 0120 	add.w	r1, r4, #32
   2a0d6:	f853 0b04 	ldr.w	r0, [r3], #4
   2a0da:	428b      	cmp	r3, r1
   2a0dc:	f842 0b04 	str.w	r0, [r2], #4
   2a0e0:	d1f9      	bne.n	2a0d6 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a0e2:	210a      	movs	r1, #10
   2a0e4:	4630      	mov	r0, r6
   2a0e6:	f7ff fd8f 	bl	29c08 <atomic_test_bit>
   2a0ea:	b170      	cbz	r0, 2a10a <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a0ec:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a0ee:	4630      	mov	r0, r6
   2a0f0:	f7ff fdf0 	bl	29cd4 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2a0f4:	2007      	movs	r0, #7
   2a0f6:	f7ee fc7d 	bl	189f4 <smp_find>
		if (smp) {
   2a0fa:	4604      	mov	r4, r0
   2a0fc:	b1e8      	cbz	r0, 2a13a <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2a0fe:	f7ee fd4b 	bl	18b98 <smp_dhkey_generate>
			if (err) {
   2a102:	4601      	mov	r1, r0
   2a104:	b1c8      	cbz	r0, 2a13a <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2a106:	4620      	mov	r0, r4
   2a108:	e012      	b.n	2a130 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a10a:	2110      	movs	r1, #16
   2a10c:	4630      	mov	r0, r6
   2a10e:	f7ff fd7b 	bl	29c08 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a112:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a114:	2800      	cmp	r0, #0
   2a116:	d1ea      	bne.n	2a0ee <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2a118:	4630      	mov	r0, r6
   2a11a:	f7ff fd75 	bl	29c08 <atomic_test_bit>
   2a11e:	2800      	cmp	r0, #0
   2a120:	d0e8      	beq.n	2a0f4 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2a122:	4628      	mov	r0, r5
   2a124:	f7ef f91e 	bl	19364 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2a128:	4601      	mov	r1, r0
   2a12a:	2800      	cmp	r0, #0
   2a12c:	d0e2      	beq.n	2a0f4 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2a12e:	4628      	mov	r0, r5
   2a130:	f7ef fcb4 	bl	19a9c <smp_error>
   2a134:	e7de      	b.n	2a0f4 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2a136:	210b      	movs	r1, #11
   2a138:	e7f9      	b.n	2a12e <bt_smp_dhkey_ready+0x82>
}
   2a13a:	bd70      	pop	{r4, r5, r6, pc}

0002a13c <bt_smp_disconnected>:
{
   2a13c:	b570      	push	{r4, r5, r6, lr}
   2a13e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2a140:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2a144:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a148:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2a14a:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   2a14e:	f7f8 fb45 	bl	227dc <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a152:	2103      	movs	r1, #3
   2a154:	4620      	mov	r0, r4
   2a156:	f7ff fd57 	bl	29c08 <atomic_test_bit>
   2a15a:	b1a0      	cbz	r0, 2a186 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2a15c:	2108      	movs	r1, #8
   2a15e:	4630      	mov	r0, r6
   2a160:	f7ef fc18 	bl	19994 <smp_pairing_complete>
	if (keys) {
   2a164:	b13d      	cbz	r5, 2a176 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2a166:	89eb      	ldrh	r3, [r5, #14]
   2a168:	b113      	cbz	r3, 2a170 <bt_smp_disconnected+0x34>
   2a16a:	7b6b      	ldrb	r3, [r5, #13]
   2a16c:	079b      	lsls	r3, r3, #30
   2a16e:	d502      	bpl.n	2a176 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2a170:	4628      	mov	r0, r5
   2a172:	f7f0 fac9 	bl	1a708 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2a176:	4630      	mov	r0, r6
}
   2a178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a17c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2a180:	2100      	movs	r1, #0
   2a182:	f001 be55 	b.w	2be30 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a186:	2101      	movs	r1, #1
   2a188:	4620      	mov	r0, r4
   2a18a:	f7ff fd3d 	bl	29c08 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a18e:	2800      	cmp	r0, #0
   2a190:	d1e4      	bne.n	2a15c <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a192:	210f      	movs	r1, #15
   2a194:	4620      	mov	r0, r4
   2a196:	f7ff fd37 	bl	29c08 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a19a:	2800      	cmp	r0, #0
   2a19c:	d1de      	bne.n	2a15c <bt_smp_disconnected+0x20>
   2a19e:	e7e1      	b.n	2a164 <bt_smp_disconnected+0x28>

0002a1a0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2a1a0:	b510      	push	{r4, lr}
   2a1a2:	1e43      	subs	r3, r0, #1
   2a1a4:	f100 0210 	add.w	r2, r0, #16
   2a1a8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2a1aa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a1ae:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2a1b2:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a1b4:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2a1b6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2a1b8:	d1f7      	bne.n	2a1aa <sys_mem_swap.constprop.0+0xa>
	}
}
   2a1ba:	bd10      	pop	{r4, pc}

0002a1bc <bt_crypto_aes_cmac>:
{
   2a1bc:	b570      	push	{r4, r5, r6, lr}
   2a1be:	b0c2      	sub	sp, #264	; 0x108
   2a1c0:	460d      	mov	r5, r1
   2a1c2:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a1c4:	4601      	mov	r1, r0
   2a1c6:	aa16      	add	r2, sp, #88	; 0x58
   2a1c8:	4668      	mov	r0, sp
{
   2a1ca:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a1cc:	f7fd fe20 	bl	27e10 <tc_cmac_setup>
   2a1d0:	b918      	cbnz	r0, 2a1da <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2a1d2:	f06f 0004 	mvn.w	r0, #4
}
   2a1d6:	b042      	add	sp, #264	; 0x108
   2a1d8:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2a1da:	4632      	mov	r2, r6
   2a1dc:	4629      	mov	r1, r5
   2a1de:	4668      	mov	r0, sp
   2a1e0:	f7fd fe41 	bl	27e66 <tc_cmac_update>
   2a1e4:	2800      	cmp	r0, #0
   2a1e6:	d0f4      	beq.n	2a1d2 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2a1e8:	4669      	mov	r1, sp
   2a1ea:	4620      	mov	r0, r4
   2a1ec:	f7fd fea5 	bl	27f3a <tc_cmac_final>
   2a1f0:	2800      	cmp	r0, #0
   2a1f2:	d0ee      	beq.n	2a1d2 <bt_crypto_aes_cmac+0x16>
	return 0;
   2a1f4:	2000      	movs	r0, #0
   2a1f6:	e7ee      	b.n	2a1d6 <bt_crypto_aes_cmac+0x1a>

0002a1f8 <bt_crypto_f4>:
{
   2a1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a1fa:	460e      	mov	r6, r1
   2a1fc:	4614      	mov	r4, r2
   2a1fe:	461d      	mov	r5, r3
   2a200:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2a202:	4601      	mov	r1, r0
   2a204:	2220      	movs	r2, #32
   2a206:	a805      	add	r0, sp, #20
{
   2a208:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2a20a:	f7f0 fbdb 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2a20e:	2220      	movs	r2, #32
   2a210:	4631      	mov	r1, r6
   2a212:	a80d      	add	r0, sp, #52	; 0x34
   2a214:	f7f0 fbd6 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2a218:	4621      	mov	r1, r4
   2a21a:	2210      	movs	r2, #16
   2a21c:	a801      	add	r0, sp, #4
	m[64] = z;
   2a21e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2a222:	f7f0 fbcf 	bl	1a9c4 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2a226:	463b      	mov	r3, r7
   2a228:	2241      	movs	r2, #65	; 0x41
   2a22a:	a905      	add	r1, sp, #20
   2a22c:	a801      	add	r0, sp, #4
   2a22e:	f7ff ffc5 	bl	2a1bc <bt_crypto_aes_cmac>
	if (err) {
   2a232:	4604      	mov	r4, r0
   2a234:	b910      	cbnz	r0, 2a23c <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2a236:	4638      	mov	r0, r7
   2a238:	f7ff ffb2 	bl	2a1a0 <sys_mem_swap.constprop.0>
}
   2a23c:	4620      	mov	r0, r4
   2a23e:	b017      	add	sp, #92	; 0x5c
   2a240:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a242 <bt_crypto_f6>:
{
   2a242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a246:	4616      	mov	r6, r2
   2a248:	461d      	mov	r5, r3
   2a24a:	b097      	sub	sp, #92	; 0x5c
   2a24c:	4604      	mov	r4, r0
   2a24e:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2a252:	2210      	movs	r2, #16
   2a254:	a805      	add	r0, sp, #20
{
   2a256:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2a258:	f7f0 fbb4 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2a25c:	2210      	movs	r2, #16
   2a25e:	4631      	mov	r1, r6
   2a260:	a809      	add	r0, sp, #36	; 0x24
   2a262:	f7f0 fbaf 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2a266:	2210      	movs	r2, #16
   2a268:	4629      	mov	r1, r5
   2a26a:	a80d      	add	r0, sp, #52	; 0x34
   2a26c:	f7f0 fbaa 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2a270:	2203      	movs	r2, #3
   2a272:	991e      	ldr	r1, [sp, #120]	; 0x78
   2a274:	a811      	add	r0, sp, #68	; 0x44
   2a276:	f7f0 fba5 	bl	1a9c4 <sys_memcpy_swap>
	m[51] = a1->type;
   2a27a:	4649      	mov	r1, r9
   2a27c:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2a280:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2a284:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2a288:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a28a:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2a28c:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a28e:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2a290:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a294:	f7f0 fb96 	bl	1a9c4 <sys_memcpy_swap>
	m[58] = a2->type;
   2a298:	4641      	mov	r1, r8
   2a29a:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a29e:	2206      	movs	r2, #6
	m[58] = a2->type;
   2a2a0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2a2a4:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a2a8:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2a2ac:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2a2b0:	888b      	ldrh	r3, [r1, #4]
   2a2b2:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a2b6:	f7f0 fb85 	bl	1a9c4 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2a2ba:	4621      	mov	r1, r4
   2a2bc:	2210      	movs	r2, #16
   2a2be:	a801      	add	r0, sp, #4
   2a2c0:	f7f0 fb80 	bl	1a9c4 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2a2c4:	463b      	mov	r3, r7
   2a2c6:	2241      	movs	r2, #65	; 0x41
   2a2c8:	a905      	add	r1, sp, #20
   2a2ca:	a801      	add	r0, sp, #4
   2a2cc:	f7ff ff76 	bl	2a1bc <bt_crypto_aes_cmac>
	if (err) {
   2a2d0:	4604      	mov	r4, r0
   2a2d2:	b910      	cbnz	r0, 2a2da <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2a2d4:	4638      	mov	r0, r7
   2a2d6:	f7ff ff63 	bl	2a1a0 <sys_mem_swap.constprop.0>
}
   2a2da:	4620      	mov	r0, r4
   2a2dc:	b017      	add	sp, #92	; 0x5c
   2a2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002a2e2 <fixed_data_unref>:
}
   2a2e2:	4770      	bx	lr

0002a2e4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2a2e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2a2e6:	6849      	ldr	r1, [r1, #4]
   2a2e8:	6809      	ldr	r1, [r1, #0]
   2a2ea:	f7f0 bc6d 	b.w	1abc8 <net_buf_alloc_len>

0002a2ee <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2a2ee:	f7f7 bc65 	b.w	21bbc <z_impl_k_queue_get>

0002a2f2 <net_buf_simple_push_u8>:
{
   2a2f2:	b510      	push	{r4, lr}
   2a2f4:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2a2f6:	2101      	movs	r1, #1
   2a2f8:	f7f0 ff34 	bl	1b164 <net_buf_simple_push>
	*data = val;
   2a2fc:	7004      	strb	r4, [r0, #0]
}
   2a2fe:	bd10      	pop	{r4, pc}

0002a300 <net_buf_simple_pull_le16>:
{
   2a300:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a302:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a304:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a306:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a308:	f7f0 ff4c 	bl	1b1a4 <net_buf_simple_pull>
}
   2a30c:	4620      	mov	r0, r4
   2a30e:	bd10      	pop	{r4, pc}

0002a310 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2a310:	6802      	ldr	r2, [r0, #0]
   2a312:	6880      	ldr	r0, [r0, #8]
}
   2a314:	1a10      	subs	r0, r2, r0
   2a316:	4770      	bx	lr

0002a318 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2a318:	8883      	ldrh	r3, [r0, #4]
   2a31a:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2a31c:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2a31e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2a320:	6803      	ldr	r3, [r0, #0]
   2a322:	1a5b      	subs	r3, r3, r1
}
   2a324:	1ad0      	subs	r0, r2, r3
   2a326:	4770      	bx	lr

0002a328 <net_buf_simple_add_mem>:
{
   2a328:	b538      	push	{r3, r4, r5, lr}
   2a32a:	460d      	mov	r5, r1
   2a32c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2a32e:	4611      	mov	r1, r2
   2a330:	f7f0 ff74 	bl	1b21c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a334:	4622      	mov	r2, r4
   2a336:	4629      	mov	r1, r5
}
   2a338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a33c:	f001 bd3e 	b.w	2bdbc <memcpy>

0002a340 <net_buf_simple_add_u8>:
{
   2a340:	b510      	push	{r4, lr}
   2a342:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2a344:	2101      	movs	r1, #1
   2a346:	f7f0 ff69 	bl	1b21c <net_buf_simple_add>
	*u8 = val;
   2a34a:	7004      	strb	r4, [r0, #0]
}
   2a34c:	bd10      	pop	{r4, pc}

0002a34e <adc_context_on_timer_expired>:
{
   2a34e:	b410      	push	{r4}
   2a350:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2a352:	3808      	subs	r0, #8
   2a354:	e8d0 2fef 	ldaex	r2, [r0]
   2a358:	1c51      	adds	r1, r2, #1
   2a35a:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2a35e:	2c00      	cmp	r4, #0
   2a360:	d1f8      	bne.n	2a354 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2a362:	b912      	cbnz	r2, 2a36a <adc_context_on_timer_expired+0x1c>
}
   2a364:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2a366:	f7f0 bf9b 	b.w	1b2a0 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2a36a:	f06f 020f 	mvn.w	r2, #15
}
   2a36e:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2a370:	669a      	str	r2, [r3, #104]	; 0x68
}
   2a372:	4770      	bx	lr

0002a374 <set_on_state>:
	__asm__ volatile(
   2a374:	f04f 0320 	mov.w	r3, #32
   2a378:	f3ef 8211 	mrs	r2, BASEPRI
   2a37c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a380:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2a384:	6803      	ldr	r3, [r0, #0]
   2a386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a38a:	f043 0302 	orr.w	r3, r3, #2
   2a38e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2a390:	f382 8811 	msr	BASEPRI, r2
   2a394:	f3bf 8f6f 	isb	sy
}
   2a398:	4770      	bx	lr

0002a39a <async_start>:
{
   2a39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a39c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2a39e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2a3a0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2a3a2:	f04f 0520 	mov.w	r5, #32
   2a3a6:	f3ef 8611 	mrs	r6, BASEPRI
   2a3aa:	f385 8812 	msr	BASEPRI_MAX, r5
   2a3ae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a3b2:	250c      	movs	r5, #12
   2a3b4:	4369      	muls	r1, r5
   2a3b6:	440c      	add	r4, r1
   2a3b8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2a3bc:	f005 0c07 	and.w	ip, r5, #7
   2a3c0:	f1bc 0f01 	cmp.w	ip, #1
   2a3c4:	d10c      	bne.n	2a3e0 <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2a3c6:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   2a3ca:	f386 8811 	msr	BASEPRI, r6
   2a3ce:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2a3d2:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   2a3d6:	6843      	ldr	r3, [r0, #4]
   2a3d8:	585b      	ldr	r3, [r3, r1]
   2a3da:	4798      	blx	r3
	return 0;
   2a3dc:	2000      	movs	r0, #0
}
   2a3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2a3e0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2a3e4:	42af      	cmp	r7, r5
   2a3e6:	f386 8811 	msr	BASEPRI, r6
   2a3ea:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2a3ee:	bf0c      	ite	eq
   2a3f0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2a3f4:	f04f 30ff 	movne.w	r0, #4294967295
   2a3f8:	e7f1      	b.n	2a3de <async_start+0x44>

0002a3fa <api_start>:
{
   2a3fa:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2a3fc:	2480      	movs	r4, #128	; 0x80
   2a3fe:	9400      	str	r4, [sp, #0]
   2a400:	f7ff ffcb 	bl	2a39a <async_start>
}
   2a404:	b002      	add	sp, #8
   2a406:	bd10      	pop	{r4, pc}

0002a408 <onoff_started_callback>:
	return &data->mgr[type];
   2a408:	6900      	ldr	r0, [r0, #16]
   2a40a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2a40c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2a410:	2100      	movs	r1, #0
   2a412:	4710      	bx	r2

0002a414 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2a414:	2003      	movs	r0, #3
   2a416:	f7f4 ba6b 	b.w	1e8f0 <nrfx_clock_start>

0002a41a <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2a41a:	2002      	movs	r0, #2
   2a41c:	f7f4 ba68 	b.w	1e8f0 <nrfx_clock_start>

0002a420 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2a420:	2000      	movs	r0, #0
   2a422:	f7f4 ba65 	b.w	1e8f0 <nrfx_clock_start>

0002a426 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2a426:	2003      	movs	r0, #3
   2a428:	f7f4 bae0 	b.w	1e9ec <nrfx_clock_stop>

0002a42c <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2a42c:	2002      	movs	r0, #2
   2a42e:	f7f4 badd 	b.w	1e9ec <nrfx_clock_stop>

0002a432 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2a432:	2000      	movs	r0, #0
   2a434:	f7f4 bada 	b.w	1e9ec <nrfx_clock_stop>

0002a438 <blocking_start_callback>:
{
   2a438:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2a43a:	f7f7 bc29 	b.w	21c90 <z_impl_k_sem_give>

0002a43e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2a43e:	2280      	movs	r2, #128	; 0x80
   2a440:	f7f1 b996 	b.w	1b770 <stop>

0002a444 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a444:	6843      	ldr	r3, [r0, #4]
}
   2a446:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a448:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2a44a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2a44c:	600b      	str	r3, [r1, #0]
}
   2a44e:	4770      	bx	lr

0002a450 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a450:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2a452:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a456:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2a458:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2a45c:	6098      	str	r0, [r3, #8]
}
   2a45e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a460:	60d9      	str	r1, [r3, #12]
   2a462:	4770      	bx	lr

0002a464 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a464:	6843      	ldr	r3, [r0, #4]
}
   2a466:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a468:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2a46a:	6099      	str	r1, [r3, #8]
}
   2a46c:	4770      	bx	lr

0002a46e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a46e:	6843      	ldr	r3, [r0, #4]
}
   2a470:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a472:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2a474:	60d9      	str	r1, [r3, #12]
}
   2a476:	4770      	bx	lr

0002a478 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a478:	6843      	ldr	r3, [r0, #4]
   2a47a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a47c:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2a47e:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2a482:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2a484:	6090      	str	r0, [r2, #8]
}
   2a486:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a488:	60d3      	str	r3, [r2, #12]
   2a48a:	4770      	bx	lr

0002a48c <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2a48c:	2200      	movs	r2, #0
   2a48e:	2101      	movs	r1, #1
   2a490:	200a      	movs	r0, #10
   2a492:	f7e6 bb55 	b.w	10b40 <z_arm_irq_priority_set>

0002a496 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2a496:	b510      	push	{r4, lr}
	while (*count) {
   2a498:	680b      	ldr	r3, [r1, #0]
   2a49a:	b913      	cbnz	r3, 2a4a2 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2a49c:	4618      	mov	r0, r3
	*buf_len = 0;
   2a49e:	6013      	str	r3, [r2, #0]
	return NULL;
   2a4a0:	e005      	b.n	2a4ae <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2a4a2:	6803      	ldr	r3, [r0, #0]
   2a4a4:	685c      	ldr	r4, [r3, #4]
   2a4a6:	b11c      	cbz	r4, 2a4b0 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2a4a8:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2a4aa:	6803      	ldr	r3, [r0, #0]
   2a4ac:	6818      	ldr	r0, [r3, #0]
}
   2a4ae:	bd10      	pop	{r4, pc}
		++(*current);
   2a4b0:	3308      	adds	r3, #8
   2a4b2:	6003      	str	r3, [r0, #0]
		--(*count);
   2a4b4:	680b      	ldr	r3, [r1, #0]
   2a4b6:	3b01      	subs	r3, #1
   2a4b8:	600b      	str	r3, [r1, #0]
   2a4ba:	e7ed      	b.n	2a498 <spi_context_get_next_buf.constprop.0+0x2>

0002a4bc <z_log_msg_static_create.constprop.0>:
   2a4bc:	2300      	movs	r3, #0
   2a4be:	f7e4 ba49 	b.w	e954 <z_impl_z_log_msg_static_create>

0002a4c2 <_spi_context_cs_control>:
{
   2a4c2:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2a4c4:	6803      	ldr	r3, [r0, #0]
{
   2a4c6:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2a4c8:	b1e3      	cbz	r3, 2a504 <_spi_context_cs_control+0x42>
   2a4ca:	6898      	ldr	r0, [r3, #8]
   2a4cc:	b1d0      	cbz	r0, 2a504 <_spi_context_cs_control+0x42>
   2a4ce:	6805      	ldr	r5, [r0, #0]
   2a4d0:	b1c5      	cbz	r5, 2a504 <_spi_context_cs_control+0x42>
		if (on) {
   2a4d2:	b149      	cbz	r1, 2a4e8 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2a4d4:	2101      	movs	r1, #1
   2a4d6:	f7f1 fd35 	bl	1bf44 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2a4da:	6823      	ldr	r3, [r4, #0]
   2a4dc:	689b      	ldr	r3, [r3, #8]
   2a4de:	6898      	ldr	r0, [r3, #8]
}
   2a4e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2a4e4:	f001 bb53 	b.w	2bb8e <z_impl_k_busy_wait>
			if (!force_off &&
   2a4e8:	b912      	cbnz	r2, 2a4f0 <_spi_context_cs_control+0x2e>
   2a4ea:	889b      	ldrh	r3, [r3, #4]
   2a4ec:	04db      	lsls	r3, r3, #19
   2a4ee:	d409      	bmi.n	2a504 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2a4f0:	6880      	ldr	r0, [r0, #8]
   2a4f2:	f001 fb4c 	bl	2bb8e <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2a4f6:	6823      	ldr	r3, [r4, #0]
   2a4f8:	2100      	movs	r1, #0
   2a4fa:	6898      	ldr	r0, [r3, #8]
}
   2a4fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2a500:	f7f1 bd20 	b.w	1bf44 <gpio_pin_set_dt.isra.0>
}
   2a504:	bd38      	pop	{r3, r4, r5, pc}

0002a506 <spi_context_unlock_unconditionally>:
{
   2a506:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2a508:	2201      	movs	r2, #1
   2a50a:	2100      	movs	r1, #0
{
   2a50c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2a50e:	f7ff ffd8 	bl	2a4c2 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2a512:	69a3      	ldr	r3, [r4, #24]
   2a514:	b933      	cbnz	r3, 2a524 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2a516:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2a518:	f104 0010 	add.w	r0, r4, #16
}
   2a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a520:	f7f7 bbb6 	b.w	21c90 <z_impl_k_sem_give>
   2a524:	bd10      	pop	{r4, pc}

0002a526 <spi_nrfx_release>:
{
   2a526:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2a528:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2a52a:	6803      	ldr	r3, [r0, #0]
   2a52c:	428b      	cmp	r3, r1
   2a52e:	d106      	bne.n	2a53e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2a530:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2a534:	b934      	cbnz	r4, 2a544 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2a536:	f7ff ffe6 	bl	2a506 <spi_context_unlock_unconditionally>
	return 0;
   2a53a:	4620      	mov	r0, r4
}
   2a53c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2a53e:	f06f 0015 	mvn.w	r0, #21
   2a542:	e7fb      	b.n	2a53c <spi_nrfx_release+0x16>
		return -EBUSY;
   2a544:	f06f 000f 	mvn.w	r0, #15
   2a548:	e7f8      	b.n	2a53c <spi_nrfx_release+0x16>

0002a54a <k_sem_give>:
   2a54a:	f7f7 bba1 	b.w	21c90 <z_impl_k_sem_give>

0002a54e <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2a54e:	b918      	cbnz	r0, 2a558 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2a550:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2a554:	f7ff bff9 	b.w	2a54a <k_sem_give>
}
   2a558:	4770      	bx	lr

0002a55a <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2a55a:	f04f 32ff 	mov.w	r2, #4294967295
   2a55e:	f04f 33ff 	mov.w	r3, #4294967295
   2a562:	3018      	adds	r0, #24
   2a564:	f7f7 bbd8 	b.w	21d18 <z_impl_k_sem_take>

0002a568 <qspi_trans_lock.isra.0>:
   2a568:	f04f 32ff 	mov.w	r2, #4294967295
   2a56c:	f04f 33ff 	mov.w	r3, #4294967295
   2a570:	f7f7 bbd2 	b.w	21d18 <z_impl_k_sem_take>

0002a574 <qspi_nor_write_protection_set>:
{
   2a574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2a576:	2200      	movs	r2, #0
   2a578:	4291      	cmp	r1, r2
   2a57a:	bf0c      	ite	eq
   2a57c:	2306      	moveq	r3, #6
   2a57e:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2a580:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2a582:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2a586:	9203      	str	r2, [sp, #12]
   2a588:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2a58c:	f7f2 f88a 	bl	1c6a4 <qspi_send_cmd>
		ret = -EIO;
   2a590:	2800      	cmp	r0, #0
}
   2a592:	bf18      	it	ne
   2a594:	f06f 0004 	mvnne.w	r0, #4
   2a598:	b005      	add	sp, #20
   2a59a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a59e <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2a59e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2a5a0:	23ff      	movs	r3, #255	; 0xff
   2a5a2:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2a5a6:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2a5aa:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2a5ac:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2a5ae:	2301      	movs	r3, #1
   2a5b0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2a5b4:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2a5b6:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2a5b8:	f88d 300c 	strb.w	r3, [sp, #12]
   2a5bc:	ab01      	add	r3, sp, #4
   2a5be:	9204      	str	r2, [sp, #16]
   2a5c0:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2a5c2:	f7f2 f86f 	bl	1c6a4 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2a5c6:	2800      	cmp	r0, #0
   2a5c8:	bfa8      	it	ge
   2a5ca:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2a5ce:	b007      	add	sp, #28
   2a5d0:	f85d fb04 	ldr.w	pc, [sp], #4

0002a5d4 <is_regular_addr_valid>:
{
   2a5d4:	b538      	push	{r3, r4, r5, lr}
   2a5d6:	4605      	mov	r5, r0
   2a5d8:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2a5da:	f000 fc6a 	bl	2aeb2 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2a5de:	2d00      	cmp	r5, #0
   2a5e0:	db07      	blt.n	2a5f2 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2a5e2:	42a8      	cmp	r0, r5
   2a5e4:	d905      	bls.n	2a5f2 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2a5e6:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2a5e8:	4284      	cmp	r4, r0
   2a5ea:	bf8c      	ite	hi
   2a5ec:	2000      	movhi	r0, #0
   2a5ee:	2001      	movls	r0, #1
}
   2a5f0:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2a5f2:	2000      	movs	r0, #0
   2a5f4:	e7fc      	b.n	2a5f0 <is_regular_addr_valid+0x1c>

0002a5f6 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2a5f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a5f8:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2a5fa:	2300      	movs	r3, #0
{
   2a5fc:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2a5fe:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2a600:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2a602:	60a3      	str	r3, [r4, #8]
{
   2a604:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2a606:	6913      	ldr	r3, [r2, #16]
   2a608:	4669      	mov	r1, sp
   2a60a:	aa01      	add	r2, sp, #4
   2a60c:	4798      	blx	r3

	while (layout_size--) {
   2a60e:	9b01      	ldr	r3, [sp, #4]
   2a610:	1e5a      	subs	r2, r3, #1
   2a612:	9201      	str	r2, [sp, #4]
   2a614:	b91b      	cbnz	r3, 2a61e <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2a616:	f06f 0015 	mvn.w	r0, #21
}
   2a61a:	b003      	add	sp, #12
   2a61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2a61e:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2a620:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2a622:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2a624:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2a626:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2a628:	b985      	cbnz	r5, 2a64c <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2a62a:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2a62c:	f8d0 c000 	ldr.w	ip, [r0]
   2a630:	4563      	cmp	r3, ip
   2a632:	bf28      	it	cs
   2a634:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2a636:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2a63a:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2a63c:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2a63e:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2a640:	6802      	ldr	r2, [r0, #0]
   2a642:	429a      	cmp	r2, r3
   2a644:	d806      	bhi.n	2a654 <flash_get_page_info+0x5e>
		layout++;
   2a646:	3008      	adds	r0, #8
   2a648:	9000      	str	r0, [sp, #0]
   2a64a:	e7e0      	b.n	2a60e <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2a64c:	1a6b      	subs	r3, r5, r1
   2a64e:	fbb3 f3f7 	udiv	r3, r3, r7
   2a652:	e7eb      	b.n	2a62c <flash_get_page_info+0x36>
			return 0;
   2a654:	2000      	movs	r0, #0
   2a656:	e7e0      	b.n	2a61a <flash_get_page_info+0x24>

0002a658 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2a658:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2a65a:	2200      	movs	r2, #0
   2a65c:	f7ff bfcb 	b.w	2a5f6 <flash_get_page_info>

0002a660 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2a660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2a664:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2a666:	6883      	ldr	r3, [r0, #8]
{
   2a668:	b086      	sub	sp, #24
   2a66a:	4688      	mov	r8, r1
   2a66c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2a66e:	691b      	ldr	r3, [r3, #16]
   2a670:	aa02      	add	r2, sp, #8
   2a672:	a901      	add	r1, sp, #4
   2a674:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2a676:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2a678:	4625      	mov	r5, r4
   2a67a:	9b02      	ldr	r3, [sp, #8]
   2a67c:	42ab      	cmp	r3, r5
   2a67e:	d802      	bhi.n	2a686 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2a680:	b006      	add	sp, #24
   2a682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2a686:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2a688:	9f01      	ldr	r7, [sp, #4]
   2a68a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   2a68e:	687b      	ldr	r3, [r7, #4]
   2a690:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2a692:	683a      	ldr	r2, [r7, #0]
   2a694:	eb0a 0306 	add.w	r3, sl, r6
   2a698:	42b2      	cmp	r2, r6
   2a69a:	d802      	bhi.n	2a6a2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2a69c:	469a      	mov	sl, r3
   2a69e:	3501      	adds	r5, #1
   2a6a0:	e7eb      	b.n	2a67a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2a6a2:	4649      	mov	r1, r9
			page_info.start_offset = off;
   2a6a4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2a6a6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2a6a8:	a803      	add	r0, sp, #12
   2a6aa:	47c0      	blx	r8
   2a6ac:	2800      	cmp	r0, #0
   2a6ae:	d0e7      	beq.n	2a680 <flash_page_foreach+0x20>
			off += page_info.size;
   2a6b0:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2a6b2:	3601      	adds	r6, #1
			off += page_info.size;
   2a6b4:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2a6b6:	e7ec      	b.n	2a692 <flash_page_foreach+0x32>

0002a6b8 <uarte_nrfx_config_get>:
{
   2a6b8:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2a6ba:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2a6bc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2a6c0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2a6c4:	2000      	movs	r0, #0
   2a6c6:	4770      	bx	lr

0002a6c8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2a6c8:	6843      	ldr	r3, [r0, #4]
   2a6ca:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2a6cc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2a6d0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2a6d4:	4770      	bx	lr

0002a6d6 <tx_start>:
{
   2a6d6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2a6d8:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2a6da:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2a6dc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2a6e0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a6e4:	2200      	movs	r2, #0
   2a6e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2a6ea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2a6ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2a6f2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a6f6:	6862      	ldr	r2, [r4, #4]
   2a6f8:	06d2      	lsls	r2, r2, #27
   2a6fa:	d511      	bpl.n	2a720 <tx_start+0x4a>
	if (data->async) {
   2a6fc:	6902      	ldr	r2, [r0, #16]
   2a6fe:	68d2      	ldr	r2, [r2, #12]
   2a700:	b12a      	cbz	r2, 2a70e <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2a702:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2a706:	f041 0101 	orr.w	r1, r1, #1
   2a70a:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2a70e:	2108      	movs	r1, #8
	return config->uarte_regs;
   2a710:	6842      	ldr	r2, [r0, #4]
   2a712:	6812      	ldr	r2, [r2, #0]
   2a714:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2a718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2a71c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a720:	2201      	movs	r2, #1
   2a722:	609a      	str	r2, [r3, #8]
}
   2a724:	bd10      	pop	{r4, pc}

0002a726 <user_callback>:
	if (data->async->user_callback) {
   2a726:	6903      	ldr	r3, [r0, #16]
   2a728:	68da      	ldr	r2, [r3, #12]
   2a72a:	6813      	ldr	r3, [r2, #0]
   2a72c:	b10b      	cbz	r3, 2a732 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2a72e:	6852      	ldr	r2, [r2, #4]
   2a730:	4718      	bx	r3
}
   2a732:	4770      	bx	lr

0002a734 <notify_uart_rx_rdy>:
{
   2a734:	b570      	push	{r4, r5, r6, lr}
   2a736:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2a738:	6906      	ldr	r6, [r0, #16]
{
   2a73a:	4604      	mov	r4, r0
   2a73c:	460d      	mov	r5, r1
	struct uart_event evt = {
   2a73e:	2214      	movs	r2, #20
   2a740:	2100      	movs	r1, #0
   2a742:	a801      	add	r0, sp, #4
   2a744:	f001 fb74 	bl	2be30 <memset>
   2a748:	2302      	movs	r3, #2
   2a74a:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2a74e:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2a750:	4620      	mov	r0, r4
	struct uart_event evt = {
   2a752:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2a754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2a756:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2a758:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2a75c:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2a75e:	f7ff ffe2 	bl	2a726 <user_callback>
}
   2a762:	b006      	add	sp, #24
   2a764:	bd70      	pop	{r4, r5, r6, pc}

0002a766 <rx_buf_release>:
{
   2a766:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2a768:	680e      	ldr	r6, [r1, #0]
{
   2a76a:	4605      	mov	r5, r0
   2a76c:	460c      	mov	r4, r1
   2a76e:	b086      	sub	sp, #24
	if (*buf) {
   2a770:	b17e      	cbz	r6, 2a792 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2a772:	2214      	movs	r2, #20
   2a774:	2100      	movs	r1, #0
   2a776:	a801      	add	r0, sp, #4
   2a778:	f001 fb5a 	bl	2be30 <memset>
   2a77c:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2a77e:	4628      	mov	r0, r5
   2a780:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2a784:	f88d 3004 	strb.w	r3, [sp, #4]
   2a788:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2a78a:	f7ff ffcc 	bl	2a726 <user_callback>
		*buf = NULL;
   2a78e:	2300      	movs	r3, #0
   2a790:	6023      	str	r3, [r4, #0]
}
   2a792:	b006      	add	sp, #24
   2a794:	bd70      	pop	{r4, r5, r6, pc}

0002a796 <notify_rx_disable>:
{
   2a796:	b510      	push	{r4, lr}
   2a798:	b086      	sub	sp, #24
   2a79a:	4604      	mov	r4, r0
	struct uart_event evt = {
   2a79c:	2214      	movs	r2, #20
   2a79e:	2100      	movs	r1, #0
   2a7a0:	a801      	add	r0, sp, #4
   2a7a2:	f001 fb45 	bl	2be30 <memset>
   2a7a6:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2a7a8:	4620      	mov	r0, r4
   2a7aa:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2a7ac:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2a7b0:	f7ff ffb9 	bl	2a726 <user_callback>
}
   2a7b4:	b006      	add	sp, #24
   2a7b6:	bd10      	pop	{r4, pc}

0002a7b8 <uarte_nrfx_rx_buf_rsp>:
{
   2a7b8:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2a7ba:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2a7bc:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2a7be:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2a7c0:	f04f 0020 	mov.w	r0, #32
   2a7c4:	f3ef 8611 	mrs	r6, BASEPRI
   2a7c8:	f380 8812 	msr	BASEPRI_MAX, r0
   2a7cc:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2a7d0:	68ec      	ldr	r4, [r5, #12]
   2a7d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a7d4:	b198      	cbz	r0, 2a7fe <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2a7d6:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2a7d8:	b9a0      	cbnz	r0, 2a804 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2a7da:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2a7dc:	68ec      	ldr	r4, [r5, #12]
   2a7de:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2a7e0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2a7e4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2a7e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2a7ec:	f042 0220 	orr.w	r2, r2, #32
   2a7f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2a7f4:	f386 8811 	msr	BASEPRI, r6
   2a7f8:	f3bf 8f6f 	isb	sy
}
   2a7fc:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2a7fe:	f06f 000c 	mvn.w	r0, #12
   2a802:	e7f7      	b.n	2a7f4 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2a804:	f06f 000f 	mvn.w	r0, #15
   2a808:	e7f4      	b.n	2a7f4 <uarte_nrfx_rx_buf_rsp+0x3c>

0002a80a <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2a80a:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2a80c:	68d8      	ldr	r0, [r3, #12]
   2a80e:	b120      	cbz	r0, 2a81a <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2a810:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2a812:	68db      	ldr	r3, [r3, #12]
	return 0;
   2a814:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2a816:	605a      	str	r2, [r3, #4]
	return 0;
   2a818:	4770      	bx	lr
		return -ENOTSUP;
   2a81a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a81e:	4770      	bx	lr

0002a820 <uarte_nrfx_poll_in>:
{
   2a820:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2a822:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2a824:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2a826:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2a828:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2a82a:	b960      	cbnz	r0, 2a846 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a82c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a830:	b164      	cbz	r4, 2a84c <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2a832:	6992      	ldr	r2, [r2, #24]
   2a834:	7812      	ldrb	r2, [r2, #0]
   2a836:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a838:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2a83c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a840:	2201      	movs	r2, #1
   2a842:	601a      	str	r2, [r3, #0]
}
   2a844:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2a846:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a84a:	e7fb      	b.n	2a844 <uarte_nrfx_poll_in+0x24>
		return -1;
   2a84c:	f04f 30ff 	mov.w	r0, #4294967295
   2a850:	e7f8      	b.n	2a844 <uarte_nrfx_poll_in+0x24>

0002a852 <uarte_nrfx_rx_disable>:
{
   2a852:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2a854:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2a856:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2a858:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2a85a:	68eb      	ldr	r3, [r5, #12]
   2a85c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2a85e:	b1ba      	cbz	r2, 2a890 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2a860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2a862:	b153      	cbz	r3, 2a87a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2a864:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2a868:	f023 0320 	bic.w	r3, r3, #32
   2a86c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a870:	2300      	movs	r3, #0
   2a872:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2a876:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2a87a:	68e8      	ldr	r0, [r5, #12]
   2a87c:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2a87e:	f001 f9b8 	bl	2bbf2 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2a882:	2000      	movs	r0, #0
   2a884:	68eb      	ldr	r3, [r5, #12]
   2a886:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a88a:	2301      	movs	r3, #1
   2a88c:	6063      	str	r3, [r4, #4]
}
   2a88e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2a890:	f06f 000d 	mvn.w	r0, #13
   2a894:	e7fb      	b.n	2a88e <uarte_nrfx_rx_disable+0x3c>

0002a896 <setup_tx_cache>:
{
   2a896:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2a898:	68c3      	ldr	r3, [r0, #12]
   2a89a:	68da      	ldr	r2, [r3, #12]
   2a89c:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2a89e:	1a52      	subs	r2, r2, r1
   2a8a0:	d00f      	beq.n	2a8c2 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2a8a2:	2a08      	cmp	r2, #8
   2a8a4:	bf28      	it	cs
   2a8a6:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2a8a8:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2a8aa:	68c3      	ldr	r3, [r0, #12]
   2a8ac:	6999      	ldr	r1, [r3, #24]
   2a8ae:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2a8b0:	68c3      	ldr	r3, [r0, #12]
   2a8b2:	6898      	ldr	r0, [r3, #8]
   2a8b4:	69d9      	ldr	r1, [r3, #28]
   2a8b6:	4401      	add	r1, r0
   2a8b8:	6998      	ldr	r0, [r3, #24]
   2a8ba:	f001 fa7f 	bl	2bdbc <memcpy>
	return true;
   2a8be:	2001      	movs	r0, #1
}
   2a8c0:	bd08      	pop	{r3, pc}
		return false;
   2a8c2:	4610      	mov	r0, r2
   2a8c4:	e7fc      	b.n	2a8c0 <setup_tx_cache+0x2a>

0002a8c6 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2a8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2a8c8:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2a8ca:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2a8cc:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2a8ce:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2a8d2:	b1f1      	cbz	r1, 2a912 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2a8d4:	2100      	movs	r1, #0
   2a8d6:	4618      	mov	r0, r3
   2a8d8:	f001 faaa 	bl	2be30 <memset>
   2a8dc:	4603      	mov	r3, r0
   2a8de:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2a8e0:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a8e4:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a8e6:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2a8e8:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a8ec:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2a8f0:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a8f4:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a8f6:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a8fa:	2800      	cmp	r0, #0
   2a8fc:	d0fb      	beq.n	2a8f6 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a8fe:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2a902:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2a906:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2a90a:	b92b      	cbnz	r3, 2a918 <rx_flush.isra.0+0x52>
			return rx_amount;
   2a90c:	b2c0      	uxtb	r0, r0
}
   2a90e:	b002      	add	sp, #8
   2a910:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2a912:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2a914:	4669      	mov	r1, sp
   2a916:	e7e3      	b.n	2a8e0 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2a918:	4285      	cmp	r5, r0
   2a91a:	d1f7      	bne.n	2a90c <rx_flush.isra.0+0x46>
   2a91c:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2a91e:	4293      	cmp	r3, r2
   2a920:	d101      	bne.n	2a926 <rx_flush.isra.0+0x60>
	return 0;
   2a922:	2000      	movs	r0, #0
   2a924:	e7f3      	b.n	2a90e <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2a926:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a92a:	2900      	cmp	r1, #0
   2a92c:	d0f7      	beq.n	2a91e <rx_flush.isra.0+0x58>
   2a92e:	e7ed      	b.n	2a90c <rx_flush.isra.0+0x46>

0002a930 <async_uart_release>:
{
   2a930:	b570      	push	{r4, r5, r6, lr}
   2a932:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2a934:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2a936:	f04f 0320 	mov.w	r3, #32
   2a93a:	f3ef 8611 	mrs	r6, BASEPRI
   2a93e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a942:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2a946:	68d0      	ldr	r0, [r2, #12]
   2a948:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2a94c:	ea23 0301 	bic.w	r3, r3, r1
   2a950:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2a954:	68d5      	ldr	r5, [r2, #12]
   2a956:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2a95a:	b973      	cbnz	r3, 2a97a <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2a95c:	2902      	cmp	r1, #2
   2a95e:	d107      	bne.n	2a970 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2a960:	2205      	movs	r2, #5
   2a962:	6860      	ldr	r0, [r4, #4]
   2a964:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2a968:	f7ff ffad 	bl	2a8c6 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2a96c:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2a970:	2200      	movs	r2, #0
	return config->uarte_regs;
   2a972:	6863      	ldr	r3, [r4, #4]
   2a974:	681b      	ldr	r3, [r3, #0]
   2a976:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2a97a:	f386 8811 	msr	BASEPRI, r6
   2a97e:	f3bf 8f6f 	isb	sy
}
   2a982:	bd70      	pop	{r4, r5, r6, pc}

0002a984 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2a984:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2a986:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a988:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a98c:	b940      	cbnz	r0, 2a9a0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2a98e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a990:	079b      	lsls	r3, r3, #30
   2a992:	d406      	bmi.n	2a9a2 <is_tx_ready.isra.0+0x1e>
   2a994:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2a998:	3800      	subs	r0, #0
   2a99a:	bf18      	it	ne
   2a99c:	2001      	movne	r0, #1
   2a99e:	4770      	bx	lr
   2a9a0:	2001      	movs	r0, #1
}
   2a9a2:	4770      	bx	lr

0002a9a4 <start_tx_locked>:
{
   2a9a4:	b510      	push	{r4, lr}
   2a9a6:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2a9a8:	6840      	ldr	r0, [r0, #4]
   2a9aa:	f7ff ffeb 	bl	2a984 <is_tx_ready.isra.0>
   2a9ae:	68cb      	ldr	r3, [r1, #12]
   2a9b0:	b918      	cbnz	r0, 2a9ba <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2a9b2:	2201      	movs	r2, #1
   2a9b4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2a9b8:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2a9ba:	2200      	movs	r2, #0
   2a9bc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2a9c0:	f04f 32ff 	mov.w	r2, #4294967295
   2a9c4:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2a9c6:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2a9c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2a9cc:	68cb      	ldr	r3, [r1, #12]
}
   2a9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2a9d2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2a9d6:	f7ff be7e 	b.w	2a6d6 <tx_start>

0002a9da <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2a9da:	b510      	push	{r4, lr}
   2a9dc:	4604      	mov	r4, r0
   2a9de:	2200      	movs	r2, #0
   2a9e0:	2101      	movs	r1, #1
   2a9e2:	200b      	movs	r0, #11
   2a9e4:	f7e6 f8ac 	bl	10b40 <z_arm_irq_priority_set>
   2a9e8:	200b      	movs	r0, #11
   2a9ea:	f7e6 f879 	bl	10ae0 <arch_irq_enable>
   2a9ee:	4620      	mov	r0, r4
   2a9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a9f4:	f7f2 bbde 	b.w	1d1b4 <uarte_instance_init.constprop.0>

0002a9f8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2a9f8:	b510      	push	{r4, lr}
   2a9fa:	4604      	mov	r4, r0
   2a9fc:	2200      	movs	r2, #0
   2a9fe:	2101      	movs	r1, #1
   2aa00:	2008      	movs	r0, #8
   2aa02:	f7e6 f89d 	bl	10b40 <z_arm_irq_priority_set>
   2aa06:	2008      	movs	r0, #8
   2aa08:	f7e6 f86a 	bl	10ae0 <arch_irq_enable>
   2aa0c:	4620      	mov	r0, r4
   2aa0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2aa12:	f7f2 bbcf 	b.w	1d1b4 <uarte_instance_init.constprop.0>

0002aa16 <rx_timeout>:
{
   2aa16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2aa18:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2aa1a:	68e3      	ldr	r3, [r4, #12]
   2aa1c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2aa20:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2aa24:	bb13      	cbnz	r3, 2aa6c <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2aa26:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2aa28:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2aa2a:	6873      	ldr	r3, [r6, #4]
   2aa2c:	681b      	ldr	r3, [r3, #0]
   2aa2e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2aa32:	68e3      	ldr	r3, [r4, #12]
   2aa34:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2aa38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2aa3a:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2aa3c:	bf1f      	itttt	ne
   2aa3e:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2aa40:	68e3      	ldrne	r3, [r4, #12]
   2aa42:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2aa44:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2aa46:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2aa48:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2aa4c:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2aa4e:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2aa50:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2aa52:	da0c      	bge.n	2aa6e <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2aa54:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2aa58:	68e3      	ldr	r3, [r4, #12]
   2aa5a:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2aa5e:	4281      	cmp	r1, r0
   2aa60:	d80b      	bhi.n	2aa7a <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2aa62:	2210      	movs	r2, #16
	return config->uarte_regs;
   2aa64:	6873      	ldr	r3, [r6, #4]
   2aa66:	681b      	ldr	r3, [r3, #0]
   2aa68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2aa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2aa6e:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2aa72:	eb02 0c01 	add.w	ip, r2, r1
   2aa76:	4584      	cmp	ip, r0
   2aa78:	d904      	bls.n	2aa84 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2aa7a:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2aa7c:	2d00      	cmp	r5, #0
   2aa7e:	ddf0      	ble.n	2aa62 <rx_timeout+0x4c>
		clipped = true;
   2aa80:	2701      	movs	r7, #1
   2aa82:	e005      	b.n	2aa90 <rx_timeout+0x7a>
	if (len > 0) {
   2aa84:	2a00      	cmp	r2, #0
   2aa86:	d0ec      	beq.n	2aa62 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2aa88:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2aa8c:	428a      	cmp	r2, r1
   2aa8e:	da12      	bge.n	2aab6 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2aa90:	4629      	mov	r1, r5
   2aa92:	4630      	mov	r0, r6
   2aa94:	f7ff fe4e 	bl	2a734 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2aa98:	68e2      	ldr	r2, [r4, #12]
   2aa9a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2aa9c:	442b      	add	r3, r5
   2aa9e:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2aaa0:	68e2      	ldr	r2, [r4, #12]
   2aaa2:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2aaa4:	442b      	add	r3, r5
   2aaa6:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2aaa8:	2f00      	cmp	r7, #0
   2aaaa:	d0da      	beq.n	2aa62 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2aaac:	68e0      	ldr	r0, [r4, #12]
   2aaae:	3080      	adds	r0, #128	; 0x80
   2aab0:	f001 f89f 	bl	2bbf2 <z_impl_k_timer_stop>
}
   2aab4:	e7d5      	b.n	2aa62 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2aab6:	1a52      	subs	r2, r2, r1
   2aab8:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2aaba:	e7d2      	b.n	2aa62 <rx_timeout+0x4c>

0002aabc <uarte_nrfx_tx_abort>:
{
   2aabc:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2aabe:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2aac0:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2aac2:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2aac4:	68da      	ldr	r2, [r3, #12]
   2aac6:	6891      	ldr	r1, [r2, #8]
   2aac8:	b151      	cbz	r1, 2aae0 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2aaca:	2400      	movs	r4, #0
   2aacc:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2aad0:	68d8      	ldr	r0, [r3, #12]
   2aad2:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2aad4:	f001 f88d 	bl	2bbf2 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2aad8:	2301      	movs	r3, #1
	return 0;
   2aada:	4620      	mov	r0, r4
   2aadc:	60eb      	str	r3, [r5, #12]
}
   2aade:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2aae0:	f06f 000d 	mvn.w	r0, #13
   2aae4:	e7fb      	b.n	2aade <uarte_nrfx_tx_abort+0x22>

0002aae6 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2aae6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2aae8:	6818      	ldr	r0, [r3, #0]
   2aaea:	f7ff bfe7 	b.w	2aabc <uarte_nrfx_tx_abort>

0002aaee <z_log_msg_static_create.constprop.0>:
   2aaee:	2300      	movs	r3, #0
   2aaf0:	f7e3 bf30 	b.w	e954 <z_impl_z_log_msg_static_create>

0002aaf4 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2aaf4:	2000      	movs	r0, #0
   2aaf6:	4770      	bx	lr

0002aaf8 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2aaf8:	b538      	push	{r3, r4, r5, lr}
   2aafa:	460c      	mov	r4, r1
   2aafc:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2aafe:	f7e8 fde9 	bl	136d4 <bt_is_ready>
   2ab02:	b128      	cbz	r0, 2ab10 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2ab04:	4629      	mov	r1, r5
   2ab06:	4620      	mov	r0, r4
}
   2ab08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2ab0c:	f7e7 bfa8 	b.w	12a60 <bt_hci_le_rand>
}
   2ab10:	f06f 000a 	mvn.w	r0, #10
   2ab14:	bd38      	pop	{r3, r4, r5, pc}

0002ab16 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2ab16:	4608      	mov	r0, r1
   2ab18:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2ab1a:	4611      	mov	r1, r2
   2ab1c:	f7f3 fd26 	bl	1e56c <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2ab20:	2800      	cmp	r0, #0
	}

	return 0;
}
   2ab22:	bf18      	it	ne
   2ab24:	f06f 0004 	mvnne.w	r0, #4
   2ab28:	bd08      	pop	{r3, pc}

0002ab2a <entropy_psa_crypto_rng_init>:
{
   2ab2a:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2ab2c:	f000 f911 	bl	2ad52 <psa_crypto_init>
		return -EIO;
   2ab30:	2800      	cmp	r0, #0
}
   2ab32:	bf18      	it	ne
   2ab34:	f06f 0004 	mvnne.w	r0, #4
   2ab38:	bd08      	pop	{r3, pc}

0002ab3a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2ab3a:	4770      	bx	lr

0002ab3c <sys_clock_cycle_get_32>:
{
   2ab3c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2ab3e:	f7f3 f955 	bl	1ddec <z_nrf_rtc_timer_read>
}
   2ab42:	bd08      	pop	{r3, pc}

0002ab44 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2ab44:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2ab46:	6843      	ldr	r3, [r0, #4]
   2ab48:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2ab4a:	7a05      	ldrb	r5, [r0, #8]
   2ab4c:	6844      	ldr	r4, [r0, #4]
   2ab4e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2ab52:	42a3      	cmp	r3, r4
   2ab54:	d302      	bcc.n	2ab5c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2ab56:	f06f 0001 	mvn.w	r0, #1
}
   2ab5a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2ab5c:	795c      	ldrb	r4, [r3, #5]
   2ab5e:	428c      	cmp	r4, r1
   2ab60:	d001      	beq.n	2ab66 <pinctrl_lookup_state+0x22>
		(*state)++;
   2ab62:	3308      	adds	r3, #8
   2ab64:	e7f0      	b.n	2ab48 <pinctrl_lookup_state+0x4>
			return 0;
   2ab66:	2000      	movs	r0, #0
   2ab68:	e7f7      	b.n	2ab5a <pinctrl_lookup_state+0x16>

0002ab6a <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2ab6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ab6e:	4615      	mov	r5, r2
   2ab70:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ab72:	f04f 0901 	mov.w	r9, #1
   2ab76:	b085      	sub	sp, #20
   2ab78:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2ab7c:	45d0      	cmp	r8, sl
   2ab7e:	d103      	bne.n	2ab88 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2ab80:	2000      	movs	r0, #0
}
   2ab82:	b005      	add	sp, #20
   2ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2ab88:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2ab8c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2ab90:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2ab94:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2ab96:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2ab9a:	bf08      	it	eq
   2ab9c:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2aba0:	2b22      	cmp	r3, #34	; 0x22
   2aba2:	f200 8091 	bhi.w	2acc8 <pinctrl_configure_pins+0x15e>
   2aba6:	e8df f003 	tbb	[pc, r3]
   2abaa:	1e12      	.short	0x1e12
   2abac:	34263823 	.word	0x34263823
   2abb0:	8f8f8f38 	.word	0x8f8f8f38
   2abb4:	8f653b8f 	.word	0x8f653b8f
   2abb8:	8f8f8f8f 	.word	0x8f8f8f8f
   2abbc:	8f8f8f8f 	.word	0x8f8f8f8f
   2abc0:	77747168 	.word	0x77747168
   2abc4:	7a8f8f8f 	.word	0x7a8f8f8f
   2abc8:	89868380 	.word	0x89868380
   2abcc:	8c          	.byte	0x8c
   2abcd:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2abce:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2abd2:	a803      	add	r0, sp, #12
   2abd4:	9403      	str	r4, [sp, #12]
   2abd6:	f7f3 fb41 	bl	1e25c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2abda:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2abdc:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2abde:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2abe2:	6083      	str	r3, [r0, #8]
   2abe4:	e002      	b.n	2abec <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   2abe6:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2abea:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2abec:	46b3      	mov	fp, r6
   2abee:	e01e      	b.n	2ac2e <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   2abf0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2abf4:	e7ed      	b.n	2abd2 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2abf6:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2abf8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2abfc:	a803      	add	r0, sp, #12
   2abfe:	9403      	str	r4, [sp, #12]
   2ac00:	f7f3 fb2c 	bl	1e25c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2ac04:	9b03      	ldr	r3, [sp, #12]
   2ac06:	f04f 0b01 	mov.w	fp, #1
   2ac0a:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2ac0e:	60c3      	str	r3, [r0, #12]
   2ac10:	e00d      	b.n	2ac2e <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2ac12:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2ac16:	2601      	movs	r6, #1
   2ac18:	e7f0      	b.n	2abfc <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2ac1a:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2ac1e:	e7e4      	b.n	2abea <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2ac20:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2ac24:	2f00      	cmp	r7, #0
   2ac26:	d1e0      	bne.n	2abea <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2ac28:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2ac2a:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2ac2c:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2ac2e:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ac32:	a803      	add	r0, sp, #12
   2ac34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2ac38:	2a00      	cmp	r2, #0
   2ac3a:	bf1c      	itt	ne
   2ac3c:	2601      	movne	r6, #1
   2ac3e:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2ac42:	9301      	str	r3, [sp, #4]
   2ac44:	9403      	str	r4, [sp, #12]
   2ac46:	f7f3 fb09 	bl	1e25c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ac4a:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ac4c:	9b01      	ldr	r3, [sp, #4]
   2ac4e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ac52:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ac56:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2ac5a:	023b      	lsls	r3, r7, #8
   2ac5c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2ac60:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ac64:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2ac68:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2ac6a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2ac6e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2ac72:	e783      	b.n	2ab7c <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2ac74:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2ac78:	e7d4      	b.n	2ac24 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2ac7a:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2ac7e:	f8da 3000 	ldr.w	r3, [sl]
   2ac82:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2ac86:	2b00      	cmp	r3, #0
   2ac88:	d0c5      	beq.n	2ac16 <pinctrl_configure_pins+0xac>
   2ac8a:	e7a2      	b.n	2abd2 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2ac8c:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2ac90:	e7f5      	b.n	2ac7e <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2ac92:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2ac96:	e7f2      	b.n	2ac7e <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2ac98:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2ac9c:	e7ef      	b.n	2ac7e <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2ac9e:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2aca2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2aca4:	f04f 0b00 	mov.w	fp, #0
   2aca8:	e7c1      	b.n	2ac2e <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2acaa:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2acae:	e790      	b.n	2abd2 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2acb0:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2acb4:	e7f5      	b.n	2aca2 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2acb6:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2acba:	e7f2      	b.n	2aca2 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2acbc:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2acc0:	e7ef      	b.n	2aca2 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2acc2:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2acc6:	e7ec      	b.n	2aca2 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2acc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2accc:	e759      	b.n	2ab82 <pinctrl_configure_pins+0x18>

0002acce <mbox_nrf_register_callback>:
{
   2acce:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2acd0:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2acd2:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2acd4:	bf9f      	itttt	ls
   2acd6:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2acda:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2acde:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2ace0:	2000      	movls	r0, #0
		return -EINVAL;
   2ace2:	bf88      	it	hi
   2ace4:	f06f 0015 	mvnhi.w	r0, #21
}
   2ace8:	bd10      	pop	{r4, pc}

0002acea <mbox_nrf_mtu_get>:
}
   2acea:	2000      	movs	r0, #0
   2acec:	4770      	bx	lr

0002acee <mbox_nrf_max_channels_get>:
}
   2acee:	2010      	movs	r0, #16
   2acf0:	4770      	bx	lr

0002acf2 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2acf2:	2000      	movs	r0, #0
   2acf4:	4770      	bx	lr

0002acf6 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2acf6:	2300      	movs	r3, #0
{
   2acf8:	b570      	push	{r4, r5, r6, lr}
   2acfa:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2acfc:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2ad00:	ab03      	add	r3, sp, #12
   2ad02:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2ad04:	2304      	movs	r3, #4
{
   2ad06:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2ad08:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2ad0a:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2ad0c:	b169      	cbz	r1, 2ad2a <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2ad0e:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2ad10:	680b      	ldr	r3, [r1, #0]
   2ad12:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2ad14:	684b      	ldr	r3, [r1, #4]
   2ad16:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2ad18:	2101      	movs	r1, #1
   2ad1a:	2041      	movs	r0, #65	; 0x41
   2ad1c:	f7f3 fc64 	bl	1e5e8 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2ad20:	1e05      	subs	r5, r0, #0
   2ad22:	dc04      	bgt.n	2ad2e <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2ad24:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2ad26:	b008      	add	sp, #32
   2ad28:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2ad2a:	2601      	movs	r6, #1
   2ad2c:	e7f4      	b.n	2ad18 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2ad2e:	1e23      	subs	r3, r4, #0
   2ad30:	bf18      	it	ne
   2ad32:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2ad34:	2100      	movs	r1, #0
   2ad36:	e9cd 4300 	strd	r4, r3, [sp]
   2ad3a:	aa04      	add	r2, sp, #16
   2ad3c:	4633      	mov	r3, r6
   2ad3e:	f7f3 fc37 	bl	1e5b0 <psa_call>
   2ad42:	4604      	mov	r4, r0
    psa_close(handle);
   2ad44:	4628      	mov	r0, r5
   2ad46:	f7f3 fc5d 	bl	1e604 <psa_close>
    if (status < PSA_SUCCESS) {
   2ad4a:	2c00      	cmp	r4, #0
   2ad4c:	dbea      	blt.n	2ad24 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2ad4e:	4620      	mov	r0, r4
   2ad50:	e7e9      	b.n	2ad26 <tfm_platform_ioctl+0x30>

0002ad52 <psa_crypto_init>:
}
   2ad52:	2000      	movs	r0, #0
   2ad54:	4770      	bx	lr

0002ad56 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2ad56:	b510      	push	{r4, lr}
   2ad58:	b088      	sub	sp, #32
   2ad5a:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2ad5c:	ab05      	add	r3, sp, #20
   2ad5e:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ad60:	230c      	movs	r3, #12
   2ad62:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ad64:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2ad66:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2ad6a:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ad6e:	eb0d 0103 	add.w	r1, sp, r3
   2ad72:	aa03      	add	r2, sp, #12
   2ad74:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2ad76:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ad7a:	f7ff ffbc 	bl	2acf6 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ad7e:	9b00      	ldr	r3, [sp, #0]
   2ad80:	6023      	str	r3, [r4, #0]

	return ret;
}
   2ad82:	b008      	add	sp, #32
   2ad84:	bd10      	pop	{r4, pc}

0002ad86 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2ad86:	2300      	movs	r3, #0
{
   2ad88:	b510      	push	{r4, lr}
   2ad8a:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2ad8c:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2ad90:	ab05      	add	r3, sp, #20
   2ad92:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ad94:	230c      	movs	r3, #12
   2ad96:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ad98:	2304      	movs	r3, #4
{
   2ad9a:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2ad9c:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2ad9e:	aa03      	add	r2, sp, #12
   2ada0:	eb0d 0103 	add.w	r1, sp, r3
   2ada4:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2ada6:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2ada8:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2adac:	f7ff ffa3 	bl	2acf6 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2adb0:	9b00      	ldr	r3, [sp, #0]
   2adb2:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2adb4:	b008      	add	sp, #32
   2adb6:	bd10      	pop	{r4, pc}

0002adb8 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2adb8:	f7f3 bc32 	b.w	1e620 <SystemCoreClockUpdate>

0002adbc <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2adbc:	4700      	bx	r0

0002adbe <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2adbe:	f000 bee6 	b.w	2bb8e <z_impl_k_busy_wait>

0002adc2 <nrf_gpio_pin_present_check>:
    switch (port)
   2adc2:	0943      	lsrs	r3, r0, #5
   2adc4:	d00b      	beq.n	2adde <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2adc6:	2b01      	cmp	r3, #1
   2adc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2adcc:	bf18      	it	ne
   2adce:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2add0:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2add4:	fa23 f000 	lsr.w	r0, r3, r0
}
   2add8:	f000 0001 	and.w	r0, r0, #1
   2addc:	4770      	bx	lr
    switch (port)
   2adde:	f04f 33ff 	mov.w	r3, #4294967295
   2ade2:	e7f5      	b.n	2add0 <nrf_gpio_pin_present_check+0xe>

0002ade4 <pin_is_task_output>:
{
   2ade4:	b508      	push	{r3, lr}
   2ade6:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2ade8:	f7f3 fe9c 	bl	1eb24 <pin_is_output>
   2adec:	b110      	cbz	r0, 2adf4 <pin_is_task_output+0x10>
   2adee:	4610      	mov	r0, r2
   2adf0:	f7f3 fe82 	bl	1eaf8 <pin_in_use_by_te>
}
   2adf4:	f000 0001 	and.w	r0, r0, #1
   2adf8:	bd08      	pop	{r3, pc}

0002adfa <nrf_gpio_reconfigure>:
{
   2adfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2adfe:	4617      	mov	r7, r2
   2ae00:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2ae04:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ae06:	a801      	add	r0, sp, #4
{
   2ae08:	460c      	mov	r4, r1
   2ae0a:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ae0c:	f7f3 ff0e 	bl	1ec2c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ae10:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ae12:	1e39      	subs	r1, r7, #0
   2ae14:	bf18      	it	ne
   2ae16:	2101      	movne	r1, #1
   2ae18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ae1c:	1e23      	subs	r3, r4, #0
   2ae1e:	bf18      	it	ne
   2ae20:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ae22:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ae24:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ae28:	bf14      	ite	ne
   2ae2a:	210c      	movne	r1, #12
   2ae2c:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ae2e:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ae30:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ae34:	bf14      	ite	ne
   2ae36:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2ae3a:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ae3c:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ae40:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ae44:	bf14      	ite	ne
   2ae46:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2ae4a:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ae4c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ae50:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2ae52:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ae56:	b104      	cbz	r4, 2ae5a <nrf_gpio_reconfigure+0x60>
   2ae58:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2ae5a:	b10f      	cbz	r7, 2ae60 <nrf_gpio_reconfigure+0x66>
   2ae5c:	783f      	ldrb	r7, [r7, #0]
   2ae5e:	007f      	lsls	r7, r7, #1
   2ae60:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2ae62:	b10e      	cbz	r6, 2ae68 <nrf_gpio_reconfigure+0x6e>
   2ae64:	7836      	ldrb	r6, [r6, #0]
   2ae66:	00b6      	lsls	r6, r6, #2
   2ae68:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ae6a:	b18d      	cbz	r5, 2ae90 <nrf_gpio_reconfigure+0x96>
   2ae6c:	7829      	ldrb	r1, [r5, #0]
   2ae6e:	0209      	lsls	r1, r1, #8
   2ae70:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2ae72:	f1b8 0f00 	cmp.w	r8, #0
   2ae76:	d003      	beq.n	2ae80 <nrf_gpio_reconfigure+0x86>
   2ae78:	f898 8000 	ldrb.w	r8, [r8]
   2ae7c:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ae80:	4321      	orrs	r1, r4
   2ae82:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2ae86:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2ae8a:	b002      	add	sp, #8
   2ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ae90:	4629      	mov	r1, r5
   2ae92:	e7ed      	b.n	2ae70 <nrf_gpio_reconfigure+0x76>

0002ae94 <nrf_gpio_cfg_sense_set>:
{
   2ae94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ae96:	f10d 030f 	add.w	r3, sp, #15
   2ae9a:	9301      	str	r3, [sp, #4]
   2ae9c:	2300      	movs	r3, #0
{
   2ae9e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2aea2:	461a      	mov	r2, r3
   2aea4:	4619      	mov	r1, r3
   2aea6:	9300      	str	r3, [sp, #0]
   2aea8:	f7ff ffa7 	bl	2adfa <nrf_gpio_reconfigure>
}
   2aeac:	b005      	add	sp, #20
   2aeae:	f85d fb04 	ldr.w	pc, [sp], #4

0002aeb2 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2aeb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2aeb6:	4770      	bx	lr

0002aeb8 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2aeb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2aebc:	4770      	bx	lr

0002aebe <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2aebe:	f44f 7080 	mov.w	r0, #256	; 0x100
   2aec2:	4770      	bx	lr

0002aec4 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2aec4:	2100      	movs	r1, #0
   2aec6:	f7f4 bc03 	b.w	1f6d0 <nrf_gpio_cfg.constprop.0>

0002aeca <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2aeca:	2302      	movs	r3, #2
   2aecc:	f7f4 bb3c 	b.w	1f548 <qspi_xfer>

0002aed0 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2aed0:	2303      	movs	r3, #3
   2aed2:	f7f4 bb39 	b.w	1f548 <qspi_xfer>

0002aed6 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2aed6:	2100      	movs	r1, #0
   2aed8:	2002      	movs	r0, #2
   2aeda:	f7f4 be5b 	b.w	1fb94 <nrfx_qspi_erase>

0002aede <nrf_gpio_pin_clear>:
{
   2aede:	b507      	push	{r0, r1, r2, lr}
   2aee0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aee2:	a801      	add	r0, sp, #4
   2aee4:	f7f4 fed0 	bl	1fc88 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2aee8:	2301      	movs	r3, #1
   2aeea:	9a01      	ldr	r2, [sp, #4]
   2aeec:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2aeee:	60c3      	str	r3, [r0, #12]
}
   2aef0:	b003      	add	sp, #12
   2aef2:	f85d fb04 	ldr.w	pc, [sp], #4

0002aef6 <nrf_gpio_pin_set>:
{
   2aef6:	b507      	push	{r0, r1, r2, lr}
   2aef8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aefa:	a801      	add	r0, sp, #4
   2aefc:	f7f4 fec4 	bl	1fc88 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2af00:	2301      	movs	r3, #1
   2af02:	9a01      	ldr	r2, [sp, #4]
   2af04:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2af06:	6083      	str	r3, [r0, #8]
}
   2af08:	b003      	add	sp, #12
   2af0a:	f85d fb04 	ldr.w	pc, [sp], #4

0002af0e <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   2af0e:	7f83      	ldrb	r3, [r0, #30]
   2af10:	075a      	lsls	r2, r3, #29
   2af12:	d40b      	bmi.n	2af2c <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2af14:	7fc0      	ldrb	r0, [r0, #31]
   2af16:	28ff      	cmp	r0, #255	; 0xff
   2af18:	d008      	beq.n	2af2c <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   2af1a:	079b      	lsls	r3, r3, #30
   2af1c:	bf58      	it	pl
   2af1e:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2af22:	b909      	cbnz	r1, 2af28 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2af24:	f7ff bfdb 	b.w	2aede <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2af28:	f7ff bfe5 	b.w	2aef6 <nrf_gpio_pin_set>
}
   2af2c:	4770      	bx	lr

0002af2e <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2af2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2af32:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2af34:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2af36:	4698      	mov	r8, r3
   2af38:	460f      	mov	r7, r1
   2af3a:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2af3c:	f7f4 fea4 	bl	1fc88 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2af40:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2af42:	f89d 4020 	ldrb.w	r4, [sp, #32]
   2af46:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2af4a:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2af4c:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2af50:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   2af54:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2af58:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2af5c:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2af60:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   2af62:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   2af66:	b002      	add	sp, #8
   2af68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002af6c <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2af6c:	1c43      	adds	r3, r0, #1
{
   2af6e:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2af70:	d005      	beq.n	2af7e <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   2af72:	2300      	movs	r3, #0
   2af74:	2201      	movs	r2, #1
   2af76:	4619      	mov	r1, r3
   2af78:	9300      	str	r3, [sp, #0]
   2af7a:	f7ff ffd8 	bl	2af2e <nrf_gpio_cfg.constprop.0>
}
   2af7e:	b003      	add	sp, #12
   2af80:	f85d fb04 	ldr.w	pc, [sp], #4

0002af84 <metal_device_open>:
{
   2af84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2af86:	460c      	mov	r4, r1
   2af88:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2af8a:	4606      	mov	r6, r0
   2af8c:	b918      	cbnz	r0, 2af96 <metal_device_open+0x12>
		return -EINVAL;
   2af8e:	f06f 0015 	mvn.w	r0, #21
}
   2af92:	b002      	add	sp, #8
   2af94:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2af96:	f7de f9e3 	bl	9360 <strlen>
   2af9a:	2800      	cmp	r0, #0
   2af9c:	d0f7      	beq.n	2af8e <metal_device_open+0xa>
   2af9e:	2c00      	cmp	r4, #0
   2afa0:	d0f5      	beq.n	2af8e <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2afa2:	4620      	mov	r0, r4
   2afa4:	f7de f9dc 	bl	9360 <strlen>
   2afa8:	2800      	cmp	r0, #0
   2afaa:	d0f0      	beq.n	2af8e <metal_device_open+0xa>
   2afac:	2d00      	cmp	r5, #0
   2afae:	d0ee      	beq.n	2af8e <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2afb0:	4630      	mov	r0, r6
   2afb2:	a901      	add	r1, sp, #4
   2afb4:	f7f5 f97e 	bl	202b4 <metal_bus_find>
	if (error)
   2afb8:	2800      	cmp	r0, #0
   2afba:	d1ea      	bne.n	2af92 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2afbc:	9801      	ldr	r0, [sp, #4]
   2afbe:	6883      	ldr	r3, [r0, #8]
   2afc0:	b12b      	cbz	r3, 2afce <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2afc2:	462a      	mov	r2, r5
   2afc4:	4621      	mov	r1, r4
}
   2afc6:	b002      	add	sp, #8
   2afc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2afcc:	4718      	bx	r3
		return -ENODEV;
   2afce:	f06f 0012 	mvn.w	r0, #18
   2afd2:	e7de      	b.n	2af92 <metal_device_open+0xe>

0002afd4 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2afd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2afd8:	b089      	sub	sp, #36	; 0x24
   2afda:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2afdc:	4604      	mov	r4, r0
   2afde:	4689      	mov	r9, r1
   2afe0:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   2afe2:	2100      	movs	r1, #0
   2afe4:	2220      	movs	r2, #32
   2afe6:	4668      	mov	r0, sp
{
   2afe8:	461f      	mov	r7, r3
   2afea:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2afec:	f000 ff20 	bl	2be30 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2aff0:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   2aff2:	bf97      	itett	ls
   2aff4:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   2aff6:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2affa:	40b3      	lslls	r3, r6
   2affc:	f103 33ff 	addls.w	r3, r3, #4294967295
   2b000:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   2b002:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   2b004:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   2b008:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   2b00c:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2b00e:	3418      	adds	r4, #24
   2b010:	b145      	cbz	r5, 2b024 <metal_io_init+0x50>
   2b012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2b014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2b016:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2b01a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2b01e:	b009      	add	sp, #36	; 0x24
   2b020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   2b024:	466d      	mov	r5, sp
   2b026:	e7f4      	b.n	2b012 <metal_io_init+0x3e>

0002b028 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2b028:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b02a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2b02c:	1c66      	adds	r6, r4, #1
   2b02e:	d031      	beq.n	2b094 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b030:	6885      	ldr	r5, [r0, #8]
   2b032:	42a9      	cmp	r1, r5
   2b034:	d22e      	bcs.n	2b094 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2b036:	1864      	adds	r4, r4, r1
   2b038:	d02c      	beq.n	2b094 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2b03a:	185e      	adds	r6, r3, r1
   2b03c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2b03e:	bf88      	it	hi
   2b040:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2b042:	6a05      	ldr	r5, [r0, #32]
   2b044:	b135      	cbz	r5, 2b054 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   2b046:	9300      	str	r3, [sp, #0]
   2b048:	2305      	movs	r3, #5
   2b04a:	47a8      	blx	r5
   2b04c:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2b04e:	4618      	mov	r0, r3
   2b050:	b002      	add	sp, #8
   2b052:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2b054:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2b058:	4619      	mov	r1, r3
   2b05a:	1aa4      	subs	r4, r4, r2
   2b05c:	1910      	adds	r0, r2, r4
   2b05e:	b119      	cbz	r1, 2b068 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   2b060:	ea40 0502 	orr.w	r5, r0, r2
   2b064:	07ad      	lsls	r5, r5, #30
   2b066:	d10a      	bne.n	2b07e <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2b068:	2903      	cmp	r1, #3
   2b06a:	dc0d      	bgt.n	2b088 <metal_io_block_read+0x60>
   2b06c:	3801      	subs	r0, #1
   2b06e:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   2b070:	428a      	cmp	r2, r1
   2b072:	d0ec      	beq.n	2b04e <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   2b074:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2b078:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2b07c:	e7f8      	b.n	2b070 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2b07e:	7800      	ldrb	r0, [r0, #0]
			len--;
   2b080:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   2b082:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2b086:	e7e9      	b.n	2b05c <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2b088:	f850 4b04 	ldr.w	r4, [r0], #4
   2b08c:	3904      	subs	r1, #4
   2b08e:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   2b092:	e7e9      	b.n	2b068 <metal_io_block_read+0x40>
		return -ERANGE;
   2b094:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2b098:	e7d9      	b.n	2b04e <metal_io_block_read+0x26>

0002b09a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2b09a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b09c:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2b09e:	1c65      	adds	r5, r4, #1
   2b0a0:	d032      	beq.n	2b108 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b0a2:	6885      	ldr	r5, [r0, #8]
   2b0a4:	42a9      	cmp	r1, r5
   2b0a6:	d22f      	bcs.n	2b108 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2b0a8:	1864      	adds	r4, r4, r1
   2b0aa:	d02d      	beq.n	2b108 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2b0ac:	185e      	adds	r6, r3, r1
   2b0ae:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2b0b0:	bf88      	it	hi
   2b0b2:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2b0b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2b0b6:	b1cd      	cbz	r5, 2b0ec <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2b0b8:	9300      	str	r3, [sp, #0]
   2b0ba:	2305      	movs	r3, #5
   2b0bc:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2b0be:	b002      	add	sp, #8
   2b0c0:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2b0c2:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2b0c6:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2b0c8:	7005      	strb	r5, [r0, #0]
			len--;
   2b0ca:	4615      	mov	r5, r2
   2b0cc:	18a0      	adds	r0, r4, r2
		while ( len && (
   2b0ce:	b119      	cbz	r1, 2b0d8 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2b0d0:	ea40 0602 	orr.w	r6, r0, r2
   2b0d4:	07b6      	lsls	r6, r6, #30
   2b0d6:	d1f4      	bne.n	2b0c2 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b0d8:	2903      	cmp	r1, #3
   2b0da:	dc0a      	bgt.n	2b0f2 <metal_io_block_write+0x58>
   2b0dc:	3d01      	subs	r5, #1
   2b0de:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2b0e0:	4288      	cmp	r0, r1
   2b0e2:	d10c      	bne.n	2b0fe <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2b0e4:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2b0e8:	4618      	mov	r0, r3
   2b0ea:	e7e8      	b.n	2b0be <metal_io_block_write+0x24>
   2b0ec:	4619      	mov	r1, r3
   2b0ee:	1aa4      	subs	r4, r4, r2
   2b0f0:	e7eb      	b.n	2b0ca <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2b0f2:	f855 2b04 	ldr.w	r2, [r5], #4
   2b0f6:	3904      	subs	r1, #4
   2b0f8:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2b0fc:	e7ec      	b.n	2b0d8 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2b0fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2b102:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2b106:	e7eb      	b.n	2b0e0 <metal_io_block_write+0x46>
		return -ERANGE;
   2b108:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2b10c:	e7d7      	b.n	2b0be <metal_io_block_write+0x24>

0002b10e <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2b10e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b110:	6804      	ldr	r4, [r0, #0]
   2b112:	461d      	mov	r5, r3
		: NULL);
   2b114:	1c66      	adds	r6, r4, #1
   2b116:	d02b      	beq.n	2b170 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b118:	6883      	ldr	r3, [r0, #8]
   2b11a:	4299      	cmp	r1, r3
   2b11c:	d228      	bcs.n	2b170 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2b11e:	1864      	adds	r4, r4, r1
   2b120:	d026      	beq.n	2b170 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2b122:	186e      	adds	r6, r5, r1
   2b124:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2b126:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2b128:	bf88      	it	hi
   2b12a:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2b12c:	b12e      	cbz	r6, 2b13a <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2b12e:	2305      	movs	r3, #5
   2b130:	9500      	str	r5, [sp, #0]
   2b132:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2b134:	4628      	mov	r0, r5
}
   2b136:	b002      	add	sp, #8
   2b138:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2b13a:	4621      	mov	r1, r4
   2b13c:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2b13e:	b94b      	cbnz	r3, 2b154 <metal_io_block_set+0x46>
   2b140:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2b142:	4299      	cmp	r1, r3
   2b144:	d111      	bne.n	2b16a <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2b146:	f3bf 8f5b 	dmb	ish
   2b14a:	e7f3      	b.n	2b134 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2b14c:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2b150:	3b01      	subs	r3, #1
   2b152:	e7f4      	b.n	2b13e <metal_io_block_set+0x30>
   2b154:	0788      	lsls	r0, r1, #30
   2b156:	d1f9      	bne.n	2b14c <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2b158:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2b15c:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b15e:	2b03      	cmp	r3, #3
   2b160:	ddee      	ble.n	2b140 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2b162:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b166:	3b04      	subs	r3, #4
   2b168:	e7f9      	b.n	2b15e <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2b16a:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2b16e:	e7e8      	b.n	2b142 <metal_io_block_set+0x34>
		return -ERANGE;
   2b170:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2b174:	e7df      	b.n	2b136 <metal_io_block_set+0x28>

0002b176 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2b176:	2000      	movs	r0, #0
   2b178:	4770      	bx	lr

0002b17a <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2b17a:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2b17c:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2b17e:	4602      	mov	r2, r0
   2b180:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2b182:	b984      	cbnz	r4, 2b1a6 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2b184:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2b186:	291f      	cmp	r1, #31
   2b188:	bf98      	it	ls
   2b18a:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2b18e:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2b190:	b161      	cbz	r1, 2b1ac <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2b192:	6880      	ldr	r0, [r0, #8]
   2b194:	4283      	cmp	r3, r0
   2b196:	d209      	bcs.n	2b1ac <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2b198:	6910      	ldr	r0, [r2, #16]
   2b19a:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2b19c:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2b1a0:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2b1a2:	bc10      	pop	{r4}
   2b1a4:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2b1a6:	4623      	mov	r3, r4
}
   2b1a8:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2b1aa:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2b1ac:	f04f 30ff 	mov.w	r0, #4294967295
   2b1b0:	e7f7      	b.n	2b1a2 <metal_io_phys+0x28>

0002b1b2 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2b1b2:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2b1b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2b1b6:	4605      	mov	r5, r0
   2b1b8:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2b1ba:	b9e3      	cbnz	r3, 2b1f6 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2b1bc:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2b1be:	1c62      	adds	r2, r4, #1
   2b1c0:	bf09      	itett	eq
   2b1c2:	6843      	ldreq	r3, [r0, #4]
   2b1c4:	400c      	andne	r4, r1
   2b1c6:	681c      	ldreq	r4, [r3, #0]
   2b1c8:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2b1ca:	4621      	mov	r1, r4
   2b1cc:	4628      	mov	r0, r5
   2b1ce:	f7ff ffd4 	bl	2b17a <metal_io_phys>
   2b1d2:	4286      	cmp	r6, r0
   2b1d4:	d007      	beq.n	2b1e6 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2b1d6:	692b      	ldr	r3, [r5, #16]
   2b1d8:	3301      	adds	r3, #1
   2b1da:	441c      	add	r4, r3
		} while (offset < io->size);
   2b1dc:	68ab      	ldr	r3, [r5, #8]
   2b1de:	429c      	cmp	r4, r3
   2b1e0:	d3f3      	bcc.n	2b1ca <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2b1e2:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b1e6:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2b1e8:	1c43      	adds	r3, r0, #1
   2b1ea:	d007      	beq.n	2b1fc <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b1ec:	68ab      	ldr	r3, [r5, #8]
   2b1ee:	42a3      	cmp	r3, r4
   2b1f0:	d904      	bls.n	2b1fc <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2b1f2:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2b1f4:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2b1f6:	4798      	blx	r3
   2b1f8:	4604      	mov	r4, r0
   2b1fa:	e7f4      	b.n	2b1e6 <metal_io_phys_to_virt+0x34>
		: NULL);
   2b1fc:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2b1fe:	e7f9      	b.n	2b1f4 <metal_io_phys_to_virt+0x42>

0002b200 <virtqueue_create>:
{
   2b200:	b530      	push	{r4, r5, lr}
   2b202:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2b204:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2b208:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2b20a:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2b20c:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2b20e:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2b210:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2b212:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2b214:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2b216:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2b218:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2b21c:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2b220:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2b224:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2b226:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2b228:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2b22c:	1c6a      	adds	r2, r5, #1
   2b22e:	4413      	add	r3, r2
   2b230:	426d      	negs	r5, r5
   2b232:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2b234:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b236:	6983      	ldr	r3, [r0, #24]
   2b238:	b953      	cbnz	r3, 2b250 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2b23a:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2b23c:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2b23e:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2b240:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2b244:	db06      	blt.n	2b254 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2b246:	2300      	movs	r3, #0
   2b248:	7393      	strb	r3, [r2, #14]
   2b24a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2b24e:	73d3      	strb	r3, [r2, #15]
}
   2b250:	2000      	movs	r0, #0
   2b252:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2b254:	3301      	adds	r3, #1
   2b256:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2b258:	e7f0      	b.n	2b23c <virtqueue_create+0x3c>

0002b25a <virtqueue_add_buffer>:
{
   2b25a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2b25e:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2b262:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b264:	4655      	mov	r5, sl
   2b266:	2600      	movs	r6, #0
{
   2b268:	b085      	sub	sp, #20
	needed = readable + writable;
   2b26a:	eb02 0803 	add.w	r8, r2, r3
{
   2b26e:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2b270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b272:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2b276:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2b27a:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2b27c:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2b280:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2b284:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b286:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2b288:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b28a:	45b0      	cmp	r8, r6
   2b28c:	dc1a      	bgt.n	2b2c4 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2b28e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2b290:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2b292:	eba3 030b 	sub.w	r3, r3, fp
   2b296:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2b298:	69e3      	ldr	r3, [r4, #28]
   2b29a:	8961      	ldrh	r1, [r4, #10]
   2b29c:	885a      	ldrh	r2, [r3, #2]
   2b29e:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2b2a0:	400a      	ands	r2, r1
   2b2a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2b2a6:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2b2aa:	f3bf 8f5b 	dmb	ish
}
   2b2ae:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2b2b0:	69e2      	ldr	r2, [r4, #28]
   2b2b2:	8853      	ldrh	r3, [r2, #2]
   2b2b4:	3301      	adds	r3, #1
   2b2b6:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2b2b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2b2ba:	3301      	adds	r3, #1
   2b2bc:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2b2be:	b005      	add	sp, #20
   2b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2b2c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2b2c6:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b2c8:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2b2cc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2b2d0:	9302      	str	r3, [sp, #8]
   2b2d2:	6803      	ldr	r3, [r0, #0]
   2b2d4:	9203      	str	r2, [sp, #12]
   2b2d6:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2b2d8:	6883      	ldr	r3, [r0, #8]
   2b2da:	3708      	adds	r7, #8
   2b2dc:	4299      	cmp	r1, r3
   2b2de:	bf28      	it	cs
   2b2e0:	f04f 31ff 	movcs.w	r1, #4294967295
   2b2e4:	f7ff ff49 	bl	2b17a <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2b2e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b2ec:	5098      	str	r0, [r3, r2]
   2b2ee:	2200      	movs	r2, #0
   2b2f0:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2b2f2:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2b2f6:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2b2f8:	9a01      	ldr	r2, [sp, #4]
   2b2fa:	4296      	cmp	r6, r2
   2b2fc:	bfac      	ite	ge
   2b2fe:	2200      	movge	r2, #0
   2b300:	2201      	movlt	r2, #1
		if (i >= readable)
   2b302:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2b304:	bfd8      	it	le
   2b306:	f042 0202 	orrle.w	r2, r2, #2
   2b30a:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b30c:	3601      	adds	r6, #1
   2b30e:	89ed      	ldrh	r5, [r5, #14]
   2b310:	e7bb      	b.n	2b28a <virtqueue_add_buffer+0x30>

0002b312 <virtqueue_get_buffer>:
{
   2b312:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2b314:	b350      	cbz	r0, 2b36c <virtqueue_get_buffer+0x5a>
   2b316:	6a05      	ldr	r5, [r0, #32]
   2b318:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2b31a:	886b      	ldrh	r3, [r5, #2]
   2b31c:	42a3      	cmp	r3, r4
   2b31e:	d030      	beq.n	2b382 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2b320:	1c63      	adds	r3, r4, #1
   2b322:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2b324:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2b326:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2b32a:	3b01      	subs	r3, #1
   2b32c:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2b32e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2b332:	686b      	ldr	r3, [r5, #4]
   2b334:	b29e      	uxth	r6, r3
	if (len)
   2b336:	b109      	cbz	r1, 2b33c <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2b338:	68ad      	ldr	r5, [r5, #8]
   2b33a:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2b33c:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2b340:	b29b      	uxth	r3, r3
   2b342:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2b346:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2b34a:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2b34c:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2b34e:	442f      	add	r7, r5
	dxp->ndescs--;
   2b350:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2b352:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2b354:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2b356:	898d      	ldrh	r5, [r1, #12]
   2b358:	076f      	lsls	r7, r5, #29
   2b35a:	d50e      	bpl.n	2b37a <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2b35c:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2b35e:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2b360:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2b362:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2b364:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2b366:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2b368:	b102      	cbz	r2, 2b36c <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2b36a:	8014      	strh	r4, [r2, #0]
}
   2b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2b36e:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2b370:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2b372:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2b374:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2b378:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2b37a:	898d      	ldrh	r5, [r1, #12]
   2b37c:	07ed      	lsls	r5, r5, #31
   2b37e:	d4f6      	bmi.n	2b36e <virtqueue_get_buffer+0x5c>
   2b380:	e7ec      	b.n	2b35c <virtqueue_get_buffer+0x4a>
		return NULL;
   2b382:	2000      	movs	r0, #0
   2b384:	e7f2      	b.n	2b36c <virtqueue_get_buffer+0x5a>

0002b386 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2b386:	6983      	ldr	r3, [r0, #24]
   2b388:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2b38c:	6898      	ldr	r0, [r3, #8]
   2b38e:	4770      	bx	lr

0002b390 <virtqueue_get_available_buffer>:
{
   2b390:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2b392:	f3bf 8f5b 	dmb	ish
{
   2b396:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b398:	69c1      	ldr	r1, [r0, #28]
{
   2b39a:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b39c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2b39e:	884a      	ldrh	r2, [r1, #2]
{
   2b3a0:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b3a2:	429a      	cmp	r2, r3
   2b3a4:	d016      	beq.n	2b3d4 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2b3a6:	1c5a      	adds	r2, r3, #1
   2b3a8:	8602      	strh	r2, [r0, #48]	; 0x30
   2b3aa:	8942      	ldrh	r2, [r0, #10]
   2b3ac:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b3ae:	4013      	ands	r3, r2
   2b3b0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2b3b4:	888a      	ldrh	r2, [r1, #4]
   2b3b6:	802a      	strh	r2, [r5, #0]
   2b3b8:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2b3ba:	6982      	ldr	r2, [r0, #24]
   2b3bc:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2b3be:	58d1      	ldr	r1, [r2, r3]
   2b3c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2b3c2:	f7ff fef6 	bl	2b1b2 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2b3c6:	882a      	ldrh	r2, [r5, #0]
   2b3c8:	69a3      	ldr	r3, [r4, #24]
   2b3ca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2b3ce:	689b      	ldr	r3, [r3, #8]
   2b3d0:	6033      	str	r3, [r6, #0]
}
   2b3d2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2b3d4:	2000      	movs	r0, #0
   2b3d6:	e7fc      	b.n	2b3d2 <virtqueue_get_available_buffer+0x42>

0002b3d8 <virtqueue_disable_cb>:
{
   2b3d8:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b3da:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b3dc:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b3de:	6912      	ldr	r2, [r2, #16]
   2b3e0:	0092      	lsls	r2, r2, #2
   2b3e2:	d517      	bpl.n	2b414 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b3e4:	b943      	cbnz	r3, 2b3f8 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2b3e6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2b3e8:	69c2      	ldr	r2, [r0, #28]
   2b3ea:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2b3ec:	8944      	ldrh	r4, [r0, #10]
   2b3ee:	3b01      	subs	r3, #1
   2b3f0:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2b3f2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2b3f6:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b3f8:	6803      	ldr	r3, [r0, #0]
   2b3fa:	699b      	ldr	r3, [r3, #24]
   2b3fc:	2b01      	cmp	r3, #1
   2b3fe:	d108      	bne.n	2b412 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2b400:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2b402:	6a02      	ldr	r2, [r0, #32]
   2b404:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2b406:	8940      	ldrh	r0, [r0, #10]
   2b408:	3b01      	subs	r3, #1
   2b40a:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2b40c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2b410:	8093      	strh	r3, [r2, #4]
}
   2b412:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b414:	b923      	cbnz	r3, 2b420 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2b416:	69c2      	ldr	r2, [r0, #28]
   2b418:	8813      	ldrh	r3, [r2, #0]
   2b41a:	f043 0301 	orr.w	r3, r3, #1
   2b41e:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b420:	6803      	ldr	r3, [r0, #0]
   2b422:	699b      	ldr	r3, [r3, #24]
   2b424:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2b426:	bf01      	itttt	eq
   2b428:	6a02      	ldreq	r2, [r0, #32]
   2b42a:	8813      	ldrheq	r3, [r2, #0]
   2b42c:	f043 0301 	orreq.w	r3, r3, #1
   2b430:	8013      	strheq	r3, [r2, #0]
}
   2b432:	e7ee      	b.n	2b412 <virtqueue_disable_cb+0x3a>

0002b434 <virtqueue_kick>:
{
   2b434:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2b436:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b43a:	6803      	ldr	r3, [r0, #0]
{
   2b43c:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b43e:	691a      	ldr	r2, [r3, #16]
   2b440:	699b      	ldr	r3, [r3, #24]
   2b442:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2b446:	d01a      	beq.n	2b47e <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b448:	b97b      	cbnz	r3, 2b46a <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2b44a:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2b44c:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2b44e:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2b450:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2b452:	3b01      	subs	r3, #1
   2b454:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2b458:	8892      	ldrh	r2, [r2, #4]
   2b45a:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2b45c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2b45e:	b29b      	uxth	r3, r3
   2b460:	429a      	cmp	r2, r3
   2b462:	d814      	bhi.n	2b48e <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2b464:	2300      	movs	r3, #0
   2b466:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2b468:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b46a:	2b01      	cmp	r3, #1
   2b46c:	d1fa      	bne.n	2b464 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2b46e:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2b470:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2b472:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2b474:	6941      	ldr	r1, [r0, #20]
   2b476:	3b01      	subs	r3, #1
   2b478:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2b47c:	e7ec      	b.n	2b458 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b47e:	b963      	cbnz	r3, 2b49a <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2b480:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2b482:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2b484:	43db      	mvns	r3, r3
   2b486:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2b48a:	2b00      	cmp	r3, #0
   2b48c:	d0ea      	beq.n	2b464 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2b48e:	6923      	ldr	r3, [r4, #16]
   2b490:	2b00      	cmp	r3, #0
   2b492:	d0e7      	beq.n	2b464 <virtqueue_kick+0x30>
		vq->notify(vq);
   2b494:	4620      	mov	r0, r4
   2b496:	4798      	blx	r3
   2b498:	e7e4      	b.n	2b464 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b49a:	2b01      	cmp	r3, #1
   2b49c:	d1e2      	bne.n	2b464 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2b49e:	69c3      	ldr	r3, [r0, #28]
   2b4a0:	e7ef      	b.n	2b482 <virtqueue_kick+0x4e>

0002b4a2 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b4a2:	69c3      	ldr	r3, [r0, #28]
   2b4a4:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2b4a6:	8859      	ldrh	r1, [r3, #2]
   2b4a8:	4291      	cmp	r1, r2
   2b4aa:	d00a      	beq.n	2b4c2 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2b4ac:	8941      	ldrh	r1, [r0, #10]
   2b4ae:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b4b0:	400a      	ands	r2, r1
   2b4b2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2b4b6:	889a      	ldrh	r2, [r3, #4]
   2b4b8:	6983      	ldr	r3, [r0, #24]
   2b4ba:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2b4be:	6898      	ldr	r0, [r3, #8]
	return len;
   2b4c0:	4770      	bx	lr
		return 0;
   2b4c2:	2000      	movs	r0, #0
}
   2b4c4:	4770      	bx	lr

0002b4c6 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2b4c6:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2b4ca:	68c3      	ldr	r3, [r0, #12]
   2b4cc:	b103      	cbz	r3, 2b4d0 <virtqueue_notification+0xa>
		vq->callback(vq);
   2b4ce:	4718      	bx	r3
}
   2b4d0:	4770      	bx	lr

0002b4d2 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b4d2:	f04f 32ff 	mov.w	r2, #4294967295
   2b4d6:	f04f 33ff 	mov.w	r3, #4294967295
   2b4da:	f7f6 bc1d 	b.w	21d18 <z_impl_k_sem_take>

0002b4de <rpmsg_unregister_endpoint>:
{
   2b4de:	b570      	push	{r4, r5, r6, lr}
   2b4e0:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2b4e2:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2b4e4:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2b4e8:	4630      	mov	r0, r6
   2b4ea:	f7ff fff2 	bl	2b4d2 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2b4ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b4f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2b4f4:	2b7f      	cmp	r3, #127	; 0x7f
   2b4f6:	d80b      	bhi.n	2b510 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b4f8:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b4fa:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2b4fc:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b4fe:	f003 031f 	and.w	r3, r3, #31
   2b502:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b504:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2b508:	ea23 0302 	bic.w	r3, r3, r2
   2b50c:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2b510:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2b514:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2b516:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2b518:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2b51c:	6011      	str	r1, [r2, #0]
	node->next = node;
   2b51e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2b522:	2300      	movs	r3, #0
   2b524:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2b526:	4630      	mov	r0, r6
}
   2b528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b52c:	f7f6 bbb0 	b.w	21c90 <z_impl_k_sem_give>

0002b530 <rpmsg_send_ns_message>:
{
   2b530:	b530      	push	{r4, r5, lr}
   2b532:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   2b534:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   2b536:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2b538:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b53a:	2220      	movs	r2, #32
   2b53c:	4601      	mov	r1, r0
   2b53e:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2b540:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b542:	f000 fdb7 	bl	2c0b4 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2b546:	2328      	movs	r3, #40	; 0x28
   2b548:	2201      	movs	r2, #1
   2b54a:	4629      	mov	r1, r5
   2b54c:	e9cd 3200 	strd	r3, r2, [sp]
   2b550:	4620      	mov	r0, r4
   2b552:	2235      	movs	r2, #53	; 0x35
   2b554:	ab02      	add	r3, sp, #8
   2b556:	f7f5 f81b 	bl	20590 <rpmsg_send_offchannel_raw>
}
   2b55a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b55e:	b00d      	add	sp, #52	; 0x34
   2b560:	bd30      	pop	{r4, r5, pc}

0002b562 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2b562:	b128      	cbz	r0, 2b570 <rpmsg_hold_rx_buffer+0xe>
   2b564:	6a00      	ldr	r0, [r0, #32]
   2b566:	b118      	cbz	r0, 2b570 <rpmsg_hold_rx_buffer+0xe>
   2b568:	b111      	cbz	r1, 2b570 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2b56a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2b56c:	b103      	cbz	r3, 2b570 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2b56e:	4718      	bx	r3
}
   2b570:	4770      	bx	lr

0002b572 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2b572:	b130      	cbz	r0, 2b582 <rpmsg_release_rx_buffer+0x10>
   2b574:	6a00      	ldr	r0, [r0, #32]
   2b576:	b120      	cbz	r0, 2b582 <rpmsg_release_rx_buffer+0x10>
   2b578:	b119      	cbz	r1, 2b582 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2b57a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2b57e:	b103      	cbz	r3, 2b582 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2b580:	4718      	bx	r3
}
   2b582:	4770      	bx	lr

0002b584 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2b584:	b130      	cbz	r0, 2b594 <rpmsg_get_tx_payload_buffer+0x10>
   2b586:	6a00      	ldr	r0, [r0, #32]
   2b588:	b120      	cbz	r0, 2b594 <rpmsg_get_tx_payload_buffer+0x10>
   2b58a:	b119      	cbz	r1, 2b594 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2b58c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2b590:	b103      	cbz	r3, 2b594 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2b592:	4718      	bx	r3
}
   2b594:	2000      	movs	r0, #0
   2b596:	4770      	bx	lr

0002b598 <rpmsg_get_endpoint>:
{
   2b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b59c:	4606      	mov	r6, r0
   2b59e:	4688      	mov	r8, r1
   2b5a0:	4617      	mov	r7, r2
   2b5a2:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2b5a4:	6804      	ldr	r4, [r0, #0]
   2b5a6:	42a6      	cmp	r6, r4
   2b5a8:	d101      	bne.n	2b5ae <rpmsg_get_endpoint+0x16>
	return NULL;
   2b5aa:	2500      	movs	r5, #0
   2b5ac:	e023      	b.n	2b5f6 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b5ae:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b5b0:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b5b4:	d002      	beq.n	2b5bc <rpmsg_get_endpoint+0x24>
   2b5b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2b5b8:	42bb      	cmp	r3, r7
   2b5ba:	d01c      	beq.n	2b5f6 <rpmsg_get_endpoint+0x5e>
		if (name)
   2b5bc:	f1b8 0f00 	cmp.w	r8, #0
   2b5c0:	d101      	bne.n	2b5c6 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2b5c2:	6824      	ldr	r4, [r4, #0]
   2b5c4:	e7ef      	b.n	2b5a6 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2b5c6:	2220      	movs	r2, #32
   2b5c8:	4641      	mov	r1, r8
   2b5ca:	4628      	mov	r0, r5
   2b5cc:	f000 fd60 	bl	2c090 <strncmp>
		if (!name || !name_match)
   2b5d0:	2800      	cmp	r0, #0
   2b5d2:	d1f6      	bne.n	2b5c2 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2b5d4:	f1b9 3fff 	cmp.w	r9, #4294967295
   2b5d8:	d002      	beq.n	2b5e0 <rpmsg_get_endpoint+0x48>
   2b5da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b5dc:	454b      	cmp	r3, r9
   2b5de:	d00a      	beq.n	2b5f6 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2b5e0:	1c7b      	adds	r3, r7, #1
   2b5e2:	d00b      	beq.n	2b5fc <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2b5e4:	6824      	ldr	r4, [r4, #0]
   2b5e6:	42b4      	cmp	r4, r6
   2b5e8:	d0df      	beq.n	2b5aa <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b5ea:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b5ee:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b5f2:	429f      	cmp	r7, r3
   2b5f4:	d1e7      	bne.n	2b5c6 <rpmsg_get_endpoint+0x2e>
}
   2b5f6:	4628      	mov	r0, r5
   2b5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2b5fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b5fe:	3301      	adds	r3, #1
   2b600:	d0f9      	beq.n	2b5f6 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2b602:	6824      	ldr	r4, [r4, #0]
   2b604:	42b4      	cmp	r4, r6
   2b606:	d0d0      	beq.n	2b5aa <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b608:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b60c:	e7d6      	b.n	2b5bc <rpmsg_get_endpoint+0x24>

0002b60e <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2b60e:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2b610:	4604      	mov	r4, r0
   2b612:	b190      	cbz	r0, 2b63a <rpmsg_destroy_ept+0x2c>
   2b614:	6a03      	ldr	r3, [r0, #32]
   2b616:	b183      	cbz	r3, 2b63a <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2b618:	7802      	ldrb	r2, [r0, #0]
   2b61a:	b14a      	cbz	r2, 2b630 <rpmsg_destroy_ept+0x22>
   2b61c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2b620:	b133      	cbz	r3, 2b630 <rpmsg_destroy_ept+0x22>
   2b622:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2b628:	d302      	bcc.n	2b630 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2b62a:	2101      	movs	r1, #1
   2b62c:	f7ff ff80 	bl	2b530 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2b630:	4620      	mov	r0, r4
}
   2b632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2b636:	f7ff bf52 	b.w	2b4de <rpmsg_unregister_endpoint>
}
   2b63a:	bd10      	pop	{r4, pc}

0002b63c <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2b63c:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2b640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2b644:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2b648:	4770      	bx	lr

0002b64a <rpmsg_virtio_tx_callback>:
}
   2b64a:	4770      	bx	lr

0002b64c <k_sem_give>:
   2b64c:	f7f6 bb20 	b.w	21c90 <z_impl_k_sem_give>

0002b650 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b650:	f04f 32ff 	mov.w	r2, #4294967295
   2b654:	f04f 33ff 	mov.w	r3, #4294967295
   2b658:	f7f6 bb5e 	b.w	21d18 <z_impl_k_sem_take>

0002b65c <rpmsg_virtio_release_tx_buffer>:
{
   2b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b65e:	460c      	mov	r4, r1
   2b660:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2b662:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2b666:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2b66a:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2b66c:	b2b6      	uxth	r6, r6
   2b66e:	f7ff ffef 	bl	2b650 <__metal_mutex_acquire>
	r_desc->idx = idx;
   2b672:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2b676:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2b67a:	f1a4 0310 	sub.w	r3, r4, #16
   2b67e:	f844 2c0c 	str.w	r2, [r4, #-12]
   2b682:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2b686:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2b68a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2b68e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2b692:	4638      	mov	r0, r7
   2b694:	6013      	str	r3, [r2, #0]
   2b696:	f7ff ffd9 	bl	2b64c <k_sem_give>
}
   2b69a:	2000      	movs	r0, #0
   2b69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b69e <rpmsg_virtio_ns_callback>:
{
   2b69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2b6a2:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2b6a4:	2a28      	cmp	r2, #40	; 0x28
{
   2b6a6:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2b6a8:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2b6ac:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2b6ae:	d126      	bne.n	2b6fe <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b6b0:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2b6b2:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b6b4:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2b6b6:	42a1      	cmp	r1, r4
   2b6b8:	bf28      	it	cs
   2b6ba:	f04f 31ff 	movcs.w	r1, #4294967295
   2b6be:	2320      	movs	r3, #32
   2b6c0:	466a      	mov	r2, sp
   2b6c2:	f7ff fcb1 	bl	2b028 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2b6c6:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2b6ca:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2b6ce:	4630      	mov	r0, r6
   2b6d0:	f7ff ffbe 	bl	2b650 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b6d4:	4643      	mov	r3, r8
   2b6d6:	f04f 32ff 	mov.w	r2, #4294967295
   2b6da:	4669      	mov	r1, sp
   2b6dc:	4628      	mov	r0, r5
   2b6de:	f7ff ff5b 	bl	2b598 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b6e4:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b6e6:	07db      	lsls	r3, r3, #31
   2b6e8:	d519      	bpl.n	2b71e <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2b6ea:	b960      	cbnz	r0, 2b706 <rpmsg_virtio_ns_callback+0x68>
   2b6ec:	4630      	mov	r0, r6
   2b6ee:	f7ff ffad 	bl	2b64c <k_sem_give>
		if (rdev->ns_unbind_cb)
   2b6f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2b6f4:	b11b      	cbz	r3, 2b6fe <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2b6f6:	4642      	mov	r2, r8
   2b6f8:	4669      	mov	r1, sp
   2b6fa:	4628      	mov	r0, r5
   2b6fc:	4798      	blx	r3
}
   2b6fe:	2000      	movs	r0, #0
   2b700:	b008      	add	sp, #32
   2b702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2b706:	f04f 33ff 	mov.w	r3, #4294967295
   2b70a:	6283      	str	r3, [r0, #40]	; 0x28
   2b70c:	4630      	mov	r0, r6
   2b70e:	f7ff ff9d 	bl	2b64c <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2b712:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b714:	2b00      	cmp	r3, #0
   2b716:	d0ec      	beq.n	2b6f2 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2b718:	4620      	mov	r0, r4
   2b71a:	4798      	blx	r3
   2b71c:	e7e9      	b.n	2b6f2 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2b71e:	b920      	cbnz	r0, 2b72a <rpmsg_virtio_ns_callback+0x8c>
   2b720:	4630      	mov	r0, r6
   2b722:	f7ff ff93 	bl	2b64c <k_sem_give>
			if (rdev->ns_bind_cb)
   2b726:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2b728:	e7e4      	b.n	2b6f4 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2b72a:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2b72e:	4630      	mov	r0, r6
   2b730:	f7ff ff8c 	bl	2b64c <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2b734:	e7e3      	b.n	2b6fe <rpmsg_virtio_ns_callback+0x60>

0002b736 <rpmsg_virtio_get_rx_buffer>:
{
   2b736:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2b738:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2b73c:	4613      	mov	r3, r2
   2b73e:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2b740:	b925      	cbnz	r5, 2b74c <rpmsg_virtio_get_rx_buffer+0x16>
}
   2b742:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2b744:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2b748:	f7ff bde3 	b.w	2b312 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2b74c:	2d01      	cmp	r5, #1
   2b74e:	d106      	bne.n	2b75e <rpmsg_virtio_get_rx_buffer+0x28>
}
   2b750:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2b752:	460a      	mov	r2, r1
   2b754:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2b758:	4619      	mov	r1, r3
   2b75a:	f7ff be19 	b.w	2b390 <virtqueue_get_available_buffer>
}
   2b75e:	2000      	movs	r0, #0
   2b760:	bc30      	pop	{r4, r5}
   2b762:	4770      	bx	lr

0002b764 <rpmsg_virtio_return_buffer>:
{
   2b764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b766:	460c      	mov	r4, r1
   2b768:	4619      	mov	r1, r3
   2b76a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2b76e:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2b770:	b95d      	cbnz	r5, 2b78a <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2b772:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2b774:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2b778:	2301      	movs	r3, #1
   2b77a:	462a      	mov	r2, r5
   2b77c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2b780:	a902      	add	r1, sp, #8
   2b782:	f7ff fd6a 	bl	2b25a <virtqueue_add_buffer>
}
   2b786:	b004      	add	sp, #16
   2b788:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2b78a:	2d01      	cmp	r5, #1
   2b78c:	d1fb      	bne.n	2b786 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2b78e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2b792:	b004      	add	sp, #16
   2b794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2b798:	f7f4 bede 	b.w	20558 <virtqueue_add_consumed_buffer>

0002b79c <rpmsg_virtio_release_rx_buffer>:
{
   2b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b79e:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2b7a0:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2b7a4:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2b7a8:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2b7aa:	b2b6      	uxth	r6, r6
{
   2b7ac:	460d      	mov	r5, r1
   2b7ae:	f7ff ff4f 	bl	2b650 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2b7b2:	4631      	mov	r1, r6
   2b7b4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2b7b8:	f7ff fde5 	bl	2b386 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2b7bc:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2b7be:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2b7c0:	f1a5 0110 	sub.w	r1, r5, #16
   2b7c4:	4620      	mov	r0, r4
   2b7c6:	f7ff ffcd 	bl	2b764 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2b7ca:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2b7ce:	f7ff fe31 	bl	2b434 <virtqueue_kick>
   2b7d2:	4638      	mov	r0, r7
}
   2b7d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b7d8:	f7ff bf38 	b.w	2b64c <k_sem_give>

0002b7dc <rpmsg_virtio_shm_pool_get_buffer>:
{
   2b7dc:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2b7de:	b148      	cbz	r0, 2b7f4 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2b7e0:	b149      	cbz	r1, 2b7f6 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2b7e2:	6843      	ldr	r3, [r0, #4]
   2b7e4:	428b      	cmp	r3, r1
   2b7e6:	d306      	bcc.n	2b7f6 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2b7e8:	6882      	ldr	r2, [r0, #8]
   2b7ea:	6804      	ldr	r4, [r0, #0]
   2b7ec:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2b7ee:	1a5b      	subs	r3, r3, r1
   2b7f0:	6043      	str	r3, [r0, #4]
	return buffer;
   2b7f2:	18a0      	adds	r0, r4, r2
}
   2b7f4:	bd10      	pop	{r4, pc}
		return NULL;
   2b7f6:	2000      	movs	r0, #0
   2b7f8:	e7fc      	b.n	2b7f4 <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002b7fa <rpmsg_virtio_get_tx_payload_buffer>:
{
   2b7fa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2b7fe:	4605      	mov	r5, r0
   2b800:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2b804:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2b806:	6a03      	ldr	r3, [r0, #32]
   2b808:	4617      	mov	r7, r2
   2b80a:	681b      	ldr	r3, [r3, #0]
   2b80c:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2b80e:	0743      	lsls	r3, r0, #29
   2b810:	d403      	bmi.n	2b81a <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2b812:	2000      	movs	r0, #0
}
   2b814:	b002      	add	sp, #8
   2b816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2b81a:	f643 2398 	movw	r3, #15000	; 0x3a98
   2b81e:	2f00      	cmp	r7, #0
   2b820:	bf18      	it	ne
   2b822:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2b824:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2b828:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2b82c:	4640      	mov	r0, r8
   2b82e:	f7ff ff0f 	bl	2b650 <__metal_mutex_acquire>
	return list->next == list;
   2b832:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2b836:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2b83a:	4554      	cmp	r4, sl
   2b83c:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2b840:	d025      	beq.n	2b88e <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   2b842:	b324      	cbz	r4, 2b88e <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   2b844:	e9d4 2300 	ldrd	r2, r3, [r4]
   2b848:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2b84a:	6822      	ldr	r2, [r4, #0]
   2b84c:	601a      	str	r2, [r3, #0]
	node->next = node;
   2b84e:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2b852:	f1b9 0f00 	cmp.w	r9, #0
   2b856:	d10e      	bne.n	2b876 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2b858:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2b85c:	6033      	str	r3, [r6, #0]
   2b85e:	4640      	mov	r0, r8
   2b860:	f7ff fef4 	bl	2b64c <k_sem_give>
	rp_hdr->reserved = idx;
   2b864:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2b868:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2b86c:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2b86e:	6833      	ldr	r3, [r6, #0]
   2b870:	3b10      	subs	r3, #16
   2b872:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2b874:	e7ce      	b.n	2b814 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   2b876:	f1b9 0f01 	cmp.w	r9, #1
   2b87a:	d1f0      	bne.n	2b85e <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2b87c:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2b87e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   2b882:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2b886:	f7ff fd7e 	bl	2b386 <virtqueue_get_buffer_length>
   2b88a:	6030      	str	r0, [r6, #0]
   2b88c:	e7e7      	b.n	2b85e <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   2b88e:	f1b9 0f00 	cmp.w	r9, #0
   2b892:	d12a      	bne.n	2b8ea <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2b894:	4631      	mov	r1, r6
   2b896:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2b89a:	f10d 0206 	add.w	r2, sp, #6
   2b89e:	f7ff fd38 	bl	2b312 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   2b8a2:	4604      	mov	r4, r0
   2b8a4:	2800      	cmp	r0, #0
   2b8a6:	d1da      	bne.n	2b85e <rpmsg_virtio_get_tx_payload_buffer+0x64>
   2b8a8:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   2b8ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   2b8ae:	b953      	cbnz	r3, 2b8c6 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   2b8b0:	4640      	mov	r0, r8
   2b8b2:	f7ff fecb 	bl	2b64c <k_sem_give>
		if (rp_hdr || !tick_count)
   2b8b6:	2f00      	cmp	r7, #0
   2b8b8:	d0ab      	beq.n	2b812 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   2b8ba:	2021      	movs	r0, #33	; 0x21
   2b8bc:	2100      	movs	r1, #0
   2b8be:	f7f8 f8db 	bl	23a78 <z_impl_k_sleep>
		tick_count--;
   2b8c2:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   2b8c4:	e7b2      	b.n	2b82c <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2b8c6:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   2b8ca:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   2b8ce:	f7ff ff85 	bl	2b7dc <rpmsg_virtio_shm_pool_get_buffer>
   2b8d2:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   2b8d4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   2b8d8:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   2b8dc:	6033      	str	r3, [r6, #0]
   2b8de:	4640      	mov	r0, r8
   2b8e0:	f7ff feb4 	bl	2b64c <k_sem_give>
		if (rp_hdr || !tick_count)
   2b8e4:	2c00      	cmp	r4, #0
   2b8e6:	d0e6      	beq.n	2b8b6 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   2b8e8:	e7bc      	b.n	2b864 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   2b8ea:	f1b9 0f01 	cmp.w	r9, #1
   2b8ee:	d1df      	bne.n	2b8b0 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2b8f0:	4632      	mov	r2, r6
   2b8f2:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2b8f6:	f10d 0106 	add.w	r1, sp, #6
   2b8fa:	f7ff fd49 	bl	2b390 <virtqueue_get_available_buffer>
   2b8fe:	4604      	mov	r4, r0
   2b900:	e7ed      	b.n	2b8de <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0002b902 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   2b902:	b120      	cbz	r0, 2b90e <rpmsg_virtio_init_shm_pool+0xc>
   2b904:	b119      	cbz	r1, 2b90e <rpmsg_virtio_init_shm_pool+0xc>
   2b906:	b112      	cbz	r2, 2b90e <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   2b908:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   2b90c:	6001      	str	r1, [r0, #0]
}
   2b90e:	4770      	bx	lr

0002b910 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   2b910:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   2b912:	4604      	mov	r4, r0
   2b914:	b918      	cbnz	r0, 2b91e <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   2b916:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   2b918:	3834      	subs	r0, #52	; 0x34
   2b91a:	f7ff fe78 	bl	2b60e <rpmsg_destroy_ept>
	return list->next == list;
   2b91e:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   2b920:	4284      	cmp	r4, r0
   2b922:	d1f9      	bne.n	2b918 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   2b924:	2300      	movs	r3, #0
		rvdev->svq = 0;
   2b926:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   2b92a:	e7f4      	b.n	2b916 <rpmsg_deinit_vdev+0x6>

0002b92c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2b92c:	f7f5 b986 	b.w	20c3c <_DoInit>

0002b930 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2b930:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2b932:	f7ff fffb 	bl	2b92c <SEGGER_RTT_Init>

	return 0;
}
   2b936:	2000      	movs	r0, #0
   2b938:	bd08      	pop	{r3, pc}

0002b93a <z_device_state_init>:
}
   2b93a:	4770      	bx	lr

0002b93c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2b93c:	b140      	cbz	r0, 2b950 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2b93e:	68c3      	ldr	r3, [r0, #12]
   2b940:	7858      	ldrb	r0, [r3, #1]
   2b942:	f010 0001 	ands.w	r0, r0, #1
   2b946:	bf1e      	ittt	ne
   2b948:	7818      	ldrbne	r0, [r3, #0]
   2b94a:	fab0 f080 	clzne	r0, r0
   2b94e:	0940      	lsrne	r0, r0, #5
}
   2b950:	4770      	bx	lr

0002b952 <z_early_memset>:
   2b952:	f000 ba6d 	b.w	2be30 <memset>

0002b956 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b956:	f000 ba31 	b.w	2bdbc <memcpy>

0002b95a <k_heap_init>:
{
   2b95a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2b95c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2b960:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2b964:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2b966:	f7e1 b93f 	b.w	cbe8 <sys_heap_init>

0002b96a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2b96a:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2b96e:	4313      	orrs	r3, r2
   2b970:	f013 0303 	ands.w	r3, r3, #3
   2b974:	d10c      	bne.n	2b990 <create_free_list+0x26>
	slab->free_list = NULL;
   2b976:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b978:	68c1      	ldr	r1, [r0, #12]
   2b97a:	4299      	cmp	r1, r3
   2b97c:	d801      	bhi.n	2b982 <create_free_list+0x18>
	return 0;
   2b97e:	2000      	movs	r0, #0
   2b980:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2b982:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b984:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2b986:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2b988:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2b98a:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   2b98c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2b98e:	e7f3      	b.n	2b978 <create_free_list+0xe>
		return -EINVAL;
   2b990:	f06f 0015 	mvn.w	r0, #21
}
   2b994:	4770      	bx	lr

0002b996 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b996:	f3ef 8005 	mrs	r0, IPSR
}
   2b99a:	3800      	subs	r0, #0
   2b99c:	bf18      	it	ne
   2b99e:	2001      	movne	r0, #1
   2b9a0:	4770      	bx	lr

0002b9a2 <z_impl_k_thread_name_set>:
}
   2b9a2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2b9a6:	4770      	bx	lr

0002b9a8 <k_thread_name_get>:
}
   2b9a8:	2000      	movs	r0, #0
   2b9aa:	4770      	bx	lr

0002b9ac <z_impl_k_thread_start>:
	z_sched_start(thread);
   2b9ac:	f7f7 b9c4 	b.w	22d38 <z_sched_start>

0002b9b0 <z_pm_save_idle_exit>:
{
   2b9b0:	b508      	push	{r3, lr}
	pm_system_resume();
   2b9b2:	f7e4 fd17 	bl	103e4 <pm_system_resume>
}
   2b9b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2b9ba:	f7ff b8be 	b.w	2ab3a <sys_clock_idle_exit>

0002b9be <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2b9be:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2b9c2:	428b      	cmp	r3, r1
   2b9c4:	d001      	beq.n	2b9ca <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2b9c6:	f7f7 bcb9 	b.w	2333c <z_set_prio>
}
   2b9ca:	2000      	movs	r0, #0
   2b9cc:	4770      	bx	lr

0002b9ce <z_impl_k_mutex_init>:
{
   2b9ce:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2b9d0:	2000      	movs	r0, #0
   2b9d2:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2b9d6:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2b9da:	4770      	bx	lr

0002b9dc <z_queue_node_peek>:
{
   2b9dc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2b9de:	4604      	mov	r4, r0
   2b9e0:	b130      	cbz	r0, 2b9f0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b9e2:	6802      	ldr	r2, [r0, #0]
   2b9e4:	0793      	lsls	r3, r2, #30
   2b9e6:	d003      	beq.n	2b9f0 <z_queue_node_peek+0x14>
		ret = anode->data;
   2b9e8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2b9ea:	b109      	cbz	r1, 2b9f0 <z_queue_node_peek+0x14>
			k_free(anode);
   2b9ec:	f000 f9bc 	bl	2bd68 <k_free>
}
   2b9f0:	4620      	mov	r0, r4
   2b9f2:	bd10      	pop	{r4, pc}

0002b9f4 <z_impl_k_queue_init>:
	list->head = NULL;
   2b9f4:	2300      	movs	r3, #0
	list->tail = NULL;
   2b9f6:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2b9fa:	6083      	str	r3, [r0, #8]
   2b9fc:	f100 030c 	add.w	r3, r0, #12
   2ba00:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2ba04:	f100 0314 	add.w	r3, r0, #20
   2ba08:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2ba0c:	4770      	bx	lr

0002ba0e <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2ba0e:	2301      	movs	r3, #1
{
   2ba10:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2ba12:	9300      	str	r3, [sp, #0]
   2ba14:	2300      	movs	r3, #0
{
   2ba16:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ba18:	4619      	mov	r1, r3
   2ba1a:	f7f6 f835 	bl	21a88 <queue_insert>
}
   2ba1e:	b003      	add	sp, #12
   2ba20:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba24 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2ba24:	2300      	movs	r3, #0
{
   2ba26:	b507      	push	{r0, r1, r2, lr}
   2ba28:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2ba2a:	9300      	str	r3, [sp, #0]
   2ba2c:	4619      	mov	r1, r3
   2ba2e:	f7f6 f82b 	bl	21a88 <queue_insert>
}
   2ba32:	b003      	add	sp, #12
   2ba34:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba38 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ba38:	b15a      	cbz	r2, 2ba52 <z_impl_k_sem_init+0x1a>
   2ba3a:	428a      	cmp	r2, r1
   2ba3c:	d309      	bcc.n	2ba52 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ba3e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2ba42:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2ba46:	e9c0 0000 	strd	r0, r0, [r0]
   2ba4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2ba4e:	2000      	movs	r0, #0
   2ba50:	4770      	bx	lr
		return -EINVAL;
   2ba52:	f06f 0015 	mvn.w	r0, #21
}
   2ba56:	4770      	bx	lr

0002ba58 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2ba58:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2ba5a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2ba5c:	408b      	lsls	r3, r1
   2ba5e:	ea22 0303 	bic.w	r3, r2, r3
   2ba62:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2ba64:	fa22 f001 	lsr.w	r0, r2, r1
}
   2ba68:	f000 0001 	and.w	r0, r0, #1
   2ba6c:	4770      	bx	lr

0002ba6e <unschedule_locked>:
{
   2ba6e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ba70:	2103      	movs	r1, #3
{
   2ba72:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ba74:	300c      	adds	r0, #12
   2ba76:	f7ff ffef 	bl	2ba58 <flag_test_and_clear>
   2ba7a:	4604      	mov	r4, r0
   2ba7c:	b118      	cbz	r0, 2ba86 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2ba7e:	f105 0010 	add.w	r0, r5, #16
   2ba82:	f7f8 fa99 	bl	23fb8 <z_abort_timeout>
}
   2ba86:	4620      	mov	r0, r4
   2ba88:	bd38      	pop	{r3, r4, r5, pc}

0002ba8a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2ba8a:	b120      	cbz	r0, 2ba96 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2ba8c:	2200      	movs	r2, #0
   2ba8e:	3090      	adds	r0, #144	; 0x90
   2ba90:	4611      	mov	r1, r2
   2ba92:	f7f8 b8f3 	b.w	23c7c <z_sched_wake>
}
   2ba96:	4770      	bx	lr

0002ba98 <cancel_async_locked>:
{
   2ba98:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2ba9a:	68c3      	ldr	r3, [r0, #12]
{
   2ba9c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ba9e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2baa2:	079b      	lsls	r3, r3, #30
   2baa4:	d416      	bmi.n	2bad4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2baa6:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2baa8:	2102      	movs	r1, #2
   2baaa:	300c      	adds	r0, #12
   2baac:	f7ff ffd4 	bl	2ba58 <flag_test_and_clear>
   2bab0:	b180      	cbz	r0, 2bad4 <cancel_async_locked+0x3c>
	return list->head;
   2bab2:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bab6:	b16a      	cbz	r2, 2bad4 <cancel_async_locked+0x3c>
   2bab8:	4294      	cmp	r4, r2
   2baba:	d11d      	bne.n	2baf8 <cancel_async_locked+0x60>
	return node->next;
   2babc:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2babe:	b99e      	cbnz	r6, 2bae8 <cancel_async_locked+0x50>
   2bac0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   2bac4:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2bac8:	429c      	cmp	r4, r3
   2baca:	d101      	bne.n	2bad0 <cancel_async_locked+0x38>
	list->tail = node;
   2bacc:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   2bad0:	2300      	movs	r3, #0
   2bad2:	6023      	str	r3, [r4, #0]
	return *flagp;
   2bad4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2bad6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2bada:	bf1e      	ittt	ne
   2badc:	f043 0302 	orrne.w	r3, r3, #2
   2bae0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2bae2:	f040 0002 	orrne.w	r0, r0, #2
}
   2bae6:	bd70      	pop	{r4, r5, r6, pc}
   2bae8:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2baea:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   2baee:	4294      	cmp	r4, r2
	list->tail = node;
   2baf0:	bf08      	it	eq
   2baf2:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   2baf6:	e7eb      	b.n	2bad0 <cancel_async_locked+0x38>
	return node->next;
   2baf8:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bafa:	6812      	ldr	r2, [r2, #0]
   2bafc:	e7db      	b.n	2bab6 <cancel_async_locked+0x1e>

0002bafe <k_work_submit_to_queue>:
{
   2bafe:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2bb00:	f7f6 fbda 	bl	222b8 <z_work_submit_to_queue>
	if (ret > 0) {
   2bb04:	1e04      	subs	r4, r0, #0
   2bb06:	dd09      	ble.n	2bb1c <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2bb08:	f04f 0320 	mov.w	r3, #32
   2bb0c:	f3ef 8011 	mrs	r0, BASEPRI
   2bb10:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb14:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2bb18:	f000 f80d 	bl	2bb36 <z_reschedule_irqlock>
}
   2bb1c:	4620      	mov	r0, r4
   2bb1e:	bd10      	pop	{r4, pc}

0002bb20 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2bb20:	f7f6 bb84 	b.w	2222c <k_work_busy_get>

0002bb24 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2bb24:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2bb28:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2bb2c:	4283      	cmp	r3, r0
		return b2 - b1;
   2bb2e:	bf14      	ite	ne
   2bb30:	1ac0      	subne	r0, r0, r3
	return 0;
   2bb32:	2000      	moveq	r0, #0
}
   2bb34:	4770      	bx	lr

0002bb36 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2bb36:	4603      	mov	r3, r0
   2bb38:	b920      	cbnz	r0, 2bb44 <z_reschedule_irqlock+0xe>
   2bb3a:	f3ef 8205 	mrs	r2, IPSR
   2bb3e:	b90a      	cbnz	r2, 2bb44 <z_reschedule_irqlock+0xe>
   2bb40:	f7e5 b850 	b.w	10be4 <arch_swap>
	__asm__ volatile(
   2bb44:	f383 8811 	msr	BASEPRI, r3
   2bb48:	f3bf 8f6f 	isb	sy
}
   2bb4c:	4770      	bx	lr

0002bb4e <z_reschedule_unlocked>:
	__asm__ volatile(
   2bb4e:	f04f 0320 	mov.w	r3, #32
   2bb52:	f3ef 8011 	mrs	r0, BASEPRI
   2bb56:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb5a:	f3bf 8f6f 	isb	sy
   2bb5e:	f7ff bfea 	b.w	2bb36 <z_reschedule_irqlock>

0002bb62 <z_unpend_all>:
{
   2bb62:	b538      	push	{r3, r4, r5, lr}
   2bb64:	4605      	mov	r5, r0
	int need_sched = 0;
   2bb66:	2000      	movs	r0, #0
	return list->head == list;
   2bb68:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bb6a:	42a5      	cmp	r5, r4
   2bb6c:	d000      	beq.n	2bb70 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2bb6e:	b904      	cbnz	r4, 2bb72 <z_unpend_all+0x10>
}
   2bb70:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2bb72:	4620      	mov	r0, r4
   2bb74:	f7f7 fcfc 	bl	23570 <z_unpend_thread>
		z_ready_thread(thread);
   2bb78:	4620      	mov	r0, r4
   2bb7a:	f7f7 f80f 	bl	22b9c <z_ready_thread>
		need_sched = 1;
   2bb7e:	2001      	movs	r0, #1
   2bb80:	e7f2      	b.n	2bb68 <z_unpend_all+0x6>

0002bb82 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2bb82:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2bb84:	f7f8 fb9a 	bl	242bc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2bb88:	bd08      	pop	{r3, pc}

0002bb8a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2bb8a:	f7f8 bb97 	b.w	242bc <sys_clock_tick_get>

0002bb8e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2bb8e:	b108      	cbz	r0, 2bb94 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2bb90:	f7e2 b9d0 	b.w	df34 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2bb94:	4770      	bx	lr

0002bb96 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bb96:	f1b1 3fff 	cmp.w	r1, #4294967295
   2bb9a:	bf08      	it	eq
   2bb9c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2bba0:	b538      	push	{r3, r4, r5, lr}
   2bba2:	460c      	mov	r4, r1
   2bba4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bba6:	d014      	beq.n	2bbd2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bba8:	4308      	orrs	r0, r1
   2bbaa:	d103      	bne.n	2bbb4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2bbac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2bbb0:	f7f8 bb84 	b.w	242bc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2bbb4:	f06f 0001 	mvn.w	r0, #1
   2bbb8:	f04f 33ff 	mov.w	r3, #4294967295
   2bbbc:	1b40      	subs	r0, r0, r5
   2bbbe:	eb63 0101 	sbc.w	r1, r3, r1
   2bbc2:	2900      	cmp	r1, #0
   2bbc4:	da04      	bge.n	2bbd0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2bbc6:	f7f8 fb79 	bl	242bc <sys_clock_tick_get>
   2bbca:	1940      	adds	r0, r0, r5
   2bbcc:	eb41 0104 	adc.w	r1, r1, r4
}
   2bbd0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2bbd2:	f04f 30ff 	mov.w	r0, #4294967295
   2bbd6:	4601      	mov	r1, r0
   2bbd8:	e7fa      	b.n	2bbd0 <sys_clock_timeout_end_calc+0x3a>

0002bbda <k_timer_init>:
	timer->status = 0U;
   2bbda:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2bbdc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2bbe0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2bbe4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2bbe8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2bbec:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2bbee:	6343      	str	r3, [r0, #52]	; 0x34
}
   2bbf0:	4770      	bx	lr

0002bbf2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2bbf2:	b510      	push	{r4, lr}
   2bbf4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2bbf6:	f7f8 f9df 	bl	23fb8 <z_abort_timeout>

	if (inactive) {
   2bbfa:	b9b0      	cbnz	r0, 2bc2a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2bbfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2bbfe:	b10b      	cbz	r3, 2bc04 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2bc00:	4620      	mov	r0, r4
   2bc02:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2bc04:	f104 0018 	add.w	r0, r4, #24
   2bc08:	f7f7 fd54 	bl	236b4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2bc0c:	b168      	cbz	r0, 2bc2a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2bc0e:	f7f6 ffc5 	bl	22b9c <z_ready_thread>
   2bc12:	f04f 0320 	mov.w	r3, #32
   2bc16:	f3ef 8011 	mrs	r0, BASEPRI
   2bc1a:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc1e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2bc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bc26:	f7ff bf86 	b.w	2bb36 <z_reschedule_irqlock>
   2bc2a:	bd10      	pop	{r4, pc}

0002bc2c <add_event>:
{
   2bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc2e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2bc30:	e9d0 1300 	ldrd	r1, r3, [r0]
   2bc34:	4288      	cmp	r0, r1
   2bc36:	4604      	mov	r4, r0
   2bc38:	d105      	bne.n	2bc46 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2bc3a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2bc3c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2bc40:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2bc42:	6065      	str	r5, [r4, #4]
   2bc44:	e01d      	b.n	2bc82 <add_event+0x56>
	if ((pending == NULL) ||
   2bc46:	2b00      	cmp	r3, #0
   2bc48:	d0f7      	beq.n	2bc3a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bc4a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bc4c:	b100      	cbz	r0, 2bc50 <add_event+0x24>
   2bc4e:	3860      	subs	r0, #96	; 0x60
   2bc50:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bc54:	4639      	mov	r1, r7
   2bc56:	f7ff ff65 	bl	2bb24 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2bc5a:	2800      	cmp	r0, #0
   2bc5c:	dced      	bgt.n	2bc3a <add_event+0xe>
	return list->head == list;
   2bc5e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bc60:	42b4      	cmp	r4, r6
   2bc62:	d0ea      	beq.n	2bc3a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2bc64:	2e00      	cmp	r6, #0
   2bc66:	d0e8      	beq.n	2bc3a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2bc68:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bc6a:	b101      	cbz	r1, 2bc6e <add_event+0x42>
   2bc6c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2bc6e:	4638      	mov	r0, r7
   2bc70:	f7ff ff58 	bl	2bb24 <z_sched_prio_cmp>
   2bc74:	2800      	cmp	r0, #0
   2bc76:	dd05      	ble.n	2bc84 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2bc78:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2bc7a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2bc7e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2bc80:	6075      	str	r5, [r6, #4]
}
   2bc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2bc84:	6863      	ldr	r3, [r4, #4]
   2bc86:	429e      	cmp	r6, r3
   2bc88:	d0d7      	beq.n	2bc3a <add_event+0xe>
   2bc8a:	6836      	ldr	r6, [r6, #0]
   2bc8c:	e7ea      	b.n	2bc64 <add_event+0x38>

0002bc8e <signal_poll_event>:
{
   2bc8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2bc92:	6884      	ldr	r4, [r0, #8]
{
   2bc94:	4605      	mov	r5, r0
   2bc96:	460e      	mov	r6, r1
	if (poller != NULL) {
   2bc98:	b144      	cbz	r4, 2bcac <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2bc9a:	7863      	ldrb	r3, [r4, #1]
   2bc9c:	2b01      	cmp	r3, #1
   2bc9e:	d12e      	bne.n	2bcfe <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2bca0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2bca4:	f013 0302 	ands.w	r3, r3, #2
   2bca8:	d10a      	bne.n	2bcc0 <signal_poll_event+0x32>
		poller->is_polling = false;
   2bcaa:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2bcac:	2000      	movs	r0, #0
	event->state |= state;
   2bcae:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2bcb0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2bcb2:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2bcb6:	4316      	orrs	r6, r2
   2bcb8:	f366 3394 	bfi	r3, r6, #14, #7
   2bcbc:	60eb      	str	r3, [r5, #12]
	return retcode;
   2bcbe:	e03e      	b.n	2bd3e <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2bcc0:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2bcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
   2bcc8:	bf08      	it	eq
   2bcca:	f112 0f02 	cmneq.w	r2, #2
   2bcce:	d032      	beq.n	2bd36 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bcd0:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2bcd4:	4640      	mov	r0, r8
   2bcd6:	f7f7 fc4b 	bl	23570 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2bcda:	2e08      	cmp	r6, #8
   2bcdc:	bf0c      	ite	eq
   2bcde:	f06f 0303 	mvneq.w	r3, #3
   2bce2:	2300      	movne	r3, #0
   2bce4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2bce6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2bcea:	06db      	lsls	r3, r3, #27
   2bcec:	d109      	bne.n	2bd02 <signal_poll_event+0x74>
   2bcee:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2bcf2:	b937      	cbnz	r7, 2bd02 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2bcf4:	4640      	mov	r0, r8
   2bcf6:	f7f6 ff51 	bl	22b9c <z_ready_thread>
		poller->is_polling = false;
   2bcfa:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2bcfc:	e7d6      	b.n	2bcac <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2bcfe:	2b02      	cmp	r3, #2
   2bd00:	d001      	beq.n	2bd06 <signal_poll_event+0x78>
		poller->is_polling = false;
   2bd02:	2300      	movs	r3, #0
   2bd04:	e7d1      	b.n	2bcaa <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2bd06:	7823      	ldrb	r3, [r4, #0]
   2bd08:	2b00      	cmp	r3, #0
   2bd0a:	d0cf      	beq.n	2bcac <signal_poll_event+0x1e>
   2bd0c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2bd10:	2f00      	cmp	r7, #0
   2bd12:	d0f2      	beq.n	2bcfa <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2bd14:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2bd18:	f1a4 0914 	sub.w	r9, r4, #20
   2bd1c:	f104 0014 	add.w	r0, r4, #20
   2bd20:	f7f8 f94a 	bl	23fb8 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2bd24:	4649      	mov	r1, r9
   2bd26:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2bd28:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2bd2c:	f7f6 fac4 	bl	222b8 <z_work_submit_to_queue>
		poller->is_polling = false;
   2bd30:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2bd34:	e7ba      	b.n	2bcac <signal_poll_event+0x1e>
		poller->is_polling = false;
   2bd36:	2300      	movs	r3, #0
		return -EAGAIN;
   2bd38:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2bd3c:	7023      	strb	r3, [r4, #0]
}
   2bd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002bd42 <z_handle_obj_poll_events>:
{
   2bd42:	4603      	mov	r3, r0
	return list->head == list;
   2bd44:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2bd46:	4283      	cmp	r3, r0
   2bd48:	d008      	beq.n	2bd5c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2bd4a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2bd4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2bd50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2bd52:	2300      	movs	r3, #0
	node->prev = NULL;
   2bd54:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2bd58:	f7ff bf99 	b.w	2bc8e <signal_poll_event>
}
   2bd5c:	4770      	bx	lr

0002bd5e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2bd5e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2bd60:	e9c0 0000 	strd	r0, r0, [r0]
   2bd64:	6083      	str	r3, [r0, #8]
}
   2bd66:	4770      	bx	lr

0002bd68 <k_free>:
	if (ptr != NULL) {
   2bd68:	b120      	cbz	r0, 2bd74 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2bd6a:	1f01      	subs	r1, r0, #4
   2bd6c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2bd70:	f7f5 ba72 	b.w	21258 <k_heap_free>
}
   2bd74:	4770      	bx	lr

0002bd76 <k_malloc>:
{
   2bd76:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2bd78:	2004      	movs	r0, #4
   2bd7a:	f7f8 bf65 	b.w	24c48 <k_aligned_alloc>

0002bd7e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2bd7e:	4770      	bx	lr

0002bd80 <memchr>:
   2bd80:	b2c9      	uxtb	r1, r1
   2bd82:	4603      	mov	r3, r0
   2bd84:	4402      	add	r2, r0
   2bd86:	b510      	push	{r4, lr}
   2bd88:	4293      	cmp	r3, r2
   2bd8a:	4618      	mov	r0, r3
   2bd8c:	d101      	bne.n	2bd92 <memchr+0x12>
   2bd8e:	2000      	movs	r0, #0
   2bd90:	e003      	b.n	2bd9a <memchr+0x1a>
   2bd92:	7804      	ldrb	r4, [r0, #0]
   2bd94:	3301      	adds	r3, #1
   2bd96:	428c      	cmp	r4, r1
   2bd98:	d1f6      	bne.n	2bd88 <memchr+0x8>
   2bd9a:	bd10      	pop	{r4, pc}

0002bd9c <memcmp>:
   2bd9c:	3901      	subs	r1, #1
   2bd9e:	4402      	add	r2, r0
   2bda0:	b510      	push	{r4, lr}
   2bda2:	4290      	cmp	r0, r2
   2bda4:	d101      	bne.n	2bdaa <memcmp+0xe>
   2bda6:	2000      	movs	r0, #0
   2bda8:	e005      	b.n	2bdb6 <memcmp+0x1a>
   2bdaa:	7803      	ldrb	r3, [r0, #0]
   2bdac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2bdb0:	42a3      	cmp	r3, r4
   2bdb2:	d001      	beq.n	2bdb8 <memcmp+0x1c>
   2bdb4:	1b18      	subs	r0, r3, r4
   2bdb6:	bd10      	pop	{r4, pc}
   2bdb8:	3001      	adds	r0, #1
   2bdba:	e7f2      	b.n	2bda2 <memcmp+0x6>

0002bdbc <memcpy>:
   2bdbc:	440a      	add	r2, r1
   2bdbe:	1e43      	subs	r3, r0, #1
   2bdc0:	4291      	cmp	r1, r2
   2bdc2:	d100      	bne.n	2bdc6 <memcpy+0xa>
   2bdc4:	4770      	bx	lr
   2bdc6:	b510      	push	{r4, lr}
   2bdc8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2bdcc:	4291      	cmp	r1, r2
   2bdce:	f803 4f01 	strb.w	r4, [r3, #1]!
   2bdd2:	d1f9      	bne.n	2bdc8 <memcpy+0xc>
   2bdd4:	bd10      	pop	{r4, pc}

0002bdd6 <__memcpy_chk>:
   2bdd6:	429a      	cmp	r2, r3
   2bdd8:	b508      	push	{r3, lr}
   2bdda:	d901      	bls.n	2bde0 <__memcpy_chk+0xa>
   2bddc:	f7e5 fe90 	bl	11b00 <__chk_fail>
   2bde0:	4281      	cmp	r1, r0
   2bde2:	d804      	bhi.n	2bdee <__memcpy_chk+0x18>
   2bde4:	188b      	adds	r3, r1, r2
   2bde6:	4298      	cmp	r0, r3
   2bde8:	d3f8      	bcc.n	2bddc <__memcpy_chk+0x6>
   2bdea:	4281      	cmp	r1, r0
   2bdec:	d102      	bne.n	2bdf4 <__memcpy_chk+0x1e>
   2bdee:	1883      	adds	r3, r0, r2
   2bdf0:	4299      	cmp	r1, r3
   2bdf2:	d3f3      	bcc.n	2bddc <__memcpy_chk+0x6>
   2bdf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2bdf8:	f7ff bfe0 	b.w	2bdbc <memcpy>

0002bdfc <memmove>:
   2bdfc:	4288      	cmp	r0, r1
   2bdfe:	b510      	push	{r4, lr}
   2be00:	eb01 0402 	add.w	r4, r1, r2
   2be04:	d902      	bls.n	2be0c <memmove+0x10>
   2be06:	4284      	cmp	r4, r0
   2be08:	4623      	mov	r3, r4
   2be0a:	d807      	bhi.n	2be1c <memmove+0x20>
   2be0c:	1e43      	subs	r3, r0, #1
   2be0e:	42a1      	cmp	r1, r4
   2be10:	d008      	beq.n	2be24 <memmove+0x28>
   2be12:	f811 2b01 	ldrb.w	r2, [r1], #1
   2be16:	f803 2f01 	strb.w	r2, [r3, #1]!
   2be1a:	e7f8      	b.n	2be0e <memmove+0x12>
   2be1c:	4402      	add	r2, r0
   2be1e:	4601      	mov	r1, r0
   2be20:	428a      	cmp	r2, r1
   2be22:	d100      	bne.n	2be26 <memmove+0x2a>
   2be24:	bd10      	pop	{r4, pc}
   2be26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2be2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2be2e:	e7f7      	b.n	2be20 <memmove+0x24>

0002be30 <memset>:
   2be30:	4402      	add	r2, r0
   2be32:	4603      	mov	r3, r0
   2be34:	4293      	cmp	r3, r2
   2be36:	d100      	bne.n	2be3a <memset+0xa>
   2be38:	4770      	bx	lr
   2be3a:	f803 1b01 	strb.w	r1, [r3], #1
   2be3e:	e7f9      	b.n	2be34 <memset+0x4>

0002be40 <_calloc_r>:
   2be40:	b538      	push	{r3, r4, r5, lr}
   2be42:	fb02 f501 	mul.w	r5, r2, r1
   2be46:	4629      	mov	r1, r5
   2be48:	f7f8 ffea 	bl	24e20 <_malloc_r>
   2be4c:	4604      	mov	r4, r0
   2be4e:	b118      	cbz	r0, 2be58 <_calloc_r+0x18>
   2be50:	462a      	mov	r2, r5
   2be52:	2100      	movs	r1, #0
   2be54:	f7ff ffec 	bl	2be30 <memset>
   2be58:	4620      	mov	r0, r4
   2be5a:	bd38      	pop	{r3, r4, r5, pc}

0002be5c <__cvt>:
   2be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be60:	b089      	sub	sp, #36	; 0x24
   2be62:	2b00      	cmp	r3, #0
   2be64:	461d      	mov	r5, r3
   2be66:	4614      	mov	r4, r2
   2be68:	bfba      	itte	lt
   2be6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2be6e:	4614      	movlt	r4, r2
   2be70:	2300      	movge	r3, #0
   2be72:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2be74:	bfbc      	itt	lt
   2be76:	461d      	movlt	r5, r3
   2be78:	232d      	movlt	r3, #45	; 0x2d
   2be7a:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   2be7e:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   2be82:	f028 0a20 	bic.w	sl, r8, #32
   2be86:	7013      	strb	r3, [r2, #0]
   2be88:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2be8c:	d005      	beq.n	2be9a <__cvt+0x3e>
   2be8e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   2be92:	d100      	bne.n	2be96 <__cvt+0x3a>
   2be94:	3601      	adds	r6, #1
   2be96:	2302      	movs	r3, #2
   2be98:	e000      	b.n	2be9c <__cvt+0x40>
   2be9a:	2303      	movs	r3, #3
   2be9c:	aa07      	add	r2, sp, #28
   2be9e:	9204      	str	r2, [sp, #16]
   2bea0:	aa06      	add	r2, sp, #24
   2bea2:	e9cd 3600 	strd	r3, r6, [sp]
   2bea6:	e9cd 9202 	strd	r9, r2, [sp, #8]
   2beaa:	462b      	mov	r3, r5
   2beac:	4622      	mov	r2, r4
   2beae:	f7dd fee7 	bl	9c80 <_dtoa_r>
   2beb2:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   2beb6:	4607      	mov	r7, r0
   2beb8:	d119      	bne.n	2beee <__cvt+0x92>
   2beba:	f01b 0f01 	tst.w	fp, #1
   2bebe:	d00e      	beq.n	2bede <__cvt+0x82>
   2bec0:	eb07 0806 	add.w	r8, r7, r6
   2bec4:	2200      	movs	r2, #0
   2bec6:	2300      	movs	r3, #0
   2bec8:	4620      	mov	r0, r4
   2beca:	4629      	mov	r1, r5
   2becc:	f7dd f880 	bl	8fd0 <__aeabi_dcmpeq>
   2bed0:	b108      	cbz	r0, 2bed6 <__cvt+0x7a>
   2bed2:	f8cd 801c 	str.w	r8, [sp, #28]
   2bed6:	2230      	movs	r2, #48	; 0x30
   2bed8:	9b07      	ldr	r3, [sp, #28]
   2beda:	4543      	cmp	r3, r8
   2bedc:	d321      	bcc.n	2bf22 <__cvt+0xc6>
   2bede:	9b07      	ldr	r3, [sp, #28]
   2bee0:	4638      	mov	r0, r7
   2bee2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2bee4:	1bdb      	subs	r3, r3, r7
   2bee6:	6013      	str	r3, [r2, #0]
   2bee8:	b009      	add	sp, #36	; 0x24
   2beea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2beee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2bef2:	d0e2      	beq.n	2beba <__cvt+0x5e>
   2bef4:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2bef8:	eb00 0806 	add.w	r8, r0, r6
   2befc:	d1e2      	bne.n	2bec4 <__cvt+0x68>
   2befe:	7803      	ldrb	r3, [r0, #0]
   2bf00:	2b30      	cmp	r3, #48	; 0x30
   2bf02:	d10a      	bne.n	2bf1a <__cvt+0xbe>
   2bf04:	2200      	movs	r2, #0
   2bf06:	2300      	movs	r3, #0
   2bf08:	4620      	mov	r0, r4
   2bf0a:	4629      	mov	r1, r5
   2bf0c:	f7dd f860 	bl	8fd0 <__aeabi_dcmpeq>
   2bf10:	b918      	cbnz	r0, 2bf1a <__cvt+0xbe>
   2bf12:	f1c6 0601 	rsb	r6, r6, #1
   2bf16:	f8c9 6000 	str.w	r6, [r9]
   2bf1a:	f8d9 3000 	ldr.w	r3, [r9]
   2bf1e:	4498      	add	r8, r3
   2bf20:	e7d0      	b.n	2bec4 <__cvt+0x68>
   2bf22:	1c59      	adds	r1, r3, #1
   2bf24:	9107      	str	r1, [sp, #28]
   2bf26:	701a      	strb	r2, [r3, #0]
   2bf28:	e7d6      	b.n	2bed8 <__cvt+0x7c>

0002bf2a <__exponent>:
   2bf2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bf2c:	2900      	cmp	r1, #0
   2bf2e:	7002      	strb	r2, [r0, #0]
   2bf30:	bfba      	itte	lt
   2bf32:	4249      	neglt	r1, r1
   2bf34:	232d      	movlt	r3, #45	; 0x2d
   2bf36:	232b      	movge	r3, #43	; 0x2b
   2bf38:	2909      	cmp	r1, #9
   2bf3a:	7043      	strb	r3, [r0, #1]
   2bf3c:	dd28      	ble.n	2bf90 <__exponent+0x66>
   2bf3e:	f10d 0307 	add.w	r3, sp, #7
   2bf42:	270a      	movs	r7, #10
   2bf44:	461d      	mov	r5, r3
   2bf46:	461a      	mov	r2, r3
   2bf48:	3b01      	subs	r3, #1
   2bf4a:	fbb1 f6f7 	udiv	r6, r1, r7
   2bf4e:	fb07 1416 	mls	r4, r7, r6, r1
   2bf52:	3430      	adds	r4, #48	; 0x30
   2bf54:	f802 4c01 	strb.w	r4, [r2, #-1]
   2bf58:	460c      	mov	r4, r1
   2bf5a:	4631      	mov	r1, r6
   2bf5c:	2c63      	cmp	r4, #99	; 0x63
   2bf5e:	dcf2      	bgt.n	2bf46 <__exponent+0x1c>
   2bf60:	3130      	adds	r1, #48	; 0x30
   2bf62:	1e94      	subs	r4, r2, #2
   2bf64:	f803 1c01 	strb.w	r1, [r3, #-1]
   2bf68:	1c41      	adds	r1, r0, #1
   2bf6a:	4623      	mov	r3, r4
   2bf6c:	42ab      	cmp	r3, r5
   2bf6e:	d30a      	bcc.n	2bf86 <__exponent+0x5c>
   2bf70:	f10d 0309 	add.w	r3, sp, #9
   2bf74:	1a9b      	subs	r3, r3, r2
   2bf76:	42ac      	cmp	r4, r5
   2bf78:	bf88      	it	hi
   2bf7a:	2300      	movhi	r3, #0
   2bf7c:	3302      	adds	r3, #2
   2bf7e:	4403      	add	r3, r0
   2bf80:	1a18      	subs	r0, r3, r0
   2bf82:	b003      	add	sp, #12
   2bf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bf86:	f813 6b01 	ldrb.w	r6, [r3], #1
   2bf8a:	f801 6f01 	strb.w	r6, [r1, #1]!
   2bf8e:	e7ed      	b.n	2bf6c <__exponent+0x42>
   2bf90:	2330      	movs	r3, #48	; 0x30
   2bf92:	3130      	adds	r1, #48	; 0x30
   2bf94:	7083      	strb	r3, [r0, #2]
   2bf96:	1d03      	adds	r3, r0, #4
   2bf98:	70c1      	strb	r1, [r0, #3]
   2bf9a:	e7f1      	b.n	2bf80 <__exponent+0x56>

0002bf9c <_printf_common>:
   2bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bfa0:	4616      	mov	r6, r2
   2bfa2:	4698      	mov	r8, r3
   2bfa4:	688a      	ldr	r2, [r1, #8]
   2bfa6:	4607      	mov	r7, r0
   2bfa8:	690b      	ldr	r3, [r1, #16]
   2bfaa:	460c      	mov	r4, r1
   2bfac:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2bfb0:	4293      	cmp	r3, r2
   2bfb2:	bfb8      	it	lt
   2bfb4:	4613      	movlt	r3, r2
   2bfb6:	6033      	str	r3, [r6, #0]
   2bfb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2bfbc:	b10a      	cbz	r2, 2bfc2 <_printf_common+0x26>
   2bfbe:	3301      	adds	r3, #1
   2bfc0:	6033      	str	r3, [r6, #0]
   2bfc2:	6823      	ldr	r3, [r4, #0]
   2bfc4:	0699      	lsls	r1, r3, #26
   2bfc6:	bf42      	ittt	mi
   2bfc8:	6833      	ldrmi	r3, [r6, #0]
   2bfca:	3302      	addmi	r3, #2
   2bfcc:	6033      	strmi	r3, [r6, #0]
   2bfce:	6825      	ldr	r5, [r4, #0]
   2bfd0:	f015 0506 	ands.w	r5, r5, #6
   2bfd4:	d106      	bne.n	2bfe4 <_printf_common+0x48>
   2bfd6:	f104 0a19 	add.w	sl, r4, #25
   2bfda:	68e3      	ldr	r3, [r4, #12]
   2bfdc:	6832      	ldr	r2, [r6, #0]
   2bfde:	1a9b      	subs	r3, r3, r2
   2bfe0:	42ab      	cmp	r3, r5
   2bfe2:	dc2b      	bgt.n	2c03c <_printf_common+0xa0>
   2bfe4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2bfe8:	6822      	ldr	r2, [r4, #0]
   2bfea:	3b00      	subs	r3, #0
   2bfec:	bf18      	it	ne
   2bfee:	2301      	movne	r3, #1
   2bff0:	0692      	lsls	r2, r2, #26
   2bff2:	d430      	bmi.n	2c056 <_printf_common+0xba>
   2bff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2bff8:	4641      	mov	r1, r8
   2bffa:	4638      	mov	r0, r7
   2bffc:	47c8      	blx	r9
   2bffe:	3001      	adds	r0, #1
   2c000:	d023      	beq.n	2c04a <_printf_common+0xae>
   2c002:	6823      	ldr	r3, [r4, #0]
   2c004:	341a      	adds	r4, #26
   2c006:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2c00a:	f003 0306 	and.w	r3, r3, #6
   2c00e:	2b04      	cmp	r3, #4
   2c010:	bf0a      	itet	eq
   2c012:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   2c016:	2500      	movne	r5, #0
   2c018:	6833      	ldreq	r3, [r6, #0]
   2c01a:	f04f 0600 	mov.w	r6, #0
   2c01e:	bf08      	it	eq
   2c020:	1aed      	subeq	r5, r5, r3
   2c022:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2c026:	bf08      	it	eq
   2c028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2c02c:	4293      	cmp	r3, r2
   2c02e:	bfc4      	itt	gt
   2c030:	1a9b      	subgt	r3, r3, r2
   2c032:	18ed      	addgt	r5, r5, r3
   2c034:	42b5      	cmp	r5, r6
   2c036:	d11a      	bne.n	2c06e <_printf_common+0xd2>
   2c038:	2000      	movs	r0, #0
   2c03a:	e008      	b.n	2c04e <_printf_common+0xb2>
   2c03c:	2301      	movs	r3, #1
   2c03e:	4652      	mov	r2, sl
   2c040:	4641      	mov	r1, r8
   2c042:	4638      	mov	r0, r7
   2c044:	47c8      	blx	r9
   2c046:	3001      	adds	r0, #1
   2c048:	d103      	bne.n	2c052 <_printf_common+0xb6>
   2c04a:	f04f 30ff 	mov.w	r0, #4294967295
   2c04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c052:	3501      	adds	r5, #1
   2c054:	e7c1      	b.n	2bfda <_printf_common+0x3e>
   2c056:	18e1      	adds	r1, r4, r3
   2c058:	1c5a      	adds	r2, r3, #1
   2c05a:	2030      	movs	r0, #48	; 0x30
   2c05c:	3302      	adds	r3, #2
   2c05e:	4422      	add	r2, r4
   2c060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2c064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2c068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2c06c:	e7c2      	b.n	2bff4 <_printf_common+0x58>
   2c06e:	2301      	movs	r3, #1
   2c070:	4622      	mov	r2, r4
   2c072:	4641      	mov	r1, r8
   2c074:	4638      	mov	r0, r7
   2c076:	47c8      	blx	r9
   2c078:	3001      	adds	r0, #1
   2c07a:	d0e6      	beq.n	2c04a <_printf_common+0xae>
   2c07c:	3601      	adds	r6, #1
   2c07e:	e7d9      	b.n	2c034 <_printf_common+0x98>

0002c080 <strcpy>:
   2c080:	4603      	mov	r3, r0
   2c082:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c086:	f803 2b01 	strb.w	r2, [r3], #1
   2c08a:	2a00      	cmp	r2, #0
   2c08c:	d1f9      	bne.n	2c082 <strcpy+0x2>
   2c08e:	4770      	bx	lr

0002c090 <strncmp>:
   2c090:	b510      	push	{r4, lr}
   2c092:	b16a      	cbz	r2, 2c0b0 <strncmp+0x20>
   2c094:	3901      	subs	r1, #1
   2c096:	1884      	adds	r4, r0, r2
   2c098:	f810 2b01 	ldrb.w	r2, [r0], #1
   2c09c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2c0a0:	429a      	cmp	r2, r3
   2c0a2:	d103      	bne.n	2c0ac <strncmp+0x1c>
   2c0a4:	42a0      	cmp	r0, r4
   2c0a6:	d001      	beq.n	2c0ac <strncmp+0x1c>
   2c0a8:	2a00      	cmp	r2, #0
   2c0aa:	d1f5      	bne.n	2c098 <strncmp+0x8>
   2c0ac:	1ad0      	subs	r0, r2, r3
   2c0ae:	bd10      	pop	{r4, pc}
   2c0b0:	4610      	mov	r0, r2
   2c0b2:	e7fc      	b.n	2c0ae <strncmp+0x1e>

0002c0b4 <strncpy>:
   2c0b4:	3901      	subs	r1, #1
   2c0b6:	4603      	mov	r3, r0
   2c0b8:	b510      	push	{r4, lr}
   2c0ba:	b132      	cbz	r2, 2c0ca <strncpy+0x16>
   2c0bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2c0c0:	3a01      	subs	r2, #1
   2c0c2:	f803 4b01 	strb.w	r4, [r3], #1
   2c0c6:	2c00      	cmp	r4, #0
   2c0c8:	d1f7      	bne.n	2c0ba <strncpy+0x6>
   2c0ca:	441a      	add	r2, r3
   2c0cc:	2100      	movs	r1, #0
   2c0ce:	4293      	cmp	r3, r2
   2c0d0:	d100      	bne.n	2c0d4 <strncpy+0x20>
   2c0d2:	bd10      	pop	{r4, pc}
   2c0d4:	f803 1b01 	strb.w	r1, [r3], #1
   2c0d8:	e7f9      	b.n	2c0ce <strncpy+0x1a>

0002c0da <strnlen>:
   2c0da:	4602      	mov	r2, r0
   2c0dc:	4401      	add	r1, r0
   2c0de:	b510      	push	{r4, lr}
   2c0e0:	428a      	cmp	r2, r1
   2c0e2:	4613      	mov	r3, r2
   2c0e4:	d003      	beq.n	2c0ee <strnlen+0x14>
   2c0e6:	781c      	ldrb	r4, [r3, #0]
   2c0e8:	3201      	adds	r2, #1
   2c0ea:	2c00      	cmp	r4, #0
   2c0ec:	d1f8      	bne.n	2c0e0 <strnlen+0x6>
   2c0ee:	1a18      	subs	r0, r3, r0
   2c0f0:	bd10      	pop	{r4, pc}

0002c0f2 <quorem>:
   2c0f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c0f6:	6903      	ldr	r3, [r0, #16]
   2c0f8:	4607      	mov	r7, r0
   2c0fa:	690c      	ldr	r4, [r1, #16]
   2c0fc:	42a3      	cmp	r3, r4
   2c0fe:	f2c0 8083 	blt.w	2c208 <quorem+0x116>
   2c102:	3c01      	subs	r4, #1
   2c104:	f100 0514 	add.w	r5, r0, #20
   2c108:	f101 0814 	add.w	r8, r1, #20
   2c10c:	00a3      	lsls	r3, r4, #2
   2c10e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2c112:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2c116:	9300      	str	r3, [sp, #0]
   2c118:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2c11c:	9301      	str	r3, [sp, #4]
   2c11e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2c122:	3301      	adds	r3, #1
   2c124:	429a      	cmp	r2, r3
   2c126:	fbb2 f6f3 	udiv	r6, r2, r3
   2c12a:	d331      	bcc.n	2c190 <quorem+0x9e>
   2c12c:	f04f 0a00 	mov.w	sl, #0
   2c130:	46c4      	mov	ip, r8
   2c132:	46ae      	mov	lr, r5
   2c134:	46d3      	mov	fp, sl
   2c136:	f85c 3b04 	ldr.w	r3, [ip], #4
   2c13a:	b298      	uxth	r0, r3
   2c13c:	45e1      	cmp	r9, ip
   2c13e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2c142:	fb06 a000 	mla	r0, r6, r0, sl
   2c146:	ea4f 4210 	mov.w	r2, r0, lsr #16
   2c14a:	b280      	uxth	r0, r0
   2c14c:	fb06 2303 	mla	r3, r6, r3, r2
   2c150:	f8de 2000 	ldr.w	r2, [lr]
   2c154:	b292      	uxth	r2, r2
   2c156:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2c15a:	eba2 0200 	sub.w	r2, r2, r0
   2c15e:	b29b      	uxth	r3, r3
   2c160:	f8de 0000 	ldr.w	r0, [lr]
   2c164:	445a      	add	r2, fp
   2c166:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   2c16a:	b292      	uxth	r2, r2
   2c16c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2c170:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2c174:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2c178:	f84e 2b04 	str.w	r2, [lr], #4
   2c17c:	d2db      	bcs.n	2c136 <quorem+0x44>
   2c17e:	9b00      	ldr	r3, [sp, #0]
   2c180:	58eb      	ldr	r3, [r5, r3]
   2c182:	b92b      	cbnz	r3, 2c190 <quorem+0x9e>
   2c184:	9b01      	ldr	r3, [sp, #4]
   2c186:	3b04      	subs	r3, #4
   2c188:	429d      	cmp	r5, r3
   2c18a:	461a      	mov	r2, r3
   2c18c:	d330      	bcc.n	2c1f0 <quorem+0xfe>
   2c18e:	613c      	str	r4, [r7, #16]
   2c190:	4638      	mov	r0, r7
   2c192:	f000 f8bf 	bl	2c314 <__mcmp>
   2c196:	2800      	cmp	r0, #0
   2c198:	db26      	blt.n	2c1e8 <quorem+0xf6>
   2c19a:	4629      	mov	r1, r5
   2c19c:	2000      	movs	r0, #0
   2c19e:	f858 2b04 	ldr.w	r2, [r8], #4
   2c1a2:	f8d1 c000 	ldr.w	ip, [r1]
   2c1a6:	fa1f fe82 	uxth.w	lr, r2
   2c1aa:	45c1      	cmp	r9, r8
   2c1ac:	fa1f f38c 	uxth.w	r3, ip
   2c1b0:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2c1b4:	eba3 030e 	sub.w	r3, r3, lr
   2c1b8:	4403      	add	r3, r0
   2c1ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   2c1be:	b29b      	uxth	r3, r3
   2c1c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2c1c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c1c8:	ea4f 4022 	mov.w	r0, r2, asr #16
   2c1cc:	f841 3b04 	str.w	r3, [r1], #4
   2c1d0:	d2e5      	bcs.n	2c19e <quorem+0xac>
   2c1d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2c1d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2c1da:	b922      	cbnz	r2, 2c1e6 <quorem+0xf4>
   2c1dc:	3b04      	subs	r3, #4
   2c1de:	429d      	cmp	r5, r3
   2c1e0:	461a      	mov	r2, r3
   2c1e2:	d30b      	bcc.n	2c1fc <quorem+0x10a>
   2c1e4:	613c      	str	r4, [r7, #16]
   2c1e6:	3601      	adds	r6, #1
   2c1e8:	4630      	mov	r0, r6
   2c1ea:	b003      	add	sp, #12
   2c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c1f0:	6812      	ldr	r2, [r2, #0]
   2c1f2:	3b04      	subs	r3, #4
   2c1f4:	2a00      	cmp	r2, #0
   2c1f6:	d1ca      	bne.n	2c18e <quorem+0x9c>
   2c1f8:	3c01      	subs	r4, #1
   2c1fa:	e7c5      	b.n	2c188 <quorem+0x96>
   2c1fc:	6812      	ldr	r2, [r2, #0]
   2c1fe:	3b04      	subs	r3, #4
   2c200:	2a00      	cmp	r2, #0
   2c202:	d1ef      	bne.n	2c1e4 <quorem+0xf2>
   2c204:	3c01      	subs	r4, #1
   2c206:	e7ea      	b.n	2c1de <quorem+0xec>
   2c208:	2000      	movs	r0, #0
   2c20a:	e7ee      	b.n	2c1ea <quorem+0xf8>

0002c20c <__sfmoreglue>:
   2c20c:	b570      	push	{r4, r5, r6, lr}
   2c20e:	2368      	movs	r3, #104	; 0x68
   2c210:	1e4d      	subs	r5, r1, #1
   2c212:	460e      	mov	r6, r1
   2c214:	435d      	muls	r5, r3
   2c216:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2c21a:	f7f8 fe01 	bl	24e20 <_malloc_r>
   2c21e:	4604      	mov	r4, r0
   2c220:	b140      	cbz	r0, 2c234 <__sfmoreglue+0x28>
   2c222:	2100      	movs	r1, #0
   2c224:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2c228:	e9c0 1600 	strd	r1, r6, [r0]
   2c22c:	300c      	adds	r0, #12
   2c22e:	60a0      	str	r0, [r4, #8]
   2c230:	f7ff fdfe 	bl	2be30 <memset>
   2c234:	4620      	mov	r0, r4
   2c236:	bd70      	pop	{r4, r5, r6, pc}

0002c238 <_fwalk_reent>:
   2c238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c23c:	4606      	mov	r6, r0
   2c23e:	4688      	mov	r8, r1
   2c240:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2c244:	2700      	movs	r7, #0
   2c246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2c24a:	f1b9 0901 	subs.w	r9, r9, #1
   2c24e:	d505      	bpl.n	2c25c <_fwalk_reent+0x24>
   2c250:	6824      	ldr	r4, [r4, #0]
   2c252:	2c00      	cmp	r4, #0
   2c254:	d1f7      	bne.n	2c246 <_fwalk_reent+0xe>
   2c256:	4638      	mov	r0, r7
   2c258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c25c:	89ab      	ldrh	r3, [r5, #12]
   2c25e:	2b01      	cmp	r3, #1
   2c260:	d907      	bls.n	2c272 <_fwalk_reent+0x3a>
   2c262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2c266:	3301      	adds	r3, #1
   2c268:	d003      	beq.n	2c272 <_fwalk_reent+0x3a>
   2c26a:	4629      	mov	r1, r5
   2c26c:	4630      	mov	r0, r6
   2c26e:	47c0      	blx	r8
   2c270:	4307      	orrs	r7, r0
   2c272:	3568      	adds	r5, #104	; 0x68
   2c274:	e7e9      	b.n	2c24a <_fwalk_reent+0x12>

0002c276 <__hi0bits>:
   2c276:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2c27a:	4603      	mov	r3, r0
   2c27c:	bf36      	itet	cc
   2c27e:	0403      	lslcc	r3, r0, #16
   2c280:	2000      	movcs	r0, #0
   2c282:	2010      	movcc	r0, #16
   2c284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2c288:	bf3c      	itt	cc
   2c28a:	021b      	lslcc	r3, r3, #8
   2c28c:	3008      	addcc	r0, #8
   2c28e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2c292:	bf3c      	itt	cc
   2c294:	011b      	lslcc	r3, r3, #4
   2c296:	3004      	addcc	r0, #4
   2c298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2c29c:	d303      	bcc.n	2c2a6 <__hi0bits+0x30>
   2c29e:	2b00      	cmp	r3, #0
   2c2a0:	db0a      	blt.n	2c2b8 <__hi0bits+0x42>
   2c2a2:	3001      	adds	r0, #1
   2c2a4:	4770      	bx	lr
   2c2a6:	009b      	lsls	r3, r3, #2
   2c2a8:	d501      	bpl.n	2c2ae <__hi0bits+0x38>
   2c2aa:	3002      	adds	r0, #2
   2c2ac:	4770      	bx	lr
   2c2ae:	005b      	lsls	r3, r3, #1
   2c2b0:	d501      	bpl.n	2c2b6 <__hi0bits+0x40>
   2c2b2:	3003      	adds	r0, #3
   2c2b4:	4770      	bx	lr
   2c2b6:	2020      	movs	r0, #32
   2c2b8:	4770      	bx	lr

0002c2ba <__lo0bits>:
   2c2ba:	6803      	ldr	r3, [r0, #0]
   2c2bc:	4602      	mov	r2, r0
   2c2be:	f013 0007 	ands.w	r0, r3, #7
   2c2c2:	d00b      	beq.n	2c2dc <__lo0bits+0x22>
   2c2c4:	07d9      	lsls	r1, r3, #31
   2c2c6:	d421      	bmi.n	2c30c <__lo0bits+0x52>
   2c2c8:	0798      	lsls	r0, r3, #30
   2c2ca:	bf47      	ittee	mi
   2c2cc:	085b      	lsrmi	r3, r3, #1
   2c2ce:	2001      	movmi	r0, #1
   2c2d0:	089b      	lsrpl	r3, r3, #2
   2c2d2:	2002      	movpl	r0, #2
   2c2d4:	bf4c      	ite	mi
   2c2d6:	6013      	strmi	r3, [r2, #0]
   2c2d8:	6013      	strpl	r3, [r2, #0]
   2c2da:	4770      	bx	lr
   2c2dc:	b299      	uxth	r1, r3
   2c2de:	b909      	cbnz	r1, 2c2e4 <__lo0bits+0x2a>
   2c2e0:	0c1b      	lsrs	r3, r3, #16
   2c2e2:	2010      	movs	r0, #16
   2c2e4:	b2d9      	uxtb	r1, r3
   2c2e6:	b909      	cbnz	r1, 2c2ec <__lo0bits+0x32>
   2c2e8:	3008      	adds	r0, #8
   2c2ea:	0a1b      	lsrs	r3, r3, #8
   2c2ec:	0719      	lsls	r1, r3, #28
   2c2ee:	bf04      	itt	eq
   2c2f0:	091b      	lsreq	r3, r3, #4
   2c2f2:	3004      	addeq	r0, #4
   2c2f4:	0799      	lsls	r1, r3, #30
   2c2f6:	bf04      	itt	eq
   2c2f8:	089b      	lsreq	r3, r3, #2
   2c2fa:	3002      	addeq	r0, #2
   2c2fc:	07d9      	lsls	r1, r3, #31
   2c2fe:	d403      	bmi.n	2c308 <__lo0bits+0x4e>
   2c300:	085b      	lsrs	r3, r3, #1
   2c302:	f100 0001 	add.w	r0, r0, #1
   2c306:	d003      	beq.n	2c310 <__lo0bits+0x56>
   2c308:	6013      	str	r3, [r2, #0]
   2c30a:	4770      	bx	lr
   2c30c:	2000      	movs	r0, #0
   2c30e:	4770      	bx	lr
   2c310:	2020      	movs	r0, #32
   2c312:	4770      	bx	lr

0002c314 <__mcmp>:
   2c314:	4603      	mov	r3, r0
   2c316:	690a      	ldr	r2, [r1, #16]
   2c318:	6900      	ldr	r0, [r0, #16]
   2c31a:	1a80      	subs	r0, r0, r2
   2c31c:	b530      	push	{r4, r5, lr}
   2c31e:	d10e      	bne.n	2c33e <__mcmp+0x2a>
   2c320:	3314      	adds	r3, #20
   2c322:	3114      	adds	r1, #20
   2c324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2c328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2c32c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2c330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2c334:	4295      	cmp	r5, r2
   2c336:	d003      	beq.n	2c340 <__mcmp+0x2c>
   2c338:	d205      	bcs.n	2c346 <__mcmp+0x32>
   2c33a:	f04f 30ff 	mov.w	r0, #4294967295
   2c33e:	bd30      	pop	{r4, r5, pc}
   2c340:	42a3      	cmp	r3, r4
   2c342:	d3f3      	bcc.n	2c32c <__mcmp+0x18>
   2c344:	e7fb      	b.n	2c33e <__mcmp+0x2a>
   2c346:	2001      	movs	r0, #1
   2c348:	e7f9      	b.n	2c33e <__mcmp+0x2a>

0002c34a <__sfputc_r>:
   2c34a:	6893      	ldr	r3, [r2, #8]
   2c34c:	3b01      	subs	r3, #1
   2c34e:	2b00      	cmp	r3, #0
   2c350:	6093      	str	r3, [r2, #8]
   2c352:	b410      	push	{r4}
   2c354:	da07      	bge.n	2c366 <__sfputc_r+0x1c>
   2c356:	6994      	ldr	r4, [r2, #24]
   2c358:	42a3      	cmp	r3, r4
   2c35a:	db01      	blt.n	2c360 <__sfputc_r+0x16>
   2c35c:	290a      	cmp	r1, #10
   2c35e:	d102      	bne.n	2c366 <__sfputc_r+0x1c>
   2c360:	bc10      	pop	{r4}
   2c362:	f7f9 bf09 	b.w	26178 <__swbuf_r>
   2c366:	6813      	ldr	r3, [r2, #0]
   2c368:	1c58      	adds	r0, r3, #1
   2c36a:	6010      	str	r0, [r2, #0]
   2c36c:	4608      	mov	r0, r1
   2c36e:	7019      	strb	r1, [r3, #0]
   2c370:	bc10      	pop	{r4}
   2c372:	4770      	bx	lr

0002c374 <__sfputs_r>:
   2c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c376:	4606      	mov	r6, r0
   2c378:	460f      	mov	r7, r1
   2c37a:	4614      	mov	r4, r2
   2c37c:	18d5      	adds	r5, r2, r3
   2c37e:	42ac      	cmp	r4, r5
   2c380:	d101      	bne.n	2c386 <__sfputs_r+0x12>
   2c382:	2000      	movs	r0, #0
   2c384:	e007      	b.n	2c396 <__sfputs_r+0x22>
   2c386:	463a      	mov	r2, r7
   2c388:	f814 1b01 	ldrb.w	r1, [r4], #1
   2c38c:	4630      	mov	r0, r6
   2c38e:	f7ff ffdc 	bl	2c34a <__sfputc_r>
   2c392:	1c43      	adds	r3, r0, #1
   2c394:	d1f3      	bne.n	2c37e <__sfputs_r+0xa>
   2c396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c398 <__sread>:
   2c398:	b510      	push	{r4, lr}
   2c39a:	460c      	mov	r4, r1
   2c39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c3a0:	f7fa f858 	bl	26454 <_read_r>
   2c3a4:	2800      	cmp	r0, #0
   2c3a6:	bfab      	itete	ge
   2c3a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2c3aa:	89a3      	ldrhlt	r3, [r4, #12]
   2c3ac:	181b      	addge	r3, r3, r0
   2c3ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2c3b2:	bfac      	ite	ge
   2c3b4:	6563      	strge	r3, [r4, #84]	; 0x54
   2c3b6:	81a3      	strhlt	r3, [r4, #12]
   2c3b8:	bd10      	pop	{r4, pc}

0002c3ba <__swrite>:
   2c3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c3be:	461f      	mov	r7, r3
   2c3c0:	898b      	ldrh	r3, [r1, #12]
   2c3c2:	4605      	mov	r5, r0
   2c3c4:	460c      	mov	r4, r1
   2c3c6:	05db      	lsls	r3, r3, #23
   2c3c8:	4616      	mov	r6, r2
   2c3ca:	d505      	bpl.n	2c3d8 <__swrite+0x1e>
   2c3cc:	2302      	movs	r3, #2
   2c3ce:	2200      	movs	r2, #0
   2c3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c3d4:	f7f9 ffec 	bl	263b0 <_lseek_r>
   2c3d8:	89a3      	ldrh	r3, [r4, #12]
   2c3da:	4632      	mov	r2, r6
   2c3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2c3e0:	4628      	mov	r0, r5
   2c3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2c3e6:	81a3      	strh	r3, [r4, #12]
   2c3e8:	463b      	mov	r3, r7
   2c3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c3ee:	f7f9 bf15 	b.w	2621c <_write_r>

0002c3f2 <__sseek>:
   2c3f2:	b510      	push	{r4, lr}
   2c3f4:	460c      	mov	r4, r1
   2c3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c3fa:	f7f9 ffd9 	bl	263b0 <_lseek_r>
   2c3fe:	1c43      	adds	r3, r0, #1
   2c400:	89a3      	ldrh	r3, [r4, #12]
   2c402:	bf15      	itete	ne
   2c404:	6560      	strne	r0, [r4, #84]	; 0x54
   2c406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2c40a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2c40e:	81a3      	strheq	r3, [r4, #12]
   2c410:	bf18      	it	ne
   2c412:	81a3      	strhne	r3, [r4, #12]
   2c414:	bd10      	pop	{r4, pc}

0002c416 <__sclose>:
   2c416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c41a:	f7f9 bf7d 	b.w	26318 <_close_r>

0002c41e <abort>:
   2c41e:	2006      	movs	r0, #6
   2c420:	b508      	push	{r3, lr}
   2c422:	f7fa f829 	bl	26478 <raise>
   2c426:	2001      	movs	r0, #1
   2c428:	f7e5 faea 	bl	11a00 <_exit>

0002c42c <__sflush_r>:
   2c42c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c432:	0717      	lsls	r7, r2, #28
   2c434:	4605      	mov	r5, r0
   2c436:	460c      	mov	r4, r1
   2c438:	d456      	bmi.n	2c4e8 <__sflush_r+0xbc>
   2c43a:	684b      	ldr	r3, [r1, #4]
   2c43c:	2b00      	cmp	r3, #0
   2c43e:	dc02      	bgt.n	2c446 <__sflush_r+0x1a>
   2c440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2c442:	2b00      	cmp	r3, #0
   2c444:	dd3d      	ble.n	2c4c2 <__sflush_r+0x96>
   2c446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2c448:	2e00      	cmp	r6, #0
   2c44a:	d03a      	beq.n	2c4c2 <__sflush_r+0x96>
   2c44c:	2300      	movs	r3, #0
   2c44e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2c452:	682f      	ldr	r7, [r5, #0]
   2c454:	6a21      	ldr	r1, [r4, #32]
   2c456:	602b      	str	r3, [r5, #0]
   2c458:	d025      	beq.n	2c4a6 <__sflush_r+0x7a>
   2c45a:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2c45c:	89a3      	ldrh	r3, [r4, #12]
   2c45e:	0758      	lsls	r0, r3, #29
   2c460:	d505      	bpl.n	2c46e <__sflush_r+0x42>
   2c462:	6863      	ldr	r3, [r4, #4]
   2c464:	1ad2      	subs	r2, r2, r3
   2c466:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c468:	b10b      	cbz	r3, 2c46e <__sflush_r+0x42>
   2c46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2c46c:	1ad2      	subs	r2, r2, r3
   2c46e:	6a21      	ldr	r1, [r4, #32]
   2c470:	2300      	movs	r3, #0
   2c472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2c474:	4628      	mov	r0, r5
   2c476:	47b0      	blx	r6
   2c478:	1c41      	adds	r1, r0, #1
   2c47a:	d024      	beq.n	2c4c6 <__sflush_r+0x9a>
   2c47c:	2300      	movs	r3, #0
   2c47e:	6063      	str	r3, [r4, #4]
   2c480:	6923      	ldr	r3, [r4, #16]
   2c482:	6023      	str	r3, [r4, #0]
   2c484:	89a3      	ldrh	r3, [r4, #12]
   2c486:	04da      	lsls	r2, r3, #19
   2c488:	d500      	bpl.n	2c48c <__sflush_r+0x60>
   2c48a:	6560      	str	r0, [r4, #84]	; 0x54
   2c48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2c48e:	602f      	str	r7, [r5, #0]
   2c490:	b1b9      	cbz	r1, 2c4c2 <__sflush_r+0x96>
   2c492:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2c496:	4299      	cmp	r1, r3
   2c498:	d002      	beq.n	2c4a0 <__sflush_r+0x74>
   2c49a:	4628      	mov	r0, r5
   2c49c:	f7f8 fc76 	bl	24d8c <_free_r>
   2c4a0:	2300      	movs	r3, #0
   2c4a2:	6363      	str	r3, [r4, #52]	; 0x34
   2c4a4:	e00d      	b.n	2c4c2 <__sflush_r+0x96>
   2c4a6:	2301      	movs	r3, #1
   2c4a8:	4628      	mov	r0, r5
   2c4aa:	47b0      	blx	r6
   2c4ac:	1c46      	adds	r6, r0, #1
   2c4ae:	4602      	mov	r2, r0
   2c4b0:	d1d4      	bne.n	2c45c <__sflush_r+0x30>
   2c4b2:	682b      	ldr	r3, [r5, #0]
   2c4b4:	2b00      	cmp	r3, #0
   2c4b6:	d0d1      	beq.n	2c45c <__sflush_r+0x30>
   2c4b8:	2b1d      	cmp	r3, #29
   2c4ba:	d001      	beq.n	2c4c0 <__sflush_r+0x94>
   2c4bc:	2b16      	cmp	r3, #22
   2c4be:	d129      	bne.n	2c514 <__sflush_r+0xe8>
   2c4c0:	602f      	str	r7, [r5, #0]
   2c4c2:	2000      	movs	r0, #0
   2c4c4:	e02d      	b.n	2c522 <__sflush_r+0xf6>
   2c4c6:	682a      	ldr	r2, [r5, #0]
   2c4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c4cc:	b142      	cbz	r2, 2c4e0 <__sflush_r+0xb4>
   2c4ce:	2a1d      	cmp	r2, #29
   2c4d0:	d001      	beq.n	2c4d6 <__sflush_r+0xaa>
   2c4d2:	2a16      	cmp	r2, #22
   2c4d4:	d120      	bne.n	2c518 <__sflush_r+0xec>
   2c4d6:	2300      	movs	r3, #0
   2c4d8:	6063      	str	r3, [r4, #4]
   2c4da:	6923      	ldr	r3, [r4, #16]
   2c4dc:	6023      	str	r3, [r4, #0]
   2c4de:	e7d5      	b.n	2c48c <__sflush_r+0x60>
   2c4e0:	6062      	str	r2, [r4, #4]
   2c4e2:	6922      	ldr	r2, [r4, #16]
   2c4e4:	6022      	str	r2, [r4, #0]
   2c4e6:	e7ce      	b.n	2c486 <__sflush_r+0x5a>
   2c4e8:	690f      	ldr	r7, [r1, #16]
   2c4ea:	2f00      	cmp	r7, #0
   2c4ec:	d0e9      	beq.n	2c4c2 <__sflush_r+0x96>
   2c4ee:	0793      	lsls	r3, r2, #30
   2c4f0:	680e      	ldr	r6, [r1, #0]
   2c4f2:	600f      	str	r7, [r1, #0]
   2c4f4:	bf0c      	ite	eq
   2c4f6:	694b      	ldreq	r3, [r1, #20]
   2c4f8:	2300      	movne	r3, #0
   2c4fa:	1bf6      	subs	r6, r6, r7
   2c4fc:	608b      	str	r3, [r1, #8]
   2c4fe:	2e00      	cmp	r6, #0
   2c500:	dddf      	ble.n	2c4c2 <__sflush_r+0x96>
   2c502:	4633      	mov	r3, r6
   2c504:	463a      	mov	r2, r7
   2c506:	6a21      	ldr	r1, [r4, #32]
   2c508:	4628      	mov	r0, r5
   2c50a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2c50e:	47e0      	blx	ip
   2c510:	2800      	cmp	r0, #0
   2c512:	dc07      	bgt.n	2c524 <__sflush_r+0xf8>
   2c514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c51c:	f04f 30ff 	mov.w	r0, #4294967295
   2c520:	81a3      	strh	r3, [r4, #12]
   2c522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c524:	4407      	add	r7, r0
   2c526:	1a36      	subs	r6, r6, r0
   2c528:	e7e9      	b.n	2c4fe <__sflush_r+0xd2>

0002c52a <__swhatbuf_r>:
   2c52a:	b570      	push	{r4, r5, r6, lr}
   2c52c:	460c      	mov	r4, r1
   2c52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c532:	b096      	sub	sp, #88	; 0x58
   2c534:	4615      	mov	r5, r2
   2c536:	2900      	cmp	r1, #0
   2c538:	461e      	mov	r6, r3
   2c53a:	da0c      	bge.n	2c556 <__swhatbuf_r+0x2c>
   2c53c:	89a3      	ldrh	r3, [r4, #12]
   2c53e:	2100      	movs	r1, #0
   2c540:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c544:	bf14      	ite	ne
   2c546:	2340      	movne	r3, #64	; 0x40
   2c548:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   2c54c:	2000      	movs	r0, #0
   2c54e:	6031      	str	r1, [r6, #0]
   2c550:	602b      	str	r3, [r5, #0]
   2c552:	b016      	add	sp, #88	; 0x58
   2c554:	bd70      	pop	{r4, r5, r6, pc}
   2c556:	466a      	mov	r2, sp
   2c558:	f7f9 ffa8 	bl	264ac <_fstat_r>
   2c55c:	2800      	cmp	r0, #0
   2c55e:	dbed      	blt.n	2c53c <__swhatbuf_r+0x12>
   2c560:	9901      	ldr	r1, [sp, #4]
   2c562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   2c566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   2c56a:	4259      	negs	r1, r3
   2c56c:	4159      	adcs	r1, r3
   2c56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2c572:	e7eb      	b.n	2c54c <__swhatbuf_r+0x22>

0002c574 <__ascii_mbtowc>:
   2c574:	b082      	sub	sp, #8
   2c576:	b901      	cbnz	r1, 2c57a <__ascii_mbtowc+0x6>
   2c578:	a901      	add	r1, sp, #4
   2c57a:	b142      	cbz	r2, 2c58e <__ascii_mbtowc+0x1a>
   2c57c:	b14b      	cbz	r3, 2c592 <__ascii_mbtowc+0x1e>
   2c57e:	7813      	ldrb	r3, [r2, #0]
   2c580:	600b      	str	r3, [r1, #0]
   2c582:	7812      	ldrb	r2, [r2, #0]
   2c584:	1e10      	subs	r0, r2, #0
   2c586:	bf18      	it	ne
   2c588:	2001      	movne	r0, #1
   2c58a:	b002      	add	sp, #8
   2c58c:	4770      	bx	lr
   2c58e:	4610      	mov	r0, r2
   2c590:	e7fb      	b.n	2c58a <__ascii_mbtowc+0x16>
   2c592:	f06f 0001 	mvn.w	r0, #1
   2c596:	e7f8      	b.n	2c58a <__ascii_mbtowc+0x16>

0002c598 <_raise_r>:
   2c598:	291f      	cmp	r1, #31
   2c59a:	b538      	push	{r3, r4, r5, lr}
   2c59c:	4605      	mov	r5, r0
   2c59e:	460c      	mov	r4, r1
   2c5a0:	d904      	bls.n	2c5ac <_raise_r+0x14>
   2c5a2:	2316      	movs	r3, #22
   2c5a4:	6003      	str	r3, [r0, #0]
   2c5a6:	f04f 30ff 	mov.w	r0, #4294967295
   2c5aa:	bd38      	pop	{r3, r4, r5, pc}
   2c5ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2c5ae:	b112      	cbz	r2, 2c5b6 <_raise_r+0x1e>
   2c5b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2c5b4:	b94b      	cbnz	r3, 2c5ca <_raise_r+0x32>
   2c5b6:	4628      	mov	r0, r5
   2c5b8:	f000 f816 	bl	2c5e8 <_getpid_r>
   2c5bc:	4622      	mov	r2, r4
   2c5be:	4601      	mov	r1, r0
   2c5c0:	4628      	mov	r0, r5
   2c5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c5c6:	f7f9 bf5f 	b.w	26488 <_kill_r>
   2c5ca:	2b01      	cmp	r3, #1
   2c5cc:	d00a      	beq.n	2c5e4 <_raise_r+0x4c>
   2c5ce:	1c59      	adds	r1, r3, #1
   2c5d0:	d103      	bne.n	2c5da <_raise_r+0x42>
   2c5d2:	2316      	movs	r3, #22
   2c5d4:	6003      	str	r3, [r0, #0]
   2c5d6:	2001      	movs	r0, #1
   2c5d8:	e7e7      	b.n	2c5aa <_raise_r+0x12>
   2c5da:	2100      	movs	r1, #0
   2c5dc:	4620      	mov	r0, r4
   2c5de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   2c5e2:	4798      	blx	r3
   2c5e4:	2000      	movs	r0, #0
   2c5e6:	e7e0      	b.n	2c5aa <_raise_r+0x12>

0002c5e8 <_getpid_r>:
   2c5e8:	f7fb bf57 	b.w	2849a <_getpid>

0002c5ec <__ascii_wctomb>:
   2c5ec:	4603      	mov	r3, r0
   2c5ee:	4608      	mov	r0, r1
   2c5f0:	b141      	cbz	r1, 2c604 <__ascii_wctomb+0x18>
   2c5f2:	2aff      	cmp	r2, #255	; 0xff
   2c5f4:	d904      	bls.n	2c600 <__ascii_wctomb+0x14>
   2c5f6:	228a      	movs	r2, #138	; 0x8a
   2c5f8:	f04f 30ff 	mov.w	r0, #4294967295
   2c5fc:	601a      	str	r2, [r3, #0]
   2c5fe:	4770      	bx	lr
   2c600:	2001      	movs	r0, #1
   2c602:	700a      	strb	r2, [r1, #0]
   2c604:	4770      	bx	lr
	...
