
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	98 4b 05 20 c1 19 01 00 d3 b8 02 00 95 19 01 00     .K. ............
    8010:	95 19 01 00 95 19 01 00 95 19 01 00 95 19 01 00     ................
	...
    802c:	25 13 01 00 95 19 01 00 00 00 00 00 c1 12 01 00     %...............
    803c:	95 19 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8050:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8060:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8070:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8080:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8090:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    80a0:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    80b0:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    80c0:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    80d0:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    80e0:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    80f0:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8100:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8110:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8120:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8130:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8140:	b1 13 01 00 b1 13 01 00 b1 13 01 00 b1 13 01 00     ................
    8150:	b1 13 01 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2iz>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    88fc:	d215      	bcs.n	892a <__aeabi_d2iz+0x36>
    88fe:	d511      	bpl.n	8924 <__aeabi_d2iz+0x30>
    8900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8908:	d912      	bls.n	8930 <__aeabi_d2iz+0x3c>
    890a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    890e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    891a:	fa23 f002 	lsr.w	r0, r3, r2
    891e:	bf18      	it	ne
    8920:	4240      	negne	r0, r0
    8922:	4770      	bx	lr
    8924:	f04f 0000 	mov.w	r0, #0
    8928:	4770      	bx	lr
    892a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    892e:	d105      	bne.n	893c <__aeabi_d2iz+0x48>
    8930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8934:	bf08      	it	eq
    8936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    893a:	4770      	bx	lr
    893c:	f04f 0000 	mov.w	r0, #0
    8940:	4770      	bx	lr
    8942:	bf00      	nop

00008944 <__aeabi_d2f>:
    8944:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    894c:	bf24      	itt	cs
    894e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8956:	d90d      	bls.n	8974 <__aeabi_d2f+0x30>
    8958:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    895c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8964:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    896c:	bf08      	it	eq
    896e:	f020 0001 	biceq.w	r0, r0, #1
    8972:	4770      	bx	lr
    8974:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8978:	d121      	bne.n	89be <__aeabi_d2f+0x7a>
    897a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    897e:	bfbc      	itt	lt
    8980:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8984:	4770      	bxlt	lr
    8986:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    898a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    898e:	f1c2 0218 	rsb	r2, r2, #24
    8992:	f1c2 0c20 	rsb	ip, r2, #32
    8996:	fa10 f30c 	lsls.w	r3, r0, ip
    899a:	fa20 f002 	lsr.w	r0, r0, r2
    899e:	bf18      	it	ne
    89a0:	f040 0001 	orrne.w	r0, r0, #1
    89a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    89a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    89ac:	fa03 fc0c 	lsl.w	ip, r3, ip
    89b0:	ea40 000c 	orr.w	r0, r0, ip
    89b4:	fa23 f302 	lsr.w	r3, r3, r2
    89b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    89bc:	e7cc      	b.n	8958 <__aeabi_d2f+0x14>
    89be:	ea7f 5362 	mvns.w	r3, r2, asr #21
    89c2:	d107      	bne.n	89d4 <__aeabi_d2f+0x90>
    89c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    89c8:	bf1e      	ittt	ne
    89ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    89ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    89d2:	4770      	bxne	lr
    89d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    89d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    89dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop

000089e4 <__aeabi_frsub>:
    89e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    89e8:	e002      	b.n	89f0 <__addsf3>
    89ea:	bf00      	nop

000089ec <__aeabi_fsub>:
    89ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089f0 <__addsf3>:
    89f0:	0042      	lsls	r2, r0, #1
    89f2:	bf1f      	itttt	ne
    89f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89f8:	ea92 0f03 	teqne	r2, r3
    89fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8a00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a04:	d06a      	beq.n	8adc <__addsf3+0xec>
    8a06:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8a0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8a0e:	bfc1      	itttt	gt
    8a10:	18d2      	addgt	r2, r2, r3
    8a12:	4041      	eorgt	r1, r0
    8a14:	4048      	eorgt	r0, r1
    8a16:	4041      	eorgt	r1, r0
    8a18:	bfb8      	it	lt
    8a1a:	425b      	neglt	r3, r3
    8a1c:	2b19      	cmp	r3, #25
    8a1e:	bf88      	it	hi
    8a20:	4770      	bxhi	lr
    8a22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8a26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8a2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8a2e:	bf18      	it	ne
    8a30:	4240      	negne	r0, r0
    8a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8a36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8a3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8a3e:	bf18      	it	ne
    8a40:	4249      	negne	r1, r1
    8a42:	ea92 0f03 	teq	r2, r3
    8a46:	d03f      	beq.n	8ac8 <__addsf3+0xd8>
    8a48:	f1a2 0201 	sub.w	r2, r2, #1
    8a4c:	fa41 fc03 	asr.w	ip, r1, r3
    8a50:	eb10 000c 	adds.w	r0, r0, ip
    8a54:	f1c3 0320 	rsb	r3, r3, #32
    8a58:	fa01 f103 	lsl.w	r1, r1, r3
    8a5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a60:	d502      	bpl.n	8a68 <__addsf3+0x78>
    8a62:	4249      	negs	r1, r1
    8a64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a6c:	d313      	bcc.n	8a96 <__addsf3+0xa6>
    8a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a72:	d306      	bcc.n	8a82 <__addsf3+0x92>
    8a74:	0840      	lsrs	r0, r0, #1
    8a76:	ea4f 0131 	mov.w	r1, r1, rrx
    8a7a:	f102 0201 	add.w	r2, r2, #1
    8a7e:	2afe      	cmp	r2, #254	; 0xfe
    8a80:	d251      	bcs.n	8b26 <__addsf3+0x136>
    8a82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a8a:	bf08      	it	eq
    8a8c:	f020 0001 	biceq.w	r0, r0, #1
    8a90:	ea40 0003 	orr.w	r0, r0, r3
    8a94:	4770      	bx	lr
    8a96:	0049      	lsls	r1, r1, #1
    8a98:	eb40 0000 	adc.w	r0, r0, r0
    8a9c:	3a01      	subs	r2, #1
    8a9e:	bf28      	it	cs
    8aa0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8aa4:	d2ed      	bcs.n	8a82 <__addsf3+0x92>
    8aa6:	fab0 fc80 	clz	ip, r0
    8aaa:	f1ac 0c08 	sub.w	ip, ip, #8
    8aae:	ebb2 020c 	subs.w	r2, r2, ip
    8ab2:	fa00 f00c 	lsl.w	r0, r0, ip
    8ab6:	bfaa      	itet	ge
    8ab8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8abc:	4252      	neglt	r2, r2
    8abe:	4318      	orrge	r0, r3
    8ac0:	bfbc      	itt	lt
    8ac2:	40d0      	lsrlt	r0, r2
    8ac4:	4318      	orrlt	r0, r3
    8ac6:	4770      	bx	lr
    8ac8:	f092 0f00 	teq	r2, #0
    8acc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8ad0:	bf06      	itte	eq
    8ad2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8ad6:	3201      	addeq	r2, #1
    8ad8:	3b01      	subne	r3, #1
    8ada:	e7b5      	b.n	8a48 <__addsf3+0x58>
    8adc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8ae0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8ae4:	bf18      	it	ne
    8ae6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8aea:	d021      	beq.n	8b30 <__addsf3+0x140>
    8aec:	ea92 0f03 	teq	r2, r3
    8af0:	d004      	beq.n	8afc <__addsf3+0x10c>
    8af2:	f092 0f00 	teq	r2, #0
    8af6:	bf08      	it	eq
    8af8:	4608      	moveq	r0, r1
    8afa:	4770      	bx	lr
    8afc:	ea90 0f01 	teq	r0, r1
    8b00:	bf1c      	itt	ne
    8b02:	2000      	movne	r0, #0
    8b04:	4770      	bxne	lr
    8b06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8b0a:	d104      	bne.n	8b16 <__addsf3+0x126>
    8b0c:	0040      	lsls	r0, r0, #1
    8b0e:	bf28      	it	cs
    8b10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8b14:	4770      	bx	lr
    8b16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8b1a:	bf3c      	itt	cc
    8b1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8b20:	4770      	bxcc	lr
    8b22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8b26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8b2e:	4770      	bx	lr
    8b30:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8b34:	bf16      	itet	ne
    8b36:	4608      	movne	r0, r1
    8b38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8b3c:	4601      	movne	r1, r0
    8b3e:	0242      	lsls	r2, r0, #9
    8b40:	bf06      	itte	eq
    8b42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8b46:	ea90 0f01 	teqeq	r0, r1
    8b4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8b4e:	4770      	bx	lr

00008b50 <__aeabi_ui2f>:
    8b50:	f04f 0300 	mov.w	r3, #0
    8b54:	e004      	b.n	8b60 <__aeabi_i2f+0x8>
    8b56:	bf00      	nop

00008b58 <__aeabi_i2f>:
    8b58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b5c:	bf48      	it	mi
    8b5e:	4240      	negmi	r0, r0
    8b60:	ea5f 0c00 	movs.w	ip, r0
    8b64:	bf08      	it	eq
    8b66:	4770      	bxeq	lr
    8b68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b6c:	4601      	mov	r1, r0
    8b6e:	f04f 0000 	mov.w	r0, #0
    8b72:	e01c      	b.n	8bae <__aeabi_l2f+0x2a>

00008b74 <__aeabi_ul2f>:
    8b74:	ea50 0201 	orrs.w	r2, r0, r1
    8b78:	bf08      	it	eq
    8b7a:	4770      	bxeq	lr
    8b7c:	f04f 0300 	mov.w	r3, #0
    8b80:	e00a      	b.n	8b98 <__aeabi_l2f+0x14>
    8b82:	bf00      	nop

00008b84 <__aeabi_l2f>:
    8b84:	ea50 0201 	orrs.w	r2, r0, r1
    8b88:	bf08      	it	eq
    8b8a:	4770      	bxeq	lr
    8b8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b90:	d502      	bpl.n	8b98 <__aeabi_l2f+0x14>
    8b92:	4240      	negs	r0, r0
    8b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b98:	ea5f 0c01 	movs.w	ip, r1
    8b9c:	bf02      	ittt	eq
    8b9e:	4684      	moveq	ip, r0
    8ba0:	4601      	moveq	r1, r0
    8ba2:	2000      	moveq	r0, #0
    8ba4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8ba8:	bf08      	it	eq
    8baa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8bae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8bb2:	fabc f28c 	clz	r2, ip
    8bb6:	3a08      	subs	r2, #8
    8bb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8bbc:	db10      	blt.n	8be0 <__aeabi_l2f+0x5c>
    8bbe:	fa01 fc02 	lsl.w	ip, r1, r2
    8bc2:	4463      	add	r3, ip
    8bc4:	fa00 fc02 	lsl.w	ip, r0, r2
    8bc8:	f1c2 0220 	rsb	r2, r2, #32
    8bcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8bd0:	fa20 f202 	lsr.w	r2, r0, r2
    8bd4:	eb43 0002 	adc.w	r0, r3, r2
    8bd8:	bf08      	it	eq
    8bda:	f020 0001 	biceq.w	r0, r0, #1
    8bde:	4770      	bx	lr
    8be0:	f102 0220 	add.w	r2, r2, #32
    8be4:	fa01 fc02 	lsl.w	ip, r1, r2
    8be8:	f1c2 0220 	rsb	r2, r2, #32
    8bec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8bf0:	fa21 f202 	lsr.w	r2, r1, r2
    8bf4:	eb43 0002 	adc.w	r0, r3, r2
    8bf8:	bf08      	it	eq
    8bfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bfe:	4770      	bx	lr

00008c00 <__aeabi_fmul>:
    8c00:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8c04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8c08:	bf1e      	ittt	ne
    8c0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8c0e:	ea92 0f0c 	teqne	r2, ip
    8c12:	ea93 0f0c 	teqne	r3, ip
    8c16:	d06f      	beq.n	8cf8 <__aeabi_fmul+0xf8>
    8c18:	441a      	add	r2, r3
    8c1a:	ea80 0c01 	eor.w	ip, r0, r1
    8c1e:	0240      	lsls	r0, r0, #9
    8c20:	bf18      	it	ne
    8c22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8c26:	d01e      	beq.n	8c66 <__aeabi_fmul+0x66>
    8c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8c2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8c30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8c34:	fba0 3101 	umull	r3, r1, r0, r1
    8c38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8c3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8c40:	bf3e      	ittt	cc
    8c42:	0049      	lslcc	r1, r1, #1
    8c44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8c48:	005b      	lslcc	r3, r3, #1
    8c4a:	ea40 0001 	orr.w	r0, r0, r1
    8c4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c52:	2afd      	cmp	r2, #253	; 0xfd
    8c54:	d81d      	bhi.n	8c92 <__aeabi_fmul+0x92>
    8c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c5e:	bf08      	it	eq
    8c60:	f020 0001 	biceq.w	r0, r0, #1
    8c64:	4770      	bx	lr
    8c66:	f090 0f00 	teq	r0, #0
    8c6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c6e:	bf08      	it	eq
    8c70:	0249      	lsleq	r1, r1, #9
    8c72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c7a:	3a7f      	subs	r2, #127	; 0x7f
    8c7c:	bfc2      	ittt	gt
    8c7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c86:	4770      	bxgt	lr
    8c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c8c:	f04f 0300 	mov.w	r3, #0
    8c90:	3a01      	subs	r2, #1
    8c92:	dc5d      	bgt.n	8d50 <__aeabi_fmul+0x150>
    8c94:	f112 0f19 	cmn.w	r2, #25
    8c98:	bfdc      	itt	le
    8c9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c9e:	4770      	bxle	lr
    8ca0:	f1c2 0200 	rsb	r2, r2, #0
    8ca4:	0041      	lsls	r1, r0, #1
    8ca6:	fa21 f102 	lsr.w	r1, r1, r2
    8caa:	f1c2 0220 	rsb	r2, r2, #32
    8cae:	fa00 fc02 	lsl.w	ip, r0, r2
    8cb2:	ea5f 0031 	movs.w	r0, r1, rrx
    8cb6:	f140 0000 	adc.w	r0, r0, #0
    8cba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8cbe:	bf08      	it	eq
    8cc0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8cc4:	4770      	bx	lr
    8cc6:	f092 0f00 	teq	r2, #0
    8cca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8cce:	bf02      	ittt	eq
    8cd0:	0040      	lsleq	r0, r0, #1
    8cd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8cd6:	3a01      	subeq	r2, #1
    8cd8:	d0f9      	beq.n	8cce <__aeabi_fmul+0xce>
    8cda:	ea40 000c 	orr.w	r0, r0, ip
    8cde:	f093 0f00 	teq	r3, #0
    8ce2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8ce6:	bf02      	ittt	eq
    8ce8:	0049      	lsleq	r1, r1, #1
    8cea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8cee:	3b01      	subeq	r3, #1
    8cf0:	d0f9      	beq.n	8ce6 <__aeabi_fmul+0xe6>
    8cf2:	ea41 010c 	orr.w	r1, r1, ip
    8cf6:	e78f      	b.n	8c18 <__aeabi_fmul+0x18>
    8cf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cfc:	ea92 0f0c 	teq	r2, ip
    8d00:	bf18      	it	ne
    8d02:	ea93 0f0c 	teqne	r3, ip
    8d06:	d00a      	beq.n	8d1e <__aeabi_fmul+0x11e>
    8d08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8d0c:	bf18      	it	ne
    8d0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8d12:	d1d8      	bne.n	8cc6 <__aeabi_fmul+0xc6>
    8d14:	ea80 0001 	eor.w	r0, r0, r1
    8d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d1c:	4770      	bx	lr
    8d1e:	f090 0f00 	teq	r0, #0
    8d22:	bf17      	itett	ne
    8d24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8d28:	4608      	moveq	r0, r1
    8d2a:	f091 0f00 	teqne	r1, #0
    8d2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8d32:	d014      	beq.n	8d5e <__aeabi_fmul+0x15e>
    8d34:	ea92 0f0c 	teq	r2, ip
    8d38:	d101      	bne.n	8d3e <__aeabi_fmul+0x13e>
    8d3a:	0242      	lsls	r2, r0, #9
    8d3c:	d10f      	bne.n	8d5e <__aeabi_fmul+0x15e>
    8d3e:	ea93 0f0c 	teq	r3, ip
    8d42:	d103      	bne.n	8d4c <__aeabi_fmul+0x14c>
    8d44:	024b      	lsls	r3, r1, #9
    8d46:	bf18      	it	ne
    8d48:	4608      	movne	r0, r1
    8d4a:	d108      	bne.n	8d5e <__aeabi_fmul+0x15e>
    8d4c:	ea80 0001 	eor.w	r0, r0, r1
    8d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d5c:	4770      	bx	lr
    8d5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d66:	4770      	bx	lr

00008d68 <__aeabi_fdiv>:
    8d68:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d70:	bf1e      	ittt	ne
    8d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d76:	ea92 0f0c 	teqne	r2, ip
    8d7a:	ea93 0f0c 	teqne	r3, ip
    8d7e:	d069      	beq.n	8e54 <__aeabi_fdiv+0xec>
    8d80:	eba2 0203 	sub.w	r2, r2, r3
    8d84:	ea80 0c01 	eor.w	ip, r0, r1
    8d88:	0249      	lsls	r1, r1, #9
    8d8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d8e:	d037      	beq.n	8e00 <__aeabi_fdiv+0x98>
    8d90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8da0:	428b      	cmp	r3, r1
    8da2:	bf38      	it	cc
    8da4:	005b      	lslcc	r3, r3, #1
    8da6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8daa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8dae:	428b      	cmp	r3, r1
    8db0:	bf24      	itt	cs
    8db2:	1a5b      	subcs	r3, r3, r1
    8db4:	ea40 000c 	orrcs.w	r0, r0, ip
    8db8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8dbc:	bf24      	itt	cs
    8dbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8dc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8dc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8dca:	bf24      	itt	cs
    8dcc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8dd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8dd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8dd8:	bf24      	itt	cs
    8dda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8dde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8de2:	011b      	lsls	r3, r3, #4
    8de4:	bf18      	it	ne
    8de6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8dea:	d1e0      	bne.n	8dae <__aeabi_fdiv+0x46>
    8dec:	2afd      	cmp	r2, #253	; 0xfd
    8dee:	f63f af50 	bhi.w	8c92 <__aeabi_fmul+0x92>
    8df2:	428b      	cmp	r3, r1
    8df4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8df8:	bf08      	it	eq
    8dfa:	f020 0001 	biceq.w	r0, r0, #1
    8dfe:	4770      	bx	lr
    8e00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8e04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8e08:	327f      	adds	r2, #127	; 0x7f
    8e0a:	bfc2      	ittt	gt
    8e0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8e10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8e14:	4770      	bxgt	lr
    8e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8e1a:	f04f 0300 	mov.w	r3, #0
    8e1e:	3a01      	subs	r2, #1
    8e20:	e737      	b.n	8c92 <__aeabi_fmul+0x92>
    8e22:	f092 0f00 	teq	r2, #0
    8e26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8e2a:	bf02      	ittt	eq
    8e2c:	0040      	lsleq	r0, r0, #1
    8e2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8e32:	3a01      	subeq	r2, #1
    8e34:	d0f9      	beq.n	8e2a <__aeabi_fdiv+0xc2>
    8e36:	ea40 000c 	orr.w	r0, r0, ip
    8e3a:	f093 0f00 	teq	r3, #0
    8e3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8e42:	bf02      	ittt	eq
    8e44:	0049      	lsleq	r1, r1, #1
    8e46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8e4a:	3b01      	subeq	r3, #1
    8e4c:	d0f9      	beq.n	8e42 <__aeabi_fdiv+0xda>
    8e4e:	ea41 010c 	orr.w	r1, r1, ip
    8e52:	e795      	b.n	8d80 <__aeabi_fdiv+0x18>
    8e54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e58:	ea92 0f0c 	teq	r2, ip
    8e5c:	d108      	bne.n	8e70 <__aeabi_fdiv+0x108>
    8e5e:	0242      	lsls	r2, r0, #9
    8e60:	f47f af7d 	bne.w	8d5e <__aeabi_fmul+0x15e>
    8e64:	ea93 0f0c 	teq	r3, ip
    8e68:	f47f af70 	bne.w	8d4c <__aeabi_fmul+0x14c>
    8e6c:	4608      	mov	r0, r1
    8e6e:	e776      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e70:	ea93 0f0c 	teq	r3, ip
    8e74:	d104      	bne.n	8e80 <__aeabi_fdiv+0x118>
    8e76:	024b      	lsls	r3, r1, #9
    8e78:	f43f af4c 	beq.w	8d14 <__aeabi_fmul+0x114>
    8e7c:	4608      	mov	r0, r1
    8e7e:	e76e      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e84:	bf18      	it	ne
    8e86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e8a:	d1ca      	bne.n	8e22 <__aeabi_fdiv+0xba>
    8e8c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e90:	f47f af5c 	bne.w	8d4c <__aeabi_fmul+0x14c>
    8e94:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e98:	f47f af3c 	bne.w	8d14 <__aeabi_fmul+0x114>
    8e9c:	e75f      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e9e:	bf00      	nop

00008ea0 <__aeabi_ldivmod>:
    8ea0:	b97b      	cbnz	r3, 8ec2 <__aeabi_ldivmod+0x22>
    8ea2:	b972      	cbnz	r2, 8ec2 <__aeabi_ldivmod+0x22>
    8ea4:	2900      	cmp	r1, #0
    8ea6:	bfbe      	ittt	lt
    8ea8:	2000      	movlt	r0, #0
    8eaa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8eae:	e006      	blt.n	8ebe <__aeabi_ldivmod+0x1e>
    8eb0:	bf08      	it	eq
    8eb2:	2800      	cmpeq	r0, #0
    8eb4:	bf1c      	itt	ne
    8eb6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8eba:	f04f 30ff 	movne.w	r0, #4294967295
    8ebe:	f000 b875 	b.w	8fac <__aeabi_idiv0>
    8ec2:	f1ad 0c08 	sub.w	ip, sp, #8
    8ec6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8eca:	2900      	cmp	r1, #0
    8ecc:	db09      	blt.n	8ee2 <__aeabi_ldivmod+0x42>
    8ece:	2b00      	cmp	r3, #0
    8ed0:	db1a      	blt.n	8f08 <__aeabi_ldivmod+0x68>
    8ed2:	f000 f942 	bl	915a <__udivmoddi4>
    8ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
    8eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ede:	b004      	add	sp, #16
    8ee0:	4770      	bx	lr
    8ee2:	4240      	negs	r0, r0
    8ee4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ee8:	2b00      	cmp	r3, #0
    8eea:	db1b      	blt.n	8f24 <__aeabi_ldivmod+0x84>
    8eec:	f000 f935 	bl	915a <__udivmoddi4>
    8ef0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ef8:	b004      	add	sp, #16
    8efa:	4240      	negs	r0, r0
    8efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f00:	4252      	negs	r2, r2
    8f02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f06:	4770      	bx	lr
    8f08:	4252      	negs	r2, r2
    8f0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f0e:	f000 f924 	bl	915a <__udivmoddi4>
    8f12:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1a:	b004      	add	sp, #16
    8f1c:	4240      	negs	r0, r0
    8f1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f22:	4770      	bx	lr
    8f24:	4252      	negs	r2, r2
    8f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f2a:	f000 f916 	bl	915a <__udivmoddi4>
    8f2e:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f36:	b004      	add	sp, #16
    8f38:	4252      	negs	r2, r2
    8f3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f3e:	4770      	bx	lr

00008f40 <__aeabi_uldivmod>:
    8f40:	b953      	cbnz	r3, 8f58 <__aeabi_uldivmod+0x18>
    8f42:	b94a      	cbnz	r2, 8f58 <__aeabi_uldivmod+0x18>
    8f44:	2900      	cmp	r1, #0
    8f46:	bf08      	it	eq
    8f48:	2800      	cmpeq	r0, #0
    8f4a:	bf1c      	itt	ne
    8f4c:	f04f 31ff 	movne.w	r1, #4294967295
    8f50:	f04f 30ff 	movne.w	r0, #4294967295
    8f54:	f000 b82a 	b.w	8fac <__aeabi_idiv0>
    8f58:	f1ad 0c08 	sub.w	ip, sp, #8
    8f5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f60:	f000 f8fb 	bl	915a <__udivmoddi4>
    8f64:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f6c:	b004      	add	sp, #16
    8f6e:	4770      	bx	lr

00008f70 <__aeabi_d2ulz>:
    8f70:	b5d0      	push	{r4, r6, r7, lr}
    8f72:	2200      	movs	r2, #0
    8f74:	4b0b      	ldr	r3, [pc, #44]	; (8fa4 <__aeabi_d2ulz+0x34>)
    8f76:	4606      	mov	r6, r0
    8f78:	460f      	mov	r7, r1
    8f7a:	f7ff faa9 	bl	84d0 <__aeabi_dmul>
    8f7e:	f000 f89f 	bl	90c0 <__aeabi_d2uiz>
    8f82:	4604      	mov	r4, r0
    8f84:	f7ff fa2a 	bl	83dc <__aeabi_ui2d>
    8f88:	2200      	movs	r2, #0
    8f8a:	4b07      	ldr	r3, [pc, #28]	; (8fa8 <__aeabi_d2ulz+0x38>)
    8f8c:	f7ff faa0 	bl	84d0 <__aeabi_dmul>
    8f90:	4602      	mov	r2, r0
    8f92:	460b      	mov	r3, r1
    8f94:	4630      	mov	r0, r6
    8f96:	4639      	mov	r1, r7
    8f98:	f7ff f8e2 	bl	8160 <__aeabi_dsub>
    8f9c:	f000 f890 	bl	90c0 <__aeabi_d2uiz>
    8fa0:	4621      	mov	r1, r4
    8fa2:	bdd0      	pop	{r4, r6, r7, pc}
    8fa4:	3df00000 	.word	0x3df00000
    8fa8:	41f00000 	.word	0x41f00000

00008fac <__aeabi_idiv0>:
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__gedf2>:
    8fb0:	f04f 3cff 	mov.w	ip, #4294967295
    8fb4:	e006      	b.n	8fc4 <__cmpdf2+0x4>
    8fb6:	bf00      	nop

00008fb8 <__ledf2>:
    8fb8:	f04f 0c01 	mov.w	ip, #1
    8fbc:	e002      	b.n	8fc4 <__cmpdf2+0x4>
    8fbe:	bf00      	nop

00008fc0 <__cmpdf2>:
    8fc0:	f04f 0c01 	mov.w	ip, #1
    8fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
    8fc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8fcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8fd4:	bf18      	it	ne
    8fd6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8fda:	d01b      	beq.n	9014 <__cmpdf2+0x54>
    8fdc:	b001      	add	sp, #4
    8fde:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8fe2:	bf0c      	ite	eq
    8fe4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8fe8:	ea91 0f03 	teqne	r1, r3
    8fec:	bf02      	ittt	eq
    8fee:	ea90 0f02 	teqeq	r0, r2
    8ff2:	2000      	moveq	r0, #0
    8ff4:	4770      	bxeq	lr
    8ff6:	f110 0f00 	cmn.w	r0, #0
    8ffa:	ea91 0f03 	teq	r1, r3
    8ffe:	bf58      	it	pl
    9000:	4299      	cmppl	r1, r3
    9002:	bf08      	it	eq
    9004:	4290      	cmpeq	r0, r2
    9006:	bf2c      	ite	cs
    9008:	17d8      	asrcs	r0, r3, #31
    900a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    900e:	f040 0001 	orr.w	r0, r0, #1
    9012:	4770      	bx	lr
    9014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    901c:	d102      	bne.n	9024 <__cmpdf2+0x64>
    901e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9022:	d107      	bne.n	9034 <__cmpdf2+0x74>
    9024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    902c:	d1d6      	bne.n	8fdc <__cmpdf2+0x1c>
    902e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9032:	d0d3      	beq.n	8fdc <__cmpdf2+0x1c>
    9034:	f85d 0b04 	ldr.w	r0, [sp], #4
    9038:	4770      	bx	lr
    903a:	bf00      	nop

0000903c <__aeabi_cdrcmple>:
    903c:	4684      	mov	ip, r0
    903e:	4610      	mov	r0, r2
    9040:	4662      	mov	r2, ip
    9042:	468c      	mov	ip, r1
    9044:	4619      	mov	r1, r3
    9046:	4663      	mov	r3, ip
    9048:	e000      	b.n	904c <__aeabi_cdcmpeq>
    904a:	bf00      	nop

0000904c <__aeabi_cdcmpeq>:
    904c:	b501      	push	{r0, lr}
    904e:	f7ff ffb7 	bl	8fc0 <__cmpdf2>
    9052:	2800      	cmp	r0, #0
    9054:	bf48      	it	mi
    9056:	f110 0f00 	cmnmi.w	r0, #0
    905a:	bd01      	pop	{r0, pc}

0000905c <__aeabi_dcmpeq>:
    905c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9060:	f7ff fff4 	bl	904c <__aeabi_cdcmpeq>
    9064:	bf0c      	ite	eq
    9066:	2001      	moveq	r0, #1
    9068:	2000      	movne	r0, #0
    906a:	f85d fb08 	ldr.w	pc, [sp], #8
    906e:	bf00      	nop

00009070 <__aeabi_dcmplt>:
    9070:	f84d ed08 	str.w	lr, [sp, #-8]!
    9074:	f7ff ffea 	bl	904c <__aeabi_cdcmpeq>
    9078:	bf34      	ite	cc
    907a:	2001      	movcc	r0, #1
    907c:	2000      	movcs	r0, #0
    907e:	f85d fb08 	ldr.w	pc, [sp], #8
    9082:	bf00      	nop

00009084 <__aeabi_dcmple>:
    9084:	f84d ed08 	str.w	lr, [sp, #-8]!
    9088:	f7ff ffe0 	bl	904c <__aeabi_cdcmpeq>
    908c:	bf94      	ite	ls
    908e:	2001      	movls	r0, #1
    9090:	2000      	movhi	r0, #0
    9092:	f85d fb08 	ldr.w	pc, [sp], #8
    9096:	bf00      	nop

00009098 <__aeabi_dcmpge>:
    9098:	f84d ed08 	str.w	lr, [sp, #-8]!
    909c:	f7ff ffce 	bl	903c <__aeabi_cdrcmple>
    90a0:	bf94      	ite	ls
    90a2:	2001      	movls	r0, #1
    90a4:	2000      	movhi	r0, #0
    90a6:	f85d fb08 	ldr.w	pc, [sp], #8
    90aa:	bf00      	nop

000090ac <__aeabi_dcmpgt>:
    90ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    90b0:	f7ff ffc4 	bl	903c <__aeabi_cdrcmple>
    90b4:	bf34      	ite	cc
    90b6:	2001      	movcc	r0, #1
    90b8:	2000      	movcs	r0, #0
    90ba:	f85d fb08 	ldr.w	pc, [sp], #8
    90be:	bf00      	nop

000090c0 <__aeabi_d2uiz>:
    90c0:	004a      	lsls	r2, r1, #1
    90c2:	d211      	bcs.n	90e8 <__aeabi_d2uiz+0x28>
    90c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    90c8:	d211      	bcs.n	90ee <__aeabi_d2uiz+0x2e>
    90ca:	d50d      	bpl.n	90e8 <__aeabi_d2uiz+0x28>
    90cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    90d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    90d4:	d40e      	bmi.n	90f4 <__aeabi_d2uiz+0x34>
    90d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    90da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    90de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    90e2:	fa23 f002 	lsr.w	r0, r3, r2
    90e6:	4770      	bx	lr
    90e8:	f04f 0000 	mov.w	r0, #0
    90ec:	4770      	bx	lr
    90ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    90f2:	d102      	bne.n	90fa <__aeabi_d2uiz+0x3a>
    90f4:	f04f 30ff 	mov.w	r0, #4294967295
    90f8:	4770      	bx	lr
    90fa:	f04f 0000 	mov.w	r0, #0
    90fe:	4770      	bx	lr

00009100 <__aeabi_dcmpun>:
    9100:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9104:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9108:	d102      	bne.n	9110 <__aeabi_dcmpun+0x10>
    910a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    910e:	d10a      	bne.n	9126 <__aeabi_dcmpun+0x26>
    9110:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9114:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9118:	d102      	bne.n	9120 <__aeabi_dcmpun+0x20>
    911a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    911e:	d102      	bne.n	9126 <__aeabi_dcmpun+0x26>
    9120:	f04f 0000 	mov.w	r0, #0
    9124:	4770      	bx	lr
    9126:	f04f 0001 	mov.w	r0, #1
    912a:	4770      	bx	lr

0000912c <__aeabi_d2lz>:
    912c:	b538      	push	{r3, r4, r5, lr}
    912e:	2200      	movs	r2, #0
    9130:	2300      	movs	r3, #0
    9132:	4604      	mov	r4, r0
    9134:	460d      	mov	r5, r1
    9136:	f7ff ff9b 	bl	9070 <__aeabi_dcmplt>
    913a:	b928      	cbnz	r0, 9148 <__aeabi_d2lz+0x1c>
    913c:	4620      	mov	r0, r4
    913e:	4629      	mov	r1, r5
    9140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9144:	f7ff bf14 	b.w	8f70 <__aeabi_d2ulz>
    9148:	4620      	mov	r0, r4
    914a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    914e:	f7ff ff0f 	bl	8f70 <__aeabi_d2ulz>
    9152:	4240      	negs	r0, r0
    9154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9158:	bd38      	pop	{r3, r4, r5, pc}

0000915a <__udivmoddi4>:
    915a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    915e:	4686      	mov	lr, r0
    9160:	468c      	mov	ip, r1
    9162:	4608      	mov	r0, r1
    9164:	9e08      	ldr	r6, [sp, #32]
    9166:	4615      	mov	r5, r2
    9168:	4674      	mov	r4, lr
    916a:	4619      	mov	r1, r3
    916c:	2b00      	cmp	r3, #0
    916e:	f040 80c1 	bne.w	92f4 <__udivmoddi4+0x19a>
    9172:	4285      	cmp	r5, r0
    9174:	fab2 f282 	clz	r2, r2
    9178:	d945      	bls.n	9206 <__udivmoddi4+0xac>
    917a:	b14a      	cbz	r2, 9190 <__udivmoddi4+0x36>
    917c:	f1c2 0320 	rsb	r3, r2, #32
    9180:	fa00 fc02 	lsl.w	ip, r0, r2
    9184:	4095      	lsls	r5, r2
    9186:	4094      	lsls	r4, r2
    9188:	fa2e f303 	lsr.w	r3, lr, r3
    918c:	ea43 0c0c 	orr.w	ip, r3, ip
    9190:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9194:	b2a8      	uxth	r0, r5
    9196:	0c23      	lsrs	r3, r4, #16
    9198:	fbbc f8fe 	udiv	r8, ip, lr
    919c:	fb0e cc18 	mls	ip, lr, r8, ip
    91a0:	fb08 f900 	mul.w	r9, r8, r0
    91a4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    91a8:	4599      	cmp	r9, r3
    91aa:	d928      	bls.n	91fe <__udivmoddi4+0xa4>
    91ac:	18eb      	adds	r3, r5, r3
    91ae:	f108 37ff 	add.w	r7, r8, #4294967295
    91b2:	d204      	bcs.n	91be <__udivmoddi4+0x64>
    91b4:	4599      	cmp	r9, r3
    91b6:	d902      	bls.n	91be <__udivmoddi4+0x64>
    91b8:	f1a8 0702 	sub.w	r7, r8, #2
    91bc:	442b      	add	r3, r5
    91be:	eba3 0309 	sub.w	r3, r3, r9
    91c2:	b2a4      	uxth	r4, r4
    91c4:	fbb3 fcfe 	udiv	ip, r3, lr
    91c8:	fb0e 331c 	mls	r3, lr, ip, r3
    91cc:	fb0c f000 	mul.w	r0, ip, r0
    91d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91d4:	42a0      	cmp	r0, r4
    91d6:	d914      	bls.n	9202 <__udivmoddi4+0xa8>
    91d8:	192c      	adds	r4, r5, r4
    91da:	f10c 33ff 	add.w	r3, ip, #4294967295
    91de:	d204      	bcs.n	91ea <__udivmoddi4+0x90>
    91e0:	42a0      	cmp	r0, r4
    91e2:	d902      	bls.n	91ea <__udivmoddi4+0x90>
    91e4:	f1ac 0302 	sub.w	r3, ip, #2
    91e8:	442c      	add	r4, r5
    91ea:	1a24      	subs	r4, r4, r0
    91ec:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    91f0:	b11e      	cbz	r6, 91fa <__udivmoddi4+0xa0>
    91f2:	40d4      	lsrs	r4, r2
    91f4:	2300      	movs	r3, #0
    91f6:	6034      	str	r4, [r6, #0]
    91f8:	6073      	str	r3, [r6, #4]
    91fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91fe:	4647      	mov	r7, r8
    9200:	e7dd      	b.n	91be <__udivmoddi4+0x64>
    9202:	4663      	mov	r3, ip
    9204:	e7f1      	b.n	91ea <__udivmoddi4+0x90>
    9206:	bb92      	cbnz	r2, 926e <__udivmoddi4+0x114>
    9208:	1b43      	subs	r3, r0, r5
    920a:	2101      	movs	r1, #1
    920c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9210:	b2af      	uxth	r7, r5
    9212:	0c20      	lsrs	r0, r4, #16
    9214:	fbb3 fcfe 	udiv	ip, r3, lr
    9218:	fb0e 331c 	mls	r3, lr, ip, r3
    921c:	fb0c f807 	mul.w	r8, ip, r7
    9220:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9224:	4598      	cmp	r8, r3
    9226:	d961      	bls.n	92ec <__udivmoddi4+0x192>
    9228:	18eb      	adds	r3, r5, r3
    922a:	f10c 30ff 	add.w	r0, ip, #4294967295
    922e:	d204      	bcs.n	923a <__udivmoddi4+0xe0>
    9230:	4598      	cmp	r8, r3
    9232:	d902      	bls.n	923a <__udivmoddi4+0xe0>
    9234:	f1ac 0002 	sub.w	r0, ip, #2
    9238:	442b      	add	r3, r5
    923a:	eba3 0308 	sub.w	r3, r3, r8
    923e:	b2a4      	uxth	r4, r4
    9240:	fbb3 fcfe 	udiv	ip, r3, lr
    9244:	fb0e 331c 	mls	r3, lr, ip, r3
    9248:	fb0c f707 	mul.w	r7, ip, r7
    924c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9250:	42a7      	cmp	r7, r4
    9252:	d94d      	bls.n	92f0 <__udivmoddi4+0x196>
    9254:	192c      	adds	r4, r5, r4
    9256:	f10c 33ff 	add.w	r3, ip, #4294967295
    925a:	d204      	bcs.n	9266 <__udivmoddi4+0x10c>
    925c:	42a7      	cmp	r7, r4
    925e:	d902      	bls.n	9266 <__udivmoddi4+0x10c>
    9260:	f1ac 0302 	sub.w	r3, ip, #2
    9264:	442c      	add	r4, r5
    9266:	1be4      	subs	r4, r4, r7
    9268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    926c:	e7c0      	b.n	91f0 <__udivmoddi4+0x96>
    926e:	f1c2 0320 	rsb	r3, r2, #32
    9272:	4095      	lsls	r5, r2
    9274:	4094      	lsls	r4, r2
    9276:	fa20 f103 	lsr.w	r1, r0, r3
    927a:	fa2e f303 	lsr.w	r3, lr, r3
    927e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9282:	4090      	lsls	r0, r2
    9284:	b2af      	uxth	r7, r5
    9286:	4303      	orrs	r3, r0
    9288:	fbb1 fcfe 	udiv	ip, r1, lr
    928c:	fb0e 101c 	mls	r0, lr, ip, r1
    9290:	0c19      	lsrs	r1, r3, #16
    9292:	fb0c f807 	mul.w	r8, ip, r7
    9296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    929a:	4588      	cmp	r8, r1
    929c:	d922      	bls.n	92e4 <__udivmoddi4+0x18a>
    929e:	1869      	adds	r1, r5, r1
    92a0:	f10c 30ff 	add.w	r0, ip, #4294967295
    92a4:	d204      	bcs.n	92b0 <__udivmoddi4+0x156>
    92a6:	4588      	cmp	r8, r1
    92a8:	d902      	bls.n	92b0 <__udivmoddi4+0x156>
    92aa:	f1ac 0002 	sub.w	r0, ip, #2
    92ae:	4429      	add	r1, r5
    92b0:	eba1 0108 	sub.w	r1, r1, r8
    92b4:	b29b      	uxth	r3, r3
    92b6:	fbb1 fcfe 	udiv	ip, r1, lr
    92ba:	fb0e 111c 	mls	r1, lr, ip, r1
    92be:	fb0c f707 	mul.w	r7, ip, r7
    92c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    92c6:	429f      	cmp	r7, r3
    92c8:	d90e      	bls.n	92e8 <__udivmoddi4+0x18e>
    92ca:	18eb      	adds	r3, r5, r3
    92cc:	f10c 31ff 	add.w	r1, ip, #4294967295
    92d0:	d204      	bcs.n	92dc <__udivmoddi4+0x182>
    92d2:	429f      	cmp	r7, r3
    92d4:	d902      	bls.n	92dc <__udivmoddi4+0x182>
    92d6:	f1ac 0102 	sub.w	r1, ip, #2
    92da:	442b      	add	r3, r5
    92dc:	1bdb      	subs	r3, r3, r7
    92de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    92e2:	e793      	b.n	920c <__udivmoddi4+0xb2>
    92e4:	4660      	mov	r0, ip
    92e6:	e7e3      	b.n	92b0 <__udivmoddi4+0x156>
    92e8:	4661      	mov	r1, ip
    92ea:	e7f7      	b.n	92dc <__udivmoddi4+0x182>
    92ec:	4660      	mov	r0, ip
    92ee:	e7a4      	b.n	923a <__udivmoddi4+0xe0>
    92f0:	4663      	mov	r3, ip
    92f2:	e7b8      	b.n	9266 <__udivmoddi4+0x10c>
    92f4:	4283      	cmp	r3, r0
    92f6:	d906      	bls.n	9306 <__udivmoddi4+0x1ac>
    92f8:	b916      	cbnz	r6, 9300 <__udivmoddi4+0x1a6>
    92fa:	2100      	movs	r1, #0
    92fc:	4608      	mov	r0, r1
    92fe:	e77c      	b.n	91fa <__udivmoddi4+0xa0>
    9300:	e9c6 e000 	strd	lr, r0, [r6]
    9304:	e7f9      	b.n	92fa <__udivmoddi4+0x1a0>
    9306:	fab3 f783 	clz	r7, r3
    930a:	b98f      	cbnz	r7, 9330 <__udivmoddi4+0x1d6>
    930c:	4283      	cmp	r3, r0
    930e:	d301      	bcc.n	9314 <__udivmoddi4+0x1ba>
    9310:	4572      	cmp	r2, lr
    9312:	d808      	bhi.n	9326 <__udivmoddi4+0x1cc>
    9314:	ebbe 0402 	subs.w	r4, lr, r2
    9318:	eb60 0303 	sbc.w	r3, r0, r3
    931c:	2001      	movs	r0, #1
    931e:	469c      	mov	ip, r3
    9320:	b91e      	cbnz	r6, 932a <__udivmoddi4+0x1d0>
    9322:	2100      	movs	r1, #0
    9324:	e769      	b.n	91fa <__udivmoddi4+0xa0>
    9326:	4638      	mov	r0, r7
    9328:	e7fa      	b.n	9320 <__udivmoddi4+0x1c6>
    932a:	e9c6 4c00 	strd	r4, ip, [r6]
    932e:	e7f8      	b.n	9322 <__udivmoddi4+0x1c8>
    9330:	f1c7 0c20 	rsb	ip, r7, #32
    9334:	40bb      	lsls	r3, r7
    9336:	fa0e f507 	lsl.w	r5, lr, r7
    933a:	fa22 f40c 	lsr.w	r4, r2, ip
    933e:	fa2e f10c 	lsr.w	r1, lr, ip
    9342:	40ba      	lsls	r2, r7
    9344:	431c      	orrs	r4, r3
    9346:	fa20 f30c 	lsr.w	r3, r0, ip
    934a:	40b8      	lsls	r0, r7
    934c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9350:	4301      	orrs	r1, r0
    9352:	fa1f fe84 	uxth.w	lr, r4
    9356:	fbb3 f8f9 	udiv	r8, r3, r9
    935a:	fb09 3018 	mls	r0, r9, r8, r3
    935e:	0c0b      	lsrs	r3, r1, #16
    9360:	fb08 fa0e 	mul.w	sl, r8, lr
    9364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9368:	459a      	cmp	sl, r3
    936a:	d940      	bls.n	93ee <__udivmoddi4+0x294>
    936c:	18e3      	adds	r3, r4, r3
    936e:	f108 30ff 	add.w	r0, r8, #4294967295
    9372:	d204      	bcs.n	937e <__udivmoddi4+0x224>
    9374:	459a      	cmp	sl, r3
    9376:	d902      	bls.n	937e <__udivmoddi4+0x224>
    9378:	f1a8 0002 	sub.w	r0, r8, #2
    937c:	4423      	add	r3, r4
    937e:	eba3 030a 	sub.w	r3, r3, sl
    9382:	b289      	uxth	r1, r1
    9384:	fbb3 f8f9 	udiv	r8, r3, r9
    9388:	fb09 3318 	mls	r3, r9, r8, r3
    938c:	fb08 fe0e 	mul.w	lr, r8, lr
    9390:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9394:	458e      	cmp	lr, r1
    9396:	d92c      	bls.n	93f2 <__udivmoddi4+0x298>
    9398:	1861      	adds	r1, r4, r1
    939a:	f108 33ff 	add.w	r3, r8, #4294967295
    939e:	d204      	bcs.n	93aa <__udivmoddi4+0x250>
    93a0:	458e      	cmp	lr, r1
    93a2:	d902      	bls.n	93aa <__udivmoddi4+0x250>
    93a4:	f1a8 0302 	sub.w	r3, r8, #2
    93a8:	4421      	add	r1, r4
    93aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    93ae:	eba1 010e 	sub.w	r1, r1, lr
    93b2:	fba0 9802 	umull	r9, r8, r0, r2
    93b6:	4541      	cmp	r1, r8
    93b8:	46ce      	mov	lr, r9
    93ba:	4643      	mov	r3, r8
    93bc:	d302      	bcc.n	93c4 <__udivmoddi4+0x26a>
    93be:	d106      	bne.n	93ce <__udivmoddi4+0x274>
    93c0:	454d      	cmp	r5, r9
    93c2:	d204      	bcs.n	93ce <__udivmoddi4+0x274>
    93c4:	3801      	subs	r0, #1
    93c6:	ebb9 0e02 	subs.w	lr, r9, r2
    93ca:	eb68 0304 	sbc.w	r3, r8, r4
    93ce:	2e00      	cmp	r6, #0
    93d0:	d0a7      	beq.n	9322 <__udivmoddi4+0x1c8>
    93d2:	ebb5 020e 	subs.w	r2, r5, lr
    93d6:	eb61 0103 	sbc.w	r1, r1, r3
    93da:	fa01 fc0c 	lsl.w	ip, r1, ip
    93de:	fa22 f307 	lsr.w	r3, r2, r7
    93e2:	40f9      	lsrs	r1, r7
    93e4:	ea4c 0303 	orr.w	r3, ip, r3
    93e8:	e9c6 3100 	strd	r3, r1, [r6]
    93ec:	e799      	b.n	9322 <__udivmoddi4+0x1c8>
    93ee:	4640      	mov	r0, r8
    93f0:	e7c5      	b.n	937e <__udivmoddi4+0x224>
    93f2:	4643      	mov	r3, r8
    93f4:	e7d9      	b.n	93aa <__udivmoddi4+0x250>

000093f6 <strcmp>:
    93f6:	f810 2b01 	ldrb.w	r2, [r0], #1
    93fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    93fe:	2a01      	cmp	r2, #1
    9400:	bf28      	it	cs
    9402:	429a      	cmpcs	r2, r3
    9404:	d0f7      	beq.n	93f6 <strcmp>
    9406:	1ad0      	subs	r0, r2, r3
    9408:	4770      	bx	lr

0000940a <strlen>:
    940a:	4603      	mov	r3, r0
    940c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9410:	2a00      	cmp	r2, #0
    9412:	d1fb      	bne.n	940c <strlen+0x2>
    9414:	1a18      	subs	r0, r3, r0
    9416:	3801      	subs	r0, #1
    9418:	4770      	bx	lr
    941a:	0000      	movs	r0, r0
    941c:	0000      	movs	r0, r0
	...

00009420 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9422:	460c      	mov	r4, r1
  //  +3V --- RESISTOR_SERIE_NTC ----AD--- NTC --- GND


  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9424:	f7fe ffea 	bl	83fc <__aeabi_i2d>
    9428:	a325      	add	r3, pc, #148	; (adr r3, 94c0 <ntc_temperature+0xa0>)
    942a:	e9d3 2300 	ldrd	r2, r3, [r3]
    942e:	f7ff f84f 	bl	84d0 <__aeabi_dmul>
    9432:	f7ff fa87 	bl	8944 <__aeabi_d2f>
    9436:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9438:	1e63      	subs	r3, r4, #1
    943a:	b2db      	uxtb	r3, r3
    943c:	2b02      	cmp	r3, #2
    943e:	bf96      	itet	ls
    9440:	4a27      	ldrls	r2, [pc, #156]	; (94e0 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9442:	2000      	movhi	r0, #0
    9444:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9448:	4629      	mov	r1, r5
    944a:	f7ff fbd9 	bl	8c00 <__aeabi_fmul>
    944e:	f7fe ffe7 	bl	8420 <__aeabi_f2d>
    9452:	4606      	mov	r6, r0
    9454:	4628      	mov	r0, r5
    9456:	460f      	mov	r7, r1
    9458:	f7fe ffe2 	bl	8420 <__aeabi_f2d>
    945c:	4602      	mov	r2, r0
    945e:	460b      	mov	r3, r1
    9460:	2000      	movs	r0, #0
    9462:	4920      	ldr	r1, [pc, #128]	; (94e4 <ntc_temperature+0xc4>)
    9464:	f7fe fe7c 	bl	8160 <__aeabi_dsub>
    9468:	4602      	mov	r2, r0
    946a:	460b      	mov	r3, r1
    946c:	4630      	mov	r0, r6
    946e:	4639      	mov	r1, r7
    9470:	f7ff f958 	bl	8724 <__aeabi_ddiv>
    9474:	f7ff fa66 	bl	8944 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    9478:	491b      	ldr	r1, [pc, #108]	; (94e8 <ntc_temperature+0xc8>)
    947a:	f7ff fc75 	bl	8d68 <__aeabi_fdiv>
    947e:	f7fe ffcf 	bl	8420 <__aeabi_f2d>
    9482:	f01d fba5 	bl	26bd0 <log>
    9486:	a310      	add	r3, pc, #64	; (adr r3, 94c8 <ntc_temperature+0xa8>)
    9488:	e9d3 2300 	ldrd	r2, r3, [r3]
    948c:	f7ff f94a 	bl	8724 <__aeabi_ddiv>
    9490:	a30f      	add	r3, pc, #60	; (adr r3, 94d0 <ntc_temperature+0xb0>)
    9492:	e9d3 2300 	ldrd	r2, r3, [r3]
    9496:	f7fe fe65 	bl	8164 <__adddf3>
    949a:	4602      	mov	r2, r0
    949c:	460b      	mov	r3, r1
    949e:	2000      	movs	r0, #0
    94a0:	4912      	ldr	r1, [pc, #72]	; (94ec <ntc_temperature+0xcc>)
    94a2:	f7ff f93f 	bl	8724 <__aeabi_ddiv>
    94a6:	f7ff fa4d 	bl	8944 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    94aa:	f7fe ffb9 	bl	8420 <__aeabi_f2d>
    94ae:	a30a      	add	r3, pc, #40	; (adr r3, 94d8 <ntc_temperature+0xb8>)
    94b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94b4:	f7fe fe54 	bl	8160 <__aeabi_dsub>
    94b8:	f7ff fa44 	bl	8944 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    94bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94be:	bf00      	nop
    94c0:	3a66a002 	.word	0x3a66a002
    94c4:	3f2ccdb3 	.word	0x3f2ccdb3
    94c8:	00000000 	.word	0x00000000
    94cc:	40af0200 	.word	0x40af0200
    94d0:	dcb5db83 	.word	0xdcb5db83
    94d4:	3f6b79e1 	.word	0x3f6b79e1
    94d8:	66666666 	.word	0x66666666
    94dc:	40711266 	.word	0x40711266
    94e0:	00033454 	.word	0x00033454
    94e4:	40080000 	.word	0x40080000
    94e8:	461c4000 	.word	0x461c4000
    94ec:	3ff00000 	.word	0x3ff00000

000094f0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    94f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f2:	4d64      	ldr	r5, [pc, #400]	; (9684 <bt_init+0x194>)
{
    94f4:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f6:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    94fa:	6899      	ldr	r1, [r3, #8]
    94fc:	f011 0101 	ands.w	r1, r1, #1
    9500:	d11a      	bne.n	9538 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9502:	f640 4003 	movw	r0, #3075	; 0xc03
    9506:	aa05      	add	r2, sp, #20
    9508:	f010 fc18 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	f040 80b5 	bne.w	967e <bt_init+0x18e>
		hci_reset_complete(rsp);
    9514:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9516:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	b95b      	cbnz	r3, 9534 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    951c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9520:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9524:	f002 0209 	and.w	r2, r2, #9
    9528:	e8d3 1fef 	ldaex	r1, [r3]
    952c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9530:	2c00      	cmp	r4, #0
    9532:	d1f9      	bne.n	9528 <bt_init+0x38>
		net_buf_unref(rsp);
    9534:	f017 f832 	bl	2059c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9538:	2100      	movs	r1, #0
    953a:	f241 0003 	movw	r0, #4099	; 0x1003
    953e:	aa05      	add	r2, sp, #20
    9540:	f010 fbfc 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    9544:	4604      	mov	r4, r0
    9546:	2800      	cmp	r0, #0
    9548:	f040 8099 	bne.w	967e <bt_init+0x18e>
	read_local_features_complete(rsp);
    954c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    954e:	4e4e      	ldr	r6, [pc, #312]	; (9688 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    9550:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9552:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9556:	f8d2 1005 	ldr.w	r1, [r2, #5]
    955a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    955c:	4618      	mov	r0, r3
    955e:	f017 f81d 	bl	2059c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9562:	4621      	mov	r1, r4
    9564:	f241 0001 	movw	r0, #4097	; 0x1001
    9568:	aa05      	add	r2, sp, #20
    956a:	f010 fbe7 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    956e:	4604      	mov	r4, r0
    9570:	2800      	cmp	r0, #0
    9572:	f040 8084 	bne.w	967e <bt_init+0x18e>
	read_local_ver_complete(rsp);
    9576:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    9578:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    957a:	785a      	ldrb	r2, [r3, #1]
    957c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9580:	885a      	ldrh	r2, [r3, #2]
    9582:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    9586:	791a      	ldrb	r2, [r3, #4]
    9588:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    958c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9590:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9594:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9598:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    959c:	f016 fffe 	bl	2059c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    95a0:	4621      	mov	r1, r4
    95a2:	f241 0002 	movw	r0, #4098	; 0x1002
    95a6:	aa05      	add	r2, sp, #20
    95a8:	f010 fbc8 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    95ac:	4604      	mov	r4, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	d165      	bne.n	967e <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    95b2:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    95b4:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    95b6:	1c53      	adds	r3, r2, #1
    95b8:	3241      	adds	r2, #65	; 0x41
    95ba:	4634      	mov	r4, r6
    95bc:	6818      	ldr	r0, [r3, #0]
    95be:	6859      	ldr	r1, [r3, #4]
    95c0:	3308      	adds	r3, #8
    95c2:	c403      	stmia	r4!, {r0, r1}
    95c4:	4293      	cmp	r3, r2
    95c6:	4626      	mov	r6, r4
    95c8:	d1f7      	bne.n	95ba <bt_init+0xca>
	net_buf_unref(rsp);
    95ca:	4638      	mov	r0, r7
    95cc:	f016 ffe6 	bl	2059c <net_buf_unref>
		err = prng_init();
    95d0:	f012 f930 	bl	1b834 <prng_init>
		if (err) {
    95d4:	4604      	mov	r4, r0
    95d6:	2800      	cmp	r0, #0
    95d8:	d151      	bne.n	967e <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    95da:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    95de:	f013 0320 	ands.w	r3, r3, #32
    95e2:	d118      	bne.n	9616 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    95e4:	4a29      	ldr	r2, [pc, #164]	; (968c <bt_init+0x19c>)
    95e6:	492a      	ldr	r1, [pc, #168]	; (9690 <bt_init+0x1a0>)
    95e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    95ec:	9300      	str	r3, [sp, #0]
    95ee:	2202      	movs	r2, #2
    95f0:	f023 fec1 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    95f4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    95f8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    95fc:	d14c      	bne.n	9698 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    95fe:	4a25      	ldr	r2, [pc, #148]	; (9694 <bt_init+0x1a4>)
    9600:	4618      	mov	r0, r3
    9602:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9606:	4922      	ldr	r1, [pc, #136]	; (9690 <bt_init+0x1a0>)
    9608:	2201      	movs	r2, #1
    960a:	9300      	str	r3, [sp, #0]
    960c:	f023 feb3 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9610:	f06f 0412 	mvn.w	r4, #18
    9614:	e033      	b.n	967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9616:	2107      	movs	r1, #7
    9618:	f640 4033 	movw	r0, #3123	; 0xc33
    961c:	f010 fb54 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
    9620:	4606      	mov	r6, r0
    9622:	2800      	cmp	r0, #0
    9624:	f000 8140 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9628:	2107      	movs	r1, #7
    962a:	300c      	adds	r0, #12
    962c:	f025 ff01 	bl	2f432 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9630:	2345      	movs	r3, #69	; 0x45
    9632:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9634:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9636:	f8c0 4002 	str.w	r4, [r0, #2]
    963a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    963c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    963e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9640:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9642:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9644:	4631      	mov	r1, r6
    9646:	f640 4033 	movw	r0, #3123	; 0xc33
    964a:	f010 fb77 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    964e:	4604      	mov	r4, r0
    9650:	b9a8      	cbnz	r0, 967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    9652:	2101      	movs	r1, #1
    9654:	f640 4031 	movw	r0, #3121	; 0xc31
    9658:	f010 fb36 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
    965c:	4606      	mov	r6, r0
    965e:	2800      	cmp	r0, #0
    9660:	f000 8122 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    9664:	2101      	movs	r1, #1
    9666:	300c      	adds	r0, #12
    9668:	f025 fef2 	bl	2f450 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    966c:	4622      	mov	r2, r4
    966e:	4631      	mov	r1, r6
    9670:	f640 4031 	movw	r0, #3121	; 0xc31
    9674:	f010 fb62 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    9678:	4604      	mov	r4, r0
    967a:	2800      	cmp	r0, #0
    967c:	d0ba      	beq.n	95f4 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    967e:	4620      	mov	r0, r4
    9680:	b007      	add	sp, #28
    9682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9684:	20008000 	.word	0x20008000
    9688:	20008070 	.word	0x20008070
    968c:	00036bba 	.word	0x00036bba
    9690:	00033040 	.word	0x00033040
    9694:	00036be8 	.word	0x00036be8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9698:	2100      	movs	r1, #0
    969a:	f242 0003 	movw	r0, #8195	; 0x2003
    969e:	aa05      	add	r2, sp, #20
    96a0:	f010 fb4c 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    96a4:	4604      	mov	r4, r0
    96a6:	2800      	cmp	r0, #0
    96a8:	d1e9      	bne.n	967e <bt_init+0x18e>
	read_le_features_complete(rsp);
    96aa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96ac:	4ebe      	ldr	r6, [pc, #760]	; (99a8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    96ae:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96b0:	f8d2 0001 	ldr.w	r0, [r2, #1]
    96b4:	f8d2 1005 	ldr.w	r1, [r2, #5]
    96b8:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    96ba:	4618      	mov	r0, r3
    96bc:	f016 ff6e 	bl	2059c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    96c0:	4621      	mov	r1, r4
    96c2:	f242 0002 	movw	r0, #8194	; 0x2002
    96c6:	aa05      	add	r2, sp, #20
    96c8:	f010 fb38 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
    96cc:	4604      	mov	r4, r0
    96ce:	2800      	cmp	r0, #0
    96d0:	d1d5      	bne.n	967e <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    96d2:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    96d4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    96d6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    96da:	b291      	uxth	r1, r2
    96dc:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    96e0:	b129      	cbz	r1, 96ee <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    96e2:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    96e4:	4611      	mov	r1, r2
    96e6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    96ea:	f027 fc51 	bl	30f90 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    96ee:	4620      	mov	r0, r4
    96f0:	f016 ff54 	bl	2059c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96f4:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    96f8:	f016 0620 	ands.w	r6, r6, #32
    96fc:	d118      	bne.n	9730 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    96fe:	2102      	movs	r1, #2
    9700:	f640 406d 	movw	r0, #3181	; 0xc6d
    9704:	f010 fae0 	bl	19cc8 <bt_hci_cmd_create>
		if (!buf) {
    9708:	4604      	mov	r4, r0
    970a:	2800      	cmp	r0, #0
    970c:	f000 80cc 	beq.w	98a8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9710:	2102      	movs	r1, #2
    9712:	300c      	adds	r0, #12
    9714:	f025 fe8d 	bl	2f432 <net_buf_simple_add>
		cp_le->le = 0x01;
    9718:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    971a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    971c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    971e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9720:	4632      	mov	r2, r6
    9722:	f640 406d 	movw	r0, #3181	; 0xc6d
    9726:	f010 fb09 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
    972a:	4604      	mov	r4, r0
    972c:	2800      	cmp	r0, #0
    972e:	d1a6      	bne.n	967e <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9730:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9734:	071f      	lsls	r7, r3, #28
    9736:	d512      	bpl.n	975e <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9738:	2100      	movs	r1, #0
    973a:	f242 001c 	movw	r0, #8220	; 0x201c
    973e:	aa05      	add	r2, sp, #20
    9740:	f010 fafc 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
    9744:	4604      	mov	r4, r0
    9746:	2800      	cmp	r0, #0
    9748:	d199      	bne.n	967e <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    974a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    974c:	68c3      	ldr	r3, [r0, #12]
    974e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    9752:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9756:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    975a:	f016 ff1f 	bl	2059c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    975e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9762:	069e      	lsls	r6, r3, #26
    9764:	d524      	bpl.n	97b0 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9766:	f10d 0112 	add.w	r1, sp, #18
    976a:	a804      	add	r0, sp, #16
    976c:	f010 fb5c 	bl	19e28 <hci_le_read_max_data_len>
		if (err) {
    9770:	4604      	mov	r4, r0
    9772:	2800      	cmp	r0, #0
    9774:	d183      	bne.n	967e <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9776:	2104      	movs	r1, #4
    9778:	f242 0024 	movw	r0, #8228	; 0x2024
    977c:	f010 faa4 	bl	19cc8 <bt_hci_cmd_create>
		if (!buf) {
    9780:	4606      	mov	r6, r0
    9782:	2800      	cmp	r0, #0
    9784:	f000 8090 	beq.w	98a8 <bt_init+0x3b8>
    9788:	2104      	movs	r1, #4
    978a:	300c      	adds	r0, #12
    978c:	f025 fe51 	bl	2f432 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9790:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9794:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9796:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9798:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    979c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    979e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    97a0:	f242 0024 	movw	r0, #8228	; 0x2024
    97a4:	f010 faca 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
    97a8:	4604      	mov	r4, r0
    97aa:	2800      	cmp	r0, #0
    97ac:	f47f af67 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    97b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    97b4:	065c      	lsls	r4, r3, #25
    97b6:	d510      	bpl.n	97da <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    97b8:	2100      	movs	r1, #0
    97ba:	f242 002a 	movw	r0, #8234	; 0x202a
    97be:	aa05      	add	r2, sp, #20
    97c0:	f010 fabc 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
    97c4:	4604      	mov	r4, r0
    97c6:	2800      	cmp	r0, #0
    97c8:	f47f af59 	bne.w	967e <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    97cc:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    97ce:	68c3      	ldr	r3, [r0, #12]
    97d0:	785b      	ldrb	r3, [r3, #1]
    97d2:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    97d6:	f016 fee1 	bl	2059c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    97da:	2108      	movs	r1, #8
    97dc:	f242 0001 	movw	r0, #8193	; 0x2001
    97e0:	f010 fa72 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
    97e4:	4604      	mov	r4, r0
    97e6:	2800      	cmp	r0, #0
    97e8:	d05e      	beq.n	98a8 <bt_init+0x3b8>
    97ea:	2108      	movs	r1, #8
    97ec:	300c      	adds	r0, #12
    97ee:	f025 fe20 	bl	2f432 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    97f2:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    97f6:	f240 2302 	movw	r3, #514	; 0x202
    97fa:	f011 0f40 	tst.w	r1, #64	; 0x40
    97fe:	bf08      	it	eq
    9800:	2303      	moveq	r3, #3
    9802:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9804:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9806:	bf4c      	ite	mi
    9808:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    980c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9810:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9812:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9816:	bf48      	it	mi
    9818:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    981c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9820:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9824:	bf18      	it	ne
    9826:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    982a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    982e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9830:	bf48      	it	mi
    9832:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9836:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9838:	bf08      	it	eq
    983a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    983e:	2100      	movs	r1, #0
    9840:	f023 fdb0 	bl	2d3a4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9844:	4621      	mov	r1, r4
    9846:	2200      	movs	r2, #0
    9848:	f242 0001 	movw	r0, #8193	; 0x2001
    984c:	f010 fa76 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    9850:	4604      	mov	r4, r0
    9852:	2800      	cmp	r0, #0
    9854:	f47f af13 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9858:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    985c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9860:	069e      	lsls	r6, r3, #26
    9862:	d424      	bmi.n	98ae <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    9864:	b9c9      	cbnz	r1, 989a <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9866:	f241 0005 	movw	r0, #4101	; 0x1005
    986a:	aa05      	add	r2, sp, #20
    986c:	f010 fa66 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f af03 	bne.w	967e <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    9878:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    987c:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    987e:	b94b      	cbnz	r3, 9894 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    9880:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9882:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9886:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    988a:	889a      	ldrh	r2, [r3, #4]
    988c:	4847      	ldr	r0, [pc, #284]	; (99ac <bt_init+0x4bc>)
    988e:	4611      	mov	r1, r2
    9890:	f027 fb7e 	bl	30f90 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9894:	4620      	mov	r0, r4
    9896:	f016 fe81 	bl	2059c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    989a:	2108      	movs	r1, #8
    989c:	f640 4001 	movw	r0, #3073	; 0xc01
    98a0:	f010 fa12 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
    98a4:	4604      	mov	r4, r0
    98a6:	b980      	cbnz	r0, 98ca <bt_init+0x3da>
		return -ENOBUFS;
    98a8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    98ac:	e6e7      	b.n	967e <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    98ae:	2900      	cmp	r1, #0
    98b0:	d1f3      	bne.n	989a <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    98b2:	4b3f      	ldr	r3, [pc, #252]	; (99b0 <bt_init+0x4c0>)
    98b4:	2201      	movs	r2, #1
    98b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    98ba:	493e      	ldr	r1, [pc, #248]	; (99b4 <bt_init+0x4c4>)
    98bc:	4603      	mov	r3, r0
    98be:	9000      	str	r0, [sp, #0]
    98c0:	f023 fd59 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    98c4:	f06f 0404 	mvn.w	r4, #4
    98c8:	e6d9      	b.n	967e <bt_init+0x18e>
    98ca:	2108      	movs	r1, #8
    98cc:	300c      	adds	r0, #12
    98ce:	f025 fdb0 	bl	2f432 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    98d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    98d6:	4602      	mov	r2, r0
    98d8:	07d9      	lsls	r1, r3, #31
    98da:	d41c      	bmi.n	9916 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    98dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    98e0:	4835      	ldr	r0, [pc, #212]	; (99b8 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    98e2:	f023 fd5f 	bl	2d3a4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    98e6:	4621      	mov	r1, r4
    98e8:	2200      	movs	r2, #0
    98ea:	f640 4001 	movw	r0, #3073	; 0xc01
    98ee:	f010 fa25 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    98f2:	4604      	mov	r4, r0
    98f4:	2800      	cmp	r0, #0
    98f6:	f47f aec2 	bne.w	967e <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    98fa:	4601      	mov	r1, r0
    98fc:	aa05      	add	r2, sp, #20
    98fe:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9902:	f010 fa1b 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    9906:	4606      	mov	r6, r0
    9908:	b148      	cbz	r0, 991e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    990a:	4b2c      	ldr	r3, [pc, #176]	; (99bc <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    990c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9910:	9400      	str	r4, [sp, #0]
    9912:	4623      	mov	r3, r4
    9914:	e013      	b.n	993e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9916:	a122      	add	r1, pc, #136	; (adr r1, 99a0 <bt_init+0x4b0>)
    9918:	e9d1 0100 	ldrd	r0, r1, [r1]
    991c:	e7e1      	b.n	98e2 <bt_init+0x3f2>
	net_buf_unref(rsp);
    991e:	9805      	ldr	r0, [sp, #20]
    9920:	f016 fe3c 	bl	2059c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9924:	4631      	mov	r1, r6
    9926:	f64f 4002 	movw	r0, #64514	; 0xfc02
    992a:	aa05      	add	r2, sp, #20
    992c:	f010 fa06 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
    9930:	4604      	mov	r4, r0
    9932:	b1c0      	cbz	r0, 9966 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9934:	4b22      	ldr	r3, [pc, #136]	; (99c0 <bt_init+0x4d0>)
    9936:	9600      	str	r6, [sp, #0]
    9938:	e9cd 6301 	strd	r6, r3, [sp, #4]
    993c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    993e:	2202      	movs	r2, #2
    9940:	4618      	mov	r0, r3
    9942:	491c      	ldr	r1, [pc, #112]	; (99b4 <bt_init+0x4c4>)
    9944:	f023 fd17 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9948:	f011 fc20 	bl	1b18c <bt_id_init>
	if (err) {
    994c:	4604      	mov	r4, r0
    994e:	2800      	cmp	r0, #0
    9950:	f47f ae95 	bne.w	967e <bt_init+0x18e>
		err = bt_conn_init();
    9954:	f012 ff48 	bl	1c7e8 <bt_conn_init>
		if (err) {
    9958:	4604      	mov	r4, r0
    995a:	2800      	cmp	r0, #0
    995c:	f47f ae8f 	bne.w	967e <bt_init+0x18e>
	bt_finalize_init();
    9960:	f010 ffe0 	bl	1a924 <bt_finalize_init>
	return 0;
    9964:	e68b      	b.n	967e <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    9966:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9968:	68c3      	ldr	r3, [r0, #12]
    996a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    996e:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    9972:	f016 fe13 	bl	2059c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9976:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    997a:	075b      	lsls	r3, r3, #29
    997c:	d5e4      	bpl.n	9948 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    997e:	4621      	mov	r1, r4
    9980:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9984:	aa05      	add	r2, sp, #20
    9986:	f010 f9d9 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
    998a:	b108      	cbz	r0, 9990 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    998c:	4b0d      	ldr	r3, [pc, #52]	; (99c4 <bt_init+0x4d4>)
    998e:	e7bd      	b.n	990c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    9990:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9992:	68c3      	ldr	r3, [r0, #12]
    9994:	785b      	ldrb	r3, [r3, #1]
    9996:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    999a:	f016 fdff 	bl	2059c <net_buf_unref>
    999e:	e7d3      	b.n	9948 <bt_init+0x458>
    99a0:	02008890 	.word	0x02008890
    99a4:	20008000 	.word	0x20008000
    99a8:	200080d0 	.word	0x200080d0
    99ac:	20008100 	.word	0x20008100
    99b0:	00036c0c 	.word	0x00036c0c
    99b4:	00033040 	.word	0x00033040
    99b8:	02008810 	.word	0x02008810
    99bc:	00036c2f 	.word	0x00036c2f
    99c0:	00036c53 	.word	0x00036c53
    99c4:	00036c7c 	.word	0x00036c7c

000099c8 <floor>:
    99c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
    99d0:	4602      	mov	r2, r0
    99d2:	460b      	mov	r3, r1
    99d4:	460c      	mov	r4, r1
    99d6:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    99da:	4605      	mov	r5, r0
    99dc:	4680      	mov	r8, r0
    99de:	2e13      	cmp	r6, #19
    99e0:	dc36      	bgt.n	9a50 <floor+0x88>
    99e2:	2e00      	cmp	r6, #0
    99e4:	da17      	bge.n	9a16 <floor+0x4e>
    99e6:	a334      	add	r3, pc, #208	; (adr r3, 9ab8 <floor+0xf0>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	f7fe fbba 	bl	8164 <__adddf3>
    99f0:	2200      	movs	r2, #0
    99f2:	2300      	movs	r3, #0
    99f4:	f7ff fb5a 	bl	90ac <__aeabi_dcmpgt>
    99f8:	b150      	cbz	r0, 9a10 <floor+0x48>
    99fa:	2c00      	cmp	r4, #0
    99fc:	da58      	bge.n	9ab0 <floor+0xe8>
    99fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    9a02:	432c      	orrs	r4, r5
    9a04:	2500      	movs	r5, #0
    9a06:	42ac      	cmp	r4, r5
    9a08:	4c2d      	ldr	r4, [pc, #180]	; (9ac0 <floor+0xf8>)
    9a0a:	bf08      	it	eq
    9a0c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    9a10:	4623      	mov	r3, r4
    9a12:	462a      	mov	r2, r5
    9a14:	e025      	b.n	9a62 <floor+0x9a>
    9a16:	4f2b      	ldr	r7, [pc, #172]	; (9ac4 <floor+0xfc>)
    9a18:	4137      	asrs	r7, r6
    9a1a:	ea01 0c07 	and.w	ip, r1, r7
    9a1e:	ea5c 0c00 	orrs.w	ip, ip, r0
    9a22:	d01e      	beq.n	9a62 <floor+0x9a>
    9a24:	a324      	add	r3, pc, #144	; (adr r3, 9ab8 <floor+0xf0>)
    9a26:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a2a:	f7fe fb9b 	bl	8164 <__adddf3>
    9a2e:	2200      	movs	r2, #0
    9a30:	2300      	movs	r3, #0
    9a32:	f7ff fb3b 	bl	90ac <__aeabi_dcmpgt>
    9a36:	2800      	cmp	r0, #0
    9a38:	d0ea      	beq.n	9a10 <floor+0x48>
    9a3a:	2c00      	cmp	r4, #0
    9a3c:	f04f 0500 	mov.w	r5, #0
    9a40:	bfbe      	ittt	lt
    9a42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    9a46:	4133      	asrlt	r3, r6
    9a48:	18e4      	addlt	r4, r4, r3
    9a4a:	ea24 0407 	bic.w	r4, r4, r7
    9a4e:	e7df      	b.n	9a10 <floor+0x48>
    9a50:	2e33      	cmp	r6, #51	; 0x33
    9a52:	dd0a      	ble.n	9a6a <floor+0xa2>
    9a54:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    9a58:	d103      	bne.n	9a62 <floor+0x9a>
    9a5a:	f7fe fb83 	bl	8164 <__adddf3>
    9a5e:	4602      	mov	r2, r0
    9a60:	460b      	mov	r3, r1
    9a62:	4610      	mov	r0, r2
    9a64:	4619      	mov	r1, r3
    9a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    9a6e:	f04f 3cff 	mov.w	ip, #4294967295
    9a72:	fa2c f707 	lsr.w	r7, ip, r7
    9a76:	4207      	tst	r7, r0
    9a78:	d0f3      	beq.n	9a62 <floor+0x9a>
    9a7a:	a30f      	add	r3, pc, #60	; (adr r3, 9ab8 <floor+0xf0>)
    9a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a80:	f7fe fb70 	bl	8164 <__adddf3>
    9a84:	2200      	movs	r2, #0
    9a86:	2300      	movs	r3, #0
    9a88:	f7ff fb10 	bl	90ac <__aeabi_dcmpgt>
    9a8c:	2800      	cmp	r0, #0
    9a8e:	d0bf      	beq.n	9a10 <floor+0x48>
    9a90:	2c00      	cmp	r4, #0
    9a92:	da0a      	bge.n	9aaa <floor+0xe2>
    9a94:	2e14      	cmp	r6, #20
    9a96:	d101      	bne.n	9a9c <floor+0xd4>
    9a98:	3401      	adds	r4, #1
    9a9a:	e006      	b.n	9aaa <floor+0xe2>
    9a9c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    9aa0:	2301      	movs	r3, #1
    9aa2:	40b3      	lsls	r3, r6
    9aa4:	441d      	add	r5, r3
    9aa6:	4545      	cmp	r5, r8
    9aa8:	d3f6      	bcc.n	9a98 <floor+0xd0>
    9aaa:	ea25 0507 	bic.w	r5, r5, r7
    9aae:	e7af      	b.n	9a10 <floor+0x48>
    9ab0:	2500      	movs	r5, #0
    9ab2:	462c      	mov	r4, r5
    9ab4:	e7ac      	b.n	9a10 <floor+0x48>
    9ab6:	bf00      	nop
    9ab8:	8800759c 	.word	0x8800759c
    9abc:	7e37e43c 	.word	0x7e37e43c
    9ac0:	bff00000 	.word	0xbff00000
    9ac4:	000fffff 	.word	0x000fffff

00009ac8 <__ieee754_log>:
    9ac8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9acc:	4602      	mov	r2, r0
    9ace:	460b      	mov	r3, r1
    9ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ad4:	460d      	mov	r5, r1
    9ad6:	b087      	sub	sp, #28
    9ad8:	da24      	bge.n	9b24 <__ieee754_log+0x5c>
    9ada:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    9ade:	4304      	orrs	r4, r0
    9ae0:	d108      	bne.n	9af4 <__ieee754_log+0x2c>
    9ae2:	2200      	movs	r2, #0
    9ae4:	2300      	movs	r3, #0
    9ae6:	2000      	movs	r0, #0
    9ae8:	49c9      	ldr	r1, [pc, #804]	; (9e10 <__ieee754_log+0x348>)
    9aea:	f7fe fe1b 	bl	8724 <__aeabi_ddiv>
    9aee:	b007      	add	sp, #28
    9af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9af4:	2900      	cmp	r1, #0
    9af6:	da04      	bge.n	9b02 <__ieee754_log+0x3a>
    9af8:	f7fe fb32 	bl	8160 <__aeabi_dsub>
    9afc:	2200      	movs	r2, #0
    9afe:	2300      	movs	r3, #0
    9b00:	e7f3      	b.n	9aea <__ieee754_log+0x22>
    9b02:	2200      	movs	r2, #0
    9b04:	4bc3      	ldr	r3, [pc, #780]	; (9e14 <__ieee754_log+0x34c>)
    9b06:	f7fe fce3 	bl	84d0 <__aeabi_dmul>
    9b0a:	460b      	mov	r3, r1
    9b0c:	460d      	mov	r5, r1
    9b0e:	4602      	mov	r2, r0
    9b10:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9b14:	48c0      	ldr	r0, [pc, #768]	; (9e18 <__ieee754_log+0x350>)
    9b16:	4285      	cmp	r5, r0
    9b18:	dd06      	ble.n	9b28 <__ieee754_log+0x60>
    9b1a:	4610      	mov	r0, r2
    9b1c:	4619      	mov	r1, r3
    9b1e:	f7fe fb21 	bl	8164 <__adddf3>
    9b22:	e7e4      	b.n	9aee <__ieee754_log+0x26>
    9b24:	2100      	movs	r1, #0
    9b26:	e7f5      	b.n	9b14 <__ieee754_log+0x4c>
    9b28:	152c      	asrs	r4, r5, #20
    9b2a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    9b2e:	4610      	mov	r0, r2
    9b30:	2200      	movs	r2, #0
    9b32:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9b36:	440c      	add	r4, r1
    9b38:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    9b3c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9b40:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9b44:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9b48:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    9b4c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    9b50:	ea41 0305 	orr.w	r3, r1, r5
    9b54:	4619      	mov	r1, r3
    9b56:	4bb1      	ldr	r3, [pc, #708]	; (9e1c <__ieee754_log+0x354>)
    9b58:	f7fe fb02 	bl	8160 <__aeabi_dsub>
    9b5c:	1cab      	adds	r3, r5, #2
    9b5e:	4682      	mov	sl, r0
    9b60:	468b      	mov	fp, r1
    9b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9b66:	2200      	movs	r2, #0
    9b68:	2b02      	cmp	r3, #2
    9b6a:	dc53      	bgt.n	9c14 <__ieee754_log+0x14c>
    9b6c:	2300      	movs	r3, #0
    9b6e:	f7ff fa75 	bl	905c <__aeabi_dcmpeq>
    9b72:	b1d0      	cbz	r0, 9baa <__ieee754_log+0xe2>
    9b74:	2c00      	cmp	r4, #0
    9b76:	f000 8120 	beq.w	9dba <__ieee754_log+0x2f2>
    9b7a:	4620      	mov	r0, r4
    9b7c:	f7fe fc3e 	bl	83fc <__aeabi_i2d>
    9b80:	4606      	mov	r6, r0
    9b82:	460f      	mov	r7, r1
    9b84:	a38e      	add	r3, pc, #568	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9b86:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b8a:	f7fe fca1 	bl	84d0 <__aeabi_dmul>
    9b8e:	4604      	mov	r4, r0
    9b90:	460d      	mov	r5, r1
    9b92:	4630      	mov	r0, r6
    9b94:	4639      	mov	r1, r7
    9b96:	a38c      	add	r3, pc, #560	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9b98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b9c:	f7fe fc98 	bl	84d0 <__aeabi_dmul>
    9ba0:	4602      	mov	r2, r0
    9ba2:	460b      	mov	r3, r1
    9ba4:	4620      	mov	r0, r4
    9ba6:	4629      	mov	r1, r5
    9ba8:	e7b9      	b.n	9b1e <__ieee754_log+0x56>
    9baa:	a389      	add	r3, pc, #548	; (adr r3, 9dd0 <__ieee754_log+0x308>)
    9bac:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bb0:	4650      	mov	r0, sl
    9bb2:	4659      	mov	r1, fp
    9bb4:	f7fe fc8c 	bl	84d0 <__aeabi_dmul>
    9bb8:	4602      	mov	r2, r0
    9bba:	460b      	mov	r3, r1
    9bbc:	2000      	movs	r0, #0
    9bbe:	4998      	ldr	r1, [pc, #608]	; (9e20 <__ieee754_log+0x358>)
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4606      	mov	r6, r0
    9bc6:	460f      	mov	r7, r1
    9bc8:	4652      	mov	r2, sl
    9bca:	465b      	mov	r3, fp
    9bcc:	4650      	mov	r0, sl
    9bce:	4659      	mov	r1, fp
    9bd0:	f7fe fc7e 	bl	84d0 <__aeabi_dmul>
    9bd4:	4602      	mov	r2, r0
    9bd6:	460b      	mov	r3, r1
    9bd8:	4630      	mov	r0, r6
    9bda:	4639      	mov	r1, r7
    9bdc:	f7fe fc78 	bl	84d0 <__aeabi_dmul>
    9be0:	4606      	mov	r6, r0
    9be2:	460f      	mov	r7, r1
    9be4:	b914      	cbnz	r4, 9bec <__ieee754_log+0x124>
    9be6:	4632      	mov	r2, r6
    9be8:	463b      	mov	r3, r7
    9bea:	e0a0      	b.n	9d2e <__ieee754_log+0x266>
    9bec:	4620      	mov	r0, r4
    9bee:	f7fe fc05 	bl	83fc <__aeabi_i2d>
    9bf2:	4680      	mov	r8, r0
    9bf4:	4689      	mov	r9, r1
    9bf6:	a372      	add	r3, pc, #456	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bfc:	f7fe fc68 	bl	84d0 <__aeabi_dmul>
    9c00:	4604      	mov	r4, r0
    9c02:	460d      	mov	r5, r1
    9c04:	4640      	mov	r0, r8
    9c06:	4649      	mov	r1, r9
    9c08:	a36f      	add	r3, pc, #444	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c0e:	f7fe fc5f 	bl	84d0 <__aeabi_dmul>
    9c12:	e0a5      	b.n	9d60 <__ieee754_log+0x298>
    9c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9c18:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9c1c:	f7fe faa2 	bl	8164 <__adddf3>
    9c20:	4602      	mov	r2, r0
    9c22:	460b      	mov	r3, r1
    9c24:	4650      	mov	r0, sl
    9c26:	4659      	mov	r1, fp
    9c28:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9c2c:	f7fe fd7a 	bl	8724 <__aeabi_ddiv>
    9c30:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9c34:	3551      	adds	r5, #81	; 0x51
    9c36:	e9cd 0100 	strd	r0, r1, [sp]
    9c3a:	4620      	mov	r0, r4
    9c3c:	4335      	orrs	r5, r6
    9c3e:	f7fe fbdd 	bl	83fc <__aeabi_i2d>
    9c42:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9c4a:	4610      	mov	r0, r2
    9c4c:	4619      	mov	r1, r3
    9c4e:	f7fe fc3f 	bl	84d0 <__aeabi_dmul>
    9c52:	4602      	mov	r2, r0
    9c54:	460b      	mov	r3, r1
    9c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9c5a:	f7fe fc39 	bl	84d0 <__aeabi_dmul>
    9c5e:	4680      	mov	r8, r0
    9c60:	4689      	mov	r9, r1
    9c62:	a35d      	add	r3, pc, #372	; (adr r3, 9dd8 <__ieee754_log+0x310>)
    9c64:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c68:	f7fe fc32 	bl	84d0 <__aeabi_dmul>
    9c6c:	a35c      	add	r3, pc, #368	; (adr r3, 9de0 <__ieee754_log+0x318>)
    9c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c72:	f7fe fa77 	bl	8164 <__adddf3>
    9c76:	4642      	mov	r2, r8
    9c78:	464b      	mov	r3, r9
    9c7a:	f7fe fc29 	bl	84d0 <__aeabi_dmul>
    9c7e:	a35a      	add	r3, pc, #360	; (adr r3, 9de8 <__ieee754_log+0x320>)
    9c80:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c84:	f7fe fa6e 	bl	8164 <__adddf3>
    9c88:	4642      	mov	r2, r8
    9c8a:	464b      	mov	r3, r9
    9c8c:	f7fe fc20 	bl	84d0 <__aeabi_dmul>
    9c90:	a357      	add	r3, pc, #348	; (adr r3, 9df0 <__ieee754_log+0x328>)
    9c92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c96:	f7fe fa65 	bl	8164 <__adddf3>
    9c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9c9e:	f7fe fc17 	bl	84d0 <__aeabi_dmul>
    9ca2:	a355      	add	r3, pc, #340	; (adr r3, 9df8 <__ieee754_log+0x330>)
    9ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9cac:	4640      	mov	r0, r8
    9cae:	4649      	mov	r1, r9
    9cb0:	f7fe fc0e 	bl	84d0 <__aeabi_dmul>
    9cb4:	a352      	add	r3, pc, #328	; (adr r3, 9e00 <__ieee754_log+0x338>)
    9cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cba:	f7fe fa53 	bl	8164 <__adddf3>
    9cbe:	4642      	mov	r2, r8
    9cc0:	464b      	mov	r3, r9
    9cc2:	f7fe fc05 	bl	84d0 <__aeabi_dmul>
    9cc6:	a350      	add	r3, pc, #320	; (adr r3, 9e08 <__ieee754_log+0x340>)
    9cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ccc:	f7fe fa4a 	bl	8164 <__adddf3>
    9cd0:	4642      	mov	r2, r8
    9cd2:	464b      	mov	r3, r9
    9cd4:	f7fe fbfc 	bl	84d0 <__aeabi_dmul>
    9cd8:	4602      	mov	r2, r0
    9cda:	460b      	mov	r3, r1
    9cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9ce0:	f7fe fa40 	bl	8164 <__adddf3>
    9ce4:	2d00      	cmp	r5, #0
    9ce6:	4680      	mov	r8, r0
    9ce8:	4689      	mov	r9, r1
    9cea:	dd48      	ble.n	9d7e <__ieee754_log+0x2b6>
    9cec:	2200      	movs	r2, #0
    9cee:	4b4c      	ldr	r3, [pc, #304]	; (9e20 <__ieee754_log+0x358>)
    9cf0:	4650      	mov	r0, sl
    9cf2:	4659      	mov	r1, fp
    9cf4:	f7fe fbec 	bl	84d0 <__aeabi_dmul>
    9cf8:	4652      	mov	r2, sl
    9cfa:	465b      	mov	r3, fp
    9cfc:	f7fe fbe8 	bl	84d0 <__aeabi_dmul>
    9d00:	4602      	mov	r2, r0
    9d02:	460b      	mov	r3, r1
    9d04:	4606      	mov	r6, r0
    9d06:	460f      	mov	r7, r1
    9d08:	4640      	mov	r0, r8
    9d0a:	4649      	mov	r1, r9
    9d0c:	f7fe fa2a 	bl	8164 <__adddf3>
    9d10:	e9dd 2300 	ldrd	r2, r3, [sp]
    9d14:	f7fe fbdc 	bl	84d0 <__aeabi_dmul>
    9d18:	4680      	mov	r8, r0
    9d1a:	4689      	mov	r9, r1
    9d1c:	b964      	cbnz	r4, 9d38 <__ieee754_log+0x270>
    9d1e:	4602      	mov	r2, r0
    9d20:	460b      	mov	r3, r1
    9d22:	4630      	mov	r0, r6
    9d24:	4639      	mov	r1, r7
    9d26:	f7fe fa1b 	bl	8160 <__aeabi_dsub>
    9d2a:	4602      	mov	r2, r0
    9d2c:	460b      	mov	r3, r1
    9d2e:	4650      	mov	r0, sl
    9d30:	4659      	mov	r1, fp
    9d32:	f7fe fa15 	bl	8160 <__aeabi_dsub>
    9d36:	e6da      	b.n	9aee <__ieee754_log+0x26>
    9d38:	a321      	add	r3, pc, #132	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d42:	f7fe fbc5 	bl	84d0 <__aeabi_dmul>
    9d46:	4604      	mov	r4, r0
    9d48:	460d      	mov	r5, r1
    9d4a:	a31f      	add	r3, pc, #124	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d54:	f7fe fbbc 	bl	84d0 <__aeabi_dmul>
    9d58:	4642      	mov	r2, r8
    9d5a:	464b      	mov	r3, r9
    9d5c:	f7fe fa02 	bl	8164 <__adddf3>
    9d60:	4602      	mov	r2, r0
    9d62:	460b      	mov	r3, r1
    9d64:	4630      	mov	r0, r6
    9d66:	4639      	mov	r1, r7
    9d68:	f7fe f9fa 	bl	8160 <__aeabi_dsub>
    9d6c:	4652      	mov	r2, sl
    9d6e:	465b      	mov	r3, fp
    9d70:	f7fe f9f6 	bl	8160 <__aeabi_dsub>
    9d74:	4602      	mov	r2, r0
    9d76:	460b      	mov	r3, r1
    9d78:	4620      	mov	r0, r4
    9d7a:	4629      	mov	r1, r5
    9d7c:	e7d9      	b.n	9d32 <__ieee754_log+0x26a>
    9d7e:	4602      	mov	r2, r0
    9d80:	460b      	mov	r3, r1
    9d82:	4650      	mov	r0, sl
    9d84:	4659      	mov	r1, fp
    9d86:	f7fe f9eb 	bl	8160 <__aeabi_dsub>
    9d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9d8e:	f7fe fb9f 	bl	84d0 <__aeabi_dmul>
    9d92:	4606      	mov	r6, r0
    9d94:	460f      	mov	r7, r1
    9d96:	2c00      	cmp	r4, #0
    9d98:	f43f af25 	beq.w	9be6 <__ieee754_log+0x11e>
    9d9c:	a308      	add	r3, pc, #32	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9da6:	f7fe fb93 	bl	84d0 <__aeabi_dmul>
    9daa:	4604      	mov	r4, r0
    9dac:	460d      	mov	r5, r1
    9dae:	a306      	add	r3, pc, #24	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9db0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9db8:	e729      	b.n	9c0e <__ieee754_log+0x146>
    9dba:	2000      	movs	r0, #0
    9dbc:	2100      	movs	r1, #0
    9dbe:	e696      	b.n	9aee <__ieee754_log+0x26>
    9dc0:	fee00000 	.word	0xfee00000
    9dc4:	3fe62e42 	.word	0x3fe62e42
    9dc8:	35793c76 	.word	0x35793c76
    9dcc:	3dea39ef 	.word	0x3dea39ef
    9dd0:	55555555 	.word	0x55555555
    9dd4:	3fd55555 	.word	0x3fd55555
    9dd8:	df3e5244 	.word	0xdf3e5244
    9ddc:	3fc2f112 	.word	0x3fc2f112
    9de0:	96cb03de 	.word	0x96cb03de
    9de4:	3fc74664 	.word	0x3fc74664
    9de8:	94229359 	.word	0x94229359
    9dec:	3fd24924 	.word	0x3fd24924
    9df0:	55555593 	.word	0x55555593
    9df4:	3fe55555 	.word	0x3fe55555
    9df8:	d078c69f 	.word	0xd078c69f
    9dfc:	3fc39a09 	.word	0x3fc39a09
    9e00:	1d8e78af 	.word	0x1d8e78af
    9e04:	3fcc71c5 	.word	0x3fcc71c5
    9e08:	9997fa04 	.word	0x9997fa04
    9e0c:	3fd99999 	.word	0x3fd99999
    9e10:	c3500000 	.word	0xc3500000
    9e14:	43500000 	.word	0x43500000
    9e18:	7fefffff 	.word	0x7fefffff
    9e1c:	3ff00000 	.word	0x3ff00000
    9e20:	3fe00000 	.word	0x3fe00000
    9e24:	00000000 	.word	0x00000000

00009e28 <_strtod_l>:
    9e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e2c:	461f      	mov	r7, r3
    9e2e:	b09d      	sub	sp, #116	; 0x74
    9e30:	2300      	movs	r3, #0
    9e32:	460c      	mov	r4, r1
    9e34:	4682      	mov	sl, r0
    9e36:	920e      	str	r2, [sp, #56]	; 0x38
    9e38:	9318      	str	r3, [sp, #96]	; 0x60
    9e3a:	f04f 0800 	mov.w	r8, #0
    9e3e:	4b97      	ldr	r3, [pc, #604]	; (a09c <_strtod_l+0x274>)
    9e40:	f04f 0900 	mov.w	r9, #0
    9e44:	681d      	ldr	r5, [r3, #0]
    9e46:	4628      	mov	r0, r5
    9e48:	f7ff fadf 	bl	940a <strlen>
    9e4c:	4622      	mov	r2, r4
    9e4e:	4683      	mov	fp, r0
    9e50:	9217      	str	r2, [sp, #92]	; 0x5c
    9e52:	7813      	ldrb	r3, [r2, #0]
    9e54:	2b2b      	cmp	r3, #43	; 0x2b
    9e56:	d03b      	beq.n	9ed0 <_strtod_l+0xa8>
    9e58:	d82c      	bhi.n	9eb4 <_strtod_l+0x8c>
    9e5a:	2b0d      	cmp	r3, #13
    9e5c:	d826      	bhi.n	9eac <_strtod_l+0x84>
    9e5e:	2b08      	cmp	r3, #8
    9e60:	d826      	bhi.n	9eb0 <_strtod_l+0x88>
    9e62:	2b00      	cmp	r3, #0
    9e64:	d02f      	beq.n	9ec6 <_strtod_l+0x9e>
    9e66:	2300      	movs	r3, #0
    9e68:	930c      	str	r3, [sp, #48]	; 0x30
    9e6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    9e6c:	7833      	ldrb	r3, [r6, #0]
    9e6e:	2b30      	cmp	r3, #48	; 0x30
    9e70:	d172      	bne.n	9f58 <_strtod_l+0x130>
    9e72:	7873      	ldrb	r3, [r6, #1]
    9e74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9e78:	2b58      	cmp	r3, #88	; 0x58
    9e7a:	d163      	bne.n	9f44 <_strtod_l+0x11c>
    9e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e7e:	a917      	add	r1, sp, #92	; 0x5c
    9e80:	4a87      	ldr	r2, [pc, #540]	; (a0a0 <_strtod_l+0x278>)
    9e82:	4650      	mov	r0, sl
    9e84:	9301      	str	r3, [sp, #4]
    9e86:	ab18      	add	r3, sp, #96	; 0x60
    9e88:	9702      	str	r7, [sp, #8]
    9e8a:	9300      	str	r3, [sp, #0]
    9e8c:	ab19      	add	r3, sp, #100	; 0x64
    9e8e:	f01e fa39 	bl	28304 <__gethex>
    9e92:	f010 0507 	ands.w	r5, r0, #7
    9e96:	4604      	mov	r4, r0
    9e98:	d035      	beq.n	9f06 <_strtod_l+0xde>
    9e9a:	2d06      	cmp	r5, #6
    9e9c:	d11a      	bne.n	9ed4 <_strtod_l+0xac>
    9e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ea0:	b10b      	cbz	r3, 9ea6 <_strtod_l+0x7e>
    9ea2:	3601      	adds	r6, #1
    9ea4:	601e      	str	r6, [r3, #0]
    9ea6:	4640      	mov	r0, r8
    9ea8:	4649      	mov	r1, r9
    9eaa:	e037      	b.n	9f1c <_strtod_l+0xf4>
    9eac:	2b20      	cmp	r3, #32
    9eae:	d1da      	bne.n	9e66 <_strtod_l+0x3e>
    9eb0:	3201      	adds	r2, #1
    9eb2:	e7cd      	b.n	9e50 <_strtod_l+0x28>
    9eb4:	2b2d      	cmp	r3, #45	; 0x2d
    9eb6:	d1d6      	bne.n	9e66 <_strtod_l+0x3e>
    9eb8:	2301      	movs	r3, #1
    9eba:	930c      	str	r3, [sp, #48]	; 0x30
    9ebc:	1c53      	adds	r3, r2, #1
    9ebe:	9317      	str	r3, [sp, #92]	; 0x5c
    9ec0:	7853      	ldrb	r3, [r2, #1]
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d1d1      	bne.n	9e6a <_strtod_l+0x42>
    9ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ec8:	2b00      	cmp	r3, #0
    9eca:	d0ec      	beq.n	9ea6 <_strtod_l+0x7e>
    9ecc:	601c      	str	r4, [r3, #0]
    9ece:	e7ea      	b.n	9ea6 <_strtod_l+0x7e>
    9ed0:	2300      	movs	r3, #0
    9ed2:	e7f2      	b.n	9eba <_strtod_l+0x92>
    9ed4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ed6:	b13a      	cbz	r2, 9ee8 <_strtod_l+0xc0>
    9ed8:	2135      	movs	r1, #53	; 0x35
    9eda:	a81a      	add	r0, sp, #104	; 0x68
    9edc:	f028 f9a9 	bl	32232 <__copybits>
    9ee0:	9918      	ldr	r1, [sp, #96]	; 0x60
    9ee2:	4650      	mov	r0, sl
    9ee4:	f01e fcce 	bl	28884 <_Bfree>
    9ee8:	3d01      	subs	r5, #1
    9eea:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9eec:	2d04      	cmp	r5, #4
    9eee:	d806      	bhi.n	9efe <_strtod_l+0xd6>
    9ef0:	e8df f005 	tbb	[pc, r5]
    9ef4:	23200317 	.word	0x23200317
    9ef8:	17          	.byte	0x17
    9ef9:	00          	.byte	0x00
    9efa:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    9efe:	0721      	lsls	r1, r4, #28
    9f00:	d501      	bpl.n	9f06 <_strtod_l+0xde>
    9f02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9f08:	b113      	cbz	r3, 9f10 <_strtod_l+0xe8>
    9f0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9f0e:	6013      	str	r3, [r2, #0]
    9f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9f12:	2b00      	cmp	r3, #0
    9f14:	d0c7      	beq.n	9ea6 <_strtod_l+0x7e>
    9f16:	4640      	mov	r0, r8
    9f18:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    9f1c:	b01d      	add	sp, #116	; 0x74
    9f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f22:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    9f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    9f2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    9f32:	e7e4      	b.n	9efe <_strtod_l+0xd6>
    9f34:	f8df 916c 	ldr.w	r9, [pc, #364]	; a0a4 <_strtod_l+0x27c>
    9f38:	e7e1      	b.n	9efe <_strtod_l+0xd6>
    9f3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    9f3e:	f04f 38ff 	mov.w	r8, #4294967295
    9f42:	e7dc      	b.n	9efe <_strtod_l+0xd6>
    9f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f46:	1c5a      	adds	r2, r3, #1
    9f48:	9217      	str	r2, [sp, #92]	; 0x5c
    9f4a:	785b      	ldrb	r3, [r3, #1]
    9f4c:	2b30      	cmp	r3, #48	; 0x30
    9f4e:	d0f9      	beq.n	9f44 <_strtod_l+0x11c>
    9f50:	2b00      	cmp	r3, #0
    9f52:	d0d8      	beq.n	9f06 <_strtod_l+0xde>
    9f54:	2301      	movs	r3, #1
    9f56:	e000      	b.n	9f5a <_strtod_l+0x132>
    9f58:	2300      	movs	r3, #0
    9f5a:	2700      	movs	r7, #0
    9f5c:	9304      	str	r3, [sp, #16]
    9f5e:	220a      	movs	r2, #10
    9f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f62:	e9cd 7705 	strd	r7, r7, [sp, #20]
    9f66:	930a      	str	r3, [sp, #40]	; 0x28
    9f68:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9f6a:	7806      	ldrb	r6, [r0, #0]
    9f6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    9f70:	b2d9      	uxtb	r1, r3
    9f72:	2909      	cmp	r1, #9
    9f74:	d924      	bls.n	9fc0 <_strtod_l+0x198>
    9f76:	465a      	mov	r2, fp
    9f78:	4629      	mov	r1, r5
    9f7a:	f027 fde9 	bl	31b50 <strncmp>
    9f7e:	2800      	cmp	r0, #0
    9f80:	d02d      	beq.n	9fde <_strtod_l+0x1b6>
    9f82:	2000      	movs	r0, #0
    9f84:	4632      	mov	r2, r6
    9f86:	9d05      	ldr	r5, [sp, #20]
    9f88:	4683      	mov	fp, r0
    9f8a:	4603      	mov	r3, r0
    9f8c:	2a65      	cmp	r2, #101	; 0x65
    9f8e:	d001      	beq.n	9f94 <_strtod_l+0x16c>
    9f90:	2a45      	cmp	r2, #69	; 0x45
    9f92:	d113      	bne.n	9fbc <_strtod_l+0x194>
    9f94:	b91d      	cbnz	r5, 9f9e <_strtod_l+0x176>
    9f96:	9a04      	ldr	r2, [sp, #16]
    9f98:	4302      	orrs	r2, r0
    9f9a:	d094      	beq.n	9ec6 <_strtod_l+0x9e>
    9f9c:	2500      	movs	r5, #0
    9f9e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9fa0:	1c62      	adds	r2, r4, #1
    9fa2:	9217      	str	r2, [sp, #92]	; 0x5c
    9fa4:	7862      	ldrb	r2, [r4, #1]
    9fa6:	2a2b      	cmp	r2, #43	; 0x2b
    9fa8:	d06e      	beq.n	a088 <_strtod_l+0x260>
    9faa:	2a2d      	cmp	r2, #45	; 0x2d
    9fac:	d072      	beq.n	a094 <_strtod_l+0x26c>
    9fae:	f04f 0c00 	mov.w	ip, #0
    9fb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9fb6:	2909      	cmp	r1, #9
    9fb8:	d97a      	bls.n	a0b0 <_strtod_l+0x288>
    9fba:	9417      	str	r4, [sp, #92]	; 0x5c
    9fbc:	2600      	movs	r6, #0
    9fbe:	e099      	b.n	a0f4 <_strtod_l+0x2cc>
    9fc0:	9905      	ldr	r1, [sp, #20]
    9fc2:	3001      	adds	r0, #1
    9fc4:	2908      	cmp	r1, #8
    9fc6:	9017      	str	r0, [sp, #92]	; 0x5c
    9fc8:	bfd7      	itett	le
    9fca:	9906      	ldrle	r1, [sp, #24]
    9fcc:	fb02 3707 	mlagt	r7, r2, r7, r3
    9fd0:	fb02 3301 	mlale	r3, r2, r1, r3
    9fd4:	9306      	strle	r3, [sp, #24]
    9fd6:	9b05      	ldr	r3, [sp, #20]
    9fd8:	3301      	adds	r3, #1
    9fda:	9305      	str	r3, [sp, #20]
    9fdc:	e7c4      	b.n	9f68 <_strtod_l+0x140>
    9fde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9fe0:	eb03 020b 	add.w	r2, r3, fp
    9fe4:	9217      	str	r2, [sp, #92]	; 0x5c
    9fe6:	f813 200b 	ldrb.w	r2, [r3, fp]
    9fea:	9b05      	ldr	r3, [sp, #20]
    9fec:	b3a3      	cbz	r3, a058 <_strtod_l+0x230>
    9fee:	4683      	mov	fp, r0
    9ff0:	461d      	mov	r5, r3
    9ff2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9ff6:	2b09      	cmp	r3, #9
    9ff8:	d912      	bls.n	a020 <_strtod_l+0x1f8>
    9ffa:	2301      	movs	r3, #1
    9ffc:	e7c6      	b.n	9f8c <_strtod_l+0x164>
    9ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a000:	3001      	adds	r0, #1
    a002:	1c5a      	adds	r2, r3, #1
    a004:	9217      	str	r2, [sp, #92]	; 0x5c
    a006:	785a      	ldrb	r2, [r3, #1]
    a008:	2a30      	cmp	r2, #48	; 0x30
    a00a:	d0f8      	beq.n	9ffe <_strtod_l+0x1d6>
    a00c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    a010:	2b08      	cmp	r3, #8
    a012:	f200 84ea 	bhi.w	a9ea <_strtod_l+0xbc2>
    a016:	4683      	mov	fp, r0
    a018:	2000      	movs	r0, #0
    a01a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a01c:	4605      	mov	r5, r0
    a01e:	930a      	str	r3, [sp, #40]	; 0x28
    a020:	3a30      	subs	r2, #48	; 0x30
    a022:	f100 0301 	add.w	r3, r0, #1
    a026:	d011      	beq.n	a04c <_strtod_l+0x224>
    a028:	449b      	add	fp, r3
    a02a:	eb00 0c05 	add.w	ip, r0, r5
    a02e:	462b      	mov	r3, r5
    a030:	210a      	movs	r1, #10
    a032:	4563      	cmp	r3, ip
    a034:	d112      	bne.n	a05c <_strtod_l+0x234>
    a036:	182b      	adds	r3, r5, r0
    a038:	3501      	adds	r5, #1
    a03a:	2b08      	cmp	r3, #8
    a03c:	4405      	add	r5, r0
    a03e:	dc19      	bgt.n	a074 <_strtod_l+0x24c>
    a040:	9906      	ldr	r1, [sp, #24]
    a042:	230a      	movs	r3, #10
    a044:	fb03 2301 	mla	r3, r3, r1, r2
    a048:	9306      	str	r3, [sp, #24]
    a04a:	2300      	movs	r3, #0
    a04c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a04e:	4618      	mov	r0, r3
    a050:	1c51      	adds	r1, r2, #1
    a052:	9117      	str	r1, [sp, #92]	; 0x5c
    a054:	7852      	ldrb	r2, [r2, #1]
    a056:	e7cc      	b.n	9ff2 <_strtod_l+0x1ca>
    a058:	9805      	ldr	r0, [sp, #20]
    a05a:	e7d5      	b.n	a008 <_strtod_l+0x1e0>
    a05c:	2b08      	cmp	r3, #8
    a05e:	f103 0301 	add.w	r3, r3, #1
    a062:	dc03      	bgt.n	a06c <_strtod_l+0x244>
    a064:	9e06      	ldr	r6, [sp, #24]
    a066:	434e      	muls	r6, r1
    a068:	9606      	str	r6, [sp, #24]
    a06a:	e7e2      	b.n	a032 <_strtod_l+0x20a>
    a06c:	2b10      	cmp	r3, #16
    a06e:	bfd8      	it	le
    a070:	434f      	mulle	r7, r1
    a072:	e7de      	b.n	a032 <_strtod_l+0x20a>
    a074:	2b0f      	cmp	r3, #15
    a076:	bfdc      	itt	le
    a078:	230a      	movle	r3, #10
    a07a:	fb03 2707 	mlale	r7, r3, r7, r2
    a07e:	e7e4      	b.n	a04a <_strtod_l+0x222>
    a080:	f04f 0b00 	mov.w	fp, #0
    a084:	2301      	movs	r3, #1
    a086:	e786      	b.n	9f96 <_strtod_l+0x16e>
    a088:	f04f 0c00 	mov.w	ip, #0
    a08c:	1ca2      	adds	r2, r4, #2
    a08e:	9217      	str	r2, [sp, #92]	; 0x5c
    a090:	78a2      	ldrb	r2, [r4, #2]
    a092:	e78e      	b.n	9fb2 <_strtod_l+0x18a>
    a094:	f04f 0c01 	mov.w	ip, #1
    a098:	e7f8      	b.n	a08c <_strtod_l+0x264>
    a09a:	bf00      	nop
    a09c:	00034308 	.word	0x00034308
    a0a0:	00034294 	.word	0x00034294
    a0a4:	7ff00000 	.word	0x7ff00000
    a0a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0aa:	1c51      	adds	r1, r2, #1
    a0ac:	9117      	str	r1, [sp, #92]	; 0x5c
    a0ae:	7852      	ldrb	r2, [r2, #1]
    a0b0:	2a30      	cmp	r2, #48	; 0x30
    a0b2:	d0f9      	beq.n	a0a8 <_strtod_l+0x280>
    a0b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    a0b8:	2908      	cmp	r1, #8
    a0ba:	f63f af7f 	bhi.w	9fbc <_strtod_l+0x194>
    a0be:	3a30      	subs	r2, #48	; 0x30
    a0c0:	9207      	str	r2, [sp, #28]
    a0c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0c4:	920d      	str	r2, [sp, #52]	; 0x34
    a0c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0c8:	1c56      	adds	r6, r2, #1
    a0ca:	9617      	str	r6, [sp, #92]	; 0x5c
    a0cc:	7852      	ldrb	r2, [r2, #1]
    a0ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    a0d2:	f1be 0f09 	cmp.w	lr, #9
    a0d6:	d938      	bls.n	a14a <_strtod_l+0x322>
    a0d8:	990d      	ldr	r1, [sp, #52]	; 0x34
    a0da:	1a76      	subs	r6, r6, r1
    a0dc:	2e08      	cmp	r6, #8
    a0de:	f644 661f 	movw	r6, #19999	; 0x4e1f
    a0e2:	dc03      	bgt.n	a0ec <_strtod_l+0x2c4>
    a0e4:	9907      	ldr	r1, [sp, #28]
    a0e6:	428e      	cmp	r6, r1
    a0e8:	bfa8      	it	ge
    a0ea:	460e      	movge	r6, r1
    a0ec:	f1bc 0f00 	cmp.w	ip, #0
    a0f0:	d000      	beq.n	a0f4 <_strtod_l+0x2cc>
    a0f2:	4276      	negs	r6, r6
    a0f4:	2d00      	cmp	r5, #0
    a0f6:	d14f      	bne.n	a198 <_strtod_l+0x370>
    a0f8:	9904      	ldr	r1, [sp, #16]
    a0fa:	4308      	orrs	r0, r1
    a0fc:	f47f af03 	bne.w	9f06 <_strtod_l+0xde>
    a100:	2b00      	cmp	r3, #0
    a102:	f47f aee0 	bne.w	9ec6 <_strtod_l+0x9e>
    a106:	2a69      	cmp	r2, #105	; 0x69
    a108:	d029      	beq.n	a15e <_strtod_l+0x336>
    a10a:	dc26      	bgt.n	a15a <_strtod_l+0x332>
    a10c:	2a49      	cmp	r2, #73	; 0x49
    a10e:	d026      	beq.n	a15e <_strtod_l+0x336>
    a110:	2a4e      	cmp	r2, #78	; 0x4e
    a112:	f47f aed8 	bne.w	9ec6 <_strtod_l+0x9e>
    a116:	499d      	ldr	r1, [pc, #628]	; (a38c <_strtod_l+0x564>)
    a118:	a817      	add	r0, sp, #92	; 0x5c
    a11a:	f027 ff1a 	bl	31f52 <__match>
    a11e:	2800      	cmp	r0, #0
    a120:	f43f aed1 	beq.w	9ec6 <_strtod_l+0x9e>
    a124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	2b28      	cmp	r3, #40	; 0x28
    a12a:	d12f      	bne.n	a18c <_strtod_l+0x364>
    a12c:	aa1a      	add	r2, sp, #104	; 0x68
    a12e:	4998      	ldr	r1, [pc, #608]	; (a390 <_strtod_l+0x568>)
    a130:	a817      	add	r0, sp, #92	; 0x5c
    a132:	f027 ff22 	bl	31f7a <__hexnan>
    a136:	2805      	cmp	r0, #5
    a138:	d128      	bne.n	a18c <_strtod_l+0x364>
    a13a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a13c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    a140:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    a144:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    a148:	e6dd      	b.n	9f06 <_strtod_l+0xde>
    a14a:	9e07      	ldr	r6, [sp, #28]
    a14c:	210a      	movs	r1, #10
    a14e:	fb01 2106 	mla	r1, r1, r6, r2
    a152:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a156:	9207      	str	r2, [sp, #28]
    a158:	e7b5      	b.n	a0c6 <_strtod_l+0x29e>
    a15a:	2a6e      	cmp	r2, #110	; 0x6e
    a15c:	e7d9      	b.n	a112 <_strtod_l+0x2ea>
    a15e:	498d      	ldr	r1, [pc, #564]	; (a394 <_strtod_l+0x56c>)
    a160:	a817      	add	r0, sp, #92	; 0x5c
    a162:	f027 fef6 	bl	31f52 <__match>
    a166:	2800      	cmp	r0, #0
    a168:	f43f aead 	beq.w	9ec6 <_strtod_l+0x9e>
    a16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a16e:	a817      	add	r0, sp, #92	; 0x5c
    a170:	4989      	ldr	r1, [pc, #548]	; (a398 <_strtod_l+0x570>)
    a172:	3b01      	subs	r3, #1
    a174:	9317      	str	r3, [sp, #92]	; 0x5c
    a176:	f027 feec 	bl	31f52 <__match>
    a17a:	b910      	cbnz	r0, a182 <_strtod_l+0x35a>
    a17c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a17e:	3301      	adds	r3, #1
    a180:	9317      	str	r3, [sp, #92]	; 0x5c
    a182:	f8df 9218 	ldr.w	r9, [pc, #536]	; a39c <_strtod_l+0x574>
    a186:	f04f 0800 	mov.w	r8, #0
    a18a:	e6bc      	b.n	9f06 <_strtod_l+0xde>
    a18c:	4884      	ldr	r0, [pc, #528]	; (a3a0 <_strtod_l+0x578>)
    a18e:	f01c fd59 	bl	26c44 <nan>
    a192:	4680      	mov	r8, r0
    a194:	4689      	mov	r9, r1
    a196:	e6b6      	b.n	9f06 <_strtod_l+0xde>
    a198:	eba6 030b 	sub.w	r3, r6, fp
    a19c:	9806      	ldr	r0, [sp, #24]
    a19e:	462c      	mov	r4, r5
    a1a0:	930f      	str	r3, [sp, #60]	; 0x3c
    a1a2:	9b05      	ldr	r3, [sp, #20]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	bf08      	it	eq
    a1a8:	462b      	moveq	r3, r5
    a1aa:	2d10      	cmp	r5, #16
    a1ac:	9305      	str	r3, [sp, #20]
    a1ae:	bfa8      	it	ge
    a1b0:	2410      	movge	r4, #16
    a1b2:	f7fe f913 	bl	83dc <__aeabi_ui2d>
    a1b6:	2d09      	cmp	r5, #9
    a1b8:	4680      	mov	r8, r0
    a1ba:	4689      	mov	r9, r1
    a1bc:	dc14      	bgt.n	a1e8 <_strtod_l+0x3c0>
    a1be:	eba6 030b 	sub.w	r3, r6, fp
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	f43f ae9f 	beq.w	9f06 <_strtod_l+0xde>
    a1c8:	eba6 030b 	sub.w	r3, r6, fp
    a1cc:	dd79      	ble.n	a2c2 <_strtod_l+0x49a>
    a1ce:	2b16      	cmp	r3, #22
    a1d0:	dc45      	bgt.n	a25e <_strtod_l+0x436>
    a1d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1d4:	4642      	mov	r2, r8
    a1d6:	4973      	ldr	r1, [pc, #460]	; (a3a4 <_strtod_l+0x57c>)
    a1d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a1dc:	464b      	mov	r3, r9
    a1de:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1e2:	f7fe f975 	bl	84d0 <__aeabi_dmul>
    a1e6:	e7d4      	b.n	a192 <_strtod_l+0x36a>
    a1e8:	4b6e      	ldr	r3, [pc, #440]	; (a3a4 <_strtod_l+0x57c>)
    a1ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a1ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    a1f2:	f7fe f96d 	bl	84d0 <__aeabi_dmul>
    a1f6:	4680      	mov	r8, r0
    a1f8:	4689      	mov	r9, r1
    a1fa:	4638      	mov	r0, r7
    a1fc:	f7fe f8ee 	bl	83dc <__aeabi_ui2d>
    a200:	4602      	mov	r2, r0
    a202:	460b      	mov	r3, r1
    a204:	4640      	mov	r0, r8
    a206:	4649      	mov	r1, r9
    a208:	f7fd ffac 	bl	8164 <__adddf3>
    a20c:	2d0f      	cmp	r5, #15
    a20e:	4680      	mov	r8, r0
    a210:	4689      	mov	r9, r1
    a212:	ddd4      	ble.n	a1be <_strtod_l+0x396>
    a214:	1b2c      	subs	r4, r5, r4
    a216:	eba6 030b 	sub.w	r3, r6, fp
    a21a:	441c      	add	r4, r3
    a21c:	2c00      	cmp	r4, #0
    a21e:	dc26      	bgt.n	a26e <_strtod_l+0x446>
    a220:	f000 80a3 	beq.w	a36a <_strtod_l+0x542>
    a224:	4264      	negs	r4, r4
    a226:	f014 020f 	ands.w	r2, r4, #15
    a22a:	d00a      	beq.n	a242 <_strtod_l+0x41a>
    a22c:	4b5d      	ldr	r3, [pc, #372]	; (a3a4 <_strtod_l+0x57c>)
    a22e:	4640      	mov	r0, r8
    a230:	4649      	mov	r1, r9
    a232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a236:	e9d3 2300 	ldrd	r2, r3, [r3]
    a23a:	f7fe fa73 	bl	8724 <__aeabi_ddiv>
    a23e:	4680      	mov	r8, r0
    a240:	4689      	mov	r9, r1
    a242:	1124      	asrs	r4, r4, #4
    a244:	f000 8091 	beq.w	a36a <_strtod_l+0x542>
    a248:	2c1f      	cmp	r4, #31
    a24a:	f340 80b3 	ble.w	a3b4 <_strtod_l+0x58c>
    a24e:	2322      	movs	r3, #34	; 0x22
    a250:	f04f 0800 	mov.w	r8, #0
    a254:	f04f 0900 	mov.w	r9, #0
    a258:	f8ca 3000 	str.w	r3, [sl]
    a25c:	e653      	b.n	9f06 <_strtod_l+0xde>
    a25e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    a262:	eba6 020b 	sub.w	r2, r6, fp
    a266:	4293      	cmp	r3, r2
    a268:	da19      	bge.n	a29e <_strtod_l+0x476>
    a26a:	1b2c      	subs	r4, r5, r4
    a26c:	4414      	add	r4, r2
    a26e:	f014 030f 	ands.w	r3, r4, #15
    a272:	d00a      	beq.n	a28a <_strtod_l+0x462>
    a274:	494b      	ldr	r1, [pc, #300]	; (a3a4 <_strtod_l+0x57c>)
    a276:	4642      	mov	r2, r8
    a278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a27c:	464b      	mov	r3, r9
    a27e:	e9d1 0100 	ldrd	r0, r1, [r1]
    a282:	f7fe f925 	bl	84d0 <__aeabi_dmul>
    a286:	4680      	mov	r8, r0
    a288:	4689      	mov	r9, r1
    a28a:	f034 040f 	bics.w	r4, r4, #15
    a28e:	d06c      	beq.n	a36a <_strtod_l+0x542>
    a290:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    a294:	dd41      	ble.n	a31a <_strtod_l+0x4f2>
    a296:	2322      	movs	r3, #34	; 0x22
    a298:	f8ca 3000 	str.w	r3, [sl]
    a29c:	e771      	b.n	a182 <_strtod_l+0x35a>
    a29e:	f1c5 050f 	rsb	r5, r5, #15
    a2a2:	4c40      	ldr	r4, [pc, #256]	; (a3a4 <_strtod_l+0x57c>)
    a2a4:	4642      	mov	r2, r8
    a2a6:	464b      	mov	r3, r9
    a2a8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    a2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
    a2b0:	f7fe f90e 	bl	84d0 <__aeabi_dmul>
    a2b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a2b6:	1b5d      	subs	r5, r3, r5
    a2b8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a2bc:	e9d4 2300 	ldrd	r2, r3, [r4]
    a2c0:	e78f      	b.n	a1e2 <_strtod_l+0x3ba>
    a2c2:	3316      	adds	r3, #22
    a2c4:	dba6      	blt.n	a214 <_strtod_l+0x3ec>
    a2c6:	ebab 0206 	sub.w	r2, fp, r6
    a2ca:	4b36      	ldr	r3, [pc, #216]	; (a3a4 <_strtod_l+0x57c>)
    a2cc:	4640      	mov	r0, r8
    a2ce:	4649      	mov	r1, r9
    a2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2d8:	f7fe fa24 	bl	8724 <__aeabi_ddiv>
    a2dc:	e759      	b.n	a192 <_strtod_l+0x36a>
    a2de:	2300      	movs	r3, #0
    a2e0:	9306      	str	r3, [sp, #24]
    a2e2:	2322      	movs	r3, #34	; 0x22
    a2e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a39c <_strtod_l+0x574>
    a2e8:	f04f 0800 	mov.w	r8, #0
    a2ec:	f8ca 3000 	str.w	r3, [sl]
    a2f0:	9918      	ldr	r1, [sp, #96]	; 0x60
    a2f2:	4650      	mov	r0, sl
    a2f4:	f01e fac6 	bl	28884 <_Bfree>
    a2f8:	9906      	ldr	r1, [sp, #24]
    a2fa:	4650      	mov	r0, sl
    a2fc:	f01e fac2 	bl	28884 <_Bfree>
    a300:	9905      	ldr	r1, [sp, #20]
    a302:	4650      	mov	r0, sl
    a304:	f01e fabe 	bl	28884 <_Bfree>
    a308:	9910      	ldr	r1, [sp, #64]	; 0x40
    a30a:	4650      	mov	r0, sl
    a30c:	f01e faba 	bl	28884 <_Bfree>
    a310:	9907      	ldr	r1, [sp, #28]
    a312:	4650      	mov	r0, sl
    a314:	f01e fab6 	bl	28884 <_Bfree>
    a318:	e5f5      	b.n	9f06 <_strtod_l+0xde>
    a31a:	2300      	movs	r3, #0
    a31c:	1124      	asrs	r4, r4, #4
    a31e:	4640      	mov	r0, r8
    a320:	4649      	mov	r1, r9
    a322:	4f21      	ldr	r7, [pc, #132]	; (a3a8 <_strtod_l+0x580>)
    a324:	9304      	str	r3, [sp, #16]
    a326:	2c01      	cmp	r4, #1
    a328:	dc22      	bgt.n	a370 <_strtod_l+0x548>
    a32a:	b10b      	cbz	r3, a330 <_strtod_l+0x508>
    a32c:	4680      	mov	r8, r0
    a32e:	4689      	mov	r9, r1
    a330:	9b04      	ldr	r3, [sp, #16]
    a332:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    a336:	491c      	ldr	r1, [pc, #112]	; (a3a8 <_strtod_l+0x580>)
    a338:	4642      	mov	r2, r8
    a33a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a33e:	464b      	mov	r3, r9
    a340:	e9d1 0100 	ldrd	r0, r1, [r1]
    a344:	f7fe f8c4 	bl	84d0 <__aeabi_dmul>
    a348:	4b14      	ldr	r3, [pc, #80]	; (a39c <_strtod_l+0x574>)
    a34a:	460a      	mov	r2, r1
    a34c:	4680      	mov	r8, r0
    a34e:	400b      	ands	r3, r1
    a350:	4916      	ldr	r1, [pc, #88]	; (a3ac <_strtod_l+0x584>)
    a352:	428b      	cmp	r3, r1
    a354:	d89f      	bhi.n	a296 <_strtod_l+0x46e>
    a356:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    a35a:	428b      	cmp	r3, r1
    a35c:	bf86      	itte	hi
    a35e:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; a3b0 <_strtod_l+0x588>
    a362:	f04f 38ff 	movhi.w	r8, #4294967295
    a366:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    a36a:	2300      	movs	r3, #0
    a36c:	9304      	str	r3, [sp, #16]
    a36e:	e04c      	b.n	a40a <_strtod_l+0x5e2>
    a370:	07e2      	lsls	r2, r4, #31
    a372:	d504      	bpl.n	a37e <_strtod_l+0x556>
    a374:	e9d7 2300 	ldrd	r2, r3, [r7]
    a378:	f7fe f8aa 	bl	84d0 <__aeabi_dmul>
    a37c:	2301      	movs	r3, #1
    a37e:	9a04      	ldr	r2, [sp, #16]
    a380:	1064      	asrs	r4, r4, #1
    a382:	3708      	adds	r7, #8
    a384:	3201      	adds	r2, #1
    a386:	9204      	str	r2, [sp, #16]
    a388:	e7cd      	b.n	a326 <_strtod_l+0x4fe>
    a38a:	bf00      	nop
    a38c:	00037302 	.word	0x00037302
    a390:	00034280 	.word	0x00034280
    a394:	000352d1 	.word	0x000352d1
    a398:	00038995 	.word	0x00038995
    a39c:	7ff00000 	.word	0x7ff00000
    a3a0:	000365fc 	.word	0x000365fc
    a3a4:	000332c8 	.word	0x000332c8
    a3a8:	000332a0 	.word	0x000332a0
    a3ac:	7ca00000 	.word	0x7ca00000
    a3b0:	7fefffff 	.word	0x7fefffff
    a3b4:	f014 0310 	ands.w	r3, r4, #16
    a3b8:	4640      	mov	r0, r8
    a3ba:	4649      	mov	r1, r9
    a3bc:	4fab      	ldr	r7, [pc, #684]	; (a66c <_strtod_l+0x844>)
    a3be:	bf18      	it	ne
    a3c0:	236a      	movne	r3, #106	; 0x6a
    a3c2:	9304      	str	r3, [sp, #16]
    a3c4:	2300      	movs	r3, #0
    a3c6:	07e2      	lsls	r2, r4, #31
    a3c8:	d504      	bpl.n	a3d4 <_strtod_l+0x5ac>
    a3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
    a3ce:	f7fe f87f 	bl	84d0 <__aeabi_dmul>
    a3d2:	2301      	movs	r3, #1
    a3d4:	1064      	asrs	r4, r4, #1
    a3d6:	f107 0708 	add.w	r7, r7, #8
    a3da:	d1f4      	bne.n	a3c6 <_strtod_l+0x59e>
    a3dc:	b10b      	cbz	r3, a3e2 <_strtod_l+0x5ba>
    a3de:	4680      	mov	r8, r0
    a3e0:	4689      	mov	r9, r1
    a3e2:	9b04      	ldr	r3, [sp, #16]
    a3e4:	b143      	cbz	r3, a3f8 <_strtod_l+0x5d0>
    a3e6:	f3c9 520a 	ubfx	r2, r9, #20, #11
    a3ea:	4649      	mov	r1, r9
    a3ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	dc50      	bgt.n	a496 <_strtod_l+0x66e>
    a3f4:	236a      	movs	r3, #106	; 0x6a
    a3f6:	9304      	str	r3, [sp, #16]
    a3f8:	2200      	movs	r2, #0
    a3fa:	2300      	movs	r3, #0
    a3fc:	4640      	mov	r0, r8
    a3fe:	4649      	mov	r1, r9
    a400:	f7fe fe2c 	bl	905c <__aeabi_dcmpeq>
    a404:	2800      	cmp	r0, #0
    a406:	f47f af22 	bne.w	a24e <_strtod_l+0x426>
    a40a:	9b06      	ldr	r3, [sp, #24]
    a40c:	4650      	mov	r0, sl
    a40e:	9a05      	ldr	r2, [sp, #20]
    a410:	9300      	str	r3, [sp, #0]
    a412:	462b      	mov	r3, r5
    a414:	990a      	ldr	r1, [sp, #40]	; 0x28
    a416:	f01e fa9f 	bl	28958 <__s2b>
    a41a:	9010      	str	r0, [sp, #64]	; 0x40
    a41c:	2800      	cmp	r0, #0
    a41e:	f43f af3a 	beq.w	a296 <_strtod_l+0x46e>
    a422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a424:	ebab 0b06 	sub.w	fp, fp, r6
    a428:	2b00      	cmp	r3, #0
    a42a:	bfb4      	ite	lt
    a42c:	465b      	movlt	r3, fp
    a42e:	2300      	movge	r3, #0
    a430:	9311      	str	r3, [sp, #68]	; 0x44
    a432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a438:	9314      	str	r3, [sp, #80]	; 0x50
    a43a:	2300      	movs	r3, #0
    a43c:	9307      	str	r3, [sp, #28]
    a43e:	9305      	str	r3, [sp, #20]
    a440:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a442:	4650      	mov	r0, sl
    a444:	6859      	ldr	r1, [r3, #4]
    a446:	f01e f9dd 	bl	28804 <_Balloc>
    a44a:	9006      	str	r0, [sp, #24]
    a44c:	2800      	cmp	r0, #0
    a44e:	f43f af48 	beq.w	a2e2 <_strtod_l+0x4ba>
    a452:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a454:	300c      	adds	r0, #12
    a456:	691a      	ldr	r2, [r3, #16]
    a458:	f103 010c 	add.w	r1, r3, #12
    a45c:	3202      	adds	r2, #2
    a45e:	0092      	lsls	r2, r2, #2
    a460:	f027 f9e5 	bl	3182e <memcpy>
    a464:	ab1a      	add	r3, sp, #104	; 0x68
    a466:	4642      	mov	r2, r8
    a468:	4650      	mov	r0, sl
    a46a:	9301      	str	r3, [sp, #4]
    a46c:	ab19      	add	r3, sp, #100	; 0x64
    a46e:	9300      	str	r3, [sp, #0]
    a470:	464b      	mov	r3, r9
    a472:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    a476:	f01e fd3f 	bl	28ef8 <__d2b>
    a47a:	9018      	str	r0, [sp, #96]	; 0x60
    a47c:	2800      	cmp	r0, #0
    a47e:	f43f af30 	beq.w	a2e2 <_strtod_l+0x4ba>
    a482:	2101      	movs	r1, #1
    a484:	4650      	mov	r0, sl
    a486:	f01e fab1 	bl	289ec <__i2b>
    a48a:	4603      	mov	r3, r0
    a48c:	9005      	str	r0, [sp, #20]
    a48e:	b9d0      	cbnz	r0, a4c6 <_strtod_l+0x69e>
    a490:	2300      	movs	r3, #0
    a492:	9305      	str	r3, [sp, #20]
    a494:	e725      	b.n	a2e2 <_strtod_l+0x4ba>
    a496:	2b1f      	cmp	r3, #31
    a498:	dd0e      	ble.n	a4b8 <_strtod_l+0x690>
    a49a:	2b34      	cmp	r3, #52	; 0x34
    a49c:	f04f 0800 	mov.w	r8, #0
    a4a0:	bfdb      	ittet	le
    a4a2:	f04f 33ff 	movle.w	r3, #4294967295
    a4a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    a4aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    a4ae:	4093      	lslle	r3, r2
    a4b0:	bfd8      	it	le
    a4b2:	ea03 0901 	andle.w	r9, r3, r1
    a4b6:	e79d      	b.n	a3f4 <_strtod_l+0x5cc>
    a4b8:	f04f 32ff 	mov.w	r2, #4294967295
    a4bc:	fa02 f303 	lsl.w	r3, r2, r3
    a4c0:	ea03 0808 	and.w	r8, r3, r8
    a4c4:	e796      	b.n	a3f4 <_strtod_l+0x5cc>
    a4c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    a4c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a4ca:	2c00      	cmp	r4, #0
    a4cc:	bfa9      	itett	ge
    a4ce:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    a4d0:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    a4d2:	18e7      	addge	r7, r4, r3
    a4d4:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    a4d6:	bfb8      	it	lt
    a4d8:	1b1e      	sublt	r6, r3, r4
    a4da:	9b04      	ldr	r3, [sp, #16]
    a4dc:	bfb8      	it	lt
    a4de:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    a4e0:	1ae4      	subs	r4, r4, r3
    a4e2:	4b63      	ldr	r3, [pc, #396]	; (a670 <_strtod_l+0x848>)
    a4e4:	4414      	add	r4, r2
    a4e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a4ea:	3c01      	subs	r4, #1
    a4ec:	429c      	cmp	r4, r3
    a4ee:	f280 80b0 	bge.w	a652 <_strtod_l+0x82a>
    a4f2:	1b1b      	subs	r3, r3, r4
    a4f4:	2501      	movs	r5, #1
    a4f6:	2b1f      	cmp	r3, #31
    a4f8:	eba2 0203 	sub.w	r2, r2, r3
    a4fc:	bfcd      	iteet	gt
    a4fe:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    a502:	409d      	lslle	r5, r3
    a504:	2400      	movle	r4, #0
    a506:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    a50a:	bfc2      	ittt	gt
    a50c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    a510:	34e2      	addgt	r4, #226	; 0xe2
    a512:	fa05 f404 	lslgt.w	r4, r5, r4
    a516:	eb07 0b02 	add.w	fp, r7, r2
    a51a:	9b04      	ldr	r3, [sp, #16]
    a51c:	4416      	add	r6, r2
    a51e:	455f      	cmp	r7, fp
    a520:	441e      	add	r6, r3
    a522:	463b      	mov	r3, r7
    a524:	bfa8      	it	ge
    a526:	465b      	movge	r3, fp
    a528:	42b3      	cmp	r3, r6
    a52a:	bfa8      	it	ge
    a52c:	4633      	movge	r3, r6
    a52e:	2b00      	cmp	r3, #0
    a530:	bfc2      	ittt	gt
    a532:	ebab 0b03 	subgt.w	fp, fp, r3
    a536:	1af6      	subgt	r6, r6, r3
    a538:	1aff      	subgt	r7, r7, r3
    a53a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a53c:	2b00      	cmp	r3, #0
    a53e:	dd16      	ble.n	a56e <_strtod_l+0x746>
    a540:	461a      	mov	r2, r3
    a542:	9905      	ldr	r1, [sp, #20]
    a544:	4650      	mov	r0, sl
    a546:	f01e fb11 	bl	28b6c <__pow5mult>
    a54a:	9005      	str	r0, [sp, #20]
    a54c:	2800      	cmp	r0, #0
    a54e:	d09f      	beq.n	a490 <_strtod_l+0x668>
    a550:	4601      	mov	r1, r0
    a552:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a554:	4650      	mov	r0, sl
    a556:	f01e fa5f 	bl	28a18 <__multiply>
    a55a:	900d      	str	r0, [sp, #52]	; 0x34
    a55c:	2800      	cmp	r0, #0
    a55e:	f43f aec0 	beq.w	a2e2 <_strtod_l+0x4ba>
    a562:	9918      	ldr	r1, [sp, #96]	; 0x60
    a564:	4650      	mov	r0, sl
    a566:	f01e f98d 	bl	28884 <_Bfree>
    a56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a56c:	9318      	str	r3, [sp, #96]	; 0x60
    a56e:	f1bb 0f00 	cmp.w	fp, #0
    a572:	dc71      	bgt.n	a658 <_strtod_l+0x830>
    a574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a576:	2b00      	cmp	r3, #0
    a578:	dd08      	ble.n	a58c <_strtod_l+0x764>
    a57a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a57c:	4650      	mov	r0, sl
    a57e:	9906      	ldr	r1, [sp, #24]
    a580:	f01e faf4 	bl	28b6c <__pow5mult>
    a584:	9006      	str	r0, [sp, #24]
    a586:	2800      	cmp	r0, #0
    a588:	f43f aea9 	beq.w	a2de <_strtod_l+0x4b6>
    a58c:	2e00      	cmp	r6, #0
    a58e:	dd08      	ble.n	a5a2 <_strtod_l+0x77a>
    a590:	4632      	mov	r2, r6
    a592:	9906      	ldr	r1, [sp, #24]
    a594:	4650      	mov	r0, sl
    a596:	f01e fb43 	bl	28c20 <__lshift>
    a59a:	9006      	str	r0, [sp, #24]
    a59c:	2800      	cmp	r0, #0
    a59e:	f43f ae9e 	beq.w	a2de <_strtod_l+0x4b6>
    a5a2:	2f00      	cmp	r7, #0
    a5a4:	dd08      	ble.n	a5b8 <_strtod_l+0x790>
    a5a6:	463a      	mov	r2, r7
    a5a8:	9905      	ldr	r1, [sp, #20]
    a5aa:	4650      	mov	r0, sl
    a5ac:	f01e fb38 	bl	28c20 <__lshift>
    a5b0:	9005      	str	r0, [sp, #20]
    a5b2:	2800      	cmp	r0, #0
    a5b4:	f43f ae95 	beq.w	a2e2 <_strtod_l+0x4ba>
    a5b8:	9a06      	ldr	r2, [sp, #24]
    a5ba:	4650      	mov	r0, sl
    a5bc:	9918      	ldr	r1, [sp, #96]	; 0x60
    a5be:	f01e fb9b 	bl	28cf8 <__mdiff>
    a5c2:	9007      	str	r0, [sp, #28]
    a5c4:	2800      	cmp	r0, #0
    a5c6:	f43f ae8c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a5ca:	68c3      	ldr	r3, [r0, #12]
    a5cc:	9905      	ldr	r1, [sp, #20]
    a5ce:	930d      	str	r3, [sp, #52]	; 0x34
    a5d0:	2300      	movs	r3, #0
    a5d2:	60c3      	str	r3, [r0, #12]
    a5d4:	f027 fde2 	bl	3219c <__mcmp>
    a5d8:	2800      	cmp	r0, #0
    a5da:	da4b      	bge.n	a674 <_strtod_l+0x84c>
    a5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a5de:	ea53 0308 	orrs.w	r3, r3, r8
    a5e2:	f040 80bc 	bne.w	a75e <_strtod_l+0x936>
    a5e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	f040 80b7 	bne.w	a75e <_strtod_l+0x936>
    a5f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a5f4:	0d1b      	lsrs	r3, r3, #20
    a5f6:	051b      	lsls	r3, r3, #20
    a5f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a5fc:	f240 80af 	bls.w	a75e <_strtod_l+0x936>
    a600:	9b07      	ldr	r3, [sp, #28]
    a602:	695b      	ldr	r3, [r3, #20]
    a604:	b923      	cbnz	r3, a610 <_strtod_l+0x7e8>
    a606:	9b07      	ldr	r3, [sp, #28]
    a608:	691b      	ldr	r3, [r3, #16]
    a60a:	2b01      	cmp	r3, #1
    a60c:	f340 80a7 	ble.w	a75e <_strtod_l+0x936>
    a610:	2201      	movs	r2, #1
    a612:	9907      	ldr	r1, [sp, #28]
    a614:	4650      	mov	r0, sl
    a616:	f01e fb03 	bl	28c20 <__lshift>
    a61a:	9905      	ldr	r1, [sp, #20]
    a61c:	9007      	str	r0, [sp, #28]
    a61e:	f027 fdbd 	bl	3219c <__mcmp>
    a622:	2800      	cmp	r0, #0
    a624:	f340 809b 	ble.w	a75e <_strtod_l+0x936>
    a628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a62c:	9a04      	ldr	r2, [sp, #16]
    a62e:	0d1b      	lsrs	r3, r3, #20
    a630:	051b      	lsls	r3, r3, #20
    a632:	2a00      	cmp	r2, #0
    a634:	d079      	beq.n	a72a <_strtod_l+0x902>
    a636:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a63a:	d86d      	bhi.n	a718 <_strtod_l+0x8f0>
    a63c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    a640:	d846      	bhi.n	a6d0 <_strtod_l+0x8a8>
    a642:	f04f 0800 	mov.w	r8, #0
    a646:	f04f 0900 	mov.w	r9, #0
    a64a:	2322      	movs	r3, #34	; 0x22
    a64c:	f8ca 3000 	str.w	r3, [sl]
    a650:	e64e      	b.n	a2f0 <_strtod_l+0x4c8>
    a652:	2400      	movs	r4, #0
    a654:	2501      	movs	r5, #1
    a656:	e75e      	b.n	a516 <_strtod_l+0x6ee>
    a658:	465a      	mov	r2, fp
    a65a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a65c:	4650      	mov	r0, sl
    a65e:	f01e fadf 	bl	28c20 <__lshift>
    a662:	9018      	str	r0, [sp, #96]	; 0x60
    a664:	2800      	cmp	r0, #0
    a666:	d185      	bne.n	a574 <_strtod_l+0x74c>
    a668:	e63b      	b.n	a2e2 <_strtod_l+0x4ba>
    a66a:	bf00      	nop
    a66c:	00033278 	.word	0x00033278
    a670:	fffffc02 	.word	0xfffffc02
    a674:	46cb      	mov	fp, r9
    a676:	f040 80a3 	bne.w	a7c0 <_strtod_l+0x998>
    a67a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a67c:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a680:	2a00      	cmp	r2, #0
    a682:	d040      	beq.n	a706 <_strtod_l+0x8de>
    a684:	4a96      	ldr	r2, [pc, #600]	; (a8e0 <_strtod_l+0xab8>)
    a686:	4293      	cmp	r3, r2
    a688:	d158      	bne.n	a73c <_strtod_l+0x914>
    a68a:	9b04      	ldr	r3, [sp, #16]
    a68c:	4642      	mov	r2, r8
    a68e:	b97b      	cbnz	r3, a6b0 <_strtod_l+0x888>
    a690:	f1b8 3fff 	cmp.w	r8, #4294967295
    a694:	f040 8089 	bne.w	a7aa <_strtod_l+0x982>
    a698:	4b92      	ldr	r3, [pc, #584]	; (a8e4 <_strtod_l+0xabc>)
    a69a:	4599      	cmp	r9, r3
    a69c:	f43f ae21 	beq.w	a2e2 <_strtod_l+0x4ba>
    a6a0:	4b91      	ldr	r3, [pc, #580]	; (a8e8 <_strtod_l+0xac0>)
    a6a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a6a6:	ea09 0303 	and.w	r3, r9, r3
    a6aa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a6ae:	e61f      	b.n	a2f0 <_strtod_l+0x4c8>
    a6b0:	4b8d      	ldr	r3, [pc, #564]	; (a8e8 <_strtod_l+0xac0>)
    a6b2:	ea09 0303 	and.w	r3, r9, r3
    a6b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a6ba:	d916      	bls.n	a6ea <_strtod_l+0x8c2>
    a6bc:	f118 0101 	adds.w	r1, r8, #1
    a6c0:	d11b      	bne.n	a6fa <_strtod_l+0x8d2>
    a6c2:	4a88      	ldr	r2, [pc, #544]	; (a8e4 <_strtod_l+0xabc>)
    a6c4:	4591      	cmp	r9, r2
    a6c6:	f43f ae0c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a6ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a6ce:	4680      	mov	r8, r0
    a6d0:	4b86      	ldr	r3, [pc, #536]	; (a8ec <_strtod_l+0xac4>)
    a6d2:	4640      	mov	r0, r8
    a6d4:	4649      	mov	r1, r9
    a6d6:	2200      	movs	r2, #0
    a6d8:	f7fd fefa 	bl	84d0 <__aeabi_dmul>
    a6dc:	460b      	mov	r3, r1
    a6de:	4680      	mov	r8, r0
    a6e0:	4689      	mov	r9, r1
    a6e2:	4303      	orrs	r3, r0
    a6e4:	f47f ae04 	bne.w	a2f0 <_strtod_l+0x4c8>
    a6e8:	e7af      	b.n	a64a <_strtod_l+0x822>
    a6ea:	0d1e      	lsrs	r6, r3, #20
    a6ec:	f04f 31ff 	mov.w	r1, #4294967295
    a6f0:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a6f4:	40b1      	lsls	r1, r6
    a6f6:	4588      	cmp	r8, r1
    a6f8:	d0e7      	beq.n	a6ca <_strtod_l+0x8a2>
    a6fa:	2c00      	cmp	r4, #0
    a6fc:	d05e      	beq.n	a7bc <_strtod_l+0x994>
    a6fe:	ea14 0f0b 	tst.w	r4, fp
    a702:	d0e5      	beq.n	a6d0 <_strtod_l+0x8a8>
    a704:	e01e      	b.n	a744 <_strtod_l+0x91c>
    a706:	2b00      	cmp	r3, #0
    a708:	d14a      	bne.n	a7a0 <_strtod_l+0x978>
    a70a:	f1b8 0f00 	cmp.w	r8, #0
    a70e:	d08b      	beq.n	a628 <_strtod_l+0x800>
    a710:	b364      	cbz	r4, a76c <_strtod_l+0x944>
    a712:	ea14 0f0b 	tst.w	r4, fp
    a716:	e02b      	b.n	a770 <_strtod_l+0x948>
    a718:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a71c:	f04f 38ff 	mov.w	r8, #4294967295
    a720:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a724:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a728:	e7d2      	b.n	a6d0 <_strtod_l+0x8a8>
    a72a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a72e:	f04f 38ff 	mov.w	r8, #4294967295
    a732:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a736:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a73a:	e5d9      	b.n	a2f0 <_strtod_l+0x4c8>
    a73c:	b19c      	cbz	r4, a766 <_strtod_l+0x93e>
    a73e:	ea14 0f09 	tst.w	r4, r9
    a742:	d00c      	beq.n	a75e <_strtod_l+0x936>
    a744:	9a04      	ldr	r2, [sp, #16]
    a746:	4640      	mov	r0, r8
    a748:	4649      	mov	r1, r9
    a74a:	f027 fa48 	bl	31bde <sulp>
    a74e:	4602      	mov	r2, r0
    a750:	460b      	mov	r3, r1
    a752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a756:	f7fd fd05 	bl	8164 <__adddf3>
    a75a:	4680      	mov	r8, r0
    a75c:	4689      	mov	r9, r1
    a75e:	9b04      	ldr	r3, [sp, #16]
    a760:	2b00      	cmp	r3, #0
    a762:	d1b5      	bne.n	a6d0 <_strtod_l+0x8a8>
    a764:	e5c4      	b.n	a2f0 <_strtod_l+0x4c8>
    a766:	ea15 0f08 	tst.w	r5, r8
    a76a:	e7ea      	b.n	a742 <_strtod_l+0x91a>
    a76c:	ea18 0f05 	tst.w	r8, r5
    a770:	d0f5      	beq.n	a75e <_strtod_l+0x936>
    a772:	9a04      	ldr	r2, [sp, #16]
    a774:	4640      	mov	r0, r8
    a776:	4649      	mov	r1, r9
    a778:	f027 fa31 	bl	31bde <sulp>
    a77c:	4602      	mov	r2, r0
    a77e:	460b      	mov	r3, r1
    a780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a784:	f7fd fcec 	bl	8160 <__aeabi_dsub>
    a788:	2200      	movs	r2, #0
    a78a:	2300      	movs	r3, #0
    a78c:	4604      	mov	r4, r0
    a78e:	460d      	mov	r5, r1
    a790:	f7fe fc64 	bl	905c <__aeabi_dcmpeq>
    a794:	2800      	cmp	r0, #0
    a796:	f47f af54 	bne.w	a642 <_strtod_l+0x81a>
    a79a:	46a0      	mov	r8, r4
    a79c:	46a9      	mov	r9, r5
    a79e:	e7de      	b.n	a75e <_strtod_l+0x936>
    a7a0:	2c00      	cmp	r4, #0
    a7a2:	d1b6      	bne.n	a712 <_strtod_l+0x8ea>
    a7a4:	ea15 0f08 	tst.w	r5, r8
    a7a8:	e7e2      	b.n	a770 <_strtod_l+0x948>
    a7aa:	b124      	cbz	r4, a7b6 <_strtod_l+0x98e>
    a7ac:	ea14 0f09 	tst.w	r4, r9
    a7b0:	f43f ad9e 	beq.w	a2f0 <_strtod_l+0x4c8>
    a7b4:	e7c6      	b.n	a744 <_strtod_l+0x91c>
    a7b6:	ea18 0f05 	tst.w	r8, r5
    a7ba:	e7f9      	b.n	a7b0 <_strtod_l+0x988>
    a7bc:	422a      	tst	r2, r5
    a7be:	e7a0      	b.n	a702 <_strtod_l+0x8da>
    a7c0:	9905      	ldr	r1, [sp, #20]
    a7c2:	9807      	ldr	r0, [sp, #28]
    a7c4:	f027 fd05 	bl	321d2 <__ratio>
    a7c8:	2200      	movs	r2, #0
    a7ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a7ce:	4604      	mov	r4, r0
    a7d0:	460d      	mov	r5, r1
    a7d2:	f7fe fc57 	bl	9084 <__aeabi_dcmple>
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d06d      	beq.n	a8b6 <_strtod_l+0xa8e>
    a7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d178      	bne.n	a8d2 <_strtod_l+0xaaa>
    a7e0:	f1b8 0f00 	cmp.w	r8, #0
    a7e4:	d156      	bne.n	a894 <_strtod_l+0xa6c>
    a7e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d159      	bne.n	a8a2 <_strtod_l+0xa7a>
    a7ee:	2200      	movs	r2, #0
    a7f0:	4b3f      	ldr	r3, [pc, #252]	; (a8f0 <_strtod_l+0xac8>)
    a7f2:	4620      	mov	r0, r4
    a7f4:	4629      	mov	r1, r5
    a7f6:	f7fe fc3b 	bl	9070 <__aeabi_dcmplt>
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d158      	bne.n	a8b0 <_strtod_l+0xa88>
    a7fe:	4620      	mov	r0, r4
    a800:	4629      	mov	r1, r5
    a802:	2200      	movs	r2, #0
    a804:	4b3b      	ldr	r3, [pc, #236]	; (a8f4 <_strtod_l+0xacc>)
    a806:	f7fd fe63 	bl	84d0 <__aeabi_dmul>
    a80a:	4604      	mov	r4, r0
    a80c:	460d      	mov	r5, r1
    a80e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a812:	9408      	str	r4, [sp, #32]
    a814:	9309      	str	r3, [sp, #36]	; 0x24
    a816:	4b34      	ldr	r3, [pc, #208]	; (a8e8 <_strtod_l+0xac0>)
    a818:	4a33      	ldr	r2, [pc, #204]	; (a8e8 <_strtod_l+0xac0>)
    a81a:	ea0b 0303 	and.w	r3, fp, r3
    a81e:	ea0b 0202 	and.w	r2, fp, r2
    a822:	9315      	str	r3, [sp, #84]	; 0x54
    a824:	4b34      	ldr	r3, [pc, #208]	; (a8f8 <_strtod_l+0xad0>)
    a826:	429a      	cmp	r2, r3
    a828:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a82c:	f040 809e 	bne.w	a96c <_strtod_l+0xb44>
    a830:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a834:	4640      	mov	r0, r8
    a836:	4649      	mov	r1, r9
    a838:	f01e faf4 	bl	28e24 <__ulp>
    a83c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a840:	f7fd fe46 	bl	84d0 <__aeabi_dmul>
    a844:	4642      	mov	r2, r8
    a846:	464b      	mov	r3, r9
    a848:	f7fd fc8c 	bl	8164 <__adddf3>
    a84c:	460b      	mov	r3, r1
    a84e:	4926      	ldr	r1, [pc, #152]	; (a8e8 <_strtod_l+0xac0>)
    a850:	4680      	mov	r8, r0
    a852:	4a2a      	ldr	r2, [pc, #168]	; (a8fc <_strtod_l+0xad4>)
    a854:	4019      	ands	r1, r3
    a856:	4291      	cmp	r1, r2
    a858:	d954      	bls.n	a904 <_strtod_l+0xadc>
    a85a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a85c:	4b21      	ldr	r3, [pc, #132]	; (a8e4 <_strtod_l+0xabc>)
    a85e:	429a      	cmp	r2, r3
    a860:	d103      	bne.n	a86a <_strtod_l+0xa42>
    a862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a864:	3301      	adds	r3, #1
    a866:	f43f ad3c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a86a:	f8df 9078 	ldr.w	r9, [pc, #120]	; a8e4 <_strtod_l+0xabc>
    a86e:	f04f 38ff 	mov.w	r8, #4294967295
    a872:	9918      	ldr	r1, [sp, #96]	; 0x60
    a874:	4650      	mov	r0, sl
    a876:	f01e f805 	bl	28884 <_Bfree>
    a87a:	9906      	ldr	r1, [sp, #24]
    a87c:	4650      	mov	r0, sl
    a87e:	f01e f801 	bl	28884 <_Bfree>
    a882:	9905      	ldr	r1, [sp, #20]
    a884:	4650      	mov	r0, sl
    a886:	f01d fffd 	bl	28884 <_Bfree>
    a88a:	9907      	ldr	r1, [sp, #28]
    a88c:	4650      	mov	r0, sl
    a88e:	f01d fff9 	bl	28884 <_Bfree>
    a892:	e5d5      	b.n	a440 <_strtod_l+0x618>
    a894:	f1b8 0f01 	cmp.w	r8, #1
    a898:	d103      	bne.n	a8a2 <_strtod_l+0xa7a>
    a89a:	f1b9 0f00 	cmp.w	r9, #0
    a89e:	f43f aed0 	beq.w	a642 <_strtod_l+0x81a>
    a8a2:	4c17      	ldr	r4, [pc, #92]	; (a900 <_strtod_l+0xad8>)
    a8a4:	2300      	movs	r3, #0
    a8a6:	4d12      	ldr	r5, [pc, #72]	; (a8f0 <_strtod_l+0xac8>)
    a8a8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a8ac:	2400      	movs	r4, #0
    a8ae:	e7b2      	b.n	a816 <_strtod_l+0x9ee>
    a8b0:	2400      	movs	r4, #0
    a8b2:	4d10      	ldr	r5, [pc, #64]	; (a8f4 <_strtod_l+0xacc>)
    a8b4:	e7ab      	b.n	a80e <_strtod_l+0x9e6>
    a8b6:	4b0f      	ldr	r3, [pc, #60]	; (a8f4 <_strtod_l+0xacc>)
    a8b8:	4620      	mov	r0, r4
    a8ba:	4629      	mov	r1, r5
    a8bc:	2200      	movs	r2, #0
    a8be:	f7fd fe07 	bl	84d0 <__aeabi_dmul>
    a8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8c4:	4604      	mov	r4, r0
    a8c6:	460d      	mov	r5, r1
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d0a0      	beq.n	a80e <_strtod_l+0x9e6>
    a8cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a8d0:	e7a1      	b.n	a816 <_strtod_l+0x9ee>
    a8d2:	4c07      	ldr	r4, [pc, #28]	; (a8f0 <_strtod_l+0xac8>)
    a8d4:	2300      	movs	r3, #0
    a8d6:	4625      	mov	r5, r4
    a8d8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a8dc:	461c      	mov	r4, r3
    a8de:	e79a      	b.n	a816 <_strtod_l+0x9ee>
    a8e0:	000fffff 	.word	0x000fffff
    a8e4:	7fefffff 	.word	0x7fefffff
    a8e8:	7ff00000 	.word	0x7ff00000
    a8ec:	39500000 	.word	0x39500000
    a8f0:	3ff00000 	.word	0x3ff00000
    a8f4:	3fe00000 	.word	0x3fe00000
    a8f8:	7fe00000 	.word	0x7fe00000
    a8fc:	7c9fffff 	.word	0x7c9fffff
    a900:	bff00000 	.word	0xbff00000
    a904:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a908:	9b04      	ldr	r3, [sp, #16]
    a90a:	464e      	mov	r6, r9
    a90c:	2b00      	cmp	r3, #0
    a90e:	d1b0      	bne.n	a872 <_strtod_l+0xa4a>
    a910:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a914:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a916:	0d1b      	lsrs	r3, r3, #20
    a918:	051b      	lsls	r3, r3, #20
    a91a:	429a      	cmp	r2, r3
    a91c:	d1a9      	bne.n	a872 <_strtod_l+0xa4a>
    a91e:	4620      	mov	r0, r4
    a920:	4629      	mov	r1, r5
    a922:	f7fe fc03 	bl	912c <__aeabi_d2lz>
    a926:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a92a:	f7fd fda3 	bl	8474 <__aeabi_l2d>
    a92e:	460b      	mov	r3, r1
    a930:	4602      	mov	r2, r0
    a932:	4629      	mov	r1, r5
    a934:	4620      	mov	r0, r4
    a936:	ea46 0608 	orr.w	r6, r6, r8
    a93a:	f7fd fc11 	bl	8160 <__aeabi_dsub>
    a93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a940:	4604      	mov	r4, r0
    a942:	460d      	mov	r5, r1
    a944:	431e      	orrs	r6, r3
    a946:	d04a      	beq.n	a9de <_strtod_l+0xbb6>
    a948:	a32d      	add	r3, pc, #180	; (adr r3, aa00 <_strtod_l+0xbd8>)
    a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a94e:	f7fe fb8f 	bl	9070 <__aeabi_dcmplt>
    a952:	2800      	cmp	r0, #0
    a954:	f47f accc 	bne.w	a2f0 <_strtod_l+0x4c8>
    a958:	4620      	mov	r0, r4
    a95a:	4629      	mov	r1, r5
    a95c:	a32a      	add	r3, pc, #168	; (adr r3, aa08 <_strtod_l+0xbe0>)
    a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a962:	f7fe fba3 	bl	90ac <__aeabi_dcmpgt>
    a966:	2800      	cmp	r0, #0
    a968:	d083      	beq.n	a872 <_strtod_l+0xa4a>
    a96a:	e4c1      	b.n	a2f0 <_strtod_l+0x4c8>
    a96c:	9b04      	ldr	r3, [sp, #16]
    a96e:	b313      	cbz	r3, a9b6 <_strtod_l+0xb8e>
    a970:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a976:	d81e      	bhi.n	a9b6 <_strtod_l+0xb8e>
    a978:	4620      	mov	r0, r4
    a97a:	4629      	mov	r1, r5
    a97c:	a324      	add	r3, pc, #144	; (adr r3, aa10 <_strtod_l+0xbe8>)
    a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a982:	f7fe fb7f 	bl	9084 <__aeabi_dcmple>
    a986:	b190      	cbz	r0, a9ae <_strtod_l+0xb86>
    a988:	4629      	mov	r1, r5
    a98a:	4620      	mov	r0, r4
    a98c:	f7fe fb98 	bl	90c0 <__aeabi_d2uiz>
    a990:	2801      	cmp	r0, #1
    a992:	bf38      	it	cc
    a994:	2001      	movcc	r0, #1
    a996:	f7fd fd21 	bl	83dc <__aeabi_ui2d>
    a99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a99c:	4604      	mov	r4, r0
    a99e:	460d      	mov	r5, r1
    a9a0:	b9d3      	cbnz	r3, a9d8 <_strtod_l+0xbb0>
    a9a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a9a6:	9012      	str	r0, [sp, #72]	; 0x48
    a9a8:	9313      	str	r3, [sp, #76]	; 0x4c
    a9aa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a9ae:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a9b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a9b4:	1a9f      	subs	r7, r3, r2
    a9b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a9ba:	f01e fa33 	bl	28e24 <__ulp>
    a9be:	4602      	mov	r2, r0
    a9c0:	460b      	mov	r3, r1
    a9c2:	4630      	mov	r0, r6
    a9c4:	4639      	mov	r1, r7
    a9c6:	f7fd fd83 	bl	84d0 <__aeabi_dmul>
    a9ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a9ce:	f7fd fbc9 	bl	8164 <__adddf3>
    a9d2:	4680      	mov	r8, r0
    a9d4:	4689      	mov	r9, r1
    a9d6:	e797      	b.n	a908 <_strtod_l+0xae0>
    a9d8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a9dc:	e7e5      	b.n	a9aa <_strtod_l+0xb82>
    a9de:	a30e      	add	r3, pc, #56	; (adr r3, aa18 <_strtod_l+0xbf0>)
    a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9e4:	f7fe fb44 	bl	9070 <__aeabi_dcmplt>
    a9e8:	e7bd      	b.n	a966 <_strtod_l+0xb3e>
    a9ea:	2a65      	cmp	r2, #101	; 0x65
    a9ec:	f43f ab48 	beq.w	a080 <_strtod_l+0x258>
    a9f0:	2a45      	cmp	r2, #69	; 0x45
    a9f2:	f43f ab45 	beq.w	a080 <_strtod_l+0x258>
    a9f6:	2301      	movs	r3, #1
    a9f8:	f7ff bb7e 	b.w	a0f8 <_strtod_l+0x2d0>
    a9fc:	f3af 8000 	nop.w
    aa00:	94a03595 	.word	0x94a03595
    aa04:	3fdfffff 	.word	0x3fdfffff
    aa08:	35afe535 	.word	0x35afe535
    aa0c:	3fe00000 	.word	0x3fe00000
    aa10:	ffc00000 	.word	0xffc00000
    aa14:	41dfffff 	.word	0x41dfffff
    aa18:	94a03595 	.word	0x94a03595
    aa1c:	3fcfffff 	.word	0x3fcfffff

0000aa20 <_dtoa_r>:
    aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa24:	4614      	mov	r4, r2
    aa26:	b097      	sub	sp, #92	; 0x5c
    aa28:	461d      	mov	r5, r3
    aa2a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    aa2c:	4683      	mov	fp, r0
    aa2e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    aa30:	e9cd 4504 	strd	r4, r5, [sp, #16]
    aa34:	b97f      	cbnz	r7, aa56 <_dtoa_r+0x36>
    aa36:	2010      	movs	r0, #16
    aa38:	f01c f90a 	bl	26c50 <malloc>
    aa3c:	4602      	mov	r2, r0
    aa3e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    aa42:	b920      	cbnz	r0, aa4e <_dtoa_r+0x2e>
    aa44:	4ba2      	ldr	r3, [pc, #648]	; (acd0 <_dtoa_r+0x2b0>)
    aa46:	21ea      	movs	r1, #234	; 0xea
    aa48:	48a2      	ldr	r0, [pc, #648]	; (acd4 <_dtoa_r+0x2b4>)
    aa4a:	f01d fb6b 	bl	28124 <__assert_func>
    aa4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
    aa52:	6007      	str	r7, [r0, #0]
    aa54:	60c7      	str	r7, [r0, #12]
    aa56:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    aa5a:	6819      	ldr	r1, [r3, #0]
    aa5c:	b159      	cbz	r1, aa76 <_dtoa_r+0x56>
    aa5e:	685a      	ldr	r2, [r3, #4]
    aa60:	2301      	movs	r3, #1
    aa62:	4658      	mov	r0, fp
    aa64:	4093      	lsls	r3, r2
    aa66:	604a      	str	r2, [r1, #4]
    aa68:	608b      	str	r3, [r1, #8]
    aa6a:	f01d ff0b 	bl	28884 <_Bfree>
    aa6e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    aa72:	2200      	movs	r2, #0
    aa74:	601a      	str	r2, [r3, #0]
    aa76:	1e2b      	subs	r3, r5, #0
    aa78:	bfb7      	itett	lt
    aa7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    aa7e:	2300      	movge	r3, #0
    aa80:	2201      	movlt	r2, #1
    aa82:	9305      	strlt	r3, [sp, #20]
    aa84:	bfa8      	it	ge
    aa86:	6033      	strge	r3, [r6, #0]
    aa88:	9f05      	ldr	r7, [sp, #20]
    aa8a:	4b93      	ldr	r3, [pc, #588]	; (acd8 <_dtoa_r+0x2b8>)
    aa8c:	bfb8      	it	lt
    aa8e:	6032      	strlt	r2, [r6, #0]
    aa90:	43bb      	bics	r3, r7
    aa92:	d119      	bne.n	aac8 <_dtoa_r+0xa8>
    aa94:	f242 730f 	movw	r3, #9999	; 0x270f
    aa98:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aa9a:	6013      	str	r3, [r2, #0]
    aa9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    aaa0:	4323      	orrs	r3, r4
    aaa2:	f000 85e0 	beq.w	b666 <_dtoa_r+0xc46>
    aaa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aaa8:	b953      	cbnz	r3, aac0 <_dtoa_r+0xa0>
    aaaa:	4b8c      	ldr	r3, [pc, #560]	; (acdc <_dtoa_r+0x2bc>)
    aaac:	e021      	b.n	aaf2 <_dtoa_r+0xd2>
    aaae:	4b8c      	ldr	r3, [pc, #560]	; (ace0 <_dtoa_r+0x2c0>)
    aab0:	9308      	str	r3, [sp, #32]
    aab2:	3308      	adds	r3, #8
    aab4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aab6:	6013      	str	r3, [r2, #0]
    aab8:	9808      	ldr	r0, [sp, #32]
    aaba:	b017      	add	sp, #92	; 0x5c
    aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aac0:	4b86      	ldr	r3, [pc, #536]	; (acdc <_dtoa_r+0x2bc>)
    aac2:	9308      	str	r3, [sp, #32]
    aac4:	3303      	adds	r3, #3
    aac6:	e7f5      	b.n	aab4 <_dtoa_r+0x94>
    aac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aacc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    aad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aad4:	2200      	movs	r2, #0
    aad6:	2300      	movs	r3, #0
    aad8:	f7fe fac0 	bl	905c <__aeabi_dcmpeq>
    aadc:	4680      	mov	r8, r0
    aade:	b150      	cbz	r0, aaf6 <_dtoa_r+0xd6>
    aae0:	2301      	movs	r3, #1
    aae2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aae4:	6013      	str	r3, [r2, #0]
    aae6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aae8:	b113      	cbz	r3, aaf0 <_dtoa_r+0xd0>
    aaea:	4b7e      	ldr	r3, [pc, #504]	; (ace4 <_dtoa_r+0x2c4>)
    aaec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aaee:	6013      	str	r3, [r2, #0]
    aaf0:	4b7d      	ldr	r3, [pc, #500]	; (ace8 <_dtoa_r+0x2c8>)
    aaf2:	9308      	str	r3, [sp, #32]
    aaf4:	e7e0      	b.n	aab8 <_dtoa_r+0x98>
    aaf6:	ab14      	add	r3, sp, #80	; 0x50
    aaf8:	f3c7 560a 	ubfx	r6, r7, #20, #11
    aafc:	4658      	mov	r0, fp
    aafe:	9301      	str	r3, [sp, #4]
    ab00:	ab15      	add	r3, sp, #84	; 0x54
    ab02:	9300      	str	r3, [sp, #0]
    ab04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ab08:	f01e f9f6 	bl	28ef8 <__d2b>
    ab0c:	9003      	str	r0, [sp, #12]
    ab0e:	2e00      	cmp	r6, #0
    ab10:	d078      	beq.n	ac04 <_dtoa_r+0x1e4>
    ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab14:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    ab18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    ab1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ab20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    ab24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ab28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ab2c:	4619      	mov	r1, r3
    ab2e:	2200      	movs	r2, #0
    ab30:	4b6e      	ldr	r3, [pc, #440]	; (acec <_dtoa_r+0x2cc>)
    ab32:	f7fd fb15 	bl	8160 <__aeabi_dsub>
    ab36:	a360      	add	r3, pc, #384	; (adr r3, acb8 <_dtoa_r+0x298>)
    ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab3c:	f7fd fcc8 	bl	84d0 <__aeabi_dmul>
    ab40:	a35f      	add	r3, pc, #380	; (adr r3, acc0 <_dtoa_r+0x2a0>)
    ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab46:	f7fd fb0d 	bl	8164 <__adddf3>
    ab4a:	4604      	mov	r4, r0
    ab4c:	460d      	mov	r5, r1
    ab4e:	4630      	mov	r0, r6
    ab50:	f7fd fc54 	bl	83fc <__aeabi_i2d>
    ab54:	a35c      	add	r3, pc, #368	; (adr r3, acc8 <_dtoa_r+0x2a8>)
    ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab5a:	f7fd fcb9 	bl	84d0 <__aeabi_dmul>
    ab5e:	4602      	mov	r2, r0
    ab60:	460b      	mov	r3, r1
    ab62:	4620      	mov	r0, r4
    ab64:	4629      	mov	r1, r5
    ab66:	f7fd fafd 	bl	8164 <__adddf3>
    ab6a:	4604      	mov	r4, r0
    ab6c:	460d      	mov	r5, r1
    ab6e:	f7fd fec1 	bl	88f4 <__aeabi_d2iz>
    ab72:	2200      	movs	r2, #0
    ab74:	4607      	mov	r7, r0
    ab76:	2300      	movs	r3, #0
    ab78:	4620      	mov	r0, r4
    ab7a:	4629      	mov	r1, r5
    ab7c:	f7fe fa78 	bl	9070 <__aeabi_dcmplt>
    ab80:	b140      	cbz	r0, ab94 <_dtoa_r+0x174>
    ab82:	4638      	mov	r0, r7
    ab84:	f7fd fc3a 	bl	83fc <__aeabi_i2d>
    ab88:	4622      	mov	r2, r4
    ab8a:	462b      	mov	r3, r5
    ab8c:	f7fe fa66 	bl	905c <__aeabi_dcmpeq>
    ab90:	b900      	cbnz	r0, ab94 <_dtoa_r+0x174>
    ab92:	3f01      	subs	r7, #1
    ab94:	2f16      	cmp	r7, #22
    ab96:	d854      	bhi.n	ac42 <_dtoa_r+0x222>
    ab98:	4b55      	ldr	r3, [pc, #340]	; (acf0 <_dtoa_r+0x2d0>)
    ab9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ab9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    aba6:	f7fe fa63 	bl	9070 <__aeabi_dcmplt>
    abaa:	2800      	cmp	r0, #0
    abac:	d04b      	beq.n	ac46 <_dtoa_r+0x226>
    abae:	3f01      	subs	r7, #1
    abb0:	2300      	movs	r3, #0
    abb2:	9312      	str	r3, [sp, #72]	; 0x48
    abb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    abb6:	1b9b      	subs	r3, r3, r6
    abb8:	1e5a      	subs	r2, r3, #1
    abba:	bf4c      	ite	mi
    abbc:	f1c3 0301 	rsbmi	r3, r3, #1
    abc0:	2300      	movpl	r3, #0
    abc2:	920a      	str	r2, [sp, #40]	; 0x28
    abc4:	bf45      	ittet	mi
    abc6:	9306      	strmi	r3, [sp, #24]
    abc8:	2300      	movmi	r3, #0
    abca:	9306      	strpl	r3, [sp, #24]
    abcc:	930a      	strmi	r3, [sp, #40]	; 0x28
    abce:	2f00      	cmp	r7, #0
    abd0:	db3b      	blt.n	ac4a <_dtoa_r+0x22a>
    abd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abd4:	970f      	str	r7, [sp, #60]	; 0x3c
    abd6:	443b      	add	r3, r7
    abd8:	930a      	str	r3, [sp, #40]	; 0x28
    abda:	2300      	movs	r3, #0
    abdc:	930b      	str	r3, [sp, #44]	; 0x2c
    abde:	9b20      	ldr	r3, [sp, #128]	; 0x80
    abe0:	2b09      	cmp	r3, #9
    abe2:	f200 8089 	bhi.w	acf8 <_dtoa_r+0x2d8>
    abe6:	2b05      	cmp	r3, #5
    abe8:	bfc5      	ittet	gt
    abea:	3b04      	subgt	r3, #4
    abec:	2400      	movgt	r4, #0
    abee:	2401      	movle	r4, #1
    abf0:	9320      	strgt	r3, [sp, #128]	; 0x80
    abf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    abf4:	3b02      	subs	r3, #2
    abf6:	2b03      	cmp	r3, #3
    abf8:	f200 8089 	bhi.w	ad0e <_dtoa_r+0x2ee>
    abfc:	e8df f003 	tbb	[pc, r3]
    ac00:	59383a2d 	.word	0x59383a2d
    ac04:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    ac08:	441e      	add	r6, r3
    ac0a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    ac0e:	2b20      	cmp	r3, #32
    ac10:	bfc9      	itett	gt
    ac12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    ac16:	f1c3 0320 	rsble	r3, r3, #32
    ac1a:	409f      	lslgt	r7, r3
    ac1c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    ac20:	bfd8      	it	le
    ac22:	fa04 f003 	lslle.w	r0, r4, r3
    ac26:	f106 36ff 	add.w	r6, r6, #4294967295
    ac2a:	bfc4      	itt	gt
    ac2c:	fa24 f303 	lsrgt.w	r3, r4, r3
    ac30:	ea47 0003 	orrgt.w	r0, r7, r3
    ac34:	f7fd fbd2 	bl	83dc <__aeabi_ui2d>
    ac38:	2201      	movs	r2, #1
    ac3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    ac3e:	9213      	str	r2, [sp, #76]	; 0x4c
    ac40:	e774      	b.n	ab2c <_dtoa_r+0x10c>
    ac42:	2301      	movs	r3, #1
    ac44:	e7b5      	b.n	abb2 <_dtoa_r+0x192>
    ac46:	9012      	str	r0, [sp, #72]	; 0x48
    ac48:	e7b4      	b.n	abb4 <_dtoa_r+0x194>
    ac4a:	9b06      	ldr	r3, [sp, #24]
    ac4c:	1bdb      	subs	r3, r3, r7
    ac4e:	9306      	str	r3, [sp, #24]
    ac50:	427b      	negs	r3, r7
    ac52:	930b      	str	r3, [sp, #44]	; 0x2c
    ac54:	2300      	movs	r3, #0
    ac56:	930f      	str	r3, [sp, #60]	; 0x3c
    ac58:	e7c1      	b.n	abde <_dtoa_r+0x1be>
    ac5a:	2300      	movs	r3, #0
    ac5c:	930e      	str	r3, [sp, #56]	; 0x38
    ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac60:	2b00      	cmp	r3, #0
    ac62:	dc57      	bgt.n	ad14 <_dtoa_r+0x2f4>
    ac64:	2301      	movs	r3, #1
    ac66:	4699      	mov	r9, r3
    ac68:	461a      	mov	r2, r3
    ac6a:	9309      	str	r3, [sp, #36]	; 0x24
    ac6c:	9221      	str	r2, [sp, #132]	; 0x84
    ac6e:	e00c      	b.n	ac8a <_dtoa_r+0x26a>
    ac70:	2301      	movs	r3, #1
    ac72:	e7f3      	b.n	ac5c <_dtoa_r+0x23c>
    ac74:	2300      	movs	r3, #0
    ac76:	930e      	str	r3, [sp, #56]	; 0x38
    ac78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac7a:	18fb      	adds	r3, r7, r3
    ac7c:	f103 0901 	add.w	r9, r3, #1
    ac80:	9309      	str	r3, [sp, #36]	; 0x24
    ac82:	464b      	mov	r3, r9
    ac84:	2b01      	cmp	r3, #1
    ac86:	bfb8      	it	lt
    ac88:	2301      	movlt	r3, #1
    ac8a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    ac8e:	2100      	movs	r1, #0
    ac90:	2204      	movs	r2, #4
    ac92:	f102 0514 	add.w	r5, r2, #20
    ac96:	429d      	cmp	r5, r3
    ac98:	d940      	bls.n	ad1c <_dtoa_r+0x2fc>
    ac9a:	6041      	str	r1, [r0, #4]
    ac9c:	4658      	mov	r0, fp
    ac9e:	f01d fdb1 	bl	28804 <_Balloc>
    aca2:	9008      	str	r0, [sp, #32]
    aca4:	2800      	cmp	r0, #0
    aca6:	d13c      	bne.n	ad22 <_dtoa_r+0x302>
    aca8:	4b12      	ldr	r3, [pc, #72]	; (acf4 <_dtoa_r+0x2d4>)
    acaa:	4602      	mov	r2, r0
    acac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    acb0:	e6ca      	b.n	aa48 <_dtoa_r+0x28>
    acb2:	2301      	movs	r3, #1
    acb4:	e7df      	b.n	ac76 <_dtoa_r+0x256>
    acb6:	bf00      	nop
    acb8:	636f4361 	.word	0x636f4361
    acbc:	3fd287a7 	.word	0x3fd287a7
    acc0:	8b60c8b3 	.word	0x8b60c8b3
    acc4:	3fc68a28 	.word	0x3fc68a28
    acc8:	509f79fb 	.word	0x509f79fb
    accc:	3fd34413 	.word	0x3fd34413
    acd0:	0003888d 	.word	0x0003888d
    acd4:	0003899f 	.word	0x0003899f
    acd8:	7ff00000 	.word	0x7ff00000
    acdc:	0003899b 	.word	0x0003899b
    ace0:	00038992 	.word	0x00038992
    ace4:	00036959 	.word	0x00036959
    ace8:	00036958 	.word	0x00036958
    acec:	3ff80000 	.word	0x3ff80000
    acf0:	000332c8 	.word	0x000332c8
    acf4:	00038a13 	.word	0x00038a13
    acf8:	2401      	movs	r4, #1
    acfa:	2300      	movs	r3, #0
    acfc:	940e      	str	r4, [sp, #56]	; 0x38
    acfe:	9320      	str	r3, [sp, #128]	; 0x80
    ad00:	f04f 33ff 	mov.w	r3, #4294967295
    ad04:	2200      	movs	r2, #0
    ad06:	4699      	mov	r9, r3
    ad08:	9309      	str	r3, [sp, #36]	; 0x24
    ad0a:	2312      	movs	r3, #18
    ad0c:	e7ae      	b.n	ac6c <_dtoa_r+0x24c>
    ad0e:	2301      	movs	r3, #1
    ad10:	930e      	str	r3, [sp, #56]	; 0x38
    ad12:	e7f5      	b.n	ad00 <_dtoa_r+0x2e0>
    ad14:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ad16:	4699      	mov	r9, r3
    ad18:	9309      	str	r3, [sp, #36]	; 0x24
    ad1a:	e7b6      	b.n	ac8a <_dtoa_r+0x26a>
    ad1c:	3101      	adds	r1, #1
    ad1e:	0052      	lsls	r2, r2, #1
    ad20:	e7b7      	b.n	ac92 <_dtoa_r+0x272>
    ad22:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ad26:	f1b9 0f0e 	cmp.w	r9, #14
    ad2a:	9a08      	ldr	r2, [sp, #32]
    ad2c:	601a      	str	r2, [r3, #0]
    ad2e:	d86f      	bhi.n	ae10 <_dtoa_r+0x3f0>
    ad30:	2c00      	cmp	r4, #0
    ad32:	d06d      	beq.n	ae10 <_dtoa_r+0x3f0>
    ad34:	2f00      	cmp	r7, #0
    ad36:	dd36      	ble.n	ada6 <_dtoa_r+0x386>
    ad38:	f007 020f 	and.w	r2, r7, #15
    ad3c:	4ba0      	ldr	r3, [pc, #640]	; (afc0 <_dtoa_r+0x5a0>)
    ad3e:	05f8      	lsls	r0, r7, #23
    ad40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ad44:	e9d3 3400 	ldrd	r3, r4, [r3]
    ad48:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    ad4c:	ea4f 1427 	mov.w	r4, r7, asr #4
    ad50:	d517      	bpl.n	ad82 <_dtoa_r+0x362>
    ad52:	4b9c      	ldr	r3, [pc, #624]	; (afc4 <_dtoa_r+0x5a4>)
    ad54:	f004 040f 	and.w	r4, r4, #15
    ad58:	f04f 0803 	mov.w	r8, #3
    ad5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    ad60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ad64:	f7fd fcde 	bl	8724 <__aeabi_ddiv>
    ad68:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ad6c:	4d95      	ldr	r5, [pc, #596]	; (afc4 <_dtoa_r+0x5a4>)
    ad6e:	b95c      	cbnz	r4, ad88 <_dtoa_r+0x368>
    ad70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ad74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ad78:	f7fd fcd4 	bl	8724 <__aeabi_ddiv>
    ad7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ad80:	e02b      	b.n	adda <_dtoa_r+0x3ba>
    ad82:	f04f 0802 	mov.w	r8, #2
    ad86:	e7f1      	b.n	ad6c <_dtoa_r+0x34c>
    ad88:	07e1      	lsls	r1, r4, #31
    ad8a:	d509      	bpl.n	ada0 <_dtoa_r+0x380>
    ad8c:	f108 0801 	add.w	r8, r8, #1
    ad90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ad94:	e9d5 2300 	ldrd	r2, r3, [r5]
    ad98:	f7fd fb9a 	bl	84d0 <__aeabi_dmul>
    ad9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    ada0:	1064      	asrs	r4, r4, #1
    ada2:	3508      	adds	r5, #8
    ada4:	e7e3      	b.n	ad6e <_dtoa_r+0x34e>
    ada6:	f000 8107 	beq.w	afb8 <_dtoa_r+0x598>
    adaa:	427c      	negs	r4, r7
    adac:	4b84      	ldr	r3, [pc, #528]	; (afc0 <_dtoa_r+0x5a0>)
    adae:	4d85      	ldr	r5, [pc, #532]	; (afc4 <_dtoa_r+0x5a4>)
    adb0:	f04f 0802 	mov.w	r8, #2
    adb4:	f004 020f 	and.w	r2, r4, #15
    adb8:	1124      	asrs	r4, r4, #4
    adba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    adbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    adc6:	f7fd fb83 	bl	84d0 <__aeabi_dmul>
    adca:	2300      	movs	r3, #0
    adcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    add0:	2c00      	cmp	r4, #0
    add2:	f040 80e5 	bne.w	afa0 <_dtoa_r+0x580>
    add6:	2b00      	cmp	r3, #0
    add8:	d1d0      	bne.n	ad7c <_dtoa_r+0x35c>
    adda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    addc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ade0:	2b00      	cmp	r3, #0
    ade2:	f000 814c 	beq.w	b07e <_dtoa_r+0x65e>
    ade6:	2200      	movs	r2, #0
    ade8:	4b77      	ldr	r3, [pc, #476]	; (afc8 <_dtoa_r+0x5a8>)
    adea:	4620      	mov	r0, r4
    adec:	4629      	mov	r1, r5
    adee:	f7fe f93f 	bl	9070 <__aeabi_dcmplt>
    adf2:	2800      	cmp	r0, #0
    adf4:	f000 8143 	beq.w	b07e <_dtoa_r+0x65e>
    adf8:	f1b9 0f00 	cmp.w	r9, #0
    adfc:	f000 813f 	beq.w	b07e <_dtoa_r+0x65e>
    ae00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae02:	2b00      	cmp	r3, #0
    ae04:	f300 80e4 	bgt.w	afd0 <_dtoa_r+0x5b0>
    ae08:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ae0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ae10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ae12:	2b00      	cmp	r3, #0
    ae14:	db02      	blt.n	ae1c <_dtoa_r+0x3fc>
    ae16:	2f0e      	cmp	r7, #14
    ae18:	f340 8242 	ble.w	b2a0 <_dtoa_r+0x880>
    ae1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ae1e:	2a00      	cmp	r2, #0
    ae20:	f040 8267 	bne.w	b2f2 <_dtoa_r+0x8d2>
    ae24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ae26:	2500      	movs	r5, #0
    ae28:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ae2c:	f1b8 0f00 	cmp.w	r8, #0
    ae30:	d00d      	beq.n	ae4e <_dtoa_r+0x42e>
    ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae34:	2b00      	cmp	r3, #0
    ae36:	dd0a      	ble.n	ae4e <_dtoa_r+0x42e>
    ae38:	4543      	cmp	r3, r8
    ae3a:	9a06      	ldr	r2, [sp, #24]
    ae3c:	bfa8      	it	ge
    ae3e:	4643      	movge	r3, r8
    ae40:	1ad2      	subs	r2, r2, r3
    ae42:	eba8 0803 	sub.w	r8, r8, r3
    ae46:	9206      	str	r2, [sp, #24]
    ae48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae4a:	1ad3      	subs	r3, r2, r3
    ae4c:	930a      	str	r3, [sp, #40]	; 0x28
    ae4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae50:	b30b      	cbz	r3, ae96 <_dtoa_r+0x476>
    ae52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae54:	2b00      	cmp	r3, #0
    ae56:	f000 82a6 	beq.w	b3a6 <_dtoa_r+0x986>
    ae5a:	2c00      	cmp	r4, #0
    ae5c:	f000 82a1 	beq.w	b3a2 <_dtoa_r+0x982>
    ae60:	4629      	mov	r1, r5
    ae62:	4622      	mov	r2, r4
    ae64:	4658      	mov	r0, fp
    ae66:	f01d fe81 	bl	28b6c <__pow5mult>
    ae6a:	9a03      	ldr	r2, [sp, #12]
    ae6c:	4601      	mov	r1, r0
    ae6e:	4605      	mov	r5, r0
    ae70:	4658      	mov	r0, fp
    ae72:	f01d fdd1 	bl	28a18 <__multiply>
    ae76:	9903      	ldr	r1, [sp, #12]
    ae78:	4606      	mov	r6, r0
    ae7a:	4658      	mov	r0, fp
    ae7c:	f01d fd02 	bl	28884 <_Bfree>
    ae80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae82:	1b1b      	subs	r3, r3, r4
    ae84:	930b      	str	r3, [sp, #44]	; 0x2c
    ae86:	f000 8291 	beq.w	b3ac <_dtoa_r+0x98c>
    ae8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ae8c:	4631      	mov	r1, r6
    ae8e:	4658      	mov	r0, fp
    ae90:	f01d fe6c 	bl	28b6c <__pow5mult>
    ae94:	9003      	str	r0, [sp, #12]
    ae96:	2101      	movs	r1, #1
    ae98:	4658      	mov	r0, fp
    ae9a:	f01d fda7 	bl	289ec <__i2b>
    ae9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aea0:	4604      	mov	r4, r0
    aea2:	2b00      	cmp	r3, #0
    aea4:	f000 8284 	beq.w	b3b0 <_dtoa_r+0x990>
    aea8:	461a      	mov	r2, r3
    aeaa:	4601      	mov	r1, r0
    aeac:	4658      	mov	r0, fp
    aeae:	f01d fe5d 	bl	28b6c <__pow5mult>
    aeb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aeb4:	4604      	mov	r4, r0
    aeb6:	2b01      	cmp	r3, #1
    aeb8:	dc03      	bgt.n	aec2 <_dtoa_r+0x4a2>
    aeba:	9b04      	ldr	r3, [sp, #16]
    aebc:	2b00      	cmp	r3, #0
    aebe:	f000 827c 	beq.w	b3ba <_dtoa_r+0x99a>
    aec2:	2600      	movs	r6, #0
    aec4:	6923      	ldr	r3, [r4, #16]
    aec6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    aeca:	6918      	ldr	r0, [r3, #16]
    aecc:	f027 f917 	bl	320fe <__hi0bits>
    aed0:	f1c0 0020 	rsb	r0, r0, #32
    aed4:	960f      	str	r6, [sp, #60]	; 0x3c
    aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aed8:	4418      	add	r0, r3
    aeda:	f010 001f 	ands.w	r0, r0, #31
    aede:	f000 8291 	beq.w	b404 <_dtoa_r+0x9e4>
    aee2:	f1c0 0320 	rsb	r3, r0, #32
    aee6:	2b04      	cmp	r3, #4
    aee8:	f340 8281 	ble.w	b3ee <_dtoa_r+0x9ce>
    aeec:	f1c0 001c 	rsb	r0, r0, #28
    aef0:	9b06      	ldr	r3, [sp, #24]
    aef2:	4403      	add	r3, r0
    aef4:	4480      	add	r8, r0
    aef6:	9306      	str	r3, [sp, #24]
    aef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aefa:	4403      	add	r3, r0
    aefc:	930a      	str	r3, [sp, #40]	; 0x28
    aefe:	9b06      	ldr	r3, [sp, #24]
    af00:	2b00      	cmp	r3, #0
    af02:	dd05      	ble.n	af10 <_dtoa_r+0x4f0>
    af04:	461a      	mov	r2, r3
    af06:	9903      	ldr	r1, [sp, #12]
    af08:	4658      	mov	r0, fp
    af0a:	f01d fe89 	bl	28c20 <__lshift>
    af0e:	9003      	str	r0, [sp, #12]
    af10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af12:	2b00      	cmp	r3, #0
    af14:	dd05      	ble.n	af22 <_dtoa_r+0x502>
    af16:	4621      	mov	r1, r4
    af18:	461a      	mov	r2, r3
    af1a:	4658      	mov	r0, fp
    af1c:	f01d fe80 	bl	28c20 <__lshift>
    af20:	4604      	mov	r4, r0
    af22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af24:	2b00      	cmp	r3, #0
    af26:	f000 8276 	beq.w	b416 <_dtoa_r+0x9f6>
    af2a:	4621      	mov	r1, r4
    af2c:	9803      	ldr	r0, [sp, #12]
    af2e:	f027 f935 	bl	3219c <__mcmp>
    af32:	2800      	cmp	r0, #0
    af34:	f280 826f 	bge.w	b416 <_dtoa_r+0x9f6>
    af38:	2300      	movs	r3, #0
    af3a:	220a      	movs	r2, #10
    af3c:	9903      	ldr	r1, [sp, #12]
    af3e:	4658      	mov	r0, fp
    af40:	f01d fcc2 	bl	288c8 <__multadd>
    af44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af46:	1e7e      	subs	r6, r7, #1
    af48:	9003      	str	r0, [sp, #12]
    af4a:	2b00      	cmp	r3, #0
    af4c:	f000 825c 	beq.w	b408 <_dtoa_r+0x9e8>
    af50:	2300      	movs	r3, #0
    af52:	4629      	mov	r1, r5
    af54:	220a      	movs	r2, #10
    af56:	4658      	mov	r0, fp
    af58:	f01d fcb6 	bl	288c8 <__multadd>
    af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af5e:	4605      	mov	r5, r0
    af60:	2b00      	cmp	r3, #0
    af62:	dc03      	bgt.n	af6c <_dtoa_r+0x54c>
    af64:	9b20      	ldr	r3, [sp, #128]	; 0x80
    af66:	2b02      	cmp	r3, #2
    af68:	f300 825e 	bgt.w	b428 <_dtoa_r+0xa08>
    af6c:	f1b8 0f00 	cmp.w	r8, #0
    af70:	dd05      	ble.n	af7e <_dtoa_r+0x55e>
    af72:	4629      	mov	r1, r5
    af74:	4642      	mov	r2, r8
    af76:	4658      	mov	r0, fp
    af78:	f01d fe52 	bl	28c20 <__lshift>
    af7c:	4605      	mov	r5, r0
    af7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af80:	2b00      	cmp	r3, #0
    af82:	f000 82d0 	beq.w	b526 <_dtoa_r+0xb06>
    af86:	6869      	ldr	r1, [r5, #4]
    af88:	4658      	mov	r0, fp
    af8a:	f01d fc3b 	bl	28804 <_Balloc>
    af8e:	4607      	mov	r7, r0
    af90:	2800      	cmp	r0, #0
    af92:	f040 827f 	bne.w	b494 <_dtoa_r+0xa74>
    af96:	4b0d      	ldr	r3, [pc, #52]	; (afcc <_dtoa_r+0x5ac>)
    af98:	4602      	mov	r2, r0
    af9a:	f240 21ea 	movw	r1, #746	; 0x2ea
    af9e:	e553      	b.n	aa48 <_dtoa_r+0x28>
    afa0:	07e2      	lsls	r2, r4, #31
    afa2:	d506      	bpl.n	afb2 <_dtoa_r+0x592>
    afa4:	f108 0801 	add.w	r8, r8, #1
    afa8:	e9d5 2300 	ldrd	r2, r3, [r5]
    afac:	f7fd fa90 	bl	84d0 <__aeabi_dmul>
    afb0:	2301      	movs	r3, #1
    afb2:	1064      	asrs	r4, r4, #1
    afb4:	3508      	adds	r5, #8
    afb6:	e70b      	b.n	add0 <_dtoa_r+0x3b0>
    afb8:	f04f 0802 	mov.w	r8, #2
    afbc:	e70d      	b.n	adda <_dtoa_r+0x3ba>
    afbe:	bf00      	nop
    afc0:	000332c8 	.word	0x000332c8
    afc4:	000332a0 	.word	0x000332a0
    afc8:	3ff00000 	.word	0x3ff00000
    afcc:	00038a13 	.word	0x00038a13
    afd0:	4620      	mov	r0, r4
    afd2:	2200      	movs	r2, #0
    afd4:	4bac      	ldr	r3, [pc, #688]	; (b288 <_dtoa_r+0x868>)
    afd6:	4629      	mov	r1, r5
    afd8:	f7fd fa7a 	bl	84d0 <__aeabi_dmul>
    afdc:	1e7e      	subs	r6, r7, #1
    afde:	f108 0801 	add.w	r8, r8, #1
    afe2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    afe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    afe8:	4640      	mov	r0, r8
    afea:	f7fd fa07 	bl	83fc <__aeabi_i2d>
    afee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aff2:	f7fd fa6d 	bl	84d0 <__aeabi_dmul>
    aff6:	4ba5      	ldr	r3, [pc, #660]	; (b28c <_dtoa_r+0x86c>)
    aff8:	2200      	movs	r2, #0
    affa:	f7fd f8b3 	bl	8164 <__adddf3>
    affe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    b002:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b006:	9311      	str	r3, [sp, #68]	; 0x44
    b008:	2c00      	cmp	r4, #0
    b00a:	d13b      	bne.n	b084 <_dtoa_r+0x664>
    b00c:	2200      	movs	r2, #0
    b00e:	4ba0      	ldr	r3, [pc, #640]	; (b290 <_dtoa_r+0x870>)
    b010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b014:	f7fd f8a4 	bl	8160 <__aeabi_dsub>
    b018:	4602      	mov	r2, r0
    b01a:	460b      	mov	r3, r1
    b01c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b024:	f7fe f842 	bl	90ac <__aeabi_dcmpgt>
    b028:	2800      	cmp	r0, #0
    b02a:	f040 8157 	bne.w	b2dc <_dtoa_r+0x8bc>
    b02e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    b032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b03a:	f7fe f819 	bl	9070 <__aeabi_dcmplt>
    b03e:	2800      	cmp	r0, #0
    b040:	f43f aee2 	beq.w	ae08 <_dtoa_r+0x3e8>
    b044:	2400      	movs	r4, #0
    b046:	4625      	mov	r5, r4
    b048:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b04a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b04e:	43de      	mvns	r6, r3
    b050:	f04f 0800 	mov.w	r8, #0
    b054:	4621      	mov	r1, r4
    b056:	4658      	mov	r0, fp
    b058:	f01d fc14 	bl	28884 <_Bfree>
    b05c:	2d00      	cmp	r5, #0
    b05e:	f000 80a9 	beq.w	b1b4 <_dtoa_r+0x794>
    b062:	f1b8 0f00 	cmp.w	r8, #0
    b066:	d005      	beq.n	b074 <_dtoa_r+0x654>
    b068:	45a8      	cmp	r8, r5
    b06a:	d003      	beq.n	b074 <_dtoa_r+0x654>
    b06c:	4641      	mov	r1, r8
    b06e:	4658      	mov	r0, fp
    b070:	f01d fc08 	bl	28884 <_Bfree>
    b074:	4629      	mov	r1, r5
    b076:	4658      	mov	r0, fp
    b078:	f01d fc04 	bl	28884 <_Bfree>
    b07c:	e09a      	b.n	b1b4 <_dtoa_r+0x794>
    b07e:	463e      	mov	r6, r7
    b080:	464c      	mov	r4, r9
    b082:	e7b1      	b.n	afe8 <_dtoa_r+0x5c8>
    b084:	4b83      	ldr	r3, [pc, #524]	; (b294 <_dtoa_r+0x874>)
    b086:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    b08a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    b08e:	9b08      	ldr	r3, [sp, #32]
    b090:	441c      	add	r4, r3
    b092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b094:	2b00      	cmp	r3, #0
    b096:	d04a      	beq.n	b12e <_dtoa_r+0x70e>
    b098:	4602      	mov	r2, r0
    b09a:	460b      	mov	r3, r1
    b09c:	2000      	movs	r0, #0
    b09e:	497e      	ldr	r1, [pc, #504]	; (b298 <_dtoa_r+0x878>)
    b0a0:	f7fd fb40 	bl	8724 <__aeabi_ddiv>
    b0a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b0a8:	f7fd f85a 	bl	8160 <__aeabi_dsub>
    b0ac:	f8dd a020 	ldr.w	sl, [sp, #32]
    b0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0b8:	f7fd fc1c 	bl	88f4 <__aeabi_d2iz>
    b0bc:	4605      	mov	r5, r0
    b0be:	f7fd f99d 	bl	83fc <__aeabi_i2d>
    b0c2:	4602      	mov	r2, r0
    b0c4:	3530      	adds	r5, #48	; 0x30
    b0c6:	460b      	mov	r3, r1
    b0c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0cc:	f7fd f848 	bl	8160 <__aeabi_dsub>
    b0d0:	f80a 5b01 	strb.w	r5, [sl], #1
    b0d4:	4602      	mov	r2, r0
    b0d6:	460b      	mov	r3, r1
    b0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b0dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b0e0:	f7fd ffe4 	bl	90ac <__aeabi_dcmpgt>
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d165      	bne.n	b1b4 <_dtoa_r+0x794>
    b0e8:	2000      	movs	r0, #0
    b0ea:	496c      	ldr	r1, [pc, #432]	; (b29c <_dtoa_r+0x87c>)
    b0ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b0f0:	f7fd f836 	bl	8160 <__aeabi_dsub>
    b0f4:	4602      	mov	r2, r0
    b0f6:	460b      	mov	r3, r1
    b0f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b0fc:	f7fd ffd6 	bl	90ac <__aeabi_dcmpgt>
    b100:	2800      	cmp	r0, #0
    b102:	f040 810d 	bne.w	b320 <_dtoa_r+0x900>
    b106:	45a2      	cmp	sl, r4
    b108:	f000 80ea 	beq.w	b2e0 <_dtoa_r+0x8c0>
    b10c:	2200      	movs	r2, #0
    b10e:	4b5e      	ldr	r3, [pc, #376]	; (b288 <_dtoa_r+0x868>)
    b110:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b114:	f7fd f9dc 	bl	84d0 <__aeabi_dmul>
    b118:	2200      	movs	r2, #0
    b11a:	4b5b      	ldr	r3, [pc, #364]	; (b288 <_dtoa_r+0x868>)
    b11c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b124:	f7fd f9d4 	bl	84d0 <__aeabi_dmul>
    b128:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b12c:	e7c2      	b.n	b0b4 <_dtoa_r+0x694>
    b12e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b132:	f7fd f9cd 	bl	84d0 <__aeabi_dmul>
    b136:	46a0      	mov	r8, r4
    b138:	f8dd a020 	ldr.w	sl, [sp, #32]
    b13c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b140:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b144:	f7fd fbd6 	bl	88f4 <__aeabi_d2iz>
    b148:	4605      	mov	r5, r0
    b14a:	f7fd f957 	bl	83fc <__aeabi_i2d>
    b14e:	4602      	mov	r2, r0
    b150:	3530      	adds	r5, #48	; 0x30
    b152:	460b      	mov	r3, r1
    b154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b158:	f7fd f802 	bl	8160 <__aeabi_dsub>
    b15c:	f80a 5b01 	strb.w	r5, [sl], #1
    b160:	4602      	mov	r2, r0
    b162:	460b      	mov	r3, r1
    b164:	45a2      	cmp	sl, r4
    b166:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b16a:	f04f 0200 	mov.w	r2, #0
    b16e:	d123      	bne.n	b1b8 <_dtoa_r+0x798>
    b170:	4b49      	ldr	r3, [pc, #292]	; (b298 <_dtoa_r+0x878>)
    b172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b176:	f7fc fff5 	bl	8164 <__adddf3>
    b17a:	4602      	mov	r2, r0
    b17c:	460b      	mov	r3, r1
    b17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b182:	f7fd ff93 	bl	90ac <__aeabi_dcmpgt>
    b186:	2800      	cmp	r0, #0
    b188:	f040 80ca 	bne.w	b320 <_dtoa_r+0x900>
    b18c:	2000      	movs	r0, #0
    b18e:	4942      	ldr	r1, [pc, #264]	; (b298 <_dtoa_r+0x878>)
    b190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b194:	f7fc ffe4 	bl	8160 <__aeabi_dsub>
    b198:	4602      	mov	r2, r0
    b19a:	460b      	mov	r3, r1
    b19c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b1a0:	f7fd ff66 	bl	9070 <__aeabi_dcmplt>
    b1a4:	b170      	cbz	r0, b1c4 <_dtoa_r+0x7a4>
    b1a6:	46c2      	mov	sl, r8
    b1a8:	f108 38ff 	add.w	r8, r8, #4294967295
    b1ac:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b1b0:	2b30      	cmp	r3, #48	; 0x30
    b1b2:	d0f8      	beq.n	b1a6 <_dtoa_r+0x786>
    b1b4:	4637      	mov	r7, r6
    b1b6:	e055      	b.n	b264 <_dtoa_r+0x844>
    b1b8:	4b33      	ldr	r3, [pc, #204]	; (b288 <_dtoa_r+0x868>)
    b1ba:	f7fd f989 	bl	84d0 <__aeabi_dmul>
    b1be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b1c2:	e7bd      	b.n	b140 <_dtoa_r+0x720>
    b1c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b1c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b1cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	f6ff ae28 	blt.w	ae24 <_dtoa_r+0x404>
    b1d4:	2f0e      	cmp	r7, #14
    b1d6:	f73f ae25 	bgt.w	ae24 <_dtoa_r+0x404>
    b1da:	4b2e      	ldr	r3, [pc, #184]	; (b294 <_dtoa_r+0x874>)
    b1dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b1e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    b1e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b1e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	da02      	bge.n	b1f4 <_dtoa_r+0x7d4>
    b1ee:	f1b9 0f00 	cmp.w	r9, #0
    b1f2:	d064      	beq.n	b2be <_dtoa_r+0x89e>
    b1f4:	f8dd a020 	ldr.w	sl, [sp, #32]
    b1f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    b1fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b200:	4620      	mov	r0, r4
    b202:	4629      	mov	r1, r5
    b204:	f7fd fa8e 	bl	8724 <__aeabi_ddiv>
    b208:	f7fd fb74 	bl	88f4 <__aeabi_d2iz>
    b20c:	4606      	mov	r6, r0
    b20e:	f7fd f8f5 	bl	83fc <__aeabi_i2d>
    b212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b216:	f7fd f95b 	bl	84d0 <__aeabi_dmul>
    b21a:	4602      	mov	r2, r0
    b21c:	4620      	mov	r0, r4
    b21e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    b222:	460b      	mov	r3, r1
    b224:	4629      	mov	r1, r5
    b226:	f7fc ff9b 	bl	8160 <__aeabi_dsub>
    b22a:	f80a 4b01 	strb.w	r4, [sl], #1
    b22e:	9c08      	ldr	r4, [sp, #32]
    b230:	4602      	mov	r2, r0
    b232:	460b      	mov	r3, r1
    b234:	ebaa 0404 	sub.w	r4, sl, r4
    b238:	45a1      	cmp	r9, r4
    b23a:	f040 8082 	bne.w	b342 <_dtoa_r+0x922>
    b23e:	f7fc ff91 	bl	8164 <__adddf3>
    b242:	4604      	mov	r4, r0
    b244:	460d      	mov	r5, r1
    b246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b24a:	f7fd ff2f 	bl	90ac <__aeabi_dcmpgt>
    b24e:	2800      	cmp	r0, #0
    b250:	d165      	bne.n	b31e <_dtoa_r+0x8fe>
    b252:	4620      	mov	r0, r4
    b254:	4629      	mov	r1, r5
    b256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b25a:	f7fd feff 	bl	905c <__aeabi_dcmpeq>
    b25e:	b108      	cbz	r0, b264 <_dtoa_r+0x844>
    b260:	07f3      	lsls	r3, r6, #31
    b262:	d45c      	bmi.n	b31e <_dtoa_r+0x8fe>
    b264:	9903      	ldr	r1, [sp, #12]
    b266:	4658      	mov	r0, fp
    b268:	f01d fb0c 	bl	28884 <_Bfree>
    b26c:	2300      	movs	r3, #0
    b26e:	3701      	adds	r7, #1
    b270:	f88a 3000 	strb.w	r3, [sl]
    b274:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b276:	601f      	str	r7, [r3, #0]
    b278:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b27a:	2b00      	cmp	r3, #0
    b27c:	f43f ac1c 	beq.w	aab8 <_dtoa_r+0x98>
    b280:	f8c3 a000 	str.w	sl, [r3]
    b284:	e418      	b.n	aab8 <_dtoa_r+0x98>
    b286:	bf00      	nop
    b288:	40240000 	.word	0x40240000
    b28c:	401c0000 	.word	0x401c0000
    b290:	40140000 	.word	0x40140000
    b294:	000332c8 	.word	0x000332c8
    b298:	3fe00000 	.word	0x3fe00000
    b29c:	3ff00000 	.word	0x3ff00000
    b2a0:	4ba2      	ldr	r3, [pc, #648]	; (b52c <_dtoa_r+0xb0c>)
    b2a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b2a6:	e9d3 3400 	ldrd	r3, r4, [r3]
    b2aa:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	da9f      	bge.n	b1f4 <_dtoa_r+0x7d4>
    b2b4:	f1b9 0f00 	cmp.w	r9, #0
    b2b8:	dc9c      	bgt.n	b1f4 <_dtoa_r+0x7d4>
    b2ba:	f47f aec3 	bne.w	b044 <_dtoa_r+0x624>
    b2be:	2200      	movs	r2, #0
    b2c0:	4b9b      	ldr	r3, [pc, #620]	; (b530 <_dtoa_r+0xb10>)
    b2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b2c6:	f7fd f903 	bl	84d0 <__aeabi_dmul>
    b2ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b2ce:	f7fd fee3 	bl	9098 <__aeabi_dcmpge>
    b2d2:	4604      	mov	r4, r0
    b2d4:	2800      	cmp	r0, #0
    b2d6:	f47f aeb5 	bne.w	b044 <_dtoa_r+0x624>
    b2da:	463e      	mov	r6, r7
    b2dc:	4625      	mov	r5, r4
    b2de:	e0b4      	b.n	b44a <_dtoa_r+0xa2a>
    b2e0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b2e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	db01      	blt.n	b2f2 <_dtoa_r+0x8d2>
    b2ee:	2f0e      	cmp	r7, #14
    b2f0:	ddd6      	ble.n	b2a0 <_dtoa_r+0x880>
    b2f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b2f4:	2a01      	cmp	r2, #1
    b2f6:	dc36      	bgt.n	b366 <_dtoa_r+0x946>
    b2f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b2fa:	b382      	cbz	r2, b35e <_dtoa_r+0x93e>
    b2fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b300:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b302:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b306:	9a06      	ldr	r2, [sp, #24]
    b308:	2101      	movs	r1, #1
    b30a:	4658      	mov	r0, fp
    b30c:	441a      	add	r2, r3
    b30e:	9206      	str	r2, [sp, #24]
    b310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b312:	441a      	add	r2, r3
    b314:	920a      	str	r2, [sp, #40]	; 0x28
    b316:	f01d fb69 	bl	289ec <__i2b>
    b31a:	4605      	mov	r5, r0
    b31c:	e586      	b.n	ae2c <_dtoa_r+0x40c>
    b31e:	463e      	mov	r6, r7
    b320:	4653      	mov	r3, sl
    b322:	469a      	mov	sl, r3
    b324:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    b328:	2a39      	cmp	r2, #57	; 0x39
    b32a:	d106      	bne.n	b33a <_dtoa_r+0x91a>
    b32c:	9a08      	ldr	r2, [sp, #32]
    b32e:	429a      	cmp	r2, r3
    b330:	d1f7      	bne.n	b322 <_dtoa_r+0x902>
    b332:	2230      	movs	r2, #48	; 0x30
    b334:	9908      	ldr	r1, [sp, #32]
    b336:	3601      	adds	r6, #1
    b338:	700a      	strb	r2, [r1, #0]
    b33a:	781a      	ldrb	r2, [r3, #0]
    b33c:	3201      	adds	r2, #1
    b33e:	701a      	strb	r2, [r3, #0]
    b340:	e738      	b.n	b1b4 <_dtoa_r+0x794>
    b342:	2200      	movs	r2, #0
    b344:	4b7b      	ldr	r3, [pc, #492]	; (b534 <_dtoa_r+0xb14>)
    b346:	f7fd f8c3 	bl	84d0 <__aeabi_dmul>
    b34a:	2200      	movs	r2, #0
    b34c:	2300      	movs	r3, #0
    b34e:	4604      	mov	r4, r0
    b350:	460d      	mov	r5, r1
    b352:	f7fd fe83 	bl	905c <__aeabi_dcmpeq>
    b356:	2800      	cmp	r0, #0
    b358:	f43f af50 	beq.w	b1fc <_dtoa_r+0x7dc>
    b35c:	e782      	b.n	b264 <_dtoa_r+0x844>
    b35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b364:	e7cc      	b.n	b300 <_dtoa_r+0x8e0>
    b366:	f109 34ff 	add.w	r4, r9, #4294967295
    b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b36c:	42a3      	cmp	r3, r4
    b36e:	db08      	blt.n	b382 <_dtoa_r+0x962>
    b370:	f1b9 0f00 	cmp.w	r9, #0
    b374:	eba3 0404 	sub.w	r4, r3, r4
    b378:	db0e      	blt.n	b398 <_dtoa_r+0x978>
    b37a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b37e:	464b      	mov	r3, r9
    b380:	e7c1      	b.n	b306 <_dtoa_r+0x8e6>
    b382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b386:	1ae3      	subs	r3, r4, r3
    b388:	940b      	str	r4, [sp, #44]	; 0x2c
    b38a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b38e:	2400      	movs	r4, #0
    b390:	441a      	add	r2, r3
    b392:	464b      	mov	r3, r9
    b394:	920f      	str	r2, [sp, #60]	; 0x3c
    b396:	e7b6      	b.n	b306 <_dtoa_r+0x8e6>
    b398:	9b06      	ldr	r3, [sp, #24]
    b39a:	eba3 0809 	sub.w	r8, r3, r9
    b39e:	2300      	movs	r3, #0
    b3a0:	e7b1      	b.n	b306 <_dtoa_r+0x8e6>
    b3a2:	9e03      	ldr	r6, [sp, #12]
    b3a4:	e571      	b.n	ae8a <_dtoa_r+0x46a>
    b3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b3a8:	9903      	ldr	r1, [sp, #12]
    b3aa:	e570      	b.n	ae8e <_dtoa_r+0x46e>
    b3ac:	9603      	str	r6, [sp, #12]
    b3ae:	e572      	b.n	ae96 <_dtoa_r+0x476>
    b3b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b3b2:	2b01      	cmp	r3, #1
    b3b4:	dc17      	bgt.n	b3e6 <_dtoa_r+0x9c6>
    b3b6:	9b04      	ldr	r3, [sp, #16]
    b3b8:	b9ab      	cbnz	r3, b3e6 <_dtoa_r+0x9c6>
    b3ba:	9b05      	ldr	r3, [sp, #20]
    b3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b3c0:	b99b      	cbnz	r3, b3ea <_dtoa_r+0x9ca>
    b3c2:	9b05      	ldr	r3, [sp, #20]
    b3c4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    b3c8:	0d36      	lsrs	r6, r6, #20
    b3ca:	0536      	lsls	r6, r6, #20
    b3cc:	b136      	cbz	r6, b3dc <_dtoa_r+0x9bc>
    b3ce:	9b06      	ldr	r3, [sp, #24]
    b3d0:	2601      	movs	r6, #1
    b3d2:	3301      	adds	r3, #1
    b3d4:	9306      	str	r3, [sp, #24]
    b3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b3d8:	3301      	adds	r3, #1
    b3da:	930a      	str	r3, [sp, #40]	; 0x28
    b3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b3de:	2b00      	cmp	r3, #0
    b3e0:	f47f ad70 	bne.w	aec4 <_dtoa_r+0x4a4>
    b3e4:	960f      	str	r6, [sp, #60]	; 0x3c
    b3e6:	2001      	movs	r0, #1
    b3e8:	e575      	b.n	aed6 <_dtoa_r+0x4b6>
    b3ea:	2600      	movs	r6, #0
    b3ec:	e7f6      	b.n	b3dc <_dtoa_r+0x9bc>
    b3ee:	f43f ad86 	beq.w	aefe <_dtoa_r+0x4de>
    b3f2:	331c      	adds	r3, #28
    b3f4:	9a06      	ldr	r2, [sp, #24]
    b3f6:	441a      	add	r2, r3
    b3f8:	4498      	add	r8, r3
    b3fa:	9206      	str	r2, [sp, #24]
    b3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b3fe:	441a      	add	r2, r3
    b400:	920a      	str	r2, [sp, #40]	; 0x28
    b402:	e57c      	b.n	aefe <_dtoa_r+0x4de>
    b404:	4603      	mov	r3, r0
    b406:	e7f4      	b.n	b3f2 <_dtoa_r+0x9d2>
    b408:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b40a:	2b00      	cmp	r3, #0
    b40c:	dc2b      	bgt.n	b466 <_dtoa_r+0xa46>
    b40e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b410:	2b02      	cmp	r3, #2
    b412:	dc09      	bgt.n	b428 <_dtoa_r+0xa08>
    b414:	e027      	b.n	b466 <_dtoa_r+0xa46>
    b416:	f1b9 0f00 	cmp.w	r9, #0
    b41a:	dc1d      	bgt.n	b458 <_dtoa_r+0xa38>
    b41c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b41e:	2b02      	cmp	r3, #2
    b420:	dd1a      	ble.n	b458 <_dtoa_r+0xa38>
    b422:	463e      	mov	r6, r7
    b424:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b42a:	2b00      	cmp	r3, #0
    b42c:	f47f ae0c 	bne.w	b048 <_dtoa_r+0x628>
    b430:	4621      	mov	r1, r4
    b432:	2205      	movs	r2, #5
    b434:	4658      	mov	r0, fp
    b436:	f01d fa47 	bl	288c8 <__multadd>
    b43a:	4601      	mov	r1, r0
    b43c:	4604      	mov	r4, r0
    b43e:	9803      	ldr	r0, [sp, #12]
    b440:	f026 feac 	bl	3219c <__mcmp>
    b444:	2800      	cmp	r0, #0
    b446:	f77f adff 	ble.w	b048 <_dtoa_r+0x628>
    b44a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b44e:	2331      	movs	r3, #49	; 0x31
    b450:	3601      	adds	r6, #1
    b452:	f80a 3b01 	strb.w	r3, [sl], #1
    b456:	e5fb      	b.n	b050 <_dtoa_r+0x630>
    b458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b45a:	463e      	mov	r6, r7
    b45c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b460:	2b00      	cmp	r3, #0
    b462:	f47f ad83 	bne.w	af6c <_dtoa_r+0x54c>
    b466:	9f08      	ldr	r7, [sp, #32]
    b468:	4621      	mov	r1, r4
    b46a:	9803      	ldr	r0, [sp, #12]
    b46c:	f026 fc37 	bl	31cde <quorem>
    b470:	9b08      	ldr	r3, [sp, #32]
    b472:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b476:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b478:	f807 9b01 	strb.w	r9, [r7], #1
    b47c:	1afb      	subs	r3, r7, r3
    b47e:	429a      	cmp	r2, r3
    b480:	f340 80cb 	ble.w	b61a <_dtoa_r+0xbfa>
    b484:	2300      	movs	r3, #0
    b486:	220a      	movs	r2, #10
    b488:	9903      	ldr	r1, [sp, #12]
    b48a:	4658      	mov	r0, fp
    b48c:	f01d fa1c 	bl	288c8 <__multadd>
    b490:	9003      	str	r0, [sp, #12]
    b492:	e7e9      	b.n	b468 <_dtoa_r+0xa48>
    b494:	692a      	ldr	r2, [r5, #16]
    b496:	f105 010c 	add.w	r1, r5, #12
    b49a:	300c      	adds	r0, #12
    b49c:	3202      	adds	r2, #2
    b49e:	0092      	lsls	r2, r2, #2
    b4a0:	f026 f9c5 	bl	3182e <memcpy>
    b4a4:	2201      	movs	r2, #1
    b4a6:	4639      	mov	r1, r7
    b4a8:	4658      	mov	r0, fp
    b4aa:	f01d fbb9 	bl	28c20 <__lshift>
    b4ae:	9b08      	ldr	r3, [sp, #32]
    b4b0:	46a8      	mov	r8, r5
    b4b2:	4605      	mov	r5, r0
    b4b4:	f103 0a01 	add.w	sl, r3, #1
    b4b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b4bc:	4413      	add	r3, r2
    b4be:	930a      	str	r3, [sp, #40]	; 0x28
    b4c0:	9b04      	ldr	r3, [sp, #16]
    b4c2:	f003 0301 	and.w	r3, r3, #1
    b4c6:	930b      	str	r3, [sp, #44]	; 0x2c
    b4c8:	f10a 33ff 	add.w	r3, sl, #4294967295
    b4cc:	4621      	mov	r1, r4
    b4ce:	9803      	ldr	r0, [sp, #12]
    b4d0:	9306      	str	r3, [sp, #24]
    b4d2:	f026 fc04 	bl	31cde <quorem>
    b4d6:	4641      	mov	r1, r8
    b4d8:	9009      	str	r0, [sp, #36]	; 0x24
    b4da:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b4de:	9803      	ldr	r0, [sp, #12]
    b4e0:	f026 fe5c 	bl	3219c <__mcmp>
    b4e4:	462a      	mov	r2, r5
    b4e6:	4621      	mov	r1, r4
    b4e8:	4607      	mov	r7, r0
    b4ea:	4658      	mov	r0, fp
    b4ec:	f01d fc04 	bl	28cf8 <__mdiff>
    b4f0:	68c2      	ldr	r2, [r0, #12]
    b4f2:	4601      	mov	r1, r0
    b4f4:	b302      	cbz	r2, b538 <_dtoa_r+0xb18>
    b4f6:	4658      	mov	r0, fp
    b4f8:	f01d f9c4 	bl	28884 <_Bfree>
    b4fc:	2f00      	cmp	r7, #0
    b4fe:	da3a      	bge.n	b576 <_dtoa_r+0xb56>
    b500:	2201      	movs	r2, #1
    b502:	9903      	ldr	r1, [sp, #12]
    b504:	4658      	mov	r0, fp
    b506:	f01d fb8b 	bl	28c20 <__lshift>
    b50a:	4621      	mov	r1, r4
    b50c:	9003      	str	r0, [sp, #12]
    b50e:	f026 fe45 	bl	3219c <__mcmp>
    b512:	2800      	cmp	r0, #0
    b514:	dc03      	bgt.n	b51e <_dtoa_r+0xafe>
    b516:	d129      	bne.n	b56c <_dtoa_r+0xb4c>
    b518:	f019 0f01 	tst.w	r9, #1
    b51c:	d026      	beq.n	b56c <_dtoa_r+0xb4c>
    b51e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b522:	d11d      	bne.n	b560 <_dtoa_r+0xb40>
    b524:	e032      	b.n	b58c <_dtoa_r+0xb6c>
    b526:	4628      	mov	r0, r5
    b528:	e7c1      	b.n	b4ae <_dtoa_r+0xa8e>
    b52a:	bf00      	nop
    b52c:	000332c8 	.word	0x000332c8
    b530:	40140000 	.word	0x40140000
    b534:	40240000 	.word	0x40240000
    b538:	900e      	str	r0, [sp, #56]	; 0x38
    b53a:	9803      	ldr	r0, [sp, #12]
    b53c:	f026 fe2e 	bl	3219c <__mcmp>
    b540:	990e      	ldr	r1, [sp, #56]	; 0x38
    b542:	900c      	str	r0, [sp, #48]	; 0x30
    b544:	4658      	mov	r0, fp
    b546:	f01d f99d 	bl	28884 <_Bfree>
    b54a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b54c:	bb5a      	cbnz	r2, b5a6 <_dtoa_r+0xb86>
    b54e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b550:	b953      	cbnz	r3, b568 <_dtoa_r+0xb48>
    b552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b554:	b943      	cbnz	r3, b568 <_dtoa_r+0xb48>
    b556:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b55a:	d017      	beq.n	b58c <_dtoa_r+0xb6c>
    b55c:	2f00      	cmp	r7, #0
    b55e:	dd05      	ble.n	b56c <_dtoa_r+0xb4c>
    b560:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b562:	f103 0931 	add.w	r9, r3, #49	; 0x31
    b566:	e001      	b.n	b56c <_dtoa_r+0xb4c>
    b568:	2f00      	cmp	r7, #0
    b56a:	da2a      	bge.n	b5c2 <_dtoa_r+0xba2>
    b56c:	f8dd a018 	ldr.w	sl, [sp, #24]
    b570:	f80a 9b01 	strb.w	r9, [sl], #1
    b574:	e56e      	b.n	b054 <_dtoa_r+0x634>
    b576:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b578:	433b      	orrs	r3, r7
    b57a:	d104      	bne.n	b586 <_dtoa_r+0xb66>
    b57c:	9b04      	ldr	r3, [sp, #16]
    b57e:	f003 0301 	and.w	r3, r3, #1
    b582:	2b00      	cmp	r3, #0
    b584:	d0bc      	beq.n	b500 <_dtoa_r+0xae0>
    b586:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b58a:	d136      	bne.n	b5fa <_dtoa_r+0xbda>
    b58c:	9f06      	ldr	r7, [sp, #24]
    b58e:	2339      	movs	r3, #57	; 0x39
    b590:	f807 3b01 	strb.w	r3, [r7], #1
    b594:	46ba      	mov	sl, r7
    b596:	3f01      	subs	r7, #1
    b598:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b59c:	2b39      	cmp	r3, #57	; 0x39
    b59e:	d05a      	beq.n	b656 <_dtoa_r+0xc36>
    b5a0:	3301      	adds	r3, #1
    b5a2:	703b      	strb	r3, [r7, #0]
    b5a4:	e556      	b.n	b054 <_dtoa_r+0x634>
    b5a6:	2f00      	cmp	r7, #0
    b5a8:	db06      	blt.n	b5b8 <_dtoa_r+0xb98>
    b5aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b5ac:	433b      	orrs	r3, r7
    b5ae:	d106      	bne.n	b5be <_dtoa_r+0xb9e>
    b5b0:	9b04      	ldr	r3, [sp, #16]
    b5b2:	f003 0301 	and.w	r3, r3, #1
    b5b6:	b913      	cbnz	r3, b5be <_dtoa_r+0xb9e>
    b5b8:	2a00      	cmp	r2, #0
    b5ba:	dca1      	bgt.n	b500 <_dtoa_r+0xae0>
    b5bc:	e7d6      	b.n	b56c <_dtoa_r+0xb4c>
    b5be:	2a00      	cmp	r2, #0
    b5c0:	dce1      	bgt.n	b586 <_dtoa_r+0xb66>
    b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5c4:	4657      	mov	r7, sl
    b5c6:	f80a 9c01 	strb.w	r9, [sl, #-1]
    b5ca:	4553      	cmp	r3, sl
    b5cc:	d02e      	beq.n	b62c <_dtoa_r+0xc0c>
    b5ce:	2300      	movs	r3, #0
    b5d0:	220a      	movs	r2, #10
    b5d2:	9903      	ldr	r1, [sp, #12]
    b5d4:	4658      	mov	r0, fp
    b5d6:	f01d f977 	bl	288c8 <__multadd>
    b5da:	45a8      	cmp	r8, r5
    b5dc:	9003      	str	r0, [sp, #12]
    b5de:	f04f 0300 	mov.w	r3, #0
    b5e2:	f04f 020a 	mov.w	r2, #10
    b5e6:	4641      	mov	r1, r8
    b5e8:	4658      	mov	r0, fp
    b5ea:	d10b      	bne.n	b604 <_dtoa_r+0xbe4>
    b5ec:	f01d f96c 	bl	288c8 <__multadd>
    b5f0:	4680      	mov	r8, r0
    b5f2:	4605      	mov	r5, r0
    b5f4:	f10a 0a01 	add.w	sl, sl, #1
    b5f8:	e766      	b.n	b4c8 <_dtoa_r+0xaa8>
    b5fa:	f8dd a018 	ldr.w	sl, [sp, #24]
    b5fe:	f109 0901 	add.w	r9, r9, #1
    b602:	e7b5      	b.n	b570 <_dtoa_r+0xb50>
    b604:	f01d f960 	bl	288c8 <__multadd>
    b608:	4629      	mov	r1, r5
    b60a:	4680      	mov	r8, r0
    b60c:	2300      	movs	r3, #0
    b60e:	220a      	movs	r2, #10
    b610:	4658      	mov	r0, fp
    b612:	f01d f959 	bl	288c8 <__multadd>
    b616:	4605      	mov	r5, r0
    b618:	e7ec      	b.n	b5f4 <_dtoa_r+0xbd4>
    b61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b61c:	f04f 0800 	mov.w	r8, #0
    b620:	2b00      	cmp	r3, #0
    b622:	bfcc      	ite	gt
    b624:	461f      	movgt	r7, r3
    b626:	2701      	movle	r7, #1
    b628:	9b08      	ldr	r3, [sp, #32]
    b62a:	441f      	add	r7, r3
    b62c:	2201      	movs	r2, #1
    b62e:	9903      	ldr	r1, [sp, #12]
    b630:	4658      	mov	r0, fp
    b632:	f01d faf5 	bl	28c20 <__lshift>
    b636:	4621      	mov	r1, r4
    b638:	9003      	str	r0, [sp, #12]
    b63a:	f026 fdaf 	bl	3219c <__mcmp>
    b63e:	2800      	cmp	r0, #0
    b640:	dca8      	bgt.n	b594 <_dtoa_r+0xb74>
    b642:	d102      	bne.n	b64a <_dtoa_r+0xc2a>
    b644:	f019 0f01 	tst.w	r9, #1
    b648:	d1a4      	bne.n	b594 <_dtoa_r+0xb74>
    b64a:	46ba      	mov	sl, r7
    b64c:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    b650:	2b30      	cmp	r3, #48	; 0x30
    b652:	d0fa      	beq.n	b64a <_dtoa_r+0xc2a>
    b654:	e4fe      	b.n	b054 <_dtoa_r+0x634>
    b656:	9b08      	ldr	r3, [sp, #32]
    b658:	42bb      	cmp	r3, r7
    b65a:	d19b      	bne.n	b594 <_dtoa_r+0xb74>
    b65c:	2331      	movs	r3, #49	; 0x31
    b65e:	9a08      	ldr	r2, [sp, #32]
    b660:	3601      	adds	r6, #1
    b662:	7013      	strb	r3, [r2, #0]
    b664:	e4f6      	b.n	b054 <_dtoa_r+0x634>
    b666:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b668:	2b00      	cmp	r3, #0
    b66a:	f47f aa20 	bne.w	aaae <_dtoa_r+0x8e>
    b66e:	4b01      	ldr	r3, [pc, #4]	; (b674 <_dtoa_r+0xc54>)
    b670:	f7ff ba3f 	b.w	aaf2 <_dtoa_r+0xd2>
    b674:	00038992 	.word	0x00038992

0000b678 <digital_0_call_back>:

// DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[0] <= DIGITAL_0_LIMIT)
    b678:	4a03      	ldr	r2, [pc, #12]	; (b688 <digital_0_call_back+0x10>)
    b67a:	8813      	ldrh	r3, [r2, #0]
		digital_value[0]++;
    b67c:	8813      	ldrh	r3, [r2, #0]
    b67e:	3301      	adds	r3, #1
    b680:	b21b      	sxth	r3, r3
    b682:	8013      	strh	r3, [r2, #0]
}
    b684:	4770      	bx	lr
    b686:	bf00      	nop
    b688:	20030ee6 	.word	0x20030ee6

0000b68c <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[1] <= DIGITAL_0_LIMIT)
    b68c:	4a03      	ldr	r2, [pc, #12]	; (b69c <digital_1_call_back+0x10>)
    b68e:	8853      	ldrh	r3, [r2, #2]
		digital_value[1]++;
    b690:	8853      	ldrh	r3, [r2, #2]
    b692:	3301      	adds	r3, #1
    b694:	b21b      	sxth	r3, r3
    b696:	8053      	strh	r3, [r2, #2]
}
    b698:	4770      	bx	lr
    b69a:	bf00      	nop
    b69c:	20030ee6 	.word	0x20030ee6

0000b6a0 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[2] <= DIGITAL_0_LIMIT)
    b6a0:	4a03      	ldr	r2, [pc, #12]	; (b6b0 <digital_2_call_back+0x10>)
    b6a2:	8893      	ldrh	r3, [r2, #4]
		digital_value[2]++;
    b6a4:	8893      	ldrh	r3, [r2, #4]
    b6a6:	3301      	adds	r3, #1
    b6a8:	b21b      	sxth	r3, r3
    b6aa:	8093      	strh	r3, [r2, #4]
}
    b6ac:	4770      	bx	lr
    b6ae:	bf00      	nop
    b6b0:	20030ee6 	.word	0x20030ee6

0000b6b4 <button_pressed_3>:
{
    b6b4:	b508      	push	{r3, lr}
	k_sem_give(&button_3);
    b6b6:	4805      	ldr	r0, [pc, #20]	; (b6cc <button_pressed_3+0x18>)
    b6b8:	f01e fb7c 	bl	29db4 <k_sem_give>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    b6bc:	f024 fc29 	bl	2ff12 <sys_clock_cycle_get_32>
}
    b6c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b6c4:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b6c6:	4802      	ldr	r0, [pc, #8]	; (b6d0 <button_pressed_3+0x1c>)
    b6c8:	f01e bdce 	b.w	2a268 <printk>
    b6cc:	20008cb8 	.word	0x20008cb8
    b6d0:	00034396 	.word	0x00034396

0000b6d4 <button_pressed_4>:
{
    b6d4:	b508      	push	{r3, lr}
	k_sem_give(&button_test);
    b6d6:	4805      	ldr	r0, [pc, #20]	; (b6ec <button_pressed_4+0x18>)
    b6d8:	f01e fb6c 	bl	29db4 <k_sem_give>
    b6dc:	f024 fc19 	bl	2ff12 <sys_clock_cycle_get_32>
}
    b6e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b6e4:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b6e6:	4802      	ldr	r0, [pc, #8]	; (b6f0 <button_pressed_4+0x1c>)
    b6e8:	f01e bdbe 	b.w	2a268 <printk>
    b6ec:	20008cd0 	.word	0x20008cd0
    b6f0:	000343ae 	.word	0x000343ae

0000b6f4 <lorwan_datarate_changed>:
{
    b6f4:	b513      	push	{r0, r1, r4, lr}
    b6f6:	4604      	mov	r4, r0
	lorawan_get_payload_sizes(&unused, &max_size);
    b6f8:	f10d 0107 	add.w	r1, sp, #7
    b6fc:	f10d 0006 	add.w	r0, sp, #6
    b700:	f020 f988 	bl	2ba14 <lorawan_get_payload_sizes>
	color(10);
    b704:	200a      	movs	r0, #10
    b706:	f002 fa2b 	bl	db60 <color>
	printk("New Datarate: DR_%d, Max Payload %d \n", dr, max_size);
    b70a:	4621      	mov	r1, r4
    b70c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b710:	4803      	ldr	r0, [pc, #12]	; (b720 <lorwan_datarate_changed+0x2c>)
    b712:	f01e fda9 	bl	2a268 <printk>
	color(255);
    b716:	20ff      	movs	r0, #255	; 0xff
    b718:	f002 fa22 	bl	db60 <color>
}
    b71c:	b002      	add	sp, #8
    b71e:	bd10      	pop	{r4, pc}
    b720:	000343c6 	.word	0x000343c6

0000b724 <dl_callback>:
    int16_t rssi, int8_t snr, uint8_t len, const uint8_t *data)	{
    b724:	b430      	push	{r4, r5}
    b726:	461d      	mov	r5, r3
    b728:	9b03      	ldr	r3, [sp, #12]
    b72a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    if (data) {
    b72e:	b193      	cbz	r3, b756 <dl_callback+0x32>
	    downlink_cmd_new.port=port;
    b730:	490a      	ldr	r1, [pc, #40]	; (b75c <dl_callback+0x38>)
        downlink_cmd_new.len = len;
    b732:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
	    downlink_cmd_new.port=port;
    b736:	7008      	strb	r0, [r1, #0]
        downlink_cmd_new.rssi=rssi;
    b738:	804a      	strh	r2, [r1, #2]
		downlink_cmd_new.snr=snr;
    b73a:	710d      	strb	r5, [r1, #4]
static void dl_callback(uint8_t port, bool data_pending,
    b73c:	441c      	add	r4, r3
    b73e:	3104      	adds	r1, #4
        while (i < len) {
    b740:	42a3      	cmp	r3, r4
    b742:	d103      	bne.n	b74c <dl_callback+0x28>
}
    b744:	bc30      	pop	{r4, r5}
		k_sem_give(&lorawan_rx);//downlink
    b746:	4806      	ldr	r0, [pc, #24]	; (b760 <dl_callback+0x3c>)
    b748:	f01e bb34 	b.w	29db4 <k_sem_give>
            downlink_cmd_new.data[i] = data[i];
    b74c:	f813 2b01 	ldrb.w	r2, [r3], #1
    b750:	f801 2f01 	strb.w	r2, [r1, #1]!
            i++;
    b754:	e7f4      	b.n	b740 <dl_callback+0x1c>
}
    b756:	bc30      	pop	{r4, r5}
    b758:	4770      	bx	lr
    b75a:	bf00      	nop
    b75c:	20030eac 	.word	0x20030eac
    b760:	20008d60 	.word	0x20008d60

0000b764 <digital_4_call_back>:

void digital_4_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	if (alarm_busy==0)
    b764:	4b03      	ldr	r3, [pc, #12]	; (b774 <digital_4_call_back+0x10>)
    b766:	781b      	ldrb	r3, [r3, #0]
    b768:	b913      	cbnz	r3, b770 <digital_4_call_back+0xc>
	  k_sem_give(&alarm_infra);
    b76a:	4803      	ldr	r0, [pc, #12]	; (b778 <digital_4_call_back+0x14>)
    b76c:	f01e bb22 	b.w	29db4 <k_sem_give>
	
}
    b770:	4770      	bx	lr
    b772:	bf00      	nop
    b774:	20031110 	.word	0x20031110
    b778:	20008c70 	.word	0x20008c70

0000b77c <uart_2_work_handler>:
{
    b77c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf2 = k_malloc(sizeof(*buf2)); // SIZE IS 92 BYTES
    b77e:	206c      	movs	r0, #108	; 0x6c
    b780:	f026 f839 	bl	317f6 <k_malloc>
    b784:	4603      	mov	r3, r0
	if (buf2)
    b786:	b148      	cbz	r0, b79c <uart_2_work_handler+0x20>
		buf2->len = 0;
    b788:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b78a:	1d01      	adds	r1, r0, #4
		buf2->len = 0;
    b78c:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b790:	480b      	ldr	r0, [pc, #44]	; (b7c0 <uart_2_work_handler+0x44>)
}
    b792:	b005      	add	sp, #20
    b794:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b798:	f01e bb2b 	b.w	29df2 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    b79c:	4a09      	ldr	r2, [pc, #36]	; (b7c4 <uart_2_work_handler+0x48>)
    b79e:	9000      	str	r0, [sp, #0]
    b7a0:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b7a4:	4908      	ldr	r1, [pc, #32]	; (b7c8 <uart_2_work_handler+0x4c>)
    b7a6:	2202      	movs	r2, #2
    b7a8:	f01e fb14 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b7ac:	f240 6267 	movw	r2, #1639	; 0x667
    b7b0:	2300      	movs	r3, #0
    b7b2:	4806      	ldr	r0, [pc, #24]	; (b7cc <uart_2_work_handler+0x50>)
}
    b7b4:	b005      	add	sp, #20
    b7b6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b7ba:	f01a bbe7 	b.w	25f8c <k_work_reschedule>
    b7be:	bf00      	nop
    b7c0:	00032980 	.word	0x00032980
    b7c4:	000343ec 	.word	0x000343ec
    b7c8:	00033108 	.word	0x00033108
    b7cc:	20009918 	.word	0x20009918

0000b7d0 <uart_work_handler>:
{
    b7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    b7d2:	206c      	movs	r0, #108	; 0x6c
    b7d4:	f026 f80f 	bl	317f6 <k_malloc>
    b7d8:	4603      	mov	r3, r0
	if (buf)
    b7da:	b148      	cbz	r0, b7f0 <uart_work_handler+0x20>
		buf->len = 0;
    b7dc:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7de:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    b7e0:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7e4:	480b      	ldr	r0, [pc, #44]	; (b814 <uart_work_handler+0x44>)
}
    b7e6:	b005      	add	sp, #20
    b7e8:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7ec:	f01e bb01 	b.w	29df2 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_1 receive buffer");
    b7f0:	4a09      	ldr	r2, [pc, #36]	; (b818 <uart_work_handler+0x48>)
    b7f2:	9000      	str	r0, [sp, #0]
    b7f4:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b7f8:	4908      	ldr	r1, [pc, #32]	; (b81c <uart_work_handler+0x4c>)
    b7fa:	2202      	movs	r2, #2
    b7fc:	f01e faea 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b800:	f240 6267 	movw	r2, #1639	; 0x667
    b804:	2300      	movs	r3, #0
    b806:	4806      	ldr	r0, [pc, #24]	; (b820 <uart_work_handler+0x50>)
}
    b808:	b005      	add	sp, #20
    b80a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b80e:	f01a bbbd 	b.w	25f8c <k_work_reschedule>
    b812:	bf00      	nop
    b814:	00032998 	.word	0x00032998
    b818:	00034417 	.word	0x00034417
    b81c:	00033108 	.word	0x00033108
    b820:	20009948 	.word	0x20009948

0000b824 <uart_cb_2>:
{
    b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type)
    b828:	780b      	ldrb	r3, [r1, #0]
    b82a:	3b02      	subs	r3, #2
    b82c:	2b03      	cmp	r3, #3
    b82e:	d844      	bhi.n	b8ba <uart_cb_2+0x96>
    b830:	e8df f003 	tbb	[pc, r3]
    b834:	45695a02 	.word	0x45695a02
		buf2 = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b838:	684c      	ldr	r4, [r1, #4]
		buf2->len += evt->data.rx.len;
    b83a:	68cb      	ldr	r3, [r1, #12]
    b83c:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    b840:	4d36      	ldr	r5, [pc, #216]	; (b91c <uart_cb_2+0xf8>)
		buf2->len += evt->data.rx.len;
    b842:	4413      	add	r3, r2
    b844:	b29b      	uxth	r3, r3
    b846:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    b84a:	4423      	add	r3, r4
    b84c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b850:	682e      	ldr	r6, [r5, #0]
    b852:	2b24      	cmp	r3, #36	; 0x24
    b854:	d12f      	bne.n	b8b6 <uart_cb_2+0x92>
    b856:	bb76      	cbnz	r6, b8b6 <uart_cb_2+0x92>
			buf_extra = k_malloc(sizeof(*buf_extra));
    b858:	206c      	movs	r0, #108	; 0x6c
    b85a:	f025 ffcc 	bl	317f6 <k_malloc>
    b85e:	4b30      	ldr	r3, [pc, #192]	; (b920 <uart_cb_2+0xfc>)
    b860:	6018      	str	r0, [r3, #0]
			buff_extra_index=0;
    b862:	4b30      	ldr	r3, [pc, #192]	; (b924 <uart_cb_2+0x100>)
    b864:	601e      	str	r6, [r3, #0]
			buff_marker=1;
    b866:	2301      	movs	r3, #1
    b868:	602b      	str	r3, [r5, #0]
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    b86a:	482e      	ldr	r0, [pc, #184]	; (b924 <uart_cb_2+0x100>)
    b86c:	6803      	ldr	r3, [r0, #0]
    b86e:	2b6a      	cmp	r3, #106	; 0x6a
    b870:	d823      	bhi.n	b8ba <uart_cb_2+0x96>
		    buf_extra->data[buff_extra_index++]=buf2->data[buf2->len - 1];
    b872:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    b876:	4e2a      	ldr	r6, [pc, #168]	; (b920 <uart_cb_2+0xfc>)
    b878:	1c5a      	adds	r2, r3, #1
    b87a:	3f01      	subs	r7, #1
    b87c:	6002      	str	r2, [r0, #0]
    b87e:	6831      	ldr	r1, [r6, #0]
    b880:	f814 c007 	ldrb.w	ip, [r4, r7]
    b884:	18cf      	adds	r7, r1, r3
    b886:	f887 c004 	strb.w	ip, [r7, #4]
			if(buf2->data[buf2->len - 1]==0x0A){
    b88a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    b88e:	443c      	add	r4, r7
    b890:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    b894:	2c0a      	cmp	r4, #10
    b896:	d110      	bne.n	b8ba <uart_cb_2+0x96>
			   buf_extra->data[buff_extra_index++] = 0x00;
    b898:	2400      	movs	r4, #0
    b89a:	3302      	adds	r3, #2
    b89c:	440a      	add	r2, r1
    b89e:	6003      	str	r3, [r0, #0]
    b8a0:	7114      	strb	r4, [r2, #4]
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra); // TRANSFER TO FIFO
    b8a2:	4821      	ldr	r0, [pc, #132]	; (b928 <uart_cb_2+0x104>)
			   buf_extra->len = buff_extra_index;
    b8a4:	f8a1 3068 	strh.w	r3, [r1, #104]	; 0x68
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra); // TRANSFER TO FIFO
    b8a8:	f025 fb5d 	bl	30f66 <k_queue_append>
				 k_free(buf_extra);
    b8ac:	6830      	ldr	r0, [r6, #0]
    b8ae:	f025 ff9b 	bl	317e8 <k_free>
			   buff_marker=0;
    b8b2:	602c      	str	r4, [r5, #0]
    b8b4:	e001      	b.n	b8ba <uart_cb_2+0x96>
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    b8b6:	2e01      	cmp	r6, #1
    b8b8:	d0d7      	beq.n	b86a <uart_cb_2+0x46>
}
    b8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf2 = k_malloc(sizeof(*buf2)); // THE SIZE IS 92 BYTES
    b8be:	206c      	movs	r0, #108	; 0x6c
    b8c0:	f025 ff99 	bl	317f6 <k_malloc>
		if (buf2)
    b8c4:	b140      	cbz	r0, b8d8 <uart_cb_2+0xb4>
			buf2->len = 0;
    b8c6:	2300      	movs	r3, #0
    b8c8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b8cc:	1d01      	adds	r1, r0, #4
}
    b8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b8d2:	4816      	ldr	r0, [pc, #88]	; (b92c <uart_cb_2+0x108>)
    b8d4:	f01e ba8d 	b.w	29df2 <uart_rx_enable.constprop.0>
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b8d8:	f240 6267 	movw	r2, #1639	; 0x667
}
    b8dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b8e0:	2300      	movs	r3, #0
    b8e2:	4813      	ldr	r0, [pc, #76]	; (b930 <uart_cb_2+0x10c>)
    b8e4:	f01a bb52 	b.w	25f8c <k_work_reschedule>
		buf2 = k_malloc(sizeof(*buf2));
    b8e8:	206c      	movs	r0, #108	; 0x6c
    b8ea:	f025 ff84 	bl	317f6 <k_malloc>
		buf2->len = 0;
    b8ee:	2300      	movs	r3, #0
		buf2 = k_malloc(sizeof(*buf2));
    b8f0:	4601      	mov	r1, r0
		buf2->len = 0;
    b8f2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
    b8f6:	480d      	ldr	r0, [pc, #52]	; (b92c <uart_cb_2+0x108>)
    b8f8:	2264      	movs	r2, #100	; 0x64
}
    b8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b8fe:	6883      	ldr	r3, [r0, #8]
    b900:	3104      	adds	r1, #4
    b902:	691b      	ldr	r3, [r3, #16]
    b904:	4718      	bx	r3
		buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
    b906:	6848      	ldr	r0, [r1, #4]
		if (buf2->len > 0)
    b908:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    b90c:	2b00      	cmp	r3, #0
    b90e:	d0d4      	beq.n	b8ba <uart_cb_2+0x96>
}
    b910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_free(buf2);
    b914:	3804      	subs	r0, #4
    b916:	f025 bf67 	b.w	317e8 <k_free>
    b91a:	bf00      	nop
    b91c:	2000a674 	.word	0x2000a674
    b920:	2000a67c 	.word	0x2000a67c
    b924:	2000a678 	.word	0x2000a678
    b928:	20008e38 	.word	0x20008e38
    b92c:	00032980 	.word	0x00032980
    b930:	20009918 	.word	0x20009918

0000b934 <button4_thread>:
		}
	}
}

void button4_thread(void)
{
    b934:	b570      	push	{r4, r5, r6, lr}
    b936:	b086      	sub	sp, #24
	// print ISADORA PENATI FERREIRA
	char Name[] = "ISADORA PENATI FERREIRA";
    b938:	466a      	mov	r2, sp
    b93a:	4615      	mov	r5, r2
    b93c:	4b0c      	ldr	r3, [pc, #48]	; (b970 <button4_thread+0x3c>)
    b93e:	f103 0618 	add.w	r6, r3, #24
    b942:	4614      	mov	r4, r2
    b944:	6818      	ldr	r0, [r3, #0]
    b946:	6859      	ldr	r1, [r3, #4]
    b948:	3308      	adds	r3, #8
    b94a:	c403      	stmia	r4!, {r0, r1}
    b94c:	42b3      	cmp	r3, r6
    b94e:	4622      	mov	r2, r4
    b950:	d1f7      	bne.n	b942 <button4_thread+0xe>
	*(packet_data+7) = 0x20;//SPACE
	*/

	while (1)
	{
		k_sem_take(&button_test, K_FOREVER);
    b952:	4c08      	ldr	r4, [pc, #32]	; (b974 <button4_thread+0x40>)
    b954:	4620      	mov	r0, r4
    b956:	f04f 32ff 	mov.w	r2, #4294967295
    b95a:	f04f 33ff 	mov.w	r3, #4294967295
    b95e:	f01e fa58 	bl	29e12 <k_sem_take.constprop.0.isra.0>
		bt_nus_send(NULL, Name, size);
    b962:	2218      	movs	r2, #24
    b964:	4629      	mov	r1, r5
    b966:	2000      	movs	r0, #0
    b968:	f005 fa1e 	bl	10da8 <bt_nus_send>
	while (1)
    b96c:	e7f2      	b.n	b954 <button4_thread+0x20>
    b96e:	bf00      	nop
    b970:	00034442 	.word	0x00034442
    b974:	20008cd0 	.word	0x20008cd0

0000b978 <button3_thread>:
{
    b978:	b570      	push	{r4, r5, r6, lr}
		k_sem_take(&button_3, K_FOREVER);
    b97a:	4e09      	ldr	r6, [pc, #36]	; (b9a0 <button3_thread+0x28>)
		while (i <= C_Buffer_Current_Position)
    b97c:	4d09      	ldr	r5, [pc, #36]	; (b9a4 <button3_thread+0x2c>)
		k_sem_take(&button_3, K_FOREVER);
    b97e:	f04f 32ff 	mov.w	r2, #4294967295
    b982:	f04f 33ff 	mov.w	r3, #4294967295
    b986:	4630      	mov	r0, r6
    b988:	f01e fa43 	bl	29e12 <k_sem_take.constprop.0.isra.0>
		i = 0;
    b98c:	2400      	movs	r4, #0
			print_current_position_cb(i);
    b98e:	4620      	mov	r0, r4
    b990:	f001 fdb2 	bl	d4f8 <print_current_position_cb>
		while (i <= C_Buffer_Current_Position)
    b994:	682b      	ldr	r3, [r5, #0]
			i++;
    b996:	3401      	adds	r4, #1
		while (i <= C_Buffer_Current_Position)
    b998:	42a3      	cmp	r3, r4
    b99a:	d3f0      	bcc.n	b97e <button3_thread+0x6>
    b99c:	e7f7      	b.n	b98e <button3_thread+0x16>
    b99e:	bf00      	nop
    b9a0:	20008cb8 	.word	0x20008cb8
    b9a4:	2002f990 	.word	0x2002f990

0000b9a8 <downlink_thread>:
			j++;
		}
	}
}

void downlink_thread(void){
    b9a8:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd=0;
	while(1){
	  k_sem_take(&lorawan_rx,K_FOREVER);
      color(4);
	  printk("CMD-Received\n");
	  printk("Len: %d\n",downlink_cmd_new.len);
    b9aa:	4c19      	ldr	r4, [pc, #100]	; (ba10 <downlink_thread+0x68>)
	  k_sem_take(&lorawan_rx,K_FOREVER);
    b9ac:	4e19      	ldr	r6, [pc, #100]	; (ba14 <downlink_thread+0x6c>)
	  printk("Port %d, RSSI %ddB, SNR %ddBm \n", downlink_cmd_new.port, downlink_cmd_new.rssi, downlink_cmd_new.snr);
	  printk(downlink_cmd_new.data, downlink_cmd_new.len, "Payload: \n");
    b9ae:	1d65      	adds	r5, r4, #5
	  k_sem_take(&lorawan_rx,K_FOREVER);
    b9b0:	f04f 32ff 	mov.w	r2, #4294967295
    b9b4:	f04f 33ff 	mov.w	r3, #4294967295
    b9b8:	4630      	mov	r0, r6
    b9ba:	f01e fa2a 	bl	29e12 <k_sem_take.constprop.0.isra.0>
      color(4);
    b9be:	2004      	movs	r0, #4
    b9c0:	f002 f8ce 	bl	db60 <color>
	  printk("CMD-Received\n");
    b9c4:	4814      	ldr	r0, [pc, #80]	; (ba18 <downlink_thread+0x70>)
    b9c6:	f01e fc4f 	bl	2a268 <printk>
	  printk("Len: %d\n",downlink_cmd_new.len);
    b9ca:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    b9ce:	4813      	ldr	r0, [pc, #76]	; (ba1c <downlink_thread+0x74>)
    b9d0:	f01e fc4a 	bl	2a268 <printk>
	  printk("Port %d, RSSI %ddB, SNR %ddBm \n", downlink_cmd_new.port, downlink_cmd_new.rssi, downlink_cmd_new.snr);
    b9d4:	f994 3004 	ldrsb.w	r3, [r4, #4]
    b9d8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    b9dc:	7821      	ldrb	r1, [r4, #0]
    b9de:	4810      	ldr	r0, [pc, #64]	; (ba20 <downlink_thread+0x78>)
    b9e0:	f01e fc42 	bl	2a268 <printk>
	  printk(downlink_cmd_new.data, downlink_cmd_new.len, "Payload: \n");
    b9e4:	4628      	mov	r0, r5
    b9e6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    b9ea:	4a0e      	ldr	r2, [pc, #56]	; (ba24 <downlink_thread+0x7c>)
    b9ec:	f01e fc3c 	bl	2a268 <printk>

	  printk("%X:%X:%X\n",downlink_cmd_new.data[0],downlink_cmd_new.data[1],downlink_cmd_new.data[2]);
    b9f0:	79e3      	ldrb	r3, [r4, #7]
    b9f2:	79a2      	ldrb	r2, [r4, #6]
    b9f4:	7961      	ldrb	r1, [r4, #5]
    b9f6:	480c      	ldr	r0, [pc, #48]	; (ba28 <downlink_thread+0x80>)
    b9f8:	f01e fc36 	bl	2a268 <printk>
      static uint8_t *data=downlink_cmd_new.data;
	  

	  cmd_interpreter(data,downlink_cmd_new.len);
    b9fc:	4628      	mov	r0, r5
    b9fe:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    ba02:	f002 f901 	bl	dc08 <cmd_interpreter>
      color(0);
    ba06:	2000      	movs	r0, #0
    ba08:	f002 f8aa 	bl	db60 <color>
	while(1){
    ba0c:	e7d0      	b.n	b9b0 <downlink_thread+0x8>
    ba0e:	bf00      	nop
    ba10:	20030eac 	.word	0x20030eac
    ba14:	20008d60 	.word	0x20008d60
    ba18:	0003445a 	.word	0x0003445a
    ba1c:	00034468 	.word	0x00034468
    ba20:	00034471 	.word	0x00034471
    ba24:	00034491 	.word	0x00034491
    ba28:	0003449c 	.word	0x0003449c

0000ba2c <write_memory_thread>:
{
    ba2c:	b510      	push	{r4, lr}
		k_sem_take(&save_memory, K_FOREVER);
    ba2e:	4c07      	ldr	r4, [pc, #28]	; (ba4c <write_memory_thread+0x20>)
    ba30:	4620      	mov	r0, r4
    ba32:	f04f 32ff 	mov.w	r2, #4294967295
    ba36:	f04f 33ff 	mov.w	r3, #4294967295
    ba3a:	f01e f9ea 	bl	29e12 <k_sem_take.constprop.0.isra.0>
		flash_button2_counter();
    ba3e:	f001 fa97 	bl	cf70 <flash_button2_counter>
		print_current_position_cb_new(0);
    ba42:	2000      	movs	r0, #0
    ba44:	f001 fe38 	bl	d6b8 <print_current_position_cb_new>
	while (1)
    ba48:	e7f2      	b.n	ba30 <write_memory_thread+0x4>
    ba4a:	bf00      	nop
    ba4c:	20008dc0 	.word	0x20008dc0

0000ba50 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ba50:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ba52:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ba54:	b08a      	sub	sp, #40	; 0x28
    ba56:	4604      	mov	r4, r0
    ba58:	460e      	mov	r6, r1
    ba5a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ba5c:	2b03      	cmp	r3, #3
    ba5e:	d820      	bhi.n	baa2 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ba60:	e8df f003 	tbb	[pc, r3]
    ba64:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ba68:	4911      	ldr	r1, [pc, #68]	; (bab0 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ba6a:	4628      	mov	r0, r5
    ba6c:	f026 f868 	bl	31b40 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ba70:	9505      	str	r5, [sp, #20]
    ba72:	7863      	ldrb	r3, [r4, #1]
    ba74:	211e      	movs	r1, #30
    ba76:	9304      	str	r3, [sp, #16]
    ba78:	78a3      	ldrb	r3, [r4, #2]
    ba7a:	4630      	mov	r0, r6
    ba7c:	9303      	str	r3, [sp, #12]
    ba7e:	78e3      	ldrb	r3, [r4, #3]
    ba80:	4a0c      	ldr	r2, [pc, #48]	; (bab4 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ba82:	9302      	str	r3, [sp, #8]
    ba84:	7923      	ldrb	r3, [r4, #4]
    ba86:	9301      	str	r3, [sp, #4]
    ba88:	7963      	ldrb	r3, [r4, #5]
    ba8a:	9300      	str	r3, [sp, #0]
    ba8c:	79a3      	ldrb	r3, [r4, #6]
    ba8e:	f01e fbf8 	bl	2a282 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ba92:	b00a      	add	sp, #40	; 0x28
    ba94:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ba96:	4908      	ldr	r1, [pc, #32]	; (bab8 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    ba98:	e7e7      	b.n	ba6a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    ba9a:	4908      	ldr	r1, [pc, #32]	; (babc <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    ba9c:	e7e5      	b.n	ba6a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    ba9e:	4908      	ldr	r1, [pc, #32]	; (bac0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    baa0:	e7e3      	b.n	ba6a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    baa2:	210a      	movs	r1, #10
    baa4:	4628      	mov	r0, r5
    baa6:	4a07      	ldr	r2, [pc, #28]	; (bac4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    baa8:	f01e fbeb 	bl	2a282 <snprintk>
		break;
    baac:	e7e0      	b.n	ba70 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    baae:	bf00      	nop
    bab0:	000344a6 	.word	0x000344a6
    bab4:	000344c8 	.word	0x000344c8
    bab8:	000344ad 	.word	0x000344ad
    babc:	000344b4 	.word	0x000344b4
    bac0:	000344be 	.word	0x000344be
    bac4:	00037a5d 	.word	0x00037a5d

0000bac8 <security_changed>:
{
    bac8:	b570      	push	{r4, r5, r6, lr}
    baca:	4614      	mov	r4, r2
    bacc:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bace:	ae06      	add	r6, sp, #24
{
    bad0:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bad2:	f022 f87d 	bl	2dbd0 <bt_conn_get_dst>
    bad6:	4631      	mov	r1, r6
    bad8:	f7ff ffba 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err)
    badc:	b96c      	cbnz	r4, bafa <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    bade:	4b0e      	ldr	r3, [pc, #56]	; (bb18 <security_changed+0x50>)
    bae0:	2203      	movs	r2, #3
    bae2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bae6:	4620      	mov	r0, r4
    bae8:	4623      	mov	r3, r4
    baea:	e9cd 6503 	strd	r6, r5, [sp, #12]
    baee:	490b      	ldr	r1, [pc, #44]	; (bb1c <security_changed+0x54>)
    baf0:	9400      	str	r4, [sp, #0]
    baf2:	f01e f96f 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    baf6:	b00e      	add	sp, #56	; 0x38
    baf8:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    bafa:	4b09      	ldr	r3, [pc, #36]	; (bb20 <security_changed+0x58>)
    bafc:	2202      	movs	r2, #2
    bafe:	9302      	str	r3, [sp, #8]
    bb00:	2300      	movs	r3, #0
    bb02:	e9cd 5404 	strd	r5, r4, [sp, #16]
    bb06:	4618      	mov	r0, r3
    bb08:	e9cd 3300 	strd	r3, r3, [sp]
    bb0c:	4903      	ldr	r1, [pc, #12]	; (bb1c <security_changed+0x54>)
    bb0e:	9603      	str	r6, [sp, #12]
    bb10:	f01e f960 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    bb14:	e7ef      	b.n	baf6 <security_changed+0x2e>
    bb16:	bf00      	nop
    bb18:	000344eb 	.word	0x000344eb
    bb1c:	00033108 	.word	0x00033108
    bb20:	00034509 	.word	0x00034509

0000bb24 <pairing_failed>:
{
    bb24:	b530      	push	{r4, r5, lr}
    bb26:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb28:	ad06      	add	r5, sp, #24
{
    bb2a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb2c:	f022 f850 	bl	2dbd0 <bt_conn_get_dst>
    bb30:	4629      	mov	r1, r5
    bb32:	f7ff ff8d 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    bb36:	4b07      	ldr	r3, [pc, #28]	; (bb54 <pairing_failed+0x30>)
    bb38:	2203      	movs	r2, #3
    bb3a:	9302      	str	r3, [sp, #8]
    bb3c:	2300      	movs	r3, #0
    bb3e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bb42:	4618      	mov	r0, r3
    bb44:	e9cd 3300 	strd	r3, r3, [sp]
    bb48:	4903      	ldr	r1, [pc, #12]	; (bb58 <pairing_failed+0x34>)
    bb4a:	f01e f943 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    bb4e:	b00f      	add	sp, #60	; 0x3c
    bb50:	bd30      	pop	{r4, r5, pc}
    bb52:	bf00      	nop
    bb54:	0003452d 	.word	0x0003452d
    bb58:	00033108 	.word	0x00033108

0000bb5c <pairing_complete>:
{
    bb5c:	b530      	push	{r4, r5, lr}
    bb5e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb60:	ad06      	add	r5, sp, #24
{
    bb62:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb64:	f022 f834 	bl	2dbd0 <bt_conn_get_dst>
    bb68:	4629      	mov	r1, r5
    bb6a:	f7ff ff71 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    bb6e:	4b07      	ldr	r3, [pc, #28]	; (bb8c <pairing_complete+0x30>)
    bb70:	2203      	movs	r2, #3
    bb72:	9302      	str	r3, [sp, #8]
    bb74:	2300      	movs	r3, #0
    bb76:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bb7a:	4618      	mov	r0, r3
    bb7c:	e9cd 3300 	strd	r3, r3, [sp]
    bb80:	4903      	ldr	r1, [pc, #12]	; (bb90 <pairing_complete+0x34>)
    bb82:	f01e f927 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    bb86:	b00f      	add	sp, #60	; 0x3c
    bb88:	bd30      	pop	{r4, r5, pc}
    bb8a:	bf00      	nop
    bb8c:	00034550 	.word	0x00034550
    bb90:	00033108 	.word	0x00033108

0000bb94 <auth_cancel>:
{
    bb94:	b510      	push	{r4, lr}
    bb96:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb98:	ac04      	add	r4, sp, #16
    bb9a:	f022 f819 	bl	2dbd0 <bt_conn_get_dst>
    bb9e:	4621      	mov	r1, r4
    bba0:	f7ff ff56 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    bba4:	4b06      	ldr	r3, [pc, #24]	; (bbc0 <auth_cancel+0x2c>)
    bba6:	2203      	movs	r2, #3
    bba8:	9302      	str	r3, [sp, #8]
    bbaa:	2300      	movs	r3, #0
    bbac:	4905      	ldr	r1, [pc, #20]	; (bbc4 <auth_cancel+0x30>)
    bbae:	4618      	mov	r0, r3
    bbb0:	e9cd 3300 	strd	r3, r3, [sp]
    bbb4:	9403      	str	r4, [sp, #12]
    bbb6:	f01e f90d 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    bbba:	b00c      	add	sp, #48	; 0x30
    bbbc:	bd10      	pop	{r4, pc}
    bbbe:	bf00      	nop
    bbc0:	00034572 	.word	0x00034572
    bbc4:	00033108 	.word	0x00033108

0000bbc8 <auth_passkey_display>:
{
    bbc8:	b530      	push	{r4, r5, lr}
    bbca:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bbcc:	ad06      	add	r5, sp, #24
{
    bbce:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bbd0:	f021 fffe 	bl	2dbd0 <bt_conn_get_dst>
    bbd4:	4629      	mov	r1, r5
    bbd6:	f7ff ff3b 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    bbda:	4b07      	ldr	r3, [pc, #28]	; (bbf8 <auth_passkey_display+0x30>)
    bbdc:	2203      	movs	r2, #3
    bbde:	9302      	str	r3, [sp, #8]
    bbe0:	2300      	movs	r3, #0
    bbe2:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bbe6:	4618      	mov	r0, r3
    bbe8:	e9cd 3300 	strd	r3, r3, [sp]
    bbec:	4903      	ldr	r1, [pc, #12]	; (bbfc <auth_passkey_display+0x34>)
    bbee:	f01e f8f1 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    bbf2:	b00f      	add	sp, #60	; 0x3c
    bbf4:	bd30      	pop	{r4, r5, pc}
    bbf6:	bf00      	nop
    bbf8:	00034588 	.word	0x00034588
    bbfc:	00033108 	.word	0x00033108

0000bc00 <auth_passkey_confirm>:
{
    bc00:	b570      	push	{r4, r5, r6, lr}
    bc02:	b08e      	sub	sp, #56	; 0x38
    bc04:	460c      	mov	r4, r1
    bc06:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    bc08:	f021 ff21 	bl	2da4e <bt_conn_ref>
    bc0c:	4b11      	ldr	r3, [pc, #68]	; (bc54 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc0e:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    bc10:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc12:	4628      	mov	r0, r5
    bc14:	f021 ffdc 	bl	2dbd0 <bt_conn_get_dst>
    bc18:	4631      	mov	r1, r6
    bc1a:	f7ff ff19 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    bc1e:	e9cd 6403 	strd	r6, r4, [sp, #12]
    bc22:	2400      	movs	r4, #0
    bc24:	4d0c      	ldr	r5, [pc, #48]	; (bc58 <auth_passkey_confirm+0x58>)
    bc26:	4b0d      	ldr	r3, [pc, #52]	; (bc5c <auth_passkey_confirm+0x5c>)
    bc28:	4629      	mov	r1, r5
    bc2a:	4620      	mov	r0, r4
    bc2c:	9302      	str	r3, [sp, #8]
    bc2e:	2203      	movs	r2, #3
    bc30:	4623      	mov	r3, r4
    bc32:	e9cd 4400 	strd	r4, r4, [sp]
    bc36:	f01e f8cd 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    bc3a:	4b09      	ldr	r3, [pc, #36]	; (bc60 <auth_passkey_confirm+0x60>)
    bc3c:	2203      	movs	r2, #3
    bc3e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bc42:	4629      	mov	r1, r5
    bc44:	4623      	mov	r3, r4
    bc46:	4620      	mov	r0, r4
    bc48:	9400      	str	r4, [sp, #0]
    bc4a:	f01e f8c3 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    bc4e:	b00e      	add	sp, #56	; 0x38
    bc50:	bd70      	pop	{r4, r5, r6, pc}
    bc52:	bf00      	nop
    bc54:	2000a680 	.word	0x2000a680
    bc58:	00033108 	.word	0x00033108
    bc5c:	00034588 	.word	0x00034588
    bc60:	0003459d 	.word	0x0003459d

0000bc64 <bt_receive_cb>:
{
    bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bc68:	2400      	movs	r4, #0
{
    bc6a:	4605      	mov	r5, r0
    bc6c:	b088      	sub	sp, #32
    bc6e:	460f      	mov	r7, r1
    bc70:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bc72:	4621      	mov	r1, r4
    bc74:	221a      	movs	r2, #26
    bc76:	a801      	add	r0, sp, #4
    bc78:	9400      	str	r4, [sp, #0]
    bc7a:	f025 fe12 	bl	318a2 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    bc7e:	4628      	mov	r0, r5
    bc80:	f021 ffa6 	bl	2dbd0 <bt_conn_get_dst>
    bc84:	4669      	mov	r1, sp
    bc86:	f7ff fee3 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    bc8a:	4669      	mov	r1, sp
    bc8c:	4823      	ldr	r0, [pc, #140]	; (bd1c <bt_receive_cb+0xb8>)
    bc8e:	f01b fe67 	bl	27960 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bc92:	f8df 808c 	ldr.w	r8, [pc, #140]	; bd20 <bt_receive_cb+0xbc>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bc96:	f8df 908c 	ldr.w	r9, [pc, #140]	; bd24 <bt_receive_cb+0xc0>
		k_fifo_put(&command_tx,cmd_tx);
    bc9a:	f8df a08c 	ldr.w	sl, [pc, #140]	; bd28 <bt_receive_cb+0xc4>
	for (uint16_t pos = 0; pos != len;)
    bc9e:	42b4      	cmp	r4, r6
    bca0:	d00a      	beq.n	bcb8 <bt_receive_cb+0x54>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    bca2:	206c      	movs	r0, #108	; 0x6c
    bca4:	f025 fda7 	bl	317f6 <k_malloc>
    bca8:	4605      	mov	r5, r0
		struct uart_data_t *cmd_tx = k_malloc(sizeof(*cmd_tx));
    bcaa:	206c      	movs	r0, #108	; 0x6c
    bcac:	f025 fda3 	bl	317f6 <k_malloc>
		if (!tx)
    bcb0:	b92d      	cbnz	r5, bcbe <bt_receive_cb+0x5a>
			printf("Not able to allocate UART send data buffer");
    bcb2:	481e      	ldr	r0, [pc, #120]	; (bd2c <bt_receive_cb+0xc8>)
    bcb4:	f01b fe54 	bl	27960 <iprintf>
}
    bcb8:	b008      	add	sp, #32
    bcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size)
    bcbe:	1b32      	subs	r2, r6, r4
    bcc0:	2a63      	cmp	r2, #99	; 0x63
			tx->len = tx_data_size;
    bcc2:	bf8c      	ite	hi
    bcc4:	2263      	movhi	r2, #99	; 0x63
			tx->len = (len - pos);
    bcc6:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    bcc8:	1d2b      	adds	r3, r5, #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bcca:	4618      	mov	r0, r3
    bccc:	f8a5 2068 	strh.w	r2, [r5, #104]	; 0x68
    bcd0:	1939      	adds	r1, r7, r4
    bcd2:	f025 fdac 	bl	3182e <memcpy>
		pos += tx->len;
    bcd6:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    bcda:	4603      	mov	r3, r0
    bcdc:	4414      	add	r4, r2
    bcde:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r'))
    bce0:	42a6      	cmp	r6, r4
    bce2:	d10a      	bne.n	bcfa <bt_receive_cb+0x96>
    bce4:	19b9      	adds	r1, r7, r6
    bce6:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    bcea:	290d      	cmp	r1, #13
    bcec:	d105      	bne.n	bcfa <bt_receive_cb+0x96>
			tx->data[tx->len] = '\n';
    bcee:	200a      	movs	r0, #10
    bcf0:	18a9      	adds	r1, r5, r2
			tx->len++;
    bcf2:	3201      	adds	r2, #1
			tx->data[tx->len] = '\n';
    bcf4:	7108      	strb	r0, [r1, #4]
			tx->len++;
    bcf6:	f8a5 2068 	strh.w	r2, [r5, #104]	; 0x68
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bcfa:	4619      	mov	r1, r3
    bcfc:	4640      	mov	r0, r8
    bcfe:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    bd02:	f01e f87e 	bl	29e02 <uart_tx.constprop.0>
		if (err)
    bd06:	b118      	cbz	r0, bd10 <bt_receive_cb+0xac>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bd08:	4629      	mov	r1, r5
    bd0a:	4648      	mov	r0, r9
    bd0c:	f025 f92b 	bl	30f66 <k_queue_append>
		k_fifo_put(&command_tx,cmd_tx);
    bd10:	4629      	mov	r1, r5
    bd12:	4650      	mov	r0, sl
    bd14:	f025 f927 	bl	30f66 <k_queue_append>
    bd18:	e7c1      	b.n	bc9e <bt_receive_cb+0x3a>
    bd1a:	bf00      	nop
    bd1c:	000345cc 	.word	0x000345cc
    bd20:	00032998 	.word	0x00032998
    bd24:	20008e68 	.word	0x20008e68
    bd28:	20008e20 	.word	0x20008e20
    bd2c:	000345e3 	.word	0x000345e3

0000bd30 <button_pressed_2>:
{
    bd30:	b508      	push	{r3, lr}
	k_sem_give(&save_memory);
    bd32:	4807      	ldr	r0, [pc, #28]	; (bd50 <button_pressed_2+0x20>)
    bd34:	f01e f83e 	bl	29db4 <k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    bd38:	2101      	movs	r1, #1
    bd3a:	4806      	ldr	r0, [pc, #24]	; (bd54 <button_pressed_2+0x24>)
    bd3c:	f01e f871 	bl	29e22 <gpio_pin_set_dt.isra.0>
    bd40:	f024 f8e7 	bl	2ff12 <sys_clock_cycle_get_32>
}
    bd44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bd48:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    bd4a:	4803      	ldr	r0, [pc, #12]	; (bd58 <button_pressed_2+0x28>)
    bd4c:	f01e ba8c 	b.w	2a268 <printk>
    bd50:	20008dc0 	.word	0x20008dc0
    bd54:	2000845c 	.word	0x2000845c
    bd58:	0003460e 	.word	0x0003460e

0000bd5c <button_pressed_1>:
{
    bd5c:	b508      	push	{r3, lr}
	k_sem_give(&send_proto);
    bd5e:	4807      	ldr	r0, [pc, #28]	; (bd7c <button_pressed_1+0x20>)
    bd60:	f01e f828 	bl	29db4 <k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    bd64:	2101      	movs	r1, #1
    bd66:	4806      	ldr	r0, [pc, #24]	; (bd80 <button_pressed_1+0x24>)
    bd68:	f01e f85b 	bl	29e22 <gpio_pin_set_dt.isra.0>
    bd6c:	f024 f8d1 	bl	2ff12 <sys_clock_cycle_get_32>
}
    bd70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bd74:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    bd76:	4803      	ldr	r0, [pc, #12]	; (bd84 <button_pressed_1+0x28>)
    bd78:	f01e ba76 	b.w	2a268 <printk>
    bd7c:	20008df0 	.word	0x20008df0
    bd80:	20008454 	.word	0x20008454
    bd84:	00034626 	.word	0x00034626

0000bd88 <connected>:
{
    bd88:	b570      	push	{r4, r5, r6, lr}
    bd8a:	4605      	mov	r5, r0
	if (err)
    bd8c:	460c      	mov	r4, r1
{
    bd8e:	b08c      	sub	sp, #48	; 0x30
	if (err)
    bd90:	b161      	cbz	r1, bdac <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    bd92:	4b14      	ldr	r3, [pc, #80]	; (bde4 <connected+0x5c>)
    bd94:	9103      	str	r1, [sp, #12]
    bd96:	9302      	str	r3, [sp, #8]
    bd98:	2300      	movs	r3, #0
    bd9a:	2201      	movs	r2, #1
    bd9c:	4618      	mov	r0, r3
    bd9e:	e9cd 3300 	strd	r3, r3, [sp]
    bda2:	4911      	ldr	r1, [pc, #68]	; (bde8 <connected+0x60>)
    bda4:	f01e f816 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    bda8:	b00c      	add	sp, #48	; 0x30
    bdaa:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bdac:	ae04      	add	r6, sp, #16
    bdae:	f021 ff0f 	bl	2dbd0 <bt_conn_get_dst>
    bdb2:	4631      	mov	r1, r6
    bdb4:	f7ff fe4c 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    bdb8:	4b0c      	ldr	r3, [pc, #48]	; (bdec <connected+0x64>)
    bdba:	2203      	movs	r2, #3
    bdbc:	4620      	mov	r0, r4
    bdbe:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bdc2:	4909      	ldr	r1, [pc, #36]	; (bde8 <connected+0x60>)
    bdc4:	4623      	mov	r3, r4
    bdc6:	9603      	str	r6, [sp, #12]
    bdc8:	9400      	str	r4, [sp, #0]
    bdca:	f01e f803 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    bdce:	4628      	mov	r0, r5
    bdd0:	f021 fe3d 	bl	2da4e <bt_conn_ref>
    bdd4:	4b06      	ldr	r3, [pc, #24]	; (bdf0 <connected+0x68>)
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bdd6:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    bdd8:	6018      	str	r0, [r3, #0]
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bdda:	4806      	ldr	r0, [pc, #24]	; (bdf4 <connected+0x6c>)
    bddc:	f01e f821 	bl	29e22 <gpio_pin_set_dt.isra.0>
    bde0:	e7e2      	b.n	bda8 <connected+0x20>
    bde2:	bf00      	nop
    bde4:	0003463e 	.word	0x0003463e
    bde8:	00033108 	.word	0x00033108
    bdec:	00034659 	.word	0x00034659
    bdf0:	2000a684 	.word	0x2000a684
    bdf4:	2000846c 	.word	0x2000846c

0000bdf8 <disconnected>:
{
    bdf8:	b530      	push	{r4, r5, lr}
    bdfa:	460c      	mov	r4, r1
    bdfc:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bdfe:	ad06      	add	r5, sp, #24
    be00:	f021 fee6 	bl	2dbd0 <bt_conn_get_dst>
    be04:	4629      	mov	r1, r5
    be06:	f7ff fe23 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    be0a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    be0e:	2400      	movs	r4, #0
    be10:	4b0d      	ldr	r3, [pc, #52]	; (be48 <disconnected+0x50>)
	if (auth_conn)
    be12:	4d0e      	ldr	r5, [pc, #56]	; (be4c <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    be14:	4620      	mov	r0, r4
    be16:	9302      	str	r3, [sp, #8]
    be18:	2203      	movs	r2, #3
    be1a:	4623      	mov	r3, r4
    be1c:	e9cd 4400 	strd	r4, r4, [sp]
    be20:	490b      	ldr	r1, [pc, #44]	; (be50 <disconnected+0x58>)
    be22:	f01d ffd7 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
	if (auth_conn)
    be26:	6828      	ldr	r0, [r5, #0]
    be28:	b110      	cbz	r0, be30 <disconnected+0x38>
		bt_conn_unref(auth_conn);
    be2a:	f021 fe24 	bl	2da76 <bt_conn_unref>
		auth_conn = NULL;
    be2e:	602c      	str	r4, [r5, #0]
	if (current_conn)
    be30:	4c08      	ldr	r4, [pc, #32]	; (be54 <disconnected+0x5c>)
    be32:	6820      	ldr	r0, [r4, #0]
    be34:	b130      	cbz	r0, be44 <disconnected+0x4c>
		bt_conn_unref(current_conn);
    be36:	f021 fe1e 	bl	2da76 <bt_conn_unref>
		current_conn = NULL;
    be3a:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    be3c:	4806      	ldr	r0, [pc, #24]	; (be58 <disconnected+0x60>)
		current_conn = NULL;
    be3e:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    be40:	f01d ffef 	bl	29e22 <gpio_pin_set_dt.isra.0>
}
    be44:	b00f      	add	sp, #60	; 0x3c
    be46:	bd30      	pop	{r4, r5, pc}
    be48:	00034666 	.word	0x00034666
    be4c:	2000a680 	.word	0x2000a680
    be50:	00033108 	.word	0x00033108
    be54:	2000a684 	.word	0x2000a684
    be58:	2000846c 	.word	0x2000846c

0000be5c <activity>:
	}
    
}

void activity(void){
    be5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int blink_status = 0;
    be60:	2600      	movs	r6, #0
    be62:	466d      	mov	r5, sp
	int32_t delay;
	
    for (;;){
		delay=Initial_Setup.led_blink_time;
    be64:	f8df 803c 	ldr.w	r8, [pc, #60]	; bea4 <activity+0x48>
    be68:	4f0f      	ldr	r7, [pc, #60]	; (bea8 <activity+0x4c>)
    be6a:	f8b8 4000 	ldrh.w	r4, [r8]
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    be6e:	3601      	adds	r6, #1
    be70:	e897 0003 	ldmia.w	r7, {r0, r1}
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
    be74:	2c09      	cmp	r4, #9
    be76:	e885 0003 	stmia.w	r5, {r0, r1}
	gpio_pin_set_dt(&led, value);
    be7a:	4628      	mov	r0, r5
    be7c:	f006 0101 	and.w	r1, r6, #1
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
    be80:	bfd8      	it	le
    be82:	24c8      	movle	r4, #200	; 0xc8
	gpio_pin_set_dt(&led, value);
    be84:	f01d ffcd 	bl	29e22 <gpio_pin_set_dt.isra.0>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    be88:	f240 30e7 	movw	r0, #999	; 0x3e7
    be8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    be90:	2300      	movs	r3, #0
    be92:	eb00 30c4 	add.w	r0, r0, r4, lsl #15
    be96:	2100      	movs	r1, #0
    be98:	f7fd f852 	bl	8f40 <__aeabi_uldivmod>
		k_sleep(K_MSEC(delay));
    be9c:	f01e f800 	bl	29ea0 <k_sleep.isra.0>
    for (;;){
    bea0:	e7e3      	b.n	be6a <activity+0xe>
    bea2:	bf00      	nop
    bea4:	2000b044 	.word	0x2000b044
    bea8:	20008464 	.word	0x20008464

0000beac <adc_thread>:
{
    beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    k_sem_take(&adc_init,K_FOREVER);
    beb0:	f04f 32ff 	mov.w	r2, #4294967295
    beb4:	f04f 33ff 	mov.w	r3, #4294967295
    beb8:	4837      	ldr	r0, [pc, #220]	; (bf98 <adc_thread+0xec>)
{
    beba:	b085      	sub	sp, #20
    k_sem_take(&adc_init,K_FOREVER);
    bebc:	f01d ffa9 	bl	29e12 <k_sem_take.constprop.0.isra.0>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    bec0:	4e36      	ldr	r6, [pc, #216]	; (bf9c <adc_thread+0xf0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    bec2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; bfa0 <adc_thread+0xf4>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bec6:	4c37      	ldr	r4, [pc, #220]	; (bfa4 <adc_thread+0xf8>)
    bec8:	2700      	movs	r7, #0
    beca:	46a3      	mov	fp, r4
			adc_value[adc_channels[i].channel_id] = buf_adc;
    becc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; bfa8 <adc_thread+0xfc>
	if (!spec->channel_cfg_dt_node_exists) {
    bed0:	7963      	ldrb	r3, [r4, #5]
    bed2:	b13b      	cbz	r3, bee4 <adc_thread+0x38>
	seq->channels = BIT(spec->channel_id);
    bed4:	2301      	movs	r3, #1
    bed6:	7922      	ldrb	r2, [r4, #4]
    bed8:	4093      	lsls	r3, r2
    beda:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    bedc:	7c23      	ldrb	r3, [r4, #16]
    bede:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    bee0:	7c63      	ldrb	r3, [r4, #17]
    bee2:	7473      	strb	r3, [r6, #17]
    bee4:	f04f 32ff 	mov.w	r2, #4294967295
    bee8:	f04f 33ff 	mov.w	r3, #4294967295
    beec:	4650      	mov	r0, sl
    beee:	f019 fd0b 	bl	25908 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    bef2:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    bef4:	68ab      	ldr	r3, [r5, #8]
    bef6:	4631      	mov	r1, r6
    bef8:	4628      	mov	r0, r5
    befa:	685b      	ldr	r3, [r3, #4]
    befc:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id] = buf_adc;
    befe:	7922      	ldrb	r2, [r4, #4]
    bf00:	f9b8 1000 	ldrsh.w	r1, [r8]
    bf04:	4b29      	ldr	r3, [pc, #164]	; (bfac <adc_thread+0x100>)
    bf06:	9201      	str	r2, [sp, #4]
    bf08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (flag == 1)
    bf0c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bfb0 <adc_thread+0x104>
	return z_impl_k_mutex_unlock(mutex);
    bf10:	4650      	mov	r0, sl
    bf12:	f019 fd73 	bl	259fc <z_impl_k_mutex_unlock>
    bf16:	f8d9 3000 	ldr.w	r3, [r9]
    bf1a:	9a01      	ldr	r2, [sp, #4]
    bf1c:	2b01      	cmp	r3, #1
    bf1e:	d12d      	bne.n	bf7c <adc_thread+0xd0>
				printk("- %s, channel %d: ", adc_channels[i].dev->name, adc_channels[i].channel_id);
    bf20:	6829      	ldr	r1, [r5, #0]
    bf22:	4824      	ldr	r0, [pc, #144]	; (bfb4 <adc_thread+0x108>)
    bf24:	f01e f9a0 	bl	2a268 <printk>
				printk("%" PRId16, buf_adc);
    bf28:	f9b8 1000 	ldrsh.w	r1, [r8]
    bf2c:	4822      	ldr	r0, [pc, #136]	; (bfb8 <adc_thread+0x10c>)
    bf2e:	f01e f99b 	bl	2a268 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    bf32:	7963      	ldrb	r3, [r4, #5]
				val_mv = buf_adc;
    bf34:	f9b8 5000 	ldrsh.w	r5, [r8]
    bf38:	b1e3      	cbz	r3, bf74 <adc_thread+0xc8>
	if (spec->channel_cfg.differential) {
    bf3a:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bf3c:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    bf3e:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bf42:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bf44:	bf0a      	itet	eq
    bf46:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    bf48:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    bf4a:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bf4c:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bf4e:	bf08      	it	eq
    bf50:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    bf52:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    bf54:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    bf56:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    bf58:	bf44      	itt	mi
    bf5a:	f103 33ff 	addmi.w	r3, r3, #4294967295
    bf5e:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    bf60:	79a0      	ldrb	r0, [r4, #6]
    bf62:	a903      	add	r1, sp, #12
    bf64:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    bf66:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bf68:	f014 fbaa 	bl	206c0 <adc_gain_invert>
	if (ret == 0) {
    bf6c:	b910      	cbnz	r0, bf74 <adc_thread+0xc8>
		*valp = (adc_mv >> resolution);
    bf6e:	9d03      	ldr	r5, [sp, #12]
    bf70:	9b01      	ldr	r3, [sp, #4]
    bf72:	411d      	asrs	r5, r3
				printk(" = %" PRId32 " mV\n", val_mv);
    bf74:	4629      	mov	r1, r5
    bf76:	4811      	ldr	r0, [pc, #68]	; (bfbc <adc_thread+0x110>)
    bf78:	f01e f976 	bl	2a268 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bf7c:	3701      	adds	r7, #1
    bf7e:	2f05      	cmp	r7, #5
    bf80:	f104 0414 	add.w	r4, r4, #20
    bf84:	d1a4      	bne.n	bed0 <adc_thread+0x24>
		flag = 0;
    bf86:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    bf88:	f640 40cd 	movw	r0, #3277	; 0xccd
    bf8c:	2100      	movs	r1, #0
		flag = 0;
    bf8e:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    bf92:	f01d ff85 	bl	29ea0 <k_sleep.isra.0>
	{
    bf96:	e796      	b.n	bec6 <adc_thread+0x1a>
    bf98:	20008c58 	.word	0x20008c58
    bf9c:	20008440 	.word	0x20008440
    bfa0:	2000a704 	.word	0x2000a704
    bfa4:	000333a8 	.word	0x000333a8
    bfa8:	20030f06 	.word	0x20030f06
    bfac:	20030ef6 	.word	0x20030ef6
    bfb0:	2000a700 	.word	0x2000a700
    bfb4:	00034683 	.word	0x00034683
    bfb8:	00034696 	.word	0x00034696
    bfbc:	0003469a 	.word	0x0003469a

0000bfc0 <feed_circular_buffer_thread>:
void feed_circular_buffer_thread(void){
    bfc0:	b570      	push	{r4, r5, r6, lr}
     k_sem_take(&circular_buffer_sh,K_FOREVER);
    bfc2:	4e12      	ldr	r6, [pc, #72]	; (c00c <feed_circular_buffer_thread+0x4c>)
     printk("LOG Circular Buffer\n");
    bfc4:	4d12      	ldr	r5, [pc, #72]	; (c010 <feed_circular_buffer_thread+0x50>)
     dig_probe=gpio_pin_get_dt(DIG_3_ADR);//READS A DIGITAL INPUT
    bfc6:	4c13      	ldr	r4, [pc, #76]	; (c014 <feed_circular_buffer_thread+0x54>)
     k_sem_take(&circular_buffer_sh,K_FOREVER);
    bfc8:	f04f 32ff 	mov.w	r2, #4294967295
    bfcc:	f04f 33ff 	mov.w	r3, #4294967295
    bfd0:	4630      	mov	r0, r6
    bfd2:	f01d ff1e 	bl	29e12 <k_sem_take.constprop.0.isra.0>
	 color(6);
    bfd6:	2006      	movs	r0, #6
    bfd8:	f001 fdc2 	bl	db60 <color>
     printk("LOG Circular Buffer\n");
    bfdc:	4628      	mov	r0, r5
    bfde:	f01e f943 	bl	2a268 <printk>
	 color(255);
    bfe2:	20ff      	movs	r0, #255	; 0xff
    bfe4:	f001 fdbc 	bl	db60 <color>
     dig_probe=gpio_pin_get_dt(DIG_3_ADR);//READS A DIGITAL INPUT
    bfe8:	4620      	mov	r0, r4
    bfea:	f01d fece 	bl	29d8a <gpio_pin_get_dt>
    bfee:	4b0a      	ldr	r3, [pc, #40]	; (c018 <feed_circular_buffer_thread+0x58>)
    bff0:	7018      	strb	r0, [r3, #0]
     feed_circular_buffer();
    bff2:	f001 f91b 	bl	d22c <feed_circular_buffer>
     print_current_position_cb(C_Buffer_Current_Position);
    bff6:	4b09      	ldr	r3, [pc, #36]	; (c01c <feed_circular_buffer_thread+0x5c>)
    bff8:	6818      	ldr	r0, [r3, #0]
    bffa:	f001 fa7d 	bl	d4f8 <print_current_position_cb>
     k_sleep(K_MSEC(100));
    bffe:	f640 40cd 	movw	r0, #3277	; 0xccd
    c002:	2100      	movs	r1, #0
    c004:	f01d ff4c 	bl	29ea0 <k_sleep.isra.0>
   while(1){	
    c008:	e7de      	b.n	bfc8 <feed_circular_buffer_thread+0x8>
    c00a:	bf00      	nop
    c00c:	20008ce8 	.word	0x20008ce8
    c010:	000346a4 	.word	0x000346a4
    c014:	00033414 	.word	0x00033414
    c018:	20031111 	.word	0x20031111
    c01c:	2002f990 	.word	0x2002f990

0000c020 <shoot_minute_save_thread>:
{
    c020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint64_t actual_time = k_uptime_get() / 1000;
    c024:	f01d fec8 	bl	29db8 <k_uptime_get>
    c028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c02c:	2300      	movs	r3, #0
    c02e:	f7fc ff37 	bl	8ea0 <__aeabi_ldivmod>
	h = (actual_time / 3600);
    c032:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    c036:	2300      	movs	r3, #0
	uint64_t actual_time = k_uptime_get() / 1000;
    c038:	460d      	mov	r5, r1
    c03a:	4606      	mov	r6, r0
	h = (actual_time / 3600);
    c03c:	f7fc ff80 	bl	8f40 <__aeabi_uldivmod>
	m = (actual_time - (3600 * h)) / 60;
    c040:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    c044:	fb03 f100 	mul.w	r1, r3, r0
    c048:	1a70      	subs	r0, r6, r1
    c04a:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    c04e:	223c      	movs	r2, #60	; 0x3c
    c050:	2300      	movs	r3, #0
    c052:	f7fc ff75 	bl	8f40 <__aeabi_uldivmod>
    k_sem_take(&timer_init,K_FOREVER); //wait init
    c056:	f04f 32ff 	mov.w	r2, #4294967295
	m = (actual_time - (3600 * h)) / 60;
    c05a:	4605      	mov	r5, r0
    k_sem_take(&timer_init,K_FOREVER); //wait init
    c05c:	f04f 33ff 	mov.w	r3, #4294967295
    c060:	4822      	ldr	r0, [pc, #136]	; (c0ec <shoot_minute_save_thread+0xcc>)
    c062:	f01d fed6 	bl	29e12 <k_sem_take.constprop.0.isra.0>
			k_sem_give(&circular_buffer_sh);
    c066:	f8df 8088 	ldr.w	r8, [pc, #136]	; c0f0 <shoot_minute_save_thread+0xd0>
			if (lora_cycle_minute>=Initial_Setup.interval_uplink){
    c06a:	4e22      	ldr	r6, [pc, #136]	; (c0f4 <shoot_minute_save_thread+0xd4>)
		actual_time = k_uptime_get() / 1000;
    c06c:	f01d fea4 	bl	29db8 <k_uptime_get>
    c070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c074:	2300      	movs	r3, #0
    c076:	f7fc ff13 	bl	8ea0 <__aeabi_ldivmod>
		h = (actual_time / 3600);
    c07a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    c07e:	2300      	movs	r3, #0
		actual_time = k_uptime_get() / 1000;
    c080:	460f      	mov	r7, r1
    c082:	4681      	mov	r9, r0
		h = (actual_time / 3600);
    c084:	f7fc ff5c 	bl	8f40 <__aeabi_uldivmod>
		m = (actual_time - (3600 * h)) / 60;
    c088:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    c08c:	fb03 f100 	mul.w	r1, r3, r0
    c090:	ebb9 0001 	subs.w	r0, r9, r1
    c094:	f04f 0300 	mov.w	r3, #0
    c098:	eb67 71e1 	sbc.w	r1, r7, r1, asr #31
    c09c:	223c      	movs	r2, #60	; 0x3c
    c09e:	f7fc ff4f 	bl	8f40 <__aeabi_uldivmod>
		if (m == (last_minute + 1))
    c0a2:	1c6b      	adds	r3, r5, #1
    c0a4:	4283      	cmp	r3, r0
		m = (actual_time - (3600 * h)) / 60;
    c0a6:	4604      	mov	r4, r0
		if (m == (last_minute + 1))
    c0a8:	d119      	bne.n	c0de <shoot_minute_save_thread+0xbe>
				last_minute = -1;
    c0aa:	283b      	cmp	r0, #59	; 0x3b
    c0ac:	bf18      	it	ne
    c0ae:	4604      	movne	r4, r0
			k_sem_give(&circular_buffer_sh);
    c0b0:	4640      	mov	r0, r8
				last_minute = -1;
    c0b2:	bf08      	it	eq
    c0b4:	f04f 34ff 	moveq.w	r4, #4294967295
			k_sem_give(&circular_buffer_sh);
    c0b8:	f01d fe7c 	bl	29db4 <k_sem_give>
			if (lora_cycle_minute>=Initial_Setup.interval_uplink){
    c0bc:	4b0e      	ldr	r3, [pc, #56]	; (c0f8 <shoot_minute_save_thread+0xd8>)
    c0be:	7832      	ldrb	r2, [r6, #0]
    c0c0:	885b      	ldrh	r3, [r3, #2]
    c0c2:	429a      	cmp	r2, r3
    c0c4:	d304      	bcc.n	c0d0 <shoot_minute_save_thread+0xb0>
				k_sem_give(&lorawan_tx);
    c0c6:	480d      	ldr	r0, [pc, #52]	; (c0fc <shoot_minute_save_thread+0xdc>)
    c0c8:	f01d fe74 	bl	29db4 <k_sem_give>
				lora_cycle_minute=0;
    c0cc:	2300      	movs	r3, #0
    c0ce:	7033      	strb	r3, [r6, #0]
			lora_cycle_minute++;
    c0d0:	7833      	ldrb	r3, [r6, #0]
			printk("Minute Cycle thread \n");
    c0d2:	480b      	ldr	r0, [pc, #44]	; (c100 <shoot_minute_save_thread+0xe0>)
			lora_cycle_minute++;
    c0d4:	3301      	adds	r3, #1
    c0d6:	7033      	strb	r3, [r6, #0]
			printk("Minute Cycle thread \n");
    c0d8:	4625      	mov	r5, r4
    c0da:	f01e f8c5 	bl	2a268 <printk>
		k_sleep(K_MSEC(100));
    c0de:	f640 40cd 	movw	r0, #3277	; 0xccd
    c0e2:	2100      	movs	r1, #0
    c0e4:	f01d fedc 	bl	29ea0 <k_sleep.isra.0>
	{
    c0e8:	e7c0      	b.n	c06c <shoot_minute_save_thread+0x4c>
    c0ea:	bf00      	nop
    c0ec:	20008e08 	.word	0x20008e08
    c0f0:	20008ce8 	.word	0x20008ce8
    c0f4:	20031107 	.word	0x20031107
    c0f8:	2000b044 	.word	0x2000b044
    c0fc:	20008d78 	.word	0x20008d78
    c100:	000346b9 	.word	0x000346b9

0000c104 <alarm_infra_thread>:
			
	}
}

void alarm_infra_thread(void){
    c104:	b570      	push	{r4, r5, r6, lr}

     //WAIT TO TURN ON THE ALARM
	 k_sem_take(&alarm_infra_init,K_FOREVER);
    c106:	f04f 32ff 	mov.w	r2, #4294967295
    c10a:	f04f 33ff 	mov.w	r3, #4294967295
    c10e:	481b      	ldr	r0, [pc, #108]	; (c17c <alarm_infra_thread+0x78>)
    c110:	f01d fe7f 	bl	29e12 <k_sem_take.constprop.0.isra.0>

	 while(1){
	   int32_t reactivate=SLIP_TIME_REACTIVATE*1000;
	   k_sem_take(&alarm_infra,K_FOREVER);
    c114:	4e1a      	ldr	r6, [pc, #104]	; (c180 <alarm_infra_thread+0x7c>)

       alarm_busy=1;
    c116:	4d1b      	ldr	r5, [pc, #108]	; (c184 <alarm_infra_thread+0x80>)
    c118:	2401      	movs	r4, #1
	   k_sem_take(&alarm_infra,K_FOREVER);
    c11a:	f04f 32ff 	mov.w	r2, #4294967295
    c11e:	f04f 33ff 	mov.w	r3, #4294967295
    c122:	4630      	mov	r0, r6
    c124:	f01d fe75 	bl	29e12 <k_sem_take.constprop.0.isra.0>
	   color(1);
    c128:	4620      	mov	r0, r4
       alarm_busy=1;
    c12a:	702c      	strb	r4, [r5, #0]
	   color(1);
    c12c:	f001 fd18 	bl	db60 <color>
    c130:	f023 feef 	bl	2ff12 <sys_clock_cycle_get_32>
    c134:	4601      	mov	r1, r0
       printk("EMERGENCY - Alarm 4 - at %" PRIu32 "\n", k_cycle_get_32());
    c136:	4814      	ldr	r0, [pc, #80]	; (c188 <alarm_infra_thread+0x84>)
    c138:	f01e f896 	bl	2a268 <printk>
	   gpio_pin_set_dt(LED4, ON); //SET LED 4
    c13c:	4621      	mov	r1, r4
    c13e:	4813      	ldr	r0, [pc, #76]	; (c18c <alarm_infra_thread+0x88>)
    c140:	f01d fe6f 	bl	29e22 <gpio_pin_set_dt.isra.0>
	   if(sensor_status.number[SENSOR_DIG_4]<255)sensor_status.number[SENSOR_DIG_4]++;
    c144:	4912      	ldr	r1, [pc, #72]	; (c190 <alarm_infra_thread+0x8c>)
    c146:	4a13      	ldr	r2, [pc, #76]	; (c194 <alarm_infra_thread+0x90>)
    c148:	790b      	ldrb	r3, [r1, #4]
    c14a:	2bff      	cmp	r3, #255	; 0xff
    c14c:	d006      	beq.n	c15c <alarm_infra_thread+0x58>
    c14e:	4423      	add	r3, r4
    c150:	b2db      	uxtb	r3, r3
	   if(sensor_status.number[SENSOR_DIG_4]==1)Initial_Setup.interval_uplink=LORAWAN_INTERVAL_ALARM;
    c152:	42a3      	cmp	r3, r4
	   if(sensor_status.number[SENSOR_DIG_4]<255)sensor_status.number[SENSOR_DIG_4]++;
    c154:	710b      	strb	r3, [r1, #4]
	   if(sensor_status.number[SENSOR_DIG_4]==1)Initial_Setup.interval_uplink=LORAWAN_INTERVAL_ALARM;
    c156:	bf04      	itt	eq
    c158:	2303      	moveq	r3, #3
    c15a:	8053      	strheq	r3, [r2, #2]
	   printk("New Interval UpLink Time: %d minutes\n",Initial_Setup.interval_uplink);
    c15c:	8851      	ldrh	r1, [r2, #2]
    c15e:	480e      	ldr	r0, [pc, #56]	; (c198 <alarm_infra_thread+0x94>)
    c160:	f01e f882 	bl	2a268 <printk>
	   k_sem_give(&lorawan_tx);
    c164:	480d      	ldr	r0, [pc, #52]	; (c19c <alarm_infra_thread+0x98>)
    c166:	f01d fe25 	bl	29db4 <k_sem_give>
	   color(255);
    c16a:	20ff      	movs	r0, #255	; 0xff
    c16c:	f001 fcf8 	bl	db60 <color>
	   k_msleep(reactivate);
    c170:	480b      	ldr	r0, [pc, #44]	; (c1a0 <alarm_infra_thread+0x9c>)
    c172:	f01d fe97 	bl	29ea4 <k_msleep.isra.0>
	   alarm_busy=0;
    c176:	2300      	movs	r3, #0
    c178:	702b      	strb	r3, [r5, #0]
	 while(1){
    c17a:	e7cd      	b.n	c118 <alarm_infra_thread+0x14>
    c17c:	20008c88 	.word	0x20008c88
    c180:	20008c70 	.word	0x20008c70
    c184:	20031110 	.word	0x20031110
    c188:	000346cf 	.word	0x000346cf
    c18c:	20008454 	.word	0x20008454
    c190:	20031108 	.word	0x20031108
    c194:	2000b044 	.word	0x2000b044
    c198:	000346ec 	.word	0x000346ec
    c19c:	20008d78 	.word	0x20008d78
    c1a0:	000186a0 	.word	0x000186a0

0000c1a4 <uart_cb>:
{
    c1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type)
    c1a6:	780b      	ldrb	r3, [r1, #0]
    c1a8:	2b05      	cmp	r3, #5
    c1aa:	d829      	bhi.n	c200 <uart_cb+0x5c>
    c1ac:	e8df f003 	tbb	[pc, r3]
    c1b0:	6b2c9503 	.word	0x6b2c9503
    c1b4:	4984      	.short	0x4984
		if ((evt->data.tx.len == 0) ||
    c1b6:	688b      	ldr	r3, [r1, #8]
    c1b8:	b313      	cbz	r3, c200 <uart_cb+0x5c>
			(!evt->data.tx.buf))
    c1ba:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    c1bc:	b300      	cbz	r0, c200 <uart_cb+0x5c>
		if (aborted_buf){
    c1be:	4a51      	ldr	r2, [pc, #324]	; (c304 <uart_cb+0x160>)
    c1c0:	6813      	ldr	r3, [r2, #0]
    c1c2:	b1fb      	cbz	r3, c204 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    c1c4:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    c1c6:	2300      	movs	r3, #0
    c1c8:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    c1ca:	4a4f      	ldr	r2, [pc, #316]	; (c308 <uart_cb+0x164>)
    c1cc:	6013      	str	r3, [r2, #0]
		k_free(buf);
    c1ce:	f025 fb0b 	bl	317e8 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    c1d2:	2200      	movs	r2, #0
    c1d4:	2300      	movs	r3, #0
    c1d6:	484d      	ldr	r0, [pc, #308]	; (c30c <uart_cb+0x168>)
    c1d8:	f019 fc4e 	bl	25a78 <z_impl_k_queue_get>
		if (!buf)
    c1dc:	b180      	cbz	r0, c200 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS))
    c1de:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c1e2:	1d01      	adds	r1, r0, #4
    c1e4:	484a      	ldr	r0, [pc, #296]	; (c310 <uart_cb+0x16c>)
    c1e6:	f01d fe0c 	bl	29e02 <uart_tx.constprop.0>
    c1ea:	b148      	cbz	r0, c200 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    c1ec:	4b49      	ldr	r3, [pc, #292]	; (c314 <uart_cb+0x170>)
    c1ee:	2202      	movs	r2, #2
    c1f0:	9302      	str	r3, [sp, #8]
    c1f2:	2300      	movs	r3, #0
    c1f4:	4618      	mov	r0, r3
    c1f6:	e9cd 3300 	strd	r3, r3, [sp]
    c1fa:	4947      	ldr	r1, [pc, #284]	; (c318 <uart_cb+0x174>)
			LOG_WRN("Not able to allocate UART receive buffer");
    c1fc:	f01d fdea 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
}
    c200:	b004      	add	sp, #16
    c202:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data);
    c204:	3804      	subs	r0, #4
    c206:	e7e2      	b.n	c1ce <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    c208:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    c20a:	68cb      	ldr	r3, [r1, #12]
    c20c:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
    c210:	4403      	add	r3, r0
		if (disable_req)
    c212:	4842      	ldr	r0, [pc, #264]	; (c31c <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
    c214:	b29b      	uxth	r3, r3
    c216:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		if (disable_req)
    c21a:	7802      	ldrb	r2, [r0, #0]
    c21c:	2a00      	cmp	r2, #0
    c21e:	d1ef      	bne.n	c200 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    c220:	684a      	ldr	r2, [r1, #4]
    c222:	4413      	add	r3, r2
    c224:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c228:	2b0a      	cmp	r3, #10
    c22a:	d001      	beq.n	c230 <uart_cb+0x8c>
    c22c:	2b0d      	cmp	r3, #13
    c22e:	d1e7      	bne.n	c200 <uart_cb+0x5c>
			disable_req = true;
    c230:	2301      	movs	r3, #1
    c232:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    c234:	4836      	ldr	r0, [pc, #216]	; (c310 <uart_cb+0x16c>)
    c236:	6883      	ldr	r3, [r0, #8]
    c238:	695b      	ldr	r3, [r3, #20]
}
    c23a:	b004      	add	sp, #16
    c23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c240:	4718      	bx	r3
		disable_req = false;
    c242:	2400      	movs	r4, #0
    c244:	4b35      	ldr	r3, [pc, #212]	; (c31c <uart_cb+0x178>)
		buf = k_malloc(sizeof(*buf));
    c246:	206c      	movs	r0, #108	; 0x6c
		disable_req = false;
    c248:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    c24a:	f025 fad4 	bl	317f6 <k_malloc>
    c24e:	4603      	mov	r3, r0
		if (buf)
    c250:	b140      	cbz	r0, c264 <uart_cb+0xc0>
			buf->len = 0;
    c252:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    c256:	1d01      	adds	r1, r0, #4
    c258:	482d      	ldr	r0, [pc, #180]	; (c310 <uart_cb+0x16c>)
}
    c25a:	b004      	add	sp, #16
    c25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    c260:	f01d bdc7 	b.w	29df2 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    c264:	4a2e      	ldr	r2, [pc, #184]	; (c320 <uart_cb+0x17c>)
    c266:	9000      	str	r0, [sp, #0]
    c268:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c26c:	492a      	ldr	r1, [pc, #168]	; (c318 <uart_cb+0x174>)
    c26e:	2202      	movs	r2, #2
    c270:	f01d fdb0 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    c274:	f240 6267 	movw	r2, #1639	; 0x667
    c278:	2300      	movs	r3, #0
    c27a:	482a      	ldr	r0, [pc, #168]	; (c324 <uart_cb+0x180>)
}
    c27c:	b004      	add	sp, #16
    c27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    c282:	f019 be83 	b.w	25f8c <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    c286:	206c      	movs	r0, #108	; 0x6c
    c288:	f025 fab5 	bl	317f6 <k_malloc>
    c28c:	4603      	mov	r3, r0
		if (buf)
    c28e:	b160      	cbz	r0, c2aa <uart_cb+0x106>
			buf->len = 0;
    c290:	2200      	movs	r2, #0
    c292:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	return api->rx_buf_rsp(dev, buf, len);
    c296:	481e      	ldr	r0, [pc, #120]	; (c310 <uart_cb+0x16c>)
    c298:	1d19      	adds	r1, r3, #4
    c29a:	6882      	ldr	r2, [r0, #8]
    c29c:	6914      	ldr	r4, [r2, #16]
    c29e:	2264      	movs	r2, #100	; 0x64
    c2a0:	4623      	mov	r3, r4
}
    c2a2:	b004      	add	sp, #16
    c2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2a8:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    c2aa:	4a1d      	ldr	r2, [pc, #116]	; (c320 <uart_cb+0x17c>)
    c2ac:	491a      	ldr	r1, [pc, #104]	; (c318 <uart_cb+0x174>)
    c2ae:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c2b2:	9000      	str	r0, [sp, #0]
    c2b4:	2202      	movs	r2, #2
    c2b6:	e7a1      	b.n	c1fc <uart_cb+0x58>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    c2b8:	684b      	ldr	r3, [r1, #4]
    c2ba:	1f19      	subs	r1, r3, #4
		if (buf->len > 0)
    c2bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
    c2c0:	b12b      	cbz	r3, c2ce <uart_cb+0x12a>
			k_fifo_put(&fifo_uart_rx_data, buf);
    c2c2:	4819      	ldr	r0, [pc, #100]	; (c328 <uart_cb+0x184>)
}
    c2c4:	b004      	add	sp, #16
    c2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    c2ca:	f024 be4c 	b.w	30f66 <k_queue_append>
			k_free(buf);
    c2ce:	4608      	mov	r0, r1
}
    c2d0:	b004      	add	sp, #16
    c2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    c2d6:	f025 ba87 	b.w	317e8 <k_free>
		if (!aborted_buf)
    c2da:	4a0a      	ldr	r2, [pc, #40]	; (c304 <uart_cb+0x160>)
    c2dc:	6813      	ldr	r3, [r2, #0]
    c2de:	b90b      	cbnz	r3, c2e4 <uart_cb+0x140>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    c2e0:	684b      	ldr	r3, [r1, #4]
    c2e2:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    c2e4:	4808      	ldr	r0, [pc, #32]	; (c308 <uart_cb+0x164>)
    c2e6:	688b      	ldr	r3, [r1, #8]
    c2e8:	6801      	ldr	r1, [r0, #0]
    c2ea:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    c2ec:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    c2ee:	6003      	str	r3, [r0, #0]
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c2f0:	f8b1 2064 	ldrh.w	r2, [r1, #100]	; 0x64
    c2f4:	4806      	ldr	r0, [pc, #24]	; (c310 <uart_cb+0x16c>)
    c2f6:	1ad2      	subs	r2, r2, r3
    c2f8:	4419      	add	r1, r3
}
    c2fa:	b004      	add	sp, #16
    c2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c300:	f01d bd7f 	b.w	29e02 <uart_tx.constprop.0>
    c304:	2000a654 	.word	0x2000a654
    c308:	2000a650 	.word	0x2000a650
    c30c:	20008e68 	.word	0x20008e68
    c310:	00032998 	.word	0x00032998
    c314:	00034712 	.word	0x00034712
    c318:	00033108 	.word	0x00033108
    c31c:	20031106 	.word	0x20031106
    c320:	00034730 	.word	0x00034730
    c324:	20009948 	.word	0x20009948
    c328:	20008e50 	.word	0x20008e50

0000c32c <gnss_write_thread>:
{
    c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c330:	b085      	sub	sp, #20
	uint64_t time = k_uptime_get();
    c332:	f01d fd41 	bl	29db8 <k_uptime_get>
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c336:	4b76      	ldr	r3, [pc, #472]	; (c510 <gnss_write_thread+0x1e4>)
    c338:	4f76      	ldr	r7, [pc, #472]	; (c514 <gnss_write_thread+0x1e8>)
    c33a:	889a      	ldrh	r2, [r3, #4]
    c33c:	6818      	ldr	r0, [r3, #0]
    c33e:	799b      	ldrb	r3, [r3, #6]
    c340:	f8ad 2008 	strh.w	r2, [sp, #8]
    c344:	f88d 300a 	strb.w	r3, [sp, #10]
    c348:	2300      	movs	r3, #0
    c34a:	f8ad 300b 	strh.w	r3, [sp, #11]
    c34e:	f88d 300d 	strb.w	r3, [sp, #13]
    char marker[2]="\n";
    c352:	230a      	movs	r3, #10
    c354:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    c358:	f8ad 3000 	strh.w	r3, [sp]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c35c:	2220      	movs	r2, #32
    char marker[2]="\n";
    c35e:	463b      	mov	r3, r7
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c360:	9001      	str	r0, [sp, #4]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c362:	3c01      	subs	r4, #1
    c364:	f803 2b01 	strb.w	r2, [r3], #1
    c368:	d1fb      	bne.n	c362 <gnss_write_thread+0x36>
	buf2a = k_malloc(sizeof(*buf2a));
    c36a:	206c      	movs	r0, #108	; 0x6c
    c36c:	f025 fa43 	bl	317f6 <k_malloc>
	k_sem_take(&gps_init,K_FOREVER); 
    c370:	f04f 32ff 	mov.w	r2, #4294967295
    c374:	f04f 33ff 	mov.w	r3, #4294967295
    c378:	4867      	ldr	r0, [pc, #412]	; (c518 <gnss_write_thread+0x1ec>)
    c37a:	f01d fd4a 	bl	29e12 <k_sem_take.constprop.0.isra.0>
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
    c37e:	46a1      	mov	r9, r4
	uint8_t state = 0, pkt_init = 0;
    c380:	4626      	mov	r6, r4
    c382:	4625      	mov	r5, r4
    c384:	f8df 8194 	ldr.w	r8, [pc, #404]	; c51c <gnss_write_thread+0x1f0>
   				ret = strstr(buffer, nmea_id);
    c388:	f8df a188 	ldr.w	sl, [pc, #392]	; c514 <gnss_write_thread+0x1e8>
    c38c:	f04f 32ff 	mov.w	r2, #4294967295
    c390:	f04f 33ff 	mov.w	r3, #4294967295
    c394:	4640      	mov	r0, r8
    c396:	f019 fb6f 	bl	25a78 <z_impl_k_queue_get>
    c39a:	4683      	mov	fp, r0
	z_impl_k_queue_init(queue);
    c39c:	4640      	mov	r0, r8
    c39e:	f024 fdd6 	bl	30f4e <z_impl_k_queue_init>
		if (buf2a->len > 0)
    c3a2:	f8bb 1068 	ldrh.w	r1, [fp, #104]	; 0x68
    c3a6:	b1d9      	cbz	r1, c3e0 <gnss_write_thread+0xb4>
			k = (buf2a->len);
    c3a8:	4689      	mov	r9, r1
			while (i < k && pkt_init == 0)
    c3aa:	b9ce      	cbnz	r6, c3e0 <gnss_write_thread+0xb4>
			index = 0;
    c3ac:	4632      	mov	r2, r6
			i = 0;
    c3ae:	4630      	mov	r0, r6
    c3b0:	f10b 0c03 	add.w	ip, fp, #3
				switch (buf2a->data[i])
    c3b4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    c3b8:	2b52      	cmp	r3, #82	; 0x52
    c3ba:	d806      	bhi.n	c3ca <gnss_write_thread+0x9e>
    c3bc:	2b46      	cmp	r3, #70	; 0x46
    c3be:	d85d      	bhi.n	c47c <gnss_write_thread+0x150>
    c3c0:	2b24      	cmp	r3, #36	; 0x24
    c3c2:	d07b      	beq.n	c4bc <gnss_write_thread+0x190>
    c3c4:	2b43      	cmp	r3, #67	; 0x43
    c3c6:	f000 808e 	beq.w	c4e6 <gnss_write_thread+0x1ba>
				i++;
    c3ca:	3001      	adds	r0, #1
			while (i < k && pkt_init == 0)
    c3cc:	4288      	cmp	r0, r1
    c3ce:	d3f1      	bcc.n	c3b4 <gnss_write_thread+0x88>
			if (state == 6 && pkt_init == 0)
    c3d0:	2d06      	cmp	r5, #6
    c3d2:	d105      	bne.n	c3e0 <gnss_write_thread+0xb4>
					if (buf2a->data[index]!=0x0D) {
    c3d4:	f10b 0b04 	add.w	fp, fp, #4
				while (index < k)
    c3d8:	428a      	cmp	r2, r1
    c3da:	f0c0 8089 	bcc.w	c4f0 <gnss_write_thread+0x1c4>
				pkt_init=1;
    c3de:	2601      	movs	r6, #1
	return z_impl_k_queue_get(queue, timeout);
    c3e0:	f04f 33ff 	mov.w	r3, #4294967295
    c3e4:	f04f 32ff 	mov.w	r2, #4294967295
    c3e8:	4640      	mov	r0, r8
    c3ea:	f019 fb45 	bl	25a78 <z_impl_k_queue_get>
		if (buf2a->len > 0)
    c3ee:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d0ca      	beq.n	c38c <gnss_write_thread+0x60>
			if ((pkt_init >= 1) && (bfcnt < BUFF_SIZE)  )
    c3f6:	b16e      	cbz	r6, c414 <gnss_write_thread+0xe8>
    c3f8:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c3fc:	d20d      	bcs.n	c41a <gnss_write_thread+0xee>
    c3fe:	f109 0203 	add.w	r2, r9, #3
    c402:	1cc3      	adds	r3, r0, #3
    c404:	4410      	add	r0, r2
				while ((index < k)  && (bfcnt < BUFF_SIZE))
    c406:	4298      	cmp	r0, r3
    c408:	d002      	beq.n	c410 <gnss_write_thread+0xe4>
    c40a:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c40e:	d177      	bne.n	c500 <gnss_write_thread+0x1d4>
				pkt_init++;
    c410:	3601      	adds	r6, #1
    c412:	b2f6      	uxtb	r6, r6
			if (bfcnt >= BUFF_SIZE - 1)
    c414:	f5b4 7fef 	cmp.w	r4, #478	; 0x1de
    c418:	d9b8      	bls.n	c38c <gnss_write_thread+0x60>
   				ret = strstr(buffer, nmea_id);
    c41a:	a901      	add	r1, sp, #4
    c41c:	4650      	mov	r0, sl
   				i=parse_comma_delimited_str(token, field, 20);
    c41e:	4c40      	ldr	r4, [pc, #256]	; (c520 <gnss_write_thread+0x1f4>)
   				ret = strstr(buffer, nmea_id);
    c420:	f025 fbc7 	bl	31bb2 <strstr>
   				token = strtok(ret, marker);
    c424:	4669      	mov	r1, sp
    c426:	f01b facf 	bl	279c8 <strtok>
   				i=parse_comma_delimited_str(token, field, 20);
    c42a:	2214      	movs	r2, #20
    c42c:	4621      	mov	r1, r4
    c42e:	f01d fd68 	bl	29f02 <parse_comma_delimited_str>
				if (i==12){
    c432:	280c      	cmp	r0, #12
    c434:	d117      	bne.n	c466 <gnss_write_thread+0x13a>
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c436:	68a3      	ldr	r3, [r4, #8]
    c438:	4d3a      	ldr	r5, [pc, #232]	; (c524 <gnss_write_thread+0x1f8>)
    c43a:	781b      	ldrb	r3, [r3, #0]
    c43c:	3b40      	subs	r3, #64	; 0x40
    c43e:	b2db      	uxtb	r3, r3
				  if (position.gps_fixed==1){  
    c440:	2b01      	cmp	r3, #1
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c442:	732b      	strb	r3, [r5, #12]
				  if (position.gps_fixed==1){  
    c444:	d10f      	bne.n	c466 <gnss_write_thread+0x13a>
				   position.latitude=atof(field[3]);
    c446:	68e0      	ldr	r0, [r4, #12]
    c448:	f025 f9da 	bl	31800 <atof>
    c44c:	f7fc fa7a 	bl	8944 <__aeabi_d2f>
    c450:	6068      	str	r0, [r5, #4]
				   position.longitude=atof(field[5]);
    c452:	6960      	ldr	r0, [r4, #20]
    c454:	f025 f9d4 	bl	31800 <atof>
    c458:	f7fc fa74 	bl	8944 <__aeabi_d2f>
				   fill_date(field[1],field[9]);
    c45c:	6a61      	ldr	r1, [r4, #36]	; 0x24
				   position.longitude=atof(field[5]);
    c45e:	60a8      	str	r0, [r5, #8]
				   fill_date(field[1],field[9]);
    c460:	6860      	ldr	r0, [r4, #4]
    c462:	f000 fdbb 	bl	cfdc <fill_date>
				pkt_init=1;
    c466:	463b      	mov	r3, r7
    c468:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
				while (index < BUFF_SIZE)buffer[index++] = 0x20;//space
    c46c:	2220      	movs	r2, #32
    c46e:	3c01      	subs	r4, #1
    c470:	f803 2b01 	strb.w	r2, [r3], #1
    c474:	d1fb      	bne.n	c46e <gnss_write_thread+0x142>
				pkt_init = 0;
    c476:	4626      	mov	r6, r4
				state = 0;
    c478:	4625      	mov	r5, r4
    c47a:	e787      	b.n	c38c <gnss_write_thread+0x60>
				switch (buf2a->data[i])
    c47c:	3b47      	subs	r3, #71	; 0x47
    c47e:	2b0b      	cmp	r3, #11
    c480:	d8a3      	bhi.n	c3ca <gnss_write_thread+0x9e>
    c482:	f20f 0e08 	addw	lr, pc, #8
    c486:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    c48a:	bf00      	nop
    c48c:	0000c4c7 	.word	0x0000c4c7
    c490:	0000c3cb 	.word	0x0000c3cb
    c494:	0000c3cb 	.word	0x0000c3cb
    c498:	0000c3cb 	.word	0x0000c3cb
    c49c:	0000c3cb 	.word	0x0000c3cb
    c4a0:	0000c3cb 	.word	0x0000c3cb
    c4a4:	0000c4df 	.word	0x0000c4df
    c4a8:	0000c3cb 	.word	0x0000c3cb
    c4ac:	0000c3cb 	.word	0x0000c3cb
    c4b0:	0000c4cf 	.word	0x0000c4cf
    c4b4:	0000c3cb 	.word	0x0000c3cb
    c4b8:	0000c4d7 	.word	0x0000c4d7
					if (state == 0)state = 1;
    c4bc:	2d01      	cmp	r5, #1
    c4be:	bf38      	it	cc
    c4c0:	2501      	movcc	r5, #1
    c4c2:	b2ed      	uxtb	r5, r5
    c4c4:	e781      	b.n	c3ca <gnss_write_thread+0x9e>
					if (state == 1)state = 2;
    c4c6:	2d01      	cmp	r5, #1
    c4c8:	bf08      	it	eq
    c4ca:	2502      	moveq	r5, #2
    c4cc:	e77d      	b.n	c3ca <gnss_write_thread+0x9e>
					if (state == 2)state = 3;
    c4ce:	2d02      	cmp	r5, #2
    c4d0:	bf08      	it	eq
    c4d2:	2503      	moveq	r5, #3
    c4d4:	e779      	b.n	c3ca <gnss_write_thread+0x9e>
					if (state == 3)state = 4;
    c4d6:	2d03      	cmp	r5, #3
    c4d8:	bf08      	it	eq
    c4da:	2504      	moveq	r5, #4
    c4dc:	e775      	b.n	c3ca <gnss_write_thread+0x9e>
					if (state == 4)state = 5;
    c4de:	2d04      	cmp	r5, #4
    c4e0:	bf08      	it	eq
    c4e2:	2505      	moveq	r5, #5
    c4e4:	e771      	b.n	c3ca <gnss_write_thread+0x9e>
					if (state == 5){
    c4e6:	2d05      	cmp	r5, #5
						state = 6;
    c4e8:	bf04      	itt	eq
    c4ea:	2506      	moveq	r5, #6
					    index = i - 5;
    c4ec:	1f42      	subeq	r2, r0, #5
    c4ee:	e76c      	b.n	c3ca <gnss_write_thread+0x9e>
					if (buf2a->data[index]!=0x0D) {
    c4f0:	f81b 3002 	ldrb.w	r3, [fp, r2]
					index++;
    c4f4:	3201      	adds	r2, #1
					if (buf2a->data[index]!=0x0D) {
    c4f6:	2b0d      	cmp	r3, #13
						buffer[bfcnt] = buf2a->data[index];
    c4f8:	bf1c      	itt	ne
    c4fa:	553b      	strbne	r3, [r7, r4]
						bfcnt++;
    c4fc:	3401      	addne	r4, #1
					index++;
    c4fe:	e76b      	b.n	c3d8 <gnss_write_thread+0xac>
					if (buf2a->data[index]!=0x0D) {
    c500:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c504:	2a0d      	cmp	r2, #13
						buffer[bfcnt] = buf2a->data[index];
    c506:	bf1c      	itt	ne
    c508:	553a      	strbne	r2, [r7, r4]
						bfcnt++;
    c50a:	3401      	addne	r4, #1
					index++;
    c50c:	e77b      	b.n	c406 <gnss_write_thread+0xda>
    c50e:	bf00      	nop
    c510:	00033160 	.word	0x00033160
    c514:	20030f26 	.word	0x20030f26
    c518:	20008d18 	.word	0x20008d18
    c51c:	20008e38 	.word	0x20008e38
    c520:	2000a600 	.word	0x2000a600
    c524:	2000a68c 	.word	0x2000a68c

0000c528 <ble_cmd_received_thread>:
{
    c528:	b538      	push	{r3, r4, r5, lr}
	k_sem_take(&cmd_init_ok, K_FOREVER);
    c52a:	f04f 32ff 	mov.w	r2, #4294967295
    c52e:	f04f 33ff 	mov.w	r3, #4294967295
    c532:	480c      	ldr	r0, [pc, #48]	; (c564 <ble_cmd_received_thread+0x3c>)
    c534:	f01d fc6d 	bl	29e12 <k_sem_take.constprop.0.isra.0>
    printk("cmd interpreter init OK\n");
    c538:	480b      	ldr	r0, [pc, #44]	; (c568 <ble_cmd_received_thread+0x40>)
    c53a:	f01d fe95 	bl	2a268 <printk>
    c53e:	4d0b      	ldr	r5, [pc, #44]	; (c56c <ble_cmd_received_thread+0x44>)
		printk("cmd interpreter\n");
    c540:	4c0b      	ldr	r4, [pc, #44]	; (c570 <ble_cmd_received_thread+0x48>)
    c542:	f04f 32ff 	mov.w	r2, #4294967295
    c546:	f04f 33ff 	mov.w	r3, #4294967295
    c54a:	4628      	mov	r0, r5
    c54c:	f019 fa94 	bl	25a78 <z_impl_k_queue_get>
		cmd_interpreter(buf->data,buf->len);
    c550:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    c554:	3004      	adds	r0, #4
    c556:	f001 fb57 	bl	dc08 <cmd_interpreter>
		printk("cmd interpreter\n");
    c55a:	4620      	mov	r0, r4
    c55c:	f01d fe84 	bl	2a268 <printk>
	for (;;)
    c560:	e7ef      	b.n	c542 <ble_cmd_received_thread+0x1a>
    c562:	bf00      	nop
    c564:	20008d00 	.word	0x20008d00
    c568:	00034759 	.word	0x00034759
    c56c:	20008e20 	.word	0x20008e20
    c570:	00034772 	.word	0x00034772

0000c574 <ble_write_thread>:
{
    c574:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    c576:	f04f 32ff 	mov.w	r2, #4294967295
    c57a:	f04f 33ff 	mov.w	r3, #4294967295
    c57e:	480d      	ldr	r0, [pc, #52]	; (c5b4 <ble_write_thread+0x40>)
    c580:	f01d fc47 	bl	29e12 <k_sem_take.constprop.0.isra.0>
    c584:	4d0c      	ldr	r5, [pc, #48]	; (c5b8 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    c586:	4e0d      	ldr	r6, [pc, #52]	; (c5bc <ble_write_thread+0x48>)
    c588:	f04f 32ff 	mov.w	r2, #4294967295
    c58c:	f04f 33ff 	mov.w	r3, #4294967295
    c590:	4628      	mov	r0, r5
    c592:	f019 fa71 	bl	25a78 <z_impl_k_queue_get>
    c596:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len))
    c598:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c59c:	1d01      	adds	r1, r0, #4
    c59e:	2000      	movs	r0, #0
    c5a0:	f004 fc02 	bl	10da8 <bt_nus_send>
    c5a4:	b110      	cbz	r0, c5ac <ble_write_thread+0x38>
			printk("Falha aqui- Failed to send data over BLE connection");
    c5a6:	4630      	mov	r0, r6
    c5a8:	f01d fe5e 	bl	2a268 <printk>
		k_free(buf);
    c5ac:	4620      	mov	r0, r4
    c5ae:	f025 f91b 	bl	317e8 <k_free>
	{
    c5b2:	e7e9      	b.n	c588 <ble_write_thread+0x14>
    c5b4:	20008ca0 	.word	0x20008ca0
    c5b8:	20008e50 	.word	0x20008e50
    c5bc:	00034783 	.word	0x00034783

0000c5c0 <lorawan_thread>:
{
    c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lora_dev = DEVICE_DT_GET(DT_NODELABEL(lora0));
    c5c2:	4c4a      	ldr	r4, [pc, #296]	; (c6ec <lorawan_thread+0x12c>)
    c5c4:	4b4a      	ldr	r3, [pc, #296]	; (c6f0 <lorawan_thread+0x130>)
    k_sem_take(&lorawan_init, K_FOREVER);  // WAIT FOR INIT
    c5c6:	f04f 32ff 	mov.w	r2, #4294967295
    lora_dev = DEVICE_DT_GET(DT_NODELABEL(lora0));
    c5ca:	6023      	str	r3, [r4, #0]
    k_sem_take(&lorawan_init, K_FOREVER);  // WAIT FOR INIT
    c5cc:	4849      	ldr	r0, [pc, #292]	; (c6f4 <lorawan_thread+0x134>)
    c5ce:	f04f 33ff 	mov.w	r3, #4294967295
    c5d2:	f01d fc1e 	bl	29e12 <k_sem_take.constprop.0.isra.0>
	color(10);
    c5d6:	200a      	movs	r0, #10
    c5d8:	f001 fac2 	bl	db60 <color>
    printk("LoraWan Thread Started\n\n");
    c5dc:	4846      	ldr	r0, [pc, #280]	; (c6f8 <lorawan_thread+0x138>)
    c5de:	f01d fe43 	bl	2a268 <printk>
    color(255);
    c5e2:	20ff      	movs	r0, #255	; 0xff
    c5e4:	f001 fabc 	bl	db60 <color>
	if (!device_is_ready(lora_dev)) {
    c5e8:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c5ea:	f024 fb4c 	bl	30c86 <z_device_is_ready>
    c5ee:	b930      	cbnz	r0, c5fe <lorawan_thread+0x3e>
		printk("%s: device not ready.\n\n", lora_dev->name);
    c5f0:	6823      	ldr	r3, [r4, #0]
    c5f2:	4842      	ldr	r0, [pc, #264]	; (c6fc <lorawan_thread+0x13c>)
    c5f4:	6819      	ldr	r1, [r3, #0]
}
    c5f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("%s: device not ready.\n\n", lora_dev->name);
    c5fa:	f01d be35 	b.w	2a268 <printk>
    lorawan_set_region(LORAWAN_REGION_EU868);
    c5fe:	2005      	movs	r0, #5
    c600:	f005 fdf2 	bl	121e8 <lorawan_set_region>
	lorawan_register_downlink_callback(&downlink_cb);
    c604:	483e      	ldr	r0, [pc, #248]	; (c700 <lorawan_thread+0x140>)
    c606:	f005 ffa7 	bl	12558 <lorawan_register_downlink_callback>
	lorawan_register_dr_changed_callback(lorwan_datarate_changed);
    c60a:	483e      	ldr	r0, [pc, #248]	; (c704 <lorawan_thread+0x144>)
    c60c:	f005 ffb4 	bl	12578 <lorawan_register_dr_changed_callback>
	lorawan_set_conf_msg_tries(10);
    c610:	200a      	movs	r0, #10
    c612:	f01f fa0e 	bl	2ba32 <lorawan_set_conf_msg_tries>
   	        printk("Joining network over OTAA\n\n");
    c616:	4e3c      	ldr	r6, [pc, #240]	; (c708 <lorawan_thread+0x148>)
	  Initial_Setup.joined=ON;
    c618:	4d3c      	ldr	r5, [pc, #240]	; (c70c <lorawan_thread+0x14c>)
			join_cfg.mode = LORAWAN_CLASS_A; //was A
    c61a:	4c3d      	ldr	r4, [pc, #244]	; (c710 <lorawan_thread+0x150>)
			join_cfg.dev_eui = dev_eui;
    c61c:	4f3d      	ldr	r7, [pc, #244]	; (c714 <lorawan_thread+0x154>)
    	    color(10);
    c61e:	200a      	movs	r0, #10
    c620:	f001 fa9e 	bl	db60 <color>
   	        printk("Joining network over OTAA\n\n");
    c624:	4630      	mov	r0, r6
    c626:	f01d fe1f 	bl	2a268 <printk>
			color(255);
    c62a:	20ff      	movs	r0, #255	; 0xff
    c62c:	f001 fa98 	bl	db60 <color>
            k_sleep(K_MSEC(1000));
    c630:	2100      	movs	r1, #0
    c632:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c636:	f01d fc33 	bl	29ea0 <k_sleep.isra.0>
            lorawan_start();
    c63a:	f005 ffa3 	bl	12584 <lorawan_start>
			k_sleep(K_MSEC(500));//500ms
    c63e:	2100      	movs	r1, #0
    c640:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c644:	f01d fc2c 	bl	29ea0 <k_sleep.isra.0>
		    lorawan_enable_adr( true );
    c648:	2001      	movs	r0, #1
    c64a:	f005 fef7 	bl	1243c <lorawan_enable_adr>
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    c64e:	f014 f82b 	bl	206a8 <z_impl_sys_rand32_get>
			join_cfg.mode = LORAWAN_CLASS_A; //was A
    c652:	2300      	movs	r3, #0
    c654:	7523      	strb	r3, [r4, #20]
			join_cfg.otaa.join_eui = join_eui;
    c656:	4b30      	ldr	r3, [pc, #192]	; (c718 <lorawan_thread+0x158>)
    		join_cfg.otaa.dev_nonce = dev_nonce;
    c658:	b280      	uxth	r0, r0
			join_cfg.otaa.join_eui = join_eui;
    c65a:	6023      	str	r3, [r4, #0]
			join_cfg.otaa.app_key = app_key;
    c65c:	4b2f      	ldr	r3, [pc, #188]	; (c71c <lorawan_thread+0x15c>)
    		join_cfg.otaa.dev_nonce = dev_nonce;
    c65e:	60e0      	str	r0, [r4, #12]
		    ret = lorawan_join(&join_cfg);
    c660:	482b      	ldr	r0, [pc, #172]	; (c710 <lorawan_thread+0x150>)
			join_cfg.otaa.nwk_key = app_key;
    c662:	e9c4 3301 	strd	r3, r3, [r4, #4]
			join_cfg.dev_eui = dev_eui;
    c666:	6127      	str	r7, [r4, #16]
		    ret = lorawan_join(&join_cfg);
    c668:	f005 fdee 	bl	12248 <lorawan_join>
			if (ret<0){
    c66c:	2800      	cmp	r0, #0
				 color(10);
    c66e:	f04f 000a 	mov.w	r0, #10
			if (ret<0){
    c672:	db2c      	blt.n	c6ce <lorawan_thread+0x10e>
	  color(10);
    c674:	f001 fa74 	bl	db60 <color>
	  printk("Joined OTAA\n\n");
    c678:	4829      	ldr	r0, [pc, #164]	; (c720 <lorawan_thread+0x160>)
    c67a:	f01d fdf5 	bl	2a268 <printk>
	  color(255);
    c67e:	20ff      	movs	r0, #255	; 0xff
    c680:	f001 fa6e 	bl	db60 <color>
	  Initial_Setup.joined=ON;
    c684:	2301      	movs	r3, #1
    c686:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
      for(int i=0;i<=15;i++){Initial_Setup.nwk_key[i]=join_cfg.otaa.nwk_key[i];}
    c68a:	6863      	ldr	r3, [r4, #4]
    c68c:	4925      	ldr	r1, [pc, #148]	; (c724 <lorawan_thread+0x164>)
    c68e:	1e5a      	subs	r2, r3, #1
    c690:	330f      	adds	r3, #15
    c692:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    c696:	429a      	cmp	r2, r3
    c698:	f801 0f01 	strb.w	r0, [r1, #1]!
    c69c:	d1f9      	bne.n	c692 <lorawan_thread+0xd2>
      Initial_Setup.dev_nonce=join_cfg.otaa.dev_nonce;
    c69e:	68e3      	ldr	r3, [r4, #12]
	  lorawan_reconnect=0;
    c6a0:	4c21      	ldr	r4, [pc, #132]	; (c728 <lorawan_thread+0x168>)
      Initial_Setup.dev_nonce=join_cfg.otaa.dev_nonce;
    c6a2:	646b      	str	r3, [r5, #68]	; 0x44
      flash_write_setup();
    c6a4:	f000 fc86 	bl	cfb4 <flash_write_setup>
	  flash_read_setup();
    c6a8:	f000 fc8e 	bl	cfc8 <flash_read_setup>
	  print_setup();
    c6ac:	f001 f9da 	bl	da64 <print_setup>
	  lorawan_reconnect=0;
    c6b0:	2300      	movs	r3, #0
    c6b2:	7023      	strb	r3, [r4, #0]
      while (!lorawan_reconnect) {
    c6b4:	7823      	ldrb	r3, [r4, #0]
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	d1af      	bne.n	c61a <lorawan_thread+0x5a>
		  k_sem_take(&lorawan_tx, K_FOREVER);
    c6ba:	f04f 32ff 	mov.w	r2, #4294967295
    c6be:	f04f 33ff 	mov.w	r3, #4294967295
    c6c2:	481a      	ldr	r0, [pc, #104]	; (c72c <lorawan_thread+0x16c>)
    c6c4:	f01d fba5 	bl	29e12 <k_sem_take.constprop.0.isra.0>
		  lorawan_tx_data();
    c6c8:	f001 f872 	bl	d7b0 <lorawan_tx_data>
    c6cc:	e7f2      	b.n	c6b4 <lorawan_thread+0xf4>
				 color(10);
    c6ce:	f001 fa47 	bl	db60 <color>
				 printk("Failed..Waiting some seconds to try join again\n\n");
    c6d2:	4817      	ldr	r0, [pc, #92]	; (c730 <lorawan_thread+0x170>)
    c6d4:	f01d fdc8 	bl	2a268 <printk>
				 color(255);
    c6d8:	20ff      	movs	r0, #255	; 0xff
    c6da:	f001 fa41 	bl	db60 <color>
			     k_sleep(K_MSEC(53000));
    c6de:	f44f 10d4 	mov.w	r0, #1736704	; 0x1a8000
    c6e2:	2100      	movs	r1, #0
    c6e4:	f01d fbdc 	bl	29ea0 <k_sleep.isra.0>
   	 while ( ret < 0 ) {
    c6e8:	e799      	b.n	c61e <lorawan_thread+0x5e>
    c6ea:	bf00      	nop
    c6ec:	2000a670 	.word	0x2000a670
    c6f0:	00032a40 	.word	0x00032a40
    c6f4:	20008d48 	.word	0x20008d48
    c6f8:	000347b7 	.word	0x000347b7
    c6fc:	000347d0 	.word	0x000347d0
    c700:	20008434 	.word	0x20008434
    c704:	0000b6f5 	.word	0x0000b6f5
    c708:	000347e8 	.word	0x000347e8
    c70c:	2000b044 	.word	0x2000b044
    c710:	2000a658 	.word	0x2000a658
    c714:	20008a58 	.word	0x20008a58
    c718:	20008a50 	.word	0x20008a50
    c71c:	20008a40 	.word	0x20008a40
    c720:	00034804 	.word	0x00034804
    c724:	2000b075 	.word	0x2000b075
    c728:	2003110f 	.word	0x2003110f
    c72c:	20008d78 	.word	0x20008d78
    c730:	00034812 	.word	0x00034812

0000c734 <flash_init>:
{
    c734:	b538      	push	{r3, r4, r5, lr}
    color(10);
    c736:	200a      	movs	r0, #10
    c738:	f001 fa12 	bl	db60 <color>
	fs.flash_device = NVS_PARTITION_DEVICE;
    c73c:	4c3c      	ldr	r4, [pc, #240]	; (c830 <flash_init+0xfc>)
    c73e:	483d      	ldr	r0, [pc, #244]	; (c834 <flash_init+0x100>)
    c740:	62a0      	str	r0, [r4, #40]	; 0x28
    c742:	f024 faa0 	bl	30c86 <z_device_is_ready>
	if (!device_is_ready(fs.flash_device))
    c746:	b930      	cbnz	r0, c756 <flash_init+0x22>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    c748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c74a:	483b      	ldr	r0, [pc, #236]	; (c838 <flash_init+0x104>)
    c74c:	6819      	ldr	r1, [r3, #0]
}
    c74e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c752:	f01d bd89 	b.w	2a268 <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    c756:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    c758:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    c75a:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    c75c:	4d37      	ldr	r5, [pc, #220]	; (c83c <flash_init+0x108>)
    c75e:	462a      	mov	r2, r5
    c760:	f023 f8e4 	bl	2f92c <z_impl_flash_get_page_info_by_offs>
	if (rc)
    c764:	b120      	cbz	r0, c770 <flash_init+0x3c>
		printk("Unable to get page info\n");
    c766:	4836      	ldr	r0, [pc, #216]	; (c840 <flash_init+0x10c>)
}
    c768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Flash Init failed\n");
    c76c:	f01d bd7c 	b.w	2a268 <printk>
	fs.sector_size = info.size;
    c770:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    c772:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    c774:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; // NUMBER OF SECTORS total 0X800000 BYTES
    c776:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c77a:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    c77c:	f003 facc 	bl	fd18 <nvs_mount>
	if (rc)
    c780:	b108      	cbz	r0, c786 <flash_init+0x52>
		printk("Flash Init failed\n");
    c782:	4830      	ldr	r0, [pc, #192]	; (c844 <flash_init+0x110>)
    c784:	e7f0      	b.n	c768 <flash_init+0x34>
	rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    c786:	4d30      	ldr	r5, [pc, #192]	; (c848 <flash_init+0x114>)
    c788:	2304      	movs	r3, #4
    c78a:	462a      	mov	r2, r5
    c78c:	2101      	movs	r1, #1
    c78e:	4620      	mov	r0, r4
    c790:	f01e fa86 	bl	2aca0 <nvs_read>
	if (rc > 0)
    c794:	2800      	cmp	r0, #0
    c796:	dd2c      	ble.n	c7f2 <flash_init+0xbe>
		printk("Id: %d, button2_counter: %d\n",
    c798:	2101      	movs	r1, #1
    c79a:	682a      	ldr	r2, [r5, #0]
    c79c:	482b      	ldr	r0, [pc, #172]	; (c84c <flash_init+0x118>)
    c79e:	f01d fd63 	bl	2a268 <printk>
	rc = nvs_read(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c7a2:	4c2b      	ldr	r4, [pc, #172]	; (c850 <flash_init+0x11c>)
    c7a4:	2304      	movs	r3, #4
    c7a6:	4622      	mov	r2, r4
    c7a8:	2102      	movs	r1, #2
    c7aa:	4821      	ldr	r0, [pc, #132]	; (c830 <flash_init+0xfc>)
    c7ac:	f01e fa78 	bl	2aca0 <nvs_read>
	if (rc > 0)
    c7b0:	2800      	cmp	r0, #0
    c7b2:	dd29      	ble.n	c808 <flash_init+0xd4>
		printk("Id: %d, Current Position: %d\n",
    c7b4:	6822      	ldr	r2, [r4, #0]
    c7b6:	2102      	movs	r1, #2
    c7b8:	4826      	ldr	r0, [pc, #152]	; (c854 <flash_init+0x120>)
    c7ba:	f01d fd55 	bl	2a268 <printk>
		if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS)
    c7be:	4b26      	ldr	r3, [pc, #152]	; (c858 <flash_init+0x124>)
    c7c0:	681a      	ldr	r2, [r3, #0]
    c7c2:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
			C_Buffer_Free_Position = C_Buffer_Current_Position + 1;
    c7c6:	bf3e      	ittt	cc
    c7c8:	6822      	ldrcc	r2, [r4, #0]
    c7ca:	3201      	addcc	r2, #1
    c7cc:	601a      	strcc	r2, [r3, #0]
		if (C_Buffer_Free_Position == CIRCULAR_BUFFER_ELEMENTS)
    c7ce:	681a      	ldr	r2, [r3, #0]
    c7d0:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    c7d4:	d101      	bne.n	c7da <flash_init+0xa6>
			C_Buffer_Free_Position = 0;
    c7d6:	2200      	movs	r2, #0
    c7d8:	601a      	str	r2, [r3, #0]
	rc = nvs_read(&fs, SETUP_POSITION, &Initial_Setup, sizeof(Initial_Setup));
    c7da:	2103      	movs	r1, #3
    c7dc:	234c      	movs	r3, #76	; 0x4c
    c7de:	4a1f      	ldr	r2, [pc, #124]	; (c85c <flash_init+0x128>)
    c7e0:	4813      	ldr	r0, [pc, #76]	; (c830 <flash_init+0xfc>)
    c7e2:	f01e fa5d 	bl	2aca0 <nvs_read>
	if (rc > 0)
    c7e6:	2800      	cmp	r0, #0
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c7e8:	f04f 0103 	mov.w	r1, #3
	if (rc > 0)
    c7ec:	dd17      	ble.n	c81e <flash_init+0xea>
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c7ee:	481c      	ldr	r0, [pc, #112]	; (c860 <flash_init+0x12c>)
    c7f0:	e7ad      	b.n	c74e <flash_init+0x1a>
		printk("No Reboot counter found, adding it at id %d\n",
    c7f2:	2101      	movs	r1, #1
    c7f4:	481b      	ldr	r0, [pc, #108]	; (c864 <flash_init+0x130>)
    c7f6:	f01d fd37 	bl	2a268 <printk>
		(void)nvs_write(&fs, BOOT_POSITION, &button2_counter,
    c7fa:	2304      	movs	r3, #4
    c7fc:	462a      	mov	r2, r5
    c7fe:	2101      	movs	r1, #1
    c800:	4620      	mov	r0, r4
    c802:	f003 fc5b 	bl	100bc <nvs_write>
    c806:	e7cc      	b.n	c7a2 <flash_init+0x6e>
		printk("Current Position counter found, adding it at id %d\n",
    c808:	2102      	movs	r1, #2
    c80a:	4817      	ldr	r0, [pc, #92]	; (c868 <flash_init+0x134>)
    c80c:	f01d fd2c 	bl	2a268 <printk>
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c810:	2304      	movs	r3, #4
    c812:	4622      	mov	r2, r4
    c814:	2102      	movs	r1, #2
    c816:	4806      	ldr	r0, [pc, #24]	; (c830 <flash_init+0xfc>)
    c818:	f003 fc50 	bl	100bc <nvs_write>
    c81c:	e7dd      	b.n	c7da <flash_init+0xa6>
		printk("No initial Setup found, adding it on position=%d\n",SETUP_POSITION);
    c81e:	4813      	ldr	r0, [pc, #76]	; (c86c <flash_init+0x138>)
    c820:	f01d fd22 	bl	2a268 <printk>
		setup_initialize();
    c824:	f001 f8be 	bl	d9a4 <setup_initialize>
}
    c828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		flash_write_setup();
    c82c:	f000 bbc2 	b.w	cfb4 <flash_write_setup>
    c830:	2000a6d0 	.word	0x2000a6d0
    c834:	00032a28 	.word	0x00032a28
    c838:	00034843 	.word	0x00034843
    c83c:	2000a6c4 	.word	0x2000a6c4
    c840:	00034861 	.word	0x00034861
    c844:	0003487a 	.word	0x0003487a
    c848:	2000a6c0 	.word	0x2000a6c0
    c84c:	0003488d 	.word	0x0003488d
    c850:	2002f990 	.word	0x2002f990
    c854:	000348d7 	.word	0x000348d7
    c858:	2002f994 	.word	0x2002f994
    c85c:	2000b044 	.word	0x2000b044
    c860:	00034929 	.word	0x00034929
    c864:	000348aa 	.word	0x000348aa
    c868:	000348f5 	.word	0x000348f5
    c86c:	0003493b 	.word	0x0003493b

0000c870 <send_bluetooth>:
{
    c870:	b084      	sub	sp, #16
    c872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c876:	ac06      	add	r4, sp, #24
    c878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c87c:	203d      	movs	r0, #61	; 0x3d
	uint32_t comprimento = buf.len;
    c87e:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c882:	f024 ffb8 	bl	317f6 <k_malloc>
	int k = 0;
    c886:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c888:	4605      	mov	r5, r0
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c88a:	f8df 8054 	ldr.w	r8, [pc, #84]	; c8e0 <send_bluetooth+0x70>
	while (k < comprimento - 1)
    c88e:	1e77      	subs	r7, r6, #1
    c890:	42a7      	cmp	r7, r4
    c892:	d91d      	bls.n	c8d0 <send_bluetooth+0x60>
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c894:	42b4      	cmp	r4, r6
    c896:	d301      	bcc.n	c89c <send_bluetooth+0x2c>
    c898:	2200      	movs	r2, #0
    c89a:	e00f      	b.n	c8bc <send_bluetooth+0x4c>
    c89c:	2200      	movs	r2, #0
    c89e:	1e6b      	subs	r3, r5, #1
			data[small_pkt] = buf.data[k];
    c8a0:	f104 0118 	add.w	r1, r4, #24
    c8a4:	4469      	add	r1, sp
			small_pkt++;
    c8a6:	3201      	adds	r2, #1
			*(packet_data + small_pkt) = buf.data[k];
    c8a8:	7909      	ldrb	r1, [r1, #4]
			small_pkt++;
    c8aa:	b292      	uxth	r2, r2
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c8ac:	2a3d      	cmp	r2, #61	; 0x3d
			*(packet_data + small_pkt) = buf.data[k];
    c8ae:	f803 1f01 	strb.w	r1, [r3, #1]!
			k++;
    c8b2:	f104 0401 	add.w	r4, r4, #1
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c8b6:	d001      	beq.n	c8bc <send_bluetooth+0x4c>
    c8b8:	42a6      	cmp	r6, r4
    c8ba:	d8f1      	bhi.n	c8a0 <send_bluetooth+0x30>
		if (bt_nus_send(NULL, packet_data, small_pkt))
    c8bc:	4629      	mov	r1, r5
    c8be:	2000      	movs	r0, #0
    c8c0:	f004 fa72 	bl	10da8 <bt_nus_send>
    c8c4:	2800      	cmp	r0, #0
    c8c6:	d0e3      	beq.n	c890 <send_bluetooth+0x20>
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c8c8:	4640      	mov	r0, r8
    c8ca:	f01d fccd 	bl	2a268 <printk>
    c8ce:	e7df      	b.n	c890 <send_bluetooth+0x20>
	k_free(packet_data);
    c8d0:	4628      	mov	r0, r5
    c8d2:	f024 ff89 	bl	317e8 <k_free>
}
    c8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c8da:	2000      	movs	r0, #0
    c8dc:	b004      	add	sp, #16
    c8de:	4770      	bx	lr
    c8e0:	0003496d 	.word	0x0003496d

0000c8e4 <send_protobuf_thread>:
{
    c8e4:	b510      	push	{r4, lr}
		k_sem_take(&send_proto, K_FOREVER);
    c8e6:	4c05      	ldr	r4, [pc, #20]	; (c8fc <send_protobuf_thread+0x18>)
    c8e8:	f04f 32ff 	mov.w	r2, #4294967295
    c8ec:	f04f 33ff 	mov.w	r3, #4294967295
    c8f0:	4620      	mov	r0, r4
    c8f2:	f01d fa8e 	bl	29e12 <k_sem_take.constprop.0.isra.0>
		send_protobuf();
    c8f6:	f01d fae5 	bl	29ec4 <send_protobuf>
	while (1)
    c8fa:	e7f5      	b.n	c8e8 <send_protobuf_thread+0x4>
    c8fc:	20008df0 	.word	0x20008df0

0000c900 <configure_all_buttons>:
{
    c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c902:	4c36      	ldr	r4, [pc, #216]	; (c9dc <configure_all_buttons+0xdc>)
	color(14);
    c904:	200e      	movs	r0, #14
    c906:	f001 f92b 	bl	db60 <color>
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c90a:	4620      	mov	r0, r4
    c90c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c910:	f01d fa9b 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c914:	4620      	mov	r0, r4
    c916:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c91a:	f01d faab 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    c91e:	4930      	ldr	r1, [pc, #192]	; (c9e0 <configure_all_buttons+0xe0>)
    c920:	4b30      	ldr	r3, [pc, #192]	; (c9e4 <configure_all_buttons+0xe4>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c922:	4c31      	ldr	r4, [pc, #196]	; (c9e8 <configure_all_buttons+0xe8>)
    c924:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c926:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c92a:	4620      	mov	r0, r4
    c92c:	608b      	str	r3, [r1, #8]
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c92e:	4d2f      	ldr	r5, [pc, #188]	; (c9ec <configure_all_buttons+0xec>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c930:	f01d fa71 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c934:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c936:	4f2e      	ldr	r7, [pc, #184]	; (c9f0 <configure_all_buttons+0xf0>)
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c938:	2217      	movs	r2, #23
    c93a:	4631      	mov	r1, r6
    c93c:	4628      	mov	r0, r5
    c93e:	f01d fc93 	bl	2a268 <printk>
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c942:	4638      	mov	r0, r7
    c944:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c948:	f01d fa7f 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c94c:	4638      	mov	r0, r7
    c94e:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c952:	f01d fa8f 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c956:	4927      	ldr	r1, [pc, #156]	; (c9f4 <configure_all_buttons+0xf4>)
    c958:	4b27      	ldr	r3, [pc, #156]	; (c9f8 <configure_all_buttons+0xf8>)
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c95a:	4620      	mov	r0, r4
    c95c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c95e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c962:	4f26      	ldr	r7, [pc, #152]	; (c9fc <configure_all_buttons+0xfc>)
    c964:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c966:	f01d fa56 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    c96a:	2218      	movs	r2, #24
    c96c:	4631      	mov	r1, r6
    c96e:	4628      	mov	r0, r5
    c970:	f01d fc7a 	bl	2a268 <printk>
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c974:	4638      	mov	r0, r7
    c976:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c97a:	f01d fa66 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON3_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c97e:	4638      	mov	r0, r7
    c980:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c984:	f01d fa76 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c988:	491d      	ldr	r1, [pc, #116]	; (ca00 <configure_all_buttons+0x100>)
    c98a:	4b1e      	ldr	r3, [pc, #120]	; (ca04 <configure_all_buttons+0x104>)
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c98c:	4620      	mov	r0, r4
    c98e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c990:	f44f 7380 	mov.w	r3, #256	; 0x100
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c994:	4f1c      	ldr	r7, [pc, #112]	; (ca08 <configure_all_buttons+0x108>)
    c996:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c998:	f01d fa3d 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    c99c:	2208      	movs	r2, #8
    c99e:	4631      	mov	r1, r6
    c9a0:	4628      	mov	r0, r5
    c9a2:	f01d fc61 	bl	2a268 <printk>
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c9a6:	4638      	mov	r0, r7
    c9a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c9ac:	f01d fa4d 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON4_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c9b0:	4638      	mov	r0, r7
    c9b2:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c9b6:	f01d fa5d 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c9ba:	4914      	ldr	r1, [pc, #80]	; (ca0c <configure_all_buttons+0x10c>)
    c9bc:	4b14      	ldr	r3, [pc, #80]	; (ca10 <configure_all_buttons+0x110>)
	gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    c9be:	4620      	mov	r0, r4
    c9c0:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c9c2:	f44f 7300 	mov.w	r3, #512	; 0x200
    c9c6:	608b      	str	r3, [r1, #8]
    c9c8:	f01d fa25 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c9cc:	4631      	mov	r1, r6
    c9ce:	4628      	mov	r0, r5
}
    c9d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c9d4:	2209      	movs	r2, #9
    c9d6:	f01d bc47 	b.w	2a268 <printk>
    c9da:	bf00      	nop
    c9dc:	0003344c 	.word	0x0003344c
    c9e0:	2000a76c 	.word	0x2000a76c
    c9e4:	0000bd5d 	.word	0x0000bd5d
    c9e8:	00032938 	.word	0x00032938
    c9ec:	00034991 	.word	0x00034991
    c9f0:	00033444 	.word	0x00033444
    c9f4:	2000a760 	.word	0x2000a760
    c9f8:	0000bd31 	.word	0x0000bd31
    c9fc:	0003343c 	.word	0x0003343c
    ca00:	2000a754 	.word	0x2000a754
    ca04:	0000b6b5 	.word	0x0000b6b5
    ca08:	00033434 	.word	0x00033434
    ca0c:	2000a748 	.word	0x2000a748
    ca10:	0000b6d5 	.word	0x0000b6d5

0000ca14 <configure_digital_inputs>:
{
    ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    ca16:	4c48      	ldr	r4, [pc, #288]	; (cb38 <configure_digital_inputs+0x124>)
    color(14);
    ca18:	200e      	movs	r0, #14
    ca1a:	f001 f8a1 	bl	db60 <color>
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    ca1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ca22:	4620      	mov	r0, r4
    ca24:	f01d fa11 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 4 Value:%d \n", gpio_pin_get_dt(DIG_0_ADR));
    ca28:	4620      	mov	r0, r4
    ca2a:	f01d f9ae 	bl	29d8a <gpio_pin_get_dt>
    ca2e:	4601      	mov	r1, r0
    ca30:	4842      	ldr	r0, [pc, #264]	; (cb3c <configure_digital_inputs+0x128>)
    ca32:	f01d fc19 	bl	2a268 <printk>
	gpio_pin_interrupt_configure_dt(DIG_0_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    ca36:	4620      	mov	r0, r4
    ca38:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    ca3c:	f01d fa1a 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    ca40:	493f      	ldr	r1, [pc, #252]	; (cb40 <configure_digital_inputs+0x12c>)
    ca42:	4b40      	ldr	r3, [pc, #256]	; (cb44 <configure_digital_inputs+0x130>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    ca44:	4c40      	ldr	r4, [pc, #256]	; (cb48 <configure_digital_inputs+0x134>)
    ca46:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    ca48:	2310      	movs	r3, #16
    ca4a:	4620      	mov	r0, r4
    ca4c:	608b      	str	r3, [r1, #8]
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    ca4e:	4d3f      	ldr	r5, [pc, #252]	; (cb4c <configure_digital_inputs+0x138>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    ca50:	f01d f9e1 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    ca54:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    ca56:	4f3e      	ldr	r7, [pc, #248]	; (cb50 <configure_digital_inputs+0x13c>)
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    ca58:	2204      	movs	r2, #4
    ca5a:	4631      	mov	r1, r6
    ca5c:	4628      	mov	r0, r5
    ca5e:	f01d fc03 	bl	2a268 <printk>
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    ca62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ca66:	4638      	mov	r0, r7
    ca68:	f01d f9ef 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 5 Value:%d \n", gpio_pin_get_dt(DIG_1_ADR));
    ca6c:	4638      	mov	r0, r7
    ca6e:	f01d f98c 	bl	29d8a <gpio_pin_get_dt>
    ca72:	4601      	mov	r1, r0
    ca74:	4837      	ldr	r0, [pc, #220]	; (cb54 <configure_digital_inputs+0x140>)
    ca76:	f01d fbf7 	bl	2a268 <printk>
	gpio_pin_interrupt_configure_dt(DIG_1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    ca7a:	4638      	mov	r0, r7
    ca7c:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    ca80:	f01d f9f8 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    ca84:	4934      	ldr	r1, [pc, #208]	; (cb58 <configure_digital_inputs+0x144>)
    ca86:	4b35      	ldr	r3, [pc, #212]	; (cb5c <configure_digital_inputs+0x148>)
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    ca88:	4f35      	ldr	r7, [pc, #212]	; (cb60 <configure_digital_inputs+0x14c>)
    ca8a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    ca8c:	2320      	movs	r3, #32
	gpio_add_callback(DIG_1.port, DIG_1_CB);
    ca8e:	4620      	mov	r0, r4
    ca90:	608b      	str	r3, [r1, #8]
    ca92:	f01d f9c0 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    ca96:	2205      	movs	r2, #5
    ca98:	4631      	mov	r1, r6
    ca9a:	4628      	mov	r0, r5
    ca9c:	f01d fbe4 	bl	2a268 <printk>
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    caa0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    caa4:	4638      	mov	r0, r7
    caa6:	f01d f9d0 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 6 Value:%d \n", gpio_pin_get_dt(DIG_2_ADR));
    caaa:	4638      	mov	r0, r7
    caac:	f01d f96d 	bl	29d8a <gpio_pin_get_dt>
    cab0:	4601      	mov	r1, r0
    cab2:	482c      	ldr	r0, [pc, #176]	; (cb64 <configure_digital_inputs+0x150>)
    cab4:	f01d fbd8 	bl	2a268 <printk>
	gpio_pin_interrupt_configure_dt(DIG_2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    cab8:	4638      	mov	r0, r7
    caba:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    cabe:	f01d f9d9 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    cac2:	4929      	ldr	r1, [pc, #164]	; (cb68 <configure_digital_inputs+0x154>)
    cac4:	4b29      	ldr	r3, [pc, #164]	; (cb6c <configure_digital_inputs+0x158>)
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    cac6:	4620      	mov	r0, r4
    cac8:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    caca:	2340      	movs	r3, #64	; 0x40
    gpio_pin_configure_dt(DIG_3_ADR, GPIO_INPUT);
    cacc:	4f28      	ldr	r7, [pc, #160]	; (cb70 <configure_digital_inputs+0x15c>)
    cace:	608b      	str	r3, [r1, #8]
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    cad0:	f01d f9a1 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    cad4:	2206      	movs	r2, #6
    cad6:	4631      	mov	r1, r6
    cad8:	4628      	mov	r0, r5
    cada:	f01d fbc5 	bl	2a268 <printk>
    gpio_pin_configure_dt(DIG_3_ADR, GPIO_INPUT);
    cade:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    cae2:	4638      	mov	r0, r7
    cae4:	f01d f9b1 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	printk("(Led4_Status)GPIO 0 Pin 27 Value:%d \n", gpio_pin_get_dt(DIG_3_ADR));
    cae8:	4638      	mov	r0, r7
    caea:	f01d f94e 	bl	29d8a <gpio_pin_get_dt>
	gpio_pin_configure_dt(DIG_4_ADR, GPIO_INPUT);
    caee:	4f21      	ldr	r7, [pc, #132]	; (cb74 <configure_digital_inputs+0x160>)
	printk("(Led4_Status)GPIO 0 Pin 27 Value:%d \n", gpio_pin_get_dt(DIG_3_ADR));
    caf0:	4601      	mov	r1, r0
    caf2:	4821      	ldr	r0, [pc, #132]	; (cb78 <configure_digital_inputs+0x164>)
    caf4:	f01d fbb8 	bl	2a268 <printk>
	gpio_pin_configure_dt(DIG_4_ADR, GPIO_INPUT);
    caf8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    cafc:	4638      	mov	r0, r7
    cafe:	f01d f9a4 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 7 Value:%d \n", gpio_pin_get_dt(DIG_4_ADR));
    cb02:	4638      	mov	r0, r7
    cb04:	f01d f941 	bl	29d8a <gpio_pin_get_dt>
    cb08:	4601      	mov	r1, r0
    cb0a:	481c      	ldr	r0, [pc, #112]	; (cb7c <configure_digital_inputs+0x168>)
    cb0c:	f01d fbac 	bl	2a268 <printk>
	gpio_pin_interrupt_configure_dt(DIG_4_ADR, GPIO_INT_LEVEL_ACTIVE);
    cb10:	4638      	mov	r0, r7
    cb12:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
    cb16:	f01d f9ad 	bl	29e74 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    cb1a:	4919      	ldr	r1, [pc, #100]	; (cb80 <configure_digital_inputs+0x16c>)
    cb1c:	4b19      	ldr	r3, [pc, #100]	; (cb84 <configure_digital_inputs+0x170>)
	gpio_add_callback(DIG_4.port, DIG_4_CB);
    cb1e:	4620      	mov	r0, r4
    cb20:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    cb22:	2380      	movs	r3, #128	; 0x80
    cb24:	608b      	str	r3, [r1, #8]
    cb26:	f01d f976 	bl	29e16 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_4.port->name, DIG_4.pin);
    cb2a:	4631      	mov	r1, r6
    cb2c:	4628      	mov	r0, r5
}
    cb2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up Digital Input at %s pin %d\n", DIG_4.port->name, DIG_4.pin);
    cb32:	2207      	movs	r2, #7
    cb34:	f01d bb98 	b.w	2a268 <printk>
    cb38:	0003342c 	.word	0x0003342c
    cb3c:	000349ad 	.word	0x000349ad
    cb40:	2000a73c 	.word	0x2000a73c
    cb44:	0000b679 	.word	0x0000b679
    cb48:	00032920 	.word	0x00032920
    cb4c:	000349c5 	.word	0x000349c5
    cb50:	00033424 	.word	0x00033424
    cb54:	000349e8 	.word	0x000349e8
    cb58:	2000a730 	.word	0x2000a730
    cb5c:	0000b68d 	.word	0x0000b68d
    cb60:	0003341c 	.word	0x0003341c
    cb64:	00034a00 	.word	0x00034a00
    cb68:	2000a724 	.word	0x2000a724
    cb6c:	0000b6a1 	.word	0x0000b6a1
    cb70:	00033414 	.word	0x00033414
    cb74:	0003340c 	.word	0x0003340c
    cb78:	00034a18 	.word	0x00034a18
    cb7c:	00034a3e 	.word	0x00034a3e
    cb80:	2000a718 	.word	0x2000a718
    cb84:	0000b765 	.word	0x0000b765

0000cb88 <configure_led>:
{
    cb88:	b508      	push	{r3, lr}
	gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    cb8a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cb8e:	480a      	ldr	r0, [pc, #40]	; (cbb8 <configure_led+0x30>)
    cb90:	f01d f95b 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    cb94:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cb98:	4808      	ldr	r0, [pc, #32]	; (cbbc <configure_led+0x34>)
    cb9a:	f01d f956 	bl	29e4a <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    cb9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cba2:	4807      	ldr	r0, [pc, #28]	; (cbc0 <configure_led+0x38>)
    cba4:	f01d f951 	bl	29e4a <gpio_pin_configure_dt.isra.0>
}
    cba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    cbac:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cbb0:	4804      	ldr	r0, [pc, #16]	; (cbc4 <configure_led+0x3c>)
    cbb2:	f01d b94a 	b.w	29e4a <gpio_pin_configure_dt.isra.0>
    cbb6:	bf00      	nop
    cbb8:	2000846c 	.word	0x2000846c
    cbbc:	20008464 	.word	0x20008464
    cbc0:	2000845c 	.word	0x2000845c
    cbc4:	20008454 	.word	0x20008454

0000cbc8 <turn_off_all_leds>:
{
    cbc8:	b508      	push	{r3, lr}
	gpio_pin_set_dt(LED1, OFF);
    cbca:	2100      	movs	r1, #0
    cbcc:	4808      	ldr	r0, [pc, #32]	; (cbf0 <turn_off_all_leds+0x28>)
    cbce:	f01d f928 	bl	29e22 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED2, OFF);
    cbd2:	2100      	movs	r1, #0
    cbd4:	4807      	ldr	r0, [pc, #28]	; (cbf4 <turn_off_all_leds+0x2c>)
    cbd6:	f01d f924 	bl	29e22 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED3, OFF);
    cbda:	2100      	movs	r1, #0
    cbdc:	4806      	ldr	r0, [pc, #24]	; (cbf8 <turn_off_all_leds+0x30>)
    cbde:	f01d f920 	bl	29e22 <gpio_pin_set_dt.isra.0>
}
    cbe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(LED4, OFF);
    cbe6:	2100      	movs	r1, #0
    cbe8:	4804      	ldr	r0, [pc, #16]	; (cbfc <turn_off_all_leds+0x34>)
    cbea:	f01d b91a 	b.w	29e22 <gpio_pin_set_dt.isra.0>
    cbee:	bf00      	nop
    cbf0:	2000846c 	.word	0x2000846c
    cbf4:	20008464 	.word	0x20008464
    cbf8:	2000845c 	.word	0x2000845c
    cbfc:	20008454 	.word	0x20008454

0000cc00 <configure_adc>:
{
    cc00:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    cc02:	2500      	movs	r5, #0
    cc04:	4c12      	ldr	r4, [pc, #72]	; (cc50 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev))
    cc06:	f854 0c06 	ldr.w	r0, [r4, #-6]
    cc0a:	f024 f83c 	bl	30c86 <z_device_is_ready>
    cc0e:	b920      	cbnz	r0, cc1a <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    cc10:	4810      	ldr	r0, [pc, #64]	; (cc54 <configure_adc+0x54>)
}
    cc12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    cc16:	f01d bb27 	b.w	2a268 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    cc1a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    cc1e:	b16b      	cbz	r3, cc3c <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    cc20:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    cc24:	6883      	ldr	r3, [r0, #8]
    cc26:	4621      	mov	r1, r4
    cc28:	681b      	ldr	r3, [r3, #0]
    cc2a:	4798      	blx	r3
		if (err < 0)
    cc2c:	1e02      	subs	r2, r0, #0
    cc2e:	da08      	bge.n	cc42 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    cc30:	4629      	mov	r1, r5
}
    cc32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    cc36:	4808      	ldr	r0, [pc, #32]	; (cc58 <configure_adc+0x58>)
    cc38:	f01d bb16 	b.w	2a268 <printk>
		return -ENOTSUP;
    cc3c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    cc40:	e7f6      	b.n	cc30 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    cc42:	3501      	adds	r5, #1
    cc44:	2d05      	cmp	r5, #5
    cc46:	f104 0414 	add.w	r4, r4, #20
    cc4a:	d1dc      	bne.n	cc06 <configure_adc+0x6>
}
    cc4c:	bd38      	pop	{r3, r4, r5, pc}
    cc4e:	bf00      	nop
    cc50:	000333ae 	.word	0x000333ae
    cc54:	00034a56 	.word	0x00034a56
    cc58:	00034a77 	.word	0x00034a77

0000cc5c <main>:
{
    cc5c:	b570      	push	{r4, r5, r6, lr}
    color(3);
    cc5e:	2003      	movs	r0, #3
{
    cc60:	b08a      	sub	sp, #40	; 0x28
    color(3);
    cc62:	f000 ff7d 	bl	db60 <color>
	return z_impl_k_mutex_init(mutex);
    cc66:	487b      	ldr	r0, [pc, #492]	; (ce54 <main+0x1f8>)
    cc68:	f024 f8f7 	bl	30e5a <z_impl_k_mutex_init>
	configure_led();
    cc6c:	f7ff ff8c 	bl	cb88 <configure_led>
	turn_off_all_leds();
    cc70:	f7ff ffaa 	bl	cbc8 <turn_off_all_leds>
	configure_all_buttons();
    cc74:	f7ff fe44 	bl	c900 <configure_all_buttons>
	configure_digital_inputs();
    cc78:	f7ff fecc 	bl	ca14 <configure_digital_inputs>
	configure_adc();
    cc7c:	f7ff ffc0 	bl	cc00 <configure_adc>
    cc80:	4d75      	ldr	r5, [pc, #468]	; (ce58 <main+0x1fc>)
    cc82:	4628      	mov	r0, r5
    cc84:	f023 ffff 	bl	30c86 <z_device_is_ready>
	if (!device_is_ready(uart))
    cc88:	b1d8      	cbz	r0, ccc2 <main+0x66>
	rx = k_malloc(sizeof(*rx));
    cc8a:	206c      	movs	r0, #108	; 0x6c
    cc8c:	f024 fdb3 	bl	317f6 <k_malloc>
	if (rx)
    cc90:	4604      	mov	r4, r0
    cc92:	b1b0      	cbz	r0, ccc2 <main+0x66>
		rx->len = 0;
    cc94:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    cc96:	4971      	ldr	r1, [pc, #452]	; (ce5c <main+0x200>)
		rx->len = 0;
    cc98:	f8a0 6068 	strh.w	r6, [r0, #104]	; 0x68
	k_work_init_delayable(&uart_work, uart_work_handler);
    cc9c:	4870      	ldr	r0, [pc, #448]	; (ce60 <main+0x204>)
    cc9e:	f024 fa3d 	bl	3111c <k_work_init_delayable>
	if (api->callback_set == NULL) {
    cca2:	68ab      	ldr	r3, [r5, #8]
    cca4:	681b      	ldr	r3, [r3, #0]
    cca6:	b973      	cbnz	r3, ccc6 <main+0x6a>
		k_free(rx);
    cca8:	4620      	mov	r0, r4
    ccaa:	f024 fd9d 	bl	317e8 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    ccae:	4b6d      	ldr	r3, [pc, #436]	; (ce64 <main+0x208>)
    ccb0:	2201      	movs	r2, #1
    ccb2:	9302      	str	r3, [sp, #8]
    ccb4:	2300      	movs	r3, #0
    ccb6:	496c      	ldr	r1, [pc, #432]	; (ce68 <main+0x20c>)
    ccb8:	4618      	mov	r0, r3
    ccba:	e9cd 3300 	strd	r3, r3, [sp]
    ccbe:	f01d f889 	bl	29dd4 <z_log_msg_runtime_create.constprop.0>
		error();
    ccc2:	f01d f915 	bl	29ef0 <error>
	return api->callback_set(dev, callback, user_data);
    ccc6:	4632      	mov	r2, r6
    ccc8:	4628      	mov	r0, r5
    ccca:	4968      	ldr	r1, [pc, #416]	; (ce6c <main+0x210>)
    cccc:	4798      	blx	r3
	if (err)
    ccce:	2800      	cmp	r0, #0
    ccd0:	d1ea      	bne.n	cca8 <main+0x4c>
	tx = k_malloc(sizeof(*tx));
    ccd2:	206c      	movs	r0, #108	; 0x6c
    ccd4:	f024 fd8f 	bl	317f6 <k_malloc>
	if (tx)
    ccd8:	4606      	mov	r6, r0
    ccda:	2800      	cmp	r0, #0
    ccdc:	d0f1      	beq.n	ccc2 <main+0x66>
		pos = snprintf(tx->data, sizeof(tx->data),
    ccde:	1d03      	adds	r3, r0, #4
    cce0:	4618      	mov	r0, r3
    cce2:	4963      	ldr	r1, [pc, #396]	; (ce70 <main+0x214>)
    cce4:	f024 ff2c 	bl	31b40 <strcpy>
		tx->len = pos;
    cce8:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ccea:	4601      	mov	r1, r0
		tx->len = pos;
    ccec:	f8a6 2068 	strh.w	r2, [r6, #104]	; 0x68
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ccf0:	4628      	mov	r0, r5
    ccf2:	f01d f886 	bl	29e02 <uart_tx.constprop.0>
	if (err)
    ccf6:	4601      	mov	r1, r0
    ccf8:	b118      	cbz	r0, cd02 <main+0xa6>
		printf("Cannot display welcome message (err: %d)", err);
    ccfa:	485e      	ldr	r0, [pc, #376]	; (ce74 <main+0x218>)
    ccfc:	f01a fe30 	bl	27960 <iprintf>
	if (err)
    cd00:	e7df      	b.n	ccc2 <main+0x66>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    cd02:	4628      	mov	r0, r5
    cd04:	1d21      	adds	r1, r4, #4
    cd06:	f01d f874 	bl	29df2 <uart_rx_enable.constprop.0>
	if (err)
    cd0a:	2800      	cmp	r0, #0
    cd0c:	d1d9      	bne.n	ccc2 <main+0x66>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    cd0e:	485a      	ldr	r0, [pc, #360]	; (ce78 <main+0x21c>)
    cd10:	f00f fd34 	bl	1c77c <bt_conn_auth_cb_register>
		if (err)
    cd14:	b128      	cbz	r0, cd22 <main+0xc6>
			printk("Failed to register authorization callbacks.\n");
    cd16:	4859      	ldr	r0, [pc, #356]	; (ce7c <main+0x220>)
}
    cd18:	b00a      	add	sp, #40	; 0x28
    cd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    cd1e:	f01d baa3 	b.w	2a268 <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    cd22:	4857      	ldr	r0, [pc, #348]	; (ce80 <main+0x224>)
    cd24:	f00f fd44 	bl	1c7b0 <bt_conn_auth_info_cb_register>
		if (err)
    cd28:	b108      	cbz	r0, cd2e <main+0xd2>
			printk("Failed to register authorization info callbacks.\n");
    cd2a:	4856      	ldr	r0, [pc, #344]	; (ce84 <main+0x228>)
    cd2c:	e7f4      	b.n	cd18 <main+0xbc>
	err = bt_enable(NULL);
    cd2e:	f00d fe0b 	bl	1a948 <bt_enable>
	if (err)
    cd32:	2800      	cmp	r0, #0
    cd34:	d1c5      	bne.n	ccc2 <main+0x66>
    color(6);
    cd36:	2006      	movs	r0, #6
    cd38:	f000 ff12 	bl	db60 <color>
	printf("Bluetooth initialized \n\r");
    cd3c:	4852      	ldr	r0, [pc, #328]	; (ce88 <main+0x22c>)
    cd3e:	f01a fe0f 	bl	27960 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    cd42:	4852      	ldr	r0, [pc, #328]	; (ce8c <main+0x230>)
    cd44:	f01a fe0c 	bl	27960 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    cd48:	4851      	ldr	r0, [pc, #324]	; (ce90 <main+0x234>)
    cd4a:	f01a fe09 	bl	27960 <iprintf>
    color(255);
    cd4e:	20ff      	movs	r0, #255	; 0xff
    cd50:	f000 ff06 	bl	db60 <color>
	k_sem_give(&ble_init_ok);
    cd54:	484f      	ldr	r0, [pc, #316]	; (ce94 <main+0x238>)
    cd56:	f01d f82d 	bl	29db4 <k_sem_give>
	err = bt_nus_init(&nus_cb);
    cd5a:	484f      	ldr	r0, [pc, #316]	; (ce98 <main+0x23c>)
    cd5c:	f004 f818 	bl	10d90 <bt_nus_init>
	if (err)
    cd60:	4601      	mov	r1, r0
    cd62:	b128      	cbz	r0, cd70 <main+0x114>
		printf("Failed to initialize UART service (err: %d)", err);
    cd64:	484d      	ldr	r0, [pc, #308]	; (ce9c <main+0x240>)
}
    cd66:	b00a      	add	sp, #40	; 0x28
    cd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    cd6c:	f01a bdf8 	b.w	27960 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    cd70:	4d4b      	ldr	r5, [pc, #300]	; (cea0 <main+0x244>)
    cd72:	ac05      	add	r4, sp, #20
    cd74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd78:	682b      	ldr	r3, [r5, #0]
    cd7a:	2501      	movs	r5, #1
    cd7c:	6023      	str	r3, [r4, #0]
    cd7e:	2202      	movs	r2, #2
    cd80:	4b48      	ldr	r3, [pc, #288]	; (cea4 <main+0x248>)
    cd82:	4949      	ldr	r1, [pc, #292]	; (cea8 <main+0x24c>)
    cd84:	9500      	str	r5, [sp, #0]
    cd86:	a805      	add	r0, sp, #20
    cd88:	f00e fc56 	bl	1b638 <bt_le_adv_start>
	if (err)
    cd8c:	4604      	mov	r4, r0
    cd8e:	b128      	cbz	r0, cd9c <main+0x140>
		printf("Advertising failed to start (err %d)", err);
    cd90:	4601      	mov	r1, r0
    cd92:	4846      	ldr	r0, [pc, #280]	; (ceac <main+0x250>)
    cd94:	f01a fde4 	bl	27960 <iprintf>
}
    cd98:	b00a      	add	sp, #40	; 0x28
    cd9a:	bd70      	pop	{r4, r5, r6, pc}
	flag = 1; // print ad values once
    cd9c:	4b44      	ldr	r3, [pc, #272]	; (ceb0 <main+0x254>)
	k_msleep(300);
    cd9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
	flag = 1; // print ad values once
    cda2:	601d      	str	r5, [r3, #0]
	k_msleep(300);
    cda4:	f01d f87e 	bl	29ea4 <k_msleep.isra.0>
	flash_init();
    cda8:	f7ff fcc4 	bl	c734 <flash_init>
	setup_initialize();
    cdac:	f000 fdfa 	bl	d9a4 <setup_initialize>
	flash_write_setup();
    cdb0:	f000 f900 	bl	cfb4 <flash_write_setup>
	flash_read_setup();
    cdb4:	f000 f908 	bl	cfc8 <flash_read_setup>
	print_setup();
    cdb8:	f000 fe54 	bl	da64 <print_setup>
    cdbc:	4e3d      	ldr	r6, [pc, #244]	; (ceb4 <main+0x258>)
    cdbe:	4630      	mov	r0, r6
    cdc0:	f023 ff61 	bl	30c86 <z_device_is_ready>
	if (!device_is_ready(uart_2))
    cdc4:	2800      	cmp	r0, #0
    cdc6:	f43f af7c 	beq.w	ccc2 <main+0x66>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    cdca:	206c      	movs	r0, #108	; 0x6c
    cdcc:	f024 fd13 	bl	317f6 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    cdd0:	4939      	ldr	r1, [pc, #228]	; (ceb8 <main+0x25c>)
	rx_uart2->len = 0;
    cdd2:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    cdd6:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    cdd8:	4838      	ldr	r0, [pc, #224]	; (cebc <main+0x260>)
    cdda:	f024 f99f 	bl	3111c <k_work_init_delayable>
	if (api->callback_set == NULL) {
    cdde:	68b3      	ldr	r3, [r6, #8]
    cde0:	681b      	ldr	r3, [r3, #0]
    cde2:	b11b      	cbz	r3, cdec <main+0x190>
	return api->callback_set(dev, callback, user_data);
    cde4:	4622      	mov	r2, r4
    cde6:	4630      	mov	r0, r6
    cde8:	4935      	ldr	r1, [pc, #212]	; (cec0 <main+0x264>)
    cdea:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), UART_WAIT_FOR_RX);
    cdec:	1d29      	adds	r1, r5, #4
    cdee:	4831      	ldr	r0, [pc, #196]	; (ceb4 <main+0x258>)
    cdf0:	f01c ffff 	bl	29df2 <uart_rx_enable.constprop.0>
    k_sem_give(&adc_init);
    cdf4:	4833      	ldr	r0, [pc, #204]	; (cec4 <main+0x268>)
    cdf6:	f01c ffdd 	bl	29db4 <k_sem_give>
    k_msleep(200);
    cdfa:	20c8      	movs	r0, #200	; 0xc8
    cdfc:	f01d f852 	bl	29ea4 <k_msleep.isra.0>
    k_sem_give(&timer_init);
    ce00:	4831      	ldr	r0, [pc, #196]	; (cec8 <main+0x26c>)
    ce02:	f01c ffd7 	bl	29db4 <k_sem_give>
	k_msleep(1000);
    ce06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ce0a:	f01d f84b 	bl	29ea4 <k_msleep.isra.0>
	k_sem_give(&gps_init);
    ce0e:	482f      	ldr	r0, [pc, #188]	; (cecc <main+0x270>)
    ce10:	f01c ffd0 	bl	29db4 <k_sem_give>
	k_msleep(1000);
    ce14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ce18:	f01d f844 	bl	29ea4 <k_msleep.isra.0>
    k_sem_give(&lorawan_init);  //START HELIUM JOIN
    ce1c:	482c      	ldr	r0, [pc, #176]	; (ced0 <main+0x274>)
    ce1e:	f01c ffc9 	bl	29db4 <k_sem_give>
    k_sem_give(&cmd_init_ok);
    ce22:	482c      	ldr	r0, [pc, #176]	; (ced4 <main+0x278>)
    ce24:	f01c ffc6 	bl	29db4 <k_sem_give>
    k_msleep(alarm_wait_time); //TIME TO INIT ALARM SYSTEM
    ce28:	f247 5030 	movw	r0, #30000	; 0x7530
    ce2c:	f01d f83a 	bl	29ea4 <k_msleep.isra.0>
	k_sem_give(&alarm_infra_init);
    ce30:	4829      	ldr	r0, [pc, #164]	; (ced8 <main+0x27c>)
    ce32:	f01c ffbf 	bl	29db4 <k_sem_give>
	color(1);
    ce36:	2001      	movs	r0, #1
    ce38:	f000 fe92 	bl	db60 <color>
    printk("Alarm Working \n");
    ce3c:	4827      	ldr	r0, [pc, #156]	; (cedc <main+0x280>)
    ce3e:	f01d fa13 	bl	2a268 <printk>
	color(255);
    ce42:	20ff      	movs	r0, #255	; 0xff
    ce44:	f000 fe8c 	bl	db60 <color>
			k_sleep(K_MSEC(60000));
    ce48:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
    ce4c:	2100      	movs	r1, #0
    ce4e:	f01d f827 	bl	29ea0 <k_sleep.isra.0>
	for (;;){
    ce52:	e7f9      	b.n	ce48 <main+0x1ec>
    ce54:	2000a704 	.word	0x2000a704
    ce58:	00032998 	.word	0x00032998
    ce5c:	0000b7d1 	.word	0x0000b7d1
    ce60:	20009948 	.word	0x20009948
    ce64:	00034a99 	.word	0x00034a99
    ce68:	00033108 	.word	0x00033108
    ce6c:	0000c1a5 	.word	0x0000c1a5
    ce70:	00034ab9 	.word	0x00034ab9
    ce74:	00034ae0 	.word	0x00034ae0
    ce78:	2000841c 	.word	0x2000841c
    ce7c:	00034b09 	.word	0x00034b09
    ce80:	2000840c 	.word	0x2000840c
    ce84:	00034b36 	.word	0x00034b36
    ce88:	00034b68 	.word	0x00034b68
    ce8c:	00034b81 	.word	0x00034b81
    ce90:	00034ba2 	.word	0x00034ba2
    ce94:	20008ca0 	.word	0x20008ca0
    ce98:	20008400 	.word	0x20008400
    ce9c:	00034bcb 	.word	0x00034bcb
    cea0:	0003316c 	.word	0x0003316c
    cea4:	00033390 	.word	0x00033390
    cea8:	00033398 	.word	0x00033398
    ceac:	00034bf7 	.word	0x00034bf7
    ceb0:	2000a700 	.word	0x2000a700
    ceb4:	00032980 	.word	0x00032980
    ceb8:	0000b77d 	.word	0x0000b77d
    cebc:	20009918 	.word	0x20009918
    cec0:	0000b825 	.word	0x0000b825
    cec4:	20008c58 	.word	0x20008c58
    cec8:	20008e08 	.word	0x20008e08
    cecc:	20008d18 	.word	0x20008d18
    ced0:	20008d48 	.word	0x20008d48
    ced4:	20008d00 	.word	0x20008d00
    ced8:	20008c88 	.word	0x20008c88
    cedc:	00034c1c 	.word	0x00034c1c

0000cee0 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    cee0:	4602      	mov	r2, r0
    cee2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    cee4:	4801      	ldr	r0, [pc, #4]	; (ceec <k_mutex_lock.constprop.0.isra.0+0xc>)
    cee6:	f018 bd0f 	b.w	25908 <z_impl_k_mutex_lock>
    ceea:	bf00      	nop
    ceec:	20008bf0 	.word	0x20008bf0

0000cef0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    cef0:	4801      	ldr	r0, [pc, #4]	; (cef8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    cef2:	f018 bd83 	b.w	259fc <z_impl_k_mutex_unlock>
    cef6:	bf00      	nop
    cef8:	20008bf0 	.word	0x20008bf0

0000cefc <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
	if (!spec->channel_cfg_dt_node_exists) {
    cefc:	4b10      	ldr	r3, [pc, #64]	; (cf40 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x44>)
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    cefe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    cf00:	795a      	ldrb	r2, [r3, #5]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    cf02:	4605      	mov	r5, r0
	if (!spec->channel_cfg_dt_node_exists) {
    cf04:	b1d2      	cbz	r2, cf3c <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    cf06:	79da      	ldrb	r2, [r3, #7]
	resolution = spec->resolution;
    cf08:	7c1c      	ldrb	r4, [r3, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    cf0a:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    cf0c:	bf09      	itett	eq
    cf0e:	681a      	ldreq	r2, [r3, #0]
		vref_mv = spec->vref_mv;
    cf10:	89d9      	ldrhne	r1, [r3, #14]
	return api->ref_internal;
    cf12:	6892      	ldreq	r2, [r2, #8]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    cf14:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    cf16:	7a9a      	ldrb	r2, [r3, #10]
    cf18:	0692      	lsls	r2, r2, #26
	int32_t adc_mv = *valp * ref_mv;
    cf1a:	6802      	ldr	r2, [r0, #0]
		resolution -= 1U;
    cf1c:	bf48      	it	mi
    cf1e:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int32_t adc_mv = *valp * ref_mv;
    cf22:	fb01 f202 	mul.w	r2, r1, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    cf26:	7998      	ldrb	r0, [r3, #6]
    cf28:	a901      	add	r1, sp, #4
		resolution -= 1U;
    cf2a:	bf48      	it	mi
    cf2c:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    cf2e:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    cf30:	f013 fbc6 	bl	206c0 <adc_gain_invert>
	if (ret == 0) {
    cf34:	b910      	cbnz	r0, cf3c <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
		*valp = (adc_mv >> resolution);
    cf36:	9b01      	ldr	r3, [sp, #4]
    cf38:	4123      	asrs	r3, r4
    cf3a:	602b      	str	r3, [r5, #0]
}
    cf3c:	b003      	add	sp, #12
    cf3e:	bd30      	pop	{r4, r5, pc}
    cf40:	000333a8 	.word	0x000333a8

0000cf44 <gpio_pin_set_dt.constprop.0.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    cf44:	2101      	movs	r1, #1
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    cf46:	4603      	mov	r3, r0
	return gpio_pin_set(spec->port, spec->pin, value);
    cf48:	4a08      	ldr	r2, [pc, #32]	; (cf6c <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
    cf4a:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    cf4c:	7912      	ldrb	r2, [r2, #4]
    cf4e:	4091      	lsls	r1, r2
    cf50:	6902      	ldr	r2, [r0, #16]
    cf52:	6812      	ldr	r2, [r2, #0]
    cf54:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
    cf56:	bf18      	it	ne
    cf58:	f083 0301 	eorne.w	r3, r3, #1
	if (value != 0)	{
    cf5c:	b113      	cbz	r3, cf64 <gpio_pin_set_dt.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
    cf5e:	6883      	ldr	r3, [r0, #8]
    cf60:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    cf62:	4718      	bx	r3
    cf64:	6883      	ldr	r3, [r0, #8]
    cf66:	691b      	ldr	r3, [r3, #16]
    cf68:	e7fb      	b.n	cf62 <gpio_pin_set_dt.constprop.0.isra.0+0x1e>
    cf6a:	bf00      	nop
    cf6c:	20008454 	.word	0x20008454

0000cf70 <flash_button2_counter>:
void flash_button2_counter(void){
    cf70:	b510      	push	{r4, lr}
    button2_counter++;
    cf72:	4c0d      	ldr	r4, [pc, #52]	; (cfa8 <flash_button2_counter+0x38>)
	(void)nvs_write(
    cf74:	2101      	movs	r1, #1
    button2_counter++;
    cf76:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    cf78:	4622      	mov	r2, r4
    button2_counter++;
    cf7a:	3301      	adds	r3, #1
    cf7c:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    cf7e:	480b      	ldr	r0, [pc, #44]	; (cfac <flash_button2_counter+0x3c>)
    cf80:	2304      	movs	r3, #4
    cf82:	f003 f89b 	bl	100bc <nvs_write>
    rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    cf86:	2304      	movs	r3, #4
    cf88:	4622      	mov	r2, r4
    cf8a:	2101      	movs	r1, #1
    cf8c:	4807      	ldr	r0, [pc, #28]	; (cfac <flash_button2_counter+0x3c>)
    cf8e:	f01d fe87 	bl	2aca0 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    cf92:	2800      	cmp	r0, #0
    cf94:	dd06      	ble.n	cfa4 <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    cf96:	6822      	ldr	r2, [r4, #0]
    cf98:	2101      	movs	r1, #1
}
    cf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    cf9e:	4804      	ldr	r0, [pc, #16]	; (cfb0 <flash_button2_counter+0x40>)
    cfa0:	f01d b962 	b.w	2a268 <printk>
}
    cfa4:	bd10      	pop	{r4, pc}
    cfa6:	bf00      	nop
    cfa8:	2000a6c0 	.word	0x2000a6c0
    cfac:	2000a6d0 	.word	0x2000a6d0
    cfb0:	0003488d 	.word	0x0003488d

0000cfb4 <flash_write_setup>:
    err=nvs_write(&fs, SETUP_POSITION, &Initial_Setup,size_setup);
    cfb4:	234c      	movs	r3, #76	; 0x4c
    cfb6:	2103      	movs	r1, #3
    cfb8:	4a01      	ldr	r2, [pc, #4]	; (cfc0 <flash_write_setup+0xc>)
    cfba:	4802      	ldr	r0, [pc, #8]	; (cfc4 <flash_write_setup+0x10>)
    cfbc:	f003 b87e 	b.w	100bc <nvs_write>
    cfc0:	2000b044 	.word	0x2000b044
    cfc4:	2000a6d0 	.word	0x2000a6d0

0000cfc8 <flash_read_setup>:
	(void)nvs_read(&fs, SETUP_POSITION, &Initial_Setup, sizeof(Initial_Setup));
    cfc8:	234c      	movs	r3, #76	; 0x4c
    cfca:	2103      	movs	r1, #3
    cfcc:	4a01      	ldr	r2, [pc, #4]	; (cfd4 <flash_read_setup+0xc>)
    cfce:	4802      	ldr	r0, [pc, #8]	; (cfd8 <flash_read_setup+0x10>)
    cfd0:	f01d be66 	b.w	2aca0 <nvs_read>
    cfd4:	2000b044 	.word	0x2000b044
    cfd8:	2000a6d0 	.word	0x2000a6d0

0000cfdc <fill_date>:
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cfdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
				   part[0]=field_date[0];
    cfde:	780b      	ldrb	r3, [r1, #0]
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cfe0:	4604      	mov	r4, r0
				   part[0]=field_date[0];
    cfe2:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[1];
    cfe6:	784b      	ldrb	r3, [r1, #1]
           position.t.tm_mday=atoi(part);
    cfe8:	a801      	add	r0, sp, #4
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cfea:	460d      	mov	r5, r1
           part[1]=field_date[1];
    cfec:	f88d 3005 	strb.w	r3, [sp, #5]
           position.t.tm_mday=atoi(part);
    cff0:	f024 fc09 	bl	31806 <atoi>
    cff4:	4e1b      	ldr	r6, [pc, #108]	; (d064 <fill_date+0x88>)
    cff6:	61f0      	str	r0, [r6, #28]
				   part[0]=field_date[2];
    cff8:	78ab      	ldrb	r3, [r5, #2]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    cffa:	a801      	add	r0, sp, #4
				   part[0]=field_date[2];
    cffc:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[3];
    d000:	78eb      	ldrb	r3, [r5, #3]
    d002:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    d006:	f024 fbfe 	bl	31806 <atoi>
    d00a:	3801      	subs	r0, #1
    d00c:	6230      	str	r0, [r6, #32]
				   part[0]=field_date[4];
    d00e:	792b      	ldrb	r3, [r5, #4]
				   position.t.tm_year=atoi(part);	
    d010:	a801      	add	r0, sp, #4
				   part[0]=field_date[4];
    d012:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[5];
    d016:	796b      	ldrb	r3, [r5, #5]
    d018:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_year=atoi(part);	
    d01c:	f024 fbf3 	bl	31806 <atoi>
    d020:	6270      	str	r0, [r6, #36]	; 0x24
				   part[0]=field_time[0];
    d022:	7823      	ldrb	r3, [r4, #0]
				   position.t.tm_hour=atoi(part);	
    d024:	a801      	add	r0, sp, #4
				   part[0]=field_time[0];
    d026:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[1];
    d02a:	7863      	ldrb	r3, [r4, #1]
    d02c:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_hour=atoi(part);	
    d030:	f024 fbe9 	bl	31806 <atoi>
    d034:	61b0      	str	r0, [r6, #24]
				   part[0]=field_time[2];
    d036:	78a3      	ldrb	r3, [r4, #2]
				   position.t.tm_min=atoi(part);	
    d038:	a801      	add	r0, sp, #4
				   part[0]=field_time[2];
    d03a:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[3];
    d03e:	78e3      	ldrb	r3, [r4, #3]
    d040:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_min=atoi(part);	
    d044:	f024 fbdf 	bl	31806 <atoi>
    d048:	6170      	str	r0, [r6, #20]
				   part[0]=field_time[4];
    d04a:	7923      	ldrb	r3, [r4, #4]
				   position.t.tm_sec=atoi(part);	
    d04c:	a801      	add	r0, sp, #4
				   part[0]=field_time[4];
    d04e:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[5];
    d052:	7963      	ldrb	r3, [r4, #5]
    d054:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_sec=atoi(part);	
    d058:	f024 fbd5 	bl	31806 <atoi>
    d05c:	6130      	str	r0, [r6, #16]
}
    d05e:	b002      	add	sp, #8
    d060:	bd70      	pop	{r4, r5, r6, pc}
    d062:	bf00      	nop
    d064:	2000a68c 	.word	0x2000a68c

0000d068 <time_stamp_function>:
uint64_t time_stamp_function(void) {
    d068:	b510      	push	{r4, lr}
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    d06a:	4c15      	ldr	r4, [pc, #84]	; (d0c0 <time_stamp_function+0x58>)
uint64_t time_stamp_function(void) {
    d06c:	b08a      	sub	sp, #40	; 0x28
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    d06e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    t_of_day = mktime(&t);
    d070:	a801      	add	r0, sp, #4
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    d072:	3364      	adds	r3, #100	; 0x64
    d074:	9306      	str	r3, [sp, #24]
    t.tm_mon = position.t.tm_mon;         // Month, where 0 = jan
    d076:	6a23      	ldr	r3, [r4, #32]
    d078:	9305      	str	r3, [sp, #20]
    t.tm_mday = position.t.tm_mday;       // Day of the month
    d07a:	69e3      	ldr	r3, [r4, #28]
    d07c:	9304      	str	r3, [sp, #16]
    t.tm_hour = position.t.tm_hour;
    d07e:	69a3      	ldr	r3, [r4, #24]
    d080:	9303      	str	r3, [sp, #12]
    t.tm_min = position.t.tm_min;
    d082:	6963      	ldr	r3, [r4, #20]
    d084:	9302      	str	r3, [sp, #8]
    t.tm_sec = position.t.tm_sec;
    d086:	6923      	ldr	r3, [r4, #16]
    d088:	9301      	str	r3, [sp, #4]
    t.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
    d08a:	f04f 33ff 	mov.w	r3, #4294967295
    d08e:	9309      	str	r3, [sp, #36]	; 0x24
    t_of_day = mktime(&t);
    d090:	f019 fec8 	bl	26e24 <mktime>
    if (position.gps_fixed !=1 ){t_of_day=k_uptime_get()/1000;}
    d094:	7b23      	ldrb	r3, [r4, #12]
    d096:	2b01      	cmp	r3, #1
    d098:	d010      	beq.n	d0bc <time_stamp_function+0x54>
	return z_impl_k_uptime_ticks();
    d09a:	f024 f9ee 	bl	3147a <z_impl_k_uptime_ticks>
    d09e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d0a2:	fba0 0302 	umull	r0, r3, r0, r2
    d0a6:	fb02 3101 	mla	r1, r2, r1, r3
    d0aa:	0bc0      	lsrs	r0, r0, #15
    d0ac:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    d0b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d0b4:	2300      	movs	r3, #0
    d0b6:	0bc9      	lsrs	r1, r1, #15
    d0b8:	f7fb fef2 	bl	8ea0 <__aeabi_ldivmod>
}
    d0bc:	b00a      	add	sp, #40	; 0x28
    d0be:	bd10      	pop	{r4, pc}
    d0c0:	2000a68c 	.word	0x2000a68c

0000d0c4 <values_of_gnss_module>:
Gnss values_of_gnss_module(void){
    d0c4:	b570      	push	{r4, r5, r6, lr}
  gnss_return_value.latitude=position.latitude;
    d0c6:	4b05      	ldr	r3, [pc, #20]	; (d0dc <values_of_gnss_module+0x18>)
Gnss values_of_gnss_module(void){
    d0c8:	4604      	mov	r4, r0
  gnss_return_value.latitude=position.latitude;
    d0ca:	685e      	ldr	r6, [r3, #4]
  gnss_return_value.longitude=position.longitude;
    d0cc:	689d      	ldr	r5, [r3, #8]
  gnss_return_value.timestamp=time_stamp_function();
    d0ce:	f7ff ffcb 	bl	d068 <time_stamp_function>
  return gnss_return_value;
    d0d2:	6066      	str	r6, [r4, #4]
  gnss_return_value.timestamp=time_stamp_function();
    d0d4:	6020      	str	r0, [r4, #0]
  return gnss_return_value;
    d0d6:	60a5      	str	r5, [r4, #8]
}
    d0d8:	4620      	mov	r0, r4
    d0da:	bd70      	pop	{r4, r5, r6, pc}
    d0dc:	2000a68c 	.word	0x2000a68c

0000d0e0 <values_of_analog_sensor>:
Analog values_of_analog_sensor(uint8_t channel){
    d0e0:	b538      	push	{r3, r4, r5, lr}
    d0e2:	460d      	mov	r5, r1
    d0e4:	4604      	mov	r4, r0
  analog_return_value.timestamp=time_stamp_function();
    d0e6:	f7ff ffbf 	bl	d068 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    d0ea:	4b03      	ldr	r3, [pc, #12]	; (d0f8 <values_of_analog_sensor+0x18>)
    d0ec:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
  return analog_return_value;
    d0f0:	e9c4 0300 	strd	r0, r3, [r4]
}
    d0f4:	4620      	mov	r0, r4
    d0f6:	bd38      	pop	{r3, r4, r5, pc}
    d0f8:	20030ef6 	.word	0x20030ef6

0000d0fc <values_of_ntc_sensor>:
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    d0fc:	b570      	push	{r4, r5, r6, lr}
    d0fe:	460d      	mov	r5, r1
    d100:	4604      	mov	r4, r0
  ntc_return.timestamp=time_stamp_function();
    d102:	f7ff ffb1 	bl	d068 <time_stamp_function>
  switch (sensor_number){
    d106:	2d02      	cmp	r5, #2
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    d108:	f04f 0600 	mov.w	r6, #0
  switch (sensor_number){
    d10c:	d00a      	beq.n	d124 <values_of_ntc_sensor+0x28>
    d10e:	2d03      	cmp	r5, #3
    d110:	d00c      	beq.n	d12c <values_of_ntc_sensor+0x30>
    d112:	2d01      	cmp	r5, #1
    d114:	d102      	bne.n	d11c <values_of_ntc_sensor+0x20>
    case NTC_1:ntc_return.value=adc_value[NTC_1_CH];
    d116:	4b07      	ldr	r3, [pc, #28]	; (d134 <values_of_ntc_sensor+0x38>)
    d118:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
  return ntc_return;
    d11c:	6020      	str	r0, [r4, #0]
    d11e:	80a6      	strh	r6, [r4, #4]
}
    d120:	4620      	mov	r0, r4
    d122:	bd70      	pop	{r4, r5, r6, pc}
    case NTC_2:ntc_return.value=adc_value[NTC_2_CH];
    d124:	4b03      	ldr	r3, [pc, #12]	; (d134 <values_of_ntc_sensor+0x38>)
    d126:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
              break;
    d12a:	e7f7      	b.n	d11c <values_of_ntc_sensor+0x20>
    case NTC_3:ntc_return.value=adc_value[NTC_3_CH];
    d12c:	4b01      	ldr	r3, [pc, #4]	; (d134 <values_of_ntc_sensor+0x38>)
    d12e:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
              break;
    d132:	e7f3      	b.n	d11c <values_of_ntc_sensor+0x20>
    d134:	20030ef6 	.word	0x20030ef6

0000d138 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    d138:	b538      	push	{r3, r4, r5, lr}
    d13a:	460d      	mov	r5, r1
    d13c:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    d13e:	f7ff ff93 	bl	d068 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    d142:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    d144:	4b04      	ldr	r3, [pc, #16]	; (d158 <values_of_digital_sensor+0x20>)
    d146:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    d14a:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    d14e:	e9c4 0200 	strd	r0, r2, [r4]
}
    d152:	4620      	mov	r0, r4
    d154:	bd38      	pop	{r3, r4, r5, pc}
    d156:	bf00      	nop
    d158:	20030ee6 	.word	0x20030ee6

0000d15c <read_memory>:
_Circular_Buffer read_memory(uint32_t Pos){
    d15c:	b570      	push	{r4, r5, r6, lr}
    d15e:	4605      	mov	r5, r0
    d160:	460c      	mov	r4, r1
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d162:	f04f 30ff 	mov.w	r0, #4294967295
    d166:	f04f 31ff 	mov.w	r1, #4294967295
    d16a:	f7ff feb9 	bl	cee0 <k_mutex_lock.constprop.0.isra.0>
    buf = k_malloc(size);
    d16e:	2068      	movs	r0, #104	; 0x68
    d170:	f024 fb41 	bl	317f6 <k_malloc>
    uint16_t Id= Pos + BASE_DATA_BUFFER;
    d174:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_read(&fs, Id, buf, size);
    d178:	2368      	movs	r3, #104	; 0x68
    d17a:	4602      	mov	r2, r0
    buf = k_malloc(size);
    d17c:	4606      	mov	r6, r0
    err=nvs_read(&fs, Id, buf, size);
    d17e:	b289      	uxth	r1, r1
    d180:	4806      	ldr	r0, [pc, #24]	; (d19c <read_memory+0x40>)
    d182:	f01d fd8d 	bl	2aca0 <nvs_read>
    printf("Result read=%d bytes\n",err);
    d186:	b281      	uxth	r1, r0
    d188:	4805      	ldr	r0, [pc, #20]	; (d1a0 <read_memory+0x44>)
    d18a:	f01a fbe9 	bl	27960 <iprintf>
    return *buf;
    d18e:	2268      	movs	r2, #104	; 0x68
    d190:	4631      	mov	r1, r6
    d192:	4628      	mov	r0, r5
    d194:	f024 fb4b 	bl	3182e <memcpy>
}
    d198:	4628      	mov	r0, r5
    d19a:	bd70      	pop	{r4, r5, r6, pc}
    d19c:	2000a6d0 	.word	0x2000a6d0
    d1a0:	00034d50 	.word	0x00034d50

0000d1a4 <save_memory>:
void save_memory(uint32_t Pos){
    d1a4:	b570      	push	{r4, r5, r6, lr}
    d1a6:	4604      	mov	r4, r0
                break;
        case 4: printk("\033[34m");       // Azul
                break;
        case 5: printk("\033[35m");       // Magenta
                break;
        case 6: printk("\033[36m");       // Ciano
    d1a8:	4818      	ldr	r0, [pc, #96]	; (d20c <save_memory+0x68>)
    d1aa:	f01d f85d 	bl	2a268 <printk>
    printf("Size of structure=%d bytes\n",size);
    d1ae:	2168      	movs	r1, #104	; 0x68
    d1b0:	4817      	ldr	r0, [pc, #92]	; (d210 <save_memory+0x6c>)
    d1b2:	f01a fbd5 	bl	27960 <iprintf>
    buf = k_malloc(size);
    d1b6:	2068      	movs	r0, #104	; 0x68
    d1b8:	f024 fb1d 	bl	317f6 <k_malloc>
    *buf=C_Buffer[Pos];
    d1bc:	2668      	movs	r6, #104	; 0x68
    buf = k_malloc(size);
    d1be:	4605      	mov	r5, r0
    *buf=C_Buffer[Pos];
    d1c0:	4914      	ldr	r1, [pc, #80]	; (d214 <save_memory+0x70>)
    d1c2:	4632      	mov	r2, r6
    d1c4:	fb06 1104 	mla	r1, r6, r4, r1
    d1c8:	f024 fb31 	bl	3182e <memcpy>
    printf("Position %d\n",Pos); 
    d1cc:	4621      	mov	r1, r4
    d1ce:	4812      	ldr	r0, [pc, #72]	; (d218 <save_memory+0x74>)
    d1d0:	f01a fbc6 	bl	27960 <iprintf>
    uint16_t id= Pos + BASE_DATA_BUFFER;
    d1d4:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_write(&fs, id, buf,size);
    d1d8:	4c10      	ldr	r4, [pc, #64]	; (d21c <save_memory+0x78>)
    d1da:	4633      	mov	r3, r6
    d1dc:	462a      	mov	r2, r5
    d1de:	4620      	mov	r0, r4
    d1e0:	b289      	uxth	r1, r1
    d1e2:	f002 ff6b 	bl	100bc <nvs_write>
    printf("Result=%d bytes saved\n",err);
    d1e6:	b281      	uxth	r1, r0
    d1e8:	480d      	ldr	r0, [pc, #52]	; (d220 <save_memory+0x7c>)
    d1ea:	f01a fbb9 	bl	27960 <iprintf>
    (void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    d1ee:	2304      	movs	r3, #4
    d1f0:	2102      	movs	r1, #2
    d1f2:	4620      	mov	r0, r4
    d1f4:	4a0b      	ldr	r2, [pc, #44]	; (d224 <save_memory+0x80>)
    d1f6:	f002 ff61 	bl	100bc <nvs_write>
                break;
        case 14: printk("\033[96m");      // Ciano claro
                break;
        case 15: printk("\033[97m");      // Branco claro
                break;
        case 255: printk("\033[0m");       // Padrão (branco)
    d1fa:	480b      	ldr	r0, [pc, #44]	; (d228 <save_memory+0x84>)
    d1fc:	f01d f834 	bl	2a268 <printk>
    k_free(buf);
    d200:	4628      	mov	r0, r5
}
    d202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_free(buf);
    d206:	f024 baef 	b.w	317e8 <k_free>
    d20a:	bf00      	nop
    d20c:	00034d66 	.word	0x00034d66
    d210:	00034d6c 	.word	0x00034d6c
    d214:	2000b090 	.word	0x2000b090
    d218:	00034d88 	.word	0x00034d88
    d21c:	2000a6d0 	.word	0x2000a6d0
    d220:	00034d95 	.word	0x00034d95
    d224:	2002f990 	.word	0x2002f990
    d228:	00034dac 	.word	0x00034dac

0000d22c <feed_circular_buffer>:
void feed_circular_buffer(void){
    d22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    d230:	4f45      	ldr	r7, [pc, #276]	; (d348 <feed_circular_buffer+0x11c>)
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d232:	f04f 30ff 	mov.w	r0, #4294967295
    d236:	f04f 31ff 	mov.w	r1, #4294967295
void feed_circular_buffer(void){
    d23a:	b09b      	sub	sp, #108	; 0x6c
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d23c:	f7ff fe50 	bl	cee0 <k_mutex_lock.constprop.0.isra.0>
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    d240:	683c      	ldr	r4, [r7, #0]
    d242:	f5b4 6fb4 	cmp.w	r4, #1440	; 0x5a0
    d246:	d27c      	bcs.n	d342 <feed_circular_buffer+0x116>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d248:	46e8      	mov	r8, sp
    d24a:	f04f 0968 	mov.w	r9, #104	; 0x68
    d24e:	4645      	mov	r5, r8
    d250:	4e3e      	ldr	r6, [pc, #248]	; (d34c <feed_circular_buffer+0x120>)
     C_Buffer_Current_Position=C_Buffer_Free_Position;
    d252:	4b3f      	ldr	r3, [pc, #252]	; (d350 <feed_circular_buffer+0x124>)
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d254:	4640      	mov	r0, r8
     C_Buffer_Current_Position=C_Buffer_Free_Position;
    d256:	601c      	str	r4, [r3, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d258:	fb09 6404 	mla	r4, r9, r4, r6
    d25c:	3404      	adds	r4, #4
    d25e:	f7ff ff31 	bl	d0c4 <values_of_gnss_module>
    d262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d26a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d26c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d26e:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    d270:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d272:	6023      	str	r3, [r4, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    d274:	683c      	ldr	r4, [r7, #0]
    d276:	4640      	mov	r0, r8
    d278:	fb09 6404 	mla	r4, r9, r4, r6
    d27c:	3438      	adds	r4, #56	; 0x38
    d27e:	f7ff ff2f 	bl	d0e0 <values_of_analog_sensor>
    d282:	e898 0003 	ldmia.w	r8, {r0, r1}
    d286:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    d28a:	2101      	movs	r1, #1
    d28c:	a80e      	add	r0, sp, #56	; 0x38
    d28e:	f7ff ff35 	bl	d0fc <values_of_ntc_sensor>
    d292:	683b      	ldr	r3, [r7, #0]
    d294:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    d298:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d29c:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    d29e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d2a2:	a810      	add	r0, sp, #64	; 0x40
    d2a4:	f7ff ff2a 	bl	d0fc <values_of_ntc_sensor>
    d2a8:	683b      	ldr	r3, [r7, #0]
    d2aa:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    d2ae:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d2b2:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d2b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d2b8:	a812      	add	r0, sp, #72	; 0x48
    d2ba:	f7ff ff1f 	bl	d0fc <values_of_ntc_sensor>
    d2be:	683b      	ldr	r3, [r7, #0]
    d2c0:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    d2c4:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d2c8:	2101      	movs	r1, #1
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d2ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d2ce:	a814      	add	r0, sp, #80	; 0x50
    d2d0:	f7ff ff14 	bl	d0fc <values_of_ntc_sensor>
    d2d4:	683b      	ldr	r3, [r7, #0]
    d2d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d2d8:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d2dc:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d2de:	641a      	str	r2, [r3, #64]	; 0x40
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d2e0:	a816      	add	r0, sp, #88	; 0x58
    d2e2:	f7ff ff0b 	bl	d0fc <values_of_ntc_sensor>
    d2e6:	683b      	ldr	r3, [r7, #0]
    d2e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d2ea:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d2ee:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d2f0:	649a      	str	r2, [r3, #72]	; 0x48
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d2f2:	a818      	add	r0, sp, #96	; 0x60
    d2f4:	f7ff ff02 	bl	d0fc <values_of_ntc_sensor>
    d2f8:	683c      	ldr	r4, [r7, #0]
    d2fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d2fc:	fb09 6404 	mla	r4, r9, r4, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d300:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d302:	6523      	str	r3, [r4, #80]	; 0x50
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d304:	4640      	mov	r0, r8
    d306:	f7ff ff17 	bl	d138 <values_of_digital_sensor>
    d30a:	e898 0003 	ldmia.w	r8, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d30e:	683b      	ldr	r3, [r7, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d310:	3458      	adds	r4, #88	; 0x58
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d312:	fb09 6603 	mla	r6, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d316:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d31a:	3660      	adds	r6, #96	; 0x60
    d31c:	2101      	movs	r1, #1
    d31e:	4640      	mov	r0, r8
    d320:	f7ff ff0a 	bl	d138 <values_of_digital_sensor>
    d324:	e898 0003 	ldmia.w	r8, {r0, r1}
    d328:	e886 0003 	stmia.w	r6, {r0, r1}
     save_memory(C_Buffer_Free_Position);
    d32c:	6838      	ldr	r0, [r7, #0]
    d32e:	f7ff ff39 	bl	d1a4 <save_memory>
     C_Buffer_Free_Position++;
    d332:	683b      	ldr	r3, [r7, #0]
    d334:	3301      	adds	r3, #1
    d336:	603b      	str	r3, [r7, #0]
}
    d338:	b01b      	add	sp, #108	; 0x6c
    d33a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    k_mutex_unlock(&c_buffer_busy);  
    d33e:	f7ff bdd7 	b.w	cef0 <k_mutex_unlock.constprop.0.isra.0>
    d342:	2300      	movs	r3, #0
    d344:	e7f7      	b.n	d336 <feed_circular_buffer+0x10a>
    d346:	bf00      	nop
    d348:	2002f994 	.word	0x2002f994
    d34c:	2000b090 	.word	0x2000b090
    d350:	2002f990 	.word	0x2002f990

0000d354 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    d354:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    d356:	4b1c      	ldr	r3, [pc, #112]	; (d3c8 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    d358:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    d35a:	6818      	ldr	r0, [r3, #0]
    d35c:	889b      	ldrh	r3, [r3, #4]
    d35e:	9000      	str	r0, [sp, #0]
    d360:	2218      	movs	r2, #24
    d362:	2100      	movs	r1, #0
    d364:	f10d 0006 	add.w	r0, sp, #6
    d368:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    d36c:	2601      	movs	r6, #1
   char tag[30]="10203";
    d36e:	f024 fa98 	bl	318a2 <memset>
     msg.positions.timestamp=1;
    d372:	2300      	movs	r3, #0
    msg.timestamp=0;
    d374:	4c15      	ldr	r4, [pc, #84]	; (d3cc <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    d376:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    d378:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    d37c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d380:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    d382:	4b13      	ldr	r3, [pc, #76]	; (d3d0 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    d384:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    d386:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    d388:	230b      	movs	r3, #11
    d38a:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    d38c:	4b11      	ldr	r3, [pc, #68]	; (d3d4 <fill_fields_to_test+0x80>)
    d38e:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    d390:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    d392:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    d394:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    d396:	7766      	strb	r6, [r4, #29]
    d398:	f104 001e 	add.w	r0, r4, #30
    d39c:	f024 fbd0 	bl	31b40 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    d3a0:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    d3a4:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    d3a8:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    d3ac:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    d3ae:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    d3b2:	f7fb fbd1 	bl	8b58 <__aeabi_i2f>
   while (sensor_id<6){
    d3b6:	3501      	adds	r5, #1
    d3b8:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    d3ba:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    d3bc:	f104 0424 	add.w	r4, r4, #36	; 0x24
    d3c0:	d1e6      	bne.n	d390 <fill_fields_to_test+0x3c>
}
    d3c2:	4802      	ldr	r0, [pc, #8]	; (d3cc <fill_fields_to_test+0x78>)
    d3c4:	b009      	add	sp, #36	; 0x24
    d3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3c8:	000331f8 	.word	0x000331f8
    d3cc:	2000af54 	.word	0x2000af54
    d3d0:	40400000 	.word	0x40400000
    d3d4:	41400000 	.word	0x41400000

0000d3d8 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    d3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d3da:	f04f 31ff 	mov.w	r1, #4294967295
buf_data send_array_dd_v0(void){
    d3de:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    d3e2:	4607      	mov	r7, r0
   k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d3e4:	f04f 30ff 	mov.w	r0, #4294967295
    d3e8:	f7ff fd7a 	bl	cee0 <k_mutex_lock.constprop.0.isra.0>
   History_st *data = fill_fields_to_test();
    d3ec:	f7ff ffb2 	bl	d354 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    d3f0:	2202      	movs	r2, #2
    d3f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    d3f6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    d3fa:	4a3a      	ldr	r2, [pc, #232]	; (d4e4 <send_array_dd_v0+0x10c>)
    d3fc:	ae0c      	add	r6, sp, #48	; 0x30
    d3fe:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d400:	4631      	mov	r1, r6
    d402:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    d404:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    d406:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    d408:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d40a:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    d40c:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    d40e:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    d410:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d412:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    d414:	f101 010c 	add.w	r1, r1, #12
    d418:	d1f8      	bne.n	d40c <send_array_dd_v0+0x34>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    d41a:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    d41c:	6958      	ldr	r0, [r3, #20]
    d41e:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    d420:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    d422:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    d424:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    d428:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    d42c:	f101 0108 	add.w	r1, r1, #8
    d430:	d1f6      	bne.n	d420 <send_array_dd_v0+0x48>
    d432:	f103 051e 	add.w	r5, r3, #30
    d436:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    d43a:	f855 3c06 	ldr.w	r3, [r5, #-6]
    d43e:	4629      	mov	r1, r5
    d440:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    d444:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    d448:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    d44c:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    d450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d454:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    d458:	f024 fb72 	bl	31b40 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    d45c:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    d45e:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    d460:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    d464:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    d466:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    d46a:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    d46e:	4633      	mov	r3, r6
    d470:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    d474:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    d476:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    d478:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    d47c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    d480:	f103 0308 	add.w	r3, r3, #8
    d484:	d1f6      	bne.n	d474 <send_array_dd_v0+0x9c>
   while (sensor_id<6){
    d486:	3524      	adds	r5, #36	; 0x24
    d488:	42a5      	cmp	r5, r4
    d48a:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    d48e:	d1d4      	bne.n	d43a <send_array_dd_v0+0x62>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    d490:	466c      	mov	r4, sp
    d492:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    d496:	4668      	mov	r0, sp
    d498:	4913      	ldr	r1, [pc, #76]	; (d4e8 <send_array_dd_v0+0x110>)
    d49a:	ad07      	add	r5, sp, #28
    d49c:	f000 fc7a 	bl	dd94 <pb_ostream_from_buffer>
    d4a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    d4a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d4a4:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    d4a6:	4911      	ldr	r1, [pc, #68]	; (d4ec <send_array_dd_v0+0x114>)
    d4a8:	aa0c      	add	r2, sp, #48	; 0x30
    d4aa:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    d4ac:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    d4ae:	f000 fef1 	bl	e294 <pb_encode>
   int j=0;
    d4b2:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    d4b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    d4b6:	490c      	ldr	r1, [pc, #48]	; (d4e8 <send_array_dd_v0+0x110>)
    d4b8:	4a0d      	ldr	r2, [pc, #52]	; (d4f0 <send_array_dd_v0+0x118>)
    d4ba:	4283      	cmp	r3, r0
    d4bc:	d10b      	bne.n	d4d6 <send_array_dd_v0+0xfe>
   function_return.len=total_bytes_encoded;
    d4be:	490d      	ldr	r1, [pc, #52]	; (d4f4 <send_array_dd_v0+0x11c>)
   return function_return;
    d4c0:	f240 72dc 	movw	r2, #2012	; 0x7dc
    d4c4:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    d4c6:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
   return function_return;
    d4ca:	f024 f9b0 	bl	3182e <memcpy>
}
    d4ce:	4638      	mov	r0, r7
    d4d0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    d4d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    d4da:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    d4dc:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    d4e0:	e7eb      	b.n	d4ba <send_array_dd_v0+0xe2>
    d4e2:	bf00      	nop
    d4e4:	0012d687 	.word	0x0012d687
    d4e8:	20031112 	.word	0x20031112
    d4ec:	00033460 	.word	0x00033460
    d4f0:	2000a77b 	.word	0x2000a77b
    d4f4:	2000a778 	.word	0x2000a778

0000d4f8 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    d4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4fc:	4680      	mov	r8, r0
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d4fe:	f04f 31ff 	mov.w	r1, #4294967295
void print_current_position_cb(uint32_t pos){
    d502:	b08f      	sub	sp, #60	; 0x3c
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d504:	f04f 30ff 	mov.w	r0, #4294967295
    d508:	f7ff fcea 	bl	cee0 <k_mutex_lock.constprop.0.isra.0>
        case 13: printk("\033[95m");      // Magenta claro
    d50c:	4859      	ldr	r0, [pc, #356]	; (d674 <print_current_position_cb+0x17c>)
    d50e:	f01c feab 	bl	2a268 <printk>
    printf("\n\n####Position %d #####\n",pos);
    d512:	4641      	mov	r1, r8
    d514:	4858      	ldr	r0, [pc, #352]	; (d678 <print_current_position_cb+0x180>)
    d516:	f01a fa23 	bl	27960 <iprintf>
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d51a:	4b58      	ldr	r3, [pc, #352]	; (d67c <print_current_position_cb+0x184>)
        case 2: printk("\033[32m");       // Verde
    d51c:	4858      	ldr	r0, [pc, #352]	; (d680 <print_current_position_cb+0x188>)
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d51e:	7b1b      	ldrb	r3, [r3, #12]
    d520:	2b01      	cmp	r3, #1
    d522:	f040 8098 	bne.w	d656 <print_current_position_cb+0x15e>
        case 2: printk("\033[32m");       // Verde
    d526:	f01c fe9f 	bl	2a268 <printk>
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d52a:	4856      	ldr	r0, [pc, #344]	; (d684 <print_current_position_cb+0x18c>)
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d52c:	2468      	movs	r4, #104	; 0x68
    d52e:	4f56      	ldr	r7, [pc, #344]	; (d688 <print_current_position_cb+0x190>)
      else {color(2); printf("GPS Fixed  :No\n");}
    d530:	f01a fa16 	bl	27960 <iprintf>
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d534:	fb04 7408 	mla	r4, r4, r8, r7
        case 13: printk("\033[95m");      // Magenta claro
    d538:	484e      	ldr	r0, [pc, #312]	; (d674 <print_current_position_cb+0x17c>)
    d53a:	f01c fe95 	bl	2a268 <printk>
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d53e:	68a0      	ldr	r0, [r4, #8]
    d540:	f7fa ff6e 	bl	8420 <__aeabi_f2d>
    d544:	220e      	movs	r2, #14
    d546:	e9cd 0100 	strd	r0, r1, [sp]
    d54a:	4b50      	ldr	r3, [pc, #320]	; (d68c <print_current_position_cb+0x194>)
    d54c:	2100      	movs	r1, #0
    d54e:	a806      	add	r0, sp, #24
    d550:	f024 facf 	bl	31af2 <__sprintf_chk>
    sprintf(buf_long, "%f", C_Buffer[pos].gnss_module.longitude);
    d554:	68e0      	ldr	r0, [r4, #12]
    d556:	f7fa ff63 	bl	8420 <__aeabi_f2d>
    d55a:	4b4c      	ldr	r3, [pc, #304]	; (d68c <print_current_position_cb+0x194>)
    d55c:	e9cd 0100 	strd	r0, r1, [sp]
    d560:	220e      	movs	r2, #14
    d562:	2100      	movs	r1, #0
    d564:	a80a      	add	r0, sp, #40	; 0x28
    d566:	f024 fac4 	bl	31af2 <__sprintf_chk>
    printf("https://www.google.com/maps/place/%c%c ",buf_lati[0],buf_lati[1]);
    d56a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    d56e:	f89d 1018 	ldrb.w	r1, [sp, #24]
    d572:	4847      	ldr	r0, [pc, #284]	; (d690 <print_current_position_cb+0x198>)
    d574:	f01a f9f4 	bl	27960 <iprintf>
    i=2;
    d578:	2302      	movs	r3, #2
    while (buf_lati[i]){buf_lati[i-2]=buf_lati[i];i++;}
    d57a:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d57e:	eb0d 0102 	add.w	r1, sp, r2
    d582:	f811 2c20 	ldrb.w	r2, [r1, #-32]
    d586:	2a00      	cmp	r2, #0
    d588:	d169      	bne.n	d65e <print_current_position_cb+0x166>
    printf("%s,",buf_lati);
    d58a:	a906      	add	r1, sp, #24
    d58c:	4841      	ldr	r0, [pc, #260]	; (d694 <print_current_position_cb+0x19c>)
    d58e:	f01a f9e7 	bl	27960 <iprintf>
    printf("%c%c ",buf_long[0],buf_long[1]);    
    d592:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    d596:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    d59a:	483f      	ldr	r0, [pc, #252]	; (d698 <print_current_position_cb+0x1a0>)
    d59c:	f01a f9e0 	bl	27960 <iprintf>
    i=2;
    d5a0:	2302      	movs	r3, #2
    while (buf_long[i]){buf_long[i-2]=buf_long[i];i++;}
    d5a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d5a6:	eb0d 0102 	add.w	r1, sp, r2
    d5aa:	f811 2c10 	ldrb.w	r2, [r1, #-16]
    d5ae:	2a00      	cmp	r2, #0
    d5b0:	d15a      	bne.n	d668 <print_current_position_cb+0x170>
      C_Buffer[pos].gnss_module.latitude,
    d5b2:	2468      	movs	r4, #104	; 0x68
    d5b4:	fb04 f408 	mul.w	r4, r4, r8
    printf("%s \n",buf_long);
    d5b8:	a90a      	add	r1, sp, #40	; 0x28
      C_Buffer[pos].gnss_module.latitude,
    d5ba:	193d      	adds	r5, r7, r4
    printf("%s \n",buf_long);
    d5bc:	4837      	ldr	r0, [pc, #220]	; (d69c <print_current_position_cb+0x1a4>)
    d5be:	f01a f9cf 	bl	27960 <iprintf>
    printf("GNSS Position Lat=%f Long=%f UTC Epoch Unix Timestamp=%d \n",
    d5c2:	68a8      	ldr	r0, [r5, #8]
    d5c4:	f7fa ff2c 	bl	8420 <__aeabi_f2d>
    d5c8:	686b      	ldr	r3, [r5, #4]
    d5ca:	4682      	mov	sl, r0
    d5cc:	9302      	str	r3, [sp, #8]
    d5ce:	68e8      	ldr	r0, [r5, #12]
    d5d0:	468b      	mov	fp, r1
    d5d2:	f7fa ff25 	bl	8420 <__aeabi_f2d>
    d5d6:	4652      	mov	r2, sl
    d5d8:	e9cd 0100 	strd	r0, r1, [sp]
    d5dc:	465b      	mov	r3, fp
    d5de:	4830      	ldr	r0, [pc, #192]	; (d6a0 <print_current_position_cb+0x1a8>)
    d5e0:	f01a f9be 	bl	27960 <iprintf>
    val_mv = C_Buffer[pos].analog.value;
    d5e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d5e6:	a805      	add	r0, sp, #20
    val_mv = C_Buffer[pos].analog.value;
    d5e8:	9305      	str	r3, [sp, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d5ea:	f7ff fc87 	bl	cefc <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  Value=%d  %"PRId32"mV \n",
    d5ee:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    d5f0:	9a05      	ldr	r2, [sp, #20]
    d5f2:	482c      	ldr	r0, [pc, #176]	; (d6a4 <print_current_position_cb+0x1ac>)
    d5f4:	f01a f9b4 	bl	27960 <iprintf>
    d5f8:	2501      	movs	r5, #1
    d5fa:	f104 063c 	add.w	r6, r4, #60	; 0x3c
      printf("NTC %d Value=%d %3.1f C\n",
    d5fe:	4c2a      	ldr	r4, [pc, #168]	; (d6a8 <print_current_position_cb+0x1b0>)
    d600:	443e      	add	r6, r7
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d602:	b2e9      	uxtb	r1, r5
    d604:	f836 0035 	ldrh.w	r0, [r6, r5, lsl #3]
      C_Buffer[pos].ntc[i].value,
    d608:	f936 a035 	ldrsh.w	sl, [r6, r5, lsl #3]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d60c:	f7fb ff08 	bl	9420 <ntc_temperature>
      printf("NTC %d Value=%d %3.1f C\n",
    d610:	f7fa ff06 	bl	8420 <__aeabi_f2d>
    d614:	f105 39ff 	add.w	r9, r5, #4294967295
    d618:	e9cd 0100 	strd	r0, r1, [sp]
    d61c:	4652      	mov	r2, sl
    d61e:	4649      	mov	r1, r9
    d620:	4620      	mov	r0, r4
    while (i<3){
    d622:	3501      	adds	r5, #1
      printf("NTC %d Value=%d %3.1f C\n",
    d624:	f01a f99c 	bl	27960 <iprintf>
    while (i<3){
    d628:	2d04      	cmp	r5, #4
    d62a:	d1ea      	bne.n	d602 <print_current_position_cb+0x10a>
      printf("Digital%d  Value=%d\n",
    d62c:	2368      	movs	r3, #104	; 0x68
    d62e:	fb03 7708 	mla	r7, r3, r8, r7
    d632:	2100      	movs	r1, #0
    d634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    d636:	481d      	ldr	r0, [pc, #116]	; (d6ac <print_current_position_cb+0x1b4>)
    d638:	f01a f992 	bl	27960 <iprintf>
    d63c:	2101      	movs	r1, #1
    d63e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    d640:	481a      	ldr	r0, [pc, #104]	; (d6ac <print_current_position_cb+0x1b4>)
    d642:	f01a f98d 	bl	27960 <iprintf>
        case 255: printk("\033[0m");       // Padrão (branco)
    d646:	481a      	ldr	r0, [pc, #104]	; (d6b0 <print_current_position_cb+0x1b8>)
    d648:	f01c fe0e 	bl	2a268 <printk>
  k_mutex_unlock(&c_buffer_busy);
    d64c:	f7ff fc50 	bl	cef0 <k_mutex_unlock.constprop.0.isra.0>
}
    d650:	b00f      	add	sp, #60	; 0x3c
    d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 2: printk("\033[32m");       // Verde
    d656:	f01c fe07 	bl	2a268 <printk>
      else {color(2); printf("GPS Fixed  :No\n");}
    d65a:	4816      	ldr	r0, [pc, #88]	; (d6b4 <print_current_position_cb+0x1bc>)
    d65c:	e766      	b.n	d52c <print_current_position_cb+0x34>
    while (buf_lati[i]){buf_lati[i-2]=buf_lati[i];i++;}
    d65e:	3301      	adds	r3, #1
    d660:	f801 2c22 	strb.w	r2, [r1, #-34]
    d664:	b2db      	uxtb	r3, r3
    d666:	e788      	b.n	d57a <print_current_position_cb+0x82>
    while (buf_long[i]){buf_long[i-2]=buf_long[i];i++;}
    d668:	3301      	adds	r3, #1
    d66a:	f801 2c12 	strb.w	r2, [r1, #-18]
    d66e:	b2db      	uxtb	r3, r3
    d670:	e797      	b.n	d5a2 <print_current_position_cb+0xaa>
    d672:	bf00      	nop
    d674:	00034db1 	.word	0x00034db1
    d678:	00034db7 	.word	0x00034db7
    d67c:	2000a68c 	.word	0x2000a68c
    d680:	00034dd0 	.word	0x00034dd0
    d684:	00034dd6 	.word	0x00034dd6
    d688:	2000b090 	.word	0x2000b090
    d68c:	00034df7 	.word	0x00034df7
    d690:	00034dfa 	.word	0x00034dfa
    d694:	00034e22 	.word	0x00034e22
    d698:	00034e1c 	.word	0x00034e1c
    d69c:	00034e26 	.word	0x00034e26
    d6a0:	00034e2b 	.word	0x00034e2b
    d6a4:	00034e66 	.word	0x00034e66
    d6a8:	00034e7f 	.word	0x00034e7f
    d6ac:	00034e98 	.word	0x00034e98
    d6b0:	00034dac 	.word	0x00034dac
    d6b4:	00034de7 	.word	0x00034de7

0000d6b8 <print_current_position_cb_new>:
void print_current_position_cb_new(uint32_t pos){
    d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d6bc:	4605      	mov	r5, r0
    d6be:	b0a0      	sub	sp, #128	; 0x80
   C_Buffer = k_malloc(size);
    d6c0:	2068      	movs	r0, #104	; 0x68
    d6c2:	f024 f898 	bl	317f6 <k_malloc>
    d6c6:	4604      	mov	r4, r0
   *C_Buffer=read_memory(pos);
    d6c8:	4629      	mov	r1, r5
    d6ca:	a804      	add	r0, sp, #16
    d6cc:	f7ff fd46 	bl	d15c <read_memory>
    d6d0:	2268      	movs	r2, #104	; 0x68
    d6d2:	a904      	add	r1, sp, #16
    d6d4:	4620      	mov	r0, r4
    d6d6:	f024 f8aa 	bl	3182e <memcpy>
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d6da:	f04f 31ff 	mov.w	r1, #4294967295
    d6de:	f04f 30ff 	mov.w	r0, #4294967295
    d6e2:	f7ff fbfd 	bl	cee0 <k_mutex_lock.constprop.0.isra.0>
        case 13: printk("\033[95m");      // Magenta claro
    d6e6:	482b      	ldr	r0, [pc, #172]	; (d794 <print_current_position_cb_new+0xdc>)
    d6e8:	f01c fdbe 	bl	2a268 <printk>
    printf("\n\n####Position %d #####\n",pos);
    d6ec:	4629      	mov	r1, r5
    d6ee:	482a      	ldr	r0, [pc, #168]	; (d798 <print_current_position_cb_new+0xe0>)
    d6f0:	f01a f936 	bl	27960 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    d6f4:	68a0      	ldr	r0, [r4, #8]
    d6f6:	f7fa fe93 	bl	8420 <__aeabi_f2d>
    d6fa:	6863      	ldr	r3, [r4, #4]
    d6fc:	4606      	mov	r6, r0
    d6fe:	9302      	str	r3, [sp, #8]
    d700:	68e0      	ldr	r0, [r4, #12]
    d702:	460f      	mov	r7, r1
    d704:	f7fa fe8c 	bl	8420 <__aeabi_f2d>
    d708:	4632      	mov	r2, r6
    d70a:	e9cd 0100 	strd	r0, r1, [sp]
    d70e:	463b      	mov	r3, r7
    d710:	4822      	ldr	r0, [pc, #136]	; (d79c <print_current_position_cb_new+0xe4>)
    d712:	f01a f925 	bl	27960 <iprintf>
    val_mv = C_Buffer->analog.value;
    d716:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d718:	a81f      	add	r0, sp, #124	; 0x7c
    val_mv = C_Buffer->analog.value;
    d71a:	931f      	str	r3, [sp, #124]	; 0x7c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d71c:	f7ff fbee 	bl	cefc <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    d720:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    d724:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d726:	481e      	ldr	r0, [pc, #120]	; (d7a0 <print_current_position_cb_new+0xe8>)
    d728:	f01a f91a 	bl	27960 <iprintf>
    while (i<3){
    d72c:	4625      	mov	r5, r4
    int i=0;
    d72e:	2600      	movs	r6, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d730:	f8df 8070 	ldr.w	r8, [pc, #112]	; d7a4 <print_current_position_cb_new+0xec>
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d734:	1c77      	adds	r7, r6, #1
    d736:	f8b5 0044 	ldrh.w	r0, [r5, #68]	; 0x44
    d73a:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d73c:	f8d5 9040 	ldr.w	r9, [r5, #64]	; 0x40
      C_Buffer->ntc[i].value,
    d740:	f9b5 a044 	ldrsh.w	sl, [r5, #68]	; 0x44
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d744:	f7fb fe6c 	bl	9420 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d748:	f7fa fe6a 	bl	8420 <__aeabi_f2d>
    d74c:	4653      	mov	r3, sl
    d74e:	e9cd 0100 	strd	r0, r1, [sp]
    d752:	464a      	mov	r2, r9
    d754:	4631      	mov	r1, r6
    d756:	4640      	mov	r0, r8
    d758:	f01a f902 	bl	27960 <iprintf>
    while (i<3){
    d75c:	2f03      	cmp	r7, #3
      i++;
    d75e:	463e      	mov	r6, r7
    while (i<3){
    d760:	f105 0508 	add.w	r5, r5, #8
    d764:	d1e6      	bne.n	d734 <print_current_position_cb_new+0x7c>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    d766:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    d76a:	2100      	movs	r1, #0
    d76c:	480e      	ldr	r0, [pc, #56]	; (d7a8 <print_current_position_cb_new+0xf0>)
    d76e:	f01a f8f7 	bl	27960 <iprintf>
    d772:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    d776:	2101      	movs	r1, #1
    d778:	480b      	ldr	r0, [pc, #44]	; (d7a8 <print_current_position_cb_new+0xf0>)
    d77a:	f01a f8f1 	bl	27960 <iprintf>
        case 255: printk("\033[0m");       // Padrão (branco)
    d77e:	480b      	ldr	r0, [pc, #44]	; (d7ac <print_current_position_cb_new+0xf4>)
    d780:	f01c fd72 	bl	2a268 <printk>
 k_free(C_Buffer);
    d784:	4620      	mov	r0, r4
    d786:	f024 f82f 	bl	317e8 <k_free>
}
    d78a:	b020      	add	sp, #128	; 0x80
    d78c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 k_mutex_unlock(&c_buffer_busy);
    d790:	f7ff bbae 	b.w	cef0 <k_mutex_unlock.constprop.0.isra.0>
    d794:	00034db1 	.word	0x00034db1
    d798:	00034db7 	.word	0x00034db7
    d79c:	00034ead 	.word	0x00034ead
    d7a0:	00034ed9 	.word	0x00034ed9
    d7a4:	00034eff 	.word	0x00034eff
    d7a8:	00034f25 	.word	0x00034f25
    d7ac:	00034dac 	.word	0x00034dac

0000d7b0 <lorawan_tx_data>:
void lorawan_tx_data(void){
    d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data_test[] =  { 0X00 , 0X00 , 0X00 , 0X00 , //LATITUDE
    d7b4:	4b6a      	ldr	r3, [pc, #424]	; (d960 <lorawan_tx_data+0x1b0>)
void lorawan_tx_data(void){
    d7b6:	b08d      	sub	sp, #52	; 0x34
  char data_test[] =  { 0X00 , 0X00 , 0X00 , 0X00 , //LATITUDE
    d7b8:	ac06      	add	r4, sp, #24
    d7ba:	f103 0518 	add.w	r5, r3, #24
    d7be:	4622      	mov	r2, r4
    d7c0:	6818      	ldr	r0, [r3, #0]
    d7c2:	6859      	ldr	r1, [r3, #4]
    d7c4:	3308      	adds	r3, #8
    d7c6:	c203      	stmia	r2!, {r0, r1}
    d7c8:	42ab      	cmp	r3, r5
    d7ca:	4614      	mov	r4, r2
    d7cc:	d1f7      	bne.n	d7be <lorawan_tx_data+0xe>
  k_mutex_lock(&c_buffer_busy, K_FOREVER);
    d7ce:	f04f 31ff 	mov.w	r1, #4294967295
    d7d2:	f04f 30ff 	mov.w	r0, #4294967295
    d7d6:	f7ff fb83 	bl	cee0 <k_mutex_lock.constprop.0.isra.0>
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d7da:	2268      	movs	r2, #104	; 0x68
  uint32_t pos=C_Buffer_Current_Position;
    d7dc:	4b61      	ldr	r3, [pc, #388]	; (d964 <lorawan_tx_data+0x1b4>)
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d7de:	4c62      	ldr	r4, [pc, #392]	; (d968 <lorawan_tx_data+0x1b8>)
  uint32_t pos=C_Buffer_Current_Position;
    d7e0:	681b      	ldr	r3, [r3, #0]
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d7e2:	ad06      	add	r5, sp, #24
    d7e4:	fb02 4403 	mla	r4, r2, r3, r4
    d7e8:	68a3      	ldr	r3, [r4, #8]
  float c=C_Buffer[pos].gnss_module.timestamp; //4 bytes 8 
    d7ea:	6860      	ldr	r0, [r4, #4]
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d7ec:	9302      	str	r3, [sp, #8]
  float b=C_Buffer[pos].gnss_module.longitude; //4 bytes 4..7
    d7ee:	68e3      	ldr	r3, [r4, #12]
    d7f0:	9303      	str	r3, [sp, #12]
  float c=C_Buffer[pos].gnss_module.timestamp; //4 bytes 8 
    d7f2:	f7fb f9b1 	bl	8b58 <__aeabi_i2f>
    d7f6:	9004      	str	r0, [sp, #16]
  float d=C_Buffer[pos].analog.value;          //4 bytes 12..17
    d7f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    d7fa:	f7fb f9ad 	bl	8b58 <__aeabi_i2f>
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d7fe:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
  uint8_t f=C_Buffer[pos].digital[1].value;      //1 byte 17
    d802:	f894 b064 	ldrb.w	fp, [r4, #100]	; 0x64
  uint16_t g=C_Buffer[pos].ntc[0].value;          //2 bytes 18..19
    d806:	f9b4 a044 	ldrsh.w	sl, [r4, #68]	; 0x44
    d80a:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
  uint16_t h=C_Buffer[pos].ntc[1].value;          //2 bytes 20..21
    d80e:	f9b4 904c 	ldrsh.w	r9, [r4, #76]	; 0x4c
    d812:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d816:	f9b4 8054 	ldrsh.w	r8, [r4, #84]	; 0x54
  float d=C_Buffer[pos].analog.value;          //4 bytes 12..17
    d81a:	9005      	str	r0, [sp, #20]
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d81c:	9301      	str	r3, [sp, #4]
  k_mutex_unlock(&c_buffer_busy);
    d81e:	2404      	movs	r4, #4
    d820:	f7ff fb66 	bl	cef0 <k_mutex_unlock.constprop.0.isra.0>
    d824:	462b      	mov	r3, r5
    d826:	f10d 0c08 	add.w	ip, sp, #8
    d82a:	a803      	add	r0, sp, #12
    d82c:	a904      	add	r1, sp, #16
    d82e:	aa05      	add	r2, sp, #20
     data_test[i]    =*(ptr_lati      + i);
    d830:	f81c eb01 	ldrb.w	lr, [ip], #1
  for (int i = 0; i < sizeof(float); i++) {
    d834:	3c01      	subs	r4, #1
     data_test[i]    =*(ptr_lati      + i);
    d836:	f803 eb01 	strb.w	lr, [r3], #1
     data_test[i+4]  =*(ptr_long      + i);
    d83a:	f810 eb01 	ldrb.w	lr, [r0], #1
    d83e:	f883 e003 	strb.w	lr, [r3, #3]
     data_test[i+8]  =*(ptr_timestamp + i);
    d842:	f811 eb01 	ldrb.w	lr, [r1], #1
    d846:	f883 e007 	strb.w	lr, [r3, #7]
     data_test[i+12] =*(ptr_analog    + i);
    d84a:	f812 eb01 	ldrb.w	lr, [r2], #1
    d84e:	f883 e00b 	strb.w	lr, [r3, #11]
  for (int i = 0; i < sizeof(float); i++) {
    d852:	d1ed      	bne.n	d830 <lorawan_tx_data+0x80>
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d854:	4b45      	ldr	r3, [pc, #276]	; (d96c <lorawan_tx_data+0x1bc>)
        case 12: printk("\033[94m");      // Azul claro
    d856:	4846      	ldr	r0, [pc, #280]	; (d970 <lorawan_tx_data+0x1c0>)
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d858:	791b      	ldrb	r3, [r3, #4]
     data_test[21]    =*(ptr_ntc1 + 1); //first LSB and after MSB - little endian
    d85a:	f3c6 2607 	ubfx	r6, r6, #8, #8
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d85e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d862:	9b01      	ldr	r3, [sp, #4]
     data_test[19]    =*(ptr_ntc0 + 1); //first LSB and after MSB - little endian
    d864:	f3c7 2707 	ubfx	r7, r7, #8, #8
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d868:	f3c3 2307 	ubfx	r3, r3, #8, #8
     data_test[21]    =*(ptr_ntc1 + 1); //first LSB and after MSB - little endian
    d86c:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d870:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
     data_test[17] =*(ptr_digi1);
    d874:	f88d b029 	strb.w	fp, [sp, #41]	; 0x29
     data_test[18]    =*(ptr_ntc0 + 0); //first LSB and after MSB - little endian
    d878:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
     data_test[19]    =*(ptr_ntc0 + 1); //first LSB and after MSB - little endian
    d87c:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
     data_test[20]    =*(ptr_ntc1 + 0); //first LSB and after MSB - little endian
    d880:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
     data_test[22]    =*(ptr_ntc2 + 0); //first LSB and after MSB - little endian
    d884:	f88d 802e 	strb.w	r8, [sp, #46]	; 0x2e
        case 12: printk("\033[94m");      // Azul claro
    d888:	f01c fcee 	bl	2a268 <printk>
 printk("HELIUM PAYLOAD: ");
    d88c:	4839      	ldr	r0, [pc, #228]	; (d974 <lorawan_tx_data+0x1c4>)
    d88e:	f01c fceb 	bl	2a268 <printk>
     printk("%02X ",data_test[h]);
    d892:	4e39      	ldr	r6, [pc, #228]	; (d978 <lorawan_tx_data+0x1c8>)
    d894:	4630      	mov	r0, r6
    d896:	f815 1b01 	ldrb.w	r1, [r5], #1
 for (int h = 0; h < sizeof(data_test); h++) {
    d89a:	3401      	adds	r4, #1
     printk("%02X ",data_test[h]);
    d89c:	f01c fce4 	bl	2a268 <printk>
 for (int h = 0; h < sizeof(data_test); h++) {
    d8a0:	2c18      	cmp	r4, #24
    d8a2:	d1f7      	bne.n	d894 <lorawan_tx_data+0xe4>
        case 10: printk("\033[92m");      // Verde claro
    d8a4:	4835      	ldr	r0, [pc, #212]	; (d97c <lorawan_tx_data+0x1cc>)
    d8a6:	f01c fcdf 	bl	2a268 <printk>
  data_sent_cnt++;
    d8aa:	4e35      	ldr	r6, [pc, #212]	; (d980 <lorawan_tx_data+0x1d0>)
  printk("\nSending payload...\n");
    d8ac:	4835      	ldr	r0, [pc, #212]	; (d984 <lorawan_tx_data+0x1d4>)
    d8ae:	f01c fcdb 	bl	2a268 <printk>
        case 255: printk("\033[0m");       // Padrão (branco)
    d8b2:	4835      	ldr	r0, [pc, #212]	; (d988 <lorawan_tx_data+0x1d8>)
    d8b4:	f01c fcd8 	bl	2a268 <printk>
  data_sent_cnt++;
    d8b8:	7833      	ldrb	r3, [r6, #0]
  ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d8ba:	a906      	add	r1, sp, #24
  data_sent_cnt++;
    d8bc:	3301      	adds	r3, #1
    d8be:	7033      	strb	r3, [r6, #0]
  ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d8c0:	4622      	mov	r2, r4
    d8c2:	2300      	movs	r3, #0
    d8c4:	2002      	movs	r0, #2
    d8c6:	f004 fdcd 	bl	12464 <lorawan_send>
		if (ret < 0) {
    d8ca:	1e01      	subs	r1, r0, #0
    d8cc:	4d2f      	ldr	r5, [pc, #188]	; (d98c <lorawan_tx_data+0x1dc>)
    d8ce:	da3a      	bge.n	d946 <lorawan_tx_data+0x196>
			printk("lorawan_send confirm failed -trying again : %d\n\n", ret);
    d8d0:	482f      	ldr	r0, [pc, #188]	; (d990 <lorawan_tx_data+0x1e0>)
    d8d2:	f01c fcc9 	bl	2a268 <printk>
    d8d6:	270b      	movs	r7, #11
       ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d8d8:	f04f 0800 	mov.w	r8, #0
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d8dc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; d994 <lorawan_tx_data+0x1e4>
        }else{printk("Data send failed-trying again ret=%d \n ",ret);
    d8e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; d998 <lorawan_tx_data+0x1e8>
       ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d8e4:	2218      	movs	r2, #24
    d8e6:	2300      	movs	r3, #0
    d8e8:	eb0d 0102 	add.w	r1, sp, r2
    d8ec:	2002      	movs	r0, #2
    d8ee:	f004 fdb9 	bl	12464 <lorawan_send>
       lorawan_reconnect_cnt++;
    d8f2:	682b      	ldr	r3, [r5, #0]
       ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d8f4:	4604      	mov	r4, r0
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d8f6:	2b31      	cmp	r3, #49	; 0x31
       lorawan_reconnect_cnt++;
    d8f8:	f103 0201 	add.w	r2, r3, #1
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d8fc:	bf09      	itett	eq
    d8fe:	2301      	moveq	r3, #1
       lorawan_reconnect_cnt++;
    d900:	602a      	strne	r2, [r5, #0]
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d902:	f8c5 8000 	streq.w	r8, [r5]
    d906:	f889 3000 	strbeq.w	r3, [r9]
       if (ret==0){
    d90a:	b970      	cbnz	r0, d92a <lorawan_tx_data+0x17a>
        printk("Payload Data sent\n");
    d90c:	4823      	ldr	r0, [pc, #140]	; (d99c <lorawan_tx_data+0x1ec>)
    d90e:	f01c fcab 	bl	2a268 <printk>
        lorawan_reconnect_cnt=0;
    d912:	602c      	str	r4, [r5, #0]
    if(data_sent_cnt>=DATA_SENT_JOIN_AGAIN){lorawan_reconnect=1;data_sent_cnt=0;}
    d914:	7833      	ldrb	r3, [r6, #0]
    d916:	2b31      	cmp	r3, #49	; 0x31
    d918:	d904      	bls.n	d924 <lorawan_tx_data+0x174>
    d91a:	2201      	movs	r2, #1
    d91c:	4b1d      	ldr	r3, [pc, #116]	; (d994 <lorawan_tx_data+0x1e4>)
    d91e:	701a      	strb	r2, [r3, #0]
    d920:	2300      	movs	r3, #0
    d922:	7033      	strb	r3, [r6, #0]
}
    d924:	b00d      	add	sp, #52	; 0x34
    d926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else{printk("Data send failed-trying again ret=%d \n ",ret);
    d92a:	4601      	mov	r1, r0
    d92c:	4650      	mov	r0, sl
    d92e:	f01c fc9b 	bl	2a268 <printk>
	return z_impl_k_sleep(timeout);
    d932:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    d936:	2100      	movs	r1, #0
    d938:	f018 fdf6 	bl	26528 <z_impl_k_sleep>
      while(ret<0 && nt<=RETRY){ 
    d93c:	2c00      	cmp	r4, #0
    d93e:	dae9      	bge.n	d914 <lorawan_tx_data+0x164>
    d940:	3f01      	subs	r7, #1
    d942:	d1cf      	bne.n	d8e4 <lorawan_tx_data+0x134>
    d944:	e7e6      	b.n	d914 <lorawan_tx_data+0x164>
        case 10: printk("\033[92m");      // Verde claro
    d946:	480d      	ldr	r0, [pc, #52]	; (d97c <lorawan_tx_data+0x1cc>)
    d948:	f01c fc8e 	bl	2a268 <printk>
		        printk("Payload Data sent!\n\n");
    d94c:	4814      	ldr	r0, [pc, #80]	; (d9a0 <lorawan_tx_data+0x1f0>)
    d94e:	f01c fc8b 	bl	2a268 <printk>
        case 255: printk("\033[0m");       // Padrão (branco)
    d952:	480d      	ldr	r0, [pc, #52]	; (d988 <lorawan_tx_data+0x1d8>)
    d954:	f01c fc88 	bl	2a268 <printk>
            lorawan_reconnect_cnt=0;
    d958:	2300      	movs	r3, #0
    d95a:	602b      	str	r3, [r5, #0]
    d95c:	e7da      	b.n	d914 <lorawan_tx_data+0x164>
    d95e:	bf00      	nop
    d960:	00033216 	.word	0x00033216
    d964:	2002f990 	.word	0x2002f990
    d968:	2000b090 	.word	0x2000b090
    d96c:	20031108 	.word	0x20031108
    d970:	00034f47 	.word	0x00034f47
    d974:	00034f4d 	.word	0x00034f4d
    d978:	00034f5e 	.word	0x00034f5e
    d97c:	00034f64 	.word	0x00034f64
    d980:	2003110e 	.word	0x2003110e
    d984:	00034f6a 	.word	0x00034f6a
    d988:	00034dac 	.word	0x00034dac
    d98c:	2000a688 	.word	0x2000a688
    d990:	00034f7f 	.word	0x00034f7f
    d994:	2003110f 	.word	0x2003110f
    d998:	00034fc3 	.word	0x00034fc3
    d99c:	00034fb0 	.word	0x00034fb0
    d9a0:	00034feb 	.word	0x00034feb

0000d9a4 <setup_initialize>:
void setup_initialize(void){
    d9a4:	b570      	push	{r4, r5, r6, lr}
    d9a6:	b088      	sub	sp, #32
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d9a8:	466b      	mov	r3, sp
    d9aa:	4a25      	ldr	r2, [pc, #148]	; (da40 <setup_initialize+0x9c>)
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d9ac:	ac04      	add	r4, sp, #16
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d9ae:	6810      	ldr	r0, [r2, #0]
    d9b0:	6851      	ldr	r1, [r2, #4]
  uint8_t join[8] = LORAWAN_JOIN_EUI_HELIUM;
    d9b2:	4a24      	ldr	r2, [pc, #144]	; (da44 <setup_initialize+0xa0>)
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d9b4:	c303      	stmia	r3!, {r0, r1}
  uint8_t join[8] = LORAWAN_JOIN_EUI_HELIUM;
    d9b6:	6810      	ldr	r0, [r2, #0]
    d9b8:	6851      	ldr	r1, [r2, #4]
    d9ba:	4622      	mov	r2, r4
    d9bc:	c303      	stmia	r3!, {r0, r1}
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d9be:	4b22      	ldr	r3, [pc, #136]	; (da48 <setup_initialize+0xa4>)
    d9c0:	f103 0610 	add.w	r6, r3, #16
    d9c4:	4625      	mov	r5, r4
    d9c6:	6818      	ldr	r0, [r3, #0]
    d9c8:	6859      	ldr	r1, [r3, #4]
    d9ca:	3308      	adds	r3, #8
    d9cc:	c503      	stmia	r5!, {r0, r1}
    d9ce:	42b3      	cmp	r3, r6
    d9d0:	462c      	mov	r4, r5
    d9d2:	d1f7      	bne.n	d9c4 <setup_initialize+0x20>
  for(i=0;i<=7;i++){Initial_Setup.dev[i] = dev[i];} 
    d9d4:	4668      	mov	r0, sp
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d9d6:	2308      	movs	r3, #8
    d9d8:	491c      	ldr	r1, [pc, #112]	; (da4c <setup_initialize+0xa8>)
  for(i=0;i<=7;i++){Initial_Setup.dev[i] = dev[i];} 
    d9da:	f810 4b01 	ldrb.w	r4, [r0], #1
    d9de:	3b01      	subs	r3, #1
    d9e0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    d9e4:	f801 4f01 	strb.w	r4, [r1, #1]!
    d9e8:	d1f7      	bne.n	d9da <setup_initialize+0x36>
    d9ea:	2308      	movs	r3, #8
    d9ec:	4918      	ldr	r1, [pc, #96]	; (da50 <setup_initialize+0xac>)
    d9ee:	a802      	add	r0, sp, #8
  for(i=0;i<=7;i++){Initial_Setup.join[i] = join[i];} 
    d9f0:	f810 4b01 	ldrb.w	r4, [r0], #1
    d9f4:	3b01      	subs	r3, #1
    d9f6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    d9fa:	f801 4f01 	strb.w	r4, [r1, #1]!
    d9fe:	d1f7      	bne.n	d9f0 <setup_initialize+0x4c>
    da00:	4611      	mov	r1, r2
  for(i=0;i<=15;i++){Initial_Setup.key[i] = key[i];} 
    da02:	461a      	mov	r2, r3
    da04:	4813      	ldr	r0, [pc, #76]	; (da54 <setup_initialize+0xb0>)
    da06:	3201      	adds	r2, #1
    da08:	f811 4b01 	ldrb.w	r4, [r1], #1
    da0c:	b2d2      	uxtb	r2, r2
    da0e:	2a10      	cmp	r2, #16
    da10:	f800 4f01 	strb.w	r4, [r0, #1]!
    da14:	d1f7      	bne.n	da06 <setup_initialize+0x62>
  for(i=0;i<=15;i++){Initial_Setup.nwk_key[i] = 0;} 
    da16:	2200      	movs	r2, #0
    da18:	490f      	ldr	r1, [pc, #60]	; (da58 <setup_initialize+0xb4>)
    da1a:	3301      	adds	r3, #1
    da1c:	b2db      	uxtb	r3, r3
    da1e:	2b10      	cmp	r3, #16
    da20:	f801 2f01 	strb.w	r2, [r1, #1]!
    da24:	d1f9      	bne.n	da1a <setup_initialize+0x76>
  Initial_Setup.joined=OFF;
    da26:	4b0d      	ldr	r3, [pc, #52]	; (da5c <setup_initialize+0xb8>)
  Initial_Setup.led_blink_time=RUN_LED_BLINK_INTERVAL;
    da28:	490d      	ldr	r1, [pc, #52]	; (da60 <setup_initialize+0xbc>)
  Initial_Setup.turn_angle[3]=0;
    da2a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  Initial_Setup.joined=OFF;
    da2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  Initial_Setup.dev_nonce=0;
    da32:	645a      	str	r2, [r3, #68]	; 0x44
  Initial_Setup.led_blink_time=RUN_LED_BLINK_INTERVAL;
    da34:	6019      	str	r1, [r3, #0]
  Initial_Setup.output_port=0;
    da36:	711a      	strb	r2, [r3, #4]
  Initial_Setup.turn_angle[0]=0;
    da38:	80da      	strh	r2, [r3, #6]
  Initial_Setup.turn_speed[2]=0;
    da3a:	821a      	strh	r2, [r3, #16]
}
    da3c:	b008      	add	sp, #32
    da3e:	bd70      	pop	{r4, r5, r6, pc}
    da40:	00035000 	.word	0x00035000
    da44:	00035009 	.word	0x00035009
    da48:	00035012 	.word	0x00035012
    da4c:	2000b055 	.word	0x2000b055
    da50:	2000b05d 	.word	0x2000b05d
    da54:	2000b065 	.word	0x2000b065
    da58:	2000b075 	.word	0x2000b075
    da5c:	2000b044 	.word	0x2000b044
    da60:	000500c8 	.word	0x000500c8

0000da64 <print_setup>:
void print_setup(void){
    da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  printk("Led Blink Time      : %d ms\n",Initial_Setup.led_blink_time);
    da66:	4c2f      	ldr	r4, [pc, #188]	; (db24 <print_setup+0xc0>)
    da68:	482f      	ldr	r0, [pc, #188]	; (db28 <print_setup+0xc4>)
    da6a:	8821      	ldrh	r1, [r4, #0]
    da6c:	f01c fbfc 	bl	2a268 <printk>
	  printk("Interval UpLink Time: %d minutes\n",Initial_Setup.interval_uplink);
    da70:	8861      	ldrh	r1, [r4, #2]
    da72:	482e      	ldr	r0, [pc, #184]	; (db2c <print_setup+0xc8>)
    da74:	f01c fbf8 	bl	2a268 <printk>
    printk("DEV     : ");
    da78:	482d      	ldr	r0, [pc, #180]	; (db30 <print_setup+0xcc>)
    da7a:	f01c fbf5 	bl	2a268 <printk>
    for(int i=0;i<=7;i++){printk("%02X ",Initial_Setup.dev[i]);}
    da7e:	2500      	movs	r5, #0
    da80:	4f2c      	ldr	r7, [pc, #176]	; (db34 <print_setup+0xd0>)
    da82:	f104 0611 	add.w	r6, r4, #17
    da86:	4638      	mov	r0, r7
    da88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    da8c:	3501      	adds	r5, #1
    da8e:	f01c fbeb 	bl	2a268 <printk>
    da92:	2d08      	cmp	r5, #8
    da94:	d1f7      	bne.n	da86 <print_setup+0x22>
    printk("\n");
    da96:	4828      	ldr	r0, [pc, #160]	; (db38 <print_setup+0xd4>)
    da98:	f01c fbe6 	bl	2a268 <printk>
    printk("JOIN    : ");
    da9c:	4827      	ldr	r0, [pc, #156]	; (db3c <print_setup+0xd8>)
    da9e:	f01c fbe3 	bl	2a268 <printk>
    for(int i=0;i<=7;i++){printk("%02X ",Initial_Setup.join[i]);}
    daa2:	2500      	movs	r5, #0
    daa4:	4e26      	ldr	r6, [pc, #152]	; (db40 <print_setup+0xdc>)
    daa6:	4f23      	ldr	r7, [pc, #140]	; (db34 <print_setup+0xd0>)
    daa8:	4638      	mov	r0, r7
    daaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    daae:	3501      	adds	r5, #1
    dab0:	f01c fbda 	bl	2a268 <printk>
    dab4:	2d08      	cmp	r5, #8
    dab6:	d1f7      	bne.n	daa8 <print_setup+0x44>
    printk("\n");
    dab8:	481f      	ldr	r0, [pc, #124]	; (db38 <print_setup+0xd4>)
    daba:	f01c fbd5 	bl	2a268 <printk>
    printk("KEY     : ");
    dabe:	4821      	ldr	r0, [pc, #132]	; (db44 <print_setup+0xe0>)
    dac0:	f01c fbd2 	bl	2a268 <printk>
    for(int i=0;i<=15;i++){printk("%02X ",Initial_Setup.key[i]);}
    dac4:	2500      	movs	r5, #0
    dac6:	4e20      	ldr	r6, [pc, #128]	; (db48 <print_setup+0xe4>)
    dac8:	4f1a      	ldr	r7, [pc, #104]	; (db34 <print_setup+0xd0>)
    daca:	4638      	mov	r0, r7
    dacc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    dad0:	3501      	adds	r5, #1
    dad2:	f01c fbc9 	bl	2a268 <printk>
    dad6:	2d10      	cmp	r5, #16
    dad8:	d1f7      	bne.n	daca <print_setup+0x66>
    printk("\n");
    dada:	4817      	ldr	r0, [pc, #92]	; (db38 <print_setup+0xd4>)
    dadc:	f01c fbc4 	bl	2a268 <printk>
    printk("NWK_KEY : ");
    dae0:	481a      	ldr	r0, [pc, #104]	; (db4c <print_setup+0xe8>)
    dae2:	f01c fbc1 	bl	2a268 <printk>
    for(int i=0;i<=15;i++){printk("%02X ",Initial_Setup.nwk_key[i]);}
    dae6:	2500      	movs	r5, #0
    dae8:	4e19      	ldr	r6, [pc, #100]	; (db50 <print_setup+0xec>)
    daea:	4f12      	ldr	r7, [pc, #72]	; (db34 <print_setup+0xd0>)
    daec:	4638      	mov	r0, r7
    daee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    daf2:	3501      	adds	r5, #1
    daf4:	f01c fbb8 	bl	2a268 <printk>
    daf8:	2d10      	cmp	r5, #16
    dafa:	d1f7      	bne.n	daec <print_setup+0x88>
    printk("\n");
    dafc:	480e      	ldr	r0, [pc, #56]	; (db38 <print_setup+0xd4>)
    dafe:	f01c fbb3 	bl	2a268 <printk>
    printk("DEV_NOUNCE: %08d\n",Initial_Setup.dev_nonce);
    db02:	4814      	ldr	r0, [pc, #80]	; (db54 <print_setup+0xf0>)
    db04:	6c61      	ldr	r1, [r4, #68]	; 0x44
    db06:	f01c fbaf 	bl	2a268 <printk>
    if(Initial_Setup.joined==1){printk("JOIN = ON");}else{printk("JOIN = OFF");}
    db0a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    db0e:	2b01      	cmp	r3, #1
    db10:	bf0c      	ite	eq
    db12:	4811      	ldreq	r0, [pc, #68]	; (db58 <print_setup+0xf4>)
    db14:	4811      	ldrne	r0, [pc, #68]	; (db5c <print_setup+0xf8>)
    db16:	f01c fba7 	bl	2a268 <printk>
}
    db1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printk("\n");
    db1e:	4806      	ldr	r0, [pc, #24]	; (db38 <print_setup+0xd4>)
    db20:	f01c bba2 	b.w	2a268 <printk>
    db24:	2000b044 	.word	0x2000b044
    db28:	00035023 	.word	0x00035023
    db2c:	000346f0 	.word	0x000346f0
    db30:	00035040 	.word	0x00035040
    db34:	00034f5e 	.word	0x00034f5e
    db38:	00034ffe 	.word	0x00034ffe
    db3c:	0003504b 	.word	0x0003504b
    db40:	2000b05d 	.word	0x2000b05d
    db44:	00035056 	.word	0x00035056
    db48:	2000b065 	.word	0x2000b065
    db4c:	00035061 	.word	0x00035061
    db50:	2000b075 	.word	0x2000b075
    db54:	0003506c 	.word	0x0003506c
    db58:	0003507e 	.word	0x0003507e
    db5c:	00035088 	.word	0x00035088

0000db60 <color>:
    switch (color) {
    db60:	280f      	cmp	r0, #15
    db62:	d80c      	bhi.n	db7e <color+0x1e>
    db64:	3801      	subs	r0, #1
    db66:	280e      	cmp	r0, #14
    db68:	d80b      	bhi.n	db82 <color+0x22>
    db6a:	e8df f000 	tbb	[pc, r0]
    db6e:	0f0d      	.short	0x0f0d
    db70:	17151311 	.word	0x17151311
    db74:	1f1d1b19 	.word	0x1f1d1b19
    db78:	27252321 	.word	0x27252321
    db7c:	29          	.byte	0x29
    db7d:	00          	.byte	0x00
    db7e:	28ff      	cmp	r0, #255	; 0xff
    db80:	d120      	bne.n	dbc4 <color+0x64>
        case 0: printk("\033[0m");        // Preto
    db82:	4811      	ldr	r0, [pc, #68]	; (dbc8 <color+0x68>)
        case 15: printk("\033[97m");      // Branco claro
    db84:	f01c bb70 	b.w	2a268 <printk>
        case 1: printk("\033[31m");       // Vermelho
    db88:	4810      	ldr	r0, [pc, #64]	; (dbcc <color+0x6c>)
    db8a:	e7fb      	b.n	db84 <color+0x24>
        case 2: printk("\033[32m");       // Verde
    db8c:	4810      	ldr	r0, [pc, #64]	; (dbd0 <color+0x70>)
    db8e:	e7f9      	b.n	db84 <color+0x24>
        case 3: printk("\033[33m");       // Amarelo
    db90:	4810      	ldr	r0, [pc, #64]	; (dbd4 <color+0x74>)
    db92:	e7f7      	b.n	db84 <color+0x24>
        case 4: printk("\033[34m");       // Azul
    db94:	4810      	ldr	r0, [pc, #64]	; (dbd8 <color+0x78>)
    db96:	e7f5      	b.n	db84 <color+0x24>
        case 5: printk("\033[35m");       // Magenta
    db98:	4810      	ldr	r0, [pc, #64]	; (dbdc <color+0x7c>)
    db9a:	e7f3      	b.n	db84 <color+0x24>
        case 6: printk("\033[36m");       // Ciano
    db9c:	4810      	ldr	r0, [pc, #64]	; (dbe0 <color+0x80>)
    db9e:	e7f1      	b.n	db84 <color+0x24>
        case 7: printk("\033[37m");       // Branco
    dba0:	4810      	ldr	r0, [pc, #64]	; (dbe4 <color+0x84>)
    dba2:	e7ef      	b.n	db84 <color+0x24>
        case 8: printk("\033[90m");       // Cinza claro
    dba4:	4810      	ldr	r0, [pc, #64]	; (dbe8 <color+0x88>)
    dba6:	e7ed      	b.n	db84 <color+0x24>
        case 9: printk("\033[91m");       // Vermelho claro
    dba8:	4810      	ldr	r0, [pc, #64]	; (dbec <color+0x8c>)
    dbaa:	e7eb      	b.n	db84 <color+0x24>
        case 10: printk("\033[92m");      // Verde claro
    dbac:	4810      	ldr	r0, [pc, #64]	; (dbf0 <color+0x90>)
    dbae:	e7e9      	b.n	db84 <color+0x24>
        case 11: printk("\033[93m");      // Amarelo claro
    dbb0:	4810      	ldr	r0, [pc, #64]	; (dbf4 <color+0x94>)
    dbb2:	e7e7      	b.n	db84 <color+0x24>
        case 12: printk("\033[94m");      // Azul claro
    dbb4:	4810      	ldr	r0, [pc, #64]	; (dbf8 <color+0x98>)
    dbb6:	e7e5      	b.n	db84 <color+0x24>
        case 13: printk("\033[95m");      // Magenta claro
    dbb8:	4810      	ldr	r0, [pc, #64]	; (dbfc <color+0x9c>)
    dbba:	e7e3      	b.n	db84 <color+0x24>
        case 14: printk("\033[96m");      // Ciano claro
    dbbc:	4810      	ldr	r0, [pc, #64]	; (dc00 <color+0xa0>)
    dbbe:	e7e1      	b.n	db84 <color+0x24>
        case 15: printk("\033[97m");      // Branco claro
    dbc0:	4810      	ldr	r0, [pc, #64]	; (dc04 <color+0xa4>)
    dbc2:	e7df      	b.n	db84 <color+0x24>
                break;
    }
}
    dbc4:	4770      	bx	lr
    dbc6:	bf00      	nop
    dbc8:	00034dac 	.word	0x00034dac
    dbcc:	00035093 	.word	0x00035093
    dbd0:	00034dd0 	.word	0x00034dd0
    dbd4:	00035099 	.word	0x00035099
    dbd8:	0003509f 	.word	0x0003509f
    dbdc:	000350a5 	.word	0x000350a5
    dbe0:	00034d66 	.word	0x00034d66
    dbe4:	000350ab 	.word	0x000350ab
    dbe8:	000350b1 	.word	0x000350b1
    dbec:	000350b7 	.word	0x000350b7
    dbf0:	00034f64 	.word	0x00034f64
    dbf4:	000350bd 	.word	0x000350bd
    dbf8:	00034f47 	.word	0x00034f47
    dbfc:	00034db1 	.word	0x00034db1
    dc00:	000350c3 	.word	0x000350c3
    dc04:	000350c9 	.word	0x000350c9

0000dc08 <cmd_interpreter>:

void cmd_interpreter(uint8_t *data,uint8_t len){
    dc08:	b510      	push	{r4, lr}
    dc0a:	4604      	mov	r4, r0
        case 4: printk("\033[34m");       // Azul
    dc0c:	4822      	ldr	r0, [pc, #136]	; (dc98 <cmd_interpreter+0x90>)
    dc0e:	f01c fb2b 	bl	2a268 <printk>
  color(4);
  	switch(data[0]){
    dc12:	7823      	ldrb	r3, [r4, #0]
    dc14:	3b50      	subs	r3, #80	; 0x50
    dc16:	2b08      	cmp	r3, #8
    dc18:	d812      	bhi.n	dc40 <cmd_interpreter+0x38>
    dc1a:	e8df f003 	tbb	[pc, r3]
    dc1e:	3931      	.short	0x3931
    dc20:	11111126 	.word	0x11111126
    dc24:	1605      	.short	0x1605
    dc26:	1e          	.byte	0x1e
    dc27:	00          	.byte	0x00
        case 1: printk("\033[31m");       // Vermelho
    dc28:	481c      	ldr	r0, [pc, #112]	; (dc9c <cmd_interpreter+0x94>)
    dc2a:	f01c fb1d 	bl	2a268 <printk>
			case CMD_RESET_ALARM_FLAG: //RESET ALARM SIGNAL
			   color(1);
         sensor_status.number[SENSOR_DIG_4]=0;
    dc2e:	2200      	movs	r2, #0
    dc30:	4b1b      	ldr	r3, [pc, #108]	; (dca0 <cmd_interpreter+0x98>)
         Initial_Setup.interval_uplink=LORAWAN_INTERVAL_NORMAL;
			   printk("ALARM FLAG RESET 4\n");
    dc32:	481c      	ldr	r0, [pc, #112]	; (dca4 <cmd_interpreter+0x9c>)
         sensor_status.number[SENSOR_DIG_4]=0;
    dc34:	711a      	strb	r2, [r3, #4]
         Initial_Setup.interval_uplink=LORAWAN_INTERVAL_NORMAL;
    dc36:	2205      	movs	r2, #5
    dc38:	4b1b      	ldr	r3, [pc, #108]	; (dca8 <cmd_interpreter+0xa0>)
    dc3a:	805a      	strh	r2, [r3, #2]
			break;
			case CMD_LED4_ON: // TURN ON LED 4
			   color(1);
			   gpio_pin_set_dt(LED4, ON);
			   printk("TURNED ON LED 4\n");
    dc3c:	f01c fb14 	bl	2a268 <printk>
		}
       color(0);
      
	 

    dc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case 0: printk("\033[0m");        // Preto
    dc44:	4819      	ldr	r0, [pc, #100]	; (dcac <cmd_interpreter+0xa4>)
    dc46:	f01c bb0f 	b.w	2a268 <printk>
        case 1: printk("\033[31m");       // Vermelho
    dc4a:	4814      	ldr	r0, [pc, #80]	; (dc9c <cmd_interpreter+0x94>)
    dc4c:	f01c fb0c 	bl	2a268 <printk>
			   gpio_pin_set_dt(LED4, ON);
    dc50:	2001      	movs	r0, #1
    dc52:	f7ff f977 	bl	cf44 <gpio_pin_set_dt.constprop.0.isra.0>
			   printk("TURNED ON LED 4\n");
    dc56:	4816      	ldr	r0, [pc, #88]	; (dcb0 <cmd_interpreter+0xa8>)
    dc58:	e7f0      	b.n	dc3c <cmd_interpreter+0x34>
        case 1: printk("\033[31m");       // Vermelho
    dc5a:	4810      	ldr	r0, [pc, #64]	; (dc9c <cmd_interpreter+0x94>)
    dc5c:	f01c fb04 	bl	2a268 <printk>
			   gpio_pin_set_dt(LED4, OFF);
    dc60:	2000      	movs	r0, #0
    dc62:	f7ff f96f 	bl	cf44 <gpio_pin_set_dt.constprop.0.isra.0>
			   printk("TURNED OFF LED 4\n");
    dc66:	4813      	ldr	r0, [pc, #76]	; (dcb4 <cmd_interpreter+0xac>)
    dc68:	e7e8      	b.n	dc3c <cmd_interpreter+0x34>
        case 2: printk("\033[32m");       // Verde
    dc6a:	4813      	ldr	r0, [pc, #76]	; (dcb8 <cmd_interpreter+0xb0>)
    dc6c:	f01c fafc 	bl	2a268 <printk>
			    setup_initialize();
    dc70:	f7ff fe98 	bl	d9a4 <setup_initialize>
				flash_write_setup();
    dc74:	f7ff f99e 	bl	cfb4 <flash_write_setup>
				print_setup();
    dc78:	f7ff fef4 	bl	da64 <print_setup>
				printk("Setup Reset\n");
    dc7c:	480f      	ldr	r0, [pc, #60]	; (dcbc <cmd_interpreter+0xb4>)
    dc7e:	e7dd      	b.n	dc3c <cmd_interpreter+0x34>
        case 3: printk("\033[33m");       // Amarelo
    dc80:	480f      	ldr	r0, [pc, #60]	; (dcc0 <cmd_interpreter+0xb8>)
    dc82:	f01c faf1 	bl	2a268 <printk>
			     flash_read_setup();
    dc86:	f7ff f99f 	bl	cfc8 <flash_read_setup>
			     print_setup();
    dc8a:	f7ff feeb 	bl	da64 <print_setup>
			break;
    dc8e:	e7d7      	b.n	dc40 <cmd_interpreter+0x38>
        case 3: printk("\033[33m");       // Amarelo
    dc90:	480b      	ldr	r0, [pc, #44]	; (dcc0 <cmd_interpreter+0xb8>)
    dc92:	f01c fae9 	bl	2a268 <printk>
    dc96:	e7f8      	b.n	dc8a <cmd_interpreter+0x82>
    dc98:	0003509f 	.word	0x0003509f
    dc9c:	00035093 	.word	0x00035093
    dca0:	20031108 	.word	0x20031108
    dca4:	000350cf 	.word	0x000350cf
    dca8:	2000b044 	.word	0x2000b044
    dcac:	00034dac 	.word	0x00034dac
    dcb0:	000350e3 	.word	0x000350e3
    dcb4:	000350f4 	.word	0x000350f4
    dcb8:	00034dd0 	.word	0x00034dd0
    dcbc:	00035106 	.word	0x00035106
    dcc0:	00035099 	.word	0x00035099

0000dcc4 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    dcc4:	b500      	push	{lr}
    pb_type_t type = field->type;
    dcc6:	7d83      	ldrb	r3, [r0, #22]
{
    dcc8:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    dcca:	2b3f      	cmp	r3, #63	; 0x3f
{
    dccc:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    dcce:	d849      	bhi.n	dd64 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    dcd0:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    dcd4:	d01c      	beq.n	dd10 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    dcd6:	2820      	cmp	r0, #32
    dcd8:	d102      	bne.n	dce0 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    dcda:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    dcdc:	8818      	ldrh	r0, [r3, #0]
    dcde:	e006      	b.n	dcee <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    dce0:	2830      	cmp	r0, #48	; 0x30
    dce2:	d0fa      	beq.n	dcda <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    dce4:	2810      	cmp	r0, #16
    dce6:	d106      	bne.n	dcf6 <pb_check_proto3_default_value+0x32>
    dce8:	6a0a      	ldr	r2, [r1, #32]
    dcea:	b122      	cbz	r2, dcf6 <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    dcec:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    dcee:	fab0 f080 	clz	r0, r0
    dcf2:	0940      	lsrs	r0, r0, #5
    dcf4:	e00c      	b.n	dd10 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    dcf6:	680a      	ldr	r2, [r1, #0]
    dcf8:	6890      	ldr	r0, [r2, #8]
    dcfa:	b980      	cbnz	r0, dd1e <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    dcfc:	f003 020f 	and.w	r2, r3, #15
    dd00:	2a05      	cmp	r2, #5
    dd02:	d80e      	bhi.n	dd22 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    dd04:	69cb      	ldr	r3, [r1, #28]
    dd06:	8a4a      	ldrh	r2, [r1, #18]
    dd08:	441a      	add	r2, r3
    dd0a:	4293      	cmp	r3, r2
    dd0c:	d103      	bne.n	dd16 <pb_check_proto3_default_value+0x52>
            return true;
    dd0e:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    dd10:	b00b      	add	sp, #44	; 0x2c
    dd12:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    dd16:	f813 1b01 	ldrb.w	r1, [r3], #1
    dd1a:	2900      	cmp	r1, #0
    dd1c:	d0f5      	beq.n	dd0a <pb_check_proto3_default_value+0x46>
            return false;
    dd1e:	2000      	movs	r0, #0
    dd20:	e7f6      	b.n	dd10 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    dd22:	2a06      	cmp	r2, #6
    dd24:	d101      	bne.n	dd2a <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    dd26:	69cb      	ldr	r3, [r1, #28]
    dd28:	e7d8      	b.n	dcdc <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    dd2a:	2a07      	cmp	r2, #7
    dd2c:	d102      	bne.n	dd34 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    dd2e:	69cb      	ldr	r3, [r1, #28]
    dd30:	7818      	ldrb	r0, [r3, #0]
    dd32:	e7dc      	b.n	dcee <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    dd34:	2a0b      	cmp	r2, #11
    dd36:	d101      	bne.n	dd3c <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    dd38:	8a48      	ldrh	r0, [r1, #18]
    dd3a:	e7d8      	b.n	dcee <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    dd3c:	f003 030e 	and.w	r3, r3, #14
    dd40:	2b08      	cmp	r3, #8
    dd42:	d1e5      	bne.n	dd10 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    dd44:	69ca      	ldr	r2, [r1, #28]
    dd46:	4668      	mov	r0, sp
    dd48:	6a49      	ldr	r1, [r1, #36]	; 0x24
    dd4a:	f01c f990 	bl	2a06e <pb_field_iter_begin>
    dd4e:	2800      	cmp	r0, #0
    dd50:	d0dd      	beq.n	dd0e <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    dd52:	4668      	mov	r0, sp
    dd54:	f7ff ffb6 	bl	dcc4 <pb_check_proto3_default_value>
    dd58:	2800      	cmp	r0, #0
    dd5a:	d0d9      	beq.n	dd10 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    dd5c:	4668      	mov	r0, sp
    dd5e:	f01c f9a9 	bl	2a0b4 <pb_field_iter_next>
    dd62:	e7f4      	b.n	dd4e <pb_check_proto3_default_value+0x8a>
    dd64:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    dd68:	2a80      	cmp	r2, #128	; 0x80
    dd6a:	d101      	bne.n	dd70 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    dd6c:	69c0      	ldr	r0, [r0, #28]
    dd6e:	e7be      	b.n	dcee <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    dd70:	2a40      	cmp	r2, #64	; 0x40
    dd72:	d1d4      	bne.n	dd1e <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    dd74:	f003 030f 	and.w	r3, r3, #15
    dd78:	2b0a      	cmp	r3, #10
    dd7a:	d102      	bne.n	dd82 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    dd7c:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    dd7e:	6818      	ldr	r0, [r3, #0]
    dd80:	e7b5      	b.n	dcee <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    dd82:	6803      	ldr	r3, [r0, #0]
    dd84:	4a02      	ldr	r2, [pc, #8]	; (dd90 <pb_check_proto3_default_value+0xcc>)
    dd86:	68d8      	ldr	r0, [r3, #12]
    dd88:	4290      	cmp	r0, r2
    dd8a:	d1b0      	bne.n	dcee <pb_check_proto3_default_value+0x2a>
    dd8c:	e7f6      	b.n	dd7c <pb_check_proto3_default_value+0xb8>
    dd8e:	bf00      	nop
    dd90:	0002a0d3 	.word	0x0002a0d3

0000dd94 <pb_ostream_from_buffer>:
    return stream;
    dd94:	6082      	str	r2, [r0, #8]
    dd96:	2200      	movs	r2, #0
{
    dd98:	b510      	push	{r4, lr}
    return stream;
    dd9a:	4c03      	ldr	r4, [pc, #12]	; (dda8 <pb_ostream_from_buffer+0x14>)
    dd9c:	e9c0 2203 	strd	r2, r2, [r0, #12]
    dda0:	e9c0 4100 	strd	r4, r1, [r0]
}
    dda4:	bd10      	pop	{r4, pc}
    dda6:	bf00      	nop
    dda8:	0002a103 	.word	0x0002a103

0000ddac <pb_write>:
{
    ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddae:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    ddb0:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    ddb2:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    ddb4:	b19a      	cbz	r2, ddde <pb_write+0x32>
    ddb6:	6806      	ldr	r6, [r0, #0]
    ddb8:	b18e      	cbz	r6, ddde <pb_write+0x32>
    ddba:	18d3      	adds	r3, r2, r3
    ddbc:	d202      	bcs.n	ddc4 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    ddbe:	6887      	ldr	r7, [r0, #8]
    ddc0:	429f      	cmp	r7, r3
    ddc2:	d207      	bcs.n	ddd4 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    ddc4:	6923      	ldr	r3, [r4, #16]
    ddc6:	4a08      	ldr	r2, [pc, #32]	; (dde8 <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    ddc8:	2b00      	cmp	r3, #0
    ddca:	bf08      	it	eq
    ddcc:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    ddce:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    ddd0:	6123      	str	r3, [r4, #16]
}
    ddd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    ddd4:	47b0      	blx	r6
    ddd6:	b910      	cbnz	r0, ddde <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    ddd8:	6923      	ldr	r3, [r4, #16]
    ddda:	4a04      	ldr	r2, [pc, #16]	; (ddec <pb_write+0x40>)
    dddc:	e7f4      	b.n	ddc8 <pb_write+0x1c>
    stream->bytes_written += count;
    ddde:	68e3      	ldr	r3, [r4, #12]
    return true;
    dde0:	2001      	movs	r0, #1
    stream->bytes_written += count;
    dde2:	442b      	add	r3, r5
    dde4:	60e3      	str	r3, [r4, #12]
    return true;
    dde6:	e7f4      	b.n	ddd2 <pb_write+0x26>
    dde8:	00035113 	.word	0x00035113
    ddec:	0003511f 	.word	0x0003511f

0000ddf0 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    ddf0:	b410      	push	{r4}
    ddf2:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    ddf4:	8a4b      	ldrh	r3, [r1, #18]
    ddf6:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    ddfa:	2c02      	cmp	r4, #2
    ddfc:	d117      	bne.n	de2e <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    ddfe:	2b01      	cmp	r3, #1
    de00:	d105      	bne.n	de0e <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    de02:	69cb      	ldr	r3, [r1, #28]
    de04:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    de06:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    de08:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    de0a:	f01c b983 	b.w	2a114 <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    de0e:	2b02      	cmp	r3, #2
    de10:	d102      	bne.n	de18 <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    de12:	69cb      	ldr	r3, [r1, #28]
    de14:	881a      	ldrh	r2, [r3, #0]
    de16:	e7f6      	b.n	de06 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    de18:	2b04      	cmp	r3, #4
    de1a:	d102      	bne.n	de22 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    de1c:	69cb      	ldr	r3, [r1, #28]
    de1e:	681a      	ldr	r2, [r3, #0]
    de20:	e7f1      	b.n	de06 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    de22:	2b08      	cmp	r3, #8
    de24:	d11f      	bne.n	de66 <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    de26:	69cb      	ldr	r3, [r1, #28]
    de28:	e9d3 2300 	ldrd	r2, r3, [r3]
    de2c:	e7ec      	b.n	de08 <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    de2e:	2b01      	cmp	r3, #1
    de30:	d108      	bne.n	de44 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    de32:	69cb      	ldr	r3, [r1, #28]
    de34:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    de38:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    de3a:	2c03      	cmp	r4, #3
    de3c:	d1e4      	bne.n	de08 <pb_enc_varint+0x18>
}
    de3e:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    de40:	f01c b9a7 	b.w	2a192 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    de44:	2b02      	cmp	r3, #2
    de46:	d103      	bne.n	de50 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    de48:	69cb      	ldr	r3, [r1, #28]
    de4a:	f9b3 2000 	ldrsh.w	r2, [r3]
    de4e:	e7f3      	b.n	de38 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    de50:	2b04      	cmp	r3, #4
    de52:	d102      	bne.n	de5a <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    de54:	69cb      	ldr	r3, [r1, #28]
    de56:	681a      	ldr	r2, [r3, #0]
    de58:	e7ee      	b.n	de38 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    de5a:	2b08      	cmp	r3, #8
    de5c:	d103      	bne.n	de66 <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    de5e:	69cb      	ldr	r3, [r1, #28]
    de60:	e9d3 2300 	ldrd	r2, r3, [r3]
    de64:	e7e9      	b.n	de3a <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    de66:	6903      	ldr	r3, [r0, #16]
    de68:	4a03      	ldr	r2, [pc, #12]	; (de78 <pb_enc_varint+0x88>)
    de6a:	2b00      	cmp	r3, #0
    de6c:	bf08      	it	eq
    de6e:	4613      	moveq	r3, r2
    de70:	6103      	str	r3, [r0, #16]
}
    de72:	bc10      	pop	{r4}
    de74:	2000      	movs	r0, #0
    de76:	4770      	bx	lr
    de78:	00035128 	.word	0x00035128

0000de7c <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    de7c:	8a4a      	ldrh	r2, [r1, #18]
    de7e:	2a04      	cmp	r2, #4
    de80:	d102      	bne.n	de88 <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    de82:	69c9      	ldr	r1, [r1, #28]
    de84:	f01c b98e 	b.w	2a1a4 <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    de88:	2a08      	cmp	r2, #8
    de8a:	d102      	bne.n	de92 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    de8c:	69c9      	ldr	r1, [r1, #28]
    de8e:	f01c b98c 	b.w	2a1aa <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    de92:	6902      	ldr	r2, [r0, #16]
    de94:	4903      	ldr	r1, [pc, #12]	; (dea4 <pb_enc_fixed+0x28>)
    de96:	2a00      	cmp	r2, #0
    de98:	bf08      	it	eq
    de9a:	460a      	moveq	r2, r1
    de9c:	6102      	str	r2, [r0, #16]
    }
}
    de9e:	2000      	movs	r0, #0
    dea0:	4770      	bx	lr
    dea2:	bf00      	nop
    dea4:	00035128 	.word	0x00035128

0000dea8 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    dea8:	7d8a      	ldrb	r2, [r1, #22]
{
    deaa:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    deac:	f002 020f 	and.w	r2, r2, #15
    deb0:	2a0b      	cmp	r2, #11
    deb2:	d811      	bhi.n	ded8 <pb_encode_tag_for_field+0x30>
    deb4:	e8df f002 	tbb	[pc, r2]
    deb8:	0c0c0c0c 	.word	0x0c0c0c0c
    debc:	0a0a060e 	.word	0x0a0a060e
    dec0:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    dec4:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    dec6:	8a1a      	ldrh	r2, [r3, #16]
    dec8:	f01c b972 	b.w	2a1b0 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    decc:	2102      	movs	r1, #2
            break;
    dece:	e7fa      	b.n	dec6 <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    ded0:	2100      	movs	r1, #0
    ded2:	e7f8      	b.n	dec6 <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    ded4:	2105      	movs	r1, #5
    ded6:	e7f6      	b.n	dec6 <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    ded8:	6903      	ldr	r3, [r0, #16]
    deda:	4a03      	ldr	r2, [pc, #12]	; (dee8 <pb_encode_tag_for_field+0x40>)
    dedc:	2b00      	cmp	r3, #0
    dede:	bf08      	it	eq
    dee0:	4613      	moveq	r3, r2
    dee2:	6103      	str	r3, [r0, #16]
}
    dee4:	2000      	movs	r0, #0
    dee6:	4770      	bx	lr
    dee8:	0003513a 	.word	0x0003513a

0000deec <pb_encode_submessage>:
{
    deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    def0:	460e      	mov	r6, r1
    def2:	4617      	mov	r7, r2
    def4:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    def6:	2214      	movs	r2, #20
    def8:	2100      	movs	r1, #0
{
    defa:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    defc:	a801      	add	r0, sp, #4
    defe:	f023 fcd0 	bl	318a2 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    df02:	463a      	mov	r2, r7
    df04:	4631      	mov	r1, r6
    df06:	a801      	add	r0, sp, #4
    df08:	f000 f9c4 	bl	e294 <pb_encode>
    df0c:	b910      	cbnz	r0, df14 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    df0e:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    df10:	6123      	str	r3, [r4, #16]
    df12:	e008      	b.n	df26 <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    df14:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    df18:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    df1a:	4643      	mov	r3, r8
    df1c:	462a      	mov	r2, r5
    df1e:	4620      	mov	r0, r4
    df20:	f01c f8f8 	bl	2a114 <pb_encode_varint>
    df24:	b918      	cbnz	r0, df2e <pb_encode_submessage+0x42>
        return false;
    df26:	2000      	movs	r0, #0
}
    df28:	b006      	add	sp, #24
    df2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    df2e:	6821      	ldr	r1, [r4, #0]
    df30:	b921      	cbnz	r1, df3c <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    df32:	462a      	mov	r2, r5
    df34:	4620      	mov	r0, r4
    df36:	f7ff ff39 	bl	ddac <pb_write>
    df3a:	e7f5      	b.n	df28 <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    df3c:	68e3      	ldr	r3, [r4, #12]
    df3e:	68a2      	ldr	r2, [r4, #8]
    df40:	442b      	add	r3, r5
    df42:	4293      	cmp	r3, r2
    df44:	d905      	bls.n	df52 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    df46:	6923      	ldr	r3, [r4, #16]
    df48:	4a0e      	ldr	r2, [pc, #56]	; (df84 <pb_encode_submessage+0x98>)
    df4a:	2b00      	cmp	r3, #0
    df4c:	bf08      	it	eq
    df4e:	4613      	moveq	r3, r2
    df50:	e7de      	b.n	df10 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    df52:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    df54:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    df56:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    df58:	a801      	add	r0, sp, #4
    df5a:	4631      	mov	r1, r6
    substream.max_size = size;
    df5c:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    df60:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    df64:	f000 f996 	bl	e294 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    df68:	9a04      	ldr	r2, [sp, #16]
    df6a:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    df6c:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    df6e:	4413      	add	r3, r2
    df70:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    df72:	9b02      	ldr	r3, [sp, #8]
    df74:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    df76:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    df78:	d101      	bne.n	df7e <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    df7a:	6123      	str	r3, [r4, #16]
    df7c:	e7d4      	b.n	df28 <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    df7e:	4a02      	ldr	r2, [pc, #8]	; (df88 <pb_encode_submessage+0x9c>)
    df80:	e7e3      	b.n	df4a <pb_encode_submessage+0x5e>
    df82:	bf00      	nop
    df84:	00035113 	.word	0x00035113
    df88:	0003514d 	.word	0x0003514d

0000df8c <encode_basic_field>:
{
    df8c:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    df8e:	69cb      	ldr	r3, [r1, #28]
{
    df90:	4604      	mov	r4, r0
    df92:	460d      	mov	r5, r1
    if (!field->pData)
    df94:	2b00      	cmp	r3, #0
    df96:	d07f      	beq.n	e098 <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    df98:	f7ff ff86 	bl	dea8 <pb_encode_tag_for_field>
    df9c:	2800      	cmp	r0, #0
    df9e:	d073      	beq.n	e088 <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    dfa0:	7da8      	ldrb	r0, [r5, #22]
    dfa2:	f000 030f 	and.w	r3, r0, #15
    dfa6:	2b0b      	cmp	r3, #11
    dfa8:	d873      	bhi.n	e092 <encode_basic_field+0x106>
    dfaa:	e8df f003 	tbb	[pc, r3]
    dfae:	1106      	.short	0x1106
    dfb0:	17171111 	.word	0x17171111
    dfb4:	5252351d 	.word	0x5252351d
    dfb8:	6f72      	.short	0x6f72
        if (p[i] != 0)
    dfba:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    dfbc:	4620      	mov	r0, r4
}
    dfbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    dfc2:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    dfc4:	2300      	movs	r3, #0
    dfc6:	3a00      	subs	r2, #0
    dfc8:	bf18      	it	ne
    dfca:	2201      	movne	r2, #1
    dfcc:	f01c b8a2 	b.w	2a114 <pb_encode_varint>
            return pb_enc_varint(stream, field);
    dfd0:	4629      	mov	r1, r5
    dfd2:	4620      	mov	r0, r4
}
    dfd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    dfd8:	f7ff bf0a 	b.w	ddf0 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    dfdc:	4629      	mov	r1, r5
    dfde:	4620      	mov	r0, r4
}
    dfe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    dfe4:	f7ff bf4a 	b.w	de7c <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    dfe8:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    dfea:	b909      	cbnz	r1, dff0 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    dfec:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    dfee:	e00e      	b.n	e00e <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    dff0:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    dff2:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    dff4:	d80a      	bhi.n	e00c <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    dff6:	8a6b      	ldrh	r3, [r5, #18]
    dff8:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    dffa:	4293      	cmp	r3, r2
    dffc:	d206      	bcs.n	e00c <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    dffe:	6923      	ldr	r3, [r4, #16]
    e000:	4a26      	ldr	r2, [pc, #152]	; (e09c <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    e002:	2b00      	cmp	r3, #0
    e004:	bf08      	it	eq
    e006:	4613      	moveq	r3, r2
    e008:	6123      	str	r3, [r4, #16]
    e00a:	e03d      	b.n	e088 <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    e00c:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    e00e:	4620      	mov	r0, r4
}
    e010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    e014:	f01c b8d2 	b.w	2a1bc <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    e018:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    e01c:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    e01e:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    e020:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    e022:	d00e      	beq.n	e042 <encode_basic_field+0xb6>
        if (max_size == 0)
    e024:	b913      	cbnz	r3, e02c <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    e026:	6923      	ldr	r3, [r4, #16]
    e028:	4a1d      	ldr	r2, [pc, #116]	; (e0a0 <encode_basic_field+0x114>)
    e02a:	e7ea      	b.n	e002 <encode_basic_field+0x76>
        max_size -= 1;
    e02c:	3b01      	subs	r3, #1
    if (str == NULL)
    e02e:	2900      	cmp	r1, #0
    e030:	d0dc      	beq.n	dfec <encode_basic_field+0x60>
    size_t size = 0;
    e032:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    e034:	429a      	cmp	r2, r3
    e036:	5c88      	ldrb	r0, [r1, r2]
    e038:	d006      	beq.n	e048 <encode_basic_field+0xbc>
    e03a:	2800      	cmp	r0, #0
    e03c:	d0e7      	beq.n	e00e <encode_basic_field+0x82>
            size++;
    e03e:	3201      	adds	r2, #1
            p++;
    e040:	e7f8      	b.n	e034 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    e042:	f04f 33ff 	mov.w	r3, #4294967295
    e046:	e7f2      	b.n	e02e <encode_basic_field+0xa2>
        if (*p != '\0')
    e048:	2800      	cmp	r0, #0
    e04a:	d0e0      	beq.n	e00e <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    e04c:	6923      	ldr	r3, [r4, #16]
    e04e:	4a15      	ldr	r2, [pc, #84]	; (e0a4 <encode_basic_field+0x118>)
    e050:	e7d7      	b.n	e002 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    e052:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e054:	b912      	cbnz	r2, e05c <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    e056:	6923      	ldr	r3, [r4, #16]
    e058:	4a13      	ldr	r2, [pc, #76]	; (e0a8 <encode_basic_field+0x11c>)
    e05a:	e7d2      	b.n	e002 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    e05c:	2b09      	cmp	r3, #9
    e05e:	d006      	beq.n	e06e <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    e060:	4620      	mov	r0, r4
    e062:	69ea      	ldr	r2, [r5, #28]
    e064:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    e066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    e06a:	f7ff bf3f 	b.w	deec <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    e06e:	6a2a      	ldr	r2, [r5, #32]
    e070:	2a00      	cmp	r2, #0
    e072:	d0f5      	beq.n	e060 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    e074:	f852 3c08 	ldr.w	r3, [r2, #-8]
    e078:	2b00      	cmp	r3, #0
    e07a:	d0f1      	beq.n	e060 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    e07c:	4629      	mov	r1, r5
    e07e:	4620      	mov	r0, r4
    e080:	3a04      	subs	r2, #4
    e082:	4798      	blx	r3
    e084:	2800      	cmp	r0, #0
    e086:	d1eb      	bne.n	e060 <encode_basic_field+0xd4>
        return false;
    e088:	2000      	movs	r0, #0
}
    e08a:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    e08c:	8a6a      	ldrh	r2, [r5, #18]
    e08e:	69e9      	ldr	r1, [r5, #28]
    e090:	e7bd      	b.n	e00e <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    e092:	6923      	ldr	r3, [r4, #16]
    e094:	4a05      	ldr	r2, [pc, #20]	; (e0ac <encode_basic_field+0x120>)
    e096:	e7b4      	b.n	e002 <encode_basic_field+0x76>
        return true;
    e098:	2001      	movs	r0, #1
    e09a:	e7f6      	b.n	e08a <encode_basic_field+0xfe>
    e09c:	00035161 	.word	0x00035161
    e0a0:	00035175 	.word	0x00035175
    e0a4:	00035188 	.word	0x00035188
    e0a8:	0003519c 	.word	0x0003519c
    e0ac:	0003513a 	.word	0x0003513a

0000e0b0 <encode_field>:
{
    e0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    e0b4:	7d8b      	ldrb	r3, [r1, #22]
{
    e0b6:	4605      	mov	r5, r0
    e0b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    e0bc:	2a30      	cmp	r2, #48	; 0x30
{
    e0be:	460c      	mov	r4, r1
    e0c0:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    e0c2:	d112      	bne.n	e0ea <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    e0c4:	6a0b      	ldr	r3, [r1, #32]
    e0c6:	881a      	ldrh	r2, [r3, #0]
    e0c8:	8a0b      	ldrh	r3, [r1, #16]
    e0ca:	429a      	cmp	r2, r3
    e0cc:	d114      	bne.n	e0f8 <encode_field+0x48>
    if (!field->pData)
    e0ce:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    e0d0:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    e0d2:	b9ea      	cbnz	r2, e110 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    e0d4:	f013 0f30 	tst.w	r3, #48	; 0x30
    e0d8:	d10e      	bne.n	e0f8 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    e0da:	692b      	ldr	r3, [r5, #16]
    e0dc:	4a69      	ldr	r2, [pc, #420]	; (e284 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    e0de:	2b00      	cmp	r3, #0
    e0e0:	bf08      	it	eq
    e0e2:	4613      	moveq	r3, r2
    e0e4:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    e0e6:	2000      	movs	r0, #0
    e0e8:	e007      	b.n	e0fa <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    e0ea:	2a10      	cmp	r2, #16
    e0ec:	d1ef      	bne.n	e0ce <encode_field+0x1e>
        if (field->pSize)
    e0ee:	6a0a      	ldr	r2, [r1, #32]
    e0f0:	b132      	cbz	r2, e100 <encode_field+0x50>
        if (p[i] != 0)
    e0f2:	7813      	ldrb	r3, [r2, #0]
    e0f4:	2b00      	cmp	r3, #0
    e0f6:	d1ea      	bne.n	e0ce <encode_field+0x1e>
            return true;
    e0f8:	2001      	movs	r0, #1
}
    e0fa:	b007      	add	sp, #28
    e0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    e100:	2b3f      	cmp	r3, #63	; 0x3f
    e102:	d8e4      	bhi.n	e0ce <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    e104:	4608      	mov	r0, r1
    e106:	f7ff fddd 	bl	dcc4 <pb_check_proto3_default_value>
    e10a:	2800      	cmp	r0, #0
    e10c:	d0df      	beq.n	e0ce <encode_field+0x1e>
    e10e:	e7f3      	b.n	e0f8 <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    e110:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    e114:	2a40      	cmp	r2, #64	; 0x40
    e116:	d10c      	bne.n	e132 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    e118:	6823      	ldr	r3, [r4, #0]
    e11a:	68db      	ldr	r3, [r3, #12]
    e11c:	2b00      	cmp	r3, #0
    e11e:	d0eb      	beq.n	e0f8 <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    e120:	4622      	mov	r2, r4
    e122:	4629      	mov	r1, r5
    e124:	2000      	movs	r0, #0
    e126:	4798      	blx	r3
    e128:	2800      	cmp	r0, #0
    e12a:	d1e5      	bne.n	e0f8 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    e12c:	692b      	ldr	r3, [r5, #16]
    e12e:	4a56      	ldr	r2, [pc, #344]	; (e288 <encode_field+0x1d8>)
    e130:	e7d5      	b.n	e0de <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    e132:	f003 0130 	and.w	r1, r3, #48	; 0x30
    e136:	2920      	cmp	r1, #32
    e138:	f040 809d 	bne.w	e276 <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    e13c:	6a21      	ldr	r1, [r4, #32]
    e13e:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    e140:	2e00      	cmp	r6, #0
    e142:	d0d9      	beq.n	e0f8 <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    e144:	2a80      	cmp	r2, #128	; 0x80
    e146:	d120      	bne.n	e18a <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    e148:	f003 030f 	and.w	r3, r3, #15
    e14c:	2b05      	cmp	r3, #5
    e14e:	d85e      	bhi.n	e20e <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    e150:	2102      	movs	r1, #2
    e152:	4628      	mov	r0, r5
    e154:	8a22      	ldrh	r2, [r4, #16]
    e156:	f01c f82b 	bl	2a1b0 <pb_encode_tag>
    e15a:	2800      	cmp	r0, #0
    e15c:	d0c3      	beq.n	e0e6 <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    e15e:	7da3      	ldrb	r3, [r4, #22]
    e160:	f003 030f 	and.w	r3, r3, #15
    e164:	2b04      	cmp	r3, #4
    e166:	d116      	bne.n	e196 <encode_field+0xe6>
            size = 4 * (size_t)count;
    e168:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    e16a:	463a      	mov	r2, r7
    e16c:	2300      	movs	r3, #0
    e16e:	4628      	mov	r0, r5
    e170:	f01b ffd0 	bl	2a114 <pb_encode_varint>
    e174:	2800      	cmp	r0, #0
    e176:	d0b6      	beq.n	e0e6 <encode_field+0x36>
        if (stream->callback == NULL)
    e178:	6829      	ldr	r1, [r5, #0]
    e17a:	bb79      	cbnz	r1, e1dc <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    e17c:	463a      	mov	r2, r7
    e17e:	4628      	mov	r0, r5
}
    e180:	b007      	add	sp, #28
    e182:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    e186:	f7ff be11 	b.w	ddac <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    e18a:	8aa2      	ldrh	r2, [r4, #20]
    e18c:	42b2      	cmp	r2, r6
    e18e:	d2db      	bcs.n	e148 <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    e190:	692b      	ldr	r3, [r5, #16]
    e192:	4a3e      	ldr	r2, [pc, #248]	; (e28c <encode_field+0x1dc>)
    e194:	e7a3      	b.n	e0de <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e196:	2b05      	cmp	r3, #5
    e198:	d101      	bne.n	e19e <encode_field+0xee>
            size = 8 * (size_t)count;
    e19a:	00f7      	lsls	r7, r6, #3
    e19c:	e7e5      	b.n	e16a <encode_field+0xba>
            void *pData_orig = field->pData;
    e19e:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    e1a0:	2214      	movs	r2, #20
    e1a2:	2100      	movs	r1, #0
    e1a4:	a801      	add	r0, sp, #4
    e1a6:	f023 fb7c 	bl	318a2 <memset>
            void *pData_orig = field->pData;
    e1aa:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    e1ae:	4621      	mov	r1, r4
    e1b0:	a801      	add	r0, sp, #4
    e1b2:	f7ff fe1d 	bl	ddf0 <pb_enc_varint>
    e1b6:	b928      	cbnz	r0, e1c4 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    e1b8:	692b      	ldr	r3, [r5, #16]
    e1ba:	2b00      	cmp	r3, #0
    e1bc:	d192      	bne.n	e0e4 <encode_field+0x34>
    e1be:	9b05      	ldr	r3, [sp, #20]
    e1c0:	4a33      	ldr	r2, [pc, #204]	; (e290 <encode_field+0x1e0>)
    e1c2:	e78c      	b.n	e0de <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    e1c4:	69e3      	ldr	r3, [r4, #28]
    e1c6:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    e1c8:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    e1ca:	4413      	add	r3, r2
    e1cc:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    e1ce:	b2bb      	uxth	r3, r7
    e1d0:	429e      	cmp	r6, r3
    e1d2:	d8ec      	bhi.n	e1ae <encode_field+0xfe>
            size = sizestream.bytes_written;
    e1d4:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    e1d6:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    e1da:	e7c6      	b.n	e16a <encode_field+0xba>
    e1dc:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e1de:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    e1e0:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e1e2:	f003 030e 	and.w	r3, r3, #14
    e1e6:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    e1e8:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e1ea:	d10d      	bne.n	e208 <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    e1ec:	f7ff fe46 	bl	de7c <pb_enc_fixed>
    e1f0:	2800      	cmp	r0, #0
    e1f2:	f43f af78 	beq.w	e0e6 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    e1f6:	69e3      	ldr	r3, [r4, #28]
    e1f8:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    e1fa:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    e1fc:	4413      	add	r3, r2
    e1fe:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    e200:	b2bb      	uxth	r3, r7
    e202:	429e      	cmp	r6, r3
    e204:	d8eb      	bhi.n	e1de <encode_field+0x12e>
    e206:	e777      	b.n	e0f8 <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    e208:	f7ff fdf2 	bl	ddf0 <pb_enc_varint>
    e20c:	e7f0      	b.n	e1f0 <encode_field+0x140>
    e20e:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    e212:	7da3      	ldrb	r3, [r4, #22]
    e214:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    e218:	2b86      	cmp	r3, #134	; 0x86
    e21a:	d127      	bne.n	e26c <encode_field+0x1bc>
                void *pData_orig = field->pData;
    e21c:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    e21e:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    e220:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    e224:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    e226:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    e22a:	f1b9 0f00 	cmp.w	r9, #0
    e22e:	d11a      	bne.n	e266 <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    e230:	f7ff fe3a 	bl	dea8 <pb_encode_tag_for_field>
    e234:	b908      	cbnz	r0, e23a <encode_field+0x18a>
                field->pData = pData_orig;
    e236:	61e7      	str	r7, [r4, #28]
                if (!status)
    e238:	e755      	b.n	e0e6 <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    e23a:	2201      	movs	r2, #1
    e23c:	4628      	mov	r0, r5
    e23e:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    e240:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    e244:	f7ff fdb2 	bl	ddac <pb_write>
                field->pData = pData_orig;
    e248:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    e24a:	2800      	cmp	r0, #0
    e24c:	f43f af4b 	beq.w	e0e6 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    e250:	69e3      	ldr	r3, [r4, #28]
    e252:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    e254:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    e258:	4413      	add	r3, r2
    e25a:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    e25c:	fa1f f388 	uxth.w	r3, r8
    e260:	429e      	cmp	r6, r3
    e262:	d8d6      	bhi.n	e212 <encode_field+0x162>
    e264:	e748      	b.n	e0f8 <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    e266:	f7ff fe91 	bl	df8c <encode_basic_field>
    e26a:	e7ed      	b.n	e248 <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    e26c:	4621      	mov	r1, r4
    e26e:	4628      	mov	r0, r5
    e270:	f7ff fe8c 	bl	df8c <encode_basic_field>
    e274:	e7e9      	b.n	e24a <encode_field+0x19a>
        return encode_basic_field(stream, field);
    e276:	4621      	mov	r1, r4
    e278:	4628      	mov	r0, r5
}
    e27a:	b007      	add	sp, #28
    e27c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    e280:	f7ff be84 	b.w	df8c <encode_basic_field>
    e284:	000351b5 	.word	0x000351b5
    e288:	000351cc 	.word	0x000351cc
    e28c:	000351db 	.word	0x000351db
    e290:	000351f3 	.word	0x000351f3

0000e294 <pb_encode>:
{
    e294:	b530      	push	{r4, r5, lr}
    e296:	b095      	sub	sp, #84	; 0x54
    e298:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    e29a:	4668      	mov	r0, sp
    e29c:	f01b ff15 	bl	2a0ca <pb_field_iter_begin_const>
    e2a0:	b370      	cbz	r0, e300 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    e2a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e2a6:	f003 030f 	and.w	r3, r3, #15
    e2aa:	2b0a      	cmp	r3, #10
    e2ac:	d121      	bne.n	e2f2 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    e2ae:	9b07      	ldr	r3, [sp, #28]
    e2b0:	681d      	ldr	r5, [r3, #0]
    while (extension)
    e2b2:	b91d      	cbnz	r5, e2bc <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    e2b4:	4668      	mov	r0, sp
    e2b6:	f01b fefd 	bl	2a0b4 <pb_field_iter_next>
    e2ba:	e7f1      	b.n	e2a0 <pb_encode+0xc>
        if (extension->type->encode)
    e2bc:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    e2be:	4629      	mov	r1, r5
        if (extension->type->encode)
    e2c0:	685b      	ldr	r3, [r3, #4]
    e2c2:	b123      	cbz	r3, e2ce <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    e2c4:	4620      	mov	r0, r4
    e2c6:	4798      	blx	r3
        if (!status)
    e2c8:	b158      	cbz	r0, e2e2 <pb_encode+0x4e>
        extension = extension->next;
    e2ca:	68ad      	ldr	r5, [r5, #8]
    e2cc:	e7f1      	b.n	e2b2 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    e2ce:	a80a      	add	r0, sp, #40	; 0x28
    e2d0:	f01b fefd 	bl	2a0ce <pb_field_iter_begin_extension_const>
    e2d4:	b940      	cbnz	r0, e2e8 <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    e2d6:	6923      	ldr	r3, [r4, #16]
    e2d8:	4a0a      	ldr	r2, [pc, #40]	; (e304 <pb_encode+0x70>)
    e2da:	2b00      	cmp	r3, #0
    e2dc:	bf08      	it	eq
    e2de:	4613      	moveq	r3, r2
    e2e0:	6123      	str	r3, [r4, #16]
                return false;
    e2e2:	2000      	movs	r0, #0
}
    e2e4:	b015      	add	sp, #84	; 0x54
    e2e6:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    e2e8:	4620      	mov	r0, r4
    e2ea:	a90a      	add	r1, sp, #40	; 0x28
    e2ec:	f7ff fee0 	bl	e0b0 <encode_field>
    e2f0:	e7ea      	b.n	e2c8 <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    e2f2:	4669      	mov	r1, sp
    e2f4:	4620      	mov	r0, r4
    e2f6:	f7ff fedb 	bl	e0b0 <encode_field>
    e2fa:	2800      	cmp	r0, #0
    e2fc:	d1da      	bne.n	e2b4 <pb_encode+0x20>
    e2fe:	e7f0      	b.n	e2e2 <pb_encode+0x4e>
        return true; /* Empty message type */
    e300:	2001      	movs	r0, #1
    e302:	e7ef      	b.n	e2e4 <pb_encode+0x50>
    e304:	000351fa 	.word	0x000351fa

0000e308 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e30c:	b091      	sub	sp, #68	; 0x44
    e30e:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    e310:	f002 0304 	and.w	r3, r2, #4
    e314:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    e316:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    e31a:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    e31c:	0784      	lsls	r4, r0, #30
{
    e31e:	4605      	mov	r5, r0
    e320:	460e      	mov	r6, r1
    e322:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    e326:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    e328:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    e32a:	f040 81bd 	bne.w	e6a8 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    e32e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    e330:	b130      	cbz	r0, e340 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    e332:	2907      	cmp	r1, #7
    e334:	d809      	bhi.n	e34a <cbvprintf_package+0x42>
		return -ENOSPC;
    e336:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    e33a:	b011      	add	sp, #68	; 0x44
    e33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    e340:	f001 0607 	and.w	r6, r1, #7
    e344:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    e346:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    e34a:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    e34c:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    e350:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    e354:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    e356:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    e35a:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    e35c:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    e35e:	46cb      	mov	fp, r9
	size = sizeof(char *);
    e360:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    e362:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    e366:	b10d      	cbz	r5, e36c <cbvprintf_package+0x64>
				*(const char **)buf = s;
    e368:	9a00      	ldr	r2, [sp, #0]
    e36a:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e36c:	9805      	ldr	r0, [sp, #20]
    e36e:	2800      	cmp	r0, #0
    e370:	f300 80eb 	bgt.w	e54a <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    e374:	4899      	ldr	r0, [pc, #612]	; (e5dc <cbvprintf_package+0x2d4>)
    e376:	9a00      	ldr	r2, [sp, #0]
    e378:	4282      	cmp	r2, r0
    e37a:	d303      	bcc.n	e384 <cbvprintf_package+0x7c>
    e37c:	4898      	ldr	r0, [pc, #608]	; (e5e0 <cbvprintf_package+0x2d8>)
    e37e:	4282      	cmp	r2, r0
    e380:	f0c0 80e3 	bcc.w	e54a <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e384:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e386:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e38a:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e38c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e390:	f100 8106 	bmi.w	e5a0 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    e394:	2f0f      	cmp	r7, #15
    e396:	f200 80b4 	bhi.w	e502 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    e39a:	2d00      	cmp	r5, #0
    e39c:	f000 8108 	beq.w	e5b0 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    e3a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e3a4:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    e3a8:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    e3aa:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    e3ae:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    e3b2:	9804      	ldr	r0, [sp, #16]
    e3b4:	3001      	adds	r0, #1
    e3b6:	9004      	str	r0, [sp, #16]
    e3b8:	e0ea      	b.n	e590 <cbvprintf_package+0x288>
			switch (*fmt) {
    e3ba:	287a      	cmp	r0, #122	; 0x7a
    e3bc:	d860      	bhi.n	e480 <cbvprintf_package+0x178>
    e3be:	284b      	cmp	r0, #75	; 0x4b
    e3c0:	d80e      	bhi.n	e3e0 <cbvprintf_package+0xd8>
    e3c2:	2847      	cmp	r0, #71	; 0x47
    e3c4:	d85c      	bhi.n	e480 <cbvprintf_package+0x178>
    e3c6:	2829      	cmp	r0, #41	; 0x29
    e3c8:	d82f      	bhi.n	e42a <cbvprintf_package+0x122>
    e3ca:	2825      	cmp	r0, #37	; 0x25
    e3cc:	d055      	beq.n	e47a <cbvprintf_package+0x172>
    e3ce:	d857      	bhi.n	e480 <cbvprintf_package+0x178>
    e3d0:	2820      	cmp	r0, #32
    e3d2:	d07d      	beq.n	e4d0 <cbvprintf_package+0x1c8>
    e3d4:	3823      	subs	r0, #35	; 0x23
    e3d6:	f1d0 0b00 	rsbs	fp, r0, #0
    e3da:	eb4b 0b00 	adc.w	fp, fp, r0
    e3de:	e077      	b.n	e4d0 <cbvprintf_package+0x1c8>
    e3e0:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    e3e4:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    e3e8:	d84a      	bhi.n	e480 <cbvprintf_package+0x178>
    e3ea:	e8df f00c 	tbb	[pc, ip]
    e3ee:	4971      	.short	0x4971
    e3f0:	49494949 	.word	0x49494949
    e3f4:	49494949 	.word	0x49494949
    e3f8:	494c4949 	.word	0x494c4949
    e3fc:	49494949 	.word	0x49494949
    e400:	5a494949 	.word	0x5a494949
    e404:	5a4c4c49 	.word	0x5a4c4c49
    e408:	4c715a5a 	.word	0x4c715a5a
    e40c:	4971496e 	.word	0x4971496e
    e410:	49184c18 	.word	0x49184c18
    e414:	4c808349 	.word	0x4c808349
    e418:	494c4949 	.word	0x494c4949
    e41c:	80          	.byte	0x80
    e41d:	00          	.byte	0x00
    e41e:	2000      	movs	r0, #0
    e420:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    e424:	f04f 0a04 	mov.w	sl, #4
    e428:	e039      	b.n	e49e <cbvprintf_package+0x196>
    e42a:	2201      	movs	r2, #1
			switch (*fmt) {
    e42c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    e430:	fa5f fc8c 	uxtb.w	ip, ip
    e434:	fa02 fc0c 	lsl.w	ip, r2, ip
    e438:	ea1c 0f0e 	tst.w	ip, lr
    e43c:	d148      	bne.n	e4d0 <cbvprintf_package+0x1c8>
    e43e:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    e442:	d12e      	bne.n	e4a2 <cbvprintf_package+0x19a>
    e444:	ea1c 0b02 	ands.w	fp, ip, r2
    e448:	d042      	beq.n	e4d0 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    e44a:	3c01      	subs	r4, #1
    e44c:	4454      	add	r4, sl
    e44e:	f1ca 0c00 	rsb	ip, sl, #0
    e452:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    e456:	2d00      	cmp	r5, #0
    e458:	d061      	beq.n	e51e <cbvprintf_package+0x216>
    e45a:	eba3 0c05 	sub.w	ip, r3, r5
    e45e:	44a4      	add	ip, r4
    e460:	4566      	cmp	r6, ip
    e462:	f4ff af68 	bcc.w	e336 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    e466:	2800      	cmp	r0, #0
    e468:	d168      	bne.n	e53c <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    e46a:	2b04      	cmp	r3, #4
    e46c:	d147      	bne.n	e4fe <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    e46e:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    e472:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    e474:	2304      	movs	r3, #4
    e476:	3404      	adds	r4, #4
    e478:	e02a      	b.n	e4d0 <cbvprintf_package+0x1c8>
				arg_idx--;
    e47a:	9a01      	ldr	r2, [sp, #4]
    e47c:	3a01      	subs	r2, #1
    e47e:	9201      	str	r2, [sp, #4]
				parsing = false;
    e480:	f04f 0b00 	mov.w	fp, #0
				continue;
    e484:	e024      	b.n	e4d0 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    e486:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    e48a:	286c      	cmp	r0, #108	; 0x6c
    e48c:	d134      	bne.n	e4f8 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    e48e:	2000      	movs	r0, #0
    e490:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    e494:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    e496:	2b6c      	cmp	r3, #108	; 0x6c
    e498:	d1c4      	bne.n	e424 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    e49a:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    e49e:	4653      	mov	r3, sl
    e4a0:	e7d3      	b.n	e44a <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    e4a2:	f108 0807 	add.w	r8, r8, #7
    e4a6:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    e4aa:	3407      	adds	r4, #7
    e4ac:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    e4b0:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    e4b4:	b135      	cbz	r5, e4c4 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    e4b6:	9806      	ldr	r0, [sp, #24]
    e4b8:	4420      	add	r0, r4
    e4ba:	42b0      	cmp	r0, r6
    e4bc:	f63f af3b 	bhi.w	e336 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    e4c0:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    e4c4:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    e4c8:	3408      	adds	r4, #8
			switch (*fmt) {
    e4ca:	f04f 0a08 	mov.w	sl, #8
    e4ce:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    e4d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    e4d4:	2800      	cmp	r0, #0
    e4d6:	d078      	beq.n	e5ca <cbvprintf_package+0x2c2>
			if (!parsing) {
    e4d8:	f1bb 0f00 	cmp.w	fp, #0
    e4dc:	f47f af6d 	bne.w	e3ba <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    e4e0:	2825      	cmp	r0, #37	; 0x25
    e4e2:	d1f5      	bne.n	e4d0 <cbvprintf_package+0x1c8>
					parsing = true;
    e4e4:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    e4e8:	9b01      	ldr	r3, [sp, #4]
    e4ea:	3301      	adds	r3, #1
    e4ec:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    e4ee:	f04f 0a04 	mov.w	sl, #4
    e4f2:	e7ec      	b.n	e4ce <cbvprintf_package+0x1c6>
			switch (*fmt) {
    e4f4:	4658      	mov	r0, fp
    e4f6:	e793      	b.n	e420 <cbvprintf_package+0x118>
    e4f8:	2000      	movs	r0, #0
				parsing = false;
    e4fa:	4683      	mov	fp, r0
    e4fc:	e7a5      	b.n	e44a <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    e4fe:	2b08      	cmp	r3, #8
    e500:	d002      	beq.n	e508 <cbvprintf_package+0x200>
					return -EINVAL;
    e502:	f06f 0015 	mvn.w	r0, #21
    e506:	e718      	b.n	e33a <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    e508:	f108 0807 	add.w	r8, r8, #7
    e50c:	f028 0807 	bic.w	r8, r8, #7
    e510:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    e514:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    e518:	2308      	movs	r3, #8
    e51a:	3408      	adds	r4, #8
    e51c:	e7d8      	b.n	e4d0 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    e51e:	b968      	cbnz	r0, e53c <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    e520:	2b04      	cmp	r3, #4
    e522:	d102      	bne.n	e52a <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    e524:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    e528:	e7a4      	b.n	e474 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    e52a:	2b08      	cmp	r3, #8
    e52c:	d1e9      	bne.n	e502 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    e52e:	f108 0807 	add.w	r8, r8, #7
    e532:	f028 0807 	bic.w	r8, r8, #7
    e536:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    e53a:	e7ed      	b.n	e518 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e53c:	9a05      	ldr	r2, [sp, #20]
    e53e:	3a01      	subs	r2, #1
    e540:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    e542:	f858 2b04 	ldr.w	r2, [r8], #4
    e546:	9200      	str	r2, [sp, #0]
    e548:	e70d      	b.n	e366 <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    e54a:	9a03      	ldr	r2, [sp, #12]
    e54c:	0790      	lsls	r0, r2, #30
    e54e:	d520      	bpl.n	e592 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e550:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e554:	eba4 0e05 	sub.w	lr, r4, r5
    e558:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e55c:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    e560:	d2cf      	bcs.n	e502 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    e562:	2f0f      	cmp	r7, #15
    e564:	d8cd      	bhi.n	e502 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    e566:	b1f5      	cbz	r5, e5a6 <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    e568:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e56c:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    e570:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    e572:	b2c0      	uxtb	r0, r0
    e574:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    e578:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    e57c:	f1bc 0f00 	cmp.w	ip, #0
    e580:	f43f af17 	beq.w	e3b2 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    e584:	f060 007f 	orn	r0, r0, #127	; 0x7f
    e588:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    e58c:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    e590:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    e592:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    e596:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    e59a:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    e59c:	9206      	str	r2, [sp, #24]
    e59e:	e797      	b.n	e4d0 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e5a0:	f04f 0c00 	mov.w	ip, #0
    e5a4:	e7da      	b.n	e55c <cbvprintf_package+0x254>
				} else if (is_ro) {
    e5a6:	f1bc 0f00 	cmp.w	ip, #0
    e5aa:	d001      	beq.n	e5b0 <cbvprintf_package+0x2a8>
					len += 1;
    e5ac:	3601      	adds	r6, #1
    e5ae:	e7ef      	b.n	e590 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    e5b0:	9802      	ldr	r0, [sp, #8]
					len += 2;
    e5b2:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    e5b4:	2800      	cmp	r0, #0
    e5b6:	d1eb      	bne.n	e590 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    e5b8:	9800      	ldr	r0, [sp, #0]
    e5ba:	e9cd 3106 	strd	r3, r1, [sp, #24]
    e5be:	f7fa ff24 	bl	940a <strlen>
    e5c2:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    e5c6:	4406      	add	r6, r0
    e5c8:	e7e2      	b.n	e590 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    e5ca:	1b63      	subs	r3, r4, r5
    e5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e5d0:	d297      	bcs.n	e502 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    e5d2:	b93d      	cbnz	r5, e5e4 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    e5d4:	f1a6 0408 	sub.w	r4, r6, #8
    e5d8:	18e0      	adds	r0, r4, r3
    e5da:	e6ae      	b.n	e33a <cbvprintf_package+0x32>
    e5dc:	00032800 	.word	0x00032800
    e5e0:	00038b44 	.word	0x00038b44
	if (rws_pos_en) {
    e5e4:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    e5e6:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    e5e8:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    e5ea:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    e5ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    e5f0:	b1c2      	cbz	r2, e624 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    e5f2:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    e5f4:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    e5f8:	f1b9 0f00 	cmp.w	r9, #0
    e5fc:	d005      	beq.n	e60a <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    e5fe:	2200      	movs	r2, #0
    e600:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    e602:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    e606:	4297      	cmp	r7, r2
    e608:	d10e      	bne.n	e628 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    e60a:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    e60e:	f1c5 0301 	rsb	r3, r5, #1
    e612:	f10d 0820 	add.w	r8, sp, #32
    e616:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    e618:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    e61c:	4557      	cmp	r7, sl
    e61e:	d112      	bne.n	e646 <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    e620:	1b60      	subs	r0, r4, r5
    e622:	e68a      	b.n	e33a <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    e624:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    e626:	e7e5      	b.n	e5f4 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    e628:	f810 3b01 	ldrb.w	r3, [r0], #1
    e62c:	0619      	lsls	r1, r3, #24
    e62e:	d508      	bpl.n	e642 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    e630:	eb04 0e0c 	add.w	lr, r4, ip
    e634:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    e636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    e63a:	f4ff ae7c 	bcc.w	e336 <cbvprintf_package+0x2e>
			*buf++ = pos;
    e63e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    e642:	3201      	adds	r2, #1
    e644:	e7df      	b.n	e606 <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    e646:	f1b9 0f00 	cmp.w	r9, #0
    e64a:	d003      	beq.n	e654 <cbvprintf_package+0x34c>
    e64c:	f998 2000 	ldrsb.w	r2, [r8]
    e650:	2a00      	cmp	r2, #0
    e652:	db17      	blt.n	e684 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    e654:	9b02      	ldr	r3, [sp, #8]
    e656:	b1d3      	cbz	r3, e68e <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    e658:	f81a 200b 	ldrb.w	r2, [sl, fp]
    e65c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    e660:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    e662:	9b01      	ldr	r3, [sp, #4]
    e664:	1898      	adds	r0, r3, r2
    e666:	4420      	add	r0, r4
    e668:	4286      	cmp	r6, r0
    e66a:	f4ff ae64 	bcc.w	e336 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    e66e:	f898 0000 	ldrb.w	r0, [r8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e672:	9900      	ldr	r1, [sp, #0]
    e674:	f804 0b01 	strb.w	r0, [r4], #1
    e678:	4620      	mov	r0, r4
    e67a:	9203      	str	r2, [sp, #12]
    e67c:	f023 f8d7 	bl	3182e <memcpy>
		buf += size;
    e680:	9a03      	ldr	r2, [sp, #12]
    e682:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    e684:	f10a 0a01 	add.w	sl, sl, #1
    e688:	f108 0801 	add.w	r8, r8, #1
    e68c:	e7c6      	b.n	e61c <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    e68e:	f898 2000 	ldrb.w	r2, [r8]
    e692:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    e696:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    e698:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    e69a:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    e69c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    e6a0:	f7fa feb3 	bl	940a <strlen>
    e6a4:	1c42      	adds	r2, r0, #1
    e6a6:	e7dc      	b.n	e662 <cbvprintf_package+0x35a>
		return -EFAULT;
    e6a8:	f06f 000d 	mvn.w	r0, #13
    e6ac:	e645      	b.n	e33a <cbvprintf_package+0x32>
    e6ae:	bf00      	nop

0000e6b0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    e6b0:	4b01      	ldr	r3, [pc, #4]	; (e6b8 <char_out+0x8>)
    e6b2:	681b      	ldr	r3, [r3, #0]
    e6b4:	4718      	bx	r3
    e6b6:	bf00      	nop
    e6b8:	20008474 	.word	0x20008474

0000e6bc <__printk_hook_install>:
	_char_out = fn;
    e6bc:	4b01      	ldr	r3, [pc, #4]	; (e6c4 <__printk_hook_install+0x8>)
    e6be:	6018      	str	r0, [r3, #0]
}
    e6c0:	4770      	bx	lr
    e6c2:	bf00      	nop
    e6c4:	20008474 	.word	0x20008474

0000e6c8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    e6c8:	b507      	push	{r0, r1, r2, lr}
    e6ca:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    e6cc:	2100      	movs	r1, #0
    e6ce:	4602      	mov	r2, r0
    e6d0:	9100      	str	r1, [sp, #0]
    e6d2:	4803      	ldr	r0, [pc, #12]	; (e6e0 <vprintk+0x18>)
    e6d4:	f000 f9a2 	bl	ea1c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    e6d8:	b003      	add	sp, #12
    e6da:	f85d fb04 	ldr.w	pc, [sp], #4
    e6de:	bf00      	nop
    e6e0:	0000e6b1 	.word	0x0000e6b1

0000e6e4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    e6e4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    e6e6:	2500      	movs	r5, #0
{
    e6e8:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    e6ea:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    e6ee:	4604      	mov	r4, r0
    e6f0:	9500      	str	r5, [sp, #0]
    e6f2:	a903      	add	r1, sp, #12
    e6f4:	4805      	ldr	r0, [pc, #20]	; (e70c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    e6f6:	9505      	str	r5, [sp, #20]
    e6f8:	f000 f990 	bl	ea1c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    e6fc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    e700:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    e702:	bfb8      	it	lt
    e704:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    e706:	b007      	add	sp, #28
    e708:	bd30      	pop	{r4, r5, pc}
    e70a:	bf00      	nop
    e70c:	0002a243 	.word	0x0002a243

0000e710 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    e710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e714:	8b05      	ldrh	r5, [r0, #24]
{
    e716:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    e718:	0728      	lsls	r0, r5, #28
{
    e71a:	4690      	mov	r8, r2
	if (processing) {
    e71c:	d411      	bmi.n	e742 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    e71e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e720:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    e724:	f040 80cd 	bne.w	e8c2 <process_event+0x1b2>
			evt = process_recheck(mgr);
    e728:	4620      	mov	r0, r4
    e72a:	f01b ff86 	bl	2a63a <process_recheck>
		}

		if (evt == EVT_NOP) {
    e72e:	b178      	cbz	r0, e750 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    e730:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e732:	8b21      	ldrh	r1, [r4, #24]
    e734:	2804      	cmp	r0, #4
    e736:	d811      	bhi.n	e75c <process_event+0x4c>
    e738:	e8df f000 	tbb	[pc, r0]
    e73c:	856d10c3 	.word	0x856d10c3
    e740:	95          	.byte	0x95
    e741:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    e742:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    e744:	bf0c      	ite	eq
    e746:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e74a:	f045 0520 	orrne.w	r5, r5, #32
    e74e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e750:	f388 8811 	msr	BASEPRI, r8
    e754:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    e758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e75c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e760:	45aa      	cmp	sl, r5
    e762:	f000 80a6 	beq.w	e8b2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    e766:	2700      	movs	r7, #0
    e768:	46b9      	mov	r9, r7
    e76a:	463e      	mov	r6, r7
    e76c:	68a3      	ldr	r3, [r4, #8]
    e76e:	2b00      	cmp	r3, #0
    e770:	f000 80bd 	beq.w	e8ee <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e774:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e778:	8321      	strh	r1, [r4, #24]
    e77a:	f388 8811 	msr	BASEPRI, r8
    e77e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e782:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e784:	2900      	cmp	r1, #0
    e786:	f000 80bb 	beq.w	e900 <process_event+0x1f0>
	return node->next;
    e78a:	680d      	ldr	r5, [r1, #0]
    e78c:	2900      	cmp	r1, #0
    e78e:	f000 80b7 	beq.w	e900 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    e792:	4633      	mov	r3, r6
    e794:	4652      	mov	r2, sl
    e796:	4620      	mov	r0, r4
    e798:	f8d1 8004 	ldr.w	r8, [r1, #4]
    e79c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e79e:	2d00      	cmp	r5, #0
    e7a0:	d076      	beq.n	e890 <process_event+0x180>
    e7a2:	682b      	ldr	r3, [r5, #0]
    e7a4:	4629      	mov	r1, r5
    e7a6:	461d      	mov	r5, r3
    e7a8:	e7f0      	b.n	e78c <process_event+0x7c>
    e7aa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    e7ae:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    e7b0:	2a01      	cmp	r2, #1
    e7b2:	d81b      	bhi.n	e7ec <process_event+0xdc>
	list->head = NULL;
    e7b4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e7b6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    e7ba:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    e7bc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e7be:	b289      	uxth	r1, r1
	list->tail = NULL;
    e7c0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    e7c4:	d109      	bne.n	e7da <process_event+0xca>
    e7c6:	463b      	mov	r3, r7
    e7c8:	e003      	b.n	e7d2 <process_event+0xc2>
				mgr->refs += 1U;
    e7ca:	8b62      	ldrh	r2, [r4, #26]
    e7cc:	3201      	adds	r2, #1
    e7ce:	8362      	strh	r2, [r4, #26]
	return node->next;
    e7d0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    e7d2:	2b00      	cmp	r3, #0
    e7d4:	d1f9      	bne.n	e7ca <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e7d6:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    e7da:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e7dc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e7de:	f01b ff2c 	bl	2a63a <process_recheck>
    e7e2:	2800      	cmp	r0, #0
    e7e4:	d07b      	beq.n	e8de <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e7e6:	f041 0120 	orr.w	r1, r1, #32
    e7ea:	e077      	b.n	e8dc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    e7ec:	2b04      	cmp	r3, #4
    e7ee:	d10a      	bne.n	e806 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e7f0:	f021 0107 	bic.w	r1, r1, #7
    e7f4:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    e7f6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e7f8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e7fa:	f01b ff1e 	bl	2a63a <process_recheck>
    e7fe:	b110      	cbz	r0, e806 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e800:	f041 0120 	orr.w	r1, r1, #32
    e804:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e806:	8b21      	ldrh	r1, [r4, #24]
    e808:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e80c:	45aa      	cmp	sl, r5
    e80e:	d050      	beq.n	e8b2 <process_event+0x1a2>
    e810:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    e812:	46b9      	mov	r9, r7
    e814:	e7aa      	b.n	e76c <process_event+0x5c>
			transit = mgr->transitions->start;
    e816:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e818:	f021 0107 	bic.w	r1, r1, #7
    e81c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    e820:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    e822:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    e826:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    e828:	d12d      	bne.n	e886 <process_event+0x176>
		    || (transit != NULL)) {
    e82a:	f1b9 0f00 	cmp.w	r9, #0
    e82e:	d040      	beq.n	e8b2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e830:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e834:	8321      	strh	r1, [r4, #24]
    e836:	f388 8811 	msr	BASEPRI, r8
    e83a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    e83e:	4620      	mov	r0, r4
    e840:	4939      	ldr	r1, [pc, #228]	; (e928 <process_event+0x218>)
    e842:	47c8      	blx	r9
    e844:	e029      	b.n	e89a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e846:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    e84a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e84c:	f041 0104 	orr.w	r1, r1, #4
    e850:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    e852:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    e854:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    e858:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    e85a:	d0e6      	beq.n	e82a <process_event+0x11a>
    e85c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e85e:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    e862:	463e      	mov	r6, r7
    e864:	e782      	b.n	e76c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e866:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    e86a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e86c:	f041 0105 	orr.w	r1, r1, #5
    e870:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    e872:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    e874:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    e878:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    e87a:	d0d6      	beq.n	e82a <process_event+0x11a>
    e87c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e87e:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    e882:	463e      	mov	r6, r7
    e884:	e772      	b.n	e76c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    e886:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e888:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    e88c:	463e      	mov	r6, r7
    e88e:	e76d      	b.n	e76c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e890:	462b      	mov	r3, r5
    e892:	e787      	b.n	e7a4 <process_event+0x94>
			if (transit != NULL) {
    e894:	f1b9 0f00 	cmp.w	r9, #0
    e898:	d1d1      	bne.n	e83e <process_event+0x12e>
	__asm__ volatile(
    e89a:	f04f 0320 	mov.w	r3, #32
    e89e:	f3ef 8811 	mrs	r8, BASEPRI
    e8a2:	f383 8812 	msr	BASEPRI_MAX, r3
    e8a6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e8aa:	8b23      	ldrh	r3, [r4, #24]
    e8ac:	f023 0308 	bic.w	r3, r3, #8
    e8b0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    e8b2:	8b25      	ldrh	r5, [r4, #24]
    e8b4:	06ea      	lsls	r2, r5, #27
    e8b6:	d52e      	bpl.n	e916 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e8b8:	f025 0310 	bic.w	r3, r5, #16
    e8bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    e8be:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    e8c2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e8c4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    e8c6:	2e00      	cmp	r6, #0
    e8c8:	f6bf af6f 	bge.w	e7aa <process_event+0x9a>
	list->head = NULL;
    e8cc:	2300      	movs	r3, #0
		*clients = mgr->clients;
    e8ce:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    e8d0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e8d4:	f021 0107 	bic.w	r1, r1, #7
    e8d8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e8dc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e8de:	8b21      	ldrh	r1, [r4, #24]
    e8e0:	f04f 0900 	mov.w	r9, #0
    e8e4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e8e8:	45aa      	cmp	sl, r5
    e8ea:	f47f af3f 	bne.w	e76c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    e8ee:	2f00      	cmp	r7, #0
    e8f0:	d09b      	beq.n	e82a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e8f2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e8f6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    e8f8:	f388 8811 	msr	BASEPRI, r8
    e8fc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    e900:	2f00      	cmp	r7, #0
    e902:	d0c7      	beq.n	e894 <process_event+0x184>
	return node->next;
    e904:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    e906:	4639      	mov	r1, r7
    e908:	4633      	mov	r3, r6
    e90a:	4652      	mov	r2, sl
    e90c:	4620      	mov	r0, r4
    e90e:	f01b fec0 	bl	2a692 <notify_one>
	list->head = node;
    e912:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    e914:	e7f4      	b.n	e900 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e916:	06ab      	lsls	r3, r5, #26
    e918:	f57f af1a 	bpl.w	e750 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e91c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e920:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    e922:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    e926:	e6ff      	b.n	e728 <process_event+0x18>
    e928:	0002a6bf 	.word	0x0002a6bf

0000e92c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    e92c:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e92e:	4c09      	ldr	r4, [pc, #36]	; (e954 <crc8_ccitt+0x28>)
    e930:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    e932:	4291      	cmp	r1, r2
    e934:	d100      	bne.n	e938 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    e936:	bd10      	pop	{r4, pc}
		val ^= p[i];
    e938:	f811 3b01 	ldrb.w	r3, [r1], #1
    e93c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e93e:	0903      	lsrs	r3, r0, #4
    e940:	5ce3      	ldrb	r3, [r4, r3]
    e942:	0100      	lsls	r0, r0, #4
    e944:	b2c0      	uxtb	r0, r0
    e946:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e948:	0918      	lsrs	r0, r3, #4
    e94a:	5c20      	ldrb	r0, [r4, r0]
    e94c:	011b      	lsls	r3, r3, #4
    e94e:	b2db      	uxtb	r3, r3
    e950:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    e952:	e7ee      	b.n	e932 <crc8_ccitt+0x6>
    e954:	0003521d 	.word	0x0003521d

0000e958 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    e958:	b5f0      	push	{r4, r5, r6, r7, lr}
    e95a:	4602      	mov	r2, r0
    e95c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    e95e:	270a      	movs	r7, #10
	size_t val = 0;
    e960:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    e962:	4e07      	ldr	r6, [pc, #28]	; (e980 <extract_decimal+0x28>)
    e964:	460b      	mov	r3, r1
    e966:	781c      	ldrb	r4, [r3, #0]
    e968:	3101      	adds	r1, #1
    e96a:	5d35      	ldrb	r5, [r6, r4]
    e96c:	076d      	lsls	r5, r5, #29
    e96e:	d401      	bmi.n	e974 <extract_decimal+0x1c>
	}
	*str = sp;
    e970:	6013      	str	r3, [r2, #0]
	return val;
}
    e972:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    e974:	fb07 4300 	mla	r3, r7, r0, r4
    e978:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e97c:	e7f2      	b.n	e964 <extract_decimal+0xc>
    e97e:	bf00      	nop
    e980:	0003875f 	.word	0x0003875f

0000e984 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    e984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e988:	4615      	mov	r5, r2
    e98a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    e98c:	78d3      	ldrb	r3, [r2, #3]
    e98e:	4a22      	ldr	r2, [pc, #136]	; (ea18 <encode_uint+0x94>)
	switch (specifier) {
    e990:	2b6f      	cmp	r3, #111	; 0x6f
    e992:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    e996:	4680      	mov	r8, r0
    e998:	460f      	mov	r7, r1
    e99a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    e99e:	d029      	beq.n	e9f4 <encode_uint+0x70>
    e9a0:	d824      	bhi.n	e9ec <encode_uint+0x68>
		return 10;
    e9a2:	2b58      	cmp	r3, #88	; 0x58
    e9a4:	bf0c      	ite	eq
    e9a6:	2610      	moveq	r6, #16
    e9a8:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    e9aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    e9ae:	4632      	mov	r2, r6
    e9b0:	2300      	movs	r3, #0
    e9b2:	4640      	mov	r0, r8
    e9b4:	4639      	mov	r1, r7
    e9b6:	f7fa fac3 	bl	8f40 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    e9ba:	2a09      	cmp	r2, #9
    e9bc:	b2d4      	uxtb	r4, r2
    e9be:	d81e      	bhi.n	e9fe <encode_uint+0x7a>
    e9c0:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    e9c2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e9c4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    e9c6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e9ca:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    e9ce:	d301      	bcc.n	e9d4 <encode_uint+0x50>
    e9d0:	45d1      	cmp	r9, sl
    e9d2:	d811      	bhi.n	e9f8 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    e9d4:	782b      	ldrb	r3, [r5, #0]
    e9d6:	069b      	lsls	r3, r3, #26
    e9d8:	d505      	bpl.n	e9e6 <encode_uint+0x62>
		if (radix == 8) {
    e9da:	2e08      	cmp	r6, #8
    e9dc:	d115      	bne.n	ea0a <encode_uint+0x86>
			conv->altform_0 = true;
    e9de:	78ab      	ldrb	r3, [r5, #2]
    e9e0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    e9e4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    e9e6:	4648      	mov	r0, r9
    e9e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    e9ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    e9f0:	2b70      	cmp	r3, #112	; 0x70
    e9f2:	e7d7      	b.n	e9a4 <encode_uint+0x20>
	switch (specifier) {
    e9f4:	2608      	movs	r6, #8
    e9f6:	e7d8      	b.n	e9aa <encode_uint+0x26>
		value /= radix;
    e9f8:	4680      	mov	r8, r0
    e9fa:	460f      	mov	r7, r1
    e9fc:	e7d7      	b.n	e9ae <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e9fe:	f1bb 0f01 	cmp.w	fp, #1
    ea02:	bf0c      	ite	eq
    ea04:	3437      	addeq	r4, #55	; 0x37
    ea06:	3457      	addne	r4, #87	; 0x57
    ea08:	e7db      	b.n	e9c2 <encode_uint+0x3e>
		} else if (radix == 16) {
    ea0a:	2e10      	cmp	r6, #16
    ea0c:	d1eb      	bne.n	e9e6 <encode_uint+0x62>
			conv->altform_0c = true;
    ea0e:	78ab      	ldrb	r3, [r5, #2]
    ea10:	f043 0310 	orr.w	r3, r3, #16
    ea14:	e7e6      	b.n	e9e4 <encode_uint+0x60>
    ea16:	bf00      	nop
    ea18:	0003875f 	.word	0x0003875f

0000ea1c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea20:	4682      	mov	sl, r0
    ea22:	4617      	mov	r7, r2
    ea24:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    ea26:	2500      	movs	r5, #0
{
    ea28:	b097      	sub	sp, #92	; 0x5c
    ea2a:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    ea2c:	7838      	ldrb	r0, [r7, #0]
    ea2e:	b908      	cbnz	r0, ea34 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    ea30:	4628      	mov	r0, r5
    ea32:	e349      	b.n	f0c8 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    ea34:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    ea36:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    ea38:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    ea3a:	d006      	beq.n	ea4a <z_cbvprintf_impl+0x2e>
			OUTC('%');
    ea3c:	9903      	ldr	r1, [sp, #12]
    ea3e:	47d0      	blx	sl
    ea40:	2800      	cmp	r0, #0
    ea42:	f2c0 8341 	blt.w	f0c8 <z_cbvprintf_impl+0x6ac>
    ea46:	3501      	adds	r5, #1
		if (bps == NULL) {
    ea48:	e1f0      	b.n	ee2c <z_cbvprintf_impl+0x410>
		} state = {
    ea4a:	2218      	movs	r2, #24
    ea4c:	2100      	movs	r1, #0
    ea4e:	a810      	add	r0, sp, #64	; 0x40
    ea50:	f022 ff27 	bl	318a2 <memset>
	if (*sp == '%') {
    ea54:	787b      	ldrb	r3, [r7, #1]
    ea56:	2b25      	cmp	r3, #37	; 0x25
    ea58:	f000 80a3 	beq.w	eba2 <z_cbvprintf_impl+0x186>
    ea5c:	2300      	movs	r3, #0
    ea5e:	4698      	mov	r8, r3
    ea60:	469e      	mov	lr, r3
    ea62:	469c      	mov	ip, r3
    ea64:	4618      	mov	r0, r3
    ea66:	1c79      	adds	r1, r7, #1
    ea68:	460e      	mov	r6, r1
		switch (*sp) {
    ea6a:	f811 2b01 	ldrb.w	r2, [r1], #1
    ea6e:	2a2b      	cmp	r2, #43	; 0x2b
    ea70:	f000 80c6 	beq.w	ec00 <z_cbvprintf_impl+0x1e4>
    ea74:	f200 80bd 	bhi.w	ebf2 <z_cbvprintf_impl+0x1d6>
    ea78:	2a20      	cmp	r2, #32
    ea7a:	f000 80c4 	beq.w	ec06 <z_cbvprintf_impl+0x1ea>
    ea7e:	2a23      	cmp	r2, #35	; 0x23
    ea80:	f000 80c4 	beq.w	ec0c <z_cbvprintf_impl+0x1f0>
    ea84:	b12b      	cbz	r3, ea92 <z_cbvprintf_impl+0x76>
    ea86:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ea8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea8e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    ea92:	f1b8 0f00 	cmp.w	r8, #0
    ea96:	d005      	beq.n	eaa4 <z_cbvprintf_impl+0x88>
    ea98:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ea9c:	f043 0320 	orr.w	r3, r3, #32
    eaa0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    eaa4:	f1be 0f00 	cmp.w	lr, #0
    eaa8:	d005      	beq.n	eab6 <z_cbvprintf_impl+0x9a>
    eaaa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    eaae:	f043 0310 	orr.w	r3, r3, #16
    eab2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    eab6:	f1bc 0f00 	cmp.w	ip, #0
    eaba:	d005      	beq.n	eac8 <z_cbvprintf_impl+0xac>
    eabc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    eac0:	f043 0308 	orr.w	r3, r3, #8
    eac4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    eac8:	b128      	cbz	r0, ead6 <z_cbvprintf_impl+0xba>
    eaca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    eace:	f043 0304 	orr.w	r3, r3, #4
    ead2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    ead6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    eada:	f003 0144 	and.w	r1, r3, #68	; 0x44
    eade:	2944      	cmp	r1, #68	; 0x44
    eae0:	d103      	bne.n	eaea <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    eae2:	f36f 1386 	bfc	r3, #6, #1
    eae6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    eaea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    eaee:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    eaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    eaf4:	9609      	str	r6, [sp, #36]	; 0x24
    eaf6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    eafa:	f040 808c 	bne.w	ec16 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    eafe:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    eb02:	f043 0301 	orr.w	r3, r3, #1
    eb06:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    eb0a:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    eb0c:	781a      	ldrb	r2, [r3, #0]
    eb0e:	2a2e      	cmp	r2, #46	; 0x2e
    eb10:	bf0c      	ite	eq
    eb12:	2101      	moveq	r1, #1
    eb14:	2100      	movne	r1, #0
    eb16:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eb1a:	f361 0241 	bfi	r2, r1, #1, #1
    eb1e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    eb22:	d10c      	bne.n	eb3e <z_cbvprintf_impl+0x122>
	++sp;
    eb24:	1c5a      	adds	r2, r3, #1
    eb26:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    eb28:	785a      	ldrb	r2, [r3, #1]
    eb2a:	2a2a      	cmp	r2, #42	; 0x2a
    eb2c:	f040 8083 	bne.w	ec36 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    eb30:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    eb34:	3302      	adds	r3, #2
		conv->prec_star = true;
    eb36:	f042 0204 	orr.w	r2, r2, #4
    eb3a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    eb3e:	781a      	ldrb	r2, [r3, #0]
    eb40:	2a6c      	cmp	r2, #108	; 0x6c
    eb42:	f000 80a4 	beq.w	ec8e <z_cbvprintf_impl+0x272>
    eb46:	f200 8086 	bhi.w	ec56 <z_cbvprintf_impl+0x23a>
    eb4a:	2a68      	cmp	r2, #104	; 0x68
    eb4c:	f000 808c 	beq.w	ec68 <z_cbvprintf_impl+0x24c>
    eb50:	2a6a      	cmp	r2, #106	; 0x6a
    eb52:	f000 80a5 	beq.w	eca0 <z_cbvprintf_impl+0x284>
    eb56:	2a4c      	cmp	r2, #76	; 0x4c
    eb58:	f000 80aa 	beq.w	ecb0 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    eb5c:	461a      	mov	r2, r3
    eb5e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    eb62:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    eb64:	9204      	str	r2, [sp, #16]
    eb66:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    eb6a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    eb6e:	f200 8117 	bhi.w	eda0 <z_cbvprintf_impl+0x384>
    eb72:	2b6d      	cmp	r3, #109	; 0x6d
    eb74:	f200 80a9 	bhi.w	ecca <z_cbvprintf_impl+0x2ae>
    eb78:	2b69      	cmp	r3, #105	; 0x69
    eb7a:	f200 8111 	bhi.w	eda0 <z_cbvprintf_impl+0x384>
    eb7e:	2b57      	cmp	r3, #87	; 0x57
    eb80:	f200 80be 	bhi.w	ed00 <z_cbvprintf_impl+0x2e4>
    eb84:	2b41      	cmp	r3, #65	; 0x41
    eb86:	d003      	beq.n	eb90 <z_cbvprintf_impl+0x174>
    eb88:	3b45      	subs	r3, #69	; 0x45
    eb8a:	2b02      	cmp	r3, #2
    eb8c:	f200 8108 	bhi.w	eda0 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    eb90:	2204      	movs	r2, #4
    eb92:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eb96:	f362 0302 	bfi	r3, r2, #0, #3
    eb9a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    eb9e:	2301      	movs	r3, #1
			break;
    eba0:	e0ca      	b.n	ed38 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    eba2:	1cba      	adds	r2, r7, #2
    eba4:	9204      	str	r2, [sp, #16]
    eba6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    ebaa:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    ebae:	07da      	lsls	r2, r3, #31
    ebb0:	f140 80fd 	bpl.w	edae <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    ebb4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    ebb8:	f1b9 0f00 	cmp.w	r9, #0
    ebbc:	da07      	bge.n	ebce <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    ebbe:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    ebc2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    ebc6:	f042 0204 	orr.w	r2, r2, #4
    ebca:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    ebce:	075e      	lsls	r6, r3, #29
    ebd0:	f140 80f6 	bpl.w	edc0 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    ebd4:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    ebd8:	f1bb 0f00 	cmp.w	fp, #0
    ebdc:	f280 80f5 	bge.w	edca <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    ebe0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    ebe4:	f36f 0341 	bfc	r3, #1, #1
    ebe8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    ebec:	f04f 3bff 	mov.w	fp, #4294967295
    ebf0:	e0eb      	b.n	edca <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    ebf2:	2a2d      	cmp	r2, #45	; 0x2d
    ebf4:	d00d      	beq.n	ec12 <z_cbvprintf_impl+0x1f6>
    ebf6:	2a30      	cmp	r2, #48	; 0x30
    ebf8:	f47f af44 	bne.w	ea84 <z_cbvprintf_impl+0x68>
    ebfc:	2301      	movs	r3, #1
	} while (loop);
    ebfe:	e733      	b.n	ea68 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    ec00:	f04f 0c01 	mov.w	ip, #1
    ec04:	e730      	b.n	ea68 <z_cbvprintf_impl+0x4c>
    ec06:	f04f 0e01 	mov.w	lr, #1
    ec0a:	e72d      	b.n	ea68 <z_cbvprintf_impl+0x4c>
    ec0c:	f04f 0801 	mov.w	r8, #1
    ec10:	e72a      	b.n	ea68 <z_cbvprintf_impl+0x4c>
    ec12:	2001      	movs	r0, #1
    ec14:	e728      	b.n	ea68 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    ec16:	a809      	add	r0, sp, #36	; 0x24
    ec18:	f7ff fe9e 	bl	e958 <extract_decimal>
	if (sp != wp) {
    ec1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec1e:	42b3      	cmp	r3, r6
    ec20:	f43f af74 	beq.w	eb0c <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    ec24:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    ec28:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    ec2a:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    ec2c:	f360 0241 	bfi	r2, r0, #1, #1
    ec30:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    ec34:	e76a      	b.n	eb0c <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    ec36:	a809      	add	r0, sp, #36	; 0x24
    ec38:	f7ff fe8e 	bl	e958 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    ec3c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    ec40:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    ec42:	f3c3 0240 	ubfx	r2, r3, #1, #1
    ec46:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    ec4a:	f362 0341 	bfi	r3, r2, #1, #1
    ec4e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    ec52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec54:	e773      	b.n	eb3e <z_cbvprintf_impl+0x122>
	switch (*sp) {
    ec56:	2a74      	cmp	r2, #116	; 0x74
    ec58:	d026      	beq.n	eca8 <z_cbvprintf_impl+0x28c>
    ec5a:	2a7a      	cmp	r2, #122	; 0x7a
    ec5c:	f47f af7e 	bne.w	eb5c <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    ec60:	2106      	movs	r1, #6
    ec62:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ec66:	e00c      	b.n	ec82 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    ec68:	785a      	ldrb	r2, [r3, #1]
    ec6a:	2a68      	cmp	r2, #104	; 0x68
    ec6c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ec70:	d106      	bne.n	ec80 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    ec72:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    ec74:	f361 02c6 	bfi	r2, r1, #3, #4
    ec78:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    ec7c:	3302      	adds	r3, #2
    ec7e:	e76d      	b.n	eb5c <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    ec80:	2102      	movs	r1, #2
    ec82:	f361 02c6 	bfi	r2, r1, #3, #4
    ec86:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    ec8a:	3301      	adds	r3, #1
    ec8c:	e766      	b.n	eb5c <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    ec8e:	785a      	ldrb	r2, [r3, #1]
    ec90:	2a6c      	cmp	r2, #108	; 0x6c
    ec92:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ec96:	d101      	bne.n	ec9c <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    ec98:	2104      	movs	r1, #4
    ec9a:	e7eb      	b.n	ec74 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    ec9c:	2103      	movs	r1, #3
    ec9e:	e7f0      	b.n	ec82 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    eca0:	2105      	movs	r1, #5
    eca2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eca6:	e7ec      	b.n	ec82 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    eca8:	2107      	movs	r1, #7
    ecaa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ecae:	e7e8      	b.n	ec82 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    ecb0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    ecb4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    ecb8:	f022 0202 	bic.w	r2, r2, #2
    ecbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    ecc0:	f042 0202 	orr.w	r2, r2, #2
    ecc4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    ecc8:	e7df      	b.n	ec8a <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    ecca:	3b6e      	subs	r3, #110	; 0x6e
    eccc:	b2d9      	uxtb	r1, r3
    ecce:	2301      	movs	r3, #1
    ecd0:	408b      	lsls	r3, r1
    ecd2:	f240 4182 	movw	r1, #1154	; 0x482
    ecd6:	420b      	tst	r3, r1
    ecd8:	d138      	bne.n	ed4c <z_cbvprintf_impl+0x330>
    ecda:	f013 0f24 	tst.w	r3, #36	; 0x24
    ecde:	d152      	bne.n	ed86 <z_cbvprintf_impl+0x36a>
    ece0:	07d8      	lsls	r0, r3, #31
    ece2:	d55d      	bpl.n	eda0 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    ece4:	2103      	movs	r1, #3
    ece6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ecea:	f361 0302 	bfi	r3, r1, #0, #3
    ecee:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ecf2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    ecf6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    ecfa:	424b      	negs	r3, r1
    ecfc:	414b      	adcs	r3, r1
    ecfe:	e01b      	b.n	ed38 <z_cbvprintf_impl+0x31c>
    ed00:	2001      	movs	r0, #1
	switch (conv->specifier) {
    ed02:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    ed06:	b2c9      	uxtb	r1, r1
    ed08:	fa00 f101 	lsl.w	r1, r0, r1
    ed0c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    ed10:	f47f af3e 	bne.w	eb90 <z_cbvprintf_impl+0x174>
    ed14:	f640 0601 	movw	r6, #2049	; 0x801
    ed18:	4231      	tst	r1, r6
    ed1a:	d11d      	bne.n	ed58 <z_cbvprintf_impl+0x33c>
    ed1c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    ed20:	d03e      	beq.n	eda0 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    ed22:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ed26:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ed2a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    ed2e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    ed30:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ed34:	d034      	beq.n	eda0 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    ed36:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    ed38:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    ed3c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ed40:	430b      	orrs	r3, r1
    ed42:	f363 0241 	bfi	r2, r3, #1, #1
    ed46:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    ed4a:	e72e      	b.n	ebaa <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    ed4c:	2102      	movs	r1, #2
    ed4e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ed52:	f361 0302 	bfi	r3, r1, #0, #3
    ed56:	e7e8      	b.n	ed2a <z_cbvprintf_impl+0x30e>
    ed58:	2002      	movs	r0, #2
    ed5a:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ed5e:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ed62:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ed66:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ed68:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    ed6c:	bf02      	ittt	eq
    ed6e:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    ed72:	f041 0101 	orreq.w	r1, r1, #1
    ed76:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    ed7a:	2b63      	cmp	r3, #99	; 0x63
    ed7c:	d1db      	bne.n	ed36 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ed7e:	1e13      	subs	r3, r2, #0
    ed80:	bf18      	it	ne
    ed82:	2301      	movne	r3, #1
    ed84:	e7d8      	b.n	ed38 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    ed86:	2103      	movs	r1, #3
    ed88:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ed8c:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ed90:	f361 0302 	bfi	r3, r1, #0, #3
    ed94:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ed98:	bf14      	ite	ne
    ed9a:	2301      	movne	r3, #1
    ed9c:	2300      	moveq	r3, #0
    ed9e:	e7cb      	b.n	ed38 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    eda0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    eda4:	f043 0301 	orr.w	r3, r3, #1
    eda8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    edac:	e7c3      	b.n	ed36 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    edae:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    edb2:	2a00      	cmp	r2, #0
		int width = -1;
    edb4:	bfac      	ite	ge
    edb6:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    edba:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    edbe:	e706      	b.n	ebce <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    edc0:	0798      	lsls	r0, r3, #30
    edc2:	f57f af13 	bpl.w	ebec <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    edc6:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    edca:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    edcc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    edd0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    edd4:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    edd8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    eddc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    edde:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ede2:	d133      	bne.n	ee4c <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    ede4:	1ecb      	subs	r3, r1, #3
    ede6:	2b04      	cmp	r3, #4
    ede8:	d804      	bhi.n	edf4 <z_cbvprintf_impl+0x3d8>
    edea:	e8df f003 	tbb	[pc, r3]
    edee:	4621      	.short	0x4621
    edf0:	2146      	.short	0x2146
    edf2:	21          	.byte	0x21
    edf3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    edf4:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    edf6:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    edf8:	ea4f 72e3 	mov.w	r2, r3, asr #31
    edfc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    ee00:	d11c      	bne.n	ee3c <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    ee02:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    ee06:	17da      	asrs	r2, r3, #31
    ee08:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    ee0c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    ee0e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ee12:	f013 0603 	ands.w	r6, r3, #3
    ee16:	d050      	beq.n	eeba <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    ee18:	463a      	mov	r2, r7
    ee1a:	4650      	mov	r0, sl
    ee1c:	9b04      	ldr	r3, [sp, #16]
    ee1e:	9903      	ldr	r1, [sp, #12]
    ee20:	f01b fcf3 	bl	2a80a <outs>
    ee24:	2800      	cmp	r0, #0
    ee26:	f2c0 814f 	blt.w	f0c8 <z_cbvprintf_impl+0x6ac>
    ee2a:	4405      	add	r5, r0
			continue;
    ee2c:	9f04      	ldr	r7, [sp, #16]
    ee2e:	e5fd      	b.n	ea2c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ee30:	f854 3b04 	ldr.w	r3, [r4], #4
    ee34:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    ee36:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    ee3a:	e7e8      	b.n	ee0e <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    ee3c:	2902      	cmp	r1, #2
    ee3e:	d1e5      	bne.n	ee0c <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    ee40:	b21a      	sxth	r2, r3
    ee42:	f343 33c0 	sbfx	r3, r3, #15, #1
    ee46:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ee4a:	e7df      	b.n	ee0c <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ee4c:	2b02      	cmp	r3, #2
    ee4e:	d124      	bne.n	ee9a <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    ee50:	1ecb      	subs	r3, r1, #3
    ee52:	2b04      	cmp	r3, #4
    ee54:	d804      	bhi.n	ee60 <z_cbvprintf_impl+0x444>
    ee56:	e8df f003 	tbb	[pc, r3]
    ee5a:	1018      	.short	0x1018
    ee5c:	1810      	.short	0x1810
    ee5e:	18          	.byte	0x18
    ee5f:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    ee60:	2901      	cmp	r1, #1
    ee62:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    ee66:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ee6a:	d014      	beq.n	ee96 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    ee6c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    ee6e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    ee72:	d1cc      	bne.n	ee0e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    ee74:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    ee76:	9310      	str	r3, [sp, #64]	; 0x40
    ee78:	e7c9      	b.n	ee0e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    ee7a:	3407      	adds	r4, #7
    ee7c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    ee80:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ee84:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    ee88:	e7c1      	b.n	ee0e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    ee8a:	f854 3b04 	ldr.w	r3, [r4], #4
    ee8e:	9310      	str	r3, [sp, #64]	; 0x40
    ee90:	2300      	movs	r3, #0
    ee92:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    ee94:	e7bb      	b.n	ee0e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    ee96:	b2db      	uxtb	r3, r3
    ee98:	e7cd      	b.n	ee36 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    ee9a:	2b04      	cmp	r3, #4
    ee9c:	d108      	bne.n	eeb0 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    ee9e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    eea0:	f024 0407 	bic.w	r4, r4, #7
    eea4:	e9d4 2300 	ldrd	r2, r3, [r4]
    eea8:	3408      	adds	r4, #8
    eeaa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    eeae:	e7ae      	b.n	ee0e <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    eeb0:	2b03      	cmp	r3, #3
    eeb2:	d1ac      	bne.n	ee0e <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    eeb4:	f854 3b04 	ldr.w	r3, [r4], #4
    eeb8:	e7dd      	b.n	ee76 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    eeba:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    eebe:	2878      	cmp	r0, #120	; 0x78
    eec0:	d8b4      	bhi.n	ee2c <z_cbvprintf_impl+0x410>
    eec2:	2862      	cmp	r0, #98	; 0x62
    eec4:	d81c      	bhi.n	ef00 <z_cbvprintf_impl+0x4e4>
    eec6:	2825      	cmp	r0, #37	; 0x25
    eec8:	f43f adb8 	beq.w	ea3c <z_cbvprintf_impl+0x20>
    eecc:	2858      	cmp	r0, #88	; 0x58
    eece:	d1ad      	bne.n	ee2c <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    eed0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    eed4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    eed8:	9300      	str	r3, [sp, #0]
    eeda:	aa12      	add	r2, sp, #72	; 0x48
    eedc:	ab0a      	add	r3, sp, #40	; 0x28
    eede:	f7ff fd51 	bl	e984 <encode_uint>
			if (precision >= 0) {
    eee2:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    eee6:	4607      	mov	r7, r0
			if (precision >= 0) {
    eee8:	f280 8097 	bge.w	f01a <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    eeec:	2f00      	cmp	r7, #0
    eeee:	d09d      	beq.n	ee2c <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    eef0:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    eef4:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    eef8:	2e00      	cmp	r6, #0
    eefa:	d04e      	beq.n	ef9a <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    eefc:	3001      	adds	r0, #1
    eefe:	e04c      	b.n	ef9a <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    ef00:	3863      	subs	r0, #99	; 0x63
    ef02:	2815      	cmp	r0, #21
    ef04:	d892      	bhi.n	ee2c <z_cbvprintf_impl+0x410>
    ef06:	a201      	add	r2, pc, #4	; (adr r2, ef0c <z_cbvprintf_impl+0x4f0>)
    ef08:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ef0c:	0000ef8b 	.word	0x0000ef8b
    ef10:	0000eff1 	.word	0x0000eff1
    ef14:	0000ee2d 	.word	0x0000ee2d
    ef18:	0000ee2d 	.word	0x0000ee2d
    ef1c:	0000ee2d 	.word	0x0000ee2d
    ef20:	0000ee2d 	.word	0x0000ee2d
    ef24:	0000eff1 	.word	0x0000eff1
    ef28:	0000ee2d 	.word	0x0000ee2d
    ef2c:	0000ee2d 	.word	0x0000ee2d
    ef30:	0000ee2d 	.word	0x0000ee2d
    ef34:	0000ee2d 	.word	0x0000ee2d
    ef38:	0000f079 	.word	0x0000f079
    ef3c:	0000f015 	.word	0x0000f015
    ef40:	0000f03b 	.word	0x0000f03b
    ef44:	0000ee2d 	.word	0x0000ee2d
    ef48:	0000ee2d 	.word	0x0000ee2d
    ef4c:	0000ef65 	.word	0x0000ef65
    ef50:	0000ee2d 	.word	0x0000ee2d
    ef54:	0000f015 	.word	0x0000f015
    ef58:	0000ee2d 	.word	0x0000ee2d
    ef5c:	0000ee2d 	.word	0x0000ee2d
    ef60:	0000f015 	.word	0x0000f015
			if (precision >= 0) {
    ef64:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    ef68:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    ef6a:	db0a      	blt.n	ef82 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    ef6c:	4659      	mov	r1, fp
    ef6e:	4638      	mov	r0, r7
    ef70:	f022 fe13 	bl	31b9a <strnlen>
			bpe = bps + len;
    ef74:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    ef78:	2f00      	cmp	r7, #0
    ef7a:	f43f af57 	beq.w	ee2c <z_cbvprintf_impl+0x410>
		char sign = 0;
    ef7e:	2600      	movs	r6, #0
    ef80:	e00b      	b.n	ef9a <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    ef82:	4638      	mov	r0, r7
    ef84:	f7fa fa41 	bl	940a <strlen>
    ef88:	e7f4      	b.n	ef74 <z_cbvprintf_impl+0x558>
		char sign = 0;
    ef8a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    ef8c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ef8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    ef90:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ef94:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    ef98:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    ef9a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ef9e:	f013 0210 	ands.w	r2, r3, #16
    efa2:	9205      	str	r2, [sp, #20]
    efa4:	f000 8083 	beq.w	f0ae <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    efa8:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    efaa:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    efac:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    efb0:	bf48      	it	mi
    efb2:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    efb4:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    efb6:	bf48      	it	mi
    efb8:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    efba:	f1b9 0f00 	cmp.w	r9, #0
    efbe:	f340 8090 	ble.w	f0e2 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    efc2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    efc6:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    efca:	f3c2 0380 	ubfx	r3, r2, #2, #1
    efce:	0750      	lsls	r0, r2, #29
    efd0:	9306      	str	r3, [sp, #24]
    efd2:	f100 8086 	bmi.w	f0e2 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    efd6:	0651      	lsls	r1, r2, #25
    efd8:	d579      	bpl.n	f0ce <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    efda:	b13e      	cbz	r6, efec <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    efdc:	4630      	mov	r0, r6
    efde:	9903      	ldr	r1, [sp, #12]
    efe0:	47d0      	blx	sl
    efe2:	2800      	cmp	r0, #0
    efe4:	db70      	blt.n	f0c8 <z_cbvprintf_impl+0x6ac>
    efe6:	9b06      	ldr	r3, [sp, #24]
    efe8:	3501      	adds	r5, #1
    efea:	461e      	mov	r6, r3
					pad = '0';
    efec:	2230      	movs	r2, #48	; 0x30
    efee:	e06f      	b.n	f0d0 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    eff0:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    eff2:	bf5a      	itte	pl
    eff4:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    eff8:	015e      	lslpl	r6, r3, #5
				sign = '+';
    effa:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    effc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    f000:	2b00      	cmp	r3, #0
    f002:	f6bf af65 	bge.w	eed0 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    f006:	4252      	negs	r2, r2
    f008:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    f00c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    f00e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    f012:	e75d      	b.n	eed0 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    f014:	2600      	movs	r6, #0
    f016:	e75b      	b.n	eed0 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    f018:	2600      	movs	r6, #0
				conv->flag_zero = false;
    f01a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    f01e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    f022:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    f024:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    f028:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    f02a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    f02e:	f67f af5d 	bls.w	eeec <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    f032:	ebab 0303 	sub.w	r3, fp, r3
    f036:	9313      	str	r3, [sp, #76]	; 0x4c
    f038:	e758      	b.n	eeec <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    f03a:	9810      	ldr	r0, [sp, #64]	; 0x40
    f03c:	b380      	cbz	r0, f0a0 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    f03e:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    f042:	ab0a      	add	r3, sp, #40	; 0x28
    f044:	2100      	movs	r1, #0
    f046:	f8cd 8000 	str.w	r8, [sp]
    f04a:	aa12      	add	r2, sp, #72	; 0x48
    f04c:	f7ff fc9a 	bl	e984 <encode_uint>
				conv->altform_0c = true;
    f050:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    f054:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    f058:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    f05c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    f060:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    f064:	4607      	mov	r7, r0
				conv->altform_0c = true;
    f066:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    f06a:	dad5      	bge.n	f018 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    f06c:	2800      	cmp	r0, #0
    f06e:	f43f aedd 	beq.w	ee2c <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    f072:	eba8 0000 	sub.w	r0, r8, r0
    f076:	e782      	b.n	ef7e <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    f078:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    f07a:	2907      	cmp	r1, #7
    f07c:	f63f aed6 	bhi.w	ee2c <z_cbvprintf_impl+0x410>
    f080:	e8df f001 	tbb	[pc, r1]
    f084:	0c06040c 	.word	0x0c06040c
    f088:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    f08c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    f08e:	e6cd      	b.n	ee2c <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    f090:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    f092:	e6cb      	b.n	ee2c <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    f094:	17ea      	asrs	r2, r5, #31
    f096:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    f09a:	e6c7      	b.n	ee2c <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    f09c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    f09e:	e6c5      	b.n	ee2c <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    f0a0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; f160 <z_cbvprintf_impl+0x744>
		char sign = 0;
    f0a4:	4606      	mov	r6, r0
    f0a6:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    f0aa:	2005      	movs	r0, #5
    f0ac:	e775      	b.n	ef9a <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    f0ae:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    f0b0:	bf48      	it	mi
    f0b2:	3001      	addmi	r0, #1
    f0b4:	e779      	b.n	efaa <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    f0b6:	4610      	mov	r0, r2
    f0b8:	9307      	str	r3, [sp, #28]
    f0ba:	9206      	str	r2, [sp, #24]
    f0bc:	9903      	ldr	r1, [sp, #12]
    f0be:	47d0      	blx	sl
    f0c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f0c4:	2800      	cmp	r0, #0
    f0c6:	da04      	bge.n	f0d2 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    f0c8:	b017      	add	sp, #92	; 0x5c
    f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    f0ce:	2220      	movs	r2, #32
					pad = '0';
    f0d0:	464b      	mov	r3, r9
				while (width-- > 0) {
    f0d2:	4619      	mov	r1, r3
    f0d4:	2900      	cmp	r1, #0
    f0d6:	f103 33ff 	add.w	r3, r3, #4294967295
    f0da:	dcec      	bgt.n	f0b6 <z_cbvprintf_impl+0x69a>
    f0dc:	444d      	add	r5, r9
    f0de:	4699      	mov	r9, r3
    f0e0:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    f0e2:	b12e      	cbz	r6, f0f0 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    f0e4:	4630      	mov	r0, r6
    f0e6:	9903      	ldr	r1, [sp, #12]
    f0e8:	47d0      	blx	sl
    f0ea:	2800      	cmp	r0, #0
    f0ec:	dbec      	blt.n	f0c8 <z_cbvprintf_impl+0x6ac>
    f0ee:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    f0f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    f0f4:	06da      	lsls	r2, r3, #27
    f0f6:	d401      	bmi.n	f0fc <z_cbvprintf_impl+0x6e0>
    f0f8:	071b      	lsls	r3, r3, #28
    f0fa:	d505      	bpl.n	f108 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    f0fc:	2030      	movs	r0, #48	; 0x30
    f0fe:	9903      	ldr	r1, [sp, #12]
    f100:	47d0      	blx	sl
    f102:	2800      	cmp	r0, #0
    f104:	dbe0      	blt.n	f0c8 <z_cbvprintf_impl+0x6ac>
    f106:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    f108:	9b05      	ldr	r3, [sp, #20]
    f10a:	b133      	cbz	r3, f11a <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    f10c:	9903      	ldr	r1, [sp, #12]
    f10e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    f112:	47d0      	blx	sl
    f114:	2800      	cmp	r0, #0
    f116:	dbd7      	blt.n	f0c8 <z_cbvprintf_impl+0x6ac>
    f118:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    f11a:	44ab      	add	fp, r5
    f11c:	e005      	b.n	f12a <z_cbvprintf_impl+0x70e>
				OUTC('0');
    f11e:	2030      	movs	r0, #48	; 0x30
    f120:	9903      	ldr	r1, [sp, #12]
    f122:	47d0      	blx	sl
    f124:	2800      	cmp	r0, #0
    f126:	dbcf      	blt.n	f0c8 <z_cbvprintf_impl+0x6ac>
    f128:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    f12a:	ebab 0305 	sub.w	r3, fp, r5
    f12e:	2b00      	cmp	r3, #0
    f130:	dcf5      	bgt.n	f11e <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    f132:	4643      	mov	r3, r8
    f134:	463a      	mov	r2, r7
    f136:	4650      	mov	r0, sl
    f138:	9903      	ldr	r1, [sp, #12]
    f13a:	f01b fb66 	bl	2a80a <outs>
    f13e:	2800      	cmp	r0, #0
    f140:	dbc2      	blt.n	f0c8 <z_cbvprintf_impl+0x6ac>
    f142:	4405      	add	r5, r0
		while (width > 0) {
    f144:	44a9      	add	r9, r5
    f146:	eba9 0305 	sub.w	r3, r9, r5
    f14a:	2b00      	cmp	r3, #0
    f14c:	f77f ae6e 	ble.w	ee2c <z_cbvprintf_impl+0x410>
			OUTC(' ');
    f150:	2020      	movs	r0, #32
    f152:	9903      	ldr	r1, [sp, #12]
    f154:	47d0      	blx	sl
    f156:	2800      	cmp	r0, #0
    f158:	dbb6      	blt.n	f0c8 <z_cbvprintf_impl+0x6ac>
    f15a:	3501      	adds	r5, #1
			--width;
    f15c:	e7f3      	b.n	f146 <z_cbvprintf_impl+0x72a>
    f15e:	bf00      	nop
    f160:	00035232 	.word	0x00035232

0000f164 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f164:	b148      	cbz	r0, f17a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    f166:	4b05      	ldr	r3, [pc, #20]	; (f17c <arch_busy_wait+0x18>)
    f168:	4a05      	ldr	r2, [pc, #20]	; (f180 <arch_busy_wait+0x1c>)
    f16a:	681b      	ldr	r3, [r3, #0]
    f16c:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    f170:	4358      	muls	r0, r3
    f172:	4b04      	ldr	r3, [pc, #16]	; (f184 <arch_busy_wait+0x20>)
    f174:	f043 0301 	orr.w	r3, r3, #1
    f178:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f17a:	4770      	bx	lr
    f17c:	20008738 	.word	0x20008738
    f180:	000f4240 	.word	0x000f4240
    f184:	00033270 	.word	0x00033270

0000f188 <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    f188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    f18a:	ab0b      	add	r3, sp, #44	; 0x2c
    f18c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    f18e:	9303      	str	r3, [sp, #12]
    f190:	4b05      	ldr	r3, [pc, #20]	; (f1a8 <z_log_msg_runtime_create.constprop.0+0x20>)
    f192:	2201      	movs	r2, #1
    f194:	9302      	str	r3, [sp, #8]
    f196:	2300      	movs	r3, #0
    f198:	4618      	mov	r0, r3
    f19a:	e9cd 3300 	strd	r3, r3, [sp]
    f19e:	f000 f9c3 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    f1a2:	b007      	add	sp, #28
    f1a4:	f85d fb04 	ldr.w	pc, [sp], #4
    f1a8:	00035237 	.word	0x00035237

0000f1ac <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    f1ac:	b570      	push	{r4, r5, r6, lr}
    f1ae:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    f1b0:	a805      	add	r0, sp, #20
    f1b2:	f014 fb2d 	bl	23810 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    f1b6:	4b28      	ldr	r3, [pc, #160]	; (f258 <sync_rtc_setup+0xac>)
    f1b8:	4298      	cmp	r0, r3
    f1ba:	d149      	bne.n	f250 <sync_rtc_setup+0xa4>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    f1bc:	f013 fe78 	bl	22eb0 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    f1c0:	1e04      	subs	r4, r0, #0
    f1c2:	da0f      	bge.n	f1e4 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    f1c4:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f1c8:	f014 fb28 	bl	2381c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    f1cc:	4b23      	ldr	r3, [pc, #140]	; (f25c <sync_rtc_setup+0xb0>)
    f1ce:	2201      	movs	r2, #1
    f1d0:	9302      	str	r3, [sp, #8]
    f1d2:	2300      	movs	r3, #0
    f1d4:	4922      	ldr	r1, [pc, #136]	; (f260 <sync_rtc_setup+0xb4>)
    f1d6:	4618      	mov	r0, r3
    f1d8:	e9cd 3300 	strd	r3, r3, [sp]
    f1dc:	9403      	str	r4, [sp, #12]
    f1de:	f7ff ffd3 	bl	f188 <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    f1e2:	e032      	b.n	f24a <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    f1e4:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    f1e8:	4d1e      	ldr	r5, [pc, #120]	; (f264 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    f1ea:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    f1ee:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    f1f0:	f8ad 3016 	strh.w	r3, [sp, #22]
    f1f4:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    f1f6:	9b05      	ldr	r3, [sp, #20]
    f1f8:	b914      	cbnz	r4, f200 <sync_rtc_setup+0x54>
		return -ENOSYS;
    f1fa:	f06f 0457 	mvn.w	r4, #87	; 0x57
    f1fe:	e7e5      	b.n	f1cc <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f200:	2108      	movs	r1, #8
    f202:	4628      	mov	r0, r5
    f204:	4a18      	ldr	r2, [pc, #96]	; (f268 <sync_rtc_setup+0xbc>)
    f206:	47a0      	blx	r4
	if (err < 0) {
    f208:	1e04      	subs	r4, r0, #0
    f20a:	dbdf      	blt.n	f1cc <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    f20c:	6933      	ldr	r3, [r6, #16]
    f20e:	2b00      	cmp	r3, #0
    f210:	d0f3      	beq.n	f1fa <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    f212:	2201      	movs	r2, #1
    f214:	2108      	movs	r1, #8
    f216:	4628      	mov	r0, r5
    f218:	4798      	blx	r3
	if (rv < 0) {
    f21a:	1e04      	subs	r4, r0, #0
    f21c:	dbd6      	blt.n	f1cc <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    f21e:	2301      	movs	r3, #1
    f220:	f89d 5014 	ldrb.w	r5, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    f224:	4a11      	ldr	r2, [pc, #68]	; (f26c <sync_rtc_setup+0xc0>)
    f226:	40ab      	lsls	r3, r5
    f228:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    f22c:	f89d 0015 	ldrb.w	r0, [sp, #21]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f230:	f89d 6017 	ldrb.w	r6, [sp, #23]
    f234:	f020 fe62 	bl	2fefc <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    f238:	4b0d      	ldr	r3, [pc, #52]	; (f270 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    f23a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f23e:	00b6      	lsls	r6, r6, #2
    f240:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    f244:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    f246:	2c00      	cmp	r4, #0
    f248:	d1c0      	bne.n	f1cc <sync_rtc_setup+0x20>
}
    f24a:	4620      	mov	r0, r4
    f24c:	b006      	add	sp, #24
    f24e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    f250:	f06f 0412 	mvn.w	r4, #18
    f254:	e7ba      	b.n	f1cc <sync_rtc_setup+0x20>
    f256:	bf00      	nop
    f258:	0bad0000 	.word	0x0bad0000
    f25c:	00035237 	.word	0x00035237
    f260:	00033140 	.word	0x00033140
    f264:	000329f8 	.word	0x000329f8
    f268:	0000f2b9 	.word	0x0000f2b9
    f26c:	40017000 	.word	0x40017000
    f270:	4002a180 	.word	0x4002a180

0000f274 <rtc_cb>:
{
    f274:	b538      	push	{r3, r4, r5, lr}
    f276:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    f278:	f3c4 2507 	ubfx	r5, r4, #8, #8
    f27c:	4628      	mov	r0, r5
    f27e:	f013 fc77 	bl	22b70 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    f282:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    f284:	4b0a      	ldr	r3, [pc, #40]	; (f2b0 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    f286:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    f288:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f28c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    f290:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    f292:	2301      	movs	r3, #1
    f294:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    f296:	4a07      	ldr	r2, [pc, #28]	; (f2b4 <rtc_cb+0x40>)
    f298:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    f29a:	4628      	mov	r0, r5
    f29c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    f2a0:	f013 fe24 	bl	22eec <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    f2a4:	4620      	mov	r0, r4
}
    f2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    f2aa:	f014 bab7 	b.w	2381c <nrfx_dppi_channel_free>
    f2ae:	bf00      	nop
    f2b0:	4002a080 	.word	0x4002a080
    f2b4:	40017000 	.word	0x40017000

0000f2b8 <mbox_callback>:
{
    f2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f2ba:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    f2bc:	6883      	ldr	r3, [r0, #8]
    f2be:	691b      	ldr	r3, [r3, #16]
    f2c0:	b10b      	cbz	r3, f2c6 <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    f2c2:	2200      	movs	r2, #0
    f2c4:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    f2c6:	f3c4 2607 	ubfx	r6, r4, #8, #8
    f2ca:	4630      	mov	r0, r6
    f2cc:	f013 fc58 	bl	22b80 <z_nrf_rtc_timer_compare_read>
    f2d0:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    f2d2:	4630      	mov	r0, r6
    f2d4:	f020 fe12 	bl	2fefc <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    f2d8:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    f2da:	4b10      	ldr	r3, [pc, #64]	; (f31c <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f2dc:	0e22      	lsrs	r2, r4, #24
    f2de:	0092      	lsls	r2, r2, #2
    f2e0:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    f2e4:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    f2e6:	4630      	mov	r0, r6
    f2e8:	f013 fc42 	bl	22b70 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    f2ec:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    f2ee:	4b0c      	ldr	r3, [pc, #48]	; (f320 <mbox_callback+0x68>)
    f2f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f2f4:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    f2f6:	b2e2      	uxtb	r2, r4
    f2f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    f2fc:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    f2fe:	4b09      	ldr	r3, [pc, #36]	; (f324 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    f300:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    f304:	f105 0232 	add.w	r2, r5, #50	; 0x32
    f308:	9300      	str	r3, [sp, #0]
    f30a:	4630      	mov	r0, r6
    f30c:	463b      	mov	r3, r7
    f30e:	9401      	str	r4, [sp, #4]
    f310:	0052      	lsls	r2, r2, #1
    f312:	f020 fdfc 	bl	2ff0e <z_nrf_rtc_timer_set>
}
    f316:	b003      	add	sp, #12
    f318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f31a:	bf00      	nop
    f31c:	4002a180 	.word	0x4002a180
    f320:	4002a080 	.word	0x4002a080
    f324:	0000f275 	.word	0x0000f275

0000f328 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    f328:	f020 be8f 	b.w	3004a <SystemInit>

0000f32c <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    f32c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f330:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    f332:	482f      	ldr	r0, [pc, #188]	; (f3f0 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    f334:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    f336:	f01b faef 	bl	2a918 <atomic_inc>
    f33a:	4606      	mov	r6, r0
    f33c:	b970      	cbnz	r0, f35c <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f33e:	4c2d      	ldr	r4, [pc, #180]	; (f3f4 <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
    f340:	4605      	mov	r5, r0
    f342:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    f344:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f348:	f8df a0ac 	ldr.w	sl, [pc, #172]	; f3f8 <z_log_init.isra.0+0xcc>
    f34c:	4554      	cmp	r4, sl
    f34e:	d307      	bcc.n	f360 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    f350:	f1b9 0f00 	cmp.w	r9, #0
    f354:	d002      	beq.n	f35c <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    f356:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    f35a:	b9e5      	cbnz	r5, f396 <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    f35c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    f360:	7b23      	ldrb	r3, [r4, #12]
    f362:	b173      	cbz	r3, f382 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    f364:	6823      	ldr	r3, [r4, #0]
    f366:	68db      	ldr	r3, [r3, #12]
    f368:	b10b      	cbz	r3, f36e <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    f36a:	4620      	mov	r0, r4
    f36c:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    f36e:	6823      	ldr	r3, [r4, #0]
    f370:	691b      	ldr	r3, [r3, #16]
    f372:	b943      	cbnz	r3, f386 <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    f374:	6863      	ldr	r3, [r4, #4]
    f376:	2204      	movs	r2, #4
    f378:	4620      	mov	r0, r4
    f37a:	6819      	ldr	r1, [r3, #0]
    f37c:	f000 f8c0 	bl	f500 <log_backend_enable>
			i++;
    f380:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f382:	3410      	adds	r4, #16
    f384:	e7e2      	b.n	f34c <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    f386:	4620      	mov	r0, r4
    f388:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    f38a:	2800      	cmp	r0, #0
    f38c:	d0f2      	beq.n	f374 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    f38e:	fa0b f306 	lsl.w	r3, fp, r6
    f392:	431d      	orrs	r5, r3
    f394:	e7f4      	b.n	f380 <z_log_init.isra.0+0x54>
    f396:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    f398:	fa95 f4a5 	rbit	r4, r5
    f39c:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    f3a0:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f3a4:	0126      	lsls	r6, r4, #4
    f3a6:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    f3aa:	ea6f 0b03 	mvn.w	fp, r3
    f3ae:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f3b2:	7b23      	ldrb	r3, [r4, #12]
    f3b4:	b163      	cbz	r3, f3d0 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    f3b6:	f858 3006 	ldr.w	r3, [r8, r6]
    f3ba:	691b      	ldr	r3, [r3, #16]
    f3bc:	b993      	cbnz	r3, f3e4 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    f3be:	4446      	add	r6, r8
			log_backend_enable(backend,
    f3c0:	6873      	ldr	r3, [r6, #4]
    f3c2:	2204      	movs	r2, #4
    f3c4:	4620      	mov	r0, r4
    f3c6:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    f3c8:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    f3cc:	f000 f898 	bl	f500 <log_backend_enable>
	while (mask_cpy) {
    f3d0:	2d00      	cmp	r5, #0
    f3d2:	d1e1      	bne.n	f398 <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    f3d4:	b127      	cbz	r7, f3e0 <z_log_init.isra.0+0xb4>
    f3d6:	f44f 70a4 	mov.w	r0, #328	; 0x148
    f3da:	2100      	movs	r1, #0
    f3dc:	f017 f8a4 	bl	26528 <z_impl_k_sleep>
    f3e0:	464d      	mov	r5, r9
    f3e2:	e7ba      	b.n	f35a <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    f3e4:	4620      	mov	r0, r4
    f3e6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f3e8:	2800      	cmp	r0, #0
    f3ea:	d1f1      	bne.n	f3d0 <z_log_init.isra.0+0xa4>
    f3ec:	e7e7      	b.n	f3be <z_log_init.isra.0+0x92>
    f3ee:	bf00      	nop
    f3f0:	2002f9a0 	.word	0x2002f9a0
    f3f4:	00033150 	.word	0x00033150
    f3f8:	00033160 	.word	0x00033160

0000f3fc <log_format_func_t_get>:
}
    f3fc:	4b01      	ldr	r3, [pc, #4]	; (f404 <log_format_func_t_get+0x8>)
    f3fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f402:	4770      	bx	lr
    f404:	00033678 	.word	0x00033678

0000f408 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    f408:	b508      	push	{r3, lr}
    f40a:	4603      	mov	r3, r0
    f40c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    f40e:	b12b      	cbz	r3, f41c <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    f410:	4a04      	ldr	r2, [pc, #16]	; (f424 <log_set_timestamp_func+0x1c>)
    f412:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    f414:	f000 fa7c 	bl	f910 <log_output_timestamp_freq_set>
	}

	return 0;
    f418:	2000      	movs	r0, #0
}
    f41a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f41c:	f06f 0015 	mvn.w	r0, #21
    f420:	e7fb      	b.n	f41a <log_set_timestamp_func+0x12>
    f422:	bf00      	nop
    f424:	20008478 	.word	0x20008478

0000f428 <log_core_init>:
	panic_mode = false;
    f428:	2300      	movs	r3, #0
    f42a:	4a04      	ldr	r2, [pc, #16]	; (f43c <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    f42c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    f430:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    f432:	4a03      	ldr	r2, [pc, #12]	; (f440 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    f434:	4803      	ldr	r0, [pc, #12]	; (f444 <log_core_init+0x1c>)
	dropped_cnt = 0;
    f436:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    f438:	f7ff bfe6 	b.w	f408 <log_set_timestamp_func>
    f43c:	200318e5 	.word	0x200318e5
    f440:	2002f998 	.word	0x2002f998
    f444:	0002a915 	.word	0x0002a915

0000f448 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    f448:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    f44a:	4d0b      	ldr	r5, [pc, #44]	; (f478 <z_impl_log_panic+0x30>)
    f44c:	7829      	ldrb	r1, [r5, #0]
    f44e:	b941      	cbnz	r1, f462 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    f450:	2001      	movs	r0, #1
    f452:	f7ff ff6b 	bl	f32c <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f456:	4c09      	ldr	r4, [pc, #36]	; (f47c <z_impl_log_panic+0x34>)
    f458:	4e09      	ldr	r6, [pc, #36]	; (f480 <z_impl_log_panic+0x38>)
    f45a:	42b4      	cmp	r4, r6
    f45c:	d302      	bcc.n	f464 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    f45e:	2301      	movs	r3, #1
    f460:	702b      	strb	r3, [r5, #0]
}
    f462:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f464:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f466:	795b      	ldrb	r3, [r3, #5]
    f468:	b11b      	cbz	r3, f472 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    f46a:	6823      	ldr	r3, [r4, #0]
    f46c:	4620      	mov	r0, r4
    f46e:	689b      	ldr	r3, [r3, #8]
    f470:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f472:	3410      	adds	r4, #16
    f474:	e7f1      	b.n	f45a <z_impl_log_panic+0x12>
    f476:	bf00      	nop
    f478:	200318e5 	.word	0x200318e5
    f47c:	00033150 	.word	0x00033150
    f480:	00033160 	.word	0x00033160

0000f484 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    f484:	b510      	push	{r4, lr}
    f486:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    f488:	4806      	ldr	r0, [pc, #24]	; (f4a4 <z_log_dropped+0x20>)
    f48a:	f01b fa45 	bl	2a918 <atomic_inc>
	if (buffered) {
    f48e:	b13c      	cbz	r4, f4a0 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f490:	4b05      	ldr	r3, [pc, #20]	; (f4a8 <z_log_dropped+0x24>)
    f492:	e8d3 1fef 	ldaex	r1, [r3]
    f496:	3901      	subs	r1, #1
    f498:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f49c:	2a00      	cmp	r2, #0
    f49e:	d1f8      	bne.n	f492 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    f4a0:	bd10      	pop	{r4, pc}
    f4a2:	bf00      	nop
    f4a4:	2002f998 	.word	0x2002f998
    f4a8:	2002f99c 	.word	0x2002f99c

0000f4ac <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    f4ac:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f4ae:	4b0a      	ldr	r3, [pc, #40]	; (f4d8 <z_log_msg_commit+0x2c>)
{
    f4b0:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f4b2:	681b      	ldr	r3, [r3, #0]
    f4b4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f4b6:	4c09      	ldr	r4, [pc, #36]	; (f4dc <z_log_msg_commit+0x30>)
    f4b8:	4e09      	ldr	r6, [pc, #36]	; (f4e0 <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
    f4ba:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f4bc:	42b4      	cmp	r4, r6
    f4be:	d300      	bcc.n	f4c2 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    f4c0:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    f4c2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    f4c4:	795b      	ldrb	r3, [r3, #5]
    f4c6:	b123      	cbz	r3, f4d2 <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    f4c8:	6823      	ldr	r3, [r4, #0]
    f4ca:	4629      	mov	r1, r5
    f4cc:	4620      	mov	r0, r4
    f4ce:	681b      	ldr	r3, [r3, #0]
    f4d0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f4d2:	3410      	adds	r4, #16
    f4d4:	e7f2      	b.n	f4bc <z_log_msg_commit+0x10>
    f4d6:	bf00      	nop
    f4d8:	20008478 	.word	0x20008478
    f4dc:	00033150 	.word	0x00033150
    f4e0:	00033160 	.word	0x00033160

0000f4e4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    f4e4:	4a04      	ldr	r2, [pc, #16]	; (f4f8 <log_source_name_get+0x14>)
    f4e6:	4b05      	ldr	r3, [pc, #20]	; (f4fc <log_source_name_get+0x18>)
    f4e8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    f4ea:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    f4ee:	bf34      	ite	cc
    f4f0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    f4f4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    f4f6:	4770      	bx	lr
    f4f8:	00032fe0 	.word	0x00032fe0
    f4fc:	00033150 	.word	0x00033150

0000f500 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    f500:	4b08      	ldr	r3, [pc, #32]	; (f524 <log_backend_enable+0x24>)
{
    f502:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    f504:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    f506:	6844      	ldr	r4, [r0, #4]
    f508:	111b      	asrs	r3, r3, #4
    f50a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    f50c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    f50e:	6843      	ldr	r3, [r0, #4]
    f510:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    f512:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    f514:	6843      	ldr	r3, [r0, #4]
    f516:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    f518:	6843      	ldr	r3, [r0, #4]
    f51a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    f51c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    f51e:	f01b ba0b 	b.w	2a938 <z_log_notify_backend_enabled>
    f522:	bf00      	nop
    f524:	00033150 	.word	0x00033150

0000f528 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f52c:	b085      	sub	sp, #20
    f52e:	af02      	add	r7, sp, #8
    f530:	4604      	mov	r4, r0
    f532:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    f536:	460e      	mov	r6, r1
    f538:	4693      	mov	fp, r2
    f53a:	4698      	mov	r8, r3
    f53c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    f53e:	f1ba 0f00 	cmp.w	sl, #0
    f542:	d035      	beq.n	f5b0 <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
    f544:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    f548:	f8cd 9000 	str.w	r9, [sp]
    f54c:	2110      	movs	r1, #16
    f54e:	4653      	mov	r3, sl
    f550:	2000      	movs	r0, #0
    f552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f554:	f7fe fed8 	bl	e308 <cbvprintf_package>
    f558:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    f55a:	4a16      	ldr	r2, [pc, #88]	; (f5b4 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
    f55c:	f004 0407 	and.w	r4, r4, #7
    f560:	f00b 0b07 	and.w	fp, fp, #7
    f564:	00e4      	lsls	r4, r4, #3
    f566:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    f56a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    f56e:	4314      	orrs	r4, r2
    f570:	4a11      	ldr	r2, [pc, #68]	; (f5b8 <z_impl_z_log_msg_runtime_vcreate+0x90>)
    f572:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    f576:	3517      	adds	r5, #23
    f578:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    f57a:	f025 0507 	bic.w	r5, r5, #7
    f57e:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    f582:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    f584:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    f586:	f1ba 0f00 	cmp.w	sl, #0
    f58a:	d007      	beq.n	f59c <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    f58c:	f8cd 9000 	str.w	r9, [sp]
    f590:	4653      	mov	r3, sl
    f592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f594:	f105 0010 	add.w	r0, r5, #16
    f598:	f7fe feb6 	bl	e308 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    f59c:	4643      	mov	r3, r8
    f59e:	4622      	mov	r2, r4
    f5a0:	4631      	mov	r1, r6
    f5a2:	4628      	mov	r0, r5
    f5a4:	f01b f9cb 	bl	2a93e <z_log_msg_finalize>
	}
}
    f5a8:	370c      	adds	r7, #12
    f5aa:	46bd      	mov	sp, r7
    f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    f5b0:	4651      	mov	r1, sl
    f5b2:	e7d2      	b.n	f55a <z_impl_z_log_msg_runtime_vcreate+0x32>
    f5b4:	0007fe00 	.word	0x0007fe00
    f5b8:	7ff80000 	.word	0x7ff80000

0000f5bc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    f5bc:	b40e      	push	{r1, r2, r3}
    f5be:	b503      	push	{r0, r1, lr}
    f5c0:	ab03      	add	r3, sp, #12
    f5c2:	f853 2b04 	ldr.w	r2, [r3], #4
    f5c6:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f5c8:	4804      	ldr	r0, [pc, #16]	; (f5dc <print_formatted+0x20>)
	va_start(args, fmt);
    f5ca:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f5cc:	f01b f9fa 	bl	2a9c4 <cbvprintf>
	va_end(args);

	return length;
}
    f5d0:	b002      	add	sp, #8
    f5d2:	f85d eb04 	ldr.w	lr, [sp], #4
    f5d6:	b003      	add	sp, #12
    f5d8:	4770      	bx	lr
    f5da:	bf00      	nop
    f5dc:	0002a973 	.word	0x0002a973

0000f5e0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f5e0:	06ca      	lsls	r2, r1, #27
    f5e2:	d405      	bmi.n	f5f0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f5e4:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    f5e6:	bf4c      	ite	mi
    f5e8:	4902      	ldrmi	r1, [pc, #8]	; (f5f4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    f5ea:	4903      	ldrpl	r1, [pc, #12]	; (f5f8 <newline_print+0x18>)
    f5ec:	f7ff bfe6 	b.w	f5bc <print_formatted>
	}
}
    f5f0:	4770      	bx	lr
    f5f2:	bf00      	nop
    f5f4:	00034ffe 	.word	0x00034ffe
    f5f8:	00034add 	.word	0x00034add

0000f5fc <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    f5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f600:	b089      	sub	sp, #36	; 0x24
    f602:	469a      	mov	sl, r3
    f604:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    f608:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    f60c:	9305      	str	r3, [sp, #20]
    f60e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f610:	4604      	mov	r4, r0
    f612:	460d      	mov	r5, r1
    f614:	9e16      	ldr	r6, [sp, #88]	; 0x58
    f616:	9206      	str	r2, [sp, #24]
    f618:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    f61a:	f1bb 0f00 	cmp.w	fp, #0
    f61e:	f000 8085 	beq.w	f72c <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f622:	f006 0308 	and.w	r3, r6, #8
    f626:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    f628:	f01b f987 	bl	2a93a <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    f62c:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    f630:	4602      	mov	r2, r0
    f632:	2800      	cmp	r0, #0
    f634:	d049      	beq.n	f6ca <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    f636:	4620      	mov	r0, r4
    f638:	4985      	ldr	r1, [pc, #532]	; (f850 <log_output_process+0x254>)
    f63a:	f7ff ffbf 	bl	f5bc <print_formatted>
    f63e:	4680      	mov	r8, r0
	if (stamp) {
    f640:	f1b9 0f00 	cmp.w	r9, #0
    f644:	d008      	beq.n	f658 <log_output_process+0x5c>
	if (!format) {
    f646:	f016 0f44 	tst.w	r6, #68	; 0x44
    f64a:	d140      	bne.n	f6ce <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    f64c:	462a      	mov	r2, r5
    f64e:	4620      	mov	r0, r4
    f650:	4980      	ldr	r1, [pc, #512]	; (f854 <log_output_process+0x258>)
    f652:	f7ff ffb3 	bl	f5bc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    f656:	4480      	add	r8, r0
	if (color) {
    f658:	f006 0301 	and.w	r3, r6, #1
    f65c:	b153      	cbz	r3, f674 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    f65e:	4b7e      	ldr	r3, [pc, #504]	; (f858 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    f660:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    f662:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    f666:	4b7d      	ldr	r3, [pc, #500]	; (f85c <log_output_process+0x260>)
    f668:	497d      	ldr	r1, [pc, #500]	; (f860 <log_output_process+0x264>)
    f66a:	2a00      	cmp	r2, #0
    f66c:	bf08      	it	eq
    f66e:	461a      	moveq	r2, r3
    f670:	f7ff ffa4 	bl	f5bc <print_formatted>
	if (level_on) {
    f674:	f006 0308 	and.w	r3, r6, #8
    f678:	2b00      	cmp	r3, #0
    f67a:	d054      	beq.n	f726 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    f67c:	4b79      	ldr	r3, [pc, #484]	; (f864 <log_output_process+0x268>)
    f67e:	4620      	mov	r0, r4
    f680:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    f684:	4978      	ldr	r1, [pc, #480]	; (f868 <log_output_process+0x26c>)
    f686:	f7ff ff99 	bl	f5bc <print_formatted>
    f68a:	4605      	mov	r5, r0
	if (domain) {
    f68c:	9b06      	ldr	r3, [sp, #24]
    f68e:	b12b      	cbz	r3, f69c <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    f690:	461a      	mov	r2, r3
    f692:	4620      	mov	r0, r4
    f694:	4975      	ldr	r1, [pc, #468]	; (f86c <log_output_process+0x270>)
    f696:	f7ff ff91 	bl	f5bc <print_formatted>
    f69a:	4405      	add	r5, r0
	if (source) {
    f69c:	f1ba 0f00 	cmp.w	sl, #0
    f6a0:	d005      	beq.n	f6ae <log_output_process+0xb2>
		total += print_formatted(output,
    f6a2:	4652      	mov	r2, sl
    f6a4:	4620      	mov	r0, r4
    f6a6:	4972      	ldr	r1, [pc, #456]	; (f870 <log_output_process+0x274>)
    f6a8:	f7ff ff88 	bl	f5bc <print_formatted>
    f6ac:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    f6ae:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    f6b0:	2f00      	cmp	r7, #0
    f6b2:	d149      	bne.n	f748 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    f6b4:	9b04      	ldr	r3, [sp, #16]
    f6b6:	2b00      	cmp	r3, #0
    f6b8:	d14f      	bne.n	f75a <log_output_process+0x15e>
	if (color) {
    f6ba:	07f3      	lsls	r3, r6, #31
    f6bc:	f100 80c1 	bmi.w	f842 <log_output_process+0x246>
	newline_print(output, flags);
    f6c0:	4631      	mov	r1, r6
    f6c2:	4620      	mov	r0, r4
    f6c4:	f7ff ff8c 	bl	f5e0 <newline_print>
}
    f6c8:	e0b5      	b.n	f836 <log_output_process+0x23a>
	uint32_t length = 0U;
    f6ca:	4680      	mov	r8, r0
    f6cc:	e7b8      	b.n	f640 <log_output_process+0x44>
	} else if (freq != 0U) {
    f6ce:	4b69      	ldr	r3, [pc, #420]	; (f874 <log_output_process+0x278>)
    f6d0:	6818      	ldr	r0, [r3, #0]
    f6d2:	2800      	cmp	r0, #0
    f6d4:	d0bf      	beq.n	f656 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    f6d6:	4b68      	ldr	r3, [pc, #416]	; (f878 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    f6d8:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f6dc:	681b      	ldr	r3, [r3, #0]
    f6de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    f6e2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    f6e6:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    f6ea:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    f6ee:	fb09 f505 	mul.w	r5, r9, r5
    f6f2:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f6f6:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    f6fa:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    f6fe:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f702:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    f706:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f70a:	fb09 f505 	mul.w	r5, r9, r5
    f70e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    f712:	fb0c 1113 	mls	r1, ip, r3, r1
    f716:	4620      	mov	r0, r4
    f718:	9100      	str	r1, [sp, #0]
    f71a:	e9cd e501 	strd	lr, r5, [sp, #4]
    f71e:	4957      	ldr	r1, [pc, #348]	; (f87c <log_output_process+0x280>)
    f720:	f7ff ff4c 	bl	f5bc <print_formatted>
    f724:	e797      	b.n	f656 <log_output_process+0x5a>
	int total = 0;
    f726:	f006 0508 	and.w	r5, r6, #8
    f72a:	e7af      	b.n	f68c <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f72c:	f1ba 0f01 	cmp.w	sl, #1
    f730:	d106      	bne.n	f740 <log_output_process+0x144>
	if (package) {
    f732:	2f00      	cmp	r7, #0
    f734:	d165      	bne.n	f802 <log_output_process+0x206>
	if (data_len) {
    f736:	9b04      	ldr	r3, [sp, #16]
    f738:	2b00      	cmp	r3, #0
    f73a:	d07c      	beq.n	f836 <log_output_process+0x23a>
		prefix_offset = 0;
    f73c:	2500      	movs	r5, #0
    f73e:	e00c      	b.n	f75a <log_output_process+0x15e>
	if (package) {
    f740:	2f00      	cmp	r7, #0
    f742:	d0f8      	beq.n	f736 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f744:	484e      	ldr	r0, [pc, #312]	; (f880 <log_output_process+0x284>)
    f746:	e05d      	b.n	f804 <log_output_process+0x208>
		cb = out_func;
    f748:	484e      	ldr	r0, [pc, #312]	; (f884 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    f74a:	463b      	mov	r3, r7
    f74c:	4622      	mov	r2, r4
    f74e:	494e      	ldr	r1, [pc, #312]	; (f888 <log_output_process+0x28c>)
    f750:	f01a fd44 	bl	2a1dc <cbpprintf_external>
	if (data_len) {
    f754:	9b04      	ldr	r3, [sp, #16]
    f756:	2b00      	cmp	r3, #0
    f758:	d069      	beq.n	f82e <log_output_process+0x232>
		print_formatted(output, " ");
    f75a:	f8df 8130 	ldr.w	r8, [pc, #304]	; f88c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    f75e:	f8df 9130 	ldr.w	r9, [pc, #304]	; f890 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f762:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    f764:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f766:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    f768:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f76a:	bf28      	it	cs
    f76c:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    f76e:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    f772:	f7ff ff35 	bl	f5e0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    f776:	4555      	cmp	r5, sl
    f778:	dc46      	bgt.n	f808 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    f77a:	9b05      	ldr	r3, [sp, #20]
    f77c:	4649      	mov	r1, r9
    f77e:	4620      	mov	r0, r4
    f780:	781a      	ldrb	r2, [r3, #0]
    f782:	f7ff ff1b 	bl	f5bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f786:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    f78a:	f01a 0f07 	tst.w	sl, #7
    f78e:	d103      	bne.n	f798 <log_output_process+0x19c>
			print_formatted(output, " ");
    f790:	4641      	mov	r1, r8
    f792:	4620      	mov	r0, r4
    f794:	f7ff ff12 	bl	f5bc <print_formatted>
		if (i < length) {
    f798:	4557      	cmp	r7, sl
    f79a:	d93c      	bls.n	f816 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    f79c:	9b05      	ldr	r3, [sp, #20]
    f79e:	4649      	mov	r1, r9
    f7a0:	4620      	mov	r0, r4
    f7a2:	f813 200a 	ldrb.w	r2, [r3, sl]
    f7a6:	f7ff ff09 	bl	f5bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f7aa:	f10a 0a01 	add.w	sl, sl, #1
    f7ae:	f1ba 0f10 	cmp.w	sl, #16
    f7b2:	d1ea      	bne.n	f78a <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f7b4:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    f7b8:	4620      	mov	r0, r4
    f7ba:	4936      	ldr	r1, [pc, #216]	; (f894 <log_output_process+0x298>)
    f7bc:	f7ff fefe 	bl	f5bc <print_formatted>
		if (i < length) {
    f7c0:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    f7c2:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    f7c4:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    f7c6:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    f7c8:	4b33      	ldr	r3, [pc, #204]	; (f898 <log_output_process+0x29c>)
    f7ca:	5c99      	ldrb	r1, [r3, r2]
    f7cc:	f011 0f97 	tst.w	r1, #151	; 0x97
    f7d0:	bf08      	it	eq
    f7d2:	222e      	moveq	r2, #46	; 0x2e
    f7d4:	4931      	ldr	r1, [pc, #196]	; (f89c <log_output_process+0x2a0>)
    f7d6:	f7ff fef1 	bl	f5bc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f7da:	f10a 0a01 	add.w	sl, sl, #1
    f7de:	f1ba 0f10 	cmp.w	sl, #16
    f7e2:	d01d      	beq.n	f820 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    f7e4:	f01a 0f07 	tst.w	sl, #7
    f7e8:	d103      	bne.n	f7f2 <log_output_process+0x1f6>
			print_formatted(output, " ");
    f7ea:	4641      	mov	r1, r8
    f7ec:	4620      	mov	r0, r4
    f7ee:	f7ff fee5 	bl	f5bc <print_formatted>
		if (i < length) {
    f7f2:	4557      	cmp	r7, sl
    f7f4:	4652      	mov	r2, sl
    f7f6:	d8e4      	bhi.n	f7c2 <log_output_process+0x1c6>
			print_formatted(output, " ");
    f7f8:	4641      	mov	r1, r8
    f7fa:	4620      	mov	r0, r4
    f7fc:	f7ff fede 	bl	f5bc <print_formatted>
    f800:	e7eb      	b.n	f7da <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f802:	4820      	ldr	r0, [pc, #128]	; (f884 <log_output_process+0x288>)
		prefix_offset = 0;
    f804:	465d      	mov	r5, fp
    f806:	e7a0      	b.n	f74a <log_output_process+0x14e>
		print_formatted(output, " ");
    f808:	4641      	mov	r1, r8
    f80a:	4620      	mov	r0, r4
    f80c:	f7ff fed6 	bl	f5bc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f810:	f10a 0a01 	add.w	sl, sl, #1
    f814:	e7af      	b.n	f776 <log_output_process+0x17a>
			print_formatted(output, "   ");
    f816:	4620      	mov	r0, r4
    f818:	4921      	ldr	r1, [pc, #132]	; (f8a0 <log_output_process+0x2a4>)
    f81a:	f7ff fecf 	bl	f5bc <print_formatted>
    f81e:	e7c4      	b.n	f7aa <log_output_process+0x1ae>
		data += length;
    f820:	9b05      	ldr	r3, [sp, #20]
    f822:	443b      	add	r3, r7
    f824:	9305      	str	r3, [sp, #20]
	} while (len);
    f826:	9b04      	ldr	r3, [sp, #16]
    f828:	1bdb      	subs	r3, r3, r7
    f82a:	9304      	str	r3, [sp, #16]
    f82c:	d199      	bne.n	f762 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    f82e:	f1bb 0f00 	cmp.w	fp, #0
    f832:	f47f af42 	bne.w	f6ba <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    f836:	4620      	mov	r0, r4
}
    f838:	b009      	add	sp, #36	; 0x24
    f83a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    f83e:	f01b b8c8 	b.w	2a9d2 <log_output_flush>
		print_formatted(output, "%s", log_color);
    f842:	4620      	mov	r0, r4
    f844:	4a05      	ldr	r2, [pc, #20]	; (f85c <log_output_process+0x260>)
    f846:	4906      	ldr	r1, [pc, #24]	; (f860 <log_output_process+0x264>)
    f848:	f7ff feb8 	bl	f5bc <print_formatted>
}
    f84c:	e738      	b.n	f6c0 <log_output_process+0xc4>
    f84e:	bf00      	nop
    f850:	00035275 	.word	0x00035275
    f854:	00035279 	.word	0x00035279
    f858:	00033688 	.word	0x00033688
    f85c:	00034dac 	.word	0x00034dac
    f860:	00035b75 	.word	0x00035b75
    f864:	0003369c 	.word	0x0003369c
    f868:	0003529e 	.word	0x0003529e
    f86c:	000352a4 	.word	0x000352a4
    f870:	000352a8 	.word	0x000352a8
    f874:	2002f9a8 	.word	0x2002f9a8
    f878:	2002f9a4 	.word	0x2002f9a4
    f87c:	00035282 	.word	0x00035282
    f880:	0002a98f 	.word	0x0002a98f
    f884:	0002a973 	.word	0x0002a973
    f888:	0002a9c5 	.word	0x0002a9c5
    f88c:	00034fe9 	.word	0x00034fe9
    f890:	000352ad 	.word	0x000352ad
    f894:	000352b3 	.word	0x000352b3
    f898:	0003875f 	.word	0x0003875f
    f89c:	000352b5 	.word	0x000352b5
    f8a0:	0003860f 	.word	0x0003860f

0000f8a4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    f8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    f8a8:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    f8aa:	684b      	ldr	r3, [r1, #4]
    f8ac:	4605      	mov	r5, r0
    f8ae:	460c      	mov	r4, r1
    f8b0:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    f8b2:	688e      	ldr	r6, [r1, #8]
    f8b4:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    f8b6:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    f8ba:	b15b      	cbz	r3, f8d4 <log_output_msg_process+0x30>
    f8bc:	4a13      	ldr	r2, [pc, #76]	; (f90c <log_output_msg_process+0x68>)
    f8be:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    f8c0:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f8c4:	2900      	cmp	r1, #0
    f8c6:	db1f      	blt.n	f908 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    f8c8:	7820      	ldrb	r0, [r4, #0]
    f8ca:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f8ce:	f7ff fe09 	bl	f4e4 <log_source_name_get>
    f8d2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    f8d4:	4621      	mov	r1, r4
    f8d6:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    f8da:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    f8dc:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    f8e0:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    f8e2:	eb01 0402 	add.w	r4, r1, r2
    f8e6:	bf08      	it	eq
    f8e8:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    f8ea:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    f8ee:	e9cd 0803 	strd	r0, r8, [sp, #12]
    f8f2:	e9cd 1401 	strd	r1, r4, [sp, #4]
    f8f6:	2200      	movs	r2, #0
    f8f8:	4631      	mov	r1, r6
    f8fa:	4628      	mov	r0, r5
    f8fc:	9700      	str	r7, [sp, #0]
    f8fe:	f7ff fe7d 	bl	f5fc <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    f902:	b006      	add	sp, #24
    f904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f908:	2300      	movs	r3, #0
    f90a:	e7e3      	b.n	f8d4 <log_output_msg_process+0x30>
    f90c:	00032fe0 	.word	0x00032fe0

0000f910 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f910:	2100      	movs	r1, #0
    f912:	2301      	movs	r3, #1
    f914:	4a06      	ldr	r2, [pc, #24]	; (f930 <log_output_timestamp_freq_set+0x20>)
    f916:	4290      	cmp	r0, r2
    f918:	d806      	bhi.n	f928 <log_output_timestamp_freq_set+0x18>
    f91a:	4a06      	ldr	r2, [pc, #24]	; (f934 <log_output_timestamp_freq_set+0x24>)
    f91c:	b901      	cbnz	r1, f920 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    f91e:	2301      	movs	r3, #1
    f920:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f922:	4b05      	ldr	r3, [pc, #20]	; (f938 <log_output_timestamp_freq_set+0x28>)
    f924:	6018      	str	r0, [r3, #0]
}
    f926:	4770      	bx	lr
		timestamp_div *= 2U;
    f928:	2101      	movs	r1, #1
		frequency /= 2U;
    f92a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f92c:	005b      	lsls	r3, r3, #1
    f92e:	e7f2      	b.n	f916 <log_output_timestamp_freq_set+0x6>
    f930:	000f4240 	.word	0x000f4240
    f934:	2002f9a4 	.word	0x2002f9a4
    f938:	2002f9a8 	.word	0x2002f9a8

0000f93c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    f93c:	2201      	movs	r2, #1
    f93e:	4b01      	ldr	r3, [pc, #4]	; (f944 <log_backend_rtt_init+0x8>)
    f940:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    f942:	4770      	bx	lr
    f944:	200318e6 	.word	0x200318e6

0000f948 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    f948:	4b01      	ldr	r3, [pc, #4]	; (f950 <format_set+0x8>)
	return 0;
}
    f94a:	2000      	movs	r0, #0
	log_format_current = log_type;
    f94c:	6019      	str	r1, [r3, #0]
}
    f94e:	4770      	bx	lr
    f950:	2002f9c0 	.word	0x2002f9c0

0000f954 <panic>:
	panic_mode = true;
    f954:	2201      	movs	r2, #1
    f956:	4b02      	ldr	r3, [pc, #8]	; (f960 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    f958:	4802      	ldr	r0, [pc, #8]	; (f964 <panic+0x10>)
    f95a:	701a      	strb	r2, [r3, #0]
    f95c:	f01b b839 	b.w	2a9d2 <log_output_flush>
    f960:	200318e7 	.word	0x200318e7
    f964:	000336cc 	.word	0x000336cc

0000f968 <process>:
{
    f968:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f96a:	4b06      	ldr	r3, [pc, #24]	; (f984 <process+0x1c>)
{
    f96c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f96e:	6818      	ldr	r0, [r3, #0]
    f970:	f7ff fd44 	bl	f3fc <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    f974:	4621      	mov	r1, r4
}
    f976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f97a:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    f97c:	220f      	movs	r2, #15
    f97e:	4802      	ldr	r0, [pc, #8]	; (f988 <process+0x20>)
    f980:	4718      	bx	r3
    f982:	bf00      	nop
    f984:	2002f9c0 	.word	0x2002f9c0
    f988:	000336cc 	.word	0x000336cc

0000f98c <data_out_block_mode>:
{
    f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f98e:	4607      	mov	r7, r0
    f990:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    f992:	2404      	movs	r4, #4
    f994:	4d17      	ldr	r5, [pc, #92]	; (f9f4 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    f996:	4632      	mov	r2, r6
    f998:	4639      	mov	r1, r7
    f99a:	2000      	movs	r0, #0
    f99c:	f015 fcc2 	bl	25324 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    f9a0:	b1c8      	cbz	r0, f9d6 <data_out_block_mode+0x4a>
	host_present = true;
    f9a2:	2301      	movs	r3, #1
    f9a4:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    f9a6:	4b14      	ldr	r3, [pc, #80]	; (f9f8 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    f9a8:	781b      	ldrb	r3, [r3, #0]
    f9aa:	b92b      	cbnz	r3, f9b8 <data_out_block_mode+0x2c>
}
    f9ac:	4630      	mov	r0, r6
    f9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    f9b0:	b95c      	cbnz	r4, f9ca <data_out_block_mode+0x3e>
		host_present = false;
    f9b2:	702c      	strb	r4, [r5, #0]
    f9b4:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    f9b8:	2000      	movs	r0, #0
    f9ba:	f015 fcfb 	bl	253b4 <SEGGER_RTT_HasDataUp>
    f9be:	2800      	cmp	r0, #0
    f9c0:	d0f4      	beq.n	f9ac <data_out_block_mode+0x20>
    f9c2:	782b      	ldrb	r3, [r5, #0]
    f9c4:	2b00      	cmp	r3, #0
    f9c6:	d1f3      	bne.n	f9b0 <data_out_block_mode+0x24>
    f9c8:	e7f0      	b.n	f9ac <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    f9ca:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    f9cc:	f241 3088 	movw	r0, #5000	; 0x1388
    f9d0:	f021 fd55 	bl	3147e <z_impl_k_busy_wait>
}
    f9d4:	e7f0      	b.n	f9b8 <data_out_block_mode+0x2c>
		} else if (host_present) {
    f9d6:	782b      	ldrb	r3, [r5, #0]
    f9d8:	b113      	cbz	r3, f9e0 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    f9da:	3c01      	subs	r4, #1
    f9dc:	d104      	bne.n	f9e8 <data_out_block_mode+0x5c>
		host_present = false;
    f9de:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    f9e0:	782b      	ldrb	r3, [r5, #0]
    f9e2:	2b00      	cmp	r3, #0
    f9e4:	d1d7      	bne.n	f996 <data_out_block_mode+0xa>
    f9e6:	e7e1      	b.n	f9ac <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    f9e8:	f241 3088 	movw	r0, #5000	; 0x1388
    f9ec:	f021 fd47 	bl	3147e <z_impl_k_busy_wait>
    f9f0:	e7f6      	b.n	f9e0 <data_out_block_mode+0x54>
    f9f2:	bf00      	nop
    f9f4:	200318e6 	.word	0x200318e6
    f9f8:	200318e7 	.word	0x200318e7

0000f9fc <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    f9fc:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f9fe:	8983      	ldrh	r3, [r0, #12]
    fa00:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    fa02:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    fa04:	0c09      	lsrs	r1, r1, #16
    fa06:	fb03 5501 	mla	r5, r3, r1, r5
{
    fa0a:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    fa0c:	e9cd 5304 	strd	r5, r3, [sp, #16]
    fa10:	4b11      	ldr	r3, [pc, #68]	; (fa58 <nvs_flash_erase_sector+0x5c>)
    fa12:	2208      	movs	r2, #8
    fa14:	9303      	str	r3, [sp, #12]
    fa16:	4b11      	ldr	r3, [pc, #68]	; (fa5c <nvs_flash_erase_sector+0x60>)
{
    fa18:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    fa1a:	9302      	str	r3, [sp, #8]
    fa1c:	2300      	movs	r3, #0
    fa1e:	4910      	ldr	r1, [pc, #64]	; (fa60 <nvs_flash_erase_sector+0x64>)
    fa20:	4618      	mov	r0, r3
    fa22:	e9cd 3200 	strd	r3, r2, [sp]
    fa26:	2204      	movs	r2, #4
    fa28:	f01b f853 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    fa2c:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    fa2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fa30:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    fa32:	6883      	ldr	r3, [r0, #8]
    fa34:	4629      	mov	r1, r5
    fa36:	689b      	ldr	r3, [r3, #8]
    fa38:	4798      	blx	r3

	if (rc) {
    fa3a:	b950      	cbnz	r0, fa52 <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    fa3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    fa3e:	4631      	mov	r1, r6
    fa40:	4620      	mov	r0, r4
    fa42:	89a3      	ldrh	r3, [r4, #12]
    fa44:	7912      	ldrb	r2, [r2, #4]
    fa46:	f01b f81f 	bl	2aa88 <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    fa4a:	2800      	cmp	r0, #0
    fa4c:	bf18      	it	ne
    fa4e:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    fa52:	b006      	add	sp, #24
    fa54:	bd70      	pop	{r4, r5, r6, pc}
    fa56:	bf00      	nop
    fa58:	000354ab 	.word	0x000354ab
    fa5c:	000352e8 	.word	0x000352e8
    fa60:	000330b8 	.word	0x000330b8

0000fa64 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    fa64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    fa68:	884b      	ldrh	r3, [r1, #2]
{
    fa6a:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    fa6c:	9304      	str	r3, [sp, #16]
    fa6e:	4b1d      	ldr	r3, [pc, #116]	; (fae4 <nvs_recover_last_ate+0x80>)
    fa70:	2408      	movs	r4, #8
    fa72:	9303      	str	r3, [sp, #12]
    fa74:	4b1c      	ldr	r3, [pc, #112]	; (fae8 <nvs_recover_last_ate+0x84>)
{
    fa76:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    fa78:	9302      	str	r3, [sp, #8]
    fa7a:	2300      	movs	r3, #0
{
    fa7c:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    fa7e:	4618      	mov	r0, r3
    fa80:	e9cd 3400 	strd	r3, r4, [sp]
    fa84:	4919      	ldr	r1, [pc, #100]	; (faec <nvs_recover_last_ate+0x88>)
    fa86:	2204      	movs	r2, #4
    fa88:	f01b f823 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fa8c:	4621      	mov	r1, r4
    fa8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fa90:	f01b f82f 	bl	2aaf2 <nvs_al_size.isra.0>
    fa94:	4680      	mov	r8, r0

	*addr -= ate_size;
    fa96:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    fa98:	f8df 9054 	ldr.w	r9, [pc, #84]	; faf0 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    fa9c:	1a24      	subs	r4, r4, r0
    fa9e:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    faa0:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    faa4:	42b4      	cmp	r4, r6
    faa6:	d803      	bhi.n	fab0 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    faa8:	2000      	movs	r0, #0
}
    faaa:	b009      	add	sp, #36	; 0x24
    faac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fab0:	2308      	movs	r3, #8
    fab2:	4621      	mov	r1, r4
    fab4:	4638      	mov	r0, r7
    fab6:	aa06      	add	r2, sp, #24
    fab8:	f01a ff98 	bl	2a9ec <nvs_flash_rd>
		if (rc) {
    fabc:	2800      	cmp	r0, #0
    fabe:	d1f4      	bne.n	faaa <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    fac0:	4638      	mov	r0, r7
    fac2:	a906      	add	r1, sp, #24
    fac4:	f01b f81f 	bl	2ab06 <nvs_ate_valid>
    fac8:	b140      	cbz	r0, fadc <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    faca:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    face:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    fad2:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    fad6:	4413      	add	r3, r2
    fad8:	441e      	add	r6, r3
			*addr = ate_end_addr;
    fada:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    fadc:	eba4 0408 	sub.w	r4, r4, r8
    fae0:	e7e0      	b.n	faa4 <nvs_recover_last_ate+0x40>
    fae2:	bf00      	nop
    fae4:	00035496 	.word	0x00035496
    fae8:	00035309 	.word	0x00035309
    faec:	000330b8 	.word	0x000330b8
    faf0:	ffff0000 	.word	0xffff0000

0000faf4 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    faf4:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    faf6:	8883      	ldrh	r3, [r0, #4]
{
    faf8:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    fafa:	9304      	str	r3, [sp, #16]
    fafc:	4b10      	ldr	r3, [pc, #64]	; (fb40 <nvs_add_gc_done_ate+0x4c>)
    fafe:	2500      	movs	r5, #0
    fb00:	9303      	str	r3, [sp, #12]
    fb02:	4b10      	ldr	r3, [pc, #64]	; (fb44 <nvs_add_gc_done_ate+0x50>)
{
    fb04:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    fb06:	9302      	str	r3, [sp, #8]
    fb08:	2308      	movs	r3, #8
    fb0a:	2204      	movs	r2, #4
    fb0c:	4628      	mov	r0, r5
    fb0e:	e9cd 5300 	strd	r5, r3, [sp]
    fb12:	490d      	ldr	r1, [pc, #52]	; (fb48 <nvs_add_gc_done_ate+0x54>)
    fb14:	462b      	mov	r3, r5
    fb16:	f01a ffdc 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    fb1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fb1e:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fb22:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    fb24:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fb26:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    fb2a:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    fb2e:	f01a ffa2 	bl	2aa76 <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    fb32:	4620      	mov	r0, r4
    fb34:	a906      	add	r1, sp, #24
    fb36:	f01b f8a2 	bl	2ac7e <nvs_flash_ate_wrt>
}
    fb3a:	b009      	add	sp, #36	; 0x24
    fb3c:	bd30      	pop	{r4, r5, pc}
    fb3e:	bf00      	nop
    fb40:	0003547b 	.word	0x0003547b
    fb44:	00035330 	.word	0x00035330
    fb48:	000330b8 	.word	0x000330b8

0000fb4c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fb50:	2108      	movs	r1, #8
{
    fb52:	b09b      	sub	sp, #108	; 0x6c
    fb54:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fb56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fb58:	f01a ffcb 	bl	2aaf2 <nvs_al_size.isra.0>
    fb5c:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fb5e:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    fb60:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fb62:	0c1b      	lsrs	r3, r3, #16
    fb64:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    fb66:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fb68:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    fb6a:	f01a ff4d 	bl	2aa08 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fb6e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    fb72:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fb74:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fb76:	445e      	add	r6, fp
    fb78:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fb7a:	2308      	movs	r3, #8
    fb7c:	4631      	mov	r1, r6
    fb7e:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fb80:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fb82:	f01a ff33 	bl	2a9ec <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    fb86:	1e02      	subs	r2, r0, #0
    fb88:	f2c0 80bb 	blt.w	fd02 <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    fb8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fb8e:	aa0c      	add	r2, sp, #48	; 0x30
    fb90:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fb92:	2300      	movs	r3, #0
		if (data8[i] != value) {
    fb94:	f812 0b01 	ldrb.w	r0, [r2], #1
    fb98:	4281      	cmp	r1, r0
    fb9a:	f040 80a1 	bne.w	fce0 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fb9e:	3301      	adds	r3, #1
    fba0:	2b08      	cmp	r3, #8
    fba2:	d1f7      	bne.n	fb94 <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    fba4:	68a3      	ldr	r3, [r4, #8]
    fba6:	6862      	ldr	r2, [r4, #4]
    fba8:	442b      	add	r3, r5
    fbaa:	429a      	cmp	r2, r3
    fbac:	f080 8090 	bcs.w	fcd0 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    fbb0:	4659      	mov	r1, fp
    fbb2:	4620      	mov	r0, r4
    fbb4:	f7ff ff22 	bl	f9fc <nvs_flash_erase_sector>
    fbb8:	4602      	mov	r2, r0
	if (rc) {
    fbba:	e0a2      	b.n	fd02 <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    fbbc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    fbc0:	0c36      	lsrs	r6, r6, #16
    fbc2:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    fbc4:	441e      	add	r6, r3
    fbc6:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    fbc8:	aa0e      	add	r2, sp, #56	; 0x38
    fbca:	4620      	mov	r0, r4
    fbcc:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    fbce:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    fbd2:	f01a ffd0 	bl	2ab76 <nvs_prev_ate>
		if (rc) {
    fbd6:	4602      	mov	r2, r0
    fbd8:	2800      	cmp	r0, #0
    fbda:	f040 8092 	bne.w	fd02 <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    fbde:	4620      	mov	r0, r4
    fbe0:	a90e      	add	r1, sp, #56	; 0x38
    fbe2:	f01a ff90 	bl	2ab06 <nvs_ate_valid>
    fbe6:	b918      	cbnz	r0, fbf0 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    fbe8:	9b07      	ldr	r3, [sp, #28]
    fbea:	4553      	cmp	r3, sl
    fbec:	d1ec      	bne.n	fbc8 <nvs_gc+0x7c>
    fbee:	e7d9      	b.n	fba4 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    fbf0:	6863      	ldr	r3, [r4, #4]
    fbf2:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fbf4:	aa10      	add	r2, sp, #64	; 0x40
    fbf6:	4620      	mov	r0, r4
    fbf8:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    fbfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fbfc:	f01a ffbb 	bl	2ab76 <nvs_prev_ate>
			if (rc) {
    fc00:	4602      	mov	r2, r0
    fc02:	2800      	cmp	r0, #0
    fc04:	d17d      	bne.n	fd02 <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    fc06:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    fc0a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fc0e:	429a      	cmp	r2, r3
    fc10:	d038      	beq.n	fc84 <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    fc12:	6862      	ldr	r2, [r4, #4]
    fc14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fc16:	429a      	cmp	r2, r3
    fc18:	d1ec      	bne.n	fbf4 <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    fc1a:	45b2      	cmp	sl, r6
    fc1c:	d1e4      	bne.n	fbe8 <nvs_gc+0x9c>
    fc1e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    fc22:	2b00      	cmp	r3, #0
    fc24:	d0e0      	beq.n	fbe8 <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    fc26:	9305      	str	r3, [sp, #20]
    fc28:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fc2c:	2208      	movs	r2, #8
    fc2e:	9304      	str	r3, [sp, #16]
    fc30:	4b36      	ldr	r3, [pc, #216]	; (fd0c <nvs_gc+0x1c0>)
    fc32:	4937      	ldr	r1, [pc, #220]	; (fd10 <nvs_gc+0x1c4>)
    fc34:	9303      	str	r3, [sp, #12]
    fc36:	4b37      	ldr	r3, [pc, #220]	; (fd14 <nvs_gc+0x1c8>)
    fc38:	9302      	str	r3, [sp, #8]
    fc3a:	2300      	movs	r3, #0
    fc3c:	4618      	mov	r0, r3
    fc3e:	e9cd 3200 	strd	r3, r2, [sp]
    fc42:	2204      	movs	r2, #4
    fc44:	f01a ff45 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    fc48:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    fc4c:	ea4f 431a 	mov.w	r3, sl, lsr #16
    fc50:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    fc52:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fc54:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    fc56:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fc58:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    fc5c:	f01a ff0b 	bl	2aa76 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    fc60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    fc62:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    fc66:	681e      	ldr	r6, [r3, #0]
    fc68:	4276      	negs	r6, r6
	block_size =
    fc6a:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    fc6e:	f1b9 0f00 	cmp.w	r9, #0
    fc72:	d10e      	bne.n	fc92 <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    fc74:	4620      	mov	r0, r4
    fc76:	a90e      	add	r1, sp, #56	; 0x38
    fc78:	f01b f801 	bl	2ac7e <nvs_flash_ate_wrt>
			if (rc) {
    fc7c:	4602      	mov	r2, r0
    fc7e:	2800      	cmp	r0, #0
    fc80:	d0b2      	beq.n	fbe8 <nvs_gc+0x9c>
    fc82:	e03e      	b.n	fd02 <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    fc84:	4620      	mov	r0, r4
    fc86:	a910      	add	r1, sp, #64	; 0x40
    fc88:	f01a ff3d 	bl	2ab06 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    fc8c:	2800      	cmp	r0, #0
    fc8e:	d0c0      	beq.n	fc12 <nvs_gc+0xc6>
    fc90:	e7c3      	b.n	fc1a <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    fc92:	454e      	cmp	r6, r9
    fc94:	46b0      	mov	r8, r6
    fc96:	bf28      	it	cs
    fc98:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    fc9a:	aa12      	add	r2, sp, #72	; 0x48
    fc9c:	4643      	mov	r3, r8
    fc9e:	4639      	mov	r1, r7
    fca0:	4620      	mov	r0, r4
    fca2:	f01a fea3 	bl	2a9ec <nvs_flash_rd>
		if (rc) {
    fca6:	4602      	mov	r2, r0
    fca8:	bb58      	cbnz	r0, fd02 <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fcaa:	4643      	mov	r3, r8
    fcac:	68a1      	ldr	r1, [r4, #8]
    fcae:	aa12      	add	r2, sp, #72	; 0x48
    fcb0:	4620      	mov	r0, r4
    fcb2:	f01a ffaa 	bl	2ac0a <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    fcb6:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fcb8:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    fcba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fcbc:	f01a ff19 	bl	2aaf2 <nvs_al_size.isra.0>
    fcc0:	68a3      	ldr	r3, [r4, #8]
    fcc2:	4403      	add	r3, r0
    fcc4:	60a3      	str	r3, [r4, #8]
		if (rc) {
    fcc6:	b9e2      	cbnz	r2, fd02 <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    fcc8:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    fccc:	4447      	add	r7, r8
    fcce:	e7ce      	b.n	fc6e <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    fcd0:	4620      	mov	r0, r4
    fcd2:	f7ff ff0f 	bl	faf4 <nvs_add_gc_done_ate>
		if (rc) {
    fcd6:	4602      	mov	r2, r0
    fcd8:	2800      	cmp	r0, #0
    fcda:	f43f af69 	beq.w	fbb0 <nvs_gc+0x64>
    fcde:	e010      	b.n	fd02 <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    fce0:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fce2:	4620      	mov	r0, r4
    fce4:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    fce6:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fce8:	f01a ff27 	bl	2ab3a <nvs_close_ate_valid>
    fcec:	2800      	cmp	r0, #0
    fcee:	f47f af65 	bne.w	fbbc <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    fcf2:	4620      	mov	r0, r4
    fcf4:	a90a      	add	r1, sp, #40	; 0x28
    fcf6:	f7ff feb5 	bl	fa64 <nvs_recover_last_ate>
		if (rc) {
    fcfa:	4602      	mov	r2, r0
    fcfc:	2800      	cmp	r0, #0
    fcfe:	f43f af63 	beq.w	fbc8 <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    fd02:	4610      	mov	r0, r2
    fd04:	b01b      	add	sp, #108	; 0x6c
    fd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd0a:	bf00      	nop
    fd0c:	0003548f 	.word	0x0003548f
    fd10:	000330b8 	.word	0x000330b8
    fd14:	0003534d 	.word	0x0003534d

0000fd18 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    fd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd1c:	4604      	mov	r4, r0
    fd1e:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    fd20:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    fd24:	4638      	mov	r0, r7
    fd26:	f021 f898 	bl	30e5a <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    fd2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    fd2c:	6883      	ldr	r3, [r0, #8]
    fd2e:	68db      	ldr	r3, [r3, #12]
    fd30:	4798      	blx	r3
    fd32:	4603      	mov	r3, r0
    fd34:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    fd36:	b930      	cbnz	r0, fd46 <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    fd38:	4a90      	ldr	r2, [pc, #576]	; (ff7c <nvs_mount+0x264>)
    fd3a:	9000      	str	r0, [sp, #0]
    fd3c:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    fd40:	2201      	movs	r2, #1
    fd42:	498f      	ldr	r1, [pc, #572]	; (ff80 <nvs_mount+0x268>)
    fd44:	e00f      	b.n	fd66 <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    fd46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    fd48:	6883      	ldr	r3, [r0, #8]
    fd4a:	68db      	ldr	r3, [r3, #12]
    fd4c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    fd4e:	6803      	ldr	r3, [r0, #0]
    fd50:	3b01      	subs	r3, #1
    fd52:	2b1f      	cmp	r3, #31
    fd54:	d90f      	bls.n	fd76 <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    fd56:	4b8b      	ldr	r3, [pc, #556]	; (ff84 <nvs_mount+0x26c>)
    fd58:	9302      	str	r3, [sp, #8]
    fd5a:	2300      	movs	r3, #0
    fd5c:	2201      	movs	r2, #1
    fd5e:	4618      	mov	r0, r3
    fd60:	e9cd 3300 	strd	r3, r3, [sp]
    fd64:	4986      	ldr	r1, [pc, #536]	; (ff80 <nvs_mount+0x268>)
    fd66:	f01a feb4 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    fd6a:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    fd6e:	4628      	mov	r0, r5
    fd70:	b00e      	add	sp, #56	; 0x38
    fd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    fd76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fd78:	6821      	ldr	r1, [r4, #0]
    fd7a:	aa0b      	add	r2, sp, #44	; 0x2c
    fd7c:	f01f fdd6 	bl	2f92c <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    fd80:	b108      	cbz	r0, fd86 <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    fd82:	4b81      	ldr	r3, [pc, #516]	; (ff88 <nvs_mount+0x270>)
    fd84:	e7e8      	b.n	fd58 <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    fd86:	89a5      	ldrh	r5, [r4, #12]
    fd88:	b12d      	cbz	r5, fd96 <nvs_mount+0x7e>
    fd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd8c:	fbb5 f2f3 	udiv	r2, r5, r3
    fd90:	fb03 5512 	mls	r5, r3, r2, r5
    fd94:	b10d      	cbz	r5, fd9a <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    fd96:	4b7d      	ldr	r3, [pc, #500]	; (ff8c <nvs_mount+0x274>)
    fd98:	e7de      	b.n	fd58 <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    fd9a:	89e3      	ldrh	r3, [r4, #14]
    fd9c:	2b01      	cmp	r3, #1
    fd9e:	d805      	bhi.n	fdac <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    fda0:	4b7b      	ldr	r3, [pc, #492]	; (ff90 <nvs_mount+0x278>)
    fda2:	9500      	str	r5, [sp, #0]
    fda4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fda8:	462b      	mov	r3, r5
    fdaa:	e7c9      	b.n	fd40 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fdac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    fdae:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fdb0:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fdb4:	f04f 33ff 	mov.w	r3, #4294967295
    fdb8:	f04f 32ff 	mov.w	r2, #4294967295
    fdbc:	4638      	mov	r0, r7
    fdbe:	f015 fda3 	bl	25908 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fdc2:	2108      	movs	r1, #8
    fdc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fdc6:	f01a fe94 	bl	2aaf2 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    fdca:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fdcc:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    fdce:	89e3      	ldrh	r3, [r4, #14]
    fdd0:	fa1f fa85 	uxth.w	sl, r5
    fdd4:	4553      	cmp	r3, sl
    fdd6:	d808      	bhi.n	fdea <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    fdd8:	89e3      	ldrh	r3, [r4, #14]
    fdda:	4543      	cmp	r3, r8
    fddc:	d123      	bne.n	fe26 <nvs_mount+0x10e>
	return z_impl_k_mutex_unlock(mutex);
    fdde:	4638      	mov	r0, r7
    fde0:	f015 fe0c 	bl	259fc <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    fde4:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    fde8:	e7c1      	b.n	fd6e <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    fdea:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    fdec:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    fdee:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    fdf0:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fdf4:	464a      	mov	r2, r9
    fdf6:	2308      	movs	r3, #8
    fdf8:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    fdfa:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fdfc:	f01a fe44 	bl	2aa88 <nvs_flash_cmp_const>
		if (rc) {
    fe00:	b178      	cbz	r0, fe22 <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    fe02:	4620      	mov	r0, r4
    fe04:	a906      	add	r1, sp, #24
    fe06:	f01a fdff 	bl	2aa08 <nvs_sector_advance>
			closed_sectors++;
    fe0a:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fe0e:	2308      	movs	r3, #8
    fe10:	464a      	mov	r2, r9
    fe12:	4620      	mov	r0, r4
    fe14:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    fe16:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fe1a:	f01a fe35 	bl	2aa88 <nvs_flash_cmp_const>
			if (!rc) {
    fe1e:	2800      	cmp	r0, #0
    fe20:	d0da      	beq.n	fdd8 <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    fe22:	3501      	adds	r5, #1
    fe24:	e7d3      	b.n	fdce <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    fe26:	4553      	cmp	r3, sl
    fe28:	d10b      	bne.n	fe42 <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    fe2a:	9906      	ldr	r1, [sp, #24]
    fe2c:	2308      	movs	r3, #8
    fe2e:	464a      	mov	r2, r9
    fe30:	4620      	mov	r0, r4
    fe32:	1b89      	subs	r1, r1, r6
    fe34:	f01a fe28 	bl	2aa88 <nvs_flash_cmp_const>
		if (!rc) {
    fe38:	b918      	cbnz	r0, fe42 <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    fe3a:	4620      	mov	r0, r4
    fe3c:	a906      	add	r1, sp, #24
    fe3e:	f01a fde3 	bl	2aa08 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    fe42:	4620      	mov	r0, r4
    fe44:	a906      	add	r1, sp, #24
    fe46:	f7ff fe0d 	bl	fa64 <nvs_recover_last_ate>
	if (rc) {
    fe4a:	4605      	mov	r5, r0
    fe4c:	b118      	cbz	r0, fe56 <nvs_mount+0x13e>
    fe4e:	4638      	mov	r0, r7
    fe50:	f015 fdd4 	bl	259fc <z_impl_k_mutex_unlock>
	if (rc) {
    fe54:	e78b      	b.n	fd6e <nvs_mount+0x56>
	fs->ate_wra = addr;
    fe56:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fe58:	ea4f 4813 	mov.w	r8, r3, lsr #16
    fe5c:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    fe60:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fe62:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    fe66:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    fe6a:	4299      	cmp	r1, r3
    fe6c:	d30f      	bcc.n	fe8e <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fe6e:	2308      	movs	r3, #8
    fe70:	4620      	mov	r0, r4
    fe72:	aa07      	add	r2, sp, #28
    fe74:	f01a fdba 	bl	2a9ec <nvs_flash_rd>
		if (rc) {
    fe78:	4605      	mov	r5, r0
    fe7a:	2800      	cmp	r0, #0
    fe7c:	d1e7      	bne.n	fe4e <nvs_mount+0x136>
    fe7e:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    fe80:	f813 2b01 	ldrb.w	r2, [r3], #1
    fe84:	4591      	cmp	r9, r2
    fe86:	d143      	bne.n	ff10 <nvs_mount+0x1f8>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fe88:	3501      	adds	r5, #1
    fe8a:	2d08      	cmp	r5, #8
    fe8c:	d1f8      	bne.n	fe80 <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fe8e:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    fe90:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fe92:	0c1b      	lsrs	r3, r3, #16
    fe94:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    fe96:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fe98:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    fe9a:	f01a fdb5 	bl	2aa08 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    fe9e:	464a      	mov	r2, r9
    fea0:	4620      	mov	r0, r4
    fea2:	89a3      	ldrh	r3, [r4, #12]
    fea4:	9906      	ldr	r1, [sp, #24]
    fea6:	f01a fdef 	bl	2aa88 <nvs_flash_cmp_const>
	if (rc < 0) {
    feaa:	1e05      	subs	r5, r0, #0
    feac:	dbcf      	blt.n	fe4e <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    feae:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    feb0:	f000 8082 	beq.w	ffb8 <nvs_mount+0x2a0>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    feb4:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    feb8:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    febc:	89a3      	ldrh	r3, [r4, #12]
    febe:	fa1f f288 	uxth.w	r2, r8
    fec2:	1b9b      	subs	r3, r3, r6
    fec4:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    fec6:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    feca:	d33d      	bcc.n	ff48 <nvs_mount+0x230>
		LOG_INF("No GC Done marker found: restarting gc");
    fecc:	4b31      	ldr	r3, [pc, #196]	; (ff94 <nvs_mount+0x27c>)
    fece:	2203      	movs	r2, #3
    fed0:	9302      	str	r3, [sp, #8]
    fed2:	2300      	movs	r3, #0
    fed4:	492a      	ldr	r1, [pc, #168]	; (ff80 <nvs_mount+0x268>)
    fed6:	4618      	mov	r0, r3
    fed8:	e9cd 3300 	strd	r3, r3, [sp]
    fedc:	f01a fdf9 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    fee0:	4620      	mov	r0, r4
    fee2:	6861      	ldr	r1, [r4, #4]
    fee4:	f7ff fd8a 	bl	f9fc <nvs_flash_erase_sector>
		if (rc) {
    fee8:	4605      	mov	r5, r0
    feea:	2800      	cmp	r0, #0
    feec:	d1af      	bne.n	fe4e <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    feee:	6863      	ldr	r3, [r4, #4]
    fef0:	4a29      	ldr	r2, [pc, #164]	; (ff98 <nvs_mount+0x280>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fef2:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    fef4:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fef6:	440b      	add	r3, r1
    fef8:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    fefc:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    fefe:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    ff00:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    ff02:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    ff04:	f7ff fe22 	bl	fb4c <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    ff08:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    ff0a:	2d00      	cmp	r5, #0
    ff0c:	d070      	beq.n	fff0 <nvs_mount+0x2d8>
    ff0e:	e79e      	b.n	fe4e <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    ff10:	4620      	mov	r0, r4
    ff12:	a907      	add	r1, sp, #28
    ff14:	f01a fdf7 	bl	2ab06 <nvs_ate_valid>
    ff18:	6862      	ldr	r2, [r4, #4]
    ff1a:	b910      	cbnz	r0, ff22 <nvs_mount+0x20a>
		fs->ate_wra -= ate_size;
    ff1c:	1b92      	subs	r2, r2, r6
    ff1e:	6062      	str	r2, [r4, #4]
    ff20:	e7a1      	b.n	fe66 <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ff22:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    ff26:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    ff2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    ff2c:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ff30:	4429      	add	r1, r5
    ff32:	f01a fdde 	bl	2aaf2 <nvs_al_size.isra.0>
    ff36:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    ff38:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ff3a:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    ff3c:	d1ee      	bne.n	ff1c <nvs_mount+0x204>
    ff3e:	2d00      	cmp	r5, #0
    ff40:	d0ec      	beq.n	ff1c <nvs_mount+0x204>
				rc = -ESPIPE;
    ff42:	f06f 051c 	mvn.w	r5, #28
    ff46:	e090      	b.n	1006a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ff48:	2308      	movs	r3, #8
    ff4a:	4641      	mov	r1, r8
    ff4c:	4620      	mov	r0, r4
    ff4e:	aa09      	add	r2, sp, #36	; 0x24
    ff50:	f01a fd4c 	bl	2a9ec <nvs_flash_rd>
			if (rc) {
    ff54:	4605      	mov	r5, r0
    ff56:	2800      	cmp	r0, #0
    ff58:	f47f af79 	bne.w	fe4e <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    ff5c:	4620      	mov	r0, r4
    ff5e:	a909      	add	r1, sp, #36	; 0x24
    ff60:	f01a fdd1 	bl	2ab06 <nvs_ate_valid>
    ff64:	b138      	cbz	r0, ff76 <nvs_mount+0x25e>
    ff66:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ff6a:	454b      	cmp	r3, r9
    ff6c:	d103      	bne.n	ff76 <nvs_mount+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    ff6e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ff72:	2b00      	cmp	r3, #0
    ff74:	d07f      	beq.n	10076 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x76>
			addr += ate_size;
    ff76:	44b0      	add	r8, r6
    ff78:	e7a0      	b.n	febc <nvs_mount+0x1a4>
    ff7a:	bf00      	nop
    ff7c:	00035377 	.word	0x00035377
    ff80:	000330b8 	.word	0x000330b8
    ff84:	00035399 	.word	0x00035399
    ff88:	000353b6 	.word	0x000353b6
    ff8c:	000353ce 	.word	0x000353ce
    ff90:	000353e2 	.word	0x000353e2
    ff94:	0003543f 	.word	0x0003543f
    ff98:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    ff9c:	464a      	mov	r2, r9
    ff9e:	4620      	mov	r0, r4
    ffa0:	1a5b      	subs	r3, r3, r1
    ffa2:	f01a fd71 	bl	2aa88 <nvs_flash_cmp_const>
		if (rc < 0) {
    ffa6:	1e05      	subs	r5, r0, #0
    ffa8:	f6ff af51 	blt.w	fe4e <nvs_mount+0x136>
		if (!rc) {
    ffac:	d008      	beq.n	ffc0 <nvs_mount+0x2a8>
		fs->data_wra += fs->flash_parameters->write_block_size;
    ffae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    ffb0:	68a3      	ldr	r3, [r4, #8]
    ffb2:	6812      	ldr	r2, [r2, #0]
    ffb4:	4413      	add	r3, r2
    ffb6:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    ffb8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    ffbc:	428b      	cmp	r3, r1
    ffbe:	d8ed      	bhi.n	ff9c <nvs_mount+0x284>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ffc0:	6861      	ldr	r1, [r4, #4]
    ffc2:	89a3      	ldrh	r3, [r4, #12]
    ffc4:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    ffc8:	429a      	cmp	r2, r3
    ffca:	d19e      	bne.n	ff0a <nvs_mount+0x1f2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    ffcc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 100a4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ffd0:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    ffd2:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ffd6:	429a      	cmp	r2, r3
    ffd8:	d097      	beq.n	ff0a <nvs_mount+0x1f2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    ffda:	4620      	mov	r0, r4
    ffdc:	f7ff fd0e 	bl	f9fc <nvs_flash_erase_sector>
		if (rc) {
    ffe0:	4605      	mov	r5, r0
    ffe2:	2800      	cmp	r0, #0
    ffe4:	f47f af33 	bne.w	fe4e <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ffe8:	6863      	ldr	r3, [r4, #4]
    ffea:	ea03 0308 	and.w	r3, r3, r8
    ffee:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    fff0:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fff2:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    fff4:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fff8:	429a      	cmp	r2, r3
    fffa:	d032      	beq.n	10062 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x62>
    fffc:	4638      	mov	r0, r7
    fffe:	f015 fcfd 	bl	259fc <z_impl_k_mutex_unlock>
	fs->ready = true;
   10002:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   10004:	2500      	movs	r5, #0
	fs->ready = true;
   10006:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   10008:	89a3      	ldrh	r3, [r4, #12]
   1000a:	4628      	mov	r0, r5
   1000c:	9304      	str	r3, [sp, #16]
   1000e:	89e3      	ldrh	r3, [r4, #14]
   10010:	2203      	movs	r2, #3
   10012:	9303      	str	r3, [sp, #12]
   10014:	4b24      	ldr	r3, [pc, #144]	; (100a8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa8>)
   10016:	e9cd 5500 	strd	r5, r5, [sp]
   1001a:	9302      	str	r3, [sp, #8]
   1001c:	4923      	ldr	r1, [pc, #140]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
   1001e:	462b      	mov	r3, r5
   10020:	f01a fd57 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
   10024:	6863      	ldr	r3, [r4, #4]
   10026:	4628      	mov	r0, r5
   10028:	b29a      	uxth	r2, r3
   1002a:	0c1b      	lsrs	r3, r3, #16
   1002c:	9303      	str	r3, [sp, #12]
   1002e:	4b20      	ldr	r3, [pc, #128]	; (100b0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb0>)
   10030:	9204      	str	r2, [sp, #16]
   10032:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10036:	2203      	movs	r2, #3
   10038:	462b      	mov	r3, r5
   1003a:	491c      	ldr	r1, [pc, #112]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
   1003c:	9500      	str	r5, [sp, #0]
   1003e:	f01a fd48 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
   10042:	68a3      	ldr	r3, [r4, #8]
   10044:	4628      	mov	r0, r5
   10046:	b29a      	uxth	r2, r3
   10048:	0c1b      	lsrs	r3, r3, #16
   1004a:	9303      	str	r3, [sp, #12]
   1004c:	4b19      	ldr	r3, [pc, #100]	; (100b4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb4>)
   1004e:	9204      	str	r2, [sp, #16]
   10050:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10054:	2203      	movs	r2, #3
   10056:	462b      	mov	r3, r5
   10058:	4914      	ldr	r1, [pc, #80]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
   1005a:	9500      	str	r5, [sp, #0]
   1005c:	f01a fd39 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
	return 0;
   10060:	e685      	b.n	fd6e <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
   10062:	4620      	mov	r0, r4
   10064:	f7ff fd46 	bl	faf4 <nvs_add_gc_done_ate>
   10068:	4605      	mov	r5, r0
   1006a:	4638      	mov	r0, r7
   1006c:	f015 fcc6 	bl	259fc <z_impl_k_mutex_unlock>
	if (rc) {
   10070:	2d00      	cmp	r5, #0
   10072:	d0c6      	beq.n	10002 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2>
   10074:	e67b      	b.n	fd6e <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
   10076:	4b10      	ldr	r3, [pc, #64]	; (100b8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb8>)
   10078:	2203      	movs	r2, #3
   1007a:	4628      	mov	r0, r5
   1007c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10080:	490a      	ldr	r1, [pc, #40]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
   10082:	462b      	mov	r3, r5
   10084:	9500      	str	r5, [sp, #0]
   10086:	f01a fd24 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1008a:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   1008c:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1008e:	0c1b      	lsrs	r3, r3, #16
   10090:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   10092:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
   10094:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
   10096:	f01a fcb7 	bl	2aa08 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   1009a:	4620      	mov	r0, r4
   1009c:	9906      	ldr	r1, [sp, #24]
   1009e:	f7ff fcad 	bl	f9fc <nvs_flash_erase_sector>
   100a2:	e731      	b.n	ff08 <nvs_mount+0x1f0>
   100a4:	ffff0000 	.word	0xffff0000
   100a8:	00035405 	.word	0x00035405
   100ac:	000330b8 	.word	0x000330b8
   100b0:	0003541c 	.word	0x0003541c
   100b4:	0003542e 	.word	0x0003542e
   100b8:	00035466 	.word	0x00035466

000100bc <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   100bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100c0:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   100c2:	7c03      	ldrb	r3, [r0, #16]
{
   100c4:	4604      	mov	r4, r0
   100c6:	4689      	mov	r9, r1
   100c8:	4690      	mov	r8, r2
   100ca:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
   100cc:	b973      	cbnz	r3, 100ec <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
   100ce:	4a66      	ldr	r2, [pc, #408]	; (10268 <nvs_write+0x1ac>)
   100d0:	4618      	mov	r0, r3
   100d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   100d6:	4965      	ldr	r1, [pc, #404]	; (1026c <nvs_write+0x1b0>)
   100d8:	2201      	movs	r2, #1
   100da:	9300      	str	r3, [sp, #0]
   100dc:	f01a fcf9 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   100e0:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   100e4:	4630      	mov	r0, r6
   100e6:	b00d      	add	sp, #52	; 0x34
   100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   100ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   100ee:	2108      	movs	r1, #8
   100f0:	4610      	mov	r0, r2
   100f2:	f01a fcfe 	bl	2aaf2 <nvs_al_size.isra.0>
   100f6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   100f8:	4629      	mov	r1, r5
   100fa:	4610      	mov	r0, r2
   100fc:	f01a fcf9 	bl	2aaf2 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   10100:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
   10102:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   10104:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   10108:	42ab      	cmp	r3, r5
   1010a:	f0c0 80a9 	bcc.w	10260 <nvs_write+0x1a4>
   1010e:	b11d      	cbz	r5, 10118 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   10110:	f1b8 0f00 	cmp.w	r8, #0
   10114:	f000 80a4 	beq.w	10260 <nvs_write+0x1a4>
	wlk_addr = fs->ate_wra;
   10118:	6863      	ldr	r3, [r4, #4]
   1011a:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1011c:	4620      	mov	r0, r4
   1011e:	aa08      	add	r2, sp, #32
   10120:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
   10122:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10126:	f01a fd26 	bl	2ab76 <nvs_prev_ate>
		if (rc) {
   1012a:	4606      	mov	r6, r0
   1012c:	2800      	cmp	r0, #0
   1012e:	d1d9      	bne.n	100e4 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10130:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10134:	454b      	cmp	r3, r9
   10136:	d005      	beq.n	10144 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
   10138:	6862      	ldr	r2, [r4, #4]
   1013a:	9b07      	ldr	r3, [sp, #28]
   1013c:	429a      	cmp	r2, r3
   1013e:	d1ed      	bne.n	1011c <nvs_write+0x60>
		if (len == 0) {
   10140:	b9e5      	cbnz	r5, 1017c <nvs_write+0xc0>
   10142:	e7cf      	b.n	100e4 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10144:	4620      	mov	r0, r4
   10146:	a908      	add	r1, sp, #32
   10148:	f01a fcdd 	bl	2ab06 <nvs_ate_valid>
   1014c:	2800      	cmp	r0, #0
   1014e:	d0f3      	beq.n	10138 <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
   10150:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
   10154:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
   10158:	b175      	cbz	r5, 10178 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
   1015a:	42ab      	cmp	r3, r5
   1015c:	d10e      	bne.n	1017c <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
   1015e:	ea4f 411b 	mov.w	r1, fp, lsr #16
   10162:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   10164:	4401      	add	r1, r0
   10166:	462b      	mov	r3, r5
   10168:	4642      	mov	r2, r8
   1016a:	4620      	mov	r0, r4
   1016c:	f01a fc59 	bl	2aa22 <nvs_flash_block_cmp>
			if (rc <= 0) {
   10170:	2800      	cmp	r0, #0
   10172:	dc03      	bgt.n	1017c <nvs_write+0xc0>
   10174:	4606      	mov	r6, r0
   10176:	e7b5      	b.n	100e4 <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
   10178:	2b00      	cmp	r3, #0
   1017a:	d0b3      	beq.n	100e4 <nvs_write+0x28>
	if (data_size) {
   1017c:	2f00      	cmp	r7, #0
   1017e:	d13e      	bne.n	101fe <nvs_write+0x142>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   10180:	f104 0314 	add.w	r3, r4, #20
   10184:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   10186:	f04f 32ff 	mov.w	r2, #4294967295
   1018a:	f04f 33ff 	mov.w	r3, #4294967295
   1018e:	f104 0014 	add.w	r0, r4, #20
   10192:	f015 fbb9 	bl	25908 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   10196:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 10270 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
   1019a:	89e3      	ldrh	r3, [r4, #14]
   1019c:	429e      	cmp	r6, r3
   1019e:	d05c      	beq.n	1025a <nvs_write+0x19e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   101a0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   101a4:	18f9      	adds	r1, r7, r3
   101a6:	428a      	cmp	r2, r1
   101a8:	d32c      	bcc.n	10204 <nvs_write+0x148>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   101aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
   101ae:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   101b0:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
   101b2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
   101b6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
   101ba:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
   101be:	f01a fc5a 	bl	2aa76 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   101c2:	462b      	mov	r3, r5
   101c4:	4642      	mov	r2, r8
   101c6:	68a1      	ldr	r1, [r4, #8]
   101c8:	4620      	mov	r0, r4
   101ca:	f01a fd1e 	bl	2ac0a <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   101ce:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   101d0:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   101d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   101d4:	f01a fc8d 	bl	2aaf2 <nvs_al_size.isra.0>
   101d8:	68a2      	ldr	r2, [r4, #8]
   101da:	4402      	add	r2, r0
   101dc:	60a2      	str	r2, [r4, #8]
	if (rc) {
   101de:	f1ba 0f00 	cmp.w	sl, #0
   101e2:	d107      	bne.n	101f4 <nvs_write+0x138>
	rc = nvs_flash_ate_wrt(fs, &entry);
   101e4:	4620      	mov	r0, r4
   101e6:	a90a      	add	r1, sp, #40	; 0x28
   101e8:	f01a fd49 	bl	2ac7e <nvs_flash_ate_wrt>
	rc = len;
   101ec:	2800      	cmp	r0, #0
   101ee:	bf14      	ite	ne
   101f0:	4682      	movne	sl, r0
   101f2:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   101f4:	9805      	ldr	r0, [sp, #20]
   101f6:	f015 fc01 	bl	259fc <z_impl_k_mutex_unlock>
	return rc;
   101fa:	4656      	mov	r6, sl
   101fc:	e772      	b.n	100e4 <nvs_write+0x28>
		required_space = data_size + ate_size;
   101fe:	4457      	add	r7, sl
   10200:	b2bf      	uxth	r7, r7
   10202:	e7bd      	b.n	10180 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10204:	2108      	movs	r1, #8
   10206:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10208:	f01a fc73 	bl	2aaf2 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   1020c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10210:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
   10214:	2300      	movs	r3, #0
   10216:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1021a:	1813      	adds	r3, r2, r0
   1021c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
   10220:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   10222:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   10226:	441a      	add	r2, r3
   10228:	1a10      	subs	r0, r2, r0
   1022a:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1022c:	a80a      	add	r0, sp, #40	; 0x28
   1022e:	f01a fc22 	bl	2aa76 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   10232:	a90a      	add	r1, sp, #40	; 0x28
   10234:	4620      	mov	r0, r4
   10236:	f01a fd22 	bl	2ac7e <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1023a:	4620      	mov	r0, r4
   1023c:	1d21      	adds	r1, r4, #4
   1023e:	f01a fbe3 	bl	2aa08 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   10242:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
   10244:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   10246:	ea03 030b 	and.w	r3, r3, fp
   1024a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1024c:	f7ff fc7e 	bl	fb4c <nvs_gc>
		if (rc) {
   10250:	4682      	mov	sl, r0
   10252:	2800      	cmp	r0, #0
   10254:	d1ce      	bne.n	101f4 <nvs_write+0x138>
		gc_count++;
   10256:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   10258:	e79f      	b.n	1019a <nvs_write+0xde>
			rc = -ENOSPC;
   1025a:	f06f 0a1b 	mvn.w	sl, #27
   1025e:	e7c9      	b.n	101f4 <nvs_write+0x138>
		return -EINVAL;
   10260:	f06f 0615 	mvn.w	r6, #21
   10264:	e73e      	b.n	100e4 <nvs_write+0x28>
   10266:	bf00      	nop
   10268:	00035363 	.word	0x00035363
   1026c:	000330b8 	.word	0x000330b8
   10270:	ffff0000 	.word	0xffff0000

00010274 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   10274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10278:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1027a:	7c03      	ldrb	r3, [r0, #16]
{
   1027c:	b088      	sub	sp, #32
   1027e:	4604      	mov	r4, r0
   10280:	460f      	mov	r7, r1
   10282:	4690      	mov	r8, r2
   10284:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
   10288:	b96b      	cbnz	r3, 102a6 <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
   1028a:	4a2f      	ldr	r2, [pc, #188]	; (10348 <nvs_read_hist+0xd4>)
   1028c:	4618      	mov	r0, r3
   1028e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10292:	492e      	ldr	r1, [pc, #184]	; (1034c <nvs_read_hist+0xd8>)
   10294:	2201      	movs	r2, #1
   10296:	9300      	str	r3, [sp, #0]
   10298:	f01a fc1b 	bl	2aad2 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   1029c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   102a0:	b008      	add	sp, #32
   102a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   102a6:	2108      	movs	r1, #8
   102a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   102aa:	f01a fc22 	bl	2aaf2 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   102ae:	89a3      	ldrh	r3, [r4, #12]
   102b0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   102b4:	42b3      	cmp	r3, r6
   102b6:	d343      	bcc.n	10340 <nvs_read_hist+0xcc>
	cnt_his = 0U;
   102b8:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
   102ba:	f8d4 a004 	ldr.w	sl, [r4, #4]
   102be:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   102c2:	454d      	cmp	r5, r9
   102c4:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   102c6:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   102ca:	d909      	bls.n	102e0 <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   102cc:	6863      	ldr	r3, [r4, #4]
   102ce:	4553      	cmp	r3, sl
   102d0:	d11e      	bne.n	10310 <nvs_read_hist+0x9c>
   102d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   102d6:	42bb      	cmp	r3, r7
   102d8:	d01a      	beq.n	10310 <nvs_read_hist+0x9c>
		return -ENOENT;
   102da:	f06f 0001 	mvn.w	r0, #1
   102de:	e7df      	b.n	102a0 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   102e0:	4620      	mov	r0, r4
   102e2:	aa06      	add	r2, sp, #24
   102e4:	a905      	add	r1, sp, #20
   102e6:	f01a fc46 	bl	2ab76 <nvs_prev_ate>
		if (rc) {
   102ea:	2800      	cmp	r0, #0
   102ec:	d1d8      	bne.n	102a0 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   102ee:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   102f2:	42bb      	cmp	r3, r7
   102f4:	d106      	bne.n	10304 <nvs_read_hist+0x90>
   102f6:	4620      	mov	r0, r4
   102f8:	a906      	add	r1, sp, #24
   102fa:	f01a fc04 	bl	2ab06 <nvs_ate_valid>
   102fe:	b108      	cbz	r0, 10304 <nvs_read_hist+0x90>
			cnt_his++;
   10300:	3501      	adds	r5, #1
   10302:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   10304:	6862      	ldr	r2, [r4, #4]
   10306:	9b05      	ldr	r3, [sp, #20]
   10308:	429a      	cmp	r2, r3
   1030a:	d1da      	bne.n	102c2 <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
   1030c:	4651      	mov	r1, sl
   1030e:	e7e0      	b.n	102d2 <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10310:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   10314:	2b00      	cmp	r3, #0
   10316:	d0e0      	beq.n	102da <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10318:	45a9      	cmp	r9, r5
   1031a:	d8de      	bhi.n	102da <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
   1031c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
   10320:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   10322:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   10324:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   10328:	bf28      	it	cs
   1032a:	4633      	movcs	r3, r6
   1032c:	4401      	add	r1, r0
   1032e:	4642      	mov	r2, r8
   10330:	4620      	mov	r0, r4
   10332:	f01a fb5b 	bl	2a9ec <nvs_flash_rd>
	if (rc) {
   10336:	2800      	cmp	r0, #0
   10338:	d1b2      	bne.n	102a0 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   1033a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   1033e:	e7af      	b.n	102a0 <nvs_read_hist+0x2c>
		return -EINVAL;
   10340:	f06f 0015 	mvn.w	r0, #21
   10344:	e7ac      	b.n	102a0 <nvs_read_hist+0x2c>
   10346:	bf00      	nop
   10348:	00035363 	.word	0x00035363
   1034c:	000330b8 	.word	0x000330b8

00010350 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
   10350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10352:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
   10354:	b960      	cbnz	r0, 10370 <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
   10356:	4a11      	ldr	r2, [pc, #68]	; (1039c <ipc_service_open_instance+0x4c>)
   10358:	9000      	str	r0, [sp, #0]
   1035a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1035e:	4910      	ldr	r1, [pc, #64]	; (103a0 <ipc_service_open_instance+0x50>)
   10360:	2201      	movs	r2, #1
   10362:	f01a fca4 	bl	2acae <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   10366:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
   1036a:	b005      	add	sp, #20
   1036c:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
   10370:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
   10372:	b95b      	cbnz	r3, 1038c <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
   10374:	4a0b      	ldr	r2, [pc, #44]	; (103a4 <ipc_service_open_instance+0x54>)
   10376:	4618      	mov	r0, r3
   10378:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1037c:	4908      	ldr	r1, [pc, #32]	; (103a0 <ipc_service_open_instance+0x50>)
   1037e:	2201      	movs	r2, #1
   10380:	9300      	str	r3, [sp, #0]
   10382:	f01a fc94 	bl	2acae <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   10386:	f06f 0004 	mvn.w	r0, #4
   1038a:	e7ee      	b.n	1036a <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
   1038c:	681b      	ldr	r3, [r3, #0]
   1038e:	b11b      	cbz	r3, 10398 <ipc_service_open_instance+0x48>
}
   10390:	b005      	add	sp, #20
   10392:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
   10396:	4718      	bx	r3
		return 0;
   10398:	4618      	mov	r0, r3
   1039a:	e7e6      	b.n	1036a <ipc_service_open_instance+0x1a>
   1039c:	000354c9 	.word	0x000354c9
   103a0:	000330c0 	.word	0x000330c0
   103a4:	000354da 	.word	0x000354da

000103a8 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
   103a8:	b530      	push	{r4, r5, lr}
   103aa:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
   103ac:	b108      	cbz	r0, 103b2 <ipc_service_register_endpoint+0xa>
   103ae:	b101      	cbz	r1, 103b2 <ipc_service_register_endpoint+0xa>
   103b0:	b96a      	cbnz	r2, 103ce <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
   103b2:	4b13      	ldr	r3, [pc, #76]	; (10400 <ipc_service_register_endpoint+0x58>)
   103b4:	2201      	movs	r2, #1
   103b6:	9302      	str	r3, [sp, #8]
   103b8:	2300      	movs	r3, #0
   103ba:	4912      	ldr	r1, [pc, #72]	; (10404 <ipc_service_register_endpoint+0x5c>)
   103bc:	4618      	mov	r0, r3
   103be:	e9cd 3300 	strd	r3, r3, [sp]
   103c2:	f01a fc74 	bl	2acae <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   103c6:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
   103ca:	b005      	add	sp, #20
   103cc:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
   103ce:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
   103d0:	b10c      	cbz	r4, 103d6 <ipc_service_register_endpoint+0x2e>
   103d2:	68e5      	ldr	r5, [r4, #12]
   103d4:	b965      	cbnz	r5, 103f0 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
   103d6:	4b0c      	ldr	r3, [pc, #48]	; (10408 <ipc_service_register_endpoint+0x60>)
   103d8:	2201      	movs	r2, #1
   103da:	9302      	str	r3, [sp, #8]
   103dc:	2300      	movs	r3, #0
   103de:	4909      	ldr	r1, [pc, #36]	; (10404 <ipc_service_register_endpoint+0x5c>)
   103e0:	4618      	mov	r0, r3
   103e2:	e9cd 3300 	strd	r3, r3, [sp]
   103e6:	f01a fc62 	bl	2acae <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   103ea:	f06f 0004 	mvn.w	r0, #4
   103ee:	e7ec      	b.n	103ca <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
   103f0:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
   103f4:	68e3      	ldr	r3, [r4, #12]
}
   103f6:	b005      	add	sp, #20
   103f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
   103fc:	4718      	bx	r3
   103fe:	bf00      	nop
   10400:	000354f8 	.word	0x000354f8
   10404:	000330c0 	.word	0x000330c0
   10408:	000354da 	.word	0x000354da

0001040c <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
   1040c:	b530      	push	{r4, r5, lr}
   1040e:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
   10410:	4604      	mov	r4, r0
{
   10412:	b085      	sub	sp, #20
	if (!ept) {
   10414:	b960      	cbnz	r0, 10430 <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
   10416:	4b19      	ldr	r3, [pc, #100]	; (1047c <ipc_service_send+0x70>)
   10418:	9000      	str	r0, [sp, #0]
   1041a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1041e:	2201      	movs	r2, #1
   10420:	4603      	mov	r3, r0
   10422:	4917      	ldr	r1, [pc, #92]	; (10480 <ipc_service_send+0x74>)
   10424:	f01a fc43 	bl	2acae <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   10428:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
   1042c:	b005      	add	sp, #20
   1042e:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
   10430:	6800      	ldr	r0, [r0, #0]
   10432:	b958      	cbnz	r0, 1044c <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
   10434:	4b13      	ldr	r3, [pc, #76]	; (10484 <ipc_service_send+0x78>)
   10436:	9000      	str	r0, [sp, #0]
   10438:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1043c:	2201      	movs	r2, #1
   1043e:	4603      	mov	r3, r0
   10440:	490f      	ldr	r1, [pc, #60]	; (10480 <ipc_service_send+0x74>)
   10442:	f01a fc34 	bl	2acae <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
   10446:	f06f 0001 	mvn.w	r0, #1
   1044a:	e7ef      	b.n	1042c <ipc_service_send+0x20>
	backend = ept->instance->api;
   1044c:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
   1044e:	b10a      	cbz	r2, 10454 <ipc_service_send+0x48>
   10450:	6895      	ldr	r5, [r2, #8]
   10452:	b965      	cbnz	r5, 1046e <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
   10454:	4b0c      	ldr	r3, [pc, #48]	; (10488 <ipc_service_send+0x7c>)
   10456:	2201      	movs	r2, #1
   10458:	9302      	str	r3, [sp, #8]
   1045a:	2300      	movs	r3, #0
   1045c:	4908      	ldr	r1, [pc, #32]	; (10480 <ipc_service_send+0x74>)
   1045e:	4618      	mov	r0, r3
   10460:	e9cd 3300 	strd	r3, r3, [sp]
   10464:	f01a fc23 	bl	2acae <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   10468:	f06f 0004 	mvn.w	r0, #4
   1046c:	e7de      	b.n	1042c <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
   1046e:	460a      	mov	r2, r1
   10470:	46ac      	mov	ip, r5
   10472:	6861      	ldr	r1, [r4, #4]
}
   10474:	b005      	add	sp, #20
   10476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
   1047a:	4760      	bx	ip
   1047c:	00035524 	.word	0x00035524
   10480:	000330c0 	.word	0x000330c0
   10484:	00035535 	.word	0x00035535
   10488:	000354da 	.word	0x000354da

0001048c <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
   1048c:	2000      	movs	r0, #0
   1048e:	4b01      	ldr	r3, [pc, #4]	; (10494 <shared_memory_prepare+0x8>)
   10490:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
   10492:	4770      	bx	lr
   10494:	20070000 	.word	0x20070000

00010498 <advertise_ept>:
{
   10498:	b530      	push	{r4, r5, lr}
   1049a:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   1049c:	490e      	ldr	r1, [pc, #56]	; (104d8 <advertise_ept+0x40>)
{
   1049e:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   104a0:	9102      	str	r1, [sp, #8]
   104a2:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
   104a6:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   104a8:	e9cd 3100 	strd	r3, r1, [sp]
   104ac:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   104b0:	f04f 33ff 	mov.w	r3, #4294967295
   104b4:	4620      	mov	r0, r4
   104b6:	f014 fcf1 	bl	24e9c <rpmsg_create_ept>
	if (err != 0) {
   104ba:	b950      	cbnz	r0, 104d2 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
   104bc:	2301      	movs	r3, #1
   104be:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
   104c2:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
   104c6:	b123      	cbz	r3, 104d2 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
   104c8:	4620      	mov	r0, r4
}
   104ca:	b005      	add	sp, #20
   104cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
   104d0:	4718      	bx	r3
}
   104d2:	b005      	add	sp, #20
   104d4:	bd30      	pop	{r4, r5, pc}
   104d6:	bf00      	nop
   104d8:	0002adbf 	.word	0x0002adbf

000104dc <get_ept>:
{
   104dc:	b538      	push	{r3, r4, r5, lr}
   104de:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   104e0:	4611      	mov	r1, r2
{
   104e2:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   104e4:	f01a fc6d 	bl	2adc2 <get_ept_slot_with_name>
	if (ept != NULL) {
   104e8:	4603      	mov	r3, r0
   104ea:	b938      	cbnz	r0, 104fc <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
   104ec:	4628      	mov	r0, r5
   104ee:	4904      	ldr	r1, [pc, #16]	; (10500 <get_ept+0x24>)
   104f0:	f01a fc67 	bl	2adc2 <get_ept_slot_with_name>
   104f4:	4603      	mov	r3, r0
	if (ept != NULL) {
   104f6:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
   104f8:	6023      	str	r3, [r4, #0]
}
   104fa:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   104fc:	2001      	movs	r0, #1
   104fe:	e7fb      	b.n	104f8 <get_ept+0x1c>
   10500:	000365fc 	.word	0x000365fc

00010504 <open>:
{
   10504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10508:	2301      	movs	r3, #1
   1050a:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
   1050c:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   1050e:	6846      	ldr	r6, [r0, #4]
{
   10510:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
   10512:	f505 7763 	add.w	r7, r5, #908	; 0x38c
   10516:	e8d7 2fef 	ldaex	r2, [r7]
   1051a:	2a00      	cmp	r2, #0
   1051c:	d103      	bne.n	10526 <open+0x22>
   1051e:	e8c7 3fe1 	stlex	r1, r3, [r7]
   10522:	2900      	cmp	r1, #0
   10524:	d1f7      	bne.n	10516 <open+0x12>
   10526:	f040 80b8 	bne.w	1069a <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   1052a:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   1052c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
   1052e:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10530:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   10532:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   10536:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
   1053a:	bf26      	itte	cs
   1053c:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
   10540:	fab3 f383 	clzcs	r3, r3
		return 0;
   10544:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
   10546:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
   1054a:	bf28      	it	cs
   1054c:	f1c3 0320 	rsbcs	r3, r3, #32
   10550:	3b01      	subs	r3, #1
	if (num_desc == 0) {
   10552:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
   10554:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
   10558:	f000 8099 	beq.w	1068e <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
   1055c:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   1055e:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   10560:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
   10562:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   10564:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   10568:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   1056a:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
   1056c:	3209      	adds	r2, #9
   1056e:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
   10572:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
   10574:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
   10578:	440a      	add	r2, r1
	return (buf_size * num);
   1057a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1057c:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   10580:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   10582:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   10586:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
   1058a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1058c:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   1058e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   10592:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   10596:	3303      	adds	r3, #3
   10598:	4413      	add	r3, r2
   1059a:	f023 0303 	bic.w	r3, r3, #3
   1059e:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
   105a2:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
   105a4:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
   105a8:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
   105ac:	4b3c      	ldr	r3, [pc, #240]	; (106a0 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
   105ae:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
   105b0:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
   105b4:	6831      	ldr	r1, [r6, #0]
   105b6:	f000 fa1d 	bl	109f4 <ipc_static_vrings_init>
	if (err != 0) {
   105ba:	4604      	mov	r4, r0
   105bc:	bb30      	cbnz	r0, 1060c <open+0x108>
	const struct backend_config_t *conf = instance->config;
   105be:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
   105c2:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   105c6:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
   105ca:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   105ce:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
   105d0:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   105d2:	bf08      	it	eq
   105d4:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
   105d6:	f020 fd9b 	bl	31110 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
   105da:	2300      	movs	r3, #0
   105dc:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   105e0:	4930      	ldr	r1, [pc, #192]	; (106a4 <open+0x1a0>)
   105e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   105e6:	eb01 2180 	add.w	r1, r1, r0, lsl #10
   105ea:	9300      	str	r3, [sp, #0]
   105ec:	4658      	mov	r0, fp
   105ee:	4623      	mov	r3, r4
   105f0:	f015 fbf8 	bl	25de4 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
   105f4:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
   105f8:	492b      	ldr	r1, [pc, #172]	; (106a8 <open+0x1a4>)
   105fa:	f020 fd4b 	bl	31094 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
   105fe:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
   10602:	6883      	ldr	r3, [r0, #8]
   10604:	685c      	ldr	r4, [r3, #4]
   10606:	b91c      	cbnz	r4, 10610 <open+0x10c>
		return -ENOSYS;
   10608:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
   1060c:	2100      	movs	r1, #0
   1060e:	e037      	b.n	10680 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   10610:	464b      	mov	r3, r9
   10612:	4a26      	ldr	r2, [pc, #152]	; (106ac <open+0x1a8>)
   10614:	f8da 1018 	ldr.w	r1, [sl, #24]
   10618:	47a0      	blx	r4
	if (err != 0) {
   1061a:	4604      	mov	r4, r0
   1061c:	2800      	cmp	r0, #0
   1061e:	d1f5      	bne.n	1060c <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
   10620:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
   10624:	6883      	ldr	r3, [r0, #8]
   10626:	691b      	ldr	r3, [r3, #16]
   10628:	2b00      	cmp	r3, #0
   1062a:	d0ed      	beq.n	10608 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
   1062c:	2201      	movs	r2, #1
   1062e:	f8da 1018 	ldr.w	r1, [sl, #24]
   10632:	4798      	blx	r3
	if (err != 0) {
   10634:	4604      	mov	r4, r0
   10636:	2800      	cmp	r0, #0
   10638:	d1e8      	bne.n	1060c <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
   1063a:	4b1d      	ldr	r3, [pc, #116]	; (106b0 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   1063c:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
   1063e:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
   10642:	4b1c      	ldr	r3, [pc, #112]	; (106b4 <open+0x1b0>)
   10644:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   10648:	4b1b      	ldr	r3, [pc, #108]	; (106b8 <open+0x1b4>)
   1064a:	9303      	str	r3, [sp, #12]
   1064c:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
   10650:	9302      	str	r3, [sp, #8]
   10652:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   10656:	e9cd 8300 	strd	r8, r3, [sp]
   1065a:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
   1065e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   10660:	f8d5 1388 	ldr.w	r1, [r5, #904]	; 0x388
   10664:	f000 f98e 	bl	10984 <ipc_rpmsg_init>
	if (err != 0) {
   10668:	4604      	mov	r4, r0
   1066a:	2800      	cmp	r0, #0
   1066c:	d1ce      	bne.n	1060c <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   1066e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   10672:	f014 fcc1 	bl	24ff8 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
   10676:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   10678:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	if (data->tx_buffer_size < 0) {
   1067c:	db0a      	blt.n	10694 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
   1067e:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
   10680:	4638      	mov	r0, r7
   10682:	f01a fbd3 	bl	2ae2c <atomic_set.isra.0>
}
   10686:	4620      	mov	r0, r4
   10688:	b005      	add	sp, #20
   1068a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   1068e:	f06f 040b 	mvn.w	r4, #11
   10692:	e7bb      	b.n	1060c <open+0x108>
		err = -EINVAL;
   10694:	f06f 0415 	mvn.w	r4, #21
   10698:	e7b8      	b.n	1060c <open+0x108>
		return -EALREADY;
   1069a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1069e:	e7f2      	b.n	10686 <open+0x182>
   106a0:	0002ae15 	.word	0x0002ae15
   106a4:	20052ba8 	.word	0x20052ba8
   106a8:	0002adfb 	.word	0x0002adfb
   106ac:	0002adef 	.word	0x0002adef
   106b0:	00010781 	.word	0x00010781
   106b4:	0002aecd 	.word	0x0002aecd
   106b8:	0002ae5d 	.word	0x0002ae5d

000106bc <close>:
{
   106bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   106c0:	4606      	mov	r6, r0
   106c2:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
   106c6:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   106c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
   106cc:	f505 7763 	add.w	r7, r5, #908	; 0x38c
   106d0:	e8d7 3fef 	ldaex	r3, [r7]
   106d4:	2b02      	cmp	r3, #2
   106d6:	d103      	bne.n	106e0 <close+0x24>
   106d8:	e8c7 9fe2 	stlex	r2, r9, [r7]
   106dc:	2a00      	cmp	r2, #0
   106de:	d1f7      	bne.n	106d0 <close+0x14>
   106e0:	d149      	bne.n	10776 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
   106e2:	4826      	ldr	r0, [pc, #152]	; (1077c <close+0xc0>)
   106e4:	f105 0140 	add.w	r1, r5, #64	; 0x40
   106e8:	f7f8 fe85 	bl	93f6 <strcmp>
   106ec:	b120      	cbz	r0, 106f8 <close+0x3c>
		return -EBUSY;
   106ee:	f06f 040f 	mvn.w	r4, #15
}
   106f2:	4620      	mov	r0, r4
   106f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
   106f8:	4820      	ldr	r0, [pc, #128]	; (1077c <close+0xc0>)
   106fa:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
   106fe:	f7f8 fe7a 	bl	93f6 <strcmp>
   10702:	2800      	cmp	r0, #0
   10704:	d1f3      	bne.n	106ee <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
   10706:	4628      	mov	r0, r5
   10708:	f8d5 1388 	ldr.w	r1, [r5, #904]	; 0x388
   1070c:	f01a fc11 	bl	2af32 <ipc_rpmsg_deinit>
	if (err != 0) {
   10710:	4604      	mov	r4, r0
   10712:	bb70      	cbnz	r0, 10772 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
   10714:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
   10716:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
   10718:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
   1071a:	6883      	ldr	r3, [r0, #8]
   1071c:	691b      	ldr	r3, [r3, #16]
   1071e:	b333      	cbz	r3, 1076e <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
   10720:	4622      	mov	r2, r4
   10722:	6989      	ldr	r1, [r1, #24]
   10724:	4798      	blx	r3
	if (err != 0) {
   10726:	4604      	mov	r4, r0
   10728:	bb18      	cbnz	r0, 10772 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
   1072a:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
   1072e:	4649      	mov	r1, r9
   10730:	4630      	mov	r0, r6
   10732:	f015 fb8f 	bl	25e54 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
   10736:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
   10738:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
   1073c:	f001 f9ba 	bl	11ab4 <z_impl_k_thread_abort>
   10740:	4630      	mov	r0, r6
   10742:	f8d8 1000 	ldr.w	r1, [r8]
   10746:	f01a fc31 	bl	2afac <ipc_static_vrings_deinit>
	if (err != 0) {
   1074a:	4604      	mov	r4, r0
   1074c:	b988      	cbnz	r0, 10772 <close+0xb6>
   1074e:	4601      	mov	r1, r0
   10750:	22e8      	movs	r2, #232	; 0xe8
   10752:	4630      	mov	r0, r6
   10754:	f021 f8a5 	bl	318a2 <memset>
   10758:	4621      	mov	r1, r4
   1075a:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1075e:	4628      	mov	r0, r5
   10760:	f021 f89f 	bl	318a2 <memset>
	atomic_set(&data->state, STATE_READY);
   10764:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
   10766:	4638      	mov	r0, r7
   10768:	f01a fb60 	bl	2ae2c <atomic_set.isra.0>
	return err;
   1076c:	e7c1      	b.n	106f2 <close+0x36>
		return -ENOSYS;
   1076e:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
   10772:	2102      	movs	r1, #2
   10774:	e7f7      	b.n	10766 <close+0xaa>
		return -EALREADY;
   10776:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1077a:	e7ba      	b.n	106f2 <close+0x36>
   1077c:	000365fc 	.word	0x000365fc

00010780 <bound_cb>:
{
   10780:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
   10782:	4604      	mov	r4, r0
   10784:	b140      	cbz	r0, 10798 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   10786:	2300      	movs	r3, #0
   10788:	2201      	movs	r2, #1
   1078a:	e9cd 3200 	strd	r3, r2, [sp]
   1078e:	4b07      	ldr	r3, [pc, #28]	; (107ac <bound_cb+0x2c>)
   10790:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   10794:	f014 fb36 	bl	24e04 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
   10798:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1079a:	681b      	ldr	r3, [r3, #0]
   1079c:	b123      	cbz	r3, 107a8 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
   1079e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
   107a0:	b002      	add	sp, #8
   107a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
   107a6:	4718      	bx	r3
}
   107a8:	b002      	add	sp, #8
   107aa:	bd10      	pop	{r4, pc}
   107ac:	000365fc 	.word	0x000365fc

000107b0 <send>:
{
   107b0:	b513      	push	{r0, r1, r4, lr}
   107b2:	4604      	mov	r4, r0
   107b4:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   107b6:	6921      	ldr	r1, [r4, #16]
   107b8:	f501 7163 	add.w	r1, r1, #908	; 0x38c
   107bc:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   107c0:	2902      	cmp	r1, #2
   107c2:	d110      	bne.n	107e6 <send+0x36>
	if (len == 0) {
   107c4:	b193      	cbz	r3, 107ec <send+0x3c>
	if (!rpmsg_ept) {
   107c6:	b1a0      	cbz	r0, 107f2 <send+0x42>
   107c8:	2101      	movs	r1, #1
   107ca:	e9cd 3100 	strd	r3, r1, [sp]
   107ce:	4613      	mov	r3, r2
   107d0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   107d4:	f014 fb16 	bl	24e04 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
   107d8:	4b07      	ldr	r3, [pc, #28]	; (107f8 <send+0x48>)
		return -ENOMEM;
   107da:	4298      	cmp	r0, r3
   107dc:	bf08      	it	eq
   107de:	f06f 000b 	mvneq.w	r0, #11
}
   107e2:	b002      	add	sp, #8
   107e4:	bd10      	pop	{r4, pc}
		return -EBUSY;
   107e6:	f06f 000f 	mvn.w	r0, #15
   107ea:	e7fa      	b.n	107e2 <send+0x32>
		return -EBADMSG;
   107ec:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   107f0:	e7f7      	b.n	107e2 <send+0x32>
		return -ENOENT;
   107f2:	f06f 0001 	mvn.w	r0, #1
   107f6:	e7f4      	b.n	107e2 <send+0x32>
   107f8:	fffff82e 	.word	0xfffff82e

000107fc <register_ept>:
{
   107fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10800:	4688      	mov	r8, r1
   10802:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
   10804:	6906      	ldr	r6, [r0, #16]
   10806:	f506 7363 	add.w	r3, r6, #908	; 0x38c
   1080a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1080e:	2b02      	cmp	r3, #2
   10810:	d15f      	bne.n	108d2 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10812:	6813      	ldr	r3, [r2, #0]
   10814:	b923      	cbnz	r3, 10820 <register_ept+0x24>
		return -EINVAL;
   10816:	f06f 0015 	mvn.w	r0, #21
}
   1081a:	b003      	add	sp, #12
   1081c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	2b00      	cmp	r3, #0
   10824:	d0f7      	beq.n	10816 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
   10826:	f8d6 9388 	ldr.w	r9, [r6, #904]	; 0x388
   1082a:	f1b9 0f00 	cmp.w	r9, #0
   1082e:	d133      	bne.n	10898 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   10830:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
   10834:	f04f 32ff 	mov.w	r2, #4294967295
   10838:	f04f 33ff 	mov.w	r3, #4294967295
   1083c:	4638      	mov	r0, r7
   1083e:	f015 f863 	bl	25908 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   10842:	4630      	mov	r0, r6
   10844:	682a      	ldr	r2, [r5, #0]
   10846:	a901      	add	r1, sp, #4
   10848:	f7ff fe48 	bl	104dc <get_ept>
	if (rpmsg_ept == NULL) {
   1084c:	9c01      	ldr	r4, [sp, #4]
   1084e:	b91c      	cbnz	r4, 10858 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
   10850:	4638      	mov	r0, r7
   10852:	f01a fae9 	bl	2ae28 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   10856:	e7de      	b.n	10816 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   10858:	f105 0308 	add.w	r3, r5, #8
   1085c:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   1085e:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
   10860:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
   10864:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
   10866:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   10868:	b160      	cbz	r0, 10884 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1086a:	4638      	mov	r0, r7
   1086c:	f01a fadc 	bl	2ae28 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   10870:	4621      	mov	r1, r4
   10872:	4630      	mov	r0, r6
   10874:	6e23      	ldr	r3, [r4, #96]	; 0x60
   10876:	682a      	ldr	r2, [r5, #0]
   10878:	f7ff fe0e 	bl	10498 <advertise_ept>
	return 0;
   1087c:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
   1087e:	f8c8 4000 	str.w	r4, [r8]
	return 0;
   10882:	e7ca      	b.n	1081a <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   10884:	2220      	movs	r2, #32
   10886:	6829      	ldr	r1, [r5, #0]
   10888:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1088c:	f021 f972 	bl	31b74 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
   10890:	4638      	mov	r0, r7
   10892:	f01a fac9 	bl	2ae28 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   10896:	e7f1      	b.n	1087c <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
   10898:	4630      	mov	r0, r6
   1089a:	490f      	ldr	r1, [pc, #60]	; (108d8 <register_ept+0xdc>)
   1089c:	f01a fa91 	bl	2adc2 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
   108a0:	4604      	mov	r4, r0
   108a2:	2800      	cmp	r0, #0
   108a4:	d0b7      	beq.n	10816 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   108a6:	f105 0308 	add.w	r3, r5, #8
   108aa:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   108ac:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
   108ae:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
   108b0:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   108b2:	2300      	movs	r3, #0
   108b4:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
   108b8:	2220      	movs	r2, #32
   108ba:	6829      	ldr	r1, [r5, #0]
   108bc:	3040      	adds	r0, #64	; 0x40
   108be:	f021 f959 	bl	31b74 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   108c2:	4622      	mov	r2, r4
   108c4:	2101      	movs	r1, #1
   108c6:	4630      	mov	r0, r6
   108c8:	f000 f83e 	bl	10948 <ipc_rpmsg_register_ept>
	if (err != 0) {
   108cc:	2800      	cmp	r0, #0
   108ce:	d0d5      	beq.n	1087c <register_ept+0x80>
   108d0:	e7a1      	b.n	10816 <register_ept+0x1a>
		return -EBUSY;
   108d2:	f06f 000f 	mvn.w	r0, #15
   108d6:	e7a0      	b.n	1081a <register_ept+0x1e>
   108d8:	000365fc 	.word	0x000365fc

000108dc <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
   108dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108e0:	4605      	mov	r5, r0
   108e2:	460e      	mov	r6, r1
   108e4:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   108e6:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   108e8:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
   108ec:	b085      	sub	sp, #20
   108ee:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
   108f2:	4621      	mov	r1, r4
   108f4:	4630      	mov	r0, r6
   108f6:	f7f8 fd7e 	bl	93f6 <strcmp>
   108fa:	b9e0      	cbnz	r0, 10936 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   108fc:	4b11      	ldr	r3, [pc, #68]	; (10944 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
   108fe:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10902:	9302      	str	r3, [sp, #8]
   10904:	f8da 3010 	ldr.w	r3, [sl, #16]
   10908:	4632      	mov	r2, r6
   1090a:	e9cd 8300 	strd	r8, r3, [sp]
   1090e:	4629      	mov	r1, r5
   10910:	f04f 33ff 	mov.w	r3, #4294967295
   10914:	4658      	mov	r0, fp
   10916:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
   1091a:	f014 fabf 	bl	24e9c <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
   1091e:	b960      	cbnz	r0, 1093a <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
   10920:	2370      	movs	r3, #112	; 0x70
   10922:	2201      	movs	r2, #1
   10924:	fb03 9307 	mla	r3, r3, r7, r9
   10928:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
   1092c:	f8da 300c 	ldr.w	r3, [sl, #12]
   10930:	b10b      	cbz	r3, 10936 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
   10932:	4658      	mov	r0, fp
   10934:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10936:	3470      	adds	r4, #112	; 0x70
   10938:	b117      	cbz	r7, 10940 <ns_bind_cb+0x64>
			}
		}
	}
}
   1093a:	b005      	add	sp, #20
   1093c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10940:	2701      	movs	r7, #1
   10942:	e7d6      	b.n	108f2 <ns_bind_cb+0x16>
   10944:	0002af2f 	.word	0x0002af2f

00010948 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
   10948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1094a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
   1094c:	b190      	cbz	r0, 10974 <ipc_rpmsg_register_ept+0x2c>
   1094e:	b18a      	cbz	r2, 10974 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
   10950:	2901      	cmp	r1, #1
   10952:	d112      	bne.n	1097a <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
   10954:	4b0a      	ldr	r3, [pc, #40]	; (10980 <ipc_rpmsg_register_ept+0x38>)
   10956:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   1095a:	9302      	str	r3, [sp, #8]
   1095c:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
   10960:	3240      	adds	r2, #64	; 0x40
   10962:	9301      	str	r3, [sp, #4]
   10964:	f04f 33ff 	mov.w	r3, #4294967295
   10968:	4620      	mov	r0, r4
   1096a:	9300      	str	r3, [sp, #0]
   1096c:	f014 fa96 	bl	24e9c <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
   10970:	b004      	add	sp, #16
   10972:	bd10      	pop	{r4, pc}
		return -EINVAL;
   10974:	f06f 0015 	mvn.w	r0, #21
   10978:	e7fa      	b.n	10970 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
   1097a:	2000      	movs	r0, #0
   1097c:	e7f8      	b.n	10970 <ipc_rpmsg_register_ept+0x28>
   1097e:	bf00      	nop
   10980:	0002af2f 	.word	0x0002af2f

00010984 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
   10984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10988:	b087      	sub	sp, #28
   1098a:	460e      	mov	r6, r1
   1098c:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
   10990:	4614      	mov	r4, r2
   10992:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
   10996:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
   10998:	b330      	cbz	r0, 109e8 <ipc_rpmsg_init+0x64>
   1099a:	b329      	cbz	r1, 109e8 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
   1099c:	f8df c050 	ldr.w	ip, [pc, #80]	; 109f0 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   109a0:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
   109a4:	2d00      	cmp	r5, #0
   109a6:	bf08      	it	eq
   109a8:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
   109aa:	b99e      	cbnz	r6, 109d4 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
   109ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   109b0:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
   109b4:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
   109b6:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   109b8:	f020 f948 	bl	30c4c <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   109bc:	ab03      	add	r3, sp, #12
   109be:	e9cd 4300 	strd	r4, r3, [sp]
   109c2:	462a      	mov	r2, r5
   109c4:	463b      	mov	r3, r7
   109c6:	4641      	mov	r1, r8
   109c8:	4648      	mov	r0, r9
   109ca:	f014 fb3b 	bl	25044 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
   109ce:	b007      	add	sp, #28
   109d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   109d4:	2200      	movs	r2, #0
   109d6:	4641      	mov	r1, r8
   109d8:	920e      	str	r2, [sp, #56]	; 0x38
   109da:	4648      	mov	r0, r9
   109dc:	462a      	mov	r2, r5
}
   109de:	b007      	add	sp, #28
   109e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   109e4:	f014 bc58 	b.w	25298 <rpmsg_init_vdev>
		return -EINVAL;
   109e8:	f06f 0015 	mvn.w	r0, #21
   109ec:	e7ef      	b.n	109ce <ipc_rpmsg_init+0x4a>
   109ee:	bf00      	nop
   109f0:	000108dd 	.word	0x000108dd

000109f4 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
   109f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109f6:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
   109f8:	4604      	mov	r4, r0
{
   109fa:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
   109fc:	2800      	cmp	r0, #0
   109fe:	d06f      	beq.n	10ae0 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
   10a00:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
   10a02:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
   10a04:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10a06:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
   10a08:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
   10a0c:	4f36      	ldr	r7, [pc, #216]	; (10ae8 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10a0e:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
   10a10:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
   10a14:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10a18:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10a1c:	f04f 33ff 	mov.w	r3, #4294967295
   10a20:	9300      	str	r3, [sp, #0]
   10a22:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   10a24:	f01f fbd0 	bl	301c8 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   10a28:	4a30      	ldr	r2, [pc, #192]	; (10aec <ipc_static_vrings_init+0xf8>)
   10a2a:	ab06      	add	r3, sp, #24
   10a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
   10a30:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
   10a34:	4618      	mov	r0, r3
   10a36:	f014 f905 	bl	24c44 <metal_init>
	if (err != 0) {
   10a3a:	4605      	mov	r5, r0
   10a3c:	b9d8      	cbnz	r0, 10a76 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
   10a3e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10a42:	f014 f8df 	bl	24c04 <metal_register_generic_device>
	if (err != 0) {
   10a46:	4605      	mov	r5, r0
   10a48:	b9a8      	cbnz	r0, 10a76 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   10a4a:	4639      	mov	r1, r7
   10a4c:	4828      	ldr	r0, [pc, #160]	; (10af0 <ipc_static_vrings_init+0xfc>)
   10a4e:	aa05      	add	r2, sp, #20
   10a50:	f01f fb8c 	bl	3016c <metal_device_open>
	if (err != 0) {
   10a54:	4605      	mov	r5, r0
   10a56:	b970      	cbnz	r0, 10a76 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
   10a58:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
   10a5a:	689a      	ldr	r2, [r3, #8]
   10a5c:	b172      	cbz	r2, 10a7c <ipc_static_vrings_init+0x88>
   10a5e:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   10a60:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
   10a64:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   10a68:	f01a fa92 	bl	2af90 <virtqueue_allocate>
   10a6c:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
   10a70:	b930      	cbnz	r0, 10a80 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
   10a72:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
   10a76:	4628      	mov	r0, r5
   10a78:	b009      	add	sp, #36	; 0x24
   10a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a7c:	4603      	mov	r3, r0
   10a7e:	e7ef      	b.n	10a60 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
   10a80:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   10a84:	f01a fa84 	bl	2af90 <virtqueue_allocate>
   10a88:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
   10a8c:	2800      	cmp	r0, #0
   10a8e:	d0f0      	beq.n	10a72 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   10a90:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   10a94:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   10a98:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
   10a9c:	2304      	movs	r3, #4
   10a9e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
   10aa2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
   10aa6:	2302      	movs	r3, #2
   10aa8:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
   10aaa:	4b12      	ldr	r3, [pc, #72]	; (10af4 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   10aac:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   10ab0:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   10ab4:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
   10ab8:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   10abc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
   10ac0:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
   10ac2:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   10ac6:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   10aca:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   10ace:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
   10ad2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
   10ad6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
   10ada:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
   10adc:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
   10ade:	e7ca      	b.n	10a76 <ipc_static_vrings_init+0x82>
		return -EINVAL;
   10ae0:	f06f 0515 	mvn.w	r5, #21
   10ae4:	e7c7      	b.n	10a76 <ipc_static_vrings_init+0x82>
   10ae6:	bf00      	nop
   10ae8:	0003555f 	.word	0x0003555f
   10aec:	00033180 	.word	0x00033180
   10af0:	00035569 	.word	0x00035569
   10af4:	00033708 	.word	0x00033708

00010af8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10afc:	4605      	mov	r5, r0
	__asm__ volatile(
   10afe:	f04f 0320 	mov.w	r3, #32
   10b02:	f3ef 8611 	mrs	r6, BASEPRI
   10b06:	f383 8812 	msr	BASEPRI_MAX, r3
   10b0a:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10b0e:	f04f 090c 	mov.w	r9, #12
	return list->head;
   10b12:	4b0d      	ldr	r3, [pc, #52]	; (10b48 <pm_state_notify+0x50>)
   10b14:	4f0d      	ldr	r7, [pc, #52]	; (10b4c <pm_state_notify+0x54>)
   10b16:	681c      	ldr	r4, [r3, #0]
   10b18:	f8df 8034 	ldr.w	r8, [pc, #52]	; 10b50 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10b1c:	b92c      	cbnz	r4, 10b2a <pm_state_notify+0x32>
	__asm__ volatile(
   10b1e:	f386 8811 	msr	BASEPRI, r6
   10b22:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   10b2a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   10b2e:	2d00      	cmp	r5, #0
   10b30:	bf18      	it	ne
   10b32:	4613      	movne	r3, r2
		if (callback) {
   10b34:	b12b      	cbz	r3, 10b42 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10b36:	f898 2014 	ldrb.w	r2, [r8, #20]
   10b3a:	fb09 f202 	mul.w	r2, r9, r2
   10b3e:	5cb8      	ldrb	r0, [r7, r2]
   10b40:	4798      	blx	r3
	return node->next;
   10b42:	6824      	ldr	r4, [r4, #0]
   10b44:	e7ea      	b.n	10b1c <pm_state_notify+0x24>
   10b46:	bf00      	nop
   10b48:	2002f9dc 	.word	0x2002f9dc
   10b4c:	2002f9d0 	.word	0x2002f9d0
   10b50:	20030e50 	.word	0x20030e50

00010b54 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10b54:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   10b56:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10b58:	4b16      	ldr	r3, [pc, #88]	; (10bb4 <pm_system_resume+0x60>)
   10b5a:	7d1c      	ldrb	r4, [r3, #20]
   10b5c:	f004 031f 	and.w	r3, r4, #31
   10b60:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b62:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10b64:	4b14      	ldr	r3, [pc, #80]	; (10bb8 <pm_system_resume+0x64>)
   10b66:	0961      	lsrs	r1, r4, #5
   10b68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10b6c:	e8d3 1fef 	ldaex	r1, [r3]
   10b70:	ea01 0500 	and.w	r5, r1, r0
   10b74:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10b78:	2e00      	cmp	r6, #0
   10b7a:	d1f7      	bne.n	10b6c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10b7c:	420a      	tst	r2, r1
   10b7e:	d013      	beq.n	10ba8 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10b80:	4b0e      	ldr	r3, [pc, #56]	; (10bbc <pm_system_resume+0x68>)
   10b82:	4d0f      	ldr	r5, [pc, #60]	; (10bc0 <pm_system_resume+0x6c>)
   10b84:	b18b      	cbz	r3, 10baa <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10b86:	230c      	movs	r3, #12
   10b88:	4363      	muls	r3, r4
   10b8a:	18ea      	adds	r2, r5, r3
   10b8c:	7851      	ldrb	r1, [r2, #1]
   10b8e:	5ce8      	ldrb	r0, [r5, r3]
   10b90:	f019 fe97 	bl	2a8c2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10b94:	2000      	movs	r0, #0
   10b96:	f7ff ffaf 	bl	10af8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10b9a:	230c      	movs	r3, #12
   10b9c:	435c      	muls	r4, r3
   10b9e:	2300      	movs	r3, #0
   10ba0:	192a      	adds	r2, r5, r4
   10ba2:	512b      	str	r3, [r5, r4]
   10ba4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10ba8:	bd70      	pop	{r4, r5, r6, pc}
   10baa:	f383 8811 	msr	BASEPRI, r3
   10bae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10bb2:	e7ef      	b.n	10b94 <pm_system_resume+0x40>
   10bb4:	20030e50 	.word	0x20030e50
   10bb8:	2002f9e4 	.word	0x2002f9e4
   10bbc:	0002a8c3 	.word	0x0002a8c3
   10bc0:	2002f9d0 	.word	0x2002f9d0

00010bc4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10bc8:	4b32      	ldr	r3, [pc, #200]	; (10c94 <pm_system_suspend+0xd0>)
{
   10bca:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10bcc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10bce:	f04f 0320 	mov.w	r3, #32
   10bd2:	f3ef 8811 	mrs	r8, BASEPRI
   10bd6:	f383 8812 	msr	BASEPRI_MAX, r3
   10bda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10bde:	240c      	movs	r4, #12
   10be0:	436c      	muls	r4, r5
   10be2:	4b2d      	ldr	r3, [pc, #180]	; (10c98 <pm_system_suspend+0xd4>)
   10be4:	4e2d      	ldr	r6, [pc, #180]	; (10c9c <pm_system_suspend+0xd8>)
   10be6:	5d19      	ldrb	r1, [r3, r4]
   10be8:	191a      	adds	r2, r3, r4
   10bea:	2900      	cmp	r1, #0
   10bec:	d047      	beq.n	10c7e <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10bee:	ca07      	ldmia	r2, {r0, r1, r2}
   10bf0:	eb06 0c04 	add.w	ip, r6, r4
   10bf4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10bf8:	2200      	movs	r2, #0
   10bfa:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   10bfc:	f388 8811 	msr	BASEPRI, r8
   10c00:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10c04:	230c      	movs	r3, #12
   10c06:	436b      	muls	r3, r5
   10c08:	5cf0      	ldrb	r0, [r6, r3]
   10c0a:	18f2      	adds	r2, r6, r3
   10c0c:	b3a8      	cbz	r0, 10c7a <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10c0e:	1c7b      	adds	r3, r7, #1
   10c10:	d010      	beq.n	10c34 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10c12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10c16:	2100      	movs	r1, #0
   10c18:	f8d2 c008 	ldr.w	ip, [r2, #8]
   10c1c:	4c20      	ldr	r4, [pc, #128]	; (10ca0 <pm_system_suspend+0xdc>)
   10c1e:	2300      	movs	r3, #0
   10c20:	fbec 4100 	umlal	r4, r1, ip, r0
   10c24:	4a1f      	ldr	r2, [pc, #124]	; (10ca4 <pm_system_suspend+0xe0>)
   10c26:	4620      	mov	r0, r4
   10c28:	f7f8 f98a 	bl	8f40 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10c2c:	2101      	movs	r1, #1
   10c2e:	1a38      	subs	r0, r7, r0
   10c30:	f020 fc03 	bl	3143a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10c34:	f015 fbba 	bl	263ac <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10c38:	2001      	movs	r0, #1
   10c3a:	f7ff ff5d 	bl	10af8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10c3e:	4b1a      	ldr	r3, [pc, #104]	; (10ca8 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10c40:	096a      	lsrs	r2, r5, #5
   10c42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10c46:	2201      	movs	r2, #1
   10c48:	f005 011f 	and.w	r1, r5, #31
   10c4c:	408a      	lsls	r2, r1
   10c4e:	e8d3 0fef 	ldaex	r0, [r3]
   10c52:	4310      	orrs	r0, r2
   10c54:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10c58:	2900      	cmp	r1, #0
   10c5a:	d1f8      	bne.n	10c4e <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   10c5c:	4b13      	ldr	r3, [pc, #76]	; (10cac <pm_system_suspend+0xe8>)
   10c5e:	b13b      	cbz	r3, 10c70 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   10c60:	230c      	movs	r3, #12
   10c62:	fb03 f005 	mul.w	r0, r3, r5
   10c66:	1833      	adds	r3, r6, r0
   10c68:	7859      	ldrb	r1, [r3, #1]
   10c6a:	5c30      	ldrb	r0, [r6, r0]
   10c6c:	f019 fe1d 	bl	2a8aa <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10c70:	f7ff ff70 	bl	10b54 <pm_system_resume>
	k_sched_unlock();
   10c74:	f015 fbae 	bl	263d4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   10c78:	2001      	movs	r0, #1
}
   10c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   10c7e:	4601      	mov	r1, r0
   10c80:	4628      	mov	r0, r5
   10c82:	f000 f815 	bl	10cb0 <pm_policy_next_state>
		if (info != NULL) {
   10c86:	2800      	cmp	r0, #0
   10c88:	d0b8      	beq.n	10bfc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   10c8a:	c807      	ldmia	r0, {r0, r1, r2}
   10c8c:	4434      	add	r4, r6
   10c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10c92:	e7b3      	b.n	10bfc <pm_system_suspend+0x38>
   10c94:	20030e50 	.word	0x20030e50
   10c98:	2002f9c4 	.word	0x2002f9c4
   10c9c:	2002f9d0 	.word	0x2002f9d0
   10ca0:	000f423f 	.word	0x000f423f
   10ca4:	000f4240 	.word	0x000f4240
   10ca8:	2002f9e4 	.word	0x2002f9e4
   10cac:	0002a8ab 	.word	0x0002a8ab

00010cb0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cb4:	b085      	sub	sp, #20
   10cb6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10cb8:	a903      	add	r1, sp, #12
   10cba:	f000 f843 	bl	10d44 <pm_state_cpu_get_all>
   10cbe:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10cc2:	4604      	mov	r4, r0
   10cc4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10cc8:	4b1b      	ldr	r3, [pc, #108]	; (10d38 <pm_policy_next_state+0x88>)
   10cca:	9d03      	ldr	r5, [sp, #12]
   10ccc:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10cd0:	1e43      	subs	r3, r0, #1
   10cd2:	b21b      	sxth	r3, r3
   10cd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10cd8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10d3c <pm_policy_next_state+0x8c>
   10cdc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10ce0:	b924      	cbnz	r4, 10cec <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10ce2:	46a1      	mov	r9, r4
}
   10ce4:	4648      	mov	r0, r9
   10ce6:	b005      	add	sp, #20
   10ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cec:	46c4      	mov	ip, r8
   10cee:	4659      	mov	r1, fp
   10cf0:	6868      	ldr	r0, [r5, #4]
   10cf2:	2300      	movs	r3, #0
   10cf4:	fbe0 c107 	umlal	ip, r1, r0, r7
   10cf8:	4a11      	ldr	r2, [pc, #68]	; (10d40 <pm_policy_next_state+0x90>)
   10cfa:	4660      	mov	r0, ip
   10cfc:	f7f8 f920 	bl	8f40 <__aeabi_uldivmod>
   10d00:	46c4      	mov	ip, r8
   10d02:	4659      	mov	r1, fp
   10d04:	9001      	str	r0, [sp, #4]
   10d06:	68a8      	ldr	r0, [r5, #8]
   10d08:	2300      	movs	r3, #0
   10d0a:	fbe0 c107 	umlal	ip, r1, r0, r7
   10d0e:	4a0c      	ldr	r2, [pc, #48]	; (10d40 <pm_policy_next_state+0x90>)
   10d10:	4660      	mov	r0, ip
   10d12:	f7f8 f915 	bl	8f40 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10d16:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10d1a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10d1c:	d001      	beq.n	10d22 <pm_policy_next_state+0x72>
   10d1e:	4582      	cmp	sl, r0
   10d20:	d905      	bls.n	10d2e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10d22:	1c73      	adds	r3, r6, #1
   10d24:	d0de      	beq.n	10ce4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10d26:	9b01      	ldr	r3, [sp, #4]
   10d28:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10d2a:	42b0      	cmp	r0, r6
   10d2c:	d9da      	bls.n	10ce4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10d2e:	3c01      	subs	r4, #1
   10d30:	b2a4      	uxth	r4, r4
   10d32:	3d0c      	subs	r5, #12
   10d34:	e7d4      	b.n	10ce0 <pm_policy_next_state+0x30>
   10d36:	bf00      	nop
   10d38:	200084a8 	.word	0x200084a8
   10d3c:	000f423f 	.word	0x000f423f
   10d40:	000f4240 	.word	0x000f4240

00010d44 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10d44:	b908      	cbnz	r0, 10d4a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10d46:	4b02      	ldr	r3, [pc, #8]	; (10d50 <pm_state_cpu_get_all+0xc>)
   10d48:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10d4a:	2000      	movs	r0, #0
   10d4c:	4770      	bx	lr
   10d4e:	bf00      	nop
   10d50:	0003372c 	.word	0x0003372c

00010d54 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10d54:	4b03      	ldr	r3, [pc, #12]	; (10d64 <nus_ccc_cfg_changed+0x10>)
   10d56:	689b      	ldr	r3, [r3, #8]
   10d58:	b11b      	cbz	r3, 10d62 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10d5a:	1e48      	subs	r0, r1, #1
   10d5c:	bf18      	it	ne
   10d5e:	2001      	movne	r0, #1
   10d60:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10d62:	4770      	bx	lr
   10d64:	2002f9e8 	.word	0x2002f9e8

00010d68 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   10d68:	b510      	push	{r4, lr}
   10d6a:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   10d6c:	4b03      	ldr	r3, [pc, #12]	; (10d7c <on_receive+0x14>)
{
   10d6e:	4611      	mov	r1, r2
	if (nus_cb.received) {
   10d70:	681b      	ldr	r3, [r3, #0]
   10d72:	b10b      	cbz	r3, 10d78 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   10d74:	4622      	mov	r2, r4
   10d76:	4798      	blx	r3
}
	return len;
}
   10d78:	4620      	mov	r0, r4
   10d7a:	bd10      	pop	{r4, pc}
   10d7c:	2002f9e8 	.word	0x2002f9e8

00010d80 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   10d80:	4b02      	ldr	r3, [pc, #8]	; (10d8c <on_sent+0xc>)
   10d82:	685b      	ldr	r3, [r3, #4]
   10d84:	b103      	cbz	r3, 10d88 <on_sent+0x8>
		nus_cb.sent(conn);
   10d86:	4718      	bx	r3
	}
}
   10d88:	4770      	bx	lr
   10d8a:	bf00      	nop
   10d8c:	2002f9e8 	.word	0x2002f9e8

00010d90 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   10d90:	b130      	cbz	r0, 10da0 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   10d92:	4b04      	ldr	r3, [pc, #16]	; (10da4 <bt_nus_init+0x14>)
   10d94:	6802      	ldr	r2, [r0, #0]
   10d96:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   10d98:	6842      	ldr	r2, [r0, #4]
   10d9a:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   10d9c:	6882      	ldr	r2, [r0, #8]
   10d9e:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   10da0:	2000      	movs	r0, #0
   10da2:	4770      	bx	lr
   10da4:	2002f9e8 	.word	0x2002f9e8

00010da8 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   10da8:	b570      	push	{r4, r5, r6, lr}
   10daa:	460e      	mov	r6, r1
   10dac:	4615      	mov	r5, r2
   10dae:	4604      	mov	r4, r0
   10db0:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   10db2:	2100      	movs	r1, #0
   10db4:	2218      	movs	r2, #24
   10db6:	4668      	mov	r0, sp
   10db8:	f020 fd73 	bl	318a2 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   10dbc:	490b      	ldr	r1, [pc, #44]	; (10dec <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   10dbe:	4b0c      	ldr	r3, [pc, #48]	; (10df0 <bt_nus_send+0x48>)
	params.data = data;
   10dc0:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   10dc4:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   10dc8:	9304      	str	r3, [sp, #16]

	if (!conn) {
   10dca:	b92c      	cbnz	r4, 10dd8 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10dcc:	4669      	mov	r1, sp
   10dce:	4620      	mov	r0, r4
   10dd0:	f00d fc02 	bl	1e5d8 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10dd4:	b006      	add	sp, #24
   10dd6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   10dd8:	2201      	movs	r2, #1
   10dda:	4620      	mov	r0, r4
   10ddc:	f01d fe4c 	bl	2ea78 <bt_gatt_is_subscribed>
   10de0:	2800      	cmp	r0, #0
   10de2:	d1f3      	bne.n	10dcc <bt_nus_send+0x24>
		return -EINVAL;
   10de4:	f06f 0015 	mvn.w	r0, #21
   10de8:	e7f4      	b.n	10dd4 <bt_nus_send+0x2c>
   10dea:	bf00      	nop
   10dec:	00033754 	.word	0x00033754
   10df0:	00010d81 	.word	0x00010d81

00010df4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10df4:	4904      	ldr	r1, [pc, #16]	; (10e08 <sub_bytes+0x14>)
   10df6:	1e43      	subs	r3, r0, #1
   10df8:	300f      	adds	r0, #15
   10dfa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10dfe:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10e00:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10e02:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10e04:	d1f9      	bne.n	10dfa <sub_bytes+0x6>
	}
}
   10e06:	4770      	bx	lr
   10e08:	0003557b 	.word	0x0003557b

00010e0c <tc_aes128_set_encrypt_key>:
{
   10e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e0e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10e10:	4e26      	ldr	r6, [pc, #152]	; (10eac <tc_aes128_set_encrypt_key+0xa0>)
{
   10e12:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10e14:	ad01      	add	r5, sp, #4
{
   10e16:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10e18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10e1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10e20:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10e24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10e28:	4638      	mov	r0, r7
   10e2a:	2f00      	cmp	r7, #0
   10e2c:	d039      	beq.n	10ea2 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10e2e:	2c00      	cmp	r4, #0
   10e30:	d039      	beq.n	10ea6 <tc_aes128_set_encrypt_key+0x9a>
   10e32:	1f38      	subs	r0, r7, #4
   10e34:	4602      	mov	r2, r0
   10e36:	4621      	mov	r1, r4
   10e38:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10e3a:	784b      	ldrb	r3, [r1, #1]
   10e3c:	780d      	ldrb	r5, [r1, #0]
   10e3e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10e40:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10e44:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   10e46:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10e48:	432b      	orrs	r3, r5
   10e4a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10e4e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10e50:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10e54:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10e58:	d1ef      	bne.n	10e3a <tc_aes128_set_encrypt_key+0x2e>
   10e5a:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10e5c:	4c14      	ldr	r4, [pc, #80]	; (10eb0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10e5e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10e60:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10e62:	d116      	bne.n	10e92 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10e64:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10e68:	5ca5      	ldrb	r5, [r4, r2]
   10e6a:	0e1a      	lsrs	r2, r3, #24
   10e6c:	5ca2      	ldrb	r2, [r4, r2]
   10e6e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   10e72:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10e76:	5d65      	ldrb	r5, [r4, r5]
   10e78:	b2db      	uxtb	r3, r3
   10e7a:	5ce3      	ldrb	r3, [r4, r3]
   10e7c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10e80:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10e84:	f021 0303 	bic.w	r3, r1, #3
   10e88:	3330      	adds	r3, #48	; 0x30
   10e8a:	446b      	add	r3, sp
   10e8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10e90:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   10e92:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   10e96:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10e98:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10e9a:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10e9c:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10e9e:	d1de      	bne.n	10e5e <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   10ea0:	2001      	movs	r0, #1
}
   10ea2:	b00d      	add	sp, #52	; 0x34
   10ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   10ea6:	4620      	mov	r0, r4
   10ea8:	e7fb      	b.n	10ea2 <tc_aes128_set_encrypt_key+0x96>
   10eaa:	bf00      	nop
   10eac:	00033188 	.word	0x00033188
   10eb0:	0003557b 	.word	0x0003557b

00010eb4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   10eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10eb8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10eba:	6803      	ldr	r3, [r0, #0]
{
   10ebc:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10ebe:	9302      	str	r3, [sp, #8]
   10ec0:	6843      	ldr	r3, [r0, #4]
   10ec2:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 11080 <compress+0x1cc>
   10ec6:	9303      	str	r3, [sp, #12]
   10ec8:	6883      	ldr	r3, [r0, #8]
   10eca:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10ece:	9304      	str	r3, [sp, #16]
   10ed0:	68c3      	ldr	r3, [r0, #12]
   10ed2:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10ed4:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10ed6:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10eda:	9306      	str	r3, [sp, #24]
   10edc:	6943      	ldr	r3, [r0, #20]
   10ede:	9307      	str	r3, [sp, #28]
   10ee0:	6983      	ldr	r3, [r0, #24]
   10ee2:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   10ee6:	9308      	str	r3, [sp, #32]
   10ee8:	69c3      	ldr	r3, [r0, #28]
   10eea:	4698      	mov	r8, r3
   10eec:	9309      	str	r3, [sp, #36]	; 0x24
   10eee:	9b08      	ldr	r3, [sp, #32]
   10ef0:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   10ef2:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10ef4:	ab0c      	add	r3, sp, #48	; 0x30
   10ef6:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10ef8:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10efc:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   10efe:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f02:	44a9      	add	r9, r5
   10f04:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   10f08:	9d00      	ldr	r5, [sp, #0]
   10f0a:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10f0e:	444b      	add	r3, r9
   10f10:	ea25 0502 	bic.w	r5, r5, r2
   10f14:	ea02 090c 	and.w	r9, r2, ip
   10f18:	ea85 0509 	eor.w	r5, r5, r9
   10f1c:	442b      	add	r3, r5
   10f1e:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10f20:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10f24:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   10f28:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10f2c:	4025      	ands	r5, r4
   10f2e:	ea06 090b 	and.w	r9, r6, fp
   10f32:	ea85 0509 	eor.w	r5, r5, r9
   10f36:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   10f3a:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10f3c:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10f3e:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10f40:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10f44:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   10f46:	46de      	mov	lr, fp
   10f48:	f8dd 8000 	ldr.w	r8, [sp]
   10f4c:	f040 8088 	bne.w	11060 <compress+0x1ac>
   10f50:	f04f 0a10 	mov.w	sl, #16
   10f54:	494b      	ldr	r1, [pc, #300]	; (11084 <compress+0x1d0>)
   10f56:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   10f58:	4651      	mov	r1, sl
   10f5a:	f10a 0a01 	add.w	sl, sl, #1
   10f5e:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10f62:	f00a 070f 	and.w	r7, sl, #15
   10f66:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10f6a:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10f6e:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   10f72:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   10f76:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   10f78:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   10f7c:	f101 070e 	add.w	r7, r1, #14
   10f80:	f007 070f 	and.w	r7, r7, #15
   10f84:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10f88:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10f8c:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   10f8e:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   10f92:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   10f96:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10f9a:	f001 010f 	and.w	r1, r1, #15
   10f9e:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10fa2:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   10fa6:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   10faa:	f859 ec40 	ldr.w	lr, [r9, #-64]
   10fae:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   10fb2:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10fb6:	4471      	add	r1, lr
		s0 = sigma0(s0);
   10fb8:	f8dd e004 	ldr.w	lr, [sp, #4]
   10fbc:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   10fc0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10fc4:	4441      	add	r1, r8
		s1 = sigma1(s1);
   10fc6:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10fca:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10fcc:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10fd0:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10fd4:	ea2c 0705 	bic.w	r7, ip, r5
   10fd8:	ea87 0708 	eor.w	r7, r7, r8
   10fdc:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10fe0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10fe4:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   10fe8:	4477      	add	r7, lr
   10fea:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10fee:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10ff2:	4477      	add	r7, lr
   10ff4:	440f      	add	r7, r1
   10ff6:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   10ff8:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10ffc:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10ffe:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   11002:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   11006:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   1100a:	ea07 0703 	and.w	r7, r7, r3
   1100e:	ea04 0806 	and.w	r8, r4, r6
   11012:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   11016:	ea87 0708 	eor.w	r7, r7, r8
   1101a:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   1101c:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   1101e:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   11022:	f8cd c000 	str.w	ip, [sp]
   11026:	46b3      	mov	fp, r6
   11028:	d122      	bne.n	11070 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1102a:	9902      	ldr	r1, [sp, #8]
   1102c:	4439      	add	r1, r7
   1102e:	6001      	str	r1, [r0, #0]
   11030:	9903      	ldr	r1, [sp, #12]
   11032:	4419      	add	r1, r3
   11034:	9b04      	ldr	r3, [sp, #16]
   11036:	6041      	str	r1, [r0, #4]
   11038:	4423      	add	r3, r4
   1103a:	6083      	str	r3, [r0, #8]
   1103c:	9b05      	ldr	r3, [sp, #20]
   1103e:	4433      	add	r3, r6
   11040:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   11042:	9b06      	ldr	r3, [sp, #24]
   11044:	4473      	add	r3, lr
   11046:	6103      	str	r3, [r0, #16]
   11048:	9b07      	ldr	r3, [sp, #28]
   1104a:	442b      	add	r3, r5
   1104c:	6143      	str	r3, [r0, #20]
   1104e:	9b08      	ldr	r3, [sp, #32]
   11050:	4413      	add	r3, r2
   11052:	6183      	str	r3, [r0, #24]
   11054:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11056:	4463      	add	r3, ip
   11058:	61c3      	str	r3, [r0, #28]
}
   1105a:	b01d      	add	sp, #116	; 0x74
   1105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11060:	46b3      	mov	fp, r6
   11062:	f8cd c000 	str.w	ip, [sp]
   11066:	4626      	mov	r6, r4
   11068:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   1106a:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   1106c:	462a      	mov	r2, r5
   1106e:	e740      	b.n	10ef2 <compress+0x3e>
   11070:	4694      	mov	ip, r2
   11072:	4626      	mov	r6, r4
   11074:	462a      	mov	r2, r5
   11076:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   11078:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   1107a:	463b      	mov	r3, r7
   1107c:	e76c      	b.n	10f58 <compress+0xa4>
   1107e:	bf00      	nop
   11080:	000337a4 	.word	0x000337a4
   11084:	000337e0 	.word	0x000337e0

00011088 <tc_sha256_init>:
{
   11088:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   1108a:	4604      	mov	r4, r0
   1108c:	b1c8      	cbz	r0, 110c2 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   1108e:	2270      	movs	r2, #112	; 0x70
   11090:	2100      	movs	r1, #0
   11092:	f019 ffc8 	bl	2b026 <_set>
	s->iv[1] = 0xbb67ae85;
   11096:	4b0b      	ldr	r3, [pc, #44]	; (110c4 <tc_sha256_init+0x3c>)
   11098:	4a0b      	ldr	r2, [pc, #44]	; (110c8 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   1109a:	490c      	ldr	r1, [pc, #48]	; (110cc <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   1109c:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   110a0:	4b0b      	ldr	r3, [pc, #44]	; (110d0 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   110a2:	480c      	ldr	r0, [pc, #48]	; (110d4 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   110a4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   110a8:	4b0b      	ldr	r3, [pc, #44]	; (110d8 <tc_sha256_init+0x50>)
   110aa:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   110ae:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   110b0:	4b0a      	ldr	r3, [pc, #40]	; (110dc <tc_sha256_init+0x54>)
   110b2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   110b4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   110b8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   110bc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   110c0:	61e3      	str	r3, [r4, #28]
}
   110c2:	bd10      	pop	{r4, pc}
   110c4:	bb67ae85 	.word	0xbb67ae85
   110c8:	6a09e667 	.word	0x6a09e667
   110cc:	3c6ef372 	.word	0x3c6ef372
   110d0:	a54ff53a 	.word	0xa54ff53a
   110d4:	510e527f 	.word	0x510e527f
   110d8:	9b05688c 	.word	0x9b05688c
   110dc:	1f83d9ab 	.word	0x1f83d9ab

000110e0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   110e0:	4901      	ldr	r1, [pc, #4]	; (110e8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   110e2:	2210      	movs	r2, #16
	str	r2, [r1]
   110e4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   110e6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   110e8:	e000ed10 	.word	0xe000ed10

000110ec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   110ec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   110ee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   110f0:	f380 8811 	msr	BASEPRI, r0
	isb
   110f4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   110f8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   110fc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   110fe:	b662      	cpsie	i
	isb
   11100:	f3bf 8f6f 	isb	sy

	bx	lr
   11104:	4770      	bx	lr
   11106:	bf00      	nop

00011108 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11108:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1110a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1110c:	f381 8811 	msr	BASEPRI, r1

	wfe
   11110:	bf20      	wfe

	msr	BASEPRI, r0
   11112:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   11116:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   11118:	4770      	bx	lr
   1111a:	bf00      	nop

0001111c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1111c:	b570      	push	{r4, r5, r6, lr}
   1111e:	4606      	mov	r6, r0

	if (esf != NULL) {
   11120:	460d      	mov	r5, r1
{
   11122:	b086      	sub	sp, #24
	if (esf != NULL) {
   11124:	2900      	cmp	r1, #0
   11126:	d038      	beq.n	1119a <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   11128:	2400      	movs	r4, #0
   1112a:	688b      	ldr	r3, [r1, #8]
   1112c:	2201      	movs	r2, #1
   1112e:	9305      	str	r3, [sp, #20]
   11130:	684b      	ldr	r3, [r1, #4]
   11132:	4620      	mov	r0, r4
   11134:	9304      	str	r3, [sp, #16]
   11136:	680b      	ldr	r3, [r1, #0]
   11138:	491b      	ldr	r1, [pc, #108]	; (111a8 <z_arm_fatal_error+0x8c>)
   1113a:	9303      	str	r3, [sp, #12]
   1113c:	4b1b      	ldr	r3, [pc, #108]	; (111ac <z_arm_fatal_error+0x90>)
   1113e:	e9cd 4400 	strd	r4, r4, [sp]
   11142:	9302      	str	r3, [sp, #8]
   11144:	4623      	mov	r3, r4
   11146:	f01a fbac 	bl	2b8a2 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1114a:	696b      	ldr	r3, [r5, #20]
   1114c:	2201      	movs	r2, #1
   1114e:	9305      	str	r3, [sp, #20]
   11150:	692b      	ldr	r3, [r5, #16]
   11152:	4620      	mov	r0, r4
   11154:	9304      	str	r3, [sp, #16]
   11156:	68eb      	ldr	r3, [r5, #12]
   11158:	4913      	ldr	r1, [pc, #76]	; (111a8 <z_arm_fatal_error+0x8c>)
   1115a:	9303      	str	r3, [sp, #12]
   1115c:	4b14      	ldr	r3, [pc, #80]	; (111b0 <z_arm_fatal_error+0x94>)
   1115e:	9400      	str	r4, [sp, #0]
   11160:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11164:	4623      	mov	r3, r4
   11166:	f01a fb9c 	bl	2b8a2 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1116a:	69eb      	ldr	r3, [r5, #28]
   1116c:	2201      	movs	r2, #1
   1116e:	9303      	str	r3, [sp, #12]
   11170:	4b10      	ldr	r3, [pc, #64]	; (111b4 <z_arm_fatal_error+0x98>)
   11172:	4620      	mov	r0, r4
   11174:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11178:	490b      	ldr	r1, [pc, #44]	; (111a8 <z_arm_fatal_error+0x8c>)
   1117a:	4623      	mov	r3, r4
   1117c:	9400      	str	r4, [sp, #0]
   1117e:	f01a fb90 	bl	2b8a2 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11182:	69ab      	ldr	r3, [r5, #24]
   11184:	2201      	movs	r2, #1
   11186:	9303      	str	r3, [sp, #12]
   11188:	4b0b      	ldr	r3, [pc, #44]	; (111b8 <z_arm_fatal_error+0x9c>)
   1118a:	4620      	mov	r0, r4
   1118c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11190:	4905      	ldr	r1, [pc, #20]	; (111a8 <z_arm_fatal_error+0x8c>)
   11192:	4623      	mov	r3, r4
   11194:	9400      	str	r4, [sp, #0]
   11196:	f01a fb84 	bl	2b8a2 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1119a:	4629      	mov	r1, r5
   1119c:	4630      	mov	r0, r6
}
   1119e:	b006      	add	sp, #24
   111a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   111a4:	f014 b916 	b.w	253d4 <z_fatal_error>
   111a8:	00033100 	.word	0x00033100
   111ac:	0003567b 	.word	0x0003567b
   111b0:	000356aa 	.word	0x000356aa
   111b4:	000356d9 	.word	0x000356d9
   111b8:	000356e8 	.word	0x000356e8

000111bc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   111bc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   111be:	2800      	cmp	r0, #0
   111c0:	db07      	blt.n	111d2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   111c2:	2301      	movs	r3, #1
   111c4:	0941      	lsrs	r1, r0, #5
   111c6:	4a03      	ldr	r2, [pc, #12]	; (111d4 <arch_irq_enable+0x18>)
   111c8:	f000 001f 	and.w	r0, r0, #31
   111cc:	4083      	lsls	r3, r0
   111ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   111d2:	4770      	bx	lr
   111d4:	e000e100 	.word	0xe000e100

000111d8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   111d8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   111da:	2800      	cmp	r0, #0
   111dc:	db0c      	blt.n	111f8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   111de:	2201      	movs	r2, #1
   111e0:	4906      	ldr	r1, [pc, #24]	; (111fc <arch_irq_disable+0x24>)
   111e2:	0943      	lsrs	r3, r0, #5
   111e4:	f000 001f 	and.w	r0, r0, #31
   111e8:	4082      	lsls	r2, r0
   111ea:	3320      	adds	r3, #32
   111ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   111f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   111f4:	f3bf 8f6f 	isb	sy
}
   111f8:	4770      	bx	lr
   111fa:	bf00      	nop
   111fc:	e000e100 	.word	0xe000e100

00011200 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11200:	4b05      	ldr	r3, [pc, #20]	; (11218 <arch_irq_is_enabled+0x18>)
   11202:	0942      	lsrs	r2, r0, #5
   11204:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11208:	2301      	movs	r3, #1
   1120a:	f000 001f 	and.w	r0, r0, #31
   1120e:	fa03 f000 	lsl.w	r0, r3, r0
}
   11212:	4010      	ands	r0, r2
   11214:	4770      	bx	lr
   11216:	bf00      	nop
   11218:	e000e100 	.word	0xe000e100

0001121c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1121c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1121e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   11220:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11224:	bfac      	ite	ge
   11226:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1122a:	4b06      	ldrlt	r3, [pc, #24]	; (11244 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1122c:	ea4f 1141 	mov.w	r1, r1, lsl #5
   11230:	b2c9      	uxtb	r1, r1
   11232:	bfab      	itete	ge
   11234:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11238:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1123c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11240:	5419      	strblt	r1, [r3, r0]
}
   11242:	4770      	bx	lr
   11244:	e000ed14 	.word	0xe000ed14

00011248 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11248:	bf30      	wfi
    b z_SysNmiOnReset
   1124a:	f7ff bffd 	b.w	11248 <z_SysNmiOnReset>
   1124e:	bf00      	nop

00011250 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11250:	4a0b      	ldr	r2, [pc, #44]	; (11280 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   11252:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11254:	4b0b      	ldr	r3, [pc, #44]	; (11284 <z_arm_prep_c+0x34>)
   11256:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1125a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1125c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11260:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11264:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11268:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1126c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11270:	f014 f950 	bl	25514 <z_bss_zero>
	z_data_copy();
   11274:	f015 f9ea 	bl	2664c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11278:	f000 fb96 	bl	119a8 <z_arm_interrupt_init>
	z_cstart();
   1127c:	f014 f98e 	bl	2559c <z_cstart>
   11280:	00008000 	.word	0x00008000
   11284:	e000ed00 	.word	0xe000ed00

00011288 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11288:	4a0a      	ldr	r2, [pc, #40]	; (112b4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1128a:	490b      	ldr	r1, [pc, #44]	; (112b8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1128c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1128e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   11290:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	_current->arch.swap_return_value = _k_neg_eagain;
   11294:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11298:	4908      	ldr	r1, [pc, #32]	; (112bc <arch_swap+0x34>)
   1129a:	684b      	ldr	r3, [r1, #4]
   1129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   112a0:	604b      	str	r3, [r1, #4]
   112a2:	2300      	movs	r3, #0
   112a4:	f383 8811 	msr	BASEPRI, r3
   112a8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   112ac:	6893      	ldr	r3, [r2, #8]
}
   112ae:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   112b2:	4770      	bx	lr
   112b4:	20030e50 	.word	0x20030e50
   112b8:	000341ec 	.word	0x000341ec
   112bc:	e000ed00 	.word	0xe000ed00

000112c0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   112c0:	4916      	ldr	r1, [pc, #88]	; (1131c <z_arm_pendsv+0x5c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   112c2:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   112c4:	f882 e0a1 	strb.w	lr, [r2, #161]	; 0xa1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   112c8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   112cc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   112ce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   112d2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   112d6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   112d8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   112dc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   112e0:	4f0f      	ldr	r7, [pc, #60]	; (11320 <z_arm_pendsv+0x60>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   112e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   112e6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   112e8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   112ea:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   112ec:	f992 e0a1 	ldrsb.w	lr, [r2, #161]	; 0xa1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   112f0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    movs r3, #0
   112f4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   112f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   112fa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   112fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11302:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11306:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1130a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1130e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   11310:	f01a fae6 	bl	2b8e0 <configure_builtin_stack_guard>
    pop {r2, lr}
   11314:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11318:	4770      	bx	lr
   1131a:	0000      	.short	0x0000
    ldr r1, =_kernel
   1131c:	20030e50 	.word	0x20030e50
    ldr v4, =_SCS_ICSR
   11320:	e000ed04 	.word	0xe000ed04

00011324 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11324:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11328:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1132a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1132e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11332:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11334:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11338:	2902      	cmp	r1, #2
    beq _oops
   1133a:	d0ff      	beq.n	1133c <_oops>

0001133c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1133c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1133e:	f01a fac0 	bl	2b8c2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   11342:	bd01      	pop	{r0, pc}

00011344 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11344:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11348:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1134a:	490d      	ldr	r1, [pc, #52]	; (11380 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   1134c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   11350:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   11352:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   11356:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1135a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1135c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   11360:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11368:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1136c:	2300      	movs	r3, #0
   1136e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   11372:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11376:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   11378:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1137a:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1137e:	4770      	bx	lr
   11380:	0002a29d 	.word	0x0002a29d

00011384 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11384:	4b09      	ldr	r3, [pc, #36]	; (113ac <arch_switch_to_main_thread+0x28>)
   11386:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   11388:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1138c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11390:	4610      	mov	r0, r2
   11392:	f381 8809 	msr	PSP, r1
   11396:	2100      	movs	r1, #0
   11398:	b663      	cpsie	if
   1139a:	f381 8811 	msr	BASEPRI, r1
   1139e:	f3bf 8f6f 	isb	sy
   113a2:	2200      	movs	r2, #0
   113a4:	2300      	movs	r3, #0
   113a6:	f018 ff79 	bl	2a29c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   113aa:	bf00      	nop
   113ac:	20030e50 	.word	0x20030e50

000113b0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   113b0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   113b2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   113b4:	4a0b      	ldr	r2, [pc, #44]	; (113e4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   113b6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   113b8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   113ba:	bf1e      	ittt	ne
	movne	r1, #0
   113bc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   113be:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   113c0:	f01f fd3c 	blne	30e3c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   113c4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   113c6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   113ca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   113ce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   113d2:	4905      	ldr	r1, [pc, #20]	; (113e8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   113d4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   113d6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   113d8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   113da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   113de:	4903      	ldr	r1, [pc, #12]	; (113ec <_isr_wrapper+0x3c>)
	bx r1
   113e0:	4708      	bx	r1
   113e2:	0000      	.short	0x0000
	ldr r2, =_kernel
   113e4:	20030e50 	.word	0x20030e50
	ldr r1, =_sw_isr_table
   113e8:	00032a58 	.word	0x00032a58
	ldr r1, =z_arm_int_exit
   113ec:	000113f1 	.word	0x000113f1

000113f0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   113f0:	4b04      	ldr	r3, [pc, #16]	; (11404 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   113f2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   113f4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   113f6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   113f8:	d003      	beq.n	11402 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   113fa:	4903      	ldr	r1, [pc, #12]	; (11408 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   113fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11400:	600a      	str	r2, [r1, #0]

00011402 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11402:	4770      	bx	lr
	ldr r3, =_kernel
   11404:	20030e50 	.word	0x20030e50
	ldr r1, =_SCS_ICSR
   11408:	e000ed04 	.word	0xe000ed04

0001140c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1140c:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1140e:	2400      	movs	r4, #0
   11410:	4b3d      	ldr	r3, [pc, #244]	; (11508 <mem_manage_fault.constprop.0+0xfc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11412:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   11414:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11416:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   11418:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1141a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1141c:	2201      	movs	r2, #1
   1141e:	4620      	mov	r0, r4
   11420:	e9cd 4400 	strd	r4, r4, [sp]
   11424:	4939      	ldr	r1, [pc, #228]	; (1150c <mem_manage_fault.constprop.0+0x100>)
   11426:	f01a fa60 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1142a:	4b39      	ldr	r3, [pc, #228]	; (11510 <mem_manage_fault.constprop.0+0x104>)
   1142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1142e:	06dd      	lsls	r5, r3, #27
   11430:	d509      	bpl.n	11446 <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11432:	4b38      	ldr	r3, [pc, #224]	; (11514 <mem_manage_fault.constprop.0+0x108>)
   11434:	2201      	movs	r2, #1
   11436:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1143a:	4620      	mov	r0, r4
   1143c:	4623      	mov	r3, r4
   1143e:	4933      	ldr	r1, [pc, #204]	; (1150c <mem_manage_fault.constprop.0+0x100>)
   11440:	9400      	str	r4, [sp, #0]
   11442:	f01a fa52 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11446:	4b32      	ldr	r3, [pc, #200]	; (11510 <mem_manage_fault.constprop.0+0x104>)
   11448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1144a:	0718      	lsls	r0, r3, #28
   1144c:	d509      	bpl.n	11462 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   1144e:	4b32      	ldr	r3, [pc, #200]	; (11518 <mem_manage_fault.constprop.0+0x10c>)
   11450:	2201      	movs	r2, #1
   11452:	9302      	str	r3, [sp, #8]
   11454:	2300      	movs	r3, #0
   11456:	492d      	ldr	r1, [pc, #180]	; (1150c <mem_manage_fault.constprop.0+0x100>)
   11458:	4618      	mov	r0, r3
   1145a:	e9cd 3300 	strd	r3, r3, [sp]
   1145e:	f01a fa44 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11462:	4d2b      	ldr	r5, [pc, #172]	; (11510 <mem_manage_fault.constprop.0+0x104>)
   11464:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11466:	0799      	lsls	r1, r3, #30
   11468:	d51e      	bpl.n	114a8 <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   1146a:	2400      	movs	r4, #0
   1146c:	4b2b      	ldr	r3, [pc, #172]	; (1151c <mem_manage_fault.constprop.0+0x110>)
   1146e:	2201      	movs	r2, #1
   11470:	9302      	str	r3, [sp, #8]
   11472:	4620      	mov	r0, r4
   11474:	4623      	mov	r3, r4
   11476:	e9cd 4400 	strd	r4, r4, [sp]
   1147a:	4924      	ldr	r1, [pc, #144]	; (1150c <mem_manage_fault.constprop.0+0x100>)
   1147c:	f01a fa35 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   11480:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11482:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11484:	0612      	lsls	r2, r2, #24
   11486:	d50f      	bpl.n	114a8 <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   11488:	9303      	str	r3, [sp, #12]
   1148a:	4b25      	ldr	r3, [pc, #148]	; (11520 <mem_manage_fault.constprop.0+0x114>)
   1148c:	2201      	movs	r2, #1
   1148e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11492:	4620      	mov	r0, r4
   11494:	4623      	mov	r3, r4
   11496:	491d      	ldr	r1, [pc, #116]	; (1150c <mem_manage_fault.constprop.0+0x100>)
   11498:	9400      	str	r4, [sp, #0]
   1149a:	f01a fa26 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   1149e:	b11f      	cbz	r7, 114a8 <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   114a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   114a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   114a6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   114a8:	4b19      	ldr	r3, [pc, #100]	; (11510 <mem_manage_fault.constprop.0+0x104>)
   114aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   114ac:	07dc      	lsls	r4, r3, #31
   114ae:	d509      	bpl.n	114c4 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   114b0:	4b1c      	ldr	r3, [pc, #112]	; (11524 <mem_manage_fault.constprop.0+0x118>)
   114b2:	2201      	movs	r2, #1
   114b4:	9302      	str	r3, [sp, #8]
   114b6:	2300      	movs	r3, #0
   114b8:	4914      	ldr	r1, [pc, #80]	; (1150c <mem_manage_fault.constprop.0+0x100>)
   114ba:	4618      	mov	r0, r3
   114bc:	e9cd 3300 	strd	r3, r3, [sp]
   114c0:	f01a fa13 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   114c4:	4b12      	ldr	r3, [pc, #72]	; (11510 <mem_manage_fault.constprop.0+0x104>)
   114c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   114c8:	0698      	lsls	r0, r3, #26
   114ca:	d509      	bpl.n	114e0 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   114cc:	4b16      	ldr	r3, [pc, #88]	; (11528 <mem_manage_fault.constprop.0+0x11c>)
   114ce:	2201      	movs	r2, #1
   114d0:	9302      	str	r3, [sp, #8]
   114d2:	2300      	movs	r3, #0
   114d4:	490d      	ldr	r1, [pc, #52]	; (1150c <mem_manage_fault.constprop.0+0x100>)
   114d6:	4618      	mov	r0, r3
   114d8:	e9cd 3300 	strd	r3, r3, [sp]
   114dc:	f01a fa05 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   114e0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   114e2:	4b0b      	ldr	r3, [pc, #44]	; (11510 <mem_manage_fault.constprop.0+0x104>)
   114e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   114e6:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   114e8:	bf58      	it	pl
   114ea:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   114ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   114ee:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   114f0:	bf42      	ittt	mi
   114f2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   114f4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   114f8:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   114fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   114fc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11500:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11502:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11504:	b005      	add	sp, #20
   11506:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11508:	00035716 	.word	0x00035716
   1150c:	00033100 	.word	0x00033100
   11510:	e000ed00 	.word	0xe000ed00
   11514:	0003572c 	.word	0x0003572c
   11518:	0003575f 	.word	0x0003575f
   1151c:	00035772 	.word	0x00035772
   11520:	0003578a 	.word	0x0003578a
   11524:	000357a0 	.word	0x000357a0
   11528:	000357bf 	.word	0x000357bf

0001152c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1152c:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1152e:	2400      	movs	r4, #0
   11530:	4b3b      	ldr	r3, [pc, #236]	; (11620 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11532:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   11534:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11536:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   11538:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1153a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1153c:	2201      	movs	r2, #1
   1153e:	4620      	mov	r0, r4
   11540:	e9cd 4400 	strd	r4, r4, [sp]
   11544:	4937      	ldr	r1, [pc, #220]	; (11624 <bus_fault.constprop.0+0xf8>)
   11546:	f01a f9d0 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1154a:	4b37      	ldr	r3, [pc, #220]	; (11628 <bus_fault.constprop.0+0xfc>)
   1154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1154e:	04db      	lsls	r3, r3, #19
   11550:	d509      	bpl.n	11566 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   11552:	4b36      	ldr	r3, [pc, #216]	; (1162c <bus_fault.constprop.0+0x100>)
   11554:	2201      	movs	r2, #1
   11556:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1155a:	4620      	mov	r0, r4
   1155c:	4623      	mov	r3, r4
   1155e:	4931      	ldr	r1, [pc, #196]	; (11624 <bus_fault.constprop.0+0xf8>)
   11560:	9400      	str	r4, [sp, #0]
   11562:	f01a f9c2 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11566:	4b30      	ldr	r3, [pc, #192]	; (11628 <bus_fault.constprop.0+0xfc>)
   11568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1156a:	051d      	lsls	r5, r3, #20
   1156c:	d509      	bpl.n	11582 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   1156e:	4b30      	ldr	r3, [pc, #192]	; (11630 <bus_fault.constprop.0+0x104>)
   11570:	2201      	movs	r2, #1
   11572:	9302      	str	r3, [sp, #8]
   11574:	2300      	movs	r3, #0
   11576:	492b      	ldr	r1, [pc, #172]	; (11624 <bus_fault.constprop.0+0xf8>)
   11578:	4618      	mov	r0, r3
   1157a:	e9cd 3300 	strd	r3, r3, [sp]
   1157e:	f01a f9b4 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11582:	4d29      	ldr	r5, [pc, #164]	; (11628 <bus_fault.constprop.0+0xfc>)
   11584:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11586:	059c      	lsls	r4, r3, #22
   11588:	d51e      	bpl.n	115c8 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   1158a:	2400      	movs	r4, #0
   1158c:	4b29      	ldr	r3, [pc, #164]	; (11634 <bus_fault.constprop.0+0x108>)
   1158e:	2201      	movs	r2, #1
   11590:	4620      	mov	r0, r4
   11592:	9302      	str	r3, [sp, #8]
   11594:	e9cd 4400 	strd	r4, r4, [sp]
   11598:	4623      	mov	r3, r4
   1159a:	4922      	ldr	r1, [pc, #136]	; (11624 <bus_fault.constprop.0+0xf8>)
   1159c:	f01a f9a5 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   115a0:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   115a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   115a4:	0410      	lsls	r0, r2, #16
   115a6:	d50f      	bpl.n	115c8 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   115a8:	9303      	str	r3, [sp, #12]
   115aa:	4b23      	ldr	r3, [pc, #140]	; (11638 <bus_fault.constprop.0+0x10c>)
   115ac:	2201      	movs	r2, #1
   115ae:	e9cd 4301 	strd	r4, r3, [sp, #4]
   115b2:	4620      	mov	r0, r4
   115b4:	4623      	mov	r3, r4
   115b6:	491b      	ldr	r1, [pc, #108]	; (11624 <bus_fault.constprop.0+0xf8>)
   115b8:	9400      	str	r4, [sp, #0]
   115ba:	f01a f996 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   115be:	b11f      	cbz	r7, 115c8 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   115c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   115c6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   115c8:	4b17      	ldr	r3, [pc, #92]	; (11628 <bus_fault.constprop.0+0xfc>)
   115ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115cc:	0559      	lsls	r1, r3, #21
   115ce:	d509      	bpl.n	115e4 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   115d0:	4b1a      	ldr	r3, [pc, #104]	; (1163c <bus_fault.constprop.0+0x110>)
   115d2:	2201      	movs	r2, #1
   115d4:	9302      	str	r3, [sp, #8]
   115d6:	2300      	movs	r3, #0
   115d8:	4912      	ldr	r1, [pc, #72]	; (11624 <bus_fault.constprop.0+0xf8>)
   115da:	4618      	mov	r0, r3
   115dc:	e9cd 3300 	strd	r3, r3, [sp]
   115e0:	f01a f983 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   115e4:	4a10      	ldr	r2, [pc, #64]	; (11628 <bus_fault.constprop.0+0xfc>)
   115e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   115e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   115ec:	d012      	beq.n	11614 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   115ee:	4b14      	ldr	r3, [pc, #80]	; (11640 <bus_fault.constprop.0+0x114>)
   115f0:	9302      	str	r3, [sp, #8]
   115f2:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   115f4:	2201      	movs	r2, #1
   115f6:	4618      	mov	r0, r3
   115f8:	e9cd 3300 	strd	r3, r3, [sp]
   115fc:	4909      	ldr	r1, [pc, #36]	; (11624 <bus_fault.constprop.0+0xf8>)
   115fe:	f01a f974 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   11602:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11604:	4a08      	ldr	r2, [pc, #32]	; (11628 <bus_fault.constprop.0+0xfc>)
   11606:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11608:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1160c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1160e:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11610:	b005      	add	sp, #20
   11612:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11614:	6a92      	ldr	r2, [r2, #40]	; 0x28
   11616:	0492      	lsls	r2, r2, #18
   11618:	d5f3      	bpl.n	11602 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1161a:	4a0a      	ldr	r2, [pc, #40]	; (11644 <bus_fault.constprop.0+0x118>)
   1161c:	9202      	str	r2, [sp, #8]
   1161e:	e7e9      	b.n	115f4 <bus_fault.constprop.0+0xc8>
   11620:	000357ee 	.word	0x000357ee
   11624:	00033100 	.word	0x00033100
   11628:	e000ed00 	.word	0xe000ed00
   1162c:	00035804 	.word	0x00035804
   11630:	0003575f 	.word	0x0003575f
   11634:	00035815 	.word	0x00035815
   11638:	0003582e 	.word	0x0003582e
   1163c:	00035843 	.word	0x00035843
   11640:	0003585e 	.word	0x0003585e
   11644:	000357bf 	.word	0x000357bf

00011648 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   11648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1164a:	2400      	movs	r4, #0
   1164c:	4b3b      	ldr	r3, [pc, #236]	; (1173c <usage_fault.constprop.0+0xf4>)
   1164e:	2201      	movs	r2, #1
   11650:	9302      	str	r3, [sp, #8]
   11652:	4620      	mov	r0, r4
   11654:	4623      	mov	r3, r4
   11656:	e9cd 4400 	strd	r4, r4, [sp]
   1165a:	4939      	ldr	r1, [pc, #228]	; (11740 <usage_fault.constprop.0+0xf8>)
   1165c:	f01a f945 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11660:	4b38      	ldr	r3, [pc, #224]	; (11744 <usage_fault.constprop.0+0xfc>)
   11662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11664:	019b      	lsls	r3, r3, #6
   11666:	d509      	bpl.n	1167c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   11668:	4b37      	ldr	r3, [pc, #220]	; (11748 <usage_fault.constprop.0+0x100>)
   1166a:	2201      	movs	r2, #1
   1166c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11670:	4620      	mov	r0, r4
   11672:	4623      	mov	r3, r4
   11674:	4932      	ldr	r1, [pc, #200]	; (11740 <usage_fault.constprop.0+0xf8>)
   11676:	9400      	str	r4, [sp, #0]
   11678:	f01a f937 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1167c:	4b31      	ldr	r3, [pc, #196]	; (11744 <usage_fault.constprop.0+0xfc>)
   1167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11680:	01dc      	lsls	r4, r3, #7
   11682:	d509      	bpl.n	11698 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   11684:	4b31      	ldr	r3, [pc, #196]	; (1174c <usage_fault.constprop.0+0x104>)
   11686:	2201      	movs	r2, #1
   11688:	9302      	str	r3, [sp, #8]
   1168a:	2300      	movs	r3, #0
   1168c:	492c      	ldr	r1, [pc, #176]	; (11740 <usage_fault.constprop.0+0xf8>)
   1168e:	4618      	mov	r0, r3
   11690:	e9cd 3300 	strd	r3, r3, [sp]
   11694:	f01a f929 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   11698:	4b2a      	ldr	r3, [pc, #168]	; (11744 <usage_fault.constprop.0+0xfc>)
   1169a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1169c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   116a0:	d00a      	beq.n	116b8 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   116a2:	4b2b      	ldr	r3, [pc, #172]	; (11750 <usage_fault.constprop.0+0x108>)
   116a4:	2201      	movs	r2, #1
   116a6:	9302      	str	r3, [sp, #8]
   116a8:	2300      	movs	r3, #0
   116aa:	4925      	ldr	r1, [pc, #148]	; (11740 <usage_fault.constprop.0+0xf8>)
   116ac:	4618      	mov	r0, r3
   116ae:	e9cd 3300 	strd	r3, r3, [sp]
   116b2:	f01a f91a 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   116b6:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   116b8:	4b22      	ldr	r3, [pc, #136]	; (11744 <usage_fault.constprop.0+0xfc>)
   116ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   116bc:	0318      	lsls	r0, r3, #12
   116be:	d509      	bpl.n	116d4 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   116c0:	4b24      	ldr	r3, [pc, #144]	; (11754 <usage_fault.constprop.0+0x10c>)
   116c2:	2201      	movs	r2, #1
   116c4:	9302      	str	r3, [sp, #8]
   116c6:	2300      	movs	r3, #0
   116c8:	491d      	ldr	r1, [pc, #116]	; (11740 <usage_fault.constprop.0+0xf8>)
   116ca:	4618      	mov	r0, r3
   116cc:	e9cd 3300 	strd	r3, r3, [sp]
   116d0:	f01a f90b 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   116d4:	4b1b      	ldr	r3, [pc, #108]	; (11744 <usage_fault.constprop.0+0xfc>)
   116d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   116d8:	0359      	lsls	r1, r3, #13
   116da:	d509      	bpl.n	116f0 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   116dc:	4b1e      	ldr	r3, [pc, #120]	; (11758 <usage_fault.constprop.0+0x110>)
   116de:	2201      	movs	r2, #1
   116e0:	9302      	str	r3, [sp, #8]
   116e2:	2300      	movs	r3, #0
   116e4:	4916      	ldr	r1, [pc, #88]	; (11740 <usage_fault.constprop.0+0xf8>)
   116e6:	4618      	mov	r0, r3
   116e8:	e9cd 3300 	strd	r3, r3, [sp]
   116ec:	f01a f8fd 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   116f0:	4b14      	ldr	r3, [pc, #80]	; (11744 <usage_fault.constprop.0+0xfc>)
   116f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   116f4:	039a      	lsls	r2, r3, #14
   116f6:	d509      	bpl.n	1170c <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   116f8:	4b18      	ldr	r3, [pc, #96]	; (1175c <usage_fault.constprop.0+0x114>)
   116fa:	2201      	movs	r2, #1
   116fc:	9302      	str	r3, [sp, #8]
   116fe:	2300      	movs	r3, #0
   11700:	490f      	ldr	r1, [pc, #60]	; (11740 <usage_fault.constprop.0+0xf8>)
   11702:	4618      	mov	r0, r3
   11704:	e9cd 3300 	strd	r3, r3, [sp]
   11708:	f01a f8ef 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1170c:	4b0d      	ldr	r3, [pc, #52]	; (11744 <usage_fault.constprop.0+0xfc>)
   1170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11710:	03db      	lsls	r3, r3, #15
   11712:	d509      	bpl.n	11728 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11714:	4b12      	ldr	r3, [pc, #72]	; (11760 <usage_fault.constprop.0+0x118>)
   11716:	2201      	movs	r2, #1
   11718:	9302      	str	r3, [sp, #8]
   1171a:	2300      	movs	r3, #0
   1171c:	4908      	ldr	r1, [pc, #32]	; (11740 <usage_fault.constprop.0+0xf8>)
   1171e:	4618      	mov	r0, r3
   11720:	e9cd 3300 	strd	r3, r3, [sp]
   11724:	f01a f8e1 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11728:	4a06      	ldr	r2, [pc, #24]	; (11744 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   1172a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1172c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1172e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11732:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11736:	6293      	str	r3, [r2, #40]	; 0x28
}
   11738:	b004      	add	sp, #16
   1173a:	bd10      	pop	{r4, pc}
   1173c:	00035876 	.word	0x00035876
   11740:	00033100 	.word	0x00033100
   11744:	e000ed00 	.word	0xe000ed00
   11748:	0003588e 	.word	0x0003588e
   1174c:	000358a1 	.word	0x000358a1
   11750:	000358bb 	.word	0x000358bb
   11754:	000358e5 	.word	0x000358e5
   11758:	00035903 	.word	0x00035903
   1175c:	00035928 	.word	0x00035928
   11760:	00035942 	.word	0x00035942

00011764 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11768:	4b78      	ldr	r3, [pc, #480]	; (1194c <z_arm_fault+0x1e8>)
{
   1176a:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1176c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   11770:	4689      	mov	r9, r1
   11772:	4616      	mov	r6, r2
   11774:	2500      	movs	r5, #0
   11776:	b091      	sub	sp, #68	; 0x44
   11778:	f3c8 0708 	ubfx	r7, r8, #0, #9
   1177c:	f385 8811 	msr	BASEPRI, r5
   11780:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11784:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11788:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1178c:	d125      	bne.n	117da <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1178e:	f012 0301 	ands.w	r3, r2, #1
   11792:	d122      	bne.n	117da <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11794:	0651      	lsls	r1, r2, #25
   11796:	d403      	bmi.n	117a0 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11798:	0732      	lsls	r2, r6, #28
   1179a:	d40d      	bmi.n	117b8 <z_arm_fault+0x54>
			*nested_exc = true;
   1179c:	2501      	movs	r5, #1
   1179e:	e00d      	b.n	117bc <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
   117a0:	4a6b      	ldr	r2, [pc, #428]	; (11950 <z_arm_fault+0x1ec>)
   117a2:	4618      	mov	r0, r3
   117a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   117a8:	496a      	ldr	r1, [pc, #424]	; (11954 <z_arm_fault+0x1f0>)
   117aa:	2201      	movs	r2, #1
   117ac:	9300      	str	r3, [sp, #0]
   117ae:	f01a f89c 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   117b2:	f016 0604 	ands.w	r6, r6, #4
   117b6:	d000      	beq.n	117ba <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
   117b8:	464c      	mov	r4, r9
	*nested_exc = false;
   117ba:	2500      	movs	r5, #0
	*recoverable = false;
   117bc:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
   117c0:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   117c2:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
   117c6:	2b09      	cmp	r3, #9
   117c8:	f200 80a6 	bhi.w	11918 <z_arm_fault+0x1b4>
   117cc:	e8df f003 	tbb	[pc, r3]
   117d0:	969e9a07 	.word	0x969e9a07
   117d4:	a4a4a4a4 	.word	0xa4a4a4a4
   117d8:	a2a4      	.short	0xa2a4
		return NULL;
   117da:	462c      	mov	r4, r5
   117dc:	e7ee      	b.n	117bc <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
   117de:	4b5e      	ldr	r3, [pc, #376]	; (11958 <z_arm_fault+0x1f4>)
   117e0:	2201      	movs	r2, #1
   117e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
   117e6:	2300      	movs	r3, #0
   117e8:	495a      	ldr	r1, [pc, #360]	; (11954 <z_arm_fault+0x1f0>)
   117ea:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   117ec:	4f57      	ldr	r7, [pc, #348]	; (1194c <z_arm_fault+0x1e8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   117ee:	f8cd 9000 	str.w	r9, [sp]
   117f2:	f01a f87a 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   117f6:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   117fa:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   117fc:	f016 0602 	ands.w	r6, r6, #2
   11800:	d005      	beq.n	1180e <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   11802:	4b56      	ldr	r3, [pc, #344]	; (1195c <z_arm_fault+0x1f8>)
	PR_FAULT_INFO(
   11804:	e9cd 9301 	strd	r9, r3, [sp, #4]
   11808:	f8cd 9000 	str.w	r9, [sp]
   1180c:	e006      	b.n	1181c <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11810:	2b00      	cmp	r3, #0
   11812:	da0b      	bge.n	1182c <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
   11814:	4b52      	ldr	r3, [pc, #328]	; (11960 <z_arm_fault+0x1fc>)
   11816:	9600      	str	r6, [sp, #0]
   11818:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   1181c:	2300      	movs	r3, #0
   1181e:	2201      	movs	r2, #1
   11820:	4618      	mov	r0, r3
   11822:	494c      	ldr	r1, [pc, #304]	; (11954 <z_arm_fault+0x1f0>)
   11824:	f01a f861 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11828:	2300      	movs	r3, #0
   1182a:	e030      	b.n	1188e <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1182e:	005b      	lsls	r3, r3, #1
   11830:	d5fa      	bpl.n	11828 <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
   11832:	4b4c      	ldr	r3, [pc, #304]	; (11964 <z_arm_fault+0x200>)
   11834:	2201      	movs	r2, #1
   11836:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1183a:	4630      	mov	r0, r6
   1183c:	4633      	mov	r3, r6
   1183e:	4945      	ldr	r1, [pc, #276]	; (11954 <z_arm_fault+0x1f0>)
   11840:	9600      	str	r6, [sp, #0]
   11842:	f01a f852 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11846:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11848:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1184e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11850:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11854:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11858:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1185a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1185e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11862:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11868:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1186c:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11870:	429a      	cmp	r2, r3
   11872:	d12c      	bne.n	118ce <z_arm_fault+0x16a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11874:	6823      	ldr	r3, [r4, #0]
   11876:	2201      	movs	r2, #1
   11878:	9303      	str	r3, [sp, #12]
   1187a:	4b3b      	ldr	r3, [pc, #236]	; (11968 <z_arm_fault+0x204>)
   1187c:	4630      	mov	r0, r6
   1187e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11882:	4934      	ldr	r1, [pc, #208]	; (11954 <z_arm_fault+0x1f0>)
   11884:	4633      	mov	r3, r6
   11886:	9600      	str	r6, [sp, #0]
   11888:	f01a f82f 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   1188c:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1188e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11892:	b9ca      	cbnz	r2, 118c8 <z_arm_fault+0x164>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11894:	ae08      	add	r6, sp, #32
   11896:	f104 0720 	add.w	r7, r4, #32
   1189a:	4632      	mov	r2, r6
   1189c:	6820      	ldr	r0, [r4, #0]
   1189e:	6861      	ldr	r1, [r4, #4]
   118a0:	3408      	adds	r4, #8
   118a2:	c203      	stmia	r2!, {r0, r1}
   118a4:	42bc      	cmp	r4, r7
   118a6:	4616      	mov	r6, r2
   118a8:	d1f7      	bne.n	1189a <z_arm_fault+0x136>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   118aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   118ac:	2d00      	cmp	r5, #0
   118ae:	d047      	beq.n	11940 <z_arm_fault+0x1dc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   118b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
   118b4:	b921      	cbnz	r1, 118c0 <z_arm_fault+0x15c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   118b6:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   118ba:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   118be:	920f      	str	r2, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   118c0:	4618      	mov	r0, r3
   118c2:	a908      	add	r1, sp, #32
   118c4:	f7ff fc2a 	bl	1111c <z_arm_fatal_error>
}
   118c8:	b011      	add	sp, #68	; 0x44
   118ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   118ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   118d0:	b2db      	uxtb	r3, r3
   118d2:	b12b      	cbz	r3, 118e0 <z_arm_fault+0x17c>
			reason = mem_manage_fault(esf, 1, recoverable);
   118d4:	2001      	movs	r0, #1
   118d6:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   118da:	f7ff fd97 	bl	1140c <mem_manage_fault.constprop.0>
   118de:	e00f      	b.n	11900 <z_arm_fault+0x19c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   118e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   118e2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   118e6:	d005      	beq.n	118f4 <z_arm_fault+0x190>
			reason = bus_fault(esf, 1, recoverable);
   118e8:	2001      	movs	r0, #1
   118ea:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   118ee:	f7ff fe1d 	bl	1152c <bus_fault.constprop.0>
   118f2:	e005      	b.n	11900 <z_arm_fault+0x19c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   118f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   118f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   118fa:	d395      	bcc.n	11828 <z_arm_fault+0xc4>
			reason = usage_fault(esf);
   118fc:	f7ff fea4 	bl	11648 <usage_fault.constprop.0>
   11900:	4603      	mov	r3, r0
   11902:	e7c4      	b.n	1188e <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
   11904:	2000      	movs	r0, #0
   11906:	f10d 011f 	add.w	r1, sp, #31
   1190a:	e7e6      	b.n	118da <z_arm_fault+0x176>
		reason = bus_fault(esf, 0, recoverable);
   1190c:	2000      	movs	r0, #0
   1190e:	f10d 011f 	add.w	r1, sp, #31
   11912:	e7ec      	b.n	118ee <z_arm_fault+0x18a>
	PR_FAULT_INFO(
   11914:	4b15      	ldr	r3, [pc, #84]	; (1196c <z_arm_fault+0x208>)
   11916:	e775      	b.n	11804 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
   11918:	4a15      	ldr	r2, [pc, #84]	; (11970 <z_arm_fault+0x20c>)
   1191a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1191e:	4b15      	ldr	r3, [pc, #84]	; (11974 <z_arm_fault+0x210>)
   11920:	bf18      	it	ne
   11922:	4613      	movne	r3, r2
   11924:	3f10      	subs	r7, #16
   11926:	e9cd 3703 	strd	r3, r7, [sp, #12]
   1192a:	4b13      	ldr	r3, [pc, #76]	; (11978 <z_arm_fault+0x214>)
   1192c:	2201      	movs	r2, #1
   1192e:	9302      	str	r3, [sp, #8]
   11930:	2300      	movs	r3, #0
   11932:	4908      	ldr	r1, [pc, #32]	; (11954 <z_arm_fault+0x1f0>)
   11934:	4618      	mov	r0, r3
   11936:	e9cd 3300 	strd	r3, r3, [sp]
   1193a:	f019 ffd6 	bl	2b8ea <z_log_msg_runtime_create.constprop.0>
}
   1193e:	e773      	b.n	11828 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11940:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   11944:	f022 0201 	bic.w	r2, r2, #1
   11948:	e7b9      	b.n	118be <z_arm_fault+0x15a>
   1194a:	bf00      	nop
   1194c:	e000ed00 	.word	0xe000ed00
   11950:	0003599b 	.word	0x0003599b
   11954:	00033100 	.word	0x00033100
   11958:	000359be 	.word	0x000359be
   1195c:	000359d5 	.word	0x000359d5
   11960:	000359f6 	.word	0x000359f6
   11964:	00035a04 	.word	0x00035a04
   11968:	00035a23 	.word	0x00035a23
   1196c:	00035a3f 	.word	0x00035a3f
   11970:	00035982 	.word	0x00035982
   11974:	0003596d 	.word	0x0003596d
   11978:	00035a63 	.word	0x00035a63

0001197c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1197c:	4b04      	ldr	r3, [pc, #16]	; (11990 <z_arm_fault_init+0x14>)
   1197e:	695a      	ldr	r2, [r3, #20]
   11980:	f042 0210 	orr.w	r2, r2, #16
   11984:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   11986:	695a      	ldr	r2, [r3, #20]
   11988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1198c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1198e:	4770      	bx	lr
   11990:	e000ed00 	.word	0xe000ed00

00011994 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11994:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11998:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1199c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1199e:	4672      	mov	r2, lr
	bl z_arm_fault
   119a0:	f7ff fee0 	bl	11764 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   119a4:	bd01      	pop	{r0, pc}
   119a6:	bf00      	nop

000119a8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   119a8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119aa:	2120      	movs	r1, #32
   119ac:	4803      	ldr	r0, [pc, #12]	; (119bc <z_arm_interrupt_init+0x14>)
   119ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   119b0:	3301      	adds	r3, #1
   119b2:	2b45      	cmp	r3, #69	; 0x45
   119b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   119b8:	d1f9      	bne.n	119ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   119ba:	4770      	bx	lr
   119bc:	e000e100 	.word	0xe000e100

000119c0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   119c0:	2000      	movs	r0, #0
    msr CONTROL, r0
   119c2:	f380 8814 	msr	CONTROL, r0
    isb
   119c6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   119ca:	2000      	movs	r0, #0
    msr MSPLIM, r0
   119cc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   119d0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   119d4:	f7fd fca8 	bl	f328 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   119d8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   119da:	490e      	ldr	r1, [pc, #56]	; (11a14 <__start+0x54>)
    str r0, [r1]
   119dc:	6008      	str	r0, [r1, #0]
    dsb
   119de:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   119e2:	480d      	ldr	r0, [pc, #52]	; (11a18 <__start+0x58>)
    msr msp, r0
   119e4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   119e8:	f000 f83e 	bl	11a68 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   119ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
   119ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   119f2:	480a      	ldr	r0, [pc, #40]	; (11a1c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   119f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   119f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   119fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   119fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11a02:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11a04:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11a06:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11a0a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11a0e:	f7ff fc1f 	bl	11250 <z_arm_prep_c>
   11a12:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   11a14:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11a18:	20054b98 	.word	0x20054b98
    ldr r0, =z_interrupt_stacks
   11a1c:	20053e58 	.word	0x20053e58

00011a20 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11a20:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11a24:	4905      	ldr	r1, [pc, #20]	; (11a3c <sys_arch_reboot+0x1c>)
   11a26:	4b06      	ldr	r3, [pc, #24]	; (11a40 <sys_arch_reboot+0x20>)
   11a28:	68ca      	ldr	r2, [r1, #12]
   11a2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11a2e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11a30:	60cb      	str	r3, [r1, #12]
   11a32:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11a36:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11a38:	e7fd      	b.n	11a36 <sys_arch_reboot+0x16>
   11a3a:	bf00      	nop
   11a3c:	e000ed00 	.word	0xe000ed00
   11a40:	05fa0004 	.word	0x05fa0004

00011a44 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   11a44:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   11a46:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11a48:	4906      	ldr	r1, [pc, #24]	; (11a64 <z_arm_clear_arm_mpu_config+0x20>)
   11a4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   11a4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   11a52:	4293      	cmp	r3, r2
   11a54:	db00      	blt.n	11a58 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   11a56:	4770      	bx	lr
  mpu->RNR = rnr;
   11a58:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   11a5c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11a60:	3301      	adds	r3, #1
   11a62:	e7f6      	b.n	11a52 <z_arm_clear_arm_mpu_config+0xe>
   11a64:	e000ed00 	.word	0xe000ed00

00011a68 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11a68:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11a6a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11a6c:	2400      	movs	r4, #0
   11a6e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11a72:	f7ff ffe7 	bl	11a44 <z_arm_clear_arm_mpu_config>
   11a76:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11a78:	f04f 30ff 	mov.w	r0, #4294967295
   11a7c:	4a0c      	ldr	r2, [pc, #48]	; (11ab0 <z_arm_init_arch_hw_at_boot+0x48>)
   11a7e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11a82:	3301      	adds	r3, #1
   11a84:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   11a86:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11a8a:	d1f8      	bne.n	11a7e <z_arm_init_arch_hw_at_boot+0x16>
   11a8c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11a8e:	f04f 30ff 	mov.w	r0, #4294967295
   11a92:	4a07      	ldr	r2, [pc, #28]	; (11ab0 <z_arm_init_arch_hw_at_boot+0x48>)
   11a94:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11a98:	3301      	adds	r3, #1
   11a9a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11a9c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11aa0:	d1f8      	bne.n	11a94 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   11aa2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11aa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11aa8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11aac:	bd10      	pop	{r4, pc}
   11aae:	bf00      	nop
   11ab0:	e000e100 	.word	0xe000e100

00011ab4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11ab4:	4b08      	ldr	r3, [pc, #32]	; (11ad8 <z_impl_k_thread_abort+0x24>)
   11ab6:	689b      	ldr	r3, [r3, #8]
   11ab8:	4283      	cmp	r3, r0
   11aba:	d10b      	bne.n	11ad4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11abc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11ac0:	b143      	cbz	r3, 11ad4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11ac2:	4b06      	ldr	r3, [pc, #24]	; (11adc <z_impl_k_thread_abort+0x28>)
   11ac4:	685a      	ldr	r2, [r3, #4]
   11ac6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11aca:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11ad2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11ad4:	f014 bd48 	b.w	26568 <z_thread_abort>
   11ad8:	20030e50 	.word	0x20030e50
   11adc:	e000ed00 	.word	0xe000ed00

00011ae0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11ae2:	4c09      	ldr	r4, [pc, #36]	; (11b08 <z_arm_configure_static_mpu_regions+0x28>)
   11ae4:	4a09      	ldr	r2, [pc, #36]	; (11b0c <z_arm_configure_static_mpu_regions+0x2c>)
   11ae6:	4623      	mov	r3, r4
   11ae8:	2101      	movs	r1, #1
   11aea:	4809      	ldr	r0, [pc, #36]	; (11b10 <z_arm_configure_static_mpu_regions+0x30>)
   11aec:	f000 f918 	bl	11d20 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11af0:	2300      	movs	r3, #0
   11af2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11af4:	4b07      	ldr	r3, [pc, #28]	; (11b14 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11af6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11af8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11afa:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11afc:	9301      	str	r3, [sp, #4]
   11afe:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11b00:	f000 f918 	bl	11d34 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11b04:	b004      	add	sp, #16
   11b06:	bd10      	pop	{r4, pc}
   11b08:	20070000 	.word	0x20070000
   11b0c:	20008000 	.word	0x20008000
   11b10:	000338a4 	.word	0x000338a4
   11b14:	20008fe8 	.word	0x20008fe8

00011b18 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11b18:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11b1a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11b1c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11b1e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11b22:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11b26:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11b28:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11b2a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11b2c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   11b30:	4905      	ldr	r1, [pc, #20]	; (11b48 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11b32:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11b36:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   11b3a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   11b3e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   11b42:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11b46:	bd10      	pop	{r4, pc}
   11b48:	e000ed00 	.word	0xe000ed00

00011b4c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   11b4c:	2807      	cmp	r0, #7
{
   11b4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11b50:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   11b52:	d90f      	bls.n	11b74 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11b54:	4b09      	ldr	r3, [pc, #36]	; (11b7c <region_allocate_and_init+0x30>)
   11b56:	9003      	str	r0, [sp, #12]
   11b58:	9302      	str	r3, [sp, #8]
   11b5a:	2300      	movs	r3, #0
   11b5c:	2201      	movs	r2, #1
   11b5e:	4618      	mov	r0, r3
   11b60:	e9cd 3300 	strd	r3, r3, [sp]
   11b64:	4906      	ldr	r1, [pc, #24]	; (11b80 <region_allocate_and_init+0x34>)
   11b66:	f019 fedb 	bl	2b920 <z_log_msg_runtime_create.constprop.0>
   11b6a:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11b6e:	4620      	mov	r0, r4
   11b70:	b004      	add	sp, #16
   11b72:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   11b74:	f7ff ffd0 	bl	11b18 <region_init>
	return index;
   11b78:	e7f9      	b.n	11b6e <region_allocate_and_init+0x22>
   11b7a:	bf00      	nop
   11b7c:	00035a7a 	.word	0x00035a7a
   11b80:	000330e8 	.word	0x000330e8

00011b84 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b88:	4689      	mov	r9, r1
   11b8a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11b8c:	4606      	mov	r6, r0
   11b8e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   11b92:	4d54      	ldr	r5, [pc, #336]	; (11ce4 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11b94:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   11b96:	45c8      	cmp	r8, r9
   11b98:	da2d      	bge.n	11bf6 <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   11b9a:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11b9e:	f1ba 0f00 	cmp.w	sl, #0
   11ba2:	d04a      	beq.n	11c3a <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   11ba4:	f1ba 0f1f 	cmp.w	sl, #31
   11ba8:	d917      	bls.n	11bda <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   11baa:	f01a 0f1f 	tst.w	sl, #31
   11bae:	d114      	bne.n	11bda <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   11bb0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11bb4:	f01b 0f1f 	tst.w	fp, #31
   11bb8:	d10f      	bne.n	11bda <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11bba:	4658      	mov	r0, fp
   11bbc:	f019 fea7 	bl	2b90e <arm_cmse_mpu_region_get>
   11bc0:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11bc2:	eb0a 000b 	add.w	r0, sl, fp
   11bc6:	3801      	subs	r0, #1
   11bc8:	f019 fea1 	bl	2b90e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11bcc:	4287      	cmp	r7, r0
   11bce:	d016      	beq.n	11bfe <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11bd0:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11bd4:	4b44      	ldr	r3, [pc, #272]	; (11ce8 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   11bd6:	9703      	str	r7, [sp, #12]
   11bd8:	e002      	b.n	11be0 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11bda:	4b44      	ldr	r3, [pc, #272]	; (11cec <mpu_configure_regions_and_partition.constprop.0+0x168>)
   11bdc:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   11be0:	9302      	str	r3, [sp, #8]
   11be2:	2300      	movs	r3, #0
   11be4:	2201      	movs	r2, #1
   11be6:	4618      	mov	r0, r3
   11be8:	e9cd 3300 	strd	r3, r3, [sp]
   11bec:	4940      	ldr	r1, [pc, #256]	; (11cf0 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   11bee:	f019 fe97 	bl	2b920 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   11bf2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11bf6:	4620      	mov	r0, r4
   11bf8:	b009      	add	sp, #36	; 0x24
   11bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11bfe:	f117 0f16 	cmn.w	r7, #22
   11c02:	d0e7      	beq.n	11bd4 <mpu_configure_regions_and_partition.constprop.0+0x50>
   11c04:	42bc      	cmp	r4, r7
   11c06:	dde5      	ble.n	11bd4 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   11c08:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11c0c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   11c10:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11c14:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11c18:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11c1c:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11c20:	e9d6 3200 	ldrd	r3, r2, [r6]
   11c24:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   11c26:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11c28:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   11c2c:	d11d      	bne.n	11c6a <mpu_configure_regions_and_partition.constprop.0+0xe6>
   11c2e:	45d3      	cmp	fp, sl
   11c30:	d107      	bne.n	11c42 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   11c32:	4631      	mov	r1, r6
   11c34:	b2f8      	uxtb	r0, r7
   11c36:	f019 fe83 	bl	2b940 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11c3a:	f108 0801 	add.w	r8, r8, #1
   11c3e:	360c      	adds	r6, #12
   11c40:	e7a9      	b.n	11b96 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   11c42:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   11c44:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11c48:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   11c4c:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   11c50:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   11c54:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   11c56:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   11c5a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   11c5c:	f019 fe70 	bl	2b940 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11c60:	f110 0f16 	cmn.w	r0, #22
   11c64:	d0c5      	beq.n	11bf2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   11c66:	1c44      	adds	r4, r0, #1
   11c68:	e7e7      	b.n	11c3a <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   11c6a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11c6e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   11c72:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11c74:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11c78:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11c7c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11c7e:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   11c80:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   11c82:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   11c84:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   11c88:	d0e8      	beq.n	11c5c <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   11c8a:	f019 fe59 	bl	2b940 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11c8e:	f110 0f16 	cmn.w	r0, #22
   11c92:	d0ae      	beq.n	11bf2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   11c94:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11c98:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11c9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   11ca0:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   11ca4:	f362 0304 	bfi	r3, r2, #0, #5
   11ca8:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   11cac:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11cb0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11cb4:	085b      	lsrs	r3, r3, #1
   11cb6:	f363 1247 	bfi	r2, r3, #5, #3
   11cba:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   11cbe:	e9d6 3200 	ldrd	r3, r2, [r6]
   11cc2:	4413      	add	r3, r2
   11cc4:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11cc6:	f023 031f 	bic.w	r3, r3, #31
   11cca:	445b      	add	r3, fp
   11ccc:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   11cd0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11cd2:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   11cd6:	a904      	add	r1, sp, #16
   11cd8:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   11cda:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   11cdc:	f7ff ff36 	bl	11b4c <region_allocate_and_init>
   11ce0:	e7be      	b.n	11c60 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   11ce2:	bf00      	nop
   11ce4:	e000ed00 	.word	0xe000ed00
   11ce8:	00035ac3 	.word	0x00035ac3
   11cec:	00035aa0 	.word	0x00035aa0
   11cf0:	000330e8 	.word	0x000330e8

00011cf4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11cf4:	2205      	movs	r2, #5
   11cf6:	4b04      	ldr	r3, [pc, #16]	; (11d08 <arm_core_mpu_enable+0x14>)
   11cf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11d00:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11d04:	4770      	bx	lr
   11d06:	bf00      	nop
   11d08:	e000ed00 	.word	0xe000ed00

00011d0c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11d0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11d10:	2200      	movs	r2, #0
   11d12:	4b02      	ldr	r3, [pc, #8]	; (11d1c <arm_core_mpu_disable+0x10>)
   11d14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11d18:	4770      	bx	lr
   11d1a:	bf00      	nop
   11d1c:	e000ed00 	.word	0xe000ed00

00011d20 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11d20:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11d22:	4c03      	ldr	r4, [pc, #12]	; (11d30 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11d24:	7822      	ldrb	r2, [r4, #0]
   11d26:	f7ff ff2d 	bl	11b84 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11d2a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   11d2c:	bd10      	pop	{r4, pc}
   11d2e:	bf00      	nop
   11d30:	200318e9 	.word	0x200318e9

00011d34 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d38:	4d29      	ldr	r5, [pc, #164]	; (11de0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   11d3a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   11d3c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d3e:	f04f 0800 	mov.w	r8, #0
   11d42:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   11d44:	4f27      	ldr	r7, [pc, #156]	; (11de4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d46:	45d0      	cmp	r8, sl
   11d48:	da1b      	bge.n	11d82 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11d4a:	f8d6 9004 	ldr.w	r9, [r6, #4]
   11d4e:	f1b9 0f00 	cmp.w	r9, #0
   11d52:	d03f      	beq.n	11dd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11d54:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11d56:	4608      	mov	r0, r1
   11d58:	9101      	str	r1, [sp, #4]
   11d5a:	f019 fdd8 	bl	2b90e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11d5e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11d60:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11d62:	eb09 0001 	add.w	r0, r9, r1
   11d66:	3801      	subs	r0, #1
   11d68:	f019 fdd1 	bl	2b90e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11d6c:	4284      	cmp	r4, r0
   11d6e:	f04f 0214 	mov.w	r2, #20
   11d72:	4b1d      	ldr	r3, [pc, #116]	; (11de8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   11d74:	d008      	beq.n	11d88 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11d76:	fb02 f308 	mul.w	r3, r2, r8
   11d7a:	f06f 0215 	mvn.w	r2, #21
   11d7e:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   11d82:	b003      	add	sp, #12
   11d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11d88:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11d8c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11d8e:	d0f8      	beq.n	11d82 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11d90:	7819      	ldrb	r1, [r3, #0]
   11d92:	42a1      	cmp	r1, r4
   11d94:	ddf5      	ble.n	11d82 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   11d96:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   11d9a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   11d9e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11da2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11da6:	f100 0108 	add.w	r1, r0, #8
   11daa:	7b00      	ldrb	r0, [r0, #12]
   11dac:	f364 0004 	bfi	r0, r4, #0, #5
   11db0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   11db2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11db6:	790c      	ldrb	r4, [r1, #4]
   11db8:	0840      	lsrs	r0, r0, #1
   11dba:	f360 1447 	bfi	r4, r0, #5, #3
   11dbe:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   11dc0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11dc4:	f021 011f 	bic.w	r1, r1, #31
   11dc8:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   11dca:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11dce:	f021 011f 	bic.w	r1, r1, #31
   11dd2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11dd4:	f108 0801 	add.w	r8, r8, #1
   11dd8:	3514      	adds	r5, #20
   11dda:	360c      	adds	r6, #12
   11ddc:	e7b3      	b.n	11d46 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11dde:	bf00      	nop
   11de0:	2002f9f4 	.word	0x2002f9f4
   11de4:	e000ed00 	.word	0xe000ed00
   11de8:	200318e9 	.word	0x200318e9

00011dec <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   11dec:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11dee:	4d0e      	ldr	r5, [pc, #56]	; (11e28 <z_arm_mpu_init+0x3c>)
   11df0:	682c      	ldr	r4, [r5, #0]
   11df2:	2c08      	cmp	r4, #8
   11df4:	d815      	bhi.n	11e22 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11df6:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   11df8:	f7ff ff88 	bl	11d0c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   11dfc:	4b0b      	ldr	r3, [pc, #44]	; (11e2c <z_arm_mpu_init+0x40>)
   11dfe:	4a0c      	ldr	r2, [pc, #48]	; (11e30 <z_arm_mpu_init+0x44>)
   11e00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11e04:	4284      	cmp	r4, r0
   11e06:	d105      	bne.n	11e14 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11e08:	4b0a      	ldr	r3, [pc, #40]	; (11e34 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   11e0a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   11e0c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11e0e:	f7ff ff71 	bl	11cf4 <arm_core_mpu_enable>
}
   11e12:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11e14:	6869      	ldr	r1, [r5, #4]
   11e16:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11e1a:	f7ff fe7d 	bl	11b18 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11e1e:	3001      	adds	r0, #1
   11e20:	e7f0      	b.n	11e04 <z_arm_mpu_init+0x18>
		return -1;
   11e22:	f04f 30ff 	mov.w	r0, #4294967295
   11e26:	e7f4      	b.n	11e12 <z_arm_mpu_init+0x26>
   11e28:	000338b0 	.word	0x000338b0
   11e2c:	e000ed00 	.word	0xe000ed00
   11e30:	0044ffaa 	.word	0x0044ffaa
   11e34:	200318e9 	.word	0x200318e9

00011e38 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11e38:	4b01      	ldr	r3, [pc, #4]	; (11e40 <__stdout_hook_install+0x8>)
   11e3a:	6018      	str	r0, [r3, #0]
}
   11e3c:	4770      	bx	lr
   11e3e:	bf00      	nop
   11e40:	200084e4 	.word	0x200084e4

00011e44 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   11e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e46:	4606      	mov	r6, r0
   11e48:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   11e4a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   11e4c:	4f06      	ldr	r7, [pc, #24]	; (11e68 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   11e4e:	42ac      	cmp	r4, r5
   11e50:	da08      	bge.n	11e64 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   11e52:	683b      	ldr	r3, [r7, #0]
   11e54:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11e56:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   11e58:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   11e5a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11e5e:	d001      	beq.n	11e64 <z_impl_zephyr_read_stdin+0x20>
   11e60:	280d      	cmp	r0, #13
   11e62:	d1f4      	bne.n	11e4e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11e64:	4620      	mov	r0, r4
   11e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e68:	200084e0 	.word	0x200084e0

00011e6c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e6e:	460d      	mov	r5, r1
   11e70:	4f09      	ldr	r7, [pc, #36]	; (11e98 <z_impl_zephyr_write_stdout+0x2c>)
   11e72:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11e74:	f1c0 0401 	rsb	r4, r0, #1
   11e78:	19a3      	adds	r3, r4, r6
   11e7a:	429d      	cmp	r5, r3
   11e7c:	dc01      	bgt.n	11e82 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11e7e:	4628      	mov	r0, r5
   11e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11e82:	7873      	ldrb	r3, [r6, #1]
   11e84:	2b0a      	cmp	r3, #10
   11e86:	d102      	bne.n	11e8e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11e88:	200d      	movs	r0, #13
   11e8a:	683b      	ldr	r3, [r7, #0]
   11e8c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11e8e:	683b      	ldr	r3, [r7, #0]
   11e90:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11e94:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11e96:	e7ef      	b.n	11e78 <z_impl_zephyr_write_stdout+0xc>
   11e98:	200084e4 	.word	0x200084e4

00011e9c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11e9c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11e9e:	2105      	movs	r1, #5
   11ea0:	4801      	ldr	r0, [pc, #4]	; (11ea8 <_exit+0xc>)
   11ea2:	f7ff ffe3 	bl	11e6c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11ea6:	e7fe      	b.n	11ea6 <_exit+0xa>
   11ea8:	00035ae6 	.word	0x00035ae6

00011eac <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11eac:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11eae:	4c07      	ldr	r4, [pc, #28]	; (11ecc <_sbrk+0x20>)
   11eb0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11eb2:	18c2      	adds	r2, r0, r3
   11eb4:	4806      	ldr	r0, [pc, #24]	; (11ed0 <_sbrk+0x24>)
   11eb6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11eba:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11ebe:	428a      	cmp	r2, r1
		heap_sz += count;
   11ec0:	bf36      	itet	cc
   11ec2:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11ec4:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11ec8:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11eca:	bd10      	pop	{r4, pc}
   11ecc:	2002fa08 	.word	0x2002fa08
   11ed0:	2005dbf4 	.word	0x2005dbf4

00011ed4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11ed4:	b508      	push	{r3, lr}
   11ed6:	211d      	movs	r1, #29
   11ed8:	4804      	ldr	r0, [pc, #16]	; (11eec <__chk_fail+0x18>)
   11eda:	f7ff ffc7 	bl	11e6c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11ede:	4040      	eors	r0, r0
   11ee0:	f380 8811 	msr	BASEPRI, r0
   11ee4:	f04f 0003 	mov.w	r0, #3
   11ee8:	df02      	svc	2
	CODE_UNREACHABLE;
   11eea:	bf00      	nop
   11eec:	00035aec 	.word	0x00035aec

00011ef0 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11ef0:	2000      	movs	r0, #0
   11ef2:	4b02      	ldr	r3, [pc, #8]	; (11efc <remoteproc_mgr_boot+0xc>)
   11ef4:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11ef8:	4770      	bx	lr
   11efa:	bf00      	nop
   11efc:	40005000 	.word	0x40005000

00011f00 <get_battery_level>:
	/* Do not change the default value */
}

static uint8_t get_battery_level(void)
{
	if (get_battery_level_user != NULL) {
   11f00:	4b02      	ldr	r3, [pc, #8]	; (11f0c <get_battery_level+0xc>)
   11f02:	681b      	ldr	r3, [r3, #0]
   11f04:	b103      	cbz	r3, 11f08 <get_battery_level+0x8>
		return get_battery_level_user();
   11f06:	4718      	bx	r3
	}

	return 255;
}
   11f08:	20ff      	movs	r0, #255	; 0xff
   11f0a:	4770      	bx	lr
   11f0c:	2002fa10 	.word	0x2002fa10

00011f10 <lorawan_init>:
	list->head = NULL;
   11f10:	2000      	movs	r0, #0
   11f12:	4b0a      	ldr	r3, [pc, #40]	; (11f3c <lorawan_init+0x2c>)
{
	ARG_UNUSED(dev);

	sys_slist_init(&dl_callbacks);

	mac_primitives.MacMcpsConfirm = mcps_confirm_handler;
   11f14:	4a0a      	ldr	r2, [pc, #40]	; (11f40 <lorawan_init+0x30>)
	list->tail = NULL;
   11f16:	e9c3 0000 	strd	r0, r0, [r3]
   11f1a:	4b0a      	ldr	r3, [pc, #40]	; (11f44 <lorawan_init+0x34>)
   11f1c:	601a      	str	r2, [r3, #0]
	mac_primitives.MacMcpsIndication = mcps_indication_handler;
   11f1e:	4a0a      	ldr	r2, [pc, #40]	; (11f48 <lorawan_init+0x38>)
   11f20:	605a      	str	r2, [r3, #4]
	mac_primitives.MacMlmeConfirm = mlme_confirm_handler;
   11f22:	4a0a      	ldr	r2, [pc, #40]	; (11f4c <lorawan_init+0x3c>)
   11f24:	609a      	str	r2, [r3, #8]
	mac_primitives.MacMlmeIndication = mlme_indication_handler;
   11f26:	4a0a      	ldr	r2, [pc, #40]	; (11f50 <lorawan_init+0x40>)
   11f28:	60da      	str	r2, [r3, #12]
	mac_callbacks.GetBatteryLevel = get_battery_level;
   11f2a:	4b0a      	ldr	r3, [pc, #40]	; (11f54 <lorawan_init+0x44>)
   11f2c:	4a0a      	ldr	r2, [pc, #40]	; (11f58 <lorawan_init+0x48>)
	mac_callbacks.GetTemperatureLevel = NULL;

	if (IS_ENABLED(CONFIG_LORAWAN_NVM_NONE)) {
		mac_callbacks.NvmDataChange = NULL;
   11f2e:	6098      	str	r0, [r3, #8]
	mac_callbacks.GetTemperatureLevel = NULL;
   11f30:	e9c3 2000 	strd	r2, r0, [r3]
	} else {
		mac_callbacks.NvmDataChange = lorawan_nvm_data_mgmt_event;
	}

	mac_callbacks.MacProcessNotify = mac_process_notify;
   11f34:	4a09      	ldr	r2, [pc, #36]	; (11f5c <lorawan_init+0x4c>)
   11f36:	60da      	str	r2, [r3, #12]

	return 0;
}
   11f38:	4770      	bx	lr
   11f3a:	bf00      	nop
   11f3c:	2002fa34 	.word	0x2002fa34
   11f40:	00012155 	.word	0x00012155
   11f44:	2002fa24 	.word	0x2002fa24
   11f48:	00012071 	.word	0x00012071
   11f4c:	00011f61 	.word	0x00011f61
   11f50:	00012121 	.word	0x00012121
   11f54:	2002fa14 	.word	0x2002fa14
   11f58:	00011f01 	.word	0x00011f01
   11f5c:	0002b9ef 	.word	0x0002b9ef

00011f60 <mlme_confirm_handler>:
{
   11f60:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   11f62:	7803      	ldrb	r3, [r0, #0]
{
   11f64:	b090      	sub	sp, #64	; 0x40
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   11f66:	9304      	str	r3, [sp, #16]
   11f68:	4b23      	ldr	r3, [pc, #140]	; (11ff8 <mlme_confirm_handler+0x98>)
   11f6a:	2600      	movs	r6, #0
   11f6c:	9303      	str	r3, [sp, #12]
   11f6e:	4b23      	ldr	r3, [pc, #140]	; (11ffc <mlme_confirm_handler+0x9c>)
{
   11f70:	4605      	mov	r5, r0
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   11f72:	9302      	str	r3, [sp, #8]
   11f74:	2308      	movs	r3, #8
   11f76:	2204      	movs	r2, #4
   11f78:	e9cd 6300 	strd	r6, r3, [sp]
   11f7c:	4630      	mov	r0, r6
   11f7e:	4633      	mov	r3, r6
   11f80:	491f      	ldr	r1, [pc, #124]	; (12000 <mlme_confirm_handler+0xa0>)
   11f82:	f019 fd36 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
	if (mlme_confirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   11f86:	786c      	ldrb	r4, [r5, #1]
   11f88:	b174      	cbz	r4, 11fa8 <mlme_confirm_handler+0x48>
		LOG_ERR("MlmeConfirm failed : %s",
   11f8a:	4620      	mov	r0, r4
   11f8c:	f000 fb64 	bl	12658 <lorawan_eventinfo2str>
   11f90:	4b1c      	ldr	r3, [pc, #112]	; (12004 <mlme_confirm_handler+0xa4>)
   11f92:	2201      	movs	r2, #1
   11f94:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11f98:	4633      	mov	r3, r6
   11f9a:	9003      	str	r0, [sp, #12]
   11f9c:	9600      	str	r6, [sp, #0]
		LOG_INF("Joined network! DevAddr: %08x", mib_req.Param.DevAddr);
   11f9e:	4618      	mov	r0, r3
   11fa0:	4917      	ldr	r1, [pc, #92]	; (12000 <mlme_confirm_handler+0xa0>)
   11fa2:	f019 fd26 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
   11fa6:	e004      	b.n	11fb2 <mlme_confirm_handler+0x52>
	switch (mlme_confirm->MlmeRequest) {
   11fa8:	782b      	ldrb	r3, [r5, #0]
   11faa:	2b01      	cmp	r3, #1
   11fac:	d009      	beq.n	11fc2 <mlme_confirm_handler+0x62>
   11fae:	2b04      	cmp	r3, #4
   11fb0:	d016      	beq.n	11fe0 <mlme_confirm_handler+0x80>
	last_mlme_confirm_status = mlme_confirm->Status;
   11fb2:	786a      	ldrb	r2, [r5, #1]
   11fb4:	4b14      	ldr	r3, [pc, #80]	; (12008 <mlme_confirm_handler+0xa8>)
   11fb6:	701a      	strb	r2, [r3, #0]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11fb8:	4814      	ldr	r0, [pc, #80]	; (1200c <mlme_confirm_handler+0xac>)
   11fba:	f013 fd91 	bl	25ae0 <z_impl_k_sem_give>
}
   11fbe:	b010      	add	sp, #64	; 0x40
   11fc0:	bd70      	pop	{r4, r5, r6, pc}
		mib_req.Type = MIB_DEV_ADDR;
   11fc2:	2307      	movs	r3, #7
		LoRaMacMibGetRequestConfirm(&mib_req);
   11fc4:	a806      	add	r0, sp, #24
		mib_req.Type = MIB_DEV_ADDR;
   11fc6:	f88d 3018 	strb.w	r3, [sp, #24]
		LoRaMacMibGetRequestConfirm(&mib_req);
   11fca:	f005 f81f 	bl	1700c <LoRaMacMibGetRequestConfirm>
		LOG_INF("Joined network! DevAddr: %08x", mib_req.Param.DevAddr);
   11fce:	9b07      	ldr	r3, [sp, #28]
   11fd0:	2203      	movs	r2, #3
   11fd2:	9303      	str	r3, [sp, #12]
   11fd4:	4b0e      	ldr	r3, [pc, #56]	; (12010 <mlme_confirm_handler+0xb0>)
   11fd6:	9400      	str	r4, [sp, #0]
   11fd8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11fdc:	4623      	mov	r3, r4
   11fde:	e7de      	b.n	11f9e <mlme_confirm_handler+0x3e>
		LOG_INF("Link check not implemented yet!");
   11fe0:	4b0c      	ldr	r3, [pc, #48]	; (12014 <mlme_confirm_handler+0xb4>)
   11fe2:	2203      	movs	r2, #3
   11fe4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11fe8:	4620      	mov	r0, r4
   11fea:	4623      	mov	r3, r4
   11fec:	4904      	ldr	r1, [pc, #16]	; (12000 <mlme_confirm_handler+0xa0>)
   11fee:	9400      	str	r4, [sp, #0]
   11ff0:	f019 fcff 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
   11ff4:	e7dd      	b.n	11fb2 <mlme_confirm_handler+0x52>
   11ff6:	bf00      	nop
   11ff8:	00035dce 	.word	0x00035dce
   11ffc:	00035b32 	.word	0x00035b32
   12000:	000330d8 	.word	0x000330d8
   12004:	00035b60 	.word	0x00035b60
   12008:	200318ea 	.word	0x200318ea
   1200c:	20008da8 	.word	0x20008da8
   12010:	00035b78 	.word	0x00035b78
   12014:	00035b96 	.word	0x00035b96

00012018 <datarate_observe>:
	mib_req.Type = MIB_CHANNELS_DATARATE;
   12018:	232d      	movs	r3, #45	; 0x2d
{
   1201a:	b530      	push	{r4, r5, lr}
	if ((mib_req.Param.ChannelsDatarate != current_datarate) ||
   1201c:	4c10      	ldr	r4, [pc, #64]	; (12060 <datarate_observe+0x48>)
{
   1201e:	b08f      	sub	sp, #60	; 0x3c
   12020:	4605      	mov	r5, r0
	LoRaMacMibGetRequestConfirm(&mib_req);
   12022:	a804      	add	r0, sp, #16
	mib_req.Type = MIB_CHANNELS_DATARATE;
   12024:	f88d 3010 	strb.w	r3, [sp, #16]
	LoRaMacMibGetRequestConfirm(&mib_req);
   12028:	f004 fff0 	bl	1700c <LoRaMacMibGetRequestConfirm>
	if ((mib_req.Param.ChannelsDatarate != current_datarate) ||
   1202c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   12030:	7822      	ldrb	r2, [r4, #0]
   12032:	4293      	cmp	r3, r2
   12034:	d100      	bne.n	12038 <datarate_observe+0x20>
   12036:	b18d      	cbz	r5, 1205c <datarate_observe+0x44>
		current_datarate = mib_req.Param.ChannelsDatarate;
   12038:	b2d8      	uxtb	r0, r3
		if (dr_change_cb) {
   1203a:	4b0a      	ldr	r3, [pc, #40]	; (12064 <datarate_observe+0x4c>)
		current_datarate = mib_req.Param.ChannelsDatarate;
   1203c:	7020      	strb	r0, [r4, #0]
		if (dr_change_cb) {
   1203e:	681b      	ldr	r3, [r3, #0]
   12040:	b103      	cbz	r3, 12044 <datarate_observe+0x2c>
			dr_change_cb(current_datarate);
   12042:	4798      	blx	r3
		LOG_INF("Datarate changed: DR_%d", current_datarate);
   12044:	7823      	ldrb	r3, [r4, #0]
   12046:	2203      	movs	r2, #3
   12048:	9303      	str	r3, [sp, #12]
   1204a:	4b07      	ldr	r3, [pc, #28]	; (12068 <datarate_observe+0x50>)
   1204c:	4907      	ldr	r1, [pc, #28]	; (1206c <datarate_observe+0x54>)
   1204e:	9302      	str	r3, [sp, #8]
   12050:	2300      	movs	r3, #0
   12052:	4618      	mov	r0, r3
   12054:	e9cd 3300 	strd	r3, r3, [sp]
   12058:	f019 fccb 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
}
   1205c:	b00f      	add	sp, #60	; 0x3c
   1205e:	bd30      	pop	{r4, r5, pc}
   12060:	200318ed 	.word	0x200318ed
   12064:	2002fa0c 	.word	0x2002fa0c
   12068:	00035bb6 	.word	0x00035bb6
   1206c:	000330d8 	.word	0x000330d8

00012070 <mcps_indication_handler>:
{
   12070:	b5f0      	push	{r4, r5, r6, r7, lr}
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   12072:	7803      	ldrb	r3, [r0, #0]
{
   12074:	b087      	sub	sp, #28
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   12076:	9304      	str	r3, [sp, #16]
   12078:	4b23      	ldr	r3, [pc, #140]	; (12108 <mcps_indication_handler+0x98>)
   1207a:	2400      	movs	r4, #0
   1207c:	9303      	str	r3, [sp, #12]
   1207e:	4b23      	ldr	r3, [pc, #140]	; (1210c <mcps_indication_handler+0x9c>)
{
   12080:	4605      	mov	r5, r0
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   12082:	9302      	str	r3, [sp, #8]
   12084:	2308      	movs	r3, #8
   12086:	4620      	mov	r0, r4
   12088:	e9cd 4300 	strd	r4, r3, [sp]
   1208c:	2204      	movs	r2, #4
   1208e:	4623      	mov	r3, r4
   12090:	491f      	ldr	r1, [pc, #124]	; (12110 <mcps_indication_handler+0xa0>)
   12092:	f019 fcae 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
	if (mcps_indication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   12096:	7868      	ldrb	r0, [r5, #1]
   12098:	b170      	cbz	r0, 120b8 <mcps_indication_handler+0x48>
		LOG_ERR("McpsIndication failed : %s",
   1209a:	f000 fadd 	bl	12658 <lorawan_eventinfo2str>
   1209e:	4b1d      	ldr	r3, [pc, #116]	; (12114 <mcps_indication_handler+0xa4>)
   120a0:	9003      	str	r0, [sp, #12]
   120a2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   120a6:	2201      	movs	r2, #1
   120a8:	4623      	mov	r3, r4
   120aa:	4620      	mov	r0, r4
   120ac:	4918      	ldr	r1, [pc, #96]	; (12110 <mcps_indication_handler+0xa0>)
   120ae:	9400      	str	r4, [sp, #0]
   120b0:	f019 fc9f 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
}
   120b4:	b007      	add	sp, #28
   120b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (lorawan_adr_enable) {
   120b8:	4b17      	ldr	r3, [pc, #92]	; (12118 <mcps_indication_handler+0xa8>)
   120ba:	781b      	ldrb	r3, [r3, #0]
   120bc:	b10b      	cbz	r3, 120c2 <mcps_indication_handler+0x52>
		datarate_observe(false);
   120be:	f7ff ffab 	bl	12018 <datarate_observe>
	return list->head;
   120c2:	4b16      	ldr	r3, [pc, #88]	; (1211c <mcps_indication_handler+0xac>)
   120c4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   120c6:	2c00      	cmp	r4, #0
   120c8:	d0f4      	beq.n	120b4 <mcps_indication_handler+0x44>
		if ((cb->port == LW_RECV_PORT_ANY) ||
   120ca:	f64f 77ff 	movw	r7, #65535	; 0xffff
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   120ce:	3c08      	subs	r4, #8
		if ((cb->port == LW_RECV_PORT_ANY) ||
   120d0:	8823      	ldrh	r3, [r4, #0]
		    (cb->port == mcps_indication->Port)) {
   120d2:	78e8      	ldrb	r0, [r5, #3]
		if ((cb->port == LW_RECV_PORT_ANY) ||
   120d4:	42bb      	cmp	r3, r7
   120d6:	d001      	beq.n	120dc <mcps_indication_handler+0x6c>
   120d8:	4283      	cmp	r3, r0
   120da:	d110      	bne.n	120fe <mcps_indication_handler+0x8e>
			cb->cb(mcps_indication->Port,
   120dc:	68ab      	ldr	r3, [r5, #8]
   120de:	7969      	ldrb	r1, [r5, #5]
   120e0:	9301      	str	r3, [sp, #4]
   120e2:	7b2b      	ldrb	r3, [r5, #12]
   120e4:	f101 3cff 	add.w	ip, r1, #4294967295
   120e8:	9300      	str	r3, [sp, #0]
   120ea:	f1dc 0100 	rsbs	r1, ip, #0
   120ee:	6866      	ldr	r6, [r4, #4]
   120f0:	f995 3010 	ldrsb.w	r3, [r5, #16]
   120f4:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
   120f8:	eb41 010c 	adc.w	r1, r1, ip
   120fc:	47b0      	blx	r6
	return node->next;
   120fe:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   12100:	2c00      	cmp	r4, #0
   12102:	d0d7      	beq.n	120b4 <mcps_indication_handler+0x44>
   12104:	3c08      	subs	r4, #8
   12106:	e7e3      	b.n	120d0 <mcps_indication_handler+0x60>
   12108:	00035db6 	.word	0x00035db6
   1210c:	00035bce 	.word	0x00035bce
   12110:	000330d8 	.word	0x000330d8
   12114:	00035bed 	.word	0x00035bed
   12118:	200318ec 	.word	0x200318ec
   1211c:	2002fa34 	.word	0x2002fa34

00012120 <mlme_indication_handler>:
{
   12120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("Received MlmeIndication %d", mlme_indication->MlmeIndication);
   12122:	7803      	ldrb	r3, [r0, #0]
   12124:	2208      	movs	r2, #8
   12126:	9304      	str	r3, [sp, #16]
   12128:	4b07      	ldr	r3, [pc, #28]	; (12148 <mlme_indication_handler+0x28>)
   1212a:	4908      	ldr	r1, [pc, #32]	; (1214c <mlme_indication_handler+0x2c>)
   1212c:	9303      	str	r3, [sp, #12]
   1212e:	4b08      	ldr	r3, [pc, #32]	; (12150 <mlme_indication_handler+0x30>)
   12130:	9302      	str	r3, [sp, #8]
   12132:	2300      	movs	r3, #0
   12134:	e9cd 3200 	strd	r3, r2, [sp]
   12138:	4618      	mov	r0, r3
   1213a:	2204      	movs	r2, #4
   1213c:	f019 fc59 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
}
   12140:	b007      	add	sp, #28
   12142:	f85d fb04 	ldr.w	pc, [sp], #4
   12146:	bf00      	nop
   12148:	00035de3 	.word	0x00035de3
   1214c:	000330d8 	.word	0x000330d8
   12150:	00035c08 	.word	0x00035c08

00012154 <mcps_confirm_handler>:
{
   12154:	b5f0      	push	{r4, r5, r6, r7, lr}
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   12156:	2400      	movs	r4, #0
   12158:	2608      	movs	r6, #8
{
   1215a:	4605      	mov	r5, r0
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   1215c:	7803      	ldrb	r3, [r0, #0]
{
   1215e:	b087      	sub	sp, #28
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   12160:	9304      	str	r3, [sp, #16]
   12162:	4f19      	ldr	r7, [pc, #100]	; (121c8 <mcps_confirm_handler+0x74>)
   12164:	4b19      	ldr	r3, [pc, #100]	; (121cc <mcps_confirm_handler+0x78>)
   12166:	2204      	movs	r2, #4
   12168:	9302      	str	r3, [sp, #8]
   1216a:	4620      	mov	r0, r4
   1216c:	4623      	mov	r3, r4
   1216e:	e9cd 4600 	strd	r4, r6, [sp]
   12172:	4917      	ldr	r1, [pc, #92]	; (121d0 <mcps_confirm_handler+0x7c>)
   12174:	9703      	str	r7, [sp, #12]
   12176:	f019 fc3c 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
	if (mcps_confirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   1217a:	786b      	ldrb	r3, [r5, #1]
   1217c:	b1e3      	cbz	r3, 121b8 <mcps_confirm_handler+0x64>
		LOG_ERR("McpsRequest failed : %s",
   1217e:	4618      	mov	r0, r3
   12180:	f000 fa6a 	bl	12658 <lorawan_eventinfo2str>
   12184:	4b13      	ldr	r3, [pc, #76]	; (121d4 <mcps_confirm_handler+0x80>)
   12186:	2201      	movs	r2, #1
   12188:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1218c:	4623      	mov	r3, r4
   1218e:	9003      	str	r0, [sp, #12]
   12190:	9400      	str	r4, [sp, #0]
		LOG_DBG("McpsRequest success!");
   12192:	4618      	mov	r0, r3
   12194:	490e      	ldr	r1, [pc, #56]	; (121d0 <mcps_confirm_handler+0x7c>)
   12196:	f019 fc2c 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
	if (lorawan_adr_enable) {
   1219a:	4b0f      	ldr	r3, [pc, #60]	; (121d8 <mcps_confirm_handler+0x84>)
   1219c:	781b      	ldrb	r3, [r3, #0]
   1219e:	b113      	cbz	r3, 121a6 <mcps_confirm_handler+0x52>
		datarate_observe(false);
   121a0:	2000      	movs	r0, #0
   121a2:	f7ff ff39 	bl	12018 <datarate_observe>
	last_mcps_confirm_status = mcps_confirm->Status;
   121a6:	786a      	ldrb	r2, [r5, #1]
   121a8:	4b0c      	ldr	r3, [pc, #48]	; (121dc <mcps_confirm_handler+0x88>)
   121aa:	701a      	strb	r2, [r3, #0]
   121ac:	480c      	ldr	r0, [pc, #48]	; (121e0 <mcps_confirm_handler+0x8c>)
}
   121ae:	b007      	add	sp, #28
   121b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   121b4:	f013 bc94 	b.w	25ae0 <z_impl_k_sem_give>
		LOG_DBG("McpsRequest success!");
   121b8:	4a0a      	ldr	r2, [pc, #40]	; (121e4 <mcps_confirm_handler+0x90>)
   121ba:	9703      	str	r7, [sp, #12]
   121bc:	e9cd 6201 	strd	r6, r2, [sp, #4]
   121c0:	9300      	str	r3, [sp, #0]
   121c2:	2204      	movs	r2, #4
   121c4:	e7e5      	b.n	12192 <mcps_confirm_handler+0x3e>
   121c6:	bf00      	nop
   121c8:	00035da1 	.word	0x00035da1
   121cc:	00035c27 	.word	0x00035c27
   121d0:	000330d8 	.word	0x000330d8
   121d4:	00035c55 	.word	0x00035c55
   121d8:	200318ec 	.word	0x200318ec
   121dc:	200318eb 	.word	0x200318eb
   121e0:	20008d90 	.word	0x20008d90
   121e4:	00035c6d 	.word	0x00035c6d

000121e8 <lorawan_set_region>:
{
   121e8:	b510      	push	{r4, lr}
	switch (region) {
   121ea:	2805      	cmp	r0, #5
{
   121ec:	b086      	sub	sp, #24
	switch (region) {
   121ee:	d113      	bne.n	12218 <lorawan_set_region+0x30>
		selected_region = LORAMAC_REGION_EU868;
   121f0:	4b10      	ldr	r3, [pc, #64]	; (12234 <lorawan_set_region+0x4c>)
	LOG_DBG("Selected region %d", region);
   121f2:	2400      	movs	r4, #0
		selected_region = LORAMAC_REGION_EU868;
   121f4:	7018      	strb	r0, [r3, #0]
	LOG_DBG("Selected region %d", region);
   121f6:	4b10      	ldr	r3, [pc, #64]	; (12238 <lorawan_set_region+0x50>)
   121f8:	9004      	str	r0, [sp, #16]
   121fa:	9303      	str	r3, [sp, #12]
   121fc:	4b0f      	ldr	r3, [pc, #60]	; (1223c <lorawan_set_region+0x54>)
   121fe:	4620      	mov	r0, r4
   12200:	9302      	str	r3, [sp, #8]
   12202:	2308      	movs	r3, #8
   12204:	2204      	movs	r2, #4
   12206:	e9cd 4300 	strd	r4, r3, [sp]
   1220a:	490d      	ldr	r1, [pc, #52]	; (12240 <lorawan_set_region+0x58>)
   1220c:	4623      	mov	r3, r4
   1220e:	f019 fbf0 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
	return 0;
   12212:	4620      	mov	r0, r4
}
   12214:	b006      	add	sp, #24
   12216:	bd10      	pop	{r4, pc}
		LOG_ERR("No support for region %d!", region);
   12218:	4b0a      	ldr	r3, [pc, #40]	; (12244 <lorawan_set_region+0x5c>)
	switch (region) {
   1221a:	9003      	str	r0, [sp, #12]
		LOG_ERR("No support for region %d!", region);
   1221c:	9302      	str	r3, [sp, #8]
   1221e:	2300      	movs	r3, #0
   12220:	2201      	movs	r2, #1
   12222:	4618      	mov	r0, r3
   12224:	e9cd 3300 	strd	r3, r3, [sp]
   12228:	4905      	ldr	r1, [pc, #20]	; (12240 <lorawan_set_region+0x58>)
   1222a:	f019 fbe2 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1222e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12232:	e7ef      	b.n	12214 <lorawan_set_region+0x2c>
   12234:	20008ac6 	.word	0x20008ac6
   12238:	00035e16 	.word	0x00035e16
   1223c:	00035c86 	.word	0x00035c86
   12240:	000330d8 	.word	0x000330d8
   12244:	00035c9d 	.word	0x00035c9d

00012248 <lorawan_join>:
{
   12248:	b5f0      	push	{r4, r5, r6, r7, lr}
   1224a:	4604      	mov	r4, r0
   1224c:	b09f      	sub	sp, #124	; 0x7c
	return z_impl_k_mutex_lock(mutex, timeout);
   1224e:	f04f 32ff 	mov.w	r2, #4294967295
   12252:	f04f 33ff 	mov.w	r3, #4294967295
   12256:	486e      	ldr	r0, [pc, #440]	; (12410 <lorawan_join+0x1c8>)
   12258:	f013 fb56 	bl	25908 <z_impl_k_mutex_lock>
	mib_req.Param.EnablePublicNetwork = true;
   1225c:	2601      	movs	r6, #1
	mib_req.Type = MIB_PUBLIC_NETWORK;
   1225e:	231d      	movs	r3, #29
	LoRaMacMibSetRequestConfirm(&mib_req);
   12260:	a80a      	add	r0, sp, #40	; 0x28
	mib_req.Type = MIB_PUBLIC_NETWORK;
   12262:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	mib_req.Param.EnablePublicNetwork = true;
   12266:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	LoRaMacMibSetRequestConfirm(&mib_req);
   1226a:	f004 ffaf 	bl	171cc <LoRaMacMibSetRequestConfirm>
	if (join_cfg->mode == LORAWAN_ACT_OTAA) {
   1226e:	7d25      	ldrb	r5, [r4, #20]
   12270:	2d00      	cmp	r5, #0
   12272:	d176      	bne.n	12362 <lorawan_join+0x11a>
	mlme_req.Req.Join.Datarate = default_datarate;
   12274:	4b67      	ldr	r3, [pc, #412]	; (12414 <lorawan_join+0x1cc>)
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
   12276:	2702      	movs	r7, #2
	mlme_req.Req.Join.Datarate = default_datarate;
   12278:	781b      	ldrb	r3, [r3, #0]
		if (LoRaMacMibGetRequestConfirm(&mib_req) !=
   1227a:	a814      	add	r0, sp, #80	; 0x50
	mlme_req.Req.Join.Datarate = default_datarate;
   1227c:	f88d 3019 	strb.w	r3, [sp, #25]
		mib_req.Type = MIB_NVM_CTXS;
   12280:	2334      	movs	r3, #52	; 0x34
	mlme_req.Type = MLME_JOIN;
   12282:	f88d 6014 	strb.w	r6, [sp, #20]
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
   12286:	f88d 7018 	strb.w	r7, [sp, #24]
		mib_req.Type = MIB_NVM_CTXS;
   1228a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		if (LoRaMacMibGetRequestConfirm(&mib_req) !=
   1228e:	f004 febd 	bl	1700c <LoRaMacMibGetRequestConfirm>
   12292:	b328      	cbz	r0, 122e0 <lorawan_join+0x98>
			LOG_ERR("Could not get NVM context");
   12294:	4b60      	ldr	r3, [pc, #384]	; (12418 <lorawan_join+0x1d0>)
   12296:	4632      	mov	r2, r6
   12298:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1229c:	4628      	mov	r0, r5
   1229e:	462b      	mov	r3, r5
   122a0:	495e      	ldr	r1, [pc, #376]	; (1241c <lorawan_join+0x1d4>)
   122a2:	9500      	str	r5, [sp, #0]
   122a4:	f019 fba5 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   122a8:	24ea      	movs	r4, #234	; 0xea
			LOG_ERR("OTAA join failed: %s",
   122aa:	4620      	mov	r0, r4
   122ac:	f000 f9c8 	bl	12640 <lorawan_status2str>
   122b0:	4b5b      	ldr	r3, [pc, #364]	; (12420 <lorawan_join+0x1d8>)
   122b2:	9003      	str	r0, [sp, #12]
   122b4:	9302      	str	r3, [sp, #8]
   122b6:	2300      	movs	r3, #0
   122b8:	2201      	movs	r2, #1
   122ba:	4618      	mov	r0, r3
   122bc:	e9cd 3300 	strd	r3, r3, [sp]
   122c0:	4956      	ldr	r1, [pc, #344]	; (1241c <lorawan_join+0x1d4>)
   122c2:	f019 fb96 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
			ret = lorawan_status2errno(status);
   122c6:	4620      	mov	r0, r4
   122c8:	f000 f9d2 	bl	12670 <lorawan_status2errno>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
   122cc:	4604      	mov	r4, r0
	if (ret == 0) {
   122ce:	2800      	cmp	r0, #0
   122d0:	f000 8088 	beq.w	123e4 <lorawan_join+0x19c>
	return z_impl_k_mutex_unlock(mutex);
   122d4:	484e      	ldr	r0, [pc, #312]	; (12410 <lorawan_join+0x1c8>)
   122d6:	f013 fb91 	bl	259fc <z_impl_k_mutex_unlock>
}
   122da:	4620      	mov	r0, r4
   122dc:	b01f      	add	sp, #124	; 0x7c
   122de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mib_req.Param.Contexts->Crypto.DevNonce =
   122e0:	68e2      	ldr	r2, [r4, #12]
   122e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   122e4:	a814      	add	r0, sp, #80	; 0x50
		mib_req.Param.Contexts->Crypto.DevNonce =
   122e6:	809a      	strh	r2, [r3, #4]
	mib_req.Param.DevEui = join_cfg->dev_eui;
   122e8:	6923      	ldr	r3, [r4, #16]
	mib_req.Type = MIB_DEV_EUI;
   122ea:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
	mib_req.Param.DevEui = join_cfg->dev_eui;
   122ee:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   122f0:	f004 ff6c 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_JOIN_EUI;
   122f4:	2303      	movs	r3, #3
   122f6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
   122fa:	6823      	ldr	r3, [r4, #0]
	LoRaMacMibSetRequestConfirm(&mib_req);
   122fc:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
   122fe:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12300:	f004 ff64 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_KEY;
   12304:	2309      	movs	r3, #9
	mib_req.Type = MIB_APP_KEY;
   12306:	2508      	movs	r5, #8
	mib_req.Type = MIB_NWK_KEY;
   12308:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
   1230c:	6863      	ldr	r3, [r4, #4]
	LoRaMacMibSetRequestConfirm(&mib_req);
   1230e:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
   12310:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12312:	f004 ff5b 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
   12316:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   12318:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
   1231a:	9315      	str	r3, [sp, #84]	; 0x54
	mib_req.Type = MIB_APP_KEY;
   1231c:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
   12320:	f004 ff54 	bl	171cc <LoRaMacMibSetRequestConfirm>
	return LoRaMacMlmeRequest(&mlme_req);
   12324:	a805      	add	r0, sp, #20
   12326:	f005 fa29 	bl	1777c <LoRaMacMlmeRequest>
   1232a:	4603      	mov	r3, r0
   1232c:	4604      	mov	r4, r0
		if (status != LORAMAC_STATUS_OK) {
   1232e:	2800      	cmp	r0, #0
   12330:	d1bb      	bne.n	122aa <lorawan_join+0x62>
		LOG_DBG("Network join request sent!");
   12332:	4a3c      	ldr	r2, [pc, #240]	; (12424 <lorawan_join+0x1dc>)
   12334:	4939      	ldr	r1, [pc, #228]	; (1241c <lorawan_join+0x1d4>)
   12336:	9203      	str	r2, [sp, #12]
   12338:	4a3b      	ldr	r2, [pc, #236]	; (12428 <lorawan_join+0x1e0>)
   1233a:	9000      	str	r0, [sp, #0]
   1233c:	e9cd 5201 	strd	r5, r2, [sp, #4]
   12340:	2204      	movs	r2, #4
   12342:	f019 fb56 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
   12346:	f04f 33ff 	mov.w	r3, #4294967295
   1234a:	f04f 32ff 	mov.w	r2, #4294967295
   1234e:	4837      	ldr	r0, [pc, #220]	; (1242c <lorawan_join+0x1e4>)
   12350:	f013 fbec 	bl	25b2c <z_impl_k_sem_take>
		if (last_mlme_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
   12354:	4b36      	ldr	r3, [pc, #216]	; (12430 <lorawan_join+0x1e8>)
   12356:	7818      	ldrb	r0, [r3, #0]
   12358:	2800      	cmp	r0, #0
   1235a:	d043      	beq.n	123e4 <lorawan_join+0x19c>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
   1235c:	f000 f99a 	bl	12694 <lorawan_eventinfo2errno>
   12360:	e7b4      	b.n	122cc <lorawan_join+0x84>
	} else if (join_cfg->mode == LORAWAN_ACT_ABP) {
   12362:	2d01      	cmp	r5, #1
   12364:	d150      	bne.n	12408 <lorawan_join+0x1c0>
	mib_req.Type = MIB_ABP_LORAWAN_VERSION;
   12366:	2335      	movs	r3, #53	; 0x35
   12368:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
   1236c:	4b31      	ldr	r3, [pc, #196]	; (12434 <lorawan_join+0x1ec>)
	LoRaMacMibSetRequestConfirm(&mib_req);
   1236e:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
   12370:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12372:	f004 ff2b 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NET_ID;
   12376:	2306      	movs	r3, #6
   12378:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NetID = 0;
   1237c:	2300      	movs	r3, #0
	LoRaMacMibSetRequestConfirm(&mib_req);
   1237e:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NetID = 0;
   12380:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12382:	f004 ff23 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_DEV_ADDR;
   12386:	2307      	movs	r3, #7
   12388:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
   1238c:	6823      	ldr	r3, [r4, #0]
	LoRaMacMibSetRequestConfirm(&mib_req);
   1238e:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
   12390:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12392:	f004 ff1b 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_F_NWK_S_INT_KEY;
   12396:	230c      	movs	r3, #12
   12398:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
   1239c:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   1239e:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
   123a0:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   123a2:	f004 ff13 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_S_NWK_S_INT_KEY;
   123a6:	230d      	movs	r3, #13
   123a8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
   123ac:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   123ae:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
   123b0:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   123b2:	f004 ff0b 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_S_ENC_KEY;
   123b6:	230e      	movs	r3, #14
   123b8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
   123bc:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   123be:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
   123c0:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   123c2:	f004 ff03 	bl	171cc <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_APP_S_KEY;
   123c6:	230f      	movs	r3, #15
   123c8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
   123cc:	6863      	ldr	r3, [r4, #4]
	LoRaMacMibSetRequestConfirm(&mib_req);
   123ce:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
   123d0:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   123d2:	f004 fefb 	bl	171cc <LoRaMacMibSetRequestConfirm>
	LoRaMacMibSetRequestConfirm(&mib_req);
   123d6:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Type = MIB_NETWORK_ACTIVATION;
   123d8:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	mib_req.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
   123dc:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   123e0:	f004 fef4 	bl	171cc <LoRaMacMibSetRequestConfirm>
		if (!lorawan_adr_enable) {
   123e4:	4b14      	ldr	r3, [pc, #80]	; (12438 <lorawan_join+0x1f0>)
   123e6:	781b      	ldrb	r3, [r3, #0]
   123e8:	b94b      	cbnz	r3, 123fe <lorawan_join+0x1b6>
			mib_req.Type = MIB_CHANNELS_DATARATE;
   123ea:	232d      	movs	r3, #45	; 0x2d
   123ec:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
			mib_req.Param.ChannelsDatarate = default_datarate;
   123f0:	4b08      	ldr	r3, [pc, #32]	; (12414 <lorawan_join+0x1cc>)
			LoRaMacMibSetRequestConfirm(&mib_req);
   123f2:	a814      	add	r0, sp, #80	; 0x50
			mib_req.Param.ChannelsDatarate = default_datarate;
   123f4:	781b      	ldrb	r3, [r3, #0]
   123f6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
			LoRaMacMibSetRequestConfirm(&mib_req);
   123fa:	f004 fee7 	bl	171cc <LoRaMacMibSetRequestConfirm>
		datarate_observe(true);
   123fe:	2001      	movs	r0, #1
   12400:	f7ff fe0a 	bl	12018 <datarate_observe>
   12404:	2400      	movs	r4, #0
   12406:	e765      	b.n	122d4 <lorawan_join+0x8c>
		ret = -EINVAL;
   12408:	f06f 0415 	mvn.w	r4, #21
   1240c:	e762      	b.n	122d4 <lorawan_join+0x8c>
   1240e:	bf00      	nop
   12410:	20008c04 	.word	0x20008c04
   12414:	200318ee 	.word	0x200318ee
   12418:	00035cb7 	.word	0x00035cb7
   1241c:	000330d8 	.word	0x000330d8
   12420:	00035cd1 	.word	0x00035cd1
   12424:	00035e09 	.word	0x00035e09
   12428:	00035ce6 	.word	0x00035ce6
   1242c:	20008da8 	.word	0x20008da8
   12430:	200318ea 	.word	0x200318ea
   12434:	01000300 	.word	0x01000300
   12438:	200318ec 	.word	0x200318ec

0001243c <lorawan_enable_adr>:
{
   1243c:	b500      	push	{lr}
	if (enable != lorawan_adr_enable) {
   1243e:	4b08      	ldr	r3, [pc, #32]	; (12460 <lorawan_enable_adr+0x24>)
{
   12440:	b08b      	sub	sp, #44	; 0x2c
	if (enable != lorawan_adr_enable) {
   12442:	781a      	ldrb	r2, [r3, #0]
   12444:	4282      	cmp	r2, r0
   12446:	d008      	beq.n	1245a <lorawan_enable_adr+0x1e>
		lorawan_adr_enable = enable;
   12448:	7018      	strb	r0, [r3, #0]
		mib_req.Type = MIB_ADR;
   1244a:	2305      	movs	r3, #5
		mib_req.Param.AdrEnable = lorawan_adr_enable;
   1244c:	f88d 0004 	strb.w	r0, [sp, #4]
		LoRaMacMibSetRequestConfirm(&mib_req);
   12450:	4668      	mov	r0, sp
		mib_req.Type = MIB_ADR;
   12452:	f88d 3000 	strb.w	r3, [sp]
		LoRaMacMibSetRequestConfirm(&mib_req);
   12456:	f004 feb9 	bl	171cc <LoRaMacMibSetRequestConfirm>
}
   1245a:	b00b      	add	sp, #44	; 0x2c
   1245c:	f85d fb04 	ldr.w	pc, [sp], #4
   12460:	200318ec 	.word	0x200318ec

00012464 <lorawan_send>:
{
   12464:	b5f0      	push	{r4, r5, r6, r7, lr}
   12466:	4607      	mov	r7, r0
   12468:	4615      	mov	r5, r2
   1246a:	461c      	mov	r4, r3
	if (data == NULL) {
   1246c:	460e      	mov	r6, r1
{
   1246e:	b08b      	sub	sp, #44	; 0x2c
	if (data == NULL) {
   12470:	2900      	cmp	r1, #0
   12472:	d05f      	beq.n	12534 <lorawan_send+0xd0>
	return z_impl_k_mutex_lock(mutex, timeout);
   12474:	f04f 32ff 	mov.w	r2, #4294967295
   12478:	f04f 33ff 	mov.w	r3, #4294967295
   1247c:	482f      	ldr	r0, [pc, #188]	; (1253c <lorawan_send+0xd8>)
   1247e:	f013 fa43 	bl	25908 <z_impl_k_mutex_lock>
	status = LoRaMacQueryTxPossible(len, &tx_info);
   12482:	4628      	mov	r0, r5
   12484:	a904      	add	r1, sp, #16
   12486:	f004 fd5f 	bl	16f48 <LoRaMacQueryTxPossible>
	if (status != LORAMAC_STATUS_OK) {
   1248a:	b388      	cbz	r0, 124f0 <lorawan_send+0x8c>
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
   1248c:	f000 f8d8 	bl	12640 <lorawan_status2str>
   12490:	2400      	movs	r4, #0
		empty_frame = true;
   12492:	2501      	movs	r5, #1
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
   12494:	4b2a      	ldr	r3, [pc, #168]	; (12540 <lorawan_send+0xdc>)
   12496:	9003      	str	r0, [sp, #12]
   12498:	9302      	str	r3, [sp, #8]
   1249a:	2201      	movs	r2, #1
   1249c:	4623      	mov	r3, r4
   1249e:	4620      	mov	r0, r4
   124a0:	e9cd 4400 	strd	r4, r4, [sp]
   124a4:	4927      	ldr	r1, [pc, #156]	; (12544 <lorawan_send+0xe0>)
   124a6:	f019 faa4 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
		mcps_req.Type = MCPS_UNCONFIRMED;
   124aa:	f88d 4014 	strb.w	r4, [sp, #20]
		mcps_req.Req.Unconfirmed.fBuffer = NULL;
   124ae:	9407      	str	r4, [sp, #28]
		mcps_req.Req.Unconfirmed.fBufferSize = 0;
   124b0:	f8ad 4020 	strh.w	r4, [sp, #32]
	status = LoRaMacMcpsRequest(&mcps_req);
   124b4:	a805      	add	r0, sp, #20
		mcps_req.Req.Unconfirmed.Datarate = DR_0;
   124b6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
	status = LoRaMacMcpsRequest(&mcps_req);
   124ba:	f005 fa57 	bl	1796c <LoRaMacMcpsRequest>
	if (status != LORAMAC_STATUS_OK) {
   124be:	4604      	mov	r4, r0
   124c0:	b330      	cbz	r0, 12510 <lorawan_send+0xac>
		LOG_ERR("LoRaWAN Send failed: %s", lorawan_status2str(status));
   124c2:	f000 f8bd 	bl	12640 <lorawan_status2str>
   124c6:	4b20      	ldr	r3, [pc, #128]	; (12548 <lorawan_send+0xe4>)
   124c8:	2201      	movs	r2, #1
   124ca:	9302      	str	r3, [sp, #8]
   124cc:	2300      	movs	r3, #0
   124ce:	491d      	ldr	r1, [pc, #116]	; (12544 <lorawan_send+0xe0>)
   124d0:	e9cd 3300 	strd	r3, r3, [sp]
   124d4:	9003      	str	r0, [sp, #12]
   124d6:	4618      	mov	r0, r3
   124d8:	f019 fa8b 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
		ret = lorawan_status2errno(status);
   124dc:	4620      	mov	r0, r4
   124de:	f000 f8c7 	bl	12670 <lorawan_status2errno>
   124e2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   124e4:	4815      	ldr	r0, [pc, #84]	; (1253c <lorawan_send+0xd8>)
   124e6:	f013 fa89 	bl	259fc <z_impl_k_mutex_unlock>
}
   124ea:	4620      	mov	r0, r4
   124ec:	b00b      	add	sp, #44	; 0x2c
   124ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (type) {
   124f0:	b15c      	cbz	r4, 1250a <lorawan_send+0xa6>
   124f2:	2c01      	cmp	r4, #1
   124f4:	d009      	beq.n	1250a <lorawan_send+0xa6>
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   124f6:	4b15      	ldr	r3, [pc, #84]	; (1254c <lorawan_send+0xe8>)
		mcps_req.Req.Unconfirmed.fBufferSize = len;
   124f8:	f8ad 5020 	strh.w	r5, [sp, #32]
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   124fc:	f993 4000 	ldrsb.w	r4, [r3]
	bool empty_frame = false;
   12500:	2500      	movs	r5, #0
		mcps_req.Req.Unconfirmed.fPort = port;
   12502:	f88d 7018 	strb.w	r7, [sp, #24]
		mcps_req.Req.Unconfirmed.fBuffer = data;
   12506:	9607      	str	r6, [sp, #28]
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   12508:	e7d4      	b.n	124b4 <lorawan_send+0x50>
			mcps_req.Type = MCPS_CONFIRMED;
   1250a:	f88d 4014 	strb.w	r4, [sp, #20]
			break;
   1250e:	e7f2      	b.n	124f6 <lorawan_send+0x92>
	return z_impl_k_sem_take(sem, timeout);
   12510:	f04f 33ff 	mov.w	r3, #4294967295
   12514:	f04f 32ff 	mov.w	r2, #4294967295
   12518:	480d      	ldr	r0, [pc, #52]	; (12550 <lorawan_send+0xec>)
   1251a:	f013 fb07 	bl	25b2c <z_impl_k_sem_take>
	if (last_mcps_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
   1251e:	4b0d      	ldr	r3, [pc, #52]	; (12554 <lorawan_send+0xf0>)
   12520:	7818      	ldrb	r0, [r3, #0]
   12522:	b108      	cbz	r0, 12528 <lorawan_send+0xc4>
		ret = lorawan_eventinfo2errno(last_mcps_confirm_status);
   12524:	f000 f8b6 	bl	12694 <lorawan_eventinfo2errno>
		ret = -EAGAIN;
   12528:	2d00      	cmp	r5, #0
	int ret = 0;
   1252a:	4604      	mov	r4, r0
		ret = -EAGAIN;
   1252c:	bf18      	it	ne
   1252e:	f06f 040a 	mvnne.w	r4, #10
   12532:	e7d7      	b.n	124e4 <lorawan_send+0x80>
		return -EINVAL;
   12534:	f06f 0415 	mvn.w	r4, #21
   12538:	e7d7      	b.n	124ea <lorawan_send+0x86>
   1253a:	bf00      	nop
   1253c:	20008c18 	.word	0x20008c18
   12540:	00035d05 	.word	0x00035d05
   12544:	000330d8 	.word	0x000330d8
   12548:	00035d2a 	.word	0x00035d2a
   1254c:	200318ed 	.word	0x200318ed
   12550:	20008d90 	.word	0x20008d90
   12554:	200318eb 	.word	0x200318eb

00012558 <lorawan_register_downlink_callback>:
	parent->next = child;
   12558:	2300      	movs	r3, #0
   1255a:	6083      	str	r3, [r0, #8]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   1255c:	4b05      	ldr	r3, [pc, #20]	; (12574 <lorawan_register_downlink_callback+0x1c>)
	sys_slist_append(&dl_callbacks, &cb->node);
   1255e:	f100 0208 	add.w	r2, r0, #8
   12562:	6859      	ldr	r1, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12564:	b911      	cbnz	r1, 1256c <lorawan_register_downlink_callback+0x14>
	list->head = node;
   12566:	e9c3 2200 	strd	r2, r2, [r3]
}
   1256a:	4770      	bx	lr
	parent->next = child;
   1256c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1256e:	605a      	str	r2, [r3, #4]
}
   12570:	4770      	bx	lr
   12572:	bf00      	nop
   12574:	2002fa34 	.word	0x2002fa34

00012578 <lorawan_register_dr_changed_callback>:
	dr_change_cb = cb;
   12578:	4b01      	ldr	r3, [pc, #4]	; (12580 <lorawan_register_dr_changed_callback+0x8>)
   1257a:	6018      	str	r0, [r3, #0]
}
   1257c:	4770      	bx	lr
   1257e:	bf00      	nop
   12580:	2002fa0c 	.word	0x2002fa0c

00012584 <lorawan_start>:
{
   12584:	b570      	push	{r4, r5, r6, lr}
	status = LoRaMacInitialization(&mac_primitives, &mac_callbacks,
   12586:	4e24      	ldr	r6, [pc, #144]	; (12618 <lorawan_start+0x94>)
   12588:	4924      	ldr	r1, [pc, #144]	; (1261c <lorawan_start+0x98>)
   1258a:	7832      	ldrb	r2, [r6, #0]
   1258c:	4824      	ldr	r0, [pc, #144]	; (12620 <lorawan_start+0x9c>)
{
   1258e:	b092      	sub	sp, #72	; 0x48
	status = LoRaMacInitialization(&mac_primitives, &mac_callbacks,
   12590:	f004 fb0c 	bl	16bac <LoRaMacInitialization>
	if (status != LORAMAC_STATUS_OK) {
   12594:	4604      	mov	r4, r0
   12596:	b180      	cbz	r0, 125ba <lorawan_start+0x36>
		LOG_ERR("LoRaMacInitialization failed: %s",
   12598:	f000 f852 	bl	12640 <lorawan_status2str>
   1259c:	4b21      	ldr	r3, [pc, #132]	; (12624 <lorawan_start+0xa0>)
   1259e:	9003      	str	r0, [sp, #12]
   125a0:	9302      	str	r3, [sp, #8]
   125a2:	2300      	movs	r3, #0
   125a4:	e9cd 3300 	strd	r3, r3, [sp]
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
   125a8:	4618      	mov	r0, r3
   125aa:	2201      	movs	r2, #1
   125ac:	491e      	ldr	r1, [pc, #120]	; (12628 <lorawan_start+0xa4>)
   125ae:	f019 fa20 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   125b2:	f06f 0015 	mvn.w	r0, #21
}
   125b6:	b012      	add	sp, #72	; 0x48
   125b8:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("LoRaMAC Initialized");
   125ba:	4b1c      	ldr	r3, [pc, #112]	; (1262c <lorawan_start+0xa8>)
   125bc:	2204      	movs	r2, #4
   125be:	9303      	str	r3, [sp, #12]
   125c0:	4b1b      	ldr	r3, [pc, #108]	; (12630 <lorawan_start+0xac>)
   125c2:	4919      	ldr	r1, [pc, #100]	; (12628 <lorawan_start+0xa4>)
   125c4:	9302      	str	r3, [sp, #8]
   125c6:	2308      	movs	r3, #8
   125c8:	e9cd 0300 	strd	r0, r3, [sp]
   125cc:	4603      	mov	r3, r0
   125ce:	f019 fa10 	bl	2b9f2 <z_log_msg_runtime_create.constprop.0>
	status = LoRaMacStart();
   125d2:	f004 fcb1 	bl	16f38 <LoRaMacStart>
	if (status != LORAMAC_STATUS_OK) {
   125d6:	4605      	mov	r5, r0
   125d8:	b140      	cbz	r0, 125ec <lorawan_start+0x68>
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
   125da:	f000 f831 	bl	12640 <lorawan_status2str>
   125de:	4b15      	ldr	r3, [pc, #84]	; (12634 <lorawan_start+0xb0>)
   125e0:	9003      	str	r0, [sp, #12]
   125e2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   125e6:	9400      	str	r4, [sp, #0]
   125e8:	4623      	mov	r3, r4
   125ea:	e7dd      	b.n	125a8 <lorawan_start+0x24>
	phy_params.Attribute = PHY_DEF_TX_DR;
   125ec:	2306      	movs	r3, #6
	phy_param = RegionGetPhyParam(selected_region, &phy_params);
   125ee:	a906      	add	r1, sp, #24
   125f0:	7830      	ldrb	r0, [r6, #0]
	phy_params.Attribute = PHY_DEF_TX_DR;
   125f2:	f88d 3018 	strb.w	r3, [sp, #24]
	phy_param = RegionGetPhyParam(selected_region, &phy_params);
   125f6:	f01a faa0 	bl	2cb3a <RegionGetPhyParam>
	default_datarate = phy_param.Value;
   125fa:	4b0f      	ldr	r3, [pc, #60]	; (12638 <lorawan_start+0xb4>)
   125fc:	b2c0      	uxtb	r0, r0
   125fe:	7018      	strb	r0, [r3, #0]
	current_datarate = default_datarate;
   12600:	4b0e      	ldr	r3, [pc, #56]	; (1263c <lorawan_start+0xb8>)
   12602:	7018      	strb	r0, [r3, #0]
	mib_req.Type = MIB_SYSTEM_MAX_RX_ERROR;
   12604:	2330      	movs	r3, #48	; 0x30
   12606:	f88d 3020 	strb.w	r3, [sp, #32]
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
   1260a:	23c8      	movs	r3, #200	; 0xc8
	LoRaMacMibSetRequestConfirm(&mib_req);
   1260c:	a808      	add	r0, sp, #32
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
   1260e:	9309      	str	r3, [sp, #36]	; 0x24
	LoRaMacMibSetRequestConfirm(&mib_req);
   12610:	f004 fddc 	bl	171cc <LoRaMacMibSetRequestConfirm>
	return 0;
   12614:	4628      	mov	r0, r5
   12616:	e7ce      	b.n	125b6 <lorawan_start+0x32>
   12618:	20008ac6 	.word	0x20008ac6
   1261c:	2002fa14 	.word	0x2002fa14
   12620:	2002fa24 	.word	0x2002fa24
   12624:	00035d42 	.word	0x00035d42
   12628:	000330d8 	.word	0x000330d8
   1262c:	00035dfb 	.word	0x00035dfb
   12630:	00035d63 	.word	0x00035d63
   12634:	00035d7b 	.word	0x00035d7b
   12638:	200318ee 	.word	0x200318ee
   1263c:	200318ed 	.word	0x200318ed

00012640 <lorawan_status2str>:
	[LORAMAC_STATUS_ERROR] = "Unknown error",
};

const char *lorawan_status2str(unsigned int status)
{
	if (status < ARRAY_SIZE(status2str)) {
   12640:	2817      	cmp	r0, #23
		return status2str[status];
   12642:	bf9a      	itte	ls
   12644:	4b02      	ldrls	r3, [pc, #8]	; (12650 <lorawan_status2str+0x10>)
   12646:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown status!";
   1264a:	4802      	ldrhi	r0, [pc, #8]	; (12654 <lorawan_status2str+0x14>)
	}
}
   1264c:	4770      	bx	lr
   1264e:	bf00      	nop
   12650:	000339b4 	.word	0x000339b4
   12654:	00035e31 	.word	0x00035e31

00012658 <lorawan_eventinfo2str>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = "Beacon not found",
};

const char *lorawan_eventinfo2str(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2str)) {
   12658:	280f      	cmp	r0, #15
		return eventinfo2str[status];
   1265a:	bf9a      	itte	ls
   1265c:	4b02      	ldrls	r3, [pc, #8]	; (12668 <lorawan_eventinfo2str+0x10>)
   1265e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown event!";
   12662:	4802      	ldrhi	r0, [pc, #8]	; (1266c <lorawan_eventinfo2str+0x14>)
	}
}
   12664:	4770      	bx	lr
   12666:	bf00      	nop
   12668:	00033974 	.word	0x00033974
   1266c:	00035e41 	.word	0x00035e41

00012670 <lorawan_status2errno>:
	[LORAMAC_STATUS_MC_GROUP_UNDEFINED] = -EINVAL,
};

const int lorawan_status2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
   12670:	2816      	cmp	r0, #22
{
   12672:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
   12674:	d808      	bhi.n	12688 <lorawan_status2errno+0x18>
   12676:	4a06      	ldr	r2, [pc, #24]	; (12690 <lorawan_status2errno+0x20>)
   12678:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1267c:	b930      	cbnz	r0, 1268c <lorawan_status2errno+0x1c>
		return status2errno[status];
	} else {
		return status == LORAMAC_STATUS_OK ? 0 : -EINVAL;
   1267e:	2b00      	cmp	r3, #0
   12680:	bf18      	it	ne
   12682:	f06f 0015 	mvnne.w	r0, #21
   12686:	4770      	bx	lr
   12688:	f06f 0015 	mvn.w	r0, #21
	}
}
   1268c:	4770      	bx	lr
   1268e:	bf00      	nop
   12690:	00033918 	.word	0x00033918

00012694 <lorawan_eventinfo2errno>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = -EINVAL,
};

const int lorawan_eventinfo2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   12694:	280f      	cmp	r0, #15
{
   12696:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   12698:	d808      	bhi.n	126ac <lorawan_eventinfo2errno+0x18>
	    eventinfo2errno[status] != 0) {
   1269a:	4a06      	ldr	r2, [pc, #24]	; (126b4 <lorawan_eventinfo2errno+0x20>)
   1269c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   126a0:	b930      	cbnz	r0, 126b0 <lorawan_eventinfo2errno+0x1c>
		return eventinfo2errno[status];
	} else {
		return status == LORAMAC_EVENT_INFO_STATUS_OK ? 0 : -EINVAL;
   126a2:	2b00      	cmp	r3, #0
   126a4:	bf18      	it	ne
   126a6:	f06f 0015 	mvnne.w	r0, #21
   126aa:	4770      	bx	lr
   126ac:	f06f 0015 	mvn.w	r0, #21
	}
}
   126b0:	4770      	bx	lr
   126b2:	bf00      	nop
   126b4:	000338d8 	.word	0x000338d8

000126b8 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
   126b8:	4801      	ldr	r0, [pc, #4]	; (126c0 <timer_callback+0x8>)
   126ba:	f013 bb8d 	b.w	25dd8 <k_work_submit>
   126be:	bf00      	nop
   126c0:	200084e8 	.word	0x200084e8

000126c4 <RtcBkupWrite>:

K_TIMER_DEFINE(lora_timer, timer_callback, NULL);

void RtcBkupWrite(uint32_t data0, uint32_t data1)
{
	backup_reg[0] = data0;
   126c4:	4b01      	ldr	r3, [pc, #4]	; (126cc <RtcBkupWrite+0x8>)
   126c6:	6018      	str	r0, [r3, #0]
	backup_reg[1] = data1;
   126c8:	6059      	str	r1, [r3, #4]
}
   126ca:	4770      	bx	lr
   126cc:	2002fa3c 	.word	0x2002fa3c

000126d0 <RtcBkupRead>:

void RtcBkupRead(uint32_t *data0, uint32_t *data1)
{
	*data0 = backup_reg[0];
   126d0:	4b02      	ldr	r3, [pc, #8]	; (126dc <RtcBkupRead+0xc>)
   126d2:	681a      	ldr	r2, [r3, #0]
	*data1 = backup_reg[1];
   126d4:	685b      	ldr	r3, [r3, #4]
	*data0 = backup_reg[0];
   126d6:	6002      	str	r2, [r0, #0]
	*data1 = backup_reg[1];
   126d8:	600b      	str	r3, [r1, #0]
}
   126da:	4770      	bx	lr
   126dc:	2002fa3c 	.word	0x2002fa3c

000126e0 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
   126e0:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
   126e2:	f019 f9ba 	bl	2ba5a <k_uptime_get_32>
   126e6:	4b02      	ldr	r3, [pc, #8]	; (126f0 <RtcGetTimerElapsedTime+0x10>)
   126e8:	681b      	ldr	r3, [r3, #0]
}
   126ea:	1ac0      	subs	r0, r0, r3
   126ec:	bd08      	pop	{r3, pc}
   126ee:	bf00      	nop
   126f0:	2002fa44 	.word	0x2002fa44

000126f4 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
   126f4:	4801      	ldr	r0, [pc, #4]	; (126fc <RtcStopAlarm+0x8>)
   126f6:	f01e bef4 	b.w	314e2 <z_impl_k_timer_stop>
   126fa:	bf00      	nop
   126fc:	20008b00 	.word	0x20008b00

00012700 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
   12700:	b507      	push	{r0, r1, r2, lr}
   12702:	4601      	mov	r1, r0
			return ((t * to_hz + off) / from_hz);
   12704:	f240 30e7 	movw	r0, #999	; 0x3e7
   12708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1270c:	2300      	movs	r3, #0
   1270e:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   12712:	0c49      	lsrs	r1, r1, #17
   12714:	f7f6 fc14 	bl	8f40 <__aeabi_uldivmod>
   12718:	4602      	mov	r2, r0
   1271a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1271c:	2100      	movs	r1, #0
   1271e:	2000      	movs	r0, #0
   12720:	e9cd 0100 	strd	r0, r1, [sp]
   12724:	4802      	ldr	r0, [pc, #8]	; (12730 <RtcSetAlarm+0x30>)
   12726:	f014 f957 	bl	269d8 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
   1272a:	b003      	add	sp, #12
   1272c:	f85d fb04 	ldr.w	pc, [sp], #4
   12730:	20008b00 	.word	0x20008b00

00012734 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
   12734:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
   12736:	f019 f990 	bl	2ba5a <k_uptime_get_32>
   1273a:	4b01      	ldr	r3, [pc, #4]	; (12740 <RtcSetTimerContext+0xc>)
   1273c:	6018      	str	r0, [r3, #0]

	return saved_time;
}
   1273e:	bd08      	pop	{r3, pc}
   12740:	2002fa44 	.word	0x2002fa44

00012744 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
   12744:	4b01      	ldr	r3, [pc, #4]	; (1274c <RtcGetTimerContext+0x8>)
   12746:	6818      	ldr	r0, [r3, #0]
   12748:	4770      	bx	lr
   1274a:	bf00      	nop
   1274c:	2002fa44 	.word	0x2002fa44

00012750 <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
   12750:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
   12754:	4c23      	ldr	r4, [pc, #140]	; (127e4 <sx12xx_ev_rx_done+0x94>)
{
   12756:	469a      	mov	sl, r3

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
   12758:	e9d4 9301 	ldrd	r9, r3, [r4, #4]
{
   1275c:	4607      	mov	r7, r0
   1275e:	460d      	mov	r5, r1
   12760:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
   12762:	b17b      	cbz	r3, 12784 <sx12xx_ev_rx_done+0x34>
		/* Start receiving again */
		Radio.Rx(0);
   12764:	4b20      	ldr	r3, [pc, #128]	; (127e8 <sx12xx_ev_rx_done+0x98>)
   12766:	2000      	movs	r0, #0
   12768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1276a:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
   1276c:	f8cd a000 	str.w	sl, [sp]
   12770:	4633      	mov	r3, r6
   12772:	462a      	mov	r2, r5
   12774:	4639      	mov	r1, r7
   12776:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1277a:	6820      	ldr	r0, [r4, #0]
   1277c:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
   1277e:	b002      	add	sp, #8
   12780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12784:	2302      	movs	r3, #2
   12786:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1278a:	e8d2 1fef 	ldaex	r1, [r2]
   1278e:	2901      	cmp	r1, #1
   12790:	d103      	bne.n	1279a <sx12xx_ev_rx_done+0x4a>
   12792:	e8c2 3fe0 	stlex	r0, r3, [r2]
   12796:	2800      	cmp	r0, #0
   12798:	d1f7      	bne.n	1278a <sx12xx_ev_rx_done+0x3a>
   1279a:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
   1279c:	d1ef      	bne.n	1277e <sx12xx_ev_rx_done+0x2e>
	if (size < *dev_data.rx_params.size) {
   1279e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   127a0:	4639      	mov	r1, r7
   127a2:	781a      	ldrb	r2, [r3, #0]
   127a4:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
   127a6:	bf88      	it	hi
   127a8:	701d      	strbhi	r5, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
   127aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   127ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
   127ae:	781a      	ldrb	r2, [r3, #0]
   127b0:	f01f f83d 	bl	3182e <memcpy>
	if (dev_data.rx_params.rssi) {
   127b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   127b6:	b103      	cbz	r3, 127ba <sx12xx_ev_rx_done+0x6a>
		*dev_data.rx_params.rssi = rssi;
   127b8:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
   127ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   127bc:	b10b      	cbz	r3, 127c2 <sx12xx_ev_rx_done+0x72>
		*dev_data.rx_params.snr = snr;
   127be:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
   127c2:	4b09      	ldr	r3, [pc, #36]	; (127e8 <sx12xx_ev_rx_done+0x98>)
   127c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   127c6:	4798      	blx	r3
	dev_data.operation_done = NULL;
   127c8:	2100      	movs	r1, #0
   127ca:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   127cc:	e8d8 3fef 	ldaex	r3, [r8]
   127d0:	e8c8 1fe2 	stlex	r2, r1, [r8]
   127d4:	2a00      	cmp	r2, #0
   127d6:	d1f9      	bne.n	127cc <sx12xx_ev_rx_done+0x7c>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   127d8:	4648      	mov	r0, r9
}
   127da:	b002      	add	sp, #8
   127dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127e0:	f014 b9a2 	b.w	26b28 <z_impl_k_poll_signal_raise>
   127e4:	2002fa48 	.word	0x2002fa48
   127e8:	00033a2c 	.word	0x00033a2c

000127ec <modem_release.constprop.0>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   127ec:	2302      	movs	r3, #2
static bool modem_release(struct sx12xx_data *data)
   127ee:	b510      	push	{r4, lr}
   127f0:	4c0d      	ldr	r4, [pc, #52]	; (12828 <modem_release.constprop.0+0x3c>)
   127f2:	e8d4 2fef 	ldaex	r2, [r4]
   127f6:	2a01      	cmp	r2, #1
   127f8:	d103      	bne.n	12802 <modem_release.constprop.0+0x16>
   127fa:	e8c4 3fe1 	stlex	r1, r3, [r4]
   127fe:	2900      	cmp	r1, #0
   12800:	d1f7      	bne.n	127f2 <modem_release.constprop.0+0x6>
   12802:	bf0c      	ite	eq
   12804:	2001      	moveq	r0, #1
   12806:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
   12808:	d10c      	bne.n	12824 <modem_release.constprop.0+0x38>
	Radio.Sleep();
   1280a:	4b08      	ldr	r3, [pc, #32]	; (1282c <modem_release.constprop.0+0x40>)
   1280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1280e:	4798      	blx	r3
	data->operation_done = NULL;
   12810:	2300      	movs	r3, #0
   12812:	f844 3c3c 	str.w	r3, [r4, #-60]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12816:	e8d4 2fef 	ldaex	r2, [r4]
   1281a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1281e:	2900      	cmp	r1, #0
   12820:	d1f9      	bne.n	12816 <modem_release.constprop.0+0x2a>
	return true;
   12822:	2001      	movs	r0, #1
}
   12824:	bd10      	pop	{r4, pc}
   12826:	bf00      	nop
   12828:	2002fa88 	.word	0x2002fa88
   1282c:	00033a2c 	.word	0x00033a2c

00012830 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
   12830:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
   12832:	4b06      	ldr	r3, [pc, #24]	; (1284c <sx12xx_ev_tx_done+0x1c>)
   12834:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
   12836:	f7ff ffd9 	bl	127ec <modem_release.constprop.0>
   1283a:	b130      	cbz	r0, 1284a <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
   1283c:	b12c      	cbz	r4, 1284a <sx12xx_ev_tx_done+0x1a>
   1283e:	2100      	movs	r1, #0
   12840:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
   12842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12846:	f014 b96f 	b.w	26b28 <z_impl_k_poll_signal_raise>
   1284a:	bd10      	pop	{r4, pc}
   1284c:	2002fa48 	.word	0x2002fa48

00012850 <__sx12xx_configure_pin>:
{
   12850:	b5f0      	push	{r4, r5, r6, r7, lr}
   12852:	4604      	mov	r4, r0
   12854:	460e      	mov	r6, r1
	if (!device_is_ready(gpio->port)) {
   12856:	6800      	ldr	r0, [r0, #0]
{
   12858:	b087      	sub	sp, #28
   1285a:	f01e fa14 	bl	30c86 <z_device_is_ready>
   1285e:	6825      	ldr	r5, [r4, #0]
   12860:	4603      	mov	r3, r0
	if (!device_is_ready(gpio->port)) {
   12862:	b970      	cbnz	r0, 12882 <__sx12xx_configure_pin+0x32>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
   12864:	682a      	ldr	r2, [r5, #0]
   12866:	491f      	ldr	r1, [pc, #124]	; (128e4 <__sx12xx_configure_pin+0x94>)
   12868:	9203      	str	r2, [sp, #12]
   1286a:	4a1f      	ldr	r2, [pc, #124]	; (128e8 <__sx12xx_configure_pin+0x98>)
   1286c:	9000      	str	r0, [sp, #0]
   1286e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12872:	2201      	movs	r2, #1
   12874:	f019 f939 	bl	2baea <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   12878:	f06f 0512 	mvn.w	r5, #18
}
   1287c:	4628      	mov	r0, r5
   1287e:	b007      	add	sp, #28
   12880:	bdf0      	pop	{r4, r5, r6, r7, pc}
				  spec->dt_flags | extra_flags);
   12882:	88e3      	ldrh	r3, [r4, #6]
				  spec->pin,
   12884:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   12886:	4333      	orrs	r3, r6
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   12888:	02d8      	lsls	r0, r3, #11
	const struct gpio_driver_api *api =
   1288a:	f8d5 c008 	ldr.w	ip, [r5, #8]
	struct gpio_driver_data *data =
   1288e:	692f      	ldr	r7, [r5, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   12890:	d506      	bpl.n	128a0 <__sx12xx_configure_pin+0x50>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   12892:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   12896:	d003      	beq.n	128a0 <__sx12xx_configure_pin+0x50>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   12898:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1289a:	bf48      	it	mi
   1289c:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   128a0:	2601      	movs	r6, #1
   128a2:	6838      	ldr	r0, [r7, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   128a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   128a8:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   128aa:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   128ac:	bf4c      	ite	mi
   128ae:	4330      	orrmi	r0, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   128b0:	43b0      	bicpl	r0, r6
   128b2:	6038      	str	r0, [r7, #0]
	return api->pin_configure(port, pin, flags);
   128b4:	f8dc 3000 	ldr.w	r3, [ip]
   128b8:	4628      	mov	r0, r5
   128ba:	4798      	blx	r3
	if (err) {
   128bc:	4605      	mov	r5, r0
   128be:	2800      	cmp	r0, #0
   128c0:	d0dc      	beq.n	1287c <__sx12xx_configure_pin+0x2c>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
   128c2:	9005      	str	r0, [sp, #20]
   128c4:	7923      	ldrb	r3, [r4, #4]
   128c6:	2201      	movs	r2, #1
   128c8:	9304      	str	r3, [sp, #16]
   128ca:	6823      	ldr	r3, [r4, #0]
   128cc:	4905      	ldr	r1, [pc, #20]	; (128e4 <__sx12xx_configure_pin+0x94>)
   128ce:	681b      	ldr	r3, [r3, #0]
   128d0:	9303      	str	r3, [sp, #12]
   128d2:	4b06      	ldr	r3, [pc, #24]	; (128ec <__sx12xx_configure_pin+0x9c>)
   128d4:	9302      	str	r3, [sp, #8]
   128d6:	2300      	movs	r3, #0
   128d8:	4618      	mov	r0, r3
   128da:	e9cd 3300 	strd	r3, r3, [sp]
   128de:	f019 f904 	bl	2baea <z_log_msg_runtime_create.constprop.0>
		return err;
   128e2:	e7cb      	b.n	1287c <__sx12xx_configure_pin+0x2c>
   128e4:	00033138 	.word	0x00033138
   128e8:	000360c9 	.word	0x000360c9
   128ec:	000360e2 	.word	0x000360e2

000128f0 <sx12xx_lora_send_async>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   128f0:	2001      	movs	r0, #1
	return ret;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
   128f2:	b570      	push	{r4, r5, r6, lr}
   128f4:	460d      	mov	r5, r1
   128f6:	490d      	ldr	r1, [pc, #52]	; (1292c <sx12xx_lora_send_async+0x3c>)
   128f8:	e8d1 4fef 	ldaex	r4, [r1]
   128fc:	2c00      	cmp	r4, #0
   128fe:	d103      	bne.n	12908 <sx12xx_lora_send_async+0x18>
   12900:	e8c1 0fe6 	stlex	r6, r0, [r1]
   12904:	2e00      	cmp	r6, #0
   12906:	d1f7      	bne.n	128f8 <sx12xx_lora_send_async+0x8>
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
   12908:	d10c      	bne.n	12924 <sx12xx_lora_send_async+0x34>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1290a:	4e09      	ldr	r6, [pc, #36]	; (12930 <sx12xx_lora_send_async+0x40>)
   1290c:	b2d4      	uxtb	r4, r2
	dev_data.operation_done = async;
   1290e:	f841 3c3c 	str.w	r3, [r1, #-60]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   12912:	4621      	mov	r1, r4
   12914:	6d73      	ldr	r3, [r6, #84]	; 0x54
   12916:	4798      	blx	r3

	Radio.Send(data, data_len);
   12918:	4628      	mov	r0, r5
   1291a:	4621      	mov	r1, r4
   1291c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1291e:	4798      	blx	r3

	return 0;
   12920:	2000      	movs	r0, #0
}
   12922:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   12924:	f06f 000f 	mvn.w	r0, #15
   12928:	e7fb      	b.n	12922 <sx12xx_lora_send_async+0x32>
   1292a:	bf00      	nop
   1292c:	2002fa88 	.word	0x2002fa88
   12930:	00033a2c 	.word	0x00033a2c

00012934 <sx12xx_lora_send>:
{
   12934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12938:	2400      	movs	r4, #0
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   1293a:	2601      	movs	r6, #1
{
   1293c:	b090      	sub	sp, #64	; 0x40
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   1293e:	ad07      	add	r5, sp, #28
{
   12940:	4681      	mov	r9, r0
   12942:	468a      	mov	sl, r1
   12944:	4617      	mov	r7, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12946:	4621      	mov	r1, r4
   12948:	2210      	movs	r2, #16
	if (!dev_data.tx_cfg.frequency) {
   1294a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 12a1c <sx12xx_lora_send+0xe8>
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   1294e:	a80b      	add	r0, sp, #44	; 0x2c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12950:	e9cd 5507 	strd	r5, r5, [sp, #28]
   12954:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12958:	f01e ffa3 	bl	318a2 <memset>
   1295c:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
	if (!dev_data.tx_cfg.frequency) {
   12960:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12964:	950f      	str	r5, [sp, #60]	; 0x3c
	if (!dev_data.tx_cfg.frequency) {
   12966:	2b00      	cmp	r3, #0
   12968:	d054      	beq.n	12a14 <sx12xx_lora_send+0xe0>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
   1296a:	462b      	mov	r3, r5
   1296c:	463a      	mov	r2, r7
   1296e:	4651      	mov	r1, sl
   12970:	4648      	mov	r0, r9
   12972:	f7ff ffbd 	bl	128f0 <sx12xx_lora_send_async>
	if (ret < 0) {
   12976:	1e05      	subs	r5, r0, #0
   12978:	db48      	blt.n	12a0c <sx12xx_lora_send+0xd8>
	air_time = Radio.TimeOnAir(MODEM_LORA,
   1297a:	b2fb      	uxtb	r3, r7
   1297c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12980:	9603      	str	r6, [sp, #12]
   12982:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   12986:	4d26      	ldr	r5, [pc, #152]	; (12a20 <sx12xx_lora_send+0xec>)
   12988:	9300      	str	r3, [sp, #0]
   1298a:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
   1298e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
   12992:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
   12996:	4630      	mov	r0, r6
   12998:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   1299a:	47a8      	blx	r5
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
   1299c:	4b21      	ldr	r3, [pc, #132]	; (12a24 <sx12xx_lora_send+0xf0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
   1299e:	4605      	mov	r5, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
   129a0:	9303      	str	r3, [sp, #12]
   129a2:	4b21      	ldr	r3, [pc, #132]	; (12a28 <sx12xx_lora_send+0xf4>)
   129a4:	e9cd 7004 	strd	r7, r0, [sp, #16]
   129a8:	9302      	str	r3, [sp, #8]
   129aa:	2308      	movs	r3, #8
   129ac:	4620      	mov	r0, r4
   129ae:	e9cd 4300 	strd	r4, r3, [sp]
   129b2:	2204      	movs	r2, #4
   129b4:	4623      	mov	r3, r4
   129b6:	491d      	ldr	r1, [pc, #116]	; (12a2c <sx12xx_lora_send+0xf8>)
   129b8:	f019 f897 	bl	2baea <z_log_msg_runtime_create.constprop.0>
   129bc:	f240 30e7 	movw	r0, #999	; 0x3e7
   129c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   129c4:	2300      	movs	r3, #0
   129c6:	eb00 4005 	add.w	r0, r0, r5, lsl #16
   129ca:	f3c5 410e 	ubfx	r1, r5, #16, #15
   129ce:	f7f6 fab7 	bl	8f40 <__aeabi_uldivmod>
   129d2:	4602      	mov	r2, r0
   129d4:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
   129d6:	4631      	mov	r1, r6
   129d8:	a80b      	add	r0, sp, #44	; 0x2c
   129da:	f014 f849 	bl	26a70 <z_impl_k_poll>
	if (ret < 0) {
   129de:	1e05      	subs	r5, r0, #0
   129e0:	da14      	bge.n	12a0c <sx12xx_lora_send+0xd8>
		LOG_ERR("Packet transmission failed!");
   129e2:	4b13      	ldr	r3, [pc, #76]	; (12a30 <sx12xx_lora_send+0xfc>)
   129e4:	4632      	mov	r2, r6
   129e6:	4620      	mov	r0, r4
   129e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   129ec:	490f      	ldr	r1, [pc, #60]	; (12a2c <sx12xx_lora_send+0xf8>)
   129ee:	4623      	mov	r3, r4
   129f0:	9400      	str	r4, [sp, #0]
   129f2:	f019 f87a 	bl	2baea <z_log_msg_runtime_create.constprop.0>
		if (!modem_release(&dev_data)) {
   129f6:	f7ff fef9 	bl	127ec <modem_release.constprop.0>
   129fa:	b938      	cbnz	r0, 12a0c <sx12xx_lora_send+0xd8>
   129fc:	f04f 32ff 	mov.w	r2, #4294967295
   12a00:	f04f 33ff 	mov.w	r3, #4294967295
   12a04:	4631      	mov	r1, r6
   12a06:	a80b      	add	r0, sp, #44	; 0x2c
   12a08:	f014 f832 	bl	26a70 <z_impl_k_poll>
}
   12a0c:	4628      	mov	r0, r5
   12a0e:	b010      	add	sp, #64	; 0x40
   12a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   12a14:	f06f 0515 	mvn.w	r5, #21
   12a18:	e7f8      	b.n	12a0c <sx12xx_lora_send+0xd8>
   12a1a:	bf00      	nop
   12a1c:	2002fa48 	.word	0x2002fa48
   12a20:	00033a2c 	.word	0x00033a2c
   12a24:	00036157 	.word	0x00036157
   12a28:	00036102 	.word	0x00036102
   12a2c:	00033138 	.word	0x00033138
   12a30:	0003612b 	.word	0x0003612b

00012a34 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
   12a34:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12a36:	2400      	movs	r4, #0
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12a38:	2601      	movs	r6, #1
{
   12a3a:	b091      	sub	sp, #68	; 0x44
   12a3c:	f88d 2017 	strb.w	r2, [sp, #23]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12a40:	ad07      	add	r5, sp, #28
{
   12a42:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12a44:	2210      	movs	r2, #16
   12a46:	4621      	mov	r1, r4
   12a48:	a80b      	add	r0, sp, #44	; 0x2c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12a4a:	e9cd 5507 	strd	r5, r5, [sp, #28]
   12a4e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12a52:	f01e ff26 	bl	318a2 <memset>
   12a56:	4b22      	ldr	r3, [pc, #136]	; (12ae0 <sx12xx_lora_recv+0xac>)
   12a58:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
   12a5c:	950f      	str	r5, [sp, #60]	; 0x3c
   12a5e:	e8d3 2fef 	ldaex	r2, [r3]
   12a62:	42a2      	cmp	r2, r4
   12a64:	d103      	bne.n	12a6e <sx12xx_lora_recv+0x3a>
   12a66:	e8c3 6fe1 	stlex	r1, r6, [r3]
   12a6a:	2900      	cmp	r1, #0
   12a6c:	d1f7      	bne.n	12a5e <sx12xx_lora_recv+0x2a>
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
   12a6e:	d134      	bne.n	12ada <sx12xx_lora_recv+0xa6>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
   12a70:	f10d 0217 	add.w	r2, sp, #23
   12a74:	609a      	str	r2, [r3, #8]
	dev_data.rx_params.rssi = rssi;
   12a76:	9a18      	ldr	r2, [sp, #96]	; 0x60
	dev_data.operation_done = &done;
   12a78:	e943 540f 	strd	r5, r4, [r3, #-60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
   12a7c:	60da      	str	r2, [r3, #12]
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12a7e:	4d19      	ldr	r5, [pc, #100]	; (12ae4 <sx12xx_lora_recv+0xb0>)
	dev_data.rx_params.snr = snr;
   12a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12a82:	21ff      	movs	r1, #255	; 0xff
	dev_data.rx_params.snr = snr;
   12a84:	611a      	str	r2, [r3, #16]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12a86:	4630      	mov	r0, r6
	dev_data.rx_params.buf = data;
   12a88:	605f      	str	r7, [r3, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12a8a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   12a8c:	4798      	blx	r3
	Radio.Rx(0);
   12a8e:	4620      	mov	r0, r4
   12a90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   12a92:	4798      	blx	r3
   12a94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   12a98:	4631      	mov	r1, r6
   12a9a:	a80b      	add	r0, sp, #44	; 0x2c
   12a9c:	f013 ffe8 	bl	26a70 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
   12aa0:	1e05      	subs	r5, r0, #0
   12aa2:	da0a      	bge.n	12aba <sx12xx_lora_recv+0x86>
		if (!modem_release(&dev_data)) {
   12aa4:	f7ff fea2 	bl	127ec <modem_release.constprop.0>
   12aa8:	b950      	cbnz	r0, 12ac0 <sx12xx_lora_recv+0x8c>
   12aaa:	f04f 32ff 	mov.w	r2, #4294967295
   12aae:	f04f 33ff 	mov.w	r3, #4294967295
   12ab2:	4631      	mov	r1, r6
   12ab4:	a80b      	add	r0, sp, #44	; 0x2c
   12ab6:	f013 ffdb 	bl	26a70 <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
   12aba:	f89d 5017 	ldrb.w	r5, [sp, #23]
   12abe:	e009      	b.n	12ad4 <sx12xx_lora_recv+0xa0>
		LOG_INF("Receive timeout");
   12ac0:	4b09      	ldr	r3, [pc, #36]	; (12ae8 <sx12xx_lora_recv+0xb4>)
   12ac2:	2203      	movs	r2, #3
   12ac4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12ac8:	4620      	mov	r0, r4
   12aca:	4623      	mov	r3, r4
   12acc:	4907      	ldr	r1, [pc, #28]	; (12aec <sx12xx_lora_recv+0xb8>)
   12ace:	9400      	str	r4, [sp, #0]
   12ad0:	f019 f80b 	bl	2baea <z_log_msg_runtime_create.constprop.0>
}
   12ad4:	4628      	mov	r0, r5
   12ad6:	b011      	add	sp, #68	; 0x44
   12ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
   12ada:	f06f 050f 	mvn.w	r5, #15
   12ade:	e7f9      	b.n	12ad4 <sx12xx_lora_recv+0xa0>
   12ae0:	2002fa88 	.word	0x2002fa88
   12ae4:	00033a2c 	.word	0x00033a2c
   12ae8:	00036147 	.word	0x00036147
   12aec:	00033138 	.word	0x00033138

00012af0 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
   12af0:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
   12af2:	b929      	cbnz	r1, 12b00 <sx12xx_lora_recv_async+0x10>
		if (!modem_release(&dev_data)) {
   12af4:	f7ff fe7a 	bl	127ec <modem_release.constprop.0>
   12af8:	b9b0      	cbnz	r0, 12b28 <sx12xx_lora_recv_async+0x38>
			/* Not receiving or already being stopped */
			return -EINVAL;
   12afa:	f06f 0015 	mvn.w	r0, #21
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
   12afe:	bd10      	pop	{r4, pc}
   12b00:	2001      	movs	r0, #1
   12b02:	4b0c      	ldr	r3, [pc, #48]	; (12b34 <sx12xx_lora_recv_async+0x44>)
   12b04:	e8d3 2fef 	ldaex	r2, [r3]
   12b08:	2a00      	cmp	r2, #0
   12b0a:	d103      	bne.n	12b14 <sx12xx_lora_recv_async+0x24>
   12b0c:	e8c3 0fe4 	stlex	r4, r0, [r3]
   12b10:	2c00      	cmp	r4, #0
   12b12:	d1f7      	bne.n	12b04 <sx12xx_lora_recv_async+0x14>
	if (!modem_acquire(&dev_data)) {
   12b14:	d10a      	bne.n	12b2c <sx12xx_lora_recv_async+0x3c>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12b16:	4c08      	ldr	r4, [pc, #32]	; (12b38 <sx12xx_lora_recv_async+0x48>)
	dev_data.async_rx_cb = cb;
   12b18:	f843 1c38 	str.w	r1, [r3, #-56]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12b1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12b1e:	21ff      	movs	r1, #255	; 0xff
   12b20:	4798      	blx	r3
	Radio.Rx(0);
   12b22:	2000      	movs	r0, #0
   12b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b26:	4798      	blx	r3
		return 0;
   12b28:	2000      	movs	r0, #0
   12b2a:	e7e8      	b.n	12afe <sx12xx_lora_recv_async+0xe>
		return -EBUSY;
   12b2c:	f06f 000f 	mvn.w	r0, #15
   12b30:	e7e5      	b.n	12afe <sx12xx_lora_recv_async+0xe>
   12b32:	bf00      	nop
   12b34:	2002fa88 	.word	0x2002fa88
   12b38:	00033a2c 	.word	0x00033a2c

00012b3c <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
   12b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b3e:	460c      	mov	r4, r1
   12b40:	2701      	movs	r7, #1
   12b42:	4d29      	ldr	r5, [pc, #164]	; (12be8 <sx12xx_lora_config+0xac>)
   12b44:	b08b      	sub	sp, #44	; 0x2c
   12b46:	e8d5 3fef 	ldaex	r3, [r5]
   12b4a:	2b00      	cmp	r3, #0
   12b4c:	d103      	bne.n	12b56 <sx12xx_lora_config+0x1a>
   12b4e:	e8c5 7fe2 	stlex	r2, r7, [r5]
   12b52:	2a00      	cmp	r2, #0
   12b54:	d1f7      	bne.n	12b46 <sx12xx_lora_config+0xa>
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
   12b56:	d143      	bne.n	12be0 <sx12xx_lora_config+0xa4>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
   12b58:	4e24      	ldr	r6, [pc, #144]	; (12bec <sx12xx_lora_config+0xb0>)
   12b5a:	6820      	ldr	r0, [r4, #0]
   12b5c:	68f3      	ldr	r3, [r6, #12]
   12b5e:	4798      	blx	r3

	if (config->tx) {
   12b60:	7ae3      	ldrb	r3, [r4, #11]
   12b62:	b34b      	cbz	r3, 12bb8 <sx12xx_lora_config+0x7c>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
   12b64:	4623      	mov	r3, r4
   12b66:	3d10      	subs	r5, #16
   12b68:	f104 0710 	add.w	r7, r4, #16
   12b6c:	462a      	mov	r2, r5
   12b6e:	6818      	ldr	r0, [r3, #0]
   12b70:	6859      	ldr	r1, [r3, #4]
   12b72:	3308      	adds	r3, #8
   12b74:	c203      	stmia	r2!, {r0, r1}
   12b76:	42bb      	cmp	r3, r7
   12b78:	4615      	mov	r5, r2
   12b7a:	d1f7      	bne.n	12b6c <sx12xx_lora_config+0x30>
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
   12b7c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   12b80:	2200      	movs	r2, #0
   12b82:	2001      	movs	r0, #1
   12b84:	9308      	str	r3, [sp, #32]
   12b86:	7b23      	ldrb	r3, [r4, #12]
   12b88:	e9cd 2205 	strd	r2, r2, [sp, #20]
   12b8c:	e9cd 2003 	strd	r2, r0, [sp, #12]
   12b90:	9307      	str	r3, [sp, #28]
   12b92:	8923      	ldrh	r3, [r4, #8]
   12b94:	69f5      	ldr	r5, [r6, #28]
   12b96:	9302      	str	r3, [sp, #8]
   12b98:	79a3      	ldrb	r3, [r4, #6]
   12b9a:	9301      	str	r3, [sp, #4]
   12b9c:	7963      	ldrb	r3, [r4, #5]
   12b9e:	9300      	str	r3, [sp, #0]
   12ba0:	7923      	ldrb	r3, [r4, #4]
   12ba2:	f994 100a 	ldrsb.w	r1, [r4, #10]
   12ba6:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, config->iq_inverted, true);
	}

	Radio.SetPublicNetwork(config->public_network);
   12ba8:	6db3      	ldr	r3, [r6, #88]	; 0x58
   12baa:	7b60      	ldrb	r0, [r4, #13]
   12bac:	4798      	blx	r3

	modem_release(&dev_data);
   12bae:	f7ff fe1d 	bl	127ec <modem_release.constprop.0>
	return 0;
   12bb2:	2000      	movs	r0, #0
}
   12bb4:	b00b      	add	sp, #44	; 0x2c
   12bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
   12bb8:	9709      	str	r7, [sp, #36]	; 0x24
   12bba:	7b22      	ldrb	r2, [r4, #12]
   12bbc:	e9cd 3305 	strd	r3, r3, [sp, #20]
   12bc0:	e9cd 3207 	strd	r3, r2, [sp, #28]
   12bc4:	220a      	movs	r2, #10
   12bc6:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12bca:	9202      	str	r2, [sp, #8]
   12bcc:	8922      	ldrh	r2, [r4, #8]
   12bce:	4638      	mov	r0, r7
   12bd0:	e9cd 3200 	strd	r3, r2, [sp]
   12bd4:	69b5      	ldr	r5, [r6, #24]
   12bd6:	79a3      	ldrb	r3, [r4, #6]
   12bd8:	7962      	ldrb	r2, [r4, #5]
   12bda:	7921      	ldrb	r1, [r4, #4]
   12bdc:	47a8      	blx	r5
   12bde:	e7e3      	b.n	12ba8 <sx12xx_lora_config+0x6c>
		return -EBUSY;
   12be0:	f06f 000f 	mvn.w	r0, #15
   12be4:	e7e6      	b.n	12bb4 <sx12xx_lora_config+0x78>
   12be6:	bf00      	nop
   12be8:	2002fa88 	.word	0x2002fa88
   12bec:	00033a2c 	.word	0x00033a2c

00012bf0 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
   12bf0:	b538      	push	{r3, r4, r5, lr}
   12bf2:	2401      	movs	r4, #1
   12bf4:	4608      	mov	r0, r1
   12bf6:	4611      	mov	r1, r2
   12bf8:	461a      	mov	r2, r3
   12bfa:	4b09      	ldr	r3, [pc, #36]	; (12c20 <sx12xx_lora_test_cw+0x30>)
   12bfc:	e8d3 5fef 	ldaex	r5, [r3]
   12c00:	2d00      	cmp	r5, #0
   12c02:	d104      	bne.n	12c0e <sx12xx_lora_test_cw+0x1e>
   12c04:	e8c3 4fec 	stlex	ip, r4, [r3]
   12c08:	f1bc 0f00 	cmp.w	ip, #0
   12c0c:	d1f6      	bne.n	12bfc <sx12xx_lora_test_cw+0xc>
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
   12c0e:	d104      	bne.n	12c1a <sx12xx_lora_test_cw+0x2a>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
   12c10:	4b04      	ldr	r3, [pc, #16]	; (12c24 <sx12xx_lora_test_cw+0x34>)
   12c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   12c14:	4798      	blx	r3
	return 0;
   12c16:	2000      	movs	r0, #0
}
   12c18:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   12c1a:	f06f 000f 	mvn.w	r0, #15
   12c1e:	e7fb      	b.n	12c18 <sx12xx_lora_test_cw+0x28>
   12c20:	2002fa88 	.word	0x2002fa88
   12c24:	00033a2c 	.word	0x00033a2c

00012c28 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
   12c28:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12c2a:	2400      	movs	r4, #0
   12c2c:	4b0b      	ldr	r3, [pc, #44]	; (12c5c <sx12xx_init+0x34>)
   12c2e:	e8d3 2fef 	ldaex	r2, [r3]
   12c32:	e8c3 4fe1 	stlex	r1, r4, [r3]
   12c36:	2900      	cmp	r1, #0
   12c38:	d1f9      	bne.n	12c2e <sx12xx_init+0x6>
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   12c3a:	4909      	ldr	r1, [pc, #36]	; (12c60 <sx12xx_init+0x38>)
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
   12c3c:	4d09      	ldr	r5, [pc, #36]	; (12c64 <sx12xx_init+0x3c>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   12c3e:	f843 1c34 	str.w	r1, [r3, #-52]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   12c42:	4909      	ldr	r1, [pc, #36]	; (12c68 <sx12xx_init+0x40>)
	Radio.Init(&dev_data.events);
   12c44:	682a      	ldr	r2, [r5, #0]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   12c46:	f843 1c2c 	str.w	r1, [r3, #-44]
	dev_data.dev = dev;
   12c4a:	f843 0c40 	str.w	r0, [r3, #-64]
	Radio.Init(&dev_data.events);
   12c4e:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   12c52:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
   12c54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   12c56:	4798      	blx	r3

	return 0;
}
   12c58:	4620      	mov	r0, r4
   12c5a:	bd38      	pop	{r3, r4, r5, pc}
   12c5c:	2002fa88 	.word	0x2002fa88
   12c60:	00012831 	.word	0x00012831
   12c64:	00033a2c 	.word	0x00033a2c
   12c68:	00012751 	.word	0x00012751

00012c6c <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
   12c6c:	4b03      	ldr	r3, [pc, #12]	; (12c7c <sx127x_dio_work_handle+0x10>)
   12c6e:	1ac0      	subs	r0, r0, r3

	(*DioIrq[dio])(NULL);
   12c70:	4b03      	ldr	r3, [pc, #12]	; (12c80 <sx127x_dio_work_handle+0x14>)
	int dio = work - dev_data.dio_work;
   12c72:	1100      	asrs	r0, r0, #4
	(*DioIrq[dio])(NULL);
   12c74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   12c78:	2000      	movs	r0, #0
   12c7a:	4718      	bx	r3
   12c7c:	2002fab4 	.word	0x2002fab4
   12c80:	20008508 	.word	0x20008508

00012c84 <sx127x_irq_callback>:
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == sx127x_dios[i].port &&
   12c84:	4b08      	ldr	r3, [pc, #32]	; (12ca8 <sx127x_irq_callback+0x24>)
   12c86:	4283      	cmp	r3, r0
   12c88:	d10d      	bne.n	12ca6 <sx127x_irq_callback+0x22>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   12c8a:	fa92 f3a2 	rbit	r3, r2
   12c8e:	fab3 f383 	clz	r3, r3
   12c92:	b142      	cbz	r2, 12ca6 <sx127x_irq_callback+0x22>
   12c94:	2b0b      	cmp	r3, #11
   12c96:	d102      	bne.n	12c9e <sx127x_irq_callback+0x1a>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
   12c98:	4804      	ldr	r0, [pc, #16]	; (12cac <sx127x_irq_callback+0x28>)
   12c9a:	f013 b89d 	b.w	25dd8 <k_work_submit>
		if (dev == sx127x_dios[i].port &&
   12c9e:	2b0c      	cmp	r3, #12
   12ca0:	d101      	bne.n	12ca6 <sx127x_irq_callback+0x22>
			k_work_submit(&dev_data.dio_work[i]);
   12ca2:	4803      	ldr	r0, [pc, #12]	; (12cb0 <sx127x_irq_callback+0x2c>)
   12ca4:	e7f9      	b.n	12c9a <sx127x_irq_callback+0x16>
		}
	}
}
   12ca6:	4770      	bx	lr
   12ca8:	00032920 	.word	0x00032920
   12cac:	2002fab4 	.word	0x2002fab4
   12cb0:	2002fac4 	.word	0x2002fac4

00012cb4 <gpio_pin_set_dt.constprop.0.isra.0>:
	const struct gpio_driver_data *const data =
   12cb4:	4b08      	ldr	r3, [pc, #32]	; (12cd8 <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12cb6:	691a      	ldr	r2, [r3, #16]
   12cb8:	6812      	ldr	r2, [r2, #0]
   12cba:	0552      	lsls	r2, r2, #21
		value = (value != 0) ? 0 : 1;
   12cbc:	bf48      	it	mi
   12cbe:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
   12cc2:	b128      	cbz	r0, 12cd0 <gpio_pin_set_dt.constprop.0.isra.0+0x1c>
	return api->port_set_bits_raw(port, pins);
   12cc4:	689b      	ldr	r3, [r3, #8]
   12cc6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   12cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12ccc:	4802      	ldr	r0, [pc, #8]	; (12cd8 <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
   12cce:	4718      	bx	r3
   12cd0:	689b      	ldr	r3, [r3, #8]
   12cd2:	691b      	ldr	r3, [r3, #16]
   12cd4:	e7f8      	b.n	12cc8 <gpio_pin_set_dt.constprop.0.isra.0+0x14>
   12cd6:	bf00      	nop
   12cd8:	00032920 	.word	0x00032920

00012cdc <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
   12cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ce0:	4680      	mov	r8, r0
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   12ce2:	2600      	movs	r6, #0
   12ce4:	4c36      	ldr	r4, [pc, #216]	; (12dc0 <SX1276IoIrqInit+0xe4>)
   12ce6:	4d37      	ldr	r5, [pc, #220]	; (12dc4 <SX1276IoIrqInit+0xe8>)
			LOG_ERR("GPIO port %s not ready",
				sx127x_dios[i].port->name);
			return;
		}

		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   12ce8:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 12dc8 <SX1276IoIrqInit+0xec>
{
   12cec:	b085      	sub	sp, #20
		if (!irqHandlers[i]) {
   12cee:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   12cf2:	2b00      	cmp	r3, #0
   12cf4:	d05d      	beq.n	12db2 <SX1276IoIrqInit+0xd6>
		if (!device_is_ready(sx127x_dios[i].port)) {
   12cf6:	6827      	ldr	r7, [r4, #0]
   12cf8:	4638      	mov	r0, r7
   12cfa:	f01d ffc4 	bl	30c86 <z_device_is_ready>
   12cfe:	4603      	mov	r3, r0
   12d00:	b960      	cbnz	r0, 12d1c <SX1276IoIrqInit+0x40>
			LOG_ERR("GPIO port %s not ready",
   12d02:	683a      	ldr	r2, [r7, #0]
   12d04:	4931      	ldr	r1, [pc, #196]	; (12dcc <SX1276IoIrqInit+0xf0>)
   12d06:	9203      	str	r2, [sp, #12]
   12d08:	4a31      	ldr	r2, [pc, #196]	; (12dd0 <SX1276IoIrqInit+0xf4>)
   12d0a:	9000      	str	r0, [sp, #0]
   12d0c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12d10:	2201      	movs	r2, #1
   12d12:	f018 fefc 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
		}
		gpio_pin_interrupt_configure_dt(&sx127x_dios[i],
						GPIO_INT_EDGE_TO_ACTIVE);
	}

}
   12d16:	b005      	add	sp, #20
   12d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   12d1c:	eb0b 1006 	add.w	r0, fp, r6, lsl #4
   12d20:	492c      	ldr	r1, [pc, #176]	; (12dd4 <SX1276IoIrqInit+0xf8>)
   12d22:	f01e f9b7 	bl	31094 <k_work_init>
				  spec->dt_flags | extra_flags);
   12d26:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
   12d28:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   12d2a:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   12d2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12d30:	f013 0f01 	tst.w	r3, #1
   12d34:	f04f 0301 	mov.w	r3, #1
	struct gpio_driver_data *data =
   12d38:	f8d0 e010 	ldr.w	lr, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12d3c:	fa03 f301 	lsl.w	r3, r3, r1
   12d40:	f8de c000 	ldr.w	ip, [lr]
	const struct gpio_driver_api *api =
   12d44:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12d48:	bf14      	ite	ne
   12d4a:	ea43 030c 	orrne.w	r3, r3, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12d4e:	ea2c 0303 	biceq.w	r3, ip, r3
   12d52:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   12d56:	f8d9 3000 	ldr.w	r3, [r9]
   12d5a:	4798      	blx	r3
				   BIT(sx127x_dios[i].pin));
   12d5c:	2201      	movs	r2, #1
   12d5e:	f894 9004 	ldrb.w	r9, [r4, #4]
	callback->handler = handler;
   12d62:	4b1d      	ldr	r3, [pc, #116]	; (12dd8 <SX1276IoIrqInit+0xfc>)
   12d64:	fa02 fa09 	lsl.w	sl, r2, r9
	callback->pin_mask = pin_mask;
   12d68:	e9c5 3a01 	strd	r3, sl, [r5, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   12d6c:	68bb      	ldr	r3, [r7, #8]
   12d6e:	69db      	ldr	r3, [r3, #28]
   12d70:	b953      	cbnz	r3, 12d88 <SX1276IoIrqInit+0xac>
			LOG_ERR("Could not set gpio callback.");
   12d72:	4b1a      	ldr	r3, [pc, #104]	; (12ddc <SX1276IoIrqInit+0x100>)
   12d74:	2201      	movs	r2, #1
   12d76:	9302      	str	r3, [sp, #8]
   12d78:	2300      	movs	r3, #0
   12d7a:	4914      	ldr	r1, [pc, #80]	; (12dcc <SX1276IoIrqInit+0xf0>)
   12d7c:	4618      	mov	r0, r3
   12d7e:	e9cd 3300 	strd	r3, r3, [sp]
   12d82:	f018 fec4 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
			return;
   12d86:	e7c6      	b.n	12d16 <SX1276IoIrqInit+0x3a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   12d88:	4629      	mov	r1, r5
   12d8a:	4638      	mov	r0, r7
   12d8c:	4798      	blx	r3
		if (gpio_add_callback(sx127x_dios[i].port, &callbacks[i]) < 0) {
   12d8e:	2800      	cmp	r0, #0
   12d90:	dbef      	blt.n	12d72 <SX1276IoIrqInit+0x96>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   12d92:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   12d94:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   12d96:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   12d98:	6812      	ldr	r2, [r2, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12d9a:	699f      	ldr	r7, [r3, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   12d9c:	ea1a 0f02 	tst.w	sl, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12da0:	bf14      	ite	ne
   12da2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   12da6:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   12daa:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   12dae:	4649      	mov	r1, r9
   12db0:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   12db2:	3408      	adds	r4, #8
   12db4:	350c      	adds	r5, #12
   12db6:	2e00      	cmp	r6, #0
   12db8:	d1ad      	bne.n	12d16 <SX1276IoIrqInit+0x3a>
   12dba:	2601      	movs	r6, #1
   12dbc:	e797      	b.n	12cee <SX1276IoIrqInit+0x12>
   12dbe:	bf00      	nop
   12dc0:	00033ab0 	.word	0x00033ab0
   12dc4:	2002fa9c 	.word	0x2002fa9c
   12dc8:	2002fab4 	.word	0x2002fab4
   12dcc:	00033130 	.word	0x00033130
   12dd0:	00036176 	.word	0x00036176
   12dd4:	00012c6d 	.word	0x00012c6d
   12dd8:	00012c85 	.word	0x00012c85
   12ddc:	0003618d 	.word	0x0003618d

00012de0 <sx127x_read>:

	return spi_write_dt(&dev_config.bus, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
   12de0:	b510      	push	{r4, lr}
   12de2:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
   12de4:	f10d 0307 	add.w	r3, sp, #7
   12de8:	9306      	str	r3, [sp, #24]
   12dea:	2301      	movs	r3, #1
   12dec:	e9cd 3107 	strd	r3, r1, [sp, #28]
	struct spi_buf_set tx = {
   12df0:	2302      	movs	r3, #2
	return sx127x_transceive(reg_addr, false, data, len);
   12df2:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   12df4:	aa06      	add	r2, sp, #24
		const struct spi_buf_set rx = {
   12df6:	e9cd 3203 	strd	r3, r2, [sp, #12]
   12dfa:	f88d 0007 	strb.w	r0, [sp, #7]
	struct spi_buf_set tx = {
   12dfe:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
   12e00:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   12e02:	4804      	ldr	r0, [pc, #16]	; (12e14 <sx127x_read+0x34>)
   12e04:	4904      	ldr	r1, [pc, #16]	; (12e18 <sx127x_read+0x38>)
   12e06:	6883      	ldr	r3, [r0, #8]
   12e08:	aa02      	add	r2, sp, #8
   12e0a:	681c      	ldr	r4, [r3, #0]
   12e0c:	ab04      	add	r3, sp, #16
   12e0e:	47a0      	blx	r4
}
   12e10:	b00a      	add	sp, #40	; 0x28
   12e12:	bd10      	pop	{r4, pc}
   12e14:	00032a10 	.word	0x00032a10
   12e18:	00033a9c 	.word	0x00033a9c

00012e1c <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
   12e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12e1e:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
   12e20:	b2c0      	uxtb	r0, r0
   12e22:	f7ff ffdd 	bl	12de0 <sx127x_read>
	if (ret < 0) {
   12e26:	2800      	cmp	r0, #0
   12e28:	da0a      	bge.n	12e40 <SX1276ReadBuffer+0x24>
		LOG_ERR("Unable to read address: 0x%x", addr);
   12e2a:	4b06      	ldr	r3, [pc, #24]	; (12e44 <SX1276ReadBuffer+0x28>)
   12e2c:	2201      	movs	r2, #1
   12e2e:	9302      	str	r3, [sp, #8]
   12e30:	2300      	movs	r3, #0
   12e32:	4905      	ldr	r1, [pc, #20]	; (12e48 <SX1276ReadBuffer+0x2c>)
   12e34:	4618      	mov	r0, r3
   12e36:	e9cd 3300 	strd	r3, r3, [sp]
   12e3a:	9403      	str	r4, [sp, #12]
   12e3c:	f018 fe67 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
	}
}
   12e40:	b004      	add	sp, #16
   12e42:	bd10      	pop	{r4, pc}
   12e44:	000361aa 	.word	0x000361aa
   12e48:	00033130 	.word	0x00033130

00012e4c <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
   12e4c:	b530      	push	{r4, r5, lr}
   12e4e:	4605      	mov	r5, r0
   12e50:	b087      	sub	sp, #28
   12e52:	482f      	ldr	r0, [pc, #188]	; (12f10 <sx127x_lora_init+0xc4>)
   12e54:	f01d ff17 	bl	30c86 <z_device_is_ready>
	if (!device_is_ready(spec->bus)) {
   12e58:	b368      	cbz	r0, 12eb6 <sx127x_lora_init+0x6a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   12e5a:	4b2e      	ldr	r3, [pc, #184]	; (12f14 <sx127x_lora_init+0xc8>)
   12e5c:	6818      	ldr	r0, [r3, #0]
   12e5e:	f01d ff12 	bl	30c86 <z_device_is_ready>
	if (spec->config.cs &&
   12e62:	b340      	cbz	r0, 12eb6 <sx127x_lora_init+0x6a>
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
   12e64:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   12e68:	482b      	ldr	r0, [pc, #172]	; (12f18 <sx127x_lora_init+0xcc>)
   12e6a:	f7ff fcf1 	bl	12850 <__sx12xx_configure_pin>
	if (ret) {
   12e6e:	4604      	mov	r4, r0
   12e70:	bb68      	cbnz	r0, 12ece <sx127x_lora_init+0x82>
	return z_impl_k_sleep(timeout);
   12e72:	2100      	movs	r1, #0
   12e74:	f640 40cd 	movw	r0, #3277	; 0xccd
   12e78:	f013 fb56 	bl	26528 <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(100));
	gpio_pin_set_dt(&dev_config.reset, 0);
   12e7c:	4620      	mov	r0, r4
   12e7e:	f7ff ff19 	bl	12cb4 <gpio_pin_set_dt.constprop.0.isra.0>
   12e82:	2100      	movs	r1, #0
   12e84:	f640 40cd 	movw	r0, #3277	; 0xccd
   12e88:	f013 fb4e 	bl	26528 <z_impl_k_sleep>
	k_sleep(K_MSEC(100));

	ret = sx127x_read(REG_VERSION, &regval, 1);
   12e8c:	2201      	movs	r2, #1
   12e8e:	2042      	movs	r0, #66	; 0x42
   12e90:	f10d 0117 	add.w	r1, sp, #23
   12e94:	f7ff ffa4 	bl	12de0 <sx127x_read>
	if (ret < 0) {
   12e98:	2800      	cmp	r0, #0
   12e9a:	da1b      	bge.n	12ed4 <sx127x_lora_init+0x88>
		LOG_ERR("Unable to read version info");
   12e9c:	4b1f      	ldr	r3, [pc, #124]	; (12f1c <sx127x_lora_init+0xd0>)
   12e9e:	4620      	mov	r0, r4
   12ea0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12ea4:	9400      	str	r4, [sp, #0]
   12ea6:	4623      	mov	r3, r4
   12ea8:	2201      	movs	r2, #1
   12eaa:	491d      	ldr	r1, [pc, #116]	; (12f20 <sx127x_lora_init+0xd4>)
   12eac:	f018 fe2f 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   12eb0:	f06f 0404 	mvn.w	r4, #4
   12eb4:	e00b      	b.n	12ece <sx127x_lora_init+0x82>
		LOG_ERR("SPI device not ready");
   12eb6:	4b1b      	ldr	r3, [pc, #108]	; (12f24 <sx127x_lora_init+0xd8>)
   12eb8:	2201      	movs	r2, #1
   12eba:	9302      	str	r3, [sp, #8]
   12ebc:	2300      	movs	r3, #0
   12ebe:	4918      	ldr	r1, [pc, #96]	; (12f20 <sx127x_lora_init+0xd4>)
   12ec0:	4618      	mov	r0, r3
   12ec2:	e9cd 3300 	strd	r3, r3, [sp]
   12ec6:	f018 fe22 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   12eca:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
   12ece:	4620      	mov	r0, r4
   12ed0:	b007      	add	sp, #28
   12ed2:	bd30      	pop	{r4, r5, pc}
	LOG_INF("SX127x version 0x%02x found", regval);
   12ed4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12ed8:	2203      	movs	r2, #3
   12eda:	9303      	str	r3, [sp, #12]
   12edc:	4b12      	ldr	r3, [pc, #72]	; (12f28 <sx127x_lora_init+0xdc>)
   12ede:	4620      	mov	r0, r4
   12ee0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12ee4:	490e      	ldr	r1, [pc, #56]	; (12f20 <sx127x_lora_init+0xd4>)
   12ee6:	4623      	mov	r3, r4
   12ee8:	9400      	str	r4, [sp, #0]
   12eea:	f018 fe10 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
	ret = sx12xx_init(dev);
   12eee:	4628      	mov	r0, r5
   12ef0:	f7ff fe9a 	bl	12c28 <sx12xx_init>
	if (ret < 0) {
   12ef4:	1e05      	subs	r5, r0, #0
   12ef6:	daea      	bge.n	12ece <sx127x_lora_init+0x82>
		LOG_ERR("Failed to initialize SX12xx common");
   12ef8:	4b0c      	ldr	r3, [pc, #48]	; (12f2c <sx127x_lora_init+0xe0>)
   12efa:	4620      	mov	r0, r4
   12efc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12f00:	9400      	str	r4, [sp, #0]
   12f02:	4623      	mov	r3, r4
   12f04:	2201      	movs	r2, #1
   12f06:	4906      	ldr	r1, [pc, #24]	; (12f20 <sx127x_lora_init+0xd4>)
   12f08:	f018 fe01 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
		return ret;
   12f0c:	462c      	mov	r4, r5
   12f0e:	e7de      	b.n	12ece <sx127x_lora_init+0x82>
   12f10:	00032a10 	.word	0x00032a10
   12f14:	200084f8 	.word	0x200084f8
   12f18:	00033aa8 	.word	0x00033aa8
   12f1c:	000361dc 	.word	0x000361dc
   12f20:	00033130 	.word	0x00033130
   12f24:	000361c7 	.word	0x000361c7
   12f28:	000361f8 	.word	0x000361f8
   12f2c:	00036214 	.word	0x00036214

00012f30 <sx127x_write>:
{
   12f30:	b510      	push	{r4, lr}
   12f32:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
   12f34:	f10d 0307 	add.w	r3, sp, #7
   12f38:	9304      	str	r3, [sp, #16]
   12f3a:	2301      	movs	r3, #1
   12f3c:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
   12f40:	ab04      	add	r3, sp, #16
   12f42:	9302      	str	r3, [sp, #8]
   12f44:	2302      	movs	r3, #2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   12f46:	f060 007f 	orn	r0, r0, #127	; 0x7f
   12f4a:	f88d 0007 	strb.w	r0, [sp, #7]
   12f4e:	9207      	str	r2, [sp, #28]
	struct spi_buf_set tx = {
   12f50:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   12f52:	4804      	ldr	r0, [pc, #16]	; (12f64 <sx127x_write+0x34>)
   12f54:	4904      	ldr	r1, [pc, #16]	; (12f68 <sx127x_write+0x38>)
   12f56:	6883      	ldr	r3, [r0, #8]
   12f58:	aa02      	add	r2, sp, #8
   12f5a:	681c      	ldr	r4, [r3, #0]
   12f5c:	2300      	movs	r3, #0
   12f5e:	47a0      	blx	r4
}
   12f60:	b008      	add	sp, #32
   12f62:	bd10      	pop	{r4, pc}
   12f64:	00032a10 	.word	0x00032a10
   12f68:	00033a9c 	.word	0x00033a9c

00012f6c <SX1276WriteBuffer>:
{
   12f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12f6e:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
   12f70:	b2c0      	uxtb	r0, r0
   12f72:	f7ff ffdd 	bl	12f30 <sx127x_write>
	if (ret < 0) {
   12f76:	2800      	cmp	r0, #0
   12f78:	da0a      	bge.n	12f90 <SX1276WriteBuffer+0x24>
		LOG_ERR("Unable to write address: 0x%x", addr);
   12f7a:	4b06      	ldr	r3, [pc, #24]	; (12f94 <SX1276WriteBuffer+0x28>)
   12f7c:	2201      	movs	r2, #1
   12f7e:	9302      	str	r3, [sp, #8]
   12f80:	2300      	movs	r3, #0
   12f82:	4905      	ldr	r1, [pc, #20]	; (12f98 <SX1276WriteBuffer+0x2c>)
   12f84:	4618      	mov	r0, r3
   12f86:	e9cd 3300 	strd	r3, r3, [sp]
   12f8a:	9403      	str	r4, [sp, #12]
   12f8c:	f018 fdbf 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
}
   12f90:	b004      	add	sp, #16
   12f92:	bd10      	pop	{r4, pc}
   12f94:	00036237 	.word	0x00036237
   12f98:	00033130 	.word	0x00033130

00012f9c <SX1276SetRfTxPower>:
{
   12f9c:	b530      	push	{r4, r5, lr}
	uint8_t pa_config = 0;
   12f9e:	2400      	movs	r4, #0
{
   12fa0:	b087      	sub	sp, #28
   12fa2:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   12fa4:	2201      	movs	r2, #1
   12fa6:	204d      	movs	r0, #77	; 0x4d
   12fa8:	f10d 0117 	add.w	r1, sp, #23
	uint8_t pa_config = 0;
   12fac:	f88d 4016 	strb.w	r4, [sp, #22]
	uint8_t pa_dac = 0;
   12fb0:	f88d 4017 	strb.w	r4, [sp, #23]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   12fb4:	f7ff ff14 	bl	12de0 <sx127x_read>
	if (ret < 0) {
   12fb8:	42a0      	cmp	r0, r4
   12fba:	da0b      	bge.n	12fd4 <SX1276SetRfTxPower+0x38>
		LOG_ERR("Unable to read PA dac");
   12fbc:	4b21      	ldr	r3, [pc, #132]	; (13044 <SX1276SetRfTxPower+0xa8>)
   12fbe:	9400      	str	r4, [sp, #0]
   12fc0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12fc4:	4623      	mov	r3, r4
		LOG_ERR("Unable to write PA dac");
   12fc6:	2201      	movs	r2, #1
   12fc8:	4618      	mov	r0, r3
   12fca:	491f      	ldr	r1, [pc, #124]	; (13048 <SX1276SetRfTxPower+0xac>)
   12fcc:	f018 fd9f 	bl	2bb0e <z_log_msg_runtime_create.constprop.0>
}
   12fd0:	b007      	add	sp, #28
   12fd2:	bd30      	pop	{r4, r5, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12fd4:	2d14      	cmp	r5, #20
   12fd6:	462a      	mov	r2, r5
   12fd8:	bfa8      	it	ge
   12fda:	2214      	movge	r2, #20
   12fdc:	2a02      	cmp	r2, #2
   12fde:	bfb8      	it	lt
   12fe0:	2202      	movlt	r2, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   12fe2:	f89d 1017 	ldrb.w	r1, [sp, #23]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   12fe6:	f89d 3016 	ldrb.w	r3, [sp, #22]
		if (power > 17) {
   12fea:	2d11      	cmp	r5, #17
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12fec:	b2d2      	uxtb	r2, r2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   12fee:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12ff2:	bfcc      	ite	gt
   12ff4:	3a05      	subgt	r2, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12ff6:	3a02      	suble	r2, #2
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   12ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			pa_dac |= SX127X_PADAC_20DBM_ON;
   12ffc:	bfcc      	ite	gt
   12ffe:	f041 0107 	orrgt.w	r1, r1, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   13002:	f041 0104 	orrle.w	r1, r1, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   13006:	4313      	orrs	r3, r2
   13008:	b2db      	uxtb	r3, r3
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   1300a:	f88d 1017 	strb.w	r1, [sp, #23]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1300e:	2201      	movs	r2, #1
   13010:	2009      	movs	r0, #9
   13012:	f10d 0116 	add.w	r1, sp, #22
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   13016:	f88d 3016 	strb.w	r3, [sp, #22]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1301a:	f7ff ff89 	bl	12f30 <sx127x_write>
	if (ret < 0) {
   1301e:	2800      	cmp	r0, #0
   13020:	da05      	bge.n	1302e <SX1276SetRfTxPower+0x92>
		LOG_ERR("Unable to write PA config");
   13022:	4b0a      	ldr	r3, [pc, #40]	; (1304c <SX1276SetRfTxPower+0xb0>)
		LOG_ERR("Unable to write PA dac");
   13024:	9302      	str	r3, [sp, #8]
   13026:	2300      	movs	r3, #0
   13028:	e9cd 3300 	strd	r3, r3, [sp]
   1302c:	e7cb      	b.n	12fc6 <SX1276SetRfTxPower+0x2a>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
   1302e:	2201      	movs	r2, #1
   13030:	204d      	movs	r0, #77	; 0x4d
   13032:	f10d 0117 	add.w	r1, sp, #23
   13036:	f7ff ff7b 	bl	12f30 <sx127x_write>
	if (ret < 0) {
   1303a:	2800      	cmp	r0, #0
   1303c:	dac8      	bge.n	12fd0 <SX1276SetRfTxPower+0x34>
		LOG_ERR("Unable to write PA dac");
   1303e:	4b04      	ldr	r3, [pc, #16]	; (13050 <SX1276SetRfTxPower+0xb4>)
   13040:	e7f0      	b.n	13024 <SX1276SetRfTxPower+0x88>
   13042:	bf00      	nop
   13044:	00036255 	.word	0x00036255
   13048:	00033130 	.word	0x00033130
   1304c:	0003626b 	.word	0x0003626b
   13050:	00036285 	.word	0x00036285

00013054 <SX1276GetDio1PinState>:
{
   13054:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   13056:	4809      	ldr	r0, [pc, #36]	; (1307c <SX1276GetDio1PinState+0x28>)
   13058:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   1305a:	6883      	ldr	r3, [r0, #8]
   1305c:	a901      	add	r1, sp, #4
   1305e:	685b      	ldr	r3, [r3, #4]
   13060:	4798      	blx	r3
	if (ret == 0) {
   13062:	b920      	cbnz	r0, 1306e <SX1276GetDio1PinState+0x1a>
		*value ^= data->invert;
   13064:	6823      	ldr	r3, [r4, #0]
   13066:	9801      	ldr	r0, [sp, #4]
   13068:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1306a:	f3c0 3000 	ubfx	r0, r0, #12, #1
}
   1306e:	2800      	cmp	r0, #0
   13070:	bfd4      	ite	le
   13072:	2000      	movle	r0, #0
   13074:	2001      	movgt	r0, #1
   13076:	b002      	add	sp, #8
   13078:	bd10      	pop	{r4, pc}
   1307a:	bf00      	nop
   1307c:	00032920 	.word	0x00032920

00013080 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
   13080:	f243 0039 	movw	r0, #12345	; 0x3039
   13084:	4b06      	ldr	r3, [pc, #24]	; (130a0 <rand1+0x20>)
   13086:	4907      	ldr	r1, [pc, #28]	; (130a4 <rand1+0x24>)
   13088:	681a      	ldr	r2, [r3, #0]
   1308a:	fb01 0002 	mla	r0, r1, r2, r0
   1308e:	6018      	str	r0, [r3, #0]
   13090:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13094:	fbb0 f3f3 	udiv	r3, r0, r3
   13098:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
   1309c:	1ac0      	subs	r0, r0, r3
   1309e:	4770      	bx	lr
   130a0:	20008504 	.word	0x20008504
   130a4:	41c64e6d 	.word	0x41c64e6d

000130a8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
   130a8:	4b01      	ldr	r3, [pc, #4]	; (130b0 <srand1+0x8>)
   130aa:	6018      	str	r0, [r3, #0]
}
   130ac:	4770      	bx	lr
   130ae:	bf00      	nop
   130b0:	20008504 	.word	0x20008504

000130b4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
   130b4:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
   130b6:	b130      	cbz	r0, 130c6 <Crc32+0x12>
    uint32_t crc = 0xFFFFFFFF;
   130b8:	f04f 33ff 	mov.w	r3, #4294967295
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   130bc:	4d09      	ldr	r5, [pc, #36]	; (130e4 <Crc32+0x30>)
   130be:	4401      	add	r1, r0
    for( uint16_t i = 0; i < length; ++i )
   130c0:	4281      	cmp	r1, r0
   130c2:	d101      	bne.n	130c8 <Crc32+0x14>
        }
    }

    return ~crc;
   130c4:	43d8      	mvns	r0, r3
}
   130c6:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
   130c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   130cc:	4053      	eors	r3, r2
   130ce:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   130d0:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
   130d4:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   130d6:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
   130d8:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   130da:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
   130de:	2a00      	cmp	r2, #0
   130e0:	d1f6      	bne.n	130d0 <Crc32+0x1c>
   130e2:	e7ed      	b.n	130c0 <Crc32+0xc>
   130e4:	edb88320 	.word	0xedb88320

000130e8 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   130e8:	4a04      	ldr	r2, [pc, #16]	; (130fc <TimerInsertNewHeadTimer+0x14>)
   130ea:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
   130ec:	b10b      	cbz	r3, 130f2 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
   130ee:	2100      	movs	r1, #0
   130f0:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
   130f2:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
   130f4:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
   130f6:	f018 be22 	b.w	2bd3e <TimerSetTimeout>
   130fa:	bf00      	nop
   130fc:	2002fad4 	.word	0x2002fad4

00013100 <TimerStart>:
{
   13100:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13102:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   13104:	a801      	add	r0, sp, #4
   13106:	f018 fce0 	bl	2baca <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   1310a:	b16c      	cbz	r4, 13128 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   1310c:	4d17      	ldr	r5, [pc, #92]	; (1316c <TimerStart+0x6c>)
   1310e:	682a      	ldr	r2, [r5, #0]
   13110:	4613      	mov	r3, r2

    while( cur != NULL )
   13112:	b973      	cbnz	r3, 13132 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
   13114:	6863      	ldr	r3, [r4, #4]
   13116:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
   13118:	2301      	movs	r3, #1
   1311a:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
   1311c:	b96a      	cbnz	r2, 1313a <TimerStart+0x3a>
        RtcSetTimerContext( );
   1311e:	f7ff fb09 	bl	12734 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
   13122:	4620      	mov	r0, r4
   13124:	f7ff ffe0 	bl	130e8 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
   13128:	a801      	add	r0, sp, #4
   1312a:	f018 fcd8 	bl	2bade <BoardCriticalSectionEnd>
}
   1312e:	b003      	add	sp, #12
   13130:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
   13132:	429c      	cmp	r4, r3
   13134:	d0f8      	beq.n	13128 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
   13136:	695b      	ldr	r3, [r3, #20]
   13138:	e7eb      	b.n	13112 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
   1313a:	f7ff fad1 	bl	126e0 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
   1313e:	6823      	ldr	r3, [r4, #0]
   13140:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
   13142:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
   13144:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
   13146:	681a      	ldr	r2, [r3, #0]
   13148:	4290      	cmp	r0, r2
   1314a:	d3ea      	bcc.n	13122 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
   1314c:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
   1314e:	6959      	ldr	r1, [r3, #20]
   13150:	b911      	cbnz	r1, 13158 <TimerStart+0x58>
    cur->Next = obj;
   13152:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
   13154:	6161      	str	r1, [r4, #20]
   13156:	e7e7      	b.n	13128 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
   13158:	6811      	ldr	r1, [r2, #0]
   1315a:	4288      	cmp	r0, r1
   1315c:	d902      	bls.n	13164 <TimerStart+0x64>
            next = next->Next;
   1315e:	4613      	mov	r3, r2
   13160:	6952      	ldr	r2, [r2, #20]
   13162:	e7f4      	b.n	1314e <TimerStart+0x4e>
            cur->Next = obj;
   13164:	615c      	str	r4, [r3, #20]
            obj->Next = next;
   13166:	6162      	str	r2, [r4, #20]
            return;
   13168:	e7de      	b.n	13128 <TimerStart+0x28>
   1316a:	bf00      	nop
   1316c:	2002fad4 	.word	0x2002fad4

00013170 <TimerIrqHandler>:
{
   13170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
   13172:	f7ff fae7 	bl	12744 <RtcGetTimerContext>
    if( TimerListHead != NULL )
   13176:	4c1c      	ldr	r4, [pc, #112]	; (131e8 <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
   13178:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
   1317a:	f7ff fadb 	bl	12734 <RtcSetTimerContext>
    if( TimerListHead != NULL )
   1317e:	6823      	ldr	r3, [r4, #0]
   13180:	b1a3      	cbz	r3, 131ac <TimerIrqHandler+0x3c>
    uint32_t deltaContext = now - old; // intentional wrap around
   13182:	461e      	mov	r6, r3
   13184:	1b47      	subs	r7, r0, r5
                next->Timestamp -= deltaContext;
   13186:	1a2d      	subs	r5, r5, r0
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   13188:	6971      	ldr	r1, [r6, #20]
   1318a:	b929      	cbnz	r1, 13198 <TimerIrqHandler+0x28>
        TimerListHead = TimerListHead->Next;
   1318c:	695a      	ldr	r2, [r3, #20]
        cur->IsStarted = false;
   1318e:	7219      	strb	r1, [r3, #8]
        TimerListHead = TimerListHead->Next;
   13190:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   13192:	68da      	ldr	r2, [r3, #12]
   13194:	b942      	cbnz	r2, 131a8 <TimerIrqHandler+0x38>
   13196:	e7fe      	b.n	13196 <TimerIrqHandler+0x26>
            if( next->Timestamp > deltaContext )
   13198:	680a      	ldr	r2, [r1, #0]
   1319a:	42ba      	cmp	r2, r7
                next->Timestamp = 0;
   1319c:	bf94      	ite	ls
   1319e:	2200      	movls	r2, #0
                next->Timestamp -= deltaContext;
   131a0:	1952      	addhi	r2, r2, r5
   131a2:	600a      	str	r2, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   131a4:	6976      	ldr	r6, [r6, #20]
   131a6:	e7ef      	b.n	13188 <TimerIrqHandler+0x18>
        ExecuteCallBack( cur->Callback, cur->Context );
   131a8:	6918      	ldr	r0, [r3, #16]
   131aa:	4790      	blx	r2
        cur->IsStarted = false;
   131ac:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   131ae:	6823      	ldr	r3, [r4, #0]
   131b0:	b92b      	cbnz	r3, 131be <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   131b2:	6820      	ldr	r0, [r4, #0]
   131b4:	b980      	cbnz	r0, 131d8 <TimerIrqHandler+0x68>
}
   131b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
   131b8:	6918      	ldr	r0, [r3, #16]
   131ba:	4790      	blx	r2
   131bc:	e7f7      	b.n	131ae <TimerIrqHandler+0x3e>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   131be:	681d      	ldr	r5, [r3, #0]
   131c0:	f7ff fa8e 	bl	126e0 <RtcGetTimerElapsedTime>
   131c4:	4285      	cmp	r5, r0
   131c6:	d2f4      	bcs.n	131b2 <TimerIrqHandler+0x42>
        cur = TimerListHead;
   131c8:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
   131ca:	695a      	ldr	r2, [r3, #20]
        cur->IsStarted = false;
   131cc:	721e      	strb	r6, [r3, #8]
        TimerListHead = TimerListHead->Next;
   131ce:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   131d0:	68da      	ldr	r2, [r3, #12]
   131d2:	2a00      	cmp	r2, #0
   131d4:	d1f0      	bne.n	131b8 <TimerIrqHandler+0x48>
   131d6:	e7fe      	b.n	131d6 <TimerIrqHandler+0x66>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   131d8:	7a43      	ldrb	r3, [r0, #9]
   131da:	2b00      	cmp	r3, #0
   131dc:	d1eb      	bne.n	131b6 <TimerIrqHandler+0x46>
}
   131de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerSetTimeout( TimerListHead );
   131e2:	f018 bdac 	b.w	2bd3e <TimerSetTimeout>
   131e6:	bf00      	nop
   131e8:	2002fad4 	.word	0x2002fad4

000131ec <TimerStop>:
{
   131ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
   131ee:	4d13      	ldr	r5, [pc, #76]	; (1323c <TimerStop+0x50>)
{
   131f0:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   131f2:	a801      	add	r0, sp, #4
   131f4:	f018 fc69 	bl	2baca <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
   131f8:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   131fa:	b16b      	cbz	r3, 13218 <TimerStop+0x2c>
   131fc:	b164      	cbz	r4, 13218 <TimerStop+0x2c>
    obj->IsStarted = false;
   131fe:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
   13200:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
   13202:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
   13204:	d111      	bne.n	1322a <TimerStop+0x3e>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   13206:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
   13208:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   1320a:	b161      	cbz	r1, 13226 <TimerStop+0x3a>
            TimerListHead->IsNext2Expire = false;
   1320c:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
   1320e:	b144      	cbz	r4, 13222 <TimerStop+0x36>
                TimerSetTimeout( TimerListHead );
   13210:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
   13212:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
   13214:	f018 fd93 	bl	2bd3e <TimerSetTimeout>
        CRITICAL_SECTION_END( );
   13218:	a801      	add	r0, sp, #4
   1321a:	f018 fc60 	bl	2bade <BoardCriticalSectionEnd>
}
   1321e:	b003      	add	sp, #12
   13220:	bd30      	pop	{r4, r5, pc}
                RtcStopAlarm( );
   13222:	f7ff fa67 	bl	126f4 <RtcStopAlarm>
                TimerListHead = NULL;
   13226:	602c      	str	r4, [r5, #0]
   13228:	e7f6      	b.n	13218 <TimerStop+0x2c>
                cur = cur->Next;
   1322a:	461a      	mov	r2, r3
   1322c:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
   1322e:	2b00      	cmp	r3, #0
   13230:	d0f2      	beq.n	13218 <TimerStop+0x2c>
            if( cur == obj )
   13232:	429c      	cmp	r4, r3
   13234:	d1f9      	bne.n	1322a <TimerStop+0x3e>
                if( cur->Next != NULL )
   13236:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
   13238:	6153      	str	r3, [r2, #20]
   1323a:	e7ed      	b.n	13218 <TimerStop+0x2c>
   1323c:	2002fad4 	.word	0x2002fad4

00013240 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   13240:	4b09      	ldr	r3, [pc, #36]	; (13268 <GetFskBandwidthRegValue+0x28>)
{
   13242:	2200      	movs	r2, #0
   13244:	4619      	mov	r1, r3
   13246:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
   13248:	681c      	ldr	r4, [r3, #0]
   1324a:	4284      	cmp	r4, r0
   1324c:	d802      	bhi.n	13254 <GetFskBandwidthRegValue+0x14>
   1324e:	689c      	ldr	r4, [r3, #8]
   13250:	4284      	cmp	r4, r0
   13252:	d805      	bhi.n	13260 <GetFskBandwidthRegValue+0x20>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   13254:	3201      	adds	r2, #1
   13256:	2a15      	cmp	r2, #21
   13258:	f103 0308 	add.w	r3, r3, #8
   1325c:	d1f4      	bne.n	13248 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
   1325e:	e7fe      	b.n	1325e <GetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i].RegValue;
   13260:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   13264:	7908      	ldrb	r0, [r1, #4]
}
   13266:	bd10      	pop	{r4, pc}
   13268:	00033acc 	.word	0x00033acc

0001326c <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
   1326c:	4b05      	ldr	r3, [pc, #20]	; (13284 <SX1276OnDio4Irq+0x18>)
   1326e:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   13272:	b92a      	cbnz	r2, 13280 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   13274:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   13278:	b912      	cbnz	r2, 13280 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   1327a:	2201      	movs	r2, #1
   1327c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
   13280:	4770      	bx	lr
   13282:	bf00      	nop
   13284:	2002fb20 	.word	0x2002fb20

00013288 <SX1276GetStatus>:
}
   13288:	4b01      	ldr	r3, [pc, #4]	; (13290 <SX1276GetStatus+0x8>)
   1328a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1328e:	4770      	bx	lr
   13290:	2002fb20 	.word	0x2002fb20

00013294 <SX1276GetTimeOnAir>:
{
   13294:	b5f0      	push	{r4, r5, r6, r7, lr}
   13296:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1329a:	f89d c018 	ldrb.w	ip, [sp, #24]
   1329e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   132a2:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
   132a6:	b140      	cbz	r0, 132ba <SX1276GetTimeOnAir+0x26>
   132a8:	2801      	cmp	r0, #1
   132aa:	d014      	beq.n	132d6 <SX1276GetTimeOnAir+0x42>
   132ac:	2201      	movs	r2, #1
   132ae:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
   132b0:	1898      	adds	r0, r3, r2
   132b2:	3801      	subs	r0, #1
   132b4:	fbb0 f0f2 	udiv	r0, r0, r2
}
   132b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
   132ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
           ( ( fixLen == false ) ? 8 : 0 ) +
   132be:	f08c 0c01 	eor.w	ip, ip, #1
    return ( preambleLen << 3 ) +
   132c2:	00e3      	lsls	r3, r4, #3
   132c4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
   132c8:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
   132ca:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
             ( syncWordLength << 3 ) +
   132ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
   132d2:	434b      	muls	r3, r1
        break;
   132d4:	e7ec      	b.n	132b0 <SX1276GetTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
   132d6:	1f50      	subs	r0, r2, #5
   132d8:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
   132da:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
   132de:	d804      	bhi.n	132ea <SX1276GetTimeOnAir+0x56>
        if( preambleLen < 12 )
   132e0:	2c0c      	cmp	r4, #12
   132e2:	bf38      	it	cc
   132e4:	240c      	movcc	r4, #12
    bool    lowDatareOptimize = false;
   132e6:	2700      	movs	r7, #0
   132e8:	e006      	b.n	132f8 <SX1276GetTimeOnAir+0x64>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   132ea:	b9c9      	cbnz	r1, 13320 <SX1276GetTimeOnAir+0x8c>
   132ec:	f1a2 070b 	sub.w	r7, r2, #11
   132f0:	2f01      	cmp	r7, #1
   132f2:	bf8c      	ite	hi
   132f4:	2700      	movhi	r7, #0
   132f6:	2701      	movls	r7, #1
                            ( fixLen ? 0 : 20 );
   132f8:	f1bc 0f00 	cmp.w	ip, #0
                            ( crcOn ? 16 : 0 ) -
   132fc:	ea4f 1005 	mov.w	r0, r5, lsl #4
                            ( fixLen ? 0 : 20 );
   13300:	bf0c      	ite	eq
   13302:	2514      	moveq	r5, #20
   13304:	2500      	movne	r5, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
   13306:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
   1330a:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
   1330e:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
   13310:	ea4f 0682 	mov.w	r6, r2, lsl #2
   13314:	4428      	add	r0, r5
            ceilDenominator = 4 * ( datarate - 2 );
   13316:	f1a2 0c02 	sub.w	ip, r2, #2
    if( datarate <= 6 )
   1331a:	d808      	bhi.n	1332e <SX1276GetTimeOnAir+0x9a>
            ceilDenominator = 4 * datarate;
   1331c:	4635      	mov	r5, r6
   1331e:	e00b      	b.n	13338 <SX1276GetTimeOnAir+0xa4>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13320:	2901      	cmp	r1, #1
   13322:	d1e0      	bne.n	132e6 <SX1276GetTimeOnAir+0x52>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
   13324:	f1a2 000c 	sub.w	r0, r2, #12
   13328:	4247      	negs	r7, r0
   1332a:	4147      	adcs	r7, r0
   1332c:	e7e4      	b.n	132f8 <SX1276GetTimeOnAir+0x64>
        ceilNumerator += 8;
   1332e:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
   13330:	2f00      	cmp	r7, #0
   13332:	d0f3      	beq.n	1331c <SX1276GetTimeOnAir+0x88>
            ceilDenominator = 4 * ( datarate - 2 );
   13334:	ea4f 058c 	mov.w	r5, ip, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
   13338:	2800      	cmp	r0, #0
   1333a:	bfac      	ite	ge
   1333c:	182e      	addge	r6, r5, r0
   1333e:	1c2e      	addlt	r6, r5, #0
   13340:	1e70      	subs	r0, r6, #1
   13342:	fb90 f0f5 	sdiv	r0, r0, r5
   13346:	fb03 4400 	mla	r4, r3, r0, r4
    if( datarate <= 6 )
   1334a:	2a06      	cmp	r2, #6
    int32_t intermediate =
   1334c:	bf8c      	ite	hi
   1334e:	340c      	addhi	r4, #12
        intermediate += 2;
   13350:	340e      	addls	r4, #14
    switch( bw )
   13352:	2902      	cmp	r1, #2
   13354:	d80a      	bhi.n	1336c <SX1276GetTimeOnAir+0xd8>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
   13356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
   1335a:	00a3      	lsls	r3, r4, #2
   1335c:	3301      	adds	r3, #1
   1335e:	fa03 f30c 	lsl.w	r3, r3, ip
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
   13362:	4353      	muls	r3, r2
   13364:	4a02      	ldr	r2, [pc, #8]	; (13370 <SX1276GetTimeOnAir+0xdc>)
   13366:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1336a:	e7a1      	b.n	132b0 <SX1276GetTimeOnAir+0x1c>
    return ( numerator + denominator - 1 ) / denominator;
   1336c:	deff      	udf	#255	; 0xff
   1336e:	bf00      	nop
   13370:	00033ac0 	.word	0x00033ac0

00013374 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   13374:	f643 5309 	movw	r3, #15625	; 0x3d09
   13378:	fbb0 f2f3 	udiv	r2, r0, r3
{
   1337c:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   1337e:	f641 6484 	movw	r4, #7812	; 0x1e84
   13382:	fb03 0112 	mls	r1, r3, r2, r0
   13386:	eb04 2401 	add.w	r4, r4, r1, lsl #8
   1338a:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
   1338e:	4b0a      	ldr	r3, [pc, #40]	; (133b8 <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
   13390:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
   13394:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
   13398:	f3c4 4107 	ubfx	r1, r4, #16, #8
   1339c:	2006      	movs	r0, #6
   1339e:	f018 fd15 	bl	2bdcc <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
   133a2:	f3c4 2107 	ubfx	r1, r4, #8, #8
   133a6:	2007      	movs	r0, #7
   133a8:	f018 fd10 	bl	2bdcc <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
   133ac:	b2e1      	uxtb	r1, r4
   133ae:	2008      	movs	r0, #8
}
   133b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
   133b4:	f018 bd0a 	b.w	2bdcc <SX1276Write>
   133b8:	2002fb20 	.word	0x2002fb20

000133bc <SX1276OnDio3Irq>:
{
   133bc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
   133be:	4b11      	ldr	r3, [pc, #68]	; (13404 <SX1276OnDio3Irq+0x48>)
   133c0:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
   133c4:	2e01      	cmp	r6, #1
   133c6:	d11c      	bne.n	13402 <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   133c8:	2012      	movs	r0, #18
   133ca:	f018 fd0a 	bl	2bde2 <SX1276Read>
   133ce:	f010 0401 	ands.w	r4, r0, #1
   133d2:	4d0d      	ldr	r5, [pc, #52]	; (13408 <SX1276OnDio3Irq+0x4c>)
   133d4:	d00b      	beq.n	133ee <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   133d6:	2105      	movs	r1, #5
   133d8:	2012      	movs	r0, #18
   133da:	f018 fcf7 	bl	2bdcc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   133de:	682b      	ldr	r3, [r5, #0]
   133e0:	b17b      	cbz	r3, 13402 <SX1276OnDio3Irq+0x46>
   133e2:	699b      	ldr	r3, [r3, #24]
   133e4:	b16b      	cbz	r3, 13402 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
   133e6:	4630      	mov	r0, r6
}
   133e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
   133ec:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   133ee:	2104      	movs	r1, #4
   133f0:	2012      	movs	r0, #18
   133f2:	f018 fceb 	bl	2bdcc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   133f6:	682b      	ldr	r3, [r5, #0]
   133f8:	b11b      	cbz	r3, 13402 <SX1276OnDio3Irq+0x46>
   133fa:	699b      	ldr	r3, [r3, #24]
   133fc:	b10b      	cbz	r3, 13402 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
   133fe:	4620      	mov	r0, r4
   13400:	e7f2      	b.n	133e8 <SX1276OnDio3Irq+0x2c>
}
   13402:	bd70      	pop	{r4, r5, r6, pc}
   13404:	2002fb20 	.word	0x2002fb20
   13408:	2002fc64 	.word	0x2002fc64

0001340c <SX1276OnDio2Irq>:
{
   1340c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1340e:	4c31      	ldr	r4, [pc, #196]	; (134d4 <SX1276OnDio2Irq+0xc8>)
   13410:	f894 10e0 	ldrb.w	r1, [r4, #224]	; 0xe0
   13414:	2901      	cmp	r1, #1
   13416:	d002      	beq.n	1341e <SX1276OnDio2Irq+0x12>
   13418:	2902      	cmp	r1, #2
   1341a:	d052      	beq.n	134c2 <SX1276OnDio2Irq+0xb6>
}
   1341c:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   1341e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13422:	b1cb      	cbz	r3, 13458 <SX1276OnDio2Irq+0x4c>
   13424:	2b01      	cmp	r3, #1
   13426:	d1f9      	bne.n	1341c <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   13428:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   1342c:	2b00      	cmp	r3, #0
   1342e:	d0f5      	beq.n	1341c <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   13430:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   13432:	2012      	movs	r0, #18
   13434:	f018 fcca 	bl	2bdcc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
   13438:	4b27      	ldr	r3, [pc, #156]	; (134d8 <SX1276OnDio2Irq+0xcc>)
   1343a:	681b      	ldr	r3, [r3, #0]
   1343c:	2b00      	cmp	r3, #0
   1343e:	d0ed      	beq.n	1341c <SX1276OnDio2Irq+0x10>
   13440:	695c      	ldr	r4, [r3, #20]
   13442:	2c00      	cmp	r4, #0
   13444:	d0ea      	beq.n	1341c <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   13446:	201c      	movs	r0, #28
   13448:	f018 fccb 	bl	2bde2 <SX1276Read>
   1344c:	4623      	mov	r3, r4
}
   1344e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   13452:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13456:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
   13458:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1345a:	bb6b      	cbnz	r3, 134b8 <SX1276OnDio2Irq+0xac>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   1345c:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
   13460:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   13464:	2b00      	cmp	r3, #0
   13466:	d1d9      	bne.n	1341c <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
   13468:	481c      	ldr	r0, [pc, #112]	; (134dc <SX1276OnDio2Irq+0xd0>)
   1346a:	f7ff febf 	bl	131ec <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   1346e:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   13470:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   13472:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   13476:	f018 fcb4 	bl	2bde2 <SX1276Read>
   1347a:	0840      	lsrs	r0, r0, #1
   1347c:	4240      	negs	r0, r0
   1347e:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   13482:	201b      	movs	r0, #27
   13484:	f018 fcad 	bl	2bde2 <SX1276Read>
   13488:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
   1348a:	201c      	movs	r0, #28
   1348c:	f018 fca9 	bl	2bde2 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13490:	f643 5309 	movw	r3, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   13494:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13498:	b2c0      	uxtb	r0, r0
   1349a:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
   1349c:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   1349e:	435d      	muls	r5, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   134a0:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   134a2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   134a6:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   134a8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   134ac:	f018 fc99 	bl	2bde2 <SX1276Read>
   134b0:	0940      	lsrs	r0, r0, #5
   134b2:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
   134b6:	e7b1      	b.n	1341c <SX1276OnDio2Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
   134b8:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   134bc:	2b00      	cmp	r3, #0
   134be:	d0ad      	beq.n	1341c <SX1276OnDio2Irq+0x10>
   134c0:	e7ce      	b.n	13460 <SX1276OnDio2Irq+0x54>
            switch( SX1276.Settings.Modem )
   134c2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   134c6:	2b01      	cmp	r3, #1
   134c8:	d1a8      	bne.n	1341c <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   134ca:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   134ce:	2b00      	cmp	r3, #0
   134d0:	d0a4      	beq.n	1341c <SX1276OnDio2Irq+0x10>
   134d2:	e7ae      	b.n	13432 <SX1276OnDio2Irq+0x26>
   134d4:	2002fb20 	.word	0x2002fb20
   134d8:	2002fc64 	.word	0x2002fc64
   134dc:	2002fad8 	.word	0x2002fad8

000134e0 <SX1276OnDio1Irq>:
{
   134e0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   134e2:	4c40      	ldr	r4, [pc, #256]	; (135e4 <SX1276OnDio1Irq+0x104>)
   134e4:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
   134e8:	2d01      	cmp	r5, #1
   134ea:	d002      	beq.n	134f2 <SX1276OnDio1Irq+0x12>
   134ec:	2d02      	cmp	r5, #2
   134ee:	d059      	beq.n	135a4 <SX1276OnDio1Irq+0xc4>
}
   134f0:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   134f2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   134f6:	b1cb      	cbz	r3, 1352c <SX1276OnDio1Irq+0x4c>
   134f8:	2b01      	cmp	r3, #1
   134fa:	d1f9      	bne.n	134f0 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
   134fc:	f7ff fdaa 	bl	13054 <SX1276GetDio1PinState>
   13500:	2800      	cmp	r0, #0
   13502:	d0f5      	beq.n	134f0 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
   13504:	4838      	ldr	r0, [pc, #224]	; (135e8 <SX1276OnDio1Irq+0x108>)
   13506:	f7ff fe71 	bl	131ec <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   1350a:	2180      	movs	r1, #128	; 0x80
   1350c:	2012      	movs	r0, #18
   1350e:	f018 fc5d 	bl	2bdcc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   13512:	2300      	movs	r3, #0
   13514:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   13518:	4b34      	ldr	r3, [pc, #208]	; (135ec <SX1276OnDio1Irq+0x10c>)
   1351a:	681b      	ldr	r3, [r3, #0]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d0e7      	beq.n	134f0 <SX1276OnDio1Irq+0x10>
   13520:	68db      	ldr	r3, [r3, #12]
   13522:	2b00      	cmp	r3, #0
   13524:	d0e4      	beq.n	134f0 <SX1276OnDio1Irq+0x10>
}
   13526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
   1352a:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
   1352c:	f7ff fd92 	bl	13054 <SX1276GetDio1PinState>
   13530:	2800      	cmp	r0, #0
   13532:	d0dd      	beq.n	134f0 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
   13534:	482e      	ldr	r0, [pc, #184]	; (135f0 <SX1276OnDio1Irq+0x110>)
   13536:	f7ff fe59 	bl	131ec <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1353a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   1353e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   13542:	4313      	orrs	r3, r2
   13544:	b29b      	uxth	r3, r3
   13546:	b93b      	cbnz	r3, 13558 <SX1276OnDio1Irq+0x78>
                    if( SX1276.Settings.Fsk.FixLen == false )
   13548:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
   1354c:	b9e8      	cbnz	r0, 1358a <SX1276OnDio1Irq+0xaa>
    SX1276ReadBuffer( 0, buffer, size );
   1354e:	462a      	mov	r2, r5
   13550:	f504 718b 	add.w	r1, r4, #278	; 0x116
   13554:	f7ff fc62 	bl	12e1c <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   13558:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   1355c:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   13560:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   13564:	4923      	ldr	r1, [pc, #140]	; (135f4 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   13566:	1a12      	subs	r2, r2, r0
   13568:	429a      	cmp	r2, r3
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   1356a:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1356c:	db13      	blt.n	13596 <SX1276OnDio1Irq+0xb6>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   1356e:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
   13570:	b2d2      	uxtb	r2, r2
   13572:	2000      	movs	r0, #0
   13574:	f7ff fc52 	bl	12e1c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
   13578:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1357c:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   13580:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   13582:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   13584:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
   13588:	e7b2      	b.n	134f0 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1358a:	2032      	movs	r0, #50	; 0x32
   1358c:	f018 fc29 	bl	2bde2 <SX1276Read>
   13590:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   13594:	e7e0      	b.n	13558 <SX1276OnDio1Irq+0x78>
    SX1276ReadBuffer( 0, buffer, size );
   13596:	2000      	movs	r0, #0
   13598:	b2d2      	uxtb	r2, r2
   1359a:	f7ff fc3f 	bl	12e1c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   1359e:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   135a2:	e7ef      	b.n	13584 <SX1276OnDio1Irq+0xa4>
            switch( SX1276.Settings.Modem )
   135a4:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
   135a8:	2d00      	cmp	r5, #0
   135aa:	d1a1      	bne.n	134f0 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
   135ac:	f7ff fd52 	bl	13054 <SX1276GetDio1PinState>
   135b0:	2801      	cmp	r0, #1
   135b2:	d09d      	beq.n	134f0 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   135b4:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   135b8:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   135bc:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   135c0:	490c      	ldr	r1, [pc, #48]	; (135f4 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   135c2:	1a1b      	subs	r3, r3, r0
   135c4:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   135c6:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   135c8:	dd07      	ble.n	135da <SX1276OnDio1Irq+0xfa>
    SX1276WriteBuffer( 0, buffer, size );
   135ca:	4628      	mov	r0, r5
   135cc:	f7ff fcce 	bl	12f6c <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   135d0:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   135d4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   135d8:	e7d3      	b.n	13582 <SX1276OnDio1Irq+0xa2>
    SX1276WriteBuffer( 0, buffer, size );
   135da:	4628      	mov	r0, r5
   135dc:	b2da      	uxtb	r2, r3
   135de:	f7ff fcc5 	bl	12f6c <SX1276WriteBuffer>
   135e2:	e7dc      	b.n	1359e <SX1276OnDio1Irq+0xbe>
   135e4:	2002fb20 	.word	0x2002fb20
   135e8:	2002faf0 	.word	0x2002faf0
   135ec:	2002fc64 	.word	0x2002fc64
   135f0:	2002fad8 	.word	0x2002fad8
   135f4:	200318ef 	.word	0x200318ef

000135f8 <SX1276OnDio0Irq>:
    volatile uint8_t irqFlags = 0;
   135f8:	2300      	movs	r3, #0
{
   135fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   135fc:	4c8e      	ldr	r4, [pc, #568]	; (13838 <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
   135fe:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
   13602:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   13606:	2b01      	cmp	r3, #1
   13608:	d004      	beq.n	13614 <SX1276OnDio0Irq+0x1c>
   1360a:	2b02      	cmp	r3, #2
   1360c:	f000 80ff 	beq.w	1380e <SX1276OnDio0Irq+0x216>
}
   13610:	b002      	add	sp, #8
   13612:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   13614:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13618:	b33b      	cbz	r3, 1366a <SX1276OnDio0Irq+0x72>
   1361a:	2b01      	cmp	r3, #1
   1361c:	d1f8      	bne.n	13610 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   1361e:	2140      	movs	r1, #64	; 0x40
   13620:	2012      	movs	r0, #18
   13622:	f018 fbd3 	bl	2bdcc <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   13626:	2012      	movs	r0, #18
   13628:	f018 fbdb 	bl	2bde2 <SX1276Read>
   1362c:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   13630:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13634:	4d81      	ldr	r5, [pc, #516]	; (1383c <SX1276OnDio0Irq+0x244>)
   13636:	f013 0f20 	tst.w	r3, #32
   1363a:	f000 8093 	beq.w	13764 <SX1276OnDio0Irq+0x16c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   1363e:	2120      	movs	r1, #32
   13640:	2012      	movs	r0, #18
   13642:	f018 fbc3 	bl	2bdcc <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   13646:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1364a:	b90b      	cbnz	r3, 13650 <SX1276OnDio0Irq+0x58>
                            SX1276.Settings.State = RF_IDLE;
   1364c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
   13650:	487b      	ldr	r0, [pc, #492]	; (13840 <SX1276OnDio0Irq+0x248>)
   13652:	f7ff fdcb 	bl	131ec <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   13656:	682b      	ldr	r3, [r5, #0]
   13658:	2b00      	cmp	r3, #0
   1365a:	d0d9      	beq.n	13610 <SX1276OnDio0Irq+0x18>
   1365c:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1365e:	2b00      	cmp	r3, #0
   13660:	d0d6      	beq.n	13610 <SX1276OnDio0Irq+0x18>
}
   13662:	b002      	add	sp, #8
   13664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
   13668:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
   1366a:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   1366e:	4d73      	ldr	r5, [pc, #460]	; (1383c <SX1276OnDio0Irq+0x244>)
   13670:	b393      	cbz	r3, 136d8 <SX1276OnDio0Irq+0xe0>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   13672:	203f      	movs	r0, #63	; 0x3f
   13674:	f018 fbb5 	bl	2bde2 <SX1276Read>
   13678:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   1367c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13680:	079b      	lsls	r3, r3, #30
   13682:	d429      	bmi.n	136d8 <SX1276OnDio0Irq+0xe0>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   13684:	210b      	movs	r1, #11
   13686:	203e      	movs	r0, #62	; 0x3e
   13688:	f018 fba0 	bl	2bdcc <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1368c:	2110      	movs	r1, #16
   1368e:	203f      	movs	r0, #63	; 0x3f
   13690:	f018 fb9c 	bl	2bdcc <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
   13694:	486a      	ldr	r0, [pc, #424]	; (13840 <SX1276OnDio0Irq+0x248>)
   13696:	f7ff fda9 	bl	131ec <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   1369a:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
   1369e:	b98e      	cbnz	r6, 136c4 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
   136a0:	4868      	ldr	r0, [pc, #416]	; (13844 <SX1276OnDio0Irq+0x24c>)
   136a2:	f7ff fda3 	bl	131ec <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
   136a6:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   136aa:	682b      	ldr	r3, [r5, #0]
   136ac:	b113      	cbz	r3, 136b4 <SX1276OnDio0Irq+0xbc>
   136ae:	691b      	ldr	r3, [r3, #16]
   136b0:	b103      	cbz	r3, 136b4 <SX1276OnDio0Irq+0xbc>
                            RadioEvents->RxError( );
   136b2:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   136b4:	2300      	movs	r3, #0
   136b6:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   136ba:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
   136be:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
   136c2:	e7a5      	b.n	13610 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   136c4:	200d      	movs	r0, #13
   136c6:	f018 fb8c 	bl	2bde2 <SX1276Read>
   136ca:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   136ce:	b2c9      	uxtb	r1, r1
   136d0:	200d      	movs	r0, #13
   136d2:	f018 fb7b 	bl	2bdcc <SX1276Write>
   136d6:	e7e8      	b.n	136aa <SX1276OnDio0Irq+0xb2>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   136d8:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   136dc:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
   136e0:	4e59      	ldr	r6, [pc, #356]	; (13848 <SX1276OnDio0Irq+0x250>)
   136e2:	ea52 0301 	orrs.w	r3, r2, r1
   136e6:	d10a      	bne.n	136fe <SX1276OnDio0Irq+0x106>
                    if( SX1276.Settings.Fsk.FixLen == false )
   136e8:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
   136ec:	bb50      	cbnz	r0, 13744 <SX1276OnDio0Irq+0x14c>
    SX1276ReadBuffer( 0, buffer, size );
   136ee:	2201      	movs	r2, #1
   136f0:	4956      	ldr	r1, [pc, #344]	; (1384c <SX1276OnDio0Irq+0x254>)
   136f2:	f7ff fb93 	bl	12e1c <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   136f6:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
   136fa:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   136fe:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
   13700:	2000      	movs	r0, #0
   13702:	b2d2      	uxtb	r2, r2
   13704:	4431      	add	r1, r6
   13706:	f7ff fb89 	bl	12e1c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1370a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
   1370e:	484c      	ldr	r0, [pc, #304]	; (13840 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   13710:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
   13714:	f7ff fd6a 	bl	131ec <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
   13718:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1371c:	b9c3      	cbnz	r3, 13750 <SX1276OnDio0Irq+0x158>
                    TimerStop( &RxTimeoutSyncWord );
   1371e:	4849      	ldr	r0, [pc, #292]	; (13844 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
   13720:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
   13724:	f7ff fd62 	bl	131ec <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   13728:	682b      	ldr	r3, [r5, #0]
   1372a:	2b00      	cmp	r3, #0
   1372c:	d0c2      	beq.n	136b4 <SX1276OnDio0Irq+0xbc>
   1372e:	689d      	ldr	r5, [r3, #8]
   13730:	2d00      	cmp	r5, #0
   13732:	d0bf      	beq.n	136b4 <SX1276OnDio0Irq+0xbc>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   13734:	2300      	movs	r3, #0
   13736:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
   1373a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   1373e:	4842      	ldr	r0, [pc, #264]	; (13848 <SX1276OnDio0Irq+0x250>)
   13740:	47a8      	blx	r5
   13742:	e7b7      	b.n	136b4 <SX1276OnDio0Irq+0xbc>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   13744:	2032      	movs	r0, #50	; 0x32
   13746:	f018 fb4c 	bl	2bde2 <SX1276Read>
   1374a:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   1374e:	e7d2      	b.n	136f6 <SX1276OnDio0Irq+0xfe>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   13750:	200d      	movs	r0, #13
   13752:	f018 fb46 	bl	2bde2 <SX1276Read>
   13756:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1375a:	b2c9      	uxtb	r1, r1
   1375c:	200d      	movs	r0, #13
   1375e:	f018 fb35 	bl	2bdcc <SX1276Write>
   13762:	e7e1      	b.n	13728 <SX1276OnDio0Irq+0x130>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
   13764:	2019      	movs	r0, #25
   13766:	f018 fb3c 	bl	2bde2 <SX1276Read>
   1376a:	b240      	sxtb	r0, r0
   1376c:	3002      	adds	r0, #2
   1376e:	1080      	asrs	r0, r0, #2
   13770:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   13774:	201a      	movs	r0, #26
   13776:	f018 fb34 	bl	2bde2 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1377a:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
   1377e:	4934      	ldr	r1, [pc, #208]	; (13850 <SX1276OnDio0Irq+0x258>)
   13780:	2a00      	cmp	r2, #0
   13782:	f340 130b 	sbfx	r3, r0, #4, #12
   13786:	da3a      	bge.n	137fe <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13788:	f8d4 60e4 	ldr.w	r6, [r4, #228]	; 0xe4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
   1378c:	b292      	uxth	r2, r2
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1378e:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   13790:	bf8c      	ite	hi
   13792:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   13794:	3aa4      	subls	r2, #164	; 0xa4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   13796:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   13798:	4410      	add	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1379a:	4403      	add	r3, r0
   1379c:	b21b      	sxth	r3, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   1379e:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   137a0:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   137a4:	f018 fb1d 	bl	2bde2 <SX1276Read>
   137a8:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   137ac:	2010      	movs	r0, #16
   137ae:	f018 fb18 	bl	2bde2 <SX1276Read>
   137b2:	4601      	mov	r1, r0
   137b4:	200d      	movs	r0, #13
   137b6:	f018 fb09 	bl	2bdcc <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
   137ba:	2000      	movs	r0, #0
   137bc:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
   137c0:	4921      	ldr	r1, [pc, #132]	; (13848 <SX1276OnDio0Irq+0x250>)
   137c2:	f7ff fb2b 	bl	12e1c <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   137c6:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   137ca:	b90b      	cbnz	r3, 137d0 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
   137cc:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
   137d0:	481b      	ldr	r0, [pc, #108]	; (13840 <SX1276OnDio0Irq+0x248>)
   137d2:	f7ff fd0b 	bl	131ec <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   137d6:	682b      	ldr	r3, [r5, #0]
   137d8:	2b00      	cmp	r3, #0
   137da:	f43f af19 	beq.w	13610 <SX1276OnDio0Irq+0x18>
   137de:	689d      	ldr	r5, [r3, #8]
   137e0:	2d00      	cmp	r5, #0
   137e2:	f43f af15 	beq.w	13610 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   137e6:	46ac      	mov	ip, r5
   137e8:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
   137ec:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
   137f0:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   137f4:	4814      	ldr	r0, [pc, #80]	; (13848 <SX1276OnDio0Irq+0x250>)
}
   137f6:	b002      	add	sp, #8
   137f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   137fc:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   137fe:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   13802:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13804:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   13806:	bf8c      	ite	hi
   13808:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1380a:	38a4      	subls	r0, #164	; 0xa4
   1380c:	e7c5      	b.n	1379a <SX1276OnDio0Irq+0x1a2>
            TimerStop( &TxTimeoutTimer );
   1380e:	4811      	ldr	r0, [pc, #68]	; (13854 <SX1276OnDio0Irq+0x25c>)
   13810:	f7ff fcec 	bl	131ec <TimerStop>
            switch( SX1276.Settings.Modem )
   13814:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13818:	2b01      	cmp	r3, #1
   1381a:	d103      	bne.n	13824 <SX1276OnDio0Irq+0x22c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   1381c:	2108      	movs	r1, #8
   1381e:	2012      	movs	r0, #18
   13820:	f018 fad4 	bl	2bdcc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   13824:	2300      	movs	r3, #0
   13826:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1382a:	4b04      	ldr	r3, [pc, #16]	; (1383c <SX1276OnDio0Irq+0x244>)
   1382c:	681b      	ldr	r3, [r3, #0]
   1382e:	2b00      	cmp	r3, #0
   13830:	f43f aeee 	beq.w	13610 <SX1276OnDio0Irq+0x18>
   13834:	681b      	ldr	r3, [r3, #0]
   13836:	e712      	b.n	1365e <SX1276OnDio0Irq+0x66>
   13838:	2002fb20 	.word	0x2002fb20
   1383c:	2002fc64 	.word	0x2002fc64
   13840:	2002faf0 	.word	0x2002faf0
   13844:	2002fad8 	.word	0x2002fad8
   13848:	200318ef 	.word	0x200318ef
   1384c:	2002fc36 	.word	0x2002fc36
   13850:	1f4add40 	.word	0x1f4add40
   13854:	2002fb08 	.word	0x2002fb08

00013858 <RxChainCalibration>:
{
   13858:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
   1385a:	2009      	movs	r0, #9
   1385c:	f018 fac1 	bl	2bde2 <SX1276Read>
   13860:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   13862:	2006      	movs	r0, #6
   13864:	f018 fabd 	bl	2bde2 <SX1276Read>
   13868:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
   1386a:	2007      	movs	r0, #7
   1386c:	f018 fab9 	bl	2bde2 <SX1276Read>
   13870:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
   13872:	2008      	movs	r0, #8
   13874:	f018 fab5 	bl	2bde2 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13878:	f643 5309 	movw	r3, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   1387c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   13880:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13882:	b2c0      	uxtb	r0, r0
   13884:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
   13886:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   13888:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   1388a:	3080      	adds	r0, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
   1388c:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   1388e:	eb04 2410 	add.w	r4, r4, r0, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
   13892:	2009      	movs	r0, #9
   13894:	f018 fa9a 	bl	2bdcc <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   13898:	203b      	movs	r0, #59	; 0x3b
   1389a:	f018 faa2 	bl	2bde2 <SX1276Read>
   1389e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   138a2:	b2c9      	uxtb	r1, r1
   138a4:	203b      	movs	r0, #59	; 0x3b
   138a6:	f018 fa91 	bl	2bdcc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   138aa:	203b      	movs	r0, #59	; 0x3b
   138ac:	f018 fa99 	bl	2bde2 <SX1276Read>
   138b0:	0682      	lsls	r2, r0, #26
   138b2:	d4fa      	bmi.n	138aa <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
   138b4:	480c      	ldr	r0, [pc, #48]	; (138e8 <RxChainCalibration+0x90>)
   138b6:	f7ff fd5d 	bl	13374 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   138ba:	203b      	movs	r0, #59	; 0x3b
   138bc:	f018 fa91 	bl	2bde2 <SX1276Read>
   138c0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   138c4:	b2c9      	uxtb	r1, r1
   138c6:	203b      	movs	r0, #59	; 0x3b
   138c8:	f018 fa80 	bl	2bdcc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   138cc:	203b      	movs	r0, #59	; 0x3b
   138ce:	f018 fa88 	bl	2bde2 <SX1276Read>
   138d2:	0683      	lsls	r3, r0, #26
   138d4:	d4fa      	bmi.n	138cc <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
   138d6:	4629      	mov	r1, r5
   138d8:	2009      	movs	r0, #9
   138da:	f018 fa77 	bl	2bdcc <SX1276Write>
    SX1276SetChannel( initialFreq );
   138de:	4620      	mov	r0, r4
}
   138e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
   138e4:	f7ff bd46 	b.w	13374 <SX1276SetChannel>
   138e8:	33bca100 	.word	0x33bca100

000138ec <SX1276SetSleep>:
{
   138ec:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   138ee:	480a      	ldr	r0, [pc, #40]	; (13918 <SX1276SetSleep+0x2c>)
   138f0:	f7ff fc7c 	bl	131ec <TimerStop>
    TimerStop( &TxTimeoutTimer );
   138f4:	4809      	ldr	r0, [pc, #36]	; (1391c <SX1276SetSleep+0x30>)
   138f6:	f7ff fc79 	bl	131ec <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   138fa:	4809      	ldr	r0, [pc, #36]	; (13920 <SX1276SetSleep+0x34>)
   138fc:	f7ff fc76 	bl	131ec <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   13900:	2000      	movs	r0, #0
   13902:	f018 fa79 	bl	2bdf8 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
   13906:	2000      	movs	r0, #0
   13908:	f018 f913 	bl	2bb32 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
   1390c:	2200      	movs	r2, #0
   1390e:	4b05      	ldr	r3, [pc, #20]	; (13924 <SX1276SetSleep+0x38>)
   13910:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   13914:	bd08      	pop	{r3, pc}
   13916:	bf00      	nop
   13918:	2002faf0 	.word	0x2002faf0
   1391c:	2002fb08 	.word	0x2002fb08
   13920:	2002fad8 	.word	0x2002fad8
   13924:	2002fb20 	.word	0x2002fb20

00013928 <SX1276SetStby>:
{
   13928:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1392a:	4808      	ldr	r0, [pc, #32]	; (1394c <SX1276SetStby+0x24>)
   1392c:	f7ff fc5e 	bl	131ec <TimerStop>
    TimerStop( &TxTimeoutTimer );
   13930:	4807      	ldr	r0, [pc, #28]	; (13950 <SX1276SetStby+0x28>)
   13932:	f7ff fc5b 	bl	131ec <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   13936:	4807      	ldr	r0, [pc, #28]	; (13954 <SX1276SetStby+0x2c>)
   13938:	f7ff fc58 	bl	131ec <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
   1393c:	2001      	movs	r0, #1
   1393e:	f018 fa5b 	bl	2bdf8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
   13942:	2200      	movs	r2, #0
   13944:	4b04      	ldr	r3, [pc, #16]	; (13958 <SX1276SetStby+0x30>)
   13946:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1394a:	bd08      	pop	{r3, pc}
   1394c:	2002faf0 	.word	0x2002faf0
   13950:	2002fb08 	.word	0x2002fb08
   13954:	2002fad8 	.word	0x2002fad8
   13958:	2002fb20 	.word	0x2002fb20

0001395c <SX1276Send>:
{
   1395c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
   1395e:	4c60      	ldr	r4, [pc, #384]	; (13ae0 <SX1276Send+0x184>)
{
   13960:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
   13962:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
   13966:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
   1396a:	b1db      	cbz	r3, 139a4 <SX1276Send+0x48>
   1396c:	2b01      	cmp	r3, #1
   1396e:	d045      	beq.n	139fc <SX1276Send+0xa0>
   13970:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
   13972:	485c      	ldr	r0, [pc, #368]	; (13ae4 <SX1276Send+0x188>)
   13974:	f7ff fc3a 	bl	131ec <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
   13978:	4629      	mov	r1, r5
   1397a:	485b      	ldr	r0, [pc, #364]	; (13ae8 <SX1276Send+0x18c>)
   1397c:	f018 f9fd 	bl	2bd7a <TimerSetValue>
    switch( SX1276.Settings.Modem )
   13980:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13984:	2b00      	cmp	r3, #0
   13986:	d076      	beq.n	13a76 <SX1276Send+0x11a>
   13988:	2b01      	cmp	r3, #1
   1398a:	f000 808c 	beq.w	13aa6 <SX1276Send+0x14a>
    SX1276.Settings.State = RF_TX_RUNNING;
   1398e:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
   13990:	4855      	ldr	r0, [pc, #340]	; (13ae8 <SX1276Send+0x18c>)
    SX1276.Settings.State = RF_TX_RUNNING;
   13992:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   13996:	f7ff fbb3 	bl	13100 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1399a:	2003      	movs	r0, #3
   1399c:	f018 fa2c 	bl	2bdf8 <SX1276SetOpMode>
}
   139a0:	b003      	add	sp, #12
   139a2:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
   139a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
            if( SX1276.Settings.Fsk.FixLen == false )
   139a8:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   139ac:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
   139b0:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
   139b4:	b9f0      	cbnz	r0, 139f4 <SX1276Send+0x98>
    SX1276WriteBuffer( 0, buffer, size );
   139b6:	2201      	movs	r2, #1
   139b8:	f10d 0107 	add.w	r1, sp, #7
   139bc:	f7ff fad6 	bl	12f6c <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
   139c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   139c4:	1e53      	subs	r3, r2, #1
   139c6:	2b3f      	cmp	r3, #63	; 0x3f
   139c8:	d904      	bls.n	139d4 <SX1276Send+0x78>
                memcpy1( RxTxBuffer, buffer, size );
   139ca:	4629      	mov	r1, r5
   139cc:	4847      	ldr	r0, [pc, #284]	; (13aec <SX1276Send+0x190>)
   139ce:	f018 f8d0 	bl	2bb72 <memcpy1>
   139d2:	2220      	movs	r2, #32
    SX1276WriteBuffer( 0, buffer, size );
   139d4:	4629      	mov	r1, r5
   139d6:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   139d8:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
   139dc:	f7ff fac6 	bl	12f6c <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   139e0:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   139e4:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   139e8:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   139ec:	4413      	add	r3, r2
   139ee:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
   139f2:	e7be      	b.n	13972 <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
   139f4:	2032      	movs	r0, #50	; 0x32
   139f6:	f018 f9e9 	bl	2bdcc <SX1276Write>
   139fa:	e7e1      	b.n	139c0 <SX1276Send+0x64>
            if( SX1276.Settings.LoRa.IqInverted == true )
   139fc:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   13a00:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   13a02:	b36b      	cbz	r3, 13a60 <SX1276Send+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   13a04:	f018 f9ed 	bl	2bde2 <SX1276Read>
   13a08:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13a0c:	2033      	movs	r0, #51	; 0x33
   13a0e:	f018 f9dd 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13a12:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13a14:	203b      	movs	r0, #59	; 0x3b
   13a16:	f018 f9d9 	bl	2bdcc <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
   13a1a:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   13a1e:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
   13a20:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   13a24:	f018 f9d2 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   13a28:	2100      	movs	r1, #0
   13a2a:	200e      	movs	r0, #14
   13a2c:	f018 f9ce 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   13a30:	2100      	movs	r1, #0
   13a32:	200d      	movs	r0, #13
   13a34:	f018 f9ca 	bl	2bdcc <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   13a38:	2001      	movs	r0, #1
   13a3a:	f018 f9d2 	bl	2bde2 <SX1276Read>
   13a3e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
   13a42:	d104      	bne.n	13a4e <SX1276Send+0xf2>
                SX1276SetStby( );
   13a44:	f7ff ff70 	bl	13928 <SX1276SetStby>
                DelayMs( 1 );
   13a48:	2001      	movs	r0, #1
   13a4a:	f018 f9bd 	bl	2bdc8 <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
   13a4e:	4629      	mov	r1, r5
   13a50:	2000      	movs	r0, #0
   13a52:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13a56:	f7ff fa89 	bl	12f6c <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   13a5a:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
   13a5e:	e788      	b.n	13972 <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13a60:	f018 f9bf 	bl	2bde2 <SX1276Read>
   13a64:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13a68:	f041 0101 	orr.w	r1, r1, #1
   13a6c:	2033      	movs	r0, #51	; 0x33
   13a6e:	f018 f9ad 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13a72:	211d      	movs	r1, #29
   13a74:	e7ce      	b.n	13a14 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13a76:	2040      	movs	r0, #64	; 0x40
   13a78:	f018 f9b3 	bl	2bde2 <SX1276Read>
   13a7c:	f000 0103 	and.w	r1, r0, #3
   13a80:	2040      	movs	r0, #64	; 0x40
   13a82:	f018 f9a3 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   13a86:	2041      	movs	r0, #65	; 0x41
   13a88:	f018 f9ab 	bl	2bde2 <SX1276Read>
   13a8c:	f000 013e 	and.w	r1, r0, #62	; 0x3e
   13a90:	2041      	movs	r0, #65	; 0x41
   13a92:	f018 f99b 	bl	2bdcc <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   13a96:	2035      	movs	r0, #53	; 0x35
   13a98:	f018 f9a3 	bl	2bde2 <SX1276Read>
   13a9c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13aa0:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
   13aa4:	e773      	b.n	1398e <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13aa6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   13aaa:	b173      	cbz	r3, 13aca <SX1276Send+0x16e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   13aac:	21f5      	movs	r1, #245	; 0xf5
   13aae:	2011      	movs	r0, #17
   13ab0:	f018 f98c 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   13ab4:	2040      	movs	r0, #64	; 0x40
   13ab6:	f018 f994 	bl	2bde2 <SX1276Read>
   13aba:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   13abe:	2040      	movs	r0, #64	; 0x40
   13ac0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   13ac4:	f018 f982 	bl	2bdcc <SX1276Write>
   13ac8:	e761      	b.n	1398e <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   13aca:	21f7      	movs	r1, #247	; 0xf7
   13acc:	2011      	movs	r0, #17
   13ace:	f018 f97d 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   13ad2:	2040      	movs	r0, #64	; 0x40
   13ad4:	f018 f985 	bl	2bde2 <SX1276Read>
   13ad8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   13adc:	e7ef      	b.n	13abe <SX1276Send+0x162>
   13ade:	bf00      	nop
   13ae0:	2002fb20 	.word	0x2002fb20
   13ae4:	2002faf0 	.word	0x2002faf0
   13ae8:	2002fb08 	.word	0x2002fb08
   13aec:	200318ef 	.word	0x200318ef

00013af0 <SX1276SetRx>:
{
   13af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
   13af2:	4c82      	ldr	r4, [pc, #520]	; (13cfc <SX1276SetRx+0x20c>)
{
   13af4:	4605      	mov	r5, r0
    TimerStop( &TxTimeoutTimer );
   13af6:	4882      	ldr	r0, [pc, #520]	; (13d00 <SX1276SetRx+0x210>)
   13af8:	f7ff fb78 	bl	131ec <TimerStop>
    switch( SX1276.Settings.Modem )
   13afc:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
   13b00:	b14e      	cbz	r6, 13b16 <SX1276SetRx+0x26>
   13b02:	2e01      	cmp	r6, #1
   13b04:	d04d      	beq.n	13ba2 <SX1276SetRx+0xb2>
    SX1276.Settings.State = RF_RX_RUNNING;
   13b06:	2301      	movs	r3, #1
   13b08:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   13b0c:	2d00      	cmp	r5, #0
   13b0e:	f000 80f2 	beq.w	13cf6 <SX1276SetRx+0x206>
    bool rxContinuous = false;
   13b12:	2700      	movs	r7, #0
   13b14:	e029      	b.n	13b6a <SX1276SetRx+0x7a>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13b16:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   13b18:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13b1c:	f018 f961 	bl	2bde2 <SX1276Read>
   13b20:	f000 0103 	and.w	r1, r0, #3
   13b24:	f041 010c 	orr.w	r1, r1, #12
   13b28:	2040      	movs	r0, #64	; 0x40
   13b2a:	f018 f94f 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   13b2e:	2041      	movs	r0, #65	; 0x41
   13b30:	f018 f957 	bl	2bde2 <SX1276Read>
   13b34:	f060 013e 	orn	r1, r0, #62	; 0x3e
   13b38:	b2c9      	uxtb	r1, r1
   13b3a:	2041      	movs	r0, #65	; 0x41
   13b3c:	f018 f946 	bl	2bdcc <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   13b40:	2035      	movs	r0, #53	; 0x35
   13b42:	f018 f94e 	bl	2bde2 <SX1276Read>
   13b46:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13b4a:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   13b4e:	211e      	movs	r1, #30
   13b50:	200d      	movs	r0, #13
   13b52:	f018 f93b 	bl	2bdcc <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   13b56:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   13b5a:	f8a4 6118 	strh.w	r6, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   13b5e:	f8a4 6116 	strh.w	r6, [r4, #278]	; 0x116
    SX1276.Settings.State = RF_RX_RUNNING;
   13b62:	2301      	movs	r3, #1
   13b64:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   13b68:	b135      	cbz	r5, 13b78 <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
   13b6a:	4866      	ldr	r0, [pc, #408]	; (13d04 <SX1276SetRx+0x214>)
   13b6c:	4629      	mov	r1, r5
   13b6e:	f018 f904 	bl	2bd7a <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
   13b72:	4864      	ldr	r0, [pc, #400]	; (13d04 <SX1276SetRx+0x214>)
   13b74:	f7ff fac4 	bl	13100 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
   13b78:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13b7c:	2b00      	cmp	r3, #0
   13b7e:	f040 80b4 	bne.w	13cea <SX1276SetRx+0x1fa>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   13b82:	2005      	movs	r0, #5
   13b84:	f018 f938 	bl	2bdf8 <SX1276SetOpMode>
        if( rxContinuous == false )
   13b88:	2f00      	cmp	r7, #0
   13b8a:	f040 80b6 	bne.w	13cfa <SX1276SetRx+0x20a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   13b8e:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   13b92:	485d      	ldr	r0, [pc, #372]	; (13d08 <SX1276SetRx+0x218>)
   13b94:	f018 f8f1 	bl	2bd7a <TimerSetValue>
}
   13b98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
   13b9c:	485a      	ldr	r0, [pc, #360]	; (13d08 <SX1276SetRx+0x218>)
   13b9e:	f7ff baaf 	b.w	13100 <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
   13ba2:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   13ba6:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   13ba8:	b333      	cbz	r3, 13bf8 <SX1276SetRx+0x108>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   13baa:	f018 f91a 	bl	2bde2 <SX1276Read>
   13bae:	f040 0141 	orr.w	r1, r0, #65	; 0x41
   13bb2:	b2c9      	uxtb	r1, r1
   13bb4:	2033      	movs	r0, #51	; 0x33
   13bb6:	f018 f909 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13bba:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13bbc:	203b      	movs	r0, #59	; 0x3b
   13bbe:	f018 f905 	bl	2bdcc <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   13bc2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   13bc6:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   13bc8:	2b08      	cmp	r3, #8
   13bca:	d87d      	bhi.n	13cc8 <SX1276SetRx+0x1d8>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   13bcc:	f018 f909 	bl	2bde2 <SX1276Read>
   13bd0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   13bd4:	2031      	movs	r0, #49	; 0x31
   13bd6:	f018 f8f9 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
   13bda:	2100      	movs	r1, #0
   13bdc:	2030      	movs	r0, #48	; 0x30
   13bde:	f018 f8f5 	bl	2bdcc <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
   13be2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13be6:	2b08      	cmp	r3, #8
   13be8:	d81c      	bhi.n	13c24 <SX1276SetRx+0x134>
   13bea:	e8df f003 	tbb	[pc, r3]
   13bee:	3610      	.short	0x3610
   13bf0:	5e544a40 	.word	0x5e544a40
   13bf4:	6868      	.short	0x6868
   13bf6:	68          	.byte	0x68
   13bf7:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13bf8:	f018 f8f3 	bl	2bde2 <SX1276Read>
   13bfc:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13c00:	f041 0101 	orr.w	r1, r1, #1
   13c04:	2033      	movs	r0, #51	; 0x33
   13c06:	f018 f8e1 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13c0a:	211d      	movs	r1, #29
   13c0c:	e7d6      	b.n	13bbc <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
   13c0e:	202f      	movs	r0, #47	; 0x2f
   13c10:	2148      	movs	r1, #72	; 0x48
   13c12:	f018 f8db 	bl	2bdcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   13c16:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13c1a:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
   13c1e:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   13c20:	f7ff fba8 	bl	13374 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13c24:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   13c28:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d052      	beq.n	13cd6 <SX1276SetRx+0x1e6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13c30:	211d      	movs	r1, #29
   13c32:	2011      	movs	r0, #17
   13c34:	f018 f8ca 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   13c38:	2040      	movs	r0, #64	; 0x40
   13c3a:	f018 f8d2 	bl	2bde2 <SX1276Read>
   13c3e:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   13c42:	2040      	movs	r0, #64	; 0x40
   13c44:	f018 f8c2 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   13c48:	2100      	movs	r1, #0
   13c4a:	200f      	movs	r0, #15
   13c4c:	f018 f8be 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   13c50:	2100      	movs	r1, #0
   13c52:	200d      	movs	r0, #13
   13c54:	f018 f8ba 	bl	2bdcc <SX1276Write>
        break;
   13c58:	e783      	b.n	13b62 <SX1276SetRx+0x72>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13c5a:	202f      	movs	r0, #47	; 0x2f
   13c5c:	2144      	movs	r1, #68	; 0x44
   13c5e:	f018 f8b5 	bl	2bdcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   13c62:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13c66:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
   13c6a:	3034      	adds	r0, #52	; 0x34
   13c6c:	e7d8      	b.n	13c20 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13c6e:	202f      	movs	r0, #47	; 0x2f
   13c70:	2144      	movs	r1, #68	; 0x44
   13c72:	f018 f8ab 	bl	2bdcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   13c76:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13c7a:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
   13c7e:	3004      	adds	r0, #4
   13c80:	e7ce      	b.n	13c20 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13c82:	202f      	movs	r0, #47	; 0x2f
   13c84:	2144      	movs	r1, #68	; 0x44
   13c86:	f018 f8a1 	bl	2bdcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   13c8a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13c8e:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
   13c92:	305e      	adds	r0, #94	; 0x5e
   13c94:	e7c4      	b.n	13c20 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13c96:	202f      	movs	r0, #47	; 0x2f
   13c98:	2144      	movs	r1, #68	; 0x44
   13c9a:	f018 f897 	bl	2bdcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   13c9e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13ca2:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
   13ca6:	3012      	adds	r0, #18
   13ca8:	e7ba      	b.n	13c20 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13caa:	202f      	movs	r0, #47	; 0x2f
   13cac:	2144      	movs	r1, #68	; 0x44
   13cae:	f018 f88d 	bl	2bdcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   13cb2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13cb6:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
   13cba:	30c6      	adds	r0, #198	; 0xc6
   13cbc:	e7b0      	b.n	13c20 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
   13cbe:	2140      	movs	r1, #64	; 0x40
   13cc0:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   13cc2:	f018 f883 	bl	2bdcc <SX1276Write>
   13cc6:	e7ad      	b.n	13c24 <SX1276SetRx+0x134>
   13cc8:	f018 f88b 	bl	2bde2 <SX1276Read>
   13ccc:	f060 017f 	orn	r1, r0, #127	; 0x7f
   13cd0:	b2c9      	uxtb	r1, r1
   13cd2:	2031      	movs	r0, #49	; 0x31
   13cd4:	e7f5      	b.n	13cc2 <SX1276SetRx+0x1d2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13cd6:	211f      	movs	r1, #31
   13cd8:	2011      	movs	r0, #17
   13cda:	f018 f877 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   13cde:	2040      	movs	r0, #64	; 0x40
   13ce0:	f018 f87f 	bl	2bde2 <SX1276Read>
   13ce4:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   13ce8:	e7ab      	b.n	13c42 <SX1276SetRx+0x152>
        if( rxContinuous == true )
   13cea:	b127      	cbz	r7, 13cf6 <SX1276SetRx+0x206>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   13cec:	2005      	movs	r0, #5
}
   13cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   13cf2:	f018 b881 	b.w	2bdf8 <SX1276SetOpMode>
   13cf6:	2006      	movs	r0, #6
   13cf8:	e7f9      	b.n	13cee <SX1276SetRx+0x1fe>
}
   13cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13cfc:	2002fb20 	.word	0x2002fb20
   13d00:	2002fb08 	.word	0x2002fb08
   13d04:	2002faf0 	.word	0x2002faf0
   13d08:	2002fad8 	.word	0x2002fad8

00013d0c <SX1276ReadRssi>:
{
   13d0c:	b508      	push	{r3, lr}
    switch( modem )
   13d0e:	b120      	cbz	r0, 13d1a <SX1276ReadRssi+0xe>
   13d10:	2801      	cmp	r0, #1
   13d12:	d00a      	beq.n	13d2a <SX1276ReadRssi+0x1e>
   13d14:	f04f 30ff 	mov.w	r0, #4294967295
}
   13d18:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   13d1a:	2011      	movs	r0, #17
   13d1c:	f018 f861 	bl	2bde2 <SX1276Read>
   13d20:	f3c0 0047 	ubfx	r0, r0, #1, #8
   13d24:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   13d26:	b200      	sxth	r0, r0
   13d28:	e7f6      	b.n	13d18 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13d2a:	4b07      	ldr	r3, [pc, #28]	; (13d48 <SX1276ReadRssi+0x3c>)
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   13d2c:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13d2e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   13d32:	4b06      	ldr	r3, [pc, #24]	; (13d4c <SX1276ReadRssi+0x40>)
   13d34:	429a      	cmp	r2, r3
   13d36:	d903      	bls.n	13d40 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   13d38:	f018 f853 	bl	2bde2 <SX1276Read>
   13d3c:	389d      	subs	r0, #157	; 0x9d
   13d3e:	e7f2      	b.n	13d26 <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   13d40:	f018 f84f 	bl	2bde2 <SX1276Read>
   13d44:	38a4      	subs	r0, #164	; 0xa4
   13d46:	e7ee      	b.n	13d26 <SX1276ReadRssi+0x1a>
   13d48:	2002fb20 	.word	0x2002fb20
   13d4c:	1f4add40 	.word	0x1f4add40

00013d50 <SX1276SetModem>:
{
   13d50:	b510      	push	{r4, lr}
   13d52:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   13d54:	2001      	movs	r0, #1
   13d56:	f018 f844 	bl	2bde2 <SX1276Read>
   13d5a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
   13d5e:	42a0      	cmp	r0, r4
   13d60:	4b17      	ldr	r3, [pc, #92]	; (13dc0 <SX1276SetModem+0x70>)
   13d62:	d102      	bne.n	13d6a <SX1276SetModem+0x1a>
   13d64:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
   13d68:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
   13d6a:	2c01      	cmp	r4, #1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13d6c:	f04f 0000 	mov.w	r0, #0
    SX1276.Settings.Modem = modem;
   13d70:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
   13d74:	d013      	beq.n	13d9e <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13d76:	f018 f83f 	bl	2bdf8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   13d7a:	2001      	movs	r0, #1
   13d7c:	f018 f831 	bl	2bde2 <SX1276Read>
   13d80:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   13d84:	2001      	movs	r0, #1
   13d86:	f018 f821 	bl	2bdcc <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   13d8a:	2100      	movs	r1, #0
   13d8c:	2040      	movs	r0, #64	; 0x40
   13d8e:	f018 f81d 	bl	2bdcc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   13d92:	2130      	movs	r1, #48	; 0x30
}
   13d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   13d98:	2041      	movs	r0, #65	; 0x41
   13d9a:	f018 b817 	b.w	2bdcc <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13d9e:	f018 f82b 	bl	2bdf8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   13da2:	4620      	mov	r0, r4
   13da4:	f018 f81d 	bl	2bde2 <SX1276Read>
   13da8:	f060 017f 	orn	r1, r0, #127	; 0x7f
   13dac:	b2c9      	uxtb	r1, r1
   13dae:	4620      	mov	r0, r4
   13db0:	f018 f80c 	bl	2bdcc <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   13db4:	2100      	movs	r1, #0
   13db6:	2040      	movs	r0, #64	; 0x40
   13db8:	f018 f808 	bl	2bdcc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   13dbc:	2100      	movs	r1, #0
   13dbe:	e7e9      	b.n	13d94 <SX1276SetModem+0x44>
   13dc0:	2002fb20 	.word	0x2002fb20

00013dc4 <SX1276Init>:
{
   13dc4:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
   13dc6:	4b17      	ldr	r3, [pc, #92]	; (13e24 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   13dc8:	4917      	ldr	r1, [pc, #92]	; (13e28 <SX1276Init+0x64>)
    RadioEvents = events;
   13dca:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   13dcc:	4817      	ldr	r0, [pc, #92]	; (13e2c <SX1276Init+0x68>)
   13dce:	f017 ffcc 	bl	2bd6a <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   13dd2:	4915      	ldr	r1, [pc, #84]	; (13e28 <SX1276Init+0x64>)
   13dd4:	4816      	ldr	r0, [pc, #88]	; (13e30 <SX1276Init+0x6c>)
   13dd6:	f017 ffc8 	bl	2bd6a <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   13dda:	4913      	ldr	r1, [pc, #76]	; (13e28 <SX1276Init+0x64>)
   13ddc:	4815      	ldr	r0, [pc, #84]	; (13e34 <SX1276Init+0x70>)
   13dde:	f017 ffc4 	bl	2bd6a <TimerInit>
    SX1276Reset( );
   13de2:	f017 fea8 	bl	2bb36 <SX1276Reset>
    RxChainCalibration( );
   13de6:	f7ff fd37 	bl	13858 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   13dea:	2000      	movs	r0, #0
   13dec:	f018 f804 	bl	2bdf8 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
   13df0:	4811      	ldr	r0, [pc, #68]	; (13e38 <SX1276Init+0x74>)
   13df2:	f7fe ff73 	bl	12cdc <SX1276IoIrqInit>
   13df6:	2500      	movs	r5, #0
   13df8:	4c10      	ldr	r4, [pc, #64]	; (13e3c <SX1276Init+0x78>)
        SX1276SetModem( RadioRegsInit[i].Modem );
   13dfa:	7820      	ldrb	r0, [r4, #0]
   13dfc:	f7ff ffa8 	bl	13d50 <SX1276SetModem>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   13e00:	3501      	adds	r5, #1
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   13e02:	78a1      	ldrb	r1, [r4, #2]
   13e04:	7860      	ldrb	r0, [r4, #1]
   13e06:	f017 ffe1 	bl	2bdcc <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   13e0a:	2d10      	cmp	r5, #16
   13e0c:	f104 0403 	add.w	r4, r4, #3
   13e10:	d1f3      	bne.n	13dfa <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
   13e12:	2000      	movs	r0, #0
   13e14:	f7ff ff9c 	bl	13d50 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
   13e18:	2200      	movs	r2, #0
   13e1a:	4b09      	ldr	r3, [pc, #36]	; (13e40 <SX1276Init+0x7c>)
   13e1c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   13e20:	bd38      	pop	{r3, r4, r5, pc}
   13e22:	bf00      	nop
   13e24:	2002fc64 	.word	0x2002fc64
   13e28:	00014405 	.word	0x00014405
   13e2c:	2002fb08 	.word	0x2002fb08
   13e30:	2002faf0 	.word	0x2002faf0
   13e34:	2002fad8 	.word	0x2002fad8
   13e38:	20008508 	.word	0x20008508
   13e3c:	000362aa 	.word	0x000362aa
   13e40:	2002fb20 	.word	0x2002fb20

00013e44 <SX1276SetRxConfig>:
{
   13e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e48:	4605      	mov	r5, r0
   13e4a:	b087      	sub	sp, #28
   13e4c:	9300      	str	r3, [sp, #0]
   13e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13e50:	460c      	mov	r4, r1
   13e52:	9301      	str	r3, [sp, #4]
   13e54:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   13e58:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   13e5c:	9302      	str	r3, [sp, #8]
   13e5e:	4616      	mov	r6, r2
   13e60:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   13e64:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   13e68:	9303      	str	r3, [sp, #12]
   13e6a:	9204      	str	r2, [sp, #16]
   13e6c:	9105      	str	r1, [sp, #20]
   13e6e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
   13e72:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
   13e76:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   13e7a:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   13e7e:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    SX1276SetModem( modem );
   13e82:	f7ff ff65 	bl	13d50 <SX1276SetModem>
    SX1276SetStby( );
   13e86:	f7ff fd4f 	bl	13928 <SX1276SetStby>
    switch( modem )
   13e8a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
   13e8e:	b12d      	cbz	r5, 13e9c <SX1276SetRxConfig+0x58>
   13e90:	2d01      	cmp	r5, #1
   13e92:	9905      	ldr	r1, [sp, #20]
   13e94:	d06b      	beq.n	13f6e <SX1276SetRxConfig+0x12a>
}
   13e96:	b007      	add	sp, #28
   13e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   13e9c:	498f      	ldr	r1, [pc, #572]	; (140dc <SX1276SetRxConfig+0x298>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   13e9e:	9801      	ldr	r0, [sp, #4]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
   13ea0:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
   13ea4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   13ea8:	fb03 f30b 	mul.w	r3, r3, fp
   13eac:	fbb3 f3f6 	udiv	r3, r3, r6
   13eb0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   13eb4:	4b8a      	ldr	r3, [pc, #552]	; (140e0 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.Datarate = datarate;
   13eb6:	f8c1 60f8 	str.w	r6, [r1, #248]	; 0xf8
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   13eba:	fbb3 f6f6 	udiv	r6, r3, r6
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   13ebe:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   13ec2:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   13ec6:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   13eca:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.FixLen = fixLen;
   13ecc:	f881 80fe 	strb.w	r8, [r1, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
   13ed0:	f881 90ff 	strb.w	r9, [r1, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
   13ed4:	f881 a100 	strb.w	sl, [r1, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   13ed8:	f8a1 70fc 	strh.w	r7, [r1, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   13edc:	f3c6 2107 	ubfx	r1, r6, #8, #8
   13ee0:	f017 ff74 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
   13ee4:	b2f1      	uxtb	r1, r6
   13ee6:	2003      	movs	r0, #3
   13ee8:	f017 ff70 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
   13eec:	4620      	mov	r0, r4
   13eee:	f7ff f9a7 	bl	13240 <GetFskBandwidthRegValue>
   13ef2:	4601      	mov	r1, r0
   13ef4:	2012      	movs	r0, #18
   13ef6:	f017 ff69 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
   13efa:	9801      	ldr	r0, [sp, #4]
   13efc:	f7ff f9a0 	bl	13240 <GetFskBandwidthRegValue>
   13f00:	4601      	mov	r1, r0
   13f02:	2013      	movs	r0, #19
   13f04:	f017 ff62 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   13f08:	2025      	movs	r0, #37	; 0x25
   13f0a:	0a39      	lsrs	r1, r7, #8
   13f0c:	f017 ff5e 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   13f10:	2026      	movs	r0, #38	; 0x26
   13f12:	b2f9      	uxtb	r1, r7
   13f14:	f017 ff5a 	bl	2bdcc <SX1276Write>
            if( fixLen == 1 )
   13f18:	f1b8 0f00 	cmp.w	r8, #0
   13f1c:	d01b      	beq.n	13f56 <SX1276SetRxConfig+0x112>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
   13f1e:	4649      	mov	r1, r9
   13f20:	2032      	movs	r0, #50	; 0x32
   13f22:	f017 ff53 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   13f26:	2030      	movs	r0, #48	; 0x30
   13f28:	f017 ff5b 	bl	2bde2 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
   13f2c:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   13f30:	4305      	orrs	r5, r0
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
   13f32:	ea45 110a 	orr.w	r1, r5, sl, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
   13f36:	b2c9      	uxtb	r1, r1
   13f38:	2030      	movs	r0, #48	; 0x30
   13f3a:	f017 ff47 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   13f3e:	2031      	movs	r0, #49	; 0x31
   13f40:	f017 ff4f 	bl	2bde2 <SX1276Read>
   13f44:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   13f48:	2031      	movs	r0, #49	; 0x31
   13f4a:	b2c9      	uxtb	r1, r1
}
   13f4c:	b007      	add	sp, #28
   13f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   13f52:	f017 bf3b 	b.w	2bdcc <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
   13f56:	21ff      	movs	r1, #255	; 0xff
   13f58:	2032      	movs	r0, #50	; 0x32
   13f5a:	f017 ff37 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   13f5e:	2030      	movs	r0, #48	; 0x30
   13f60:	f017 ff3f 	bl	2bde2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   13f64:	f06f 057f 	mvn.w	r5, #127	; 0x7f
                           RF_PACKETCONFIG1_CRC_MASK &
   13f68:	f000 006f 	and.w	r0, r0, #111	; 0x6f
   13f6c:	e7e0      	b.n	13f30 <SX1276SetRxConfig+0xec>
            if( bandwidth > 2 )
   13f6e:	2c02      	cmp	r4, #2
   13f70:	d900      	bls.n	13f74 <SX1276SetRxConfig+0x130>
                while( 1 );
   13f72:	e7fe      	b.n	13f72 <SX1276SetRxConfig+0x12e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   13f74:	4d59      	ldr	r5, [pc, #356]	; (140dc <SX1276SetRxConfig+0x298>)
            else if( datarate < 6 )
   13f76:	2e06      	cmp	r6, #6
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
   13f78:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
            else if( datarate < 6 )
   13f7c:	4633      	mov	r3, r6
   13f7e:	bf38      	it	cc
   13f80:	2306      	movcc	r3, #6
            bandwidth += 7;
   13f82:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   13f84:	2b0c      	cmp	r3, #12
            SX1276.Settings.LoRa.Coderate = coderate;
   13f86:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   13f88:	f885 112f 	strb.w	r1, [r5, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   13f8c:	9902      	ldr	r1, [sp, #8]
   13f8e:	bf28      	it	cs
   13f90:	230c      	movcs	r3, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13f92:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
   13f94:	e9c5 4648 	strd	r4, r6, [r5, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
   13f98:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   13f9c:	f8a5 712a 	strh.w	r7, [r5, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
   13fa0:	f885 812c 	strb.w	r8, [r5, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
   13fa4:	f885 912d 	strb.w	r9, [r5, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
   13fa8:	f885 a12e 	strb.w	sl, [r5, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   13fac:	f885 1130 	strb.w	r1, [r5, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   13fb0:	f885 2131 	strb.w	r2, [r5, #305]	; 0x131
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13fb4:	d177      	bne.n	140a6 <SX1276SetRxConfig+0x262>
   13fb6:	f1a3 020b 	sub.w	r2, r3, #11
   13fba:	2a01      	cmp	r2, #1
   13fbc:	bf8c      	ite	hi
   13fbe:	2200      	movhi	r2, #0
   13fc0:	2201      	movls	r2, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   13fc2:	201d      	movs	r0, #29
   13fc4:	f885 2128 	strb.w	r2, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG1,
   13fc8:	9301      	str	r3, [sp, #4]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   13fca:	f017 ff0a 	bl	2bde2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13fce:	9b00      	ldr	r3, [sp, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
   13fd0:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13fd2:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
   13fd6:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
   13fda:	b2c9      	uxtb	r1, r1
   13fdc:	f017 fef6 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   13fe0:	201e      	movs	r0, #30
   13fe2:	f017 fefe 	bl	2bde2 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG2,
   13fe6:	9b01      	ldr	r3, [sp, #4]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
   13fe8:	f3cb 2101 	ubfx	r1, fp, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
   13fec:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
   13ff0:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
   13ff4:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
   13ff8:	4301      	orrs	r1, r0
   13ffa:	b2c9      	uxtb	r1, r1
   13ffc:	201e      	movs	r0, #30
   13ffe:	f017 fee5 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   14002:	2026      	movs	r0, #38	; 0x26
   14004:	f017 feed 	bl	2bde2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   14008:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
   1400c:	f020 0108 	bic.w	r1, r0, #8
   14010:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
   14014:	2026      	movs	r0, #38	; 0x26
   14016:	b2c9      	uxtb	r1, r1
   14018:	f017 fed8 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
   1401c:	201f      	movs	r0, #31
   1401e:	fa5f f18b 	uxtb.w	r1, fp
   14022:	f017 fed3 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   14026:	2020      	movs	r0, #32
   14028:	0a39      	lsrs	r1, r7, #8
   1402a:	f017 fecf 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   1402e:	2021      	movs	r0, #33	; 0x21
   14030:	b2f9      	uxtb	r1, r7
   14032:	f017 fecb 	bl	2bdcc <SX1276Write>
            if( fixLen == 1 )
   14036:	f1b8 0f00 	cmp.w	r8, #0
   1403a:	d003      	beq.n	14044 <SX1276SetRxConfig+0x200>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
   1403c:	4649      	mov	r1, r9
   1403e:	2022      	movs	r0, #34	; 0x22
   14040:	f017 fec4 	bl	2bdcc <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   14044:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
   14048:	b16b      	cbz	r3, 14066 <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   1404a:	2044      	movs	r0, #68	; 0x44
   1404c:	f017 fec9 	bl	2bde2 <SX1276Read>
   14050:	f060 017f 	orn	r1, r0, #127	; 0x7f
   14054:	b2c9      	uxtb	r1, r1
   14056:	2044      	movs	r0, #68	; 0x44
   14058:	f017 feb8 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   1405c:	2024      	movs	r0, #36	; 0x24
   1405e:	f895 1130 	ldrb.w	r1, [r5, #304]	; 0x130
   14062:	f017 feb3 	bl	2bdcc <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   14066:	2c09      	cmp	r4, #9
   14068:	d12a      	bne.n	140c0 <SX1276SetRxConfig+0x27c>
   1406a:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
   1406e:	4b1d      	ldr	r3, [pc, #116]	; (140e4 <SX1276SetRxConfig+0x2a0>)
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   14070:	2102      	movs	r1, #2
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   14072:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   14074:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   14078:	d91e      	bls.n	140b8 <SX1276SetRxConfig+0x274>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   1407a:	f017 fea7 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
   1407e:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
   14080:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
   14082:	f017 fea3 	bl	2bdcc <SX1276Write>
            if( datarate == 6 )
   14086:	2e06      	cmp	r6, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   14088:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
   1408c:	d81b      	bhi.n	140c6 <SX1276SetRxConfig+0x282>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   1408e:	f017 fea8 	bl	2bde2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   14092:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   14096:	f041 0105 	orr.w	r1, r1, #5
   1409a:	2031      	movs	r0, #49	; 0x31
   1409c:	f017 fe96 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   140a0:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   140a2:	2037      	movs	r0, #55	; 0x37
   140a4:	e752      	b.n	13f4c <SX1276SetRxConfig+0x108>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   140a6:	2c08      	cmp	r4, #8
   140a8:	d104      	bne.n	140b4 <SX1276SetRxConfig+0x270>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   140aa:	2e0b      	cmp	r6, #11
   140ac:	bf94      	ite	ls
   140ae:	2200      	movls	r2, #0
   140b0:	2201      	movhi	r2, #1
   140b2:	e786      	b.n	13fc2 <SX1276SetRxConfig+0x17e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   140b4:	2200      	movs	r2, #0
   140b6:	e784      	b.n	13fc2 <SX1276SetRxConfig+0x17e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   140b8:	f017 fe88 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
   140bc:	217f      	movs	r1, #127	; 0x7f
   140be:	e7df      	b.n	14080 <SX1276SetRxConfig+0x23c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
   140c0:	2103      	movs	r1, #3
   140c2:	2036      	movs	r0, #54	; 0x36
   140c4:	e7dd      	b.n	14082 <SX1276SetRxConfig+0x23e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   140c6:	f017 fe8c 	bl	2bde2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   140ca:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   140ce:	f041 0103 	orr.w	r1, r1, #3
   140d2:	2031      	movs	r0, #49	; 0x31
   140d4:	f017 fe7a 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   140d8:	210a      	movs	r1, #10
   140da:	e7e2      	b.n	140a2 <SX1276SetRxConfig+0x25e>
   140dc:	2002fb20 	.word	0x2002fb20
   140e0:	01e84800 	.word	0x01e84800
   140e4:	1f4add40 	.word	0x1f4add40

000140e8 <SX1276SetTxConfig>:
{
   140e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ec:	468a      	mov	sl, r1
   140ee:	b087      	sub	sp, #28
   140f0:	461e      	mov	r6, r3
   140f2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   140f6:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   140fa:	9305      	str	r3, [sp, #20]
   140fc:	4617      	mov	r7, r2
   140fe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   14102:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14104:	9302      	str	r3, [sp, #8]
   14106:	9104      	str	r1, [sp, #16]
   14108:	9203      	str	r2, [sp, #12]
   1410a:	9001      	str	r0, [sp, #4]
   1410c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   14110:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   14114:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
   14118:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
   1411c:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
   14120:	f7ff fe16 	bl	13d50 <SX1276SetModem>
    SX1276SetStby( );
   14124:	f7ff fc00 	bl	13928 <SX1276SetStby>
    SX1276SetRfTxPower( power );
   14128:	4650      	mov	r0, sl
   1412a:	f7fe ff37 	bl	12f9c <SX1276SetRfTxPower>
    switch( modem )
   1412e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
   14132:	9b01      	ldr	r3, [sp, #4]
   14134:	b12b      	cbz	r3, 14142 <SX1276SetTxConfig+0x5a>
   14136:	2b01      	cmp	r3, #1
   14138:	9b05      	ldr	r3, [sp, #20]
   1413a:	d05b      	beq.n	141f4 <SX1276SetTxConfig+0x10c>
}
   1413c:	b007      	add	sp, #28
   1413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
   14142:	4b76      	ldr	r3, [pc, #472]	; (1431c <SX1276SetTxConfig+0x234>)
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
   14144:	2004      	movs	r0, #4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   14146:	e9c3 763b 	strd	r7, r6, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.FixLen = fixLen;
   1414a:	f883 50fe 	strb.w	r5, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
   1414e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   14152:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
   14156:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
   1415a:	f883 a0e8 	strb.w	sl, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
   1415e:	f8c3 80f8 	str.w	r8, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   14162:	f8a3 90fc 	strh.w	r9, [r3, #252]	; 0xfc
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   14166:	f643 5309 	movw	r3, #15625	; 0x3d09
   1416a:	fbb7 f2f3 	udiv	r2, r7, r3
   1416e:	f641 6684 	movw	r6, #7812	; 0x1e84
   14172:	fb03 7712 	mls	r7, r3, r2, r7
   14176:	eb06 2607 	add.w	r6, r6, r7, lsl #8
   1417a:	fbb6 f6f3 	udiv	r6, r6, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
   1417e:	eb06 2602 	add.w	r6, r6, r2, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
   14182:	f3c6 2107 	ubfx	r1, r6, #8, #8
   14186:	f017 fe21 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
   1418a:	b2f1      	uxtb	r1, r6
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   1418c:	4e64      	ldr	r6, [pc, #400]	; (14320 <SX1276SetTxConfig+0x238>)
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
   1418e:	2005      	movs	r0, #5
   14190:	f017 fe1c 	bl	2bdcc <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   14194:	fbb6 f6f8 	udiv	r6, r6, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   14198:	2002      	movs	r0, #2
   1419a:	f3c6 2107 	ubfx	r1, r6, #8, #8
   1419e:	f017 fe15 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
   141a2:	2003      	movs	r0, #3
   141a4:	b2f1      	uxtb	r1, r6
   141a6:	f017 fe11 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   141aa:	2025      	movs	r0, #37	; 0x25
   141ac:	ea4f 2119 	mov.w	r1, r9, lsr #8
   141b0:	f017 fe0c 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
   141b4:	fa5f f189 	uxtb.w	r1, r9
   141b8:	2026      	movs	r0, #38	; 0x26
   141ba:	f017 fe07 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   141be:	2030      	movs	r0, #48	; 0x30
   141c0:	f017 fe0f 	bl	2bde2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   141c4:	f085 0501 	eor.w	r5, r5, #1
                           ( crcOn << 4 ) );
   141c8:	0124      	lsls	r4, r4, #4
            SX1276Write( REG_PACKETCONFIG1,
   141ca:	f000 006f 	and.w	r0, r0, #111	; 0x6f
   141ce:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
   141d2:	4304      	orrs	r4, r0
   141d4:	b2e1      	uxtb	r1, r4
   141d6:	2030      	movs	r0, #48	; 0x30
   141d8:	f017 fdf8 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   141dc:	2031      	movs	r0, #49	; 0x31
   141de:	f017 fe00 	bl	2bde2 <SX1276Read>
   141e2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   141e6:	2031      	movs	r0, #49	; 0x31
   141e8:	b2c9      	uxtb	r1, r1
}
   141ea:	b007      	add	sp, #28
   141ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   141f0:	f017 bdec 	b.w	2bdcc <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
   141f4:	4f49      	ldr	r7, [pc, #292]	; (1431c <SX1276SetTxConfig+0x234>)
            if( bandwidth > 2 )
   141f6:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
   141f8:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
   141fc:	d900      	bls.n	14200 <SX1276SetTxConfig+0x118>
                while( 1 );
   141fe:	e7fe      	b.n	141fe <SX1276SetTxConfig+0x116>
            else if( datarate < 6 )
   14200:	f1b8 0f06 	cmp.w	r8, #6
   14204:	46c2      	mov	sl, r8
   14206:	bf38      	it	cc
   14208:	f04f 0a06 	movcc.w	sl, #6
            bandwidth += 7;
   1420c:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   1420e:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   14212:	9802      	ldr	r0, [sp, #8]
   14214:	bf28      	it	cs
   14216:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   1421a:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.Datarate = datarate;
   1421c:	e9c7 6848 	strd	r6, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
   14220:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   14224:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
   14228:	f887 512c 	strb.w	r5, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   1422c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   14230:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
   14234:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   14238:	f887 1131 	strb.w	r1, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
   1423c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   14240:	d156      	bne.n	142f0 <SX1276SetTxConfig+0x208>
   14242:	f1aa 020b 	sub.w	r2, sl, #11
   14246:	2a01      	cmp	r2, #1
   14248:	bf8c      	ite	hi
   1424a:	2200      	movhi	r2, #0
   1424c:	2201      	movls	r2, #1
   1424e:	f887 2128 	strb.w	r2, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   14252:	b16b      	cbz	r3, 14270 <SX1276SetTxConfig+0x188>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   14254:	2044      	movs	r0, #68	; 0x44
   14256:	f017 fdc4 	bl	2bde2 <SX1276Read>
   1425a:	f060 017f 	orn	r1, r0, #127	; 0x7f
   1425e:	b2c9      	uxtb	r1, r1
   14260:	2044      	movs	r0, #68	; 0x44
   14262:	f017 fdb3 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   14266:	2024      	movs	r0, #36	; 0x24
   14268:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
   1426c:	f017 fdae 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   14270:	201d      	movs	r0, #29
   14272:	f017 fdb6 	bl	2bde2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   14276:	ea45 014b 	orr.w	r1, r5, fp, lsl #1
   1427a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
   1427e:	b2c9      	uxtb	r1, r1
   14280:	201d      	movs	r0, #29
   14282:	f017 fda3 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   14286:	201e      	movs	r0, #30
   14288:	f017 fdab 	bl	2bde2 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
   1428c:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
   1428e:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
   14292:	ea44 140a 	orr.w	r4, r4, sl, lsl #4
   14296:	4304      	orrs	r4, r0
   14298:	b2e1      	uxtb	r1, r4
   1429a:	201e      	movs	r0, #30
   1429c:	f017 fd96 	bl	2bdcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   142a0:	2026      	movs	r0, #38	; 0x26
   142a2:	f017 fd9e 	bl	2bde2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   142a6:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
   142aa:	f020 0108 	bic.w	r1, r0, #8
   142ae:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
   142b2:	2026      	movs	r0, #38	; 0x26
   142b4:	b2c9      	uxtb	r1, r1
   142b6:	f017 fd89 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   142ba:	2020      	movs	r0, #32
   142bc:	ea4f 2119 	mov.w	r1, r9, lsr #8
   142c0:	f017 fd84 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
   142c4:	2021      	movs	r0, #33	; 0x21
   142c6:	fa5f f189 	uxtb.w	r1, r9
   142ca:	f017 fd7f 	bl	2bdcc <SX1276Write>
            if( datarate == 6 )
   142ce:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   142d2:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
   142d6:	d815      	bhi.n	14304 <SX1276SetTxConfig+0x21c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   142d8:	f017 fd83 	bl	2bde2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   142dc:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   142e0:	f041 0105 	orr.w	r1, r1, #5
   142e4:	2031      	movs	r0, #49	; 0x31
   142e6:	f017 fd71 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   142ea:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   142ec:	2037      	movs	r0, #55	; 0x37
   142ee:	e77c      	b.n	141ea <SX1276SetTxConfig+0x102>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   142f0:	2e08      	cmp	r6, #8
   142f2:	d105      	bne.n	14300 <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   142f4:	f1b8 0f0b 	cmp.w	r8, #11
   142f8:	bf94      	ite	ls
   142fa:	2200      	movls	r2, #0
   142fc:	2201      	movhi	r2, #1
   142fe:	e7a6      	b.n	1424e <SX1276SetTxConfig+0x166>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   14300:	2200      	movs	r2, #0
   14302:	e7a4      	b.n	1424e <SX1276SetTxConfig+0x166>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   14304:	f017 fd6d 	bl	2bde2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   14308:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   1430c:	f041 0103 	orr.w	r1, r1, #3
   14310:	2031      	movs	r0, #49	; 0x31
   14312:	f017 fd5b 	bl	2bdcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   14316:	210a      	movs	r1, #10
   14318:	e7e8      	b.n	142ec <SX1276SetTxConfig+0x204>
   1431a:	bf00      	nop
   1431c:	2002fb20 	.word	0x2002fb20
   14320:	01e84800 	.word	0x01e84800

00014324 <SX1276SetTxContinuousWave>:
    uint32_t timeout = ( uint32_t )time * 1000;
   14324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   14328:	b530      	push	{r4, r5, lr}
   1432a:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
   1432c:	fb03 f402 	mul.w	r4, r3, r2
{
   14330:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
   14332:	f7ff f81f 	bl	13374 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   14336:	2300      	movs	r3, #0
   14338:	2205      	movs	r2, #5
   1433a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1433e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   14342:	4618      	mov	r0, r3
   14344:	e9cd 3306 	strd	r3, r3, [sp, #24]
   14348:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1434c:	9303      	str	r3, [sp, #12]
   1434e:	4629      	mov	r1, r5
   14350:	9200      	str	r2, [sp, #0]
   14352:	9408      	str	r4, [sp, #32]
   14354:	461a      	mov	r2, r3
   14356:	f7ff fec7 	bl	140e8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   1435a:	2031      	movs	r0, #49	; 0x31
   1435c:	f017 fd41 	bl	2bde2 <SX1276Read>
   14360:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   14364:	2031      	movs	r0, #49	; 0x31
   14366:	f017 fd31 	bl	2bdcc <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1436a:	4d0d      	ldr	r5, [pc, #52]	; (143a0 <SX1276SetTxContinuousWave+0x7c>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   1436c:	21f0      	movs	r1, #240	; 0xf0
   1436e:	2040      	movs	r0, #64	; 0x40
   14370:	f017 fd2c 	bl	2bdcc <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   14374:	21a0      	movs	r1, #160	; 0xa0
   14376:	2041      	movs	r0, #65	; 0x41
   14378:	f017 fd28 	bl	2bdcc <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1437c:	4621      	mov	r1, r4
   1437e:	4628      	mov	r0, r5
   14380:	f017 fcfb 	bl	2bd7a <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
   14384:	2202      	movs	r2, #2
   14386:	4b07      	ldr	r3, [pc, #28]	; (143a4 <SX1276SetTxContinuousWave+0x80>)
    TimerStart( &TxTimeoutTimer );
   14388:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
   1438a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1438e:	f7fe feb7 	bl	13100 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   14392:	2003      	movs	r0, #3
}
   14394:	b00b      	add	sp, #44	; 0x2c
   14396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1439a:	f017 bd2d 	b.w	2bdf8 <SX1276SetOpMode>
   1439e:	bf00      	nop
   143a0:	2002fb08 	.word	0x2002fb08
   143a4:	2002fb20 	.word	0x2002fb20

000143a8 <SX1276SetMaxPayloadLength>:
{
   143a8:	b538      	push	{r3, r4, r5, lr}
   143aa:	4605      	mov	r5, r0
   143ac:	460c      	mov	r4, r1
    SX1276SetModem( modem );
   143ae:	f7ff fccf 	bl	13d50 <SX1276SetModem>
    switch( modem )
   143b2:	b115      	cbz	r5, 143ba <SX1276SetMaxPayloadLength+0x12>
   143b4:	2d01      	cmp	r5, #1
   143b6:	d00b      	beq.n	143d0 <SX1276SetMaxPayloadLength+0x28>
}
   143b8:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
   143ba:	4b07      	ldr	r3, [pc, #28]	; (143d8 <SX1276SetMaxPayloadLength+0x30>)
   143bc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   143c0:	2b00      	cmp	r3, #0
   143c2:	d1f9      	bne.n	143b8 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
   143c4:	4621      	mov	r1, r4
   143c6:	2032      	movs	r0, #50	; 0x32
}
   143c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   143cc:	f017 bcfe 	b.w	2bdcc <SX1276Write>
   143d0:	4621      	mov	r1, r4
   143d2:	2023      	movs	r0, #35	; 0x23
   143d4:	e7f8      	b.n	143c8 <SX1276SetMaxPayloadLength+0x20>
   143d6:	bf00      	nop
   143d8:	2002fb20 	.word	0x2002fb20

000143dc <SX1276SetPublicNetwork>:
{
   143dc:	b510      	push	{r4, lr}
   143de:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
   143e0:	2001      	movs	r0, #1
   143e2:	f7ff fcb5 	bl	13d50 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
   143e6:	4b06      	ldr	r3, [pc, #24]	; (14400 <SX1276SetPublicNetwork+0x24>)
   143e8:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
   143ec:	b12c      	cbz	r4, 143fa <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   143ee:	2134      	movs	r1, #52	; 0x34
}
   143f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   143f4:	2039      	movs	r0, #57	; 0x39
   143f6:	f017 bce9 	b.w	2bdcc <SX1276Write>
   143fa:	2112      	movs	r1, #18
   143fc:	e7f8      	b.n	143f0 <SX1276SetPublicNetwork+0x14>
   143fe:	bf00      	nop
   14400:	2002fb20 	.word	0x2002fb20

00014404 <SX1276OnTimeoutIrq>:
{
   14404:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   14406:	4c2d      	ldr	r4, [pc, #180]	; (144bc <SX1276OnTimeoutIrq+0xb8>)
   14408:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1440c:	2b01      	cmp	r3, #1
   1440e:	d002      	beq.n	14416 <SX1276OnTimeoutIrq+0x12>
   14410:	2b02      	cmp	r3, #2
   14412:	d02d      	beq.n	14470 <SX1276OnTimeoutIrq+0x6c>
}
   14414:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
   14416:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1441a:	b9cb      	cbnz	r3, 14450 <SX1276OnTimeoutIrq+0x4c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1441c:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   14420:	210b      	movs	r1, #11
   14422:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   14424:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   14428:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1442c:	f017 fcce 	bl	2bdcc <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   14430:	2110      	movs	r1, #16
   14432:	203f      	movs	r0, #63	; 0x3f
   14434:	f017 fcca 	bl	2bdcc <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
   14438:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1443c:	b193      	cbz	r3, 14464 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1443e:	200d      	movs	r0, #13
   14440:	f017 fccf 	bl	2bde2 <SX1276Read>
   14444:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   14448:	b2c9      	uxtb	r1, r1
   1444a:	200d      	movs	r0, #13
   1444c:	f017 fcbe 	bl	2bdcc <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   14450:	4b1b      	ldr	r3, [pc, #108]	; (144c0 <SX1276OnTimeoutIrq+0xbc>)
   14452:	681b      	ldr	r3, [r3, #0]
   14454:	2b00      	cmp	r3, #0
   14456:	d0dd      	beq.n	14414 <SX1276OnTimeoutIrq+0x10>
   14458:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1445a:	2b00      	cmp	r3, #0
   1445c:	d0da      	beq.n	14414 <SX1276OnTimeoutIrq+0x10>
}
   1445e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
   14462:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   14464:	4817      	ldr	r0, [pc, #92]	; (144c4 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
   14466:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
   1446a:	f7fe febf 	bl	131ec <TimerStop>
   1446e:	e7ef      	b.n	14450 <SX1276OnTimeoutIrq+0x4c>
        SX1276Reset( );
   14470:	f017 fb61 	bl	2bb36 <SX1276Reset>
        RxChainCalibration( );
   14474:	f7ff f9f0 	bl	13858 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   14478:	2000      	movs	r0, #0
   1447a:	f017 fcbd 	bl	2bdf8 <SX1276SetOpMode>
   1447e:	2600      	movs	r6, #0
   14480:	4d11      	ldr	r5, [pc, #68]	; (144c8 <SX1276OnTimeoutIrq+0xc4>)
            SX1276SetModem( RadioRegsInit[i].Modem );
   14482:	7828      	ldrb	r0, [r5, #0]
   14484:	f7ff fc64 	bl	13d50 <SX1276SetModem>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   14488:	3601      	adds	r6, #1
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1448a:	78a9      	ldrb	r1, [r5, #2]
   1448c:	7868      	ldrb	r0, [r5, #1]
   1448e:	f017 fc9d 	bl	2bdcc <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   14492:	2e10      	cmp	r6, #16
   14494:	f105 0503 	add.w	r5, r5, #3
   14498:	d1f3      	bne.n	14482 <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
   1449a:	2000      	movs	r0, #0
   1449c:	f7ff fc58 	bl	13d50 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   144a0:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
   144a4:	f7ff ff9a 	bl	143dc <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
   144a8:	2300      	movs	r3, #0
   144aa:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   144ae:	4b04      	ldr	r3, [pc, #16]	; (144c0 <SX1276OnTimeoutIrq+0xbc>)
   144b0:	681b      	ldr	r3, [r3, #0]
   144b2:	2b00      	cmp	r3, #0
   144b4:	d0ae      	beq.n	14414 <SX1276OnTimeoutIrq+0x10>
   144b6:	685b      	ldr	r3, [r3, #4]
   144b8:	e7cf      	b.n	1445a <SX1276OnTimeoutIrq+0x56>
   144ba:	bf00      	nop
   144bc:	2002fb20 	.word	0x2002fb20
   144c0:	2002fc64 	.word	0x2002fc64
   144c4:	2002fad8 	.word	0x2002fad8
   144c8:	000362aa 	.word	0x000362aa

000144cc <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
   144cc:	f1a1 0310 	sub.w	r3, r1, #16
   144d0:	b2db      	uxtb	r3, r3
   144d2:	2b10      	cmp	r3, #16
{
   144d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   144d8:	4604      	mov	r4, r0
    switch( keylen )
   144da:	d804      	bhi.n	144e6 <aes_set_key+0x1a>
   144dc:	483c      	ldr	r0, [pc, #240]	; (145d0 <aes_set_key+0x104>)
   144de:	fa20 f303 	lsr.w	r3, r0, r3
   144e2:	07db      	lsls	r3, r3, #31
   144e4:	d405      	bmi.n	144f2 <aes_set_key+0x26>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
   144e6:	2300      	movs	r3, #0
        return ( uint8_t )-1;
   144e8:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
   144ea:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
   144ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch( keylen )
   144f2:	4625      	mov	r5, r4
   144f4:	1e56      	subs	r6, r2, #1
        *d++ = *s++;
   144f6:	f815 3b01 	ldrb.w	r3, [r5], #1
   144fa:	f806 3f01 	strb.w	r3, [r6, #1]!
    while( nn-- )
   144fe:	1b63      	subs	r3, r4, r5
   14500:	440b      	add	r3, r1
   14502:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
   14506:	d1f6      	bne.n	144f6 <aes_set_key+0x2a>
    ctx->rnd = (hi >> 4) - 1;
   14508:	4688      	mov	r8, r1
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1450a:	f04f 0e01 	mov.w	lr, #1
    hi = (keylen + 28) << 2;
   1450e:	f101 031c 	add.w	r3, r1, #28
   14512:	009b      	lsls	r3, r3, #2
   14514:	fa5f fc83 	uxtb.w	ip, r3
    ctx->rnd = (hi >> 4) - 1;
   14518:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1451c:	3b01      	subs	r3, #1
            t0 = s_box(t1) ^ rc;
   1451e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 145d4 <aes_set_key+0x108>
    ctx->rnd = (hi >> 4) - 1;
   14522:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   14526:	1853      	adds	r3, r2, r1
        if( cc % keylen == 0 )
   14528:	fbb8 faf1 	udiv	sl, r8, r1
   1452c:	fb01 8a1a 	mls	sl, r1, sl, r8
   14530:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
   14534:	f813 7c04 	ldrb.w	r7, [r3, #-4]
        t1 = ctx->ksch[cc - 3];
   14538:	f813 6c03 	ldrb.w	r6, [r3, #-3]
        t2 = ctx->ksch[cc - 2];
   1453c:	f813 5c02 	ldrb.w	r5, [r3, #-2]
        t3 = ctx->ksch[cc - 1];
   14540:	f813 4c01 	ldrb.w	r4, [r3, #-1]
        if( cc % keylen == 0 )
   14544:	d133      	bne.n	145ae <aes_set_key+0xe2>
            t0 = s_box(t1) ^ rc;
   14546:	f819 a006 	ldrb.w	sl, [r9, r6]
            t1 = s_box(t2);
   1454a:	f819 6005 	ldrb.w	r6, [r9, r5]
            t2 = s_box(t3);
   1454e:	f819 5004 	ldrb.w	r5, [r9, r4]
            t3 = s_box(tt);
   14552:	f819 4007 	ldrb.w	r4, [r9, r7]
            rc = f2(rc);
   14556:	ea4f 17de 	mov.w	r7, lr, lsr #7
   1455a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
            t0 = s_box(t1) ^ rc;
   1455e:	ea8e 0a0a 	eor.w	sl, lr, sl
            rc = f2(rc);
   14562:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   14566:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
   1456a:	b2ff      	uxtb	r7, r7
   1456c:	fa5f fe8e 	uxtb.w	lr, lr
   14570:	ea87 0e0e 	eor.w	lr, r7, lr
            t0 = s_box(t1) ^ rc;
   14574:	4657      	mov	r7, sl
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   14576:	f892 a000 	ldrb.w	sl, [r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1457a:	f108 0804 	add.w	r8, r8, #4
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   1457e:	ea87 070a 	eor.w	r7, r7, sl
   14582:	701f      	strb	r7, [r3, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   14584:	7857      	ldrb	r7, [r2, #1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   14586:	fa5f f888 	uxtb.w	r8, r8
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   1458a:	407e      	eors	r6, r7
   1458c:	705e      	strb	r6, [r3, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   1458e:	7896      	ldrb	r6, [r2, #2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   14590:	45c4      	cmp	ip, r8
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   14592:	ea85 0506 	eor.w	r5, r5, r6
   14596:	709d      	strb	r5, [r3, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   14598:	78d5      	ldrb	r5, [r2, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1459a:	f103 0304 	add.w	r3, r3, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   1459e:	ea84 0405 	eor.w	r4, r4, r5
   145a2:	f803 4c01 	strb.w	r4, [r3, #-1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   145a6:	f102 0204 	add.w	r2, r2, #4
   145aa:	d8bd      	bhi.n	14528 <aes_set_key+0x5c>
   145ac:	e79f      	b.n	144ee <aes_set_key+0x22>
        else if( keylen > 24 && cc % keylen == 16 )
   145ae:	2918      	cmp	r1, #24
   145b0:	d9e1      	bls.n	14576 <aes_set_key+0xaa>
   145b2:	f1ba 0f10 	cmp.w	sl, #16
   145b6:	d1de      	bne.n	14576 <aes_set_key+0xaa>
            t0 = s_box(t0);
   145b8:	f8df a018 	ldr.w	sl, [pc, #24]	; 145d4 <aes_set_key+0x108>
   145bc:	f81a 7007 	ldrb.w	r7, [sl, r7]
            t1 = s_box(t1);
   145c0:	f81a 6006 	ldrb.w	r6, [sl, r6]
            t2 = s_box(t2);
   145c4:	f81a 5005 	ldrb.w	r5, [sl, r5]
            t3 = s_box(t3);
   145c8:	f81a 4004 	ldrb.w	r4, [sl, r4]
   145cc:	e7d3      	b.n	14576 <aes_set_key+0xaa>
   145ce:	bf00      	nop
   145d0:	00010101 	.word	0x00010101
   145d4:	000364da 	.word	0x000364da

000145d8 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
   145d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ctx->rnd )
   145dc:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
   145e0:	b0a3      	sub	sp, #140	; 0x8c
   145e2:	911d      	str	r1, [sp, #116]	; 0x74
   145e4:	921b      	str	r2, [sp, #108]	; 0x6c
    if( ctx->rnd )
   145e6:	9301      	str	r3, [sp, #4]
   145e8:	2b00      	cmp	r3, #0
   145ea:	f000 8153 	beq.w	14894 <aes_encrypt+0x2bc>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
   145ee:	4601      	mov	r1, r0
   145f0:	a81e      	add	r0, sp, #120	; 0x78
   145f2:	f017 fcb3 	bl	2bf5c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
   145f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   145f8:	4ca7      	ldr	r4, [pc, #668]	; (14898 <aes_encrypt+0x2c0>)
   145fa:	3310      	adds	r3, #16
   145fc:	9302      	str	r3, [sp, #8]
        for( r = 1 ; r < ctx->rnd ; ++r )
   145fe:	2300      	movs	r3, #0
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14600:	4da6      	ldr	r5, [pc, #664]	; (1489c <aes_encrypt+0x2c4>)
   14602:	4ea7      	ldr	r6, [pc, #668]	; (148a0 <aes_encrypt+0x2c8>)
        for( r = 1 ; r < ctx->rnd ; ++r )
   14604:	9303      	str	r3, [sp, #12]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14606:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
   1460a:	f89d c081 	ldrb.w	ip, [sp, #129]	; 0x81
   1460e:	9004      	str	r0, [sp, #16]
   14610:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   14614:	9b02      	ldr	r3, [sp, #8]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14616:	9005      	str	r0, [sp, #20]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   14618:	5c20      	ldrb	r0, [r4, r0]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   1461a:	f89d 8078 	ldrb.w	r8, [sp, #120]	; 0x78
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   1461e:	9006      	str	r0, [sp, #24]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14620:	f89d 007b 	ldrb.w	r0, [sp, #123]	; 0x7b
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14624:	f89d e07d 	ldrb.w	lr, [sp, #125]	; 0x7d
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14628:	9007      	str	r0, [sp, #28]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1462a:	5c20      	ldrb	r0, [r4, r0]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   1462c:	f89d a082 	ldrb.w	sl, [sp, #130]	; 0x82
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   14630:	9008      	str	r0, [sp, #32]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   14632:	9804      	ldr	r0, [sp, #16]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14634:	f89d 9087 	ldrb.w	r9, [sp, #135]	; 0x87
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   14638:	5c20      	ldrb	r0, [r4, r0]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   1463a:	931c      	str	r3, [sp, #112]	; 0x70
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   1463c:	9009      	str	r0, [sp, #36]	; 0x24
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   1463e:	f814 000c 	ldrb.w	r0, [r4, ip]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14642:	f814 200a 	ldrb.w	r2, [r4, sl]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14646:	900a      	str	r0, [sp, #40]	; 0x28
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   14648:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   1464c:	f814 3009 	ldrb.w	r3, [r4, r9]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   14650:	900b      	str	r0, [sp, #44]	; 0x2c
   14652:	f89d 0085 	ldrb.w	r0, [sp, #133]	; 0x85
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   14656:	f814 1008 	ldrb.w	r1, [r4, r8]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1465a:	900c      	str	r0, [sp, #48]	; 0x30
   1465c:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14660:	f814 700e 	ldrb.w	r7, [r4, lr]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   14664:	900d      	str	r0, [sp, #52]	; 0x34
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   14666:	5c20      	ldrb	r0, [r4, r0]
   14668:	900e      	str	r0, [sp, #56]	; 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1466a:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
   1466e:	900f      	str	r0, [sp, #60]	; 0x3c
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   14670:	5c20      	ldrb	r0, [r4, r0]
   14672:	9010      	str	r0, [sp, #64]	; 0x40
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   14674:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14676:	5c20      	ldrb	r0, [r4, r0]
   14678:	9011      	str	r0, [sp, #68]	; 0x44
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   1467a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1467c:	5c20      	ldrb	r0, [r4, r0]
   1467e:	9012      	str	r0, [sp, #72]	; 0x48
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   14680:	f89d 0084 	ldrb.w	r0, [sp, #132]	; 0x84
   14684:	9013      	str	r0, [sp, #76]	; 0x4c
   14686:	f89d 0079 	ldrb.w	r0, [sp, #121]	; 0x79
   1468a:	9014      	str	r0, [sp, #80]	; 0x50
   1468c:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
   14690:	9015      	str	r0, [sp, #84]	; 0x54
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   14692:	5c20      	ldrb	r0, [r4, r0]
   14694:	9016      	str	r0, [sp, #88]	; 0x58
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   14696:	f89d 0083 	ldrb.w	r0, [sp, #131]	; 0x83
   1469a:	9017      	str	r0, [sp, #92]	; 0x5c
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   1469c:	5c20      	ldrb	r0, [r4, r0]
   1469e:	9018      	str	r0, [sp, #96]	; 0x60
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   146a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   146a2:	5c20      	ldrb	r0, [r4, r0]
   146a4:	9019      	str	r0, [sp, #100]	; 0x64
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   146a6:	9814      	ldr	r0, [sp, #80]	; 0x50
   146a8:	5c20      	ldrb	r0, [r4, r0]
   146aa:	901a      	str	r0, [sp, #104]	; 0x68
        for( r = 1 ; r < ctx->rnd ; ++r )
   146ac:	9803      	ldr	r0, [sp, #12]
   146ae:	3001      	adds	r0, #1
   146b0:	9003      	str	r0, [sp, #12]
   146b2:	9802      	ldr	r0, [sp, #8]
   146b4:	f8dd b004 	ldr.w	fp, [sp, #4]
   146b8:	3010      	adds	r0, #16
   146ba:	9002      	str	r0, [sp, #8]
   146bc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   146c0:	4583      	cmp	fp, r0
   146c2:	d836      	bhi.n	14732 <aes_encrypt+0x15a>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   146c4:	f88d 1078 	strb.w	r1, [sp, #120]	; 0x78
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   146c8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   146cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   146ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   146d0:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   146d4:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   146d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   146da:	9a06      	ldr	r2, [sp, #24]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   146dc:	f88d 1080 	strb.w	r1, [sp, #128]	; 0x80
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   146e0:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   146e4:	9919      	ldr	r1, [sp, #100]	; 0x64
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   146e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   146e8:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   146ec:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   146f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   146f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   146f4:	f88d 107d 	strb.w	r1, [sp, #125]	; 0x7d
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   146f8:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   146fc:	9912      	ldr	r1, [sp, #72]	; 0x48
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   146fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   14700:	f88d 1081 	strb.w	r1, [sp, #129]	; 0x81
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   14704:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   14708:	991a      	ldr	r1, [sp, #104]	; 0x68
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1470a:	9a08      	ldr	r2, [sp, #32]
   1470c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   14710:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14712:	981d      	ldr	r0, [sp, #116]	; 0x74
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   14714:	f88d 1085 	strb.w	r1, [sp, #133]	; 0x85
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   14718:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   1471c:	a91e      	add	r1, sp, #120	; 0x78
   1471e:	eb03 120b 	add.w	r2, r3, fp, lsl #4
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14722:	f88d 7079 	strb.w	r7, [sp, #121]	; 0x79
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   14726:	f017 fc19 	bl	2bf5c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
   1472a:	2000      	movs	r0, #0
}
   1472c:	b023      	add	sp, #140	; 0x8c
   1472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14732:	f815 b008 	ldrb.w	fp, [r5, r8]
   14736:	ea82 0003 	eor.w	r0, r2, r3
   1473a:	ea8b 0000 	eor.w	r0, fp, r0
   1473e:	f816 b00e 	ldrb.w	fp, [r6, lr]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14742:	404b      	eors	r3, r1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14744:	ea80 000b 	eor.w	r0, r0, fp
   14748:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   1474c:	f815 000e 	ldrb.w	r0, [r5, lr]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   14750:	407a      	eors	r2, r7
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14752:	4043      	eors	r3, r0
   14754:	f816 000a 	ldrb.w	r0, [r6, sl]
   14758:	4043      	eors	r3, r0
   1475a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   1475e:	ea81 0307 	eor.w	r3, r1, r7
   14762:	f815 100a 	ldrb.w	r1, [r5, sl]
    xor_block(d, k);
   14766:	a81e      	add	r0, sp, #120	; 0x78
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   14768:	4059      	eors	r1, r3
   1476a:	f816 3009 	ldrb.w	r3, [r6, r9]
   1476e:	4059      	eors	r1, r3
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   14770:	f816 3008 	ldrb.w	r3, [r6, r8]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   14774:	f88d 107a 	strb.w	r1, [sp, #122]	; 0x7a
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   14778:	4053      	eors	r3, r2
   1477a:	f815 2009 	ldrb.w	r2, [r5, r9]
   1477e:	4053      	eors	r3, r2
   14780:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14784:	9a08      	ldr	r2, [sp, #32]
   14786:	9b06      	ldr	r3, [sp, #24]
   14788:	4053      	eors	r3, r2
   1478a:	9a04      	ldr	r2, [sp, #16]
   1478c:	5caa      	ldrb	r2, [r5, r2]
   1478e:	4053      	eors	r3, r2
   14790:	f816 200c 	ldrb.w	r2, [r6, ip]
   14794:	4053      	eors	r3, r2
   14796:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
   1479a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1479e:	405a      	eors	r2, r3
   147a0:	f815 300c 	ldrb.w	r3, [r5, ip]
   147a4:	4053      	eors	r3, r2
   147a6:	9a05      	ldr	r2, [sp, #20]
   147a8:	5cb2      	ldrb	r2, [r6, r2]
   147aa:	4053      	eors	r3, r2
   147ac:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
   147b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   147b4:	405a      	eors	r2, r3
   147b6:	9b05      	ldr	r3, [sp, #20]
   147b8:	5ceb      	ldrb	r3, [r5, r3]
   147ba:	4053      	eors	r3, r2
   147bc:	9a07      	ldr	r2, [sp, #28]
   147be:	5cb2      	ldrb	r2, [r6, r2]
   147c0:	4053      	eors	r3, r2
   147c2:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
   147c6:	9b06      	ldr	r3, [sp, #24]
   147c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   147ca:	4053      	eors	r3, r2
   147cc:	9a04      	ldr	r2, [sp, #16]
   147ce:	5cb2      	ldrb	r2, [r6, r2]
   147d0:	405a      	eors	r2, r3
   147d2:	9b07      	ldr	r3, [sp, #28]
   147d4:	5ceb      	ldrb	r3, [r5, r3]
   147d6:	405a      	eors	r2, r3
   147d8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   147dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   147de:	9a10      	ldr	r2, [sp, #64]	; 0x40
   147e0:	4053      	eors	r3, r2
   147e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   147e4:	5caa      	ldrb	r2, [r5, r2]
   147e6:	4053      	eors	r3, r2
   147e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   147ea:	5cb2      	ldrb	r2, [r6, r2]
   147ec:	4053      	eors	r3, r2
   147ee:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
   147f2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   147f6:	405a      	eors	r2, r3
   147f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   147fa:	5ceb      	ldrb	r3, [r5, r3]
   147fc:	4053      	eors	r3, r2
   147fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14800:	5cb2      	ldrb	r2, [r6, r2]
   14802:	4053      	eors	r3, r2
   14804:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
   14808:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   1480c:	405a      	eors	r2, r3
   1480e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14810:	5ceb      	ldrb	r3, [r5, r3]
   14812:	4053      	eors	r3, r2
   14814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14816:	5cb2      	ldrb	r2, [r6, r2]
   14818:	4053      	eors	r3, r2
   1481a:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   1481e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14822:	4053      	eors	r3, r2
   14824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14826:	5cb2      	ldrb	r2, [r6, r2]
   14828:	405a      	eors	r2, r3
   1482a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1482c:	5ceb      	ldrb	r3, [r5, r3]
    xor_block(d, k);
   1482e:	991c      	ldr	r1, [sp, #112]	; 0x70
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   14830:	405a      	eors	r2, r3
   14832:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   14836:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14838:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1483a:	4053      	eors	r3, r2
   1483c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1483e:	5caa      	ldrb	r2, [r5, r2]
   14840:	4053      	eors	r3, r2
   14842:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14844:	5cb2      	ldrb	r2, [r6, r2]
   14846:	4053      	eors	r3, r2
   14848:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
   1484c:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
   14850:	405a      	eors	r2, r3
   14852:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14854:	5ceb      	ldrb	r3, [r5, r3]
   14856:	4053      	eors	r3, r2
   14858:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1485a:	5cb2      	ldrb	r2, [r6, r2]
   1485c:	4053      	eors	r3, r2
   1485e:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
   14862:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
   14866:	405a      	eors	r2, r3
   14868:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1486a:	5ceb      	ldrb	r3, [r5, r3]
   1486c:	4053      	eors	r3, r2
   1486e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14870:	5cb2      	ldrb	r2, [r6, r2]
   14872:	4053      	eors	r3, r2
   14874:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
   14878:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1487a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1487c:	4053      	eors	r3, r2
   1487e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14880:	5cb2      	ldrb	r2, [r6, r2]
   14882:	4053      	eors	r3, r2
   14884:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14886:	5caa      	ldrb	r2, [r5, r2]
   14888:	4053      	eors	r3, r2
   1488a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    xor_block(d, k);
   1488e:	f017 fb24 	bl	2beda <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
   14892:	e6b8      	b.n	14606 <aes_encrypt+0x2e>
        return ( uint8_t )-1;
   14894:	20ff      	movs	r0, #255	; 0xff
   14896:	e749      	b.n	1472c <aes_encrypt+0x154>
   14898:	000364da 	.word	0x000364da
   1489c:	000363da 	.word	0x000363da
   148a0:	000362da 	.word	0x000362da

000148a4 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
   148a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   148a8:	b0cb      	sub	sp, #300	; 0x12c
   148aa:	4606      	mov	r6, r0
   148ac:	4617      	mov	r7, r2
   148ae:	4698      	mov	r8, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
   148b0:	460d      	mov	r5, r1
{
   148b2:	f8dd 9148 	ldr.w	r9, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
   148b6:	b389      	cbz	r1, 1491c <ComputeCmac+0x78>
   148b8:	f1b9 0f00 	cmp.w	r9, #0
   148bc:	d02e      	beq.n	1491c <ComputeCmac+0x78>
        if( SeNvm->KeyList[i].KeyID == keyID )
   148be:	2400      	movs	r4, #0
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
   148c0:	a804      	add	r0, sp, #16
   148c2:	f017 fb8d 	bl	2bfe0 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
   148c6:	4b16      	ldr	r3, [pc, #88]	; (14920 <ComputeCmac+0x7c>)
   148c8:	6819      	ldr	r1, [r3, #0]
   148ca:	f101 0314 	add.w	r3, r1, #20
   148ce:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   148d2:	5c1a      	ldrb	r2, [r3, r0]
   148d4:	4542      	cmp	r2, r8
   148d6:	d113      	bne.n	14900 <ComputeCmac+0x5c>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
   148d8:	3015      	adds	r0, #21
   148da:	4401      	add	r1, r0
   148dc:	a804      	add	r0, sp, #16
   148de:	f017 fb8f 	bl	2c000 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
   148e2:	b9a6      	cbnz	r6, 1490e <ComputeCmac+0x6a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
   148e4:	463a      	mov	r2, r7
   148e6:	4629      	mov	r1, r5
   148e8:	a804      	add	r0, sp, #16
   148ea:	f017 fb8e 	bl	2c00a <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
   148ee:	4668      	mov	r0, sp
   148f0:	a904      	add	r1, sp, #16
   148f2:	f017 fbf5 	bl	2c0e0 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
   148f6:	9b00      	ldr	r3, [sp, #0]
   148f8:	2000      	movs	r0, #0
   148fa:	f8c9 3000 	str.w	r3, [r9]
   148fe:	e003      	b.n	14908 <ComputeCmac+0x64>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14900:	3401      	adds	r4, #1
   14902:	2c17      	cmp	r4, #23
   14904:	d1e3      	bne.n	148ce <ComputeCmac+0x2a>
   14906:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
   14908:	b04b      	add	sp, #300	; 0x12c
   1490a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
   1490e:	2210      	movs	r2, #16
   14910:	4631      	mov	r1, r6
   14912:	eb0d 0002 	add.w	r0, sp, r2
   14916:	f017 fb78 	bl	2c00a <AES_CMAC_Update>
   1491a:	e7e3      	b.n	148e4 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
   1491c:	2002      	movs	r0, #2
   1491e:	e7f3      	b.n	14908 <ComputeCmac+0x64>
   14920:	2002fc68 	.word	0x2002fc68

00014924 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
   14924:	b530      	push	{r4, r5, lr}
   14926:	b0e9      	sub	sp, #420	; 0x1a4
    SecureElementNvmData_t seNvmInit =
   14928:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1492c:	2100      	movs	r1, #0
{
   1492e:	4604      	mov	r4, r0
    SecureElementNvmData_t seNvmInit =
   14930:	4668      	mov	r0, sp
   14932:	f01c ffb6 	bl	318a2 <memset>
   14936:	4b28      	ldr	r3, [pc, #160]	; (149d8 <SecureElementInit+0xb4>)
   14938:	f10d 0215 	add.w	r2, sp, #21
   1493c:	f103 0120 	add.w	r1, r3, #32
   14940:	f853 0b04 	ldr.w	r0, [r3], #4
   14944:	428b      	cmp	r3, r1
   14946:	f842 0b04 	str.w	r0, [r2], #4
   1494a:	d1f9      	bne.n	14940 <SecureElementInit+0x1c>
   1494c:	881b      	ldrh	r3, [r3, #0]
   1494e:	4923      	ldr	r1, [pc, #140]	; (149dc <SecureElementInit+0xb8>)
   14950:	8013      	strh	r3, [r2, #0]
   14952:	2303      	movs	r3, #3
   14954:	2245      	movs	r2, #69	; 0x45
   14956:	a816      	add	r0, sp, #88	; 0x58
   14958:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
   1495c:	f01c ff67 	bl	3182e <memcpy>
   14960:	237f      	movs	r3, #127	; 0x7f
   14962:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
   14966:	2380      	movs	r3, #128	; 0x80
   14968:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
   1496c:	2381      	movs	r3, #129	; 0x81
   1496e:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
   14972:	2382      	movs	r3, #130	; 0x82
   14974:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
   14978:	2383      	movs	r3, #131	; 0x83
   1497a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
   1497e:	2384      	movs	r3, #132	; 0x84
   14980:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
   14984:	2385      	movs	r3, #133	; 0x85
   14986:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
   1498a:	2386      	movs	r3, #134	; 0x86
   1498c:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
   14990:	2387      	movs	r3, #135	; 0x87
   14992:	f88d 3135 	strb.w	r3, [sp, #309]	; 0x135
   14996:	2388      	movs	r3, #136	; 0x88
   14998:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
   1499c:	2389      	movs	r3, #137	; 0x89
   1499e:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   149a2:	238a      	movs	r3, #138	; 0x8a
   149a4:	f88d 3168 	strb.w	r3, [sp, #360]	; 0x168
   149a8:	238b      	movs	r3, #139	; 0x8b
   149aa:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
   149ae:	238c      	movs	r3, #140	; 0x8c
   149b0:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
   149b4:	b16c      	cbz	r4, 149d2 <SecureElementInit+0xae>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
   149b6:	4d0a      	ldr	r5, [pc, #40]	; (149e0 <SecureElementInit+0xbc>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
   149b8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   149bc:	4669      	mov	r1, sp
   149be:	4620      	mov	r0, r4
    SeNvm = nvm;
   149c0:	602c      	str	r4, [r5, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
   149c2:	f017 f8d6 	bl	2bb72 <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
   149c6:	6828      	ldr	r0, [r5, #0]
   149c8:	f017 fd02 	bl	2c3d0 <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
   149cc:	2000      	movs	r0, #0
}
   149ce:	b069      	add	sp, #420	; 0x1a4
   149d0:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   149d2:	2002      	movs	r0, #2
   149d4:	e7fb      	b.n	149ce <SecureElementInit+0xaa>
   149d6:	bf00      	nop
   149d8:	000365da 	.word	0x000365da
   149dc:	000365fd 	.word	0x000365fd
   149e0:	2002fc68 	.word	0x2002fc68

000149e4 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
   149e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149e8:	460d      	mov	r5, r1
   149ea:	4616      	mov	r6, r2
   149ec:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
   149ee:	4607      	mov	r7, r0
{
   149f0:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
   149f2:	b370      	cbz	r0, 14a52 <SecureElementAesEncrypt+0x6e>
   149f4:	b36b      	cbz	r3, 14a52 <SecureElementAesEncrypt+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
   149f6:	f011 040f 	ands.w	r4, r1, #15
   149fa:	d12c      	bne.n	14a56 <SecureElementAesEncrypt+0x72>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
   149fc:	22f0      	movs	r2, #240	; 0xf0
   149fe:	4621      	mov	r1, r4
   14a00:	a801      	add	r0, sp, #4
   14a02:	f017 f8ca 	bl	2bb9a <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
   14a06:	4621      	mov	r1, r4
   14a08:	4b14      	ldr	r3, [pc, #80]	; (14a5c <SecureElementAesEncrypt+0x78>)
   14a0a:	6818      	ldr	r0, [r3, #0]
   14a0c:	f100 0214 	add.w	r2, r0, #20
   14a10:	eb01 1301 	add.w	r3, r1, r1, lsl #4
   14a14:	5cd4      	ldrb	r4, [r2, r3]
   14a16:	42b4      	cmp	r4, r6
   14a18:	d10b      	bne.n	14a32 <SecureElementAesEncrypt+0x4e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
   14a1a:	3315      	adds	r3, #21
   14a1c:	2110      	movs	r1, #16
   14a1e:	aa01      	add	r2, sp, #4
   14a20:	4418      	add	r0, r3
   14a22:	f7ff fd53 	bl	144cc <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
   14a26:	462c      	mov	r4, r5
   14a28:	1b2e      	subs	r6, r5, r4
   14a2a:	b2f6      	uxtb	r6, r6
   14a2c:	b944      	cbnz	r4, 14a40 <SecureElementAesEncrypt+0x5c>
   14a2e:	4620      	mov	r0, r4
   14a30:	e003      	b.n	14a3a <SecureElementAesEncrypt+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14a32:	3101      	adds	r1, #1
   14a34:	2917      	cmp	r1, #23
   14a36:	d1eb      	bne.n	14a10 <SecureElementAesEncrypt+0x2c>
   14a38:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
   14a3a:	b03e      	add	sp, #248	; 0xf8
   14a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
   14a40:	aa01      	add	r2, sp, #4
   14a42:	eb08 0106 	add.w	r1, r8, r6
   14a46:	19b8      	adds	r0, r7, r6
            size  = size - 16;
   14a48:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
   14a4a:	f7ff fdc5 	bl	145d8 <aes_encrypt>
            size  = size - 16;
   14a4e:	b2a4      	uxth	r4, r4
   14a50:	e7ea      	b.n	14a28 <SecureElementAesEncrypt+0x44>
        return SECURE_ELEMENT_ERROR_NPE;
   14a52:	2002      	movs	r0, #2
   14a54:	e7f1      	b.n	14a3a <SecureElementAesEncrypt+0x56>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   14a56:	2005      	movs	r0, #5
   14a58:	e7ef      	b.n	14a3a <SecureElementAesEncrypt+0x56>
   14a5a:	bf00      	nop
   14a5c:	2002fc68 	.word	0x2002fc68

00014a60 <SecureElementSetKey.part.0>:
        if( SeNvm->KeyList[i].KeyID == keyID )
   14a60:	2200      	movs	r2, #0
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   14a62:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
   14a64:	4e1c      	ldr	r6, [pc, #112]	; (14ad8 <SecureElementSetKey.part.0+0x78>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   14a66:	4603      	mov	r3, r0
        if( SeNvm->KeyList[i].KeyID == keyID )
   14a68:	6834      	ldr	r4, [r6, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   14a6a:	4608      	mov	r0, r1
   14a6c:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
   14a6e:	f104 0114 	add.w	r1, r4, #20
   14a72:	eb02 1502 	add.w	r5, r2, r2, lsl #4
   14a76:	5d4f      	ldrb	r7, [r1, r5]
   14a78:	429f      	cmp	r7, r3
   14a7a:	d127      	bne.n	14acc <SecureElementSetKey.part.0+0x6c>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
   14a7c:	2b80      	cmp	r3, #128	; 0x80
   14a7e:	f105 0515 	add.w	r5, r5, #21
   14a82:	d008      	beq.n	14a96 <SecureElementSetKey.part.0+0x36>
   14a84:	337d      	adds	r3, #125	; 0x7d
   14a86:	b2db      	uxtb	r3, r3
   14a88:	2b06      	cmp	r3, #6
   14a8a:	d818      	bhi.n	14abe <SecureElementSetKey.part.0+0x5e>
   14a8c:	2249      	movs	r2, #73	; 0x49
   14a8e:	fa22 f303 	lsr.w	r3, r2, r3
   14a92:	07db      	lsls	r3, r3, #31
   14a94:	d513      	bpl.n	14abe <SecureElementSetKey.part.0+0x5e>
                uint8_t               decryptedKey[16] = { 0 };
   14a96:	2300      	movs	r3, #0
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   14a98:	227f      	movs	r2, #127	; 0x7f
   14a9a:	2110      	movs	r1, #16
                uint8_t               decryptedKey[16] = { 0 };
   14a9c:	e9cd 3300 	strd	r3, r3, [sp]
   14aa0:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   14aa4:	466b      	mov	r3, sp
   14aa6:	f7ff ff9d 	bl	149e4 <SecureElementAesEncrypt>
   14aaa:	4604      	mov	r4, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
   14aac:	6830      	ldr	r0, [r6, #0]
   14aae:	2210      	movs	r2, #16
   14ab0:	4669      	mov	r1, sp
   14ab2:	4428      	add	r0, r5
   14ab4:	f017 f85d 	bl	2bb72 <memcpy1>
}
   14ab8:	4620      	mov	r0, r4
   14aba:	b005      	add	sp, #20
   14abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
   14abe:	4601      	mov	r1, r0
   14ac0:	2210      	movs	r2, #16
   14ac2:	1960      	adds	r0, r4, r5
   14ac4:	f017 f855 	bl	2bb72 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
   14ac8:	2400      	movs	r4, #0
   14aca:	e7f5      	b.n	14ab8 <SecureElementSetKey.part.0+0x58>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14acc:	3201      	adds	r2, #1
   14ace:	2a17      	cmp	r2, #23
   14ad0:	d1cf      	bne.n	14a72 <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   14ad2:	2403      	movs	r4, #3
   14ad4:	e7f0      	b.n	14ab8 <SecureElementSetKey.part.0+0x58>
   14ad6:	bf00      	nop
   14ad8:	2002fc68 	.word	0x2002fc68

00014adc <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
   14adc:	4601      	mov	r1, r0
{
   14ade:	b508      	push	{r3, lr}
    if( devEui == NULL )
   14ae0:	b130      	cbz	r0, 14af0 <SecureElementSetDevEui+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
   14ae2:	4b04      	ldr	r3, [pc, #16]	; (14af4 <SecureElementSetDevEui+0x18>)
   14ae4:	2208      	movs	r2, #8
   14ae6:	6818      	ldr	r0, [r3, #0]
   14ae8:	f017 f843 	bl	2bb72 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14aec:	2000      	movs	r0, #0
}
   14aee:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14af0:	2002      	movs	r0, #2
   14af2:	e7fc      	b.n	14aee <SecureElementSetDevEui+0x12>
   14af4:	2002fc68 	.word	0x2002fc68

00014af8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
   14af8:	4b01      	ldr	r3, [pc, #4]	; (14b00 <SecureElementGetDevEui+0x8>)
   14afa:	6818      	ldr	r0, [r3, #0]
   14afc:	4770      	bx	lr
   14afe:	bf00      	nop
   14b00:	2002fc68 	.word	0x2002fc68

00014b04 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
   14b04:	4601      	mov	r1, r0
{
   14b06:	b508      	push	{r3, lr}
    if( joinEui == NULL )
   14b08:	b138      	cbz	r0, 14b1a <SecureElementSetJoinEui+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
   14b0a:	2208      	movs	r2, #8
   14b0c:	4b04      	ldr	r3, [pc, #16]	; (14b20 <SecureElementSetJoinEui+0x1c>)
   14b0e:	6818      	ldr	r0, [r3, #0]
   14b10:	4410      	add	r0, r2
   14b12:	f017 f82e 	bl	2bb72 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14b16:	2000      	movs	r0, #0
}
   14b18:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14b1a:	2002      	movs	r0, #2
   14b1c:	e7fc      	b.n	14b18 <SecureElementSetJoinEui+0x14>
   14b1e:	bf00      	nop
   14b20:	2002fc68 	.word	0x2002fc68

00014b24 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
   14b24:	4b01      	ldr	r3, [pc, #4]	; (14b2c <SecureElementGetJoinEui+0x8>)
   14b26:	6818      	ldr	r0, [r3, #0]
}
   14b28:	3008      	adds	r0, #8
   14b2a:	4770      	bx	lr
   14b2c:	2002fc68 	.word	0x2002fc68

00014b30 <SecureElementSetPin>:

SecureElementStatus_t SecureElementSetPin( uint8_t* pin )
{
    if( pin == NULL )
   14b30:	4601      	mov	r1, r0
{
   14b32:	b508      	push	{r3, lr}
    if( pin == NULL )
   14b34:	b138      	cbz	r0, 14b46 <SecureElementSetPin+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
   14b36:	4b05      	ldr	r3, [pc, #20]	; (14b4c <SecureElementSetPin+0x1c>)
   14b38:	2204      	movs	r2, #4
   14b3a:	6818      	ldr	r0, [r3, #0]
   14b3c:	3010      	adds	r0, #16
   14b3e:	f017 f818 	bl	2bb72 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14b42:	2000      	movs	r0, #0
}
   14b44:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14b46:	2002      	movs	r0, #2
   14b48:	e7fc      	b.n	14b44 <SecureElementSetPin+0x14>
   14b4a:	bf00      	nop
   14b4c:	2002fc68 	.word	0x2002fc68

00014b50 <SecureElementGetPin>:

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
   14b50:	4b01      	ldr	r3, [pc, #4]	; (14b58 <SecureElementGetPin+0x8>)
   14b52:	6818      	ldr	r0, [r3, #0]
}
   14b54:	3010      	adds	r0, #16
   14b56:	4770      	bx	lr
   14b58:	2002fc68 	.word	0x2002fc68

00014b5c <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
   14b5c:	4a06      	ldr	r2, [pc, #24]	; (14b78 <OnRadioTxTimeout+0x1c>)
   14b5e:	7813      	ldrb	r3, [r2, #0]
   14b60:	f043 0308 	orr.w	r3, r3, #8
   14b64:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14b66:	4b05      	ldr	r3, [pc, #20]	; (14b7c <OnRadioTxTimeout+0x20>)
   14b68:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14b6c:	b113      	cbz	r3, 14b74 <OnRadioTxTimeout+0x18>
   14b6e:	68db      	ldr	r3, [r3, #12]
   14b70:	b103      	cbz	r3, 14b74 <OnRadioTxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14b72:	4718      	bx	r3
    }
}
   14b74:	4770      	bx	lr
   14b76:	bf00      	nop
   14b78:	2002fc80 	.word	0x2002fc80
   14b7c:	20030170 	.word	0x20030170

00014b80 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
   14b80:	4a06      	ldr	r2, [pc, #24]	; (14b9c <OnRadioRxError+0x1c>)
   14b82:	7813      	ldrb	r3, [r2, #0]
   14b84:	f043 0304 	orr.w	r3, r3, #4
   14b88:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14b8a:	4b05      	ldr	r3, [pc, #20]	; (14ba0 <OnRadioRxError+0x20>)
   14b8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14b90:	b113      	cbz	r3, 14b98 <OnRadioRxError+0x18>
   14b92:	68db      	ldr	r3, [r3, #12]
   14b94:	b103      	cbz	r3, 14b98 <OnRadioRxError+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14b96:	4718      	bx	r3
    }
}
   14b98:	4770      	bx	lr
   14b9a:	bf00      	nop
   14b9c:	2002fc80 	.word	0x2002fc80
   14ba0:	20030170 	.word	0x20030170

00014ba4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
   14ba4:	4a06      	ldr	r2, [pc, #24]	; (14bc0 <OnRadioRxTimeout+0x1c>)
   14ba6:	7813      	ldrb	r3, [r2, #0]
   14ba8:	f043 0302 	orr.w	r3, r3, #2
   14bac:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14bae:	4b05      	ldr	r3, [pc, #20]	; (14bc4 <OnRadioRxTimeout+0x20>)
   14bb0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14bb4:	b113      	cbz	r3, 14bbc <OnRadioRxTimeout+0x18>
   14bb6:	68db      	ldr	r3, [r3, #12]
   14bb8:	b103      	cbz	r3, 14bbc <OnRadioRxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14bba:	4718      	bx	r3
    }
}
   14bbc:	4770      	bx	lr
   14bbe:	bf00      	nop
   14bc0:	2002fc80 	.word	0x2002fc80
   14bc4:	20030170 	.word	0x20030170

00014bc8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14bc8:	4b04      	ldr	r3, [pc, #16]	; (14bdc <UpdateRxSlotIdleState+0x14>)
   14bca:	4a05      	ldr	r2, [pc, #20]	; (14be0 <UpdateRxSlotIdleState+0x18>)
   14bcc:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
   14bd0:	2b02      	cmp	r3, #2
   14bd2:	bf18      	it	ne
   14bd4:	2306      	movne	r3, #6
   14bd6:	f882 348c 	strb.w	r3, [r2, #1164]	; 0x48c
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
   14bda:	4770      	bx	lr
   14bdc:	2002fd14 	.word	0x2002fd14
   14be0:	20030170 	.word	0x20030170

00014be4 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
   14be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14be6:	4b09      	ldr	r3, [pc, #36]	; (14c0c <GetMaxAppPayloadWithoutFOptsLength+0x28>)
    getPhy.Datarate = datarate;
   14be8:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14bec:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14bf0:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14bf4:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
   14bf8:	220d      	movs	r2, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14bfa:	a902      	add	r1, sp, #8
    getPhy.Attribute = PHY_MAX_PAYLOAD;
   14bfc:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14c00:	f017 ff9b 	bl	2cb3a <RegionGetPhyParam>

    return phyParam.Value;
}
   14c04:	b2c0      	uxtb	r0, r0
   14c06:	b005      	add	sp, #20
   14c08:	f85d fb04 	ldr.w	pc, [sp], #4
   14c0c:	2002fd14 	.word	0x2002fd14

00014c10 <OnRetransmitTimeoutTimerEvent>:
{
   14c10:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
   14c12:	4809      	ldr	r0, [pc, #36]	; (14c38 <OnRetransmitTimeoutTimerEvent+0x28>)
   14c14:	f7fe faea 	bl	131ec <TimerStop>
    if( MacCtx.NodeAckRequested == true )
   14c18:	4b08      	ldr	r3, [pc, #32]	; (14c3c <OnRetransmitTimeoutTimerEvent+0x2c>)
   14c1a:	f893 241a 	ldrb.w	r2, [r3, #1050]	; 0x41a
   14c1e:	b112      	cbz	r2, 14c26 <OnRetransmitTimeoutTimerEvent+0x16>
        MacCtx.RetransmitTimeoutRetry = true;
   14c20:	2201      	movs	r2, #1
   14c22:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14c26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14c2a:	b123      	cbz	r3, 14c36 <OnRetransmitTimeoutTimerEvent+0x26>
   14c2c:	68db      	ldr	r3, [r3, #12]
   14c2e:	b113      	cbz	r3, 14c36 <OnRetransmitTimeoutTimerEvent+0x26>
}
   14c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14c34:	4718      	bx	r3
}
   14c36:	bd10      	pop	{r4, pc}
   14c38:	20030570 	.word	0x20030570
   14c3c:	20030170 	.word	0x20030170

00014c40 <PrepareRxDoneAbort>:
{
   14c40:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
   14c42:	4c0c      	ldr	r4, [pc, #48]	; (14c74 <PrepareRxDoneAbort+0x34>)
   14c44:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   14c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14c4c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
   14c50:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   14c54:	b113      	cbz	r3, 14c5c <PrepareRxDoneAbort+0x1c>
        OnRetransmitTimeoutTimerEvent( NULL );
   14c56:	2000      	movs	r0, #0
   14c58:	f7ff ffda 	bl	14c10 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
   14c5c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   14c60:	f023 0312 	bic.w	r3, r3, #18
   14c64:	f043 0312 	orr.w	r3, r3, #18
   14c68:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
}
   14c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
   14c70:	f7ff bfaa 	b.w	14bc8 <UpdateRxSlotIdleState>
   14c74:	20030170 	.word	0x20030170

00014c78 <HandleRadioRxErrorTimeout>:
{
   14c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14c7a:	4e2e      	ldr	r6, [pc, #184]	; (14d34 <HandleRadioRxErrorTimeout+0xbc>)
{
   14c7c:	4607      	mov	r7, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14c7e:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
{
   14c82:	460d      	mov	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14c84:	2b02      	cmp	r3, #2
   14c86:	d002      	beq.n	14c8e <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
   14c88:	4b2b      	ldr	r3, [pc, #172]	; (14d38 <HandleRadioRxErrorTimeout+0xc0>)
   14c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14c8c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
   14c8e:	f017 fc39 	bl	2c504 <LoRaMacClassBIsBeaconExpected>
   14c92:	4604      	mov	r4, r0
   14c94:	b980      	cbnz	r0, 14cb8 <HandleRadioRxErrorTimeout+0x40>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   14c96:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   14c9a:	2b01      	cmp	r3, #1
   14c9c:	d016      	beq.n	14ccc <HandleRadioRxErrorTimeout+0x54>
            if( MacCtx.NodeAckRequested == true )
   14c9e:	4c27      	ldr	r4, [pc, #156]	; (14d3c <HandleRadioRxErrorTimeout+0xc4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   14ca0:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
            if( MacCtx.NodeAckRequested == true )
   14ca4:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   14ca8:	b36a      	cbz	r2, 14d06 <HandleRadioRxErrorTimeout+0x8e>
            if( MacCtx.NodeAckRequested == true )
   14caa:	b10b      	cbz	r3, 14cb0 <HandleRadioRxErrorTimeout+0x38>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
   14cac:	f884 5445 	strb.w	r5, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
   14cb0:	4628      	mov	r0, r5
   14cb2:	f003 f8b7 	bl	17e24 <LoRaMacConfirmQueueSetStatusCmn>
   14cb6:	e036      	b.n	14d26 <HandleRadioRxErrorTimeout+0xae>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
   14cb8:	2002      	movs	r0, #2
   14cba:	f017 fc19 	bl	2c4f0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
   14cbe:	2000      	movs	r0, #0
   14cc0:	f017 fc1b 	bl	2c4fa <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   14cc4:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   14cc8:	2b01      	cmp	r3, #1
   14cca:	d111      	bne.n	14cf0 <HandleRadioRxErrorTimeout+0x78>
        if( LoRaMacClassBIsPingExpected( ) == true )
   14ccc:	f017 fc1c 	bl	2c508 <LoRaMacClassBIsPingExpected>
   14cd0:	b190      	cbz	r0, 14cf8 <HandleRadioRxErrorTimeout+0x80>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   14cd2:	2000      	movs	r0, #0
   14cd4:	f017 fc0d 	bl	2c4f2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
   14cd8:	2000      	movs	r0, #0
   14cda:	f017 fc0f 	bl	2c4fc <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
   14cde:	f017 fc15 	bl	2c50c <LoRaMacClassBIsMulticastExpected>
   14ce2:	b128      	cbz	r0, 14cf0 <HandleRadioRxErrorTimeout+0x78>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   14ce4:	2000      	movs	r0, #0
   14ce6:	f017 fc05 	bl	2c4f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
   14cea:	2000      	movs	r0, #0
   14cec:	f017 fc07 	bl	2c4fe <LoRaMacClassBMulticastSlotTimerEvent>
}
   14cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    UpdateRxSlotIdleState( );
   14cf4:	f7ff bf68 	b.w	14bc8 <UpdateRxSlotIdleState>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
   14cf8:	f017 fc08 	bl	2c50c <LoRaMacClassBIsMulticastExpected>
   14cfc:	2800      	cmp	r0, #0
   14cfe:	d1f1      	bne.n	14ce4 <HandleRadioRxErrorTimeout+0x6c>
    if( classBRx == false )
   14d00:	2c00      	cmp	r4, #0
   14d02:	d0cc      	beq.n	14c9e <HandleRadioRxErrorTimeout+0x26>
   14d04:	e7f4      	b.n	14cf0 <HandleRadioRxErrorTimeout+0x78>
            if( MacCtx.NodeAckRequested == true )
   14d06:	b10b      	cbz	r3, 14d0c <HandleRadioRxErrorTimeout+0x94>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
   14d08:	f884 7445 	strb.w	r7, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
   14d0c:	4638      	mov	r0, r7
   14d0e:	f003 f889 	bl	17e24 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
   14d12:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   14d14:	f017 f849 	bl	2bdaa <TimerGetElapsedTime>
   14d18:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
   14d1c:	4298      	cmp	r0, r3
   14d1e:	d3e7      	bcc.n	14cf0 <HandleRadioRxErrorTimeout+0x78>
                TimerStop( &MacCtx.RxWindowTimer2 );
   14d20:	4807      	ldr	r0, [pc, #28]	; (14d40 <HandleRadioRxErrorTimeout+0xc8>)
   14d22:	f7fe fa63 	bl	131ec <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
   14d26:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   14d2a:	f043 0310 	orr.w	r3, r3, #16
   14d2e:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   14d32:	e7dd      	b.n	14cf0 <HandleRadioRxErrorTimeout+0x78>
   14d34:	2002fd14 	.word	0x2002fd14
   14d38:	00033a2c 	.word	0x00033a2c
   14d3c:	20030170 	.word	0x20030170
   14d40:	20030510 	.word	0x20030510

00014d44 <OnRadioRxDone>:
{
   14d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d48:	4616      	mov	r6, r2
   14d4a:	461d      	mov	r5, r3
   14d4c:	4680      	mov	r8, r0
   14d4e:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
   14d50:	f017 f824 	bl	2bd9c <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14d54:	4a0b      	ldr	r2, [pc, #44]	; (14d84 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
   14d56:	4c0c      	ldr	r4, [pc, #48]	; (14d88 <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14d58:	7813      	ldrb	r3, [r2, #0]
    RxDoneParams.Payload = payload;
   14d5a:	e9c4 0800 	strd	r0, r8, [r4]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14d5e:	f023 0311 	bic.w	r3, r3, #17
   14d62:	f043 0311 	orr.w	r3, r3, #17
   14d66:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14d68:	4b08      	ldr	r3, [pc, #32]	; (14d8c <OnRadioRxDone+0x48>)
    RxDoneParams.Size = size;
   14d6a:	8127      	strh	r7, [r4, #8]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14d6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    RxDoneParams.Rssi = rssi;
   14d70:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
   14d72:	7325      	strb	r5, [r4, #12]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14d74:	b123      	cbz	r3, 14d80 <OnRadioRxDone+0x3c>
   14d76:	68db      	ldr	r3, [r3, #12]
   14d78:	b113      	cbz	r3, 14d80 <OnRadioRxDone+0x3c>
}
   14d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14d7e:	4718      	bx	r3
}
   14d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d84:	2002fc80 	.word	0x2002fc80
   14d88:	2002fc6c 	.word	0x2002fc6c
   14d8c:	20030170 	.word	0x20030170

00014d90 <OnRadioTxDone>:
{
   14d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14d92:	f017 f803 	bl	2bd9c <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
   14d96:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14d98:	4b0d      	ldr	r3, [pc, #52]	; (14dd0 <OnRadioTxDone+0x40>)
    MacCtx.LastTxSysTime = SysTimeGet( );
   14d9a:	4d0e      	ldr	r5, [pc, #56]	; (14dd4 <OnRadioTxDone+0x44>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14d9c:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
   14d9e:	4620      	mov	r0, r4
   14da0:	f016 ff59 	bl	2bc56 <SysTimeGet>
   14da4:	e894 0003 	ldmia.w	r4, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
   14da8:	4a0b      	ldr	r2, [pc, #44]	; (14dd8 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
   14daa:	f505 734e 	add.w	r3, r5, #824	; 0x338
   14dae:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
   14db2:	7813      	ldrb	r3, [r2, #0]
   14db4:	f043 0320 	orr.w	r3, r3, #32
   14db8:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14dba:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
   14dbe:	b12b      	cbz	r3, 14dcc <OnRadioTxDone+0x3c>
   14dc0:	68db      	ldr	r3, [r3, #12]
   14dc2:	b11b      	cbz	r3, 14dcc <OnRadioTxDone+0x3c>
}
   14dc4:	b003      	add	sp, #12
   14dc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14dca:	4718      	bx	r3
}
   14dcc:	b003      	add	sp, #12
   14dce:	bd30      	pop	{r4, r5, pc}
   14dd0:	2002fc7c 	.word	0x2002fc7c
   14dd4:	20030170 	.word	0x20030170
   14dd8:	2002fc80 	.word	0x2002fc80

00014ddc <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
   14ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14de0:	2600      	movs	r6, #0
    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;

    Nvm.MacGroup2.MaxDCycle = 0;
    Nvm.MacGroup2.AggregatedDCycle = 1;
   14de2:	f04f 0801 	mov.w	r8, #1
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14de6:	4c47      	ldr	r4, [pc, #284]	; (14f04 <ResetMacParameters+0x128>)
{
   14de8:	b090      	sub	sp, #64	; 0x40

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   14dea:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   14dee:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   14df2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
   14df6:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    MacCtx.ResponseTimeoutStartTime = 0;
   14dfa:	4d43      	ldr	r5, [pc, #268]	; (14f08 <ResetMacParameters+0x12c>)
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
   14dfc:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   14e00:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   14e04:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   14e08:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
   14e0c:	f104 0384 	add.w	r3, r4, #132	; 0x84
   14e10:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
   14e14:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14e18:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
   14e1c:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
   14e20:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    Nvm.MacGroup1.AdrAckCounter = 0;
   14e24:	63a6      	str	r6, [r4, #56]	; 0x38
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
   14e26:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   14e2a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    Nvm.MacGroup2.MaxDCycle = 0;
   14e2e:	f884 61a3 	strb.w	r6, [r4, #419]	; 0x1a3
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   14e32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    Nvm.MacGroup2.DownlinkReceived = false;

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
   14e36:	f504 735e 	add.w	r3, r4, #888	; 0x378
   14e3a:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
   14e3c:	f504 735f 	add.w	r3, r4, #892	; 0x37c
   14e40:	9304      	str	r3, [sp, #16]
    params.Bands = &RegionBands;
   14e42:	4b32      	ldr	r3, [pc, #200]	; (14f0c <ResetMacParameters+0x130>)
    Nvm.MacGroup2.AggregatedDCycle = 1;
   14e44:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
    Nvm.MacGroup1.SrvAckRequested = false;
   14e48:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   14e4c:	f884 61a5 	strb.w	r6, [r4, #421]	; 0x1a5
    Nvm.MacGroup2.DownlinkReceived = false;
   14e50:	f884 61a6 	strb.w	r6, [r4, #422]	; 0x1a6
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   14e54:	a903      	add	r1, sp, #12
    MacCtx.ResponseTimeoutStartTime = 0;
   14e56:	f8c5 6500 	str.w	r6, [r5, #1280]	; 0x500
    MacCtx.ChannelsNbTransCounter = 0;
   14e5a:	f8a5 6418 	strh.w	r6, [r5, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
   14e5e:	f885 641a 	strb.w	r6, [r5, #1050]	; 0x41a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
   14e62:	f88d 8018 	strb.w	r8, [sp, #24]
    params.Bands = &RegionBands;
   14e66:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   14e68:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   14e6c:	f017 fe75 	bl	2cb5a <RegionInitDefaults>
    // Initialize channel index.
    MacCtx.Channel = 0;

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   14e70:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   14e72:	f885 63d4 	strb.w	r6, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   14e76:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14e7a:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    MacCtx.RxWindow2Config.RxContinuous = false;
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14e7e:	f505 7775 	add.w	r7, r5, #980	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14e82:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14e86:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14e8a:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14e8e:	f885 33e7 	strb.w	r3, [r5, #999]	; 0x3e7
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14e92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   14e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    MacCtx.RxWindow2Config.RxContinuous = false;
   14e96:	f885 63e5 	strb.w	r6, [r5, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   14e9a:	f885 83e6 	strb.w	r8, [r5, #998]	; 0x3e6
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14e9e:	683b      	ldr	r3, [r7, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    classBCallbacks.MacProcessNotify = NULL;
   14ea0:	e9cd 6601 	strd	r6, r6, [sp, #4]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14ea4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   14ea6:	2302      	movs	r3, #2
   14ea8:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa

    if( MacCtx.MacCallbacks != NULL )
   14eac:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
    MacCtx.Channel = 0;
   14eb0:	f885 641b 	strb.w	r6, [r5, #1051]	; 0x41b
    MacCtx.RxWindowCConfig.RxContinuous = true;
   14eb4:	f885 83f9 	strb.w	r8, [r5, #1017]	; 0x3f9
    if( MacCtx.MacCallbacks != NULL )
   14eb8:	b11b      	cbz	r3, 14ec2 <ResetMacParameters+0xe6>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
   14eba:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
   14ebc:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
   14ebe:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
   14ec0:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
   14ec2:	4b13      	ldr	r3, [pc, #76]	; (14f10 <ResetMacParameters+0x134>)
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14ec4:	a901      	add	r1, sp, #4
    classBParams.McpsIndication = &MacCtx.McpsIndication;
   14ec6:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
   14eca:	9208      	str	r2, [sp, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
   14ecc:	f1a3 0214 	sub.w	r2, r3, #20
   14ed0:	9209      	str	r2, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
   14ed2:	4a10      	ldr	r2, [pc, #64]	; (14f14 <ResetMacParameters+0x138>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
   14ed4:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
   14ed6:	3321      	adds	r3, #33	; 0x21
   14ed8:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
   14eda:	f1a2 0384 	sub.w	r3, r2, #132	; 0x84
   14ede:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
   14ee0:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   14ee4:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
   14ee6:	1d13      	adds	r3, r2, #4
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
   14ee8:	920b      	str	r2, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
   14eea:	930e      	str	r3, [sp, #56]	; 0x38
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14eec:	a807      	add	r0, sp, #28
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
   14eee:	f102 03dc 	add.w	r3, r2, #220	; 0xdc
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14ef2:	f502 725a 	add.w	r2, r2, #872	; 0x368
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
   14ef6:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14ef8:	f017 faf9 	bl	2c4ee <LoRaMacClassBInit>
}
   14efc:	b010      	add	sp, #64	; 0x40
   14efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f02:	bf00      	nop
   14f04:	2002fd14 	.word	0x2002fd14
   14f08:	20030170 	.word	0x20030170
   14f0c:	2002fc84 	.word	0x2002fc84
   14f10:	200305dc 	.word	0x200305dc
   14f14:	2002fdf0 	.word	0x2002fdf0

00014f18 <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
   14f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   14f1a:	4e12      	ldr	r6, [pc, #72]	; (14f64 <OpenContinuousRxCWindow+0x4c>)
   14f1c:	4d12      	ldr	r5, [pc, #72]	; (14f68 <OpenContinuousRxCWindow+0x50>)
   14f1e:	9600      	str	r6, [sp, #0]
   14f20:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   14f22:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
   14f26:	f995 1088 	ldrsb.w	r1, [r5, #136]	; 0x88
   14f2a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   14f2e:	f017 fe30 	bl	2cb92 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   14f32:	2302      	movs	r3, #2
   14f34:	74b3      	strb	r3, [r6, #18]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14f36:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14f3a:	4631      	mov	r1, r6
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14f3c:	74f3      	strb	r3, [r6, #19]
    MacCtx.RxWindowCConfig.RxContinuous = true;
   14f3e:	2301      	movs	r3, #1
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14f40:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   14f44:	f106 023c 	add.w	r2, r6, #60	; 0x3c
    MacCtx.RxWindowCConfig.RxContinuous = true;
   14f48:	7473      	strb	r3, [r6, #17]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14f4a:	f017 fe2f 	bl	2cbac <RegionRxConfig>
   14f4e:	b130      	cbz	r0, 14f5e <OpenContinuousRxCWindow+0x46>
    {
        Radio.Rx( 0 ); // Continuous mode
   14f50:	4b06      	ldr	r3, [pc, #24]	; (14f6c <OpenContinuousRxCWindow+0x54>)
   14f52:	2000      	movs	r0, #0
   14f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14f56:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
   14f58:	7cb3      	ldrb	r3, [r6, #18]
   14f5a:	f886 30a4 	strb.w	r3, [r6, #164]	; 0xa4
    }
}
   14f5e:	b002      	add	sp, #8
   14f60:	bd70      	pop	{r4, r5, r6, pc}
   14f62:	bf00      	nop
   14f64:	20030558 	.word	0x20030558
   14f68:	2002fd14 	.word	0x2002fd14
   14f6c:	00033a2c 	.word	0x00033a2c

00014f70 <SwitchClass>:
{
   14f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
   14f72:	4c38      	ldr	r4, [pc, #224]	; (15054 <SwitchClass+0xe4>)
{
   14f74:	4606      	mov	r6, r0
    switch( Nvm.MacGroup2.DeviceClass )
   14f76:	f894 51a0 	ldrb.w	r5, [r4, #416]	; 0x1a0
   14f7a:	2d01      	cmp	r5, #1
   14f7c:	d00d      	beq.n	14f9a <SwitchClass+0x2a>
   14f7e:	2d02      	cmp	r5, #2
   14f80:	d060      	beq.n	15044 <SwitchClass+0xd4>
   14f82:	b935      	cbnz	r5, 14f92 <SwitchClass+0x22>
            if( deviceClass == CLASS_A )
   14f84:	b938      	cbnz	r0, 14f96 <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
   14f86:	e9d4 011f 	ldrd	r0, r1, [r4, #124]	; 0x7c
   14f8a:	f104 0384 	add.w	r3, r4, #132	; 0x84
   14f8e:	e883 0003 	stmia.w	r3, {r0, r1}
                status = LORAMAC_STATUS_OK;
   14f92:	2003      	movs	r0, #3
}
   14f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
   14f96:	2801      	cmp	r0, #1
   14f98:	d106      	bne.n	14fa8 <SwitchClass+0x38>
            status = LoRaMacClassBSwitchClass( deviceClass );
   14f9a:	f017 fabe 	bl	2c51a <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
   14f9e:	2800      	cmp	r0, #0
   14fa0:	d1f8      	bne.n	14f94 <SwitchClass+0x24>
                Nvm.MacGroup2.DeviceClass = deviceClass;
   14fa2:	f884 61a0 	strb.w	r6, [r4, #416]	; 0x1a0
   14fa6:	e7f5      	b.n	14f94 <SwitchClass+0x24>
            if( deviceClass == CLASS_C )
   14fa8:	2802      	cmp	r0, #2
   14faa:	d1f2      	bne.n	14f92 <SwitchClass+0x22>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14fac:	4f2a      	ldr	r7, [pc, #168]	; (15058 <SwitchClass+0xe8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
   14fae:	f884 01a0 	strb.w	r0, [r4, #416]	; 0x1a0
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14fb2:	f507 7c7a 	add.w	ip, r7, #1000	; 0x3e8
   14fb6:	f507 7e75 	add.w	lr, r7, #980	; 0x3d4
   14fba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14fbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14fc2:	f8de 3000 	ldr.w	r3, [lr]
   14fc6:	f8cc 3000 	str.w	r3, [ip]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   14fca:	4623      	mov	r3, r4
   14fcc:	f887 63fa 	strb.w	r6, [r7, #1018]	; 0x3fa
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
   14fd0:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   14fd4:	b382      	cbz	r2, 15038 <SwitchClass+0xc8>
   14fd6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14fda:	2a02      	cmp	r2, #2
   14fdc:	d12c      	bne.n	15038 <SwitchClass+0xc8>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
   14fde:	2330      	movs	r3, #48	; 0x30
   14fe0:	fb03 4505 	mla	r5, r3, r5, r4
   14fe4:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
   14fe8:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
   14fec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   14ff0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14ff4:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
   14ff8:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14ffc:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
   15000:	2303      	movs	r3, #3
   15002:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
                        MacCtx.RxWindowCConfig.RxContinuous = true;
   15006:	2301      	movs	r3, #1
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   15008:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
                        MacCtx.RxWindowCConfig.RxContinuous = true;
   1500c:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   15010:	f887 23e8 	strb.w	r2, [r7, #1000]	; 0x3e8
                MacCtx.NodeAckRequested = false;
   15014:	2300      	movs	r3, #0
   15016:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
                Radio.Sleep( );
   1501a:	4b10      	ldr	r3, [pc, #64]	; (1505c <SwitchClass+0xec>)
   1501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1501e:	4798      	blx	r3
                OpenContinuousRxCWindow( );
   15020:	f7ff ff7a 	bl	14f18 <OpenContinuousRxCWindow>
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   15024:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   15028:	b123      	cbz	r3, 15034 <SwitchClass+0xc4>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
   1502a:	2201      	movs	r2, #1
   1502c:	2020      	movs	r0, #32
   1502e:	490c      	ldr	r1, [pc, #48]	; (15060 <SwitchClass+0xf0>)
   15030:	f002 fd8c 	bl	17b4c <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_OK;
   15034:	2000      	movs	r0, #0
   15036:	e7ad      	b.n	14f94 <SwitchClass+0x24>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
   15038:	3501      	adds	r5, #1
   1503a:	2d04      	cmp	r5, #4
   1503c:	f103 0330 	add.w	r3, r3, #48	; 0x30
   15040:	d1c6      	bne.n	14fd0 <SwitchClass+0x60>
   15042:	e7e7      	b.n	15014 <SwitchClass+0xa4>
            if( deviceClass == CLASS_A )
   15044:	2800      	cmp	r0, #0
   15046:	d1a4      	bne.n	14f92 <SwitchClass+0x22>
                Radio.Sleep( );
   15048:	4b04      	ldr	r3, [pc, #16]	; (1505c <SwitchClass+0xec>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
   1504a:	f884 01a0 	strb.w	r0, [r4, #416]	; 0x1a0
                Radio.Sleep( );
   1504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15050:	4798      	blx	r3
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   15052:	e7e7      	b.n	15024 <SwitchClass+0xb4>
   15054:	2002fd14 	.word	0x2002fd14
   15058:	20030170 	.word	0x20030170
   1505c:	00033a2c 	.word	0x00033a2c
   15060:	2002feb4 	.word	0x2002feb4

00015064 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
   15064:	b570      	push	{r4, r5, r6, lr}
   15066:	460c      	mov	r4, r1
    Radio.Standby( );
   15068:	4e0a      	ldr	r6, [pc, #40]	; (15094 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   1506a:	4d0b      	ldr	r5, [pc, #44]	; (15098 <RxWindowSetup.constprop.0+0x34>)
    TimerStop( rxTimer );
   1506c:	f7fe f8be 	bl	131ec <TimerStop>
    Radio.Standby( );
   15070:	6b33      	ldr	r3, [r6, #48]	; 0x30
   15072:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   15074:	4621      	mov	r1, r4
   15076:	4a09      	ldr	r2, [pc, #36]	; (1509c <RxWindowSetup.constprop.0+0x38>)
   15078:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   1507c:	f017 fd96 	bl	2cbac <RegionRxConfig>
   15080:	b130      	cbz	r0, 15090 <RxWindowSetup.constprop.0+0x2c>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
   15082:	6b73      	ldr	r3, [r6, #52]	; 0x34
   15084:	6e68      	ldr	r0, [r5, #100]	; 0x64
   15086:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
   15088:	7ca2      	ldrb	r2, [r4, #18]
   1508a:	4b05      	ldr	r3, [pc, #20]	; (150a0 <RxWindowSetup.constprop.0+0x3c>)
   1508c:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
}
   15090:	bd70      	pop	{r4, r5, r6, pc}
   15092:	bf00      	nop
   15094:	00033a2c 	.word	0x00033a2c
   15098:	2002fd14 	.word	0x2002fd14
   1509c:	20030594 	.word	0x20030594
   150a0:	20030170 	.word	0x20030170

000150a4 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
   150a4:	480e      	ldr	r0, [pc, #56]	; (150e0 <OnRxWindow1TimerEvent+0x3c>)
   150a6:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   150aa:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
   150ae:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
   150b2:	4b0c      	ldr	r3, [pc, #48]	; (150e4 <OnRxWindow1TimerEvent+0x40>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   150b4:	f500 7062 	add.w	r0, r0, #904	; 0x388
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
   150b8:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
   150bc:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   150c0:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   150c4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   150c8:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    MacCtx.RxWindow1Config.RxContinuous = false;
   150cc:	2200      	movs	r2, #0
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   150ce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
    MacCtx.RxWindow1Config.RxContinuous = false;
   150d2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
   150d6:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   150da:	f7ff bfc3 	b.w	15064 <RxWindowSetup.constprop.0>
   150de:	bf00      	nop
   150e0:	20030170 	.word	0x20030170
   150e4:	2002fd14 	.word	0x2002fd14

000150e8 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   150e8:	480f      	ldr	r0, [pc, #60]	; (15128 <OnRxWindow2TimerEvent+0x40>)
   150ea:	f890 348c 	ldrb.w	r3, [r0, #1164]	; 0x48c
   150ee:	b1d3      	cbz	r3, 15126 <OnRxWindow2TimerEvent+0x3e>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   150f0:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   150f4:	f500 7175 	add.w	r1, r0, #980	; 0x3d4
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   150f8:	f880 33d4 	strb.w	r3, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   150fc:	4b0b      	ldr	r3, [pc, #44]	; (1512c <OnRxWindow2TimerEvent+0x44>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   150fe:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   15102:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   15104:	6382      	str	r2, [r0, #56]	; 0x38
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   15106:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1510a:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1510e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    MacCtx.RxWindow2Config.RxContinuous = false;
   15112:	2200      	movs	r2, #0
   15114:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   15118:	2201      	movs	r2, #1
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1511a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   1511e:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   15122:	f7ff bf9f 	b.w	15064 <RxWindowSetup.constprop.0>
}
   15126:	4770      	bx	lr
   15128:	20030170 	.word	0x20030170
   1512c:	2002fd14 	.word	0x2002fd14

00015130 <StopRetransmission.isra.0>:
        counter++;
    }
    return counter;
}

static bool StopRetransmission( void )
   15130:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
    // Increase Rejoin Uplinks counter
    if( Nvm.MacGroup2.Rejoin0UplinksLimit != 0 )
   15132:	4d21      	ldr	r5, [pc, #132]	; (151b8 <StopRetransmission.isra.0+0x88>)
   15134:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   15138:	b113      	cbz	r3, 15140 <StopRetransmission.isra.0+0x10>
    {
        Nvm.MacGroup1.Rejoin0UplinksCounter++;
   1513a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1513c:	3301      	adds	r3, #1
   1513e:	64eb      	str	r3, [r5, #76]	; 0x4c
    }

    if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   15140:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   15144:	4c1d      	ldr	r4, [pc, #116]	; (151bc <StopRetransmission.isra.0+0x8c>)
   15146:	b1cb      	cbz	r3, 1517c <StopRetransmission.isra.0+0x4c>
    {
        MacCommand_t* macCmd;
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
   15148:	200b      	movs	r0, #11
   1514a:	a901      	add	r1, sp, #4
   1514c:	f002 fd68 	bl	17c20 <LoRaMacCommandsGetCmd>
   15150:	b9a0      	cbnz	r0, 1517c <StopRetransmission.isra.0+0x4c>
        {
            // Increase the Rekey Uplinks counter
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   15152:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52

            /*
             * If the device has not received a RekeyConf within
             * the first ADR_ACK_LIMIT uplinks it SHALL revert to the Join state.
             */
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   15156:	f8b4 23fc 	ldrh.w	r2, [r4, #1020]	; 0x3fc
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   1515a:	3301      	adds	r3, #1
   1515c:	b29b      	uxth	r3, r3
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   1515e:	429a      	cmp	r2, r3
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   15160:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   15164:	d10a      	bne.n	1517c <StopRetransmission.isra.0+0x4c>
            {
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
                MacCtx.MacFlags.Bits.MlmeInd = 1;
   15166:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   1516a:	f885 01b8 	strb.w	r0, [r5, #440]	; 0x1b8
                MacCtx.MacFlags.Bits.MlmeInd = 1;
   1516e:	f043 0308 	orr.w	r3, r3, #8
   15172:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
   15176:	230e      	movs	r3, #14
   15178:	f884 346c 	strb.w	r3, [r4, #1132]	; 0x46c
            }
        }
    }

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
   1517c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   15180:	0799      	lsls	r1, r3, #30
   15182:	d503      	bpl.n	1518c <StopRetransmission.isra.0+0x5c>
   15184:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   15188:	2b01      	cmp	r3, #1
   1518a:	d907      	bls.n	1519c <StopRetransmission.isra.0+0x6c>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
   1518c:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
   15190:	b123      	cbz	r3, 1519c <StopRetransmission.isra.0+0x6c>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
   15192:	6bab      	ldr	r3, [r5, #56]	; 0x38
    if( counter < ADR_ACK_COUNTER_MAX )
   15194:	1c5a      	adds	r2, r3, #1
        counter++;
   15196:	bf18      	it	ne
   15198:	3301      	addne	r3, #1
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
   1519a:	63ab      	str	r3, [r5, #56]	; 0x38
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
   1519c:	2300      	movs	r3, #0
   1519e:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
   151a2:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   151a6:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   151aa:	f023 0302 	bic.w	r3, r3, #2
   151ae:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return true;
}
   151b2:	b003      	add	sp, #12
   151b4:	bd30      	pop	{r4, r5, pc}
   151b6:	bf00      	nop
   151b8:	2002fd14 	.word	0x2002fd14
   151bc:	20030170 	.word	0x20030170

000151c0 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
   151c0:	4b07      	ldr	r3, [pc, #28]	; (151e0 <LoRaMacIsBusy+0x20>)
   151c2:	781b      	ldrb	r3, [r3, #0]
   151c4:	07db      	lsls	r3, r3, #31
   151c6:	d409      	bmi.n	151dc <LoRaMacIsBusy+0x1c>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
   151c8:	4b06      	ldr	r3, [pc, #24]	; (151e4 <LoRaMacIsBusy+0x24>)
   151ca:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
   151ce:	b92a      	cbnz	r2, 151dc <LoRaMacIsBusy+0x1c>
   151d0:	f893 048e 	ldrb.w	r0, [r3, #1166]	; 0x48e
   151d4:	3801      	subs	r0, #1
   151d6:	bf18      	it	ne
   151d8:	2001      	movne	r0, #1
   151da:	4770      	bx	lr
        return true;
   151dc:	2001      	movs	r0, #1
}
   151de:	4770      	bx	lr
   151e0:	2002fc80 	.word	0x2002fc80
   151e4:	20030170 	.word	0x20030170

000151e8 <PrepareFrame>:
{
   151e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   151ec:	4690      	mov	r8, r2
    MacCtx.PktBufferLen = 0;
   151ee:	2200      	movs	r2, #0
        fBufferSize = 0;
   151f0:	1e1d      	subs	r5, r3, #0
{
   151f2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
        fBufferSize = 0;
   151f6:	bf08      	it	eq
   151f8:	4691      	moveq	r9, r2
{
   151fa:	4607      	mov	r7, r0
    MacCtx.PktBufferLen = 0;
   151fc:	4c49      	ldr	r4, [pc, #292]	; (15324 <PrepareFrame+0x13c>)
    size_t macCmdsSize = 0;
   151fe:	e9cd 2200 	strd	r2, r2, [sp]
    MacCtx.PktBufferLen = 0;
   15202:	8022      	strh	r2, [r4, #0]
    MacCtx.NodeAckRequested = false;
   15204:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
{
   15208:	460e      	mov	r6, r1
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
   1520a:	464a      	mov	r2, r9
   1520c:	4629      	mov	r1, r5
   1520e:	f504 709c 	add.w	r0, r4, #312	; 0x138
   15212:	f016 fcae 	bl	2bb72 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
   15216:	fa5f f289 	uxtb.w	r2, r9
   1521a:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
   1521e:	783b      	ldrb	r3, [r7, #0]
   15220:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
   15222:	783b      	ldrb	r3, [r7, #0]
   15224:	095b      	lsrs	r3, r3, #5
   15226:	2b04      	cmp	r3, #4
   15228:	d007      	beq.n	1523a <PrepareFrame+0x52>
   1522a:	2b07      	cmp	r3, #7
   1522c:	d069      	beq.n	15302 <PrepareFrame+0x11a>
   1522e:	2b02      	cmp	r3, #2
   15230:	d006      	beq.n	15240 <PrepareFrame+0x58>
   15232:	2002      	movs	r0, #2
}
   15234:	b003      	add	sp, #12
   15236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.NodeAckRequested = true;
   1523a:	2301      	movs	r3, #1
   1523c:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
   15240:	2304      	movs	r3, #4
   15242:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   15246:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
   15248:	4d37      	ldr	r5, [pc, #220]	; (15328 <PrepareFrame+0x140>)
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   1524a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
   1524e:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
   15252:	783b      	ldrb	r3, [r7, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   15254:	4f35      	ldr	r7, [pc, #212]	; (1532c <PrepareFrame+0x144>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
   15256:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   1525a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
            MacCtx.TxMsg.Message.Data.FPort = fPort;
   1525e:	f884 8128 	strb.w	r8, [r4, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   15262:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   15266:	7833      	ldrb	r3, [r6, #0]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   15268:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   1526a:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
   1526e:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
   15272:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
   15276:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   1527a:	f002 ff47 	bl	1810c <LoRaMacCryptoGetFCntUp>
   1527e:	2800      	cmp	r0, #0
   15280:	d14e      	bne.n	15320 <PrepareFrame+0x138>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
   15282:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.AckReceived = false;
   15284:	f8a4 0448 	strh.w	r0, [r4, #1096]	; 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   15288:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
   1528a:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
   1528e:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   15292:	f002 fcf3 	bl	17c7c <LoRaMacCommandsGetSizeSerializedCmds>
   15296:	2800      	cmp	r0, #0
   15298:	d140      	bne.n	1531c <PrepareFrame+0x134>
            if( macCmdsSize > 0 )
   1529a:	9b01      	ldr	r3, [sp, #4]
   1529c:	b90b      	cbnz	r3, 152a2 <PrepareFrame+0xba>
    return LORAMAC_STATUS_OK;
   1529e:	2000      	movs	r0, #0
   152a0:	e7c8      	b.n	15234 <PrepareFrame+0x4c>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
   152a2:	f997 0049 	ldrsb.w	r0, [r7, #73]	; 0x49
   152a6:	f7ff fc9d 	bl	14be4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
   152aa:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
   152ae:	b1cb      	cbz	r3, 152e4 <PrepareFrame+0xfc>
   152b0:	9b01      	ldr	r3, [sp, #4]
   152b2:	2b0f      	cmp	r3, #15
   152b4:	d80e      	bhi.n	152d4 <PrepareFrame+0xec>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
   152b6:	200f      	movs	r0, #15
   152b8:	f505 728b 	add.w	r2, r5, #278	; 0x116
   152bc:	a901      	add	r1, sp, #4
   152be:	f002 fce9 	bl	17c94 <LoRaMacCommandsSerializeCmds>
   152c2:	bb58      	cbnz	r0, 1531c <PrepareFrame+0x134>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
   152c4:	7833      	ldrb	r3, [r6, #0]
   152c6:	9a01      	ldr	r2, [sp, #4]
   152c8:	f362 0303 	bfi	r3, r2, #0, #4
   152cc:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   152ce:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
   152d2:	e7e4      	b.n	1529e <PrepareFrame+0xb6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
   152d4:	f205 5202 	addw	r2, r5, #1282	; 0x502
   152d8:	a901      	add	r1, sp, #4
   152da:	f002 fcdb 	bl	17c94 <LoRaMacCommandsSerializeCmds>
   152de:	b9e8      	cbnz	r0, 1531c <PrepareFrame+0x134>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
   152e0:	200a      	movs	r0, #10
   152e2:	e7a7      	b.n	15234 <PrepareFrame+0x4c>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
   152e4:	f205 5502 	addw	r5, r5, #1282	; 0x502
   152e8:	462a      	mov	r2, r5
   152ea:	a901      	add	r1, sp, #4
   152ec:	f002 fcd2 	bl	17c94 <LoRaMacCommandsSerializeCmds>
   152f0:	b9a0      	cbnz	r0, 1531c <PrepareFrame+0x134>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
   152f2:	9b01      	ldr	r3, [sp, #4]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
   152f4:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
   152f8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
   152fc:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   15300:	e7cd      	b.n	1529e <PrepareFrame+0xb6>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
   15302:	2d00      	cmp	r5, #0
   15304:	d0cb      	beq.n	1529e <PrepareFrame+0xb6>
   15306:	2a00      	cmp	r2, #0
   15308:	d0c9      	beq.n	1529e <PrepareFrame+0xb6>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
   1530a:	4629      	mov	r1, r5
   1530c:	1ce0      	adds	r0, r4, #3
   1530e:	f016 fc30 	bl	2bb72 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
   15312:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
   15316:	3301      	adds	r3, #1
   15318:	8023      	strh	r3, [r4, #0]
   1531a:	e7c0      	b.n	1529e <PrepareFrame+0xb6>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   1531c:	2013      	movs	r0, #19
   1531e:	e789      	b.n	15234 <PrepareFrame+0x4c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
   15320:	2012      	movs	r0, #18
   15322:	e787      	b.n	15234 <PrepareFrame+0x4c>
   15324:	20030170 	.word	0x20030170
   15328:	20030172 	.word	0x20030172
   1532c:	2002fd14 	.word	0x2002fd14

00015330 <SendFrameOnChannel>:
    int8_t txPower = 0;
   15330:	2300      	movs	r3, #0
{
   15332:	b570      	push	{r4, r5, r6, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15334:	4d4a      	ldr	r5, [pc, #296]	; (15460 <SendFrameOnChannel+0x130>)
{
   15336:	b086      	sub	sp, #24
    int8_t txPower = 0;
   15338:	f88d 3003 	strb.w	r3, [sp, #3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   1533c:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    txConfig.PktLen = MacCtx.PktBufferLen;
   15340:	4c48      	ldr	r4, [pc, #288]	; (15464 <SendFrameOnChannel+0x134>)
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15342:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
   15346:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
{
   1534a:	4606      	mov	r6, r0
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
   1534c:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
   15350:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    txConfig.Channel = channel;
   15354:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
   15358:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   1535a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   1535e:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   15362:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
   15364:	8823      	ldrh	r3, [r4, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   15366:	f10d 0203 	add.w	r2, sp, #3
    txConfig.PktLen = MacCtx.PktBufferLen;
   1536a:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   1536e:	a902      	add	r1, sp, #8
   15370:	f204 431c 	addw	r3, r4, #1052	; 0x41c
   15374:	f017 fc23 	bl	2cbbe <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   15378:	2301      	movs	r3, #1
   1537a:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   1537e:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    MacCtx.McpsConfirm.Channel = channel;
   15382:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15386:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
   1538a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1538e:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
   15392:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
   15396:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
   1539a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
   1539e:	f017 f8b7 	bl	2c510 <LoRaMacClassBIsBeaconModeActive>
   153a2:	b9b0      	cbnz	r0, 153d2 <SendFrameOnChannel+0xa2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   153a4:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   153a8:	2b01      	cmp	r3, #1
   153aa:	d101      	bne.n	153b0 <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
   153ac:	f017 f8c4 	bl	2c538 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
   153b0:	f017 f8b1 	bl	2c516 <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
   153b4:	2300      	movs	r3, #0
   153b6:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
   153b8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
   153bc:	f995 5049 	ldrsb.w	r5, [r5, #73]	; 0x49
   153c0:	f894 641b 	ldrb.w	r6, [r4, #1051]	; 0x41b
    switch( MacCtx.TxMsg.Type )
   153c4:	2b04      	cmp	r3, #4
   153c6:	d80c      	bhi.n	153e2 <SendFrameOnChannel+0xb2>
   153c8:	e8df f003 	tbb	[pc, r3]
   153cc:	0b312d0e 	.word	0x0b312d0e
   153d0:	35          	.byte	0x35
   153d1:	00          	.byte	0x00
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
   153d2:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
   153d6:	f017 f8ad 	bl	2c534 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
   153da:	2800      	cmp	r0, #0
   153dc:	d0e2      	beq.n	153a4 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
   153de:	2010      	movs	r0, #16
   153e0:	e000      	b.n	153e4 <SendFrameOnChannel+0xb4>
            return LORAMAC_STATUS_PARAMETER_INVALID;
   153e2:	2003      	movs	r0, #3
}
   153e4:	b006      	add	sp, #24
   153e6:	bd70      	pop	{r4, r5, r6, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
   153e8:	481f      	ldr	r0, [pc, #124]	; (15468 <SendFrameOnChannel+0x138>)
   153ea:	f002 fec9 	bl	18180 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
   153ee:	2800      	cmp	r0, #0
   153f0:	d132      	bne.n	15458 <SendFrameOnChannel+0x128>
    MacCtx.ResponseTimeoutStartTime = 0;
   153f2:	2500      	movs	r5, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   153f4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   153f8:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   153fc:	f043 0302 	orr.w	r3, r3, #2
   15400:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
   15404:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   15408:	4818      	ldr	r0, [pc, #96]	; (1546c <SendFrameOnChannel+0x13c>)
    MacCtx.ChannelsNbTransCounter++;
   1540a:	3301      	adds	r3, #1
   1540c:	b2db      	uxtb	r3, r3
   1540e:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
   15412:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   15416:	4b16      	ldr	r3, [pc, #88]	; (15470 <SendFrameOnChannel+0x140>)
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin1.BufSize;
   15418:	8021      	strh	r1, [r4, #0]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   1541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    MacCtx.ResponseTimeoutStartTime = 0;
   1541c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   15420:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
   15422:	4628      	mov	r0, r5
   15424:	e7de      	b.n	153e4 <SendFrameOnChannel+0xb4>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
   15426:	4810      	ldr	r0, [pc, #64]	; (15468 <SendFrameOnChannel+0x138>)
   15428:	f002 ff00 	bl	1822c <LoRaMacCryptoPrepareReJoinType1>
   1542c:	e7df      	b.n	153ee <SendFrameOnChannel+0xbe>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
   1542e:	480e      	ldr	r0, [pc, #56]	; (15468 <SendFrameOnChannel+0x138>)
   15430:	f002 ff28 	bl	18284 <LoRaMacCryptoPrepareReJoinType0or2>
   15434:	e7db      	b.n	153ee <SendFrameOnChannel+0xbe>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   15436:	a801      	add	r0, sp, #4
   15438:	f002 fe68 	bl	1810c <LoRaMacCryptoGetFCntUp>
   1543c:	b970      	cbnz	r0, 1545c <SendFrameOnChannel+0x12c>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
   1543e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   15442:	b113      	cbz	r3, 1544a <SendFrameOnChannel+0x11a>
                fCntUp -= 1;
   15444:	9b01      	ldr	r3, [sp, #4]
   15446:	3b01      	subs	r3, #1
   15448:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
   1544a:	4632      	mov	r2, r6
   1544c:	4b06      	ldr	r3, [pc, #24]	; (15468 <SendFrameOnChannel+0x138>)
   1544e:	9801      	ldr	r0, [sp, #4]
   15450:	b2e9      	uxtb	r1, r5
   15452:	f002 ff41 	bl	182d8 <LoRaMacCryptoSecureMessage>
   15456:	e7ca      	b.n	153ee <SendFrameOnChannel+0xbe>
                return LORAMAC_STATUS_CRYPTO_ERROR;
   15458:	2011      	movs	r0, #17
   1545a:	e7c3      	b.n	153e4 <SendFrameOnChannel+0xb4>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
   1545c:	2012      	movs	r0, #18
   1545e:	e7c1      	b.n	153e4 <SendFrameOnChannel+0xb4>
   15460:	2002fd14 	.word	0x2002fd14
   15464:	20030170 	.word	0x20030170
   15468:	20030278 	.word	0x20030278
   1546c:	20030172 	.word	0x20030172
   15470:	00033a2c 	.word	0x00033a2c

00015474 <ScheduleTx>:
{
   15474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15478:	b08e      	sub	sp, #56	; 0x38
   1547a:	4607      	mov	r7, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
   1547c:	f017 f842 	bl	2c504 <LoRaMacClassBIsBeaconExpected>
   15480:	2800      	cmp	r0, #0
   15482:	f040 80d3 	bne.w	1562c <ScheduleTx+0x1b8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   15486:	4c6a      	ldr	r4, [pc, #424]	; (15630 <ScheduleTx+0x1bc>)
   15488:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   1548c:	2b01      	cmp	r3, #1
   1548e:	d009      	beq.n	154a4 <ScheduleTx+0x30>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
   15490:	6c23      	ldr	r3, [r4, #64]	; 0x40
   15492:	4d68      	ldr	r5, [pc, #416]	; (15634 <ScheduleTx+0x1c0>)
   15494:	b19b      	cbz	r3, 154be <ScheduleTx+0x4a>
    switch( MacCtx.TxMsg.Type )
   15496:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   1549a:	b1c3      	cbz	r3, 154ce <ScheduleTx+0x5a>
   1549c:	2b04      	cmp	r3, #4
   1549e:	d01c      	beq.n	154da <ScheduleTx+0x66>
   154a0:	2603      	movs	r6, #3
   154a2:	e003      	b.n	154ac <ScheduleTx+0x38>
        if( LoRaMacClassBIsPingExpected( ) == true )
   154a4:	f017 f830 	bl	2c508 <LoRaMacClassBIsPingExpected>
   154a8:	b120      	cbz	r0, 154b4 <ScheduleTx+0x40>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
   154aa:	260f      	movs	r6, #15
}
   154ac:	4630      	mov	r0, r6
   154ae:	b00e      	add	sp, #56	; 0x38
   154b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
   154b4:	f017 f82a 	bl	2c50c <LoRaMacClassBIsMulticastExpected>
   154b8:	2800      	cmp	r0, #0
   154ba:	d0e9      	beq.n	15490 <ScheduleTx+0x1c>
   154bc:	e7f5      	b.n	154aa <ScheduleTx+0x36>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
   154be:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   154c2:	f8d5 241c 	ldr.w	r2, [r5, #1052]	; 0x41c
   154c6:	3b01      	subs	r3, #1
   154c8:	4353      	muls	r3, r2
   154ca:	6423      	str	r3, [r4, #64]	; 0x40
   154cc:	e7e3      	b.n	15496 <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
   154ce:	485a      	ldr	r0, [pc, #360]	; (15638 <ScheduleTx+0x1c4>)
   154d0:	f017 fa1f 	bl	2c912 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
   154d4:	b128      	cbz	r0, 154e2 <ScheduleTx+0x6e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
   154d6:	2611      	movs	r6, #17
   154d8:	e7e8      	b.n	154ac <ScheduleTx+0x38>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
   154da:	4857      	ldr	r0, [pc, #348]	; (15638 <ScheduleTx+0x1c4>)
   154dc:	f017 fabd 	bl	2ca5a <LoRaMacSerializerData>
   154e0:	e7f8      	b.n	154d4 <ScheduleTx+0x60>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   154e2:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   154e6:	f10d 0818 	add.w	r8, sp, #24
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   154ea:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
   154ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   154ee:	4640      	mov	r0, r8
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
   154f0:	9308      	str	r3, [sp, #32]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   154f2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   154f6:	ae02      	add	r6, sp, #8
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   154f8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
   154fc:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   15500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   15504:	f016 fbca 	bl	2bc9c <SysTimeGetMcuTime>
   15508:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1550c:	4630      	mov	r0, r6
   1550e:	9300      	str	r3, [sp, #0]
   15510:	e898 0006 	ldmia.w	r8, {r1, r2}
   15514:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
   15518:	f016 fb61 	bl	2bbde <SysTimeSub>
   1551c:	e896 0003 	ldmia.w	r6, {r0, r1}
   15520:	ab0b      	add	r3, sp, #44	; 0x2c
   15522:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
   15526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    nextChan.Joined = true;
   15528:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
   1552a:	9309      	str	r3, [sp, #36]	; 0x24
    nextChan.LastTxIsJoinRequest = false;
   1552c:	2300      	movs	r3, #0
   1552e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    nextChan.PktLen = MacCtx.PktBufferLen;
   15532:	882b      	ldrh	r3, [r5, #0]
    nextChan.Joined = true;
   15534:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    nextChan.PktLen = MacCtx.PktBufferLen;
   15538:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   1553c:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
   15540:	b91b      	cbnz	r3, 1554a <ScheduleTx+0xd6>
        nextChan.LastTxIsJoinRequest = true;
   15542:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        nextChan.Joined = false;
   15546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
   1554a:	4b3c      	ldr	r3, [pc, #240]	; (1563c <ScheduleTx+0x1c8>)
   1554c:	a908      	add	r1, sp, #32
   1554e:	9300      	str	r3, [sp, #0]
   15550:	4b3b      	ldr	r3, [pc, #236]	; (15640 <ScheduleTx+0x1cc>)
   15552:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15556:	f1a3 02e1 	sub.w	r2, r3, #225	; 0xe1
   1555a:	f017 fb72 	bl	2cc42 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
   1555e:	4606      	mov	r6, r0
   15560:	b1a0      	cbz	r0, 1558c <ScheduleTx+0x118>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
   15562:	280b      	cmp	r0, #11
   15564:	d1a2      	bne.n	154ac <ScheduleTx+0x38>
   15566:	2f00      	cmp	r7, #0
   15568:	d0a0      	beq.n	154ac <ScheduleTx+0x38>
            if( MacCtx.DutyCycleWaitTime != 0 )
   1556a:	f8d5 14fc 	ldr.w	r1, [r5, #1276]	; 0x4fc
   1556e:	b159      	cbz	r1, 15588 <ScheduleTx+0x114>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
   15570:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
   15574:	4833      	ldr	r0, [pc, #204]	; (15644 <ScheduleTx+0x1d0>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
   15576:	f043 0320 	orr.w	r3, r3, #32
   1557a:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
   1557e:	f016 fbfc 	bl	2bd7a <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
   15582:	4830      	ldr	r0, [pc, #192]	; (15644 <ScheduleTx+0x1d0>)
   15584:	f7fd fdbc 	bl	13100 <TimerStart>
            return LORAMAC_STATUS_OK;
   15588:	2600      	movs	r6, #0
   1558a:	e78f      	b.n	154ac <ScheduleTx+0x38>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   1558c:	f894 8058 	ldrb.w	r8, [r4, #88]	; 0x58
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
   15590:	f994 3079 	ldrsb.w	r3, [r4, #121]	; 0x79
   15594:	f994 2049 	ldrsb.w	r2, [r4, #73]	; 0x49
   15598:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1559c:	4640      	mov	r0, r8
   1559e:	f017 fb5e 	bl	2cc5e <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   155a2:	4f29      	ldr	r7, [pc, #164]	; (15648 <ScheduleTx+0x1d4>)
   155a4:	b241      	sxtb	r1, r0
   155a6:	9700      	str	r7, [sp, #0]
   155a8:	4640      	mov	r0, r8
   155aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   155ac:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   155b0:	3714      	adds	r7, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   155b2:	f017 faee 	bl	2cb92 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   155b6:	9700      	str	r7, [sp, #0]
   155b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   155ba:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   155be:	f994 1080 	ldrsb.w	r1, [r4, #128]	; 0x80
   155c2:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   155c6:	f017 fae4 	bl	2cb92 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   155ca:	f8d5 13cc 	ldr.w	r1, [r5, #972]	; 0x3cc
   155ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   155d0:	f8d5 23e0 	ldr.w	r2, [r5, #992]	; 0x3e0
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   155d4:	440b      	add	r3, r1
   155d6:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   155da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   155dc:	4413      	add	r3, r2
   155de:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   155e2:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
   155e6:	b96b      	cbnz	r3, 15604 <ScheduleTx+0x190>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   155e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   155ea:	440b      	add	r3, r1
   155ec:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   155f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   155f2:	4413      	add	r3, r2
   155f4:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    return SendFrameOnChannel( MacCtx.Channel );
   155f8:	f895 041b 	ldrb.w	r0, [r5, #1051]	; 0x41b
   155fc:	f7ff fe98 	bl	15330 <SendFrameOnChannel>
   15600:	4606      	mov	r6, r0
   15602:	e753      	b.n	154ac <ScheduleTx+0x38>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   15604:	a805      	add	r0, sp, #20
    size_t macCmdsSize = 0;
   15606:	9605      	str	r6, [sp, #20]
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   15608:	f002 fb38 	bl	17c7c <LoRaMacCommandsGetSizeSerializedCmds>
   1560c:	b960      	cbnz	r0, 15628 <ScheduleTx+0x1b4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
   1560e:	f994 0049 	ldrsb.w	r0, [r4, #73]	; 0x49
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
   15612:	f895 6237 	ldrb.w	r6, [r5, #567]	; 0x237
   15616:	f89d 7014 	ldrb.w	r7, [sp, #20]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
   1561a:	f7ff fae3 	bl	14be4 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
   1561e:	443e      	add	r6, r7
   15620:	42b0      	cmp	r0, r6
   15622:	d2e9      	bcs.n	155f8 <ScheduleTx+0x184>
            return LORAMAC_STATUS_LENGTH_ERROR;
   15624:	2608      	movs	r6, #8
   15626:	e741      	b.n	154ac <ScheduleTx+0x38>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   15628:	2613      	movs	r6, #19
   1562a:	e73f      	b.n	154ac <ScheduleTx+0x38>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
   1562c:	260e      	movs	r6, #14
   1562e:	e73d      	b.n	154ac <ScheduleTx+0x38>
   15630:	2002fd14 	.word	0x2002fd14
   15634:	20030170 	.word	0x20030170
   15638:	20030278 	.word	0x20030278
   1563c:	2002fd54 	.word	0x2002fd54
   15640:	2003066c 	.word	0x2003066c
   15644:	200304e0 	.word	0x200304e0
   15648:	20030530 	.word	0x20030530

0001564c <OnTxDelayedTimerEvent>:
{
   1564c:	b510      	push	{r4, lr}
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   1564e:	4c18      	ldr	r4, [pc, #96]	; (156b0 <OnTxDelayedTimerEvent+0x64>)
    TimerStop( &MacCtx.TxDelayedTimer );
   15650:	4818      	ldr	r0, [pc, #96]	; (156b4 <OnTxDelayedTimerEvent+0x68>)
   15652:	f7fd fdcb 	bl	131ec <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   15656:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
   1565a:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   1565e:	f023 0320 	bic.w	r3, r3, #32
   15662:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( startTimeInMs != 0 )
   15666:	b148      	cbz	r0, 1567c <OnTxDelayedTimerEvent+0x30>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
   15668:	f016 fb9f 	bl	2bdaa <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
   1566c:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   15670:	d904      	bls.n	1567c <OnTxDelayedTimerEvent+0x30>
            Nvm.MacGroup1.SrvAckRequested = false;
   15672:	2200      	movs	r2, #0
   15674:	4b10      	ldr	r3, [pc, #64]	; (156b8 <OnTxDelayedTimerEvent+0x6c>)
   15676:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   1567a:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
   1567c:	2001      	movs	r0, #1
   1567e:	f7ff fef9 	bl	15474 <ScheduleTx>
   15682:	2800      	cmp	r0, #0
   15684:	d0f9      	beq.n	1567a <OnTxDelayedTimerEvent+0x2e>
   15686:	280b      	cmp	r0, #11
   15688:	d0f7      	beq.n	1567a <OnTxDelayedTimerEvent+0x2e>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
   1568a:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   1568c:	4b0a      	ldr	r3, [pc, #40]	; (156b8 <OnTxDelayedTimerEvent+0x6c>)
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
   1568e:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15692:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   15696:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
   1569a:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   1569e:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
   156a2:	f002 fbbf 	bl	17e24 <LoRaMacConfirmQueueSetStatusCmn>
}
   156a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
   156aa:	f7ff bd41 	b.w	15130 <StopRetransmission.isra.0>
   156ae:	bf00      	nop
   156b0:	20030170 	.word	0x20030170
   156b4:	200304e0 	.word	0x200304e0
   156b8:	2002fd14 	.word	0x2002fd14

000156bc <Send>:
{
   156bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   156c0:	4c3b      	ldr	r4, [pc, #236]	; (157b0 <Send+0xf4>)
   156c2:	460e      	mov	r6, r1
   156c4:	4617      	mov	r7, r2
   156c6:	4699      	mov	r9, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   156c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   156ca:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   156ce:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
{
   156d2:	b08b      	sub	sp, #44	; 0x2c
   156d4:	4605      	mov	r5, r0
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
   156d6:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
   156da:	ba5b      	rev16	r3, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   156dc:	9104      	str	r1, [sp, #16]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   156de:	2a00      	cmp	r2, #0
   156e0:	d064      	beq.n	157ac <Send+0xf0>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
   156e2:	f894 21a3 	ldrb.w	r2, [r4, #419]	; 0x1a3
   156e6:	b902      	cbnz	r2, 156ea <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
   156e8:	6422      	str	r2, [r4, #64]	; 0x40
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
   156ea:	f04f 0200 	mov.w	r2, #0
   156ee:	f894 01a2 	ldrb.w	r0, [r4, #418]	; 0x1a2
   156f2:	f360 12c7 	bfi	r2, r0, #7, #1
   156f6:	f88d 200c 	strb.w	r2, [sp, #12]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   156fa:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
   156fe:	2a01      	cmp	r2, #1
        fCtrl.Bits.FPending      = 1;
   15700:	bf02      	ittt	eq
   15702:	f89d 200c 	ldrbeq.w	r2, [sp, #12]
   15706:	f042 0210 	orreq.w	r2, r2, #16
   1570a:	f88d 200c 	strbeq.w	r2, [sp, #12]
    if( Nvm.MacGroup1.SrvAckRequested == true )
   1570e:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   15712:	b12a      	cbz	r2, 15720 <Send+0x64>
        fCtrl.Bits.Ack = 1;
   15714:	f89d 200c 	ldrb.w	r2, [sp, #12]
   15718:	f042 0220 	orr.w	r2, r2, #32
   1571c:	f88d 200c 	strb.w	r2, [sp, #12]
    adrNext.UpdateChanMask = true;
   15720:	2201      	movs	r2, #1
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15722:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15726:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    adrNext.UpdateChanMask = true;
   1572a:	f88d 2014 	strb.w	r2, [sp, #20]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   1572e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15732:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   15736:	4a1f      	ldr	r2, [pc, #124]	; (157b4 <Send+0xf8>)
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15738:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
   1573c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   15740:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    adrNext.Region = Nvm.MacGroup2.Region;
   15744:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   15748:	ab04      	add	r3, sp, #16
   1574a:	9300      	str	r3, [sp, #0]
   1574c:	4b1a      	ldr	r3, [pc, #104]	; (157b8 <Send+0xfc>)
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
   1574e:	f88d 0015 	strb.w	r0, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   15752:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   15754:	9207      	str	r2, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   15756:	f1a3 012f 	sub.w	r1, r3, #47	; 0x2f
   1575a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1575e:	a805      	add	r0, sp, #20
   15760:	f016 fe57 	bl	2c412 <LoRaMacAdrCalcNext>
   15764:	f89d 300c 	ldrb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
   15768:	4632      	mov	r2, r6
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   1576a:	f360 1386 	bfi	r3, r0, #6, #1
   1576e:	f88d 300c 	strb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
   15772:	4628      	mov	r0, r5
   15774:	463b      	mov	r3, r7
   15776:	f8cd 9000 	str.w	r9, [sp]
   1577a:	a903      	add	r1, sp, #12
   1577c:	f7ff fd34 	bl	151e8 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
   15780:	b108      	cbz	r0, 15786 <Send+0xca>
   15782:	280a      	cmp	r0, #10
   15784:	d103      	bne.n	1578e <Send+0xd2>
        status = ScheduleTx( false );
   15786:	2000      	movs	r0, #0
   15788:	f7ff fe74 	bl	15474 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
   1578c:	b120      	cbz	r0, 15798 <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
   1578e:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
}
   15792:	b00b      	add	sp, #44	; 0x2c
   15794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
   15798:	9b04      	ldr	r3, [sp, #16]
        Nvm.MacGroup1.SrvAckRequested = false;
   1579a:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
   1579e:	63a3      	str	r3, [r4, #56]	; 0x38
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
   157a0:	f002 fa4c 	bl	17c3c <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   157a4:	2800      	cmp	r0, #0
   157a6:	bf18      	it	ne
   157a8:	2013      	movne	r0, #19
   157aa:	e7f2      	b.n	15792 <Send+0xd6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
   157ac:	2007      	movs	r0, #7
   157ae:	e7f0      	b.n	15792 <Send+0xd6>
   157b0:	2002fd14 	.word	0x2002fd14
   157b4:	20030170 	.word	0x20030170
   157b8:	2002fd8c 	.word	0x2002fd8c

000157bc <SendReJoinReq>:
    switch( joinReqType )
   157bc:	2802      	cmp	r0, #2
{
   157be:	b570      	push	{r4, r5, r6, lr}
   157c0:	4604      	mov	r4, r0
    switch( joinReqType )
   157c2:	d001      	beq.n	157c8 <SendReJoinReq+0xc>
   157c4:	d82b      	bhi.n	1581e <SendReJoinReq+0x62>
   157c6:	bb88      	cbnz	r0, 1582c <SendReJoinReq+0x70>
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   157c8:	2201      	movs	r2, #1
   157ca:	4b3c      	ldr	r3, [pc, #240]	; (158bc <SendReJoinReq+0x100>)
   157cc:	4d3c      	ldr	r5, [pc, #240]	; (158c0 <SendReJoinReq+0x104>)
   157ce:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
   157d2:	2202      	movs	r2, #2
   157d4:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
   157d8:	18aa      	adds	r2, r5, r2
            if( joinReqType == REJOIN_REQ_0 )
   157da:	3c00      	subs	r4, #0
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
   157dc:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   157e0:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
            if( joinReqType == REJOIN_REQ_0 )
   157e4:	bf18      	it	ne
   157e6:	2401      	movne	r4, #1
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
   157e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   157ec:	f8a5 210c 	strh.w	r2, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
   157f0:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
   157f4:	0a1a      	lsrs	r2, r3, #8
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
   157f6:	0c1b      	lsrs	r3, r3, #16
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
   157f8:	f885 2110 	strb.w	r2, [r5, #272]	; 0x110
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
   157fc:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
            if( joinReqType == REJOIN_REQ_0 )
   15800:	0064      	lsls	r4, r4, #1
   15802:	f885 410e 	strb.w	r4, [r5, #270]	; 0x10e
            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   15806:	f7ff f977 	bl	14af8 <SecureElementGetDevEui>
   1580a:	2208      	movs	r2, #8
   1580c:	4601      	mov	r1, r0
   1580e:	f505 7089 	add.w	r0, r5, #274	; 0x112
   15812:	f016 f9ae 	bl	2bb72 <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
   15816:	2008      	movs	r0, #8
   15818:	f505 718d 	add.w	r1, r5, #282	; 0x11a
   1581c:	e029      	b.n	15872 <SendReJoinReq+0xb6>
    switch( joinReqType )
   1581e:	28ff      	cmp	r0, #255	; 0xff
   15820:	d02d      	beq.n	1587e <SendReJoinReq+0xc2>
{
   15822:	2001      	movs	r0, #1
}
   15824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = ScheduleTx( allowDelayedTx );
   15828:	f7ff be24 	b.w	15474 <ScheduleTx>
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   1582c:	2301      	movs	r3, #1
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
   1582e:	4c24      	ldr	r4, [pc, #144]	; (158c0 <SendReJoinReq+0x104>)
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   15830:	4a22      	ldr	r2, [pc, #136]	; (158bc <SendReJoinReq+0x100>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
   15832:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   15836:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
   1583a:	1ca2      	adds	r2, r4, #2
   1583c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   15840:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
   15844:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
   15848:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
   1584c:	f7ff f96a 	bl	14b24 <SecureElementGetJoinEui>
   15850:	2208      	movs	r2, #8
   15852:	4601      	mov	r1, r0
   15854:	f204 100f 	addw	r0, r4, #271	; 0x10f
   15858:	f016 f98b 	bl	2bb72 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   1585c:	f7ff f94c 	bl	14af8 <SecureElementGetDevEui>
   15860:	2208      	movs	r2, #8
   15862:	4601      	mov	r1, r0
   15864:	f204 1017 	addw	r0, r4, #279	; 0x117
   15868:	f016 f983 	bl	2bb72 <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
   1586c:	2009      	movs	r0, #9
   1586e:	f504 7190 	add.w	r1, r4, #288	; 0x120
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
   15872:	f002 fc57 	bl	18124 <LoRaMacCryptoGetRJcount>
   15876:	2800      	cmp	r0, #0
   15878:	d0d3      	beq.n	15822 <SendReJoinReq+0x66>
}
   1587a:	2011      	movs	r0, #17
   1587c:	bd70      	pop	{r4, r5, r6, pc}
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
   1587e:	2600      	movs	r6, #0
   15880:	4d0f      	ldr	r5, [pc, #60]	; (158c0 <SendReJoinReq+0x104>)
            SwitchClass( CLASS_A );
   15882:	2000      	movs	r0, #0
   15884:	f7ff fb74 	bl	14f70 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
   15888:	1cab      	adds	r3, r5, #2
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   1588a:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
   1588e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
   15892:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
   15896:	f7ff f945 	bl	14b24 <SecureElementGetJoinEui>
   1589a:	2208      	movs	r2, #8
   1589c:	4601      	mov	r1, r0
   1589e:	f505 7087 	add.w	r0, r5, #270	; 0x10e
   158a2:	f016 f966 	bl	2bb72 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   158a6:	f7ff f927 	bl	14af8 <SecureElementGetDevEui>
   158aa:	2208      	movs	r2, #8
   158ac:	4601      	mov	r1, r0
   158ae:	f505 708b 	add.w	r0, r5, #278	; 0x116
   158b2:	f016 f95e 	bl	2bb72 <memcpy1>
            allowDelayedTx = false;
   158b6:	4630      	mov	r0, r6
            break;
   158b8:	e7b4      	b.n	15824 <SendReJoinReq+0x68>
   158ba:	bf00      	nop
   158bc:	2002fd14 	.word	0x2002fd14
   158c0:	20030170 	.word	0x20030170

000158c4 <OnForceRejoinReqCycleTimerEvent>:
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    TimerStart( &MacCtx.Rejoin2CycleTimer );
}

static void OnForceRejoinReqCycleTimerEvent( void* context )
{
   158c4:	b510      	push	{r4, lr}
    if( Nvm.MacGroup1.ForceRejoinRetriesCounter == Nvm.MacGroup2.ForceRejoinMaxRetries )
   158c6:	4c0e      	ldr	r4, [pc, #56]	; (15900 <OnForceRejoinReqCycleTimerEvent+0x3c>)
   158c8:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   158cc:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
   158d0:	429a      	cmp	r2, r3
   158d2:	d105      	bne.n	158e0 <OnForceRejoinReqCycleTimerEvent+0x1c>
    {
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   158d4:	480b      	ldr	r0, [pc, #44]	; (15904 <OnForceRejoinReqCycleTimerEvent+0x40>)
   158d6:	f7fd fc89 	bl	131ec <TimerStop>
        Nvm.MacGroup1.ForceRejoinRetriesCounter = 0;
   158da:	2300      	movs	r3, #0
   158dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    }

    Nvm.MacGroup1.ForceRejoinRetriesCounter ++;
   158e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   158e4:	3301      	adds	r3, #1
   158e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   158ea:	f894 31c1 	ldrb.w	r3, [r4, #449]	; 0x1c1
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
    }
}
   158ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   158f2:	2b01      	cmp	r3, #1
        SendReJoinReq( REJOIN_REQ_0 );
   158f4:	bf94      	ite	ls
   158f6:	2000      	movls	r0, #0
        SendReJoinReq( REJOIN_REQ_2 );
   158f8:	2002      	movhi	r0, #2
   158fa:	f7ff bf5f 	b.w	157bc <SendReJoinReq>
   158fe:	bf00      	nop
   15900:	2002fd14 	.word	0x2002fd14
   15904:	20030648 	.word	0x20030648

00015908 <OnRejoin2CycleTimerEvent>:
{
   15908:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin2CycleTimer );
   1590a:	480f      	ldr	r0, [pc, #60]	; (15948 <OnRejoin2CycleTimerEvent+0x40>)
   1590c:	f7fd fc6e 	bl	131ec <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
   15910:	4b0e      	ldr	r3, [pc, #56]	; (1594c <OnRejoin2CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   15912:	4a0f      	ldr	r2, [pc, #60]	; (15950 <OnRejoin2CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
   15914:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
    if( rejoinCycleTime > 4294967 )
   15918:	4c0e      	ldr	r4, [pc, #56]	; (15954 <OnRejoin2CycleTimerEvent+0x4c>)
   1591a:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   1591c:	bf84      	itt	hi
   1591e:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   15922:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_2 );
   15924:	f04f 0002 	mov.w	r0, #2
        *timeInMiliSec = rejoinCycleTime * 1000;
   15928:	bf88      	it	hi
   1592a:	f8c4 34f8 	strhi.w	r3, [r4, #1272]	; 0x4f8
    SendReJoinReq( REJOIN_REQ_2 );
   1592e:	f7ff ff45 	bl	157bc <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
   15932:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   15936:	4804      	ldr	r0, [pc, #16]	; (15948 <OnRejoin2CycleTimerEvent+0x40>)
   15938:	f016 fa1f 	bl	2bd7a <TimerSetValue>
}
   1593c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin2CycleTimer );
   15940:	4801      	ldr	r0, [pc, #4]	; (15948 <OnRejoin2CycleTimerEvent+0x40>)
   15942:	f7fd bbdd 	b.w	13100 <TimerStart>
   15946:	bf00      	nop
   15948:	20030630 	.word	0x20030630
   1594c:	2002fd14 	.word	0x2002fd14
   15950:	00418937 	.word	0x00418937
   15954:	20030170 	.word	0x20030170

00015958 <OnRejoin1CycleTimerEvent>:
{
   15958:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin1CycleTimer );
   1595a:	480f      	ldr	r0, [pc, #60]	; (15998 <OnRejoin1CycleTimerEvent+0x40>)
   1595c:	f7fd fc46 	bl	131ec <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
   15960:	4b0e      	ldr	r3, [pc, #56]	; (1599c <OnRejoin1CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   15962:	4a0f      	ldr	r2, [pc, #60]	; (159a0 <OnRejoin1CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
   15964:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
    if( rejoinCycleTime > 4294967 )
   15968:	4c0e      	ldr	r4, [pc, #56]	; (159a4 <OnRejoin1CycleTimerEvent+0x4c>)
   1596a:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   1596c:	bf84      	itt	hi
   1596e:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   15972:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_1 );
   15974:	f04f 0001 	mov.w	r0, #1
        *timeInMiliSec = rejoinCycleTime * 1000;
   15978:	bf88      	it	hi
   1597a:	f8c4 34f4 	strhi.w	r3, [r4, #1268]	; 0x4f4
    SendReJoinReq( REJOIN_REQ_1 );
   1597e:	f7ff ff1d 	bl	157bc <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   15982:	f8d4 14f4 	ldr.w	r1, [r4, #1268]	; 0x4f4
   15986:	4804      	ldr	r0, [pc, #16]	; (15998 <OnRejoin1CycleTimerEvent+0x40>)
   15988:	f016 f9f7 	bl	2bd7a <TimerSetValue>
}
   1598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin1CycleTimer );
   15990:	4801      	ldr	r0, [pc, #4]	; (15998 <OnRejoin1CycleTimerEvent+0x40>)
   15992:	f7fd bbb5 	b.w	13100 <TimerStart>
   15996:	bf00      	nop
   15998:	20030618 	.word	0x20030618
   1599c:	2002fd14 	.word	0x2002fd14
   159a0:	00418937 	.word	0x00418937
   159a4:	20030170 	.word	0x20030170

000159a8 <OnRejoin0CycleTimerEvent>:
{
   159a8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin0CycleTimer );
   159aa:	480f      	ldr	r0, [pc, #60]	; (159e8 <OnRejoin0CycleTimerEvent+0x40>)
   159ac:	f7fd fc1e 	bl	131ec <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
   159b0:	4b0e      	ldr	r3, [pc, #56]	; (159ec <OnRejoin0CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   159b2:	4a0f      	ldr	r2, [pc, #60]	; (159f0 <OnRejoin0CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
   159b4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   159b8:	4c0e      	ldr	r4, [pc, #56]	; (159f4 <OnRejoin0CycleTimerEvent+0x4c>)
   159ba:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   159bc:	bf84      	itt	hi
   159be:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   159c2:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_0 );
   159c4:	f04f 0000 	mov.w	r0, #0
        *timeInMiliSec = rejoinCycleTime * 1000;
   159c8:	bf88      	it	hi
   159ca:	f8c4 34f0 	strhi.w	r3, [r4, #1264]	; 0x4f0
    SendReJoinReq( REJOIN_REQ_0 );
   159ce:	f7ff fef5 	bl	157bc <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   159d2:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
   159d6:	4804      	ldr	r0, [pc, #16]	; (159e8 <OnRejoin0CycleTimerEvent+0x40>)
   159d8:	f016 f9cf 	bl	2bd7a <TimerSetValue>
}
   159dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin0CycleTimer );
   159e0:	4801      	ldr	r0, [pc, #4]	; (159e8 <OnRejoin0CycleTimerEvent+0x40>)
   159e2:	f7fd bb8d 	b.w	13100 <TimerStart>
   159e6:	bf00      	nop
   159e8:	20030600 	.word	0x20030600
   159ec:	2002fd14 	.word	0x2002fd14
   159f0:	00418937 	.word	0x00418937
   159f4:	20030170 	.word	0x20030170

000159f8 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   159f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0;
   159fc:	f04f 0900 	mov.w	r9, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   15a00:	b08f      	sub	sp, #60	; 0x3c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
   15a02:	2b01      	cmp	r3, #1
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   15a04:	4606      	mov	r6, r0
   15a06:	460f      	mov	r7, r1
   15a08:	4690      	mov	r8, r2
    uint8_t status = 0;
   15a0a:	f88d 9009 	strb.w	r9, [sp, #9]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   15a0e:	f8ad 900c 	strh.w	r9, [sp, #12]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
   15a12:	d802      	bhi.n	15a1a <ProcessMacCommands.constprop.0+0x22>
   15a14:	464c      	mov	r4, r9
    while( macIndex < commandsSize )
   15a16:	42bc      	cmp	r4, r7
   15a18:	d302      	bcc.n	15a20 <ProcessMacCommands.constprop.0+0x28>
}
   15a1a:	b00f      	add	sp, #60	; 0x3c
   15a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
   15a20:	5d30      	ldrb	r0, [r6, r4]
   15a22:	f002 f96b 	bl	17cfc <LoRaMacCommandsGetCmdSize>
   15a26:	4420      	add	r0, r4
   15a28:	42b8      	cmp	r0, r7
   15a2a:	dcf6      	bgt.n	15a1a <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
   15a2c:	5d33      	ldrb	r3, [r6, r4]
   15a2e:	1c65      	adds	r5, r4, #1
   15a30:	3b01      	subs	r3, #1
   15a32:	b2ed      	uxtb	r5, r5
   15a34:	2b1f      	cmp	r3, #31
   15a36:	d8f0      	bhi.n	15a1a <ProcessMacCommands.constprop.0+0x22>
   15a38:	a201      	add	r2, pc, #4	; (adr r2, 15a40 <ProcessMacCommands.constprop.0+0x48>)
   15a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15a3e:	bf00      	nop
   15a40:	00015ac1 	.word	0x00015ac1
   15a44:	00015ae1 	.word	0x00015ae1
   15a48:	00015b0b 	.word	0x00015b0b
   15a4c:	00015c09 	.word	0x00015c09
   15a50:	00015c31 	.word	0x00015c31
   15a54:	00015cb1 	.word	0x00015cb1
   15a58:	00015cd7 	.word	0x00015cd7
   15a5c:	00015d3d 	.word	0x00015d3d
   15a60:	00015d6d 	.word	0x00015d6d
   15a64:	00015dfb 	.word	0x00015dfb
   15a68:	00015de7 	.word	0x00015de7
   15a6c:	00015e4f 	.word	0x00015e4f
   15a70:	00015f53 	.word	0x00015f53
   15a74:	00015e75 	.word	0x00015e75
   15a78:	00015ee1 	.word	0x00015ee1
   15a7c:	00015ffb 	.word	0x00015ffb
   15a80:	00016023 	.word	0x00016023
   15a84:	00016075 	.word	0x00016075
   15a88:	000160a9 	.word	0x000160a9
   15a8c:	00015a1b 	.word	0x00015a1b
   15a90:	00015a1b 	.word	0x00015a1b
   15a94:	00015a1b 	.word	0x00015a1b
   15a98:	00015a1b 	.word	0x00015a1b
   15a9c:	00015a1b 	.word	0x00015a1b
   15aa0:	00015a1b 	.word	0x00015a1b
   15aa4:	00015a1b 	.word	0x00015a1b
   15aa8:	00015a1b 	.word	0x00015a1b
   15aac:	00015a1b 	.word	0x00015a1b
   15ab0:	00015a1b 	.word	0x00015a1b
   15ab4:	00015a1b 	.word	0x00015a1b
   15ab8:	00015a1b 	.word	0x00015a1b
   15abc:	00015f45 	.word	0x00015f45
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
   15ac0:	4ba8      	ldr	r3, [pc, #672]	; (15d64 <ProcessMacCommands.constprop.0+0x36c>)
   15ac2:	5d72      	ldrb	r2, [r6, r5]
   15ac4:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
   15ac8:	429a      	cmp	r2, r3
   15aca:	d806      	bhi.n	15ada <ProcessMacCommands.constprop.0+0xe2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15acc:	2001      	movs	r0, #1
   15ace:	a905      	add	r1, sp, #20
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15ad0:	f002 f8a6 	bl	17c20 <LoRaMacCommandsGetCmd>
   15ad4:	2800      	cmp	r0, #0
   15ad6:	f000 8238 	beq.w	15f4a <ProcessMacCommands.constprop.0+0x552>
                macIndex++;
   15ada:	3402      	adds	r4, #2
   15adc:	b2e5      	uxtb	r5, r4
   15ade:	e012      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
   15ae0:	2004      	movs	r0, #4
   15ae2:	f002 f9b9 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   15ae6:	b170      	cbz	r0, 15b06 <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
   15ae8:	2104      	movs	r1, #4
   15aea:	2000      	movs	r0, #0
   15aec:	f002 f978 	bl	17de0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
   15af0:	5d72      	ldrb	r2, [r6, r5]
   15af2:	4b9d      	ldr	r3, [pc, #628]	; (15d68 <ProcessMacCommands.constprop.0+0x370>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
   15af4:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
   15af6:	3402      	adds	r4, #2
   15af8:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
   15afc:	b2e4      	uxtb	r4, r4
   15afe:	5d32      	ldrb	r2, [r6, r4]
   15b00:	b2ed      	uxtb	r5, r5
   15b02:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                uint8_t eirpDwellTime = payload[macIndex++];
   15b06:	462c      	mov	r4, r5
   15b08:	e785      	b.n	15a16 <ProcessMacCommands.constprop.0+0x1e>
                int8_t linkAdrDatarate = DR_0;
   15b0a:	2300      	movs	r3, #0
   15b0c:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
   15b10:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
   15b14:	f88d 3010 	strb.w	r3, [sp, #16]
                uint8_t linkAdrNbBytesParsed = 0;
   15b18:	f88d 3018 	strb.w	r3, [sp, #24]
                if( adrBlockFound == false )
   15b1c:	f1b9 0f00 	cmp.w	r9, #0
   15b20:	d16d      	bne.n	15bfe <ProcessMacCommands.constprop.0+0x206>
                            linkAdrReq.PayloadSize = 5;
   15b22:	f04f 0905 	mov.w	r9, #5
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15b26:	4c8f      	ldr	r4, [pc, #572]	; (15d64 <ProcessMacCommands.constprop.0+0x36c>)
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15b28:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15b2c:	1e6b      	subs	r3, r5, #1
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15b2e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
   15b32:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15b36:	4433      	add	r3, r6
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
   15b38:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
   15b3c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15b40:	930b      	str	r3, [sp, #44]	; 0x2c
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
   15b42:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15b46:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15b4a:	f894 31a2 	ldrb.w	r3, [r4, #418]	; 0x1a2
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15b4e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
   15b52:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15b56:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
   15b5a:	920a      	str	r2, [sp, #40]	; 0x28
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
   15b5c:	b373      	cbz	r3, 15bbc <ProcessMacCommands.constprop.0+0x1c4>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
   15b5e:	1c7b      	adds	r3, r7, #1
   15b60:	1b5b      	subs	r3, r3, r5
   15b62:	b2db      	uxtb	r3, r3
   15b64:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
   15b68:	ab06      	add	r3, sp, #24
   15b6a:	9301      	str	r3, [sp, #4]
   15b6c:	ab04      	add	r3, sp, #16
   15b6e:	9300      	str	r3, [sp, #0]
   15b70:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15b74:	f10d 030b 	add.w	r3, sp, #11
   15b78:	f10d 020a 	add.w	r2, sp, #10
   15b7c:	a90a      	add	r1, sp, #40	; 0x28
   15b7e:	f017 f82b 	bl	2cbd8 <RegionLinkAdrReq>
   15b82:	f88d 0009 	strb.w	r0, [sp, #9]
                        if( ( status & 0x07 ) == 0x07 )
   15b86:	f000 0007 	and.w	r0, r0, #7
   15b8a:	2807      	cmp	r0, #7
   15b8c:	d113      	bne.n	15bb6 <ProcessMacCommands.constprop.0+0x1be>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
   15b8e:	f994 2049 	ldrsb.w	r2, [r4, #73]	; 0x49
   15b92:	f99d 300a 	ldrsb.w	r3, [sp, #10]
   15b96:	429a      	cmp	r2, r3
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
   15b98:	bfb8      	it	lt
   15b9a:	2201      	movlt	r2, #1
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
   15b9c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
   15ba0:	f89d 300b 	ldrb.w	r3, [sp, #11]
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
   15ba4:	bfb8      	it	lt
   15ba6:	f884 21a5 	strblt.w	r2, [r4, #421]	; 0x1a5
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
   15baa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
   15bae:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15bb2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                            linkAdrReq.PayloadSize = 5;
   15bb6:	f04f 0a00 	mov.w	sl, #0
   15bba:	e009      	b.n	15bd0 <ProcessMacCommands.constprop.0+0x1d8>
   15bbc:	2305      	movs	r3, #5
   15bbe:	e7d1      	b.n	15b64 <ProcessMacCommands.constprop.0+0x16c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
   15bc0:	2201      	movs	r2, #1
   15bc2:	2003      	movs	r0, #3
   15bc4:	f10d 0109 	add.w	r1, sp, #9
   15bc8:	f001 ffc0 	bl	17b4c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
   15bcc:	f10a 0a01 	add.w	sl, sl, #1
   15bd0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15bd4:	fa5f f28a 	uxtb.w	r2, sl
   15bd8:	fbb3 f1f9 	udiv	r1, r3, r9
   15bdc:	4291      	cmp	r1, r2
   15bde:	d8ef      	bhi.n	15bc0 <ProcessMacCommands.constprop.0+0x1c8>
                        macIndex += linkAdrNbBytesParsed - 1;
   15be0:	442b      	add	r3, r5
   15be2:	b2dd      	uxtb	r5, r3
   15be4:	1e6b      	subs	r3, r5, #1
   15be6:	b2db      	uxtb	r3, r3
                        if( macIndex >= commandsSize )
   15be8:	429f      	cmp	r7, r3
   15bea:	d90b      	bls.n	15c04 <ProcessMacCommands.constprop.0+0x20c>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
   15bec:	5cf2      	ldrb	r2, [r6, r3]
   15bee:	2a03      	cmp	r2, #3
   15bf0:	d09a      	beq.n	15b28 <ProcessMacCommands.constprop.0+0x130>
                        macIndex--;
   15bf2:	42af      	cmp	r7, r5
   15bf4:	bf88      	it	hi
   15bf6:	461d      	movhi	r5, r3
                break;
   15bf8:	f04f 0901 	mov.w	r9, #1
   15bfc:	e783      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                    macIndex += 4;
   15bfe:	3405      	adds	r4, #5
   15c00:	b2e5      	uxtb	r5, r4
   15c02:	e7f9      	b.n	15bf8 <ProcessMacCommands.constprop.0+0x200>
   15c04:	461d      	mov	r5, r3
   15c06:	e7f7      	b.n	15bf8 <ProcessMacCommands.constprop.0+0x200>
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15c08:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15c0a:	5d73      	ldrb	r3, [r6, r5]
   15c0c:	4955      	ldr	r1, [pc, #340]	; (15d64 <ProcessMacCommands.constprop.0+0x36c>)
   15c0e:	f003 030f 	and.w	r3, r3, #15
   15c12:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15c16:	2004      	movs	r0, #4
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15c18:	fa02 f303 	lsl.w	r3, r2, r3
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15c1c:	2200      	movs	r2, #0
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15c1e:	3402      	adds	r4, #2
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15c20:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15c24:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15c26:	a903      	add	r1, sp, #12
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15c28:	f001 ff90 	bl	17b4c <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
   15c2c:	4625      	mov	r5, r4
   15c2e:	e76a      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                status = 0x07;
   15c30:	2307      	movs	r3, #7
   15c32:	f88d 3009 	strb.w	r3, [sp, #9]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15c36:	5d73      	ldrb	r3, [r6, r5]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15c38:	1d65      	adds	r5, r4, #5
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15c3a:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
   15c3e:	f003 030f 	and.w	r3, r3, #15
   15c42:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15c46:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15c48:	b2db      	uxtb	r3, r3
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15c4a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15c4e:	5cf2      	ldrb	r2, [r6, r3]
   15c50:	1d23      	adds	r3, r4, #4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15c52:	b2db      	uxtb	r3, r3
   15c54:	5cf3      	ldrb	r3, [r6, r3]
                macIndex++;
   15c56:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15c58:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15c5a:	041b      	lsls	r3, r3, #16
   15c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15c60:	5d32      	ldrb	r2, [r6, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15c62:	4c40      	ldr	r4, [pc, #256]	; (15d64 <ProcessMacCommands.constprop.0+0x36c>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15c64:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
   15c66:	2264      	movs	r2, #100	; 0x64
   15c68:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15c6a:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15c6e:	a90a      	add	r1, sp, #40	; 0x28
                rxParamSetupReq.Frequency *= 100;
   15c70:	930b      	str	r3, [sp, #44]	; 0x2c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15c72:	f016 ffc1 	bl	2cbf8 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
   15c76:	f000 0307 	and.w	r3, r0, #7
   15c7a:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15c7c:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15c7e:	f88d 0009 	strb.w	r0, [sp, #9]
                if( ( status & 0x07 ) == 0x07 )
   15c82:	d10d      	bne.n	15ca0 <ProcessMacCommands.constprop.0+0x2a8>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
   15c84:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   15c88:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
   15c8c:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
   15c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15c92:	67e3      	str	r3, [r4, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
   15c94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
   15c98:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   15c9c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
                macCmdPayload[0] = status;
   15ca0:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
   15ca4:	2201      	movs	r2, #1
   15ca6:	2005      	movs	r0, #5
   15ca8:	a903      	add	r1, sp, #12
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
   15caa:	f001 ff4f 	bl	17b4c <LoRaMacCommandsAddCmd>
                break;
   15cae:	e72a      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
   15cb0:	4b2d      	ldr	r3, [pc, #180]	; (15d68 <ProcessMacCommands.constprop.0+0x370>)
   15cb2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   15cb6:	b163      	cbz	r3, 15cd2 <ProcessMacCommands.constprop.0+0x2da>
   15cb8:	681b      	ldr	r3, [r3, #0]
   15cba:	b153      	cbz	r3, 15cd2 <ProcessMacCommands.constprop.0+0x2da>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
   15cbc:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
   15cbe:	f008 033f 	and.w	r3, r8, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
   15cc2:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
   15cc6:	2202      	movs	r2, #2
   15cc8:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
   15cca:	f88d 300d 	strb.w	r3, [sp, #13]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
   15cce:	a903      	add	r1, sp, #12
   15cd0:	e7eb      	b.n	15caa <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
   15cd2:	20ff      	movs	r0, #255	; 0xff
   15cd4:	e7f3      	b.n	15cbe <ProcessMacCommands.constprop.0+0x2c6>
                status = 0x03;
   15cd6:	2303      	movs	r3, #3
   15cd8:	f88d 3009 	strb.w	r3, [sp, #9]
                newChannelReq.ChannelId = payload[macIndex++];
   15cdc:	5d73      	ldrb	r3, [r6, r5]
                chParam.DrRange.Value = payload[macIndex++];
   15cde:	1da5      	adds	r5, r4, #6
                newChannelReq.ChannelId = payload[macIndex++];
   15ce0:	f88d 301c 	strb.w	r3, [sp, #28]
                newChannelReq.NewChannel = &chParam;
   15ce4:	ab0a      	add	r3, sp, #40	; 0x28
   15ce6:	9306      	str	r3, [sp, #24]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
   15ce8:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15cea:	b2db      	uxtb	r3, r3
   15cec:	5cf2      	ldrb	r2, [r6, r3]
   15cee:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15cf0:	b2db      	uxtb	r3, r3
   15cf2:	5cf3      	ldrb	r3, [r6, r3]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15cf4:	a906      	add	r1, sp, #24
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15cf6:	041b      	lsls	r3, r3, #16
   15cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
   15cfc:	1ca2      	adds	r2, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
   15cfe:	b2d2      	uxtb	r2, r2
   15d00:	5cb2      	ldrb	r2, [r6, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15d02:	3405      	adds	r4, #5
   15d04:	4313      	orrs	r3, r2
                chParam.Frequency *= 100;
   15d06:	2264      	movs	r2, #100	; 0x64
   15d08:	4353      	muls	r3, r2
   15d0a:	930a      	str	r3, [sp, #40]	; 0x28
                chParam.Rx1Frequency = 0;
   15d0c:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
   15d0e:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
   15d10:	930b      	str	r3, [sp, #44]	; 0x2c
                chParam.DrRange.Value = payload[macIndex++];
   15d12:	5d33      	ldrb	r3, [r6, r4]
   15d14:	b2ed      	uxtb	r5, r5
   15d16:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15d1a:	4b12      	ldr	r3, [pc, #72]	; (15d64 <ProcessMacCommands.constprop.0+0x36c>)
   15d1c:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   15d20:	f016 ff71 	bl	2cc06 <RegionNewChannelReq>
   15d24:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
   15d26:	2800      	cmp	r0, #0
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15d28:	f88d 3009 	strb.w	r3, [sp, #9]
                if( ( int8_t )status >= 0 )
   15d2c:	f6ff aeeb 	blt.w	15b06 <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
   15d30:	2201      	movs	r2, #1
   15d32:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
   15d34:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
   15d38:	a903      	add	r1, sp, #12
   15d3a:	e7b6      	b.n	15caa <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t delay = payload[macIndex++] & 0x0F;
   15d3c:	5d73      	ldrb	r3, [r6, r5]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
   15d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15d42:	f003 030f 	and.w	r3, r3, #15
   15d46:	2b01      	cmp	r3, #1
   15d48:	bf38      	it	cc
   15d4a:	2301      	movcc	r3, #1
   15d4c:	4353      	muls	r3, r2
   15d4e:	4a05      	ldr	r2, [pc, #20]	; (15d64 <ProcessMacCommands.constprop.0+0x36c>)
                uint8_t delay = payload[macIndex++] & 0x0F;
   15d50:	3402      	adds	r4, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
   15d52:	6693      	str	r3, [r2, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
   15d54:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   15d58:	66d3      	str	r3, [r2, #108]	; 0x6c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
   15d5a:	2008      	movs	r0, #8
   15d5c:	2200      	movs	r2, #0
                uint8_t delay = payload[macIndex++] & 0x0F;
   15d5e:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
   15d60:	a903      	add	r1, sp, #12
   15d62:	e761      	b.n	15c28 <ProcessMacCommands.constprop.0+0x230>
   15d64:	2002fd14 	.word	0x2002fd14
   15d68:	20030170 	.word	0x20030170
                uint8_t eirpDwellTime = payload[macIndex++];
   15d6c:	5d73      	ldrb	r3, [r6, r5]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15d6e:	4dbb      	ldr	r5, [pc, #748]	; (1605c <ProcessMacCommands.constprop.0+0x664>)
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
   15d70:	f3c3 1240 	ubfx	r2, r3, #5, #1
   15d74:	f88d 2011 	strb.w	r2, [sp, #17]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15d78:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
   15d7c:	f3c3 1200 	ubfx	r2, r3, #4, #1
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15d80:	a904      	add	r1, sp, #16
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
   15d82:	f003 030f 	and.w	r3, r3, #15
   15d86:	f88d 2010 	strb.w	r2, [sp, #16]
   15d8a:	f88d 3012 	strb.w	r3, [sp, #18]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15d8e:	f016 ff41 	bl	2cc14 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
   15d92:	3402      	adds	r4, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15d94:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
   15d96:	b2e4      	uxtb	r4, r4
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15d98:	f43f af48 	beq.w	15c2c <ProcessMacCommands.constprop.0+0x234>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15d9c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15da0:	4aaf      	ldr	r2, [pc, #700]	; (16060 <ProcessMacCommands.constprop.0+0x668>)
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15da2:	f8a5 308c 	strh.w	r3, [r5, #140]	; 0x8c
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15da6:	f89d 3012 	ldrb.w	r3, [sp, #18]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15daa:	f89d a010 	ldrb.w	sl, [sp, #16]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15dae:	5cd0      	ldrb	r0, [r2, r3]
   15db0:	f7f2 fece 	bl	8b50 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
   15db4:	2302      	movs	r3, #2
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15db6:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15dba:	a90a      	add	r1, sp, #40	; 0x28
   15dbc:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                    getPhy.Attribute = PHY_MIN_TX_DR;
   15dc0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15dc4:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15dc8:	f016 feb7 	bl	2cb3a <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15dcc:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15dd0:	9006      	str	r0, [sp, #24]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15dd2:	b240      	sxtb	r0, r0
   15dd4:	4298      	cmp	r0, r3
   15dd6:	bfb8      	it	lt
   15dd8:	4618      	movlt	r0, r3
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15dda:	2200      	movs	r2, #0
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15ddc:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15de0:	a903      	add	r1, sp, #12
   15de2:	2009      	movs	r0, #9
   15de4:	e720      	b.n	15c28 <ProcessMacCommands.constprop.0+0x230>
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
   15de6:	4b9d      	ldr	r3, [pc, #628]	; (1605c <ProcessMacCommands.constprop.0+0x664>)
   15de8:	5d72      	ldrb	r2, [r6, r5]
   15dea:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
   15dee:	429a      	cmp	r2, r3
   15df0:	f63f ae73 	bhi.w	15ada <ProcessMacCommands.constprop.0+0xe2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15df4:	200b      	movs	r0, #11
   15df6:	a905      	add	r1, sp, #20
   15df8:	e66a      	b.n	15ad0 <ProcessMacCommands.constprop.0+0xd8>
                status = 0x03;
   15dfa:	2303      	movs	r3, #3
   15dfc:	f88d 3009 	strb.w	r3, [sp, #9]
                dlChannelReq.ChannelId = payload[macIndex++];
   15e00:	5d73      	ldrb	r3, [r6, r5]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e02:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
   15e04:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   15e08:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15e0a:	b2db      	uxtb	r3, r3
   15e0c:	5cf2      	ldrb	r2, [r6, r3]
   15e0e:	1d23      	adds	r3, r4, #4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e10:	b2db      	uxtb	r3, r3
   15e12:	5cf3      	ldrb	r3, [r6, r3]
                dlChannelReq.ChannelId = payload[macIndex++];
   15e14:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e16:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   15e18:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   15e1e:	5d32      	ldrb	r2, [r6, r4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15e20:	a90a      	add	r1, sp, #40	; 0x28
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e22:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
   15e24:	2264      	movs	r2, #100	; 0x64
   15e26:	4353      	muls	r3, r2
   15e28:	930b      	str	r3, [sp, #44]	; 0x2c
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15e2a:	4b8c      	ldr	r3, [pc, #560]	; (1605c <ProcessMacCommands.constprop.0+0x664>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e2c:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15e2e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   15e32:	f016 fef6 	bl	2cc22 <RegionDlChannelReq>
   15e36:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
   15e38:	2800      	cmp	r0, #0
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15e3a:	f88d 3009 	strb.w	r3, [sp, #9]
                if( ( int8_t )status >= 0 )
   15e3e:	f6ff ae62 	blt.w	15b06 <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
   15e42:	2201      	movs	r2, #1
   15e44:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
   15e46:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
   15e4a:	a903      	add	r1, sp, #12
   15e4c:	e72d      	b.n	15caa <ProcessMacCommands.constprop.0+0x2b2>
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15e4e:	2301      	movs	r3, #1
                uint8_t delayExp = 0x0F & payload[macIndex];
   15e50:	5d72      	ldrb	r2, [r6, r5]
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15e52:	4884      	ldr	r0, [pc, #528]	; (16064 <ProcessMacCommands.constprop.0+0x66c>)
   15e54:	f002 010f 	and.w	r1, r2, #15
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   15e58:	0912      	lsrs	r2, r2, #4
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15e5a:	fa03 f101 	lsl.w	r1, r3, r1
                macIndex++;
   15e5e:	3402      	adds	r4, #2
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   15e60:	4093      	lsls	r3, r2
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15e62:	f8a0 13fe 	strh.w	r1, [r0, #1022]	; 0x3fe
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   15e66:	f8a0 33fc 	strh.w	r3, [r0, #1020]	; 0x3fc
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15e6a:	2200      	movs	r2, #0
   15e6c:	200c      	movs	r0, #12
                macIndex++;
   15e6e:	b2e5      	uxtb	r5, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15e70:	a903      	add	r1, sp, #12
   15e72:	e71a      	b.n	15caa <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
   15e74:	f816 b005 	ldrb.w	fp, [r6, r5]
                Nvm.MacGroup2.ForceRejoinMaxRetries = 0x07 & payload[macIndex];
   15e78:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 1605c <ProcessMacCommands.constprop.0+0x664>
   15e7c:	f00b 0307 	and.w	r3, fp, #7
   15e80:	f88a 31c0 	strb.w	r3, [sl, #448]	; 0x1c0
                macIndex++;
   15e84:	1ca3      	adds	r3, r4, #2
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
   15e86:	b2db      	uxtb	r3, r3
   15e88:	5cf2      	ldrb	r2, [r6, r3]
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15e8a:	2120      	movs	r1, #32
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
   15e8c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   15e90:	f88a 21c1 	strb.w	r2, [sl, #449]	; 0x1c1
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
   15e94:	5cf3      	ldrb	r3, [r6, r3]
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15e96:	2000      	movs	r0, #0
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
   15e98:	f003 030f 	and.w	r3, r3, #15
   15e9c:	f88a 3049 	strb.w	r3, [sl, #73]	; 0x49
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15ea0:	f015 fe5a 	bl	2bb58 <randr>
   15ea4:	2120      	movs	r1, #32
   15ea6:	f3cb 0bc2 	ubfx	fp, fp, #3, #3
    if( rejoinCycleTime > 4294967 )
   15eaa:	4b6f      	ldr	r3, [pc, #444]	; (16068 <ProcessMacCommands.constprop.0+0x670>)
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15eac:	fa01 f10b 	lsl.w	r1, r1, fp
   15eb0:	4401      	add	r1, r0
    if( rejoinCycleTime > 4294967 )
   15eb2:	4299      	cmp	r1, r3
        *timeInMiliSec = rejoinCycleTime * 1000;
   15eb4:	bf8a      	itet	hi
   15eb6:	f44f 737a 	movhi.w	r3, #1000	; 0x3e8
                uint32_t forceRejoinReqCycleTime = 0;
   15eba:	2100      	movls	r1, #0
        *timeInMiliSec = rejoinCycleTime * 1000;
   15ebc:	4359      	mulhi	r1, r3
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
   15ebe:	486b      	ldr	r0, [pc, #428]	; (1606c <ProcessMacCommands.constprop.0+0x674>)
   15ec0:	f015 ff5b 	bl	2bd7a <TimerSetValue>
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   15ec4:	f89a 31c1 	ldrb.w	r3, [sl, #449]	; 0x1c1
                macIndex ++;
   15ec8:	3403      	adds	r4, #3
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   15eca:	2b01      	cmp	r3, #1
                    SendReJoinReq( REJOIN_REQ_0 );
   15ecc:	bf94      	ite	ls
   15ece:	2000      	movls	r0, #0
                    SendReJoinReq( REJOIN_REQ_2 );
   15ed0:	2002      	movhi	r0, #2
   15ed2:	f7ff fc73 	bl	157bc <SendReJoinReq>
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
   15ed6:	4865      	ldr	r0, [pc, #404]	; (1606c <ProcessMacCommands.constprop.0+0x674>)
                macIndex ++;
   15ed8:	b2e5      	uxtb	r5, r4
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
   15eda:	f7fd f911 	bl	13100 <TimerStart>
                break;
   15ede:	e612      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                macIndex ++;
   15ee0:	3402      	adds	r4, #2
                uint8_t maxCountN = 0x0F & payload[macIndex];
   15ee2:	5d73      	ldrb	r3, [r6, r5]
                macIndex ++;
   15ee4:	b2e5      	uxtb	r5, r4
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15ee6:	2401      	movs	r4, #1
                uint8_t maxTimeN = 0x0F & ( payload[macIndex] >> 4 );
   15ee8:	091a      	lsrs	r2, r3, #4
                uint8_t maxCountN = 0x0F & payload[macIndex];
   15eea:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15eee:	485b      	ldr	r0, [pc, #364]	; (1605c <ProcessMacCommands.constprop.0+0x664>)
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
   15ef0:	3304      	adds	r3, #4
   15ef2:	fa04 f303 	lsl.w	r3, r4, r3
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15ef6:	320a      	adds	r2, #10
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
   15ef8:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
    if( rejoinCycleTime > 4294967 )
   15efc:	4b5a      	ldr	r3, [pc, #360]	; (16068 <ProcessMacCommands.constprop.0+0x670>)
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15efe:	fa04 f102 	lsl.w	r1, r4, r2
    if( rejoinCycleTime > 4294967 )
   15f02:	4299      	cmp	r1, r3
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15f04:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   15f08:	dd1a      	ble.n	15f40 <ProcessMacCommands.constprop.0+0x548>
        *timeInMiliSec = rejoinCycleTime * 1000;
   15f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15f0e:	f8df a154 	ldr.w	sl, [pc, #340]	; 16064 <ProcessMacCommands.constprop.0+0x66c>
   15f12:	4093      	lsls	r3, r2
   15f14:	f8ca 34f0 	str.w	r3, [sl, #1264]	; 0x4f0
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
   15f18:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   15f1c:	f7fd f966 	bl	131ec <TimerStop>
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   15f20:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   15f24:	f8da 14f0 	ldr.w	r1, [sl, #1264]	; 0x4f0
   15f28:	f015 ff27 	bl	2bd7a <TimerSetValue>
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
   15f2c:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   15f30:	f7fd f8e6 	bl	13100 <TimerStart>
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
   15f34:	2201      	movs	r2, #1
   15f36:	200f      	movs	r0, #15
                macCmdPayload[0] = timeOK;
   15f38:	f88d 400c 	strb.w	r4, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
   15f3c:	a903      	add	r1, sp, #12
   15f3e:	e6b4      	b.n	15caa <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t timeOK = 0;
   15f40:	2400      	movs	r4, #0
   15f42:	e7f7      	b.n	15f34 <ProcessMacCommands.constprop.0+0x53c>
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15f44:	2020      	movs	r0, #32
   15f46:	a905      	add	r1, sp, #20
   15f48:	e5c2      	b.n	15ad0 <ProcessMacCommands.constprop.0+0xd8>
                    LoRaMacCommandsRemoveCmd( macCmd );
   15f4a:	9805      	ldr	r0, [sp, #20]
   15f4c:	f001 fe3a 	bl	17bc4 <LoRaMacCommandsRemoveCmd>
   15f50:	e5c3      	b.n	15ada <ProcessMacCommands.constprop.0+0xe2>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
   15f52:	2008      	movs	r0, #8
   15f54:	f001 ff80 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   15f58:	f8df b108 	ldr.w	fp, [pc, #264]	; 16064 <ProcessMacCommands.constprop.0+0x66c>
   15f5c:	2800      	cmp	r0, #0
   15f5e:	d049      	beq.n	15ff4 <ProcessMacCommands.constprop.0+0x5fc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
   15f60:	2108      	movs	r1, #8
   15f62:	2000      	movs	r0, #0
   15f64:	f001 ff3c 	bl	17de0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
   15f68:	2300      	movs	r3, #0
   15f6a:	f8ad 301e 	strh.w	r3, [sp, #30]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
   15f6e:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
   15f70:	b2db      	uxtb	r3, r3
   15f72:	5cf2      	ldrb	r2, [r6, r3]
   15f74:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   15f76:	b2db      	uxtb	r3, r3
   15f78:	f816 a003 	ldrb.w	sl, [r6, r3]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
   15f7c:	5d73      	ldrb	r3, [r6, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   15f7e:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
   15f82:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   15f8a:	ea4a 0a03 	orr.w	sl, sl, r3
   15f8e:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   15f90:	b2db      	uxtb	r3, r3
   15f92:	5cf3      	ldrb	r3, [r6, r3]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   15f94:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   15f96:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   15f98:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   15f9a:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15f9e:	5d33      	ldrb	r3, [r6, r4]
                    sysTimeCurrent = SysTimeGet( );
   15fa0:	ac0a      	add	r4, sp, #40	; 0x28
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15fa2:	4353      	muls	r3, r2
                    sysTimeCurrent = SysTimeGet( );
   15fa4:	4620      	mov	r0, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15fa6:	121b      	asrs	r3, r3, #8
   15fa8:	f8ad 301c 	strh.w	r3, [sp, #28]
                    sysTimeCurrent = SysTimeGet( );
   15fac:	f015 fe53 	bl	2bc56 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
   15fb0:	4b2f      	ldr	r3, [pc, #188]	; (16070 <ProcessMacCommands.constprop.0+0x678>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
   15fb2:	a808      	add	r0, sp, #32
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
   15fb4:	4453      	add	r3, sl
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
   15fb6:	9306      	str	r3, [sp, #24]
   15fb8:	f8db 333c 	ldr.w	r3, [fp, #828]	; 0x33c
   15fbc:	f10d 0a18 	add.w	sl, sp, #24
   15fc0:	9300      	str	r3, [sp, #0]
   15fc2:	f8db 3338 	ldr.w	r3, [fp, #824]	; 0x338
   15fc6:	e89a 0006 	ldmia.w	sl, {r1, r2}
   15fca:	f015 fe08 	bl	2bbde <SysTimeSub>
   15fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15fd0:	4650      	mov	r0, sl
   15fd2:	9300      	str	r3, [sp, #0]
   15fd4:	e894 0006 	ldmia.w	r4, {r1, r2}
   15fd8:	9b08      	ldr	r3, [sp, #32]
   15fda:	f015 fde5 	bl	2bba8 <SysTimeAdd>
                    SysTimeSet( sysTime );
   15fde:	e89a 0003 	ldmia.w	sl, {r0, r1}
   15fe2:	f015 fe17 	bl	2bc14 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
   15fe6:	f016 faa2 	bl	2c52e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
   15fea:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   15fec:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
   15fee:	f88b 343c 	strb.w	r3, [fp, #1084]	; 0x43c
   15ff2:	e588      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
   15ff4:	f88b 043c 	strb.w	r0, [fp, #1084]	; 0x43c
   15ff8:	e585      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
   15ffa:	200b      	movs	r0, #11
   15ffc:	f001 ff2c 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   16000:	2800      	cmp	r0, #0
   16002:	f43f ad80 	beq.w	15b06 <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
   16006:	210b      	movs	r1, #11
   16008:	2000      	movs	r0, #0
   1600a:	f001 fee9 	bl	17de0 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
   1600e:	4b15      	ldr	r3, [pc, #84]	; (16064 <ProcessMacCommands.constprop.0+0x66c>)
   16010:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
   16014:	3b04      	subs	r3, #4
   16016:	2b01      	cmp	r3, #1
   16018:	f67f ad75 	bls.w	15b06 <ProcessMacCommands.constprop.0+0x10e>
                        LoRaMacClassBPingSlotInfoAns( );
   1601c:	f016 fa83 	bl	2c526 <LoRaMacClassBPingSlotInfoAns>
   16020:	e571      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                frequency = ( uint32_t )payload[macIndex++];
   16022:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
   16024:	b2db      	uxtb	r3, r3
   16026:	5cf1      	ldrb	r1, [r6, r3]
   16028:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   1602a:	b2db      	uxtb	r3, r3
   1602c:	5cf3      	ldrb	r3, [r6, r3]
                frequency = ( uint32_t )payload[macIndex++];
   1602e:	5d72      	ldrb	r2, [r6, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   16030:	041b      	lsls	r3, r3, #16
   16032:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
   16036:	2164      	movs	r1, #100	; 0x64
                datarate = payload[macIndex++] & 0x0F;
   16038:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   1603a:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
   1603c:	b2e4      	uxtb	r4, r4
   1603e:	5d30      	ldrb	r0, [r6, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   16040:	4313      	orrs	r3, r2
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
   16042:	4359      	muls	r1, r3
   16044:	f000 000f 	and.w	r0, r0, #15
   16048:	f016 fa6e 	bl	2c528 <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
   1604c:	b2ed      	uxtb	r5, r5
                macCmdPayload[0] = status;
   1604e:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
   16052:	2201      	movs	r2, #1
   16054:	2011      	movs	r0, #17
   16056:	a903      	add	r1, sp, #12
   16058:	e627      	b.n	15caa <ProcessMacCommands.constprop.0+0x2b2>
   1605a:	bf00      	nop
   1605c:	2002fd14 	.word	0x2002fd14
   16060:	00036643 	.word	0x00036643
   16064:	20030170 	.word	0x20030170
   16068:	00418937 	.word	0x00418937
   1606c:	20030648 	.word	0x20030648
   16070:	12d53d80 	.word	0x12d53d80
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
   16074:	200c      	movs	r0, #12
   16076:	f001 feef 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   1607a:	2800      	cmp	r0, #0
   1607c:	f43f ad43 	beq.w	15b06 <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
   16080:	210c      	movs	r1, #12
   16082:	2000      	movs	r0, #0
   16084:	f001 feac 	bl	17de0 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
   16088:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   1608a:	b2db      	uxtb	r3, r3
   1608c:	5cf0      	ldrb	r0, [r6, r3]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   1608e:	4a12      	ldr	r2, [pc, #72]	; (160d8 <ProcessMacCommands.constprop.0+0x6e0>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   16090:	5d73      	ldrb	r3, [r6, r5]
                    beaconTimingChannel = payload[macIndex++];
   16092:	1d25      	adds	r5, r4, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   16094:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
   16096:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   16098:	6812      	ldr	r2, [r2, #0]
   1609a:	5d31      	ldrb	r1, [r6, r4]
   1609c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
                    beaconTimingChannel = payload[macIndex++];
   160a0:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   160a2:	f016 fa43 	bl	2c52c <LoRaMacClassBBeaconTimingAns>
   160a6:	e52e      	b.n	15b06 <ProcessMacCommands.constprop.0+0x10e>
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
   160a8:	2064      	movs	r0, #100	; 0x64
                    frequency = ( uint32_t )payload[macIndex++];
   160aa:	5d72      	ldrb	r2, [r6, r5]
   160ac:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   160ae:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
   160b0:	3403      	adds	r4, #3
   160b2:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   160b4:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
   160b6:	5cf1      	ldrb	r1, [r6, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   160b8:	5d33      	ldrb	r3, [r6, r4]
   160ba:	b2ed      	uxtb	r5, r5
   160bc:	041b      	lsls	r3, r3, #16
   160be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   160c2:	4313      	orrs	r3, r2
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
   160c4:	4358      	muls	r0, r3
   160c6:	f016 fa33 	bl	2c530 <LoRaMacClassBBeaconFreqReq>
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
   160ca:	2201      	movs	r2, #1
   160cc:	f88d 000c 	strb.w	r0, [sp, #12]
   160d0:	a903      	add	r1, sp, #12
   160d2:	2013      	movs	r0, #19
   160d4:	e5e9      	b.n	15caa <ProcessMacCommands.constprop.0+0x2b2>
   160d6:	bf00      	nop
   160d8:	2002fc6c 	.word	0x2002fc6c

000160dc <SetTxContinuousWave>:
{
   160dc:	b510      	push	{r4, lr}
   160de:	4604      	mov	r4, r0
   160e0:	4608      	mov	r0, r1
   160e2:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
   160e4:	4b06      	ldr	r3, [pc, #24]	; (16100 <SetTxContinuousWave+0x24>)
   160e6:	4622      	mov	r2, r4
   160e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   160ea:	b249      	sxtb	r1, r1
   160ec:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   160ee:	4a05      	ldr	r2, [pc, #20]	; (16104 <SetTxContinuousWave+0x28>)
}
   160f0:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   160f2:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
   160f6:	f043 0302 	orr.w	r3, r3, #2
   160fa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
   160fe:	bd10      	pop	{r4, pc}
   16100:	00033a2c 	.word	0x00033a2c
   16104:	20030170 	.word	0x20030170

00016108 <LoRaMacProcess>:
{
   16108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1610c:	b0ab      	sub	sp, #172	; 0xac
    CRITICAL_SECTION_BEGIN( );
   1610e:	a80a      	add	r0, sp, #40	; 0x28
   16110:	f015 fcdb 	bl	2baca <BoardCriticalSectionBegin>
    LoRaMacRadioEvents.Value = 0;
   16114:	2300      	movs	r3, #0
    events = LoRaMacRadioEvents;
   16116:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 163f0 <LoRaMacProcess+0x2e8>
    CRITICAL_SECTION_END( );
   1611a:	a80a      	add	r0, sp, #40	; 0x28
    events = LoRaMacRadioEvents;
   1611c:	f8db 5000 	ldr.w	r5, [fp]
    LoRaMacRadioEvents.Value = 0;
   16120:	4cb4      	ldr	r4, [pc, #720]	; (163f4 <LoRaMacProcess+0x2ec>)
   16122:	f8cb 3000 	str.w	r3, [fp]
    CRITICAL_SECTION_END( );
   16126:	f015 fcda 	bl	2bade <BoardCriticalSectionEnd>
    if( events.Value != 0 )
   1612a:	2d00      	cmp	r5, #0
   1612c:	f000 80d8 	beq.w	162e0 <LoRaMacProcess+0x1d8>
        if( events.Events.TxDone == 1 )
   16130:	b2eb      	uxtb	r3, r5
   16132:	06a9      	lsls	r1, r5, #26
   16134:	9303      	str	r3, [sp, #12]
   16136:	d559      	bpl.n	161ec <LoRaMacProcess+0xe4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   16138:	4daf      	ldr	r5, [pc, #700]	; (163f8 <LoRaMacProcess+0x2f0>)
   1613a:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   1613e:	2b02      	cmp	r3, #2
   16140:	d002      	beq.n	16148 <LoRaMacProcess+0x40>
        Radio.Sleep( );
   16142:	4bae      	ldr	r3, [pc, #696]	; (163fc <LoRaMacProcess+0x2f4>)
   16144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16146:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
   16148:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
   1614c:	48ac      	ldr	r0, [pc, #688]	; (16400 <LoRaMacProcess+0x2f8>)
   1614e:	f015 fe14 	bl	2bd7a <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
   16152:	48ab      	ldr	r0, [pc, #684]	; (16400 <LoRaMacProcess+0x2f8>)
   16154:	f7fc ffd4 	bl	13100 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
   16158:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
   1615c:	48a9      	ldr	r0, [pc, #676]	; (16404 <LoRaMacProcess+0x2fc>)
   1615e:	f015 fe0c 	bl	2bd7a <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
   16162:	48a8      	ldr	r0, [pc, #672]	; (16404 <LoRaMacProcess+0x2fc>)
   16164:	f7fc ffcc 	bl	13100 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
   16168:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   1616c:	2b00      	cmp	r3, #0
   1616e:	f000 8106 	beq.w	1637e <LoRaMacProcess+0x276>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
   16172:	2314      	movs	r3, #20
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16174:	a914      	add	r1, sp, #80	; 0x50
   16176:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
   1617a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1617e:	f016 fcdc 	bl	2cb3a <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
   16182:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16186:	9011      	str	r0, [sp, #68]	; 0x44
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
   16188:	4401      	add	r1, r0
   1618a:	489f      	ldr	r0, [pc, #636]	; (16408 <LoRaMacProcess+0x300>)
   1618c:	f015 fdf5 	bl	2bd7a <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
   16190:	489d      	ldr	r0, [pc, #628]	; (16408 <LoRaMacProcess+0x300>)
   16192:	f7fc ffb5 	bl	13100 <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   16196:	4b9d      	ldr	r3, [pc, #628]	; (1640c <LoRaMacProcess+0x304>)
    txDone.Channel = MacCtx.Channel;
   16198:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   1619c:	681b      	ldr	r3, [r3, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   1619e:	af0f      	add	r7, sp, #60	; 0x3c
   161a0:	4638      	mov	r0, r7
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   161a2:	63eb      	str	r3, [r5, #60]	; 0x3c
    txDone.Channel = MacCtx.Channel;
   161a4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
   161a8:	931f      	str	r3, [sp, #124]	; 0x7c
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   161aa:	f015 fd77 	bl	2bc9c <SysTimeGetMcuTime>
   161ae:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   161b2:	ae06      	add	r6, sp, #24
   161b4:	9300      	str	r3, [sp, #0]
   161b6:	4630      	mov	r0, r6
   161b8:	e897 0006 	ldmia.w	r7, {r1, r2}
   161bc:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
   161c0:	f015 fd0d 	bl	2bbde <SysTimeSub>
   161c4:	e896 0003 	ldmia.w	r6, {r0, r1}
   161c8:	ab21      	add	r3, sp, #132	; 0x84
   161ca:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
   161ce:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   161d2:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
   161d6:	9320      	str	r3, [sp, #128]	; 0x80
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   161d8:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   161dc:	a91e      	add	r1, sp, #120	; 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   161de:	3b00      	subs	r3, #0
   161e0:	bf18      	it	ne
   161e2:	2301      	movne	r3, #1
   161e4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   161e8:	f016 fcb1 	bl	2cb4e <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
   161ec:	9b03      	ldr	r3, [sp, #12]
   161ee:	06da      	lsls	r2, r3, #27
   161f0:	d54a      	bpl.n	16288 <LoRaMacProcess+0x180>
    uint32_t downLinkCounter = 0;
   161f2:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
   161f4:	4d80      	ldr	r5, [pc, #512]	; (163f8 <LoRaMacProcess+0x2f0>)
    uint8_t *payload = RxDoneParams.Payload;
   161f6:	f8df 9218 	ldr.w	r9, [pc, #536]	; 16410 <LoRaMacProcess+0x308>
    uint32_t address = Nvm.MacGroup2.DevAddr;
   161fa:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
    int16_t rssi = RxDoneParams.Rssi;
   161fe:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
    uint32_t address = Nvm.MacGroup2.DevAddr;
   16202:	9205      	str	r2, [sp, #20]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   16204:	f89b 2000 	ldrb.w	r2, [fp]
    int8_t snr = RxDoneParams.Snr;
   16208:	f999 700c 	ldrsb.w	r7, [r9, #12]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   1620c:	f363 0200 	bfi	r2, r3, #0, #1
    uint32_t downLinkCounter = 0;
   16210:	930c      	str	r3, [sp, #48]	; 0x30
    uint8_t macCmdPayload[2] = { 0 };
   16212:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   16216:	f88b 2000 	strb.w	r2, [fp]
    MacCtx.McpsConfirm.AckReceived = false;
   1621a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
   1621e:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
    MacCtx.McpsIndication.Multicast = 0;
   16222:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
   16226:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
   1622a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
   1622e:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
   16232:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
   16236:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
   1623a:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
   1623e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
   16242:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
   16246:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
   1624a:	4b6c      	ldr	r3, [pc, #432]	; (163fc <LoRaMacProcess+0x2f4>)
    MacCtx.McpsIndication.Rssi = rssi;
   1624c:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
   16250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    MacCtx.McpsIndication.Snr = snr;
   16252:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
   16256:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint8_t *payload = RxDoneParams.Payload;
   1625a:	f8d9 8004 	ldr.w	r8, [r9, #4]
    uint16_t size = RxDoneParams.Size;
   1625e:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    Radio.Sleep( );
   16262:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
   16264:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16268:	b913      	cbnz	r3, 16270 <LoRaMacProcess+0x168>
        TimerStop( &MacCtx.RxWindowTimer2 );
   1626a:	4866      	ldr	r0, [pc, #408]	; (16404 <LoRaMacProcess+0x2fc>)
   1626c:	f7fc ffbe 	bl	131ec <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
   16270:	4631      	mov	r1, r6
   16272:	4640      	mov	r0, r8
   16274:	f016 f944 	bl	2c500 <LoRaMacClassBRxBeacon>
   16278:	4683      	mov	fp, r0
   1627a:	2800      	cmp	r0, #0
   1627c:	f000 8082 	beq.w	16384 <LoRaMacProcess+0x27c>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
   16280:	f8a4 a47e 	strh.w	sl, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
   16284:	f884 7480 	strb.w	r7, [r4, #1152]	; 0x480
        if( events.Events.TxTimeout == 1 )
   16288:	9b03      	ldr	r3, [sp, #12]
   1628a:	0719      	lsls	r1, r3, #28
   1628c:	d51a      	bpl.n	162c4 <LoRaMacProcess+0x1bc>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   1628e:	4b5a      	ldr	r3, [pc, #360]	; (163f8 <LoRaMacProcess+0x2f0>)
   16290:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   16294:	2b02      	cmp	r3, #2
   16296:	d002      	beq.n	1629e <LoRaMacProcess+0x196>
        Radio.Sleep( );
   16298:	4b58      	ldr	r3, [pc, #352]	; (163fc <LoRaMacProcess+0x2f4>)
   1629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1629c:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
   1629e:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
   162a0:	f7fe fc92 	bl	14bc8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
   162a4:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
   162a8:	f001 fdbc 	bl	17e24 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
   162ac:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   162b0:	b113      	cbz	r3, 162b8 <LoRaMacProcess+0x1b0>
        MacCtx.RetransmitTimeoutRetry = true;
   162b2:	2301      	movs	r3, #1
   162b4:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
   162b8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   162bc:	f043 0310 	orr.w	r3, r3, #16
   162c0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( events.Events.RxError == 1 )
   162c4:	9b03      	ldr	r3, [sp, #12]
   162c6:	075a      	lsls	r2, r3, #29
   162c8:	d503      	bpl.n	162d2 <LoRaMacProcess+0x1ca>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
   162ca:	2106      	movs	r1, #6
   162cc:	2005      	movs	r0, #5
   162ce:	f7fe fcd3 	bl	14c78 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
   162d2:	9b03      	ldr	r3, [sp, #12]
   162d4:	079b      	lsls	r3, r3, #30
   162d6:	d503      	bpl.n	162e0 <LoRaMacProcess+0x1d8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
   162d8:	2104      	movs	r1, #4
   162da:	2003      	movs	r0, #3
   162dc:	f7fe fccc 	bl	14c78 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
   162e0:	f016 f92c 	bl	2c53c <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
   162e4:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
   162e8:	06d7      	lsls	r7, r2, #27
   162ea:	f140 8389 	bpl.w	16a00 <LoRaMacProcess+0x8f8>
    MacCtx.AllowRequests = requestState;
   162ee:	2300      	movs	r3, #0
   162f0:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
   162f4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   162f8:	061e      	lsls	r6, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   162fa:	bf44      	itt	mi
   162fc:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
   16300:	f8c4 3340 	strmi.w	r3, [r4, #832]	; 0x340
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
   16304:	f012 0f05 	tst.w	r2, #5
   16308:	f000 82f3 	beq.w	168f2 <LoRaMacProcess+0x7ea>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
   1630c:	200a      	movs	r0, #10
   1630e:	f001 fda3 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   16312:	2800      	cmp	r0, #0
   16314:	f000 82ed 	beq.w	168f2 <LoRaMacProcess+0x7ea>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
   16318:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
   1631c:	07dd      	lsls	r5, r3, #31
   1631e:	f100 82e8 	bmi.w	168f2 <LoRaMacProcess+0x7ea>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16322:	0758      	lsls	r0, r3, #29
   16324:	f140 82ff 	bpl.w	16926 <LoRaMacProcess+0x81e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   16328:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   1632c:	f023 0302 	bic.w	r3, r3, #2
   16330:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.MacState == LORAMAC_IDLE )
   16334:	f8d4 1340 	ldr.w	r1, [r4, #832]	; 0x340
   16338:	2900      	cmp	r1, #0
   1633a:	f040 8358 	bne.w	169ee <LoRaMacProcess+0x8e6>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   1633e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16342:	f013 0001 	ands.w	r0, r3, #1
        if( reqEvents.Bits.MlmeReq == 1 )
   16346:	f003 0504 	and.w	r5, r3, #4
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   1634a:	f000 8342 	beq.w	169d2 <LoRaMacProcess+0x8ca>
            MacCtx.MacFlags.Bits.McpsReq = 0;
   1634e:	f361 0300 	bfi	r3, r1, #0, #1
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16352:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.McpsReq = 0;
   16354:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16358:	b2da      	uxtb	r2, r3
   1635a:	d504      	bpl.n	16366 <LoRaMacProcess+0x25e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   1635c:	4613      	mov	r3, r2
   1635e:	f361 0382 	bfi	r3, r1, #2, #1
   16362:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   16366:	2301      	movs	r3, #1
   16368:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
   1636c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16370:	4828      	ldr	r0, [pc, #160]	; (16414 <LoRaMacProcess+0x30c>)
   16372:	681b      	ldr	r3, [r3, #0]
   16374:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
   16376:	2d00      	cmp	r5, #0
   16378:	f000 8331 	beq.w	169de <LoRaMacProcess+0x8d6>
   1637c:	e3d8      	b.n	16b30 <LoRaMacProcess+0xa28>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   1637e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
   16382:	e708      	b.n	16196 <LoRaMacProcess+0x8e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   16384:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   16388:	2b01      	cmp	r3, #1
   1638a:	d10c      	bne.n	163a6 <LoRaMacProcess+0x29e>
        if( LoRaMacClassBIsPingExpected( ) == true )
   1638c:	f016 f8bc 	bl	2c508 <LoRaMacClassBIsPingExpected>
   16390:	4682      	mov	sl, r0
   16392:	b188      	cbz	r0, 163b8 <LoRaMacProcess+0x2b0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   16394:	4658      	mov	r0, fp
   16396:	f016 f8ac 	bl	2c4f2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
   1639a:	4658      	mov	r0, fp
   1639c:	f016 f8ae 	bl	2c4fc <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
   163a0:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   163a2:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
   163a6:	f898 b000 	ldrb.w	fp, [r8]
    if( macHdr.Bits.Major != 0 )
   163aa:	f01b 0f03 	tst.w	fp, #3
   163ae:	d00f      	beq.n	163d0 <LoRaMacProcess+0x2c8>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   163b0:	2301      	movs	r3, #1
   163b2:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
   163b6:	e187      	b.n	166c8 <LoRaMacProcess+0x5c0>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
   163b8:	f016 f8a8 	bl	2c50c <LoRaMacClassBIsMulticastExpected>
   163bc:	2800      	cmp	r0, #0
   163be:	d0f2      	beq.n	163a6 <LoRaMacProcess+0x29e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   163c0:	4650      	mov	r0, sl
   163c2:	f016 f897 	bl	2c4f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
   163c6:	4650      	mov	r0, sl
   163c8:	f016 f899 	bl	2c4fe <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   163cc:	2305      	movs	r3, #5
   163ce:	e7e8      	b.n	163a2 <LoRaMacProcess+0x29a>
    switch( macHdr.Bits.MType )
   163d0:	ea4f 135b 	mov.w	r3, fp, lsr #5
   163d4:	3b01      	subs	r3, #1
   163d6:	2b06      	cmp	r3, #6
   163d8:	f200 8277 	bhi.w	168ca <LoRaMacProcess+0x7c2>
   163dc:	e8df f013 	tbh	[pc, r3, lsl #1]
   163e0:	0275001c 	.word	0x0275001c
   163e4:	027500c9 	.word	0x027500c9
   163e8:	027500c6 	.word	0x027500c6
   163ec:	0265      	.short	0x0265
   163ee:	bf00      	nop
   163f0:	2002fc80 	.word	0x2002fc80
   163f4:	20030170 	.word	0x20030170
   163f8:	2002fd14 	.word	0x2002fd14
   163fc:	00033a2c 	.word	0x00033a2c
   16400:	200304f8 	.word	0x200304f8
   16404:	20030510 	.word	0x20030510
   16408:	20030570 	.word	0x20030570
   1640c:	2002fc7c 	.word	0x2002fc7c
   16410:	2002fc6c 	.word	0x2002fc6c
   16414:	200305b4 	.word	0x200305b4
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
   16418:	2e10      	cmp	r6, #16
   1641a:	d9c9      	bls.n	163b0 <LoRaMacProcess+0x2a8>
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
   1641c:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
            macMsgJoinAccept.BufSize = size;
   16420:	b2f6      	uxtb	r6, r6
            macMsgJoinAccept.Buffer = payload;
   16422:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
            macMsgJoinAccept.BufSize = size;
   16426:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
   1642a:	b11b      	cbz	r3, 16434 <LoRaMacProcess+0x32c>
   1642c:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16430:	2b00      	cmp	r3, #0
   16432:	d0bd      	beq.n	163b0 <LoRaMacProcess+0x2a8>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
   16434:	f7fe fb76 	bl	14b24 <SecureElementGetJoinEui>
   16438:	aa14      	add	r2, sp, #80	; 0x50
   1643a:	4601      	mov	r1, r0
   1643c:	20ff      	movs	r0, #255	; 0xff
   1643e:	f002 f8d3 	bl	185e8 <LoRaMacCryptoHandleJoinAccept>
   16442:	4607      	mov	r7, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   16444:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   16448:	2207      	movs	r2, #7
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   1644a:	f3c3 0303 	ubfx	r3, r3, #0, #4
   1644e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16452:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   16456:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   1645a:	a91e      	add	r1, sp, #120	; 0x78
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1645c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   16460:	f016 fb81 	bl	2cb66 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
   16464:	2f00      	cmp	r7, #0
   16466:	d177      	bne.n	16558 <LoRaMacProcess+0x450>
   16468:	2800      	cmp	r0, #0
   1646a:	d075      	beq.n	16558 <LoRaMacProcess+0x450>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   1646c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
   16470:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16474:	041b      	lsls	r3, r3, #16
   16476:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
   1647a:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
   1647e:	f99d 1060 	ldrsb.w	r1, [sp, #96]	; 0x60
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16482:	4313      	orrs	r3, r2
   16484:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
   16488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
   1648a:	f04f 0801 	mov.w	r8, #1
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
   1648e:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   16492:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   16496:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   1649a:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   1649e:	f3c3 0303 	ubfx	r3, r3, #0, #4
   164a2:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   164a6:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
   164aa:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   164ae:	f885 2079 	strb.w	r2, [r5, #121]	; 0x79
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
   164b2:	2b01      	cmp	r3, #1
   164b4:	bf38      	it	cc
   164b6:	2301      	movcc	r3, #1
   164b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   164bc:	4353      	muls	r3, r2
   164be:	66ab      	str	r3, [r5, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
   164c0:	4413      	add	r3, r2
   164c2:	66eb      	str	r3, [r5, #108]	; 0x6c
                    Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;
   164c4:	4aa9      	ldr	r2, [pc, #676]	; (1676c <LoRaMacProcess+0x664>)
   164c6:	4baa      	ldr	r3, [pc, #680]	; (16770 <LoRaMacProcess+0x668>)
                applyCFList.Size = size - 17;
   164c8:	3e11      	subs	r6, #17
                    Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;
   164ca:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   164ce:	bf38      	it	cc
   164d0:	4613      	movcc	r3, r2
   164d2:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
                applyCFList.Payload = macMsgJoinAccept.CFList;
   164d6:	f10d 0362 	add.w	r3, sp, #98	; 0x62
   164da:	9312      	str	r3, [sp, #72]	; 0x48
                applyCFList.JoinChannel = MacCtx.Channel;
   164dc:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   164e0:	a911      	add	r1, sp, #68	; 0x44
                applyCFList.JoinChannel = MacCtx.Channel;
   164e2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
   164e6:	f885 8078 	strb.w	r8, [r5, #120]	; 0x78
                applyCFList.Size = size - 17;
   164ea:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   164ee:	f016 fb43 	bl	2cb78 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
   164f2:	2302      	movs	r3, #2
   164f4:	f885 31b8 	strb.w	r3, [r5, #440]	; 0x1b8
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   164f8:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   164fc:	b143      	cbz	r3, 16510 <LoRaMacProcess+0x408>
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
   164fe:	4642      	mov	r2, r8
   16500:	200b      	movs	r0, #11
   16502:	a909      	add	r1, sp, #36	; 0x24
                    Nvm.MacGroup1.RekeyIndUplinksCounter = 0;
   16504:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
                    macCmdPayload[0] = Nvm.MacGroup2.Version.Fields.Minor;
   16508:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
   1650c:	f001 fb1e 	bl	17b4c <LoRaMacCommandsAddCmd>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   16510:	2001      	movs	r0, #1
   16512:	f001 fca1 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   16516:	b118      	cbz	r0, 16520 <LoRaMacProcess+0x418>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
   16518:	2101      	movs	r1, #1
   1651a:	2000      	movs	r0, #0
   1651c:	f001 fc60 	bl	17de0 <LoRaMacConfirmQueueSetStatus>
                if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
   16520:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16524:	b12b      	cbz	r3, 16532 <LoRaMacProcess+0x42a>
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
   16526:	2300      	movs	r3, #0
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16528:	4892      	ldr	r0, [pc, #584]	; (16774 <LoRaMacProcess+0x66c>)
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
   1652a:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   1652e:	f7fc fe5d 	bl	131ec <TimerStop>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16532:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16536:	2b01      	cmp	r3, #1
   16538:	f200 81d5 	bhi.w	168e6 <LoRaMacProcess+0x7de>
        if( MacCtx.NodeAckRequested == true )
   1653c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   16540:	2b00      	cmp	r3, #0
   16542:	f040 81c8 	bne.w	168d6 <LoRaMacProcess+0x7ce>
        MacCtx.MacFlags.Bits.MacDone = 1;
   16546:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   1654a:	f043 0310 	orr.w	r3, r3, #16
   1654e:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
   16552:	f7fe fb39 	bl	14bc8 <UpdateRxSlotIdleState>
   16556:	e697      	b.n	16288 <LoRaMacProcess+0x180>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   16558:	2001      	movs	r0, #1
   1655a:	f001 fc7d 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   1655e:	2800      	cmp	r0, #0
   16560:	d0e7      	beq.n	16532 <LoRaMacProcess+0x42a>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
   16562:	2101      	movs	r1, #1
   16564:	2007      	movs	r0, #7
   16566:	f001 fc3b 	bl	17de0 <LoRaMacConfirmQueueSetStatus>
   1656a:	e7e2      	b.n	16532 <LoRaMacProcess+0x42a>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
   1656c:	2301      	movs	r3, #1
   1656e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16572:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16576:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1657a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
   1657e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16582:	a90d      	add	r1, sp, #52	; 0x34
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
   16584:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            getPhy.Attribute = PHY_MAX_PAYLOAD;
   16588:	230d      	movs	r3, #13
   1658a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1658e:	f016 fad4 	bl	2cb3a <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
   16592:	f1a6 030d 	sub.w	r3, r6, #13
   16596:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16598:	900b      	str	r0, [sp, #44]	; 0x2c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
   1659a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1659e:	b200      	sxth	r0, r0
   165a0:	4283      	cmp	r3, r0
   165a2:	f73f af05 	bgt.w	163b0 <LoRaMacProcess+0x2a8>
   165a6:	2e0b      	cmp	r6, #11
   165a8:	f67f af02 	bls.w	163b0 <LoRaMacProcess+0x2a8>
            macMsgData.FRMPayload = MacCtx.RxPayload;
   165ac:	4b72      	ldr	r3, [pc, #456]	; (16778 <LoRaMacProcess+0x670>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
   165ae:	a81e      	add	r0, sp, #120	; 0x78
            macMsgData.FRMPayload = MacCtx.RxPayload;
   165b0:	9327      	str	r3, [sp, #156]	; 0x9c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
   165b2:	23ff      	movs	r3, #255	; 0xff
            macMsgData.Buffer = payload;
   165b4:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
            macMsgData.BufSize = size;
   165b8:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
   165bc:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
   165c0:	f016 f93d 	bl	2c83e <LoRaMacParserData>
   165c4:	4680      	mov	r8, r0
   165c6:	2800      	cmp	r0, #0
   165c8:	f47f aef2 	bne.w	163b0 <LoRaMacProcess+0x2a8>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   165cc:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   165d0:	2b01      	cmp	r3, #1
   165d2:	d114      	bne.n	165fe <LoRaMacProcess+0x4f6>
                if( LoRaMacClassBIsPingExpected( ) == true )
   165d4:	f015 ff98 	bl	2c508 <LoRaMacClassBIsPingExpected>
   165d8:	4606      	mov	r6, r0
   165da:	2800      	cmp	r0, #0
   165dc:	d043      	beq.n	16666 <LoRaMacProcess+0x55e>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   165de:	4640      	mov	r0, r8
   165e0:	f015 ff87 	bl	2c4f2 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
   165e4:	4640      	mov	r0, r8
   165e6:	f015 ff89 	bl	2c4fc <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
   165ea:	2304      	movs	r3, #4
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
   165ec:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   165f0:	9820      	ldr	r0, [sp, #128]	; 0x80
   165f2:	f3c1 1100 	ubfx	r1, r1, #4, #1
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   165f6:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
   165fa:	f015 ff9e 	bl	2c53a <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
   165fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
   16600:	a914      	add	r1, sp, #80	; 0x50
   16602:	a81e      	add	r0, sp, #120	; 0x78
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
   16604:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
   16608:	f015 fee4 	bl	2c3d4 <DetermineFrameType>
   1660c:	4680      	mov	r8, r0
   1660e:	2800      	cmp	r0, #0
   16610:	f47f aece 	bne.w	163b0 <LoRaMacProcess+0x2a8>
            downLinkCounter = 0;
   16614:	4603      	mov	r3, r0
   16616:	4959      	ldr	r1, [pc, #356]	; (1677c <LoRaMacProcess+0x674>)
   16618:	900c      	str	r0, [sp, #48]	; 0x30
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
   1661a:	f8d1 00e4 	ldr.w	r0, [r1, #228]	; 0xe4
   1661e:	4282      	cmp	r2, r0
   16620:	d12d      	bne.n	1667e <LoRaMacProcess+0x576>
   16622:	f891 60e1 	ldrb.w	r6, [r1, #225]	; 0xe1
   16626:	b356      	cbz	r6, 1667e <LoRaMacProcess+0x576>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
   16628:	2230      	movs	r2, #48	; 0x30
   1662a:	fb02 5303 	mla	r3, r2, r3, r5
   1662e:	f893 a0e2 	ldrb.w	sl, [r3, #226]	; 0xe2
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
   16632:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   16636:	681b      	ldr	r3, [r3, #0]
   16638:	930c      	str	r3, [sp, #48]	; 0x30
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
   1663a:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   1663e:	2b02      	cmp	r3, #2
   16640:	d102      	bne.n	16648 <LoRaMacProcess+0x540>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
   16642:	2303      	movs	r3, #3
   16644:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
   16648:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1664c:	2b03      	cmp	r3, #3
   1664e:	f47f aeaf 	bne.w	163b0 <LoRaMacProcess+0x2a8>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
   16652:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16656:	f013 0f60 	tst.w	r3, #96	; 0x60
   1665a:	f47f aea9 	bne.w	163b0 <LoRaMacProcess+0x2a8>
   1665e:	f04f 0801 	mov.w	r8, #1
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
   16662:	9005      	str	r0, [sp, #20]
   16664:	e011      	b.n	1668a <LoRaMacProcess+0x582>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
   16666:	f015 ff51 	bl	2c50c <LoRaMacClassBIsMulticastExpected>
   1666a:	2800      	cmp	r0, #0
   1666c:	d0c7      	beq.n	165fe <LoRaMacProcess+0x4f6>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   1666e:	4630      	mov	r0, r6
   16670:	f015 ff40 	bl	2c4f4 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
   16674:	4630      	mov	r0, r6
   16676:	f015 ff42 	bl	2c4fe <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   1667a:	2305      	movs	r3, #5
   1667c:	e7b6      	b.n	165ec <LoRaMacProcess+0x4e4>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
   1667e:	3301      	adds	r3, #1
   16680:	2b04      	cmp	r3, #4
   16682:	f101 0130 	add.w	r1, r1, #48	; 0x30
   16686:	d1c8      	bne.n	1661a <LoRaMacProcess+0x512>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
   16688:	469a      	mov	sl, r3
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
   1668a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1668e:	f895 61b6 	ldrb.w	r6, [r5, #438]	; 0x1b6
   16692:	9304      	str	r3, [sp, #16]
    switch( addrID )
   16694:	f1ba 0f04 	cmp.w	sl, #4
   16698:	d810      	bhi.n	166bc <LoRaMacProcess+0x5b4>
   1669a:	e8df f00a 	tbb	[pc, sl]
   1669e:	0324      	.short	0x0324
   166a0:	2220      	.short	0x2220
   166a2:	18          	.byte	0x18
   166a3:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
   166a4:	2605      	movs	r6, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
   166a6:	4630      	mov	r0, r6
   166a8:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
   166ac:	aa0c      	add	r2, sp, #48	; 0x30
   166ae:	f016 f83b 	bl	2c728 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   166b2:	b1f0      	cbz	r0, 166f2 <LoRaMacProcess+0x5ea>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
   166b4:	2807      	cmp	r0, #7
   166b6:	d101      	bne.n	166bc <LoRaMacProcess+0x5b4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
   166b8:	2308      	movs	r3, #8
   166ba:	e000      	b.n	166be <LoRaMacProcess+0x5b6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   166bc:	2301      	movs	r3, #1
   166be:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   166c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   166c4:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
   166c8:	f7fe faba 	bl	14c40 <PrepareRxDoneAbort>
                return;
   166cc:	e5dc      	b.n	16288 <LoRaMacProcess+0x180>
            if( lrWanVersion.Fields.Minor == 1 )
   166ce:	2e01      	cmp	r6, #1
   166d0:	d10b      	bne.n	166ea <LoRaMacProcess+0x5e2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
   166d2:	9b04      	ldr	r3, [sp, #16]
   166d4:	b15b      	cbz	r3, 166ee <LoRaMacProcess+0x5e6>
                    *fCntID = A_FCNT_DOWN;
   166d6:	2b03      	cmp	r3, #3
   166d8:	bf08      	it	eq
   166da:	2602      	moveq	r6, #2
   166dc:	e7e3      	b.n	166a6 <LoRaMacProcess+0x59e>
            *fCntID = MC_FCNT_DOWN_2;
   166de:	2606      	movs	r6, #6
            break;
   166e0:	e7e1      	b.n	166a6 <LoRaMacProcess+0x59e>
            *fCntID = MC_FCNT_DOWN_3;
   166e2:	2607      	movs	r6, #7
            break;
   166e4:	e7df      	b.n	166a6 <LoRaMacProcess+0x59e>
    switch( addrID )
   166e6:	2604      	movs	r6, #4
   166e8:	e7dd      	b.n	166a6 <LoRaMacProcess+0x59e>
                *fCntID = FCNT_DOWN;
   166ea:	2603      	movs	r6, #3
   166ec:	e7db      	b.n	166a6 <LoRaMacProcess+0x59e>
                    *fCntID = A_FCNT_DOWN;
   166ee:	2602      	movs	r6, #2
   166f0:	e7d9      	b.n	166a6 <LoRaMacProcess+0x59e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
   166f2:	ab1e      	add	r3, sp, #120	; 0x78
   166f4:	9300      	str	r3, [sp, #0]
   166f6:	4632      	mov	r2, r6
   166f8:	4650      	mov	r0, sl
   166fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   166fc:	9905      	ldr	r1, [sp, #20]
   166fe:	f001 feb1 	bl	18464 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   16702:	b120      	cbz	r0, 1670e <LoRaMacProcess+0x606>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
   16704:	2802      	cmp	r0, #2
   16706:	bf14      	ite	ne
   16708:	230b      	movne	r3, #11
   1670a:	230a      	moveq	r3, #10
   1670c:	e651      	b.n	163b2 <LoRaMacProcess+0x2aa>
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   1670e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16710:	f894 6431 	ldrb.w	r6, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   16714:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   16718:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   1671c:	2e01      	cmp	r6, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   1671e:	f3c3 1340 	ubfx	r3, r3, #5, #1
   16722:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   16726:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
                Nvm.MacGroup2.DownlinkReceived = true;
   1672a:	bf9e      	ittt	ls
   1672c:	2301      	movls	r3, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
   1672e:	63a8      	strls	r0, [r5, #56]	; 0x38
                Nvm.MacGroup2.DownlinkReceived = true;
   16730:	f885 31a6 	strbls.w	r3, [r5, #422]	; 0x1a6
            if( multicast == 1 )
   16734:	f1b8 0f01 	cmp.w	r8, #1
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   16738:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
   1673c:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
   16740:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
   16744:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   16748:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            if( multicast == 1 )
   1674c:	d118      	bne.n	16780 <LoRaMacProcess+0x678>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
   1674e:	2302      	movs	r3, #2
   16750:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   16754:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   16758:	b91b      	cbnz	r3, 16762 <LoRaMacProcess+0x65a>
   1675a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   1675e:	06db      	lsls	r3, r3, #27
   16760:	d52d      	bpl.n	167be <LoRaMacProcess+0x6b6>
   16762:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   16766:	b36b      	cbz	r3, 167c4 <LoRaMacProcess+0x6bc>
   16768:	e029      	b.n	167be <LoRaMacProcess+0x6b6>
   1676a:	bf00      	nop
   1676c:	01000400 	.word	0x01000400
   16770:	01010100 	.word	0x01010100
   16774:	20030648 	.word	0x20030648
   16778:	200303a8 	.word	0x200303a8
   1677c:	2002fd14 	.word	0x2002fd14
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
   16780:	f00b 0be0 	and.w	fp, fp, #224	; 0xe0
   16784:	f1bb 0fa0 	cmp.w	fp, #160	; 0xa0
   16788:	d132      	bne.n	167f0 <LoRaMacProcess+0x6e8>
                    Nvm.MacGroup1.SrvAckRequested = true;
   1678a:	2101      	movs	r1, #1
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
   1678c:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
                    Nvm.MacGroup1.SrvAckRequested = true;
   16790:	f885 104a 	strb.w	r1, [r5, #74]	; 0x4a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
   16794:	b90b      	cbnz	r3, 1679a <LoRaMacProcess+0x692>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
   16796:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   16798:	646b      	str	r3, [r5, #68]	; 0x44
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
   1679a:	2e01      	cmp	r6, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
   1679c:	f884 1420 	strb.w	r1, [r4, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
   167a0:	f240 81d5 	bls.w	16b4e <LoRaMacProcess+0xa46>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
   167a4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   167a8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
   167ac:	f8d9 3000 	ldr.w	r3, [r9]
   167b0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   167b4:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   167b8:	2b00      	cmp	r3, #0
   167ba:	f000 81f1 	beq.w	16ba0 <LoRaMacProcess+0xa98>
   167be:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   167c2:	b113      	cbz	r3, 167ca <LoRaMacProcess+0x6c2>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   167c4:	2301      	movs	r3, #1
   167c6:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   167ca:	2e01      	cmp	r6, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
   167cc:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   167d0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   167d4:	d805      	bhi.n	167e2 <LoRaMacProcess+0x6da>
        if( request == MCPS_CONFIRMED )
   167d6:	2a01      	cmp	r2, #1
   167d8:	d101      	bne.n	167de <LoRaMacProcess+0x6d6>
            if( fCtrl.Bits.Ack == 1 )
   167da:	069e      	lsls	r6, r3, #26
   167dc:	d501      	bpl.n	167e2 <LoRaMacProcess+0x6da>
                LoRaMacCommandsRemoveStickyAnsCmds( );
   167de:	f001 fa3b 	bl	17c58 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
   167e2:	9a04      	ldr	r2, [sp, #16]
   167e4:	2a03      	cmp	r2, #3
   167e6:	d85a      	bhi.n	1689e <LoRaMacProcess+0x796>
   167e8:	e8df f002 	tbb	[pc, r2]
   167ec:	12522108 	.word	0x12522108
                    Nvm.MacGroup1.SrvAckRequested = false;
   167f0:	2300      	movs	r3, #0
   167f2:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
   167f6:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   167fa:	e7ae      	b.n	1675a <LoRaMacProcess+0x652>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
   167fc:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   16800:	463a      	mov	r2, r7
   16802:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16806:	f001 010f 	and.w	r1, r1, #15
   1680a:	a822      	add	r0, sp, #136	; 0x88
   1680c:	f7ff f8f4 	bl	159f8 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
   16810:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
   16814:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
   16818:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1681a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
   1681e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
   16822:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
   16826:	2301      	movs	r3, #1
   16828:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
                    break;
   1682c:	e00d      	b.n	1684a <LoRaMacProcess+0x742>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
   1682e:	463a      	mov	r2, r7
   16830:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   16834:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16838:	f001 010f 	and.w	r1, r1, #15
   1683c:	a822      	add	r0, sp, #136	; 0x88
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
   1683e:	f7ff f8db 	bl	159f8 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
   16842:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
   16846:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
   1684a:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   1684e:	b15b      	cbz	r3, 16868 <LoRaMacProcess+0x760>
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
   16850:	2600      	movs	r6, #0
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16852:	48c6      	ldr	r0, [pc, #792]	; (16b6c <LoRaMacProcess+0xa64>)
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
   16854:	f885 61d0 	strb.w	r6, [r5, #464]	; 0x1d0
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16858:	f7fc fcc8 	bl	131ec <TimerStop>
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   1685c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16860:	0758      	lsls	r0, r3, #29
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   16862:	bf48      	it	mi
   16864:	f884 6459 	strbmi.w	r6, [r4, #1113]	; 0x459
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )
   16868:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
   1686c:	2ae0      	cmp	r2, #224	; 0xe0
   1686e:	d108      	bne.n	16882 <LoRaMacProcess+0x77a>
   16870:	f895 31a7 	ldrb.w	r3, [r5, #423]	; 0x1a7
   16874:	b92b      	cbnz	r3, 16882 <LoRaMacProcess+0x77a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
   16876:	f884 2423 	strb.w	r2, [r4, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
   1687a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
   1687e:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
   16882:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16886:	f043 0302 	orr.w	r3, r3, #2
   1688a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            break;
   1688e:	e650      	b.n	16532 <LoRaMacProcess+0x42a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
   16890:	463a      	mov	r2, r7
   16892:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16896:	f89d 10a0 	ldrb.w	r1, [sp, #160]	; 0xa0
   1689a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1689c:	e7cf      	b.n	1683e <LoRaMacProcess+0x736>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   1689e:	2301      	movs	r3, #1
   168a0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
   168a4:	f7fe f9cc 	bl	14c40 <PrepareRxDoneAbort>
                    break;
   168a8:	e7cf      	b.n	1684a <LoRaMacProcess+0x742>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
   168aa:	4db1      	ldr	r5, [pc, #708]	; (16b70 <LoRaMacProcess+0xa68>)
   168ac:	3e01      	subs	r6, #1
   168ae:	4628      	mov	r0, r5
   168b0:	b2b2      	uxth	r2, r6
   168b2:	f108 0101 	add.w	r1, r8, #1
   168b6:	f015 f95c 	bl	2bb72 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
   168ba:	2303      	movs	r3, #3
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
   168bc:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
   168c0:	f8a4 3420 	strh.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
   168c4:	f884 642c 	strb.w	r6, [r4, #1068]	; 0x42c
   168c8:	e7db      	b.n	16882 <LoRaMacProcess+0x77a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   168ca:	2301      	movs	r3, #1
   168cc:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
   168d0:	f7fe f9b6 	bl	14c40 <PrepareRxDoneAbort>
            break;
   168d4:	e62d      	b.n	16532 <LoRaMacProcess+0x42a>
            if( MacCtx.McpsConfirm.AckReceived == true )
   168d6:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
   168da:	2b00      	cmp	r3, #0
   168dc:	f43f ae33 	beq.w	16546 <LoRaMacProcess+0x43e>
                OnRetransmitTimeoutTimerEvent( NULL );
   168e0:	2000      	movs	r0, #0
   168e2:	f7fe f995 	bl	14c10 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
   168e6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   168ea:	2b02      	cmp	r3, #2
   168ec:	f43f ae31 	beq.w	16552 <LoRaMacProcess+0x44a>
   168f0:	e629      	b.n	16546 <LoRaMacProcess+0x43e>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   168f2:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   168f6:	0759      	lsls	r1, r3, #29
   168f8:	d515      	bpl.n	16926 <LoRaMacProcess+0x81e>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   168fa:	2001      	movs	r0, #1
   168fc:	f001 faac 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   16900:	b160      	cbz	r0, 1691c <LoRaMacProcess+0x814>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
   16902:	2001      	movs	r0, #1
   16904:	f001 fa7e 	bl	17e04 <LoRaMacConfirmQueueGetStatus>
   16908:	b908      	cbnz	r0, 1690e <LoRaMacProcess+0x806>
                MacCtx.ChannelsNbTransCounter = 0;
   1690a:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   1690e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   16912:	f023 0302 	bic.w	r3, r3, #2
   16916:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
   1691a:	e004      	b.n	16926 <LoRaMacProcess+0x81e>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
   1691c:	2005      	movs	r0, #5
   1691e:	f001 fa9b 	bl	17e58 <LoRaMacConfirmQueueIsCmdActive>
   16922:	2800      	cmp	r0, #0
   16924:	d1f3      	bne.n	1690e <LoRaMacProcess+0x806>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   16926:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   1692a:	07da      	lsls	r2, r3, #31
   1692c:	f57f ad02 	bpl.w	16334 <LoRaMacProcess+0x22c>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
   16930:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   16934:	b10a      	cbz	r2, 1693a <LoRaMacProcess+0x832>
   16936:	2a03      	cmp	r2, #3
   16938:	d12b      	bne.n	16992 <LoRaMacProcess+0x88a>
    if( counter >= limit )
   1693a:	4a8e      	ldr	r2, [pc, #568]	; (16b74 <LoRaMacProcess+0xa6c>)
   1693c:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   16940:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   16944:	4291      	cmp	r1, r2
   16946:	d205      	bcs.n	16954 <LoRaMacProcess+0x84c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   16948:	079b      	lsls	r3, r3, #30
   1694a:	d536      	bpl.n	169ba <LoRaMacProcess+0x8b2>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   1694c:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16950:	2b01      	cmp	r3, #1
   16952:	d832      	bhi.n	169ba <LoRaMacProcess+0x8b2>
            TimerStop( &MacCtx.TxDelayedTimer );
   16954:	4888      	ldr	r0, [pc, #544]	; (16b78 <LoRaMacProcess+0xa70>)
   16956:	f7fc fc49 	bl	131ec <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   1695a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   1695e:	f023 0320 	bic.w	r3, r3, #32
   16962:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
   16966:	f7fe fbe3 	bl	15130 <StopRetransmission.isra.0>
    if( ( Nvm.MacGroup2.Rejoin0UplinksLimit == Nvm.MacGroup1.Rejoin0UplinksCounter ) &&
   1696a:	4b82      	ldr	r3, [pc, #520]	; (16b74 <LoRaMacProcess+0xa6c>)
   1696c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   16970:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   16972:	428a      	cmp	r2, r1
   16974:	f47f acde 	bne.w	16334 <LoRaMacProcess+0x22c>
   16978:	f893 11b6 	ldrb.w	r1, [r3, #438]	; 0x1b6
   1697c:	2900      	cmp	r1, #0
   1697e:	f43f acd9 	beq.w	16334 <LoRaMacProcess+0x22c>
        ( Nvm.MacGroup2.Version.Fields.Minor >= 1 ) &&
   16982:	2a00      	cmp	r2, #0
   16984:	f43f acd6 	beq.w	16334 <LoRaMacProcess+0x22c>
        Nvm.MacGroup1.Rejoin0UplinksCounter = 0;
   16988:	2000      	movs	r0, #0
   1698a:	64d8      	str	r0, [r3, #76]	; 0x4c
                SendReJoinReq( REJOIN_REQ_0 );
   1698c:	f7fe ff16 	bl	157bc <SendReJoinReq>
   16990:	e4d0      	b.n	16334 <LoRaMacProcess+0x22c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
   16992:	2a01      	cmp	r2, #1
   16994:	d111      	bne.n	169ba <LoRaMacProcess+0x8b2>
            if( MacCtx.RetransmitTimeoutRetry == true )
   16996:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   1699a:	2a00      	cmp	r2, #0
   1699c:	f43f acca 	beq.w	16334 <LoRaMacProcess+0x22c>
    if( counter >= limit )
   169a0:	4a74      	ldr	r2, [pc, #464]	; (16b74 <LoRaMacProcess+0xa6c>)
   169a2:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   169a6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   169aa:	4291      	cmp	r1, r2
   169ac:	d2d2      	bcs.n	16954 <LoRaMacProcess+0x84c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   169ae:	079f      	lsls	r7, r3, #30
   169b0:	d503      	bpl.n	169ba <LoRaMacProcess+0x8b2>
        if( stopRetransmission == true )
   169b2:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
   169b6:	2b00      	cmp	r3, #0
   169b8:	d1cc      	bne.n	16954 <LoRaMacProcess+0x84c>
            MacCtx.RetransmitTimeoutRetry = false;
   169ba:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
   169bc:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
   169c0:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
            MacCtx.MacFlags.Bits.MacDone = 0;
   169c4:	f36f 1304 	bfc	r3, #4, #1
   169c8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            OnTxDelayedTimerEvent( NULL );
   169cc:	f7fe fe3e 	bl	1564c <OnTxDelayedTimerEvent>
   169d0:	e4b0      	b.n	16334 <LoRaMacProcess+0x22c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   169d2:	2201      	movs	r2, #1
   169d4:	2d00      	cmp	r5, #0
   169d6:	f040 80a5 	bne.w	16b24 <LoRaMacProcess+0xa1c>
    MacCtx.AllowRequests = requestState;
   169da:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
        LoRaMacClassBResumeBeaconing( );
   169de:	f015 fd9b 	bl	2c518 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
   169e2:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   169e6:	f36f 1304 	bfc	r3, #4, #1
   169ea:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   169ee:	2301      	movs	r3, #1
   169f0:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        MacCtx.MacFlags.Bits.NvmHandle = 1;
   169f4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   169f8:	f043 0320 	orr.w	r3, r3, #32
   169fc:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
   16a00:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16a04:	0718      	lsls	r0, r3, #28
   16a06:	d508      	bpl.n	16a1a <LoRaMacProcess+0x912>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
   16a08:	f36f 03c3 	bfc	r3, #3, #1
   16a0c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
   16a10:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16a14:	4859      	ldr	r0, [pc, #356]	; (16b7c <LoRaMacProcess+0xa74>)
   16a16:	68db      	ldr	r3, [r3, #12]
   16a18:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   16a1a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16a1e:	0799      	lsls	r1, r3, #30
   16a20:	d508      	bpl.n	16a34 <LoRaMacProcess+0x92c>
        MacCtx.MacFlags.Bits.McpsInd = 0;
   16a22:	f36f 0341 	bfc	r3, #1, #1
   16a26:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
   16a2a:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16a2e:	4854      	ldr	r0, [pc, #336]	; (16b80 <LoRaMacProcess+0xa78>)
   16a30:	685b      	ldr	r3, [r3, #4]
   16a32:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
   16a34:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
   16a38:	2b02      	cmp	r3, #2
   16a3a:	d101      	bne.n	16a40 <LoRaMacProcess+0x938>
        OpenContinuousRxCWindow( );
   16a3c:	f7fe fa6c 	bl	14f18 <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
   16a40:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16a44:	069a      	lsls	r2, r3, #26
   16a46:	f140 80ae 	bpl.w	16ba6 <LoRaMacProcess+0xa9e>
    if( MacCtx.MacState != LORAMAC_IDLE )
   16a4a:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
        MacCtx.MacFlags.Bits.NvmHandle = 0;
   16a4e:	f36f 1345 	bfc	r3, #5, #1
   16a52:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState != LORAMAC_IDLE )
   16a56:	2d00      	cmp	r5, #0
   16a58:	f040 80a5 	bne.w	16ba6 <LoRaMacProcess+0xa9e>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
   16a5c:	4e45      	ldr	r6, [pc, #276]	; (16b74 <LoRaMacProcess+0xa6c>)
   16a5e:	2134      	movs	r1, #52	; 0x34
   16a60:	4630      	mov	r0, r6
   16a62:	f7fc fb27 	bl	130b4 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
   16a66:	6b73      	ldr	r3, [r6, #52]	; 0x34
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   16a68:	211c      	movs	r1, #28
    if( crc != nvmData->Crypto.Crc32 )
   16a6a:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
   16a6c:	bf18      	it	ne
   16a6e:	6370      	strne	r0, [r6, #52]	; 0x34
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   16a70:	4844      	ldr	r0, [pc, #272]	; (16b84 <LoRaMacProcess+0xa7c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
   16a72:	bf18      	it	ne
   16a74:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   16a76:	f7fc fb1d 	bl	130b4 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
   16a7a:	6d73      	ldr	r3, [r6, #84]	; 0x54
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16a7c:	f44f 71be 	mov.w	r1, #380	; 0x17c
    if( crc != nvmData->MacGroup1.Crc32 )
   16a80:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
   16a82:	bf18      	it	ne
   16a84:	6570      	strne	r0, [r6, #84]	; 0x54
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16a86:	4840      	ldr	r0, [pc, #256]	; (16b88 <LoRaMacProcess+0xa80>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
   16a88:	bf18      	it	ne
   16a8a:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16a8e:	f7fc fb11 	bl	130b4 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
   16a92:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   16a96:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    if( crc != nvmData->MacGroup2.Crc32 )
   16a9a:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
   16a9c:	bf18      	it	ne
   16a9e:	f8c6 01d4 	strne.w	r0, [r6, #468]	; 0x1d4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   16aa2:	483a      	ldr	r0, [pc, #232]	; (16b8c <LoRaMacProcess+0xa84>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
   16aa4:	bf18      	it	ne
   16aa6:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   16aaa:	f7fc fb03 	bl	130b4 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
   16aae:	f8d6 3374 	ldr.w	r3, [r6, #884]	; 0x374
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   16ab2:	2100      	movs	r1, #0
    if( crc != nvmData->SecureElement.Crc32 )
   16ab4:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
   16ab6:	bf18      	it	ne
   16ab8:	f8c6 0374 	strne.w	r0, [r6, #884]	; 0x374
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   16abc:	4834      	ldr	r0, [pc, #208]	; (16b90 <LoRaMacProcess+0xa88>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
   16abe:	bf18      	it	ne
   16ac0:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   16ac4:	f7fc faf6 	bl	130b4 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
   16ac8:	f8d6 3378 	ldr.w	r3, [r6, #888]	; 0x378
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   16acc:	21c4      	movs	r1, #196	; 0xc4
    if( crc != nvmData->RegionGroup1.Crc32 )
   16ace:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
   16ad0:	bf18      	it	ne
   16ad2:	f8c6 0378 	strne.w	r0, [r6, #888]	; 0x378
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   16ad6:	482f      	ldr	r0, [pc, #188]	; (16b94 <LoRaMacProcess+0xa8c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
   16ad8:	bf18      	it	ne
   16ada:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   16ade:	f7fc fae9 	bl	130b4 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
   16ae2:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   16ae6:	2114      	movs	r1, #20
    if( crc != nvmData->RegionGroup2.Crc32 )
   16ae8:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
   16aea:	bf18      	it	ne
   16aec:	f8c6 0440 	strne.w	r0, [r6, #1088]	; 0x440
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   16af0:	4829      	ldr	r0, [pc, #164]	; (16b98 <LoRaMacProcess+0xa90>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
   16af2:	bf18      	it	ne
   16af4:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   16af8:	f7fc fadc 	bl	130b4 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
   16afc:	f8d6 3458 	ldr.w	r3, [r6, #1112]	; 0x458
   16b00:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16b02:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        nvmData->ClassB.Crc32 = crc;
   16b06:	bf1c      	itt	ne
   16b08:	f8c6 0458 	strne.w	r0, [r6, #1112]	; 0x458
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
   16b0c:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16b10:	2b00      	cmp	r3, #0
   16b12:	d048      	beq.n	16ba6 <LoRaMacProcess+0xa9e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
   16b14:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16b16:	2b00      	cmp	r3, #0
   16b18:	d045      	beq.n	16ba6 <LoRaMacProcess+0xa9e>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
   16b1a:	4628      	mov	r0, r5
}
   16b1c:	b02b      	add	sp, #172	; 0xac
   16b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
   16b22:	4718      	bx	r3
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   16b24:	f360 0382 	bfi	r3, r0, #2, #1
   16b28:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   16b2c:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
   16b30:	481a      	ldr	r0, [pc, #104]	; (16b9c <LoRaMacProcess+0xa94>)
   16b32:	f001 f99d 	bl	17e70 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
   16b36:	f001 f9c9 	bl	17ecc <LoRaMacConfirmQueueGetCnt>
   16b3a:	2800      	cmp	r0, #0
   16b3c:	f43f af4f 	beq.w	169de <LoRaMacProcess+0x8d6>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
   16b40:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16b44:	f043 0304 	orr.w	r3, r3, #4
   16b48:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   16b4c:	e747      	b.n	169de <LoRaMacProcess+0x8d6>
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   16b4e:	f895 01a0 	ldrb.w	r0, [r5, #416]	; 0x1a0
   16b52:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16b56:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   16b5a:	b120      	cbz	r0, 16b66 <LoRaMacProcess+0xa5e>
   16b5c:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
   16b60:	2800      	cmp	r0, #0
   16b62:	f43f ae38 	beq.w	167d6 <LoRaMacProcess+0x6ce>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   16b66:	f884 1425 	strb.w	r1, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   16b6a:	e634      	b.n	167d6 <LoRaMacProcess+0x6ce>
   16b6c:	20030648 	.word	0x20030648
   16b70:	200303a8 	.word	0x200303a8
   16b74:	2002fd14 	.word	0x2002fd14
   16b78:	200304e0 	.word	0x200304e0
   16b7c:	200305dc 	.word	0x200305dc
   16b80:	20030590 	.word	0x20030590
   16b84:	2002fd4c 	.word	0x2002fd4c
   16b88:	2002fd6c 	.word	0x2002fd6c
   16b8c:	2002feec 	.word	0x2002feec
   16b90:	2003008c 	.word	0x2003008c
   16b94:	20030090 	.word	0x20030090
   16b98:	20030158 	.word	0x20030158
   16b9c:	200305c8 	.word	0x200305c8
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   16ba0:	f884 1425 	strb.w	r1, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   16ba4:	e61d      	b.n	167e2 <LoRaMacProcess+0x6da>
}
   16ba6:	b02b      	add	sp, #172	; 0xac
   16ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016bac <LoRaMacInitialization>:
{
   16bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb0:	4689      	mov	r9, r1
   16bb2:	4690      	mov	r8, r2
    if( ( primitives == NULL ) ||
   16bb4:	4606      	mov	r6, r0
{
   16bb6:	b08b      	sub	sp, #44	; 0x2c
    if( ( primitives == NULL ) ||
   16bb8:	2800      	cmp	r0, #0
   16bba:	f000 818f 	beq.w	16edc <LoRaMacInitialization+0x330>
   16bbe:	2900      	cmp	r1, #0
   16bc0:	f000 818c 	beq.w	16edc <LoRaMacInitialization+0x330>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
   16bc4:	6803      	ldr	r3, [r0, #0]
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	f000 8188 	beq.w	16edc <LoRaMacInitialization+0x330>
   16bcc:	6843      	ldr	r3, [r0, #4]
   16bce:	2b00      	cmp	r3, #0
   16bd0:	f000 8184 	beq.w	16edc <LoRaMacInitialization+0x330>
        ( primitives->MacMcpsIndication == NULL ) ||
   16bd4:	6883      	ldr	r3, [r0, #8]
   16bd6:	2b00      	cmp	r3, #0
   16bd8:	f000 8180 	beq.w	16edc <LoRaMacInitialization+0x330>
        ( primitives->MacMlmeConfirm == NULL ) ||
   16bdc:	68c3      	ldr	r3, [r0, #12]
   16bde:	2b00      	cmp	r3, #0
   16be0:	f000 817c 	beq.w	16edc <LoRaMacInitialization+0x330>
    if( RegionIsActive( region ) == false )
   16be4:	4610      	mov	r0, r2
   16be6:	f015 ffa4 	bl	2cb32 <RegionIsActive>
   16bea:	2800      	cmp	r0, #0
   16bec:	f000 8178 	beq.w	16ee0 <LoRaMacInitialization+0x334>
    Nvm.MacGroup2.DeviceClass = CLASS_A;
   16bf0:	2700      	movs	r7, #0
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
   16bf2:	4cbd      	ldr	r4, [pc, #756]	; (16ee8 <LoRaMacInitialization+0x33c>)
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
   16bf4:	4dbd      	ldr	r5, [pc, #756]	; (16eec <LoRaMacInitialization+0x340>)
    LoRaMacConfirmQueueInit( primitives );
   16bf6:	4630      	mov	r0, r6
   16bf8:	f001 f8a4 	bl	17d44 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
   16bfc:	f240 425c 	movw	r2, #1116	; 0x45c
   16c00:	2100      	movs	r1, #0
   16c02:	4620      	mov	r0, r4
   16c04:	f014 ffc9 	bl	2bb9a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
   16c08:	f240 5284 	movw	r2, #1412	; 0x584
   16c0c:	2100      	movs	r1, #0
   16c0e:	4628      	mov	r0, r5
   16c10:	f014 ffc3 	bl	2bb9a <memset1>
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
   16c14:	4bb6      	ldr	r3, [pc, #728]	; (16ef0 <LoRaMacInitialization+0x344>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16c16:	4640      	mov	r0, r8
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
   16c18:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    params.NvmGroup1 = &Nvm.RegionGroup1;
   16c1c:	f504 735e 	add.w	r3, r4, #888	; 0x378
   16c20:	9306      	str	r3, [sp, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
   16c22:	f504 735f 	add.w	r3, r4, #892	; 0x37c
   16c26:	9307      	str	r3, [sp, #28]
    params.Bands = &RegionBands;
   16c28:	4bb2      	ldr	r3, [pc, #712]	; (16ef4 <LoRaMacInitialization+0x348>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16c2a:	a906      	add	r1, sp, #24
    Nvm.MacGroup2.Region = region;
   16c2c:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
    Nvm.MacGroup2.DeviceClass = CLASS_A;
   16c30:	f884 71a0 	strb.w	r7, [r4, #416]	; 0x1a0
    params.Type = INIT_TYPE_DEFAULTS;
   16c34:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    params.Bands = &RegionBands;
   16c38:	9308      	str	r3, [sp, #32]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16c3a:	f015 ff8e 	bl	2cb5a <RegionInitDefaults>
    getPhy.Attribute = PHY_DUTY_CYCLE;
   16c3e:	230e      	movs	r3, #14
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c40:	a904      	add	r1, sp, #16
   16c42:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DUTY_CYCLE;
   16c46:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c4a:	f015 ff76 	bl	2cb3a <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
   16c4e:	1bc0      	subs	r0, r0, r7
   16c50:	bf18      	it	ne
   16c52:	2001      	movne	r0, #1
    getPhy.Attribute = PHY_DEF_TX_POWER;
   16c54:	f04f 0b0a 	mov.w	fp, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
   16c58:	f884 01a4 	strb.w	r0, [r4, #420]	; 0x1a4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c5c:	a904      	add	r1, sp, #16
   16c5e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_TX_POWER;
   16c62:	f88d b010 	strb.w	fp, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c66:	f015 ff68 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_TX_DR;
   16c6a:	f04f 0a06 	mov.w	sl, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
   16c6e:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c72:	a904      	add	r1, sp, #16
   16c74:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_TX_DR;
   16c78:	f88d a010 	strb.w	sl, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c7c:	f015 ff5d 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
   16c80:	230f      	movs	r3, #15
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
   16c82:	f884 00d5 	strb.w	r0, [r4, #213]	; 0xd5
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c86:	a904      	add	r1, sp, #16
   16c88:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
   16c8c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c90:	f015 ff53 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
   16c94:	2310      	movs	r3, #16
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
   16c96:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c9a:	eb0d 0103 	add.w	r1, sp, r3
   16c9e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
   16ca2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ca6:	f015 ff48 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
   16caa:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
   16cac:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cb0:	a904      	add	r1, sp, #16
   16cb2:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
   16cb6:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cba:	f015 ff3e 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
   16cbe:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
   16cc0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cc4:	a904      	add	r1, sp, #16
   16cc6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
   16cca:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cce:	f015 ff34 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
   16cd2:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
   16cd4:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cd8:	a904      	add	r1, sp, #16
   16cda:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
   16cde:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ce2:	f015 ff2a 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
   16ce6:	2315      	movs	r3, #21
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
   16ce8:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cec:	a904      	add	r1, sp, #16
   16cee:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
   16cf2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cf6:	f015 ff20 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
   16cfa:	2316      	movs	r3, #22
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
   16cfc:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d00:	a904      	add	r1, sp, #16
   16d02:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
   16d06:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d0a:	f015 ff16 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_RX2_DR;
   16d0e:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
   16d10:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
   16d14:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d18:	a904      	add	r1, sp, #16
   16d1a:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_RX2_DR;
   16d1e:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d22:	f015 ff0a 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
   16d26:	231c      	movs	r3, #28
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
   16d28:	b2c0      	uxtb	r0, r0
   16d2a:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
   16d2e:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d32:	a904      	add	r1, sp, #16
   16d34:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
   16d38:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d3c:	f015 fefd 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
   16d40:	231d      	movs	r3, #29
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
   16d42:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d46:	a904      	add	r1, sp, #16
   16d48:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
   16d4c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d50:	f015 fef3 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
   16d54:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
   16d56:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d5a:	a904      	add	r1, sp, #16
   16d5c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
   16d60:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d64:	f015 fee9 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
   16d68:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
   16d6a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d6e:	a904      	add	r1, sp, #16
   16d70:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
   16d74:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d78:	f015 fedf 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
   16d7c:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
   16d7e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d82:	a904      	add	r1, sp, #16
   16d84:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
   16d88:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d8c:	f015 fed5 	bl	2cb3a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
   16d90:	230c      	movs	r3, #12
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d92:	a904      	add	r1, sp, #16
    MacCtx.AdrAckLimit = phyParam.Value;
   16d94:	f8a5 03fc 	strh.w	r0, [r5, #1020]	; 0x3fc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16d98:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
   16d9c:	f04f 0801 	mov.w	r8, #1
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
   16da0:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16da4:	f015 fec9 	bl	2cb3a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
   16da8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16dac:	9003      	str	r0, [sp, #12]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
   16dae:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
   16db0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    MacCtx.AdrAckDelay = phyParam.Value;
   16db4:	f8a5 03fe 	strh.w	r0, [r5, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
   16db8:	66a3      	str	r3, [r4, #104]	; 0x68
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
   16dba:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
   16dbe:	f884 80b4 	strb.w	r8, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
   16dc2:	66e3      	str	r3, [r4, #108]	; 0x6c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
   16dc4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
   16dc8:	f8c4 b098 	str.w	fp, [r4, #152]	; 0x98
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
   16dcc:	6723      	str	r3, [r4, #112]	; 0x70
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
   16dce:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
   16dd2:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
   16dd6:	6763      	str	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
   16dd8:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
   16ddc:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
   16de0:	f884 8078 	strb.w	r8, [r4, #120]	; 0x78
    Nvm.MacGroup2.IsCertPortOn = true;
   16de4:	f884 81a7 	strb.w	r8, [r4, #423]	; 0x1a7
    ResetMacParameters( );
   16de8:	f7fd fff8 	bl	14ddc <ResetMacParameters>
    MacCtx.MacCallbacks = callbacks;
   16dec:	e9c5 69d1 	strd	r6, r9, [r5, #836]	; 0x344
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
   16df0:	466e      	mov	r6, sp
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
   16df2:	4941      	ldr	r1, [pc, #260]	; (16ef8 <LoRaMacInitialization+0x34c>)
   16df4:	f505 705c 	add.w	r0, r5, #880	; 0x370
    Nvm.MacGroup1.AggregatedTimeOff = 0;
   16df8:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
    MacCtx.MacFlags.Value = 0;
   16dfc:	f885 748d 	strb.w	r7, [r5, #1165]	; 0x48d
    Nvm.MacGroup2.PublicNetwork = true;
   16e00:	f884 81a1 	strb.w	r8, [r4, #417]	; 0x1a1
    MacCtx.MacState = LORAMAC_STOPPED;
   16e04:	f8c5 8340 	str.w	r8, [r5, #832]	; 0x340
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
   16e08:	f014 ffaf 	bl	2bd6a <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
   16e0c:	493b      	ldr	r1, [pc, #236]	; (16efc <LoRaMacInitialization+0x350>)
   16e0e:	f505 7062 	add.w	r0, r5, #904	; 0x388
   16e12:	f014 ffaa 	bl	2bd6a <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
   16e16:	493a      	ldr	r1, [pc, #232]	; (16f00 <LoRaMacInitialization+0x354>)
   16e18:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
   16e1c:	f014 ffa5 	bl	2bd6a <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
   16e20:	4938      	ldr	r1, [pc, #224]	; (16f04 <LoRaMacInitialization+0x358>)
   16e22:	f505 6080 	add.w	r0, r5, #1024	; 0x400
   16e26:	f014 ffa0 	bl	2bd6a <TimerInit>
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
   16e2a:	4937      	ldr	r1, [pc, #220]	; (16f08 <LoRaMacInitialization+0x35c>)
   16e2c:	f505 6092 	add.w	r0, r5, #1168	; 0x490
   16e30:	f014 ff9b 	bl	2bd6a <TimerInit>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
   16e34:	4935      	ldr	r1, [pc, #212]	; (16f0c <LoRaMacInitialization+0x360>)
   16e36:	f505 6095 	add.w	r0, r5, #1192	; 0x4a8
   16e3a:	f014 ff96 	bl	2bd6a <TimerInit>
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
   16e3e:	4934      	ldr	r1, [pc, #208]	; (16f10 <LoRaMacInitialization+0x364>)
   16e40:	f505 6098 	add.w	r0, r5, #1216	; 0x4c0
   16e44:	f014 ff91 	bl	2bd6a <TimerInit>
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
   16e48:	4932      	ldr	r1, [pc, #200]	; (16f14 <LoRaMacInitialization+0x368>)
   16e4a:	f505 609b 	add.w	r0, r5, #1240	; 0x4d8
   16e4e:	f014 ff8c 	bl	2bd6a <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
   16e52:	4630      	mov	r0, r6
   16e54:	f014 ff22 	bl	2bc9c <SysTimeGetMcuTime>
   16e58:	e896 0003 	ldmia.w	r6, {r0, r1}
   16e5c:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
   16e60:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Value = 0;
   16e64:	4b2c      	ldr	r3, [pc, #176]	; (16f18 <LoRaMacInitialization+0x36c>)
    Radio.Init( &MacCtx.RadioEvents );
   16e66:	f505 7053 	add.w	r0, r5, #844	; 0x34c
    LoRaMacRadioEvents.Value = 0;
   16e6a:	601f      	str	r7, [r3, #0]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
   16e6c:	4b2b      	ldr	r3, [pc, #172]	; (16f1c <LoRaMacInitialization+0x370>)
    Radio.Init( &MacCtx.RadioEvents );
   16e6e:	4f2c      	ldr	r7, [pc, #176]	; (16f20 <LoRaMacInitialization+0x374>)
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
   16e70:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
   16e74:	4b2b      	ldr	r3, [pc, #172]	; (16f24 <LoRaMacInitialization+0x378>)
   16e76:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
   16e7a:	4b2b      	ldr	r3, [pc, #172]	; (16f28 <LoRaMacInitialization+0x37c>)
   16e7c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
   16e80:	4b2a      	ldr	r3, [pc, #168]	; (16f2c <LoRaMacInitialization+0x380>)
   16e82:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
   16e86:	4b2a      	ldr	r3, [pc, #168]	; (16f30 <LoRaMacInitialization+0x384>)
   16e88:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
   16e8c:	683b      	ldr	r3, [r7, #0]
   16e8e:	4798      	blx	r3
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
   16e90:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   16e94:	f7fd fd46 	bl	14924 <SecureElementInit>
   16e98:	b120      	cbz	r0, 16ea4 <LoRaMacInitialization+0x2f8>
        return LORAMAC_STATUS_CRYPTO_ERROR;
   16e9a:	2611      	movs	r6, #17
}
   16e9c:	4630      	mov	r0, r6
   16e9e:	b00b      	add	sp, #44	; 0x2c
   16ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
   16ea4:	4620      	mov	r0, r4
   16ea6:	f001 f90b 	bl	180c0 <LoRaMacCryptoInit>
   16eaa:	2800      	cmp	r0, #0
   16eac:	d1f5      	bne.n	16e9a <LoRaMacInitialization+0x2ee>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
   16eae:	f000 fe3f 	bl	17b30 <LoRaMacCommandsInit>
   16eb2:	b9b8      	cbnz	r0, 16ee4 <LoRaMacInitialization+0x338>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
   16eb4:	481f      	ldr	r0, [pc, #124]	; (16f34 <LoRaMacInitialization+0x388>)
   16eb6:	f001 f94d 	bl	18154 <LoRaMacCryptoSetMulticastReference>
   16eba:	4606      	mov	r6, r0
   16ebc:	2800      	cmp	r0, #0
   16ebe:	d1ec      	bne.n	16e9a <LoRaMacInitialization+0x2ee>
    srand1( Radio.Random( ) );
   16ec0:	697b      	ldr	r3, [r7, #20]
   16ec2:	4798      	blx	r3
   16ec4:	f7fc f8f0 	bl	130a8 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
   16ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16eca:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
   16ece:	4798      	blx	r3
    Radio.Sleep( );
   16ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ed2:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
   16ed4:	2301      	movs	r3, #1
   16ed6:	f885 348e 	strb.w	r3, [r5, #1166]	; 0x48e
    return LORAMAC_STATUS_OK;
   16eda:	e7df      	b.n	16e9c <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   16edc:	2603      	movs	r6, #3
   16ede:	e7dd      	b.n	16e9c <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
   16ee0:	2609      	movs	r6, #9
   16ee2:	e7db      	b.n	16e9c <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   16ee4:	2613      	movs	r6, #19
   16ee6:	e7d9      	b.n	16e9c <LoRaMacInitialization+0x2f0>
   16ee8:	2002fd14 	.word	0x2002fd14
   16eec:	20030170 	.word	0x20030170
   16ef0:	01010100 	.word	0x01010100
   16ef4:	2002fc84 	.word	0x2002fc84
   16ef8:	0001564d 	.word	0x0001564d
   16efc:	000150a5 	.word	0x000150a5
   16f00:	000150e9 	.word	0x000150e9
   16f04:	00014c11 	.word	0x00014c11
   16f08:	000159a9 	.word	0x000159a9
   16f0c:	00015959 	.word	0x00015959
   16f10:	00015909 	.word	0x00015909
   16f14:	000158c5 	.word	0x000158c5
   16f18:	2002fc80 	.word	0x2002fc80
   16f1c:	00014d91 	.word	0x00014d91
   16f20:	00033a2c 	.word	0x00033a2c
   16f24:	00014d45 	.word	0x00014d45
   16f28:	00014b81 	.word	0x00014b81
   16f2c:	00014b5d 	.word	0x00014b5d
   16f30:	00014ba5 	.word	0x00014ba5
   16f34:	2002fdf4 	.word	0x2002fdf4

00016f38 <LoRaMacStart>:
    MacCtx.MacState = LORAMAC_IDLE;
   16f38:	2000      	movs	r0, #0
   16f3a:	4b02      	ldr	r3, [pc, #8]	; (16f44 <LoRaMacStart+0xc>)
   16f3c:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
}
   16f40:	4770      	bx	lr
   16f42:	bf00      	nop
   16f44:	20030170 	.word	0x20030170

00016f48 <LoRaMacQueryTxPossible>:
{
   16f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t macCmdsSize = 0;
   16f4a:	2700      	movs	r7, #0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16f4c:	4b2d      	ldr	r3, [pc, #180]	; (17004 <LoRaMacQueryTxPossible+0xbc>)
{
   16f4e:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   16f50:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
{
   16f54:	4605      	mov	r5, r0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   16f56:	f88d 2009 	strb.w	r2, [sp, #9]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   16f5a:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16f5e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   16f60:	f88d 200a 	strb.w	r2, [sp, #10]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   16f64:	4a28      	ldr	r2, [pc, #160]	; (17008 <LoRaMacQueryTxPossible+0xc0>)
    if( txInfo == NULL )
   16f66:	460c      	mov	r4, r1
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   16f68:	f892 0418 	ldrb.w	r0, [r2, #1048]	; 0x418
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16f6c:	9603      	str	r6, [sp, #12]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   16f6e:	f88d 000b 	strb.w	r0, [sp, #11]
    size_t macCmdsSize = 0;
   16f72:	9704      	str	r7, [sp, #16]
    if( txInfo == NULL )
   16f74:	2900      	cmp	r1, #0
   16f76:	d040      	beq.n	16ffa <LoRaMacQueryTxPossible+0xb2>
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   16f78:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   16f7c:	f893 11a2 	ldrb.w	r1, [r3, #418]	; 0x1a2
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   16f80:	9207      	str	r2, [sp, #28]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   16f82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   16f86:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   16f8a:	ba52      	rev16	r2, r2
   16f8c:	f8ad 2020 	strh.w	r2, [sp, #32]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   16f90:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
    adrNext.Region = Nvm.MacGroup2.Region;
   16f94:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
   16f98:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    adrNext.Region = Nvm.MacGroup2.Region;
   16f9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   16fa0:	ab03      	add	r3, sp, #12
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   16fa2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   16fa6:	9300      	str	r3, [sp, #0]
   16fa8:	f10d 020a 	add.w	r2, sp, #10
   16fac:	f10d 030b 	add.w	r3, sp, #11
   16fb0:	f10d 0109 	add.w	r1, sp, #9
   16fb4:	a805      	add	r0, sp, #20
    adrNext.UpdateChanMask = false;
   16fb6:	f88d 7014 	strb.w	r7, [sp, #20]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16fba:	9606      	str	r6, [sp, #24]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   16fbc:	f015 fa29 	bl	2c412 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
   16fc0:	f99d 0009 	ldrsb.w	r0, [sp, #9]
   16fc4:	f7fd fe0e 	bl	14be4 <GetMaxAppPayloadWithoutFOptsLength>
   16fc8:	7060      	strb	r0, [r4, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   16fca:	a804      	add	r0, sp, #16
   16fcc:	f000 fe56 	bl	17c7c <LoRaMacCommandsGetSizeSerializedCmds>
   16fd0:	b9a8      	cbnz	r0, 16ffe <LoRaMacQueryTxPossible+0xb6>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
   16fd2:	9a04      	ldr	r2, [sp, #16]
   16fd4:	2a0f      	cmp	r2, #15
   16fd6:	d80c      	bhi.n	16ff2 <LoRaMacQueryTxPossible+0xaa>
   16fd8:	7863      	ldrb	r3, [r4, #1]
   16fda:	429a      	cmp	r2, r3
   16fdc:	d809      	bhi.n	16ff2 <LoRaMacQueryTxPossible+0xaa>
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
   16fde:	4415      	add	r5, r2
   16fe0:	42ab      	cmp	r3, r5
   16fe2:	bf2c      	ite	cs
   16fe4:	2000      	movcs	r0, #0
   16fe6:	2001      	movcc	r0, #1
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
   16fe8:	1a99      	subs	r1, r3, r2
   16fea:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
   16fec:	00c0      	lsls	r0, r0, #3
}
   16fee:	b00b      	add	sp, #44	; 0x2c
   16ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
   16ff2:	2300      	movs	r3, #0
           return LORAMAC_STATUS_LENGTH_ERROR;
   16ff4:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
   16ff6:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
   16ff8:	e7f9      	b.n	16fee <LoRaMacQueryTxPossible+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   16ffa:	2003      	movs	r0, #3
   16ffc:	e7f7      	b.n	16fee <LoRaMacQueryTxPossible+0xa6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   16ffe:	2013      	movs	r0, #19
   17000:	e7f5      	b.n	16fee <LoRaMacQueryTxPossible+0xa6>
   17002:	bf00      	nop
   17004:	2002fd14 	.word	0x2002fd14
   17008:	20030170 	.word	0x20030170

0001700c <LoRaMacMibGetRequestConfirm>:
{
   1700c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( mibGet == NULL )
   1700e:	4604      	mov	r4, r0
   17010:	2800      	cmp	r0, #0
   17012:	f000 80cf 	beq.w	171b4 <LoRaMacMibGetRequestConfirm+0x1a8>
    switch( mibGet->Type )
   17016:	7803      	ldrb	r3, [r0, #0]
   17018:	2b47      	cmp	r3, #71	; 0x47
   1701a:	f200 80c6 	bhi.w	171aa <LoRaMacMibGetRequestConfirm+0x19e>
   1701e:	e8df f003 	tbb	[pc, r3]
   17022:	2b24      	.short	0x2b24
   17024:	3936332f 	.word	0x3936332f
   17028:	c4c4423d 	.word	0xc4c4423d
   1702c:	c4c4c4c4 	.word	0xc4c4c4c4
   17030:	c4c4c4c4 	.word	0xc4c4c4c4
   17034:	c4c4c4c4 	.word	0xc4c4c4c4
   17038:	c4c4c4c4 	.word	0xc4c4c4c4
   1703c:	46c4c4c4 	.word	0x46c4c4c4
   17040:	5e5b544a 	.word	0x5e5b544a
   17044:	68646661 	.word	0x68646661
   17048:	75726f6c 	.word	0x75726f6c
   1704c:	8e8a7b78 	.word	0x8e8a7b78
   17050:	9d9a9296 	.word	0x9d9a9296
   17054:	c4a6a8a1 	.word	0xc4a6a8a1
   17058:	c0bcb8ac 	.word	0xc0bcb8ac
   1705c:	c4c4c4c4 	.word	0xc4c4c4c4
   17060:	c4c4c4c4 	.word	0xc4c4c4c4
   17064:	c4c4c4c4 	.word	0xc4c4c4c4
   17068:	b4c4      	.short	0xb4c4
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
   1706a:	4b53      	ldr	r3, [pc, #332]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1706c:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   17070:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
   17072:	2000      	movs	r0, #0
}
   17074:	b004      	add	sp, #16
   17076:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   17078:	4b4f      	ldr	r3, [pc, #316]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1707a:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
   1707e:	e7f7      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
   17080:	f7fd fd3a 	bl	14af8 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
   17084:	6060      	str	r0, [r4, #4]
            break;
   17086:	e7f4      	b.n	17072 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
   17088:	f7fd fd4c 	bl	14b24 <SecureElementGetJoinEui>
   1708c:	e7fa      	b.n	17084 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.SePin = SecureElementGetPin( );
   1708e:	f7fd fd5f 	bl	14b50 <SecureElementGetPin>
   17092:	e7f7      	b.n	17084 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
   17094:	4b48      	ldr	r3, [pc, #288]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17096:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
   1709a:	e7e9      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
   1709c:	4b46      	ldr	r3, [pc, #280]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1709e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
   170a2:	6063      	str	r3, [r4, #4]
            break;
   170a4:	e7e5      	b.n	17072 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
   170a6:	4b44      	ldr	r3, [pc, #272]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   170a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   170ac:	e7f9      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
   170ae:	4b42      	ldr	r3, [pc, #264]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   170b0:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
   170b4:	e7dc      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            getPhy.Attribute = PHY_CHANNELS;
   170b6:	231b      	movs	r3, #27
            getPhy.Attribute = PHY_CHANNELS_MASK;
   170b8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   170bc:	4b3e      	ldr	r3, [pc, #248]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   170be:	a902      	add	r1, sp, #8
   170c0:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   170c4:	f015 fd39 	bl	2cb3a <RegionGetPhyParam>
   170c8:	e7dc      	b.n	17084 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
   170ca:	4b3c      	ldr	r3, [pc, #240]	; (171bc <LoRaMacMibGetRequestConfirm+0x1b0>)
   170cc:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   170ce:	e893 0003 	ldmia.w	r3, {r0, r1}
   170d2:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
   170d6:	e7cc      	b.n	17072 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   170d8:	4b39      	ldr	r3, [pc, #228]	; (171c0 <LoRaMacMibGetRequestConfirm+0x1b4>)
   170da:	3404      	adds	r4, #4
   170dc:	e7f7      	b.n	170ce <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
   170de:	4b39      	ldr	r3, [pc, #228]	; (171c4 <LoRaMacMibGetRequestConfirm+0x1b8>)
   170e0:	3404      	adds	r4, #4
   170e2:	e7f4      	b.n	170ce <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   170e4:	4b38      	ldr	r3, [pc, #224]	; (171c8 <LoRaMacMibGetRequestConfirm+0x1bc>)
   170e6:	3404      	adds	r4, #4
   170e8:	e7f1      	b.n	170ce <LoRaMacMibGetRequestConfirm+0xc2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
   170ea:	2319      	movs	r3, #25
   170ec:	e7e4      	b.n	170b8 <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
   170ee:	2318      	movs	r3, #24
   170f0:	e7e2      	b.n	170b8 <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   170f2:	4b31      	ldr	r3, [pc, #196]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   170f4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   170f8:	e7ba      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
   170fa:	4b2f      	ldr	r3, [pc, #188]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   170fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   170fe:	e7d0      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
   17100:	4b2d      	ldr	r3, [pc, #180]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   17104:	e7cd      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
   17106:	4b2c      	ldr	r3, [pc, #176]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1710a:	e7ca      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
   1710c:	4b2a      	ldr	r3, [pc, #168]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1710e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   17110:	e7c7      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
   17112:	4b29      	ldr	r3, [pc, #164]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   17116:	e7c4      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
   17118:	2302      	movs	r3, #2
   1711a:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1711e:	4b26      	ldr	r3, [pc, #152]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17120:	a902      	add	r1, sp, #8
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17122:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17126:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1712a:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1712e:	f015 fd04 	bl	2cb3a <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
   17132:	7120      	strb	r0, [r4, #4]
            break;
   17134:	e79d      	b.n	17072 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   17136:	4b20      	ldr	r3, [pc, #128]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17138:	f993 30d5 	ldrsb.w	r3, [r3, #213]	; 0xd5
   1713c:	e798      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
   1713e:	4b1e      	ldr	r3, [pc, #120]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17140:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
   17144:	e794      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   17146:	4b1c      	ldr	r3, [pc, #112]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17148:	f993 30d4 	ldrsb.w	r3, [r3, #212]	; 0xd4
   1714c:	e790      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
   1714e:	4b1a      	ldr	r3, [pc, #104]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17150:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
   17154:	e78c      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
   17156:	4b18      	ldr	r3, [pc, #96]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1715a:	e7a2      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
   1715c:	4b16      	ldr	r3, [pc, #88]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1715e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   17162:	e785      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   17164:	4b14      	ldr	r3, [pc, #80]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   1716a:	6063      	str	r3, [r4, #4]
            break;
   1716c:	e781      	b.n	17072 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Contexts = GetNvmData( );
   1716e:	4b12      	ldr	r3, [pc, #72]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17170:	e797      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   17172:	4b11      	ldr	r3, [pc, #68]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17174:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   17178:	e7f7      	b.n	1716a <LoRaMacMibGetRequestConfirm+0x15e>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
   1717a:	4b0f      	ldr	r3, [pc, #60]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1717c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   17180:	6043      	str	r3, [r0, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
   17182:	f001 faf1 	bl	18768 <RegionGetVersion>
   17186:	60a0      	str	r0, [r4, #8]
            break;
   17188:	e773      	b.n	17072 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
   1718a:	4b0b      	ldr	r3, [pc, #44]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1718c:	f893 31a7 	ldrb.w	r3, [r3, #423]	; 0x1a7
   17190:	e76e      	b.n	17070 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.Rejoin0CycleInSec = Nvm.MacGroup2.Rejoin0CycleInSec;
   17192:	4b09      	ldr	r3, [pc, #36]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   17194:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   17198:	e783      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.Rejoin1CycleInSec = Nvm.MacGroup2.Rejoin1CycleInSec;
   1719a:	4b07      	ldr	r3, [pc, #28]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   1719c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
   171a0:	e77f      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
   171a2:	4b05      	ldr	r3, [pc, #20]	; (171b8 <LoRaMacMibGetRequestConfirm+0x1ac>)
   171a4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
   171a8:	e77b      	b.n	170a2 <LoRaMacMibGetRequestConfirm+0x96>
}
   171aa:	b004      	add	sp, #16
   171ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
   171b0:	f015 b9b5 	b.w	2c51e <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   171b4:	2003      	movs	r0, #3
   171b6:	e75d      	b.n	17074 <LoRaMacMibGetRequestConfirm+0x68>
   171b8:	2002fd14 	.word	0x2002fd14
   171bc:	2002fd90 	.word	0x2002fd90
   171c0:	2002fdcc 	.word	0x2002fdcc
   171c4:	2002fd98 	.word	0x2002fd98
   171c8:	2002fdd4 	.word	0x2002fdd4

000171cc <LoRaMacMibSetRequestConfirm>:
{
   171cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if( mibSet == NULL )
   171ce:	4604      	mov	r4, r0
   171d0:	b910      	cbnz	r0, 171d8 <LoRaMacMibSetRequestConfirm+0xc>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   171d2:	2003      	movs	r0, #3
}
   171d4:	b004      	add	sp, #16
   171d6:	bd70      	pop	{r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
   171d8:	4d9c      	ldr	r5, [pc, #624]	; (1744c <LoRaMacMibSetRequestConfirm+0x280>)
   171da:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
   171de:	079a      	lsls	r2, r3, #30
   171e0:	f100 82b5 	bmi.w	1774e <LoRaMacMibSetRequestConfirm+0x582>
    switch( mibSet->Type )
   171e4:	7802      	ldrb	r2, [r0, #0]
   171e6:	2a47      	cmp	r2, #71	; 0x47
   171e8:	f200 82ae 	bhi.w	17748 <LoRaMacMibSetRequestConfirm+0x57c>
   171ec:	e8df f012 	tbh	[pc, r2, lsl #1]
   171f0:	004d0048 	.word	0x004d0048
   171f4:	0061005b 	.word	0x0061005b
   171f8:	00690065 	.word	0x00690065
   171fc:	0073006e 	.word	0x0073006e
   17200:	00830078 	.word	0x00830078
   17204:	008f0089 	.word	0x008f0089
   17208:	009b0095 	.word	0x009b0095
   1720c:	00a700a1 	.word	0x00a700a1
   17210:	00b300ad 	.word	0x00b300ad
   17214:	00bf00b9 	.word	0x00bf00b9
   17218:	00cb00c5 	.word	0x00cb00c5
   1721c:	00d700d1 	.word	0x00d700d1
   17220:	00e300dd 	.word	0x00e300dd
   17224:	00ef00e9 	.word	0x00ef00e9
   17228:	00fb00f5 	.word	0x00fb00f5
   1722c:	010302ac 	.word	0x010302ac
   17230:	0134011a 	.word	0x0134011a
   17234:	017d015b 	.word	0x017d015b
   17238:	0181016e 	.word	0x0181016e
   1723c:	018e018a 	.word	0x018e018a
   17240:	01960192 	.word	0x01960192
   17244:	02ac019a 	.word	0x02ac019a
   17248:	01b0019e 	.word	0x01b0019e
   1724c:	01c601d8 	.word	0x01c601d8
   17250:	01f001ea 	.word	0x01f001ea
   17254:	01fc01f7 	.word	0x01fc01f7
   17258:	02770201 	.word	0x02770201
   1725c:	028802ac 	.word	0x028802ac
   17260:	02ac029b 	.word	0x02ac029b
   17264:	02ac02ac 	.word	0x02ac02ac
   17268:	02ac02ac 	.word	0x02ac02ac
   1726c:	02ac02ac 	.word	0x02ac02ac
   17270:	02ac02ac 	.word	0x02ac02ac
   17274:	02ac02ac 	.word	0x02ac02ac
   17278:	02ac02ac 	.word	0x02ac02ac
   1727c:	028302ac 	.word	0x028302ac
            status = SwitchClass( mibSet->Param.Class );
   17280:	7900      	ldrb	r0, [r0, #4]
   17282:	f7fd fe75 	bl	14f70 <SwitchClass>
    if( status == LORAMAC_STATUS_OK )
   17286:	b130      	cbz	r0, 17296 <LoRaMacMibSetRequestConfirm+0xca>
   17288:	e7a4      	b.n	171d4 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
   1728a:	7903      	ldrb	r3, [r0, #4]
   1728c:	2b02      	cmp	r3, #2
   1728e:	d0a0      	beq.n	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
   17290:	4a6f      	ldr	r2, [pc, #444]	; (17450 <LoRaMacMibSetRequestConfirm+0x284>)
   17292:	f882 31b8 	strb.w	r3, [r2, #440]	; 0x1b8
        MacCtx.MacFlags.Bits.NvmHandle = 1;
   17296:	f895 348d 	ldrb.w	r3, [r5, #1165]	; 0x48d
   1729a:	2000      	movs	r0, #0
   1729c:	f043 0320 	orr.w	r3, r3, #32
   172a0:	f885 348d 	strb.w	r3, [r5, #1165]	; 0x48d
   172a4:	e796      	b.n	171d4 <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
   172a6:	6840      	ldr	r0, [r0, #4]
   172a8:	f7fd fc18 	bl	14adc <SecureElementSetDevEui>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
   172ac:	2800      	cmp	r0, #0
   172ae:	d0f2      	beq.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
   172b0:	e78f      	b.n	171d2 <LoRaMacMibSetRequestConfirm+0x6>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
   172b2:	6840      	ldr	r0, [r0, #4]
   172b4:	f7fd fc26 	bl	14b04 <SecureElementSetJoinEui>
   172b8:	e7f8      	b.n	172ac <LoRaMacMibSetRequestConfirm+0xe0>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
   172ba:	6840      	ldr	r0, [r0, #4]
   172bc:	f7fd fc38 	bl	14b30 <SecureElementSetPin>
   172c0:	e7f4      	b.n	172ac <LoRaMacMibSetRequestConfirm+0xe0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
   172c2:	7902      	ldrb	r2, [r0, #4]
   172c4:	4b62      	ldr	r3, [pc, #392]	; (17450 <LoRaMacMibSetRequestConfirm+0x284>)
   172c6:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
    if( status == LORAMAC_STATUS_OK )
   172ca:	e7e4      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
   172cc:	6842      	ldr	r2, [r0, #4]
   172ce:	4b60      	ldr	r3, [pc, #384]	; (17450 <LoRaMacMibSetRequestConfirm+0x284>)
   172d0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    if( status == LORAMAC_STATUS_OK )
   172d4:	e7df      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
   172d6:	6842      	ldr	r2, [r0, #4]
   172d8:	4b5d      	ldr	r3, [pc, #372]	; (17450 <LoRaMacMibSetRequestConfirm+0x284>)
   172da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    if( status == LORAMAC_STATUS_OK )
   172de:	e7da      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.AppKey != NULL )
   172e0:	6841      	ldr	r1, [r0, #4]
   172e2:	2900      	cmp	r1, #0
   172e4:	f43f af75 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
   172e8:	2000      	movs	r0, #0
   172ea:	f001 f963 	bl	185b4 <LoRaMacCryptoSetKey>
   172ee:	2800      	cmp	r0, #0
   172f0:	d0d1      	beq.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
   172f2:	2011      	movs	r0, #17
   172f4:	e76e      	b.n	171d4 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NwkKey != NULL )
   172f6:	6841      	ldr	r1, [r0, #4]
   172f8:	2900      	cmp	r1, #0
   172fa:	f43f af6a 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
   172fe:	2001      	movs	r0, #1
   17300:	e7f3      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.JSIntKey != NULL )
   17302:	6841      	ldr	r1, [r0, #4]
   17304:	2900      	cmp	r1, #0
   17306:	f43f af64 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
   1730a:	2002      	movs	r0, #2
   1730c:	e7ed      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.JSEncKey != NULL )
   1730e:	6841      	ldr	r1, [r0, #4]
   17310:	2900      	cmp	r1, #0
   17312:	f43f af5e 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
   17316:	2003      	movs	r0, #3
   17318:	e7e7      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.FNwkSIntKey != NULL )
   1731a:	6841      	ldr	r1, [r0, #4]
   1731c:	2900      	cmp	r1, #0
   1731e:	f43f af58 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
   17322:	2004      	movs	r0, #4
   17324:	e7e1      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.SNwkSIntKey != NULL )
   17326:	6841      	ldr	r1, [r0, #4]
   17328:	2900      	cmp	r1, #0
   1732a:	f43f af52 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
   1732e:	2005      	movs	r0, #5
   17330:	e7db      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.NwkSEncKey != NULL )
   17332:	6841      	ldr	r1, [r0, #4]
   17334:	2900      	cmp	r1, #0
   17336:	f43f af4c 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
   1733a:	2006      	movs	r0, #6
   1733c:	e7d5      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.AppSKey != NULL )
   1733e:	6841      	ldr	r1, [r0, #4]
   17340:	2900      	cmp	r1, #0
   17342:	f43f af46 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
   17346:	2007      	movs	r0, #7
   17348:	e7cf      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKEKey != NULL )
   1734a:	6841      	ldr	r1, [r0, #4]
   1734c:	2900      	cmp	r1, #0
   1734e:	f43f af40 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
   17352:	207f      	movs	r0, #127	; 0x7f
   17354:	e7c9      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey0 != NULL )
   17356:	6841      	ldr	r1, [r0, #4]
   17358:	2900      	cmp	r1, #0
   1735a:	f43f af3a 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
   1735e:	2080      	movs	r0, #128	; 0x80
   17360:	e7c3      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey0 != NULL )
   17362:	6841      	ldr	r1, [r0, #4]
   17364:	2900      	cmp	r1, #0
   17366:	f43f af34 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
   1736a:	2081      	movs	r0, #129	; 0x81
   1736c:	e7bd      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey0 != NULL )
   1736e:	6841      	ldr	r1, [r0, #4]
   17370:	2900      	cmp	r1, #0
   17372:	f43f af2e 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
   17376:	2082      	movs	r0, #130	; 0x82
   17378:	e7b7      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey1 != NULL )
   1737a:	6841      	ldr	r1, [r0, #4]
   1737c:	2900      	cmp	r1, #0
   1737e:	f43f af28 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
   17382:	2083      	movs	r0, #131	; 0x83
   17384:	e7b1      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey1 != NULL )
   17386:	6841      	ldr	r1, [r0, #4]
   17388:	2900      	cmp	r1, #0
   1738a:	f43f af22 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
   1738e:	2084      	movs	r0, #132	; 0x84
   17390:	e7ab      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey1 != NULL )
   17392:	6841      	ldr	r1, [r0, #4]
   17394:	2900      	cmp	r1, #0
   17396:	f43f af1c 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
   1739a:	2085      	movs	r0, #133	; 0x85
   1739c:	e7a5      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey2 != NULL )
   1739e:	6841      	ldr	r1, [r0, #4]
   173a0:	2900      	cmp	r1, #0
   173a2:	f43f af16 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
   173a6:	2086      	movs	r0, #134	; 0x86
   173a8:	e79f      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey2 != NULL )
   173aa:	6841      	ldr	r1, [r0, #4]
   173ac:	2900      	cmp	r1, #0
   173ae:	f43f af10 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
   173b2:	2087      	movs	r0, #135	; 0x87
   173b4:	e799      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey2 != NULL )
   173b6:	6841      	ldr	r1, [r0, #4]
   173b8:	2900      	cmp	r1, #0
   173ba:	f43f af0a 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
   173be:	2088      	movs	r0, #136	; 0x88
   173c0:	e793      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey3 != NULL )
   173c2:	6841      	ldr	r1, [r0, #4]
   173c4:	2900      	cmp	r1, #0
   173c6:	f43f af04 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
   173ca:	2089      	movs	r0, #137	; 0x89
   173cc:	e78d      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey3 != NULL )
   173ce:	6841      	ldr	r1, [r0, #4]
   173d0:	2900      	cmp	r1, #0
   173d2:	f43f aefe 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
   173d6:	208a      	movs	r0, #138	; 0x8a
   173d8:	e787      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey3 != NULL )
   173da:	6841      	ldr	r1, [r0, #4]
   173dc:	2900      	cmp	r1, #0
   173de:	f43f aef8 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
   173e2:	208b      	movs	r0, #139	; 0x8b
   173e4:	e781      	b.n	172ea <LoRaMacMibSetRequestConfirm+0x11e>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
   173e6:	7900      	ldrb	r0, [r0, #4]
   173e8:	4b19      	ldr	r3, [pc, #100]	; (17450 <LoRaMacMibSetRequestConfirm+0x284>)
   173ea:	f883 01a1 	strb.w	r0, [r3, #417]	; 0x1a1
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
   173ee:	4b19      	ldr	r3, [pc, #100]	; (17454 <LoRaMacMibSetRequestConfirm+0x288>)
   173f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   173f2:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
   173f4:	e74f      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   173f6:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   173f8:	4e15      	ldr	r6, [pc, #84]	; (17450 <LoRaMacMibSetRequestConfirm+0x284>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   173fa:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   173fe:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17402:	2207      	movs	r2, #7
   17404:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   17408:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1740a:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   1740e:	f015 fbaa 	bl	2cb66 <RegionVerify>
   17412:	2800      	cmp	r0, #0
   17414:	f43f aedd 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
   17418:	367c      	adds	r6, #124	; 0x7c
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
   1741a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1741e:	e886 0003 	stmia.w	r6, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
   17422:	e738      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   17424:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17426:	4e0a      	ldr	r6, [pc, #40]	; (17450 <LoRaMacMibSetRequestConfirm+0x284>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   17428:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1742c:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17430:	2207      	movs	r2, #7
   17432:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   17436:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17438:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   1743c:	f015 fb93 	bl	2cb66 <RegionVerify>
   17440:	2800      	cmp	r0, #0
   17442:	f43f aec6 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
   17446:	36b8      	adds	r6, #184	; 0xb8
   17448:	e7e7      	b.n	1741a <LoRaMacMibSetRequestConfirm+0x24e>
   1744a:	bf00      	nop
   1744c:	20030170 	.word	0x20030170
   17450:	2002fd14 	.word	0x2002fd14
   17454:	00033a2c 	.word	0x00033a2c
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   17458:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1745a:	4ebe      	ldr	r6, [pc, #760]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   1745c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17460:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17464:	2207      	movs	r2, #7
   17466:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   1746a:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1746c:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17470:	f015 fb79 	bl	2cb66 <RegionVerify>
   17474:	2800      	cmp	r0, #0
   17476:	f43f aeac 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
   1747a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1747e:	f106 0384 	add.w	r3, r6, #132	; 0x84
   17482:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
   17486:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   1748a:	2b02      	cmp	r3, #2
   1748c:	f47f af03 	bne.w	17296 <LoRaMacMibSetRequestConfirm+0xca>
   17490:	f896 31b8 	ldrb.w	r3, [r6, #440]	; 0x1b8
   17494:	2b00      	cmp	r3, #0
   17496:	f43f aefe 	beq.w	17296 <LoRaMacMibSetRequestConfirm+0xca>
                    Radio.Sleep( );
   1749a:	4baf      	ldr	r3, [pc, #700]	; (17758 <LoRaMacMibSetRequestConfirm+0x58c>)
   1749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1749e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
   174a0:	f7fd fd3a 	bl	14f18 <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
   174a4:	e6f7      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   174a6:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   174a8:	4eaa      	ldr	r6, [pc, #680]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   174aa:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   174ae:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   174b2:	2207      	movs	r2, #7
   174b4:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   174b8:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   174ba:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   174be:	f015 fb52 	bl	2cb66 <RegionVerify>
   174c2:	2800      	cmp	r0, #0
   174c4:	f43f ae85 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
   174c8:	36c0      	adds	r6, #192	; 0xc0
   174ca:	e7a6      	b.n	1741a <LoRaMacMibSetRequestConfirm+0x24e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
   174cc:	6843      	ldr	r3, [r0, #4]
   174ce:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
   174d0:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
   174d2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
   174d6:	4b9f      	ldr	r3, [pc, #636]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   174d8:	a902      	add	r1, sp, #8
   174da:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   174de:	f015 fb51 	bl	2cb84 <RegionChanMaskSet>
   174e2:	2800      	cmp	r0, #0
   174e4:	f47f aed7 	bne.w	17296 <LoRaMacMibSetRequestConfirm+0xca>
   174e8:	e673      	b.n	171d2 <LoRaMacMibSetRequestConfirm+0x6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
   174ea:	6843      	ldr	r3, [r0, #4]
   174ec:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
   174ee:	2300      	movs	r3, #0
   174f0:	e7ef      	b.n	174d2 <LoRaMacMibSetRequestConfirm+0x306>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
   174f2:	7903      	ldrb	r3, [r0, #4]
   174f4:	1e5a      	subs	r2, r3, #1
   174f6:	2a0e      	cmp	r2, #14
   174f8:	f63f ae6b 	bhi.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
   174fc:	4a95      	ldr	r2, [pc, #596]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   174fe:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
    if( status == LORAMAC_STATUS_OK )
   17502:	e6c8      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
   17504:	6842      	ldr	r2, [r0, #4]
   17506:	4b93      	ldr	r3, [pc, #588]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17508:	665a      	str	r2, [r3, #100]	; 0x64
    if( status == LORAMAC_STATUS_OK )
   1750a:	e6c4      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
   1750c:	6842      	ldr	r2, [r0, #4]
   1750e:	4b91      	ldr	r3, [pc, #580]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17510:	669a      	str	r2, [r3, #104]	; 0x68
    if( status == LORAMAC_STATUS_OK )
   17512:	e6c0      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
   17514:	6842      	ldr	r2, [r0, #4]
   17516:	4b8f      	ldr	r3, [pc, #572]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17518:	66da      	str	r2, [r3, #108]	; 0x6c
    if( status == LORAMAC_STATUS_OK )
   1751a:	e6bc      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
   1751c:	6842      	ldr	r2, [r0, #4]
   1751e:	4b8d      	ldr	r3, [pc, #564]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17520:	671a      	str	r2, [r3, #112]	; 0x70
    if( status == LORAMAC_STATUS_OK )
   17522:	e6b8      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
   17524:	6842      	ldr	r2, [r0, #4]
   17526:	4b8b      	ldr	r3, [pc, #556]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17528:	675a      	str	r2, [r3, #116]	; 0x74
    if( status == LORAMAC_STATUS_OK )
   1752a:	e6b4      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   1752c:	4c89      	ldr	r4, [pc, #548]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
   1752e:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   17530:	2206      	movs	r2, #6
   17532:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   17536:	a901      	add	r1, sp, #4
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
   17538:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   1753c:	f015 fb13 	bl	2cb66 <RegionVerify>
   17540:	2800      	cmp	r0, #0
   17542:	f43f ae46 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
   17546:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1754a:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
    if( status == LORAMAC_STATUS_OK )
   1754e:	e6a2      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
   17550:	7903      	ldrb	r3, [r0, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17552:	4c80      	ldr	r4, [pc, #512]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
   17554:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17558:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   1755c:	2205      	movs	r2, #5
   1755e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   17562:	a901      	add	r1, sp, #4
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17564:	f88d 3006 	strb.w	r3, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17568:	f015 fafd 	bl	2cb66 <RegionVerify>
   1756c:	2800      	cmp	r0, #0
   1756e:	f43f ae30 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
   17572:	f89d 3004 	ldrb.w	r3, [sp, #4]
   17576:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    if( status == LORAMAC_STATUS_OK )
   1757a:	e68c      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   1757c:	4c75      	ldr	r4, [pc, #468]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
   1757e:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   17580:	220a      	movs	r2, #10
   17582:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   17586:	a901      	add	r1, sp, #4
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
   17588:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   1758c:	f015 faeb 	bl	2cb66 <RegionVerify>
   17590:	2800      	cmp	r0, #0
   17592:	f43f ae1e 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
   17596:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1759a:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
    if( status == LORAMAC_STATUS_OK )
   1759e:	e67a      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   175a0:	4c6c      	ldr	r4, [pc, #432]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
   175a2:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   175a4:	2209      	movs	r2, #9
   175a6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   175aa:	a901      	add	r1, sp, #4
            verify.TxPower = mibSet->Param.ChannelsTxPower;
   175ac:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   175b0:	f015 fad9 	bl	2cb66 <RegionVerify>
   175b4:	2800      	cmp	r0, #0
   175b6:	f43f ae0c 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
   175ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   175be:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if( status == LORAMAC_STATUS_OK )
   175c2:	e668      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
   175c4:	6842      	ldr	r2, [r0, #4]
   175c6:	4b63      	ldr	r3, [pc, #396]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   175c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   175cc:	65da      	str	r2, [r3, #92]	; 0x5c
    if( status == LORAMAC_STATUS_OK )
   175ce:	e662      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
   175d0:	7902      	ldrb	r2, [r0, #4]
   175d2:	4b60      	ldr	r3, [pc, #384]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   175d4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
   175d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    if( status == LORAMAC_STATUS_OK )
   175dc:	e65b      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
   175de:	6842      	ldr	r2, [r0, #4]
   175e0:	4b5c      	ldr	r3, [pc, #368]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   175e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    if( status == LORAMAC_STATUS_OK )
   175e6:	e656      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
   175e8:	6842      	ldr	r2, [r0, #4]
   175ea:	4b5a      	ldr	r3, [pc, #360]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   175ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    if( status == LORAMAC_STATUS_OK )
   175f0:	e651      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.Contexts != 0 )
   175f2:	6844      	ldr	r4, [r0, #4]
   175f4:	2c00      	cmp	r4, #0
   175f6:	f43f adec 	beq.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
    if( MacCtx.MacState != LORAMAC_STOPPED )
   175fa:	2b01      	cmp	r3, #1
   175fc:	f040 80a7 	bne.w	1774e <LoRaMacMibSetRequestConfirm+0x582>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
   17600:	2134      	movs	r1, #52	; 0x34
   17602:	4620      	mov	r0, r4
   17604:	f7fb fd56 	bl	130b4 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
   17608:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1760a:	4298      	cmp	r0, r3
   1760c:	d104      	bne.n	17618 <LoRaMacMibSetRequestConfirm+0x44c>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
   1760e:	2238      	movs	r2, #56	; 0x38
   17610:	4621      	mov	r1, r4
   17612:	4850      	ldr	r0, [pc, #320]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17614:	f014 faad 	bl	2bb72 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
   17618:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1761c:	211c      	movs	r1, #28
   1761e:	4630      	mov	r0, r6
   17620:	f7fb fd48 	bl	130b4 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
   17624:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17626:	4298      	cmp	r0, r3
   17628:	d104      	bne.n	17634 <LoRaMacMibSetRequestConfirm+0x468>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
   1762a:	2220      	movs	r2, #32
   1762c:	4631      	mov	r1, r6
   1762e:	484b      	ldr	r0, [pc, #300]	; (1775c <LoRaMacMibSetRequestConfirm+0x590>)
   17630:	f014 fa9f 	bl	2bb72 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
   17634:	f104 0658 	add.w	r6, r4, #88	; 0x58
   17638:	f44f 71be 	mov.w	r1, #380	; 0x17c
   1763c:	4630      	mov	r0, r6
   1763e:	f7fb fd39 	bl	130b4 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
   17642:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   17646:	4298      	cmp	r0, r3
   17648:	d118      	bne.n	1767c <LoRaMacMibSetRequestConfirm+0x4b0>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
   1764a:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1764e:	4631      	mov	r1, r6
   17650:	4843      	ldr	r0, [pc, #268]	; (17760 <LoRaMacMibSetRequestConfirm+0x594>)
   17652:	f014 fa8e 	bl	2bb72 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   17656:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
   1765a:	f885 33e8 	strb.w	r3, [r5, #1000]	; 0x3e8
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   1765e:	4b3d      	ldr	r3, [pc, #244]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17660:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17664:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   17668:	f8c5 23ec 	str.w	r2, [r5, #1004]	; 0x3ec
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1766c:	f885 33f8 	strb.w	r3, [r5, #1016]	; 0x3f8
        MacCtx.RxWindowCConfig.RxContinuous = true;
   17670:	2301      	movs	r3, #1
   17672:	f885 33f9 	strb.w	r3, [r5, #1017]	; 0x3f9
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   17676:	2302      	movs	r3, #2
   17678:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
   1767c:	f504 76ec 	add.w	r6, r4, #472	; 0x1d8
   17680:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   17684:	4630      	mov	r0, r6
   17686:	f7fb fd15 	bl	130b4 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
   1768a:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
   1768e:	4298      	cmp	r0, r3
   17690:	d105      	bne.n	1769e <LoRaMacMibSetRequestConfirm+0x4d2>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
   17692:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   17696:	4631      	mov	r1, r6
   17698:	4832      	ldr	r0, [pc, #200]	; (17764 <LoRaMacMibSetRequestConfirm+0x598>)
   1769a:	f014 fa6a 	bl	2bb72 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
   1769e:	f504 765e 	add.w	r6, r4, #888	; 0x378
   176a2:	2100      	movs	r1, #0
   176a4:	4630      	mov	r0, r6
   176a6:	f7fb fd05 	bl	130b4 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
   176aa:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
   176ae:	4298      	cmp	r0, r3
   176b0:	d104      	bne.n	176bc <LoRaMacMibSetRequestConfirm+0x4f0>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
   176b2:	2204      	movs	r2, #4
   176b4:	4631      	mov	r1, r6
   176b6:	482c      	ldr	r0, [pc, #176]	; (17768 <LoRaMacMibSetRequestConfirm+0x59c>)
   176b8:	f014 fa5b 	bl	2bb72 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
   176bc:	f204 4644 	addw	r6, r4, #1092	; 0x444
   176c0:	2114      	movs	r1, #20
   176c2:	4630      	mov	r0, r6
   176c4:	f7fb fcf6 	bl	130b4 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
   176c8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   176cc:	4298      	cmp	r0, r3
   176ce:	f47f ade2 	bne.w	17296 <LoRaMacMibSetRequestConfirm+0xca>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
   176d2:	2218      	movs	r2, #24
   176d4:	4631      	mov	r1, r6
   176d6:	4825      	ldr	r0, [pc, #148]	; (1776c <LoRaMacMibSetRequestConfirm+0x5a0>)
   176d8:	f014 fa4b 	bl	2bb72 <memcpy1>
    if( status == LORAMAC_STATUS_OK )
   176dc:	e5db      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
   176de:	7983      	ldrb	r3, [r0, #6]
   176e0:	2b01      	cmp	r3, #1
   176e2:	f63f ad76 	bhi.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
   176e6:	6842      	ldr	r2, [r0, #4]
   176e8:	4b1a      	ldr	r3, [pc, #104]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   176ea:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
   176ee:	6840      	ldr	r0, [r0, #4]
   176f0:	f000 fd04 	bl	180fc <LoRaMacCryptoSetLrWanVersion>
   176f4:	e5fb      	b.n	172ee <LoRaMacMibSetRequestConfirm+0x122>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
   176f6:	7902      	ldrb	r2, [r0, #4]
   176f8:	4b16      	ldr	r3, [pc, #88]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   176fa:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
    if( status == LORAMAC_STATUS_OK )
   176fe:	e5ca      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
            if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
   17700:	4b14      	ldr	r3, [pc, #80]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17702:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   17706:	4b1a      	ldr	r3, [pc, #104]	; (17770 <LoRaMacMibSetRequestConfirm+0x5a4>)
   17708:	4299      	cmp	r1, r3
   1770a:	f67f ad62 	bls.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
        *timeInMiliSec = rejoinCycleTime * 1000;
   1770e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17712:	4359      	muls	r1, r3
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   17714:	4817      	ldr	r0, [pc, #92]	; (17774 <LoRaMacMibSetRequestConfirm+0x5a8>)
        *timeInMiliSec = rejoinCycleTime * 1000;
   17716:	f8c5 14f0 	str.w	r1, [r5, #1264]	; 0x4f0
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   1771a:	f014 fb2e 	bl	2bd7a <TimerSetValue>
                TimerStart( &MacCtx.Rejoin0CycleTimer );
   1771e:	4815      	ldr	r0, [pc, #84]	; (17774 <LoRaMacMibSetRequestConfirm+0x5a8>)
                TimerStart( &MacCtx.Rejoin1CycleTimer );
   17720:	f7fb fcee 	bl	13100 <TimerStart>
    if( status == LORAMAC_STATUS_OK )
   17724:	e5b7      	b.n	17296 <LoRaMacMibSetRequestConfirm+0xca>
           if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
   17726:	4b0b      	ldr	r3, [pc, #44]	; (17754 <LoRaMacMibSetRequestConfirm+0x588>)
   17728:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
    if( rejoinCycleTime > 4294967 )
   1772c:	4b10      	ldr	r3, [pc, #64]	; (17770 <LoRaMacMibSetRequestConfirm+0x5a4>)
   1772e:	4299      	cmp	r1, r3
   17730:	f67f ad4f 	bls.w	171d2 <LoRaMacMibSetRequestConfirm+0x6>
        *timeInMiliSec = rejoinCycleTime * 1000;
   17734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17738:	4359      	muls	r1, r3
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   1773a:	480f      	ldr	r0, [pc, #60]	; (17778 <LoRaMacMibSetRequestConfirm+0x5ac>)
        *timeInMiliSec = rejoinCycleTime * 1000;
   1773c:	f8c5 14f4 	str.w	r1, [r5, #1268]	; 0x4f4
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   17740:	f014 fb1b 	bl	2bd7a <TimerSetValue>
                TimerStart( &MacCtx.Rejoin1CycleTimer );
   17744:	480c      	ldr	r0, [pc, #48]	; (17778 <LoRaMacMibSetRequestConfirm+0x5ac>)
   17746:	e7eb      	b.n	17720 <LoRaMacMibSetRequestConfirm+0x554>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
   17748:	f014 feeb 	bl	2c522 <LoRaMacMibClassBSetRequestConfirm>
            break;
   1774c:	e59b      	b.n	17286 <LoRaMacMibSetRequestConfirm+0xba>
        return LORAMAC_STATUS_BUSY;
   1774e:	2001      	movs	r0, #1
   17750:	e540      	b.n	171d4 <LoRaMacMibSetRequestConfirm+0x8>
   17752:	bf00      	nop
   17754:	2002fd14 	.word	0x2002fd14
   17758:	00033a2c 	.word	0x00033a2c
   1775c:	2002fd4c 	.word	0x2002fd4c
   17760:	2002fd6c 	.word	0x2002fd6c
   17764:	2002feec 	.word	0x2002feec
   17768:	2003008c 	.word	0x2003008c
   1776c:	20030158 	.word	0x20030158
   17770:	00418937 	.word	0x00418937
   17774:	20030600 	.word	0x20030600
   17778:	20030618 	.word	0x20030618

0001777c <LoRaMacMlmeRequest>:
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   1777c:	2300      	movs	r3, #0
{
   1777e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17782:	b086      	sub	sp, #24
    if( mlmeRequest == NULL )
   17784:	4605      	mov	r5, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   17786:	f8ad 3000 	strh.w	r3, [sp]
    if( mlmeRequest == NULL )
   1778a:	2800      	cmp	r0, #0
   1778c:	f000 80e6 	beq.w	1795c <LoRaMacMlmeRequest+0x1e0>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
   17790:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
   17792:	f7fd fd15 	bl	151c0 <LoRaMacIsBusy>
   17796:	b120      	cbz	r0, 177a2 <LoRaMacMlmeRequest+0x26>
        return LORAMAC_STATUS_BUSY;
   17798:	2601      	movs	r6, #1
}
   1779a:	4630      	mov	r0, r6
   1779c:	b006      	add	sp, #24
   1779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
   177a2:	f000 fb99 	bl	17ed8 <LoRaMacConfirmQueueIsFull>
   177a6:	2800      	cmp	r0, #0
   177a8:	d1f6      	bne.n	17798 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
   177aa:	f000 fb8f 	bl	17ecc <LoRaMacConfirmQueueGetCnt>
   177ae:	4601      	mov	r1, r0
   177b0:	b918      	cbnz	r0, 177ba <LoRaMacMlmeRequest+0x3e>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
   177b2:	2214      	movs	r2, #20
   177b4:	486a      	ldr	r0, [pc, #424]	; (17960 <LoRaMacMlmeRequest+0x1e4>)
   177b6:	f014 f9f0 	bl	2bb9a <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   177ba:	2201      	movs	r2, #1
    queueElement.ReadyToHandle = false;
   177bc:	2100      	movs	r1, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   177be:	4c69      	ldr	r4, [pc, #420]	; (17964 <LoRaMacMlmeRequest+0x1e8>)
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   177c0:	f88d 2005 	strb.w	r2, [sp, #5]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
   177c4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   177c8:	f884 2459 	strb.w	r2, [r4, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
   177cc:	f043 0304 	orr.w	r3, r3, #4
   177d0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    queueElement.Request = mlmeRequest->Type;
   177d4:	782b      	ldrb	r3, [r5, #0]
    queueElement.ReadyToHandle = false;
   177d6:	f8ad 1006 	strh.w	r1, [sp, #6]
    queueElement.Request = mlmeRequest->Type;
   177da:	f88d 3004 	strb.w	r3, [sp, #4]
    switch( mlmeRequest->Type )
   177de:	3b01      	subs	r3, #1
   177e0:	2b0b      	cmp	r3, #11
   177e2:	d807      	bhi.n	177f4 <LoRaMacMlmeRequest+0x78>
   177e4:	e8df f003 	tbb	[pc, r3]
   177e8:	78736217 	.word	0x78736217
   177ec:	88060682 	.word	0x88060682
   177f0:	a594a906 	.word	0xa594a906
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
   177f4:	2602      	movs	r6, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   177f6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   177fa:	612b      	str	r3, [r5, #16]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
   177fc:	f000 fb66 	bl	17ecc <LoRaMacConfirmQueueGetCnt>
   17800:	2800      	cmp	r0, #0
   17802:	d1ca      	bne.n	1779a <LoRaMacMlmeRequest+0x1e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   17804:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.NodeAckRequested = false;
   17808:	f884 041a 	strb.w	r0, [r4, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   1780c:	f360 0382 	bfi	r3, r0, #2, #1
   17810:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   17814:	e7c1      	b.n	1779a <LoRaMacMlmeRequest+0x1e>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
   17816:	f8d4 6340 	ldr.w	r6, [r4, #832]	; 0x340
   1781a:	f016 0620 	ands.w	r6, r6, #32
   1781e:	d1bb      	bne.n	17798 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
   17820:	792f      	ldrb	r7, [r5, #4]
   17822:	2f02      	cmp	r7, #2
   17824:	d120      	bne.n	17868 <LoRaMacMlmeRequest+0xec>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   17826:	4f50      	ldr	r7, [pc, #320]	; (17968 <LoRaMacMlmeRequest+0x1ec>)
                ResetMacParameters( );
   17828:	f7fd fad8 	bl	14ddc <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   1782c:	4632      	mov	r2, r6
   1782e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   17832:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
   17836:	f015 f9fb 	bl	2cc30 <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
   1783a:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   1783c:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
                status = SendReJoinReq( JOIN_REQ );
   17840:	20ff      	movs	r0, #255	; 0xff
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
   17842:	f88d 3005 	strb.w	r3, [sp, #5]
                status = SendReJoinReq( JOIN_REQ );
   17846:	f7fd ffb9 	bl	157bc <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
   1784a:	4606      	mov	r6, r0
   1784c:	b358      	cbz	r0, 178a6 <LoRaMacMlmeRequest+0x12a>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
   1784e:	2201      	movs	r2, #1
   17850:	f995 1005 	ldrsb.w	r1, [r5, #5]
   17854:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
   17858:	f015 f9ea 	bl	2cc30 <RegionAlternateDr>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   1785c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
   17860:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17864:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   17866:	e7c9      	b.n	177fc <LoRaMacMlmeRequest+0x80>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
   17868:	2f01      	cmp	r7, #1
   1786a:	d1c3      	bne.n	177f4 <LoRaMacMlmeRequest+0x78>
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   1786c:	2302      	movs	r3, #2
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   1786e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 17968 <LoRaMacMlmeRequest+0x1ec>
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   17872:	a902      	add	r1, sp, #8
   17874:	f898 0058 	ldrb.w	r0, [r8, #88]	; 0x58
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   17878:	f88d 3014 	strb.w	r3, [sp, #20]
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   1787c:	f888 61a5 	strb.w	r6, [r8, #421]	; 0x1a5
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   17880:	f015 f96b 	bl	2cb5a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
   17884:	792b      	ldrb	r3, [r5, #4]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   17886:	f88d 6005 	strb.w	r6, [sp, #5]
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
   1788a:	f888 31b8 	strb.w	r3, [r8, #440]	; 0x1b8
                MacCtx.MacCallbacks->MacProcessNotify( );
   1788e:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
                queueElement.ReadyToHandle = true;
   17892:	f88d 7006 	strb.w	r7, [sp, #6]
                MacCtx.MacCallbacks->MacProcessNotify( );
   17896:	68db      	ldr	r3, [r3, #12]
   17898:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
   1789a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   1789e:	f043 0310 	orr.w	r3, r3, #16
   178a2:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   178a6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   178aa:	e01d      	b.n	178e8 <LoRaMacMlmeRequest+0x16c>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   178ac:	2302      	movs	r3, #2
            status = SendReJoinReq( REJOIN_REQ_0 );
   178ae:	2000      	movs	r0, #0
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   178b0:	f884 3458 	strb.w	r3, [r4, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
   178b4:	f7fd ff82 	bl	157bc <SendReJoinReq>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   178b8:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
   178bc:	4606      	mov	r6, r0
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   178be:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   178c0:	2800      	cmp	r0, #0
   178c2:	d19b      	bne.n	177fc <LoRaMacMlmeRequest+0x80>
        LoRaMacConfirmQueueAdd( &queueElement );
   178c4:	a801      	add	r0, sp, #4
   178c6:	f000 fa51 	bl	17d6c <LoRaMacConfirmQueueAdd>
   178ca:	2600      	movs	r6, #0
   178cc:	e765      	b.n	1779a <LoRaMacMlmeRequest+0x1e>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   178ce:	2303      	movs	r3, #3
            status = SendReJoinReq( REJOIN_REQ_1 );
   178d0:	2001      	movs	r0, #1
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   178d2:	f884 3458 	strb.w	r3, [r4, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
   178d6:	e7ed      	b.n	178b4 <LoRaMacMlmeRequest+0x138>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   178d8:	2200      	movs	r2, #0
   178da:	4669      	mov	r1, sp
   178dc:	2002      	movs	r0, #2
   178de:	f000 f935 	bl	17b4c <LoRaMacCommandsAddCmd>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   178e2:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   178e6:	b980      	cbnz	r0, 1790a <LoRaMacMlmeRequest+0x18e>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   178e8:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   178ea:	e7eb      	b.n	178c4 <LoRaMacMlmeRequest+0x148>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
   178ec:	7b2a      	ldrb	r2, [r5, #12]
   178ee:	68a9      	ldr	r1, [r5, #8]
   178f0:	88a8      	ldrh	r0, [r5, #4]
   178f2:	f7fe fbf3 	bl	160dc <SetTxContinuousWave>
   178f6:	e7df      	b.n	178b8 <LoRaMacMlmeRequest+0x13c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   178f8:	2200      	movs	r2, #0
   178fa:	4669      	mov	r1, sp
   178fc:	200d      	movs	r0, #13
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   178fe:	f000 f925 	bl	17b4c <LoRaMacCommandsAddCmd>
   17902:	2800      	cmp	r0, #0
   17904:	d0cf      	beq.n	178a6 <LoRaMacMlmeRequest+0x12a>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17906:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
   1790a:	2613      	movs	r6, #19
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   1790c:	612b      	str	r3, [r5, #16]
   1790e:	e775      	b.n	177fc <LoRaMacMlmeRequest+0x80>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
   17910:	4b15      	ldr	r3, [pc, #84]	; (17968 <LoRaMacMlmeRequest+0x1ec>)
   17912:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   17916:	2b00      	cmp	r3, #0
   17918:	f47f af6c 	bne.w	177f4 <LoRaMacMlmeRequest+0x78>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
   1791c:	792e      	ldrb	r6, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
   1791e:	f006 0007 	and.w	r0, r6, #7
   17922:	f014 fdf7 	bl	2c514 <LoRaMacClassBSetPingSlotInfo>
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
   17926:	2201      	movs	r2, #1
   17928:	4669      	mov	r1, sp
   1792a:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
   1792c:	f88d 6000 	strb.w	r6, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
   17930:	e7e5      	b.n	178fe <LoRaMacMlmeRequest+0x182>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17932:	2200      	movs	r2, #0
   17934:	4669      	mov	r1, sp
   17936:	2012      	movs	r0, #18
   17938:	e7e1      	b.n	178fe <LoRaMacMlmeRequest+0x182>
            queueElement.RestrictCommonReadyToHandle = true;
   1793a:	f88d 2007 	strb.w	r2, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
   1793e:	f014 fdda 	bl	2c4f6 <LoRaMacClassBIsAcquisitionInProgress>
   17942:	4606      	mov	r6, r0
   17944:	b928      	cbnz	r0, 17952 <LoRaMacMlmeRequest+0x1d6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
   17946:	f014 fdd3 	bl	2c4f0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
   1794a:	4630      	mov	r0, r6
   1794c:	f014 fdd5 	bl	2c4fa <LoRaMacClassBBeaconTimerEvent>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17950:	e7a9      	b.n	178a6 <LoRaMacMlmeRequest+0x12a>
   17952:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                status = LORAMAC_STATUS_BUSY;
   17956:	2601      	movs	r6, #1
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17958:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   1795a:	e74f      	b.n	177fc <LoRaMacMlmeRequest+0x80>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   1795c:	2603      	movs	r6, #3
   1795e:	e71c      	b.n	1779a <LoRaMacMlmeRequest+0x1e>
   17960:	200305c8 	.word	0x200305c8
   17964:	20030170 	.word	0x20030170
   17968:	2002fd14 	.word	0x2002fd14

0001796c <LoRaMacMcpsRequest>:
{
   1796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mcpsRequest == NULL )
   17970:	4607      	mov	r7, r0
{
   17972:	b08d      	sub	sp, #52	; 0x34
    if( mcpsRequest == NULL )
   17974:	b920      	cbnz	r0, 17980 <LoRaMacMcpsRequest+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   17976:	2203      	movs	r2, #3
}
   17978:	4610      	mov	r0, r2
   1797a:	b00d      	add	sp, #52	; 0x34
   1797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
   17980:	2300      	movs	r3, #0
   17982:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
   17984:	f7fd fc1c 	bl	151c0 <LoRaMacIsBusy>
   17988:	4604      	mov	r4, r0
   1798a:	2800      	cmp	r0, #0
   1798c:	f040 80b8 	bne.w	17b00 <LoRaMacMcpsRequest+0x194>
    McpsReq_t request = *mcpsRequest;
   17990:	463e      	mov	r6, r7
   17992:	ad07      	add	r5, sp, #28
   17994:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   17998:	89bb      	ldrh	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
   1799a:	2214      	movs	r2, #20
   1799c:	4621      	mov	r1, r4
   1799e:	4859      	ldr	r0, [pc, #356]	; (17b04 <LoRaMacMcpsRequest+0x198>)
    McpsReq_t request = *mcpsRequest;
   179a0:	783e      	ldrb	r6, [r7, #0]
   179a2:	f997 b00e 	ldrsb.w	fp, [r7, #14]
   179a6:	9301      	str	r3, [sp, #4]
    macHdr.Value = 0;
   179a8:	f88d 4008 	strb.w	r4, [sp, #8]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
   179ac:	f014 f8f5 	bl	2bb9a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   179b0:	2201      	movs	r2, #1
   179b2:	f8df 8154 	ldr.w	r8, [pc, #340]	; 17b08 <LoRaMacMcpsRequest+0x19c>
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
   179b6:	4d55      	ldr	r5, [pc, #340]	; (17b0c <LoRaMacMcpsRequest+0x1a0>)
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   179b8:	f888 2445 	strb.w	r2, [r8, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
   179bc:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
   179c0:	2a02      	cmp	r2, #2
   179c2:	d111      	bne.n	179e8 <LoRaMacMcpsRequest+0x7c>
   179c4:	f895 21a0 	ldrb.w	r2, [r5, #416]	; 0x1a0
   179c8:	2a02      	cmp	r2, #2
   179ca:	d10d      	bne.n	179e8 <LoRaMacMcpsRequest+0x7c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
   179cc:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
   179d0:	b952      	cbnz	r2, 179e8 <LoRaMacMcpsRequest+0x7c>
    switch( request.Type )
   179d2:	2e01      	cmp	r6, #1
   179d4:	d947      	bls.n	17a66 <LoRaMacMcpsRequest+0xfa>
   179d6:	2e03      	cmp	r6, #3
   179d8:	d052      	beq.n	17a80 <LoRaMacMcpsRequest+0x114>
   179da:	2e01      	cmp	r6, #1
   179dc:	bf38      	it	cc
   179de:	2601      	movcc	r6, #1
   179e0:	46a3      	mov	fp, r4
    uint8_t fPort = 0;
   179e2:	f04f 0900 	mov.w	r9, #0
            break;
   179e6:	e011      	b.n	17a0c <LoRaMacMcpsRequest+0xa0>
    switch( request.Type )
   179e8:	2e01      	cmp	r6, #1
   179ea:	d03c      	beq.n	17a66 <LoRaMacMcpsRequest+0xfa>
   179ec:	2e03      	cmp	r6, #3
   179ee:	d047      	beq.n	17a80 <LoRaMacMcpsRequest+0x114>
   179f0:	2e00      	cmp	r6, #0
   179f2:	d155      	bne.n	17aa0 <LoRaMacMcpsRequest+0x134>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   179f4:	2102      	movs	r1, #2
   179f6:	f89d 2008 	ldrb.w	r2, [sp, #8]
            fPort = request.Req.Unconfirmed.fPort;
   179fa:	f89d 9020 	ldrb.w	r9, [sp, #32]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   179fe:	f361 1247 	bfi	r2, r1, #5, #3
            fBuffer = request.Req.Unconfirmed.fBuffer;
   17a02:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   17a06:	f88d 2008 	strb.w	r2, [sp, #8]
            readyToSend = true;
   17a0a:	2401      	movs	r4, #1
    getPhy.Attribute = PHY_MIN_TX_DR;
   17a0c:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17a0e:	f895 108c 	ldrb.w	r1, [r5, #140]	; 0x8c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17a12:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17a16:	f88d 1016 	strb.w	r1, [sp, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17a1a:	a905      	add	r1, sp, #20
    getPhy.Attribute = PHY_MIN_TX_DR;
   17a1c:	f88d 2014 	strb.w	r2, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17a20:	f015 f88b 	bl	2cb3a <RegionGetPhyParam>
    if( ( adr == true ) &&
   17a24:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
   17a28:	2202      	movs	r2, #2
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
   17a2a:	f895 c1b8 	ldrb.w	ip, [r5, #440]	; 0x1b8
   17a2e:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
   17a32:	b240      	sxtb	r0, r0
    if( ( adr == true ) &&
   17a34:	bbc3      	cbnz	r3, 17aa8 <LoRaMacMcpsRequest+0x13c>
    if( readyToSend == true )
   17a36:	2c00      	cmp	r4, #0
   17a38:	d03c      	beq.n	17ab4 <LoRaMacMcpsRequest+0x148>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
   17a3a:	4558      	cmp	r0, fp
   17a3c:	bfb8      	it	lt
   17a3e:	4658      	movlt	r0, fp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17a40:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
            verify.DatarateParams.Datarate = datarate;
   17a44:	f88d 0010 	strb.w	r0, [sp, #16]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17a48:	2205      	movs	r2, #5
   17a4a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   17a4e:	a904      	add	r1, sp, #16
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17a50:	f88d 3012 	strb.w	r3, [sp, #18]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17a54:	f015 f887 	bl	2cb66 <RegionVerify>
   17a58:	2800      	cmp	r0, #0
   17a5a:	d08c      	beq.n	17976 <LoRaMacMcpsRequest+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
   17a5c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17a60:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
   17a64:	e02c      	b.n	17ac0 <LoRaMacMcpsRequest+0x154>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   17a66:	2104      	movs	r1, #4
   17a68:	f89d 2008 	ldrb.w	r2, [sp, #8]
            break;
   17a6c:	2601      	movs	r6, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   17a6e:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = request.Req.Confirmed.fPort;
   17a72:	f89d 9020 	ldrb.w	r9, [sp, #32]
            fBuffer = request.Req.Confirmed.fBuffer;
   17a76:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   17a7a:	f88d 2008 	strb.w	r2, [sp, #8]
            break;
   17a7e:	e7c4      	b.n	17a0a <LoRaMacMcpsRequest+0x9e>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
   17a80:	f89d 3008 	ldrb.w	r3, [sp, #8]
            break;
   17a84:	2603      	movs	r6, #3
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
   17a86:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
   17a8a:	f88d 3008 	strb.w	r3, [sp, #8]
            fBufferSize = request.Req.Proprietary.fBufferSize;
   17a8e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            readyToSend = true;
   17a92:	2401      	movs	r4, #1
            fBuffer = request.Req.Proprietary.fBuffer;
   17a94:	f8dd a020 	ldr.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
   17a98:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            fBufferSize = request.Req.Proprietary.fBufferSize;
   17a9c:	9301      	str	r3, [sp, #4]
            break;
   17a9e:	e7a0      	b.n	179e2 <LoRaMacMcpsRequest+0x76>
    switch( request.Type )
   17aa0:	f04f 0b00 	mov.w	fp, #0
   17aa4:	46d9      	mov	r9, fp
   17aa6:	e7b1      	b.n	17a0c <LoRaMacMcpsRequest+0xa0>
    if( ( adr == true ) &&
   17aa8:	f1bc 0f01 	cmp.w	ip, #1
   17aac:	d106      	bne.n	17abc <LoRaMacMcpsRequest+0x150>
        ( activation == ACTIVATION_TYPE_ABP ) &&
   17aae:	b929      	cbnz	r1, 17abc <LoRaMacMcpsRequest+0x150>
    if( readyToSend == true )
   17ab0:	2c00      	cmp	r4, #0
   17ab2:	d1c5      	bne.n	17a40 <LoRaMacMcpsRequest+0xd4>
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17ab4:	f8d8 34fc 	ldr.w	r3, [r8, #1276]	; 0x4fc
   17ab8:	613b      	str	r3, [r7, #16]
    return status;
   17aba:	e75d      	b.n	17978 <LoRaMacMcpsRequest+0xc>
    if( readyToSend == true )
   17abc:	2c00      	cmp	r4, #0
   17abe:	d0f9      	beq.n	17ab4 <LoRaMacMcpsRequest+0x148>
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
   17ac0:	f8d8 0500 	ldr.w	r0, [r8, #1280]	; 0x500
    if( startTimeInMs != 0 )
   17ac4:	b138      	cbz	r0, 17ad6 <LoRaMacMcpsRequest+0x16a>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
   17ac6:	f014 f970 	bl	2bdaa <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
   17aca:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
            Nvm.MacGroup1.SrvAckRequested = false;
   17ace:	bf84      	itt	hi
   17ad0:	2300      	movhi	r3, #0
   17ad2:	f885 304a 	strbhi.w	r3, [r5, #74]	; 0x4a
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
   17ad6:	4652      	mov	r2, sl
   17ad8:	4649      	mov	r1, r9
   17ada:	9b01      	ldr	r3, [sp, #4]
   17adc:	a802      	add	r0, sp, #8
   17ade:	f7fd fded 	bl	156bc <Send>
        if( status == LORAMAC_STATUS_OK )
   17ae2:	4602      	mov	r2, r0
   17ae4:	b940      	cbnz	r0, 17af8 <LoRaMacMcpsRequest+0x18c>
            MacCtx.MacFlags.Bits.McpsReq = 1;
   17ae6:	f898 348d 	ldrb.w	r3, [r8, #1165]	; 0x48d
            MacCtx.McpsConfirm.McpsRequest = request.Type;
   17aea:	f888 6444 	strb.w	r6, [r8, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
   17aee:	f043 0301 	orr.w	r3, r3, #1
   17af2:	f888 348d 	strb.w	r3, [r8, #1165]	; 0x48d
   17af6:	e7dd      	b.n	17ab4 <LoRaMacMcpsRequest+0x148>
            MacCtx.NodeAckRequested = false;
   17af8:	2300      	movs	r3, #0
   17afa:	f888 341a 	strb.w	r3, [r8, #1050]	; 0x41a
   17afe:	e7d9      	b.n	17ab4 <LoRaMacMcpsRequest+0x148>
        return LORAMAC_STATUS_BUSY;
   17b00:	2201      	movs	r2, #1
   17b02:	e739      	b.n	17978 <LoRaMacMcpsRequest+0xc>
   17b04:	200305b4 	.word	0x200305b4
   17b08:	20030170 	.word	0x20030170
   17b0c:	2002fd14 	.word	0x2002fd14

00017b10 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
   17b10:	2801      	cmp	r0, #1
   17b12:	d009      	beq.n	17b28 <IsSticky+0x18>
   17b14:	3805      	subs	r0, #5
   17b16:	b2c3      	uxtb	r3, r0
   17b18:	2b1b      	cmp	r3, #27
   17b1a:	d804      	bhi.n	17b26 <IsSticky+0x16>
   17b1c:	4803      	ldr	r0, [pc, #12]	; (17b2c <IsSticky+0x1c>)
   17b1e:	40d8      	lsrs	r0, r3
   17b20:	f000 0001 	and.w	r0, r0, #1
   17b24:	4770      	bx	lr
   17b26:	2000      	movs	r0, #0
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
            return true;
        default:
            return false;
    }
}
   17b28:	4770      	bx	lr
   17b2a:	bf00      	nop
   17b2c:	08001079 	.word	0x08001079

00017b30 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
   17b30:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
   17b32:	4c05      	ldr	r4, [pc, #20]	; (17b48 <LoRaMacCommandsInit+0x18>)
   17b34:	f44f 7203 	mov.w	r2, #524	; 0x20c
   17b38:	4620      	mov	r0, r4
   17b3a:	2100      	movs	r1, #0
   17b3c:	f014 f82d 	bl	2bb9a <memset1>
    list->First = NULL;
   17b40:	2000      	movs	r0, #0
    list->Last = NULL;
   17b42:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
   17b46:	bd10      	pop	{r4, pc}
   17b48:	200306f4 	.word	0x200306f4

00017b4c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
   17b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b50:	4680      	mov	r8, r0
   17b52:	4616      	mov	r6, r2
    if( payload == NULL )
   17b54:	b379      	cbz	r1, 17bb6 <LoRaMacCommandsAddCmd+0x6a>
   17b56:	2320      	movs	r3, #32
   17b58:	4c18      	ldr	r4, [pc, #96]	; (17bbc <LoRaMacCommandsAddCmd+0x70>)
   17b5a:	4622      	mov	r2, r4
   17b5c:	f104 0010 	add.w	r0, r4, #16
        if( mem[size] != 0x00 )
   17b60:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   17b64:	bb07      	cbnz	r7, 17ba8 <LoRaMacCommandsAddCmd+0x5c>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
   17b66:	4282      	cmp	r2, r0
   17b68:	d1fa      	bne.n	17b60 <LoRaMacCommandsAddCmd+0x14>
    if( list->First == NULL )
   17b6a:	4d15      	ldr	r5, [pc, #84]	; (17bc0 <LoRaMacCommandsAddCmd+0x74>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
   17b6c:	3401      	adds	r4, #1
    if( list->First == NULL )
   17b6e:	682b      	ldr	r3, [r5, #0]
   17b70:	b903      	cbnz	r3, 17b74 <LoRaMacCommandsAddCmd+0x28>
        list->First = element;
   17b72:	602c      	str	r4, [r5, #0]
    if( list->Last )
   17b74:	686b      	ldr	r3, [r5, #4]
   17b76:	b103      	cbz	r3, 17b7a <LoRaMacCommandsAddCmd+0x2e>
        list->Last->Next = element;
   17b78:	601c      	str	r4, [r3, #0]
    element->Next = NULL;
   17b7a:	2300      	movs	r3, #0
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17b7c:	1d60      	adds	r0, r4, #5
    element->Next = NULL;
   17b7e:	6023      	str	r3, [r4, #0]
    newCmd->PayloadSize = payloadSize;
   17b80:	60a6      	str	r6, [r4, #8]
    list->Last = element;
   17b82:	606c      	str	r4, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17b84:	b2b2      	uxth	r2, r6
    newCmd->CID = cid;
   17b86:	f884 8004 	strb.w	r8, [r4, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17b8a:	f013 fff2 	bl	2bb72 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
   17b8e:	4640      	mov	r0, r8
   17b90:	f7ff ffbe 	bl	17b10 <IsSticky>
   17b94:	7320      	strb	r0, [r4, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
   17b96:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   17b9a:	3301      	adds	r3, #1
   17b9c:	4433      	add	r3, r6
   17b9e:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
}
   17ba2:	4638      	mov	r0, r7
   17ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
   17ba8:	3b01      	subs	r3, #1
   17baa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   17bae:	4604      	mov	r4, r0
   17bb0:	d1d3      	bne.n	17b5a <LoRaMacCommandsAddCmd+0xe>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
   17bb2:	2702      	movs	r7, #2
   17bb4:	e7f5      	b.n	17ba2 <LoRaMacCommandsAddCmd+0x56>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17bb6:	2701      	movs	r7, #1
   17bb8:	e7f3      	b.n	17ba2 <LoRaMacCommandsAddCmd+0x56>
   17bba:	bf00      	nop
   17bbc:	200306fb 	.word	0x200306fb
   17bc0:	200306f4 	.word	0x200306f4

00017bc4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
   17bc4:	b510      	push	{r4, lr}
    if( macCmd == NULL )
   17bc6:	b320      	cbz	r0, 17c12 <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
   17bc8:	4b14      	ldr	r3, [pc, #80]	; (17c1c <LoRaMacCommandsRemoveCmd+0x58>)
    if( list->Last == element )
   17bca:	e9d3 2100 	ldrd	r2, r1, [r3]
    if( element != curElement )
   17bce:	4290      	cmp	r0, r2
   17bd0:	d115      	bne.n	17bfe <LoRaMacCommandsRemoveCmd+0x3a>
        list->First = element->Next;
   17bd2:	6802      	ldr	r2, [r0, #0]
    if( list->Last == element )
   17bd4:	4288      	cmp	r0, r1
        list->First = element->Next;
   17bd6:	601a      	str	r2, [r3, #0]
    if( list->Last == element )
   17bd8:	d101      	bne.n	17bde <LoRaMacCommandsRemoveCmd+0x1a>
        list->Last = PrevElement;
   17bda:	2200      	movs	r2, #0
   17bdc:	605a      	str	r2, [r3, #4]
    element->Next = NULL;
   17bde:	2400      	movs	r4, #0
   17be0:	6004      	str	r4, [r0, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
   17be2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   17be6:	6881      	ldr	r1, [r0, #8]
   17be8:	3a01      	subs	r2, #1
   17bea:	1a52      	subs	r2, r2, r1
   17bec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
   17bf0:	4621      	mov	r1, r4
   17bf2:	2210      	movs	r2, #16
   17bf4:	f013 ffd1 	bl	2bb9a <memset1>
    return true;
   17bf8:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17bfa:	bd10      	pop	{r4, pc}
   17bfc:	4622      	mov	r2, r4
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
   17bfe:	b152      	cbz	r2, 17c16 <LoRaMacCommandsRemoveCmd+0x52>
   17c00:	6814      	ldr	r4, [r2, #0]
   17c02:	42a0      	cmp	r0, r4
   17c04:	d1fa      	bne.n	17bfc <LoRaMacCommandsRemoveCmd+0x38>
    if( list->Last == element )
   17c06:	4288      	cmp	r0, r1
   17c08:	d100      	bne.n	17c0c <LoRaMacCommandsRemoveCmd+0x48>
        list->Last = PrevElement;
   17c0a:	605a      	str	r2, [r3, #4]
        PrevElement->Next = element->Next;
   17c0c:	6801      	ldr	r1, [r0, #0]
   17c0e:	6011      	str	r1, [r2, #0]
   17c10:	e7e5      	b.n	17bde <LoRaMacCommandsRemoveCmd+0x1a>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17c12:	2001      	movs	r0, #1
   17c14:	e7f1      	b.n	17bfa <LoRaMacCommandsRemoveCmd+0x36>
    if( list->Last == element )
   17c16:	4288      	cmp	r0, r1
   17c18:	d0e0      	beq.n	17bdc <LoRaMacCommandsRemoveCmd+0x18>
   17c1a:	e7e0      	b.n	17bde <LoRaMacCommandsRemoveCmd+0x1a>
   17c1c:	200306f4 	.word	0x200306f4

00017c20 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17c20:	4b05      	ldr	r3, [pc, #20]	; (17c38 <LoRaMacCommandsGetCmd+0x18>)

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
    {
        curElement = curElement->Next;
   17c22:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
   17c24:	b113      	cbz	r3, 17c2c <LoRaMacCommandsGetCmd+0xc>
   17c26:	791a      	ldrb	r2, [r3, #4]
   17c28:	4282      	cmp	r2, r0
   17c2a:	d1fa      	bne.n	17c22 <LoRaMacCommandsGetCmd+0x2>
    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
   17c2c:	2b00      	cmp	r3, #0
}
   17c2e:	bf0c      	ite	eq
   17c30:	2003      	moveq	r0, #3
   17c32:	2000      	movne	r0, #0
    *macCmd = curElement;
   17c34:	600b      	str	r3, [r1, #0]
}
   17c36:	4770      	bx	lr
   17c38:	200306f4 	.word	0x200306f4

00017c3c <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
   17c3c:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17c3e:	4b05      	ldr	r3, [pc, #20]	; (17c54 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>)
   17c40:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
   17c42:	b900      	cbnz	r0, 17c46 <LoRaMacCommandsRemoveNoneStickyCmds+0xa>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17c44:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
   17c46:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
   17c48:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
   17c4a:	b90b      	cbnz	r3, 17c50 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
   17c4c:	f7ff ffba 	bl	17bc4 <LoRaMacCommandsRemoveCmd>
{
   17c50:	4620      	mov	r0, r4
   17c52:	e7f6      	b.n	17c42 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
   17c54:	200306f4 	.word	0x200306f4

00017c58 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
   17c58:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17c5a:	4b07      	ldr	r3, [pc, #28]	; (17c78 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>)
   17c5c:	681a      	ldr	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
   17c5e:	b90a      	cbnz	r2, 17c64 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17c60:	4610      	mov	r0, r2
   17c62:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
   17c64:	7910      	ldrb	r0, [r2, #4]
        nexElement = curElement->Next;
   17c66:	6814      	ldr	r4, [r2, #0]
        if( IsSticky( curElement->CID ) == true )
   17c68:	f7ff ff52 	bl	17b10 <IsSticky>
   17c6c:	b110      	cbz	r0, 17c74 <LoRaMacCommandsRemoveStickyAnsCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
   17c6e:	4610      	mov	r0, r2
   17c70:	f7ff ffa8 	bl	17bc4 <LoRaMacCommandsRemoveCmd>
{
   17c74:	4622      	mov	r2, r4
   17c76:	e7f2      	b.n	17c5e <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
   17c78:	200306f4 	.word	0x200306f4

00017c7c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
   17c7c:	b128      	cbz	r0, 17c8a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
   17c7e:	4b04      	ldr	r3, [pc, #16]	; (17c90 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
   17c80:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   17c84:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
   17c86:	2000      	movs	r0, #0
   17c88:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
   17c8a:	2001      	movs	r0, #1
}
   17c8c:	4770      	bx	lr
   17c8e:	bf00      	nop
   17c90:	200306f4 	.word	0x200306f4

00017c94 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
   17c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c98:	4607      	mov	r7, r0
   17c9a:	460e      	mov	r6, r1
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
   17c9c:	4615      	mov	r5, r2
   17c9e:	b342      	cbz	r2, 17cf2 <LoRaMacCommandsSerializeCmds+0x5e>
   17ca0:	b339      	cbz	r1, 17cf2 <LoRaMacCommandsSerializeCmds+0x5e>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
   17ca2:	4b15      	ldr	r3, [pc, #84]	; (17cf8 <LoRaMacCommandsSerializeCmds+0x64>)
   17ca4:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
   17ca6:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
   17ca8:	b92c      	cbnz	r4, 17cb6 <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
   17caa:	4630      	mov	r0, r6
   17cac:	f7ff ffe6 	bl	17c7c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
   17cb0:	2000      	movs	r0, #0
}
   17cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
   17cb6:	68a2      	ldr	r2, [r4, #8]
   17cb8:	1af9      	subs	r1, r7, r3
   17cba:	3201      	adds	r2, #1
   17cbc:	4291      	cmp	r1, r2
   17cbe:	d315      	bcc.n	17cec <LoRaMacCommandsSerializeCmds+0x58>
            buffer[itr++] = curElement->CID;
   17cc0:	7922      	ldrb	r2, [r4, #4]
   17cc2:	1c58      	adds	r0, r3, #1
   17cc4:	54ea      	strb	r2, [r5, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
   17cc6:	8922      	ldrh	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
   17cc8:	fa5f f880 	uxtb.w	r8, r0
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
   17ccc:	1d61      	adds	r1, r4, #5
   17cce:	fa55 f080 	uxtab	r0, r5, r0
   17cd2:	f013 ff4e 	bl	2bb72 <memcpy1>
            itr += curElement->PayloadSize;
   17cd6:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
   17cd8:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
   17cda:	4498      	add	r8, r3
   17cdc:	fa5f f388 	uxtb.w	r3, r8
        curElement = curElement->Next;
   17ce0:	e7e2      	b.n	17ca8 <LoRaMacCommandsSerializeCmds+0x14>
        nextElement = curElement->Next;
   17ce2:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
   17ce4:	4620      	mov	r0, r4
   17ce6:	f7ff ff6d 	bl	17bc4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
   17cea:	462c      	mov	r4, r5
    while( curElement != NULL )
   17cec:	2c00      	cmp	r4, #0
   17cee:	d1f8      	bne.n	17ce2 <LoRaMacCommandsSerializeCmds+0x4e>
   17cf0:	e7db      	b.n	17caa <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17cf2:	2001      	movs	r0, #1
   17cf4:	e7dd      	b.n	17cb2 <LoRaMacCommandsSerializeCmds+0x1e>
   17cf6:	bf00      	nop
   17cf8:	200306f4 	.word	0x200306f4

00017cfc <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
   17cfc:	3801      	subs	r0, #1
   17cfe:	b2c0      	uxtb	r0, r0
   17d00:	281f      	cmp	r0, #31
   17d02:	bf9a      	itte	ls
   17d04:	4b01      	ldrls	r3, [pc, #4]	; (17d0c <LoRaMacCommandsGetCmdSize+0x10>)
   17d06:	5c18      	ldrbls	r0, [r3, r0]
{
   17d08:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
   17d0a:	4770      	bx	lr
   17d0c:	00036653 	.word	0x00036653

00017d10 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17d10:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17d12:	4b0b      	ldr	r3, [pc, #44]	; (17d40 <GetElement.constprop.0+0x30>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17d14:	4604      	mov	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17d16:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17d1a:	4608      	mov	r0, r1
    if( count == 0 )
   17d1c:	b172      	cbz	r2, 17d3c <GetElement.constprop.0+0x2c>
   17d1e:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17d20:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
   17d22:	7805      	ldrb	r5, [r0, #0]
   17d24:	42a5      	cmp	r5, r4
   17d26:	d008      	beq.n	17d3a <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17d28:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17d2a:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17d2c:	b2cd      	uxtb	r5, r1
        bufferPointer++;
   17d2e:	bf14      	ite	ne
   17d30:	3004      	addne	r0, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17d32:	3810      	subeq	r0, #16
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17d34:	42aa      	cmp	r2, r5
   17d36:	d8f4      	bhi.n	17d22 <GetElement.constprop.0+0x12>
        return NULL;
   17d38:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
   17d3a:	bd30      	pop	{r4, r5, pc}
        return NULL;
   17d3c:	4610      	mov	r0, r2
   17d3e:	e7fc      	b.n	17d3a <GetElement.constprop.0+0x2a>
   17d40:	20030900 	.word	0x20030900

00017d44 <LoRaMacConfirmQueueInit>:
void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
    ConfirmQueueCtx.Primitives = primitives;

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
   17d44:	2300      	movs	r3, #0
{
   17d46:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
   17d48:	4c07      	ldr	r4, [pc, #28]	; (17d68 <LoRaMacConfirmQueueInit+0x24>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17d4a:	2214      	movs	r2, #20
    ConfirmQueueCtx.Primitives = primitives;
   17d4c:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17d4e:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17d50:	f104 000c 	add.w	r0, r4, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
   17d54:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17d58:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17d5c:	f013 ff1d 	bl	2bb9a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
   17d60:	2301      	movs	r3, #1
   17d62:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
   17d66:	bd10      	pop	{r4, pc}
   17d68:	20030900 	.word	0x20030900

00017d6c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17d6c:	4b11      	ldr	r3, [pc, #68]	; (17db4 <LoRaMacConfirmQueueAdd+0x48>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
   17d6e:	f893 2020 	ldrb.w	r2, [r3, #32]
   17d72:	2a04      	cmp	r2, #4
   17d74:	d81b      	bhi.n	17dae <LoRaMacConfirmQueueAdd+0x42>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
   17d76:	7801      	ldrb	r1, [r0, #0]
   17d78:	689a      	ldr	r2, [r3, #8]
   17d7a:	7011      	strb	r1, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
   17d7c:	7841      	ldrb	r1, [r0, #1]
   17d7e:	689a      	ldr	r2, [r3, #8]
   17d80:	7051      	strb	r1, [r2, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
   17d82:	78c1      	ldrb	r1, [r0, #3]
   17d84:	689a      	ldr	r2, [r3, #8]
   17d86:	70d1      	strb	r1, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
   17d88:	7881      	ldrb	r1, [r0, #2]
   17d8a:	689a      	ldr	r2, [r3, #8]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17d8c:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
   17d8e:	7091      	strb	r1, [r2, #2]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
   17d90:	f893 2020 	ldrb.w	r2, [r3, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17d94:	f103 011c 	add.w	r1, r3, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
   17d98:	3201      	adds	r2, #1
   17d9a:	f883 2020 	strb.w	r2, [r3, #32]
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17d9e:	689a      	ldr	r2, [r3, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17da0:	428a      	cmp	r2, r1
        bufferPointer++;
   17da2:	bf14      	ite	ne
   17da4:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17da6:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17daa:	609a      	str	r2, [r3, #8]

    return true;
   17dac:	4770      	bx	lr
        return false;
   17dae:	2000      	movs	r0, #0
}
   17db0:	4770      	bx	lr
   17db2:	bf00      	nop
   17db4:	20030900 	.word	0x20030900

00017db8 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17db8:	4b08      	ldr	r3, [pc, #32]	; (17ddc <LoRaMacConfirmQueueRemoveFirst+0x24>)
   17dba:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
   17dbe:	b160      	cbz	r0, 17dda <LoRaMacConfirmQueueRemoveFirst+0x22>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
   17dc0:	3801      	subs	r0, #1
   17dc2:	f883 0020 	strb.w	r0, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );

    return true;
   17dc6:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
   17dc8:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17dca:	f103 011c 	add.w	r1, r3, #28
   17dce:	428a      	cmp	r2, r1
        bufferPointer++;
   17dd0:	bf14      	ite	ne
   17dd2:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17dd4:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
   17dd8:	605a      	str	r2, [r3, #4]
}
   17dda:	4770      	bx	lr
   17ddc:	20030900 	.word	0x20030900

00017de0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
   17de0:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
   17de2:	4b07      	ldr	r3, [pc, #28]	; (17e00 <LoRaMacConfirmQueueSetStatus+0x20>)
{
   17de4:	4604      	mov	r4, r0
    if( count == 0 )
   17de6:	f893 2020 	ldrb.w	r2, [r3, #32]
{
   17dea:	4608      	mov	r0, r1
    if( count == 0 )
   17dec:	b132      	cbz	r2, 17dfc <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
   17dee:	6859      	ldr	r1, [r3, #4]
   17df0:	f7ff ff8e 	bl	17d10 <GetElement.constprop.0>
        if( element != NULL )
   17df4:	b110      	cbz	r0, 17dfc <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
   17df6:	2301      	movs	r3, #1
            element->Status = status;
   17df8:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
   17dfa:	7083      	strb	r3, [r0, #2]
        }
    }
}
   17dfc:	bd10      	pop	{r4, pc}
   17dfe:	bf00      	nop
   17e00:	20030900 	.word	0x20030900

00017e04 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
   17e04:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
   17e06:	4b06      	ldr	r3, [pc, #24]	; (17e20 <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
   17e08:	f893 2020 	ldrb.w	r2, [r3, #32]
   17e0c:	b12a      	cbz	r2, 17e1a <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
   17e0e:	6859      	ldr	r1, [r3, #4]
   17e10:	f7ff ff7e 	bl	17d10 <GetElement.constprop.0>
        if( element != NULL )
   17e14:	b108      	cbz	r0, 17e1a <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
   17e16:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
   17e18:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
   17e1a:	2001      	movs	r0, #1
   17e1c:	e7fc      	b.n	17e18 <LoRaMacConfirmQueueGetStatus+0x14>
   17e1e:	bf00      	nop
   17e20:	20030900 	.word	0x20030900

00017e24 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
   17e24:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
   17e26:	4a0b      	ldr	r2, [pc, #44]	; (17e54 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
    if( count == 0 )
   17e28:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
   17e2c:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
   17e2e:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
    if( count == 0 )
   17e32:	b169      	cbz	r1, 17e50 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
   17e34:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17e36:	f102 041c 	add.w	r4, r2, #28
            if( element->RestrictCommonReadyToHandle == false )
   17e3a:	78d9      	ldrb	r1, [r3, #3]
            element->Status = status;
   17e3c:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
   17e3e:	b901      	cbnz	r1, 17e42 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
   17e40:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17e42:	42a3      	cmp	r3, r4
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
   17e44:	6891      	ldr	r1, [r2, #8]
        bufferPointer++;
   17e46:	bf14      	ite	ne
   17e48:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17e4a:	3b10      	subeq	r3, #16
        }while( element != ConfirmQueueCtx.BufferEnd );
   17e4c:	4299      	cmp	r1, r3
   17e4e:	d1f4      	bne.n	17e3a <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
   17e50:	bd30      	pop	{r4, r5, pc}
   17e52:	bf00      	nop
   17e54:	20030900 	.word	0x20030900

00017e58 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
   17e58:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
   17e5a:	4b04      	ldr	r3, [pc, #16]	; (17e6c <LoRaMacConfirmQueueIsCmdActive+0x14>)
   17e5c:	6859      	ldr	r1, [r3, #4]
   17e5e:	f7ff ff57 	bl	17d10 <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
   17e62:	3800      	subs	r0, #0
   17e64:	bf18      	it	ne
   17e66:	2001      	movne	r0, #1
   17e68:	bd08      	pop	{r3, pc}
   17e6a:	bf00      	nop
   17e6c:	20030900 	.word	0x20030900

00017e70 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
   17e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17e72:	4604      	mov	r4, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
   17e74:	2600      	movs	r6, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
   17e76:	4d14      	ldr	r5, [pc, #80]	; (17ec8 <LoRaMacConfirmQueueHandleCb+0x58>)
   17e78:	f895 7020 	ldrb.w	r7, [r5, #32]
    for( uint8_t i = 0; i < nbElements; i++ )
   17e7c:	b2f3      	uxtb	r3, r6
   17e7e:	429f      	cmp	r7, r3
   17e80:	d801      	bhi.n	17e86 <LoRaMacConfirmQueueHandleCb+0x16>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
   17e82:	b003      	add	sp, #12
   17e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
   17e86:	686b      	ldr	r3, [r5, #4]
   17e88:	781b      	ldrb	r3, [r3, #0]
   17e8a:	7023      	strb	r3, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
   17e8c:	686b      	ldr	r3, [r5, #4]
   17e8e:	785b      	ldrb	r3, [r3, #1]
   17e90:	7063      	strb	r3, [r4, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
   17e92:	686b      	ldr	r3, [r5, #4]
        if( readyToHandle == true )
   17e94:	789a      	ldrb	r2, [r3, #2]
   17e96:	b13a      	cbz	r2, 17ea8 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
   17e98:	682b      	ldr	r3, [r5, #0]
   17e9a:	4620      	mov	r0, r4
   17e9c:	689b      	ldr	r3, [r3, #8]
   17e9e:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
   17ea0:	f7ff ff8a 	bl	17db8 <LoRaMacConfirmQueueRemoveFirst>
    for( uint8_t i = 0; i < nbElements; i++ )
   17ea4:	3601      	adds	r6, #1
   17ea6:	e7e9      	b.n	17e7c <LoRaMacConfirmQueueHandleCb+0xc>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
   17ea8:	781a      	ldrb	r2, [r3, #0]
   17eaa:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
   17eae:	785a      	ldrb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
   17eb0:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
   17eb2:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
   17eb6:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacConfirmQueueRemoveFirst( );
   17eba:	f7ff ff7d 	bl	17db8 <LoRaMacConfirmQueueRemoveFirst>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
   17ebe:	a801      	add	r0, sp, #4
   17ec0:	f7ff ff54 	bl	17d6c <LoRaMacConfirmQueueAdd>
   17ec4:	e7ee      	b.n	17ea4 <LoRaMacConfirmQueueHandleCb+0x34>
   17ec6:	bf00      	nop
   17ec8:	20030900 	.word	0x20030900

00017ecc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
   17ecc:	4b01      	ldr	r3, [pc, #4]	; (17ed4 <LoRaMacConfirmQueueGetCnt+0x8>)
   17ece:	f893 0020 	ldrb.w	r0, [r3, #32]
   17ed2:	4770      	bx	lr
   17ed4:	20030900 	.word	0x20030900

00017ed8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17ed8:	4b03      	ldr	r3, [pc, #12]	; (17ee8 <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
   17eda:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
   17ede:	2804      	cmp	r0, #4
   17ee0:	bf94      	ite	ls
   17ee2:	2000      	movls	r0, #0
   17ee4:	2001      	movhi	r0, #1
   17ee6:	4770      	bx	lr
   17ee8:	20030900 	.word	0x20030900

00017eec <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
   17eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    uint8_t bufferIndex = 0;
    uint8_t sBlock[16] = { 0 };
   17eee:	2400      	movs	r4, #0
    uint8_t aBlock[16] = { 0 };

    aBlock[0] = 0x01;
   17ef0:	f04f 0c01 	mov.w	ip, #1
{
   17ef4:	b089      	sub	sp, #36	; 0x24
   17ef6:	4606      	mov	r6, r0
   17ef8:	e9dd 570e 	ldrd	r5, r7, [sp, #56]	; 0x38

    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17efc:	4828      	ldr	r0, [pc, #160]	; (17fa0 <FOptsEncrypt+0xb4>)
    uint8_t aBlock[16] = { 0 };
   17efe:	e9cd 4404 	strd	r4, r4, [sp, #16]
    uint8_t sBlock[16] = { 0 };
   17f02:	e9cd 4400 	strd	r4, r4, [sp]
   17f06:	e9cd 4402 	strd	r4, r4, [sp, #8]
    uint8_t aBlock[16] = { 0 };
   17f0a:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17f0e:	6800      	ldr	r0, [r0, #0]
    aBlock[0] = 0x01;
   17f10:	f88d c010 	strb.w	ip, [sp, #16]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17f14:	4c23      	ldr	r4, [pc, #140]	; (17fa4 <FOptsEncrypt+0xb8>)
   17f16:	f8d0 e000 	ldr.w	lr, [r0]
   17f1a:	45a6      	cmp	lr, r4
   17f1c:	d908      	bls.n	17f30 <FOptsEncrypt+0x44>
    {
        // Introduced in LoRaWAN 1.1.1 specification
        switch( fCntID )
   17f1e:	4563      	cmp	r3, ip
   17f20:	d904      	bls.n	17f2c <FOptsEncrypt+0x40>
   17f22:	2b02      	cmp	r3, #2
   17f24:	d020      	beq.n	17f68 <FOptsEncrypt+0x7c>
   17f26:	2008      	movs	r0, #8
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   17f28:	b009      	add	sp, #36	; 0x24
   17f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                aBlock[4] = 0x01;
   17f2c:	f88d c014 	strb.w	ip, [sp, #20]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   17f30:	0c0b      	lsrs	r3, r1, #16
    aBlock[6] = address & 0xFF;
   17f32:	f8ad 1016 	strh.w	r1, [sp, #22]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   17f36:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[10] = frameCounter & 0xFF;
   17f3a:	f8ad 501a 	strh.w	r5, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   17f3e:	0c2b      	lsrs	r3, r5, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
   17f40:	0e09      	lsrs	r1, r1, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   17f42:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   17f44:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[5] = dir;
   17f48:	f88d 2015 	strb.w	r2, [sp, #21]
    aBlock[9] = ( address >> 24 ) & 0xFF;
   17f4c:	f88d 1019 	strb.w	r1, [sp, #25]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   17f50:	f88d 501d 	strb.w	r5, [sp, #29]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17f54:	4b13      	ldr	r3, [pc, #76]	; (17fa4 <FOptsEncrypt+0xb8>)
   17f56:	6802      	ldr	r2, [r0, #0]
   17f58:	429a      	cmp	r2, r3
        aBlock[15] = 0x01;
   17f5a:	bf84      	itt	hi
   17f5c:	2301      	movhi	r3, #1
   17f5e:	f88d 301f 	strbhi.w	r3, [sp, #31]
    if( size > 0 )
   17f62:	b926      	cbnz	r6, 17f6e <FOptsEncrypt+0x82>
    return LORAMAC_CRYPTO_SUCCESS;
   17f64:	2000      	movs	r0, #0
   17f66:	e7df      	b.n	17f28 <FOptsEncrypt+0x3c>
                aBlock[4] = 0x02;
   17f68:	f88d 3014 	strb.w	r3, [sp, #20]
                break;
   17f6c:	e7e0      	b.n	17f30 <FOptsEncrypt+0x44>
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
   17f6e:	2110      	movs	r1, #16
   17f70:	466b      	mov	r3, sp
   17f72:	2206      	movs	r2, #6
   17f74:	eb0d 0001 	add.w	r0, sp, r1
   17f78:	f7fc fd34 	bl	149e4 <SecureElementAesEncrypt>
   17f7c:	b968      	cbnz	r0, 17f9a <FOptsEncrypt+0xae>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   17f7e:	f100 0320 	add.w	r3, r0, #32
   17f82:	eb0d 0203 	add.w	r2, sp, r3
   17f86:	f812 2c20 	ldrb.w	r2, [r2, #-32]
   17f8a:	5c3b      	ldrb	r3, [r7, r0]
   17f8c:	4053      	eors	r3, r2
   17f8e:	543b      	strb	r3, [r7, r0]
        for( uint8_t i = 0; i < size; i++ )
   17f90:	3001      	adds	r0, #1
   17f92:	b2c0      	uxtb	r0, r0
   17f94:	42b0      	cmp	r0, r6
   17f96:	d3f2      	bcc.n	17f7e <FOptsEncrypt+0x92>
   17f98:	e7e4      	b.n	17f64 <FOptsEncrypt+0x78>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   17f9a:	200e      	movs	r0, #14
   17f9c:	e7c4      	b.n	17f28 <FOptsEncrypt+0x3c>
   17f9e:	bf00      	nop
   17fa0:	20030924 	.word	0x20030924
   17fa4:	01010000 	.word	0x01010000

00017fa8 <GetLastFcntDown.constprop.0>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
   17fa8:	3801      	subs	r0, #1
   17faa:	2806      	cmp	r0, #6
   17fac:	d825      	bhi.n	17ffa <GetLastFcntDown.constprop.0+0x52>
   17fae:	e8df f000 	tbb	[pc, r0]
   17fb2:	0b04      	.short	0x0b04
   17fb4:	1c18130f 	.word	0x1c18130f
   17fb8:	20          	.byte	0x20
   17fb9:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
   17fba:	4b11      	ldr	r3, [pc, #68]	; (18000 <GetLastFcntDown.constprop.0+0x58>)
   17fbc:	681b      	ldr	r3, [r3, #0]
   17fbe:	691a      	ldr	r2, [r3, #16]
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
            break;
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
   17fc0:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
   17fc2:	631a      	str	r2, [r3, #48]	; 0x30
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
   17fc4:	2000      	movs	r0, #0
   17fc6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
   17fc8:	4b0d      	ldr	r3, [pc, #52]	; (18000 <GetLastFcntDown.constprop.0+0x58>)
   17fca:	681b      	ldr	r3, [r3, #0]
   17fcc:	695a      	ldr	r2, [r3, #20]
   17fce:	e7f7      	b.n	17fc0 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.FCntDown;
   17fd0:	4b0b      	ldr	r3, [pc, #44]	; (18000 <GetLastFcntDown.constprop.0+0x58>)
   17fd2:	681b      	ldr	r3, [r3, #0]
   17fd4:	699a      	ldr	r2, [r3, #24]
   17fd6:	e7f3      	b.n	17fc0 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
   17fd8:	4b09      	ldr	r3, [pc, #36]	; (18000 <GetLastFcntDown.constprop.0+0x58>)
   17fda:	681b      	ldr	r3, [r3, #0]
   17fdc:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
   17fde:	600b      	str	r3, [r1, #0]
            break;
   17fe0:	e7f0      	b.n	17fc4 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
   17fe2:	4b07      	ldr	r3, [pc, #28]	; (18000 <GetLastFcntDown.constprop.0+0x58>)
   17fe4:	681b      	ldr	r3, [r3, #0]
   17fe6:	6a1b      	ldr	r3, [r3, #32]
   17fe8:	e7f9      	b.n	17fde <GetLastFcntDown.constprop.0+0x36>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
   17fea:	4b05      	ldr	r3, [pc, #20]	; (18000 <GetLastFcntDown.constprop.0+0x58>)
   17fec:	681b      	ldr	r3, [r3, #0]
   17fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17ff0:	e7f5      	b.n	17fde <GetLastFcntDown.constprop.0+0x36>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
   17ff2:	4b03      	ldr	r3, [pc, #12]	; (18000 <GetLastFcntDown.constprop.0+0x58>)
   17ff4:	681b      	ldr	r3, [r3, #0]
   17ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17ff8:	e7f1      	b.n	17fde <GetLastFcntDown.constprop.0+0x36>
    switch( fCntID )
   17ffa:	2005      	movs	r0, #5
}
   17ffc:	4770      	bx	lr
   17ffe:	bf00      	nop
   18000:	20030924 	.word	0x20030924

00018004 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
   18004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18008:	b0c5      	sub	sp, #276	; 0x114
   1800a:	460c      	mov	r4, r1
   1800c:	e9dd 864c 	ldrd	r8, r6, [sp, #304]	; 0x130
   18010:	4617      	mov	r7, r2
   18012:	461d      	mov	r5, r3
    if( msg == 0 )
   18014:	4681      	mov	r9, r0
   18016:	2800      	cmp	r0, #0
   18018:	d04b      	beq.n	180b2 <VerifyCmacB0.constprop.0+0xae>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   1801a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1801e:	d84a      	bhi.n	180b6 <VerifyCmacB0.constprop.0+0xb2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
   18020:	f44f 7288 	mov.w	r2, #272	; 0x110
   18024:	2100      	movs	r1, #0
   18026:	4668      	mov	r0, sp
   18028:	f013 fdb7 	bl	2bb9a <memset1>
    b0[0] = 0x49;
   1802c:	2349      	movs	r3, #73	; 0x49
   1802e:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
   18032:	2d00      	cmp	r5, #0
   18034:	d03a      	beq.n	180ac <VerifyCmacB0.constprop.0+0xa8>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
   18036:	4b21      	ldr	r3, [pc, #132]	; (180bc <VerifyCmacB0.constprop.0+0xb8>)
   18038:	681b      	ldr	r3, [r3, #0]
   1803a:	68da      	ldr	r2, [r3, #12]
        b0[1] = confFCnt & 0xFF;
   1803c:	b2d3      	uxtb	r3, r2
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
   1803e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   18042:	f88d 2002 	strb.w	r2, [sp, #2]
    b0[4] = 0x00;
   18046:	f44f 7280 	mov.w	r2, #256	; 0x100
        b0[1] = confFCnt & 0xFF;
   1804a:	f88d 3001 	strb.w	r3, [sp, #1]
    b0[3] = 0x00;
   1804e:	2300      	movs	r3, #0
    b0[4] = 0x00;
   18050:	f8ad 2004 	strh.w	r2, [sp, #4]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   18054:	ea4f 4218 	mov.w	r2, r8, lsr #16
   18058:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   1805c:	0c32      	lsrs	r2, r6, #16
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   1805e:	4649      	mov	r1, r9
    b0[6] = devAddr & 0xFF;
   18060:	f8ad 8006 	strh.w	r8, [sp, #6]
    b0[10] = fCnt & 0xFF;
   18064:	f8ad 600a 	strh.w	r6, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   18068:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   1806c:	a804      	add	r0, sp, #16
   1806e:	4622      	mov	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   18070:	ea4f 6818 	mov.w	r8, r8, lsr #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   18074:	0e36      	lsrs	r6, r6, #24
    b0[3] = 0x00;
   18076:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[14] = 0x00;
   1807a:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   1807e:	f88d 8009 	strb.w	r8, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   18082:	f88d 600d 	strb.w	r6, [sp, #13]
    b0[15] = msgLen & 0xFF;
   18086:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   1808a:	f013 fd72 	bl	2bb72 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
   1808e:	f104 0110 	add.w	r1, r4, #16
   18092:	463b      	mov	r3, r7
   18094:	4668      	mov	r0, sp
   18096:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   18098:	b289      	uxth	r1, r1
   1809a:	f014 f8e2 	bl	2c262 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
   1809e:	b110      	cbz	r0, 180a6 <VerifyCmacB0.constprop.0+0xa2>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   180a0:	2801      	cmp	r0, #1
   180a2:	bf18      	it	ne
   180a4:	200e      	movne	r0, #14
}
   180a6:	b045      	add	sp, #276	; 0x114
   180a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   180ac:	462b      	mov	r3, r5
   180ae:	462a      	mov	r2, r5
   180b0:	e7c7      	b.n	18042 <VerifyCmacB0.constprop.0+0x3e>
        return LORAMAC_CRYPTO_ERROR_NPE;
   180b2:	2009      	movs	r0, #9
   180b4:	e7f7      	b.n	180a6 <VerifyCmacB0.constprop.0+0xa2>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   180b6:	200d      	movs	r0, #13
   180b8:	e7f5      	b.n	180a6 <VerifyCmacB0.constprop.0+0xa2>
   180ba:	bf00      	nop
   180bc:	20030924 	.word	0x20030924

000180c0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
   180c0:	b510      	push	{r4, lr}
    if( nvm == NULL )
   180c2:	b1a8      	cbz	r0, 180f0 <LoRaMacCryptoInit+0x30>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
   180c4:	4c0b      	ldr	r4, [pc, #44]	; (180f4 <LoRaMacCryptoInit+0x34>)

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
   180c6:	2238      	movs	r2, #56	; 0x38
   180c8:	2100      	movs	r1, #0
    CryptoNvm = nvm;
   180ca:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
   180cc:	f013 fd65 	bl	2bb9a <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
   180d0:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
   180d2:	4a09      	ldr	r2, [pc, #36]	; (180f8 <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
   180d4:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
   180d6:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
   180d8:	f04f 32ff 	mov.w	r2, #4294967295
   180dc:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   180e0:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
   180e4:	e9c3 2207 	strd	r2, r2, [r3, #28]
   180e8:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
   180ec:	631a      	str	r2, [r3, #48]	; 0x30

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
   180ee:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
   180f0:	2008      	movs	r0, #8
   180f2:	e7fc      	b.n	180ee <LoRaMacCryptoInit+0x2e>
   180f4:	20030924 	.word	0x20030924
   180f8:	01010100 	.word	0x01010100

000180fc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
   180fc:	4b02      	ldr	r3, [pc, #8]	; (18108 <LoRaMacCryptoSetLrWanVersion+0xc>)
   180fe:	681b      	ldr	r3, [r3, #0]
   18100:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
   18102:	2000      	movs	r0, #0
   18104:	4770      	bx	lr
   18106:	bf00      	nop
   18108:	20030924 	.word	0x20030924

0001810c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
   1810c:	b130      	cbz	r0, 1811c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
   1810e:	4b04      	ldr	r3, [pc, #16]	; (18120 <LoRaMacCryptoGetFCntUp+0x14>)
   18110:	681b      	ldr	r3, [r3, #0]
   18112:	68db      	ldr	r3, [r3, #12]
   18114:	3301      	adds	r3, #1
   18116:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
   18118:	2000      	movs	r0, #0
   1811a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
   1811c:	2009      	movs	r0, #9
}
   1811e:	4770      	bx	lr
   18120:	20030924 	.word	0x20030924

00018124 <LoRaMacCryptoGetRJcount>:
}

LoRaMacCryptoStatus_t LoRaMacCryptoGetRJcount( FCntIdentifier_t fCntID, uint16_t* rJcount )
{
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( rJcount == 0 )
   18124:	b181      	cbz	r1, 18148 <LoRaMacCryptoGetRJcount+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
   18126:	2808      	cmp	r0, #8
   18128:	d003      	beq.n	18132 <LoRaMacCryptoGetRJcount+0xe>
   1812a:	2809      	cmp	r0, #9
   1812c:	d008      	beq.n	18140 <LoRaMacCryptoGetRJcount+0x1c>
   1812e:	2005      	movs	r0, #5
   18130:	4770      	bx	lr
    {
        case RJ_COUNT_0:
            *rJcount = RJcount0 + 1;
   18132:	4b06      	ldr	r3, [pc, #24]	; (1814c <LoRaMacCryptoGetRJcount+0x28>)
   18134:	881b      	ldrh	r3, [r3, #0]
   18136:	3301      	adds	r3, #1
   18138:	b29b      	uxth	r3, r3
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
   1813a:	2000      	movs	r0, #0
            *rJcount = RJcount0 + 1;
   1813c:	800b      	strh	r3, [r1, #0]
   1813e:	4770      	bx	lr
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
   18140:	4b03      	ldr	r3, [pc, #12]	; (18150 <LoRaMacCryptoGetRJcount+0x2c>)
   18142:	681b      	ldr	r3, [r3, #0]
   18144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   18146:	e7f6      	b.n	18136 <LoRaMacCryptoGetRJcount+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18148:	2009      	movs	r0, #9
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   1814a:	4770      	bx	lr
   1814c:	20030f08 	.word	0x20030f08
   18150:	20030924 	.word	0x20030924

00018154 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
   18154:	b180      	cbz	r0, 18178 <LoRaMacCryptoSetMulticastReference+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
   18156:	4b09      	ldr	r3, [pc, #36]	; (1817c <LoRaMacCryptoSetMulticastReference+0x28>)
   18158:	681b      	ldr	r3, [r3, #0]
   1815a:	f103 021c 	add.w	r2, r3, #28
   1815e:	6242      	str	r2, [r0, #36]	; 0x24
   18160:	f103 0220 	add.w	r2, r3, #32
   18164:	6542      	str	r2, [r0, #84]	; 0x54
   18166:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1816a:	3328      	adds	r3, #40	; 0x28
   1816c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   18170:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    }

    return LORAMAC_CRYPTO_SUCCESS;
   18174:	2000      	movs	r0, #0
   18176:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
   18178:	2009      	movs	r0, #9
}
   1817a:	4770      	bx	lr
   1817c:	20030924 	.word	0x20030924

00018180 <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
   18180:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
   18182:	4604      	mov	r4, r0
{
   18184:	b087      	sub	sp, #28
    if( macMsg == 0 )
   18186:	2800      	cmp	r0, #0
   18188:	d047      	beq.n	1821a <LoRaMacCryptoPrepareJoinRequest+0x9a>
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
   1818a:	4b27      	ldr	r3, [pc, #156]	; (18228 <LoRaMacCryptoPrepareJoinRequest+0xa8>)
#endif
    macMsg->DevNonce = CryptoNvm->DevNonce;

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    // Derive lifetime session keys
    if( DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
   1818c:	f100 050e 	add.w	r5, r0, #14
    CryptoNvm->DevNonce++;
   18190:	681a      	ldr	r2, [r3, #0]
    memcpyr( compBase + 1, devEUI, 8 );
   18192:	4629      	mov	r1, r5
    CryptoNvm->DevNonce++;
   18194:	8893      	ldrh	r3, [r2, #4]
   18196:	3301      	adds	r3, #1
   18198:	b29b      	uxth	r3, r3
   1819a:	8093      	strh	r3, [r2, #4]
    macMsg->DevNonce = CryptoNvm->DevNonce;
   1819c:	82c3      	strh	r3, [r0, #22]
    uint8_t compBase[16] = { 0 };
   1819e:	2300      	movs	r3, #0
   181a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   181a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
            compBase[0] = 0x06;
   181a8:	2306      	movs	r3, #6
    memcpyr( compBase + 1, devEUI, 8 );
   181aa:	2208      	movs	r2, #8
   181ac:	f10d 0009 	add.w	r0, sp, #9
            compBase[0] = 0x06;
   181b0:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   181b4:	f013 fce7 	bl	2bb86 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   181b8:	2202      	movs	r2, #2
   181ba:	2101      	movs	r1, #1
   181bc:	a802      	add	r0, sp, #8
   181be:	f014 f86b 	bl	2c298 <SecureElementDeriveAndStoreKey>
   181c2:	b990      	cbnz	r0, 181ea <LoRaMacCryptoPrepareJoinRequest+0x6a>
            compBase[0] = 0x05;
   181c4:	2305      	movs	r3, #5
    uint8_t compBase[16] = { 0 };
   181c6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   181ca:	2208      	movs	r2, #8
   181cc:	4629      	mov	r1, r5
    uint8_t compBase[16] = { 0 };
   181ce:	e9cd 0004 	strd	r0, r0, [sp, #16]
    memcpyr( compBase + 1, devEUI, 8 );
   181d2:	f10d 0009 	add.w	r0, sp, #9
            compBase[0] = 0x05;
   181d6:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   181da:	f013 fcd4 	bl	2bb86 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   181de:	2203      	movs	r2, #3
   181e0:	2101      	movs	r1, #1
   181e2:	a802      	add	r0, sp, #8
   181e4:	f014 f858 	bl	2c298 <SecureElementDeriveAndStoreKey>
   181e8:	b110      	cbz	r0, 181f0 <LoRaMacCryptoPrepareJoinRequest+0x70>
    {
        return LORAMAC_CRYPTO_ERROR;
   181ea:	2012      	movs	r0, #18
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   181ec:	b007      	add	sp, #28
   181ee:	bd30      	pop	{r4, r5, pc}
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   181f0:	4620      	mov	r0, r4
   181f2:	f014 fb8e 	bl	2c912 <LoRaMacSerializerJoinRequest>
   181f6:	b990      	cbnz	r0, 1821e <LoRaMacCryptoPrepareJoinRequest+0x9e>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   181f8:	f104 0318 	add.w	r3, r4, #24
   181fc:	9300      	str	r3, [sp, #0]
   181fe:	2213      	movs	r2, #19
   18200:	2301      	movs	r3, #1
   18202:	6821      	ldr	r1, [r4, #0]
   18204:	f014 f827 	bl	2c256 <SecureElementComputeAesCmac>
   18208:	b958      	cbnz	r0, 18222 <LoRaMacCryptoPrepareJoinRequest+0xa2>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1820a:	4620      	mov	r0, r4
   1820c:	f014 fb81 	bl	2c912 <LoRaMacSerializerJoinRequest>
   18210:	3800      	subs	r0, #0
   18212:	bf18      	it	ne
   18214:	2001      	movne	r0, #1
   18216:	0100      	lsls	r0, r0, #4
   18218:	e7e8      	b.n	181ec <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   1821a:	2009      	movs	r0, #9
   1821c:	e7e6      	b.n	181ec <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   1821e:	2010      	movs	r0, #16
   18220:	e7e4      	b.n	181ec <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18222:	200e      	movs	r0, #14
   18224:	e7e2      	b.n	181ec <LoRaMacCryptoPrepareJoinRequest+0x6c>
   18226:	bf00      	nop
   18228:	20030924 	.word	0x20030924

0001822c <LoRaMacCryptoPrepareReJoinType1>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
   1822c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( macMsg == 0 )
   1822e:	4604      	mov	r4, r0
   18230:	b1f8      	cbz	r0, 18272 <LoRaMacCryptoPrepareReJoinType1+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount1 overflow
    if( CryptoNvm->FCntList.RJcount1 == 65535 )
   18232:	4d13      	ldr	r5, [pc, #76]	; (18280 <LoRaMacCryptoPrepareReJoinType1+0x54>)
   18234:	682b      	ldr	r3, [r5, #0]
   18236:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   18238:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1823c:	429a      	cmp	r2, r3
   1823e:	d01a      	beq.n	18276 <LoRaMacCryptoPrepareReJoinType1+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   18240:	f014 fb9b 	bl	2c97a <LoRaMacSerializerReJoinType1>
   18244:	b110      	cbz	r0, 1824c <LoRaMacCryptoPrepareReJoinType1+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   18246:	2010      	movs	r0, #16

    return LORAMAC_CRYPTO_SUCCESS;
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   18248:	b003      	add	sp, #12
   1824a:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   1824c:	f104 031c 	add.w	r3, r4, #28
   18250:	9300      	str	r3, [sp, #0]
   18252:	2214      	movs	r2, #20
   18254:	2302      	movs	r3, #2
   18256:	6821      	ldr	r1, [r4, #0]
   18258:	f013 fffd 	bl	2c256 <SecureElementComputeAesCmac>
   1825c:	b968      	cbnz	r0, 1827a <LoRaMacCryptoPrepareReJoinType1+0x4e>
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1825e:	4620      	mov	r0, r4
   18260:	f014 fb8b 	bl	2c97a <LoRaMacSerializerReJoinType1>
   18264:	2800      	cmp	r0, #0
   18266:	d1ee      	bne.n	18246 <LoRaMacCryptoPrepareReJoinType1+0x1a>
    CryptoNvm->FCntList.RJcount1++;
   18268:	682a      	ldr	r2, [r5, #0]
   1826a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
   1826c:	3301      	adds	r3, #1
   1826e:	8593      	strh	r3, [r2, #44]	; 0x2c
    return LORAMAC_CRYPTO_SUCCESS;
   18270:	e7ea      	b.n	18248 <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18272:	2009      	movs	r0, #9
   18274:	e7e8      	b.n	18248 <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
   18276:	2011      	movs	r0, #17
   18278:	e7e6      	b.n	18248 <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   1827a:	200e      	movs	r0, #14
   1827c:	e7e4      	b.n	18248 <LoRaMacCryptoPrepareReJoinType1+0x1c>
   1827e:	bf00      	nop
   18280:	20030924 	.word	0x20030924

00018284 <LoRaMacCryptoPrepareReJoinType0or2>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
   18284:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( macMsg == 0 )
   18286:	4604      	mov	r4, r0
   18288:	b1e8      	cbz	r0, 182c6 <LoRaMacCryptoPrepareReJoinType0or2+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount0 overflow
    if( RJcount0 == 65535 )
   1828a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1828e:	4d11      	ldr	r5, [pc, #68]	; (182d4 <LoRaMacCryptoPrepareReJoinType0or2+0x50>)
   18290:	882a      	ldrh	r2, [r5, #0]
   18292:	429a      	cmp	r2, r3
   18294:	d019      	beq.n	182ca <LoRaMacCryptoPrepareReJoinType0or2+0x46>
    {
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   18296:	f014 fba8 	bl	2c9ea <LoRaMacSerializerReJoinType0or2>
   1829a:	b110      	cbz	r0, 182a2 <LoRaMacCryptoPrepareReJoinType0or2+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   1829c:	2010      	movs	r0, #16

    return LORAMAC_CRYPTO_SUCCESS;
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   1829e:	b003      	add	sp, #12
   182a0:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   182a2:	f104 0314 	add.w	r3, r4, #20
   182a6:	9300      	str	r3, [sp, #0]
   182a8:	220f      	movs	r2, #15
   182aa:	2305      	movs	r3, #5
   182ac:	6821      	ldr	r1, [r4, #0]
   182ae:	f013 ffd2 	bl	2c256 <SecureElementComputeAesCmac>
   182b2:	b960      	cbnz	r0, 182ce <LoRaMacCryptoPrepareReJoinType0or2+0x4a>
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   182b4:	4620      	mov	r0, r4
   182b6:	f014 fb98 	bl	2c9ea <LoRaMacSerializerReJoinType0or2>
   182ba:	2800      	cmp	r0, #0
   182bc:	d1ee      	bne.n	1829c <LoRaMacCryptoPrepareReJoinType0or2+0x18>
    RJcount0++;
   182be:	882b      	ldrh	r3, [r5, #0]
   182c0:	3301      	adds	r3, #1
   182c2:	802b      	strh	r3, [r5, #0]
    return LORAMAC_CRYPTO_SUCCESS;
   182c4:	e7eb      	b.n	1829e <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_ERROR_NPE;
   182c6:	2009      	movs	r0, #9
   182c8:	e7e9      	b.n	1829e <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
   182ca:	2004      	movs	r0, #4
   182cc:	e7e7      	b.n	1829e <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   182ce:	200e      	movs	r0, #14
   182d0:	e7e5      	b.n	1829e <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
   182d2:	bf00      	nop
   182d4:	20030f08 	.word	0x20030f08

000182d8 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
   182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182dc:	4604      	mov	r4, r0
   182de:	4688      	mov	r8, r1
   182e0:	4617      	mov	r7, r2
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
   182e2:	461e      	mov	r6, r3
{
   182e4:	b08b      	sub	sp, #44	; 0x2c
    if( macMsg == NULL )
   182e6:	2b00      	cmp	r3, #0
   182e8:	d04c      	beq.n	18384 <LoRaMacCryptoSecureMessage+0xac>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
   182ea:	4d5d      	ldr	r5, [pc, #372]	; (18460 <LoRaMacCryptoSecureMessage+0x188>)
   182ec:	682b      	ldr	r3, [r5, #0]
   182ee:	68db      	ldr	r3, [r3, #12]
   182f0:	4283      	cmp	r3, r0
   182f2:	f200 80b2 	bhi.w	1845a <LoRaMacCryptoSecureMessage+0x182>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
   182f6:	f896 2020 	ldrb.w	r2, [r6, #32]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
   182fa:	2a00      	cmp	r2, #0
   182fc:	bf0c      	ite	eq
   182fe:	2206      	moveq	r2, #6
   18300:	2207      	movne	r2, #7
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
   18302:	4283      	cmp	r3, r0
   18304:	d306      	bcc.n	18314 <LoRaMacCryptoSecureMessage+0x3c>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   18306:	4630      	mov	r0, r6
   18308:	f014 fba7 	bl	2ca5a <LoRaMacSerializerData>
   1830c:	4603      	mov	r3, r0
   1830e:	b308      	cbz	r0, 18354 <LoRaMacCryptoSecureMessage+0x7c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   18310:	2010      	movs	r0, #16
   18312:	e01c      	b.n	1834e <LoRaMacCryptoSecureMessage+0x76>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
   18314:	2300      	movs	r3, #0
   18316:	9001      	str	r0, [sp, #4]
   18318:	9300      	str	r3, [sp, #0]
   1831a:	68b3      	ldr	r3, [r6, #8]
   1831c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   18320:	6a70      	ldr	r0, [r6, #36]	; 0x24
   18322:	f014 f968 	bl	2c5f6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18326:	b990      	cbnz	r0, 1834e <LoRaMacCryptoSecureMessage+0x76>
        if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18328:	682b      	ldr	r3, [r5, #0]
   1832a:	789b      	ldrb	r3, [r3, #2]
   1832c:	2b01      	cmp	r3, #1
   1832e:	d1ea      	bne.n	18306 <LoRaMacCryptoSecureMessage+0x2e>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP, fCntUp, macMsg->FHDR.FOpts );
   18330:	f106 0310 	add.w	r3, r6, #16
   18334:	f896 c00c 	ldrb.w	ip, [r6, #12]
   18338:	e9cd 4300 	strd	r4, r3, [sp]
   1833c:	4602      	mov	r2, r0
   1833e:	4603      	mov	r3, r0
   18340:	68b1      	ldr	r1, [r6, #8]
   18342:	f00c 000f 	and.w	r0, ip, #15
   18346:	f7ff fdd1 	bl	17eec <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
   1834a:	2800      	cmp	r0, #0
   1834c:	d0db      	beq.n	18306 <LoRaMacCryptoSecureMessage+0x2e>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;

    return LORAMAC_CRYPTO_SUCCESS;
}
   1834e:	b00b      	add	sp, #44	; 0x2c
   18350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18354:	f8d5 a000 	ldr.w	sl, [r5]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18358:	f896 c004 	ldrb.w	ip, [r6, #4]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   1835c:	f89a e002 	ldrb.w	lr, [sl, #2]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18360:	f1ac 0c04 	sub.w	ip, ip, #4
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18364:	f1be 0f01 	cmp.w	lr, #1
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18368:	6830      	ldr	r0, [r6, #0]
   1836a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
   1836e:	68b2      	ldr	r2, [r6, #8]
   18370:	fa1f f18c 	uxth.w	r1, ip
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18374:	d166      	bne.n	18444 <LoRaMacCryptoSecureMessage+0x16c>
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18376:	f896 e00c 	ldrb.w	lr, [r6, #12]
        uint32_t cmacF = 0;
   1837a:	e9cd 3304 	strd	r3, r3, [sp, #16]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   1837e:	f3ce 1e40 	ubfx	lr, lr, #5, #1
    if( ( msg == 0 ) || ( cmac == 0 ) )
   18382:	b908      	cbnz	r0, 18388 <LoRaMacCryptoSecureMessage+0xb0>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18384:	2009      	movs	r0, #9
   18386:	e7e2      	b.n	1834e <LoRaMacCryptoSecureMessage+0x76>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   18388:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1838c:	d901      	bls.n	18392 <LoRaMacCryptoSecureMessage+0xba>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   1838e:	200d      	movs	r0, #13
   18390:	e7dd      	b.n	1834e <LoRaMacCryptoSecureMessage+0x76>
    b1[0] = 0x49;
   18392:	f04f 0b49 	mov.w	fp, #73	; 0x49
   18396:	f88d b018 	strb.w	fp, [sp, #24]
    if( isAck == true )
   1839a:	f1be 0f00 	cmp.w	lr, #0
   1839e:	d04d      	beq.n	1843c <LoRaMacCryptoSecureMessage+0x164>
        uint16_t confFCnt = ( uint16_t )( CryptoNvm->LastDownFCnt % 65536 );
   183a0:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
        b1[1] = confFCnt & 0xFF;
   183a4:	fa5f fe83 	uxtb.w	lr, r3
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
   183a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   183ac:	f88d 301a 	strb.w	r3, [sp, #26]
    b1[5] = UPLINK;  // dir = Uplink
   183b0:	2300      	movs	r3, #0
    b1[4] = txCh;
   183b2:	f88d 701c 	strb.w	r7, [sp, #28]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
   183b6:	0c17      	lsrs	r7, r2, #16
    b1[9] = ( devAddr >> 24 ) & 0xFF;
   183b8:	0e12      	lsrs	r2, r2, #24
   183ba:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
   183be:	0c22      	lsrs	r2, r4, #16
    b1[5] = UPLINK;  // dir = Uplink
   183c0:	f88d 301d 	strb.w	r3, [sp, #29]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
   183c4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    b1[14] = 0x00;
   183c8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
   183cc:	0e22      	lsrs	r2, r4, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   183ce:	ab04      	add	r3, sp, #16
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
   183d0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   183d4:	9300      	str	r3, [sp, #0]
   183d6:	460a      	mov	r2, r1
   183d8:	2305      	movs	r3, #5
   183da:	4601      	mov	r1, r0
   183dc:	a806      	add	r0, sp, #24
        b1[1] = confFCnt & 0xFF;
   183de:	f88d e019 	strb.w	lr, [sp, #25]
    b1[3] = txDr;
   183e2:	f88d 801b 	strb.w	r8, [sp, #27]
    b1[6] = devAddr & 0xFF;
   183e6:	f8ad 901e 	strh.w	r9, [sp, #30]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
   183ea:	f88d 7020 	strb.w	r7, [sp, #32]
    b1[10] = fCntUp & 0xFF;
   183ee:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    b1[15] = msgLen & 0xFF;
   183f2:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   183f6:	f013 ff2e 	bl	2c256 <SecureElementComputeAesCmac>
   183fa:	bb08      	cbnz	r0, 18440 <LoRaMacCryptoSecureMessage+0x168>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &cmacF );
   183fc:	aa05      	add	r2, sp, #20
   183fe:	7b33      	ldrb	r3, [r6, #12]
   18400:	7931      	ldrb	r1, [r6, #4]
   18402:	e9cd 4201 	strd	r4, r2, [sp, #4]
   18406:	68b2      	ldr	r2, [r6, #8]
   18408:	3904      	subs	r1, #4
   1840a:	9200      	str	r2, [sp, #0]
   1840c:	6830      	ldr	r0, [r6, #0]
   1840e:	2204      	movs	r2, #4
   18410:	f3c3 1340 	ubfx	r3, r3, #5, #1
   18414:	b289      	uxth	r1, r1
   18416:	f014 f954 	bl	2c6c2 <ComputeCmacB0.constprop.0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   1841a:	2800      	cmp	r0, #0
   1841c:	d197      	bne.n	1834e <LoRaMacCryptoSecureMessage+0x76>
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
   1841e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18422:	9a05      	ldr	r2, [sp, #20]
   18424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18428:	62f3      	str	r3, [r6, #44]	; 0x2c
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1842a:	4630      	mov	r0, r6
   1842c:	f014 fb15 	bl	2ca5a <LoRaMacSerializerData>
   18430:	2800      	cmp	r0, #0
   18432:	f47f af6d 	bne.w	18310 <LoRaMacCryptoSecureMessage+0x38>
    CryptoNvm->FCntList.FCntUp = fCntUp;
   18436:	682b      	ldr	r3, [r5, #0]
   18438:	60dc      	str	r4, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
   1843a:	e788      	b.n	1834e <LoRaMacCryptoSecureMessage+0x76>
   1843c:	469e      	mov	lr, r3
   1843e:	e7b5      	b.n	183ac <LoRaMacCryptoSecureMessage+0xd4>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18440:	200e      	movs	r0, #14
   18442:	e784      	b.n	1834e <LoRaMacCryptoSecureMessage+0x76>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
   18444:	f106 072c 	add.w	r7, r6, #44	; 0x2c
   18448:	9200      	str	r2, [sp, #0]
   1844a:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1844e:	2206      	movs	r2, #6
   18450:	f014 f937 	bl	2c6c2 <ComputeCmacB0.constprop.0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18454:	2800      	cmp	r0, #0
   18456:	d0e8      	beq.n	1842a <LoRaMacCryptoSecureMessage+0x152>
   18458:	e779      	b.n	1834e <LoRaMacCryptoSecureMessage+0x76>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
   1845a:	2006      	movs	r0, #6
   1845c:	e777      	b.n	1834e <LoRaMacCryptoSecureMessage+0x76>
   1845e:	bf00      	nop
   18460:	20030924 	.word	0x20030924

00018464 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
   18464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18468:	b087      	sub	sp, #28
   1846a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1846c:	4681      	mov	r9, r0
   1846e:	4688      	mov	r8, r1
   18470:	4617      	mov	r7, r2
   18472:	461e      	mov	r6, r3
    if( macMsg == 0 )
   18474:	2d00      	cmp	r5, #0
   18476:	f000 8094 	beq.w	185a2 <LoRaMacCryptoUnsecureMessage+0x13e>
    uint32_t lastDown = 0;
   1847a:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
   1847c:	4610      	mov	r0, r2
   1847e:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
   18480:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
   18482:	f7ff fd91 	bl	17fa8 <GetLastFcntDown.constprop.0>
   18486:	b120      	cbz	r0, 18492 <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
   18488:	2406      	movs	r4, #6
#endif

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
   1848a:	4620      	mov	r0, r4
   1848c:	b007      	add	sp, #28
   1848e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( currentDown > lastDown ) ||
   18492:	9b05      	ldr	r3, [sp, #20]
   18494:	429e      	cmp	r6, r3
   18496:	d801      	bhi.n	1849c <LoRaMacCryptoUnsecureMessage+0x38>
   18498:	3301      	adds	r3, #1
   1849a:	d1f5      	bne.n	18488 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
   1849c:	4628      	mov	r0, r5
   1849e:	f014 f9ce 	bl	2c83e <LoRaMacParserData>
   184a2:	4604      	mov	r4, r0
   184a4:	2800      	cmp	r0, #0
   184a6:	d17e      	bne.n	185a6 <LoRaMacCryptoUnsecureMessage+0x142>
        if( KeyAddrList[i].AddrID == addrID )
   184a8:	4b40      	ldr	r3, [pc, #256]	; (185ac <LoRaMacCryptoUnsecureMessage+0x148>)
   184aa:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   184ae:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   184b2:	4549      	cmp	r1, r9
   184b4:	d104      	bne.n	184c0 <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
   184b6:	68ab      	ldr	r3, [r5, #8]
   184b8:	4543      	cmp	r3, r8
   184ba:	d006      	beq.n	184ca <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
   184bc:	2402      	movs	r4, #2
   184be:	e7e4      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
   184c0:	3401      	adds	r4, #1
   184c2:	2c05      	cmp	r4, #5
   184c4:	d1f1      	bne.n	184aa <LoRaMacCryptoUnsecureMessage+0x46>
   184c6:	240b      	movs	r4, #11
   184c8:	e7df      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   184ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 185b0 <LoRaMacCryptoUnsecureMessage+0x14c>
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   184ce:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   184d0:	f8da 1000 	ldr.w	r1, [sl]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
   184d4:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   184d6:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
   184d8:	f892 b001 	ldrb.w	fp, [r2, #1]
        isAck = false;
   184dc:	2900      	cmp	r1, #0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   184de:	7929      	ldrb	r1, [r5, #4]
   184e0:	e9cd 6001 	strd	r6, r0, [sp, #4]
   184e4:	f8cd 8000 	str.w	r8, [sp]
   184e8:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
   184ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   184f0:	7892      	ldrb	r2, [r2, #2]
   184f2:	bf08      	it	eq
   184f4:	2300      	moveq	r3, #0
   184f6:	6828      	ldr	r0, [r5, #0]
   184f8:	b289      	uxth	r1, r1
   184fa:	f7ff fd83 	bl	18004 <VerifyCmacB0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   184fe:	4604      	mov	r4, r0
   18500:	2800      	cmp	r0, #0
   18502:	d1c2      	bne.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
   18504:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
   18508:	9601      	str	r6, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
   1850a:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
   1850c:	f04f 0301 	mov.w	r3, #1
   18510:	9300      	str	r3, [sp, #0]
   18512:	bf18      	it	ne
   18514:	465a      	movne	r2, fp
   18516:	4643      	mov	r3, r8
   18518:	bf08      	it	eq
   1851a:	2206      	moveq	r2, #6
   1851c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   18520:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18522:	f014 f868 	bl	2c5f6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   18526:	4604      	mov	r4, r0
   18528:	2800      	cmp	r0, #0
   1852a:	d1ae      	bne.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   1852c:	f8da 3000 	ldr.w	r3, [sl]
   18530:	789a      	ldrb	r2, [r3, #2]
   18532:	2a01      	cmp	r2, #1
   18534:	d008      	beq.n	18548 <LoRaMacCryptoUnsecureMessage+0xe4>
    switch( fCntID )
   18536:	3f01      	subs	r7, #1
   18538:	2f06      	cmp	r7, #6
   1853a:	d8a6      	bhi.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
   1853c:	e8df f007 	tbb	[pc, r7]
   18540:	211d1915 	.word	0x211d1915
   18544:	2925      	.short	0x2925
   18546:	2d          	.byte	0x2d
   18547:	00          	.byte	0x00
        if( addrID == UNICAST_DEV_ADDR )
   18548:	f1b9 0f04 	cmp.w	r9, #4
   1854c:	d1f3      	bne.n	18536 <LoRaMacCryptoUnsecureMessage+0xd2>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
   1854e:	7b28      	ldrb	r0, [r5, #12]
   18550:	3510      	adds	r5, #16
   18552:	463b      	mov	r3, r7
   18554:	4641      	mov	r1, r8
   18556:	e9cd 6500 	strd	r6, r5, [sp]
   1855a:	f000 000f 	and.w	r0, r0, #15
   1855e:	f7ff fcc5 	bl	17eec <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
   18562:	2800      	cmp	r0, #0
   18564:	d0e7      	beq.n	18536 <LoRaMacCryptoUnsecureMessage+0xd2>
   18566:	4604      	mov	r4, r0
   18568:	e78f      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.NFCntDown = currentDown;
   1856a:	f8da 3000 	ldr.w	r3, [sl]
   1856e:	611e      	str	r6, [r3, #16]
            break;
   18570:	e78b      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
   18572:	f8da 3000 	ldr.w	r3, [sl]
   18576:	615e      	str	r6, [r3, #20]
            break;
   18578:	e787      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
   1857a:	f8da 3000 	ldr.w	r3, [sl]
   1857e:	619e      	str	r6, [r3, #24]
            break;
   18580:	e783      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
   18582:	f8da 3000 	ldr.w	r3, [sl]
   18586:	61de      	str	r6, [r3, #28]
            break;
   18588:	e77f      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
   1858a:	f8da 3000 	ldr.w	r3, [sl]
   1858e:	621e      	str	r6, [r3, #32]
            break;
   18590:	e77b      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
   18592:	f8da 3000 	ldr.w	r3, [sl]
   18596:	625e      	str	r6, [r3, #36]	; 0x24
            break;
   18598:	e777      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
   1859a:	f8da 3000 	ldr.w	r3, [sl]
   1859e:	629e      	str	r6, [r3, #40]	; 0x28
            break;
   185a0:	e773      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_NPE;
   185a2:	2409      	movs	r4, #9
   185a4:	e771      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
   185a6:	240f      	movs	r4, #15
   185a8:	e76f      	b.n	1848a <LoRaMacCryptoUnsecureMessage+0x26>
   185aa:	bf00      	nop
   185ac:	20008ac7 	.word	0x20008ac7
   185b0:	20030924 	.word	0x20030924

000185b4 <LoRaMacCryptoSetKey>:
{
   185b4:	b538      	push	{r3, r4, r5, lr}
   185b6:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
   185b8:	f013 fe69 	bl	2c28e <SecureElementSetKey>
   185bc:	4604      	mov	r4, r0
   185be:	b110      	cbz	r0, 185c6 <LoRaMacCryptoSetKey+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   185c0:	240e      	movs	r4, #14
}
   185c2:	4620      	mov	r0, r4
   185c4:	bd38      	pop	{r3, r4, r5, pc}
    if( keyID == APP_KEY )
   185c6:	2d00      	cmp	r5, #0
   185c8:	d1fb      	bne.n	185c2 <LoRaMacCryptoSetKey+0xe>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
   185ca:	4b06      	ldr	r3, [pc, #24]	; (185e4 <LoRaMacCryptoSetKey+0x30>)
   185cc:	4601      	mov	r1, r0
   185ce:	681b      	ldr	r3, [r3, #0]
   185d0:	7898      	ldrb	r0, [r3, #2]
   185d2:	f014 f8cb 	bl	2c76c <LoRaMacCryptoDeriveMcRootKey>
   185d6:	2800      	cmp	r0, #0
   185d8:	d1f2      	bne.n	185c0 <LoRaMacCryptoSetKey+0xc>
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
   185da:	f014 f861 	bl	2c6a0 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
   185de:	2800      	cmp	r0, #0
   185e0:	d0ef      	beq.n	185c2 <LoRaMacCryptoSetKey+0xe>
   185e2:	e7ed      	b.n	185c0 <LoRaMacCryptoSetKey+0xc>
   185e4:	20030924 	.word	0x20030924

000185e8 <LoRaMacCryptoHandleJoinAccept>:
{
   185e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   185ec:	4604      	mov	r4, r0
   185ee:	4689      	mov	r9, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
   185f0:	4616      	mov	r6, r2
{
   185f2:	b08f      	sub	sp, #60	; 0x3c
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
   185f4:	2a00      	cmp	r2, #0
   185f6:	f000 80ab 	beq.w	18750 <LoRaMacCryptoHandleJoinAccept+0x168>
   185fa:	2900      	cmp	r1, #0
   185fc:	f000 80a8 	beq.w	18750 <LoRaMacCryptoHandleJoinAccept+0x168>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
   18600:	2500      	movs	r5, #0
    uint16_t nonce               = CryptoNvm->DevNonce;
   18602:	f8df 815c 	ldr.w	r8, [pc, #348]	; 18760 <LoRaMacCryptoHandleJoinAccept+0x178>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
   18606:	221d      	movs	r2, #29
   18608:	4629      	mov	r1, r5
   1860a:	a806      	add	r0, sp, #24
   1860c:	9505      	str	r5, [sp, #20]
   1860e:	f019 f948 	bl	318a2 <memset>
    uint16_t nonce               = CryptoNvm->DevNonce;
   18612:	f8d8 3000 	ldr.w	r3, [r8]
    if( joinReqType == JOIN_REQ )
   18616:	2cff      	cmp	r4, #255	; 0xff
    uint16_t nonce               = CryptoNvm->DevNonce;
   18618:	889f      	ldrh	r7, [r3, #4]
    uint8_t versionMinor         = 0;
   1861a:	f88d 5013 	strb.w	r5, [sp, #19]
    if( joinReqType == JOIN_REQ )
   1861e:	d005      	beq.n	1862c <LoRaMacCryptoHandleJoinAccept+0x44>
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
   18620:	f014 0ffd 	tst.w	r4, #253	; 0xfd
            nonce = RJcount0;
   18624:	bf0a      	itet	eq
   18626:	4b4f      	ldreq	r3, [pc, #316]	; (18764 <LoRaMacCryptoHandleJoinAccept+0x17c>)
            nonce = CryptoNvm->FCntList.RJcount1;
   18628:	8d9f      	ldrhne	r7, [r3, #44]	; 0x2c
            nonce = RJcount0;
   1862a:	881f      	ldrheq	r7, [r3, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
   1862c:	f10d 0313 	add.w	r3, sp, #19
   18630:	ad05      	add	r5, sp, #20
   18632:	9302      	str	r3, [sp, #8]
   18634:	9501      	str	r5, [sp, #4]
   18636:	7933      	ldrb	r3, [r6, #4]
   18638:	463a      	mov	r2, r7
   1863a:	9300      	str	r3, [sp, #0]
   1863c:	4649      	mov	r1, r9
   1863e:	4620      	mov	r0, r4
   18640:	6833      	ldr	r3, [r6, #0]
   18642:	f013 fe45 	bl	2c2d0 <SecureElementProcessJoinAccept>
   18646:	2800      	cmp	r0, #0
   18648:	f040 8084 	bne.w	18754 <LoRaMacCryptoHandleJoinAccept+0x16c>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
   1864c:	6830      	ldr	r0, [r6, #0]
   1864e:	4629      	mov	r1, r5
   18650:	7932      	ldrb	r2, [r6, #4]
   18652:	f013 fa8e 	bl	2bb72 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
   18656:	4630      	mov	r0, r6
   18658:	f014 f8a3 	bl	2c7a2 <LoRaMacParserJoinAccept>
   1865c:	2800      	cmp	r0, #0
   1865e:	d17b      	bne.n	18758 <LoRaMacCryptoHandleJoinAccept+0x170>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   18660:	7a35      	ldrb	r5, [r6, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
   18662:	79f2      	ldrb	r2, [r6, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
   18664:	79b3      	ldrb	r3, [r6, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   18666:	042d      	lsls	r5, r5, #16
   18668:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    if( versionMinor == 1 )
   1866c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   18670:	431d      	orrs	r5, r3
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
   18672:	f8d8 3000 	ldr.w	r3, [r8]
    if( versionMinor == 1 )
   18676:	2801      	cmp	r0, #1
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
   18678:	689a      	ldr	r2, [r3, #8]
    if( versionMinor == 1 )
   1867a:	d103      	bne.n	18684 <LoRaMacCryptoHandleJoinAccept+0x9c>
    if( isJoinNonceOk == true )
   1867c:	4295      	cmp	r5, r2
   1867e:	d803      	bhi.n	18688 <LoRaMacCryptoHandleJoinAccept+0xa0>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
   18680:	2403      	movs	r4, #3
   18682:	e03e      	b.n	18702 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( isJoinNonceOk == true )
   18684:	4295      	cmp	r5, r2
   18686:	d0fb      	beq.n	18680 <LoRaMacCryptoHandleJoinAccept+0x98>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
   18688:	2100      	movs	r1, #0
        CryptoNvm->JoinNonce = currentJoinNonce;
   1868a:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
   1868c:	f014 f86e 	bl	2c76c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   18690:	4604      	mov	r4, r0
   18692:	2800      	cmp	r0, #0
   18694:	d135      	bne.n	18702 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( keyID != MC_ROOT_KEY )
   18696:	f014 f803 	bl	2c6a0 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   1869a:	4604      	mov	r4, r0
   1869c:	bb88      	cbnz	r0, 18702 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( versionMinor == 1 )
   1869e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   186a2:	2b01      	cmp	r3, #1
   186a4:	d131      	bne.n	1870a <LoRaMacCryptoHandleJoinAccept+0x122>
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
   186a6:	463b      	mov	r3, r7
   186a8:	464a      	mov	r2, r9
   186aa:	4629      	mov	r1, r5
   186ac:	2004      	movs	r0, #4
   186ae:	f013 ff46 	bl	2c53e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   186b2:	2800      	cmp	r0, #0
   186b4:	d152      	bne.n	1875c <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
   186b6:	463b      	mov	r3, r7
   186b8:	464a      	mov	r2, r9
   186ba:	4629      	mov	r1, r5
   186bc:	2005      	movs	r0, #5
   186be:	f013 ff3e 	bl	2c53e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   186c2:	2800      	cmp	r0, #0
   186c4:	d14a      	bne.n	1875c <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, currentJoinNonce, joinEUI, nonce );
   186c6:	463b      	mov	r3, r7
   186c8:	464a      	mov	r2, r9
   186ca:	4629      	mov	r1, r5
   186cc:	2006      	movs	r0, #6
   186ce:	f013 ff36 	bl	2c53e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   186d2:	2800      	cmp	r0, #0
   186d4:	d142      	bne.n	1875c <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( APP_S_KEY, currentJoinNonce, joinEUI, nonce );
   186d6:	463b      	mov	r3, r7
   186d8:	464a      	mov	r2, r9
   186da:	4629      	mov	r1, r5
   186dc:	2007      	movs	r0, #7
   186de:	f013 ff2e 	bl	2c53e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   186e2:	2800      	cmp	r0, #0
   186e4:	d13a      	bne.n	1875c <LoRaMacCryptoHandleJoinAccept+0x174>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
   186e6:	f8d8 3000 	ldr.w	r3, [r8]
   186ea:	f89d 2013 	ldrb.w	r2, [sp, #19]
    RJcount0 = 0;
   186ee:	491d      	ldr	r1, [pc, #116]	; (18764 <LoRaMacCryptoHandleJoinAccept+0x17c>)
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
   186f0:	709a      	strb	r2, [r3, #2]
    RJcount0 = 0;
   186f2:	2200      	movs	r2, #0
   186f4:	800a      	strh	r2, [r1, #0]
    CryptoNvm->FCntList.FCntUp = 0;
   186f6:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   186f8:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
   186fc:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   18700:	619a      	str	r2, [r3, #24]
}
   18702:	4620      	mov	r0, r4
   18704:	b00f      	add	sp, #60	; 0x3c
   18706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        netID = ( uint32_t )macMsg->NetID[0];
   1870a:	7a73      	ldrb	r3, [r6, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
   1870c:	7ab2      	ldrb	r2, [r6, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
   1870e:	7af6      	ldrb	r6, [r6, #11]
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
   18710:	4629      	mov	r1, r5
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
   18712:	0436      	lsls	r6, r6, #16
   18714:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
   18718:	431e      	orrs	r6, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
   1871a:	4632      	mov	r2, r6
   1871c:	463b      	mov	r3, r7
   1871e:	2007      	movs	r0, #7
   18720:	f013 ff43 	bl	2c5aa <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18724:	b9d0      	cbnz	r0, 1875c <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
   18726:	463b      	mov	r3, r7
   18728:	4632      	mov	r2, r6
   1872a:	4629      	mov	r1, r5
   1872c:	2006      	movs	r0, #6
   1872e:	f013 ff3c 	bl	2c5aa <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18732:	b998      	cbnz	r0, 1875c <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
   18734:	463b      	mov	r3, r7
   18736:	4632      	mov	r2, r6
   18738:	4629      	mov	r1, r5
   1873a:	2004      	movs	r0, #4
   1873c:	f013 ff35 	bl	2c5aa <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18740:	b960      	cbnz	r0, 1875c <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
   18742:	463b      	mov	r3, r7
   18744:	4632      	mov	r2, r6
   18746:	4629      	mov	r1, r5
   18748:	2005      	movs	r0, #5
   1874a:	f013 ff2e 	bl	2c5aa <DeriveSessionKey10x>
   1874e:	e7c8      	b.n	186e2 <LoRaMacCryptoHandleJoinAccept+0xfa>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18750:	2409      	movs	r4, #9
   18752:	e7d6      	b.n	18702 <LoRaMacCryptoHandleJoinAccept+0x11a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18754:	240e      	movs	r4, #14
   18756:	e7d4      	b.n	18702 <LoRaMacCryptoHandleJoinAccept+0x11a>
        return LORAMAC_CRYPTO_ERROR_PARSER;
   18758:	240f      	movs	r4, #15
   1875a:	e7d2      	b.n	18702 <LoRaMacCryptoHandleJoinAccept+0x11a>
   1875c:	4604      	mov	r4, r0
   1875e:	e7d0      	b.n	18702 <LoRaMacCryptoHandleJoinAccept+0x11a>
   18760:	20030924 	.word	0x20030924
   18764:	20030f08 	.word	0x20030f08

00018768 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
   18768:	4800      	ldr	r0, [pc, #0]	; (1876c <RegionGetVersion+0x4>)
   1876a:	4770      	bx	lr
   1876c:	02010001 	.word	0x02010001

00018770 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
   18770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18774:	b08f      	sub	sp, #60	; 0x3c
   18776:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   1877a:	9303      	str	r3, [sp, #12]
   1877c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   18780:	4615      	mov	r5, r2
   18782:	460c      	mov	r4, r1
   18784:	9307      	str	r3, [sp, #28]
   18786:	4682      	mov	sl, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
   18788:	f013 fb08 	bl	2bd9c <TimerGetCurrentTime>
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
   1878c:	4a74      	ldr	r2, [pc, #464]	; (18960 <RegionCommonUpdateBandTimeOff+0x1f0>)
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
   1878e:	f5a8 33f6 	sub.w	r3, r8, #125952	; 0x1ec00
   18792:	3b30      	subs	r3, #48	; 0x30
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
   18794:	fbb3 f3f2 	udiv	r3, r3, r2
   18798:	4353      	muls	r3, r2
   1879a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
   1879c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
   187a0:	3330      	adds	r3, #48	; 0x30
   187a2:	9302      	str	r3, [sp, #8]
   187a4:	2318      	movs	r3, #24
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
   187a6:	f04f 39ff 	mov.w	r9, #4294967295
   187aa:	fb13 4305 	smlabb	r3, r3, r5, r4
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
   187ae:	2500      	movs	r5, #0
   187b0:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 18964 <RegionCommonUpdateBandTimeOff+0x1f4>
    TimerTime_t currentTime = TimerGetCurrentTime( );
   187b4:	9005      	str	r0, [sp, #20]

    for( uint8_t i = 0; i < nbBands; i++ )
   187b6:	9306      	str	r3, [sp, #24]
   187b8:	9b06      	ldr	r3, [sp, #24]
   187ba:	429c      	cmp	r4, r3
   187bc:	d107      	bne.n	187ce <RegionCommonUpdateBandTimeOff+0x5e>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
   187be:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
   187c0:	bf14      	ite	ne
   187c2:	4648      	movne	r0, r9
   187c4:	f04f 30ff 	moveq.w	r0, #4294967295
   187c8:	b00f      	add	sp, #60	; 0x3c
   187ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
   187ce:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
   187d2:	4640      	mov	r0, r8
   187d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   187d8:	9909      	ldr	r1, [sp, #36]	; 0x24
   187da:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   187de:	f8cd 8020 	str.w	r8, [sp, #32]
   187e2:	f013 fa6d 	bl	2bcc0 <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
   187e6:	8826      	ldrh	r6, [r4, #0]
    if( joined == false )
   187e8:	f1ba 0f00 	cmp.w	sl, #0
   187ec:	d150      	bne.n	18890 <RegionCommonUpdateBandTimeOff+0x120>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
   187ee:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
   187f2:	d315      	bcc.n	18820 <RegionCommonUpdateBandTimeOff+0xb0>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
   187f4:	f649 23af 	movw	r3, #39599	; 0x9aaf
   187f8:	4598      	cmp	r8, r3
   187fa:	d80a      	bhi.n	18812 <RegionCommonUpdateBandTimeOff+0xa2>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   187fc:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   18800:	bf38      	it	cc
   18802:	f44f 767a 	movcc.w	r6, #1000	; 0x3e8
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
   18806:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   1880a:	d107      	bne.n	1881c <RegionCommonUpdateBandTimeOff+0xac>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
   1880c:	4f56      	ldr	r7, [pc, #344]	; (18968 <RegionCommonUpdateBandTimeOff+0x1f8>)
            band->LastMaxCreditAssignTime = elapsedTime;
   1880e:	60a0      	str	r0, [r4, #8]
   18810:	e00b      	b.n	1882a <RegionCommonUpdateBandTimeOff+0xba>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   18812:	f242 7310 	movw	r3, #10000	; 0x2710
   18816:	429e      	cmp	r6, r3
   18818:	bf38      	it	cc
   1881a:	461e      	movcc	r6, r3
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
   1881c:	4f53      	ldr	r7, [pc, #332]	; (1896c <RegionCommonUpdateBandTimeOff+0x1fc>)
   1881e:	e004      	b.n	1882a <RegionCommonUpdateBandTimeOff+0xba>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
   18820:	2e64      	cmp	r6, #100	; 0x64
   18822:	d8f0      	bhi.n	18806 <RegionCommonUpdateBandTimeOff+0x96>
            band->LastMaxCreditAssignTime = elapsedTime;
   18824:	2664      	movs	r6, #100	; 0x64
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
   18826:	465f      	mov	r7, fp
            band->LastMaxCreditAssignTime = elapsedTime;
   18828:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
   1882a:	68a1      	ldr	r1, [r4, #8]
   1882c:	a80c      	add	r0, sp, #48	; 0x30
   1882e:	f013 fa66 	bl	2bcfe <SysTimeFromMs>
   18832:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   18836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18838:	a80a      	add	r0, sp, #40	; 0x28
   1883a:	9300      	str	r3, [sp, #0]
   1883c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1883e:	f013 f9ce 	bl	2bbde <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
   18842:	9a03      	ldr	r2, [sp, #12]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
   18844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
   18846:	b912      	cbnz	r2, 1884e <RegionCommonUpdateBandTimeOff+0xde>
   18848:	9a07      	ldr	r2, [sp, #28]
   1884a:	2a00      	cmp	r2, #0
   1884c:	d031      	beq.n	188b2 <RegionCommonUpdateBandTimeOff+0x142>
   1884e:	6922      	ldr	r2, [r4, #16]
   18850:	42ba      	cmp	r2, r7
   18852:	d12e      	bne.n	188b2 <RegionCommonUpdateBandTimeOff+0x142>
            ( band->MaxTimeCredits != maxCredits ) ||
   18854:	4a46      	ldr	r2, [pc, #280]	; (18970 <RegionCommonUpdateBandTimeOff+0x200>)
   18856:	4293      	cmp	r3, r2
   18858:	d82b      	bhi.n	188b2 <RegionCommonUpdateBandTimeOff+0x142>
    if( band->LastBandUpdateTime == 0 )
   1885a:	6863      	ldr	r3, [r4, #4]
   1885c:	b903      	cbnz	r3, 18860 <RegionCommonUpdateBandTimeOff+0xf0>
        band->TimeCredits = maxCredits;
   1885e:	60e7      	str	r7, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
   18860:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18864:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
   18866:	9b05      	ldr	r3, [sp, #20]
        band->TimeCredits = band->MaxTimeCredits;
   18868:	bf88      	it	hi
   1886a:	60e2      	strhi	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
   1886c:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
   1886e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        if( ( bands[i].TimeCredits > creditCosts ) ||
   18870:	68e1      	ldr	r1, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
   18872:	4373      	muls	r3, r6
        if( ( bands[i].TimeCredits > creditCosts ) ||
   18874:	4299      	cmp	r1, r3
   18876:	d805      	bhi.n	18884 <RegionCommonUpdateBandTimeOff+0x114>
   18878:	9803      	ldr	r0, [sp, #12]
   1887a:	2800      	cmp	r0, #0
   1887c:	d15e      	bne.n	1893c <RegionCommonUpdateBandTimeOff+0x1cc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
   1887e:	f1ba 0f00 	cmp.w	sl, #0
   18882:	d030      	beq.n	188e6 <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
   18884:	2301      	movs	r3, #1
            validBands++;
   18886:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
   18888:	7523      	strb	r3, [r4, #20]
            validBands++;
   1888a:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
   1888c:	3418      	adds	r4, #24
   1888e:	e793      	b.n	187b8 <RegionCommonUpdateBandTimeOff+0x48>
        if( dutyCycleEnabled == false )
   18890:	9b03      	ldr	r3, [sp, #12]
    if( band->LastBandUpdateTime == 0 )
   18892:	6860      	ldr	r0, [r4, #4]
        if( dutyCycleEnabled == false )
   18894:	bb0b      	cbnz	r3, 188da <RegionCommonUpdateBandTimeOff+0x16a>
            band->TimeCredits = maxCredits;
   18896:	f8c4 b00c 	str.w	fp, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
   1889a:	b310      	cbz	r0, 188e2 <RegionCommonUpdateBandTimeOff+0x172>
   1889c:	2e01      	cmp	r6, #1
    band->MaxTimeCredits = maxCredits;
   1889e:	f8c4 b010 	str.w	fp, [r4, #16]
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
   188a2:	bf38      	it	cc
   188a4:	2601      	movcc	r6, #1
   188a6:	f013 fa80 	bl	2bdaa <TimerGetElapsedTime>
   188aa:	68e3      	ldr	r3, [r4, #12]
   188ac:	4403      	add	r3, r0
   188ae:	60e3      	str	r3, [r4, #12]
   188b0:	e7d6      	b.n	18860 <RegionCommonUpdateBandTimeOff+0xf0>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   188b2:	4b30      	ldr	r3, [pc, #192]	; (18974 <RegionCommonUpdateBandTimeOff+0x204>)
            band->TimeCredits = maxCredits;
   188b4:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   188b6:	4598      	cmp	r8, r3
   188b8:	d90b      	bls.n	188d2 <RegionCommonUpdateBandTimeOff+0x162>
                timeDiff.SubSeconds = 0;
   188ba:	2300      	movs	r3, #0
   188bc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
   188c0:	9b02      	ldr	r3, [sp, #8]
   188c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   188c4:	4618      	mov	r0, r3
   188c6:	930a      	str	r3, [sp, #40]	; 0x28
   188c8:	f013 f9fa 	bl	2bcc0 <SysTimeToMs>
    if( band->LastBandUpdateTime == 0 )
   188cc:	6863      	ldr	r3, [r4, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
   188ce:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
   188d0:	b10b      	cbz	r3, 188d6 <RegionCommonUpdateBandTimeOff+0x166>
    band->MaxTimeCredits = maxCredits;
   188d2:	6127      	str	r7, [r4, #16]
    if( joined == true )
   188d4:	e7c4      	b.n	18860 <RegionCommonUpdateBandTimeOff+0xf0>
        band->TimeCredits = maxCredits;
   188d6:	60e7      	str	r7, [r4, #12]
   188d8:	e7fb      	b.n	188d2 <RegionCommonUpdateBandTimeOff+0x162>
    if( band->LastBandUpdateTime == 0 )
   188da:	2800      	cmp	r0, #0
   188dc:	d1de      	bne.n	1889c <RegionCommonUpdateBandTimeOff+0x12c>
        band->TimeCredits = maxCredits;
   188de:	f8c4 b00c 	str.w	fp, [r4, #12]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
   188e2:	2000      	movs	r0, #0
   188e4:	e7da      	b.n	1889c <RegionCommonUpdateBandTimeOff+0x12c>
            if( bands[i].MaxTimeCredits > creditCosts )
   188e6:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
   188e8:	f884 a014 	strb.w	sl, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
   188ec:	d201      	bcs.n	188f2 <RegionCommonUpdateBandTimeOff+0x182>
                validBands++;
   188ee:	3501      	adds	r5, #1
   188f0:	b2ed      	uxtb	r5, r5
                SysTime_t backoffTimeRange = {
   188f2:	2300      	movs	r3, #0
                if( dutyCycle == BACKOFF_DC_1_HOUR )
   188f4:	2e64      	cmp	r6, #100	; 0x64
   188f6:	4a20      	ldr	r2, [pc, #128]	; (18978 <RegionCommonUpdateBandTimeOff+0x208>)
                SysTime_t backoffTimeRange = {
   188f8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
                if( dutyCycle == BACKOFF_DC_1_HOUR )
   188fc:	d02c      	beq.n	18958 <RegionCommonUpdateBandTimeOff+0x1e8>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
   188fe:	f649 23b0 	movw	r3, #39600	; 0x9ab0
   18902:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   18906:	bf18      	it	ne
   18908:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   1890a:	4590      	cmp	r8, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
   1890c:	bf88      	it	hi
   1890e:	9a04      	ldrhi	r2, [sp, #16]
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
   18910:	ae0a      	add	r6, sp, #40	; 0x28
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
   18912:	bf82      	ittt	hi
   18914:	f502 32a8 	addhi.w	r2, r2, #86016	; 0x15000
   18918:	f502 72c0 	addhi.w	r2, r2, #384	; 0x180
   1891c:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
   1891e:	930a      	str	r3, [sp, #40]	; 0x28
   18920:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18922:	4630      	mov	r0, r6
   18924:	9300      	str	r3, [sp, #0]
   18926:	e896 0006 	ldmia.w	r6, {r1, r2}
   1892a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1892c:	f013 f957 	bl	2bbde <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
   18930:	e896 0003 	ldmia.w	r6, {r0, r1}
   18934:	f013 f9c4 	bl	2bcc0 <SysTimeToMs>
   18938:	4681      	mov	r9, r0
   1893a:	e7a7      	b.n	1888c <RegionCommonUpdateBandTimeOff+0x11c>
            bands[i].ReadyForTransmission = false;
   1893c:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
   1893e:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
   18940:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
   18942:	d205      	bcs.n	18950 <RegionCommonUpdateBandTimeOff+0x1e0>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
   18944:	1a5b      	subs	r3, r3, r1
   18946:	4599      	cmp	r9, r3
   18948:	bf28      	it	cs
   1894a:	4699      	movcs	r9, r3
                validBands++;
   1894c:	3501      	adds	r5, #1
   1894e:	b2ed      	uxtb	r5, r5
            if( joined == false )
   18950:	f1ba 0f00 	cmp.w	sl, #0
   18954:	d19a      	bne.n	1888c <RegionCommonUpdateBandTimeOff+0x11c>
   18956:	e7cc      	b.n	188f2 <RegionCommonUpdateBandTimeOff+0x182>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
   18958:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1895c:	e7d5      	b.n	1890a <RegionCommonUpdateBandTimeOff+0x19a>
   1895e:	bf00      	nop
   18960:	00015180 	.word	0x00015180
   18964:	001b7740 	.word	0x001b7740
   18968:	0112a880 	.word	0x0112a880
   1896c:	02932e00 	.word	0x02932e00
   18970:	0001517f 	.word	0x0001517f
   18974:	0001ec2f 	.word	0x0001ec2f
   18978:	0001ec30 	.word	0x0001ec30

0001897c <RegionCommonComputeSymbolTimeLoRa>:
    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
   1897c:	4b02      	ldr	r3, [pc, #8]	; (18988 <RegionCommonComputeSymbolTimeLoRa+0xc>)
   1897e:	fa03 f000 	lsl.w	r0, r3, r0
}
   18982:	fbb0 f0f1 	udiv	r0, r0, r1
   18986:	4770      	bx	lr
   18988:	000f4240 	.word	0x000f4240

0001898c <RegionCommonGetBandwidth>:
    return MAX( txPower, maxBandTxPower );
}

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
   1898c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   18990:	4b05      	ldr	r3, [pc, #20]	; (189a8 <RegionCommonGetBandwidth+0x1c>)
   18992:	4298      	cmp	r0, r3
   18994:	d005      	beq.n	189a2 <RegionCommonGetBandwidth+0x16>
   18996:	4b05      	ldr	r3, [pc, #20]	; (189ac <RegionCommonGetBandwidth+0x20>)
   18998:	1ac3      	subs	r3, r0, r3
   1899a:	4258      	negs	r0, r3
   1899c:	4158      	adcs	r0, r3
   1899e:	0040      	lsls	r0, r0, #1
   189a0:	4770      	bx	lr
   189a2:	2001      	movs	r0, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
   189a4:	4770      	bx	lr
   189a6:	bf00      	nop
   189a8:	0003d090 	.word	0x0003d090
   189ac:	0007a120 	.word	0x0007a120

000189b0 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
   189b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesEU868[datarate];
   189b2:	4b11      	ldr	r3, [pc, #68]	; (189f8 <GetTimeOnAir+0x48>)
{
   189b4:	460c      	mov	r4, r1
   189b6:	b085      	sub	sp, #20
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   189b8:	4910      	ldr	r1, [pc, #64]	; (189fc <GetTimeOnAir+0x4c>)
{
   189ba:	4605      	mov	r5, r0
    int8_t phyDr = DataratesEU868[datarate];
   189bc:	561f      	ldrsb	r7, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   189be:	f7ff ffe5 	bl	1898c <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   189c2:	4b0f      	ldr	r3, [pc, #60]	; (18a00 <GetTimeOnAir+0x50>)
   189c4:	b2e4      	uxtb	r4, r4
   189c6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   189c8:	2301      	movs	r3, #1
    if( datarate == DR_7 )
   189ca:	2d07      	cmp	r5, #7
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   189cc:	4601      	mov	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   189ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
    if( datarate == DR_7 )
   189d2:	d10a      	bne.n	189ea <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   189d4:	2205      	movs	r2, #5
   189d6:	2300      	movs	r3, #0
   189d8:	e9cd 2300 	strd	r2, r3, [sp]
   189dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   189e0:	437a      	muls	r2, r7
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
   189e2:	4618      	mov	r0, r3
   189e4:	47b0      	blx	r6
    }
    return timeOnAir;
}
   189e6:	b005      	add	sp, #20
   189e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
   189ea:	2208      	movs	r2, #8
   189ec:	2000      	movs	r0, #0
   189ee:	e9cd 2000 	strd	r2, r0, [sp]
   189f2:	463a      	mov	r2, r7
   189f4:	e7f5      	b.n	189e2 <GetTimeOnAir+0x32>
   189f6:	bf00      	nop
   189f8:	0003667b 	.word	0x0003667b
   189fc:	00033b7c 	.word	0x00033b7c
   18a00:	00033a2c 	.word	0x00033a2c

00018a04 <VerifyRfFreq>:
{
   18a04:	b538      	push	{r3, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
   18a06:	4b19      	ldr	r3, [pc, #100]	; (18a6c <VerifyRfFreq+0x68>)
{
   18a08:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
   18a0a:	6a1b      	ldr	r3, [r3, #32]
{
   18a0c:	460d      	mov	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
   18a0e:	4798      	blx	r3
   18a10:	b158      	cbz	r0, 18a2a <VerifyRfFreq+0x26>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
   18a12:	4b17      	ldr	r3, [pc, #92]	; (18a70 <VerifyRfFreq+0x6c>)
   18a14:	4a17      	ldr	r2, [pc, #92]	; (18a74 <VerifyRfFreq+0x70>)
   18a16:	4423      	add	r3, r4
   18a18:	4293      	cmp	r3, r2
   18a1a:	d907      	bls.n	18a2c <VerifyRfFreq+0x28>
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
   18a1c:	4b16      	ldr	r3, [pc, #88]	; (18a78 <VerifyRfFreq+0x74>)
   18a1e:	4a17      	ldr	r2, [pc, #92]	; (18a7c <VerifyRfFreq+0x78>)
   18a20:	4423      	add	r3, r4
   18a22:	4293      	cmp	r3, r2
   18a24:	d80c      	bhi.n	18a40 <VerifyRfFreq+0x3c>
   18a26:	2300      	movs	r3, #0
        *band = 0;
   18a28:	702b      	strb	r3, [r5, #0]
}
   18a2a:	bd38      	pop	{r3, r4, r5, pc}
   18a2c:	2302      	movs	r3, #2
   18a2e:	e7fb      	b.n	18a28 <VerifyRfFreq+0x24>
   18a30:	2301      	movs	r3, #1
   18a32:	e7f9      	b.n	18a28 <VerifyRfFreq+0x24>
   18a34:	2305      	movs	r3, #5
   18a36:	e7f7      	b.n	18a28 <VerifyRfFreq+0x24>
   18a38:	2303      	movs	r3, #3
   18a3a:	e7f5      	b.n	18a28 <VerifyRfFreq+0x24>
   18a3c:	2304      	movs	r3, #4
   18a3e:	e7f3      	b.n	18a28 <VerifyRfFreq+0x24>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
   18a40:	4b0f      	ldr	r3, [pc, #60]	; (18a80 <VerifyRfFreq+0x7c>)
   18a42:	4a10      	ldr	r2, [pc, #64]	; (18a84 <VerifyRfFreq+0x80>)
   18a44:	4423      	add	r3, r4
   18a46:	4293      	cmp	r3, r2
   18a48:	d9f2      	bls.n	18a30 <VerifyRfFreq+0x2c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
   18a4a:	4b0f      	ldr	r3, [pc, #60]	; (18a88 <VerifyRfFreq+0x84>)
   18a4c:	4a0f      	ldr	r2, [pc, #60]	; (18a8c <VerifyRfFreq+0x88>)
   18a4e:	4423      	add	r3, r4
   18a50:	4293      	cmp	r3, r2
   18a52:	d9ef      	bls.n	18a34 <VerifyRfFreq+0x30>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
   18a54:	4b0e      	ldr	r3, [pc, #56]	; (18a90 <VerifyRfFreq+0x8c>)
   18a56:	4a0f      	ldr	r2, [pc, #60]	; (18a94 <VerifyRfFreq+0x90>)
   18a58:	4423      	add	r3, r4
   18a5a:	4293      	cmp	r3, r2
   18a5c:	d9ec      	bls.n	18a38 <VerifyRfFreq+0x34>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
   18a5e:	4b0e      	ldr	r3, [pc, #56]	; (18a98 <VerifyRfFreq+0x94>)
   18a60:	4a0e      	ldr	r2, [pc, #56]	; (18a9c <VerifyRfFreq+0x98>)
   18a62:	4423      	add	r3, r4
   18a64:	4293      	cmp	r3, r2
   18a66:	d9e9      	bls.n	18a3c <VerifyRfFreq+0x38>
        return false;
   18a68:	2000      	movs	r0, #0
   18a6a:	e7de      	b.n	18a2a <VerifyRfFreq+0x26>
   18a6c:	00033a2c 	.word	0x00033a2c
   18a70:	cc8faa40 	.word	0xcc8faa40
   18a74:	001e847f 	.word	0x001e847f
   18a78:	cc7125c0 	.word	0xcc7125c0
   18a7c:	002dc6c0 	.word	0x002dc6c0
   18a80:	cc435eff 	.word	0xcc435eff
   18a84:	000927bf 	.word	0x000927bf
   18a88:	cc38b0a0 	.word	0xcc38b0a0
   18a8c:	0007a120 	.word	0x0007a120
   18a90:	cc2e0240 	.word	0xcc2e0240
   18a94:	0003d090 	.word	0x0003d090
   18a98:	cc296e60 	.word	0xcc296e60
   18a9c:	000493e0 	.word	0x000493e0

00018aa0 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
   18aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
   18aa2:	2300      	movs	r3, #0
   18aa4:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
   18aa6:	7803      	ldrb	r3, [r0, #0]
   18aa8:	3b0b      	subs	r3, #11
   18aaa:	2b2c      	cmp	r3, #44	; 0x2c
   18aac:	d862      	bhi.n	18b74 <RegionEU868GetPhyParam+0xd4>
   18aae:	e8df f003 	tbb	[pc, r3]
   18ab2:	2f2c      	.short	0x2f2c
   18ab4:	3b383631 	.word	0x3b383631
   18ab8:	4744413e 	.word	0x4744413e
   18abc:	51614f61 	.word	0x51614f61
   18ac0:	615b5955 	.word	0x615b5955
   18ac4:	17655e61 	.word	0x17655e61
   18ac8:	61616161 	.word	0x61616161
   18acc:	61616161 	.word	0x61616161
   18ad0:	61616161 	.word	0x61616161
   18ad4:	6c674f61 	.word	0x6c674f61
   18ad8:	6c4f6161 	.word	0x6c4f6161
   18adc:	6e61      	.short	0x6e61
   18ade:	72          	.byte	0x72
   18adf:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   18ae0:	7843      	ldrb	r3, [r0, #1]
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
   18ae2:	a801      	add	r0, sp, #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   18ae4:	f88d 3004 	strb.w	r3, [sp, #4]
   18ae8:	2307      	movs	r3, #7
   18aea:	f88d 3005 	strb.w	r3, [sp, #5]
   18aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   18af2:	f8ad 3006 	strh.w	r3, [sp, #6]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
   18af6:	4b2b      	ldr	r3, [pc, #172]	; (18ba4 <RegionEU868GetPhyParam+0x104>)
   18af8:	681b      	ldr	r3, [r3, #0]
   18afa:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   18afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
   18b02:	f014 fa9e 	bl	2d042 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
   18b06:	9000      	str	r0, [sp, #0]
            break;
   18b08:	e034      	b.n	18b74 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
   18b0a:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18b0c:	9300      	str	r3, [sp, #0]
            break;
   18b0e:	e031      	b.n	18b74 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
   18b10:	2320      	movs	r3, #32
   18b12:	e7fb      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
   18b14:	f990 3001 	ldrsb.w	r3, [r0, #1]
   18b18:	4a23      	ldr	r2, [pc, #140]	; (18ba8 <RegionEU868GetPhyParam+0x108>)
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18b1a:	5cd3      	ldrb	r3, [r2, r3]
   18b1c:	e7f6      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
   18b1e:	2301      	movs	r3, #1
   18b20:	e7f4      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_MAX_RX_WINDOW;
   18b22:	f640 33b8 	movw	r3, #3000	; 0xbb8
   18b26:	e7f1      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
   18b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18b2c:	e7ee      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
   18b2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   18b32:	e7eb      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
   18b34:	f241 3388 	movw	r3, #5000	; 0x1388
   18b38:	e7e8      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
   18b3a:	f241 7370 	movw	r3, #6000	; 0x1770
   18b3e:	e7e5      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
   18b40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18b44:	4819      	ldr	r0, [pc, #100]	; (18bac <RegionEU868GetPhyParam+0x10c>)
   18b46:	f013 f807 	bl	2bb58 <randr>
   18b4a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   18b4e:	e7da      	b.n	18b06 <RegionEU868GetPhyParam+0x66>
            phyParam.Value = EU868_RX_WND_2_FREQ;
   18b50:	4b17      	ldr	r3, [pc, #92]	; (18bb0 <RegionEU868GetPhyParam+0x110>)
   18b52:	e7db      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   18b54:	4b13      	ldr	r3, [pc, #76]	; (18ba4 <RegionEU868GetPhyParam+0x104>)
   18b56:	681b      	ldr	r3, [r3, #0]
   18b58:	33c0      	adds	r3, #192	; 0xc0
   18b5a:	e7d7      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
   18b5c:	4b11      	ldr	r3, [pc, #68]	; (18ba4 <RegionEU868GetPhyParam+0x104>)
   18b5e:	681b      	ldr	r3, [r3, #0]
   18b60:	33c2      	adds	r3, #194	; 0xc2
   18b62:	e7d3      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
   18b64:	2310      	movs	r3, #16
   18b66:	e7d1      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Channels = RegionNvmGroup2->Channels;
   18b68:	4b0e      	ldr	r3, [pc, #56]	; (18ba4 <RegionEU868GetPhyParam+0x104>)
   18b6a:	681b      	ldr	r3, [r3, #0]
   18b6c:	e7ce      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
   18b6e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   18b72:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
   18b74:	9800      	ldr	r0, [sp, #0]
   18b76:	b005      	add	sp, #20
   18b78:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   18b7c:	4b0d      	ldr	r3, [pc, #52]	; (18bb4 <RegionEU868GetPhyParam+0x114>)
   18b7e:	e7f8      	b.n	18b72 <RegionEU868GetPhyParam+0xd2>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
   18b80:	f240 1311 	movw	r3, #273	; 0x111
   18b84:	f8ad 3000 	strh.w	r3, [sp]
            break;
   18b88:	e7f4      	b.n	18b74 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
   18b8a:	2303      	movs	r3, #3
   18b8c:	e7be      	b.n	18b0c <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18b8e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   18b92:	4a09      	ldr	r2, [pc, #36]	; (18bb8 <RegionEU868GetPhyParam+0x118>)
   18b94:	e7c1      	b.n	18b1a <RegionEU868GetPhyParam+0x7a>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
   18b96:	4909      	ldr	r1, [pc, #36]	; (18bbc <RegionEU868GetPhyParam+0x11c>)
   18b98:	f990 0001 	ldrsb.w	r0, [r0, #1]
   18b9c:	f7ff fef6 	bl	1898c <RegionCommonGetBandwidth>
   18ba0:	e7b1      	b.n	18b06 <RegionEU868GetPhyParam+0x66>
   18ba2:	bf00      	nop
   18ba4:	2003092c 	.word	0x2003092c
   18ba8:	00036673 	.word	0x00036673
   18bac:	fffffc18 	.word	0xfffffc18
   18bb0:	33d3e608 	.word	0x33d3e608
   18bb4:	4009999a 	.word	0x4009999a
   18bb8:	0003667b 	.word	0x0003667b
   18bbc:	00033b7c 	.word	0x00033b7c

00018bc0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
   18bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
   18bc2:	210c      	movs	r1, #12
   18bc4:	4b0a      	ldr	r3, [pc, #40]	; (18bf0 <RegionEU868SetBandTxDone+0x30>)
   18bc6:	7802      	ldrb	r2, [r0, #0]
   18bc8:	681b      	ldr	r3, [r3, #0]
   18bca:	fb01 3302 	mla	r3, r1, r2, r3
   18bce:	7a5b      	ldrb	r3, [r3, #9]
   18bd0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   18bd4:	4b07      	ldr	r3, [pc, #28]	; (18bf4 <RegionEU868SetBandTxDone+0x34>)
   18bd6:	681d      	ldr	r5, [r3, #0]
   18bd8:	6903      	ldr	r3, [r0, #16]
   18bda:	9300      	str	r3, [sp, #0]
   18bdc:	68c3      	ldr	r3, [r0, #12]
   18bde:	7842      	ldrb	r2, [r0, #1]
   18be0:	6881      	ldr	r1, [r0, #8]
   18be2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   18be6:	f014 f8c3 	bl	2cd70 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
   18bea:	b003      	add	sp, #12
   18bec:	bd30      	pop	{r4, r5, pc}
   18bee:	bf00      	nop
   18bf0:	2003092c 	.word	0x2003092c
   18bf4:	20030928 	.word	0x20030928

00018bf8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
   18bf8:	b530      	push	{r4, r5, lr}
   18bfa:	b0a5      	sub	sp, #148	; 0x94
   18bfc:	4604      	mov	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
   18bfe:	228e      	movs	r2, #142	; 0x8e
   18c00:	2100      	movs	r1, #0
   18c02:	f10d 0002 	add.w	r0, sp, #2
   18c06:	f018 fe4c 	bl	318a2 <memset>
   18c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18c0e:	2364      	movs	r3, #100	; 0x64
   18c10:	210a      	movs	r1, #10
   18c12:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   18c16:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
   18c1a:	7b22      	ldrb	r2, [r4, #12]
    Band_t bands[EU868_MAX_NB_BANDS] =
   18c1c:	f8ad 3000 	strh.w	r3, [sp]
    switch( params->Type )
   18c20:	2a01      	cmp	r2, #1
    Band_t bands[EU868_MAX_NB_BANDS] =
   18c22:	f8ad 3018 	strh.w	r3, [sp, #24]
   18c26:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
   18c2a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    switch( params->Type )
   18c2e:	d02e      	beq.n	18c8e <RegionEU868InitDefaults+0x96>
   18c30:	2a02      	cmp	r2, #2
   18c32:	d036      	beq.n	18ca2 <RegionEU868InitDefaults+0xaa>
   18c34:	bb4a      	cbnz	r2, 18c8a <RegionEU868InitDefaults+0x92>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
   18c36:	6823      	ldr	r3, [r4, #0]
   18c38:	b33b      	cbz	r3, 18c8a <RegionEU868InitDefaults+0x92>
   18c3a:	6863      	ldr	r3, [r4, #4]
   18c3c:	b32b      	cbz	r3, 18c8a <RegionEU868InitDefaults+0x92>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
   18c3e:	4d1e      	ldr	r5, [pc, #120]	; (18cb8 <RegionEU868InitDefaults+0xc0>)
            RegionBands = (Band_t*) params->Bands;
   18c40:	68a0      	ldr	r0, [r4, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
   18c42:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
   18c44:	4b1d      	ldr	r3, [pc, #116]	; (18cbc <RegionEU868InitDefaults+0xc4>)

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   18c46:	2290      	movs	r2, #144	; 0x90
   18c48:	4669      	mov	r1, sp
            RegionBands = (Band_t*) params->Bands;
   18c4a:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   18c4c:	f012 ff91 	bl	2bb72 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
   18c50:	682c      	ldr	r4, [r5, #0]
   18c52:	4b1b      	ldr	r3, [pc, #108]	; (18cc0 <RegionEU868InitDefaults+0xc8>)
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18c54:	f104 050c 	add.w	r5, r4, #12
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
   18c58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18c60:	f103 020c 	add.w	r2, r3, #12
   18c64:	ca07      	ldmia	r2, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
   18c66:	3318      	adds	r3, #24
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18c68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
   18c6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18c70:	f104 0518 	add.w	r5, r4, #24
   18c74:	e885 0007 	stmia.w	r5, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   18c78:	2307      	movs	r3, #7
   18c7a:	4621      	mov	r1, r4

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18c7c:	2201      	movs	r2, #1
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   18c7e:	f821 3fc2 	strh.w	r3, [r1, #194]!
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18c82:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18c86:	f014 f864 	bl	2cd52 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
   18c8a:	b025      	add	sp, #148	; 0x94
   18c8c:	bd30      	pop	{r4, r5, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
   18c8e:	4b0a      	ldr	r3, [pc, #40]	; (18cb8 <RegionEU868InitDefaults+0xc0>)
   18c90:	6818      	ldr	r0, [r3, #0]
   18c92:	2300      	movs	r3, #0
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18c94:	f100 01c2 	add.w	r1, r0, #194	; 0xc2
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
   18c98:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
   18c9a:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
   18c9c:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18c9e:	30c0      	adds	r0, #192	; 0xc0
   18ca0:	e7f1      	b.n	18c86 <RegionEU868InitDefaults+0x8e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
   18ca2:	4b05      	ldr	r3, [pc, #20]	; (18cb8 <RegionEU868InitDefaults+0xc0>)
   18ca4:	681b      	ldr	r3, [r3, #0]
   18ca6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
   18caa:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
   18cae:	430a      	orrs	r2, r1
   18cb0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
   18cb4:	e7e9      	b.n	18c8a <RegionEU868InitDefaults+0x92>
   18cb6:	bf00      	nop
   18cb8:	2003092c 	.word	0x2003092c
   18cbc:	20030928 	.word	0x20030928
   18cc0:	000331b4 	.word	0x000331b4

00018cc4 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
   18cc4:	b508      	push	{r3, lr}
    switch( chanMaskSet->ChannelsMaskType )
   18cc6:	7902      	ldrb	r2, [r0, #4]
   18cc8:	b11a      	cbz	r2, 18cd2 <RegionEU868ChanMaskSet+0xe>
   18cca:	2a01      	cmp	r2, #1
   18ccc:	d00b      	beq.n	18ce6 <RegionEU868ChanMaskSet+0x22>
   18cce:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
   18cd0:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
   18cd2:	2201      	movs	r2, #1
   18cd4:	4b07      	ldr	r3, [pc, #28]	; (18cf4 <RegionEU868ChanMaskSet+0x30>)
   18cd6:	6801      	ldr	r1, [r0, #0]
   18cd8:	681b      	ldr	r3, [r3, #0]
   18cda:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   18cde:	f014 f838 	bl	2cd52 <RegionCommonChanMaskCopy>
    return true;
   18ce2:	2001      	movs	r0, #1
   18ce4:	e7f4      	b.n	18cd0 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
   18ce6:	4b03      	ldr	r3, [pc, #12]	; (18cf4 <RegionEU868ChanMaskSet+0x30>)
   18ce8:	6801      	ldr	r1, [r0, #0]
   18cea:	681b      	ldr	r3, [r3, #0]
   18cec:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
   18cf0:	e7f5      	b.n	18cde <RegionEU868ChanMaskSet+0x1a>
   18cf2:	bf00      	nop
   18cf4:	2003092c 	.word	0x2003092c

00018cf8 <RegionEU868ComputeRxWindowParameters>:
void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18cf8:	2807      	cmp	r0, #7
{
   18cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18cfc:	bfa8      	it	ge
   18cfe:	2007      	movge	r0, #7
{
   18d00:	461c      	mov	r4, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18d02:	4d13      	ldr	r5, [pc, #76]	; (18d50 <RegionEU868ComputeRxWindowParameters+0x58>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18d04:	7058      	strb	r0, [r3, #1]
{
   18d06:	460e      	mov	r6, r1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18d08:	4629      	mov	r1, r5
{
   18d0a:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18d0c:	f7ff fe3e 	bl	1898c <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
   18d10:	f994 3001 	ldrsb.w	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18d14:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
   18d16:	2b07      	cmp	r3, #7
   18d18:	d113      	bne.n	18d42 <RegionEU868ComputeRxWindowParameters+0x4a>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
   18d1a:	2032      	movs	r0, #50	; 0x32
   18d1c:	f014 f8b1 	bl	2ce82 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   18d20:	4b0c      	ldr	r3, [pc, #48]	; (18d54 <RegionEU868ComputeRxWindowParameters+0x5c>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   18d22:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   18d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   18d26:	4798      	blx	r3
   18d28:	f104 020c 	add.w	r2, r4, #12
   18d2c:	3408      	adds	r4, #8
   18d2e:	4603      	mov	r3, r0
   18d30:	9201      	str	r2, [sp, #4]
   18d32:	4631      	mov	r1, r6
   18d34:	463a      	mov	r2, r7
   18d36:	4628      	mov	r0, r5
   18d38:	9400      	str	r4, [sp, #0]
   18d3a:	f014 f8a7 	bl	2ce8c <RegionCommonComputeRxWindowParameters>
}
   18d3e:	b003      	add	sp, #12
   18d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   18d42:	4a05      	ldr	r2, [pc, #20]	; (18d58 <RegionEU868ComputeRxWindowParameters+0x60>)
   18d44:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   18d48:	5cd0      	ldrb	r0, [r2, r3]
   18d4a:	f7ff fe17 	bl	1897c <RegionCommonComputeSymbolTimeLoRa>
   18d4e:	e7e7      	b.n	18d20 <RegionEU868ComputeRxWindowParameters+0x28>
   18d50:	00033b7c 	.word	0x00033b7c
   18d54:	00033a2c 	.word	0x00033a2c
   18d58:	0003667b 	.word	0x0003667b

00018d5c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
   18d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
   18d60:	4f2f      	ldr	r7, [pc, #188]	; (18e20 <RegionEU868RxConfig+0xc4>)
{
   18d62:	b08a      	sub	sp, #40	; 0x28
    if( Radio.GetStatus( ) != RF_IDLE )
   18d64:	687b      	ldr	r3, [r7, #4]
{
   18d66:	4605      	mov	r5, r0
   18d68:	4688      	mov	r8, r1
    int8_t dr = rxConfig->Datarate;
   18d6a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint32_t frequency = rxConfig->Frequency;
   18d6e:	f8d0 9004 	ldr.w	r9, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
   18d72:	4798      	blx	r3
   18d74:	4604      	mov	r4, r0
   18d76:	2800      	cmp	r0, #0
   18d78:	d150      	bne.n	18e1c <RegionEU868RxConfig+0xc0>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
   18d7a:	7cab      	ldrb	r3, [r5, #18]
   18d7c:	b973      	cbnz	r3, 18d9c <RegionEU868RxConfig+0x40>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
   18d7e:	4a29      	ldr	r2, [pc, #164]	; (18e24 <RegionEU868RxConfig+0xc8>)
   18d80:	782b      	ldrb	r3, [r5, #0]
   18d82:	6812      	ldr	r2, [r2, #0]
   18d84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18d88:	0099      	lsls	r1, r3, #2
   18d8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18d8e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   18d92:	f1b9 0f00 	cmp.w	r9, #0
   18d96:	d101      	bne.n	18d9c <RegionEU868RxConfig+0x40>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
   18d98:	f852 9001 	ldr.w	r9, [r2, r1]
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
   18d9c:	4b22      	ldr	r3, [pc, #136]	; (18e28 <RegionEU868RxConfig+0xcc>)

    Radio.SetChannel( frequency );
   18d9e:	4648      	mov	r0, r9
    phyDr = DataratesEU868[dr];
   18da0:	f913 a006 	ldrsb.w	sl, [r3, r6]
    Radio.SetChannel( frequency );
   18da4:	68fb      	ldr	r3, [r7, #12]
   18da6:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
   18da8:	7c6b      	ldrb	r3, [r5, #17]
   18daa:	2e07      	cmp	r6, #7
   18dac:	892a      	ldrh	r2, [r5, #8]
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   18dae:	f8d7 9018 	ldr.w	r9, [r7, #24]
   18db2:	9309      	str	r3, [sp, #36]	; 0x24
    if( dr == DR_7 )
   18db4:	d121      	bne.n	18dfa <RegionEU868RxConfig+0x9e>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   18db6:	2300      	movs	r3, #0
   18db8:	2101      	movs	r1, #1
   18dba:	e9cd 3104 	strd	r3, r1, [sp, #16]
   18dbe:	2105      	movs	r1, #5
   18dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18dc4:	4a19      	ldr	r2, [pc, #100]	; (18e2c <RegionEU868RxConfig+0xd0>)
   18dc6:	4618      	mov	r0, r3
   18dc8:	e9cd 2100 	strd	r2, r1, [sp]
   18dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18dd0:	f24c 3150 	movw	r1, #50000	; 0xc350
   18dd4:	fb02 f20a 	mul.w	r2, r2, sl
   18dd8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   18ddc:	9306      	str	r3, [sp, #24]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   18dde:	47c8      	blx	r9
    }

    Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateEU868[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
   18de0:	4b13      	ldr	r3, [pc, #76]	; (18e30 <RegionEU868RxConfig+0xd4>)
   18de2:	4620      	mov	r0, r4
   18de4:	5d99      	ldrb	r1, [r3, r6]
   18de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18de8:	310d      	adds	r1, #13
   18dea:	b2c9      	uxtb	r1, r1
   18dec:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
   18dee:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
   18df0:	f888 6000 	strb.w	r6, [r8]
}
   18df4:	b00a      	add	sp, #40	; 0x28
   18df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   18dfa:	2100      	movs	r1, #0
   18dfc:	2401      	movs	r4, #1
   18dfe:	2308      	movs	r3, #8
   18e00:	e9cd 1407 	strd	r1, r4, [sp, #28]
   18e04:	e9cd 1300 	strd	r1, r3, [sp]
   18e08:	e9cd 1105 	strd	r1, r1, [sp, #20]
   18e0c:	e9cd 1103 	strd	r1, r1, [sp, #12]
   18e10:	9202      	str	r2, [sp, #8]
   18e12:	4623      	mov	r3, r4
   18e14:	4652      	mov	r2, sl
   18e16:	4620      	mov	r0, r4
   18e18:	78a9      	ldrb	r1, [r5, #2]
   18e1a:	e7e0      	b.n	18dde <RegionEU868RxConfig+0x82>
        return false;
   18e1c:	2000      	movs	r0, #0
   18e1e:	e7e9      	b.n	18df4 <RegionEU868RxConfig+0x98>
   18e20:	00033a2c 	.word	0x00033a2c
   18e24:	2003092c 	.word	0x2003092c
   18e28:	0003667b 	.word	0x0003667b
   18e2c:	00014585 	.word	0x00014585
   18e30:	00036673 	.word	0x00036673

00018e34 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
   18e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18e38:	250c      	movs	r5, #12
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   18e3a:	f990 3001 	ldrsb.w	r3, [r0, #1]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18e3e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 18f28 <RegionEU868TxConfig+0xf4>
{
   18e42:	4692      	mov	sl, r2
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   18e44:	4a39      	ldr	r2, [pc, #228]	; (18f2c <RegionEU868TxConfig+0xf8>)
{
   18e46:	b08d      	sub	sp, #52	; 0x34
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   18e48:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18e4c:	7802      	ldrb	r2, [r0, #0]
   18e4e:	f8d9 3000 	ldr.w	r3, [r9]
{
   18e52:	4604      	mov	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18e54:	fb05 3302 	mla	r3, r5, r2, r3
   18e58:	4a35      	ldr	r2, [pc, #212]	; (18f30 <RegionEU868TxConfig+0xfc>)
   18e5a:	7a5b      	ldrb	r3, [r3, #9]
   18e5c:	6812      	ldr	r2, [r2, #0]
   18e5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18e62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
{
   18e66:	910b      	str	r1, [sp, #44]	; 0x2c
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18e68:	f990 0002 	ldrsb.w	r0, [r0, #2]
   18e6c:	f993 1002 	ldrsb.w	r1, [r3, #2]
   18e70:	f014 f902 	bl	2d078 <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   18e74:	492f      	ldr	r1, [pc, #188]	; (18f34 <RegionEU868TxConfig+0x100>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18e76:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   18e78:	f994 0001 	ldrsb.w	r0, [r4, #1]
   18e7c:	f7ff fd86 	bl	1898c <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   18e80:	68a2      	ldr	r2, [r4, #8]
   18e82:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   18e84:	4680      	mov	r8, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   18e86:	4630      	mov	r0, r6
   18e88:	f014 f828 	bl	2cedc <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
   18e8c:	7822      	ldrb	r2, [r4, #0]
   18e8e:	f8d9 1000 	ldr.w	r1, [r9]
   18e92:	436a      	muls	r2, r5
   18e94:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 18f38 <RegionEU868TxConfig+0x104>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   18e98:	4607      	mov	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
   18e9a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   18e9e:	5888      	ldr	r0, [r1, r2]
   18ea0:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18ea2:	f8d9 301c 	ldr.w	r3, [r9, #28]
   18ea6:	2500      	movs	r5, #0
   18ea8:	469c      	mov	ip, r3
    if( txConfig->Datarate == DR_7 )
   18eaa:	f994 3001 	ldrsb.w	r3, [r4, #1]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18eae:	e9cd 5505 	strd	r5, r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
   18eb2:	2b07      	cmp	r3, #7
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18eb4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   18eb8:	e9cd 5307 	strd	r5, r3, [sp, #28]
    if( txConfig->Datarate == DR_7 )
   18ebc:	d123      	bne.n	18f06 <RegionEU868TxConfig+0xd2>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18ebe:	2301      	movs	r3, #1
   18ec0:	e9cd 5303 	strd	r5, r3, [sp, #12]
   18ec4:	2305      	movs	r3, #5
   18ec6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   18eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18ece:	fb03 f30b 	mul.w	r3, r3, fp
   18ed2:	4639      	mov	r1, r7
   18ed4:	9300      	str	r3, [sp, #0]
   18ed6:	f246 12a8 	movw	r2, #25000	; 0x61a8
   18eda:	4643      	mov	r3, r8
   18edc:	4628      	mov	r0, r5
   18ede:	4667      	mov	r7, ip
   18ee0:	47b8      	blx	r7
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
   18ee2:	89a1      	ldrh	r1, [r4, #12]
   18ee4:	f994 0001 	ldrsb.w	r0, [r4, #1]
   18ee8:	f7ff fd62 	bl	189b0 <GetTimeOnAir>
   18eec:	f8ca 0000 	str.w	r0, [sl]

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
   18ef0:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   18ef4:	4628      	mov	r0, r5
   18ef6:	7b21      	ldrb	r1, [r4, #12]
   18ef8:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
   18efa:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
   18efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18efe:	701e      	strb	r6, [r3, #0]
}
   18f00:	b00d      	add	sp, #52	; 0x34
   18f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
   18f06:	2001      	movs	r0, #1
   18f08:	2308      	movs	r3, #8
   18f0a:	e9cd 5003 	strd	r5, r0, [sp, #12]
   18f0e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   18f12:	462a      	mov	r2, r5
   18f14:	4643      	mov	r3, r8
   18f16:	4665      	mov	r5, ip
   18f18:	4639      	mov	r1, r7
   18f1a:	f8cd b000 	str.w	fp, [sp]
   18f1e:	47a8      	blx	r5
        modem = MODEM_LORA;
   18f20:	2001      	movs	r0, #1
   18f22:	4605      	mov	r5, r0
   18f24:	e7dd      	b.n	18ee2 <RegionEU868TxConfig+0xae>
   18f26:	bf00      	nop
   18f28:	2003092c 	.word	0x2003092c
   18f2c:	0003667b 	.word	0x0003667b
   18f30:	20030928 	.word	0x20030928
   18f34:	00033b7c 	.word	0x00033b7c
   18f38:	00033a2c 	.word	0x00033a2c

00018f3c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
   18f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
   18f40:	2400      	movs	r4, #0
{
   18f42:	4605      	mov	r5, r0
   18f44:	468a      	mov	sl, r1
   18f46:	4691      	mov	r9, r2
   18f48:	4698      	mov	r8, r3
    uint8_t status = 0x07;
   18f4a:	2607      	movs	r6, #7
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
                    {
                        chMask |= 1 << i;
   18f4c:	f04f 0b01 	mov.w	fp, #1
{
   18f50:	b08d      	sub	sp, #52	; 0x34
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
   18f52:	9402      	str	r4, [sp, #8]
   18f54:	f8ad 400c 	strh.w	r4, [sp, #12]
    uint16_t chMask = 0;
   18f58:	f8ad 4006 	strh.w	r4, [sp, #6]
    while( bytesProcessed < linkAdrReq->PayloadSize )
   18f5c:	7a2b      	ldrb	r3, [r5, #8]
   18f5e:	42a3      	cmp	r3, r4
   18f60:	d906      	bls.n	18f70 <RegionEU868LinkAdrReq+0x34>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
   18f62:	6868      	ldr	r0, [r5, #4]
   18f64:	a902      	add	r1, sp, #8
   18f66:	4420      	add	r0, r4
   18f68:	f013 ff26 	bl	2cdb8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
   18f6c:	2800      	cmp	r0, #0
   18f6e:	d153      	bne.n	19018 <RegionEU868LinkAdrReq+0xdc>
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   18f70:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.Status = status;
   18f72:	f88d 6014 	strb.w	r6, [sp, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   18f76:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   18f7a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
   18f7e:	4e45      	ldr	r6, [pc, #276]	; (19094 <RegionEU868LinkAdrReq+0x158>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   18f80:	f88d 3016 	strb.w	r3, [sp, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   18f84:	f89d 300a 	ldrb.w	r3, [sp, #10]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18f88:	f10d 020a 	add.w	r2, sp, #10
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   18f8c:	f88d 3017 	strb.w	r3, [sp, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   18f90:	f89d 3008 	ldrb.w	r3, [sp, #8]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18f94:	f10d 0109 	add.w	r1, sp, #9
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   18f98:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   18f9c:	7aeb      	ldrb	r3, [r5, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18f9e:	a804      	add	r0, sp, #16
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   18fa0:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
   18fa4:	7b2b      	ldrb	r3, [r5, #12]
   18fa6:	f88d 301a 	strb.w	r3, [sp, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
   18faa:	7b6b      	ldrb	r3, [r5, #13]
   18fac:	f88d 301b 	strb.w	r3, [sp, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
   18fb0:	2310      	movs	r3, #16
   18fb2:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
   18fb6:	f10d 0306 	add.w	r3, sp, #6
   18fba:	9308      	str	r3, [sp, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
   18fbc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
   18fc0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
   18fc4:	6833      	ldr	r3, [r6, #0]
   18fc6:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
   18fc8:	2307      	movs	r3, #7
   18fca:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
   18fce:	682b      	ldr	r3, [r5, #0]
   18fd0:	9304      	str	r3, [sp, #16]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18fd2:	ab02      	add	r3, sp, #8
   18fd4:	f013 ff0a 	bl	2cdec <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
   18fd8:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18fda:	4605      	mov	r5, r0
    if( status == 0x07 )
   18fdc:	d10a      	bne.n	18ff4 <RegionEU868LinkAdrReq+0xb8>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
   18fde:	6830      	ldr	r0, [r6, #0]
   18fe0:	2202      	movs	r2, #2
   18fe2:	2100      	movs	r1, #0
   18fe4:	30c0      	adds	r0, #192	; 0xc0
   18fe6:	f012 fdd8 	bl	2bb9a <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
   18fea:	6833      	ldr	r3, [r6, #0]
   18fec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18ff0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
   18ff4:	4628      	mov	r0, r5
    *drOut = linkAdrParams.Datarate;
   18ff6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   18ffa:	f88a 3000 	strb.w	r3, [sl]
    *txPowOut = linkAdrParams.TxPower;
   18ffe:	f89d 300a 	ldrb.w	r3, [sp, #10]
   19002:	f889 3000 	strb.w	r3, [r9]
    *nbRepOut = linkAdrParams.NbRep;
   19006:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1900a:	f888 3000 	strb.w	r3, [r8]
    *nbBytesParsed = bytesProcessed;
   1900e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19010:	701c      	strb	r4, [r3, #0]
}
   19012:	b00d      	add	sp, #52	; 0x34
   19014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chMask = linkAdrParams.ChMask;
   19018:	f8bd 700c 	ldrh.w	r7, [sp, #12]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   1901c:	f89d 300b 	ldrb.w	r3, [sp, #11]
        bytesProcessed += nextIndex;
   19020:	4420      	add	r0, r4
   19022:	b2c4      	uxtb	r4, r0
        chMask = linkAdrParams.ChMask;
   19024:	f8ad 7006 	strh.w	r7, [sp, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   19028:	b9f3      	cbnz	r3, 19068 <RegionEU868LinkAdrReq+0x12c>
   1902a:	b317      	cbz	r7, 19072 <RegionEU868LinkAdrReq+0x136>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
   1902c:	2000      	movs	r0, #0
   1902e:	4a19      	ldr	r2, [pc, #100]	; (19094 <RegionEU868LinkAdrReq+0x158>)
   19030:	2607      	movs	r6, #7
   19032:	6811      	ldr	r1, [r2, #0]
   19034:	f04f 0c0c 	mov.w	ip, #12
   19038:	4602      	mov	r2, r0
                if( linkAdrParams.ChMaskCtrl == 6 )
   1903a:	2b06      	cmp	r3, #6
   1903c:	d11b      	bne.n	19076 <RegionEU868LinkAdrReq+0x13a>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
   1903e:	fb0c fe00 	mul.w	lr, ip, r0
   19042:	f851 e00e 	ldr.w	lr, [r1, lr]
   19046:	f1be 0f00 	cmp.w	lr, #0
   1904a:	d004      	beq.n	19056 <RegionEU868LinkAdrReq+0x11a>
                        chMask |= 1 << i;
   1904c:	fa0b f200 	lsl.w	r2, fp, r0
   19050:	433a      	orrs	r2, r7
   19052:	b297      	uxth	r7, r2
   19054:	2201      	movs	r2, #1
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
   19056:	3001      	adds	r0, #1
   19058:	2810      	cmp	r0, #16
   1905a:	d1ee      	bne.n	1903a <RegionEU868LinkAdrReq+0xfe>
   1905c:	2a00      	cmp	r2, #0
   1905e:	f43f af7d 	beq.w	18f5c <RegionEU868LinkAdrReq+0x20>
   19062:	f8ad 7006 	strh.w	r7, [sp, #6]
   19066:	e779      	b.n	18f5c <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
   19068:	1e5a      	subs	r2, r3, #1
   1906a:	2a04      	cmp	r2, #4
   1906c:	d901      	bls.n	19072 <RegionEU868LinkAdrReq+0x136>
   1906e:	2b06      	cmp	r3, #6
   19070:	d0dc      	beq.n	1902c <RegionEU868LinkAdrReq+0xf0>
            status &= 0xFE; // Channel mask KO
   19072:	2606      	movs	r6, #6
   19074:	e772      	b.n	18f5c <RegionEU868LinkAdrReq+0x20>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   19076:	fa47 fe00 	asr.w	lr, r7, r0
   1907a:	f01e 0f01 	tst.w	lr, #1
   1907e:	d0ea      	beq.n	19056 <RegionEU868LinkAdrReq+0x11a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
   19080:	fb0c fe00 	mul.w	lr, ip, r0
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   19084:	f851 e00e 	ldr.w	lr, [r1, lr]
                        status &= 0xFE; // Channel mask KO
   19088:	f1be 0f00 	cmp.w	lr, #0
   1908c:	bf08      	it	eq
   1908e:	2606      	moveq	r6, #6
   19090:	e7e1      	b.n	19056 <RegionEU868LinkAdrReq+0x11a>
   19092:	bf00      	nop
   19094:	2003092c 	.word	0x2003092c

00019098 <RegionEU868DlChannelReq>:
    // Do not accept the request
    return -1;
}

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
   19098:	b513      	push	{r0, r1, r4, lr}
   1909a:	4604      	mov	r4, r0
    uint8_t status = 0x03;
    uint8_t band = 0;
   1909c:	2000      	movs	r0, #0

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
   1909e:	7823      	ldrb	r3, [r4, #0]
    uint8_t band = 0;
   190a0:	f88d 0007 	strb.w	r0, [sp, #7]
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
   190a4:	2b0f      	cmp	r3, #15
   190a6:	d81c      	bhi.n	190e2 <RegionEU868DlChannelReq+0x4a>
    {
        return 0;
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
   190a8:	6860      	ldr	r0, [r4, #4]
   190aa:	f10d 0107 	add.w	r1, sp, #7
   190ae:	f7ff fca9 	bl	18a04 <VerifyRfFreq>
   190b2:	7823      	ldrb	r3, [r4, #0]
   190b4:	4a0d      	ldr	r2, [pc, #52]	; (190ec <RegionEU868DlChannelReq+0x54>)
   190b6:	b158      	cbz	r0, 190d0 <RegionEU868DlChannelReq+0x38>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   190b8:	6812      	ldr	r2, [r2, #0]
   190ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   190be:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   190c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   190c6:	b173      	cbz	r3, 190e6 <RegionEU868DlChannelReq+0x4e>
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
   190c8:	6863      	ldr	r3, [r4, #4]
   190ca:	2003      	movs	r0, #3
   190cc:	604b      	str	r3, [r1, #4]
   190ce:	e007      	b.n	190e0 <RegionEU868DlChannelReq+0x48>
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   190d0:	210c      	movs	r1, #12
   190d2:	434b      	muls	r3, r1
   190d4:	6812      	ldr	r2, [r2, #0]
        status &= 0xFE;
   190d6:	2002      	movs	r0, #2
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   190d8:	58d3      	ldr	r3, [r2, r3]
   190da:	b90b      	cbnz	r3, 190e0 <RegionEU868DlChannelReq+0x48>
        status &= 0xFD;
   190dc:	f000 0001 	and.w	r0, r0, #1
    }

    return status;
   190e0:	b240      	sxtb	r0, r0
}
   190e2:	b002      	add	sp, #8
   190e4:	bd10      	pop	{r4, pc}
    uint8_t status = 0x03;
   190e6:	2003      	movs	r0, #3
   190e8:	e7f8      	b.n	190dc <RegionEU868DlChannelReq+0x44>
   190ea:	bf00      	nop
   190ec:	2003092c 	.word	0x2003092c

000190f0 <RegionEU868NextChannel>:
{
    return currentDr;
}

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
   190f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190f4:	460e      	mov	r6, r1
   190f6:	461f      	mov	r7, r3
    uint8_t nbEnabledChannels = 0;
   190f8:	2100      	movs	r1, #0
    uint8_t nbRestrictedChannels = 0;
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
   190fa:	2307      	movs	r3, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   190fc:	4d37      	ldr	r5, [pc, #220]	; (191dc <RegionEU868NextChannel+0xec>)
{
   190fe:	4604      	mov	r4, r0
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   19100:	6828      	ldr	r0, [r5, #0]
{
   19102:	b096      	sub	sp, #88	; 0x58
   19104:	4690      	mov	r8, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   19106:	30c0      	adds	r0, #192	; 0xc0
   19108:	2201      	movs	r2, #1
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
   1910a:	e9cd 1104 	strd	r1, r1, [sp, #16]
   1910e:	e9cd 1106 	strd	r1, r1, [sp, #24]
    uint8_t nbEnabledChannels = 0;
   19112:	f88d 100c 	strb.w	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
   19116:	f88d 100d 	strb.w	r1, [sp, #13]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
   1911a:	f8ad 300e 	strh.w	r3, [sp, #14]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   1911e:	f013 fdfa 	bl	2cd16 <RegionCommonCountChannels>
   19122:	b930      	cbnz	r0, 19132 <RegionEU868NextChannel+0x42>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   19124:	682a      	ldr	r2, [r5, #0]
   19126:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
   1912a:	f043 0307 	orr.w	r3, r3, #7
   1912e:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   19132:	682a      	ldr	r2, [r5, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
   19134:	7a63      	ldrb	r3, [r4, #9]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   19136:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
   1913a:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
   1913e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    countChannelsParams.Bands = RegionBands;
   19142:	4a27      	ldr	r2, [pc, #156]	; (191e0 <RegionEU868NextChannel+0xf0>)
    countChannelsParams.Joined = nextChanParams->Joined;
   19144:	f88d 3020 	strb.w	r3, [sp, #32]
    countChannelsParams.Bands = RegionBands;
   19148:	6812      	ldr	r2, [r2, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
   1914a:	f994 3008 	ldrsb.w	r3, [r4, #8]
    countChannelsParams.Bands = RegionBands;
   1914e:	920b      	str	r2, [sp, #44]	; 0x2c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
   19150:	2210      	movs	r2, #16
   19152:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    countChannelsParams.JoinChannels = &joinChannels;
   19156:	f10d 020e 	add.w	r2, sp, #14
   1915a:	920d      	str	r2, [sp, #52]	; 0x34
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
   1915c:	6822      	ldr	r2, [r4, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
   1915e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
   19162:	920e      	str	r2, [sp, #56]	; 0x38
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
   19164:	6862      	ldr	r2, [r4, #4]
   19166:	920f      	str	r2, [sp, #60]	; 0x3c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
   19168:	7aa2      	ldrb	r2, [r4, #10]
   1916a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
   1916e:	2206      	movs	r2, #6
   19170:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
   19174:	aa11      	add	r2, sp, #68	; 0x44
   19176:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
   1917a:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   1917c:	8ae1      	ldrh	r1, [r4, #22]
   1917e:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
   19180:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19184:	f7ff fc14 	bl	189b0 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
   19188:	ab08      	add	r3, sp, #32
   1918a:	9315      	str	r3, [sp, #84]	; 0x54

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
   1918c:	f10d 030d 	add.w	r3, sp, #13
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19190:	9014      	str	r0, [sp, #80]	; 0x50
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
   19192:	9300      	str	r3, [sp, #0]
   19194:	4639      	mov	r1, r7
   19196:	f8cd 8004 	str.w	r8, [sp, #4]
   1919a:	ab03      	add	r3, sp, #12
   1919c:	aa04      	add	r2, sp, #16
   1919e:	a80e      	add	r0, sp, #56	; 0x38
   191a0:	f013 ff0b 	bl	2cfba <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
   191a4:	4604      	mov	r4, r0
   191a6:	b978      	cbnz	r0, 191c8 <RegionEU868NextChannel+0xd8>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
   191a8:	f89d 100c 	ldrb.w	r1, [sp, #12]
   191ac:	3901      	subs	r1, #1
   191ae:	f012 fcd3 	bl	2bb58 <randr>
   191b2:	f100 0358 	add.w	r3, r0, #88	; 0x58
   191b6:	eb0d 0003 	add.w	r0, sp, r3
   191ba:	f810 3c48 	ldrb.w	r3, [r0, #-72]
   191be:	7033      	strb	r3, [r6, #0]
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
   191c0:	4620      	mov	r0, r4
   191c2:	b016      	add	sp, #88	; 0x58
   191c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
   191c8:	280c      	cmp	r0, #12
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   191ca:	bf01      	itttt	eq
   191cc:	682a      	ldreq	r2, [r5, #0]
   191ce:	f8b2 30c0 	ldrheq.w	r3, [r2, #192]	; 0xc0
   191d2:	f043 0307 	orreq.w	r3, r3, #7
   191d6:	f8a2 30c0 	strheq.w	r3, [r2, #192]	; 0xc0
   191da:	e7f1      	b.n	191c0 <RegionEU868NextChannel+0xd0>
   191dc:	2003092c 	.word	0x2003092c
   191e0:	20030928 	.word	0x20030928

000191e4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
   191e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t band = 0;
   191e6:	2700      	movs	r7, #0
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
   191e8:	7906      	ldrb	r6, [r0, #4]
{
   191ea:	4605      	mov	r5, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   191ec:	2e02      	cmp	r6, #2
    uint8_t band = 0;
   191ee:	f88d 7007 	strb.w	r7, [sp, #7]
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   191f2:	d932      	bls.n	1925a <RegionEU868ChannelAdd+0x76>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
   191f4:	2e0f      	cmp	r6, #15
   191f6:	d84d      	bhi.n	19294 <RegionEU868ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   191f8:	6803      	ldr	r3, [r0, #0]
   191fa:	2207      	movs	r2, #7
   191fc:	7a18      	ldrb	r0, [r3, #8]
   191fe:	4639      	mov	r1, r7
   19200:	f340 0003 	sbfx	r0, r0, #0, #4
   19204:	b240      	sxtb	r0, r0
   19206:	f013 fd64 	bl	2ccd2 <RegionCommonValueInRange>
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   1920a:	682b      	ldr	r3, [r5, #0]
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   1920c:	4604      	mov	r4, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   1920e:	7a18      	ldrb	r0, [r3, #8]
   19210:	2207      	movs	r2, #7
   19212:	f340 1003 	sbfx	r0, r0, #4, #4
   19216:	4639      	mov	r1, r7
   19218:	b240      	sxtb	r0, r0
   1921a:	f013 fd5a 	bl	2ccd2 <RegionCommonValueInRange>
   1921e:	b1b0      	cbz	r0, 1924e <RegionEU868ChannelAdd+0x6a>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   19220:	fab4 f484 	clz	r4, r4
   19224:	0964      	lsrs	r4, r4, #5
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   19226:	682b      	ldr	r3, [r5, #0]
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   19228:	f10d 0107 	add.w	r1, sp, #7
   1922c:	6818      	ldr	r0, [r3, #0]
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   1922e:	7a1b      	ldrb	r3, [r3, #8]
   19230:	f343 0203 	sbfx	r2, r3, #0, #4
   19234:	f343 1303 	sbfx	r3, r3, #4, #4
   19238:	b252      	sxtb	r2, r2
   1923a:	b25b      	sxtb	r3, r3
   1923c:	429a      	cmp	r2, r3
   1923e:	dd08      	ble.n	19252 <RegionEU868ChannelAdd+0x6e>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   19240:	f7ff fbe0 	bl	18a04 <VerifyRfFreq>
   19244:	f1c0 0006 	rsb	r0, r0, #6
   19248:	b2c0      	uxtb	r0, r0

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
    RegionNvmGroup2->Channels[id].Band = band;
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
   1924a:	b003      	add	sp, #12
   1924c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        drInvalid = true;
   1924e:	2401      	movs	r4, #1
   19250:	e7e9      	b.n	19226 <RegionEU868ChannelAdd+0x42>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   19252:	f7ff fbd7 	bl	18a04 <VerifyRfFreq>
   19256:	b910      	cbnz	r0, 1925e <RegionEU868ChannelAdd+0x7a>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   19258:	b1f4      	cbz	r4, 19298 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
   1925a:	2006      	movs	r0, #6
   1925c:	e7f5      	b.n	1924a <RegionEU868ChannelAdd+0x66>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   1925e:	b9ec      	cbnz	r4, 1929c <RegionEU868ChannelAdd+0xb8>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
   19260:	4f0f      	ldr	r7, [pc, #60]	; (192a0 <RegionEU868ChannelAdd+0xbc>)
   19262:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   19266:	683b      	ldr	r3, [r7, #0]
   19268:	220c      	movs	r2, #12
   1926a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1926e:	6829      	ldr	r1, [r5, #0]
   19270:	f012 fc7f 	bl	2bb72 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
   19274:	230c      	movs	r3, #12
   19276:	683a      	ldr	r2, [r7, #0]
   19278:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1927c:	fb03 2306 	mla	r3, r3, r6, r2
   19280:	7259      	strb	r1, [r3, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
   19282:	2301      	movs	r3, #1
   19284:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
   19288:	40b3      	lsls	r3, r6
   1928a:	430b      	orrs	r3, r1
    return LORAMAC_STATUS_OK;
   1928c:	4620      	mov	r0, r4
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
   1928e:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
   19292:	e7da      	b.n	1924a <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   19294:	2003      	movs	r0, #3
   19296:	e7d8      	b.n	1924a <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
   19298:	2004      	movs	r0, #4
   1929a:	e7d6      	b.n	1924a <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_DATARATE_INVALID;
   1929c:	2005      	movs	r0, #5
   1929e:	e7d4      	b.n	1924a <RegionEU868ChannelAdd+0x66>
   192a0:	2003092c 	.word	0x2003092c

000192a4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
   192a4:	b410      	push	{r4}
    uint8_t id = channelRemove->ChannelId;
   192a6:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   192a8:	2902      	cmp	r1, #2
   192aa:	d90d      	bls.n	192c8 <RegionEU868ChannelsRemove+0x24>
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
   192ac:	4b08      	ldr	r3, [pc, #32]	; (192d0 <RegionEU868ChannelsRemove+0x2c>)
   192ae:	2200      	movs	r2, #0
   192b0:	6818      	ldr	r0, [r3, #0]
   192b2:	230c      	movs	r3, #12
   192b4:	434b      	muls	r3, r1
   192b6:	18c4      	adds	r4, r0, r3
   192b8:	50c2      	str	r2, [r0, r3]
   192ba:	e9c4 2201 	strd	r2, r2, [r4, #4]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   192be:	30c0      	adds	r0, #192	; 0xc0
   192c0:	2210      	movs	r2, #16
}
   192c2:	bc10      	pop	{r4}
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   192c4:	f013 bd0e 	b.w	2cce4 <RegionCommonChanDisable>
}
   192c8:	2000      	movs	r0, #0
   192ca:	bc10      	pop	{r4}
   192cc:	4770      	bx	lr
   192ce:	bf00      	nop
   192d0:	2003092c 	.word	0x2003092c

000192d4 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   192d4:	4b0e      	ldr	r3, [pc, #56]	; (19310 <bt_hex+0x3c>)
   192d6:	2940      	cmp	r1, #64	; 0x40
   192d8:	bf28      	it	cs
   192da:	2140      	movcs	r1, #64	; 0x40
{
   192dc:	b570      	push	{r4, r5, r6, lr}
   192de:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   192e0:	4c0c      	ldr	r4, [pc, #48]	; (19314 <bt_hex+0x40>)
   192e2:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   192e4:	42b0      	cmp	r0, r6
   192e6:	f103 0302 	add.w	r3, r3, #2
   192ea:	d104      	bne.n	192f6 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   192ec:	2300      	movs	r3, #0
   192ee:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   192f2:	4807      	ldr	r0, [pc, #28]	; (19310 <bt_hex+0x3c>)
   192f4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   192f6:	7802      	ldrb	r2, [r0, #0]
   192f8:	0912      	lsrs	r2, r2, #4
   192fa:	5ca2      	ldrb	r2, [r4, r2]
   192fc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   19300:	f810 2b01 	ldrb.w	r2, [r0], #1
   19304:	f002 020f 	and.w	r2, r2, #15
   19308:	5ca2      	ldrb	r2, [r4, r2]
   1930a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1930e:	e7e9      	b.n	192e4 <bt_hex+0x10>
   19310:	20031a0d 	.word	0x20031a0d
   19314:	0003669d 	.word	0x0003669d

00019318 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   19318:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1931a:	7803      	ldrb	r3, [r0, #0]
   1931c:	b08b      	sub	sp, #44	; 0x2c
   1931e:	4604      	mov	r4, r0
   19320:	ad07      	add	r5, sp, #28
   19322:	2b03      	cmp	r3, #3
   19324:	d821      	bhi.n	1936a <bt_addr_le_str+0x52>
   19326:	e8df f003 	tbb	[pc, r3]
   1932a:	1a02      	.short	0x1a02
   1932c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1932e:	4912      	ldr	r1, [pc, #72]	; (19378 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   19330:	4628      	mov	r0, r5
   19332:	f018 fc05 	bl	31b40 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   19336:	9505      	str	r5, [sp, #20]
   19338:	7863      	ldrb	r3, [r4, #1]
   1933a:	211e      	movs	r1, #30
   1933c:	9304      	str	r3, [sp, #16]
   1933e:	78a3      	ldrb	r3, [r4, #2]
   19340:	4a0e      	ldr	r2, [pc, #56]	; (1937c <bt_addr_le_str+0x64>)
   19342:	9303      	str	r3, [sp, #12]
   19344:	78e3      	ldrb	r3, [r4, #3]
   19346:	480e      	ldr	r0, [pc, #56]	; (19380 <bt_addr_le_str+0x68>)
   19348:	9302      	str	r3, [sp, #8]
   1934a:	7923      	ldrb	r3, [r4, #4]
   1934c:	9301      	str	r3, [sp, #4]
   1934e:	7963      	ldrb	r3, [r4, #5]
   19350:	9300      	str	r3, [sp, #0]
   19352:	79a3      	ldrb	r3, [r4, #6]
   19354:	f010 ff95 	bl	2a282 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   19358:	4809      	ldr	r0, [pc, #36]	; (19380 <bt_addr_le_str+0x68>)
   1935a:	b00b      	add	sp, #44	; 0x2c
   1935c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1935e:	4909      	ldr	r1, [pc, #36]	; (19384 <bt_addr_le_str+0x6c>)
   19360:	e7e6      	b.n	19330 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   19362:	4909      	ldr	r1, [pc, #36]	; (19388 <bt_addr_le_str+0x70>)
   19364:	e7e4      	b.n	19330 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   19366:	4909      	ldr	r1, [pc, #36]	; (1938c <bt_addr_le_str+0x74>)
   19368:	e7e2      	b.n	19330 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1936a:	210a      	movs	r1, #10
   1936c:	4628      	mov	r0, r5
   1936e:	4a08      	ldr	r2, [pc, #32]	; (19390 <bt_addr_le_str+0x78>)
   19370:	f010 ff87 	bl	2a282 <snprintk>
		break;
   19374:	e7df      	b.n	19336 <bt_addr_le_str+0x1e>
   19376:	bf00      	nop
   19378:	000344a6 	.word	0x000344a6
   1937c:	000344c8 	.word	0x000344c8
   19380:	200319ef 	.word	0x200319ef
   19384:	000344ad 	.word	0x000344ad
   19388:	000344b4 	.word	0x000344b4
   1938c:	000344be 	.word	0x000344be
   19390:	00037a5d 	.word	0x00037a5d

00019394 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   19394:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   19396:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   19398:	4d09      	ldr	r5, [pc, #36]	; (193c0 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1939a:	4b0a      	ldr	r3, [pc, #40]	; (193c4 <long_wq_init+0x30>)
{
   1939c:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   1939e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   193a0:	9302      	str	r3, [sp, #8]
   193a2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   193a4:	f017 feb4 	bl	31110 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   193a8:	ab02      	add	r3, sp, #8
   193aa:	4628      	mov	r0, r5
   193ac:	9300      	str	r3, [sp, #0]
   193ae:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   193b2:	230a      	movs	r3, #10
   193b4:	4904      	ldr	r1, [pc, #16]	; (193c8 <long_wq_init+0x34>)
   193b6:	f00c fd15 	bl	25de4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   193ba:	4620      	mov	r0, r4
   193bc:	b005      	add	sp, #20
   193be:	bd30      	pop	{r4, r5, pc}
   193c0:	20009d10 	.word	0x20009d10
   193c4:	000366b5 	.word	0x000366b5
   193c8:	20052fa8 	.word	0x20052fa8

000193cc <bt_long_wq_schedule>:
{
   193cc:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   193ce:	4801      	ldr	r0, [pc, #4]	; (193d4 <bt_long_wq_schedule+0x8>)
   193d0:	f00c bd7e 	b.w	25ed0 <k_work_schedule_for_queue>
   193d4:	20009d10 	.word	0x20009d10

000193d8 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   193d8:	7803      	ldrb	r3, [r0, #0]
{
   193da:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   193dc:	2b01      	cmp	r3, #1
   193de:	d013      	beq.n	19408 <uuid_to_uuid128+0x30>
   193e0:	2b02      	cmp	r3, #2
   193e2:	d027      	beq.n	19434 <uuid_to_uuid128+0x5c>
   193e4:	b97b      	cbnz	r3, 19406 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   193e6:	460a      	mov	r2, r1
   193e8:	4b18      	ldr	r3, [pc, #96]	; (1944c <uuid_to_uuid128+0x74>)
   193ea:	f103 0410 	add.w	r4, r3, #16
   193ee:	f853 5b04 	ldr.w	r5, [r3], #4
   193f2:	42a3      	cmp	r3, r4
   193f4:	f842 5b04 	str.w	r5, [r2], #4
   193f8:	d1f9      	bne.n	193ee <uuid_to_uuid128+0x16>
   193fa:	781b      	ldrb	r3, [r3, #0]
   193fc:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   193fe:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   19400:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   19402:	0a1b      	lsrs	r3, r3, #8
   19404:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   19406:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   19408:	460a      	mov	r2, r1
   1940a:	4b10      	ldr	r3, [pc, #64]	; (1944c <uuid_to_uuid128+0x74>)
   1940c:	f103 0410 	add.w	r4, r3, #16
   19410:	f853 5b04 	ldr.w	r5, [r3], #4
   19414:	42a3      	cmp	r3, r4
   19416:	f842 5b04 	str.w	r5, [r2], #4
   1941a:	d1f9      	bne.n	19410 <uuid_to_uuid128+0x38>
   1941c:	781b      	ldrb	r3, [r3, #0]
   1941e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   19420:	6843      	ldr	r3, [r0, #4]
   19422:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   19426:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   19428:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1942a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   1942c:	0a1b      	lsrs	r3, r3, #8
   1942e:	738a      	strb	r2, [r1, #14]
   19430:	740b      	strb	r3, [r1, #16]
}
   19432:	e7e8      	b.n	19406 <uuid_to_uuid128+0x2e>
   19434:	f100 0310 	add.w	r3, r0, #16
   19438:	f850 2b04 	ldr.w	r2, [r0], #4
   1943c:	4298      	cmp	r0, r3
   1943e:	f841 2b04 	str.w	r2, [r1], #4
   19442:	d1f9      	bne.n	19438 <uuid_to_uuid128+0x60>
   19444:	7803      	ldrb	r3, [r0, #0]
   19446:	700b      	strb	r3, [r1, #0]
   19448:	e7dd      	b.n	19406 <uuid_to_uuid128+0x2e>
   1944a:	bf00      	nop
   1944c:	000366be 	.word	0x000366be

00019450 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
   19450:	2801      	cmp	r0, #1
{
   19452:	b538      	push	{r3, r4, r5, lr}
   19454:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   19456:	bf0c      	ite	eq
   19458:	4806      	ldreq	r0, [pc, #24]	; (19474 <bt_buf_get_rx+0x24>)
   1945a:	4807      	ldrne	r0, [pc, #28]	; (19478 <bt_buf_get_rx+0x28>)
   1945c:	f015 ff89 	bl	2f372 <net_buf_alloc_fixed>
   19460:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   19462:	b120      	cbz	r0, 1946e <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
   19464:	2101      	movs	r1, #1
   19466:	300c      	adds	r0, #12
   19468:	f015 ff8a 	bl	2f380 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1946c:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1946e:	4620      	mov	r0, r4
   19470:	bd38      	pop	{r3, r4, r5, pc}
   19472:	bf00      	nop
   19474:	20008f34 	.word	0x20008f34
   19478:	20008eb0 	.word	0x20008eb0

0001947c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1947c:	b510      	push	{r4, lr}
   1947e:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   19480:	490a      	ldr	r1, [pc, #40]	; (194ac <bt_buf_get_cmd_complete+0x30>)
{
   19482:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   19484:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   19488:	b920      	cbnz	r0, 19494 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1948a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1948e:	2001      	movs	r0, #1
   19490:	f7ff bfde 	b.w	19450 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   19494:	f015 ffa7 	bl	2f3e6 <net_buf_ref>
   19498:	2101      	movs	r1, #1
		buf->len = 0U;
   1949a:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   1949c:	4604      	mov	r4, r0
   1949e:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   194a0:	8203      	strh	r3, [r0, #16]
   194a2:	300c      	adds	r0, #12
   194a4:	f015 ff6c 	bl	2f380 <net_buf_simple_reserve>
}
   194a8:	4620      	mov	r0, r4
   194aa:	bd10      	pop	{r4, pc}
   194ac:	20008000 	.word	0x20008000

000194b0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   194b0:	b570      	push	{r4, r5, r6, lr}
   194b2:	4604      	mov	r4, r0
	switch (evt) {
   194b4:	2c0f      	cmp	r4, #15
{
   194b6:	460d      	mov	r5, r1
   194b8:	4610      	mov	r0, r2
   194ba:	4619      	mov	r1, r3
	switch (evt) {
   194bc:	d805      	bhi.n	194ca <bt_buf_get_evt+0x1a>
   194be:	2c0d      	cmp	r4, #13
   194c0:	d90d      	bls.n	194de <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   194c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   194c6:	f7ff bfd9 	b.w	1947c <bt_buf_get_cmd_complete>
	switch (evt) {
   194ca:	2c13      	cmp	r4, #19
   194cc:	d107      	bne.n	194de <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   194ce:	480c      	ldr	r0, [pc, #48]	; (19500 <bt_buf_get_evt+0x50>)
   194d0:	f015 ff4f 	bl	2f372 <net_buf_alloc_fixed>
			if (buf) {
   194d4:	4604      	mov	r4, r0
   194d6:	b938      	cbnz	r0, 194e8 <bt_buf_get_evt+0x38>
{
   194d8:	2400      	movs	r4, #0
}
   194da:	4620      	mov	r0, r4
   194dc:	bd70      	pop	{r4, r5, r6, pc}
   194de:	4602      	mov	r2, r0
   194e0:	460b      	mov	r3, r1
		if (discardable) {
   194e2:	b145      	cbz	r5, 194f6 <bt_buf_get_evt+0x46>
   194e4:	4807      	ldr	r0, [pc, #28]	; (19504 <bt_buf_get_evt+0x54>)
   194e6:	e7f3      	b.n	194d0 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   194e8:	2101      	movs	r1, #1
   194ea:	300c      	adds	r0, #12
   194ec:	f015 ff48 	bl	2f380 <net_buf_simple_reserve>
   194f0:	2301      	movs	r3, #1
   194f2:	7623      	strb	r3, [r4, #24]
}
   194f4:	e7f1      	b.n	194da <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   194f6:	2001      	movs	r0, #1
}
   194f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   194fc:	f7ff bfa8 	b.w	19450 <bt_buf_get_rx>
   19500:	20008fb8 	.word	0x20008fb8
   19504:	20008f08 	.word	0x20008f08

00019508 <hci_disconn_complete_prio>:
{
   19508:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1950a:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1950c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   19510:	781b      	ldrb	r3, [r3, #0]
   19512:	b963      	cbnz	r3, 1952e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   19514:	4620      	mov	r0, r4
   19516:	f002 fd6f 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   1951a:	4605      	mov	r5, r0
   1951c:	b940      	cbnz	r0, 19530 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1951e:	4b08      	ldr	r3, [pc, #32]	; (19540 <hci_disconn_complete_prio+0x38>)
   19520:	881a      	ldrh	r2, [r3, #0]
   19522:	b922      	cbnz	r2, 1952e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   19524:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   19528:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1952c:	8018      	strh	r0, [r3, #0]
}
   1952e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   19530:	2101      	movs	r1, #1
   19532:	f002 fd69 	bl	1c008 <bt_conn_set_state>
	bt_conn_unref(conn);
   19536:	4628      	mov	r0, r5
}
   19538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1953c:	f014 ba9b 	b.w	2da76 <bt_conn_unref>
   19540:	20030f0a 	.word	0x20030f0a

00019544 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   19544:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   19546:	4c08      	ldr	r4, [pc, #32]	; (19568 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   19548:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1954a:	2205      	movs	r2, #5
   1954c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   19550:	f002 ff98 	bl	1c484 <bt_conn_lookup_state_le>
		if (!conn) {
   19554:	b938      	cbnz	r0, 19566 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   19556:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1955a:	2204      	movs	r2, #4
}
   1955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   19560:	4902      	ldr	r1, [pc, #8]	; (1956c <find_pending_connect.part.0+0x28>)
   19562:	f002 bf8f 	b.w	1c484 <bt_conn_lookup_state_le>
}
   19566:	bd10      	pop	{r4, pc}
   19568:	20008000 	.word	0x20008000
   1956c:	00036683 	.word	0x00036683

00019570 <hci_data_buf_overflow>:
{
   19570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   19572:	68c3      	ldr	r3, [r0, #12]
   19574:	2202      	movs	r2, #2
   19576:	781b      	ldrb	r3, [r3, #0]
   19578:	4906      	ldr	r1, [pc, #24]	; (19594 <hci_data_buf_overflow+0x24>)
   1957a:	9303      	str	r3, [sp, #12]
   1957c:	4b06      	ldr	r3, [pc, #24]	; (19598 <hci_data_buf_overflow+0x28>)
   1957e:	9302      	str	r3, [sp, #8]
   19580:	2300      	movs	r3, #0
   19582:	4618      	mov	r0, r3
   19584:	e9cd 3300 	strd	r3, r3, [sp]
   19588:	f013 fef5 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   1958c:	b005      	add	sp, #20
   1958e:	f85d fb04 	ldr.w	pc, [sp], #4
   19592:	bf00      	nop
   19594:	00033040 	.word	0x00033040
   19598:	000366cf 	.word	0x000366cf

0001959c <rx_queue_put>:
{
   1959c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1959e:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   195a0:	480b      	ldr	r0, [pc, #44]	; (195d0 <rx_queue_put+0x34>)
   195a2:	f015 fef1 	bl	2f388 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   195a6:	490b      	ldr	r1, [pc, #44]	; (195d4 <rx_queue_put+0x38>)
   195a8:	480b      	ldr	r0, [pc, #44]	; (195d8 <rx_queue_put+0x3c>)
   195aa:	f017 fda0 	bl	310ee <k_work_submit_to_queue>
	if (err < 0) {
   195ae:	2800      	cmp	r0, #0
   195b0:	da0a      	bge.n	195c8 <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   195b2:	4b0a      	ldr	r3, [pc, #40]	; (195dc <rx_queue_put+0x40>)
   195b4:	9003      	str	r0, [sp, #12]
   195b6:	9302      	str	r3, [sp, #8]
   195b8:	2300      	movs	r3, #0
   195ba:	2201      	movs	r2, #1
   195bc:	4618      	mov	r0, r3
   195be:	e9cd 3300 	strd	r3, r3, [sp]
   195c2:	4907      	ldr	r1, [pc, #28]	; (195e0 <rx_queue_put+0x44>)
   195c4:	f013 fed7 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   195c8:	b005      	add	sp, #20
   195ca:	f85d fb04 	ldr.w	pc, [sp], #4
   195ce:	bf00      	nop
   195d0:	2000813c 	.word	0x2000813c
   195d4:	2000855c 	.word	0x2000855c
   195d8:	20009e80 	.word	0x20009e80
   195dc:	000366f7 	.word	0x000366f7
   195e0:	00033040 	.word	0x00033040

000195e4 <hci_hardware_error>:
{
   195e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   195e6:	2101      	movs	r1, #1
   195e8:	300c      	adds	r0, #12
   195ea:	f015 ff52 	bl	2f492 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   195ee:	7803      	ldrb	r3, [r0, #0]
   195f0:	2201      	movs	r2, #1
   195f2:	9303      	str	r3, [sp, #12]
   195f4:	4b05      	ldr	r3, [pc, #20]	; (1960c <hci_hardware_error+0x28>)
   195f6:	4906      	ldr	r1, [pc, #24]	; (19610 <hci_hardware_error+0x2c>)
   195f8:	9302      	str	r3, [sp, #8]
   195fa:	2300      	movs	r3, #0
   195fc:	4618      	mov	r0, r3
   195fe:	e9cd 3300 	strd	r3, r3, [sp]
   19602:	f013 feb8 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19606:	b005      	add	sp, #20
   19608:	f85d fb04 	ldr.w	pc, [sp], #4
   1960c:	00036714 	.word	0x00036714
   19610:	00033040 	.word	0x00033040

00019614 <le_data_len_change>:
{
   19614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19616:	68c3      	ldr	r3, [r0, #12]
   19618:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1961a:	4620      	mov	r0, r4
   1961c:	f002 fcec 	bl	1bff8 <bt_conn_lookup_handle>
   19620:	4603      	mov	r3, r0
	if (!conn) {
   19622:	b950      	cbnz	r0, 1963a <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19624:	4a07      	ldr	r2, [pc, #28]	; (19644 <le_data_len_change+0x30>)
   19626:	4908      	ldr	r1, [pc, #32]	; (19648 <le_data_len_change+0x34>)
   19628:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1962c:	9403      	str	r4, [sp, #12]
   1962e:	2201      	movs	r2, #1
   19630:	9000      	str	r0, [sp, #0]
   19632:	f013 fea0 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19636:	b004      	add	sp, #16
   19638:	bd10      	pop	{r4, pc}
   1963a:	b004      	add	sp, #16
   1963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   19640:	f014 ba19 	b.w	2da76 <bt_conn_unref>
   19644:	00036736 	.word	0x00036736
   19648:	00033040 	.word	0x00033040

0001964c <le_phy_update_complete>:
{
   1964c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1964e:	68c3      	ldr	r3, [r0, #12]
   19650:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   19654:	4620      	mov	r0, r4
   19656:	f002 fccf 	bl	1bff8 <bt_conn_lookup_handle>
   1965a:	4603      	mov	r3, r0
	if (!conn) {
   1965c:	b950      	cbnz	r0, 19674 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1965e:	4a08      	ldr	r2, [pc, #32]	; (19680 <le_phy_update_complete+0x34>)
   19660:	4908      	ldr	r1, [pc, #32]	; (19684 <le_phy_update_complete+0x38>)
   19662:	e9cd 0201 	strd	r0, r2, [sp, #4]
   19666:	9403      	str	r4, [sp, #12]
   19668:	2201      	movs	r2, #1
   1966a:	9000      	str	r0, [sp, #0]
   1966c:	f013 fe83 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19670:	b004      	add	sp, #16
   19672:	bd10      	pop	{r4, pc}
   19674:	b004      	add	sp, #16
   19676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1967a:	f014 b9fc 	b.w	2da76 <bt_conn_unref>
   1967e:	bf00      	nop
   19680:	00036736 	.word	0x00036736
   19684:	00033040 	.word	0x00033040

00019688 <hci_disconn_complete>:
{
   19688:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1968a:	68c5      	ldr	r5, [r0, #12]
{
   1968c:	b085      	sub	sp, #20
	if (evt->status) {
   1968e:	782e      	ldrb	r6, [r5, #0]
   19690:	b986      	cbnz	r6, 196b4 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19692:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19696:	4638      	mov	r0, r7
   19698:	f002 fcae 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   1969c:	4604      	mov	r4, r0
   1969e:	b958      	cbnz	r0, 196b8 <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   196a0:	4b0b      	ldr	r3, [pc, #44]	; (196d0 <hci_disconn_complete+0x48>)
   196a2:	2201      	movs	r2, #1
   196a4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   196a8:	490a      	ldr	r1, [pc, #40]	; (196d4 <hci_disconn_complete+0x4c>)
   196aa:	4603      	mov	r3, r0
   196ac:	9703      	str	r7, [sp, #12]
   196ae:	9000      	str	r0, [sp, #0]
   196b0:	f013 fe61 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   196b4:	b005      	add	sp, #20
   196b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   196b8:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   196ba:	4631      	mov	r1, r6
	conn->err = evt->reason;
   196bc:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   196be:	f002 fca3 	bl	1c008 <bt_conn_set_state>
		bt_conn_unref(conn);
   196c2:	4620      	mov	r0, r4
}
   196c4:	b005      	add	sp, #20
   196c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   196ca:	f014 b9d4 	b.w	2da76 <bt_conn_unref>
   196ce:	bf00      	nop
   196d0:	0003675a 	.word	0x0003675a
   196d4:	00033040 	.word	0x00033040

000196d8 <handle_event>:
{
   196d8:	b530      	push	{r4, r5, lr}
   196da:	4604      	mov	r4, r0
   196dc:	4608      	mov	r0, r1
   196de:	b087      	sub	sp, #28
   196e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   196e4:	4293      	cmp	r3, r2
   196e6:	d112      	bne.n	1970e <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   196e8:	8a05      	ldrh	r5, [r0, #16]
   196ea:	68c0      	ldr	r0, [r0, #12]
   196ec:	4629      	mov	r1, r5
   196ee:	f7ff fdf1 	bl	192d4 <bt_hex>
   196f2:	4b16      	ldr	r3, [pc, #88]	; (1974c <handle_event+0x74>)
   196f4:	e9cd 5004 	strd	r5, r0, [sp, #16]
   196f8:	9302      	str	r3, [sp, #8]
   196fa:	2300      	movs	r3, #0
   196fc:	2202      	movs	r2, #2
   196fe:	4618      	mov	r0, r3
   19700:	e9cd 3300 	strd	r3, r3, [sp]
   19704:	4912      	ldr	r1, [pc, #72]	; (19750 <handle_event+0x78>)
   19706:	9403      	str	r4, [sp, #12]
   19708:	f013 fe35 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   1970c:	e014      	b.n	19738 <handle_event+0x60>
		if (handler->event != event) {
   1970e:	4611      	mov	r1, r2
   19710:	f811 5b08 	ldrb.w	r5, [r1], #8
   19714:	42a5      	cmp	r5, r4
   19716:	d116      	bne.n	19746 <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   19718:	8a03      	ldrh	r3, [r0, #16]
   1971a:	7851      	ldrb	r1, [r2, #1]
   1971c:	4299      	cmp	r1, r3
   1971e:	d90d      	bls.n	1973c <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   19720:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19724:	4b0b      	ldr	r3, [pc, #44]	; (19754 <handle_event+0x7c>)
   19726:	2201      	movs	r2, #1
   19728:	9302      	str	r3, [sp, #8]
   1972a:	2300      	movs	r3, #0
   1972c:	4908      	ldr	r1, [pc, #32]	; (19750 <handle_event+0x78>)
   1972e:	4618      	mov	r0, r3
   19730:	e9cd 3300 	strd	r3, r3, [sp]
   19734:	f013 fe1f 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19738:	b007      	add	sp, #28
   1973a:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   1973c:	6853      	ldr	r3, [r2, #4]
}
   1973e:	b007      	add	sp, #28
   19740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   19744:	4718      	bx	r3
   19746:	460a      	mov	r2, r1
   19748:	e7cc      	b.n	196e4 <handle_event+0xc>
   1974a:	bf00      	nop
   1974c:	000367a2 	.word	0x000367a2
   19750:	00033040 	.word	0x00033040
   19754:	00036780 	.word	0x00036780

00019758 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   19758:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1975a:	4853      	ldr	r0, [pc, #332]	; (198a8 <rx_work_handler+0x150>)
{
   1975c:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1975e:	f015 fe29 	bl	2f3b4 <net_buf_slist_get>
	if (!buf) {
   19762:	4604      	mov	r4, r0
   19764:	2800      	cmp	r0, #0
   19766:	d064      	beq.n	19832 <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   19768:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1976a:	2b01      	cmp	r3, #1
   1976c:	d063      	beq.n	19836 <rx_work_handler+0xde>
   1976e:	2b03      	cmp	r3, #3
   19770:	f040 8090 	bne.w	19894 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19774:	8a03      	ldrh	r3, [r0, #16]
   19776:	2b03      	cmp	r3, #3
   19778:	d80c      	bhi.n	19794 <rx_work_handler+0x3c>
   1977a:	f240 13ed 	movw	r3, #493	; 0x1ed
   1977e:	4a4b      	ldr	r2, [pc, #300]	; (198ac <rx_work_handler+0x154>)
   19780:	494b      	ldr	r1, [pc, #300]	; (198b0 <rx_work_handler+0x158>)
   19782:	484c      	ldr	r0, [pc, #304]	; (198b4 <rx_work_handler+0x15c>)
   19784:	f011 f858 	bl	2a838 <assert_print>
   19788:	4040      	eors	r0, r0
   1978a:	f380 8811 	msr	BASEPRI, r0
   1978e:	f04f 0003 	mov.w	r0, #3
   19792:	df02      	svc	2
   19794:	2104      	movs	r1, #4
   19796:	f104 000c 	add.w	r0, r4, #12
   1979a:	f015 fe7a 	bl	2f492 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1979e:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   197a0:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   197a2:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   197a4:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   197a6:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   197a8:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   197ac:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   197ae:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   197b0:	d00f      	beq.n	197d2 <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   197b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   197b6:	4b40      	ldr	r3, [pc, #256]	; (198b8 <rx_work_handler+0x160>)
   197b8:	2201      	movs	r2, #1
   197ba:	9302      	str	r3, [sp, #8]
   197bc:	2300      	movs	r3, #0
   197be:	493f      	ldr	r1, [pc, #252]	; (198bc <rx_work_handler+0x164>)
   197c0:	4618      	mov	r0, r3
   197c2:	e9cd 3300 	strd	r3, r3, [sp]
   197c6:	f013 fdd6 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   197ca:	4620      	mov	r0, r4
   197cc:	f006 fee6 	bl	2059c <net_buf_unref>
		break;
   197d0:	e01a      	b.n	19808 <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   197d2:	f002 fc11 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   197d6:	4605      	mov	r5, r0
   197d8:	b958      	cbnz	r0, 197f2 <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   197da:	8b63      	ldrh	r3, [r4, #26]
   197dc:	2201      	movs	r2, #1
   197de:	9303      	str	r3, [sp, #12]
   197e0:	4b37      	ldr	r3, [pc, #220]	; (198c0 <rx_work_handler+0x168>)
   197e2:	4936      	ldr	r1, [pc, #216]	; (198bc <rx_work_handler+0x164>)
   197e4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   197e8:	4603      	mov	r3, r0
   197ea:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   197ec:	f013 fdc3 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
   197f0:	e7eb      	b.n	197ca <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   197f2:	f002 fced 	bl	1c1d0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   197f6:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   197f8:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   197fa:	0b32      	lsrs	r2, r6, #12
   197fc:	4628      	mov	r0, r5
   197fe:	f002 fac7 	bl	1bd90 <bt_conn_recv>
	bt_conn_unref(conn);
   19802:	4628      	mov	r0, r5
   19804:	f014 f937 	bl	2da76 <bt_conn_unref>
	return list->head;
   19808:	4b2e      	ldr	r3, [pc, #184]	; (198c4 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1980a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1980e:	b183      	cbz	r3, 19832 <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   19810:	492d      	ldr	r1, [pc, #180]	; (198c8 <rx_work_handler+0x170>)
   19812:	482e      	ldr	r0, [pc, #184]	; (198cc <rx_work_handler+0x174>)
   19814:	f017 fc6b 	bl	310ee <k_work_submit_to_queue>
#endif
		if (err < 0) {
   19818:	2800      	cmp	r0, #0
   1981a:	da0a      	bge.n	19832 <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   1981c:	4b2c      	ldr	r3, [pc, #176]	; (198d0 <rx_work_handler+0x178>)
   1981e:	9003      	str	r0, [sp, #12]
   19820:	9302      	str	r3, [sp, #8]
   19822:	2300      	movs	r3, #0
   19824:	2201      	movs	r2, #1
   19826:	4618      	mov	r0, r3
   19828:	e9cd 3300 	strd	r3, r3, [sp]
   1982c:	4923      	ldr	r1, [pc, #140]	; (198bc <rx_work_handler+0x164>)
   1982e:	f013 fda2 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   19832:	b006      	add	sp, #24
   19834:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19836:	8a03      	ldrh	r3, [r0, #16]
   19838:	2b01      	cmp	r3, #1
   1983a:	d80c      	bhi.n	19856 <rx_work_handler+0xfe>
   1983c:	f640 136d 	movw	r3, #2413	; 0x96d
   19840:	4a1a      	ldr	r2, [pc, #104]	; (198ac <rx_work_handler+0x154>)
   19842:	491b      	ldr	r1, [pc, #108]	; (198b0 <rx_work_handler+0x158>)
   19844:	481b      	ldr	r0, [pc, #108]	; (198b4 <rx_work_handler+0x15c>)
   19846:	f010 fff7 	bl	2a838 <assert_print>
   1984a:	4040      	eors	r0, r0
   1984c:	f380 8811 	msr	BASEPRI, r0
   19850:	f04f 0003 	mov.w	r0, #3
   19854:	df02      	svc	2
   19856:	2102      	movs	r1, #2
   19858:	f104 000c 	add.w	r0, r4, #12
   1985c:	f015 fe19 	bl	2f492 <net_buf_simple_pull_mem>
   19860:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19862:	7800      	ldrb	r0, [r0, #0]
   19864:	f013 fd45 	bl	2d2f2 <bt_hci_evt_get_flags>
   19868:	0783      	lsls	r3, r0, #30
   1986a:	d40c      	bmi.n	19886 <rx_work_handler+0x12e>
   1986c:	f640 1371 	movw	r3, #2417	; 0x971
   19870:	4a0e      	ldr	r2, [pc, #56]	; (198ac <rx_work_handler+0x154>)
   19872:	4918      	ldr	r1, [pc, #96]	; (198d4 <rx_work_handler+0x17c>)
   19874:	480f      	ldr	r0, [pc, #60]	; (198b4 <rx_work_handler+0x15c>)
   19876:	f010 ffdf 	bl	2a838 <assert_print>
   1987a:	4040      	eors	r0, r0
   1987c:	f380 8811 	msr	BASEPRI, r0
   19880:	f04f 0003 	mov.w	r0, #3
   19884:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   19886:	2306      	movs	r3, #6
   19888:	4621      	mov	r1, r4
   1988a:	4a13      	ldr	r2, [pc, #76]	; (198d8 <rx_work_handler+0x180>)
   1988c:	7828      	ldrb	r0, [r5, #0]
   1988e:	f7ff ff23 	bl	196d8 <handle_event>
	net_buf_unref(buf);
   19892:	e79a      	b.n	197ca <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   19894:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   19896:	4b11      	ldr	r3, [pc, #68]	; (198dc <rx_work_handler+0x184>)
   19898:	2201      	movs	r2, #1
   1989a:	9302      	str	r3, [sp, #8]
   1989c:	2300      	movs	r3, #0
   1989e:	4907      	ldr	r1, [pc, #28]	; (198bc <rx_work_handler+0x164>)
   198a0:	4618      	mov	r0, r3
   198a2:	e9cd 3300 	strd	r3, r3, [sp]
   198a6:	e7a1      	b.n	197ec <rx_work_handler+0x94>
   198a8:	2000813c 	.word	0x2000813c
   198ac:	000367c4 	.word	0x000367c4
   198b0:	000367f8 	.word	0x000367f8
   198b4:	00036811 	.word	0x00036811
   198b8:	0003682e 	.word	0x0003682e
   198bc:	00033040 	.word	0x00033040
   198c0:	00036852 	.word	0x00036852
   198c4:	20008000 	.word	0x20008000
   198c8:	2000855c 	.word	0x2000855c
   198cc:	20009e80 	.word	0x20009e80
   198d0:	000366f7 	.word	0x000366f7
   198d4:	00036874 	.word	0x00036874
   198d8:	00033c04 	.word	0x00033c04
   198dc:	000368a2 	.word	0x000368a2

000198e0 <hci_le_meta_event>:
{
   198e0:	b510      	push	{r4, lr}
   198e2:	2101      	movs	r1, #1
   198e4:	4604      	mov	r4, r0
   198e6:	300c      	adds	r0, #12
   198e8:	f015 fdd3 	bl	2f492 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   198ec:	4621      	mov	r1, r4
}
   198ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   198f2:	230a      	movs	r3, #10
   198f4:	4a01      	ldr	r2, [pc, #4]	; (198fc <hci_le_meta_event+0x1c>)
   198f6:	7800      	ldrb	r0, [r0, #0]
   198f8:	f7ff beee 	b.w	196d8 <handle_event>
   198fc:	00033c34 	.word	0x00033c34

00019900 <le_remote_feat_complete>:
{
   19900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19902:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19904:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19908:	4630      	mov	r0, r6
   1990a:	f002 fb75 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   1990e:	4604      	mov	r4, r0
   19910:	b958      	cbnz	r0, 1992a <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19912:	4b10      	ldr	r3, [pc, #64]	; (19954 <le_remote_feat_complete+0x54>)
   19914:	2201      	movs	r2, #1
   19916:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1991a:	490f      	ldr	r1, [pc, #60]	; (19958 <le_remote_feat_complete+0x58>)
   1991c:	4603      	mov	r3, r0
   1991e:	9603      	str	r6, [sp, #12]
   19920:	9000      	str	r0, [sp, #0]
   19922:	f013 fd28 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19926:	b004      	add	sp, #16
   19928:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   1992a:	782b      	ldrb	r3, [r5, #0]
   1992c:	b93b      	cbnz	r3, 1993e <le_remote_feat_complete+0x3e>
   1992e:	f8d5 3003 	ldr.w	r3, [r5, #3]
   19932:	f8c0 30ad 	str.w	r3, [r0, #173]	; 0xad
   19936:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1993a:	f8c0 30b1 	str.w	r3, [r0, #177]	; 0xb1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1993e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   19942:	1d20      	adds	r0, r4, #4
   19944:	f013 fd00 	bl	2d348 <atomic_or>
	bt_conn_unref(conn);
   19948:	4620      	mov	r0, r4
}
   1994a:	b004      	add	sp, #16
   1994c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19950:	f014 b891 	b.w	2da76 <bt_conn_unref>
   19954:	00036736 	.word	0x00036736
   19958:	00033040 	.word	0x00033040

0001995c <hci_cmd_done>:
{
   1995c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19960:	4606      	mov	r6, r0
   19962:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   19964:	7a90      	ldrb	r0, [r2, #10]
{
   19966:	460f      	mov	r7, r1
   19968:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1996a:	f006 fd55 	bl	20418 <net_buf_pool_get>
   1996e:	4d3d      	ldr	r5, [pc, #244]	; (19a64 <hci_cmd_done+0x108>)
   19970:	4285      	cmp	r5, r0
   19972:	d014      	beq.n	1999e <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   19974:	7aa4      	ldrb	r4, [r4, #10]
   19976:	4620      	mov	r0, r4
   19978:	f006 fd4e 	bl	20418 <net_buf_pool_get>
   1997c:	4b3a      	ldr	r3, [pc, #232]	; (19a68 <hci_cmd_done+0x10c>)
   1997e:	e9cd 0505 	strd	r0, r5, [sp, #20]
   19982:	9302      	str	r3, [sp, #8]
   19984:	2300      	movs	r3, #0
   19986:	2202      	movs	r2, #2
   19988:	4618      	mov	r0, r3
   1998a:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1998e:	e9cd 3300 	strd	r3, r3, [sp]
   19992:	4936      	ldr	r1, [pc, #216]	; (19a6c <hci_cmd_done+0x110>)
   19994:	f013 fcef 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19998:	b008      	add	sp, #32
   1999a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   1999e:	4620      	mov	r0, r4
   199a0:	f006 fd42 	bl	20428 <net_buf_id>
   199a4:	f04f 080c 	mov.w	r8, #12
   199a8:	4d31      	ldr	r5, [pc, #196]	; (19a70 <hci_cmd_done+0x114>)
   199aa:	fb08 5000 	mla	r0, r8, r0, r5
   199ae:	8843      	ldrh	r3, [r0, #2]
   199b0:	42b3      	cmp	r3, r6
   199b2:	d012      	beq.n	199da <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   199b4:	4620      	mov	r0, r4
   199b6:	f006 fd37 	bl	20428 <net_buf_id>
   199ba:	fb08 5000 	mla	r0, r8, r0, r5
   199be:	8843      	ldrh	r3, [r0, #2]
   199c0:	2202      	movs	r2, #2
   199c2:	e9cd 6303 	strd	r6, r3, [sp, #12]
   199c6:	4b2b      	ldr	r3, [pc, #172]	; (19a74 <hci_cmd_done+0x118>)
   199c8:	4928      	ldr	r1, [pc, #160]	; (19a6c <hci_cmd_done+0x110>)
   199ca:	9302      	str	r3, [sp, #8]
   199cc:	2300      	movs	r3, #0
   199ce:	4618      	mov	r0, r3
   199d0:	e9cd 3300 	strd	r3, r3, [sp]
   199d4:	f013 fccf 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		return;
   199d8:	e7de      	b.n	19998 <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   199da:	4e27      	ldr	r6, [pc, #156]	; (19a78 <hci_cmd_done+0x11c>)
   199dc:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   199e0:	b120      	cbz	r0, 199ec <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   199e2:	f006 fddb 	bl	2059c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   199e6:	2300      	movs	r3, #0
   199e8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   199ec:	4620      	mov	r0, r4
   199ee:	f006 fd1b 	bl	20428 <net_buf_id>
   199f2:	260c      	movs	r6, #12
   199f4:	fb06 5000 	mla	r0, r6, r0, r5
   199f8:	6843      	ldr	r3, [r0, #4]
   199fa:	b19b      	cbz	r3, 19a24 <hci_cmd_done+0xc8>
   199fc:	b997      	cbnz	r7, 19a24 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   199fe:	4620      	mov	r0, r4
   19a00:	f006 fd12 	bl	20428 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   19a04:	2101      	movs	r1, #1
   19a06:	fb06 5000 	mla	r0, r6, r0, r5
   19a0a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   19a0c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   19a10:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   19a12:	f003 061f 	and.w	r6, r3, #31
   19a16:	40b1      	lsls	r1, r6
	if (val) {
   19a18:	095b      	lsrs	r3, r3, #5
   19a1a:	b1e2      	cbz	r2, 19a56 <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19a1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19a20:	f013 fc92 	bl	2d348 <atomic_or>
	if (cmd(buf)->sync) {
   19a24:	4620      	mov	r0, r4
   19a26:	f006 fcff 	bl	20428 <net_buf_id>
   19a2a:	260c      	movs	r6, #12
   19a2c:	fb06 5000 	mla	r0, r6, r0, r5
   19a30:	6883      	ldr	r3, [r0, #8]
   19a32:	2b00      	cmp	r3, #0
   19a34:	d0b0      	beq.n	19998 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   19a36:	4620      	mov	r0, r4
   19a38:	f006 fcf6 	bl	20428 <net_buf_id>
   19a3c:	4370      	muls	r0, r6
   19a3e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   19a40:	4620      	mov	r0, r4
   19a42:	f006 fcf1 	bl	20428 <net_buf_id>
   19a46:	fb06 5500 	mla	r5, r6, r0, r5
   19a4a:	68a8      	ldr	r0, [r5, #8]
}
   19a4c:	b008      	add	sp, #32
   19a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   19a52:	f00c b845 	b.w	25ae0 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19a56:	43c9      	mvns	r1, r1
   19a58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19a5c:	f013 fc9a 	bl	2d394 <atomic_and.isra.0>
   19a60:	e7e0      	b.n	19a24 <hci_cmd_done+0xc8>
   19a62:	bf00      	nop
   19a64:	20008f8c 	.word	0x20008f8c
   19a68:	000368b6 	.word	0x000368b6
   19a6c:	00033040 	.word	0x00033040
   19a70:	20030930 	.word	0x20030930
   19a74:	000368eb 	.word	0x000368eb
   19a78:	20008000 	.word	0x20008000

00019a7c <hci_cmd_status>:
{
   19a7c:	b538      	push	{r3, r4, r5, lr}
   19a7e:	2104      	movs	r1, #4
   19a80:	4604      	mov	r4, r0
   19a82:	300c      	adds	r0, #12
   19a84:	f015 fd05 	bl	2f492 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   19a88:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   19a8a:	7801      	ldrb	r1, [r0, #0]
   19a8c:	4622      	mov	r2, r4
   19a8e:	8840      	ldrh	r0, [r0, #2]
   19a90:	f7ff ff64 	bl	1995c <hci_cmd_done>
	if (ncmd) {
   19a94:	b125      	cbz	r5, 19aa0 <hci_cmd_status+0x24>
}
   19a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19a9a:	4802      	ldr	r0, [pc, #8]	; (19aa4 <hci_cmd_status+0x28>)
   19a9c:	f00c b820 	b.w	25ae0 <z_impl_k_sem_give>
   19aa0:	bd38      	pop	{r3, r4, r5, pc}
   19aa2:	bf00      	nop
   19aa4:	20008120 	.word	0x20008120

00019aa8 <hci_cmd_complete>:
{
   19aa8:	b538      	push	{r3, r4, r5, lr}
   19aaa:	2103      	movs	r1, #3
   19aac:	4604      	mov	r4, r0
   19aae:	300c      	adds	r0, #12
   19ab0:	f015 fcef 	bl	2f492 <net_buf_simple_pull_mem>
	status = buf->data[0];
   19ab4:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   19ab6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   19ab8:	4622      	mov	r2, r4
   19aba:	7819      	ldrb	r1, [r3, #0]
   19abc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   19ac0:	f7ff ff4c 	bl	1995c <hci_cmd_done>
	if (ncmd) {
   19ac4:	b125      	cbz	r5, 19ad0 <hci_cmd_complete+0x28>
}
   19ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19aca:	4802      	ldr	r0, [pc, #8]	; (19ad4 <hci_cmd_complete+0x2c>)
   19acc:	f00c b808 	b.w	25ae0 <z_impl_k_sem_give>
   19ad0:	bd38      	pop	{r3, r4, r5, pc}
   19ad2:	bf00      	nop
   19ad4:	20008120 	.word	0x20008120

00019ad8 <hci_num_completed_packets>:
{
   19ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   19adc:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   19ade:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   19ae0:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   19ae2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 19bcc <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   19ae6:	783b      	ldrb	r3, [r7, #0]
   19ae8:	429d      	cmp	r5, r3
   19aea:	db02      	blt.n	19af2 <hci_num_completed_packets+0x1a>
}
   19aec:	b004      	add	sp, #16
   19aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   19af2:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   19af6:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   19afa:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   19afe:	4650      	mov	r0, sl
   19b00:	f002 fa7a 	bl	1bff8 <bt_conn_lookup_handle>
		if (!conn) {
   19b04:	4604      	mov	r4, r0
   19b06:	b1d8      	cbz	r0, 19b40 <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   19b08:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   19b0c:	2e00      	cmp	r6, #0
   19b0e:	d032      	beq.n	19b76 <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   19b10:	f04f 0320 	mov.w	r3, #32
   19b14:	f3ef 8211 	mrs	r2, BASEPRI
   19b18:	f383 8812 	msr	BASEPRI_MAX, r3
   19b1c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   19b20:	69e3      	ldr	r3, [r4, #28]
   19b22:	b1d3      	cbz	r3, 19b5a <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   19b24:	3b01      	subs	r3, #1
   19b26:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   19b28:	f382 8811 	msr	BASEPRI, r2
   19b2c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   19b30:	4620      	mov	r0, r4
   19b32:	f002 f8fb 	bl	1bd2c <bt_conn_get_pkts>
   19b36:	3e01      	subs	r6, #1
   19b38:	f00b ffd2 	bl	25ae0 <z_impl_k_sem_give>
   19b3c:	b2b6      	uxth	r6, r6
   19b3e:	e7e5      	b.n	19b0c <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   19b40:	4b23      	ldr	r3, [pc, #140]	; (19bd0 <hci_num_completed_packets+0xf8>)
   19b42:	2201      	movs	r2, #1
   19b44:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19b48:	4922      	ldr	r1, [pc, #136]	; (19bd4 <hci_num_completed_packets+0xfc>)
   19b4a:	4603      	mov	r3, r0
   19b4c:	f8cd a00c 	str.w	sl, [sp, #12]
   19b50:	9000      	str	r0, [sp, #0]
   19b52:	f013 fc10 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   19b56:	3501      	adds	r5, #1
   19b58:	e7c5      	b.n	19ae6 <hci_num_completed_packets+0xe>
   19b5a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   19b5c:	b97b      	cbnz	r3, 19b7e <hci_num_completed_packets+0xa6>
   19b5e:	f382 8811 	msr	BASEPRI, r2
   19b62:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   19b66:	2201      	movs	r2, #1
   19b68:	4618      	mov	r0, r3
   19b6a:	e9cd 3901 	strd	r3, r9, [sp, #4]
   19b6e:	4919      	ldr	r1, [pc, #100]	; (19bd4 <hci_num_completed_packets+0xfc>)
   19b70:	9300      	str	r3, [sp, #0]
   19b72:	f013 fc00 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   19b76:	4620      	mov	r0, r4
   19b78:	f013 ff7d 	bl	2da76 <bt_conn_unref>
   19b7c:	e7eb      	b.n	19b56 <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19b7e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   19b80:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19b82:	4283      	cmp	r3, r0
	list->head = node;
   19b84:	6161      	str	r1, [r4, #20]
	list->tail = node;
   19b86:	bf08      	it	eq
   19b88:	61a1      	streq	r1, [r4, #24]
   19b8a:	f382 8811 	msr	BASEPRI, r2
   19b8e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19b92:	f04f 0220 	mov.w	r2, #32
   19b96:	f3ef 8111 	mrs	r1, BASEPRI
   19b9a:	f382 8812 	msr	BASEPRI_MAX, r2
   19b9e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   19ba2:	68da      	ldr	r2, [r3, #12]
   19ba4:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   19ba6:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   19baa:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   19bae:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   19bb0:	b94a      	cbnz	r2, 19bc6 <hci_num_completed_packets+0xee>
	list->head = node;
   19bb2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   19bb6:	f381 8811 	msr	BASEPRI, r1
   19bba:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   19bbe:	4650      	mov	r0, sl
   19bc0:	f00c f90a 	bl	25dd8 <k_work_submit>
   19bc4:	e7b4      	b.n	19b30 <hci_num_completed_packets+0x58>
	parent->next = child;
   19bc6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19bc8:	6263      	str	r3, [r4, #36]	; 0x24
}
   19bca:	e7f4      	b.n	19bb6 <hci_num_completed_packets+0xde>
   19bcc:	0003693a 	.word	0x0003693a
   19bd0:	0003691e 	.word	0x0003691e
   19bd4:	00033040 	.word	0x00033040

00019bd8 <le_conn_update_complete>:
{
   19bd8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   19bda:	68c5      	ldr	r5, [r0, #12]
{
   19bdc:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   19bde:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19be2:	4630      	mov	r0, r6
   19be4:	f002 fa08 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   19be8:	4604      	mov	r4, r0
   19bea:	b958      	cbnz	r0, 19c04 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19bec:	4b2b      	ldr	r3, [pc, #172]	; (19c9c <le_conn_update_complete+0xc4>)
   19bee:	2201      	movs	r2, #1
   19bf0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19bf4:	492a      	ldr	r1, [pc, #168]	; (19ca0 <le_conn_update_complete+0xc8>)
   19bf6:	4603      	mov	r3, r0
   19bf8:	9603      	str	r6, [sp, #12]
   19bfa:	9000      	str	r0, [sp, #0]
   19bfc:	f013 fbbb 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19c00:	b006      	add	sp, #24
   19c02:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19c04:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   19c06:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19c08:	2b1a      	cmp	r3, #26
   19c0a:	d119      	bne.n	19c40 <le_conn_update_complete+0x68>
   19c0c:	78c3      	ldrb	r3, [r0, #3]
   19c0e:	2b01      	cmp	r3, #1
   19c10:	d12a      	bne.n	19c68 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
   19c16:	4630      	mov	r0, r6
   19c18:	f013 fb96 	bl	2d348 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   19c1c:	0542      	lsls	r2, r0, #21
   19c1e:	d40f      	bmi.n	19c40 <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   19c20:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
   19c24:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   19c26:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   19c28:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   19c2c:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   19c2e:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   19c30:	f002 ff2a 	bl	1ca88 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   19c34:	4620      	mov	r0, r4
}
   19c36:	b006      	add	sp, #24
   19c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19c3c:	f013 bf1b 	b.w	2da76 <bt_conn_unref>
		if (!evt->status) {
   19c40:	782b      	ldrb	r3, [r5, #0]
   19c42:	b98b      	cbnz	r3, 19c68 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   19c44:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   19c48:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   19c4c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   19c50:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19c54:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   19c58:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19c5c:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19c60:	4630      	mov	r0, r6
   19c62:	f013 fb97 	bl	2d394 <atomic_and.isra.0>
}
   19c66:	e014      	b.n	19c92 <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19c68:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   19c6c:	05db      	lsls	r3, r3, #23
   19c6e:	d5f5      	bpl.n	19c5c <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   19c70:	782b      	ldrb	r3, [r5, #0]
   19c72:	2b20      	cmp	r3, #32
   19c74:	d1f2      	bne.n	19c5c <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   19c76:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   19c7a:	2b00      	cmp	r3, #0
   19c7c:	d0ee      	beq.n	19c5c <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   19c7e:	3b01      	subs	r3, #1
   19c80:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   19c84:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19c88:	2300      	movs	r3, #0
   19c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19c8e:	f00c f949 	bl	25f24 <k_work_schedule>
		notify_le_param_updated(conn);
   19c92:	4620      	mov	r0, r4
   19c94:	f002 faca 	bl	1c22c <notify_le_param_updated>
   19c98:	e7cc      	b.n	19c34 <le_conn_update_complete+0x5c>
   19c9a:	bf00      	nop
   19c9c:	00036736 	.word	0x00036736
   19ca0:	00033040 	.word	0x00033040

00019ca4 <bt_hci_cmd_state_set_init>:
{
   19ca4:	b510      	push	{r4, lr}
	state->bit = bit;
   19ca6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   19caa:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   19cae:	460c      	mov	r4, r1
	state->val = val;
   19cb0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   19cb2:	f006 fbb9 	bl	20428 <net_buf_id>
   19cb6:	220c      	movs	r2, #12
   19cb8:	4b02      	ldr	r3, [pc, #8]	; (19cc4 <bt_hci_cmd_state_set_init+0x20>)
   19cba:	fb02 3300 	mla	r3, r2, r0, r3
   19cbe:	605c      	str	r4, [r3, #4]
}
   19cc0:	bd10      	pop	{r4, pc}
   19cc2:	bf00      	nop
   19cc4:	20030930 	.word	0x20030930

00019cc8 <bt_hci_cmd_create>:
{
   19cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   19ccc:	f04f 32ff 	mov.w	r2, #4294967295
   19cd0:	f04f 33ff 	mov.w	r3, #4294967295
   19cd4:	4606      	mov	r6, r0
   19cd6:	4817      	ldr	r0, [pc, #92]	; (19d34 <bt_hci_cmd_create+0x6c>)
   19cd8:	460f      	mov	r7, r1
   19cda:	f015 fb4a 	bl	2f372 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19cde:	f04f 0800 	mov.w	r8, #0
   19ce2:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   19ce4:	f100 0a0c 	add.w	sl, r0, #12
   19ce8:	2101      	movs	r1, #1
   19cea:	4650      	mov	r0, sl
   19cec:	f015 fb48 	bl	2f380 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   19cf0:	4620      	mov	r0, r4
   19cf2:	f884 8018 	strb.w	r8, [r4, #24]
   19cf6:	f006 fb97 	bl	20428 <net_buf_id>
   19cfa:	f04f 090c 	mov.w	r9, #12
   19cfe:	4d0e      	ldr	r5, [pc, #56]	; (19d38 <bt_hci_cmd_create+0x70>)
   19d00:	fb09 5000 	mla	r0, r9, r0, r5
   19d04:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   19d06:	4620      	mov	r0, r4
   19d08:	f006 fb8e 	bl	20428 <net_buf_id>
   19d0c:	fb09 5000 	mla	r0, r9, r0, r5
   19d10:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   19d14:	4620      	mov	r0, r4
   19d16:	f006 fb87 	bl	20428 <net_buf_id>
   19d1a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   19d1e:	2103      	movs	r1, #3
   19d20:	4650      	mov	r0, sl
   19d22:	f8c5 8004 	str.w	r8, [r5, #4]
   19d26:	f015 fb84 	bl	2f432 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   19d2a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   19d2c:	7087      	strb	r7, [r0, #2]
}
   19d2e:	4620      	mov	r0, r4
   19d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19d34:	20008f8c 	.word	0x20008f8c
   19d38:	20030930 	.word	0x20030930

00019d3c <bt_hci_cmd_send_sync>:
{
   19d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d40:	4607      	mov	r7, r0
   19d42:	4615      	mov	r5, r2
	if (!buf) {
   19d44:	460c      	mov	r4, r1
{
   19d46:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   19d48:	b921      	cbnz	r1, 19d54 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   19d4a:	f7ff ffbd 	bl	19cc8 <bt_hci_cmd_create>
		if (!buf) {
   19d4e:	4604      	mov	r4, r0
   19d50:	2800      	cmp	r0, #0
   19d52:	d056      	beq.n	19e02 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19d54:	ae06      	add	r6, sp, #24
   19d56:	2201      	movs	r2, #1
   19d58:	2100      	movs	r1, #0
   19d5a:	4630      	mov	r0, r6
   19d5c:	f017 f918 	bl	30f90 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   19d60:	4620      	mov	r0, r4
   19d62:	f006 fb61 	bl	20428 <net_buf_id>
   19d66:	230c      	movs	r3, #12
   19d68:	f8df 809c 	ldr.w	r8, [pc, #156]	; 19e08 <bt_hci_cmd_send_sync+0xcc>
   19d6c:	fb03 8000 	mla	r0, r3, r0, r8
   19d70:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   19d72:	4620      	mov	r0, r4
   19d74:	f015 fb37 	bl	2f3e6 <net_buf_ref>
   19d78:	4601      	mov	r1, r0
   19d7a:	4824      	ldr	r0, [pc, #144]	; (19e0c <bt_hci_cmd_send_sync+0xd0>)
   19d7c:	f015 fb31 	bl	2f3e2 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   19d80:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   19d84:	4630      	mov	r0, r6
   19d86:	2300      	movs	r3, #0
   19d88:	f00b fed0 	bl	25b2c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   19d8c:	4606      	mov	r6, r0
   19d8e:	b180      	cbz	r0, 19db2 <bt_hci_cmd_send_sync+0x76>
   19d90:	f240 1349 	movw	r3, #329	; 0x149
   19d94:	4a1e      	ldr	r2, [pc, #120]	; (19e10 <bt_hci_cmd_send_sync+0xd4>)
   19d96:	491f      	ldr	r1, [pc, #124]	; (19e14 <bt_hci_cmd_send_sync+0xd8>)
   19d98:	481f      	ldr	r0, [pc, #124]	; (19e18 <bt_hci_cmd_send_sync+0xdc>)
   19d9a:	f010 fd4d 	bl	2a838 <assert_print>
   19d9e:	4631      	mov	r1, r6
   19da0:	481e      	ldr	r0, [pc, #120]	; (19e1c <bt_hci_cmd_send_sync+0xe0>)
   19da2:	f010 fd49 	bl	2a838 <assert_print>
   19da6:	4040      	eors	r0, r0
   19da8:	f380 8811 	msr	BASEPRI, r0
   19dac:	f04f 0003 	mov.w	r0, #3
   19db0:	df02      	svc	2
	status = cmd(buf)->status;
   19db2:	4620      	mov	r0, r4
   19db4:	f006 fb38 	bl	20428 <net_buf_id>
   19db8:	230c      	movs	r3, #12
   19dba:	4358      	muls	r0, r3
   19dbc:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   19dc0:	b1be      	cbz	r6, 19df2 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   19dc2:	4b17      	ldr	r3, [pc, #92]	; (19e20 <bt_hci_cmd_send_sync+0xe4>)
   19dc4:	2202      	movs	r2, #2
   19dc6:	9302      	str	r3, [sp, #8]
   19dc8:	2300      	movs	r3, #0
   19dca:	4916      	ldr	r1, [pc, #88]	; (19e24 <bt_hci_cmd_send_sync+0xe8>)
   19dcc:	4618      	mov	r0, r3
   19dce:	e9cd 3300 	strd	r3, r3, [sp]
   19dd2:	e9cd 7603 	strd	r7, r6, [sp, #12]
   19dd6:	f013 face 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   19dda:	4620      	mov	r0, r4
   19ddc:	f006 fbde 	bl	2059c <net_buf_unref>
			return -ECONNREFUSED;
   19de0:	2e09      	cmp	r6, #9
   19de2:	bf14      	ite	ne
   19de4:	f06f 0004 	mvnne.w	r0, #4
   19de8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   19dec:	b00c      	add	sp, #48	; 0x30
   19dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   19df2:	b115      	cbz	r5, 19dfa <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   19df4:	602c      	str	r4, [r5, #0]
	return 0;
   19df6:	2000      	movs	r0, #0
   19df8:	e7f8      	b.n	19dec <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   19dfa:	4620      	mov	r0, r4
   19dfc:	f006 fbce 	bl	2059c <net_buf_unref>
   19e00:	e7f9      	b.n	19df6 <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   19e02:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19e06:	e7f1      	b.n	19dec <bt_hci_cmd_send_sync+0xb0>
   19e08:	20030930 	.word	0x20030930
   19e0c:	20008144 	.word	0x20008144
   19e10:	000367c4 	.word	0x000367c4
   19e14:	00036951 	.word	0x00036951
   19e18:	00036811 	.word	0x00036811
   19e1c:	0003695a 	.word	0x0003695a
   19e20:	0003697a 	.word	0x0003697a
   19e24:	00033040 	.word	0x00033040

00019e28 <hci_le_read_max_data_len>:
{
   19e28:	b570      	push	{r4, r5, r6, lr}
   19e2a:	b086      	sub	sp, #24
   19e2c:	4606      	mov	r6, r0
   19e2e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   19e30:	f242 002f 	movw	r0, #8239	; 0x202f
   19e34:	2100      	movs	r1, #0
   19e36:	aa05      	add	r2, sp, #20
   19e38:	f7ff ff80 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   19e3c:	4604      	mov	r4, r0
   19e3e:	b160      	cbz	r0, 19e5a <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   19e40:	4b0b      	ldr	r3, [pc, #44]	; (19e70 <hci_le_read_max_data_len+0x48>)
   19e42:	2201      	movs	r2, #1
   19e44:	9302      	str	r3, [sp, #8]
   19e46:	2300      	movs	r3, #0
   19e48:	490a      	ldr	r1, [pc, #40]	; (19e74 <hci_le_read_max_data_len+0x4c>)
   19e4a:	4618      	mov	r0, r3
   19e4c:	e9cd 3300 	strd	r3, r3, [sp]
   19e50:	f013 fa91 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19e54:	4620      	mov	r0, r4
   19e56:	b006      	add	sp, #24
   19e58:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   19e5a:	9805      	ldr	r0, [sp, #20]
   19e5c:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   19e5e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   19e62:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   19e64:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   19e68:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   19e6a:	f006 fb97 	bl	2059c <net_buf_unref>
	return 0;
   19e6e:	e7f1      	b.n	19e54 <hci_le_read_max_data_len+0x2c>
   19e70:	00036996 	.word	0x00036996
   19e74:	00033040 	.word	0x00033040

00019e78 <bt_hci_le_rand>:
{
   19e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19e7a:	4b14      	ldr	r3, [pc, #80]	; (19ecc <bt_hci_le_rand+0x54>)
{
   19e7c:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19e7e:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   19e82:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19e84:	2b00      	cmp	r3, #0
   19e86:	da1d      	bge.n	19ec4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   19e88:	b914      	cbnz	r4, 19e90 <bt_hci_le_rand+0x18>
	return 0;
   19e8a:	4620      	mov	r0, r4
}
   19e8c:	b003      	add	sp, #12
   19e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   19e90:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19e92:	f04f 0100 	mov.w	r1, #0
   19e96:	f242 0018 	movw	r0, #8216	; 0x2018
   19e9a:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   19e9c:	4626      	mov	r6, r4
   19e9e:	bf28      	it	cs
   19ea0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19ea2:	f7ff ff4b 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
   19ea6:	2800      	cmp	r0, #0
   19ea8:	d1f0      	bne.n	19e8c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   19eaa:	9f01      	ldr	r7, [sp, #4]
   19eac:	4632      	mov	r2, r6
   19eae:	68f9      	ldr	r1, [r7, #12]
   19eb0:	4628      	mov	r0, r5
   19eb2:	3101      	adds	r1, #1
   19eb4:	f017 fcbb 	bl	3182e <memcpy>
		net_buf_unref(rsp);
   19eb8:	4638      	mov	r0, r7
   19eba:	f006 fb6f 	bl	2059c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   19ebe:	4435      	add	r5, r6
		len -= count;
   19ec0:	1ba4      	subs	r4, r4, r6
   19ec2:	e7e1      	b.n	19e88 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   19ec4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19ec8:	e7e0      	b.n	19e8c <bt_hci_le_rand+0x14>
   19eca:	bf00      	nop
   19ecc:	20008000 	.word	0x20008000

00019ed0 <bt_hci_le_enh_conn_complete>:
{
   19ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19ed4:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   19ed8:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   19eda:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   19ede:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   19ee2:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   19ee4:	4a9f      	ldr	r2, [pc, #636]	; (1a164 <bt_hci_le_enh_conn_complete+0x294>)
   19ee6:	b29b      	uxth	r3, r3
   19ee8:	8811      	ldrh	r1, [r2, #0]
{
   19eea:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   19eec:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   19eee:	bf04      	itt	eq
   19ef0:	8017      	strheq	r7, [r2, #0]
			return true;
   19ef2:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   19ef4:	f000 fe2c 	bl	1ab50 <bt_id_pending_keys_update>
	if (evt->status) {
   19ef8:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19efa:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   19efe:	b37e      	cbz	r6, 19f60 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19f00:	2e3c      	cmp	r6, #60	; 0x3c
   19f02:	d121      	bne.n	19f48 <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19f04:	f001 fa5e 	bl	1b3c4 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19f08:	f06f 0180 	mvn.w	r1, #128	; 0x80
   19f0c:	3010      	adds	r0, #16
   19f0e:	f013 fa41 	bl	2d394 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   19f12:	2000      	movs	r0, #0
   19f14:	f7ff fb16 	bl	19544 <find_pending_connect.part.0>
		if (!conn) {
   19f18:	4604      	mov	r4, r0
   19f1a:	b958      	cbnz	r0, 19f34 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   19f1c:	4b92      	ldr	r3, [pc, #584]	; (1a168 <bt_hci_le_enh_conn_complete+0x298>)
   19f1e:	2201      	movs	r2, #1
   19f20:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19f24:	4991      	ldr	r1, [pc, #580]	; (1a16c <bt_hci_le_enh_conn_complete+0x29c>)
   19f26:	4603      	mov	r3, r0
   19f28:	9000      	str	r0, [sp, #0]
   19f2a:	f013 fa24 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   19f2e:	b00a      	add	sp, #40	; 0x28
   19f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   19f34:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19f36:	2100      	movs	r1, #0
   19f38:	f002 f866 	bl	1c008 <bt_conn_set_state>
		bt_conn_unref(conn);
   19f3c:	4620      	mov	r0, r4
}
   19f3e:	b00a      	add	sp, #40	; 0x28
   19f40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   19f44:	f013 bd97 	b.w	2da76 <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   19f48:	4b89      	ldr	r3, [pc, #548]	; (1a170 <bt_hci_le_enh_conn_complete+0x2a0>)
   19f4a:	2202      	movs	r2, #2
   19f4c:	9302      	str	r3, [sp, #8]
   19f4e:	2300      	movs	r3, #0
   19f50:	4986      	ldr	r1, [pc, #536]	; (1a16c <bt_hci_le_enh_conn_complete+0x29c>)
   19f52:	4618      	mov	r0, r3
   19f54:	e9cd 3300 	strd	r3, r3, [sp]
   19f58:	9603      	str	r6, [sp, #12]
   19f5a:	f013 fa0c 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		return;
   19f5e:	e7e6      	b.n	19f2e <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   19f60:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   19f62:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   19f66:	3b02      	subs	r3, #2
   19f68:	2b01      	cmp	r3, #1
   19f6a:	d827      	bhi.n	19fbc <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   19f6c:	4651      	mov	r1, sl
   19f6e:	a808      	add	r0, sp, #32
   19f70:	f013 f9fa 	bl	2d368 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19f74:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   19f78:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19f7c:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   19f7e:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19f82:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   19f86:	f013 f9ea 	bl	2d35e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   19f8a:	2301      	movs	r3, #1
   19f8c:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   19f90:	78eb      	ldrb	r3, [r5, #3]
   19f92:	2b01      	cmp	r3, #1
   19f94:	d025      	beq.n	19fe2 <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   19f96:	4650      	mov	r0, sl
   19f98:	f7ff f9be 	bl	19318 <bt_addr_le_str>
   19f9c:	4b75      	ldr	r3, [pc, #468]	; (1a174 <bt_hci_le_enh_conn_complete+0x2a4>)
   19f9e:	9003      	str	r0, [sp, #12]
   19fa0:	9302      	str	r3, [sp, #8]
   19fa2:	2300      	movs	r3, #0
   19fa4:	2201      	movs	r2, #1
   19fa6:	4618      	mov	r0, r3
   19fa8:	e9cd 3300 	strd	r3, r3, [sp]
   19fac:	496f      	ldr	r1, [pc, #444]	; (1a16c <bt_hci_le_enh_conn_complete+0x29c>)
   19fae:	f013 f9e2 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   19fb2:	211f      	movs	r1, #31
   19fb4:	4648      	mov	r0, r9
   19fb6:	f013 fa05 	bl	2d3c4 <bt_hci_disconnect>
		return;
   19fba:	e7b8      	b.n	19f2e <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   19fbc:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   19fbe:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   19fc0:	2b01      	cmp	r3, #1
   19fc2:	bf04      	itt	eq
   19fc4:	4b6c      	ldreq	r3, [pc, #432]	; (1a178 <bt_hci_le_enh_conn_complete+0x2a8>)
   19fc6:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   19fca:	4630      	mov	r0, r6
   19fcc:	f013 fb54 	bl	2d678 <bt_lookup_id_addr>
   19fd0:	4601      	mov	r1, r0
   19fd2:	a808      	add	r0, sp, #32
   19fd4:	f013 f9c8 	bl	2d368 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   19fd8:	4651      	mov	r1, sl
   19fda:	a806      	add	r0, sp, #24
   19fdc:	f013 f9c4 	bl	2d368 <bt_addr_le_copy>
   19fe0:	e7d6      	b.n	19f90 <bt_hci_le_enh_conn_complete+0xc0>
   19fe2:	a808      	add	r0, sp, #32
   19fe4:	f7ff faae 	bl	19544 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19fe8:	78eb      	ldrb	r3, [r5, #3]
   19fea:	4604      	mov	r4, r0
   19fec:	2b01      	cmp	r3, #1
   19fee:	d10a      	bne.n	1a006 <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19ff0:	f001 f9e8 	bl	1b3c4 <bt_le_adv_lookup_legacy>
   19ff4:	4606      	mov	r6, r0
   19ff6:	f06f 0180 	mvn.w	r1, #128	; 0x80
   19ffa:	3010      	adds	r0, #16
   19ffc:	f013 f9ca 	bl	2d394 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   1a000:	4630      	mov	r0, r6
   1a002:	f013 fc67 	bl	2d8d4 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   1a006:	2c00      	cmp	r4, #0
   1a008:	d0c5      	beq.n	19f96 <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   1a00a:	4620      	mov	r0, r4
	conn->err = 0U;
   1a00c:	2200      	movs	r2, #0
	conn->handle = handle;
   1a00e:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1a012:	a908      	add	r1, sp, #32
   1a014:	f013 f9a8 	bl	2d368 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1a018:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1a01c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1a020:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   1a024:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1a028:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1a02c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1a030:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   1a032:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a034:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   1a036:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a038:	d115      	bne.n	1a066 <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1a03a:	a906      	add	r1, sp, #24
   1a03c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1a040:	f013 f992 	bl	2d368 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1a044:	f001 f9be 	bl	1b3c4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1a048:	7a21      	ldrb	r1, [r4, #8]
   1a04a:	4a4b      	ldr	r2, [pc, #300]	; (1a178 <bt_hci_le_enh_conn_complete+0x2a8>)
   1a04c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   1a050:	4411      	add	r1, r2
   1a052:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1a056:	f013 f987 	bl	2d368 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1a05a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1a05e:	065d      	lsls	r5, r3, #25
   1a060:	d501      	bpl.n	1a066 <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   1a062:	f001 fb73 	bl	1b74c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1a066:	2107      	movs	r1, #7
   1a068:	4620      	mov	r0, r4
   1a06a:	f001 ffcd 	bl	1c008 <bt_conn_set_state>
	if (is_disconnected) {
   1a06e:	b11f      	cbz	r7, 1a078 <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1a070:	2101      	movs	r1, #1
   1a072:	4620      	mov	r0, r4
   1a074:	f001 ffc8 	bl	1c008 <bt_conn_set_state>
	bt_conn_connected(conn);
   1a078:	4620      	mov	r0, r4
   1a07a:	f013 fd32 	bl	2dae2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1a07e:	7b63      	ldrb	r3, [r4, #13]
   1a080:	2b07      	cmp	r3, #7
   1a082:	d167      	bne.n	1a154 <bt_hci_le_enh_conn_complete+0x284>
   1a084:	1d23      	adds	r3, r4, #4
   1a086:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1a08a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1a08e:	4e3a      	ldr	r6, [pc, #232]	; (1a178 <bt_hci_le_enh_conn_complete+0x2a8>)
   1a090:	d125      	bne.n	1a0de <bt_hci_le_enh_conn_complete+0x20e>
   1a092:	78e3      	ldrb	r3, [r4, #3]
   1a094:	b11b      	cbz	r3, 1a09e <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1a096:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1a09a:	0718      	lsls	r0, r3, #28
   1a09c:	d51f      	bpl.n	1a0de <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1a09e:	2102      	movs	r1, #2
   1a0a0:	f242 0016 	movw	r0, #8214	; 0x2016
   1a0a4:	f7ff fe10 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1a0a8:	4605      	mov	r5, r0
   1a0aa:	2800      	cmp	r0, #0
   1a0ac:	d056      	beq.n	1a15c <bt_hci_le_enh_conn_complete+0x28c>
   1a0ae:	2102      	movs	r1, #2
   1a0b0:	300c      	adds	r0, #12
   1a0b2:	f015 f9be 	bl	2f432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a0b6:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1a0b8:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a0ba:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1a0bc:	4629      	mov	r1, r5
   1a0be:	f242 0016 	movw	r0, #8214	; 0x2016
   1a0c2:	f7ff fe3b 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
   1a0c6:	b150      	cbz	r0, 1a0de <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   1a0c8:	4b2c      	ldr	r3, [pc, #176]	; (1a17c <bt_hci_le_enh_conn_complete+0x2ac>)
   1a0ca:	9003      	str	r0, [sp, #12]
   1a0cc:	9302      	str	r3, [sp, #8]
   1a0ce:	2300      	movs	r3, #0
   1a0d0:	2201      	movs	r2, #1
   1a0d2:	4618      	mov	r0, r3
   1a0d4:	e9cd 3300 	strd	r3, r3, [sp]
   1a0d8:	4924      	ldr	r1, [pc, #144]	; (1a16c <bt_hci_le_enh_conn_complete+0x29c>)
   1a0da:	f013 f94c 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1a0de:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   1a0e2:	07d9      	lsls	r1, r3, #31
   1a0e4:	d513      	bpl.n	1a10e <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1a0e6:	2500      	movs	r5, #0
   1a0e8:	2302      	movs	r3, #2
   1a0ea:	4629      	mov	r1, r5
   1a0ec:	461a      	mov	r2, r3
   1a0ee:	4620      	mov	r0, r4
   1a0f0:	9500      	str	r5, [sp, #0]
   1a0f2:	f013 f9a0 	bl	2d436 <bt_le_set_phy>
		if (err) {
   1a0f6:	b150      	cbz	r0, 1a10e <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   1a0f8:	4b21      	ldr	r3, [pc, #132]	; (1a180 <bt_hci_le_enh_conn_complete+0x2b0>)
   1a0fa:	9003      	str	r0, [sp, #12]
   1a0fc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a100:	2201      	movs	r2, #1
   1a102:	462b      	mov	r3, r5
   1a104:	4628      	mov	r0, r5
   1a106:	4919      	ldr	r1, [pc, #100]	; (1a16c <bt_hci_le_enh_conn_complete+0x29c>)
   1a108:	9500      	str	r5, [sp, #0]
   1a10a:	f013 f934 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1a10e:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1a112:	069a      	lsls	r2, r3, #26
   1a114:	d51e      	bpl.n	1a154 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1a116:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
   1a11a:	689b      	ldr	r3, [r3, #8]
   1a11c:	079b      	lsls	r3, r3, #30
   1a11e:	d519      	bpl.n	1a154 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1a120:	f10d 0116 	add.w	r1, sp, #22
   1a124:	a805      	add	r0, sp, #20
   1a126:	f7ff fe7f 	bl	19e28 <hci_le_read_max_data_len>
			if (!err) {
   1a12a:	4605      	mov	r5, r0
   1a12c:	b990      	cbnz	r0, 1a154 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   1a12e:	4620      	mov	r0, r4
   1a130:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a134:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1a138:	f013 f95f 	bl	2d3fa <bt_le_set_data_len>
				if (err) {
   1a13c:	b150      	cbz	r0, 1a154 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   1a13e:	4b11      	ldr	r3, [pc, #68]	; (1a184 <bt_hci_le_enh_conn_complete+0x2b4>)
   1a140:	9003      	str	r0, [sp, #12]
   1a142:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a146:	2201      	movs	r2, #1
   1a148:	462b      	mov	r3, r5
   1a14a:	4628      	mov	r0, r5
   1a14c:	4907      	ldr	r1, [pc, #28]	; (1a16c <bt_hci_le_enh_conn_complete+0x29c>)
   1a14e:	9500      	str	r5, [sp, #0]
   1a150:	f013 f911 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   1a154:	4620      	mov	r0, r4
   1a156:	f013 fc8e 	bl	2da76 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a15a:	e6e8      	b.n	19f2e <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   1a15c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a160:	e7b2      	b.n	1a0c8 <bt_hci_le_enh_conn_complete+0x1f8>
   1a162:	bf00      	nop
   1a164:	20030f0a 	.word	0x20030f0a
   1a168:	000369b6 	.word	0x000369b6
   1a16c:	00033040 	.word	0x00033040
   1a170:	000369d7 	.word	0x000369d7
   1a174:	000369f0 	.word	0x000369f0
   1a178:	20008000 	.word	0x20008000
   1a17c:	00036a0c 	.word	0x00036a0c
   1a180:	00036a2d 	.word	0x00036a2d
   1a184:	00036a44 	.word	0x00036a44

0001a188 <le_legacy_conn_complete>:
{
   1a188:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a18a:	68c1      	ldr	r1, [r0, #12]
{
   1a18c:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   1a18e:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a190:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   1a192:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1a196:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a19a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1a19c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1a1a0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1a1a4:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1a1a8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1a1ac:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1a1b0:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1a1b4:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1a1b8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a1bc:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1a1c0:	7b4b      	ldrb	r3, [r1, #13]
   1a1c2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a1c6:	f013 f8cf 	bl	2d368 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a1ca:	4907      	ldr	r1, [pc, #28]	; (1a1e8 <le_legacy_conn_complete+0x60>)
   1a1cc:	f10d 000b 	add.w	r0, sp, #11
   1a1d0:	f013 f8c5 	bl	2d35e <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a1d4:	f10d 0011 	add.w	r0, sp, #17
   1a1d8:	f013 f8c1 	bl	2d35e <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1a1dc:	4668      	mov	r0, sp
   1a1de:	f7ff fe77 	bl	19ed0 <bt_hci_le_enh_conn_complete>
}
   1a1e2:	b009      	add	sp, #36	; 0x24
   1a1e4:	f85d fb04 	ldr.w	pc, [sp], #4
   1a1e8:	00036697 	.word	0x00036697

0001a1ec <bt_security_err_get>:
	switch (hci_err) {
   1a1ec:	2829      	cmp	r0, #41	; 0x29
   1a1ee:	bf9a      	itte	ls
   1a1f0:	4b01      	ldrls	r3, [pc, #4]	; (1a1f8 <bt_security_err_get+0xc>)
   1a1f2:	5c18      	ldrbls	r0, [r3, r0]
{
   1a1f4:	2009      	movhi	r0, #9
}
   1a1f6:	4770      	bx	lr
   1a1f8:	00036ce6 	.word	0x00036ce6

0001a1fc <hci_encrypt_key_refresh_complete>:
{
   1a1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1a1fe:	68c3      	ldr	r3, [r0, #12]
{
   1a200:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   1a202:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   1a206:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1a208:	4630      	mov	r0, r6
   1a20a:	f001 fef5 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   1a20e:	4604      	mov	r4, r0
   1a210:	b958      	cbnz	r0, 1a22a <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1a212:	4b1e      	ldr	r3, [pc, #120]	; (1a28c <hci_encrypt_key_refresh_complete+0x90>)
   1a214:	2201      	movs	r2, #1
   1a216:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a21a:	491d      	ldr	r1, [pc, #116]	; (1a290 <hci_encrypt_key_refresh_complete+0x94>)
   1a21c:	4603      	mov	r3, r0
   1a21e:	9603      	str	r6, [sp, #12]
   1a220:	9000      	str	r0, [sp, #0]
   1a222:	f013 f8a8 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   1a226:	b005      	add	sp, #20
   1a228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1a22a:	b16d      	cbz	r5, 1a248 <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a22c:	4628      	mov	r0, r5
   1a22e:	f7ff ffdd 	bl	1a1ec <bt_security_err_get>
   1a232:	4629      	mov	r1, r5
   1a234:	4602      	mov	r2, r0
   1a236:	4620      	mov	r0, r4
   1a238:	f002 f8a0 	bl	1c37c <bt_conn_security_changed>
	bt_conn_unref(conn);
   1a23c:	4620      	mov	r0, r4
}
   1a23e:	b005      	add	sp, #20
   1a240:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1a244:	f013 bc17 	b.w	2da76 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a248:	7887      	ldrb	r7, [r0, #2]
   1a24a:	2f01      	cmp	r7, #1
   1a24c:	d1ee      	bne.n	1a22c <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   1a24e:	f005 fee1 	bl	20014 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1a252:	4620      	mov	r0, r4
   1a254:	f013 f85f 	bl	2d316 <update_sec_level>
   1a258:	4606      	mov	r6, r0
   1a25a:	2800      	cmp	r0, #0
   1a25c:	d1e6      	bne.n	1a22c <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a25e:	2005      	movs	r0, #5
   1a260:	f7ff ffc4 	bl	1a1ec <bt_security_err_get>
   1a264:	2105      	movs	r1, #5
   1a266:	4602      	mov	r2, r0
   1a268:	4620      	mov	r0, r4
   1a26a:	f002 f887 	bl	1c37c <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1a26e:	4b09      	ldr	r3, [pc, #36]	; (1a294 <hci_encrypt_key_refresh_complete+0x98>)
   1a270:	4630      	mov	r0, r6
   1a272:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1a276:	463a      	mov	r2, r7
   1a278:	4633      	mov	r3, r6
   1a27a:	4905      	ldr	r1, [pc, #20]	; (1a290 <hci_encrypt_key_refresh_complete+0x94>)
   1a27c:	9600      	str	r6, [sp, #0]
   1a27e:	f013 f87a 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1a282:	2105      	movs	r1, #5
   1a284:	4620      	mov	r0, r4
   1a286:	f013 fc35 	bl	2daf4 <bt_conn_disconnect>
   1a28a:	e7d7      	b.n	1a23c <hci_encrypt_key_refresh_complete+0x40>
   1a28c:	0003675a 	.word	0x0003675a
   1a290:	00033040 	.word	0x00033040
   1a294:	00036a60 	.word	0x00036a60

0001a298 <hci_encrypt_change>:
{
   1a298:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1a29a:	68c6      	ldr	r6, [r0, #12]
{
   1a29c:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a29e:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   1a2a2:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1a2a4:	4638      	mov	r0, r7
   1a2a6:	f001 fea7 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   1a2aa:	4604      	mov	r4, r0
   1a2ac:	b958      	cbnz	r0, 1a2c6 <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1a2ae:	4b23      	ldr	r3, [pc, #140]	; (1a33c <hci_encrypt_change+0xa4>)
   1a2b0:	2201      	movs	r2, #1
   1a2b2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a2b6:	4922      	ldr	r1, [pc, #136]	; (1a340 <hci_encrypt_change+0xa8>)
   1a2b8:	4603      	mov	r3, r0
   1a2ba:	9703      	str	r7, [sp, #12]
   1a2bc:	9000      	str	r0, [sp, #0]
   1a2be:	f013 f85a 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   1a2c2:	b005      	add	sp, #20
   1a2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1a2c6:	b16d      	cbz	r5, 1a2e4 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   1a2c8:	4628      	mov	r0, r5
   1a2ca:	f7ff ff8f 	bl	1a1ec <bt_security_err_get>
   1a2ce:	4629      	mov	r1, r5
   1a2d0:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a2d2:	4620      	mov	r0, r4
   1a2d4:	f002 f852 	bl	1c37c <bt_conn_security_changed>
	bt_conn_unref(conn);
   1a2d8:	4620      	mov	r0, r4
}
   1a2da:	b005      	add	sp, #20
   1a2dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1a2e0:	f013 bbc9 	b.w	2da76 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a2e4:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1a2e6:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   1a2e8:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   1a2ea:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1a2ec:	d005      	beq.n	1a2fa <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a2ee:	2000      	movs	r0, #0
   1a2f0:	f7ff ff7c 	bl	1a1ec <bt_security_err_get>
   1a2f4:	2100      	movs	r1, #0
   1a2f6:	4602      	mov	r2, r0
   1a2f8:	e7eb      	b.n	1a2d2 <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   1a2fa:	b10b      	cbz	r3, 1a300 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   1a2fc:	f005 fe8a 	bl	20014 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1a300:	4620      	mov	r0, r4
   1a302:	f013 f808 	bl	2d316 <update_sec_level>
   1a306:	4605      	mov	r5, r0
   1a308:	2800      	cmp	r0, #0
   1a30a:	d1f0      	bne.n	1a2ee <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a30c:	2005      	movs	r0, #5
   1a30e:	f7ff ff6d 	bl	1a1ec <bt_security_err_get>
   1a312:	2105      	movs	r1, #5
   1a314:	4602      	mov	r2, r0
   1a316:	4620      	mov	r0, r4
   1a318:	f002 f830 	bl	1c37c <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1a31c:	4b09      	ldr	r3, [pc, #36]	; (1a344 <hci_encrypt_change+0xac>)
   1a31e:	4628      	mov	r0, r5
   1a320:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a324:	2201      	movs	r2, #1
   1a326:	462b      	mov	r3, r5
   1a328:	4905      	ldr	r1, [pc, #20]	; (1a340 <hci_encrypt_change+0xa8>)
   1a32a:	9500      	str	r5, [sp, #0]
   1a32c:	f013 f823 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1a330:	2105      	movs	r1, #5
   1a332:	4620      	mov	r0, r4
   1a334:	f013 fbde 	bl	2daf4 <bt_conn_disconnect>
   1a338:	e7ce      	b.n	1a2d8 <hci_encrypt_change+0x40>
   1a33a:	bf00      	nop
   1a33c:	0003675a 	.word	0x0003675a
   1a340:	00033040 	.word	0x00033040
   1a344:	00036a60 	.word	0x00036a60

0001a348 <bt_send>:
	return bt_dev.drv->send(buf);
   1a348:	4b02      	ldr	r3, [pc, #8]	; (1a354 <bt_send+0xc>)
   1a34a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1a34e:	695b      	ldr	r3, [r3, #20]
   1a350:	4718      	bx	r3
   1a352:	bf00      	nop
   1a354:	20008000 	.word	0x20008000

0001a358 <bt_hci_cmd_send>:
{
   1a358:	b530      	push	{r4, r5, lr}
   1a35a:	4605      	mov	r5, r0
	if (!buf) {
   1a35c:	460c      	mov	r4, r1
{
   1a35e:	b085      	sub	sp, #20
	if (!buf) {
   1a360:	b919      	cbnz	r1, 1a36a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   1a362:	f7ff fcb1 	bl	19cc8 <bt_hci_cmd_create>
		if (!buf) {
   1a366:	4604      	mov	r4, r0
   1a368:	b1f8      	cbz	r0, 1a3aa <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1a36a:	f640 4335 	movw	r3, #3125	; 0xc35
   1a36e:	429d      	cmp	r5, r3
   1a370:	d115      	bne.n	1a39e <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   1a372:	4620      	mov	r0, r4
   1a374:	f7ff ffe8 	bl	1a348 <bt_send>
		if (err) {
   1a378:	4605      	mov	r5, r0
   1a37a:	b1a0      	cbz	r0, 1a3a6 <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1a37c:	4b0c      	ldr	r3, [pc, #48]	; (1a3b0 <bt_hci_cmd_send+0x58>)
   1a37e:	9003      	str	r0, [sp, #12]
   1a380:	9302      	str	r3, [sp, #8]
   1a382:	2300      	movs	r3, #0
   1a384:	2201      	movs	r2, #1
   1a386:	4618      	mov	r0, r3
   1a388:	e9cd 3300 	strd	r3, r3, [sp]
   1a38c:	4909      	ldr	r1, [pc, #36]	; (1a3b4 <bt_hci_cmd_send+0x5c>)
   1a38e:	f012 fff2 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   1a392:	4620      	mov	r0, r4
   1a394:	f006 f902 	bl	2059c <net_buf_unref>
}
   1a398:	4628      	mov	r0, r5
   1a39a:	b005      	add	sp, #20
   1a39c:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1a39e:	4621      	mov	r1, r4
   1a3a0:	4805      	ldr	r0, [pc, #20]	; (1a3b8 <bt_hci_cmd_send+0x60>)
   1a3a2:	f015 f81e 	bl	2f3e2 <net_buf_put>
	return 0;
   1a3a6:	2500      	movs	r5, #0
   1a3a8:	e7f6      	b.n	1a398 <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   1a3aa:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1a3ae:	e7f3      	b.n	1a398 <bt_hci_cmd_send+0x40>
   1a3b0:	00036a86 	.word	0x00036a86
   1a3b4:	00033040 	.word	0x00033040
   1a3b8:	20008144 	.word	0x20008144

0001a3bc <bt_hci_host_num_completed_packets>:
{
   1a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3be:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   1a3c0:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   1a3c2:	7e46      	ldrb	r6, [r0, #25]
{
   1a3c4:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a3c6:	7a80      	ldrb	r0, [r0, #10]
   1a3c8:	f006 f826 	bl	20418 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a3cc:	4621      	mov	r1, r4
   1a3ce:	f016 fdd5 	bl	30f7c <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1a3d2:	4b2a      	ldr	r3, [pc, #168]	; (1a47c <bt_hci_host_num_completed_packets+0xc0>)
   1a3d4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1a3d8:	069b      	lsls	r3, r3, #26
   1a3da:	d50e      	bpl.n	1a3fa <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   1a3dc:	4630      	mov	r0, r6
   1a3de:	f002 f9fb 	bl	1c7d8 <bt_conn_lookup_index>
	if (!conn) {
   1a3e2:	4604      	mov	r4, r0
   1a3e4:	b958      	cbnz	r0, 1a3fe <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1a3e6:	4b26      	ldr	r3, [pc, #152]	; (1a480 <bt_hci_host_num_completed_packets+0xc4>)
   1a3e8:	2202      	movs	r2, #2
   1a3ea:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a3ee:	4925      	ldr	r1, [pc, #148]	; (1a484 <bt_hci_host_num_completed_packets+0xc8>)
   1a3f0:	4603      	mov	r3, r0
   1a3f2:	9603      	str	r6, [sp, #12]
   1a3f4:	9000      	str	r0, [sp, #0]
   1a3f6:	f012 ffbe 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   1a3fa:	b005      	add	sp, #20
   1a3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   1a3fe:	7b43      	ldrb	r3, [r0, #13]
   1a400:	3b07      	subs	r3, #7
   1a402:	2b01      	cmp	r3, #1
   1a404:	d90f      	bls.n	1a426 <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   1a406:	4b20      	ldr	r3, [pc, #128]	; (1a488 <bt_hci_host_num_completed_packets+0xcc>)
   1a408:	2202      	movs	r2, #2
   1a40a:	9302      	str	r3, [sp, #8]
   1a40c:	2300      	movs	r3, #0
   1a40e:	491d      	ldr	r1, [pc, #116]	; (1a484 <bt_hci_host_num_completed_packets+0xc8>)
   1a410:	4618      	mov	r0, r3
   1a412:	e9cd 3300 	strd	r3, r3, [sp]
   1a416:	f012 ffae 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1a41a:	4620      	mov	r0, r4
}
   1a41c:	b005      	add	sp, #20
   1a41e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1a422:	f013 bb28 	b.w	2da76 <bt_conn_unref>
	bt_conn_unref(conn);
   1a426:	f013 fb26 	bl	2da76 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1a42a:	2105      	movs	r1, #5
   1a42c:	f640 4035 	movw	r0, #3125	; 0xc35
   1a430:	f7ff fc4a 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1a434:	4604      	mov	r4, r0
   1a436:	b948      	cbnz	r0, 1a44c <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   1a438:	4b14      	ldr	r3, [pc, #80]	; (1a48c <bt_hci_host_num_completed_packets+0xd0>)
   1a43a:	2201      	movs	r2, #1
   1a43c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a440:	4910      	ldr	r1, [pc, #64]	; (1a484 <bt_hci_host_num_completed_packets+0xc8>)
   1a442:	4603      	mov	r3, r0
   1a444:	9000      	str	r0, [sp, #0]
   1a446:	f012 ff96 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		return;
   1a44a:	e7d6      	b.n	1a3fa <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   1a44c:	f100 070c 	add.w	r7, r0, #12
   1a450:	2101      	movs	r1, #1
   1a452:	4638      	mov	r0, r7
   1a454:	f014 ffed 	bl	2f432 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   1a458:	2601      	movs	r6, #1
   1a45a:	2104      	movs	r1, #4
   1a45c:	7006      	strb	r6, [r0, #0]
   1a45e:	4638      	mov	r0, r7
   1a460:	f014 ffe7 	bl	2f432 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   1a464:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   1a466:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   1a468:	7086      	strb	r6, [r0, #2]
   1a46a:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1a46c:	4621      	mov	r1, r4
   1a46e:	f640 4035 	movw	r0, #3125	; 0xc35
}
   1a472:	b005      	add	sp, #20
   1a474:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1a478:	f7ff bf6e 	b.w	1a358 <bt_hci_cmd_send>
   1a47c:	20008000 	.word	0x20008000
   1a480:	00036aa8 	.word	0x00036aa8
   1a484:	00033040 	.word	0x00033040
   1a488:	00036ad1 	.word	0x00036ad1
   1a48c:	00036afd 	.word	0x00036afd

0001a490 <le_ltk_request>:
{
   1a490:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1a492:	68c6      	ldr	r6, [r0, #12]
{
   1a494:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   1a496:	8837      	ldrh	r7, [r6, #0]
   1a498:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   1a49a:	4628      	mov	r0, r5
   1a49c:	f001 fdac 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   1a4a0:	4604      	mov	r4, r0
   1a4a2:	b958      	cbnz	r0, 1a4bc <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a4a4:	4b2a      	ldr	r3, [pc, #168]	; (1a550 <le_ltk_request+0xc0>)
   1a4a6:	2201      	movs	r2, #1
   1a4a8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a4ac:	4929      	ldr	r1, [pc, #164]	; (1a554 <le_ltk_request+0xc4>)
   1a4ae:	4603      	mov	r3, r0
   1a4b0:	9503      	str	r5, [sp, #12]
   1a4b2:	9000      	str	r0, [sp, #0]
   1a4b4:	f012 ff5f 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   1a4b8:	b009      	add	sp, #36	; 0x24
   1a4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1a4bc:	ad04      	add	r5, sp, #16
   1a4be:	f8d6 2002 	ldr.w	r2, [r6, #2]
   1a4c2:	f8d6 3006 	ldr.w	r3, [r6, #6]
   1a4c6:	9501      	str	r5, [sp, #4]
   1a4c8:	8971      	ldrh	r1, [r6, #10]
   1a4ca:	9100      	str	r1, [sp, #0]
   1a4cc:	f014 fd65 	bl	2ef9a <bt_smp_request_ltk>
   1a4d0:	b360      	cbz	r0, 1a52c <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1a4d2:	2112      	movs	r1, #18
   1a4d4:	f242 001a 	movw	r0, #8218	; 0x201a
   1a4d8:	f7ff fbf6 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1a4dc:	4606      	mov	r6, r0
   1a4de:	b968      	cbnz	r0, 1a4fc <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   1a4e0:	4b1d      	ldr	r3, [pc, #116]	; (1a558 <le_ltk_request+0xc8>)
   1a4e2:	2201      	movs	r2, #1
   1a4e4:	9302      	str	r3, [sp, #8]
   1a4e6:	2300      	movs	r3, #0
   1a4e8:	491a      	ldr	r1, [pc, #104]	; (1a554 <le_ltk_request+0xc4>)
   1a4ea:	4618      	mov	r0, r3
   1a4ec:	e9cd 3300 	strd	r3, r3, [sp]
   1a4f0:	f012 ff41 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   1a4f4:	4620      	mov	r0, r4
   1a4f6:	f013 fabe 	bl	2da76 <bt_conn_unref>
   1a4fa:	e7dd      	b.n	1a4b8 <le_ltk_request+0x28>
   1a4fc:	2112      	movs	r1, #18
   1a4fe:	300c      	adds	r0, #12
   1a500:	f014 ff97 	bl	2f432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1a504:	4602      	mov	r2, r0
   1a506:	462b      	mov	r3, r5
   1a508:	f822 7b02 	strh.w	r7, [r2], #2
   1a50c:	af08      	add	r7, sp, #32
   1a50e:	461d      	mov	r5, r3
   1a510:	cd03      	ldmia	r5!, {r0, r1}
   1a512:	42bd      	cmp	r5, r7
   1a514:	6010      	str	r0, [r2, #0]
   1a516:	6051      	str	r1, [r2, #4]
   1a518:	462b      	mov	r3, r5
   1a51a:	f102 0208 	add.w	r2, r2, #8
   1a51e:	d1f6      	bne.n	1a50e <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1a520:	4631      	mov	r1, r6
   1a522:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a526:	f7ff ff17 	bl	1a358 <bt_hci_cmd_send>
   1a52a:	e7e3      	b.n	1a4f4 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1a52c:	2102      	movs	r1, #2
   1a52e:	f242 001b 	movw	r0, #8219	; 0x201b
   1a532:	f7ff fbc9 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1a536:	4605      	mov	r5, r0
   1a538:	2800      	cmp	r0, #0
   1a53a:	d0d1      	beq.n	1a4e0 <le_ltk_request+0x50>
   1a53c:	2102      	movs	r1, #2
   1a53e:	300c      	adds	r0, #12
   1a540:	f014 ff77 	bl	2f432 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a544:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   1a546:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a548:	f242 001b 	movw	r0, #8219	; 0x201b
   1a54c:	e7eb      	b.n	1a526 <le_ltk_request+0x96>
   1a54e:	bf00      	nop
   1a550:	00036736 	.word	0x00036736
   1a554:	00033040 	.word	0x00033040
   1a558:	00036b20 	.word	0x00036b20

0001a55c <le_conn_param_neg_reply>:
{
   1a55c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a55e:	4606      	mov	r6, r0
   1a560:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a562:	f242 0021 	movw	r0, #8225	; 0x2021
   1a566:	2103      	movs	r1, #3
   1a568:	f7ff fbae 	bl	19cc8 <bt_hci_cmd_create>
   1a56c:	4604      	mov	r4, r0
	if (!buf) {
   1a56e:	b950      	cbnz	r0, 1a586 <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   1a570:	4b0c      	ldr	r3, [pc, #48]	; (1a5a4 <le_conn_param_neg_reply+0x48>)
   1a572:	2201      	movs	r2, #1
   1a574:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a578:	490b      	ldr	r1, [pc, #44]	; (1a5a8 <le_conn_param_neg_reply+0x4c>)
   1a57a:	4603      	mov	r3, r0
   1a57c:	9000      	str	r0, [sp, #0]
   1a57e:	f012 fefa 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
}
   1a582:	b004      	add	sp, #16
   1a584:	bd70      	pop	{r4, r5, r6, pc}
   1a586:	2103      	movs	r1, #3
   1a588:	300c      	adds	r0, #12
   1a58a:	f014 ff52 	bl	2f432 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a58e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1a590:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1a592:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a594:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1a598:	b004      	add	sp, #16
   1a59a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a59e:	f7ff bedb 	b.w	1a358 <bt_hci_cmd_send>
   1a5a2:	bf00      	nop
   1a5a4:	00036b37 	.word	0x00036b37
   1a5a8:	00033040 	.word	0x00033040

0001a5ac <le_conn_param_req>:
{
   1a5ac:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a5ae:	68c3      	ldr	r3, [r0, #12]
{
   1a5b0:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a5b2:	78d9      	ldrb	r1, [r3, #3]
   1a5b4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1a5b6:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a5b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a5bc:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a5c0:	7959      	ldrb	r1, [r3, #5]
   1a5c2:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   1a5c4:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a5c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a5ca:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a5ce:	799a      	ldrb	r2, [r3, #6]
   1a5d0:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   1a5d2:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   1a5d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a5d8:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a5dc:	7a1a      	ldrb	r2, [r3, #8]
   1a5de:	7a5b      	ldrb	r3, [r3, #9]
   1a5e0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1a5e4:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   1a5e8:	f001 fd06 	bl	1bff8 <bt_conn_lookup_handle>
	if (!conn) {
   1a5ec:	4604      	mov	r4, r0
   1a5ee:	b978      	cbnz	r0, 1a610 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a5f0:	4b1e      	ldr	r3, [pc, #120]	; (1a66c <le_conn_param_req+0xc0>)
   1a5f2:	491f      	ldr	r1, [pc, #124]	; (1a670 <le_conn_param_req+0xc4>)
   1a5f4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a5f8:	9000      	str	r0, [sp, #0]
   1a5fa:	4603      	mov	r3, r0
   1a5fc:	2201      	movs	r2, #1
   1a5fe:	9503      	str	r5, [sp, #12]
   1a600:	f012 feb9 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a604:	2102      	movs	r1, #2
   1a606:	4628      	mov	r0, r5
   1a608:	f7ff ffa8 	bl	1a55c <le_conn_param_neg_reply>
}
   1a60c:	b006      	add	sp, #24
   1a60e:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   1a610:	a904      	add	r1, sp, #16
   1a612:	f001 fe4b 	bl	1c2ac <le_param_req>
   1a616:	b938      	cbnz	r0, 1a628 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a618:	211e      	movs	r1, #30
   1a61a:	4628      	mov	r0, r5
   1a61c:	f7ff ff9e 	bl	1a55c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a620:	4620      	mov	r0, r4
   1a622:	f013 fa28 	bl	2da76 <bt_conn_unref>
   1a626:	e7f1      	b.n	1a60c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a628:	210e      	movs	r1, #14
   1a62a:	f242 0020 	movw	r0, #8224	; 0x2020
   1a62e:	f7ff fb4b 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1a632:	4605      	mov	r5, r0
   1a634:	2800      	cmp	r0, #0
   1a636:	d0f3      	beq.n	1a620 <le_conn_param_req+0x74>
   1a638:	210e      	movs	r1, #14
   1a63a:	300c      	adds	r0, #12
   1a63c:	f014 fef9 	bl	2f432 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1a640:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   1a642:	8006      	strh	r6, [r0, #0]
   1a644:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a648:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a64c:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a64e:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a650:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1a654:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a656:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1a65a:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a65c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a660:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a662:	f242 0020 	movw	r0, #8224	; 0x2020
   1a666:	f7ff fe77 	bl	1a358 <bt_hci_cmd_send>
   1a66a:	e7d9      	b.n	1a620 <le_conn_param_req+0x74>
   1a66c:	00036736 	.word	0x00036736
   1a670:	00033040 	.word	0x00033040

0001a674 <hci_tx_thread>:
{
   1a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1a678:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1a7c4 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   1a67c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a7c8 <hci_tx_thread+0x154>
{
   1a680:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   1a682:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1a686:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1a68a:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   1a68c:	f36f 3394 	bfc	r3, #14, #7
   1a690:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1a694:	f001 fc78 	bl	1bf88 <bt_conn_prepare_events>
   1a698:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1a69a:	f04f 32ff 	mov.w	r2, #4294967295
   1a69e:	f04f 33ff 	mov.w	r3, #4294967295
   1a6a2:	4629      	mov	r1, r5
   1a6a4:	4847      	ldr	r0, [pc, #284]	; (1a7c4 <hci_tx_thread+0x150>)
   1a6a6:	f00c f9e3 	bl	26a70 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1a6aa:	b160      	cbz	r0, 1a6c6 <hci_tx_thread+0x52>
   1a6ac:	f640 13e6 	movw	r3, #2534	; 0x9e6
   1a6b0:	464a      	mov	r2, r9
   1a6b2:	4946      	ldr	r1, [pc, #280]	; (1a7cc <hci_tx_thread+0x158>)
   1a6b4:	4846      	ldr	r0, [pc, #280]	; (1a7d0 <hci_tx_thread+0x15c>)
   1a6b6:	f010 f8bf 	bl	2a838 <assert_print>
   1a6ba:	4040      	eors	r0, r0
   1a6bc:	f380 8811 	msr	BASEPRI, r0
   1a6c0:	f04f 0003 	mov.w	r0, #3
   1a6c4:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1a6c6:	f04f 0a00 	mov.w	sl, #0
{
   1a6ca:	4e3e      	ldr	r6, [pc, #248]	; (1a7c4 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   1a6cc:	b915      	cbnz	r5, 1a6d4 <hci_tx_thread+0x60>
	z_impl_k_yield();
   1a6ce:	f00b fea9 	bl	26424 <z_impl_k_yield>
	while (1) {
   1a6d2:	e7d8      	b.n	1a686 <hci_tx_thread+0x12>
		switch (ev->state) {
   1a6d4:	68f3      	ldr	r3, [r6, #12]
   1a6d6:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1a6da:	2b01      	cmp	r3, #1
   1a6dc:	d95a      	bls.n	1a794 <hci_tx_thread+0x120>
   1a6de:	2b04      	cmp	r3, #4
   1a6e0:	d162      	bne.n	1a7a8 <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1a6e2:	7b33      	ldrb	r3, [r6, #12]
   1a6e4:	2b00      	cmp	r3, #0
   1a6e6:	d158      	bne.n	1a79a <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1a6e8:	2200      	movs	r2, #0
   1a6ea:	2300      	movs	r3, #0
   1a6ec:	4839      	ldr	r0, [pc, #228]	; (1a7d4 <hci_tx_thread+0x160>)
   1a6ee:	f014 fe45 	bl	2f37c <net_buf_get>
	BT_ASSERT(buf);
   1a6f2:	4604      	mov	r4, r0
   1a6f4:	b960      	cbnz	r0, 1a710 <hci_tx_thread+0x9c>
   1a6f6:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1a6fa:	464a      	mov	r2, r9
   1a6fc:	4936      	ldr	r1, [pc, #216]	; (1a7d8 <hci_tx_thread+0x164>)
   1a6fe:	4834      	ldr	r0, [pc, #208]	; (1a7d0 <hci_tx_thread+0x15c>)
   1a700:	f010 f89a 	bl	2a838 <assert_print>
   1a704:	4040      	eors	r0, r0
   1a706:	f380 8811 	msr	BASEPRI, r0
   1a70a:	f04f 0003 	mov.w	r0, #3
   1a70e:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   1a710:	4f32      	ldr	r7, [pc, #200]	; (1a7dc <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   1a712:	f04f 33ff 	mov.w	r3, #4294967295
   1a716:	f04f 32ff 	mov.w	r2, #4294967295
   1a71a:	4831      	ldr	r0, [pc, #196]	; (1a7e0 <hci_tx_thread+0x16c>)
   1a71c:	f00b fa06 	bl	25b2c <z_impl_k_sem_take>
   1a720:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   1a724:	b183      	cbz	r3, 1a748 <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   1a726:	4b2f      	ldr	r3, [pc, #188]	; (1a7e4 <hci_tx_thread+0x170>)
   1a728:	2201      	movs	r2, #1
   1a72a:	9302      	str	r3, [sp, #8]
   1a72c:	2300      	movs	r3, #0
   1a72e:	492e      	ldr	r1, [pc, #184]	; (1a7e8 <hci_tx_thread+0x174>)
   1a730:	4618      	mov	r0, r3
   1a732:	e9cd 3300 	strd	r3, r3, [sp]
   1a736:	f012 fe1e 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   1a73a:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1a73e:	f005 ff2d 	bl	2059c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1a742:	2300      	movs	r3, #0
   1a744:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1a748:	4620      	mov	r0, r4
   1a74a:	f014 fe4c 	bl	2f3e6 <net_buf_ref>
   1a74e:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   1a752:	4620      	mov	r0, r4
   1a754:	f7ff fdf8 	bl	1a348 <bt_send>
	if (err) {
   1a758:	b1e0      	cbz	r0, 1a794 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a75a:	4b24      	ldr	r3, [pc, #144]	; (1a7ec <hci_tx_thread+0x178>)
   1a75c:	9003      	str	r0, [sp, #12]
   1a75e:	9302      	str	r3, [sp, #8]
   1a760:	2300      	movs	r3, #0
   1a762:	2201      	movs	r2, #1
   1a764:	4618      	mov	r0, r3
   1a766:	e9cd 3300 	strd	r3, r3, [sp]
   1a76a:	491f      	ldr	r1, [pc, #124]	; (1a7e8 <hci_tx_thread+0x174>)
   1a76c:	f012 fe03 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   1a770:	481b      	ldr	r0, [pc, #108]	; (1a7e0 <hci_tx_thread+0x16c>)
   1a772:	f00b f9b5 	bl	25ae0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1a776:	4620      	mov	r0, r4
   1a778:	f005 fe56 	bl	20428 <net_buf_id>
   1a77c:	220c      	movs	r2, #12
   1a77e:	4b1c      	ldr	r3, [pc, #112]	; (1a7f0 <hci_tx_thread+0x17c>)
   1a780:	211f      	movs	r1, #31
   1a782:	fb02 3000 	mla	r0, r2, r0, r3
   1a786:	4622      	mov	r2, r4
   1a788:	8840      	ldrh	r0, [r0, #2]
   1a78a:	f7ff f8e7 	bl	1995c <hci_cmd_done>
		net_buf_unref(buf);
   1a78e:	4620      	mov	r0, r4
   1a790:	f005 ff04 	bl	2059c <net_buf_unref>
	for (; count; ev++, count--) {
   1a794:	3614      	adds	r6, #20
   1a796:	3d01      	subs	r5, #1
   1a798:	e798      	b.n	1a6cc <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1a79a:	2b01      	cmp	r3, #1
   1a79c:	d1fa      	bne.n	1a794 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   1a79e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1a7a0:	3838      	subs	r0, #56	; 0x38
   1a7a2:	f001 ff83 	bl	1c6ac <bt_conn_process_tx>
   1a7a6:	e7f5      	b.n	1a794 <hci_tx_thread+0x120>
		switch (ev->state) {
   1a7a8:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1a7aa:	4b12      	ldr	r3, [pc, #72]	; (1a7f4 <hci_tx_thread+0x180>)
   1a7ac:	2202      	movs	r2, #2
   1a7ae:	e9cd a301 	strd	sl, r3, [sp, #4]
   1a7b2:	2300      	movs	r3, #0
   1a7b4:	490c      	ldr	r1, [pc, #48]	; (1a7e8 <hci_tx_thread+0x174>)
   1a7b6:	4618      	mov	r0, r3
   1a7b8:	f8cd a000 	str.w	sl, [sp]
   1a7bc:	f012 fddb 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
   1a7c0:	e7e8      	b.n	1a794 <hci_tx_thread+0x120>
   1a7c2:	bf00      	nop
   1a7c4:	20008520 	.word	0x20008520
   1a7c8:	000367c4 	.word	0x000367c4
   1a7cc:	00036951 	.word	0x00036951
   1a7d0:	00036811 	.word	0x00036811
   1a7d4:	20008144 	.word	0x20008144
   1a7d8:	00037c16 	.word	0x00037c16
   1a7dc:	20008000 	.word	0x20008000
   1a7e0:	20008120 	.word	0x20008120
   1a7e4:	00036b51 	.word	0x00036b51
   1a7e8:	00033040 	.word	0x00033040
   1a7ec:	00036a86 	.word	0x00036a86
   1a7f0:	20030930 	.word	0x20030930
   1a7f4:	00036b6c 	.word	0x00036b6c

0001a7f8 <hci_event_prio>:
{
   1a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7fc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1a7fe:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1a802:	4630      	mov	r0, r6
   1a804:	f014 fe55 	bl	2f4b2 <net_buf_simple_headroom>
	state->len = buf->len;
   1a808:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   1a80c:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1a80e:	f1b8 0f01 	cmp.w	r8, #1
   1a812:	d80c      	bhi.n	1a82e <hci_event_prio+0x36>
   1a814:	f640 537b 	movw	r3, #3451	; 0xd7b
   1a818:	4a1b      	ldr	r2, [pc, #108]	; (1a888 <hci_event_prio+0x90>)
   1a81a:	491c      	ldr	r1, [pc, #112]	; (1a88c <hci_event_prio+0x94>)
   1a81c:	481c      	ldr	r0, [pc, #112]	; (1a890 <hci_event_prio+0x98>)
   1a81e:	f010 f80b 	bl	2a838 <assert_print>
   1a822:	4040      	eors	r0, r0
   1a824:	f380 8811 	msr	BASEPRI, r0
   1a828:	f04f 0003 	mov.w	r0, #3
   1a82c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1a82e:	4630      	mov	r0, r6
   1a830:	2102      	movs	r1, #2
   1a832:	f014 fe2e 	bl	2f492 <net_buf_simple_pull_mem>
   1a836:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a838:	7800      	ldrb	r0, [r0, #0]
   1a83a:	f012 fd5a 	bl	2d2f2 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1a83e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a840:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1a842:	d40c      	bmi.n	1a85e <hci_event_prio+0x66>
   1a844:	f640 537f 	movw	r3, #3455	; 0xd7f
   1a848:	4a0f      	ldr	r2, [pc, #60]	; (1a888 <hci_event_prio+0x90>)
   1a84a:	4912      	ldr	r1, [pc, #72]	; (1a894 <hci_event_prio+0x9c>)
   1a84c:	4810      	ldr	r0, [pc, #64]	; (1a890 <hci_event_prio+0x98>)
   1a84e:	f00f fff3 	bl	2a838 <assert_print>
   1a852:	4040      	eors	r0, r0
   1a854:	f380 8811 	msr	BASEPRI, r0
   1a858:	f04f 0003 	mov.w	r0, #3
   1a85c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1a85e:	2305      	movs	r3, #5
   1a860:	4621      	mov	r1, r4
   1a862:	4a0d      	ldr	r2, [pc, #52]	; (1a898 <hci_event_prio+0xa0>)
   1a864:	7838      	ldrb	r0, [r7, #0]
   1a866:	f7fe ff37 	bl	196d8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a86a:	07b3      	lsls	r3, r6, #30
   1a86c:	d507      	bpl.n	1a87e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1a86e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1a870:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1a874:	fa13 f585 	uxtah	r5, r3, r5
   1a878:	60e5      	str	r5, [r4, #12]
}
   1a87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1a87e:	4620      	mov	r0, r4
}
   1a880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1a884:	f005 be8a 	b.w	2059c <net_buf_unref>
   1a888:	000367c4 	.word	0x000367c4
   1a88c:	000367f8 	.word	0x000367f8
   1a890:	00036811 	.word	0x00036811
   1a894:	00036b8d 	.word	0x00036b8d
   1a898:	00033bdc 	.word	0x00033bdc

0001a89c <bt_recv>:
{
   1a89c:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1a89e:	7e03      	ldrb	r3, [r0, #24]
   1a8a0:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   1a8a2:	2b01      	cmp	r3, #1
{
   1a8a4:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   1a8a6:	d006      	beq.n	1a8b6 <bt_recv+0x1a>
   1a8a8:	2b03      	cmp	r3, #3
   1a8aa:	d112      	bne.n	1a8d2 <bt_recv+0x36>
			rx_queue_put(buf);
   1a8ac:	f7fe fe76 	bl	1959c <rx_queue_put>
		return 0;
   1a8b0:	2000      	movs	r0, #0
}
   1a8b2:	b005      	add	sp, #20
   1a8b4:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a8b6:	68c3      	ldr	r3, [r0, #12]
   1a8b8:	7818      	ldrb	r0, [r3, #0]
   1a8ba:	f012 fd1a 	bl	2d2f2 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1a8be:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a8c0:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1a8c2:	d502      	bpl.n	1a8ca <bt_recv+0x2e>
			hci_event_prio(buf);
   1a8c4:	4620      	mov	r0, r4
   1a8c6:	f7ff ff97 	bl	1a7f8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a8ca:	07ab      	lsls	r3, r5, #30
   1a8cc:	d5f0      	bpl.n	1a8b0 <bt_recv+0x14>
			rx_queue_put(buf);
   1a8ce:	4620      	mov	r0, r4
   1a8d0:	e7ec      	b.n	1a8ac <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   1a8d2:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1a8d4:	4b07      	ldr	r3, [pc, #28]	; (1a8f4 <bt_recv+0x58>)
   1a8d6:	2201      	movs	r2, #1
   1a8d8:	9302      	str	r3, [sp, #8]
   1a8da:	2300      	movs	r3, #0
   1a8dc:	4906      	ldr	r1, [pc, #24]	; (1a8f8 <bt_recv+0x5c>)
   1a8de:	4618      	mov	r0, r3
   1a8e0:	e9cd 3300 	strd	r3, r3, [sp]
   1a8e4:	f012 fd47 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1a8e8:	4620      	mov	r0, r4
   1a8ea:	f005 fe57 	bl	2059c <net_buf_unref>
		return -EINVAL;
   1a8ee:	f06f 0015 	mvn.w	r0, #21
   1a8f2:	e7de      	b.n	1a8b2 <bt_recv+0x16>
   1a8f4:	00036ba6 	.word	0x00036ba6
   1a8f8:	00033040 	.word	0x00033040

0001a8fc <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1a8fc:	4a08      	ldr	r2, [pc, #32]	; (1a920 <bt_hci_driver_register+0x24>)
{
   1a8fe:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1a900:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   1a904:	b930      	cbnz	r0, 1a914 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1a906:	68d9      	ldr	r1, [r3, #12]
   1a908:	b139      	cbz	r1, 1a91a <bt_hci_driver_register+0x1e>
   1a90a:	6959      	ldr	r1, [r3, #20]
   1a90c:	b129      	cbz	r1, 1a91a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1a90e:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   1a912:	4770      	bx	lr
		return -EALREADY;
   1a914:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a918:	4770      	bx	lr
		return -EINVAL;
   1a91a:	f06f 0015 	mvn.w	r0, #21
}
   1a91e:	4770      	bx	lr
   1a920:	20008000 	.word	0x20008000

0001a924 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a924:	2104      	movs	r1, #4
   1a926:	4801      	ldr	r0, [pc, #4]	; (1a92c <bt_finalize_init+0x8>)
   1a928:	f012 bd0e 	b.w	2d348 <atomic_or>
   1a92c:	200080cc 	.word	0x200080cc

0001a930 <init_work>:
{
   1a930:	b510      	push	{r4, lr}
	err = bt_init();
   1a932:	f7ee fddd 	bl	94f0 <bt_init>
	if (ready_cb) {
   1a936:	4b03      	ldr	r3, [pc, #12]	; (1a944 <init_work+0x14>)
   1a938:	681b      	ldr	r3, [r3, #0]
   1a93a:	b113      	cbz	r3, 1a942 <init_work+0x12>
}
   1a93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1a940:	4718      	bx	r3
}
   1a942:	bd10      	pop	{r4, pc}
   1a944:	200309a8 	.word	0x200309a8

0001a948 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1a948:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1a94a:	4e38      	ldr	r6, [pc, #224]	; (1aa2c <bt_enable+0xe4>)
{
   1a94c:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   1a94e:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
{
   1a952:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   1a954:	b96b      	cbnz	r3, 1a972 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   1a956:	4a36      	ldr	r2, [pc, #216]	; (1aa30 <bt_enable+0xe8>)
   1a958:	4618      	mov	r0, r3
   1a95a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a95e:	4935      	ldr	r1, [pc, #212]	; (1aa34 <bt_enable+0xec>)
   1a960:	2201      	movs	r2, #1
   1a962:	9300      	str	r3, [sp, #0]
   1a964:	f012 fd07 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1a968:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1a96c:	4628      	mov	r0, r5
   1a96e:	b009      	add	sp, #36	; 0x24
   1a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a972:	f06f 0102 	mvn.w	r1, #2
   1a976:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   1a97a:	f012 fd0b 	bl	2d394 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a97e:	2101      	movs	r1, #1
   1a980:	f012 fce2 	bl	2d348 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1a984:	ea10 0401 	ands.w	r4, r0, r1
   1a988:	d14d      	bne.n	1aa26 <bt_enable+0xde>
	ready_cb = cb;
   1a98a:	4b2b      	ldr	r3, [pc, #172]	; (1aa38 <bt_enable+0xf0>)
   1a98c:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a98e:	460a      	mov	r2, r1
   1a990:	f506 7090 	add.w	r0, r6, #288	; 0x120
   1a994:	f016 fafc 	bl	30f90 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1a998:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   1a99c:	f016 fad7 	bl	30f4e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a9a0:	2200      	movs	r2, #0
   1a9a2:	2300      	movs	r3, #0
   1a9a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a9a8:	f06f 0308 	mvn.w	r3, #8
   1a9ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a9b0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a9b4:	e9cd 4400 	strd	r4, r4, [sp]
   1a9b8:	4b20      	ldr	r3, [pc, #128]	; (1aa3c <bt_enable+0xf4>)
   1a9ba:	4921      	ldr	r1, [pc, #132]	; (1aa40 <bt_enable+0xf8>)
   1a9bc:	9404      	str	r4, [sp, #16]
   1a9be:	4821      	ldr	r0, [pc, #132]	; (1aa44 <bt_enable+0xfc>)
   1a9c0:	f00a fefe 	bl	257c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a9c4:	4920      	ldr	r1, [pc, #128]	; (1aa48 <bt_enable+0x100>)
   1a9c6:	481f      	ldr	r0, [pc, #124]	; (1aa44 <bt_enable+0xfc>)
   1a9c8:	f00a feac 	bl	25724 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1a9cc:	481f      	ldr	r0, [pc, #124]	; (1aa4c <bt_enable+0x104>)
   1a9ce:	f016 fb9f 	bl	31110 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1a9d2:	f06f 0307 	mvn.w	r3, #7
   1a9d6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1a9da:	491d      	ldr	r1, [pc, #116]	; (1aa50 <bt_enable+0x108>)
   1a9dc:	481b      	ldr	r0, [pc, #108]	; (1aa4c <bt_enable+0x104>)
   1a9de:	9400      	str	r4, [sp, #0]
   1a9e0:	f00b fa00 	bl	25de4 <k_work_queue_start>
   1a9e4:	491b      	ldr	r1, [pc, #108]	; (1aa54 <bt_enable+0x10c>)
   1a9e6:	4819      	ldr	r0, [pc, #100]	; (1aa4c <bt_enable+0x104>)
   1a9e8:	f00a fe9c 	bl	25724 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1a9ec:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
   1a9f0:	68db      	ldr	r3, [r3, #12]
   1a9f2:	4798      	blx	r3
	if (err) {
   1a9f4:	4605      	mov	r5, r0
   1a9f6:	b158      	cbz	r0, 1aa10 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   1a9f8:	4b17      	ldr	r3, [pc, #92]	; (1aa58 <bt_enable+0x110>)
   1a9fa:	9003      	str	r0, [sp, #12]
   1a9fc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1aa00:	2201      	movs	r2, #1
   1aa02:	4623      	mov	r3, r4
   1aa04:	4620      	mov	r0, r4
   1aa06:	490b      	ldr	r1, [pc, #44]	; (1aa34 <bt_enable+0xec>)
   1aa08:	9400      	str	r4, [sp, #0]
   1aa0a:	f012 fcb4 	bl	2d376 <z_log_msg_runtime_create.constprop.0>
		return err;
   1aa0e:	e7ad      	b.n	1a96c <bt_enable+0x24>
	if (!cb) {
   1aa10:	b927      	cbnz	r7, 1aa1c <bt_enable+0xd4>
}
   1aa12:	b009      	add	sp, #36	; 0x24
   1aa14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   1aa18:	f7ee bd6a 	b.w	94f0 <bt_init>
	k_work_submit(&bt_dev.init);
   1aa1c:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   1aa20:	f00b f9da 	bl	25dd8 <k_work_submit>
	return 0;
   1aa24:	e7a2      	b.n	1a96c <bt_enable+0x24>
		return -EALREADY;
   1aa26:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1aa2a:	e79f      	b.n	1a96c <bt_enable+0x24>
   1aa2c:	20008000 	.word	0x20008000
   1aa30:	00036ca5 	.word	0x00036ca5
   1aa34:	00033040 	.word	0x00033040
   1aa38:	200309a8 	.word	0x200309a8
   1aa3c:	0001a675 	.word	0x0001a675
   1aa40:	200534c0 	.word	0x200534c0
   1aa44:	20009dd8 	.word	0x20009dd8
   1aa48:	00036cbe 	.word	0x00036cbe
   1aa4c:	20009e80 	.word	0x20009e80
   1aa50:	200538c0 	.word	0x200538c0
   1aa54:	00036cc4 	.word	0x00036cc4
   1aa58:	00036cca 	.word	0x00036cca

0001aa5c <bt_is_ready>:
   1aa5c:	4b02      	ldr	r3, [pc, #8]	; (1aa68 <bt_is_ready+0xc>)
   1aa5e:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1aa62:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1aa66:	4770      	bx	lr
   1aa68:	200080cc 	.word	0x200080cc

0001aa6c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1aa6c:	4800      	ldr	r0, [pc, #0]	; (1aa70 <bt_get_name+0x4>)
   1aa6e:	4770      	bx	lr
   1aa70:	00034d31 	.word	0x00034d31

0001aa74 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa76:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1aa78:	2500      	movs	r5, #0
   1aa7a:	4f09      	ldr	r7, [pc, #36]	; (1aaa0 <id_find+0x2c>)
   1aa7c:	79fb      	ldrb	r3, [r7, #7]
   1aa7e:	b2ec      	uxtb	r4, r5
   1aa80:	42a3      	cmp	r3, r4
   1aa82:	d802      	bhi.n	1aa8a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1aa84:	f06f 0001 	mvn.w	r0, #1
   1aa88:	e009      	b.n	1aa9e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1aa8a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1aa8e:	4630      	mov	r0, r6
   1aa90:	4439      	add	r1, r7
   1aa92:	f012 fd28 	bl	2d4e6 <bt_addr_le_eq>
   1aa96:	3501      	adds	r5, #1
   1aa98:	2800      	cmp	r0, #0
   1aa9a:	d0ef      	beq.n	1aa7c <id_find+0x8>
   1aa9c:	4620      	mov	r0, r4
}
   1aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aaa0:	20008000 	.word	0x20008000

0001aaa4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1aaa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1aaa6:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1aaa8:	460d      	mov	r5, r1
   1aaaa:	b171      	cbz	r1, 1aaca <id_create.constprop.0+0x26>
   1aaac:	4628      	mov	r0, r5
   1aaae:	4912      	ldr	r1, [pc, #72]	; (1aaf8 <id_create.constprop.0+0x54>)
   1aab0:	f012 fd19 	bl	2d4e6 <bt_addr_le_eq>
   1aab4:	b948      	cbnz	r0, 1aaca <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1aab6:	4629      	mov	r1, r5
   1aab8:	4810      	ldr	r0, [pc, #64]	; (1aafc <id_create.constprop.0+0x58>)
   1aaba:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1aabe:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1aac0:	f012 fd1e 	bl	2d500 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1aac4:	2000      	movs	r0, #0
}
   1aac6:	b003      	add	sp, #12
   1aac8:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1aaca:	4668      	mov	r0, sp
   1aacc:	f012 fc03 	bl	2d2d6 <bt_addr_le_create_static>
			if (err) {
   1aad0:	2800      	cmp	r0, #0
   1aad2:	d1f8      	bne.n	1aac6 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   1aad4:	4668      	mov	r0, sp
   1aad6:	f7ff ffcd 	bl	1aa74 <id_find>
   1aada:	2800      	cmp	r0, #0
   1aadc:	daf5      	bge.n	1aaca <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1aade:	4b07      	ldr	r3, [pc, #28]	; (1aafc <id_create.constprop.0+0x58>)
   1aae0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1aae4:	4669      	mov	r1, sp
   1aae6:	4418      	add	r0, r3
   1aae8:	f012 fd0a 	bl	2d500 <bt_addr_le_copy>
		if (addr) {
   1aaec:	2d00      	cmp	r5, #0
   1aaee:	d0e9      	beq.n	1aac4 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1aaf0:	4601      	mov	r1, r0
   1aaf2:	4628      	mov	r0, r5
   1aaf4:	e7e4      	b.n	1aac0 <id_create.constprop.0+0x1c>
   1aaf6:	bf00      	nop
   1aaf8:	0003668a 	.word	0x0003668a
   1aafc:	20008000 	.word	0x20008000

0001ab00 <set_random_address>:
{
   1ab00:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1ab02:	2206      	movs	r2, #6
   1ab04:	4911      	ldr	r1, [pc, #68]	; (1ab4c <set_random_address+0x4c>)
   1ab06:	4605      	mov	r5, r0
   1ab08:	f016 fe81 	bl	3180e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1ab0c:	b1c8      	cbz	r0, 1ab42 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1ab0e:	2106      	movs	r1, #6
   1ab10:	f242 0005 	movw	r0, #8197	; 0x2005
   1ab14:	f7ff f8d8 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1ab18:	4604      	mov	r4, r0
   1ab1a:	b1a0      	cbz	r0, 1ab46 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ab1c:	2206      	movs	r2, #6
   1ab1e:	4629      	mov	r1, r5
   1ab20:	300c      	adds	r0, #12
   1ab22:	f014 fc8c 	bl	2f43e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1ab26:	2200      	movs	r2, #0
   1ab28:	4621      	mov	r1, r4
   1ab2a:	f242 0005 	movw	r0, #8197	; 0x2005
   1ab2e:	f7ff f905 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1ab32:	b938      	cbnz	r0, 1ab44 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   1ab34:	4805      	ldr	r0, [pc, #20]	; (1ab4c <set_random_address+0x4c>)
   1ab36:	4629      	mov	r1, r5
   1ab38:	f012 fcdd 	bl	2d4f6 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1ab3c:	2301      	movs	r3, #1
   1ab3e:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   1ab42:	2000      	movs	r0, #0
}
   1ab44:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1ab46:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ab4a:	e7fb      	b.n	1ab44 <set_random_address+0x44>
   1ab4c:	20008061 	.word	0x20008061

0001ab50 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ab50:	4b08      	ldr	r3, [pc, #32]	; (1ab74 <bt_id_pending_keys_update+0x24>)
   1ab52:	e8d3 2fef 	ldaex	r2, [r3]
   1ab56:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1ab5a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1ab5e:	2800      	cmp	r0, #0
   1ab60:	d1f7      	bne.n	1ab52 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1ab62:	0413      	lsls	r3, r2, #16
   1ab64:	d504      	bpl.n	1ab70 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1ab66:	2200      	movs	r2, #0
   1ab68:	2002      	movs	r0, #2
   1ab6a:	4903      	ldr	r1, [pc, #12]	; (1ab78 <bt_id_pending_keys_update+0x28>)
   1ab6c:	f005 bb28 	b.w	201c0 <bt_keys_foreach_type>
}
   1ab70:	4770      	bx	lr
   1ab72:	bf00      	nop
   1ab74:	200080cc 	.word	0x200080cc
   1ab78:	0002d6d7 	.word	0x0002d6d7

0001ab7c <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   1ab7c:	2300      	movs	r3, #0
{
   1ab7e:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1ab80:	4905      	ldr	r1, [pc, #20]	; (1ab98 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   1ab82:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1ab86:	466a      	mov	r2, sp
   1ab88:	2002      	movs	r0, #2
   1ab8a:	f005 fb19 	bl	201c0 <bt_keys_foreach_type>
}
   1ab8e:	9801      	ldr	r0, [sp, #4]
   1ab90:	b003      	add	sp, #12
   1ab92:	f85d fb04 	ldr.w	pc, [sp], #4
   1ab96:	bf00      	nop
   1ab98:	0002d5fb 	.word	0x0002d5fb

0001ab9c <bt_id_add>:
{
   1ab9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   1ab9e:	4605      	mov	r5, r0
{
   1aba0:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   1aba2:	b170      	cbz	r0, 1abc2 <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1aba4:	4c59      	ldr	r4, [pc, #356]	; (1ad0c <bt_id_add+0x170>)
   1aba6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1abaa:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1abae:	b10a      	cbz	r2, 1abb4 <bt_id_add+0x18>
   1abb0:	429a      	cmp	r2, r3
   1abb2:	d208      	bcs.n	1abc6 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   1abb4:	3301      	adds	r3, #1
   1abb6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1abba:	7a2b      	ldrb	r3, [r5, #8]
   1abbc:	f043 0304 	orr.w	r3, r3, #4
   1abc0:	722b      	strb	r3, [r5, #8]
}
   1abc2:	b007      	add	sp, #28
   1abc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1abc6:	2100      	movs	r1, #0
   1abc8:	2206      	movs	r2, #6
   1abca:	4608      	mov	r0, r1
   1abcc:	f001 fc5a 	bl	1c484 <bt_conn_lookup_state_le>
	if (conn) {
   1abd0:	4606      	mov	r6, r0
   1abd2:	b188      	cbz	r0, 1abf8 <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1abd4:	34cc      	adds	r4, #204	; 0xcc
   1abd6:	e8d4 3fef 	ldaex	r3, [r4]
   1abda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1abde:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1abe2:	2a00      	cmp	r2, #0
   1abe4:	d1f7      	bne.n	1abd6 <bt_id_add+0x3a>
	keys->state |= flag;
   1abe6:	7a2b      	ldrb	r3, [r5, #8]
   1abe8:	f043 0301 	orr.w	r3, r3, #1
   1abec:	722b      	strb	r3, [r5, #8]
}
   1abee:	b007      	add	sp, #28
   1abf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1abf4:	f012 bf3f 	b.w	2da76 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1abf8:	4601      	mov	r1, r0
   1abfa:	4845      	ldr	r0, [pc, #276]	; (1ad10 <bt_id_add+0x174>)
   1abfc:	f000 fbdc 	bl	1b3b8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1ac00:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ac04:	b163      	cbz	r3, 1ac20 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1ac06:	4630      	mov	r0, r6
   1ac08:	f012 fccc 	bl	2d5a4 <addr_res_enable>
		if (err) {
   1ac0c:	b140      	cbz	r0, 1ac20 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   1ac0e:	4b41      	ldr	r3, [pc, #260]	; (1ad14 <bt_id_add+0x178>)
   1ac10:	2202      	movs	r2, #2
   1ac12:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ac16:	4633      	mov	r3, r6
   1ac18:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   1ac1a:	4618      	mov	r0, r3
   1ac1c:	493e      	ldr	r1, [pc, #248]	; (1ad18 <bt_id_add+0x17c>)
   1ac1e:	e054      	b.n	1acca <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1ac20:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   1ac24:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1ac28:	429a      	cmp	r2, r3
   1ac2a:	d12b      	bne.n	1ac84 <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1ac2c:	2600      	movs	r6, #0
   1ac2e:	4b3b      	ldr	r3, [pc, #236]	; (1ad1c <bt_id_add+0x180>)
   1ac30:	2202      	movs	r2, #2
   1ac32:	4630      	mov	r0, r6
   1ac34:	4938      	ldr	r1, [pc, #224]	; (1ad18 <bt_id_add+0x17c>)
   1ac36:	9302      	str	r3, [sp, #8]
   1ac38:	e9cd 6600 	strd	r6, r6, [sp]
   1ac3c:	4633      	mov	r3, r6
   1ac3e:	f012 fca2 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1ac42:	4632      	mov	r2, r6
   1ac44:	4631      	mov	r1, r6
   1ac46:	f242 0029 	movw	r0, #8233	; 0x2029
   1ac4a:	f7ff f877 	bl	19d3c <bt_hci_cmd_send_sync>
		if (err) {
   1ac4e:	b130      	cbz	r0, 1ac5e <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   1ac50:	4b33      	ldr	r3, [pc, #204]	; (1ad20 <bt_id_add+0x184>)
   1ac52:	9600      	str	r6, [sp, #0]
   1ac54:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ac58:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   1ac5a:	2201      	movs	r2, #1
   1ac5c:	e7dd      	b.n	1ac1a <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   1ac5e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ac62:	3301      	adds	r3, #1
   1ac64:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1ac68:	7a2b      	ldrb	r3, [r5, #8]
   1ac6a:	f043 0304 	orr.w	r3, r3, #4
   1ac6e:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1ac70:	2001      	movs	r0, #1
   1ac72:	f012 fc97 	bl	2d5a4 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1ac76:	2100      	movs	r1, #0
   1ac78:	482a      	ldr	r0, [pc, #168]	; (1ad24 <bt_id_add+0x188>)
}
   1ac7a:	b007      	add	sp, #28
   1ac7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1ac80:	f000 bb9a 	b.w	1b3b8 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1ac84:	462a      	mov	r2, r5
   1ac86:	1c6f      	adds	r7, r5, #1
   1ac88:	4639      	mov	r1, r7
   1ac8a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1ac8e:	f012 fc3e 	bl	2d50e <hci_id_add>
	if (err) {
   1ac92:	4606      	mov	r6, r0
   1ac94:	b128      	cbz	r0, 1aca2 <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   1ac96:	4b24      	ldr	r3, [pc, #144]	; (1ad28 <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   1ac98:	9302      	str	r3, [sp, #8]
   1ac9a:	2300      	movs	r3, #0
   1ac9c:	e9cd 3300 	strd	r3, r3, [sp]
   1aca0:	e7db      	b.n	1ac5a <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   1aca2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1aca6:	3301      	adds	r3, #1
   1aca8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1acac:	7a2b      	ldrb	r3, [r5, #8]
   1acae:	f043 0304 	orr.w	r3, r3, #4
   1acb2:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1acb4:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   1acb8:	f013 0304 	ands.w	r3, r3, #4
   1acbc:	d108      	bne.n	1acd0 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   1acbe:	4a1b      	ldr	r2, [pc, #108]	; (1ad2c <bt_id_add+0x190>)
   1acc0:	4915      	ldr	r1, [pc, #84]	; (1ad18 <bt_id_add+0x17c>)
   1acc2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1acc6:	2202      	movs	r2, #2
   1acc8:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   1acca:	f012 fc5c 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
		goto done;
   1acce:	e7cf      	b.n	1ac70 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   1acd0:	4639      	mov	r1, r7
   1acd2:	a804      	add	r0, sp, #16
   1acd4:	f012 fc14 	bl	2d500 <bt_addr_le_copy>
	cp.mode = mode;
   1acd8:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1acda:	2108      	movs	r1, #8
   1acdc:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1ace0:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1ace4:	f7fe fff0 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1ace8:	4604      	mov	r4, r0
   1acea:	b160      	cbz	r0, 1ad06 <bt_id_add+0x16a>
   1acec:	2208      	movs	r2, #8
   1acee:	a904      	add	r1, sp, #16
   1acf0:	300c      	adds	r0, #12
   1acf2:	f014 fba4 	bl	2f43e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1acf6:	4632      	mov	r2, r6
   1acf8:	4621      	mov	r1, r4
   1acfa:	f242 004e 	movw	r0, #8270	; 0x204e
   1acfe:	f7ff f81d 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1ad02:	2800      	cmp	r0, #0
   1ad04:	d0b4      	beq.n	1ac70 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   1ad06:	4b0a      	ldr	r3, [pc, #40]	; (1ad30 <bt_id_add+0x194>)
   1ad08:	e7c6      	b.n	1ac98 <bt_id_add+0xfc>
   1ad0a:	bf00      	nop
   1ad0c:	20008000 	.word	0x20008000
   1ad10:	0002d655 	.word	0x0002d655
   1ad14:	00036d1c 	.word	0x00036d1c
   1ad18:	00033058 	.word	0x00033058
   1ad1c:	00036d41 	.word	0x00036d41
   1ad20:	00036d72 	.word	0x00036d72
   1ad24:	0002d5d5 	.word	0x0002d5d5
   1ad28:	00036d92 	.word	0x00036d92
   1ad2c:	00036db2 	.word	0x00036db2
   1ad30:	00036ddc 	.word	0x00036ddc

0001ad34 <bt_id_del>:
{
   1ad34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   1ad38:	4605      	mov	r5, r0
   1ad3a:	b348      	cbz	r0, 1ad90 <bt_id_del+0x5c>
	if (!bt_dev.le.rl_size ||
   1ad3c:	4c46      	ldr	r4, [pc, #280]	; (1ae58 <bt_id_del+0x124>)
   1ad3e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1ad42:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   1ad46:	b1da      	cbz	r2, 1ad80 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1ad48:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1ad4a:	4293      	cmp	r3, r2
   1ad4c:	dc19      	bgt.n	1ad82 <bt_id_del+0x4e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1ad4e:	2100      	movs	r1, #0
   1ad50:	2206      	movs	r2, #6
   1ad52:	4608      	mov	r0, r1
   1ad54:	f001 fb96 	bl	1c484 <bt_conn_lookup_state_le>
	if (conn) {
   1ad58:	4606      	mov	r6, r0
   1ad5a:	b1e0      	cbz	r0, 1ad96 <bt_id_del+0x62>
   1ad5c:	34cc      	adds	r4, #204	; 0xcc
   1ad5e:	e8d4 3fef 	ldaex	r3, [r4]
   1ad62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1ad66:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1ad6a:	2a00      	cmp	r2, #0
   1ad6c:	d1f7      	bne.n	1ad5e <bt_id_del+0x2a>
	keys->state |= flag;
   1ad6e:	7a2b      	ldrb	r3, [r5, #8]
   1ad70:	f043 0302 	orr.w	r3, r3, #2
   1ad74:	722b      	strb	r3, [r5, #8]
}
   1ad76:	b004      	add	sp, #16
   1ad78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1ad7c:	f012 be7b 	b.w	2da76 <bt_conn_unref>
		if (bt_dev.le.rl_entries > 0) {
   1ad80:	b113      	cbz	r3, 1ad88 <bt_id_del+0x54>
			bt_dev.le.rl_entries--;
   1ad82:	3b01      	subs	r3, #1
   1ad84:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1ad88:	7a2b      	ldrb	r3, [r5, #8]
   1ad8a:	f023 0304 	bic.w	r3, r3, #4
   1ad8e:	722b      	strb	r3, [r5, #8]
}
   1ad90:	b004      	add	sp, #16
   1ad92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1ad96:	4601      	mov	r1, r0
   1ad98:	4830      	ldr	r0, [pc, #192]	; (1ae5c <bt_id_del+0x128>)
   1ad9a:	f000 fb0d 	bl	1b3b8 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1ad9e:	4630      	mov	r0, r6
   1ada0:	f012 fc00 	bl	2d5a4 <addr_res_enable>
	if (err) {
   1ada4:	4607      	mov	r7, r0
   1ada6:	b1b8      	cbz	r0, 1add8 <bt_id_del+0xa4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   1ada8:	4b2d      	ldr	r3, [pc, #180]	; (1ae60 <bt_id_del+0x12c>)
   1adaa:	9003      	str	r0, [sp, #12]
   1adac:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1adb0:	2201      	movs	r2, #1
   1adb2:	4633      	mov	r3, r6
   1adb4:	4630      	mov	r0, r6
   1adb6:	492b      	ldr	r1, [pc, #172]	; (1ae64 <bt_id_del+0x130>)
   1adb8:	9600      	str	r6, [sp, #0]
   1adba:	f012 fbe4 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   1adbe:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1adc2:	b113      	cbz	r3, 1adca <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1adc4:	2001      	movs	r0, #1
   1adc6:	f012 fbed 	bl	2d5a4 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1adca:	2100      	movs	r1, #0
   1adcc:	4826      	ldr	r0, [pc, #152]	; (1ae68 <bt_id_del+0x134>)
}
   1adce:	b004      	add	sp, #16
   1add0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1add4:	f000 baf0 	b.w	1b3b8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1add8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1addc:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1ade0:	429a      	cmp	r2, r3
   1ade2:	d20c      	bcs.n	1adfe <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   1ade4:	3b01      	subs	r3, #1
   1ade6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1adea:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1adec:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1adee:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1adf2:	2002      	movs	r0, #2
   1adf4:	491d      	ldr	r1, [pc, #116]	; (1ae6c <bt_id_del+0x138>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   1adf6:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1adf8:	f005 f9e2 	bl	201c0 <bt_keys_foreach_type>
		goto done;
   1adfc:	e7df      	b.n	1adbe <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1adfe:	2107      	movs	r1, #7
   1ae00:	f242 0028 	movw	r0, #8232	; 0x2028
   1ae04:	f7fe ff60 	bl	19cc8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1ae08:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   1ae0c:	4606      	mov	r6, r0
   1ae0e:	b950      	cbnz	r0, 1ae26 <bt_id_del+0xf2>
		LOG_ERR("Failed to remove IRK from controller");
   1ae10:	4b17      	ldr	r3, [pc, #92]	; (1ae70 <bt_id_del+0x13c>)
   1ae12:	2201      	movs	r2, #1
   1ae14:	9302      	str	r3, [sp, #8]
   1ae16:	2300      	movs	r3, #0
   1ae18:	4912      	ldr	r1, [pc, #72]	; (1ae64 <bt_id_del+0x130>)
   1ae1a:	4618      	mov	r0, r3
   1ae1c:	e9cd 3300 	strd	r3, r3, [sp]
   1ae20:	f012 fbb1 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
		goto done;
   1ae24:	e7cb      	b.n	1adbe <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
   1ae26:	2107      	movs	r1, #7
   1ae28:	300c      	adds	r0, #12
   1ae2a:	f014 fb02 	bl	2f432 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1ae2e:	4641      	mov	r1, r8
   1ae30:	f012 fb66 	bl	2d500 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1ae34:	463a      	mov	r2, r7
   1ae36:	4631      	mov	r1, r6
   1ae38:	f242 0028 	movw	r0, #8232	; 0x2028
   1ae3c:	f7fe ff7e 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1ae40:	2800      	cmp	r0, #0
   1ae42:	d1e5      	bne.n	1ae10 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   1ae44:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ae48:	3b01      	subs	r3, #1
   1ae4a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1ae4e:	7a2b      	ldrb	r3, [r5, #8]
   1ae50:	f023 0304 	bic.w	r3, r3, #4
   1ae54:	722b      	strb	r3, [r5, #8]
   1ae56:	e7b2      	b.n	1adbe <bt_id_del+0x8a>
   1ae58:	20008000 	.word	0x20008000
   1ae5c:	0002d655 	.word	0x0002d655
   1ae60:	00036df7 	.word	0x00036df7
   1ae64:	00033058 	.word	0x00033058
   1ae68:	0002d5d5 	.word	0x0002d5d5
   1ae6c:	0002d571 	.word	0x0002d571
   1ae70:	00036e24 	.word	0x00036e24

0001ae74 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1ae74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ae76:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1ae78:	4604      	mov	r4, r0
   1ae7a:	b920      	cbnz	r0, 1ae86 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1ae7c:	b31d      	cbz	r5, 1aec6 <bt_id_create+0x52>
			return -EINVAL;
   1ae7e:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1ae82:	b004      	add	sp, #16
   1ae84:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1ae86:	4921      	ldr	r1, [pc, #132]	; (1af0c <bt_id_create+0x98>)
   1ae88:	f012 fb2d 	bl	2d4e6 <bt_addr_le_eq>
   1ae8c:	2800      	cmp	r0, #0
   1ae8e:	d1f5      	bne.n	1ae7c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1ae90:	7823      	ldrb	r3, [r4, #0]
   1ae92:	2b01      	cmp	r3, #1
   1ae94:	d104      	bne.n	1aea0 <bt_id_create+0x2c>
   1ae96:	79a3      	ldrb	r3, [r4, #6]
   1ae98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ae9c:	2bc0      	cmp	r3, #192	; 0xc0
   1ae9e:	d00a      	beq.n	1aeb6 <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   1aea0:	4b1b      	ldr	r3, [pc, #108]	; (1af10 <bt_id_create+0x9c>)
   1aea2:	2201      	movs	r2, #1
   1aea4:	9302      	str	r3, [sp, #8]
   1aea6:	2300      	movs	r3, #0
   1aea8:	491a      	ldr	r1, [pc, #104]	; (1af14 <bt_id_create+0xa0>)
   1aeaa:	4618      	mov	r0, r3
   1aeac:	e9cd 3300 	strd	r3, r3, [sp]
   1aeb0:	f012 fb69 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1aeb4:	e7e3      	b.n	1ae7e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1aeb6:	4620      	mov	r0, r4
   1aeb8:	f7ff fddc 	bl	1aa74 <id_find>
   1aebc:	2800      	cmp	r0, #0
   1aebe:	dbdd      	blt.n	1ae7c <bt_id_create+0x8>
			return -EALREADY;
   1aec0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1aec4:	e7dd      	b.n	1ae82 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1aec6:	4d14      	ldr	r5, [pc, #80]	; (1af18 <bt_id_create+0xa4>)
   1aec8:	79eb      	ldrb	r3, [r5, #7]
   1aeca:	2b01      	cmp	r3, #1
   1aecc:	d01a      	beq.n	1af04 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aece:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   1aed2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1aed6:	07db      	lsls	r3, r3, #31
   1aed8:	d50b      	bpl.n	1aef2 <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   1aeda:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1aedc:	4621      	mov	r1, r4
   1aede:	4630      	mov	r0, r6
   1aee0:	f7ff fde0 	bl	1aaa4 <id_create.constprop.0>
	if (err) {
   1aee4:	2800      	cmp	r0, #0
   1aee6:	d1cc      	bne.n	1ae82 <bt_id_create+0xe>
		bt_dev.id_count++;
   1aee8:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   1aeea:	4630      	mov	r0, r6
		bt_dev.id_count++;
   1aeec:	3301      	adds	r3, #1
   1aeee:	71eb      	strb	r3, [r5, #7]
	return new_id;
   1aef0:	e7c7      	b.n	1ae82 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1aef2:	2c00      	cmp	r4, #0
   1aef4:	d0c3      	beq.n	1ae7e <bt_id_create+0xa>
   1aef6:	4620      	mov	r0, r4
   1aef8:	4904      	ldr	r1, [pc, #16]	; (1af0c <bt_id_create+0x98>)
   1aefa:	f012 faf4 	bl	2d4e6 <bt_addr_le_eq>
   1aefe:	2800      	cmp	r0, #0
   1af00:	d0eb      	beq.n	1aeda <bt_id_create+0x66>
   1af02:	e7bc      	b.n	1ae7e <bt_id_create+0xa>
		return -ENOMEM;
   1af04:	f06f 000b 	mvn.w	r0, #11
   1af08:	e7bb      	b.n	1ae82 <bt_id_create+0xe>
   1af0a:	bf00      	nop
   1af0c:	0003668a 	.word	0x0003668a
   1af10:	00036e49 	.word	0x00036e49
   1af14:	00033058 	.word	0x00033058
   1af18:	20008000 	.word	0x20008000

0001af1c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1af1c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1af1e:	4604      	mov	r4, r0
{
   1af20:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   1af22:	b958      	cbnz	r0, 1af3c <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   1af24:	4b1d      	ldr	r3, [pc, #116]	; (1af9c <bt_id_read_public_addr+0x80>)
   1af26:	2202      	movs	r2, #2
   1af28:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1af2c:	4603      	mov	r3, r0
   1af2e:	491c      	ldr	r1, [pc, #112]	; (1afa0 <bt_id_read_public_addr+0x84>)
   1af30:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   1af32:	f012 fb28 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
		return 0U;
   1af36:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1af38:	b006      	add	sp, #24
   1af3a:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1af3c:	2100      	movs	r1, #0
   1af3e:	f241 0009 	movw	r0, #4105	; 0x1009
   1af42:	aa05      	add	r2, sp, #20
   1af44:	f7fe fefa 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1af48:	4606      	mov	r6, r0
   1af4a:	b140      	cbz	r0, 1af5e <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   1af4c:	4b15      	ldr	r3, [pc, #84]	; (1afa4 <bt_id_read_public_addr+0x88>)
   1af4e:	2202      	movs	r2, #2
   1af50:	9302      	str	r3, [sp, #8]
   1af52:	2300      	movs	r3, #0
   1af54:	4912      	ldr	r1, [pc, #72]	; (1afa0 <bt_id_read_public_addr+0x84>)
   1af56:	4618      	mov	r0, r3
   1af58:	e9cd 3300 	strd	r3, r3, [sp]
   1af5c:	e7e9      	b.n	1af32 <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   1af5e:	9b05      	ldr	r3, [sp, #20]
   1af60:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1af62:	68dd      	ldr	r5, [r3, #12]
   1af64:	4910      	ldr	r1, [pc, #64]	; (1afa8 <bt_id_read_public_addr+0x8c>)
   1af66:	3501      	adds	r5, #1
   1af68:	4628      	mov	r0, r5
   1af6a:	f016 fc50 	bl	3180e <memcmp>
   1af6e:	b918      	cbnz	r0, 1af78 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   1af70:	9805      	ldr	r0, [sp, #20]
   1af72:	f005 fb13 	bl	2059c <net_buf_unref>
		return 0U;
   1af76:	e7de      	b.n	1af36 <bt_id_read_public_addr+0x1a>
   1af78:	2206      	movs	r2, #6
   1af7a:	4628      	mov	r0, r5
   1af7c:	490b      	ldr	r1, [pc, #44]	; (1afac <bt_id_read_public_addr+0x90>)
   1af7e:	f016 fc46 	bl	3180e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1af82:	2800      	cmp	r0, #0
   1af84:	d0f4      	beq.n	1af70 <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   1af86:	4629      	mov	r1, r5
   1af88:	1c60      	adds	r0, r4, #1
   1af8a:	f012 fab4 	bl	2d4f6 <bt_addr_copy>
	net_buf_unref(rsp);
   1af8e:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   1af90:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1af92:	f005 fb03 	bl	2059c <net_buf_unref>
	return 1U;
   1af96:	2001      	movs	r0, #1
   1af98:	e7ce      	b.n	1af38 <bt_id_read_public_addr+0x1c>
   1af9a:	bf00      	nop
   1af9c:	00036e77 	.word	0x00036e77
   1afa0:	00033058 	.word	0x00033058
   1afa4:	00036e90 	.word	0x00036e90
   1afa8:	00036697 	.word	0x00036697
   1afac:	00036691 	.word	0x00036691

0001afb0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1afb0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1afb2:	4668      	mov	r0, sp
   1afb4:	f7ff ffb2 	bl	1af1c <bt_id_read_public_addr>
   1afb8:	4b04      	ldr	r3, [pc, #16]	; (1afcc <bt_setup_public_id_addr+0x1c>)
   1afba:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1afbc:	b118      	cbz	r0, 1afc6 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1afbe:	4669      	mov	r1, sp
   1afc0:	2000      	movs	r0, #0
   1afc2:	f7ff fd6f 	bl	1aaa4 <id_create.constprop.0>
}
   1afc6:	b003      	add	sp, #12
   1afc8:	f85d fb04 	ldr.w	pc, [sp], #4
   1afcc:	20008000 	.word	0x20008000

0001afd0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1afd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1afd2:	4b25      	ldr	r3, [pc, #148]	; (1b068 <bt_read_static_addr+0x98>)
{
   1afd4:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1afd6:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   1afda:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1afdc:	f013 0301 	ands.w	r3, r3, #1
{
   1afe0:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1afe2:	d10c      	bne.n	1affe <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   1afe4:	4a21      	ldr	r2, [pc, #132]	; (1b06c <bt_read_static_addr+0x9c>)
   1afe6:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1afe8:	2202      	movs	r2, #2
   1afea:	4618      	mov	r0, r3
   1afec:	e9cd 3300 	strd	r3, r3, [sp]
   1aff0:	491f      	ldr	r1, [pc, #124]	; (1b070 <bt_read_static_addr+0xa0>)
   1aff2:	f012 fac8 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
		return 0;
   1aff6:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1aff8:	4620      	mov	r0, r4
   1affa:	b007      	add	sp, #28
   1affc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1affe:	2100      	movs	r1, #0
   1b000:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1b004:	aa05      	add	r2, sp, #20
   1b006:	f7fe fe99 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1b00a:	4603      	mov	r3, r0
   1b00c:	b118      	cbz	r0, 1b016 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   1b00e:	4b19      	ldr	r3, [pc, #100]	; (1b074 <bt_read_static_addr+0xa4>)
   1b010:	9302      	str	r3, [sp, #8]
   1b012:	2300      	movs	r3, #0
   1b014:	e7e8      	b.n	1afe8 <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   1b016:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1b018:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   1b01a:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   1b01c:	7854      	ldrb	r4, [r2, #1]
   1b01e:	3202      	adds	r2, #2
   1b020:	42b4      	cmp	r4, r6
   1b022:	bf28      	it	cs
   1b024:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   1b026:	429c      	cmp	r4, r3
   1b028:	dc0e      	bgt.n	1b048 <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   1b02a:	f005 fab7 	bl	2059c <net_buf_unref>
	if (!cnt) {
   1b02e:	2c00      	cmp	r4, #0
   1b030:	d1e2      	bne.n	1aff8 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   1b032:	4b11      	ldr	r3, [pc, #68]	; (1b078 <bt_read_static_addr+0xa8>)
   1b034:	2202      	movs	r2, #2
   1b036:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b03a:	4620      	mov	r0, r4
   1b03c:	4623      	mov	r3, r4
   1b03e:	490c      	ldr	r1, [pc, #48]	; (1b070 <bt_read_static_addr+0xa0>)
   1b040:	9400      	str	r4, [sp, #0]
   1b042:	f012 faa0 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
   1b046:	e7d7      	b.n	1aff8 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b048:	4611      	mov	r1, r2
   1b04a:	fb07 5603 	mla	r6, r7, r3, r5
   1b04e:	f102 0c14 	add.w	ip, r2, #20
   1b052:	f851 eb04 	ldr.w	lr, [r1], #4
   1b056:	4561      	cmp	r1, ip
   1b058:	f846 eb04 	str.w	lr, [r6], #4
   1b05c:	d1f9      	bne.n	1b052 <bt_read_static_addr+0x82>
   1b05e:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   1b060:	3301      	adds	r3, #1
   1b062:	8031      	strh	r1, [r6, #0]
   1b064:	3216      	adds	r2, #22
   1b066:	e7de      	b.n	1b026 <bt_read_static_addr+0x56>
   1b068:	20008000 	.word	0x20008000
   1b06c:	00036eae 	.word	0x00036eae
   1b070:	00033058 	.word	0x00033058
   1b074:	00036eda 	.word	0x00036eda
   1b078:	00036efa 	.word	0x00036efa

0001b07c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1b07c:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1b07e:	4d15      	ldr	r5, [pc, #84]	; (1b0d4 <bt_setup_random_id_addr+0x58>)
{
   1b080:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1b082:	79ec      	ldrb	r4, [r5, #7]
   1b084:	b92c      	cbnz	r4, 1b092 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1b086:	2101      	movs	r1, #1
   1b088:	a802      	add	r0, sp, #8
   1b08a:	f7ff ffa1 	bl	1afd0 <bt_read_static_addr>
   1b08e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1b090:	b9c0      	cbnz	r0, 1b0c4 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1b092:	2100      	movs	r1, #0
   1b094:	4608      	mov	r0, r1
}
   1b096:	b008      	add	sp, #32
   1b098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   1b09c:	f7ff beea 	b.w	1ae74 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1b0a0:	ab02      	add	r3, sp, #8
   1b0a2:	fb06 3102 	mla	r1, r6, r2, r3
   1b0a6:	f10d 0001 	add.w	r0, sp, #1
   1b0aa:	f012 fa24 	bl	2d4f6 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1b0ae:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1b0b0:	4669      	mov	r1, sp
   1b0b2:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1b0b4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1b0b8:	f7ff fcf4 	bl	1aaa4 <id_create.constprop.0>
				if (err) {
   1b0bc:	3401      	adds	r4, #1
   1b0be:	b110      	cbz	r0, 1b0c6 <bt_setup_random_id_addr+0x4a>
}
   1b0c0:	b008      	add	sp, #32
   1b0c2:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1b0c4:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1b0c6:	79eb      	ldrb	r3, [r5, #7]
   1b0c8:	b2e2      	uxtb	r2, r4
   1b0ca:	4293      	cmp	r3, r2
   1b0cc:	d8e8      	bhi.n	1b0a0 <bt_setup_random_id_addr+0x24>
			return 0;
   1b0ce:	2000      	movs	r0, #0
   1b0d0:	e7f6      	b.n	1b0c0 <bt_setup_random_id_addr+0x44>
   1b0d2:	bf00      	nop
   1b0d4:	20008000 	.word	0x20008000

0001b0d8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1b0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0dc:	4690      	mov	r8, r2
   1b0de:	460e      	mov	r6, r1
   1b0e0:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1b0e2:	4602      	mov	r2, r0
   1b0e4:	2800      	cmp	r0, #0
   1b0e6:	d04b      	beq.n	1b180 <bt_id_set_adv_own_addr+0xa8>
   1b0e8:	2b00      	cmp	r3, #0
   1b0ea:	d049      	beq.n	1b180 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b0ec:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1b0ee:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b0f0:	d531      	bpl.n	1b156 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1b0f2:	4f25      	ldr	r7, [pc, #148]	; (1b188 <bt_id_set_adv_own_addr+0xb0>)
   1b0f4:	f1b8 0f00 	cmp.w	r8, #0
   1b0f8:	d013      	beq.n	1b122 <bt_id_set_adv_own_addr+0x4a>
   1b0fa:	0688      	lsls	r0, r1, #26
   1b0fc:	d40a      	bmi.n	1b114 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b0fe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1b102:	5cfb      	ldrb	r3, [r7, r3]
   1b104:	2b01      	cmp	r3, #1
   1b106:	d015      	beq.n	1b134 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1b108:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1b10a:	06b2      	lsls	r2, r6, #26
   1b10c:	d50f      	bpl.n	1b12e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1b10e:	f043 0302 	orr.w	r3, r3, #2
   1b112:	e00b      	b.n	1b12c <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1b114:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   1b118:	0659      	lsls	r1, r3, #25
   1b11a:	d4f0      	bmi.n	1b0fe <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   1b11c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b120:	e006      	b.n	1b130 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b122:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1b126:	5cfb      	ldrb	r3, [r7, r3]
   1b128:	2b01      	cmp	r3, #1
   1b12a:	d003      	beq.n	1b134 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   1b12c:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1b12e:	2000      	movs	r0, #0
}
   1b130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1b134:	2107      	movs	r1, #7
   1b136:	fb01 7104 	mla	r1, r1, r4, r7
   1b13a:	4610      	mov	r0, r2
   1b13c:	3101      	adds	r1, #1
   1b13e:	f012 faa7 	bl	2d690 <bt_id_set_adv_random_addr>
				if (err) {
   1b142:	2800      	cmp	r0, #0
   1b144:	d1f4      	bne.n	1b130 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   1b146:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b14a:	5d3b      	ldrb	r3, [r7, r4]
   1b14c:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1b14e:	f1b8 0f00 	cmp.w	r8, #0
   1b152:	d0ec      	beq.n	1b12e <bt_id_set_adv_own_addr+0x56>
   1b154:	e7d9      	b.n	1b10a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1b156:	074b      	lsls	r3, r1, #29
   1b158:	d50e      	bpl.n	1b178 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b15a:	4e0b      	ldr	r6, [pc, #44]	; (1b188 <bt_id_set_adv_own_addr+0xb0>)
   1b15c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   1b160:	5df3      	ldrb	r3, [r6, r7]
   1b162:	2b01      	cmp	r3, #1
   1b164:	d1e2      	bne.n	1b12c <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1b166:	2107      	movs	r1, #7
   1b168:	fb11 3104 	smlabb	r1, r1, r4, r3
   1b16c:	4431      	add	r1, r6
   1b16e:	f012 fa8f 	bl	2d690 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1b172:	5df3      	ldrb	r3, [r6, r7]
   1b174:	702b      	strb	r3, [r5, #0]
		if (err) {
   1b176:	e7db      	b.n	1b130 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   1b178:	f012 fa92 	bl	2d6a0 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1b17c:	2301      	movs	r3, #1
   1b17e:	e7f9      	b.n	1b174 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   1b180:	f06f 0015 	mvn.w	r0, #21
   1b184:	e7d4      	b.n	1b130 <bt_id_set_adv_own_addr+0x58>
   1b186:	bf00      	nop
   1b188:	20008000 	.word	0x20008000

0001b18c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1b18c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b18e:	4e13      	ldr	r6, [pc, #76]	; (1b1dc <bt_id_init+0x50>)
   1b190:	79f5      	ldrb	r5, [r6, #7]
   1b192:	b11d      	cbz	r5, 1b19c <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1b194:	2400      	movs	r4, #0
}
   1b196:	4620      	mov	r0, r4
   1b198:	b004      	add	sp, #16
   1b19a:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   1b19c:	f7ff ff08 	bl	1afb0 <bt_setup_public_id_addr>
		if (err) {
   1b1a0:	4604      	mov	r4, r0
   1b1a2:	b150      	cbz	r0, 1b1ba <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   1b1a4:	4b0e      	ldr	r3, [pc, #56]	; (1b1e0 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   1b1a6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1b1aa:	2201      	movs	r2, #1
   1b1ac:	462b      	mov	r3, r5
   1b1ae:	4628      	mov	r0, r5
   1b1b0:	490c      	ldr	r1, [pc, #48]	; (1b1e4 <bt_id_init+0x58>)
   1b1b2:	9500      	str	r5, [sp, #0]
   1b1b4:	f012 f9e7 	bl	2d586 <z_log_msg_runtime_create.constprop.0>
			return err;
   1b1b8:	e7ed      	b.n	1b196 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b1ba:	79f5      	ldrb	r5, [r6, #7]
   1b1bc:	2d00      	cmp	r5, #0
   1b1be:	d1e9      	bne.n	1b194 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1b1c0:	f7ff ff5c 	bl	1b07c <bt_setup_random_id_addr>
		if (err) {
   1b1c4:	4604      	mov	r4, r0
   1b1c6:	2800      	cmp	r0, #0
   1b1c8:	d1ec      	bne.n	1b1a4 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1b1ca:	1c70      	adds	r0, r6, #1
   1b1cc:	f7ff fc98 	bl	1ab00 <set_random_address>
		if (err) {
   1b1d0:	4604      	mov	r4, r0
   1b1d2:	2800      	cmp	r0, #0
   1b1d4:	d0de      	beq.n	1b194 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   1b1d6:	4b04      	ldr	r3, [pc, #16]	; (1b1e8 <bt_id_init+0x5c>)
   1b1d8:	e7e5      	b.n	1b1a6 <bt_id_init+0x1a>
   1b1da:	bf00      	nop
   1b1dc:	20008000 	.word	0x20008000
   1b1e0:	00036f23 	.word	0x00036f23
   1b1e4:	00033058 	.word	0x00033058
   1b1e8:	00036f42 	.word	0x00036f42

0001b1ec <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1f0:	460c      	mov	r4, r1
   1b1f2:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b1f4:	2120      	movs	r1, #32
{
   1b1f6:	4692      	mov	sl, r2
   1b1f8:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b1fa:	f7fe fd65 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1b1fe:	4605      	mov	r5, r0
   1b200:	2800      	cmp	r0, #0
   1b202:	d05a      	beq.n	1b2ba <hci_set_ad+0xce>
   1b204:	2120      	movs	r1, #32
   1b206:	300c      	adds	r0, #12
   1b208:	f014 f913 	bl	2f432 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1b20c:	2220      	movs	r2, #32
   1b20e:	4681      	mov	r9, r0
   1b210:	2100      	movs	r1, #0
   1b212:	f016 fb46 	bl	318a2 <memset>
	uint8_t set_data_len = 0;
   1b216:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1b218:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1b21c:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   1b220:	2300      	movs	r3, #0
   1b222:	f8d4 8000 	ldr.w	r8, [r4]
   1b226:	6862      	ldr	r2, [r4, #4]
   1b228:	4293      	cmp	r3, r2
   1b22a:	d30c      	bcc.n	1b246 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   1b22c:	3408      	adds	r4, #8
   1b22e:	45a2      	cmp	sl, r4
   1b230:	d1f6      	bne.n	1b220 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b232:	2200      	movs	r2, #0
   1b234:	4629      	mov	r1, r5
   1b236:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   1b238:	f889 6000 	strb.w	r6, [r9]
}
   1b23c:	b007      	add	sp, #28
   1b23e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b242:	f7fe bd7b 	b.w	19d3c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1b246:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1b24a:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b24c:	1811      	adds	r1, r2, r0
   1b24e:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   1b250:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b254:	d91a      	bls.n	1b28c <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b256:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1b25a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b25e:	d101      	bne.n	1b264 <hci_set_ad+0x78>
   1b260:	2a00      	cmp	r2, #0
   1b262:	dc11      	bgt.n	1b288 <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   1b264:	4b16      	ldr	r3, [pc, #88]	; (1b2c0 <hci_set_ad+0xd4>)
   1b266:	2201      	movs	r2, #1
   1b268:	9302      	str	r3, [sp, #8]
   1b26a:	2300      	movs	r3, #0
   1b26c:	4915      	ldr	r1, [pc, #84]	; (1b2c4 <hci_set_ad+0xd8>)
   1b26e:	4618      	mov	r0, r3
   1b270:	e9cd 3300 	strd	r3, r3, [sp]
   1b274:	f012 fa63 	bl	2d73e <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1b278:	4628      	mov	r0, r5
   1b27a:	f005 f98f 	bl	2059c <net_buf_unref>
					return -EINVAL;
   1b27e:	f06f 0015 	mvn.w	r0, #21
}
   1b282:	b007      	add	sp, #28
   1b284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1b288:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1b28c:	b2d7      	uxtb	r7, r2
   1b28e:	1c79      	adds	r1, r7, #1
   1b290:	f80b 1006 	strb.w	r1, [fp, r6]
   1b294:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1b296:	b2c9      	uxtb	r1, r1
   1b298:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b29c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b2a0:	fa5b f080 	uxtab	r0, fp, r0
   1b2a4:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   1b2a6:	3702      	adds	r7, #2
   1b2a8:	f016 fac1 	bl	3182e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1b2ac:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   1b2ae:	4437      	add	r7, r6
   1b2b0:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1b2b2:	3301      	adds	r3, #1
   1b2b4:	f108 0808 	add.w	r8, r8, #8
   1b2b8:	e7b5      	b.n	1b226 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1b2ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b2be:	e7e0      	b.n	1b282 <hci_set_ad+0x96>
   1b2c0:	00036f65 	.word	0x00036f65
   1b2c4:	00033010 	.word	0x00033010

0001b2c8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1b2c8:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1b2ca:	4605      	mov	r5, r0
   1b2cc:	4b16      	ldr	r3, [pc, #88]	; (1b328 <le_adv_start_add_conn+0x60>)
   1b2ce:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   1b2d2:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   1b2d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1b2d8:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   1b2da:	2207      	movs	r2, #7
   1b2dc:	4628      	mov	r0, r5
   1b2de:	4913      	ldr	r1, [pc, #76]	; (1b32c <le_adv_start_add_conn+0x64>)
   1b2e0:	f016 fa95 	bl	3180e <memcmp>
   1b2e4:	4603      	mov	r3, r0
   1b2e6:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1b2e8:	b96b      	cbnz	r3, 1b306 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1b2ea:	4911      	ldr	r1, [pc, #68]	; (1b330 <le_adv_start_add_conn+0x68>)
   1b2ec:	f001 f86c 	bl	1c3c8 <bt_conn_add_le>
		if (!conn) {
   1b2f0:	4604      	mov	r4, r0
   1b2f2:	b910      	cbnz	r0, 1b2fa <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   1b2f4:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1b2f8:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1b2fa:	2104      	movs	r1, #4
   1b2fc:	f000 fe84 	bl	1c008 <bt_conn_set_state>
		return 0;
   1b300:	2000      	movs	r0, #0
		*out_conn = conn;
   1b302:	6034      	str	r4, [r6, #0]
   1b304:	e7f8      	b.n	1b2f8 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1b306:	4629      	mov	r1, r5
   1b308:	f001 f896 	bl	1c438 <bt_conn_exists_le>
   1b30c:	b940      	cbnz	r0, 1b320 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1b30e:	7820      	ldrb	r0, [r4, #0]
   1b310:	4629      	mov	r1, r5
   1b312:	f001 f859 	bl	1c3c8 <bt_conn_add_le>
	if (!conn) {
   1b316:	4604      	mov	r4, r0
   1b318:	2800      	cmp	r0, #0
   1b31a:	d0eb      	beq.n	1b2f4 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1b31c:	2105      	movs	r1, #5
   1b31e:	e7ed      	b.n	1b2fc <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1b320:	f06f 0015 	mvn.w	r0, #21
   1b324:	e7e8      	b.n	1b2f8 <le_adv_start_add_conn+0x30>
   1b326:	bf00      	nop
   1b328:	20008000 	.word	0x20008000
   1b32c:	0003668a 	.word	0x0003668a
   1b330:	00036683 	.word	0x00036683

0001b334 <valid_adv_param>:
{
   1b334:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1b336:	6843      	ldr	r3, [r0, #4]
{
   1b338:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1b33a:	0558      	lsls	r0, r3, #21
   1b33c:	d501      	bpl.n	1b342 <valid_adv_param+0xe>
		return false;
   1b33e:	2000      	movs	r0, #0
}
   1b340:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b342:	6922      	ldr	r2, [r4, #16]
   1b344:	b10a      	cbz	r2, 1b34a <valid_adv_param+0x16>
   1b346:	07d9      	lsls	r1, r3, #31
   1b348:	d5f9      	bpl.n	1b33e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1b34a:	4d19      	ldr	r5, [pc, #100]	; (1b3b0 <valid_adv_param+0x7c>)
   1b34c:	7820      	ldrb	r0, [r4, #0]
   1b34e:	79eb      	ldrb	r3, [r5, #7]
   1b350:	4283      	cmp	r3, r0
   1b352:	d9f4      	bls.n	1b33e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1b354:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1b358:	2207      	movs	r2, #7
   1b35a:	4916      	ldr	r1, [pc, #88]	; (1b3b4 <valid_adv_param+0x80>)
   1b35c:	4428      	add	r0, r5
   1b35e:	f016 fa56 	bl	3180e <memcmp>
	if (param->id >= bt_dev.id_count ||
   1b362:	2800      	cmp	r0, #0
   1b364:	d0eb      	beq.n	1b33e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b366:	6860      	ldr	r0, [r4, #4]
   1b368:	07c2      	lsls	r2, r0, #31
   1b36a:	d406      	bmi.n	1b37a <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1b36c:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1b370:	2b08      	cmp	r3, #8
   1b372:	d802      	bhi.n	1b37a <valid_adv_param+0x46>
   1b374:	68a3      	ldr	r3, [r4, #8]
   1b376:	2b9f      	cmp	r3, #159	; 0x9f
   1b378:	d9e1      	bls.n	1b33e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1b37a:	f010 0f30 	tst.w	r0, #48	; 0x30
   1b37e:	d002      	beq.n	1b386 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1b380:	6923      	ldr	r3, [r4, #16]
   1b382:	2b00      	cmp	r3, #0
   1b384:	d0db      	beq.n	1b33e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1b386:	06c3      	lsls	r3, r0, #27
   1b388:	d401      	bmi.n	1b38e <valid_adv_param+0x5a>
   1b38a:	6923      	ldr	r3, [r4, #16]
   1b38c:	b943      	cbnz	r3, 1b3a0 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   1b38e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1b392:	429a      	cmp	r2, r3
   1b394:	d8d3      	bhi.n	1b33e <valid_adv_param+0xa>
   1b396:	2a1f      	cmp	r2, #31
   1b398:	d9d1      	bls.n	1b33e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1b39a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1b39e:	d8ce      	bhi.n	1b33e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1b3a0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1b3a4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1b3a8:	bf18      	it	ne
   1b3aa:	2001      	movne	r0, #1
   1b3ac:	e7c8      	b.n	1b340 <valid_adv_param+0xc>
   1b3ae:	bf00      	nop
   1b3b0:	20008000 	.word	0x20008000
   1b3b4:	0003668a 	.word	0x0003668a

0001b3b8 <bt_le_ext_adv_foreach>:
{
   1b3b8:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1b3ba:	4801      	ldr	r0, [pc, #4]	; (1b3c0 <bt_le_ext_adv_foreach+0x8>)
   1b3bc:	4718      	bx	r3
   1b3be:	bf00      	nop
   1b3c0:	20008018 	.word	0x20008018

0001b3c4 <bt_le_adv_lookup_legacy>:
}
   1b3c4:	4800      	ldr	r0, [pc, #0]	; (1b3c8 <bt_le_adv_lookup_legacy+0x4>)
   1b3c6:	4770      	bx	lr
   1b3c8:	20008018 	.word	0x20008018

0001b3cc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3d0:	b08d      	sub	sp, #52	; 0x34
   1b3d2:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1b3d4:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b3d6:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1b3da:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b3dc:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b3e0:	4890      	ldr	r0, [pc, #576]	; (1b624 <bt_le_adv_start_legacy+0x258>)
   1b3e2:	bf18      	it	ne
   1b3e4:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   1b3e6:	9307      	str	r3, [sp, #28]
   1b3e8:	f012 f994 	bl	2d714 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b3ec:	0747      	lsls	r7, r0, #29
{
   1b3ee:	460d      	mov	r5, r1
   1b3f0:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b3f2:	f140 810d 	bpl.w	1b610 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1b3f6:	4608      	mov	r0, r1
   1b3f8:	f7ff ff9c 	bl	1b334 <valid_adv_param>
   1b3fc:	b928      	cbnz	r0, 1b40a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1b3fe:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1b402:	4620      	mov	r0, r4
   1b404:	b00d      	add	sp, #52	; 0x34
   1b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1b40a:	4628      	mov	r0, r5
   1b40c:	f012 f95f 	bl	2d6ce <bt_id_adv_random_addr_check>
   1b410:	4681      	mov	r9, r0
   1b412:	2800      	cmp	r0, #0
   1b414:	d0f3      	beq.n	1b3fe <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b416:	f106 0810 	add.w	r8, r6, #16
   1b41a:	4640      	mov	r0, r8
   1b41c:	f012 f97a 	bl	2d714 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b420:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   1b424:	0600      	lsls	r0, r0, #24
   1b426:	f100 80f6 	bmi.w	1b616 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1b42a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1b42e:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1b432:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b434:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1b436:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1b43a:	68eb      	ldr	r3, [r5, #12]
   1b43c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b440:	f012 f959 	bl	2d6f6 <get_adv_channel_map>
	if (adv->id != param->id) {
   1b444:	7832      	ldrb	r2, [r6, #0]
   1b446:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b448:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1b44c:	429a      	cmp	r2, r3
   1b44e:	d004      	beq.n	1b45a <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b450:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1b454:	4873      	ldr	r0, [pc, #460]	; (1b624 <bt_le_adv_start_legacy+0x258>)
   1b456:	f012 f960 	bl	2d71a <atomic_and>
	adv->id = param->id;
   1b45a:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1b45c:	4a72      	ldr	r2, [pc, #456]	; (1b628 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   1b45e:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1b460:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1b464:	4630      	mov	r0, r6
   1b466:	4622      	mov	r2, r4
   1b468:	6869      	ldr	r1, [r5, #4]
   1b46a:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1b46e:	f7ff fe33 	bl	1b0d8 <bt_id_set_adv_own_addr>
	if (err) {
   1b472:	4604      	mov	r4, r0
   1b474:	2800      	cmp	r0, #0
   1b476:	d1c4      	bne.n	1b402 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1b478:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   1b47c:	f1ba 0f00 	cmp.w	sl, #0
   1b480:	d013      	beq.n	1b4aa <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1b482:	6929      	ldr	r1, [r5, #16]
   1b484:	f012 f954 	bl	2d730 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1b488:	4628      	mov	r0, r5
   1b48a:	f012 f9ec 	bl	2d866 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b48e:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1b490:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b492:	07d9      	lsls	r1, r3, #31
   1b494:	d416      	bmi.n	1b4c4 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1b496:	059b      	lsls	r3, r3, #22
   1b498:	d403      	bmi.n	1b4a2 <bt_le_adv_start_legacy+0xd6>
   1b49a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b49c:	b90b      	cbnz	r3, 1b4a2 <bt_le_adv_start_legacy+0xd6>
   1b49e:	2f02      	cmp	r7, #2
   1b4a0:	d159      	bne.n	1b556 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1b4a2:	2302      	movs	r3, #2
   1b4a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b4a8:	e019      	b.n	1b4de <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1b4aa:	4960      	ldr	r1, [pc, #384]	; (1b62c <bt_le_adv_start_legacy+0x260>)
   1b4ac:	f012 f940 	bl	2d730 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1b4b0:	4628      	mov	r0, r5
   1b4b2:	f012 f9d8 	bl	2d866 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b4b6:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1b4b8:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b4ba:	07da      	lsls	r2, r3, #31
   1b4bc:	d5eb      	bpl.n	1b496 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1b4be:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1b4c2:	e00c      	b.n	1b4de <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1b4c4:	f013 0f10 	tst.w	r3, #16
   1b4c8:	bf0c      	ite	eq
   1b4ca:	2301      	moveq	r3, #1
   1b4cc:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1b4ce:	6929      	ldr	r1, [r5, #16]
   1b4d0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1b4d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b4d8:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1b4da:	f012 f929 	bl	2d730 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1b4de:	210f      	movs	r1, #15
   1b4e0:	f242 0006 	movw	r0, #8198	; 0x2006
   1b4e4:	f7fe fbf0 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1b4e8:	4604      	mov	r4, r0
   1b4ea:	2800      	cmp	r0, #0
   1b4ec:	f000 8096 	beq.w	1b61c <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b4f0:	220f      	movs	r2, #15
   1b4f2:	a908      	add	r1, sp, #32
   1b4f4:	300c      	adds	r0, #12
   1b4f6:	f013 ffa2 	bl	2f43e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1b4fa:	4621      	mov	r1, r4
   1b4fc:	2200      	movs	r2, #0
   1b4fe:	f242 0006 	movw	r0, #8198	; 0x2006
   1b502:	f7fe fc1b 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1b506:	4604      	mov	r4, r0
   1b508:	2800      	cmp	r0, #0
   1b50a:	f47f af7a 	bne.w	1b402 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1b50e:	f1ba 0f00 	cmp.w	sl, #0
   1b512:	d026      	beq.n	1b562 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b514:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b516:	07dc      	lsls	r4, r3, #31
   1b518:	d431      	bmi.n	1b57e <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1b51a:	4630      	mov	r0, r6
   1b51c:	2101      	movs	r1, #1
   1b51e:	f012 f9b2 	bl	2d886 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b522:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   1b524:	4604      	mov	r4, r0
   1b526:	2800      	cmp	r0, #0
   1b528:	d06a      	beq.n	1b600 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   1b52a:	2500      	movs	r5, #0
   1b52c:	4b40      	ldr	r3, [pc, #256]	; (1b630 <bt_le_adv_start_legacy+0x264>)
   1b52e:	2201      	movs	r2, #1
   1b530:	9302      	str	r3, [sp, #8]
   1b532:	4628      	mov	r0, r5
   1b534:	462b      	mov	r3, r5
   1b536:	e9cd 5500 	strd	r5, r5, [sp]
   1b53a:	493e      	ldr	r1, [pc, #248]	; (1b634 <bt_le_adv_start_legacy+0x268>)
   1b53c:	f012 f8ff 	bl	2d73e <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b540:	2e00      	cmp	r6, #0
   1b542:	f43f af5e 	beq.w	1b402 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b546:	4630      	mov	r0, r6
   1b548:	4629      	mov	r1, r5
   1b54a:	f000 fd5d 	bl	1c008 <bt_conn_set_state>
			bt_conn_unref(conn);
   1b54e:	4630      	mov	r0, r6
   1b550:	f012 fa91 	bl	2da76 <bt_conn_unref>
   1b554:	e755      	b.n	1b402 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1b556:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b558:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1b55c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b560:	e7bd      	b.n	1b4de <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1b562:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b564:	4659      	mov	r1, fp
   1b566:	9300      	str	r3, [sp, #0]
   1b568:	4630      	mov	r0, r6
   1b56a:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1b56e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b570:	9a05      	ldr	r2, [sp, #20]
   1b572:	f012 f906 	bl	2d782 <le_adv_update.constprop.0>
		if (err) {
   1b576:	4604      	mov	r4, r0
   1b578:	2800      	cmp	r0, #0
   1b57a:	d0cb      	beq.n	1b514 <bt_le_adv_start_legacy+0x148>
   1b57c:	e741      	b.n	1b402 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1b57e:	4630      	mov	r0, r6
   1b580:	a907      	add	r1, sp, #28
   1b582:	f7ff fea1 	bl	1b2c8 <le_adv_start_add_conn>
		if (err) {
   1b586:	4604      	mov	r4, r0
   1b588:	2800      	cmp	r0, #0
   1b58a:	d0c6      	beq.n	1b51a <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   1b58c:	f110 0f0c 	cmn.w	r0, #12
   1b590:	f47f af37 	bne.w	1b402 <bt_le_adv_start_legacy+0x36>
   1b594:	f1ba 0f00 	cmp.w	sl, #0
   1b598:	f47f af33 	bne.w	1b402 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1b59c:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1b59e:	0798      	lsls	r0, r3, #30
   1b5a0:	f53f af2f 	bmi.w	1b402 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1b5a4:	686c      	ldr	r4, [r5, #4]
   1b5a6:	f084 0402 	eor.w	r4, r4, #2
   1b5aa:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1b5ae:	f004 0201 	and.w	r2, r4, #1
   1b5b2:	210e      	movs	r1, #14
   1b5b4:	4640      	mov	r0, r8
   1b5b6:	f012 f8d1 	bl	2d75c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1b5ba:	1e7b      	subs	r3, r7, #1
   1b5bc:	425a      	negs	r2, r3
   1b5be:	415a      	adcs	r2, r3
   1b5c0:	2108      	movs	r1, #8
   1b5c2:	4640      	mov	r0, r8
   1b5c4:	f012 f8ca 	bl	2d75c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1b5c8:	1eb9      	subs	r1, r7, #2
   1b5ca:	424a      	negs	r2, r1
   1b5cc:	414a      	adcs	r2, r1
   1b5ce:	4640      	mov	r0, r8
   1b5d0:	2109      	movs	r1, #9
   1b5d2:	f012 f8c3 	bl	2d75c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1b5d6:	686a      	ldr	r2, [r5, #4]
   1b5d8:	210a      	movs	r1, #10
   1b5da:	4640      	mov	r0, r8
   1b5dc:	f002 0201 	and.w	r2, r2, #1
   1b5e0:	f012 f8bc 	bl	2d75c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1b5e4:	464a      	mov	r2, r9
   1b5e6:	210b      	movs	r1, #11
   1b5e8:	4640      	mov	r0, r8
   1b5ea:	f012 f8b7 	bl	2d75c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1b5ee:	686a      	ldr	r2, [r5, #4]
   1b5f0:	210d      	movs	r1, #13
   1b5f2:	4640      	mov	r0, r8
   1b5f4:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1b5f8:	f012 f8b0 	bl	2d75c <atomic_set_bit_to>
	return 0;
   1b5fc:	2400      	movs	r4, #0
   1b5fe:	e700      	b.n	1b402 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b600:	b116      	cbz	r6, 1b608 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   1b602:	4630      	mov	r0, r6
   1b604:	f012 fa37 	bl	2da76 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1b608:	f1ba 0f00 	cmp.w	sl, #0
   1b60c:	d1cf      	bne.n	1b5ae <bt_le_adv_start_legacy+0x1e2>
   1b60e:	e7c9      	b.n	1b5a4 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   1b610:	f06f 040a 	mvn.w	r4, #10
   1b614:	e6f5      	b.n	1b402 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1b616:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1b61a:	e6f2      	b.n	1b402 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1b61c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b620:	e6ef      	b.n	1b402 <bt_le_adv_start_legacy+0x36>
   1b622:	bf00      	nop
   1b624:	200080cc 	.word	0x200080cc
   1b628:	20008000 	.word	0x20008000
   1b62c:	0003668a 	.word	0x0003668a
   1b630:	00036f7e 	.word	0x00036f7e
   1b634:	00033010 	.word	0x00033010

0001b638 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1b638:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b63a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1b63c:	9a06      	ldr	r2, [sp, #24]
{
   1b63e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1b640:	e9cd 3200 	strd	r3, r2, [sp]
   1b644:	462b      	mov	r3, r5
   1b646:	460a      	mov	r2, r1
   1b648:	4601      	mov	r1, r0
   1b64a:	4811      	ldr	r0, [pc, #68]	; (1b690 <bt_le_adv_start+0x58>)
   1b64c:	f7ff febe 	bl	1b3cc <bt_le_adv_start_legacy>
   1b650:	4621      	mov	r1, r4
   1b652:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   1b654:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1b656:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1b65a:	429d      	cmp	r5, r3
   1b65c:	d102      	bne.n	1b664 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1b65e:	4630      	mov	r0, r6
   1b660:	b002      	add	sp, #8
   1b662:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   1b664:	880a      	ldrh	r2, [r1, #0]
   1b666:	4282      	cmp	r2, r0
   1b668:	d104      	bne.n	1b674 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1b66a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1b66c:	b112      	cbz	r2, 1b674 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1b66e:	7812      	ldrb	r2, [r2, #0]
   1b670:	07d2      	lsls	r2, r2, #31
   1b672:	d402      	bmi.n	1b67a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   1b674:	3301      	adds	r3, #1
   1b676:	3108      	adds	r1, #8
   1b678:	e7ef      	b.n	1b65a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1b67a:	4906      	ldr	r1, [pc, #24]	; (1b694 <bt_le_adv_start+0x5c>)
   1b67c:	4806      	ldr	r0, [pc, #24]	; (1b698 <bt_le_adv_start+0x60>)
   1b67e:	f015 fd4d 	bl	3111c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1b682:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b686:	2300      	movs	r3, #0
   1b688:	4803      	ldr	r0, [pc, #12]	; (1b698 <bt_le_adv_start+0x60>)
   1b68a:	f00a fc7f 	bl	25f8c <k_work_reschedule>
   1b68e:	e7e6      	b.n	1b65e <bt_le_adv_start+0x26>
   1b690:	20008018 	.word	0x20008018
   1b694:	0001b721 	.word	0x0001b721
   1b698:	20008030 	.word	0x20008030

0001b69c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1b69c:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1b69e:	481a      	ldr	r0, [pc, #104]	; (1b708 <bt_le_adv_stop+0x6c>)
   1b6a0:	f012 f918 	bl	2d8d4 <bt_le_lim_adv_cancel_timeout>
   1b6a4:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1b6a8:	4818      	ldr	r0, [pc, #96]	; (1b70c <bt_le_adv_stop+0x70>)
   1b6aa:	f012 f836 	bl	2d71a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b6ae:	4817      	ldr	r0, [pc, #92]	; (1b70c <bt_le_adv_stop+0x70>)
   1b6b0:	f012 f830 	bl	2d714 <atomic_get>
   1b6b4:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b6b6:	061a      	lsls	r2, r3, #24
   1b6b8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1b6bc:	d523      	bpl.n	1b706 <bt_le_adv_stop+0x6a>
   1b6be:	4813      	ldr	r0, [pc, #76]	; (1b70c <bt_le_adv_stop+0x70>)
   1b6c0:	f012 f828 	bl	2d714 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b6c4:	0543      	lsls	r3, r0, #21
   1b6c6:	d514      	bpl.n	1b6f2 <bt_le_adv_stop+0x56>
   1b6c8:	2207      	movs	r2, #7
   1b6ca:	4911      	ldr	r1, [pc, #68]	; (1b710 <bt_le_adv_stop+0x74>)
   1b6cc:	4811      	ldr	r0, [pc, #68]	; (1b714 <bt_le_adv_stop+0x78>)
   1b6ce:	f016 f89e 	bl	3180e <memcmp>
   1b6d2:	4b11      	ldr	r3, [pc, #68]	; (1b718 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1b6d4:	b998      	cbnz	r0, 1b6fe <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1b6d6:	2204      	movs	r2, #4
   1b6d8:	4910      	ldr	r1, [pc, #64]	; (1b71c <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1b6da:	7e18      	ldrb	r0, [r3, #24]
   1b6dc:	f000 fed2 	bl	1c484 <bt_conn_lookup_state_le>
   1b6e0:	4604      	mov	r4, r0
	if (conn) {
   1b6e2:	b130      	cbz	r0, 1b6f2 <bt_le_adv_stop+0x56>
		conn->err = status;
   1b6e4:	2100      	movs	r1, #0
   1b6e6:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b6e8:	f000 fc8e 	bl	1c008 <bt_conn_set_state>
		bt_conn_unref(conn);
   1b6ec:	4620      	mov	r0, r4
   1b6ee:	f012 f9c2 	bl	2da76 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1b6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1b6f6:	2100      	movs	r1, #0
   1b6f8:	4803      	ldr	r0, [pc, #12]	; (1b708 <bt_le_adv_stop+0x6c>)
   1b6fa:	f012 b8c4 	b.w	2d886 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1b6fe:	2205      	movs	r2, #5
   1b700:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1b704:	e7e9      	b.n	1b6da <bt_le_adv_stop+0x3e>
}
   1b706:	bd10      	pop	{r4, pc}
   1b708:	20008018 	.word	0x20008018
   1b70c:	20008028 	.word	0x20008028
   1b710:	0003668a 	.word	0x0003668a
   1b714:	20008021 	.word	0x20008021
   1b718:	20008000 	.word	0x20008000
   1b71c:	00036683 	.word	0x00036683

0001b720 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1b720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1b722:	f7ff ffbb 	bl	1b69c <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   1b726:	4b07      	ldr	r3, [pc, #28]	; (1b744 <adv_timeout+0x24>)
   1b728:	9003      	str	r0, [sp, #12]
   1b72a:	9302      	str	r3, [sp, #8]
   1b72c:	2300      	movs	r3, #0
   1b72e:	2202      	movs	r2, #2
   1b730:	4618      	mov	r0, r3
   1b732:	e9cd 3300 	strd	r3, r3, [sp]
   1b736:	4904      	ldr	r1, [pc, #16]	; (1b748 <adv_timeout+0x28>)
   1b738:	f012 f801 	bl	2d73e <z_log_msg_runtime_create.constprop.0>
}
   1b73c:	b005      	add	sp, #20
   1b73e:	f85d fb04 	ldr.w	pc, [sp], #4
   1b742:	bf00      	nop
   1b744:	00036f99 	.word	0x00036f99
   1b748:	00033010 	.word	0x00033010

0001b74c <bt_le_adv_resume>:
{
   1b74c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b74e:	4c1e      	ldr	r4, [pc, #120]	; (1b7c8 <bt_le_adv_resume+0x7c>)
   1b750:	4620      	mov	r0, r4
   1b752:	f011 ffdf 	bl	2d714 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1b756:	0440      	lsls	r0, r0, #17
   1b758:	d534      	bpl.n	1b7c4 <bt_le_adv_resume+0x78>
   1b75a:	4620      	mov	r0, r4
   1b75c:	f011 ffda 	bl	2d714 <atomic_get>
   1b760:	0601      	lsls	r1, r0, #24
   1b762:	d42f      	bmi.n	1b7c4 <bt_le_adv_resume+0x78>
   1b764:	4620      	mov	r0, r4
   1b766:	f011 ffd5 	bl	2d714 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1b76a:	0542      	lsls	r2, r0, #21
   1b76c:	d52a      	bpl.n	1b7c4 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   1b76e:	a901      	add	r1, sp, #4
   1b770:	f1a4 0010 	sub.w	r0, r4, #16
   1b774:	f7ff fda8 	bl	1b2c8 <le_adv_start_add_conn>
	if (err) {
   1b778:	4605      	mov	r5, r0
   1b77a:	bb18      	cbnz	r0, 1b7c4 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1b77c:	2101      	movs	r1, #1
   1b77e:	f1a4 0010 	sub.w	r0, r4, #16
   1b782:	f012 f880 	bl	2d886 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1b786:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   1b788:	b928      	cbnz	r0, 1b796 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   1b78a:	4630      	mov	r0, r6
}
   1b78c:	b002      	add	sp, #8
   1b78e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1b792:	f012 b970 	b.w	2da76 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b796:	4629      	mov	r1, r5
   1b798:	4630      	mov	r0, r6
   1b79a:	f000 fc35 	bl	1c008 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b79e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1b7a2:	4620      	mov	r0, r4
   1b7a4:	f011 ffb9 	bl	2d71a <atomic_and>
   1b7a8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1b7aa:	4630      	mov	r0, r6
   1b7ac:	f012 f963 	bl	2da76 <bt_conn_unref>
	if (persist_paused) {
   1b7b0:	046b      	lsls	r3, r5, #17
   1b7b2:	d507      	bpl.n	1b7c4 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b7b4:	e8d4 3fef 	ldaex	r3, [r4]
   1b7b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b7bc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1b7c0:	2a00      	cmp	r2, #0
   1b7c2:	d1f7      	bne.n	1b7b4 <bt_le_adv_resume+0x68>
}
   1b7c4:	b002      	add	sp, #8
   1b7c6:	bd70      	pop	{r4, r5, r6, pc}
   1b7c8:	20008028 	.word	0x20008028

0001b7cc <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1b7cc:	b530      	push	{r4, r5, lr}
   1b7ce:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1b7d0:	2120      	movs	r1, #32
   1b7d2:	a806      	add	r0, sp, #24
   1b7d4:	f7fe fb50 	bl	19e78 <bt_hci_le_rand>
	if (ret) {
   1b7d8:	4604      	mov	r4, r0
   1b7da:	bb08      	cbnz	r0, 1b820 <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   1b7dc:	f015 fe4d 	bl	3147a <z_impl_k_uptime_ticks>
   1b7e0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1b7e4:	fba0 2305 	umull	r2, r3, r0, r5
   1b7e8:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1b7ec:	2308      	movs	r3, #8
   1b7ee:	0bd2      	lsrs	r2, r2, #15
   1b7f0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1b7f4:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1b7f6:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1b7fa:	9300      	str	r3, [sp, #0]
   1b7fc:	2220      	movs	r2, #32
   1b7fe:	480a      	ldr	r0, [pc, #40]	; (1b828 <prng_reseed.constprop.0+0x5c>)
   1b800:	ab04      	add	r3, sp, #16
   1b802:	a906      	add	r1, sp, #24
   1b804:	f00f ffed 	bl	2b7e2 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   1b808:	b950      	cbnz	r0, 1b820 <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   1b80a:	4b08      	ldr	r3, [pc, #32]	; (1b82c <prng_reseed.constprop.0+0x60>)
   1b80c:	9400      	str	r4, [sp, #0]
   1b80e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b812:	2201      	movs	r2, #1
   1b814:	4623      	mov	r3, r4
   1b816:	4906      	ldr	r1, [pc, #24]	; (1b830 <prng_reseed.constprop.0+0x64>)
   1b818:	f012 f85f 	bl	2d8da <z_log_msg_runtime_create.constprop.0>
   1b81c:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   1b820:	4620      	mov	r0, r4
   1b822:	b00f      	add	sp, #60	; 0x3c
   1b824:	bd30      	pop	{r4, r5, pc}
   1b826:	bf00      	nop
   1b828:	20009f48 	.word	0x20009f48
   1b82c:	00036fbf 	.word	0x00036fbf
   1b830:	00033050 	.word	0x00033050

0001b834 <prng_init>:

int prng_init(void)
{
   1b834:	b510      	push	{r4, lr}
   1b836:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   1b838:	2108      	movs	r1, #8
   1b83a:	a804      	add	r0, sp, #16
   1b83c:	f7fe fb1c 	bl	19e78 <bt_hci_le_rand>
	if (ret) {
   1b840:	4604      	mov	r4, r0
   1b842:	b980      	cbnz	r0, 1b866 <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   1b844:	2208      	movs	r2, #8
   1b846:	480b      	ldr	r0, [pc, #44]	; (1b874 <prng_init+0x40>)
   1b848:	a904      	add	r1, sp, #16
   1b84a:	f00f ffaa 	bl	2b7a2 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1b84e:	b968      	cbnz	r0, 1b86c <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   1b850:	4b09      	ldr	r3, [pc, #36]	; (1b878 <prng_init+0x44>)
   1b852:	9400      	str	r4, [sp, #0]
   1b854:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b858:	2201      	movs	r2, #1
   1b85a:	4623      	mov	r3, r4
   1b85c:	4907      	ldr	r1, [pc, #28]	; (1b87c <prng_init+0x48>)
   1b85e:	f012 f83c 	bl	2d8da <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1b862:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1b866:	4620      	mov	r0, r4
   1b868:	b006      	add	sp, #24
   1b86a:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1b86c:	f7ff ffae 	bl	1b7cc <prng_reseed.constprop.0>
   1b870:	4604      	mov	r4, r0
   1b872:	e7f8      	b.n	1b866 <prng_init+0x32>
   1b874:	20009f48 	.word	0x20009f48
   1b878:	00036fd6 	.word	0x00036fd6
   1b87c:	00033050 	.word	0x00033050

0001b880 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   1b880:	b538      	push	{r3, r4, r5, lr}
   1b882:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1b884:	4604      	mov	r4, r0
   1b886:	b198      	cbz	r0, 1b8b0 <bt_rand+0x30>
   1b888:	b191      	cbz	r1, 1b8b0 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1b88a:	4a0b      	ldr	r2, [pc, #44]	; (1b8b8 <bt_rand+0x38>)
   1b88c:	f00f ffc2 	bl	2b814 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1b890:	1c43      	adds	r3, r0, #1
   1b892:	d107      	bne.n	1b8a4 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   1b894:	f7ff ff9a 	bl	1b7cc <prng_reseed.constprop.0>
		if (ret) {
   1b898:	b948      	cbnz	r0, 1b8ae <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1b89a:	4629      	mov	r1, r5
   1b89c:	4620      	mov	r0, r4
   1b89e:	4a06      	ldr	r2, [pc, #24]	; (1b8b8 <bt_rand+0x38>)
   1b8a0:	f00f ffb8 	bl	2b814 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   1b8a4:	2801      	cmp	r0, #1
   1b8a6:	bf0c      	ite	eq
   1b8a8:	2000      	moveq	r0, #0
   1b8aa:	f06f 0004 	mvnne.w	r0, #4
}
   1b8ae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b8b0:	f06f 0015 	mvn.w	r0, #21
   1b8b4:	e7fb      	b.n	1b8ae <bt_rand+0x2e>
   1b8b6:	bf00      	nop
   1b8b8:	20009f48 	.word	0x20009f48

0001b8bc <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1b8bc:	2240      	movs	r2, #64	; 0x40
{
   1b8be:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1b8c0:	4903      	ldr	r1, [pc, #12]	; (1b8d0 <bt_pub_key_is_debug+0x14>)
   1b8c2:	f015 ffa4 	bl	3180e <memcmp>
}
   1b8c6:	fab0 f080 	clz	r0, r0
   1b8ca:	0940      	lsrs	r0, r0, #5
   1b8cc:	bd08      	pop	{r3, pc}
   1b8ce:	bf00      	nop
   1b8d0:	00037086 	.word	0x00037086

0001b8d4 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1b8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1b8d6:	4b3c      	ldr	r3, [pc, #240]	; (1b9c8 <bt_pub_key_gen+0xf4>)
{
   1b8d8:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1b8da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1b8de:	f003 0306 	and.w	r3, r3, #6
   1b8e2:	2b06      	cmp	r3, #6
   1b8e4:	d00e      	beq.n	1b904 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1b8e6:	4b39      	ldr	r3, [pc, #228]	; (1b9cc <bt_pub_key_gen+0xf8>)
   1b8e8:	2202      	movs	r2, #2
   1b8ea:	9302      	str	r3, [sp, #8]
   1b8ec:	2300      	movs	r3, #0
   1b8ee:	4938      	ldr	r1, [pc, #224]	; (1b9d0 <bt_pub_key_gen+0xfc>)
   1b8f0:	4618      	mov	r0, r3
   1b8f2:	e9cd 3300 	strd	r3, r3, [sp]
   1b8f6:	f012 f837 	bl	2d968 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1b8fa:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1b8fe:	4628      	mov	r0, r5
   1b900:	b005      	add	sp, #20
   1b902:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   1b904:	2800      	cmp	r0, #0
   1b906:	d05b      	beq.n	1b9c0 <bt_pub_key_gen+0xec>
	return list->head;
   1b908:	4e32      	ldr	r6, [pc, #200]	; (1b9d4 <bt_pub_key_gen+0x100>)
   1b90a:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b90c:	b19a      	cbz	r2, 1b936 <bt_pub_key_gen+0x62>
   1b90e:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   1b910:	4283      	cmp	r3, r0
   1b912:	d10c      	bne.n	1b92e <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   1b914:	4b30      	ldr	r3, [pc, #192]	; (1b9d8 <bt_pub_key_gen+0x104>)
   1b916:	2202      	movs	r2, #2
   1b918:	9302      	str	r3, [sp, #8]
   1b91a:	2300      	movs	r3, #0
   1b91c:	492c      	ldr	r1, [pc, #176]	; (1b9d0 <bt_pub_key_gen+0xfc>)
   1b91e:	4618      	mov	r0, r3
   1b920:	e9cd 3300 	strd	r3, r3, [sp]
   1b924:	f012 f820 	bl	2d968 <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   1b928:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1b92c:	e7e7      	b.n	1b8fe <bt_pub_key_gen+0x2a>
	return node->next;
   1b92e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b930:	b10b      	cbz	r3, 1b936 <bt_pub_key_gen+0x62>
   1b932:	3b04      	subs	r3, #4
   1b934:	e7ec      	b.n	1b910 <bt_pub_key_gen+0x3c>
	parent->next = child;
   1b936:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b938:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1b93a:	1d03      	adds	r3, r0, #4
	list->head = node;
   1b93c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b93e:	b902      	cbnz	r2, 1b942 <bt_pub_key_gen+0x6e>
	list->tail = node;
   1b940:	6073      	str	r3, [r6, #4]
   1b942:	4f26      	ldr	r7, [pc, #152]	; (1b9dc <bt_pub_key_gen+0x108>)
   1b944:	e8d7 4fef 	ldaex	r4, [r7]
   1b948:	f044 0320 	orr.w	r3, r4, #32
   1b94c:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b950:	2a00      	cmp	r2, #0
   1b952:	d1f7      	bne.n	1b944 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1b954:	f014 0420 	ands.w	r4, r4, #32
   1b958:	d001      	beq.n	1b95e <bt_pub_key_gen+0x8a>
	return 0;
   1b95a:	2500      	movs	r5, #0
   1b95c:	e7cf      	b.n	1b8fe <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b95e:	e8d7 3fef 	ldaex	r3, [r7]
   1b962:	f023 0310 	bic.w	r3, r3, #16
   1b966:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b96a:	2a00      	cmp	r2, #0
   1b96c:	d1f7      	bne.n	1b95e <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1b96e:	4622      	mov	r2, r4
   1b970:	4621      	mov	r1, r4
   1b972:	f242 0025 	movw	r0, #8229	; 0x2025
   1b976:	f7fe f9e1 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1b97a:	4605      	mov	r5, r0
   1b97c:	2800      	cmp	r0, #0
   1b97e:	d0ec      	beq.n	1b95a <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   1b980:	4b17      	ldr	r3, [pc, #92]	; (1b9e0 <bt_pub_key_gen+0x10c>)
   1b982:	2201      	movs	r2, #1
   1b984:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b988:	4620      	mov	r0, r4
   1b98a:	4623      	mov	r3, r4
   1b98c:	4910      	ldr	r1, [pc, #64]	; (1b9d0 <bt_pub_key_gen+0xfc>)
   1b98e:	9400      	str	r4, [sp, #0]
   1b990:	f011 ffea 	bl	2d968 <z_log_msg_runtime_create.constprop.0>
   1b994:	e8d7 3fef 	ldaex	r3, [r7]
   1b998:	f023 0320 	bic.w	r3, r3, #32
   1b99c:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b9a0:	2a00      	cmp	r2, #0
   1b9a2:	d1f7      	bne.n	1b994 <bt_pub_key_gen+0xc0>
	return list->head;
   1b9a4:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b9a6:	b13c      	cbz	r4, 1b9b8 <bt_pub_key_gen+0xe4>
			if (cb->func) {
   1b9a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b9ac:	3c04      	subs	r4, #4
			if (cb->func) {
   1b9ae:	b10b      	cbz	r3, 1b9b4 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   1b9b0:	2000      	movs	r0, #0
   1b9b2:	4798      	blx	r3
	return node->next;
   1b9b4:	6864      	ldr	r4, [r4, #4]
   1b9b6:	e7f6      	b.n	1b9a6 <bt_pub_key_gen+0xd2>
	list->head = NULL;
   1b9b8:	2300      	movs	r3, #0
	list->tail = NULL;
   1b9ba:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1b9be:	e79e      	b.n	1b8fe <bt_pub_key_gen+0x2a>
		return -EINVAL;
   1b9c0:	f06f 0515 	mvn.w	r5, #21
   1b9c4:	e79b      	b.n	1b8fe <bt_pub_key_gen+0x2a>
   1b9c6:	bf00      	nop
   1b9c8:	20008000 	.word	0x20008000
   1b9cc:	00036fff 	.word	0x00036fff
   1b9d0:	00033030 	.word	0x00033030
   1b9d4:	200309b0 	.word	0x200309b0
   1b9d8:	0003701e 	.word	0x0003701e
   1b9dc:	200080cc 	.word	0x200080cc
   1b9e0:	0003703a 	.word	0x0003703a

0001b9e4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b9e4:	4b04      	ldr	r3, [pc, #16]	; (1b9f8 <bt_pub_key_get+0x14>)
   1b9e6:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   1b9ea:	f013 0f10 	tst.w	r3, #16
}
   1b9ee:	4803      	ldr	r0, [pc, #12]	; (1b9fc <bt_pub_key_get+0x18>)
   1b9f0:	bf08      	it	eq
   1b9f2:	2000      	moveq	r0, #0
   1b9f4:	4770      	bx	lr
   1b9f6:	bf00      	nop
   1b9f8:	200080cc 	.word	0x200080cc
   1b9fc:	20031a8e 	.word	0x20031a8e

0001ba00 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1ba00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   1ba02:	4e24      	ldr	r6, [pc, #144]	; (1ba94 <bt_dh_key_gen+0x94>)
{
   1ba04:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   1ba06:	6833      	ldr	r3, [r6, #0]
   1ba08:	428b      	cmp	r3, r1
   1ba0a:	d03c      	beq.n	1ba86 <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1ba0c:	b123      	cbz	r3, 1ba18 <bt_dh_key_gen+0x18>
		return -EBUSY;
   1ba0e:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1ba12:	4620      	mov	r0, r4
   1ba14:	b004      	add	sp, #16
   1ba16:	bd70      	pop	{r4, r5, r6, pc}
   1ba18:	4b1f      	ldr	r3, [pc, #124]	; (1ba98 <bt_dh_key_gen+0x98>)
   1ba1a:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1ba1e:	0692      	lsls	r2, r2, #26
   1ba20:	d4f5      	bmi.n	1ba0e <bt_dh_key_gen+0xe>
   1ba22:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1ba26:	06db      	lsls	r3, r3, #27
   1ba28:	d530      	bpl.n	1ba8c <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   1ba2a:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1ba2c:	f242 0026 	movw	r0, #8230	; 0x2026
   1ba30:	2140      	movs	r1, #64	; 0x40
   1ba32:	f7fe f949 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   1ba36:	4605      	mov	r5, r0
   1ba38:	b310      	cbz	r0, 1ba80 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   1ba3a:	2140      	movs	r1, #64	; 0x40
   1ba3c:	300c      	adds	r0, #12
   1ba3e:	f013 fcf8 	bl	2f432 <net_buf_simple_add>
   1ba42:	4623      	mov	r3, r4
   1ba44:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1ba48:	f853 1b04 	ldr.w	r1, [r3], #4
   1ba4c:	4293      	cmp	r3, r2
   1ba4e:	f840 1b04 	str.w	r1, [r0], #4
   1ba52:	d1f9      	bne.n	1ba48 <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1ba54:	2200      	movs	r2, #0
   1ba56:	4629      	mov	r1, r5
   1ba58:	f242 0026 	movw	r0, #8230	; 0x2026
   1ba5c:	f7fe f96e 	bl	19d3c <bt_hci_cmd_send_sync>
	if (err) {
   1ba60:	4604      	mov	r4, r0
   1ba62:	2800      	cmp	r0, #0
   1ba64:	d0d5      	beq.n	1ba12 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1ba66:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1ba68:	4a0c      	ldr	r2, [pc, #48]	; (1ba9c <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   1ba6a:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1ba6c:	4618      	mov	r0, r3
   1ba6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ba72:	490b      	ldr	r1, [pc, #44]	; (1baa0 <bt_dh_key_gen+0xa0>)
   1ba74:	2202      	movs	r2, #2
   1ba76:	9403      	str	r4, [sp, #12]
   1ba78:	9300      	str	r3, [sp, #0]
   1ba7a:	f011 ff75 	bl	2d968 <z_log_msg_runtime_create.constprop.0>
		return err;
   1ba7e:	e7c8      	b.n	1ba12 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1ba80:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1ba84:	e7ef      	b.n	1ba66 <bt_dh_key_gen+0x66>
		return -EALREADY;
   1ba86:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1ba8a:	e7c2      	b.n	1ba12 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1ba8c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1ba90:	e7bf      	b.n	1ba12 <bt_dh_key_gen+0x12>
   1ba92:	bf00      	nop
   1ba94:	200309ac 	.word	0x200309ac
   1ba98:	200080cc 	.word	0x200080cc
   1ba9c:	00037064 	.word	0x00037064
   1baa0:	00033030 	.word	0x00033030

0001baa4 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1baa6:	4b19      	ldr	r3, [pc, #100]	; (1bb0c <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1baa8:	68c5      	ldr	r5, [r0, #12]
   1baaa:	e8d3 2fef 	ldaex	r2, [r3]
   1baae:	f022 0220 	bic.w	r2, r2, #32
   1bab2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bab6:	2900      	cmp	r1, #0
   1bab8:	d1f7      	bne.n	1baaa <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1baba:	782a      	ldrb	r2, [r5, #0]
   1babc:	b98a      	cbnz	r2, 1bae2 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1babe:	4914      	ldr	r1, [pc, #80]	; (1bb10 <bt_hci_evt_le_pkey_complete+0x6c>)
   1bac0:	1c6a      	adds	r2, r5, #1
   1bac2:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1bac6:	f852 4b04 	ldr.w	r4, [r2], #4
   1baca:	4282      	cmp	r2, r0
   1bacc:	f841 4b04 	str.w	r4, [r1], #4
   1bad0:	d1f9      	bne.n	1bac6 <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bad2:	e8d3 1fef 	ldaex	r1, [r3]
   1bad6:	f041 0110 	orr.w	r1, r1, #16
   1bada:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1bade:	2a00      	cmp	r2, #0
   1bae0:	d1f7      	bne.n	1bad2 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   1bae2:	4e0c      	ldr	r6, [pc, #48]	; (1bb14 <bt_hci_evt_le_pkey_complete+0x70>)
   1bae4:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bae6:	b16c      	cbz	r4, 1bb04 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1bae8:	4f09      	ldr	r7, [pc, #36]	; (1bb10 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1baea:	3c04      	subs	r4, #4
		if (cb->func) {
   1baec:	6823      	ldr	r3, [r4, #0]
   1baee:	b12b      	cbz	r3, 1bafc <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   1baf0:	782a      	ldrb	r2, [r5, #0]
   1baf2:	2a00      	cmp	r2, #0
   1baf4:	bf0c      	ite	eq
   1baf6:	4638      	moveq	r0, r7
   1baf8:	2000      	movne	r0, #0
   1bafa:	4798      	blx	r3
	return node->next;
   1bafc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bafe:	b10c      	cbz	r4, 1bb04 <bt_hci_evt_le_pkey_complete+0x60>
   1bb00:	3c04      	subs	r4, #4
   1bb02:	e7f3      	b.n	1baec <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   1bb04:	2300      	movs	r3, #0
	list->tail = NULL;
   1bb06:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb0c:	200080cc 	.word	0x200080cc
   1bb10:	20031a8e 	.word	0x20031a8e
   1bb14:	200309b0 	.word	0x200309b0

0001bb18 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1bb18:	4905      	ldr	r1, [pc, #20]	; (1bb30 <bt_hci_evt_le_dhkey_complete+0x18>)
   1bb1a:	680b      	ldr	r3, [r1, #0]
   1bb1c:	b133      	cbz	r3, 1bb2c <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1bb1e:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1bb20:	2000      	movs	r0, #0
   1bb22:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1bb24:	7811      	ldrb	r1, [r2, #0]
   1bb26:	b901      	cbnz	r1, 1bb2a <bt_hci_evt_le_dhkey_complete+0x12>
   1bb28:	1c50      	adds	r0, r2, #1
   1bb2a:	4718      	bx	r3
	}
}
   1bb2c:	4770      	bx	lr
   1bb2e:	bf00      	nop
   1bb30:	200309ac 	.word	0x200309ac

0001bb34 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1bb34:	b570      	push	{r4, r5, r6, lr}
   1bb36:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1bb38:	4b0a      	ldr	r3, [pc, #40]	; (1bb64 <notify_connected+0x30>)
   1bb3a:	681d      	ldr	r5, [r3, #0]
   1bb3c:	b925      	cbnz	r5, 1bb48 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1bb3e:	4d0a      	ldr	r5, [pc, #40]	; (1bb68 <notify_connected+0x34>)
   1bb40:	4e0a      	ldr	r6, [pc, #40]	; (1bb6c <notify_connected+0x38>)
   1bb42:	42b5      	cmp	r5, r6
   1bb44:	d307      	bcc.n	1bb56 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1bb46:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1bb48:	682b      	ldr	r3, [r5, #0]
   1bb4a:	b113      	cbz	r3, 1bb52 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   1bb4c:	4620      	mov	r0, r4
   1bb4e:	7b21      	ldrb	r1, [r4, #12]
   1bb50:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1bb52:	69ad      	ldr	r5, [r5, #24]
   1bb54:	e7f2      	b.n	1bb3c <notify_connected+0x8>
		if (cb->connected) {
   1bb56:	682b      	ldr	r3, [r5, #0]
   1bb58:	b113      	cbz	r3, 1bb60 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1bb5a:	4620      	mov	r0, r4
   1bb5c:	7b21      	ldrb	r1, [r4, #12]
   1bb5e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1bb60:	351c      	adds	r5, #28
   1bb62:	e7ee      	b.n	1bb42 <notify_connected+0xe>
   1bb64:	200309d8 	.word	0x200309d8
   1bb68:	00032fac 	.word	0x00032fac
   1bb6c:	00032fc8 	.word	0x00032fc8

0001bb70 <tx_notify>:
{
   1bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb74:	4604      	mov	r4, r0
	tx->cb = NULL;
   1bb76:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1bb7a:	4f14      	ldr	r7, [pc, #80]	; (1bbcc <tx_notify+0x5c>)
	__asm__ volatile(
   1bb7c:	f04f 0220 	mov.w	r2, #32
   1bb80:	f3ef 8311 	mrs	r3, BASEPRI
   1bb84:	f382 8812 	msr	BASEPRI_MAX, r2
   1bb88:	f3bf 8f6f 	isb	sy
	return list->head;
   1bb8c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1bb8e:	b929      	cbnz	r1, 1bb9c <tx_notify+0x2c>
	__asm__ volatile(
   1bb90:	f383 8811 	msr	BASEPRI, r3
   1bb94:	f3bf 8f6f 	isb	sy
}
   1bb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bb9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1bb9e:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bba0:	4281      	cmp	r1, r0
	list->tail = node;
   1bba2:	bf08      	it	eq
   1bba4:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1bba6:	6222      	str	r2, [r4, #32]
   1bba8:	f383 8811 	msr	BASEPRI, r3
   1bbac:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1bbb0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1bbb4:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1bbb6:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   1bbba:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1bbbe:	f015 f9d2 	bl	30f66 <k_queue_append>
		cb(conn, user_data, 0);
   1bbc2:	2200      	movs	r2, #0
   1bbc4:	4631      	mov	r1, r6
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	47a8      	blx	r5
	while (1) {
   1bbca:	e7d7      	b.n	1bb7c <tx_notify+0xc>
   1bbcc:	20008e98 	.word	0x20008e98

0001bbd0 <conn_tx_destroy>:
	tx->cb = NULL;
   1bbd0:	2200      	movs	r2, #0
{
   1bbd2:	b570      	push	{r4, r5, r6, lr}
   1bbd4:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
   1bbd6:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1bbda:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   1bbdc:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1bbe0:	4805      	ldr	r0, [pc, #20]	; (1bbf8 <conn_tx_destroy+0x28>)
   1bbe2:	f015 f9c0 	bl	30f66 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1bbe6:	4631      	mov	r1, r6
   1bbe8:	4620      	mov	r0, r4
   1bbea:	462b      	mov	r3, r5
}
   1bbec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1bbf0:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1bbf4:	4718      	bx	r3
   1bbf6:	bf00      	nop
   1bbf8:	20008e98 	.word	0x20008e98

0001bbfc <send_frag>:
{
   1bbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bc00:	4604      	mov	r4, r0
   1bc02:	460e      	mov	r6, r1
   1bc04:	4617      	mov	r7, r2
   1bc06:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1bc08:	698d      	ldr	r5, [r1, #24]
{
   1bc0a:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   1bc0c:	f04f 33ff 	mov.w	r3, #4294967295
   1bc10:	f04f 32ff 	mov.w	r2, #4294967295
   1bc14:	4842      	ldr	r0, [pc, #264]	; (1bd20 <send_frag+0x124>)
   1bc16:	f009 ff89 	bl	25b2c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1bc1a:	7b63      	ldrb	r3, [r4, #13]
   1bc1c:	2b07      	cmp	r3, #7
   1bc1e:	d173      	bne.n	1bd08 <send_frag+0x10c>
	__asm__ volatile(
   1bc20:	f04f 0320 	mov.w	r3, #32
   1bc24:	f3ef 8211 	mrs	r2, BASEPRI
   1bc28:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc2c:	f3bf 8f6f 	isb	sy
	if (tx) {
   1bc30:	2d00      	cmp	r5, #0
   1bc32:	d049      	beq.n	1bcc8 <send_frag+0xcc>
	parent->next = child;
   1bc34:	2300      	movs	r3, #0
   1bc36:	602b      	str	r3, [r5, #0]
	return list->tail;
   1bc38:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1bc3a:	2b00      	cmp	r3, #0
   1bc3c:	d141      	bne.n	1bcc2 <send_frag+0xc6>
	list->head = node;
   1bc3e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1bc42:	f382 8811 	msr	BASEPRI, r2
   1bc46:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1bc4a:	2104      	movs	r1, #4
   1bc4c:	f106 000c 	add.w	r0, r6, #12
   1bc50:	f013 fc06 	bl	2f460 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1bc54:	8823      	ldrh	r3, [r4, #0]
   1bc56:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   1bc5a:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   1bc5e:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1bc60:	8a33      	ldrh	r3, [r6, #16]
   1bc62:	3b04      	subs	r3, #4
   1bc64:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1bc66:	2302      	movs	r3, #2
	return bt_send(buf);
   1bc68:	4630      	mov	r0, r6
   1bc6a:	7633      	strb	r3, [r6, #24]
   1bc6c:	f7fe fb6c 	bl	1a348 <bt_send>
	if (err) {
   1bc70:	2800      	cmp	r0, #0
   1bc72:	d053      	beq.n	1bd1c <send_frag+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1bc74:	4b2b      	ldr	r3, [pc, #172]	; (1bd24 <send_frag+0x128>)
   1bc76:	9003      	str	r0, [sp, #12]
   1bc78:	9302      	str	r3, [sp, #8]
   1bc7a:	2300      	movs	r3, #0
   1bc7c:	2201      	movs	r2, #1
   1bc7e:	4618      	mov	r0, r3
   1bc80:	e9cd 3300 	strd	r3, r3, [sp]
   1bc84:	4928      	ldr	r1, [pc, #160]	; (1bd28 <send_frag+0x12c>)
   1bc86:	f011 fea4 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   1bc8a:	f04f 0320 	mov.w	r3, #32
   1bc8e:	f3ef 8711 	mrs	r7, BASEPRI
   1bc92:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc96:	f3bf 8f6f 	isb	sy
		if (tx) {
   1bc9a:	b315      	cbz	r5, 1bce2 <send_frag+0xe6>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1bc9c:	4629      	mov	r1, r5
   1bc9e:	f104 0014 	add.w	r0, r4, #20
   1bca2:	f011 fe70 	bl	2d986 <sys_slist_find_and_remove>
	__asm__ volatile(
   1bca6:	f387 8811 	msr	BASEPRI, r7
   1bcaa:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1bcae:	481c      	ldr	r0, [pc, #112]	; (1bd20 <send_frag+0x124>)
   1bcb0:	f009 ff16 	bl	25ae0 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1bcb4:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   1bcb6:	4629      	mov	r1, r5
   1bcb8:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   1bcba:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1bcbc:	f7ff ff88 	bl	1bbd0 <conn_tx_destroy>
   1bcc0:	e01b      	b.n	1bcfa <send_frag+0xfe>
	parent->next = child;
   1bcc2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1bcc4:	61a5      	str	r5, [r4, #24]
}
   1bcc6:	e7bc      	b.n	1bc42 <send_frag+0x46>
	return list->tail;
   1bcc8:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1bcca:	b133      	cbz	r3, 1bcda <send_frag+0xde>
			pending_no_cb = &tail_tx->pending_no_cb;
   1bccc:	f103 080c 	add.w	r8, r3, #12
   1bcd0:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1bcd2:	3301      	adds	r3, #1
   1bcd4:	f8c8 3000 	str.w	r3, [r8]
   1bcd8:	e7b3      	b.n	1bc42 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   1bcda:	69e3      	ldr	r3, [r4, #28]
   1bcdc:	f104 081c 	add.w	r8, r4, #28
   1bce0:	e7f7      	b.n	1bcd2 <send_frag+0xd6>
			(*pending_no_cb)--;
   1bce2:	f8d8 3000 	ldr.w	r3, [r8]
   1bce6:	3b01      	subs	r3, #1
   1bce8:	f8c8 3000 	str.w	r3, [r8]
   1bcec:	f387 8811 	msr	BASEPRI, r7
   1bcf0:	f3bf 8f6f 	isb	sy
   1bcf4:	480a      	ldr	r0, [pc, #40]	; (1bd20 <send_frag+0x124>)
   1bcf6:	f009 fef3 	bl	25ae0 <z_impl_k_sem_give>
	if (always_consume) {
   1bcfa:	f1b9 0f00 	cmp.w	r9, #0
   1bcfe:	d109      	bne.n	1bd14 <send_frag+0x118>
	return false;
   1bd00:	2000      	movs	r0, #0
}
   1bd02:	b005      	add	sp, #20
   1bd04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bd08:	4805      	ldr	r0, [pc, #20]	; (1bd20 <send_frag+0x124>)
   1bd0a:	f009 fee9 	bl	25ae0 <z_impl_k_sem_give>
	if (tx) {
   1bd0e:	2d00      	cmp	r5, #0
   1bd10:	d1d0      	bne.n	1bcb4 <send_frag+0xb8>
   1bd12:	e7f2      	b.n	1bcfa <send_frag+0xfe>
		net_buf_unref(buf);
   1bd14:	4630      	mov	r0, r6
   1bd16:	f004 fc41 	bl	2059c <net_buf_unref>
   1bd1a:	e7f1      	b.n	1bd00 <send_frag+0x104>
	return true;
   1bd1c:	2001      	movs	r0, #1
   1bd1e:	e7f0      	b.n	1bd02 <send_frag+0x106>
   1bd20:	20008100 	.word	0x20008100
   1bd24:	00036a86 	.word	0x00036a86
   1bd28:	00033020 	.word	0x00033020

0001bd2c <bt_conn_get_pkts>:
}
   1bd2c:	4800      	ldr	r0, [pc, #0]	; (1bd30 <bt_conn_get_pkts+0x4>)
   1bd2e:	4770      	bx	lr
   1bd30:	20008100 	.word	0x20008100

0001bd34 <bt_conn_new>:
{
   1bd34:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1bd36:	2200      	movs	r2, #0
   1bd38:	4604      	mov	r4, r0
   1bd3a:	428a      	cmp	r2, r1
   1bd3c:	d102      	bne.n	1bd44 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bd3e:	2400      	movs	r4, #0
}
   1bd40:	4620      	mov	r0, r4
   1bd42:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bd44:	2001      	movs	r0, #1
   1bd46:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   1bd4a:	e8d3 5fef 	ldaex	r5, [r3]
   1bd4e:	2d00      	cmp	r5, #0
   1bd50:	d104      	bne.n	1bd5c <bt_conn_new+0x28>
   1bd52:	e8c3 0fec 	stlex	ip, r0, [r3]
   1bd56:	f1bc 0f00 	cmp.w	ip, #0
   1bd5a:	d1f6      	bne.n	1bd4a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bd5c:	d002      	beq.n	1bd64 <bt_conn_new+0x30>
   1bd5e:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1bd60:	4402      	add	r2, r0
   1bd62:	e7ea      	b.n	1bd3a <bt_conn_new+0x6>
	if (!conn) {
   1bd64:	2c00      	cmp	r4, #0
   1bd66:	d0ea      	beq.n	1bd3e <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   1bd68:	22bc      	movs	r2, #188	; 0xbc
   1bd6a:	2100      	movs	r1, #0
   1bd6c:	4620      	mov	r0, r4
   1bd6e:	f015 fd98 	bl	318a2 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1bd72:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1bd76:	4904      	ldr	r1, [pc, #16]	; (1bd88 <bt_conn_new+0x54>)
   1bd78:	f015 f9d0 	bl	3111c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1bd7c:	4903      	ldr	r1, [pc, #12]	; (1bd8c <bt_conn_new+0x58>)
   1bd7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1bd82:	f015 f987 	bl	31094 <k_work_init>
	return conn;
   1bd86:	e7db      	b.n	1bd40 <bt_conn_new+0xc>
   1bd88:	0001c531 	.word	0x0001c531
   1bd8c:	0002d9f1 	.word	0x0002d9f1

0001bd90 <bt_conn_recv>:
{
   1bd90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd92:	4616      	mov	r6, r2
   1bd94:	b087      	sub	sp, #28
   1bd96:	4604      	mov	r4, r0
   1bd98:	460d      	mov	r5, r1
	tx_notify(conn);
   1bd9a:	f7ff fee9 	bl	1bb70 <tx_notify>
	switch (flags) {
   1bd9e:	2e01      	cmp	r6, #1
   1bda0:	d02e      	beq.n	1be00 <bt_conn_recv+0x70>
   1bda2:	2e02      	cmp	r6, #2
   1bda4:	d165      	bne.n	1be72 <bt_conn_recv+0xe2>
		if (conn->rx) {
   1bda6:	6923      	ldr	r3, [r4, #16]
   1bda8:	b163      	cbz	r3, 1bdc4 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   1bdaa:	4b3d      	ldr	r3, [pc, #244]	; (1bea0 <bt_conn_recv+0x110>)
   1bdac:	2201      	movs	r2, #1
   1bdae:	9302      	str	r3, [sp, #8]
   1bdb0:	2300      	movs	r3, #0
   1bdb2:	493c      	ldr	r1, [pc, #240]	; (1bea4 <bt_conn_recv+0x114>)
   1bdb4:	4618      	mov	r0, r3
   1bdb6:	e9cd 3300 	strd	r3, r3, [sp]
   1bdba:	f011 fe0a 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1bdbe:	4620      	mov	r0, r4
   1bdc0:	f011 fe19 	bl	2d9f6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1bdc4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1bdc6:	6921      	ldr	r1, [r4, #16]
   1bdc8:	8a0a      	ldrh	r2, [r1, #16]
   1bdca:	2a01      	cmp	r2, #1
   1bdcc:	d966      	bls.n	1be9c <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1bdce:	68cb      	ldr	r3, [r1, #12]
   1bdd0:	881b      	ldrh	r3, [r3, #0]
   1bdd2:	3304      	adds	r3, #4
   1bdd4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1bdd6:	429a      	cmp	r2, r3
   1bdd8:	d360      	bcc.n	1be9c <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   1bdda:	d956      	bls.n	1be8a <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1bddc:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1bde0:	4b31      	ldr	r3, [pc, #196]	; (1bea8 <bt_conn_recv+0x118>)
   1bde2:	2201      	movs	r2, #1
   1bde4:	9302      	str	r3, [sp, #8]
   1bde6:	2300      	movs	r3, #0
   1bde8:	492e      	ldr	r1, [pc, #184]	; (1bea4 <bt_conn_recv+0x114>)
   1bdea:	4618      	mov	r0, r3
   1bdec:	e9cd 3300 	strd	r3, r3, [sp]
   1bdf0:	f011 fdef 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1bdf4:	4620      	mov	r0, r4
}
   1bdf6:	b007      	add	sp, #28
   1bdf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   1bdfc:	f011 bdfb 	b.w	2d9f6 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1be00:	6923      	ldr	r3, [r4, #16]
   1be02:	b963      	cbnz	r3, 1be1e <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   1be04:	4a29      	ldr	r2, [pc, #164]	; (1beac <bt_conn_recv+0x11c>)
   1be06:	4618      	mov	r0, r3
   1be08:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1be0c:	4925      	ldr	r1, [pc, #148]	; (1bea4 <bt_conn_recv+0x114>)
   1be0e:	4632      	mov	r2, r6
   1be10:	9300      	str	r3, [sp, #0]
   1be12:	f011 fdde 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1be16:	4620      	mov	r0, r4
   1be18:	f011 fded 	bl	2d9f6 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1be1c:	e001      	b.n	1be22 <bt_conn_recv+0x92>
		if (!buf->len) {
   1be1e:	8a2f      	ldrh	r7, [r5, #16]
   1be20:	b92f      	cbnz	r7, 1be2e <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   1be22:	4628      	mov	r0, r5
}
   1be24:	b007      	add	sp, #28
   1be26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   1be2a:	f004 bbb7 	b.w	2059c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1be2e:	f103 000c 	add.w	r0, r3, #12
   1be32:	f013 fb42 	bl	2f4ba <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1be36:	4287      	cmp	r7, r0
   1be38:	d911      	bls.n	1be5e <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1be3a:	2700      	movs	r7, #0
   1be3c:	4b1c      	ldr	r3, [pc, #112]	; (1beb0 <bt_conn_recv+0x120>)
   1be3e:	4632      	mov	r2, r6
   1be40:	4638      	mov	r0, r7
   1be42:	4918      	ldr	r1, [pc, #96]	; (1bea4 <bt_conn_recv+0x114>)
   1be44:	9302      	str	r3, [sp, #8]
   1be46:	e9cd 7700 	strd	r7, r7, [sp]
   1be4a:	463b      	mov	r3, r7
   1be4c:	f011 fdc1 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1be50:	463a      	mov	r2, r7
   1be52:	4620      	mov	r0, r4
   1be54:	6921      	ldr	r1, [r4, #16]
   1be56:	f000 fddf 	bl	1ca18 <bt_l2cap_recv>
			conn->rx = NULL;
   1be5a:	6127      	str	r7, [r4, #16]
   1be5c:	e7e1      	b.n	1be22 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1be5e:	6920      	ldr	r0, [r4, #16]
   1be60:	8a2a      	ldrh	r2, [r5, #16]
   1be62:	68e9      	ldr	r1, [r5, #12]
   1be64:	300c      	adds	r0, #12
   1be66:	f013 faea 	bl	2f43e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1be6a:	4628      	mov	r0, r5
   1be6c:	f004 fb96 	bl	2059c <net_buf_unref>
		break;
   1be70:	e7a9      	b.n	1bdc6 <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1be72:	4b10      	ldr	r3, [pc, #64]	; (1beb4 <bt_conn_recv+0x124>)
   1be74:	2201      	movs	r2, #1
   1be76:	9302      	str	r3, [sp, #8]
   1be78:	2300      	movs	r3, #0
   1be7a:	490a      	ldr	r1, [pc, #40]	; (1bea4 <bt_conn_recv+0x114>)
   1be7c:	4618      	mov	r0, r3
   1be7e:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   1be82:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1be84:	f011 fda5 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
   1be88:	e7c5      	b.n	1be16 <bt_conn_recv+0x86>
	conn->rx = NULL;
   1be8a:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   1be8c:	2201      	movs	r2, #1
   1be8e:	4620      	mov	r0, r4
	conn->rx = NULL;
   1be90:	6123      	str	r3, [r4, #16]
}
   1be92:	b007      	add	sp, #28
   1be94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   1be98:	f000 bdbe 	b.w	1ca18 <bt_l2cap_recv>
}
   1be9c:	b007      	add	sp, #28
   1be9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bea0:	000370cd 	.word	0x000370cd
   1bea4:	00033020 	.word	0x00033020
   1bea8:	0003714d 	.word	0x0003714d
   1beac:	000370ea 	.word	0x000370ea
   1beb0:	00037108 	.word	0x00037108
   1beb4:	0003712f 	.word	0x0003712f

0001beb8 <bt_conn_send_cb>:
{
   1beb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bebc:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1bebe:	7b43      	ldrb	r3, [r0, #13]
{
   1bec0:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1bec2:	2b07      	cmp	r3, #7
{
   1bec4:	4688      	mov	r8, r1
   1bec6:	4617      	mov	r7, r2
   1bec8:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   1beca:	d00c      	beq.n	1bee6 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   1becc:	4b28      	ldr	r3, [pc, #160]	; (1bf70 <bt_conn_send_cb+0xb8>)
   1bece:	2201      	movs	r2, #1
   1bed0:	9302      	str	r3, [sp, #8]
   1bed2:	2300      	movs	r3, #0
   1bed4:	4927      	ldr	r1, [pc, #156]	; (1bf74 <bt_conn_send_cb+0xbc>)
   1bed6:	4618      	mov	r0, r3
   1bed8:	e9cd 3300 	strd	r3, r3, [sp]
   1bedc:	f011 fd79 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   1bee0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bee4:	e01c      	b.n	1bf20 <bt_conn_send_cb+0x68>
	if (cb) {
   1bee6:	2a00      	cmp	r2, #0
   1bee8:	d03f      	beq.n	1bf6a <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   1beea:	f00a fb37 	bl	2655c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1beee:	4b22      	ldr	r3, [pc, #136]	; (1bf78 <bt_conn_send_cb+0xc0>)
   1bef0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1bef2:	4822      	ldr	r0, [pc, #136]	; (1bf7c <bt_conn_send_cb+0xc4>)
   1bef4:	bf07      	ittee	eq
   1bef6:	2200      	moveq	r2, #0
   1bef8:	2300      	moveq	r3, #0
   1befa:	f04f 32ff 	movne.w	r2, #4294967295
   1befe:	f04f 33ff 	movne.w	r3, #4294967295
   1bf02:	f009 fdb9 	bl	25a78 <z_impl_k_queue_get>
   1bf06:	4604      	mov	r4, r0
		if (!tx) {
   1bf08:	b968      	cbnz	r0, 1bf26 <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   1bf0a:	4b1d      	ldr	r3, [pc, #116]	; (1bf80 <bt_conn_send_cb+0xc8>)
   1bf0c:	9000      	str	r0, [sp, #0]
   1bf0e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1bf12:	2201      	movs	r2, #1
   1bf14:	4603      	mov	r3, r0
   1bf16:	4917      	ldr	r1, [pc, #92]	; (1bf74 <bt_conn_send_cb+0xbc>)
   1bf18:	f011 fd5b 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   1bf1c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1bf20:	b005      	add	sp, #20
   1bf22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1bf26:	7b73      	ldrb	r3, [r6, #13]
   1bf28:	2500      	movs	r5, #0
   1bf2a:	2b07      	cmp	r3, #7
   1bf2c:	d011      	beq.n	1bf52 <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   1bf2e:	4b15      	ldr	r3, [pc, #84]	; (1bf84 <bt_conn_send_cb+0xcc>)
   1bf30:	4628      	mov	r0, r5
   1bf32:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1bf36:	2202      	movs	r2, #2
   1bf38:	462b      	mov	r3, r5
   1bf3a:	490e      	ldr	r1, [pc, #56]	; (1bf74 <bt_conn_send_cb+0xbc>)
   1bf3c:	9500      	str	r5, [sp, #0]
   1bf3e:	f011 fd48 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   1bf42:	4621      	mov	r1, r4
	tx->user_data = NULL;
   1bf44:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1bf48:	480c      	ldr	r0, [pc, #48]	; (1bf7c <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1bf4a:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1bf4c:	f015 f80b 	bl	30f66 <k_queue_append>
}
   1bf50:	e7c6      	b.n	1bee0 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   1bf52:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1bf56:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   1bf58:	f106 0038 	add.w	r0, r6, #56	; 0x38
   1bf5c:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   1bf5e:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   1bf62:	f013 fa3e 	bl	2f3e2 <net_buf_put>
	return 0;
   1bf66:	2000      	movs	r0, #0
   1bf68:	e7da      	b.n	1bf20 <bt_conn_send_cb+0x68>
   1bf6a:	4614      	mov	r4, r2
   1bf6c:	e7f4      	b.n	1bf58 <bt_conn_send_cb+0xa0>
   1bf6e:	bf00      	nop
   1bf70:	00037168 	.word	0x00037168
   1bf74:	00033020 	.word	0x00033020
   1bf78:	2000a530 	.word	0x2000a530
   1bf7c:	20008e98 	.word	0x20008e98
   1bf80:	00037177 	.word	0x00037177
   1bf84:	00037195 	.word	0x00037195

0001bf88 <bt_conn_prepare_events>:
{
   1bf88:	b570      	push	{r4, r5, r6, lr}
   1bf8a:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   1bf8c:	4817      	ldr	r0, [pc, #92]	; (1bfec <bt_conn_prepare_events+0x64>)
   1bf8e:	f015 fc13 	bl	317b8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1bf92:	2200      	movs	r2, #0
   1bf94:	2101      	movs	r1, #1
   1bf96:	4620      	mov	r0, r4
   1bf98:	4b14      	ldr	r3, [pc, #80]	; (1bfec <bt_conn_prepare_events+0x64>)
   1bf9a:	f015 fbf0 	bl	3177e <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1bf9e:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bfa2:	4b13      	ldr	r3, [pc, #76]	; (1bff0 <bt_conn_prepare_events+0x68>)
   1bfa4:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   1bfa8:	b90a      	cbnz	r2, 1bfae <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1bfaa:	2001      	movs	r0, #1
}
   1bfac:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1bfae:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   1bfb2:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   1bfb6:	b953      	cbnz	r3, 1bfce <bt_conn_prepare_events+0x46>
   1bfb8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1bfbc:	1d28      	adds	r0, r5, #4
   1bfbe:	f011 fcfd 	bl	2d9bc <atomic_and>
   1bfc2:	0643      	lsls	r3, r0, #25
   1bfc4:	d503      	bpl.n	1bfce <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   1bfc6:	4628      	mov	r0, r5
   1bfc8:	f011 fd1e 	bl	2da08 <conn_cleanup>
		return -ENOTCONN;
   1bfcc:	e7ed      	b.n	1bfaa <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1bfce:	7b6b      	ldrb	r3, [r5, #13]
   1bfd0:	2b07      	cmp	r3, #7
   1bfd2:	d1ea      	bne.n	1bfaa <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   1bfd4:	4630      	mov	r0, r6
   1bfd6:	4b07      	ldr	r3, [pc, #28]	; (1bff4 <bt_conn_prepare_events+0x6c>)
   1bfd8:	2200      	movs	r2, #0
   1bfda:	2104      	movs	r1, #4
   1bfdc:	f015 fbcf 	bl	3177e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1bfe0:	2301      	movs	r3, #1
			ev_count++;
   1bfe2:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1bfe4:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   1bfe8:	e7e0      	b.n	1bfac <bt_conn_prepare_events+0x24>
   1bfea:	bf00      	nop
   1bfec:	2000856c 	.word	0x2000856c
   1bff0:	2000a13c 	.word	0x2000a13c
   1bff4:	2000a0b8 	.word	0x2000a0b8

0001bff8 <bt_conn_lookup_handle>:
{
   1bff8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1bffa:	2101      	movs	r1, #1
   1bffc:	4801      	ldr	r0, [pc, #4]	; (1c004 <bt_conn_lookup_handle+0xc>)
   1bffe:	f011 bd4e 	b.w	2da9e <conn_lookup_handle>
   1c002:	bf00      	nop
   1c004:	2000a080 	.word	0x2000a080

0001c008 <bt_conn_set_state>:
{
   1c008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   1c00a:	7b46      	ldrb	r6, [r0, #13]
{
   1c00c:	4604      	mov	r4, r0
	if (conn->state == state) {
   1c00e:	428e      	cmp	r6, r1
{
   1c010:	460d      	mov	r5, r1
	if (conn->state == state) {
   1c012:	d111      	bne.n	1c038 <bt_conn_set_state+0x30>
	switch (state) {
   1c014:	2e08      	cmp	r6, #8
   1c016:	bf96      	itet	ls
   1c018:	4b65      	ldrls	r3, [pc, #404]	; (1c1b0 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   1c01a:	4b66      	ldrhi	r3, [pc, #408]	; (1c1b4 <bt_conn_set_state+0x1ac>)
   1c01c:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1c020:	9303      	str	r3, [sp, #12]
   1c022:	4b65      	ldr	r3, [pc, #404]	; (1c1b8 <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   1c024:	9302      	str	r3, [sp, #8]
   1c026:	2300      	movs	r3, #0
   1c028:	2202      	movs	r2, #2
   1c02a:	4618      	mov	r0, r3
   1c02c:	e9cd 3300 	strd	r3, r3, [sp]
   1c030:	4962      	ldr	r1, [pc, #392]	; (1c1bc <bt_conn_set_state+0x1b4>)
   1c032:	f011 fcce 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
   1c036:	e098      	b.n	1c16a <bt_conn_set_state+0x162>
	conn->state = state;
   1c038:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1c03a:	b926      	cbnz	r6, 1c046 <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1c03c:	7883      	ldrb	r3, [r0, #2]
   1c03e:	2b08      	cmp	r3, #8
   1c040:	d001      	beq.n	1c046 <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   1c042:	f011 fd04 	bl	2da4e <bt_conn_ref>
	switch (conn->state) {
   1c046:	7b63      	ldrb	r3, [r4, #13]
   1c048:	2b08      	cmp	r3, #8
   1c04a:	f200 80ad 	bhi.w	1c1a8 <bt_conn_set_state+0x1a0>
   1c04e:	e8df f003 	tbb	[pc, r3]
   1c052:	053a      	.short	0x053a
   1c054:	8c8c8c8c 	.word	0x8c8c8c8c
   1c058:	1c8c      	.short	0x1c8c
   1c05a:	8c          	.byte	0x8c
   1c05b:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   1c05c:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1c05e:	4d58      	ldr	r5, [pc, #352]	; (1c1c0 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   1c060:	f04f 0220 	mov.w	r2, #32
   1c064:	f3ef 8311 	mrs	r3, BASEPRI
   1c068:	f382 8812 	msr	BASEPRI_MAX, r2
   1c06c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1c070:	69e2      	ldr	r2, [r4, #28]
   1c072:	2a00      	cmp	r2, #0
   1c074:	d073      	beq.n	1c15e <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   1c076:	3a01      	subs	r2, #1
   1c078:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1c07a:	f383 8811 	msr	BASEPRI, r3
   1c07e:	f3bf 8f6f 	isb	sy
   1c082:	4628      	mov	r0, r5
   1c084:	f009 fd2c 	bl	25ae0 <z_impl_k_sem_give>
}
   1c088:	e7ea      	b.n	1c060 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1c08a:	78a3      	ldrb	r3, [r4, #2]
   1c08c:	2b04      	cmp	r3, #4
   1c08e:	d06c      	beq.n	1c16a <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   1c090:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1c094:	f014 ff5b 	bl	30f4e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1c098:	2100      	movs	r1, #0
   1c09a:	484a      	ldr	r0, [pc, #296]	; (1c1c4 <bt_conn_set_state+0x1bc>)
   1c09c:	f00a fd44 	bl	26b28 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1c0a0:	2300      	movs	r3, #0
	list->tail = NULL;
   1c0a2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c0a6:	78e3      	ldrb	r3, [r4, #3]
   1c0a8:	2b01      	cmp	r3, #1
   1c0aa:	d15e      	bne.n	1c16a <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   1c0ac:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   1c0ae:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   1c0b2:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1c0b6:	2300      	movs	r3, #0
   1c0b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   1c0bc:	b004      	add	sp, #16
   1c0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1c0c2:	f009 bf2f 	b.w	25f24 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1c0c6:	78a3      	ldrb	r3, [r4, #2]
   1c0c8:	2b04      	cmp	r3, #4
   1c0ca:	d105      	bne.n	1c0d8 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   1c0cc:	4620      	mov	r0, r4
}
   1c0ce:	b004      	add	sp, #16
   1c0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1c0d4:	f011 bccf 	b.w	2da76 <bt_conn_unref>
		switch (old_state) {
   1c0d8:	2e08      	cmp	r6, #8
   1c0da:	d846      	bhi.n	1c16a <bt_conn_set_state+0x162>
   1c0dc:	a301      	add	r3, pc, #4	; (adr r3, 1c0e4 <bt_conn_set_state+0xdc>)
   1c0de:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1c0e2:	bf00      	nop
   1c0e4:	0001c159 	.word	0x0001c159
   1c0e8:	0001c109 	.word	0x0001c109
   1c0ec:	0001c14b 	.word	0x0001c14b
   1c0f0:	0001c0cd 	.word	0x0001c0cd
   1c0f4:	0001c0cd 	.word	0x0001c0cd
   1c0f8:	0001c14b 	.word	0x0001c14b
   1c0fc:	0001c14b 	.word	0x0001c14b
   1c100:	0001c16b 	.word	0x0001c16b
   1c104:	0001c159 	.word	0x0001c159
			tx_notify(conn);
   1c108:	4620      	mov	r0, r4
   1c10a:	f7ff fd31 	bl	1bb70 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c10e:	78a3      	ldrb	r3, [r4, #2]
   1c110:	2b01      	cmp	r3, #1
   1c112:	d10a      	bne.n	1c12a <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1c114:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1c118:	4628      	mov	r0, r5
   1c11a:	f015 f80b 	bl	31134 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c11e:	f010 0f0c 	tst.w	r0, #12
   1c122:	d002      	beq.n	1c12a <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   1c124:	4628      	mov	r0, r5
   1c126:	f015 f807 	bl	31138 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c12a:	3404      	adds	r4, #4
   1c12c:	e8d4 3fef 	ldaex	r3, [r4]
   1c130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c134:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1c138:	2a00      	cmp	r2, #0
   1c13a:	d1f7      	bne.n	1c12c <bt_conn_set_state+0x124>
   1c13c:	2100      	movs	r1, #0
   1c13e:	4821      	ldr	r0, [pc, #132]	; (1c1c4 <bt_conn_set_state+0x1bc>)
}
   1c140:	b004      	add	sp, #16
   1c142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c146:	f00a bcef 	b.w	26b28 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1c14a:	7b23      	ldrb	r3, [r4, #12]
   1c14c:	2b00      	cmp	r3, #0
   1c14e:	d0bd      	beq.n	1c0cc <bt_conn_set_state+0xc4>
				notify_connected(conn);
   1c150:	4620      	mov	r0, r4
   1c152:	f7ff fcef 	bl	1bb34 <notify_connected>
   1c156:	e7b9      	b.n	1c0cc <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   1c158:	4b1b      	ldr	r3, [pc, #108]	; (1c1c8 <bt_conn_set_state+0x1c0>)
   1c15a:	9503      	str	r5, [sp, #12]
   1c15c:	e762      	b.n	1c024 <bt_conn_set_state+0x1c>
	return list->head;
   1c15e:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1c160:	b929      	cbnz	r1, 1c16e <bt_conn_set_state+0x166>
   1c162:	f383 8811 	msr	BASEPRI, r3
   1c166:	f3bf 8f6f 	isb	sy
}
   1c16a:	b004      	add	sp, #16
   1c16c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c16e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1c170:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c172:	4281      	cmp	r1, r0
	list->tail = node;
   1c174:	bf08      	it	eq
   1c176:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   1c178:	6162      	str	r2, [r4, #20]
   1c17a:	f383 8811 	msr	BASEPRI, r3
   1c17e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c182:	f04f 0220 	mov.w	r2, #32
   1c186:	f3ef 8311 	mrs	r3, BASEPRI
   1c18a:	f382 8812 	msr	BASEPRI_MAX, r2
   1c18e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1c192:	68ca      	ldr	r2, [r1, #12]
   1c194:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1c196:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1c198:	f383 8811 	msr	BASEPRI, r3
   1c19c:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1c1a0:	4620      	mov	r0, r4
   1c1a2:	f7ff fd15 	bl	1bbd0 <conn_tx_destroy>
   1c1a6:	e76c      	b.n	1c082 <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   1c1a8:	4b08      	ldr	r3, [pc, #32]	; (1c1cc <bt_conn_set_state+0x1c4>)
   1c1aa:	9503      	str	r5, [sp, #12]
   1c1ac:	e73a      	b.n	1c024 <bt_conn_set_state+0x1c>
   1c1ae:	bf00      	nop
   1c1b0:	00033c94 	.word	0x00033c94
   1c1b4:	000371bb 	.word	0x000371bb
   1c1b8:	000371c5 	.word	0x000371c5
   1c1bc:	00033020 	.word	0x00033020
   1c1c0:	20008100 	.word	0x20008100
   1c1c4:	2000856c 	.word	0x2000856c
   1c1c8:	000371d6 	.word	0x000371d6
   1c1cc:	000371ed 	.word	0x000371ed

0001c1d0 <bt_conn_index>:
		index = conn - acl_conns;
   1c1d0:	4b03      	ldr	r3, [pc, #12]	; (1c1e0 <bt_conn_index+0x10>)
   1c1d2:	1ac0      	subs	r0, r0, r3
   1c1d4:	4b03      	ldr	r3, [pc, #12]	; (1c1e4 <bt_conn_index+0x14>)
   1c1d6:	1180      	asrs	r0, r0, #6
   1c1d8:	4358      	muls	r0, r3
}
   1c1da:	b2c0      	uxtb	r0, r0
   1c1dc:	4770      	bx	lr
   1c1de:	bf00      	nop
   1c1e0:	2000a080 	.word	0x2000a080
   1c1e4:	aaaaaaab 	.word	0xaaaaaaab

0001c1e8 <bt_conn_create_pdu_timeout>:
{
   1c1e8:	b530      	push	{r4, r5, lr}
   1c1ea:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   1c1ec:	490c      	ldr	r1, [pc, #48]	; (1c220 <bt_conn_create_pdu_timeout+0x38>)
   1c1ee:	b085      	sub	sp, #20
   1c1f0:	2800      	cmp	r0, #0
   1c1f2:	bf08      	it	eq
   1c1f4:	4608      	moveq	r0, r1
   1c1f6:	f013 f8bc 	bl	2f372 <net_buf_alloc_fixed>
	if (!buf) {
   1c1fa:	4604      	mov	r4, r0
   1c1fc:	b958      	cbnz	r0, 1c216 <bt_conn_create_pdu_timeout+0x2e>
		LOG_WRN("Unable to allocate buffer within timeout");
   1c1fe:	4b09      	ldr	r3, [pc, #36]	; (1c224 <bt_conn_create_pdu_timeout+0x3c>)
   1c200:	2202      	movs	r2, #2
   1c202:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1c206:	4908      	ldr	r1, [pc, #32]	; (1c228 <bt_conn_create_pdu_timeout+0x40>)
   1c208:	4603      	mov	r3, r0
   1c20a:	9000      	str	r0, [sp, #0]
   1c20c:	f011 fbe1 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
}
   1c210:	4620      	mov	r0, r4
   1c212:	b005      	add	sp, #20
   1c214:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1c216:	1d69      	adds	r1, r5, #5
   1c218:	300c      	adds	r0, #12
   1c21a:	f013 f8b1 	bl	2f380 <net_buf_simple_reserve>
	return buf;
   1c21e:	e7f7      	b.n	1c210 <bt_conn_create_pdu_timeout+0x28>
   1c220:	20008edc 	.word	0x20008edc
   1c224:	00037209 	.word	0x00037209
   1c228:	00033020 	.word	0x00033020

0001c22c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c22e:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c230:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c232:	e8d0 3faf 	lda	r3, [r0]
   1c236:	059b      	lsls	r3, r3, #22
   1c238:	d511      	bpl.n	1c25e <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1c23a:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c23e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1c242:	429a      	cmp	r2, r3
   1c244:	d80b      	bhi.n	1c25e <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1c246:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   1c24a:	429a      	cmp	r2, r3
   1c24c:	d307      	bcc.n	1c25e <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1c24e:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   1c252:	429a      	cmp	r2, r3
   1c254:	d103      	bne.n	1c25e <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c256:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1c25a:	f011 fbaf 	bl	2d9bc <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c25e:	4b10      	ldr	r3, [pc, #64]	; (1c2a0 <notify_le_param_updated+0x74>)
   1c260:	681d      	ldr	r5, [r3, #0]
   1c262:	b925      	cbnz	r5, 1c26e <notify_le_param_updated+0x42>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c264:	4d0f      	ldr	r5, [pc, #60]	; (1c2a4 <notify_le_param_updated+0x78>)
   1c266:	4f10      	ldr	r7, [pc, #64]	; (1c2a8 <notify_le_param_updated+0x7c>)
   1c268:	42bd      	cmp	r5, r7
   1c26a:	d30c      	bcc.n	1c286 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1c26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1c26e:	68ee      	ldr	r6, [r5, #12]
   1c270:	b13e      	cbz	r6, 1c282 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   1c272:	4620      	mov	r0, r4
   1c274:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c278:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c27c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c280:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1c282:	69ad      	ldr	r5, [r5, #24]
   1c284:	e7ed      	b.n	1c262 <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   1c286:	68ee      	ldr	r6, [r5, #12]
   1c288:	b13e      	cbz	r6, 1c29a <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   1c28a:	4620      	mov	r0, r4
   1c28c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c290:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c294:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c298:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c29a:	351c      	adds	r5, #28
   1c29c:	e7e4      	b.n	1c268 <notify_le_param_updated+0x3c>
   1c29e:	bf00      	nop
   1c2a0:	200309d8 	.word	0x200309d8
   1c2a4:	00032fac 	.word	0x00032fac
   1c2a8:	00032fc8 	.word	0x00032fc8

0001c2ac <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2b0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1c2b2:	4608      	mov	r0, r1
{
   1c2b4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1c2b6:	f011 f8e9 	bl	2d48c <bt_le_conn_params_valid>
   1c2ba:	4605      	mov	r5, r0
   1c2bc:	b918      	cbnz	r0, 1c2c6 <le_param_req+0x1a>
		return false;
   1c2be:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1c2c0:	4628      	mov	r0, r5
   1c2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1c2c6:	4b13      	ldr	r3, [pc, #76]	; (1c314 <le_param_req+0x68>)
   1c2c8:	681e      	ldr	r6, [r3, #0]
   1c2ca:	b946      	cbnz	r6, 1c2de <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c2cc:	4e12      	ldr	r6, [pc, #72]	; (1c318 <le_param_req+0x6c>)
   1c2ce:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1c31c <le_param_req+0x70>
   1c2d2:	4546      	cmp	r6, r8
   1c2d4:	d2f4      	bcs.n	1c2c0 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1c2d6:	68b3      	ldr	r3, [r6, #8]
   1c2d8:	b983      	cbnz	r3, 1c2fc <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c2da:	361c      	adds	r6, #28
   1c2dc:	e7f9      	b.n	1c2d2 <le_param_req+0x26>
		if (!cb->le_param_req) {
   1c2de:	68b3      	ldr	r3, [r6, #8]
   1c2e0:	b90b      	cbnz	r3, 1c2e6 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c2e2:	69b6      	ldr	r6, [r6, #24]
   1c2e4:	e7f1      	b.n	1c2ca <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1c2e6:	4621      	mov	r1, r4
   1c2e8:	4638      	mov	r0, r7
   1c2ea:	4798      	blx	r3
   1c2ec:	2800      	cmp	r0, #0
   1c2ee:	d0e6      	beq.n	1c2be <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1c2f0:	4620      	mov	r0, r4
   1c2f2:	f011 f8cb 	bl	2d48c <bt_le_conn_params_valid>
   1c2f6:	2800      	cmp	r0, #0
   1c2f8:	d1f3      	bne.n	1c2e2 <le_param_req+0x36>
   1c2fa:	e7e0      	b.n	1c2be <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1c2fc:	4621      	mov	r1, r4
   1c2fe:	4638      	mov	r0, r7
   1c300:	4798      	blx	r3
   1c302:	2800      	cmp	r0, #0
   1c304:	d0db      	beq.n	1c2be <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1c306:	4620      	mov	r0, r4
   1c308:	f011 f8c0 	bl	2d48c <bt_le_conn_params_valid>
   1c30c:	2800      	cmp	r0, #0
   1c30e:	d1e4      	bne.n	1c2da <le_param_req+0x2e>
   1c310:	e7d5      	b.n	1c2be <le_param_req+0x12>
   1c312:	bf00      	nop
   1c314:	200309d8 	.word	0x200309d8
   1c318:	00032fac 	.word	0x00032fac
   1c31c:	00032fc8 	.word	0x00032fc8

0001c320 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1c320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c324:	78c3      	ldrb	r3, [r0, #3]
{
   1c326:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c328:	b973      	cbnz	r3, 1c348 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   1c32a:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c32e:	4b10      	ldr	r3, [pc, #64]	; (1c370 <bt_conn_identity_resolved+0x50>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c330:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1c334:	681d      	ldr	r5, [r3, #0]
   1c336:	b955      	cbnz	r5, 1c34e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c338:	4d0e      	ldr	r5, [pc, #56]	; (1c374 <bt_conn_identity_resolved+0x54>)
   1c33a:	4f0f      	ldr	r7, [pc, #60]	; (1c378 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c33c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c340:	42bd      	cmp	r5, r7
   1c342:	d30c      	bcc.n	1c35e <bt_conn_identity_resolved+0x3e>
		}
	}
}
   1c344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   1c348:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1c34c:	e7ef      	b.n	1c32e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1c34e:	692b      	ldr	r3, [r5, #16]
   1c350:	b11b      	cbz	r3, 1c35a <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c352:	463a      	mov	r2, r7
   1c354:	4631      	mov	r1, r6
   1c356:	4620      	mov	r0, r4
   1c358:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c35a:	69ad      	ldr	r5, [r5, #24]
   1c35c:	e7eb      	b.n	1c336 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1c35e:	692b      	ldr	r3, [r5, #16]
   1c360:	b11b      	cbz	r3, 1c36a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c362:	4642      	mov	r2, r8
   1c364:	4631      	mov	r1, r6
   1c366:	4620      	mov	r0, r4
   1c368:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c36a:	351c      	adds	r5, #28
   1c36c:	e7e8      	b.n	1c340 <bt_conn_identity_resolved+0x20>
   1c36e:	bf00      	nop
   1c370:	200309d8 	.word	0x200309d8
   1c374:	00032fac 	.word	0x00032fac
   1c378:	00032fc8 	.word	0x00032fc8

0001c37c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1c37e:	7a43      	ldrb	r3, [r0, #9]
{
   1c380:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1c382:	7283      	strb	r3, [r0, #10]
{
   1c384:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1c386:	f011 fc8b 	bl	2dca0 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c38a:	4b0c      	ldr	r3, [pc, #48]	; (1c3bc <bt_conn_security_changed+0x40>)
   1c38c:	681d      	ldr	r5, [r3, #0]
   1c38e:	b925      	cbnz	r5, 1c39a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c390:	4d0b      	ldr	r5, [pc, #44]	; (1c3c0 <bt_conn_security_changed+0x44>)
   1c392:	4f0c      	ldr	r7, [pc, #48]	; (1c3c4 <bt_conn_security_changed+0x48>)
   1c394:	42bd      	cmp	r5, r7
   1c396:	d308      	bcc.n	1c3aa <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1c398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   1c39a:	696b      	ldr	r3, [r5, #20]
   1c39c:	b11b      	cbz	r3, 1c3a6 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   1c39e:	4632      	mov	r2, r6
   1c3a0:	4620      	mov	r0, r4
   1c3a2:	7a61      	ldrb	r1, [r4, #9]
   1c3a4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c3a6:	69ad      	ldr	r5, [r5, #24]
   1c3a8:	e7f1      	b.n	1c38e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1c3aa:	696b      	ldr	r3, [r5, #20]
   1c3ac:	b11b      	cbz	r3, 1c3b6 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   1c3ae:	4632      	mov	r2, r6
   1c3b0:	4620      	mov	r0, r4
   1c3b2:	7a61      	ldrb	r1, [r4, #9]
   1c3b4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c3b6:	351c      	adds	r5, #28
   1c3b8:	e7ec      	b.n	1c394 <bt_conn_security_changed+0x18>
   1c3ba:	bf00      	nop
   1c3bc:	200309d8 	.word	0x200309d8
   1c3c0:	00032fac 	.word	0x00032fac
   1c3c4:	00032fc8 	.word	0x00032fc8

0001c3c8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1c3c8:	b538      	push	{r3, r4, r5, lr}
   1c3ca:	4605      	mov	r5, r0
   1c3cc:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1c3ce:	480b      	ldr	r0, [pc, #44]	; (1c3fc <bt_conn_add_le+0x34>)
   1c3d0:	2101      	movs	r1, #1
   1c3d2:	f7ff fcaf 	bl	1bd34 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1c3d6:	b180      	cbz	r0, 1c3fa <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   1c3d8:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c3da:	6823      	ldr	r3, [r4, #0]
   1c3dc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   1c3e0:	88a3      	ldrh	r3, [r4, #4]
   1c3e2:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   1c3e6:	79a3      	ldrb	r3, [r4, #6]
   1c3e8:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1c3ec:	2301      	movs	r3, #1
   1c3ee:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1c3f0:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1c3f2:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1c3f4:	4b02      	ldr	r3, [pc, #8]	; (1c400 <bt_conn_add_le+0x38>)
   1c3f6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1c3fa:	bd38      	pop	{r3, r4, r5, pc}
   1c3fc:	2000a080 	.word	0x2000a080
   1c400:	00280018 	.word	0x00280018

0001c404 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1c404:	b570      	push	{r4, r5, r6, lr}
   1c406:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c408:	480a      	ldr	r0, [pc, #40]	; (1c434 <bt_conn_lookup_addr_le+0x30>)
{
   1c40a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c40c:	f011 fb1f 	bl	2da4e <bt_conn_ref>
   1c410:	4604      	mov	r4, r0

		if (!conn) {
   1c412:	b120      	cbz	r0, 1c41e <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1c414:	7883      	ldrb	r3, [r0, #2]
   1c416:	2b01      	cmp	r3, #1
   1c418:	d004      	beq.n	1c424 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1c41a:	f011 fb2c 	bl	2da76 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1c41e:	2400      	movs	r4, #0
}
   1c420:	4620      	mov	r0, r4
   1c422:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c424:	4632      	mov	r2, r6
   1c426:	4629      	mov	r1, r5
   1c428:	f011 fbb2 	bl	2db90 <bt_conn_is_peer_addr_le>
   1c42c:	2800      	cmp	r0, #0
   1c42e:	d1f7      	bne.n	1c420 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1c430:	4620      	mov	r0, r4
   1c432:	e7f2      	b.n	1c41a <bt_conn_lookup_addr_le+0x16>
   1c434:	2000a080 	.word	0x2000a080

0001c438 <bt_conn_exists_le>:
{
   1c438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1c43a:	f7ff ffe3 	bl	1c404 <bt_conn_lookup_addr_le>
	if (conn) {
   1c43e:	4604      	mov	r4, r0
   1c440:	b1a8      	cbz	r0, 1c46e <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1c442:	7b43      	ldrb	r3, [r0, #13]
   1c444:	490b      	ldr	r1, [pc, #44]	; (1c474 <bt_conn_exists_le+0x3c>)
   1c446:	2b08      	cmp	r3, #8
   1c448:	bf96      	itet	ls
   1c44a:	4a0b      	ldrls	r2, [pc, #44]	; (1c478 <bt_conn_exists_le+0x40>)
   1c44c:	4b0b      	ldrhi	r3, [pc, #44]	; (1c47c <bt_conn_exists_le+0x44>)
   1c44e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1c452:	2202      	movs	r2, #2
   1c454:	9303      	str	r3, [sp, #12]
   1c456:	4b0a      	ldr	r3, [pc, #40]	; (1c480 <bt_conn_exists_le+0x48>)
   1c458:	9302      	str	r3, [sp, #8]
   1c45a:	2300      	movs	r3, #0
   1c45c:	4618      	mov	r0, r3
   1c45e:	e9cd 3300 	strd	r3, r3, [sp]
   1c462:	f011 fab6 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1c466:	4620      	mov	r0, r4
   1c468:	f011 fb05 	bl	2da76 <bt_conn_unref>
		return true;
   1c46c:	2001      	movs	r0, #1
}
   1c46e:	b004      	add	sp, #16
   1c470:	bd10      	pop	{r4, pc}
   1c472:	bf00      	nop
   1c474:	00033020 	.word	0x00033020
   1c478:	00033c94 	.word	0x00033c94
   1c47c:	000371bb 	.word	0x000371bb
   1c480:	00037232 	.word	0x00037232

0001c484 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c486:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c488:	480e      	ldr	r0, [pc, #56]	; (1c4c4 <bt_conn_lookup_state_le+0x40>)
{
   1c48a:	460e      	mov	r6, r1
   1c48c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c48e:	f011 fade 	bl	2da4e <bt_conn_ref>

		if (!conn) {
   1c492:	4604      	mov	r4, r0
   1c494:	b120      	cbz	r0, 1c4a0 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1c496:	7883      	ldrb	r3, [r0, #2]
   1c498:	2b01      	cmp	r3, #1
   1c49a:	d003      	beq.n	1c4a4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1c49c:	f011 faeb 	bl	2da76 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1c4a0:	2400      	movs	r4, #0
   1c4a2:	e00d      	b.n	1c4c0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c4a4:	b136      	cbz	r6, 1c4b4 <bt_conn_lookup_state_le+0x30>
   1c4a6:	4632      	mov	r2, r6
   1c4a8:	4629      	mov	r1, r5
   1c4aa:	f011 fb71 	bl	2db90 <bt_conn_is_peer_addr_le>
   1c4ae:	b908      	cbnz	r0, 1c4b4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1c4b0:	4620      	mov	r0, r4
   1c4b2:	e7f3      	b.n	1c49c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1c4b4:	7b63      	ldrb	r3, [r4, #13]
   1c4b6:	42bb      	cmp	r3, r7
   1c4b8:	d1fa      	bne.n	1c4b0 <bt_conn_lookup_state_le+0x2c>
   1c4ba:	7a23      	ldrb	r3, [r4, #8]
   1c4bc:	42ab      	cmp	r3, r5
   1c4be:	d1f7      	bne.n	1c4b0 <bt_conn_lookup_state_le+0x2c>
}
   1c4c0:	4620      	mov	r0, r4
   1c4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c4c4:	2000a080 	.word	0x2000a080

0001c4c8 <send_conn_le_param_update>:
{
   1c4c8:	b538      	push	{r3, r4, r5, lr}
   1c4ca:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1c4cc:	4608      	mov	r0, r1
{
   1c4ce:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1c4d0:	f010 ffdc 	bl	2d48c <bt_le_conn_params_valid>
   1c4d4:	b338      	cbz	r0, 1c526 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c4d6:	4b15      	ldr	r3, [pc, #84]	; (1c52c <send_conn_le_param_update+0x64>)
   1c4d8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1c4dc:	0799      	lsls	r1, r3, #30
   1c4de:	d407      	bmi.n	1c4f0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1c4e0:	78e3      	ldrb	r3, [r4, #3]
   1c4e2:	b173      	cbz	r3, 1c502 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1c4e4:	4629      	mov	r1, r5
   1c4e6:	4620      	mov	r0, r4
}
   1c4e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1c4ec:	f000 bacc 	b.w	1ca88 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c4f0:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   1c4f4:	079a      	lsls	r2, r3, #30
   1c4f6:	d5f3      	bpl.n	1c4e0 <send_conn_le_param_update+0x18>
   1c4f8:	1d23      	adds	r3, r4, #4
   1c4fa:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1c4fe:	055b      	lsls	r3, r3, #21
   1c500:	d4ee      	bmi.n	1c4e0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1c502:	4629      	mov	r1, r5
   1c504:	4620      	mov	r0, r4
   1c506:	f011 fb65 	bl	2dbd4 <bt_conn_le_conn_update>
		if (rc == 0) {
   1c50a:	b958      	cbnz	r0, 1c524 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1c50c:	882b      	ldrh	r3, [r5, #0]
   1c50e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1c512:	886b      	ldrh	r3, [r5, #2]
   1c514:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1c518:	88ab      	ldrh	r3, [r5, #4]
   1c51a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1c51e:	88eb      	ldrh	r3, [r5, #6]
   1c520:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   1c524:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c526:	f06f 0015 	mvn.w	r0, #21
   1c52a:	e7fb      	b.n	1c524 <send_conn_le_param_update+0x5c>
   1c52c:	20008000 	.word	0x20008000

0001c530 <deferred_work>:
{
   1c530:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1c532:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1c536:	4604      	mov	r4, r0
   1c538:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1c53a:	f1a0 0758 	sub.w	r7, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1c53e:	b9fb      	cbnz	r3, 1c580 <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
   1c540:	4638      	mov	r0, r7
   1c542:	f011 fb95 	bl	2dc70 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c546:	4b34      	ldr	r3, [pc, #208]	; (1c618 <deferred_work+0xe8>)
   1c548:	681d      	ldr	r5, [r3, #0]
   1c54a:	b94d      	cbnz	r5, 1c560 <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c54c:	4d33      	ldr	r5, [pc, #204]	; (1c61c <deferred_work+0xec>)
   1c54e:	4e34      	ldr	r6, [pc, #208]	; (1c620 <deferred_work+0xf0>)
   1c550:	42b5      	cmp	r5, r6
   1c552:	d30d      	bcc.n	1c570 <deferred_work+0x40>
		bt_conn_unref(conn);
   1c554:	4638      	mov	r0, r7
}
   1c556:	b007      	add	sp, #28
   1c558:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1c55c:	f011 ba8b 	b.w	2da76 <bt_conn_unref>
		if (cb->disconnected) {
   1c560:	686b      	ldr	r3, [r5, #4]
   1c562:	b11b      	cbz	r3, 1c56c <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
   1c564:	4638      	mov	r0, r7
   1c566:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1c56a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c56c:	69ad      	ldr	r5, [r5, #24]
   1c56e:	e7ec      	b.n	1c54a <deferred_work+0x1a>
		if (cb->disconnected) {
   1c570:	686b      	ldr	r3, [r5, #4]
   1c572:	b11b      	cbz	r3, 1c57c <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
   1c574:	4638      	mov	r0, r7
   1c576:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1c57a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c57c:	351c      	adds	r5, #28
   1c57e:	e7e7      	b.n	1c550 <deferred_work+0x20>
	if (conn->type != BT_CONN_TYPE_LE) {
   1c580:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1c584:	2b01      	cmp	r3, #1
   1c586:	d11f      	bne.n	1c5c8 <deferred_work+0x98>
	if (atomic_test_and_clear_bit(conn->flags,
   1c588:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c58c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1c590:	4628      	mov	r0, r5
   1c592:	f011 fa13 	bl	2d9bc <atomic_and>
   1c596:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   1c59a:	d023      	beq.n	1c5e4 <deferred_work+0xb4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c59c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   1c59e:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c5a0:	9304      	str	r3, [sp, #16]
   1c5a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   1c5a4:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c5a6:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   1c5a8:	f7ff ff8e 	bl	1c4c8 <send_conn_le_param_update>
		if (!err) {
   1c5ac:	b970      	cbnz	r0, 1c5cc <deferred_work+0x9c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c5ae:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1c5b2:	4628      	mov	r0, r5
   1c5b4:	f011 fa02 	bl	2d9bc <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c5b8:	e8d5 3fef 	ldaex	r3, [r5]
   1c5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c5c0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c5c4:	2a00      	cmp	r2, #0
   1c5c6:	d1f7      	bne.n	1c5b8 <deferred_work+0x88>
}
   1c5c8:	b007      	add	sp, #28
   1c5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1c5cc:	4b15      	ldr	r3, [pc, #84]	; (1c624 <deferred_work+0xf4>)
   1c5ce:	9003      	str	r0, [sp, #12]
   1c5d0:	9302      	str	r3, [sp, #8]
   1c5d2:	2300      	movs	r3, #0
   1c5d4:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   1c5d8:	2202      	movs	r2, #2
   1c5da:	4618      	mov	r0, r3
   1c5dc:	4912      	ldr	r1, [pc, #72]	; (1c628 <deferred_work+0xf8>)
   1c5de:	f011 f9f8 	bl	2d9d2 <z_log_msg_runtime_create.constprop.0>
   1c5e2:	e7e9      	b.n	1c5b8 <deferred_work+0x88>
		param = BT_LE_CONN_PARAM(
   1c5e4:	4a11      	ldr	r2, [pc, #68]	; (1c62c <deferred_work+0xfc>)
   1c5e6:	ab04      	add	r3, sp, #16
   1c5e8:	6810      	ldr	r0, [r2, #0]
   1c5ea:	6851      	ldr	r1, [r2, #4]
   1c5ec:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1c5ee:	4638      	mov	r0, r7
   1c5f0:	a904      	add	r1, sp, #16
   1c5f2:	f7ff ff69 	bl	1c4c8 <send_conn_le_param_update>
		if (!err) {
   1c5f6:	b940      	cbnz	r0, 1c60a <deferred_work+0xda>
   1c5f8:	e8d5 3fef 	ldaex	r3, [r5]
   1c5fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c600:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c604:	2a00      	cmp	r2, #0
   1c606:	d0d7      	beq.n	1c5b8 <deferred_work+0x88>
   1c608:	e7f6      	b.n	1c5f8 <deferred_work+0xc8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1c60a:	4b09      	ldr	r3, [pc, #36]	; (1c630 <deferred_work+0x100>)
   1c60c:	9003      	str	r0, [sp, #12]
   1c60e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1c612:	9600      	str	r6, [sp, #0]
   1c614:	4633      	mov	r3, r6
   1c616:	e7df      	b.n	1c5d8 <deferred_work+0xa8>
   1c618:	200309d8 	.word	0x200309d8
   1c61c:	00032fac 	.word	0x00032fac
   1c620:	00032fc8 	.word	0x00032fc8
   1c624:	00037255 	.word	0x00037255
   1c628:	00033020 	.word	0x00033020
   1c62c:	000331f0 	.word	0x000331f0
   1c630:	0003727a 	.word	0x0003727a

0001c634 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1c634:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1c636:	4801      	ldr	r0, [pc, #4]	; (1c63c <bt_conn_create_frag_timeout+0x8>)
   1c638:	f7ff bdd6 	b.w	1c1e8 <bt_conn_create_pdu_timeout>
   1c63c:	20008f60 	.word	0x20008f60

0001c640 <create_frag>:
{
   1c640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c644:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1c646:	f04f 33ff 	mov.w	r3, #4294967295
   1c64a:	f04f 32ff 	mov.w	r2, #4294967295
   1c64e:	2000      	movs	r0, #0
{
   1c650:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1c652:	f7ff ffef 	bl	1c634 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1c656:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   1c658:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1c65a:	2b07      	cmp	r3, #7
   1c65c:	f04f 0600 	mov.w	r6, #0
   1c660:	d005      	beq.n	1c66e <create_frag+0x2e>
		net_buf_unref(frag);
   1c662:	f003 ff9b 	bl	2059c <net_buf_unref>
		return NULL;
   1c666:	4635      	mov	r5, r6
}
   1c668:	4628      	mov	r0, r5
   1c66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1c66e:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   1c670:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   1c674:	4e0c      	ldr	r6, [pc, #48]	; (1c6a8 <create_frag+0x68>)
   1c676:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1c678:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1c67c:	f012 ff1d 	bl	2f4ba <net_buf_simple_tailroom>
   1c680:	4580      	cmp	r8, r0
   1c682:	d20c      	bcs.n	1c69e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1c684:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c688:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   1c68c:	4632      	mov	r2, r6
   1c68e:	4638      	mov	r0, r7
   1c690:	f012 fed5 	bl	2f43e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1c694:	4631      	mov	r1, r6
   1c696:	4620      	mov	r0, r4
   1c698:	f012 fef3 	bl	2f482 <net_buf_simple_pull>
   1c69c:	e7e4      	b.n	1c668 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1c69e:	4638      	mov	r0, r7
   1c6a0:	f012 ff0b 	bl	2f4ba <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1c6a4:	b286      	uxth	r6, r0
   1c6a6:	e7ef      	b.n	1c688 <create_frag+0x48>
   1c6a8:	20008000 	.word	0x20008000

0001c6ac <bt_conn_process_tx>:
{
   1c6ac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1c6ae:	7b43      	ldrb	r3, [r0, #13]
{
   1c6b0:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1c6b2:	b95b      	cbnz	r3, 1c6cc <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c6b4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1c6b8:	3004      	adds	r0, #4
   1c6ba:	f011 f97f 	bl	2d9bc <atomic_and>
   1c6be:	0643      	lsls	r3, r0, #25
   1c6c0:	d504      	bpl.n	1c6cc <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   1c6c2:	4620      	mov	r0, r4
}
   1c6c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1c6c8:	f011 b99e 	b.w	2da08 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1c6cc:	2200      	movs	r2, #0
   1c6ce:	2300      	movs	r3, #0
   1c6d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1c6d4:	f012 fe52 	bl	2f37c <net_buf_get>
	BT_ASSERT(buf);
   1c6d8:	4605      	mov	r5, r0
   1c6da:	b960      	cbnz	r0, 1c6f6 <bt_conn_process_tx+0x4a>
   1c6dc:	f240 331a 	movw	r3, #794	; 0x31a
   1c6e0:	4a22      	ldr	r2, [pc, #136]	; (1c76c <bt_conn_process_tx+0xc0>)
   1c6e2:	4923      	ldr	r1, [pc, #140]	; (1c770 <bt_conn_process_tx+0xc4>)
   1c6e4:	4823      	ldr	r0, [pc, #140]	; (1c774 <bt_conn_process_tx+0xc8>)
   1c6e6:	f00e f8a7 	bl	2a838 <assert_print>
   1c6ea:	4040      	eors	r0, r0
   1c6ec:	f380 8811 	msr	BASEPRI, r0
   1c6f0:	f04f 0003 	mov.w	r0, #3
   1c6f4:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1c6f6:	4e20      	ldr	r6, [pc, #128]	; (1c778 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1c6f8:	8a2a      	ldrh	r2, [r5, #16]
   1c6fa:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1c6fe:	429a      	cmp	r2, r3
   1c700:	d807      	bhi.n	1c712 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1c702:	2300      	movs	r3, #0
   1c704:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1c706:	4629      	mov	r1, r5
   1c708:	4620      	mov	r0, r4
   1c70a:	f7ff fa77 	bl	1bbfc <send_frag>
	if (!send_buf(conn, buf)) {
   1c70e:	b968      	cbnz	r0, 1c72c <bt_conn_process_tx+0x80>
   1c710:	e005      	b.n	1c71e <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   1c712:	4629      	mov	r1, r5
   1c714:	4620      	mov	r0, r4
   1c716:	f7ff ff93 	bl	1c640 <create_frag>
	if (!frag) {
   1c71a:	4601      	mov	r1, r0
   1c71c:	b938      	cbnz	r0, 1c72e <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   1c71e:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1c720:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   1c722:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   1c724:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1c726:	f003 ff39 	bl	2059c <net_buf_unref>
		if (tx) {
   1c72a:	b9ce      	cbnz	r6, 1c760 <bt_conn_process_tx+0xb4>
}
   1c72c:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1c72e:	2301      	movs	r3, #1
   1c730:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1c732:	4620      	mov	r0, r4
   1c734:	f7ff fa62 	bl	1bbfc <send_frag>
   1c738:	2800      	cmp	r0, #0
   1c73a:	d0f0      	beq.n	1c71e <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   1c73c:	8a2a      	ldrh	r2, [r5, #16]
   1c73e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1c742:	429a      	cmp	r2, r3
   1c744:	d802      	bhi.n	1c74c <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   1c746:	2300      	movs	r3, #0
   1c748:	2203      	movs	r2, #3
   1c74a:	e7dc      	b.n	1c706 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   1c74c:	4629      	mov	r1, r5
   1c74e:	4620      	mov	r0, r4
   1c750:	f7ff ff76 	bl	1c640 <create_frag>
		if (!frag) {
   1c754:	4601      	mov	r1, r0
   1c756:	2800      	cmp	r0, #0
   1c758:	d0e1      	beq.n	1c71e <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1c75a:	2301      	movs	r3, #1
   1c75c:	461a      	mov	r2, r3
   1c75e:	e7e8      	b.n	1c732 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   1c760:	4631      	mov	r1, r6
   1c762:	4620      	mov	r0, r4
}
   1c764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1c768:	f7ff ba32 	b.w	1bbd0 <conn_tx_destroy>
   1c76c:	000372a4 	.word	0x000372a4
   1c770:	00037c16 	.word	0x00037c16
   1c774:	00036811 	.word	0x00036811
   1c778:	20008000 	.word	0x20008000

0001c77c <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1c77c:	4b0b      	ldr	r3, [pc, #44]	; (1c7ac <bt_conn_auth_cb_register+0x30>)
   1c77e:	b158      	cbz	r0, 1c798 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   1c780:	681a      	ldr	r2, [r3, #0]
   1c782:	b962      	cbnz	r2, 1c79e <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1c784:	6902      	ldr	r2, [r0, #16]
   1c786:	b93a      	cbnz	r2, 1c798 <bt_conn_auth_cb_register+0x1c>
   1c788:	6802      	ldr	r2, [r0, #0]
   1c78a:	b95a      	cbnz	r2, 1c7a4 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1c78c:	6842      	ldr	r2, [r0, #4]
   1c78e:	b94a      	cbnz	r2, 1c7a4 <bt_conn_auth_cb_register+0x28>
   1c790:	6882      	ldr	r2, [r0, #8]
   1c792:	b93a      	cbnz	r2, 1c7a4 <bt_conn_auth_cb_register+0x28>
   1c794:	6942      	ldr	r2, [r0, #20]
   1c796:	b92a      	cbnz	r2, 1c7a4 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1c798:	6018      	str	r0, [r3, #0]
		return 0;
   1c79a:	2000      	movs	r0, #0
   1c79c:	4770      	bx	lr
		return -EALREADY;
   1c79e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c7a2:	4770      	bx	lr
		return -EINVAL;
   1c7a4:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   1c7a8:	4770      	bx	lr
   1c7aa:	bf00      	nop
   1c7ac:	200309e4 	.word	0x200309e4

0001c7b0 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1c7b0:	b168      	cbz	r0, 1c7ce <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   1c7b2:	2300      	movs	r3, #0
   1c7b4:	60c3      	str	r3, [r0, #12]
	return list->tail;
   1c7b6:	4b07      	ldr	r3, [pc, #28]	; (1c7d4 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1c7b8:	f100 020c 	add.w	r2, r0, #12
   1c7bc:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1c7be:	b919      	cbnz	r1, 1c7c8 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   1c7c0:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   1c7c4:	2000      	movs	r0, #0
   1c7c6:	4770      	bx	lr
	parent->next = child;
   1c7c8:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1c7ca:	605a      	str	r2, [r3, #4]
}
   1c7cc:	e7fa      	b.n	1c7c4 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   1c7ce:	f06f 0015 	mvn.w	r0, #21
}
   1c7d2:	4770      	bx	lr
   1c7d4:	200309dc 	.word	0x200309dc

0001c7d8 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1c7d8:	b910      	cbnz	r0, 1c7e0 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1c7da:	4802      	ldr	r0, [pc, #8]	; (1c7e4 <bt_conn_lookup_index+0xc>)
   1c7dc:	f011 b937 	b.w	2da4e <bt_conn_ref>
}
   1c7e0:	2000      	movs	r0, #0
   1c7e2:	4770      	bx	lr
   1c7e4:	2000a080 	.word	0x2000a080

0001c7e8 <bt_conn_init>:

int bt_conn_init(void)
{
   1c7e8:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1c7ea:	480a      	ldr	r0, [pc, #40]	; (1c814 <bt_conn_init+0x2c>)
   1c7ec:	f014 fbaf 	bl	30f4e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1c7f0:	4909      	ldr	r1, [pc, #36]	; (1c818 <bt_conn_init+0x30>)
   1c7f2:	4808      	ldr	r0, [pc, #32]	; (1c814 <bt_conn_init+0x2c>)
   1c7f4:	f014 fbb7 	bl	30f66 <k_queue_append>
   1c7f8:	4908      	ldr	r1, [pc, #32]	; (1c81c <bt_conn_init+0x34>)
   1c7fa:	4806      	ldr	r0, [pc, #24]	; (1c814 <bt_conn_init+0x2c>)
   1c7fc:	f014 fbb3 	bl	30f66 <k_queue_append>
	}

	bt_att_init();
   1c800:	f001 f846 	bl	1d890 <bt_att_init>

	err = bt_smp_init();
   1c804:	f003 fc9e 	bl	20144 <bt_smp_init>
	if (err) {
   1c808:	4604      	mov	r4, r0
   1c80a:	b908      	cbnz	r0, 1c810 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   1c80c:	f011 fa93 	bl	2dd36 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1c810:	4620      	mov	r0, r4
   1c812:	bd10      	pop	{r4, pc}
   1c814:	20008e98 	.word	0x20008e98
   1c818:	200309b8 	.word	0x200309b8
   1c81c:	200309c8 	.word	0x200309c8

0001c820 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c820:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   1c822:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c824:	4605      	mov	r5, r0
   1c826:	460f      	mov	r7, r1
   1c828:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1c82a:	2104      	movs	r1, #4
   1c82c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c830:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c832:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   1c834:	f7ff fcd8 	bl	1c1e8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1c838:	4604      	mov	r4, r0
   1c83a:	b960      	cbnz	r0, 1c856 <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1c83c:	4b0a      	ldr	r3, [pc, #40]	; (1c868 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   1c83e:	2201      	movs	r2, #1
   1c840:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1c844:	4909      	ldr	r1, [pc, #36]	; (1c86c <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   1c846:	4603      	mov	r3, r0
   1c848:	9503      	str	r5, [sp, #12]
   1c84a:	9000      	str	r0, [sp, #0]
   1c84c:	f011 f9eb 	bl	2dc26 <z_log_msg_runtime_create.constprop.0>
}
   1c850:	4620      	mov	r0, r4
   1c852:	b005      	add	sp, #20
   1c854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1c856:	2104      	movs	r1, #4
   1c858:	300c      	adds	r0, #12
   1c85a:	f012 fdea 	bl	2f432 <net_buf_simple_add>
	hdr->code = code;
   1c85e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1c860:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1c862:	8046      	strh	r6, [r0, #2]
	return buf;
   1c864:	e7f4      	b.n	1c850 <l2cap_create_le_sig_pdu.constprop.0+0x30>
   1c866:	bf00      	nop
   1c868:	0003734d 	.word	0x0003734d
   1c86c:	00033068 	.word	0x00033068

0001c870 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1c870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1c872:	4c0b      	ldr	r4, [pc, #44]	; (1c8a0 <l2cap_accept+0x30>)
   1c874:	2300      	movs	r3, #0
   1c876:	6822      	ldr	r2, [r4, #0]
   1c878:	b92a      	cbnz	r2, 1c886 <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   1c87a:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   1c87c:	4b09      	ldr	r3, [pc, #36]	; (1c8a4 <l2cap_accept+0x34>)
   1c87e:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   1c880:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1c882:	b004      	add	sp, #16
   1c884:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1c886:	4a08      	ldr	r2, [pc, #32]	; (1c8a8 <l2cap_accept+0x38>)
   1c888:	9003      	str	r0, [sp, #12]
   1c88a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c88e:	4618      	mov	r0, r3
   1c890:	2201      	movs	r2, #1
   1c892:	4906      	ldr	r1, [pc, #24]	; (1c8ac <l2cap_accept+0x3c>)
   1c894:	9300      	str	r3, [sp, #0]
   1c896:	f011 f9c6 	bl	2dc26 <z_log_msg_runtime_create.constprop.0>
   1c89a:	f06f 000b 	mvn.w	r0, #11
   1c89e:	e7f0      	b.n	1c882 <l2cap_accept+0x12>
   1c8a0:	200309e8 	.word	0x200309e8
   1c8a4:	00033cd8 	.word	0x00033cd8
   1c8a8:	00037375 	.word	0x00037375
   1c8ac:	00033068 	.word	0x00033068

0001c8b0 <bt_l2cap_connected>:
{
   1c8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c8b2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c8b4:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1c8b6:	4d1f      	ldr	r5, [pc, #124]	; (1c934 <bt_l2cap_connected+0x84>)
   1c8b8:	4f1f      	ldr	r7, [pc, #124]	; (1c938 <bt_l2cap_connected+0x88>)
   1c8ba:	42bd      	cmp	r5, r7
   1c8bc:	d301      	bcc.n	1c8c2 <bt_l2cap_connected+0x12>
}
   1c8be:	b003      	add	sp, #12
   1c8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1c8c2:	4620      	mov	r0, r4
   1c8c4:	686b      	ldr	r3, [r5, #4]
   1c8c6:	a901      	add	r1, sp, #4
   1c8c8:	4798      	blx	r3
   1c8ca:	2800      	cmp	r0, #0
   1c8cc:	db2c      	blt.n	1c928 <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1c8ce:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1c8d0:	882a      	ldrh	r2, [r5, #0]
   1c8d2:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1c8d4:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1c8d6:	68a8      	ldr	r0, [r5, #8]
   1c8d8:	f103 0210 	add.w	r2, r3, #16
   1c8dc:	e8d2 1fef 	ldaex	r1, [r2]
   1c8e0:	e8c2 6fec 	stlex	ip, r6, [r2]
   1c8e4:	f1bc 0f00 	cmp.w	ip, #0
   1c8e8:	d1f8      	bne.n	1c8dc <bt_l2cap_connected+0x2c>
	parent->next = child;
   1c8ea:	609e      	str	r6, [r3, #8]
	return list->tail;
   1c8ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1c8ee:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1c8f2:	b9d9      	cbnz	r1, 1c92c <bt_l2cap_connected+0x7c>
	list->head = node;
   1c8f4:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1c8f8:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1c8fa:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1c8fc:	9801      	ldr	r0, [sp, #4]
   1c8fe:	6843      	ldr	r3, [r0, #4]
   1c900:	681b      	ldr	r3, [r3, #0]
   1c902:	b103      	cbz	r3, 1c906 <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
   1c904:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c906:	9b01      	ldr	r3, [sp, #4]
   1c908:	3310      	adds	r3, #16
   1c90a:	e8d3 1fef 	ldaex	r1, [r3]
   1c90e:	f041 0101 	orr.w	r1, r1, #1
   1c912:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c916:	2a00      	cmp	r2, #0
   1c918:	d1f7      	bne.n	1c90a <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
   1c91a:	9801      	ldr	r0, [sp, #4]
   1c91c:	6843      	ldr	r3, [r0, #4]
   1c91e:	69db      	ldr	r3, [r3, #28]
   1c920:	b113      	cbz	r3, 1c928 <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
   1c922:	f100 0110 	add.w	r1, r0, #16
   1c926:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1c928:	350c      	adds	r5, #12
   1c92a:	e7c6      	b.n	1c8ba <bt_l2cap_connected+0xa>
	parent->next = child;
   1c92c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1c92e:	6562      	str	r2, [r4, #84]	; 0x54
}
   1c930:	e7e2      	b.n	1c8f8 <bt_l2cap_connected+0x48>
   1c932:	bf00      	nop
   1c934:	00032f88 	.word	0x00032f88
   1c938:	00032fac 	.word	0x00032fac

0001c93c <l2cap_recv>:
{
   1c93c:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   1c93e:	8a0b      	ldrh	r3, [r1, #16]
{
   1c940:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1c942:	2b03      	cmp	r3, #3
{
   1c944:	460c      	mov	r4, r1
   1c946:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1c948:	d803      	bhi.n	1c952 <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   1c94a:	4b2d      	ldr	r3, [pc, #180]	; (1ca00 <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   1c94c:	9302      	str	r3, [sp, #8]
   1c94e:	2300      	movs	r3, #0
   1c950:	e01c      	b.n	1c98c <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c952:	2104      	movs	r1, #4
   1c954:	f104 000c 	add.w	r0, r4, #12
   1c958:	f012 fd9b 	bl	2f492 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1c95c:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   1c95e:	8842      	ldrh	r2, [r0, #2]
   1c960:	4605      	mov	r5, r0
	if (buf->len != len) {
   1c962:	429a      	cmp	r2, r3
   1c964:	d00e      	beq.n	1c984 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1c966:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1c96a:	4b26      	ldr	r3, [pc, #152]	; (1ca04 <l2cap_recv+0xc8>)
   1c96c:	2201      	movs	r2, #1
   1c96e:	9302      	str	r3, [sp, #8]
   1c970:	2300      	movs	r3, #0
   1c972:	4925      	ldr	r1, [pc, #148]	; (1ca08 <l2cap_recv+0xcc>)
   1c974:	4618      	mov	r0, r3
   1c976:	e9cd 3300 	strd	r3, r3, [sp]
   1c97a:	f011 f954 	bl	2dc26 <z_log_msg_runtime_create.constprop.0>
}
   1c97e:	2000      	movs	r0, #0
   1c980:	b006      	add	sp, #24
   1c982:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   1c984:	7843      	ldrb	r3, [r0, #1]
   1c986:	b94b      	cbnz	r3, 1c99c <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1c988:	4a20      	ldr	r2, [pc, #128]	; (1ca0c <l2cap_recv+0xd0>)
   1c98a:	9202      	str	r2, [sp, #8]
   1c98c:	2201      	movs	r2, #1
   1c98e:	4618      	mov	r0, r3
   1c990:	e9cd 3300 	strd	r3, r3, [sp]
   1c994:	491c      	ldr	r1, [pc, #112]	; (1ca08 <l2cap_recv+0xcc>)
   1c996:	f011 f946 	bl	2dc26 <z_log_msg_runtime_create.constprop.0>
		return 0;
   1c99a:	e7f0      	b.n	1c97e <l2cap_recv+0x42>
	switch (hdr->code) {
   1c99c:	7803      	ldrb	r3, [r0, #0]
   1c99e:	2b01      	cmp	r3, #1
   1c9a0:	d0ed      	beq.n	1c97e <l2cap_recv+0x42>
   1c9a2:	2b13      	cmp	r3, #19
   1c9a4:	d103      	bne.n	1c9ae <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   1c9a6:	2a01      	cmp	r2, #1
   1c9a8:	d8e9      	bhi.n	1c97e <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   1c9aa:	4b19      	ldr	r3, [pc, #100]	; (1ca10 <l2cap_recv+0xd4>)
   1c9ac:	e7ce      	b.n	1c94c <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1c9ae:	2400      	movs	r4, #0
	switch (hdr->code) {
   1c9b0:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1c9b2:	4b18      	ldr	r3, [pc, #96]	; (1ca14 <l2cap_recv+0xd8>)
   1c9b4:	2202      	movs	r2, #2
   1c9b6:	4620      	mov	r0, r4
   1c9b8:	4913      	ldr	r1, [pc, #76]	; (1ca08 <l2cap_recv+0xcc>)
   1c9ba:	9302      	str	r3, [sp, #8]
   1c9bc:	e9cd 4400 	strd	r4, r4, [sp]
   1c9c0:	4623      	mov	r3, r4
   1c9c2:	f011 f930 	bl	2dc26 <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c9c6:	7869      	ldrb	r1, [r5, #1]
   1c9c8:	2202      	movs	r2, #2
   1c9ca:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1c9cc:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c9ce:	f7ff ff27 	bl	1c820 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c9d2:	4605      	mov	r5, r0
   1c9d4:	2800      	cmp	r0, #0
   1c9d6:	d0d2      	beq.n	1c97e <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   1c9d8:	2102      	movs	r1, #2
   1c9da:	300c      	adds	r0, #12
   1c9dc:	f012 fd29 	bl	2f432 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1c9e0:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   1c9e2:	7004      	strb	r4, [r0, #0]
   1c9e4:	7044      	strb	r4, [r0, #1]
   1c9e6:	462a      	mov	r2, r5
   1c9e8:	2105      	movs	r1, #5
   1c9ea:	4630      	mov	r0, r6
   1c9ec:	9400      	str	r4, [sp, #0]
   1c9ee:	f011 f977 	bl	2dce0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1c9f2:	2800      	cmp	r0, #0
   1c9f4:	d0c3      	beq.n	1c97e <l2cap_recv+0x42>
		net_buf_unref(buf);
   1c9f6:	4628      	mov	r0, r5
   1c9f8:	f003 fdd0 	bl	2059c <net_buf_unref>
   1c9fc:	e7bf      	b.n	1c97e <l2cap_recv+0x42>
   1c9fe:	bf00      	nop
   1ca00:	0003739c 	.word	0x0003739c
   1ca04:	000373ba 	.word	0x000373ba
   1ca08:	00033068 	.word	0x00033068
   1ca0c:	000373db 	.word	0x000373db
   1ca10:	000373fc 	.word	0x000373fc
   1ca14:	00037418 	.word	0x00037418

0001ca18 <bt_l2cap_recv>:
{
   1ca18:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1ca1a:	8a0b      	ldrh	r3, [r1, #16]
{
   1ca1c:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1ca1e:	2b03      	cmp	r3, #3
{
   1ca20:	460c      	mov	r4, r1
   1ca22:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1ca24:	d80f      	bhi.n	1ca46 <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   1ca26:	4b15      	ldr	r3, [pc, #84]	; (1ca7c <bt_l2cap_recv+0x64>)
   1ca28:	2201      	movs	r2, #1
   1ca2a:	9302      	str	r3, [sp, #8]
   1ca2c:	2300      	movs	r3, #0
   1ca2e:	4914      	ldr	r1, [pc, #80]	; (1ca80 <bt_l2cap_recv+0x68>)
   1ca30:	4618      	mov	r0, r3
   1ca32:	e9cd 3300 	strd	r3, r3, [sp]
   1ca36:	f011 f8f6 	bl	2dc26 <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   1ca3a:	4620      	mov	r0, r4
}
   1ca3c:	b005      	add	sp, #20
   1ca3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   1ca42:	f003 bdab 	b.w	2059c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ca46:	2104      	movs	r1, #4
   1ca48:	f104 000c 	add.w	r0, r4, #12
   1ca4c:	f012 fd21 	bl	2f492 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1ca50:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1ca52:	4628      	mov	r0, r5
   1ca54:	f011 f966 	bl	2dd24 <bt_l2cap_le_lookup_rx_cid>
   1ca58:	4603      	mov	r3, r0
	if (!chan) {
   1ca5a:	b948      	cbnz	r0, 1ca70 <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1ca5c:	4a09      	ldr	r2, [pc, #36]	; (1ca84 <bt_l2cap_recv+0x6c>)
   1ca5e:	9103      	str	r1, [sp, #12]
   1ca60:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1ca64:	4906      	ldr	r1, [pc, #24]	; (1ca80 <bt_l2cap_recv+0x68>)
   1ca66:	2202      	movs	r2, #2
   1ca68:	9000      	str	r0, [sp, #0]
   1ca6a:	f011 f8dc 	bl	2dc26 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1ca6e:	e7e4      	b.n	1ca3a <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   1ca70:	6843      	ldr	r3, [r0, #4]
   1ca72:	4621      	mov	r1, r4
   1ca74:	695b      	ldr	r3, [r3, #20]
   1ca76:	4798      	blx	r3
   1ca78:	e7df      	b.n	1ca3a <bt_l2cap_recv+0x22>
   1ca7a:	bf00      	nop
   1ca7c:	00037440 	.word	0x00037440
   1ca80:	00033068 	.word	0x00033068
   1ca84:	0003745d 	.word	0x0003745d

0001ca88 <bt_l2cap_update_conn_param>:
{
   1ca88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1ca8a:	4b17      	ldr	r3, [pc, #92]	; (1cae8 <bt_l2cap_update_conn_param+0x60>)
{
   1ca8c:	460e      	mov	r6, r1
	ident++;
   1ca8e:	7819      	ldrb	r1, [r3, #0]
{
   1ca90:	4605      	mov	r5, r0
	ident++;
   1ca92:	3101      	adds	r1, #1
   1ca94:	b2c9      	uxtb	r1, r1
   1ca96:	2901      	cmp	r1, #1
   1ca98:	bf38      	it	cc
   1ca9a:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1ca9c:	2208      	movs	r2, #8
   1ca9e:	2012      	movs	r0, #18
	ident++;
   1caa0:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1caa2:	f7ff febd 	bl	1c820 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1caa6:	4604      	mov	r4, r0
   1caa8:	b1d0      	cbz	r0, 1cae0 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1caaa:	2108      	movs	r1, #8
   1caac:	300c      	adds	r0, #12
   1caae:	f012 fcc0 	bl	2f432 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1cab2:	8833      	ldrh	r3, [r6, #0]
   1cab4:	4622      	mov	r2, r4
   1cab6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1cab8:	8873      	ldrh	r3, [r6, #2]
   1caba:	2105      	movs	r1, #5
   1cabc:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1cabe:	88b3      	ldrh	r3, [r6, #4]
   1cac0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1cac2:	88f3      	ldrh	r3, [r6, #6]
   1cac4:	80c3      	strh	r3, [r0, #6]
   1cac6:	2300      	movs	r3, #0
   1cac8:	4628      	mov	r0, r5
   1caca:	9300      	str	r3, [sp, #0]
   1cacc:	f011 f908 	bl	2dce0 <bt_l2cap_send_cb>
	if (err) {
   1cad0:	4605      	mov	r5, r0
   1cad2:	b110      	cbz	r0, 1cada <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1cad4:	4620      	mov	r0, r4
   1cad6:	f003 fd61 	bl	2059c <net_buf_unref>
}
   1cada:	4628      	mov	r0, r5
   1cadc:	b002      	add	sp, #8
   1cade:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1cae0:	f06f 050b 	mvn.w	r5, #11
   1cae4:	e7f9      	b.n	1cada <bt_l2cap_update_conn_param+0x52>
   1cae6:	bf00      	nop
   1cae8:	20031ace 	.word	0x20031ace

0001caec <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1caec:	2823      	cmp	r0, #35	; 0x23
   1caee:	d81f      	bhi.n	1cb30 <att_op_get_type+0x44>
   1caf0:	281a      	cmp	r0, #26
   1caf2:	d804      	bhi.n	1cafe <att_op_get_type+0x12>
   1caf4:	1e43      	subs	r3, r0, #1
   1caf6:	2b18      	cmp	r3, #24
   1caf8:	d90e      	bls.n	1cb18 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1cafa:	2006      	movs	r0, #6
   1cafc:	4770      	bx	lr
	switch (op) {
   1cafe:	f1a0 031b 	sub.w	r3, r0, #27
   1cb02:	2b08      	cmp	r3, #8
   1cb04:	d81e      	bhi.n	1cb44 <att_op_get_type+0x58>
   1cb06:	e8df f003 	tbb	[pc, r3]
   1cb0a:	1d05      	.short	0x1d05
   1cb0c:	191d231b 	.word	0x191d231b
   1cb10:	1d25      	.short	0x1d25
   1cb12:	05          	.byte	0x05
   1cb13:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1cb14:	2003      	movs	r0, #3
   1cb16:	4770      	bx	lr
   1cb18:	2301      	movs	r3, #1
	switch (op) {
   1cb1a:	4a0f      	ldr	r2, [pc, #60]	; (1cb58 <att_op_get_type+0x6c>)
   1cb1c:	4083      	lsls	r3, r0
   1cb1e:	401a      	ands	r2, r3
   1cb20:	b9c2      	cbnz	r2, 1cb54 <att_op_get_type+0x68>
   1cb22:	4a0e      	ldr	r2, [pc, #56]	; (1cb5c <att_op_get_type+0x70>)
   1cb24:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1cb26:	2a00      	cmp	r2, #0
   1cb28:	bf14      	ite	ne
   1cb2a:	2001      	movne	r0, #1
   1cb2c:	2006      	moveq	r0, #6
   1cb2e:	4770      	bx	lr
	switch (op) {
   1cb30:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1cb34:	2b52      	cmp	r3, #82	; 0x52
   1cb36:	d105      	bne.n	1cb44 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1cb38:	2000      	movs	r0, #0
}
   1cb3a:	4770      	bx	lr
		return ATT_REQUEST;
   1cb3c:	2001      	movs	r0, #1
   1cb3e:	4770      	bx	lr
		return ATT_INDICATION;
   1cb40:	2005      	movs	r0, #5
   1cb42:	4770      	bx	lr
		return ATT_COMMAND;
   1cb44:	f010 0f40 	tst.w	r0, #64	; 0x40
   1cb48:	bf0c      	ite	eq
   1cb4a:	2006      	moveq	r0, #6
   1cb4c:	2000      	movne	r0, #0
   1cb4e:	4770      	bx	lr
	switch (op) {
   1cb50:	2004      	movs	r0, #4
   1cb52:	4770      	bx	lr
		return ATT_RESPONSE;
   1cb54:	2002      	movs	r0, #2
   1cb56:	4770      	bx	lr
   1cb58:	028aaaaa 	.word	0x028aaaaa
   1cb5c:	01455554 	.word	0x01455554

0001cb60 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1cb60:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1cb62:	3804      	subs	r0, #4
   1cb64:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1cb66:	a901      	add	r1, sp, #4
   1cb68:	4802      	ldr	r0, [pc, #8]	; (1cb74 <bt_att_released+0x14>)
   1cb6a:	f014 f933 	bl	30dd4 <k_mem_slab_free>
}
   1cb6e:	b003      	add	sp, #12
   1cb70:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb74:	20008b54 	.word	0x20008b54

0001cb78 <tx_meta_data_free>:
{
   1cb78:	b510      	push	{r4, lr}
   1cb7a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1cb7c:	2100      	movs	r1, #0
   1cb7e:	2214      	movs	r2, #20
   1cb80:	f014 fe8f 	bl	318a2 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1cb84:	4621      	mov	r1, r4
}
   1cb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1cb8a:	4801      	ldr	r0, [pc, #4]	; (1cb90 <tx_meta_data_free+0x18>)
   1cb8c:	f014 b9eb 	b.w	30f66 <k_queue_append>
   1cb90:	20008e80 	.word	0x20008e80

0001cb94 <find_type_cb>:
{
   1cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cb98:	f642 0301 	movw	r3, #10241	; 0x2801
   1cb9c:	2500      	movs	r5, #0
{
   1cb9e:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1cba0:	f8d2 9000 	ldr.w	r9, [r2]
{
   1cba4:	4607      	mov	r7, r0
   1cba6:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cba8:	6800      	ldr	r0, [r0, #0]
   1cbaa:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   1cbac:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   1cbb0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cbb2:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1cbb6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1cbba:	f010 fb3e 	bl	2d23a <bt_uuid_cmp>
   1cbbe:	2800      	cmp	r0, #0
   1cbc0:	d067      	beq.n	1cc92 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1cbc2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1cbc6:	6838      	ldr	r0, [r7, #0]
   1cbc8:	a90d      	add	r1, sp, #52	; 0x34
   1cbca:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1cbce:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1cbd2:	f010 fb32 	bl	2d23a <bt_uuid_cmp>
   1cbd6:	b138      	cbz	r0, 1cbe8 <find_type_cb+0x54>
		if (data->group &&
   1cbd8:	68a3      	ldr	r3, [r4, #8]
   1cbda:	b11b      	cbz	r3, 1cbe4 <find_type_cb+0x50>
   1cbdc:	885a      	ldrh	r2, [r3, #2]
   1cbde:	42b2      	cmp	r2, r6
   1cbe0:	d200      	bcs.n	1cbe4 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cbe2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1cbe4:	2001      	movs	r0, #1
   1cbe6:	e009      	b.n	1cbfc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1cbe8:	6861      	ldr	r1, [r4, #4]
   1cbea:	4608      	mov	r0, r1
   1cbec:	f011 f8ae 	bl	2dd4c <net_buf_frags_len>
   1cbf0:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1cbf4:	1a1b      	subs	r3, r3, r0
   1cbf6:	2b03      	cmp	r3, #3
   1cbf8:	d803      	bhi.n	1cc02 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1cbfa:	2000      	movs	r0, #0
}
   1cbfc:	b013      	add	sp, #76	; 0x4c
   1cbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1cc02:	4608      	mov	r0, r1
   1cc04:	f012 fbf3 	bl	2f3ee <net_buf_frag_last>
   1cc08:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1cc0a:	6860      	ldr	r0, [r4, #4]
   1cc0c:	f011 f89e 	bl	2dd4c <net_buf_frags_len>
   1cc10:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1cc14:	f105 0b0c 	add.w	fp, r5, #12
   1cc18:	ebaa 0a00 	sub.w	sl, sl, r0
   1cc1c:	4658      	mov	r0, fp
   1cc1e:	f012 fc4c 	bl	2f4ba <net_buf_simple_tailroom>
   1cc22:	4582      	cmp	sl, r0
   1cc24:	d238      	bcs.n	1cc98 <find_type_cb+0x104>
   1cc26:	6860      	ldr	r0, [r4, #4]
   1cc28:	f011 f890 	bl	2dd4c <net_buf_frags_len>
   1cc2c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1cc30:	1a18      	subs	r0, r3, r0
	if (!len) {
   1cc32:	b970      	cbnz	r0, 1cc52 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1cc34:	6863      	ldr	r3, [r4, #4]
   1cc36:	7a98      	ldrb	r0, [r3, #10]
   1cc38:	f003 fbee 	bl	20418 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1cc3c:	2200      	movs	r2, #0
   1cc3e:	2300      	movs	r3, #0
   1cc40:	f012 fb97 	bl	2f372 <net_buf_alloc_fixed>
		if (!frag) {
   1cc44:	4605      	mov	r5, r0
   1cc46:	2800      	cmp	r0, #0
   1cc48:	d0d7      	beq.n	1cbfa <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1cc4a:	4601      	mov	r1, r0
   1cc4c:	6860      	ldr	r0, [r4, #4]
   1cc4e:	f012 fbdf 	bl	2f410 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1cc52:	2300      	movs	r3, #0
   1cc54:	9300      	str	r3, [sp, #0]
   1cc56:	2310      	movs	r3, #16
   1cc58:	4639      	mov	r1, r7
   1cc5a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1cc5e:	4640      	mov	r0, r8
   1cc60:	eb0d 0203 	add.w	r2, sp, r3
   1cc64:	47c8      	blx	r9
	if (read < 0) {
   1cc66:	1e07      	subs	r7, r0, #0
   1cc68:	db13      	blt.n	1cc92 <find_type_cb+0xfe>
	if (read != data->value_len) {
   1cc6a:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1cc6c:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1cc6e:	42ba      	cmp	r2, r7
   1cc70:	d031      	beq.n	1ccd6 <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1cc72:	4601      	mov	r1, r0
   1cc74:	a80d      	add	r0, sp, #52	; 0x34
   1cc76:	f010 fb0e 	bl	2d296 <bt_uuid_create>
   1cc7a:	4603      	mov	r3, r0
   1cc7c:	b980      	cbnz	r0, 1cca0 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1cc7e:	7c22      	ldrb	r2, [r4, #16]
   1cc80:	9203      	str	r2, [sp, #12]
   1cc82:	4a17      	ldr	r2, [pc, #92]	; (1cce0 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   1cc84:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1cc88:	4916      	ldr	r1, [pc, #88]	; (1cce4 <find_type_cb+0x150>)
   1cc8a:	2202      	movs	r2, #2
   1cc8c:	9300      	str	r3, [sp, #0]
   1cc8e:	f011 f94c 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   1cc92:	2300      	movs	r3, #0
   1cc94:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1cc96:	e7a5      	b.n	1cbe4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1cc98:	4658      	mov	r0, fp
   1cc9a:	f012 fc0e 	bl	2f4ba <net_buf_simple_tailroom>
   1cc9e:	e7c8      	b.n	1cc32 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1cca0:	b2fa      	uxtb	r2, r7
   1cca2:	a904      	add	r1, sp, #16
   1cca4:	a808      	add	r0, sp, #32
   1cca6:	f010 faf6 	bl	2d296 <bt_uuid_create>
   1ccaa:	4603      	mov	r3, r0
   1ccac:	b910      	cbnz	r0, 1ccb4 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   1ccae:	4a0e      	ldr	r2, [pc, #56]	; (1cce8 <find_type_cb+0x154>)
   1ccb0:	9703      	str	r7, [sp, #12]
   1ccb2:	e7e7      	b.n	1cc84 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ccb4:	a908      	add	r1, sp, #32
   1ccb6:	a80d      	add	r0, sp, #52	; 0x34
   1ccb8:	f010 fabf 	bl	2d23a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ccbc:	2800      	cmp	r0, #0
   1ccbe:	d1e8      	bne.n	1cc92 <find_type_cb+0xfe>
	data->err = 0x00;
   1ccc0:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1ccc2:	2104      	movs	r1, #4
   1ccc4:	7463      	strb	r3, [r4, #17]
   1ccc6:	f105 000c 	add.w	r0, r5, #12
   1ccca:	f012 fbb2 	bl	2f432 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ccce:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ccd0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ccd2:	68a3      	ldr	r3, [r4, #8]
   1ccd4:	e785      	b.n	1cbe2 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   1ccd6:	a904      	add	r1, sp, #16
   1ccd8:	f014 fd99 	bl	3180e <memcmp>
   1ccdc:	e7ee      	b.n	1ccbc <find_type_cb+0x128>
   1ccde:	bf00      	nop
   1cce0:	00037492 	.word	0x00037492
   1cce4:	00033018 	.word	0x00033018
   1cce8:	000374b1 	.word	0x000374b1

0001ccec <chan_send>:
{
   1ccec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ccf0:	4606      	mov	r6, r0
   1ccf2:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1ccf4:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1ccf8:	68cb      	ldr	r3, [r1, #12]
{
   1ccfa:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1ccfc:	2102      	movs	r1, #2
   1ccfe:	3090      	adds	r0, #144	; 0x90
   1cd00:	f011 f83e 	bl	2dd80 <atomic_test_bit>
   1cd04:	2800      	cmp	r0, #0
   1cd06:	d044      	beq.n	1cd92 <chan_send+0xa6>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1cd08:	781b      	ldrb	r3, [r3, #0]
   1cd0a:	2bd2      	cmp	r3, #210	; 0xd2
   1cd0c:	d11a      	bne.n	1cd44 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1cd0e:	6833      	ldr	r3, [r6, #0]
   1cd10:	4621      	mov	r1, r4
   1cd12:	6818      	ldr	r0, [r3, #0]
   1cd14:	f012 f9cb 	bl	2f0ae <bt_smp_sign>
		if (err) {
   1cd18:	4605      	mov	r5, r0
   1cd1a:	b198      	cbz	r0, 1cd44 <chan_send+0x58>
			LOG_ERR("Error signing data");
   1cd1c:	4b1e      	ldr	r3, [pc, #120]	; (1cd98 <chan_send+0xac>)
   1cd1e:	2201      	movs	r2, #1
   1cd20:	9302      	str	r3, [sp, #8]
   1cd22:	2300      	movs	r3, #0
   1cd24:	491d      	ldr	r1, [pc, #116]	; (1cd9c <chan_send+0xb0>)
   1cd26:	4618      	mov	r0, r3
   1cd28:	e9cd 3300 	strd	r3, r3, [sp]
   1cd2c:	f011 f8fd 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1cd30:	69a0      	ldr	r0, [r4, #24]
   1cd32:	f7ff ff21 	bl	1cb78 <tx_meta_data_free>
			net_buf_unref(buf);
   1cd36:	4620      	mov	r0, r4
   1cd38:	f003 fc30 	bl	2059c <net_buf_unref>
}
   1cd3c:	4628      	mov	r0, r5
   1cd3e:	b005      	add	sp, #20
   1cd40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1cd44:	f104 000c 	add.w	r0, r4, #12
   1cd48:	f012 fbb3 	bl	2f4b2 <net_buf_simple_headroom>
	state->len = buf->len;
   1cd4c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   1cd50:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cd54:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   1cd56:	4607      	mov	r7, r0
   1cd58:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cd5a:	68e3      	ldr	r3, [r4, #12]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cd5c:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cd5e:	7818      	ldrb	r0, [r3, #0]
   1cd60:	f7ff fec4 	bl	1caec <att_op_get_type>
	switch (op_type) {
   1cd64:	2805      	cmp	r0, #5
   1cd66:	bf98      	it	ls
   1cd68:	4b0d      	ldrls	r3, [pc, #52]	; (1cda0 <chan_send+0xb4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cd6a:	4622      	mov	r2, r4
   1cd6c:	bf94      	ite	ls
   1cd6e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cd72:	4b0c      	ldrhi	r3, [pc, #48]	; (1cda4 <chan_send+0xb8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cd74:	4628      	mov	r0, r5
   1cd76:	f8cd 9000 	str.w	r9, [sp]
   1cd7a:	f010 ffb1 	bl	2dce0 <bt_l2cap_send_cb>
	if (err) {
   1cd7e:	4605      	mov	r5, r0
   1cd80:	2800      	cmp	r0, #0
   1cd82:	d0db      	beq.n	1cd3c <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1cd84:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1cd86:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1cd8a:	fa13 f787 	uxtah	r7, r3, r7
   1cd8e:	60e7      	str	r7, [r4, #12]
}
   1cd90:	e7d4      	b.n	1cd3c <chan_send+0x50>
		return -EINVAL;
   1cd92:	f06f 0515 	mvn.w	r5, #21
   1cd96:	e7d1      	b.n	1cd3c <chan_send+0x50>
   1cd98:	000374d0 	.word	0x000374d0
   1cd9c:	00033018 	.word	0x00033018
   1cda0:	00033d00 	.word	0x00033d00
   1cda4:	0002e327 	.word	0x0002e327

0001cda8 <att_get>:
{
   1cda8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1cdaa:	7b43      	ldrb	r3, [r0, #13]
   1cdac:	2b07      	cmp	r3, #7
   1cdae:	d00d      	beq.n	1cdcc <att_get+0x24>
		LOG_WRN("Not connected");
   1cdb0:	4b0e      	ldr	r3, [pc, #56]	; (1cdec <att_get+0x44>)
   1cdb2:	2202      	movs	r2, #2
   1cdb4:	9302      	str	r3, [sp, #8]
   1cdb6:	2300      	movs	r3, #0
   1cdb8:	4618      	mov	r0, r3
   1cdba:	e9cd 3300 	strd	r3, r3, [sp]
   1cdbe:	490c      	ldr	r1, [pc, #48]	; (1cdf0 <att_get+0x48>)
		LOG_ERR("Unable to find ATT channel");
   1cdc0:	f011 f8b3 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1cdc4:	2000      	movs	r0, #0
}
   1cdc6:	b005      	add	sp, #20
   1cdc8:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1cdcc:	2104      	movs	r1, #4
   1cdce:	f010 ffa9 	bl	2dd24 <bt_l2cap_le_lookup_rx_cid>
   1cdd2:	4603      	mov	r3, r0
	if (!chan) {
   1cdd4:	b930      	cbnz	r0, 1cde4 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   1cdd6:	4a07      	ldr	r2, [pc, #28]	; (1cdf4 <att_get+0x4c>)
   1cdd8:	4905      	ldr	r1, [pc, #20]	; (1cdf0 <att_get+0x48>)
   1cdda:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1cdde:	9000      	str	r0, [sp, #0]
   1cde0:	2201      	movs	r2, #1
   1cde2:	e7ed      	b.n	1cdc0 <att_get+0x18>
	return att_chan->att;
   1cde4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1cde8:	e7ed      	b.n	1cdc6 <att_get+0x1e>
   1cdea:	bf00      	nop
   1cdec:	000374e3 	.word	0x000374e3
   1cdf0:	00033018 	.word	0x00033018
   1cdf4:	000374f1 	.word	0x000374f1

0001cdf8 <bt_att_connected>:
{
   1cdf8:	b510      	push	{r4, lr}
   1cdfa:	4604      	mov	r4, r0
   1cdfc:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1ce00:	e8d3 1fef 	ldaex	r1, [r3]
   1ce04:	f041 0104 	orr.w	r1, r1, #4
   1ce08:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ce0c:	2a00      	cmp	r2, #0
   1ce0e:	d1f7      	bne.n	1ce00 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ce10:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   1ce12:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ce14:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ce16:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1ce18:	f010 fff4 	bl	2de04 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1ce1c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1ce20:	4903      	ldr	r1, [pc, #12]	; (1ce30 <bt_att_connected+0x38>)
   1ce22:	f014 f97b 	bl	3111c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1ce26:	6820      	ldr	r0, [r4, #0]
}
   1ce28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1ce2c:	f001 bce4 	b.w	1e7f8 <bt_gatt_connected>
   1ce30:	0001da8d 	.word	0x0001da8d

0001ce34 <read_group_cb>:
{
   1ce34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ce38:	f04f 0800 	mov.w	r8, #0
   1ce3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1ce40:	4605      	mov	r5, r0
   1ce42:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ce44:	6800      	ldr	r0, [r0, #0]
   1ce46:	a902      	add	r1, sp, #8
{
   1ce48:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1ce4a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ce4c:	f88d 8008 	strb.w	r8, [sp, #8]
   1ce50:	f8ad 300a 	strh.w	r3, [sp, #10]
   1ce54:	f010 f9f1 	bl	2d23a <bt_uuid_cmp>
   1ce58:	b1a0      	cbz	r0, 1ce84 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ce5a:	f642 0301 	movw	r3, #10241	; 0x2801
   1ce5e:	6828      	ldr	r0, [r5, #0]
   1ce60:	a903      	add	r1, sp, #12
   1ce62:	f88d 800c 	strb.w	r8, [sp, #12]
   1ce66:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ce6a:	f010 f9e6 	bl	2d23a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ce6e:	b148      	cbz	r0, 1ce84 <read_group_cb+0x50>
		if (data->group &&
   1ce70:	6923      	ldr	r3, [r4, #16]
   1ce72:	b11b      	cbz	r3, 1ce7c <read_group_cb+0x48>
   1ce74:	885a      	ldrh	r2, [r3, #2]
   1ce76:	42b2      	cmp	r2, r6
   1ce78:	d200      	bcs.n	1ce7c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ce7a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1ce7c:	2001      	movs	r0, #1
}
   1ce7e:	b004      	add	sp, #16
   1ce80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ce84:	6861      	ldr	r1, [r4, #4]
   1ce86:	6828      	ldr	r0, [r5, #0]
   1ce88:	f010 f9d7 	bl	2d23a <bt_uuid_cmp>
   1ce8c:	b110      	cbz	r0, 1ce94 <read_group_cb+0x60>
		data->group = NULL;
   1ce8e:	2300      	movs	r3, #0
   1ce90:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1ce92:	e7f3      	b.n	1ce7c <read_group_cb+0x48>
	if (data->rsp->len &&
   1ce94:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1ce96:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1ce98:	781a      	ldrb	r2, [r3, #0]
   1ce9a:	b132      	cbz	r2, 1ceaa <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1ce9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1ce9e:	8a01      	ldrh	r1, [r0, #16]
   1cea0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1cea2:	4293      	cmp	r3, r2
   1cea4:	da01      	bge.n	1ceaa <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1cea6:	2000      	movs	r0, #0
   1cea8:	e7e9      	b.n	1ce7e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ceaa:	2104      	movs	r1, #4
   1ceac:	300c      	adds	r0, #12
   1ceae:	f012 fac0 	bl	2f432 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ceb2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ceb4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ceb6:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1ceb8:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ceba:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1cebc:	4b07      	ldr	r3, [pc, #28]	; (1cedc <read_group_cb+0xa8>)
   1cebe:	9401      	str	r4, [sp, #4]
   1cec0:	9300      	str	r3, [sp, #0]
   1cec2:	4638      	mov	r0, r7
   1cec4:	2300      	movs	r3, #0
   1cec6:	68a2      	ldr	r2, [r4, #8]
   1cec8:	f011 f87f 	bl	2dfca <att_chan_read>
	if (read < 0) {
   1cecc:	2800      	cmp	r0, #0
   1cece:	dbea      	blt.n	1cea6 <read_group_cb+0x72>
	if (!data->group) {
   1ced0:	6920      	ldr	r0, [r4, #16]
   1ced2:	3800      	subs	r0, #0
   1ced4:	bf18      	it	ne
   1ced6:	2001      	movne	r0, #1
   1ced8:	e7d1      	b.n	1ce7e <read_group_cb+0x4a>
   1ceda:	bf00      	nop
   1cedc:	0002de6b 	.word	0x0002de6b

0001cee0 <read_type_cb>:
{
   1cee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1cee4:	6817      	ldr	r7, [r2, #0]
{
   1cee6:	4605      	mov	r5, r0
   1cee8:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ceea:	6800      	ldr	r0, [r0, #0]
   1ceec:	6851      	ldr	r1, [r2, #4]
{
   1ceee:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1cef0:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1cef2:	f010 f9a2 	bl	2d23a <bt_uuid_cmp>
   1cef6:	4681      	mov	r9, r0
   1cef8:	2800      	cmp	r0, #0
   1cefa:	d13c      	bne.n	1cf76 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1cefc:	4630      	mov	r0, r6
   1cefe:	2295      	movs	r2, #149	; 0x95
   1cf00:	4629      	mov	r1, r5
   1cf02:	f011 fd85 	bl	2ea10 <bt_gatt_check_perm>
   1cf06:	4606      	mov	r6, r0
   1cf08:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1cf0a:	b140      	cbz	r0, 1cf1e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1cf0c:	68e3      	ldr	r3, [r4, #12]
   1cf0e:	781b      	ldrb	r3, [r3, #0]
   1cf10:	b10b      	cbz	r3, 1cf16 <read_type_cb+0x36>
			data->err = 0x00;
   1cf12:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1cf16:	2000      	movs	r0, #0
}
   1cf18:	b003      	add	sp, #12
   1cf1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1cf1e:	68a0      	ldr	r0, [r4, #8]
   1cf20:	f012 fa65 	bl	2f3ee <net_buf_frag_last>
   1cf24:	2102      	movs	r1, #2
   1cf26:	300c      	adds	r0, #12
   1cf28:	f012 fa83 	bl	2f432 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1cf2c:	4b13      	ldr	r3, [pc, #76]	; (1cf7c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1cf2e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1cf30:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1cf34:	9300      	str	r3, [sp, #0]
   1cf36:	9401      	str	r4, [sp, #4]
   1cf38:	4633      	mov	r3, r6
   1cf3a:	4629      	mov	r1, r5
   1cf3c:	4638      	mov	r0, r7
   1cf3e:	68a2      	ldr	r2, [r4, #8]
   1cf40:	f011 f843 	bl	2dfca <att_chan_read>
	if (read < 0) {
   1cf44:	2800      	cmp	r0, #0
   1cf46:	da07      	bge.n	1cf58 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1cf48:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1cf4c:	bf32      	itee	cc
   1cf4e:	200e      	movcc	r0, #14
		return -err;
   1cf50:	4240      	negcs	r0, r0
   1cf52:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1cf54:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1cf56:	e7de      	b.n	1cf16 <read_type_cb+0x36>
	if (!data->item) {
   1cf58:	6923      	ldr	r3, [r4, #16]
   1cf5a:	2b00      	cmp	r3, #0
   1cf5c:	d0db      	beq.n	1cf16 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1cf5e:	68a0      	ldr	r0, [r4, #8]
   1cf60:	f010 fef4 	bl	2dd4c <net_buf_frags_len>
   1cf64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1cf66:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1cf68:	68e3      	ldr	r3, [r4, #12]
   1cf6a:	781b      	ldrb	r3, [r3, #0]
   1cf6c:	4298      	cmp	r0, r3
   1cf6e:	bf94      	ite	ls
   1cf70:	2000      	movls	r0, #0
   1cf72:	2001      	movhi	r0, #1
   1cf74:	e7d0      	b.n	1cf18 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1cf76:	2001      	movs	r0, #1
   1cf78:	e7ce      	b.n	1cf18 <read_type_cb+0x38>
   1cf7a:	bf00      	nop
   1cf7c:	0002dd5d 	.word	0x0002dd5d

0001cf80 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1cf80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf82:	b087      	sub	sp, #28
   1cf84:	4604      	mov	r4, r0
   1cf86:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1cf88:	2200      	movs	r2, #0
   1cf8a:	2300      	movs	r3, #0
   1cf8c:	4831      	ldr	r0, [pc, #196]	; (1d054 <bt_att_accept+0xd4>)
   1cf8e:	a904      	add	r1, sp, #16
   1cf90:	f008 fb9a 	bl	256c8 <k_mem_slab_alloc>
   1cf94:	4605      	mov	r5, r0
   1cf96:	b178      	cbz	r0, 1cfb8 <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   1cf98:	4b2f      	ldr	r3, [pc, #188]	; (1d058 <bt_att_accept+0xd8>)
   1cf9a:	2201      	movs	r2, #1
   1cf9c:	9302      	str	r3, [sp, #8]
   1cf9e:	2300      	movs	r3, #0
   1cfa0:	e9cd 3300 	strd	r3, r3, [sp]
   1cfa4:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1cfa6:	4618      	mov	r0, r3
   1cfa8:	492c      	ldr	r1, [pc, #176]	; (1d05c <bt_att_accept+0xdc>)
   1cfaa:	f010 ffbe 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1cfae:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1cfb2:	4630      	mov	r0, r6
   1cfb4:	b007      	add	sp, #28
   1cfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   1cfb8:	f009 fad0 	bl	2655c <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   1cfbc:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   1cfbe:	4b28      	ldr	r3, [pc, #160]	; (1d060 <bt_att_accept+0xe0>)
   1cfc0:	2228      	movs	r2, #40	; 0x28
   1cfc2:	6018      	str	r0, [r3, #0]
   1cfc4:	4629      	mov	r1, r5
   1cfc6:	1d30      	adds	r0, r6, #4
   1cfc8:	f014 fc6b 	bl	318a2 <memset>
	att->conn = conn;
   1cfcc:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   1cfce:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1cfd0:	2200      	movs	r2, #0
   1cfd2:	2300      	movs	r3, #0
	list->tail = NULL;
   1cfd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1cfd8:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   1cfdc:	4821      	ldr	r0, [pc, #132]	; (1d064 <bt_att_accept+0xe4>)
   1cfde:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1cfe0:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1cfe2:	f008 fb71 	bl	256c8 <k_mem_slab_alloc>
   1cfe6:	4606      	mov	r6, r0
   1cfe8:	b140      	cbz	r0, 1cffc <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1cfea:	6823      	ldr	r3, [r4, #0]
   1cfec:	2202      	movs	r2, #2
   1cfee:	9303      	str	r3, [sp, #12]
   1cff0:	4b1d      	ldr	r3, [pc, #116]	; (1d068 <bt_att_accept+0xe8>)
   1cff2:	9500      	str	r5, [sp, #0]
   1cff4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1cff8:	462b      	mov	r3, r5
   1cffa:	e7d4      	b.n	1cfa6 <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   1cffc:	9b05      	ldr	r3, [sp, #20]
   1cffe:	4601      	mov	r1, r0
   1d000:	22e8      	movs	r2, #232	; 0xe8
   1d002:	4618      	mov	r0, r3
   1d004:	f014 fc4d 	bl	318a2 <memset>
	chan->chan.chan.ops = &ops;
   1d008:	4a18      	ldr	r2, [pc, #96]	; (1d06c <bt_att_accept+0xec>)
   1d00a:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   1d00c:	3098      	adds	r0, #152	; 0x98
   1d00e:	f013 ff9e 	bl	30f4e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d012:	9b05      	ldr	r3, [sp, #20]
   1d014:	3390      	adds	r3, #144	; 0x90
   1d016:	e8d3 2fef 	ldaex	r2, [r3]
   1d01a:	e8c3 6fe1 	stlex	r1, r6, [r3]
   1d01e:	2900      	cmp	r1, #0
   1d020:	d1f9      	bne.n	1d016 <bt_att_accept+0x96>
	chan->att = att;
   1d022:	9b05      	ldr	r3, [sp, #20]
   1d024:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1d026:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1d028:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   1d02a:	b91b      	cbnz	r3, 1d034 <bt_att_accept+0xb4>
   1d02c:	f104 000c 	add.w	r0, r4, #12
   1d030:	f013 ff8d 	bl	30f4e <z_impl_k_queue_init>
	return list->head;
   1d034:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
   1d036:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
	parent->next = child;
   1d03a:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1d03e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
   1d040:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1d042:	b902      	cbnz	r2, 1d046 <bt_att_accept+0xc6>
	list->tail = node;
   1d044:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1d046:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   1d048:	2b00      	cmp	r3, #0
   1d04a:	d0b0      	beq.n	1cfae <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   1d04c:	3304      	adds	r3, #4
   1d04e:	603b      	str	r3, [r7, #0]
	return 0;
   1d050:	e7af      	b.n	1cfb2 <bt_att_accept+0x32>
   1d052:	bf00      	nop
   1d054:	20008b38 	.word	0x20008b38
   1d058:	0003750c 	.word	0x0003750c
   1d05c:	00033018 	.word	0x00033018
   1d060:	20030a9c 	.word	0x20030a9c
   1d064:	20008b54 	.word	0x20008b54
   1d068:	00037531 	.word	0x00037531
   1d06c:	2000857c 	.word	0x2000857c

0001d070 <bt_att_chan_create_pdu>:
{
   1d070:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d072:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1d074:	3201      	adds	r2, #1
   1d076:	429a      	cmp	r2, r3
{
   1d078:	460d      	mov	r5, r1
   1d07a:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d07c:	d90f      	bls.n	1d09e <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1d07e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1d082:	4b25      	ldr	r3, [pc, #148]	; (1d118 <bt_att_chan_create_pdu+0xa8>)
   1d084:	2202      	movs	r2, #2
   1d086:	9302      	str	r3, [sp, #8]
   1d088:	2300      	movs	r3, #0
   1d08a:	4924      	ldr	r1, [pc, #144]	; (1d11c <bt_att_chan_create_pdu+0xac>)
   1d08c:	4618      	mov	r0, r3
   1d08e:	e9cd 3300 	strd	r3, r3, [sp]
   1d092:	f010 ff4a 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1d096:	2400      	movs	r4, #0
}
   1d098:	4620      	mov	r0, r4
   1d09a:	b007      	add	sp, #28
   1d09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   1d09e:	4608      	mov	r0, r1
   1d0a0:	f7ff fd24 	bl	1caec <att_op_get_type>
   1d0a4:	2802      	cmp	r0, #2
   1d0a6:	d018      	beq.n	1d0da <bt_att_chan_create_pdu+0x6a>
   1d0a8:	2804      	cmp	r0, #4
   1d0aa:	d016      	beq.n	1d0da <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   1d0ac:	f04f 36ff 	mov.w	r6, #4294967295
   1d0b0:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d0b4:	2100      	movs	r1, #0
   1d0b6:	4632      	mov	r2, r6
   1d0b8:	463b      	mov	r3, r7
   1d0ba:	4608      	mov	r0, r1
   1d0bc:	f010 fe0d 	bl	2dcda <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1d0c0:	4604      	mov	r4, r0
   1d0c2:	b970      	cbnz	r0, 1d0e2 <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1d0c4:	4b16      	ldr	r3, [pc, #88]	; (1d120 <bt_att_chan_create_pdu+0xb0>)
   1d0c6:	2201      	movs	r2, #1
   1d0c8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1d0cc:	4913      	ldr	r1, [pc, #76]	; (1d11c <bt_att_chan_create_pdu+0xac>)
   1d0ce:	4603      	mov	r3, r0
   1d0d0:	9503      	str	r5, [sp, #12]
   1d0d2:	9000      	str	r0, [sp, #0]
   1d0d4:	f010 ff29 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1d0d8:	e7dd      	b.n	1d096 <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   1d0da:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1d0de:	2700      	movs	r7, #0
   1d0e0:	e7e8      	b.n	1d0b4 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   1d0e2:	4810      	ldr	r0, [pc, #64]	; (1d124 <bt_att_chan_create_pdu+0xb4>)
   1d0e4:	463b      	mov	r3, r7
   1d0e6:	4632      	mov	r2, r6
   1d0e8:	f008 fcc6 	bl	25a78 <z_impl_k_queue_get>
   1d0ec:	4603      	mov	r3, r0
	if (!data) {
   1d0ee:	b958      	cbnz	r0, 1d108 <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   1d0f0:	4a0d      	ldr	r2, [pc, #52]	; (1d128 <bt_att_chan_create_pdu+0xb8>)
   1d0f2:	9000      	str	r0, [sp, #0]
   1d0f4:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1d0f8:	4908      	ldr	r1, [pc, #32]	; (1d11c <bt_att_chan_create_pdu+0xac>)
   1d0fa:	2202      	movs	r2, #2
   1d0fc:	f010 ff15 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1d100:	4620      	mov	r0, r4
   1d102:	f003 fa4b 	bl	2059c <net_buf_unref>
		return NULL;
   1d106:	e7c6      	b.n	1d096 <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   1d108:	61a0      	str	r0, [r4, #24]
   1d10a:	2101      	movs	r1, #1
   1d10c:	f104 000c 	add.w	r0, r4, #12
   1d110:	f012 f98f 	bl	2f432 <net_buf_simple_add>
	hdr->code = op;
   1d114:	7005      	strb	r5, [r0, #0]
	return buf;
   1d116:	e7bf      	b.n	1d098 <bt_att_chan_create_pdu+0x28>
   1d118:	00037556 	.word	0x00037556
   1d11c:	00033018 	.word	0x00033018
   1d120:	0003734d 	.word	0x0003734d
   1d124:	20008e80 	.word	0x20008e80
   1d128:	0003757b 	.word	0x0003757b

0001d12c <bt_att_recv>:
{
   1d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   1d130:	8a0b      	ldrh	r3, [r1, #16]
{
   1d132:	4607      	mov	r7, r0
   1d134:	460d      	mov	r5, r1
   1d136:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1d138:	b963      	cbnz	r3, 1d154 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1d13a:	4a42      	ldr	r2, [pc, #264]	; (1d244 <bt_att_recv+0x118>)
   1d13c:	9300      	str	r3, [sp, #0]
   1d13e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d142:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   1d144:	4618      	mov	r0, r3
   1d146:	4940      	ldr	r1, [pc, #256]	; (1d248 <bt_att_recv+0x11c>)
   1d148:	f010 feef 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
}
   1d14c:	2000      	movs	r0, #0
   1d14e:	b006      	add	sp, #24
   1d150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1d154:	2101      	movs	r1, #1
   1d156:	f105 000c 	add.w	r0, r5, #12
   1d15a:	f012 f99a 	bl	2f492 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1d15e:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1d162:	4604      	mov	r4, r0
   1d164:	2b00      	cmp	r3, #0
   1d166:	d0f1      	beq.n	1d14c <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1d168:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1d16a:	7802      	ldrb	r2, [r0, #0]
   1d16c:	4e37      	ldr	r6, [pc, #220]	; (1d24c <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1d16e:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   1d172:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   1d176:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   1d17a:	4290      	cmp	r0, r2
   1d17c:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   1d180:	d111      	bne.n	1d1a6 <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   1d182:	f891 9002 	ldrb.w	r9, [r1, #2]
   1d186:	f1b9 0f01 	cmp.w	r9, #1
   1d18a:	d12b      	bne.n	1d1e4 <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1d18c:	2100      	movs	r1, #0
   1d18e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   1d192:	f010 ffc0 	bl	2e116 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1d196:	b380      	cbz	r0, 1d1fa <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   1d198:	4b2d      	ldr	r3, [pc, #180]	; (1d250 <bt_att_recv+0x124>)
   1d19a:	9302      	str	r3, [sp, #8]
   1d19c:	2300      	movs	r3, #0
   1d19e:	2202      	movs	r2, #2
   1d1a0:	e9cd 3300 	strd	r3, r3, [sp]
   1d1a4:	e7ce      	b.n	1d144 <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1d1a6:	3301      	adds	r3, #1
   1d1a8:	2b0e      	cmp	r3, #14
   1d1aa:	d1e2      	bne.n	1d172 <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1d1ac:	2500      	movs	r5, #0
   1d1ae:	4b29      	ldr	r3, [pc, #164]	; (1d254 <bt_att_recv+0x128>)
   1d1b0:	4628      	mov	r0, r5
   1d1b2:	4925      	ldr	r1, [pc, #148]	; (1d248 <bt_att_recv+0x11c>)
   1d1b4:	9203      	str	r2, [sp, #12]
   1d1b6:	9302      	str	r3, [sp, #8]
   1d1b8:	2202      	movs	r2, #2
   1d1ba:	462b      	mov	r3, r5
   1d1bc:	e9cd 5500 	strd	r5, r5, [sp]
   1d1c0:	f010 feb3 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1d1c4:	7821      	ldrb	r1, [r4, #0]
   1d1c6:	4608      	mov	r0, r1
   1d1c8:	f7ff fc90 	bl	1caec <att_op_get_type>
   1d1cc:	2800      	cmp	r0, #0
   1d1ce:	d0bd      	beq.n	1d14c <bt_att_recv+0x20>
   1d1d0:	2805      	cmp	r0, #5
   1d1d2:	d0bb      	beq.n	1d14c <bt_att_recv+0x20>
	if (!req) {
   1d1d4:	2900      	cmp	r1, #0
   1d1d6:	d0b9      	beq.n	1d14c <bt_att_recv+0x20>
   1d1d8:	2306      	movs	r3, #6
   1d1da:	2200      	movs	r2, #0
   1d1dc:	4640      	mov	r0, r8
   1d1de:	f011 f908 	bl	2e3f2 <send_err_rsp.part.0>
   1d1e2:	e7b3      	b.n	1d14c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1d1e4:	f1b9 0f05 	cmp.w	r9, #5
   1d1e8:	d107      	bne.n	1d1fa <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   1d1ea:	2101      	movs	r1, #1
   1d1ec:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   1d1f0:	f010 ff91 	bl	2e116 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1d1f4:	b108      	cbz	r0, 1d1fa <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   1d1f6:	4b18      	ldr	r3, [pc, #96]	; (1d258 <bt_att_recv+0x12c>)
   1d1f8:	e7cf      	b.n	1d19a <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   1d1fa:	4456      	add	r6, sl
   1d1fc:	8a2b      	ldrh	r3, [r5, #16]
   1d1fe:	7872      	ldrb	r2, [r6, #1]
   1d200:	429a      	cmp	r2, r3
   1d202:	d911      	bls.n	1d228 <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1d204:	7822      	ldrb	r2, [r4, #0]
   1d206:	4910      	ldr	r1, [pc, #64]	; (1d248 <bt_att_recv+0x11c>)
   1d208:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1d20c:	4b13      	ldr	r3, [pc, #76]	; (1d25c <bt_att_recv+0x130>)
   1d20e:	2201      	movs	r2, #1
   1d210:	9302      	str	r3, [sp, #8]
   1d212:	2300      	movs	r3, #0
   1d214:	4618      	mov	r0, r3
   1d216:	e9cd 3300 	strd	r3, r3, [sp]
   1d21a:	f010 fe86 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1d21e:	f1b9 0f01 	cmp.w	r9, #1
   1d222:	d193      	bne.n	1d14c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1d224:	2304      	movs	r3, #4
   1d226:	e009      	b.n	1d23c <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   1d228:	6873      	ldr	r3, [r6, #4]
   1d22a:	4629      	mov	r1, r5
   1d22c:	4640      	mov	r0, r8
   1d22e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1d230:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1d234:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1d236:	d189      	bne.n	1d14c <bt_att_recv+0x20>
   1d238:	2800      	cmp	r0, #0
   1d23a:	d087      	beq.n	1d14c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1d23c:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1d23e:	2900      	cmp	r1, #0
   1d240:	d084      	beq.n	1d14c <bt_att_recv+0x20>
   1d242:	e7ca      	b.n	1d1da <bt_att_recv+0xae>
   1d244:	0003759a 	.word	0x0003759a
   1d248:	00033018 	.word	0x00033018
   1d24c:	00033d18 	.word	0x00033d18
   1d250:	000375cf 	.word	0x000375cf
   1d254:	000375b5 	.word	0x000375b5
   1d258:	000375eb 	.word	0x000375eb
   1d25c:	0003760a 	.word	0x0003760a

0001d260 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d260:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d262:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d264:	6803      	ldr	r3, [r0, #0]
   1d266:	460d      	mov	r5, r1
   1d268:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d26a:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d26c:	bf18      	it	ne
   1d26e:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d270:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d272:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d274:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d276:	f011 fc8c 	bl	2eb92 <bt_gatt_change_aware>
   1d27a:	b948      	cbnz	r0, 1d290 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d27c:	2105      	movs	r1, #5
   1d27e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d282:	f010 ff48 	bl	2e116 <atomic_test_and_set_bit>
   1d286:	2800      	cmp	r0, #0
   1d288:	d048      	beq.n	1d31c <att_write_rsp.constprop.0+0xbc>
			return 0;
   1d28a:	2000      	movs	r0, #0
}
   1d28c:	b007      	add	sp, #28
   1d28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1d290:	2e00      	cmp	r6, #0
   1d292:	d045      	beq.n	1d320 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1d294:	2218      	movs	r2, #24
   1d296:	2100      	movs	r1, #0
   1d298:	4668      	mov	r0, sp
   1d29a:	f014 fb02 	bl	318a2 <memset>
	if (rsp) {
   1d29e:	bb67      	cbnz	r7, 1d2fa <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1d2a0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d2a2:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1d2a4:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d2a6:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   1d2a8:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1d2aa:	2300      	movs	r3, #0
   1d2ac:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1d2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d2b2:	4a1c      	ldr	r2, [pc, #112]	; (1d324 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   1d2b4:	9303      	str	r3, [sp, #12]
	data.len = len;
   1d2b6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   1d2ba:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   1d2be:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d2c2:	2301      	movs	r3, #1
   1d2c4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d2c8:	466b      	mov	r3, sp
   1d2ca:	f010 fd90 	bl	2ddee <bt_gatt_foreach_attr>
	if (data.err) {
   1d2ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d2d2:	b1e3      	cbz	r3, 1d30e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1d2d4:	2f00      	cmp	r7, #0
   1d2d6:	d0d8      	beq.n	1d28a <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d2d8:	9b01      	ldr	r3, [sp, #4]
   1d2da:	6998      	ldr	r0, [r3, #24]
   1d2dc:	f7ff fc4c 	bl	1cb78 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d2e0:	9801      	ldr	r0, [sp, #4]
   1d2e2:	f003 f95b 	bl	2059c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1d2e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1d2ea:	2d00      	cmp	r5, #0
   1d2ec:	d0cd      	beq.n	1d28a <att_write_rsp.constprop.0+0x2a>
   1d2ee:	4632      	mov	r2, r6
   1d2f0:	4629      	mov	r1, r5
   1d2f2:	4620      	mov	r0, r4
   1d2f4:	f011 f87d 	bl	2e3f2 <send_err_rsp.part.0>
   1d2f8:	e7c7      	b.n	1d28a <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1d2fa:	2200      	movs	r2, #0
   1d2fc:	4639      	mov	r1, r7
   1d2fe:	4620      	mov	r0, r4
   1d300:	f7ff feb6 	bl	1d070 <bt_att_chan_create_pdu>
   1d304:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1d306:	2800      	cmp	r0, #0
   1d308:	d1ca      	bne.n	1d2a0 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1d30a:	200e      	movs	r0, #14
   1d30c:	e7be      	b.n	1d28c <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1d30e:	9901      	ldr	r1, [sp, #4]
   1d310:	2900      	cmp	r1, #0
   1d312:	d0ba      	beq.n	1d28a <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1d314:	4620      	mov	r0, r4
   1d316:	f010 fe4a 	bl	2dfae <bt_att_chan_send_rsp>
   1d31a:	e7b6      	b.n	1d28a <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d31c:	2012      	movs	r0, #18
   1d31e:	e7b5      	b.n	1d28c <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d320:	2001      	movs	r0, #1
   1d322:	e7b3      	b.n	1d28c <att_write_rsp.constprop.0+0x2c>
   1d324:	0002dd8d 	.word	0x0002dd8d

0001d328 <bt_att_create_pdu>:
{
   1d328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d32a:	460e      	mov	r6, r1
   1d32c:	4615      	mov	r5, r2
	att = att_get(conn);
   1d32e:	f7ff fd3b 	bl	1cda8 <att_get>
	if (!att) {
   1d332:	b1c0      	cbz	r0, 1d366 <bt_att_create_pdu+0x3e>
	return list->head;
   1d334:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d336:	4618      	mov	r0, r3
   1d338:	b11b      	cbz	r3, 1d342 <bt_att_create_pdu+0x1a>
	return node->next;
   1d33a:	f850 39e0 	ldr.w	r3, [r0], #-224
   1d33e:	b103      	cbz	r3, 1d342 <bt_att_create_pdu+0x1a>
   1d340:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d342:	1c6c      	adds	r4, r5, #1
   1d344:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d346:	b118      	cbz	r0, 1d350 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d348:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1d34a:	42a1      	cmp	r1, r4
   1d34c:	d216      	bcs.n	1d37c <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d34e:	b96b      	cbnz	r3, 1d36c <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1d350:	4b0f      	ldr	r3, [pc, #60]	; (1d390 <bt_att_create_pdu+0x68>)
   1d352:	2202      	movs	r2, #2
   1d354:	9302      	str	r3, [sp, #8]
   1d356:	2300      	movs	r3, #0
   1d358:	490e      	ldr	r1, [pc, #56]	; (1d394 <bt_att_create_pdu+0x6c>)
   1d35a:	4618      	mov	r0, r3
   1d35c:	e9cd 3300 	strd	r3, r3, [sp]
   1d360:	9403      	str	r4, [sp, #12]
   1d362:	f010 fde2 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
}
   1d366:	2000      	movs	r0, #0
   1d368:	b004      	add	sp, #16
   1d36a:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d36c:	4618      	mov	r0, r3
   1d36e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1d372:	b153      	cbz	r3, 1d38a <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d374:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d376:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d378:	428a      	cmp	r2, r1
   1d37a:	d8f7      	bhi.n	1d36c <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   1d37c:	462a      	mov	r2, r5
   1d37e:	4631      	mov	r1, r6
}
   1d380:	b004      	add	sp, #16
   1d382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1d386:	f7ff be73 	b.w	1d070 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d38a:	4614      	mov	r4, r2
   1d38c:	e7dc      	b.n	1d348 <bt_att_create_pdu+0x20>
   1d38e:	bf00      	nop
   1d390:	00037629 	.word	0x00037629
   1d394:	00033018 	.word	0x00033018

0001d398 <att_read_group_req>:
{
   1d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d39c:	8a0e      	ldrh	r6, [r1, #16]
{
   1d39e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d3a0:	3e04      	subs	r6, #4
   1d3a2:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1d3a4:	2e02      	cmp	r6, #2
{
   1d3a6:	4608      	mov	r0, r1
   1d3a8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1d3aa:	d001      	beq.n	1d3b0 <att_read_group_req+0x18>
   1d3ac:	2e10      	cmp	r6, #16
   1d3ae:	d16a      	bne.n	1d486 <att_read_group_req+0xee>
   1d3b0:	2104      	movs	r1, #4
   1d3b2:	300c      	adds	r0, #12
   1d3b4:	f012 f86d 	bl	2f492 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d3b8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d3bc:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d3be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d3c0:	1d01      	adds	r1, r0, #4
   1d3c2:	4632      	mov	r2, r6
   1d3c4:	4640      	mov	r0, r8
   1d3c6:	f00f ff66 	bl	2d296 <bt_uuid_create>
   1d3ca:	2800      	cmp	r0, #0
   1d3cc:	d05d      	beq.n	1d48a <att_read_group_req+0xf2>
	if (!start || !end) {
   1d3ce:	2d00      	cmp	r5, #0
   1d3d0:	d03a      	beq.n	1d448 <att_read_group_req+0xb0>
   1d3d2:	2600      	movs	r6, #0
   1d3d4:	2f00      	cmp	r7, #0
   1d3d6:	d036      	beq.n	1d446 <att_read_group_req+0xae>
	if (start > end) {
   1d3d8:	42bd      	cmp	r5, r7
   1d3da:	d835      	bhi.n	1d448 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1d3dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d3e0:	4640      	mov	r0, r8
   1d3e2:	a901      	add	r1, sp, #4
   1d3e4:	f88d 6004 	strb.w	r6, [sp, #4]
   1d3e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d3ec:	f00f ff25 	bl	2d23a <bt_uuid_cmp>
   1d3f0:	bb70      	cbnz	r0, 1d450 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1d3f2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d3f4:	2214      	movs	r2, #20
   1d3f6:	2100      	movs	r1, #0
   1d3f8:	a807      	add	r0, sp, #28
   1d3fa:	f014 fa52 	bl	318a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1d3fe:	2201      	movs	r2, #1
   1d400:	2111      	movs	r1, #17
   1d402:	4630      	mov	r0, r6
   1d404:	f7ff ff90 	bl	1d328 <bt_att_create_pdu>
   1d408:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1d40a:	2800      	cmp	r0, #0
   1d40c:	d03d      	beq.n	1d48a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1d40e:	2101      	movs	r1, #1
   1d410:	300c      	adds	r0, #12
	data.uuid = uuid;
   1d412:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1d416:	f012 f80c 	bl	2f432 <net_buf_simple_add>
	data.rsp->len = 0U;
   1d41a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d41c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d41e:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1d420:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d422:	4a1b      	ldr	r2, [pc, #108]	; (1d490 <att_read_group_req+0xf8>)
	data.group = NULL;
   1d424:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d426:	4628      	mov	r0, r5
   1d428:	ab07      	add	r3, sp, #28
   1d42a:	f010 fce0 	bl	2ddee <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1d42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d430:	781b      	ldrb	r3, [r3, #0]
   1d432:	bb1b      	cbnz	r3, 1d47c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d434:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d436:	6998      	ldr	r0, [r3, #24]
   1d438:	f7ff fb9e 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d43c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d43e:	f003 f8ad 	bl	2059c <net_buf_unref>
	if (!req) {
   1d442:	230a      	movs	r3, #10
   1d444:	e001      	b.n	1d44a <att_read_group_req+0xb2>
			*err = 0U;
   1d446:	463d      	mov	r5, r7
	if (!req) {
   1d448:	2301      	movs	r3, #1
   1d44a:	462a      	mov	r2, r5
   1d44c:	2110      	movs	r1, #16
   1d44e:	e00e      	b.n	1d46e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1d450:	f642 0301 	movw	r3, #10241	; 0x2801
   1d454:	4640      	mov	r0, r8
   1d456:	a907      	add	r1, sp, #28
   1d458:	f88d 601c 	strb.w	r6, [sp, #28]
   1d45c:	f8ad 301e 	strh.w	r3, [sp, #30]
   1d460:	f00f feeb 	bl	2d23a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1d464:	2800      	cmp	r0, #0
   1d466:	d0c4      	beq.n	1d3f2 <att_read_group_req+0x5a>
	if (!req) {
   1d468:	2310      	movs	r3, #16
   1d46a:	462a      	mov	r2, r5
   1d46c:	4619      	mov	r1, r3
   1d46e:	4620      	mov	r0, r4
   1d470:	f010 ffbf 	bl	2e3f2 <send_err_rsp.part.0>
		return 0;
   1d474:	2000      	movs	r0, #0
}
   1d476:	b00c      	add	sp, #48	; 0x30
   1d478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1d47c:	4620      	mov	r0, r4
   1d47e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d480:	f010 fd95 	bl	2dfae <bt_att_chan_send_rsp>
	return 0;
   1d484:	e7f6      	b.n	1d474 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1d486:	2004      	movs	r0, #4
   1d488:	e7f5      	b.n	1d476 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1d48a:	200e      	movs	r0, #14
   1d48c:	e7f3      	b.n	1d476 <att_read_group_req+0xde>
   1d48e:	bf00      	nop
   1d490:	0001ce35 	.word	0x0001ce35

0001d494 <att_read_mult_vl_req>:
{
   1d494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d498:	6846      	ldr	r6, [r0, #4]
{
   1d49a:	4604      	mov	r4, r0
   1d49c:	460d      	mov	r5, r1
   1d49e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1d4a0:	2101      	movs	r1, #1
   1d4a2:	4630      	mov	r0, r6
   1d4a4:	f011 fb75 	bl	2eb92 <bt_gatt_change_aware>
   1d4a8:	b950      	cbnz	r0, 1d4c0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d4aa:	2105      	movs	r1, #5
   1d4ac:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d4b0:	f010 fe31 	bl	2e116 <atomic_test_and_set_bit>
   1d4b4:	2800      	cmp	r0, #0
   1d4b6:	d13b      	bne.n	1d530 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d4b8:	2012      	movs	r0, #18
}
   1d4ba:	b005      	add	sp, #20
   1d4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1d4c0:	2210      	movs	r2, #16
   1d4c2:	2100      	movs	r1, #0
   1d4c4:	4668      	mov	r0, sp
   1d4c6:	f014 f9ec 	bl	318a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1d4ca:	2200      	movs	r2, #0
   1d4cc:	2121      	movs	r1, #33	; 0x21
   1d4ce:	4630      	mov	r0, r6
   1d4d0:	f7ff ff2a 	bl	1d328 <bt_att_create_pdu>
   1d4d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d4d6:	b368      	cbz	r0, 1d534 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d4d8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d4dc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d538 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1d4e0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1d4e2:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1d4e6:	8a2b      	ldrh	r3, [r5, #16]
   1d4e8:	2b01      	cmp	r3, #1
   1d4ea:	d804      	bhi.n	1d4f6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1d4ec:	4620      	mov	r0, r4
   1d4ee:	9902      	ldr	r1, [sp, #8]
   1d4f0:	f010 fd5d 	bl	2dfae <bt_att_chan_send_rsp>
	return 0;
   1d4f4:	e01c      	b.n	1d530 <att_read_mult_vl_req+0x9c>
   1d4f6:	4638      	mov	r0, r7
   1d4f8:	f011 ffd3 	bl	2f4a2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d4fc:	466b      	mov	r3, sp
   1d4fe:	464a      	mov	r2, r9
   1d500:	4601      	mov	r1, r0
   1d502:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d504:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d508:	f010 fc71 	bl	2ddee <bt_gatt_foreach_attr>
		if (data.err) {
   1d50c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d510:	2b00      	cmp	r3, #0
   1d512:	d0e8      	beq.n	1d4e6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d514:	9b02      	ldr	r3, [sp, #8]
   1d516:	6998      	ldr	r0, [r3, #24]
   1d518:	f7ff fb2e 	bl	1cb78 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d51c:	9802      	ldr	r0, [sp, #8]
   1d51e:	f003 f83d 	bl	2059c <net_buf_unref>
	if (!req) {
   1d522:	4632      	mov	r2, r6
   1d524:	2120      	movs	r1, #32
   1d526:	4620      	mov	r0, r4
   1d528:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d52c:	f010 ff61 	bl	2e3f2 <send_err_rsp.part.0>
			return 0;
   1d530:	2000      	movs	r0, #0
   1d532:	e7c2      	b.n	1d4ba <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1d534:	200e      	movs	r0, #14
   1d536:	e7c0      	b.n	1d4ba <att_read_mult_vl_req+0x26>
   1d538:	0002e17f 	.word	0x0002e17f

0001d53c <att_read_mult_req>:
{
   1d53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d540:	6846      	ldr	r6, [r0, #4]
{
   1d542:	4604      	mov	r4, r0
   1d544:	460d      	mov	r5, r1
   1d546:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1d548:	2101      	movs	r1, #1
   1d54a:	4630      	mov	r0, r6
   1d54c:	f011 fb21 	bl	2eb92 <bt_gatt_change_aware>
   1d550:	b950      	cbnz	r0, 1d568 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d552:	2105      	movs	r1, #5
   1d554:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d558:	f010 fddd 	bl	2e116 <atomic_test_and_set_bit>
   1d55c:	2800      	cmp	r0, #0
   1d55e:	d13b      	bne.n	1d5d8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d560:	2012      	movs	r0, #18
}
   1d562:	b005      	add	sp, #20
   1d564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1d568:	2210      	movs	r2, #16
   1d56a:	2100      	movs	r1, #0
   1d56c:	4668      	mov	r0, sp
   1d56e:	f014 f998 	bl	318a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1d572:	2200      	movs	r2, #0
   1d574:	210f      	movs	r1, #15
   1d576:	4630      	mov	r0, r6
   1d578:	f7ff fed6 	bl	1d328 <bt_att_create_pdu>
   1d57c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d57e:	b368      	cbz	r0, 1d5dc <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d580:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d584:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d5e0 <att_read_mult_req+0xa4>
	data.chan = chan;
   1d588:	9400      	str	r4, [sp, #0]
   1d58a:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1d58e:	8a2b      	ldrh	r3, [r5, #16]
   1d590:	2b01      	cmp	r3, #1
   1d592:	d804      	bhi.n	1d59e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1d594:	4620      	mov	r0, r4
   1d596:	9902      	ldr	r1, [sp, #8]
   1d598:	f010 fd09 	bl	2dfae <bt_att_chan_send_rsp>
	return 0;
   1d59c:	e01c      	b.n	1d5d8 <att_read_mult_req+0x9c>
   1d59e:	4638      	mov	r0, r7
   1d5a0:	f011 ff7f 	bl	2f4a2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d5a4:	466b      	mov	r3, sp
   1d5a6:	464a      	mov	r2, r9
   1d5a8:	4601      	mov	r1, r0
   1d5aa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d5ac:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d5b0:	f010 fc1d 	bl	2ddee <bt_gatt_foreach_attr>
		if (data.err) {
   1d5b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d5b8:	2b00      	cmp	r3, #0
   1d5ba:	d0e8      	beq.n	1d58e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d5bc:	9b02      	ldr	r3, [sp, #8]
   1d5be:	6998      	ldr	r0, [r3, #24]
   1d5c0:	f7ff fada 	bl	1cb78 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d5c4:	9802      	ldr	r0, [sp, #8]
   1d5c6:	f002 ffe9 	bl	2059c <net_buf_unref>
	if (!req) {
   1d5ca:	4632      	mov	r2, r6
   1d5cc:	210e      	movs	r1, #14
   1d5ce:	4620      	mov	r0, r4
   1d5d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d5d4:	f010 ff0d 	bl	2e3f2 <send_err_rsp.part.0>
			return 0;
   1d5d8:	2000      	movs	r0, #0
   1d5da:	e7c2      	b.n	1d562 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1d5dc:	200e      	movs	r0, #14
   1d5de:	e7c0      	b.n	1d562 <att_read_mult_req+0x26>
   1d5e0:	0002e139 	.word	0x0002e139

0001d5e4 <att_read_rsp>:
{
   1d5e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d5e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1d5ec:	4604      	mov	r4, r0
   1d5ee:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1d5f0:	4640      	mov	r0, r8
   1d5f2:	2101      	movs	r1, #1
{
   1d5f4:	4617      	mov	r7, r2
   1d5f6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1d5f8:	f011 facb 	bl	2eb92 <bt_gatt_change_aware>
   1d5fc:	b948      	cbnz	r0, 1d612 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d5fe:	2105      	movs	r1, #5
   1d600:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d604:	f010 fd87 	bl	2e116 <atomic_test_and_set_bit>
   1d608:	bb78      	cbnz	r0, 1d66a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d60a:	2012      	movs	r0, #18
}
   1d60c:	b004      	add	sp, #16
   1d60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1d612:	b38d      	cbz	r5, 1d678 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1d614:	2210      	movs	r2, #16
   1d616:	2100      	movs	r1, #0
   1d618:	4668      	mov	r0, sp
   1d61a:	f014 f942 	bl	318a2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1d61e:	2200      	movs	r2, #0
   1d620:	4639      	mov	r1, r7
   1d622:	4640      	mov	r0, r8
   1d624:	f7ff fe80 	bl	1d328 <bt_att_create_pdu>
   1d628:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d62a:	b338      	cbz	r0, 1d67c <att_read_rsp+0x98>
	data.offset = offset;
   1d62c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d630:	4629      	mov	r1, r5
	data.offset = offset;
   1d632:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d636:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d638:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d63a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d63e:	4a10      	ldr	r2, [pc, #64]	; (1d680 <att_read_rsp+0x9c>)
   1d640:	466b      	mov	r3, sp
	data.chan = chan;
   1d642:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d644:	f010 fbd3 	bl	2ddee <bt_gatt_foreach_attr>
	if (data.err) {
   1d648:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d64c:	b17b      	cbz	r3, 1d66e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d64e:	9b02      	ldr	r3, [sp, #8]
   1d650:	6998      	ldr	r0, [r3, #24]
   1d652:	f7ff fa91 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d656:	9802      	ldr	r0, [sp, #8]
   1d658:	f002 ffa0 	bl	2059c <net_buf_unref>
	if (!req) {
   1d65c:	462a      	mov	r2, r5
   1d65e:	4631      	mov	r1, r6
   1d660:	4620      	mov	r0, r4
   1d662:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d666:	f010 fec4 	bl	2e3f2 <send_err_rsp.part.0>
			return 0;
   1d66a:	2000      	movs	r0, #0
   1d66c:	e7ce      	b.n	1d60c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1d66e:	4620      	mov	r0, r4
   1d670:	9902      	ldr	r1, [sp, #8]
   1d672:	f010 fc9c 	bl	2dfae <bt_att_chan_send_rsp>
	return 0;
   1d676:	e7f8      	b.n	1d66a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d678:	2001      	movs	r0, #1
   1d67a:	e7c7      	b.n	1d60c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1d67c:	200e      	movs	r0, #14
   1d67e:	e7c5      	b.n	1d60c <att_read_rsp+0x28>
   1d680:	0002e139 	.word	0x0002e139

0001d684 <att_read_type_req>:
{
   1d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d688:	8a0d      	ldrh	r5, [r1, #16]
{
   1d68a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d68c:	3d04      	subs	r5, #4
   1d68e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1d690:	2d02      	cmp	r5, #2
{
   1d692:	4608      	mov	r0, r1
   1d694:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1d696:	d001      	beq.n	1d69c <att_read_type_req+0x18>
   1d698:	2d10      	cmp	r5, #16
   1d69a:	d150      	bne.n	1d73e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1d69c:	2104      	movs	r1, #4
   1d69e:	300c      	adds	r0, #12
   1d6a0:	f011 fef7 	bl	2f492 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d6a4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d6a8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d6aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d6ac:	1d01      	adds	r1, r0, #4
   1d6ae:	462a      	mov	r2, r5
   1d6b0:	4640      	mov	r0, r8
   1d6b2:	f00f fdf0 	bl	2d296 <bt_uuid_create>
   1d6b6:	b188      	cbz	r0, 1d6dc <att_read_type_req+0x58>
	if (!start || !end) {
   1d6b8:	b19e      	cbz	r6, 1d6e2 <att_read_type_req+0x5e>
   1d6ba:	b18f      	cbz	r7, 1d6e0 <att_read_type_req+0x5c>
	if (start > end) {
   1d6bc:	42be      	cmp	r6, r7
   1d6be:	d810      	bhi.n	1d6e2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1d6c0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1d6c2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d6c4:	2100      	movs	r1, #0
   1d6c6:	eb0d 0002 	add.w	r0, sp, r2
   1d6ca:	f014 f8ea 	bl	318a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1d6ce:	2201      	movs	r2, #1
   1d6d0:	2109      	movs	r1, #9
   1d6d2:	4628      	mov	r0, r5
   1d6d4:	f7ff fe28 	bl	1d328 <bt_att_create_pdu>
   1d6d8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1d6da:	b960      	cbnz	r0, 1d6f6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1d6dc:	200e      	movs	r0, #14
   1d6de:	e007      	b.n	1d6f0 <att_read_type_req+0x6c>
			*err = 0U;
   1d6e0:	463e      	mov	r6, r7
	if (!req) {
   1d6e2:	2301      	movs	r3, #1
   1d6e4:	4632      	mov	r2, r6
   1d6e6:	2108      	movs	r1, #8
   1d6e8:	4620      	mov	r0, r4
   1d6ea:	f010 fe82 	bl	2e3f2 <send_err_rsp.part.0>
		return 0;
   1d6ee:	2000      	movs	r0, #0
}
   1d6f0:	b00c      	add	sp, #48	; 0x30
   1d6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1d6f6:	2101      	movs	r1, #1
   1d6f8:	300c      	adds	r0, #12
	data.uuid = uuid;
   1d6fa:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1d6fe:	f011 fe98 	bl	2f432 <net_buf_simple_add>
	data.rsp->len = 0U;
   1d702:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d704:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1d706:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d708:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1d70a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d70c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1d710:	4630      	mov	r0, r6
   1d712:	ab06      	add	r3, sp, #24
   1d714:	4a0b      	ldr	r2, [pc, #44]	; (1d744 <att_read_type_req+0xc0>)
   1d716:	f010 fb6a 	bl	2ddee <bt_gatt_foreach_attr>
	if (data.err) {
   1d71a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1d71e:	b14b      	cbz	r3, 1d734 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d720:	9b08      	ldr	r3, [sp, #32]
   1d722:	6998      	ldr	r0, [r3, #24]
   1d724:	f7ff fa28 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d728:	9808      	ldr	r0, [sp, #32]
   1d72a:	f002 ff37 	bl	2059c <net_buf_unref>
	if (!req) {
   1d72e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1d732:	e7d7      	b.n	1d6e4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1d734:	4620      	mov	r0, r4
   1d736:	9908      	ldr	r1, [sp, #32]
   1d738:	f010 fc39 	bl	2dfae <bt_att_chan_send_rsp>
	return 0;
   1d73c:	e7d7      	b.n	1d6ee <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1d73e:	2004      	movs	r0, #4
   1d740:	e7d6      	b.n	1d6f0 <att_read_type_req+0x6c>
   1d742:	bf00      	nop
   1d744:	0001cee1 	.word	0x0001cee1

0001d748 <att_find_type_req>:
{
   1d748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d74c:	460f      	mov	r7, r1
   1d74e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1d750:	2106      	movs	r1, #6
   1d752:	b086      	sub	sp, #24
   1d754:	f107 000c 	add.w	r0, r7, #12
   1d758:	f011 fe9b 	bl	2f492 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d75c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d75e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1d762:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1d764:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1d768:	b1c5      	cbz	r5, 1d79c <att_find_type_req+0x54>
   1d76a:	2300      	movs	r3, #0
   1d76c:	f1b8 0f00 	cmp.w	r8, #0
   1d770:	d013      	beq.n	1d79a <att_find_type_req+0x52>
	if (start > end) {
   1d772:	4545      	cmp	r5, r8
   1d774:	d812      	bhi.n	1d79c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1d776:	f88d 3000 	strb.w	r3, [sp]
   1d77a:	f88d 3004 	strb.w	r3, [sp, #4]
   1d77e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d782:	4668      	mov	r0, sp
   1d784:	a901      	add	r1, sp, #4
   1d786:	f8ad 2002 	strh.w	r2, [sp, #2]
   1d78a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d78e:	f00f fd54 	bl	2d23a <bt_uuid_cmp>
   1d792:	4606      	mov	r6, r0
   1d794:	b160      	cbz	r0, 1d7b0 <att_find_type_req+0x68>
	if (!req) {
   1d796:	230a      	movs	r3, #10
   1d798:	e001      	b.n	1d79e <att_find_type_req+0x56>
			*err = 0U;
   1d79a:	4645      	mov	r5, r8
	if (!req) {
   1d79c:	2301      	movs	r3, #1
   1d79e:	462a      	mov	r2, r5
   1d7a0:	2106      	movs	r1, #6
   1d7a2:	4620      	mov	r0, r4
   1d7a4:	f010 fe25 	bl	2e3f2 <send_err_rsp.part.0>
		return 0;
   1d7a8:	2000      	movs	r0, #0
}
   1d7aa:	b006      	add	sp, #24
   1d7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d7b0:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d7b4:	4601      	mov	r1, r0
   1d7b6:	2214      	movs	r2, #20
   1d7b8:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1d7ba:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1d7bc:	f014 f871 	bl	318a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1d7c0:	4632      	mov	r2, r6
   1d7c2:	2107      	movs	r1, #7
   1d7c4:	4650      	mov	r0, sl
   1d7c6:	f7ff fdaf 	bl	1d328 <bt_att_create_pdu>
   1d7ca:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d7cc:	b1f8      	cbz	r0, 1d80e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d7ce:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d7d0:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d7d2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d7d6:	4628      	mov	r0, r5
   1d7d8:	ab01      	add	r3, sp, #4
   1d7da:	4a0e      	ldr	r2, [pc, #56]	; (1d814 <att_find_type_req+0xcc>)
	data.value = value;
   1d7dc:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   1d7e0:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   1d7e2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d7e6:	f010 fb02 	bl	2ddee <bt_gatt_foreach_attr>
	if (data.err) {
   1d7ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d7ee:	b14b      	cbz	r3, 1d804 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d7f0:	9b02      	ldr	r3, [sp, #8]
   1d7f2:	6998      	ldr	r0, [r3, #24]
   1d7f4:	f7ff f9c0 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d7f8:	9802      	ldr	r0, [sp, #8]
   1d7fa:	f002 fecf 	bl	2059c <net_buf_unref>
	if (!req) {
   1d7fe:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d802:	e7cc      	b.n	1d79e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1d804:	4620      	mov	r0, r4
   1d806:	9902      	ldr	r1, [sp, #8]
   1d808:	f010 fbd1 	bl	2dfae <bt_att_chan_send_rsp>
	return 0;
   1d80c:	e7cc      	b.n	1d7a8 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1d80e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1d810:	e7cb      	b.n	1d7aa <att_find_type_req+0x62>
   1d812:	bf00      	nop
   1d814:	0001cb95 	.word	0x0001cb95

0001d818 <att_find_info_req>:
{
   1d818:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1d81a:	68cb      	ldr	r3, [r1, #12]
{
   1d81c:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d81e:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d820:	885e      	ldrh	r6, [r3, #2]
{
   1d822:	b085      	sub	sp, #20
	if (!start || !end) {
   1d824:	b195      	cbz	r5, 1d84c <att_find_info_req+0x34>
   1d826:	b186      	cbz	r6, 1d84a <att_find_info_req+0x32>
	if (start > end) {
   1d828:	42ae      	cmp	r6, r5
   1d82a:	d30f      	bcc.n	1d84c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1d82c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d82e:	2210      	movs	r2, #16
   1d830:	2100      	movs	r1, #0
   1d832:	4668      	mov	r0, sp
   1d834:	f014 f835 	bl	318a2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1d838:	2200      	movs	r2, #0
   1d83a:	2105      	movs	r1, #5
   1d83c:	4638      	mov	r0, r7
   1d83e:	f7ff fd73 	bl	1d328 <bt_att_create_pdu>
   1d842:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1d844:	b958      	cbnz	r0, 1d85e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1d846:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1d848:	e007      	b.n	1d85a <att_find_info_req+0x42>
			*err = 0U;
   1d84a:	4635      	mov	r5, r6
	if (!req) {
   1d84c:	2301      	movs	r3, #1
   1d84e:	462a      	mov	r2, r5
   1d850:	2104      	movs	r1, #4
   1d852:	4620      	mov	r0, r4
   1d854:	f010 fdcd 	bl	2e3f2 <send_err_rsp.part.0>
		return 0;
   1d858:	2000      	movs	r0, #0
}
   1d85a:	b005      	add	sp, #20
   1d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1d85e:	466b      	mov	r3, sp
   1d860:	4631      	mov	r1, r6
   1d862:	4628      	mov	r0, r5
   1d864:	4a09      	ldr	r2, [pc, #36]	; (1d88c <att_find_info_req+0x74>)
	data.chan = chan;
   1d866:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1d868:	f010 fac1 	bl	2ddee <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1d86c:	9b02      	ldr	r3, [sp, #8]
   1d86e:	b943      	cbnz	r3, 1d882 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d870:	9b01      	ldr	r3, [sp, #4]
   1d872:	6998      	ldr	r0, [r3, #24]
   1d874:	f7ff f980 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d878:	9801      	ldr	r0, [sp, #4]
   1d87a:	f002 fe8f 	bl	2059c <net_buf_unref>
	if (!req) {
   1d87e:	230a      	movs	r3, #10
   1d880:	e7e5      	b.n	1d84e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1d882:	4620      	mov	r0, r4
   1d884:	9901      	ldr	r1, [sp, #4]
   1d886:	f010 fb92 	bl	2dfae <bt_att_chan_send_rsp>
	return 0;
   1d88a:	e7e5      	b.n	1d858 <att_find_info_req+0x40>
   1d88c:	0002de8b 	.word	0x0002de8b

0001d890 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1d890:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1d892:	4c09      	ldr	r4, [pc, #36]	; (1d8b8 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1d894:	4d09      	ldr	r5, [pc, #36]	; (1d8bc <bt_att_init+0x2c>)
   1d896:	4620      	mov	r0, r4
   1d898:	f013 fb59 	bl	30f4e <z_impl_k_queue_init>
   1d89c:	4629      	mov	r1, r5
   1d89e:	4620      	mov	r0, r4
   1d8a0:	f013 fb61 	bl	30f66 <k_queue_append>
   1d8a4:	4620      	mov	r0, r4
   1d8a6:	f105 0114 	add.w	r1, r5, #20
   1d8aa:	f013 fb5c 	bl	30f66 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1d8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1d8b2:	f000 bb0b 	b.w	1decc <bt_gatt_init>
   1d8b6:	bf00      	nop
   1d8b8:	20008e80 	.word	0x20008e80
   1d8bc:	20030a74 	.word	0x20030a74

0001d8c0 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   1d8c0:	2300      	movs	r3, #0
{
   1d8c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d8c4:	4605      	mov	r5, r0
   1d8c6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1d8c8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1d8ca:	f008 fe47 	bl	2655c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1d8ce:	4b0c      	ldr	r3, [pc, #48]	; (1d900 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1d8d0:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   1d8d2:	681b      	ldr	r3, [r3, #0]
   1d8d4:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   1d8d6:	bf04      	itt	eq
   1d8d8:	2500      	moveq	r5, #0
   1d8da:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1d8dc:	462a      	mov	r2, r5
   1d8de:	4623      	mov	r3, r4
   1d8e0:	4808      	ldr	r0, [pc, #32]	; (1d904 <bt_att_req_alloc+0x44>)
   1d8e2:	f007 fef1 	bl	256c8 <k_mem_slab_alloc>
   1d8e6:	4601      	mov	r1, r0
   1d8e8:	b940      	cbnz	r0, 1d8fc <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1d8ea:	9b01      	ldr	r3, [sp, #4]
   1d8ec:	221c      	movs	r2, #28
   1d8ee:	4618      	mov	r0, r3
   1d8f0:	f013 ffd7 	bl	318a2 <memset>
   1d8f4:	4603      	mov	r3, r0

	return req;
}
   1d8f6:	4618      	mov	r0, r3
   1d8f8:	b003      	add	sp, #12
   1d8fa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1d8fc:	2300      	movs	r3, #0
   1d8fe:	e7fa      	b.n	1d8f6 <bt_att_req_alloc+0x36>
   1d900:	20030a9c 	.word	0x20030a9c
   1d904:	20008b70 	.word	0x20008b70

0001d908 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1d908:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1d90a:	6883      	ldr	r3, [r0, #8]
{
   1d90c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1d90e:	b14b      	cbz	r3, 1d924 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1d910:	6998      	ldr	r0, [r3, #24]
   1d912:	f7ff f931 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1d916:	9b01      	ldr	r3, [sp, #4]
   1d918:	6898      	ldr	r0, [r3, #8]
   1d91a:	f002 fe3f 	bl	2059c <net_buf_unref>
		req->buf = NULL;
   1d91e:	2200      	movs	r2, #0
   1d920:	9b01      	ldr	r3, [sp, #4]
   1d922:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1d924:	4803      	ldr	r0, [pc, #12]	; (1d934 <bt_att_req_free+0x2c>)
   1d926:	a901      	add	r1, sp, #4
   1d928:	f013 fa54 	bl	30dd4 <k_mem_slab_free>
}
   1d92c:	b003      	add	sp, #12
   1d92e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d932:	bf00      	nop
   1d934:	20008b70 	.word	0x20008b70

0001d938 <att_handle_rsp>:
{
   1d938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1d93c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1d93e:	30b0      	adds	r0, #176	; 0xb0
{
   1d940:	461d      	mov	r5, r3
   1d942:	460e      	mov	r6, r1
   1d944:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   1d946:	f013 fbf7 	bl	31138 <k_work_cancel_delayable>
	if (!chan->req) {
   1d94a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1d94e:	b97b      	cbnz	r3, 1d970 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   1d950:	4a19      	ldr	r2, [pc, #100]	; (1d9b8 <att_handle_rsp+0x80>)
   1d952:	4618      	mov	r0, r3
   1d954:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d958:	4918      	ldr	r1, [pc, #96]	; (1d9bc <att_handle_rsp+0x84>)
   1d95a:	2202      	movs	r2, #2
   1d95c:	9300      	str	r3, [sp, #0]
   1d95e:	f010 fae4 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   1d962:	6820      	ldr	r0, [r4, #0]
   1d964:	f010 fc73 	bl	2e24e <att_req_send_process>
}
   1d968:	2000      	movs	r0, #0
   1d96a:	b004      	add	sp, #16
   1d96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1d970:	4a13      	ldr	r2, [pc, #76]	; (1d9c0 <att_handle_rsp+0x88>)
   1d972:	f04f 0800 	mov.w	r8, #0
   1d976:	4293      	cmp	r3, r2
   1d978:	d102      	bne.n	1d980 <att_handle_rsp+0x48>
		chan->req = NULL;
   1d97a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   1d97e:	e7f0      	b.n	1d962 <att_handle_rsp+0x2a>
	func = chan->req->func;
   1d980:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   1d984:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   1d988:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1d98c:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   1d990:	f7ff ffba 	bl	1d908 <bt_att_req_free>
	att_req_send_process(chan->att);
   1d994:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1d996:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1d99a:	f010 fc58 	bl	2e24e <att_req_send_process>
	if (func) {
   1d99e:	f1b9 0f00 	cmp.w	r9, #0
   1d9a2:	d0e1      	beq.n	1d968 <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   1d9a4:	6820      	ldr	r0, [r4, #0]
   1d9a6:	f8cd a000 	str.w	sl, [sp]
   1d9aa:	463b      	mov	r3, r7
   1d9ac:	4632      	mov	r2, r6
   1d9ae:	4629      	mov	r1, r5
   1d9b0:	6800      	ldr	r0, [r0, #0]
   1d9b2:	47c8      	blx	r9
   1d9b4:	e7d8      	b.n	1d968 <att_handle_rsp+0x30>
   1d9b6:	bf00      	nop
   1d9b8:	00037644 	.word	0x00037644
   1d9bc:	00033018 	.word	0x00033018
   1d9c0:	20030aa0 	.word	0x20030aa0

0001d9c4 <bt_att_disconnected>:
{
   1d9c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1d9c8:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1d9cc:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1d9ce:	2e00      	cmp	r6, #0
   1d9d0:	d056      	beq.n	1da80 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1d9d2:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1d9d6:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1d9da:	f010 fb81 	bl	2e0e0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1d9de:	1f27      	subs	r7, r4, #4
   1d9e0:	f104 0894 	add.w	r8, r4, #148	; 0x94
   1d9e4:	2200      	movs	r2, #0
   1d9e6:	2300      	movs	r3, #0
   1d9e8:	4640      	mov	r0, r8
   1d9ea:	f011 fcc7 	bl	2f37c <net_buf_get>
   1d9ee:	4605      	mov	r5, r0
   1d9f0:	bb28      	cbnz	r0, 1da3e <bt_att_disconnected+0x7a>
	if (chan->req) {
   1d9f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1d9f6:	b12b      	cbz	r3, 1da04 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1d9f8:	4602      	mov	r2, r0
   1d9fa:	4601      	mov	r1, r0
   1d9fc:	230e      	movs	r3, #14
   1d9fe:	4638      	mov	r0, r7
   1da00:	f7ff ff9a 	bl	1d938 <att_handle_rsp>
	chan->att = NULL;
   1da04:	2300      	movs	r3, #0
   1da06:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1da0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1da0c:	2b00      	cmp	r3, #0
   1da0e:	d137      	bne.n	1da80 <bt_att_disconnected+0xbc>
	att_reset(att);
   1da10:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1da12:	9803      	ldr	r0, [sp, #12]
   1da14:	2200      	movs	r2, #0
   1da16:	2300      	movs	r3, #0
   1da18:	300c      	adds	r0, #12
   1da1a:	f011 fcaf 	bl	2f37c <net_buf_get>
   1da1e:	4605      	mov	r5, r0
   1da20:	b9a0      	cbnz	r0, 1da4c <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1da22:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1da24:	6845      	ldr	r5, [r0, #4]
   1da26:	b9c5      	cbnz	r5, 1da5a <bt_att_disconnected+0x96>
	att->conn = NULL;
   1da28:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1da2a:	a903      	add	r1, sp, #12
   1da2c:	4816      	ldr	r0, [pc, #88]	; (1da88 <bt_att_disconnected+0xc4>)
   1da2e:	f013 f9d1 	bl	30dd4 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1da32:	6820      	ldr	r0, [r4, #0]
}
   1da34:	b004      	add	sp, #16
   1da36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1da3a:	f000 bf2d 	b.w	1e898 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1da3e:	69a8      	ldr	r0, [r5, #24]
   1da40:	f7ff f89a 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(buf);
   1da44:	4628      	mov	r0, r5
   1da46:	f002 fda9 	bl	2059c <net_buf_unref>
   1da4a:	e7cb      	b.n	1d9e4 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1da4c:	69a8      	ldr	r0, [r5, #24]
   1da4e:	f7ff f893 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(buf);
   1da52:	4628      	mov	r0, r5
   1da54:	f002 fda2 	bl	2059c <net_buf_unref>
   1da58:	e7db      	b.n	1da12 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1da5a:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1da5c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1da5e:	4295      	cmp	r5, r2
	list->head = node;
   1da60:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1da62:	bf08      	it	eq
   1da64:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1da66:	686e      	ldr	r6, [r5, #4]
   1da68:	b136      	cbz	r6, 1da78 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1da6a:	69ab      	ldr	r3, [r5, #24]
   1da6c:	210e      	movs	r1, #14
   1da6e:	9300      	str	r3, [sp, #0]
   1da70:	2300      	movs	r3, #0
   1da72:	6800      	ldr	r0, [r0, #0]
   1da74:	461a      	mov	r2, r3
   1da76:	47b0      	blx	r6
		bt_att_req_free(req);
   1da78:	4628      	mov	r0, r5
   1da7a:	f7ff ff45 	bl	1d908 <bt_att_req_free>
   1da7e:	e7d0      	b.n	1da22 <bt_att_disconnected+0x5e>
}
   1da80:	b004      	add	sp, #16
   1da82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da86:	bf00      	nop
   1da88:	20008b38 	.word	0x20008b38

0001da8c <att_timeout>:
{
   1da8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   1da8e:	4b09      	ldr	r3, [pc, #36]	; (1dab4 <att_timeout+0x28>)
{
   1da90:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1da92:	9302      	str	r3, [sp, #8]
   1da94:	2300      	movs	r3, #0
   1da96:	2201      	movs	r2, #1
   1da98:	4618      	mov	r0, r3
   1da9a:	e9cd 3300 	strd	r3, r3, [sp]
   1da9e:	4906      	ldr	r1, [pc, #24]	; (1dab8 <att_timeout+0x2c>)
   1daa0:	f010 fa43 	bl	2df2a <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1daa4:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   1daa8:	b004      	add	sp, #16
   1daaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1daae:	f7ff bf89 	b.w	1d9c4 <bt_att_disconnected>
   1dab2:	bf00      	nop
   1dab4:	0003765b 	.word	0x0003765b
   1dab8:	00033018 	.word	0x00033018

0001dabc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1dabc:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1dabe:	4606      	mov	r6, r0
   1dac0:	4d13      	ldr	r5, [pc, #76]	; (1db10 <find_cf_cfg+0x54>)
   1dac2:	b140      	cbz	r0, 1dad6 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1dac4:	462a      	mov	r2, r5
   1dac6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1daca:	1e6c      	subs	r4, r5, #1
   1dacc:	f010 f860 	bl	2db90 <bt_conn_is_peer_addr_le>
   1dad0:	b198      	cbz	r0, 1dafa <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1dad2:	4620      	mov	r0, r4
   1dad4:	e00c      	b.n	1daf0 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1dad6:	4628      	mov	r0, r5
   1dad8:	490e      	ldr	r1, [pc, #56]	; (1db14 <find_cf_cfg+0x58>)
   1dada:	f010 fe55 	bl	2e788 <bt_addr_le_eq>
   1dade:	b940      	cbnz	r0, 1daf2 <find_cf_cfg+0x36>
   1dae0:	490c      	ldr	r1, [pc, #48]	; (1db14 <find_cf_cfg+0x58>)
   1dae2:	f105 0010 	add.w	r0, r5, #16
   1dae6:	f010 fe4f 	bl	2e788 <bt_addr_le_eq>
   1daea:	b120      	cbz	r0, 1daf6 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1daec:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1daf0:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1daf2:	1e68      	subs	r0, r5, #1
   1daf4:	e7fc      	b.n	1daf0 <find_cf_cfg+0x34>
	return NULL;
   1daf6:	2000      	movs	r0, #0
   1daf8:	e7fa      	b.n	1daf0 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1dafa:	4630      	mov	r0, r6
   1dafc:	7c21      	ldrb	r1, [r4, #16]
   1dafe:	f104 0211 	add.w	r2, r4, #17
   1db02:	f010 f845 	bl	2db90 <bt_conn_is_peer_addr_le>
   1db06:	2800      	cmp	r0, #0
   1db08:	d0f5      	beq.n	1daf6 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1db0a:	f104 0010 	add.w	r0, r4, #16
   1db0e:	e7ef      	b.n	1daf0 <find_cf_cfg+0x34>
   1db10:	20030ad5 	.word	0x20030ad5
   1db14:	0003668a 	.word	0x0003668a

0001db18 <find_sc_cfg>:
{
   1db18:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1db1a:	4c0e      	ldr	r4, [pc, #56]	; (1db54 <find_sc_cfg+0x3c>)
{
   1db1c:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1db1e:	7823      	ldrb	r3, [r4, #0]
{
   1db20:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1db22:	4283      	cmp	r3, r0
   1db24:	d00c      	beq.n	1db40 <find_sc_cfg+0x28>
   1db26:	7b23      	ldrb	r3, [r4, #12]
   1db28:	42ab      	cmp	r3, r5
   1db2a:	d110      	bne.n	1db4e <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1db2c:	4631      	mov	r1, r6
   1db2e:	480a      	ldr	r0, [pc, #40]	; (1db58 <find_sc_cfg+0x40>)
   1db30:	f010 fe2a 	bl	2e788 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1db34:	b158      	cbz	r0, 1db4e <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1db36:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1db38:	220c      	movs	r2, #12
   1db3a:	fb02 4003 	mla	r0, r2, r3, r4
   1db3e:	e007      	b.n	1db50 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1db40:	1c60      	adds	r0, r4, #1
   1db42:	f010 fe21 	bl	2e788 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1db46:	2800      	cmp	r0, #0
   1db48:	d0ed      	beq.n	1db26 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1db4a:	2300      	movs	r3, #0
   1db4c:	e7f4      	b.n	1db38 <find_sc_cfg+0x20>
	return NULL;
   1db4e:	2000      	movs	r0, #0
}
   1db50:	bd70      	pop	{r4, r5, r6, pc}
   1db52:	bf00      	nop
   1db54:	20030f0c 	.word	0x20030f0c
   1db58:	20030f19 	.word	0x20030f19

0001db5c <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1db5c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1db5e:	1c4a      	adds	r2, r1, #1
{
   1db60:	460c      	mov	r4, r1
		if (conn) {
   1db62:	4605      	mov	r5, r0
   1db64:	b968      	cbnz	r0, 1db82 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1db66:	4610      	mov	r0, r2
   1db68:	490d      	ldr	r1, [pc, #52]	; (1dba0 <find_ccc_cfg+0x44>)
   1db6a:	f010 fe0d 	bl	2e788 <bt_addr_le_eq>
   1db6e:	b930      	cbnz	r0, 1db7e <find_ccc_cfg+0x22>
   1db70:	490b      	ldr	r1, [pc, #44]	; (1dba0 <find_ccc_cfg+0x44>)
   1db72:	f104 000b 	add.w	r0, r4, #11
   1db76:	f010 fe07 	bl	2e788 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1db7a:	b170      	cbz	r0, 1db9a <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1db7c:	340a      	adds	r4, #10
   1db7e:	4620      	mov	r0, r4
   1db80:	e00c      	b.n	1db9c <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1db82:	7809      	ldrb	r1, [r1, #0]
   1db84:	f010 f804 	bl	2db90 <bt_conn_is_peer_addr_le>
   1db88:	2800      	cmp	r0, #0
   1db8a:	d1f8      	bne.n	1db7e <find_ccc_cfg+0x22>
   1db8c:	4628      	mov	r0, r5
   1db8e:	7aa1      	ldrb	r1, [r4, #10]
   1db90:	f104 020b 	add.w	r2, r4, #11
   1db94:	f00f fffc 	bl	2db90 <bt_conn_is_peer_addr_le>
   1db98:	e7ef      	b.n	1db7a <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1db9a:	2000      	movs	r0, #0
}
   1db9c:	bd38      	pop	{r3, r4, r5, pc}
   1db9e:	bf00      	nop
   1dba0:	0003668a 	.word	0x0003668a

0001dba4 <read_ppcp>:
{
   1dba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1dba6:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1dba8:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   1dbac:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1dbae:	4a06      	ldr	r2, [pc, #24]	; (1dbc8 <read_ppcp+0x24>)
   1dbb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1dbb4:	2308      	movs	r3, #8
   1dbb6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1dbba:	9300      	str	r3, [sp, #0]
   1dbbc:	446b      	add	r3, sp
   1dbbe:	f010 fdf7 	bl	2e7b0 <bt_gatt_attr_read.constprop.0>
}
   1dbc2:	b005      	add	sp, #20
   1dbc4:	f85d fb04 	ldr.w	pc, [sp], #4
   1dbc8:	00280018 	.word	0x00280018

0001dbcc <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1dbcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dbd0:	b085      	sub	sp, #20
   1dbd2:	461e      	mov	r6, r3
   1dbd4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1dbd8:	4681      	mov	r9, r0
   1dbda:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1dbdc:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1dbe0:	2b00      	cmp	r3, #0
   1dbe2:	d14a      	bne.n	1dc7a <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1dbe4:	1e73      	subs	r3, r6, #1
   1dbe6:	2b01      	cmp	r3, #1
   1dbe8:	d84a      	bhi.n	1dc80 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1dbea:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1dbec:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1dbee:	7815      	ldrb	r5, [r2, #0]
   1dbf0:	bf18      	it	ne
   1dbf2:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1dbf4:	f7ff ffb2 	bl	1db5c <find_ccc_cfg>
	if (!cfg) {
   1dbf8:	4604      	mov	r4, r0
   1dbfa:	b9e8      	cbnz	r0, 1dc38 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1dbfc:	b91d      	cbnz	r5, 1dc06 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1dbfe:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1dc00:	b005      	add	sp, #20
   1dc02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1dc06:	4641      	mov	r1, r8
   1dc08:	f7ff ffa8 	bl	1db5c <find_ccc_cfg>
		if (!cfg) {
   1dc0c:	4604      	mov	r4, r0
   1dc0e:	b958      	cbnz	r0, 1dc28 <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   1dc10:	4b1d      	ldr	r3, [pc, #116]	; (1dc88 <bt_gatt_attr_write_ccc+0xbc>)
   1dc12:	9000      	str	r0, [sp, #0]
   1dc14:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1dc18:	2202      	movs	r2, #2
   1dc1a:	4603      	mov	r3, r0
   1dc1c:	491b      	ldr	r1, [pc, #108]	; (1dc8c <bt_gatt_attr_write_ccc+0xc0>)
   1dc1e:	f010 fe4f 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1dc22:	f06f 0010 	mvn.w	r0, #16
   1dc26:	e7eb      	b.n	1dc00 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1dc28:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1dc2c:	3001      	adds	r0, #1
   1dc2e:	f010 fdb3 	bl	2e798 <bt_addr_le_copy>
		cfg->id = conn->id;
   1dc32:	f899 3008 	ldrb.w	r3, [r9, #8]
   1dc36:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1dc38:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1dc3c:	b98b      	cbnz	r3, 1dc62 <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   1dc3e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1dc40:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   1dc44:	42ab      	cmp	r3, r5
   1dc46:	d003      	beq.n	1dc50 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   1dc48:	4641      	mov	r1, r8
   1dc4a:	4638      	mov	r0, r7
   1dc4c:	f010 fd24 	bl	2e698 <gatt_ccc_changed>
	if (!value) {
   1dc50:	2d00      	cmp	r5, #0
   1dc52:	d1d4      	bne.n	1dbfe <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1dc54:	490e      	ldr	r1, [pc, #56]	; (1dc90 <bt_gatt_attr_write_ccc+0xc4>)
   1dc56:	1c60      	adds	r0, r4, #1
   1dc58:	f010 fd9e 	bl	2e798 <bt_addr_le_copy>
	cfg->id = 0U;
   1dc5c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1dc5e:	8125      	strh	r5, [r4, #8]
}
   1dc60:	e7cd      	b.n	1dbfe <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1dc62:	462a      	mov	r2, r5
   1dc64:	4639      	mov	r1, r7
   1dc66:	4648      	mov	r0, r9
   1dc68:	4798      	blx	r3
		if (write < 0) {
   1dc6a:	2800      	cmp	r0, #0
   1dc6c:	dbc8      	blt.n	1dc00 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1dc6e:	3801      	subs	r0, #1
   1dc70:	2801      	cmp	r0, #1
   1dc72:	d9e4      	bls.n	1dc3e <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1dc74:	f06f 000d 	mvn.w	r0, #13
   1dc78:	e7c2      	b.n	1dc00 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dc7a:	f06f 0006 	mvn.w	r0, #6
   1dc7e:	e7bf      	b.n	1dc00 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1dc80:	f06f 000c 	mvn.w	r0, #12
   1dc84:	e7bc      	b.n	1dc00 <bt_gatt_attr_write_ccc+0x34>
   1dc86:	bf00      	nop
   1dc88:	0003766e 	.word	0x0003766e
   1dc8c:	00033038 	.word	0x00033038
   1dc90:	0003668a 	.word	0x0003668a

0001dc94 <clear_cf_cfg>:
{
   1dc94:	4602      	mov	r2, r0
   1dc96:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1dc98:	4907      	ldr	r1, [pc, #28]	; (1dcb8 <clear_cf_cfg+0x24>)
   1dc9a:	3001      	adds	r0, #1
   1dc9c:	f010 fd7c 	bl	2e798 <bt_addr_le_copy>
   1dca0:	2300      	movs	r3, #0
   1dca2:	320c      	adds	r2, #12
   1dca4:	f802 3c04 	strb.w	r3, [r2, #-4]
   1dca8:	e8d2 1fef 	ldaex	r1, [r2]
   1dcac:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1dcb0:	2800      	cmp	r0, #0
   1dcb2:	d1f9      	bne.n	1dca8 <clear_cf_cfg+0x14>
}
   1dcb4:	bd08      	pop	{r3, pc}
   1dcb6:	bf00      	nop
   1dcb8:	0003668a 	.word	0x0003668a

0001dcbc <sc_save>:
{
   1dcbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1dcc0:	4680      	mov	r8, r0
   1dcc2:	460f      	mov	r7, r1
   1dcc4:	4616      	mov	r6, r2
   1dcc6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1dcc8:	f7ff ff26 	bl	1db18 <find_sc_cfg>
	if (!cfg) {
   1dccc:	4604      	mov	r4, r0
   1dcce:	b9a8      	cbnz	r0, 1dcfc <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1dcd0:	4911      	ldr	r1, [pc, #68]	; (1dd18 <sc_save+0x5c>)
   1dcd2:	f7ff ff21 	bl	1db18 <find_sc_cfg>
		if (!cfg) {
   1dcd6:	4604      	mov	r4, r0
   1dcd8:	b958      	cbnz	r0, 1dcf2 <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   1dcda:	4b10      	ldr	r3, [pc, #64]	; (1dd1c <sc_save+0x60>)
   1dcdc:	2201      	movs	r2, #1
   1dcde:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1dce2:	490f      	ldr	r1, [pc, #60]	; (1dd20 <sc_save+0x64>)
   1dce4:	4603      	mov	r3, r0
   1dce6:	9000      	str	r0, [sp, #0]
   1dce8:	f010 fdea 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
}
   1dcec:	b004      	add	sp, #16
   1dcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1dcf2:	4639      	mov	r1, r7
		cfg->id = id;
   1dcf4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1dcf8:	f010 fd4e 	bl	2e798 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1dcfc:	8922      	ldrh	r2, [r4, #8]
   1dcfe:	8963      	ldrh	r3, [r4, #10]
   1dd00:	b91a      	cbnz	r2, 1dd0a <sc_save+0x4e>
   1dd02:	b92b      	cbnz	r3, 1dd10 <sc_save+0x54>
		cfg->data.start = start;
   1dd04:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1dd06:	8165      	strh	r5, [r4, #10]
   1dd08:	e7f0      	b.n	1dcec <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   1dd0a:	42b2      	cmp	r2, r6
		*start = new_start;
   1dd0c:	bf88      	it	hi
   1dd0e:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1dd10:	42ab      	cmp	r3, r5
   1dd12:	d2eb      	bcs.n	1dcec <sc_save+0x30>
   1dd14:	e7f7      	b.n	1dd06 <sc_save+0x4a>
   1dd16:	bf00      	nop
   1dd18:	0003668a 	.word	0x0003668a
   1dd1c:	00037688 	.word	0x00037688
   1dd20:	00033038 	.word	0x00033038

0001dd24 <cf_write>:
{
   1dd24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1dd28:	461f      	mov	r7, r3
   1dd2a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1dd2e:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1dd30:	2b01      	cmp	r3, #1
{
   1dd32:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1dd34:	d83b      	bhi.n	1ddae <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1dd36:	443b      	add	r3, r7
   1dd38:	2b01      	cmp	r3, #1
   1dd3a:	463d      	mov	r5, r7
   1dd3c:	dc3a      	bgt.n	1ddb4 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1dd3e:	f7ff febd 	bl	1dabc <find_cf_cfg>
	if (!cfg) {
   1dd42:	4604      	mov	r4, r0
   1dd44:	b990      	cbnz	r0, 1dd6c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1dd46:	f7ff feb9 	bl	1dabc <find_cf_cfg>
	if (!cfg) {
   1dd4a:	4604      	mov	r4, r0
   1dd4c:	b970      	cbnz	r0, 1dd6c <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   1dd4e:	4b1c      	ldr	r3, [pc, #112]	; (1ddc0 <cf_write+0x9c>)
   1dd50:	2202      	movs	r2, #2
   1dd52:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1dd56:	491b      	ldr	r1, [pc, #108]	; (1ddc4 <cf_write+0xa0>)
   1dd58:	4603      	mov	r3, r0
   1dd5a:	9000      	str	r0, [sp, #0]
   1dd5c:	f010 fdb0 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1dd60:	f06f 0510 	mvn.w	r5, #16
}
   1dd64:	4628      	mov	r0, r5
   1dd66:	b004      	add	sp, #16
   1dd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1dd6c:	b197      	cbz	r7, 1dd94 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   1dd6e:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1dd70:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1dd72:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1dd76:	fa21 f003 	lsr.w	r0, r1, r3
   1dd7a:	07c7      	lsls	r7, r0, #31
   1dd7c:	d503      	bpl.n	1dd86 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1dd7e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1dd82:	07c0      	lsls	r0, r0, #31
   1dd84:	d519      	bpl.n	1ddba <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1dd86:	3301      	adds	r3, #1
   1dd88:	2b03      	cmp	r3, #3
   1dd8a:	d1f4      	bne.n	1dd76 <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1dd8c:	f002 0207 	and.w	r2, r2, #7
   1dd90:	4311      	orrs	r1, r2
   1dd92:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1dd94:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1dd98:	1c60      	adds	r0, r4, #1
   1dd9a:	f010 fcfd 	bl	2e798 <bt_addr_le_copy>
	cfg->id = conn->id;
   1dd9e:	4620      	mov	r0, r4
   1dda0:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1dda2:	2100      	movs	r1, #0
	cfg->id = conn->id;
   1dda4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1dda8:	f010 fdba 	bl	2e920 <atomic_set_bit>
	return len;
   1ddac:	e7da      	b.n	1dd64 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ddae:	f06f 0506 	mvn.w	r5, #6
   1ddb2:	e7d7      	b.n	1dd64 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ddb4:	f06f 050c 	mvn.w	r5, #12
   1ddb8:	e7d4      	b.n	1dd64 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1ddba:	f06f 0512 	mvn.w	r5, #18
   1ddbe:	e7d1      	b.n	1dd64 <cf_write+0x40>
   1ddc0:	000376a7 	.word	0x000376a7
   1ddc4:	00033038 	.word	0x00033038

0001ddc8 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1ddc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ddcc:	4b28      	ldr	r3, [pc, #160]	; (1de70 <disconnected_cb+0xa8>)
{
   1ddce:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ddd0:	6882      	ldr	r2, [r0, #8]
{
   1ddd2:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ddd4:	429a      	cmp	r2, r3
   1ddd6:	d12b      	bne.n	1de30 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1ddd8:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1ddda:	8aab      	ldrh	r3, [r5, #20]
   1dddc:	b343      	cbz	r3, 1de30 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1ddde:	f04f 0800 	mov.w	r8, #0
   1dde2:	1c6c      	adds	r4, r5, #1
   1dde4:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   1dde8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1ddec:	b19b      	cbz	r3, 1de16 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ddee:	4622      	mov	r2, r4
   1ddf0:	4630      	mov	r0, r6
   1ddf2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1ddf6:	f00f fecb 	bl	2db90 <bt_conn_is_peer_addr_le>
   1ddfa:	b9e0      	cbnz	r0, 1de36 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ddfc:	4621      	mov	r1, r4
   1ddfe:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1de02:	f7fe faff 	bl	1c404 <bt_conn_lookup_addr_le>
			if (tmp) {
   1de06:	b130      	cbz	r0, 1de16 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1de08:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   1de0a:	2b07      	cmp	r3, #7
   1de0c:	bf08      	it	eq
   1de0e:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1de12:	f00f fe30 	bl	2da76 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1de16:	340a      	adds	r4, #10
   1de18:	454c      	cmp	r4, r9
   1de1a:	d1e5      	bne.n	1dde8 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1de1c:	f1b8 0f00 	cmp.w	r8, #0
   1de20:	d106      	bne.n	1de30 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1de22:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1de24:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   1de28:	b113      	cbz	r3, 1de30 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1de2a:	4641      	mov	r1, r8
   1de2c:	4638      	mov	r0, r7
   1de2e:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1de30:	2001      	movs	r0, #1
   1de32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1de36:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   1de3a:	4651      	mov	r1, sl
   1de3c:	7a30      	ldrb	r0, [r6, #8]
   1de3e:	f00f fb49 	bl	2d4d4 <bt_addr_le_is_bonded>
   1de42:	b978      	cbnz	r0, 1de64 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1de44:	4b0b      	ldr	r3, [pc, #44]	; (1de74 <disconnected_cb+0xac>)
   1de46:	429d      	cmp	r5, r3
   1de48:	d102      	bne.n	1de50 <disconnected_cb+0x88>
					sc_clear(conn);
   1de4a:	4630      	mov	r0, r6
   1de4c:	f010 fd47 	bl	2e8de <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1de50:	4620      	mov	r0, r4
   1de52:	4909      	ldr	r1, [pc, #36]	; (1de78 <disconnected_cb+0xb0>)
   1de54:	f010 fca0 	bl	2e798 <bt_addr_le_copy>
	cfg->id = 0U;
   1de58:	2300      	movs	r3, #0
   1de5a:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1de5e:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   1de62:	e7d8      	b.n	1de16 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1de64:	4651      	mov	r1, sl
   1de66:	4620      	mov	r0, r4
   1de68:	f010 fc96 	bl	2e798 <bt_addr_le_copy>
   1de6c:	e7d3      	b.n	1de16 <disconnected_cb+0x4e>
   1de6e:	bf00      	nop
   1de70:	0001dbcd 	.word	0x0001dbcd
   1de74:	200085bc 	.word	0x200085bc
   1de78:	0003668a 	.word	0x0003668a

0001de7c <sc_indicate_rsp>:
{
   1de7c:	b510      	push	{r4, lr}
   1de7e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1de80:	4811      	ldr	r0, [pc, #68]	; (1dec8 <sc_indicate_rsp+0x4c>)
   1de82:	e8d0 3fef 	ldaex	r3, [r0]
   1de86:	f023 0302 	bic.w	r3, r3, #2
   1de8a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1de8e:	2a00      	cmp	r2, #0
   1de90:	d1f7      	bne.n	1de82 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1de92:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1de96:	07da      	lsls	r2, r3, #31
   1de98:	d504      	bpl.n	1dea4 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1de9a:	2200      	movs	r2, #0
   1de9c:	2300      	movs	r3, #0
   1de9e:	3830      	subs	r0, #48	; 0x30
   1dea0:	f008 f874 	bl	25f8c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1dea4:	4620      	mov	r0, r4
   1dea6:	f010 fbca 	bl	2e63e <bt_att_fixed_chan_only>
   1deaa:	b160      	cbz	r0, 1dec6 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   1deac:	4620      	mov	r0, r4
   1deae:	f7ff fe05 	bl	1dabc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1deb2:	b140      	cbz	r0, 1dec6 <sc_indicate_rsp+0x4a>
   1deb4:	7a03      	ldrb	r3, [r0, #8]
   1deb6:	07db      	lsls	r3, r3, #31
   1deb8:	d505      	bpl.n	1dec6 <sc_indicate_rsp+0x4a>
}
   1deba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1debe:	2100      	movs	r1, #0
   1dec0:	300c      	adds	r0, #12
   1dec2:	f010 bd2d 	b.w	2e920 <atomic_set_bit>
}
   1dec6:	bd10      	pop	{r4, pc}
   1dec8:	2000a1f8 	.word	0x2000a1f8

0001decc <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1decc:	2201      	movs	r2, #1
{
   1dece:	b510      	push	{r4, lr}
   1ded0:	4b1b      	ldr	r3, [pc, #108]	; (1df40 <bt_gatt_init+0x74>)
   1ded2:	e8d3 1fef 	ldaex	r1, [r3]
   1ded6:	2900      	cmp	r1, #0
   1ded8:	d103      	bne.n	1dee2 <bt_gatt_init+0x16>
   1deda:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1dede:	2800      	cmp	r0, #0
   1dee0:	d1f7      	bne.n	1ded2 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1dee2:	d12c      	bne.n	1df3e <bt_gatt_init+0x72>
   1dee4:	4b17      	ldr	r3, [pc, #92]	; (1df44 <bt_gatt_init+0x78>)
   1dee6:	e8d3 1fef 	ldaex	r1, [r3]
   1deea:	2900      	cmp	r1, #0
   1deec:	d103      	bne.n	1def6 <bt_gatt_init+0x2a>
   1deee:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1def2:	2800      	cmp	r0, #0
   1def4:	d1f7      	bne.n	1dee6 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1def6:	d108      	bne.n	1df0a <bt_gatt_init+0x3e>
   1def8:	2000      	movs	r0, #0
   1defa:	4913      	ldr	r1, [pc, #76]	; (1df48 <bt_gatt_init+0x7c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1defc:	4a13      	ldr	r2, [pc, #76]	; (1df4c <bt_gatt_init+0x80>)
   1defe:	880b      	ldrh	r3, [r1, #0]
   1df00:	4c13      	ldr	r4, [pc, #76]	; (1df50 <bt_gatt_init+0x84>)
   1df02:	42a2      	cmp	r2, r4
   1df04:	d315      	bcc.n	1df32 <bt_gatt_init+0x66>
   1df06:	b100      	cbz	r0, 1df0a <bt_gatt_init+0x3e>
   1df08:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1df0a:	2200      	movs	r2, #0
   1df0c:	4b11      	ldr	r3, [pc, #68]	; (1df54 <bt_gatt_init+0x88>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1df0e:	4912      	ldr	r1, [pc, #72]	; (1df58 <bt_gatt_init+0x8c>)
   1df10:	4812      	ldr	r0, [pc, #72]	; (1df5c <bt_gatt_init+0x90>)
	list->tail = NULL;
   1df12:	e9c3 2200 	strd	r2, r2, [r3]
   1df16:	f013 f901 	bl	3111c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1df1a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1df1e:	2300      	movs	r3, #0
   1df20:	480e      	ldr	r0, [pc, #56]	; (1df5c <bt_gatt_init+0x90>)
   1df22:	f7fb fa53 	bl	193cc <bt_long_wq_schedule>
}
   1df26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1df2a:	490d      	ldr	r1, [pc, #52]	; (1df60 <bt_gatt_init+0x94>)
   1df2c:	480d      	ldr	r0, [pc, #52]	; (1df64 <bt_gatt_init+0x98>)
   1df2e:	f013 b8f5 	b.w	3111c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1df32:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1df34:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   1df36:	4403      	add	r3, r0
   1df38:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1df3a:	2001      	movs	r0, #1
   1df3c:	e7e1      	b.n	1df02 <bt_gatt_init+0x36>
}
   1df3e:	bd10      	pop	{r4, pc}
   1df40:	20030af8 	.word	0x20030af8
   1df44:	20030af4 	.word	0x20030af4
   1df48:	20030f24 	.word	0x20030f24
   1df4c:	00032fc8 	.word	0x00032fc8
   1df50:	00032fe0 	.word	0x00032fe0
   1df54:	20030afc 	.word	0x20030afc
   1df58:	0002ea0d 	.word	0x0002ea0d
   1df5c:	2000a150 	.word	0x2000a150
   1df60:	0001e389 	.word	0x0001e389
   1df64:	2000a1c8 	.word	0x2000a1c8

0001df68 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1df68:	4603      	mov	r3, r0
{
   1df6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1df6e:	b148      	cbz	r0, 1df84 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1df70:	8a00      	ldrh	r0, [r0, #16]
   1df72:	b938      	cbnz	r0, 1df84 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   1df74:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1df76:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1df7a:	4911      	ldr	r1, [pc, #68]	; (1dfc0 <bt_gatt_attr_get_handle+0x58>)
   1df7c:	f8df e044 	ldr.w	lr, [pc, #68]	; 1dfc4 <bt_gatt_attr_get_handle+0x5c>
   1df80:	4571      	cmp	r1, lr
   1df82:	d301      	bcc.n	1df88 <bt_gatt_attr_get_handle+0x20>
}
   1df84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1df88:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1df8c:	42bb      	cmp	r3, r7
   1df8e:	d304      	bcc.n	1df9a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1df90:	fb0c 7206 	mla	r2, ip, r6, r7
   1df94:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1df96:	4293      	cmp	r3, r2
   1df98:	d90e      	bls.n	1dfb8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1df9a:	4434      	add	r4, r6
   1df9c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1df9e:	4614      	mov	r4, r2
   1dfa0:	3108      	adds	r1, #8
   1dfa2:	e7ed      	b.n	1df80 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1dfa4:	fb0c 7805 	mla	r8, ip, r5, r7
   1dfa8:	4543      	cmp	r3, r8
   1dfaa:	d007      	beq.n	1dfbc <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1dfac:	3501      	adds	r5, #1
   1dfae:	1962      	adds	r2, r4, r5
   1dfb0:	42b5      	cmp	r5, r6
   1dfb2:	b292      	uxth	r2, r2
   1dfb4:	d1f6      	bne.n	1dfa4 <bt_gatt_attr_get_handle+0x3c>
   1dfb6:	e7f2      	b.n	1df9e <bt_gatt_attr_get_handle+0x36>
   1dfb8:	2500      	movs	r5, #0
   1dfba:	e7f8      	b.n	1dfae <bt_gatt_attr_get_handle+0x46>
   1dfbc:	4610      	mov	r0, r2
   1dfbe:	e7e1      	b.n	1df84 <bt_gatt_attr_get_handle+0x1c>
   1dfc0:	00032fc8 	.word	0x00032fc8
   1dfc4:	00032fe0 	.word	0x00032fe0

0001dfc8 <bt_gatt_foreach_attr_type>:
{
   1dfc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfcc:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1dfce:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1dfd2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1dfd6:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1dfd8:	2d00      	cmp	r5, #0
   1dfda:	bf08      	it	eq
   1dfdc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1dfde:	4b24      	ldr	r3, [pc, #144]	; (1e070 <bt_gatt_foreach_attr_type+0xa8>)
{
   1dfe0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1dfe2:	881b      	ldrh	r3, [r3, #0]
{
   1dfe4:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1dfe6:	4283      	cmp	r3, r0
   1dfe8:	d23c      	bcs.n	1e064 <bt_gatt_foreach_attr_type+0x9c>
}
   1dfea:	b003      	add	sp, #12
   1dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1dff0:	6873      	ldr	r3, [r6, #4]
   1dff2:	4423      	add	r3, r4
   1dff4:	42bb      	cmp	r3, r7
   1dff6:	d232      	bcs.n	1e05e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1dff8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dffa:	3608      	adds	r6, #8
   1dffc:	4b1d      	ldr	r3, [pc, #116]	; (1e074 <bt_gatt_foreach_attr_type+0xac>)
   1dffe:	429e      	cmp	r6, r3
   1e000:	d3f6      	bcc.n	1dff0 <bt_gatt_foreach_attr_type+0x28>
   1e002:	e7f2      	b.n	1dfea <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1e004:	4640      	mov	r0, r8
   1e006:	5889      	ldr	r1, [r1, r2]
   1e008:	9301      	str	r3, [sp, #4]
   1e00a:	f00f f916 	bl	2d23a <bt_uuid_cmp>
   1e00e:	9b01      	ldr	r3, [sp, #4]
   1e010:	b190      	cbz	r0, 1e038 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1e012:	3401      	adds	r4, #1
   1e014:	f10a 0a01 	add.w	sl, sl, #1
   1e018:	b2a4      	uxth	r4, r4
   1e01a:	6873      	ldr	r3, [r6, #4]
   1e01c:	4553      	cmp	r3, sl
   1e01e:	d9ec      	bls.n	1dffa <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1e020:	9b00      	ldr	r3, [sp, #0]
   1e022:	429c      	cmp	r4, r3
   1e024:	d8e1      	bhi.n	1dfea <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1e026:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e028:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1e02a:	d3f2      	bcc.n	1e012 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e02c:	fb0b f20a 	mul.w	r2, fp, sl
   1e030:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1e032:	f1b8 0f00 	cmp.w	r8, #0
   1e036:	d1e5      	bne.n	1e004 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1e038:	f1b9 0f00 	cmp.w	r9, #0
   1e03c:	d10b      	bne.n	1e056 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1e03e:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1e040:	4618      	mov	r0, r3
	*num_matches -= 1;
   1e042:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1e044:	4621      	mov	r1, r4
   1e046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e04a:	4798      	blx	r3
	if (!*num_matches) {
   1e04c:	2d00      	cmp	r5, #0
   1e04e:	d0cc      	beq.n	1dfea <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e050:	2800      	cmp	r0, #0
   1e052:	d1de      	bne.n	1e012 <bt_gatt_foreach_attr_type+0x4a>
   1e054:	e7c9      	b.n	1dfea <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1e056:	68da      	ldr	r2, [r3, #12]
   1e058:	4591      	cmp	r9, r2
   1e05a:	d1da      	bne.n	1e012 <bt_gatt_foreach_attr_type+0x4a>
   1e05c:	e7ef      	b.n	1e03e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1e05e:	f04f 0a00 	mov.w	sl, #0
   1e062:	e7da      	b.n	1e01a <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   1e064:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e066:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e06a:	4e03      	ldr	r6, [pc, #12]	; (1e078 <bt_gatt_foreach_attr_type+0xb0>)
   1e06c:	e7c6      	b.n	1dffc <bt_gatt_foreach_attr_type+0x34>
   1e06e:	bf00      	nop
   1e070:	20030f24 	.word	0x20030f24
   1e074:	00032fe0 	.word	0x00032fe0
   1e078:	00032fc8 	.word	0x00032fc8

0001e07c <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   1e07c:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   1e07e:	b510      	push	{r4, lr}
   1e080:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1e082:	aa20      	add	r2, sp, #128	; 0x80
   1e084:	a904      	add	r1, sp, #16
   1e086:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   1e088:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1e08c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1e090:	f00d f91c 	bl	2b2cc <tc_cmac_setup>
   1e094:	4603      	mov	r3, r0
   1e096:	b948      	cbnz	r0, 1e0ac <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   1e098:	4a17      	ldr	r2, [pc, #92]	; (1e0f8 <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   1e09a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1e09e:	4917      	ldr	r1, [pc, #92]	; (1e0fc <db_hash_gen.constprop.0+0x80>)
   1e0a0:	2201      	movs	r2, #1
   1e0a2:	9300      	str	r3, [sp, #0]
   1e0a4:	f010 fc0c 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
}
   1e0a8:	b04c      	add	sp, #304	; 0x130
   1e0aa:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1e0ac:	ab08      	add	r3, sp, #32
   1e0ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e0b2:	2001      	movs	r0, #1
   1e0b4:	4a12      	ldr	r2, [pc, #72]	; (1e100 <db_hash_gen.constprop.0+0x84>)
   1e0b6:	f010 fc9e 	bl	2e9f6 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1e0ba:	4812      	ldr	r0, [pc, #72]	; (1e104 <db_hash_gen.constprop.0+0x88>)
   1e0bc:	a908      	add	r1, sp, #32
   1e0be:	f00d f99a 	bl	2b3f6 <tc_cmac_final>
   1e0c2:	4603      	mov	r3, r0
   1e0c4:	b908      	cbnz	r0, 1e0ca <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   1e0c6:	4a10      	ldr	r2, [pc, #64]	; (1e108 <db_hash_gen.constprop.0+0x8c>)
   1e0c8:	e7e7      	b.n	1e09a <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1e0ca:	2208      	movs	r2, #8
   1e0cc:	4b0d      	ldr	r3, [pc, #52]	; (1e104 <db_hash_gen.constprop.0+0x88>)
   1e0ce:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1e0d2:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e0d4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   1e0d8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e0da:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1e0de:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1e0e0:	d1f7      	bne.n	1e0d2 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e0e2:	4b0a      	ldr	r3, [pc, #40]	; (1e10c <db_hash_gen.constprop.0+0x90>)
   1e0e4:	e8d3 1fef 	ldaex	r1, [r3]
   1e0e8:	f041 0104 	orr.w	r1, r1, #4
   1e0ec:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e0f0:	2a00      	cmp	r2, #0
   1e0f2:	d0d9      	beq.n	1e0a8 <db_hash_gen.constprop.0+0x2c>
   1e0f4:	e7f6      	b.n	1e0e4 <db_hash_gen.constprop.0+0x68>
   1e0f6:	bf00      	nop
   1e0f8:	000376d3 	.word	0x000376d3
   1e0fc:	00033038 	.word	0x00033038
   1e100:	0002e6e3 	.word	0x0002e6e3
   1e104:	2000a140 	.word	0x2000a140
   1e108:	000376ec 	.word	0x000376ec
   1e10c:	2000a1f8 	.word	0x2000a1f8

0001e110 <db_hash_read>:
{
   1e110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e114:	4914      	ldr	r1, [pc, #80]	; (1e168 <db_hash_read+0x58>)
{
   1e116:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e118:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1e11c:	4614      	mov	r4, r2
   1e11e:	461d      	mov	r5, r3
   1e120:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e124:	f013 f81c 	bl	31160 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e128:	4b10      	ldr	r3, [pc, #64]	; (1e16c <db_hash_read+0x5c>)
   1e12a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1e12e:	0759      	lsls	r1, r3, #29
   1e130:	d401      	bmi.n	1e136 <db_hash_read+0x26>
		db_hash_gen(true);
   1e132:	f7ff ffa3 	bl	1e07c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1e136:	4630      	mov	r0, r6
   1e138:	f7ff fcc0 	bl	1dabc <find_cf_cfg>
	if (cfg &&
   1e13c:	b150      	cbz	r0, 1e154 <db_hash_read+0x44>
   1e13e:	7a03      	ldrb	r3, [r0, #8]
   1e140:	07da      	lsls	r2, r3, #31
   1e142:	d507      	bpl.n	1e154 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1e144:	300c      	adds	r0, #12
   1e146:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   1e14a:	07db      	lsls	r3, r3, #31
   1e14c:	d402      	bmi.n	1e154 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1e14e:	2101      	movs	r1, #1
   1e150:	f010 fbe6 	bl	2e920 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1e154:	2310      	movs	r3, #16
   1e156:	463a      	mov	r2, r7
   1e158:	9306      	str	r3, [sp, #24]
   1e15a:	4629      	mov	r1, r5
   1e15c:	4620      	mov	r0, r4
}
   1e15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1e162:	4b03      	ldr	r3, [pc, #12]	; (1e170 <db_hash_read+0x60>)
   1e164:	f010 bb24 	b.w	2e7b0 <bt_gatt_attr_read.constprop.0>
   1e168:	2000a180 	.word	0x2000a180
   1e16c:	2000a1f8 	.word	0x2000a1f8
   1e170:	2000a140 	.word	0x2000a140

0001e174 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   1e174:	2300      	movs	r3, #0
{
   1e176:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1e178:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1e17a:	f7ff fef5 	bl	1df68 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1e17e:	1c41      	adds	r1, r0, #1
   1e180:	b289      	uxth	r1, r1
   1e182:	4608      	mov	r0, r1
   1e184:	4a03      	ldr	r2, [pc, #12]	; (1e194 <bt_gatt_attr_next+0x20>)
   1e186:	ab01      	add	r3, sp, #4
   1e188:	f010 fc35 	bl	2e9f6 <bt_gatt_foreach_attr>
}
   1e18c:	9801      	ldr	r0, [sp, #4]
   1e18e:	b003      	add	sp, #12
   1e190:	f85d fb04 	ldr.w	pc, [sp], #4
   1e194:	0002e693 	.word	0x0002e693

0001e198 <gatt_indicate>:
{
   1e198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e19c:	4615      	mov	r5, r2
   1e19e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e1a0:	2294      	movs	r2, #148	; 0x94
   1e1a2:	6869      	ldr	r1, [r5, #4]
{
   1e1a4:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e1a6:	f010 fc33 	bl	2ea10 <bt_gatt_check_perm>
   1e1aa:	4680      	mov	r8, r0
   1e1ac:	b178      	cbz	r0, 1e1ce <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1e1ae:	4b35      	ldr	r3, [pc, #212]	; (1e284 <gatt_indicate+0xec>)
   1e1b0:	2202      	movs	r2, #2
   1e1b2:	9302      	str	r3, [sp, #8]
   1e1b4:	2300      	movs	r3, #0
   1e1b6:	4934      	ldr	r1, [pc, #208]	; (1e288 <gatt_indicate+0xf0>)
   1e1b8:	4618      	mov	r0, r3
   1e1ba:	e9cd 3300 	strd	r3, r3, [sp]
   1e1be:	f010 fb7f 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1e1c2:	f04f 35ff 	mov.w	r5, #4294967295
}
   1e1c6:	4628      	mov	r0, r5
   1e1c8:	b004      	add	sp, #16
   1e1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1e1ce:	2202      	movs	r2, #2
   1e1d0:	4638      	mov	r0, r7
   1e1d2:	6869      	ldr	r1, [r5, #4]
   1e1d4:	f010 fc50 	bl	2ea78 <bt_gatt_is_subscribed>
   1e1d8:	4603      	mov	r3, r0
   1e1da:	b950      	cbnz	r0, 1e1f2 <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1e1dc:	4a2b      	ldr	r2, [pc, #172]	; (1e28c <gatt_indicate+0xf4>)
   1e1de:	492a      	ldr	r1, [pc, #168]	; (1e288 <gatt_indicate+0xf0>)
   1e1e0:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1e1e4:	9000      	str	r0, [sp, #0]
   1e1e6:	2202      	movs	r2, #2
   1e1e8:	f010 fb6a 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1e1ec:	f06f 0515 	mvn.w	r5, #21
   1e1f0:	e7e9      	b.n	1e1c6 <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e1f2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1e1f6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1e1f8:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e1fa:	f7ff fb61 	bl	1d8c0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1e1fe:	3602      	adds	r6, #2
	if (!req) {
   1e200:	4604      	mov	r4, r0
   1e202:	b1c8      	cbz	r0, 1e238 <gatt_indicate+0xa0>
	req->att_op = op;
   1e204:	211d      	movs	r1, #29
	req->func = func;
   1e206:	4b22      	ldr	r3, [pc, #136]	; (1e290 <gatt_indicate+0xf8>)
	req->len = len;
   1e208:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e20a:	4632      	mov	r2, r6
	req->att_op = op;
   1e20c:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1e20e:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1e212:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1e214:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e216:	4638      	mov	r0, r7
   1e218:	f7ff f886 	bl	1d328 <bt_att_create_pdu>
	if (!buf) {
   1e21c:	4606      	mov	r6, r0
   1e21e:	b970      	cbnz	r0, 1e23e <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   1e220:	4b1c      	ldr	r3, [pc, #112]	; (1e294 <gatt_indicate+0xfc>)
   1e222:	9000      	str	r0, [sp, #0]
   1e224:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e228:	2202      	movs	r2, #2
   1e22a:	4603      	mov	r3, r0
   1e22c:	4916      	ldr	r1, [pc, #88]	; (1e288 <gatt_indicate+0xf0>)
   1e22e:	f010 fb47 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   1e232:	4620      	mov	r0, r4
   1e234:	f7ff fb68 	bl	1d908 <bt_att_req_free>
		return -ENOMEM;
   1e238:	f06f 050b 	mvn.w	r5, #11
   1e23c:	e7c3      	b.n	1e1c6 <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1e23e:	2301      	movs	r3, #1
   1e240:	4642      	mov	r2, r8
   1e242:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1e244:	f106 0a0c 	add.w	sl, r6, #12
   1e248:	f010 fa1c 	bl	2e684 <bt_att_set_tx_meta_data>
   1e24c:	2102      	movs	r1, #2
   1e24e:	4650      	mov	r0, sl
   1e250:	f011 f8ef 	bl	2f432 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1e254:	4680      	mov	r8, r0
   1e256:	f828 9b02 	strh.w	r9, [r8], #2
   1e25a:	8aa9      	ldrh	r1, [r5, #20]
   1e25c:	4650      	mov	r0, sl
   1e25e:	f011 f8e8 	bl	2f432 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e262:	8aaa      	ldrh	r2, [r5, #20]
   1e264:	6929      	ldr	r1, [r5, #16]
   1e266:	4640      	mov	r0, r8
   1e268:	f013 fae1 	bl	3182e <memcpy>
	err = bt_att_req_send(conn, req);
   1e26c:	4621      	mov	r1, r4
   1e26e:	4638      	mov	r0, r7
	req->buf = buf;
   1e270:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1e272:	f010 f9cf 	bl	2e614 <bt_att_req_send>
	if (err) {
   1e276:	4605      	mov	r5, r0
   1e278:	2800      	cmp	r0, #0
   1e27a:	d0a4      	beq.n	1e1c6 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1e27c:	4620      	mov	r0, r4
   1e27e:	f7ff fb43 	bl	1d908 <bt_att_req_free>
   1e282:	e7a0      	b.n	1e1c6 <gatt_indicate+0x2e>
   1e284:	00037705 	.word	0x00037705
   1e288:	00033038 	.word	0x00033038
   1e28c:	0003771b 	.word	0x0003771b
   1e290:	0002e6b5 	.word	0x0002e6b5
   1e294:	00037746 	.word	0x00037746

0001e298 <bt_gatt_indicate>:
{
   1e298:	b530      	push	{r4, r5, lr}
   1e29a:	4604      	mov	r4, r0
   1e29c:	460d      	mov	r5, r1
   1e29e:	b08b      	sub	sp, #44	; 0x2c
   1e2a0:	4b36      	ldr	r3, [pc, #216]	; (1e37c <bt_gatt_indicate+0xe4>)
   1e2a2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e2a6:	075a      	lsls	r2, r3, #29
   1e2a8:	d561      	bpl.n	1e36e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e2aa:	b110      	cbz	r0, 1e2b2 <bt_gatt_indicate+0x1a>
   1e2ac:	7b43      	ldrb	r3, [r0, #13]
   1e2ae:	2b07      	cmp	r3, #7
   1e2b0:	d160      	bne.n	1e374 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1e2b2:	6868      	ldr	r0, [r5, #4]
   1e2b4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e2b6:	f7ff fe57 	bl	1df68 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e2ba:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e2bc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e2c0:	b33a      	cbz	r2, 1e312 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e2c2:	a905      	add	r1, sp, #20
   1e2c4:	9102      	str	r1, [sp, #8]
   1e2c6:	492e      	ldr	r1, [pc, #184]	; (1e380 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   1e2c8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e2ca:	9101      	str	r1, [sp, #4]
   1e2cc:	2101      	movs	r1, #1
   1e2ce:	9100      	str	r1, [sp, #0]
   1e2d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e2d4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e2d6:	f7ff fe77 	bl	1dfc8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e2da:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e2dc:	b91b      	cbnz	r3, 1e2e6 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1e2de:	f06f 0001 	mvn.w	r0, #1
}
   1e2e2:	b00b      	add	sp, #44	; 0x2c
   1e2e4:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e2e6:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e2e8:	9b05      	ldr	r3, [sp, #20]
   1e2ea:	a904      	add	r1, sp, #16
   1e2ec:	6818      	ldr	r0, [r3, #0]
   1e2ee:	2300      	movs	r3, #0
   1e2f0:	f88d 3010 	strb.w	r3, [sp, #16]
   1e2f4:	f642 0303 	movw	r3, #10243	; 0x2803
   1e2f8:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e2fc:	f00e ff9d 	bl	2d23a <bt_uuid_cmp>
   1e300:	b970      	cbnz	r0, 1e320 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e302:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1e304:	68c3      	ldr	r3, [r0, #12]
   1e306:	799b      	ldrb	r3, [r3, #6]
   1e308:	069b      	lsls	r3, r3, #26
   1e30a:	d405      	bmi.n	1e318 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1e30c:	f06f 0015 	mvn.w	r0, #21
   1e310:	e7e7      	b.n	1e2e2 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1e312:	2800      	cmp	r0, #0
   1e314:	d1e8      	bne.n	1e2e8 <bt_gatt_indicate+0x50>
   1e316:	e7e2      	b.n	1e2de <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e318:	f010 fb26 	bl	2e968 <bt_gatt_attr_value_handle>
   1e31c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1e320:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e324:	b13c      	cbz	r4, 1e336 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1e326:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1e328:	4601      	mov	r1, r0
   1e32a:	462a      	mov	r2, r5
   1e32c:	4620      	mov	r0, r4
		params->_ref = 1;
   1e32e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1e330:	f7ff ff32 	bl	1e198 <gatt_indicate>
   1e334:	e7d5      	b.n	1e2e2 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1e336:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e33a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1e33c:	2302      	movs	r3, #2
   1e33e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e342:	f642 1302 	movw	r3, #10498	; 0x2902
   1e346:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e34a:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1e34c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e34e:	9302      	str	r3, [sp, #8]
   1e350:	4b0c      	ldr	r3, [pc, #48]	; (1e384 <bt_gatt_indicate+0xec>)
   1e352:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e356:	9301      	str	r3, [sp, #4]
   1e358:	2301      	movs	r3, #1
   1e35a:	aa04      	add	r2, sp, #16
   1e35c:	9300      	str	r3, [sp, #0]
   1e35e:	4623      	mov	r3, r4
	data.ind_params = params;
   1e360:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e362:	f88d 4010 	strb.w	r4, [sp, #16]
   1e366:	f7ff fe2f 	bl	1dfc8 <bt_gatt_foreach_attr_type>
	return data.err;
   1e36a:	9807      	ldr	r0, [sp, #28]
   1e36c:	e7b9      	b.n	1e2e2 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1e36e:	f06f 000a 	mvn.w	r0, #10
   1e372:	e7b6      	b.n	1e2e2 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1e374:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e378:	e7b3      	b.n	1e2e2 <bt_gatt_indicate+0x4a>
   1e37a:	bf00      	nop
   1e37c:	200080cc 	.word	0x200080cc
   1e380:	0002e6db 	.word	0x0002e6db
   1e384:	0001e6c1 	.word	0x0001e6c1

0001e388 <sc_process>:
{
   1e388:	4603      	mov	r3, r0
   1e38a:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e38c:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e390:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e394:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e396:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e39a:	e8d4 2fef 	ldaex	r2, [r4]
   1e39e:	f022 0201 	bic.w	r2, r2, #1
   1e3a2:	e8c4 2fe0 	stlex	r0, r2, [r4]
   1e3a6:	2800      	cmp	r0, #0
   1e3a8:	d1f7      	bne.n	1e39a <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e3aa:	4a0d      	ldr	r2, [pc, #52]	; (1e3e0 <sc_process+0x58>)
	sc->start = 0U;
   1e3ac:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e3ae:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1e3b2:	4a0c      	ldr	r2, [pc, #48]	; (1e3e4 <sc_process+0x5c>)
	sc->start = 0U;
   1e3b4:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   1e3b8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1e3bc:	aa01      	add	r2, sp, #4
   1e3be:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1e3c2:	2204      	movs	r2, #4
	sc->end = 0U;
   1e3c4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   1e3c8:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1e3cc:	f7ff ff64 	bl	1e298 <bt_gatt_indicate>
   1e3d0:	b918      	cbnz	r0, 1e3da <sc_process+0x52>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1e3d2:	2101      	movs	r1, #1
   1e3d4:	4620      	mov	r0, r4
   1e3d6:	f010 faa3 	bl	2e920 <atomic_set_bit>
}
   1e3da:	b002      	add	sp, #8
   1e3dc:	bd10      	pop	{r4, pc}
   1e3de:	bf00      	nop
   1e3e0:	00033db0 	.word	0x00033db0
   1e3e4:	0001de7d 	.word	0x0001de7d

0001e3e8 <update_ccc>:
{
   1e3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e3ec:	4b3e      	ldr	r3, [pc, #248]	; (1e4e8 <update_ccc+0x100>)
{
   1e3ee:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   1e3f0:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e3f2:	6882      	ldr	r2, [r0, #8]
{
   1e3f4:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e3f6:	429a      	cmp	r2, r3
{
   1e3f8:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e3fa:	d170      	bne.n	1e4de <update_ccc+0xf6>
	ccc = attr->user_data;
   1e3fc:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e400:	f108 0601 	add.w	r6, r8, #1
   1e404:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   1e408:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e40c:	b1d3      	cbz	r3, 1e444 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e40e:	4632      	mov	r2, r6
   1e410:	4620      	mov	r0, r4
   1e412:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   1e416:	f00f fbbb 	bl	2db90 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1e41a:	b198      	cbz	r0, 1e444 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1e41c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e420:	4629      	mov	r1, r5
   1e422:	4620      	mov	r0, r4
   1e424:	f010 faf4 	bl	2ea10 <bt_gatt_check_perm>
		if (err) {
   1e428:	b308      	cbz	r0, 1e46e <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1e42a:	2803      	cmp	r0, #3
   1e42c:	d10e      	bne.n	1e44c <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   1e42e:	4b2f      	ldr	r3, [pc, #188]	; (1e4ec <update_ccc+0x104>)
   1e430:	2202      	movs	r2, #2
   1e432:	9302      	str	r3, [sp, #8]
   1e434:	2300      	movs	r3, #0
   1e436:	492e      	ldr	r1, [pc, #184]	; (1e4f0 <update_ccc+0x108>)
   1e438:	4618      	mov	r0, r3
   1e43a:	e9cd 3300 	strd	r3, r3, [sp]
   1e43e:	9503      	str	r5, [sp, #12]
   1e440:	f010 fa3e 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e444:	360a      	adds	r6, #10
   1e446:	454e      	cmp	r6, r9
   1e448:	d1de      	bne.n	1e408 <update_ccc+0x20>
   1e44a:	e048      	b.n	1e4de <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   1e44c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1e44e:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1e450:	bf0c      	ite	eq
   1e452:	f04f 0a03 	moveq.w	sl, #3
   1e456:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   1e45a:	f00f fb97 	bl	2db8c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1e45e:	4582      	cmp	sl, r0
   1e460:	d905      	bls.n	1e46e <update_ccc+0x86>
				if (data->sec < sec) {
   1e462:	793b      	ldrb	r3, [r7, #4]
   1e464:	4553      	cmp	r3, sl
   1e466:	d2ed      	bcs.n	1e444 <update_ccc+0x5c>
					data->sec = sec;
   1e468:	f887 a004 	strb.w	sl, [r7, #4]
   1e46c:	e7ea      	b.n	1e444 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1e46e:	4641      	mov	r1, r8
   1e470:	4628      	mov	r0, r5
   1e472:	f010 f911 	bl	2e698 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1e476:	4b1f      	ldr	r3, [pc, #124]	; (1e4f4 <update_ccc+0x10c>)
   1e478:	4598      	cmp	r8, r3
   1e47a:	d130      	bne.n	1e4de <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1e47c:	7a20      	ldrb	r0, [r4, #8]
   1e47e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1e482:	f7ff fb49 	bl	1db18 <find_sc_cfg>
	if (!cfg) {
   1e486:	b350      	cbz	r0, 1e4de <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   1e488:	8902      	ldrh	r2, [r0, #8]
   1e48a:	8943      	ldrh	r3, [r0, #10]
   1e48c:	ea52 0103 	orrs.w	r1, r2, r3
   1e490:	d025      	beq.n	1e4de <update_ccc+0xf6>
	index = bt_conn_index(conn);
   1e492:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1e494:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1e498:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   1e49c:	f7fd fe98 	bl	1c1d0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1e4a0:	2318      	movs	r3, #24
   1e4a2:	4915      	ldr	r1, [pc, #84]	; (1e4f8 <update_ccc+0x110>)
   1e4a4:	4a15      	ldr	r2, [pc, #84]	; (1e4fc <update_ccc+0x114>)
   1e4a6:	fb03 1300 	mla	r3, r3, r0, r1
   1e4aa:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1e4ac:	4a14      	ldr	r2, [pc, #80]	; (1e500 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e4ae:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   1e4b0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1e4b2:	aa05      	add	r2, sp, #20
   1e4b4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1e4b6:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e4b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1e4bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1e4c0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e4c2:	4620      	mov	r0, r4
   1e4c4:	f7ff fee8 	bl	1e298 <bt_gatt_indicate>
   1e4c8:	b148      	cbz	r0, 1e4de <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   1e4ca:	4b0e      	ldr	r3, [pc, #56]	; (1e504 <update_ccc+0x11c>)
   1e4cc:	2201      	movs	r2, #1
   1e4ce:	9302      	str	r3, [sp, #8]
   1e4d0:	2300      	movs	r3, #0
   1e4d2:	4907      	ldr	r1, [pc, #28]	; (1e4f0 <update_ccc+0x108>)
   1e4d4:	4618      	mov	r0, r3
   1e4d6:	e9cd 3300 	strd	r3, r3, [sp]
   1e4da:	f010 f9f1 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
}
   1e4de:	2001      	movs	r0, #1
   1e4e0:	b006      	add	sp, #24
   1e4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e4e6:	bf00      	nop
   1e4e8:	0001dbcd 	.word	0x0001dbcd
   1e4ec:	0003776d 	.word	0x0003776d
   1e4f0:	00033038 	.word	0x00033038
   1e4f4:	200085bc 	.word	0x200085bc
   1e4f8:	20030abc 	.word	0x20030abc
   1e4fc:	00033db0 	.word	0x00033db0
   1e500:	0002e935 	.word	0x0002e935
   1e504:	00037781 	.word	0x00037781

0001e508 <gatt_notify>:
{
   1e508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e50c:	4614      	mov	r4, r2
   1e50e:	4688      	mov	r8, r1
   1e510:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e512:	2294      	movs	r2, #148	; 0x94
   1e514:	6861      	ldr	r1, [r4, #4]
{
   1e516:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e518:	f010 fa7a 	bl	2ea10 <bt_gatt_check_perm>
   1e51c:	b170      	cbz	r0, 1e53c <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1e51e:	4b2a      	ldr	r3, [pc, #168]	; (1e5c8 <gatt_notify+0xc0>)
   1e520:	2202      	movs	r2, #2
   1e522:	9302      	str	r3, [sp, #8]
   1e524:	2300      	movs	r3, #0
   1e526:	4929      	ldr	r1, [pc, #164]	; (1e5cc <gatt_notify+0xc4>)
   1e528:	4618      	mov	r0, r3
   1e52a:	e9cd 3300 	strd	r3, r3, [sp]
   1e52e:	f010 f9c7 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1e532:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e536:	b005      	add	sp, #20
   1e538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1e53c:	2201      	movs	r2, #1
   1e53e:	4630      	mov	r0, r6
   1e540:	6861      	ldr	r1, [r4, #4]
   1e542:	f010 fa99 	bl	2ea78 <bt_gatt_is_subscribed>
   1e546:	4603      	mov	r3, r0
   1e548:	b950      	cbnz	r0, 1e560 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1e54a:	4a21      	ldr	r2, [pc, #132]	; (1e5d0 <gatt_notify+0xc8>)
   1e54c:	9000      	str	r0, [sp, #0]
   1e54e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1e552:	491e      	ldr	r1, [pc, #120]	; (1e5cc <gatt_notify+0xc4>)
   1e554:	2202      	movs	r2, #2
   1e556:	f010 f9b3 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1e55a:	f06f 0015 	mvn.w	r0, #21
   1e55e:	e7ea      	b.n	1e536 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1e560:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1e562:	211b      	movs	r1, #27
   1e564:	4630      	mov	r0, r6
   1e566:	3202      	adds	r2, #2
   1e568:	f7fe fede 	bl	1d328 <bt_att_create_pdu>
	if (!buf) {
   1e56c:	4605      	mov	r5, r0
   1e56e:	b958      	cbnz	r0, 1e588 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   1e570:	4b18      	ldr	r3, [pc, #96]	; (1e5d4 <gatt_notify+0xcc>)
   1e572:	9000      	str	r0, [sp, #0]
   1e574:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e578:	2202      	movs	r2, #2
   1e57a:	4603      	mov	r3, r0
   1e57c:	4913      	ldr	r1, [pc, #76]	; (1e5cc <gatt_notify+0xc4>)
   1e57e:	f010 f99f 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1e582:	f06f 000b 	mvn.w	r0, #11
   1e586:	e7d6      	b.n	1e536 <gatt_notify+0x2e>
   1e588:	f100 090c 	add.w	r9, r0, #12
   1e58c:	2102      	movs	r1, #2
   1e58e:	4648      	mov	r0, r9
   1e590:	f010 ff4f 	bl	2f432 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1e594:	4607      	mov	r7, r0
   1e596:	f827 8b02 	strh.w	r8, [r7], #2
   1e59a:	89a1      	ldrh	r1, [r4, #12]
   1e59c:	4648      	mov	r0, r9
   1e59e:	f010 ff48 	bl	2f432 <net_buf_simple_add>
   1e5a2:	89a2      	ldrh	r2, [r4, #12]
   1e5a4:	68a1      	ldr	r1, [r4, #8]
   1e5a6:	4638      	mov	r0, r7
   1e5a8:	f013 f941 	bl	3182e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1e5ac:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1e5b0:	4628      	mov	r0, r5
   1e5b2:	2301      	movs	r3, #1
   1e5b4:	f010 f866 	bl	2e684 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1e5b8:	4629      	mov	r1, r5
   1e5ba:	4630      	mov	r0, r6
}
   1e5bc:	b005      	add	sp, #20
   1e5be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1e5c2:	f00f bfe9 	b.w	2e598 <bt_att_send>
   1e5c6:	bf00      	nop
   1e5c8:	00037705 	.word	0x00037705
   1e5cc:	00033038 	.word	0x00033038
   1e5d0:	0003771b 	.word	0x0003771b
   1e5d4:	0003779e 	.word	0x0003779e

0001e5d8 <bt_gatt_notify_cb>:
{
   1e5d8:	b530      	push	{r4, r5, lr}
   1e5da:	4604      	mov	r4, r0
   1e5dc:	460d      	mov	r5, r1
   1e5de:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e5e0:	4b34      	ldr	r3, [pc, #208]	; (1e6b4 <bt_gatt_notify_cb+0xdc>)
   1e5e2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e5e6:	075a      	lsls	r2, r3, #29
   1e5e8:	d55d      	bpl.n	1e6a6 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e5ea:	b110      	cbz	r0, 1e5f2 <bt_gatt_notify_cb+0x1a>
   1e5ec:	7b43      	ldrb	r3, [r0, #13]
   1e5ee:	2b07      	cmp	r3, #7
   1e5f0:	d15c      	bne.n	1e6ac <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1e5f2:	6868      	ldr	r0, [r5, #4]
   1e5f4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e5f6:	f7ff fcb7 	bl	1df68 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e5fa:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e5fc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e600:	b33a      	cbz	r2, 1e652 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e602:	a905      	add	r1, sp, #20
   1e604:	9102      	str	r1, [sp, #8]
   1e606:	492c      	ldr	r1, [pc, #176]	; (1e6b8 <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   1e608:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e60a:	9101      	str	r1, [sp, #4]
   1e60c:	2101      	movs	r1, #1
   1e60e:	9100      	str	r1, [sp, #0]
   1e610:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e614:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e616:	f7ff fcd7 	bl	1dfc8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e61a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e61c:	b91b      	cbnz	r3, 1e626 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1e61e:	f06f 0001 	mvn.w	r0, #1
}
   1e622:	b00b      	add	sp, #44	; 0x2c
   1e624:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e626:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e628:	9b05      	ldr	r3, [sp, #20]
   1e62a:	a904      	add	r1, sp, #16
   1e62c:	6818      	ldr	r0, [r3, #0]
   1e62e:	2300      	movs	r3, #0
   1e630:	f88d 3010 	strb.w	r3, [sp, #16]
   1e634:	f642 0303 	movw	r3, #10243	; 0x2803
   1e638:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e63c:	f00e fdfd 	bl	2d23a <bt_uuid_cmp>
   1e640:	b970      	cbnz	r0, 1e660 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e642:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1e644:	68c3      	ldr	r3, [r0, #12]
   1e646:	799b      	ldrb	r3, [r3, #6]
   1e648:	06db      	lsls	r3, r3, #27
   1e64a:	d405      	bmi.n	1e658 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   1e64c:	f06f 0015 	mvn.w	r0, #21
   1e650:	e7e7      	b.n	1e622 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1e652:	2800      	cmp	r0, #0
   1e654:	d1e8      	bne.n	1e628 <bt_gatt_notify_cb+0x50>
   1e656:	e7e2      	b.n	1e61e <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e658:	f010 f986 	bl	2e968 <bt_gatt_attr_value_handle>
   1e65c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1e660:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e664:	b12c      	cbz	r4, 1e672 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1e666:	4601      	mov	r1, r0
   1e668:	462a      	mov	r2, r5
   1e66a:	4620      	mov	r0, r4
   1e66c:	f7ff ff4c 	bl	1e508 <gatt_notify>
   1e670:	e7d7      	b.n	1e622 <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   1e672:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e676:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1e67a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1e67c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e67e:	f8ad 2012 	strh.w	r2, [sp, #18]
   1e682:	aa05      	add	r2, sp, #20
   1e684:	9202      	str	r2, [sp, #8]
   1e686:	4a0d      	ldr	r2, [pc, #52]	; (1e6bc <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   1e688:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e68c:	e9cd 3200 	strd	r3, r2, [sp]
   1e690:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e694:	4623      	mov	r3, r4
   1e696:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1e698:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e69a:	f88d 4010 	strb.w	r4, [sp, #16]
   1e69e:	f7ff fc93 	bl	1dfc8 <bt_gatt_foreach_attr_type>
	return data.err;
   1e6a2:	9807      	ldr	r0, [sp, #28]
   1e6a4:	e7bd      	b.n	1e622 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1e6a6:	f06f 000a 	mvn.w	r0, #10
   1e6aa:	e7ba      	b.n	1e622 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   1e6ac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e6b0:	e7b7      	b.n	1e622 <bt_gatt_notify_cb+0x4a>
   1e6b2:	bf00      	nop
   1e6b4:	200080cc 	.word	0x200080cc
   1e6b8:	0002e6db 	.word	0x0002e6db
   1e6bc:	0001e6c1 	.word	0x0001e6c1

0001e6c0 <notify_cb>:
{
   1e6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e6c4:	4b46      	ldr	r3, [pc, #280]	; (1e7e0 <notify_cb+0x120>)
{
   1e6c6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e6c8:	6882      	ldr	r2, [r0, #8]
{
   1e6ca:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e6cc:	429a      	cmp	r2, r3
{
   1e6ce:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e6d0:	d136      	bne.n	1e740 <notify_cb+0x80>
	ccc = attr->user_data;
   1e6d2:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1e6d6:	4b43      	ldr	r3, [pc, #268]	; (1e7e4 <notify_cb+0x124>)
   1e6d8:	459a      	cmp	sl, r3
   1e6da:	d119      	bne.n	1e710 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e6dc:	2600      	movs	r6, #0
   1e6de:	4c42      	ldr	r4, [pc, #264]	; (1e7e8 <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e6e0:	4f42      	ldr	r7, [pc, #264]	; (1e7ec <notify_cb+0x12c>)
   1e6e2:	4639      	mov	r1, r7
   1e6e4:	4620      	mov	r0, r4
   1e6e6:	f010 f84f 	bl	2e788 <bt_addr_le_eq>
   1e6ea:	b978      	cbnz	r0, 1e70c <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1e6ec:	2207      	movs	r2, #7
   1e6ee:	4621      	mov	r1, r4
   1e6f0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1e6f4:	f7fd fec6 	bl	1c484 <bt_conn_lookup_state_le>
			if (!conn) {
   1e6f8:	bb38      	cbnz	r0, 1e74a <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   1e6fa:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1e6fc:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1e6fe:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1e700:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1e704:	8853      	ldrh	r3, [r2, #2]
   1e706:	8812      	ldrh	r2, [r2, #0]
   1e708:	f7ff fad8 	bl	1dcbc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e70c:	340c      	adds	r4, #12
   1e70e:	b1d6      	cbz	r6, 1e746 <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e710:	f10a 0601 	add.w	r6, sl, #1
   1e714:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   1e718:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1e71c:	89ab      	ldrh	r3, [r5, #12]
   1e71e:	429a      	cmp	r2, r3
   1e720:	d10b      	bne.n	1e73a <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1e722:	4631      	mov	r1, r6
   1e724:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1e728:	f7fd fe6c 	bl	1c404 <bt_conn_lookup_addr_le>
		if (!conn) {
   1e72c:	4604      	mov	r4, r0
   1e72e:	b120      	cbz	r0, 1e73a <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   1e730:	7b43      	ldrb	r3, [r0, #13]
   1e732:	2b07      	cmp	r3, #7
   1e734:	d00c      	beq.n	1e750 <notify_cb+0x90>
			bt_conn_unref(conn);
   1e736:	f00f f99e 	bl	2da76 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e73a:	360a      	adds	r6, #10
   1e73c:	45b3      	cmp	fp, r6
   1e73e:	d1eb      	bne.n	1e718 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   1e740:	f04f 0901 	mov.w	r9, #1
   1e744:	e048      	b.n	1e7d8 <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e746:	2601      	movs	r6, #1
   1e748:	e7cb      	b.n	1e6e2 <notify_cb+0x22>
			bt_conn_unref(conn);
   1e74a:	f00f f994 	bl	2da76 <bt_conn_unref>
   1e74e:	e7dd      	b.n	1e70c <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1e750:	f8da 3020 	ldr.w	r3, [sl, #32]
   1e754:	b123      	cbz	r3, 1e760 <notify_cb+0xa0>
   1e756:	4641      	mov	r1, r8
   1e758:	4798      	blx	r3
   1e75a:	b908      	cbnz	r0, 1e760 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1e75c:	4620      	mov	r0, r4
   1e75e:	e7ea      	b.n	1e736 <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e760:	2294      	movs	r2, #148	; 0x94
   1e762:	4641      	mov	r1, r8
   1e764:	4620      	mov	r0, r4
   1e766:	f010 f953 	bl	2ea10 <bt_gatt_check_perm>
   1e76a:	4681      	mov	r9, r0
   1e76c:	b150      	cbz	r0, 1e784 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   1e76e:	4b20      	ldr	r3, [pc, #128]	; (1e7f0 <notify_cb+0x130>)
   1e770:	2202      	movs	r2, #2
   1e772:	9302      	str	r3, [sp, #8]
   1e774:	2300      	movs	r3, #0
   1e776:	491f      	ldr	r1, [pc, #124]	; (1e7f4 <notify_cb+0x134>)
   1e778:	4618      	mov	r0, r3
   1e77a:	e9cd 3300 	strd	r3, r3, [sp]
   1e77e:	f010 f89f 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   1e782:	e7eb      	b.n	1e75c <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e784:	89ab      	ldrh	r3, [r5, #12]
   1e786:	2b02      	cmp	r3, #2
   1e788:	d115      	bne.n	1e7b6 <notify_cb+0xf6>
   1e78a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e78e:	079a      	lsls	r2, r3, #30
   1e790:	d405      	bmi.n	1e79e <notify_cb+0xde>
		bt_conn_unref(conn);
   1e792:	4620      	mov	r0, r4
   1e794:	f00f f96f 	bl	2da76 <bt_conn_unref>
		data->err = 0;
   1e798:	2300      	movs	r3, #0
   1e79a:	60ab      	str	r3, [r5, #8]
   1e79c:	e7cd      	b.n	1e73a <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1e79e:	4620      	mov	r0, r4
   1e7a0:	692a      	ldr	r2, [r5, #16]
   1e7a2:	88a9      	ldrh	r1, [r5, #4]
   1e7a4:	f7ff fcf8 	bl	1e198 <gatt_indicate>
			if (err == 0) {
   1e7a8:	4607      	mov	r7, r0
   1e7aa:	b980      	cbnz	r0, 1e7ce <notify_cb+0x10e>
				data->ind_params->_ref++;
   1e7ac:	692a      	ldr	r2, [r5, #16]
   1e7ae:	7d93      	ldrb	r3, [r2, #22]
   1e7b0:	3301      	adds	r3, #1
   1e7b2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1e7b4:	e7ed      	b.n	1e792 <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e7b6:	2b01      	cmp	r3, #1
   1e7b8:	d1eb      	bne.n	1e792 <notify_cb+0xd2>
   1e7ba:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e7be:	07db      	lsls	r3, r3, #31
   1e7c0:	d5e7      	bpl.n	1e792 <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1e7c2:	4620      	mov	r0, r4
   1e7c4:	692a      	ldr	r2, [r5, #16]
   1e7c6:	88a9      	ldrh	r1, [r5, #4]
   1e7c8:	f7ff fe9e 	bl	1e508 <gatt_notify>
   1e7cc:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1e7ce:	4620      	mov	r0, r4
   1e7d0:	f00f f951 	bl	2da76 <bt_conn_unref>
		if (err < 0) {
   1e7d4:	2f00      	cmp	r7, #0
   1e7d6:	dadf      	bge.n	1e798 <notify_cb+0xd8>
}
   1e7d8:	4648      	mov	r0, r9
   1e7da:	b005      	add	sp, #20
   1e7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7e0:	0001dbcd 	.word	0x0001dbcd
   1e7e4:	200085bc 	.word	0x200085bc
   1e7e8:	20030f0d 	.word	0x20030f0d
   1e7ec:	0003668a 	.word	0x0003668a
   1e7f0:	00037705 	.word	0x00037705
   1e7f4:	00033038 	.word	0x00033038

0001e7f8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1e7f8:	b510      	push	{r4, lr}
   1e7fa:	b086      	sub	sp, #24
   1e7fc:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1e7fe:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1e800:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e802:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e806:	4a0f      	ldr	r2, [pc, #60]	; (1e844 <bt_gatt_connected+0x4c>)
   1e808:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   1e80a:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e80e:	f010 f8f2 	bl	2e9f6 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   1e812:	4620      	mov	r0, r4
   1e814:	f00f f9ba 	bl	2db8c <bt_conn_get_security>
   1e818:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1e81c:	4288      	cmp	r0, r1
   1e81e:	d20e      	bcs.n	1e83e <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   1e820:	4620      	mov	r0, r4
   1e822:	f00f f987 	bl	2db34 <bt_conn_set_security>

		if (err) {
   1e826:	b150      	cbz	r0, 1e83e <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1e828:	4b07      	ldr	r3, [pc, #28]	; (1e848 <bt_gatt_connected+0x50>)
   1e82a:	9003      	str	r0, [sp, #12]
   1e82c:	9302      	str	r3, [sp, #8]
   1e82e:	2300      	movs	r3, #0
   1e830:	2202      	movs	r2, #2
   1e832:	4618      	mov	r0, r3
   1e834:	e9cd 3300 	strd	r3, r3, [sp]
   1e838:	4904      	ldr	r1, [pc, #16]	; (1e84c <bt_gatt_connected+0x54>)
   1e83a:	f010 f841 	bl	2e8c0 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1e83e:	b006      	add	sp, #24
   1e840:	bd10      	pop	{r4, pc}
   1e842:	bf00      	nop
   1e844:	0001e3e9 	.word	0x0001e3e9
   1e848:	000377c7 	.word	0x000377c7
   1e84c:	00033038 	.word	0x00033038

0001e850 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e852:	4605      	mov	r5, r0
   1e854:	460e      	mov	r6, r1
   1e856:	4617      	mov	r7, r2
	return list->head;
   1e858:	4b06      	ldr	r3, [pc, #24]	; (1e874 <bt_gatt_att_max_mtu_changed+0x24>)
   1e85a:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e85c:	b14c      	cbz	r4, 1e872 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1e85e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e862:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1e864:	b11b      	cbz	r3, 1e86e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1e866:	463a      	mov	r2, r7
   1e868:	4631      	mov	r1, r6
   1e86a:	4628      	mov	r0, r5
   1e86c:	4798      	blx	r3
	return node->next;
   1e86e:	6864      	ldr	r4, [r4, #4]
   1e870:	e7f4      	b.n	1e85c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1e872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e874:	20030afc 	.word	0x20030afc

0001e878 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   1e878:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1e87a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1e87c:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e87e:	466b      	mov	r3, sp
   1e880:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e884:	4a03      	ldr	r2, [pc, #12]	; (1e894 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1e886:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e88a:	f010 f8b4 	bl	2e9f6 <bt_gatt_foreach_attr>
}
   1e88e:	b003      	add	sp, #12
   1e890:	f85d fb04 	ldr.w	pc, [sp], #4
   1e894:	0001e3e9 	.word	0x0001e3e9

0001e898 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1e898:	b570      	push	{r4, r5, r6, lr}
   1e89a:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e89c:	4603      	mov	r3, r0
   1e89e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e8a2:	2001      	movs	r0, #1
   1e8a4:	4a0d      	ldr	r2, [pc, #52]	; (1e8dc <bt_gatt_disconnected+0x44>)
   1e8a6:	f010 f8a6 	bl	2e9f6 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1e8aa:	4620      	mov	r0, r4
   1e8ac:	f7ff f906 	bl	1dabc <find_cf_cfg>
	if (!cfg) {
   1e8b0:	4605      	mov	r5, r0
   1e8b2:	b188      	cbz	r0, 1e8d8 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e8b4:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1e8b8:	4631      	mov	r1, r6
   1e8ba:	7a20      	ldrb	r0, [r4, #8]
   1e8bc:	f00e fe0a 	bl	2d4d4 <bt_addr_le_is_bonded>
   1e8c0:	b920      	cbnz	r0, 1e8cc <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1e8c2:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1e8c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1e8c8:	f7ff b9e4 	b.w	1dc94 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e8cc:	4631      	mov	r1, r6
   1e8ce:	1c68      	adds	r0, r5, #1
}
   1e8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e8d4:	f00f bf60 	b.w	2e798 <bt_addr_le_copy>
}
   1e8d8:	bd70      	pop	{r4, r5, r6, pc}
   1e8da:	bf00      	nop
   1e8dc:	0001ddc9 	.word	0x0001ddc9

0001e8e0 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1e8e0:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e8e2:	4b05      	ldr	r3, [pc, #20]	; (1e8f8 <smp_find+0x18>)
{
   1e8e4:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e8e6:	4618      	mov	r0, r3
   1e8e8:	f010 f991 	bl	2ec0e <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1e8ec:	3b04      	subs	r3, #4
   1e8ee:	2800      	cmp	r0, #0
}
   1e8f0:	bf14      	ite	ne
   1e8f2:	4618      	movne	r0, r3
   1e8f4:	2000      	moveq	r0, #0
   1e8f6:	bd08      	pop	{r3, pc}
   1e8f8:	2000a204 	.word	0x2000a204

0001e8fc <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1e8fc:	4b08      	ldr	r3, [pc, #32]	; (1e920 <latch_auth_cb+0x24>)
   1e8fe:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e902:	681a      	ldr	r2, [r3, #0]
   1e904:	4b07      	ldr	r3, [pc, #28]	; (1e924 <latch_auth_cb+0x28>)
   1e906:	e8d0 1fef 	ldaex	r1, [r0]
   1e90a:	4299      	cmp	r1, r3
   1e90c:	d104      	bne.n	1e918 <latch_auth_cb+0x1c>
   1e90e:	e8c0 2fec 	stlex	ip, r2, [r0]
   1e912:	f1bc 0f00 	cmp.w	ip, #0
   1e916:	d1f6      	bne.n	1e906 <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e918:	e8d0 0faf 	lda	r0, [r0]
}
   1e91c:	4770      	bx	lr
   1e91e:	bf00      	nop
   1e920:	200309e4 	.word	0x200309e4
   1e924:	2000a200 	.word	0x2000a200

0001e928 <get_io_capa>:
{
   1e928:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e92a:	f7ff ffe7 	bl	1e8fc <latch_auth_cb>
	if (!smp_auth_cb) {
   1e92e:	4603      	mov	r3, r0
   1e930:	b1c8      	cbz	r0, 1e966 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e932:	e9d0 1200 	ldrd	r1, r2, [r0]
   1e936:	b921      	cbnz	r1, 1e942 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1e938:	2a00      	cmp	r2, #0
   1e93a:	bf0c      	ite	eq
   1e93c:	2003      	moveq	r0, #3
   1e93e:	2002      	movne	r0, #2
   1e940:	e010      	b.n	1e964 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e942:	b132      	cbz	r2, 1e952 <get_io_capa+0x2a>
   1e944:	6883      	ldr	r3, [r0, #8]
   1e946:	b913      	cbnz	r3, 1e94e <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1e948:	4b09      	ldr	r3, [pc, #36]	; (1e970 <get_io_capa+0x48>)
   1e94a:	781b      	ldrb	r3, [r3, #0]
   1e94c:	b933      	cbnz	r3, 1e95c <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1e94e:	2004      	movs	r0, #4
   1e950:	e008      	b.n	1e964 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1e952:	4907      	ldr	r1, [pc, #28]	; (1e970 <get_io_capa+0x48>)
   1e954:	7808      	ldrb	r0, [r1, #0]
   1e956:	b128      	cbz	r0, 1e964 <get_io_capa+0x3c>
   1e958:	689b      	ldr	r3, [r3, #8]
   1e95a:	b933      	cbnz	r3, 1e96a <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1e95c:	3a00      	subs	r2, #0
   1e95e:	bf18      	it	ne
   1e960:	2201      	movne	r2, #1
   1e962:	0050      	lsls	r0, r2, #1
}
   1e964:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1e966:	2003      	movs	r0, #3
   1e968:	e7fc      	b.n	1e964 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1e96a:	2001      	movs	r0, #1
   1e96c:	e7fa      	b.n	1e964 <get_io_capa+0x3c>
   1e96e:	bf00      	nop
   1e970:	20031acf 	.word	0x20031acf

0001e974 <get_auth>:
{
   1e974:	b510      	push	{r4, lr}
	if (sc_supported) {
   1e976:	4b0c      	ldr	r3, [pc, #48]	; (1e9a8 <get_auth+0x34>)
   1e978:	781b      	ldrb	r3, [r3, #0]
   1e97a:	b17b      	cbz	r3, 1e99c <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1e97c:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e980:	f7ff ffd2 	bl	1e928 <get_io_capa>
	if (bondable) {
   1e984:	4b09      	ldr	r3, [pc, #36]	; (1e9ac <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e986:	2803      	cmp	r0, #3
	if (bondable) {
   1e988:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   1e98a:	bf0c      	ite	eq
   1e98c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1e990:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1e994:	b12b      	cbz	r3, 1e9a2 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1e996:	f044 0001 	orr.w	r0, r4, #1
}
   1e99a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1e99c:	f001 0407 	and.w	r4, r1, #7
   1e9a0:	e7ee      	b.n	1e980 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1e9a2:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1e9a6:	e7f8      	b.n	1e99a <get_auth+0x26>
   1e9a8:	20031acf 	.word	0x20031acf
   1e9ac:	20008adb 	.word	0x20008adb

0001e9b0 <smp_chan_get>:
{
   1e9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1e9b2:	2106      	movs	r1, #6
   1e9b4:	f00f f9b6 	bl	2dd24 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e9b8:	4604      	mov	r4, r0
   1e9ba:	b958      	cbnz	r0, 1e9d4 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   1e9bc:	4b07      	ldr	r3, [pc, #28]	; (1e9dc <smp_chan_get+0x2c>)
   1e9be:	2201      	movs	r2, #1
   1e9c0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e9c4:	4906      	ldr	r1, [pc, #24]	; (1e9e0 <smp_chan_get+0x30>)
   1e9c6:	4603      	mov	r3, r0
   1e9c8:	9000      	str	r0, [sp, #0]
   1e9ca:	f010 f978 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
}
   1e9ce:	4620      	mov	r0, r4
   1e9d0:	b004      	add	sp, #16
   1e9d2:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1e9d4:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1e9d8:	e7f9      	b.n	1e9ce <smp_chan_get+0x1e>
   1e9da:	bf00      	nop
   1e9dc:	00037802 	.word	0x00037802
   1e9e0:	00033080 	.word	0x00033080

0001e9e4 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1e9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1e9e6:	4b0d      	ldr	r3, [pc, #52]	; (1ea1c <bt_smp_accept+0x38>)
{
   1e9e8:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1e9ea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1e9ee:	b930      	cbnz	r0, 1e9fe <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1e9f0:	4a0b      	ldr	r2, [pc, #44]	; (1ea20 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   1e9f2:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   1e9f4:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   1e9f6:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1e9f8:	b005      	add	sp, #20
   1e9fa:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   1e9fe:	4b09      	ldr	r3, [pc, #36]	; (1ea24 <bt_smp_accept+0x40>)
   1ea00:	9203      	str	r2, [sp, #12]
   1ea02:	9302      	str	r3, [sp, #8]
   1ea04:	2300      	movs	r3, #0
   1ea06:	2201      	movs	r2, #1
   1ea08:	4618      	mov	r0, r3
   1ea0a:	e9cd 3300 	strd	r3, r3, [sp]
   1ea0e:	4906      	ldr	r1, [pc, #24]	; (1ea28 <bt_smp_accept+0x44>)
   1ea10:	f010 f955 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
   1ea14:	f06f 000b 	mvn.w	r0, #11
   1ea18:	e7ee      	b.n	1e9f8 <bt_smp_accept+0x14>
   1ea1a:	bf00      	nop
   1ea1c:	2000a200 	.word	0x2000a200
   1ea20:	00033eb4 	.word	0x00033eb4
   1ea24:	0003781d 	.word	0x0003781d
   1ea28:	00033080 	.word	0x00033080

0001ea2c <smp_init>:
{
   1ea2c:	b538      	push	{r3, r4, r5, lr}
   1ea2e:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   1ea30:	22ec      	movs	r2, #236	; 0xec
   1ea32:	2100      	movs	r1, #0
   1ea34:	f012 ff35 	bl	318a2 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1ea38:	2110      	movs	r1, #16
   1ea3a:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1ea3e:	f7fc ff1f 	bl	1b880 <bt_rand>
   1ea42:	4604      	mov	r4, r0
   1ea44:	b948      	cbnz	r0, 1ea5a <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1ea46:	2105      	movs	r1, #5
   1ea48:	4628      	mov	r0, r5
   1ea4a:	f010 f947 	bl	2ecdc <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1ea4e:	f7fc ffc9 	bl	1b9e4 <bt_pub_key_get>
   1ea52:	4b03      	ldr	r3, [pc, #12]	; (1ea60 <smp_init+0x34>)
   1ea54:	6018      	str	r0, [r3, #0]
}
   1ea56:	4620      	mov	r0, r4
   1ea58:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ea5a:	2408      	movs	r4, #8
   1ea5c:	e7fb      	b.n	1ea56 <smp_init+0x2a>
   1ea5e:	bf00      	nop
   1ea60:	20030b04 	.word	0x20030b04

0001ea64 <smp_dhkey_generate>:
{
   1ea64:	b530      	push	{r4, r5, lr}
   1ea66:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ea68:	1d05      	adds	r5, r0, #4
   1ea6a:	2108      	movs	r1, #8
   1ea6c:	4628      	mov	r0, r5
{
   1ea6e:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ea70:	f010 f934 	bl	2ecdc <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1ea74:	490b      	ldr	r1, [pc, #44]	; (1eaa4 <smp_dhkey_generate+0x40>)
   1ea76:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ea7a:	f7fc ffc1 	bl	1ba00 <bt_dh_key_gen>
	if (err) {
   1ea7e:	b170      	cbz	r0, 1ea9e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ea80:	2108      	movs	r1, #8
   1ea82:	4628      	mov	r0, r5
   1ea84:	f010 f8ea 	bl	2ec5c <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1ea88:	4b07      	ldr	r3, [pc, #28]	; (1eaa8 <smp_dhkey_generate+0x44>)
   1ea8a:	2201      	movs	r2, #1
   1ea8c:	9302      	str	r3, [sp, #8]
   1ea8e:	2300      	movs	r3, #0
   1ea90:	4906      	ldr	r1, [pc, #24]	; (1eaac <smp_dhkey_generate+0x48>)
   1ea92:	4618      	mov	r0, r3
   1ea94:	e9cd 3300 	strd	r3, r3, [sp]
   1ea98:	f010 f911 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ea9c:	2008      	movs	r0, #8
}
   1ea9e:	b005      	add	sp, #20
   1eaa0:	bd30      	pop	{r4, r5, pc}
   1eaa2:	bf00      	nop
   1eaa4:	0002f0b5 	.word	0x0002f0b5
   1eaa8:	00037842 	.word	0x00037842
   1eaac:	00033080 	.word	0x00033080

0001eab0 <smp_ident_info>:
{
   1eab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eab2:	460b      	mov	r3, r1
   1eab4:	4606      	mov	r6, r0
   1eab6:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1eab8:	210d      	movs	r1, #13
   1eaba:	3004      	adds	r0, #4
   1eabc:	f010 f8a7 	bl	2ec0e <atomic_test_bit>
   1eac0:	b330      	cbz	r0, 1eb10 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1eac2:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1eac4:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1eac8:	2002      	movs	r0, #2
   1eaca:	f103 0788 	add.w	r7, r3, #136	; 0x88
   1eace:	463a      	mov	r2, r7
   1ead0:	7a19      	ldrb	r1, [r3, #8]
   1ead2:	f010 fb80 	bl	2f1d6 <bt_keys_get_type>
		if (!keys) {
   1ead6:	4604      	mov	r4, r0
   1ead8:	b980      	cbnz	r0, 1eafc <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1eada:	4638      	mov	r0, r7
   1eadc:	f7fa fc1c 	bl	19318 <bt_addr_le_str>
   1eae0:	4b0e      	ldr	r3, [pc, #56]	; (1eb1c <smp_ident_info+0x6c>)
   1eae2:	9003      	str	r0, [sp, #12]
   1eae4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1eae8:	4620      	mov	r0, r4
   1eaea:	4623      	mov	r3, r4
   1eaec:	2201      	movs	r2, #1
   1eaee:	490c      	ldr	r1, [pc, #48]	; (1eb20 <smp_ident_info+0x70>)
   1eaf0:	9400      	str	r4, [sp, #0]
   1eaf2:	f010 f8e4 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1eaf6:	2008      	movs	r0, #8
}
   1eaf8:	b005      	add	sp, #20
   1eafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1eafc:	462b      	mov	r3, r5
   1eafe:	342a      	adds	r4, #42	; 0x2a
   1eb00:	f105 0210 	add.w	r2, r5, #16
   1eb04:	f853 1b04 	ldr.w	r1, [r3], #4
   1eb08:	4293      	cmp	r3, r2
   1eb0a:	f844 1b04 	str.w	r1, [r4], #4
   1eb0e:	d1f9      	bne.n	1eb04 <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1eb10:	4630      	mov	r0, r6
   1eb12:	2109      	movs	r1, #9
   1eb14:	f010 f8e2 	bl	2ecdc <atomic_set_bit>
	return 0;
   1eb18:	2000      	movs	r0, #0
   1eb1a:	e7ed      	b.n	1eaf8 <smp_ident_info+0x48>
   1eb1c:	0003785b 	.word	0x0003785b
   1eb20:	00033080 	.word	0x00033080

0001eb24 <smp_encrypt_info>:
{
   1eb24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb26:	460b      	mov	r3, r1
   1eb28:	4606      	mov	r6, r0
   1eb2a:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1eb2c:	210d      	movs	r1, #13
   1eb2e:	3004      	adds	r0, #4
   1eb30:	f010 f86d 	bl	2ec0e <atomic_test_bit>
   1eb34:	b330      	cbz	r0, 1eb84 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1eb36:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1eb38:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1eb3c:	2004      	movs	r0, #4
   1eb3e:	f103 0788 	add.w	r7, r3, #136	; 0x88
   1eb42:	463a      	mov	r2, r7
   1eb44:	7a19      	ldrb	r1, [r3, #8]
   1eb46:	f010 fb46 	bl	2f1d6 <bt_keys_get_type>
		if (!keys) {
   1eb4a:	4604      	mov	r4, r0
   1eb4c:	b980      	cbnz	r0, 1eb70 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1eb4e:	4638      	mov	r0, r7
   1eb50:	f7fa fbe2 	bl	19318 <bt_addr_le_str>
   1eb54:	4b0e      	ldr	r3, [pc, #56]	; (1eb90 <smp_encrypt_info+0x6c>)
   1eb56:	9003      	str	r0, [sp, #12]
   1eb58:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1eb5c:	4620      	mov	r0, r4
   1eb5e:	4623      	mov	r3, r4
   1eb60:	2201      	movs	r2, #1
   1eb62:	490c      	ldr	r1, [pc, #48]	; (1eb94 <smp_encrypt_info+0x70>)
   1eb64:	9400      	str	r4, [sp, #0]
   1eb66:	f010 f8aa 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1eb6a:	2008      	movs	r0, #8
}
   1eb6c:	b005      	add	sp, #20
   1eb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb70:	462b      	mov	r3, r5
   1eb72:	341a      	adds	r4, #26
   1eb74:	f105 0210 	add.w	r2, r5, #16
   1eb78:	f853 1b04 	ldr.w	r1, [r3], #4
   1eb7c:	4293      	cmp	r3, r2
   1eb7e:	f844 1b04 	str.w	r1, [r4], #4
   1eb82:	d1f9      	bne.n	1eb78 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1eb84:	4630      	mov	r0, r6
   1eb86:	2107      	movs	r1, #7
   1eb88:	f010 f8a8 	bl	2ecdc <atomic_set_bit>
	return 0;
   1eb8c:	2000      	movs	r0, #0
   1eb8e:	e7ed      	b.n	1eb6c <smp_encrypt_info+0x48>
   1eb90:	0003785b 	.word	0x0003785b
   1eb94:	00033080 	.word	0x00033080

0001eb98 <smp_send_pairing_confirm>:
{
   1eb98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   1eb9a:	7a04      	ldrb	r4, [r0, #8]
{
   1eb9c:	4605      	mov	r5, r0
	switch (smp->method) {
   1eb9e:	2c02      	cmp	r4, #2
   1eba0:	d823      	bhi.n	1ebea <smp_send_pairing_confirm+0x52>
   1eba2:	b144      	cbz	r4, 1ebb6 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1eba4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1eba8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1ebac:	40dc      	lsrs	r4, r3
   1ebae:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1ebb2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1ebb6:	2103      	movs	r1, #3
   1ebb8:	4628      	mov	r0, r5
   1ebba:	f010 f89f 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!buf) {
   1ebbe:	4606      	mov	r6, r0
   1ebc0:	b308      	cbz	r0, 1ec06 <smp_send_pairing_confirm+0x6e>
   1ebc2:	2110      	movs	r1, #16
   1ebc4:	300c      	adds	r0, #12
   1ebc6:	f010 fc34 	bl	2f432 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1ebca:	9000      	str	r0, [sp, #0]
   1ebcc:	4816      	ldr	r0, [pc, #88]	; (1ec28 <smp_send_pairing_confirm+0x90>)
   1ebce:	4623      	mov	r3, r4
   1ebd0:	6800      	ldr	r0, [r0, #0]
   1ebd2:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1ebd6:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1ebda:	f010 fb54 	bl	2f286 <bt_crypto_f4>
   1ebde:	4604      	mov	r4, r0
   1ebe0:	b1b0      	cbz	r0, 1ec10 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   1ebe2:	4630      	mov	r0, r6
   1ebe4:	f001 fcda 	bl	2059c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1ebe8:	e00d      	b.n	1ec06 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1ebea:	2c03      	cmp	r4, #3
   1ebec:	f04f 0300 	mov.w	r3, #0
   1ebf0:	d00c      	beq.n	1ec0c <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ebf2:	4a0e      	ldr	r2, [pc, #56]	; (1ec2c <smp_send_pairing_confirm+0x94>)
   1ebf4:	4618      	mov	r0, r3
   1ebf6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ebfa:	490d      	ldr	r1, [pc, #52]	; (1ec30 <smp_send_pairing_confirm+0x98>)
   1ebfc:	2201      	movs	r2, #1
	switch (smp->method) {
   1ebfe:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ec00:	9300      	str	r3, [sp, #0]
   1ec02:	f010 f85c 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ec06:	2008      	movs	r0, #8
}
   1ec08:	b004      	add	sp, #16
   1ec0a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1ec0c:	461c      	mov	r4, r3
   1ec0e:	e7d2      	b.n	1ebb6 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1ec10:	4602      	mov	r2, r0
   1ec12:	4631      	mov	r1, r6
   1ec14:	4628      	mov	r0, r5
   1ec16:	f010 f835 	bl	2ec84 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ec1a:	1d28      	adds	r0, r5, #4
   1ec1c:	4621      	mov	r1, r4
   1ec1e:	f010 f81d 	bl	2ec5c <atomic_clear_bit>
	return 0;
   1ec22:	4620      	mov	r0, r4
   1ec24:	e7f0      	b.n	1ec08 <smp_send_pairing_confirm+0x70>
   1ec26:	bf00      	nop
   1ec28:	20030b04 	.word	0x20030b04
   1ec2c:	00037875 	.word	0x00037875
   1ec30:	00033080 	.word	0x00033080

0001ec34 <smp_public_key_periph>:
{
   1ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec36:	4604      	mov	r4, r0
   1ec38:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ec3a:	f7ff fe5f 	bl	1e8fc <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ec3e:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ec40:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ec42:	210e      	movs	r1, #14
   1ec44:	4628      	mov	r0, r5
   1ec46:	f00f ffe2 	bl	2ec0e <atomic_test_bit>
   1ec4a:	b990      	cbnz	r0, 1ec72 <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1ec4c:	4b51      	ldr	r3, [pc, #324]	; (1ed94 <smp_public_key_periph+0x160>)
   1ec4e:	2220      	movs	r2, #32
   1ec50:	6819      	ldr	r1, [r3, #0]
   1ec52:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ec56:	f012 fdda 	bl	3180e <memcmp>
   1ec5a:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ec5c:	b948      	cbnz	r0, 1ec72 <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   1ec5e:	4a4e      	ldr	r2, [pc, #312]	; (1ed98 <smp_public_key_periph+0x164>)
   1ec60:	494e      	ldr	r1, [pc, #312]	; (1ed9c <smp_public_key_periph+0x168>)
   1ec62:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1ec66:	9000      	str	r0, [sp, #0]
   1ec68:	2202      	movs	r2, #2
   1ec6a:	f010 f828 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ec6e:	2008      	movs	r0, #8
   1ec70:	e034      	b.n	1ecdc <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ec72:	210c      	movs	r1, #12
   1ec74:	4620      	mov	r0, r4
   1ec76:	f010 f841 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1ec7a:	4607      	mov	r7, r0
   1ec7c:	2800      	cmp	r0, #0
   1ec7e:	d0f6      	beq.n	1ec6e <smp_public_key_periph+0x3a>
   1ec80:	2140      	movs	r1, #64	; 0x40
   1ec82:	300c      	adds	r0, #12
   1ec84:	f010 fbd5 	bl	2f432 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1ec88:	4b42      	ldr	r3, [pc, #264]	; (1ed94 <smp_public_key_periph+0x160>)
   1ec8a:	4602      	mov	r2, r0
   1ec8c:	681b      	ldr	r3, [r3, #0]
   1ec8e:	4601      	mov	r1, r0
   1ec90:	f103 0020 	add.w	r0, r3, #32
   1ec94:	f853 cb04 	ldr.w	ip, [r3], #4
   1ec98:	4283      	cmp	r3, r0
   1ec9a:	f841 cb04 	str.w	ip, [r1], #4
   1ec9e:	d1f9      	bne.n	1ec94 <smp_public_key_periph+0x60>
   1eca0:	3220      	adds	r2, #32
   1eca2:	f103 0120 	add.w	r1, r3, #32
   1eca6:	f853 0b04 	ldr.w	r0, [r3], #4
   1ecaa:	428b      	cmp	r3, r1
   1ecac:	f842 0b04 	str.w	r0, [r2], #4
   1ecb0:	d1f9      	bne.n	1eca6 <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   1ecb2:	2200      	movs	r2, #0
   1ecb4:	4639      	mov	r1, r7
   1ecb6:	4620      	mov	r0, r4
   1ecb8:	f00f ffe4 	bl	2ec84 <smp_send.constprop.0>
	switch (smp->method) {
   1ecbc:	7a23      	ldrb	r3, [r4, #8]
   1ecbe:	2b05      	cmp	r3, #5
   1ecc0:	d85a      	bhi.n	1ed78 <smp_public_key_periph+0x144>
   1ecc2:	e8df f003 	tbb	[pc, r3]
   1ecc6:	3903      	.short	0x3903
   1ecc8:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1eccc:	2104      	movs	r1, #4
   1ecce:	4620      	mov	r0, r4
   1ecd0:	f010 f804 	bl	2ecdc <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1ecd4:	f7ff ff60 	bl	1eb98 <smp_send_pairing_confirm>
		if (err) {
   1ecd8:	2800      	cmp	r0, #0
   1ecda:	d03c      	beq.n	1ed56 <smp_public_key_periph+0x122>
}
   1ecdc:	b005      	add	sp, #20
   1ecde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ece0:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1ece2:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ece6:	f7ff fe09 	bl	1e8fc <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ecea:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ecec:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ecee:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1ecf2:	f7fc fdc5 	bl	1b880 <bt_rand>
   1ecf6:	2800      	cmp	r0, #0
   1ecf8:	d1b9      	bne.n	1ec6e <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   1ecfa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ecfe:	4a28      	ldr	r2, [pc, #160]	; (1eda0 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   1ed00:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1ed04:	fbb3 f1f2 	udiv	r1, r3, r2
   1ed08:	fb02 3311 	mls	r3, r2, r1, r3
   1ed0c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1ed10:	b156      	cbz	r6, 1ed28 <smp_public_key_periph+0xf4>
   1ed12:	6833      	ldr	r3, [r6, #0]
   1ed14:	b143      	cbz	r3, 1ed28 <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ed16:	210b      	movs	r1, #11
   1ed18:	4628      	mov	r0, r5
   1ed1a:	f00f ffdf 	bl	2ecdc <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1ed1e:	4638      	mov	r0, r7
   1ed20:	6833      	ldr	r3, [r6, #0]
   1ed22:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ed26:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ed28:	2103      	movs	r1, #3
   1ed2a:	4620      	mov	r0, r4
   1ed2c:	f00f ffd6 	bl	2ecdc <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ed30:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ed32:	f00f ffd3 	bl	2ecdc <atomic_set_bit>
		break;
   1ed36:	e00e      	b.n	1ed56 <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ed38:	4620      	mov	r0, r4
   1ed3a:	2103      	movs	r1, #3
   1ed3c:	f00f ffce 	bl	2ecdc <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ed40:	210e      	movs	r1, #14
   1ed42:	f00f ffcb 	bl	2ecdc <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ed46:	4628      	mov	r0, r5
   1ed48:	210a      	movs	r1, #10
   1ed4a:	f00f ffc7 	bl	2ecdc <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1ed4e:	6873      	ldr	r3, [r6, #4]
   1ed50:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ed54:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ed56:	4628      	mov	r0, r5
   1ed58:	2107      	movs	r1, #7
   1ed5a:	f00f ffbf 	bl	2ecdc <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1ed5e:	2008      	movs	r0, #8
   1ed60:	f7ff fdbe 	bl	1e8e0 <smp_find>
   1ed64:	b9a0      	cbnz	r0, 1ed90 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   1ed66:	4620      	mov	r0, r4
}
   1ed68:	b005      	add	sp, #20
   1ed6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1ed6e:	f7ff be79 	b.w	1ea64 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ed72:	2104      	movs	r1, #4
   1ed74:	4620      	mov	r0, r4
   1ed76:	e7dc      	b.n	1ed32 <smp_public_key_periph+0xfe>
	switch (smp->method) {
   1ed78:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ed7a:	4b0a      	ldr	r3, [pc, #40]	; (1eda4 <smp_public_key_periph+0x170>)
   1ed7c:	2201      	movs	r2, #1
   1ed7e:	9302      	str	r3, [sp, #8]
   1ed80:	2300      	movs	r3, #0
   1ed82:	4906      	ldr	r1, [pc, #24]	; (1ed9c <smp_public_key_periph+0x168>)
   1ed84:	4618      	mov	r0, r3
   1ed86:	e9cd 3300 	strd	r3, r3, [sp]
   1ed8a:	f00f ff98 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ed8e:	e76e      	b.n	1ec6e <smp_public_key_periph+0x3a>
	return 0;
   1ed90:	2000      	movs	r0, #0
   1ed92:	e7a3      	b.n	1ecdc <smp_public_key_periph+0xa8>
   1ed94:	20030b04 	.word	0x20030b04
   1ed98:	00037891 	.word	0x00037891
   1ed9c:	00033080 	.word	0x00033080
   1eda0:	000f4240 	.word	0x000f4240
   1eda4:	00037875 	.word	0x00037875

0001eda8 <smp_public_key>:
{
   1eda8:	b530      	push	{r4, r5, lr}
   1edaa:	4604      	mov	r4, r0
   1edac:	460d      	mov	r5, r1
   1edae:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1edb0:	f7ff fda4 	bl	1e8fc <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1edb4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1edb8:	4602      	mov	r2, r0
   1edba:	68eb      	ldr	r3, [r5, #12]
   1edbc:	f103 0120 	add.w	r1, r3, #32
   1edc0:	f853 5b04 	ldr.w	r5, [r3], #4
   1edc4:	428b      	cmp	r3, r1
   1edc6:	f842 5b04 	str.w	r5, [r2], #4
   1edca:	d1f9      	bne.n	1edc0 <smp_public_key+0x18>
   1edcc:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1edd0:	f103 0120 	add.w	r1, r3, #32
   1edd4:	f853 5b04 	ldr.w	r5, [r3], #4
   1edd8:	428b      	cmp	r3, r1
   1edda:	f842 5b04 	str.w	r5, [r2], #4
   1edde:	d1f9      	bne.n	1edd4 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ede0:	f7fc fd6c 	bl	1b8bc <bt_pub_key_is_debug>
   1ede4:	b940      	cbnz	r0, 1edf8 <smp_public_key+0x50>
	if (!sc_public_key) {
   1ede6:	4b1c      	ldr	r3, [pc, #112]	; (1ee58 <smp_public_key+0xb0>)
   1ede8:	681d      	ldr	r5, [r3, #0]
   1edea:	bb75      	cbnz	r5, 1ee4a <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1edec:	1d20      	adds	r0, r4, #4
   1edee:	2106      	movs	r1, #6
   1edf0:	f00f ff74 	bl	2ecdc <atomic_set_bit>
	return 0;
   1edf4:	4628      	mov	r0, r5
		return 0;
   1edf6:	e026      	b.n	1ee46 <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   1edf8:	4b18      	ldr	r3, [pc, #96]	; (1ee5c <smp_public_key+0xb4>)
   1edfa:	2203      	movs	r2, #3
   1edfc:	9302      	str	r3, [sp, #8]
   1edfe:	2300      	movs	r3, #0
   1ee00:	4917      	ldr	r1, [pc, #92]	; (1ee60 <smp_public_key+0xb8>)
   1ee02:	4618      	mov	r0, r3
   1ee04:	e9cd 3300 	strd	r3, r3, [sp]
   1ee08:	f00f ff59 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1ee0c:	210e      	movs	r1, #14
   1ee0e:	1d20      	adds	r0, r4, #4
   1ee10:	f00f ff64 	bl	2ecdc <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1ee14:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1ee18:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ee1c:	b933      	cbnz	r3, 1ee2c <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ee1e:	7a28      	ldrb	r0, [r5, #8]
   1ee20:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ee24:	f001 f9a4 	bl	20170 <bt_keys_get_addr>
   1ee28:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
	if (!conn->le.keys ||
   1ee2c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ee30:	2b00      	cmp	r3, #0
   1ee32:	d0d8      	beq.n	1ede6 <smp_public_key+0x3e>
   1ee34:	89da      	ldrh	r2, [r3, #14]
   1ee36:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ee3a:	2a00      	cmp	r2, #0
   1ee3c:	d0d3      	beq.n	1ede6 <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1ee3e:	7b5b      	ldrb	r3, [r3, #13]
   1ee40:	079b      	lsls	r3, r3, #30
   1ee42:	d4d0      	bmi.n	1ede6 <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ee44:	2003      	movs	r0, #3
}
   1ee46:	b005      	add	sp, #20
   1ee48:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   1ee4a:	4620      	mov	r0, r4
}
   1ee4c:	b005      	add	sp, #20
   1ee4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1ee52:	f7ff beef 	b.w	1ec34 <smp_public_key_periph>
   1ee56:	bf00      	nop
   1ee58:	20030b04 	.word	0x20030b04
   1ee5c:	000378ac 	.word	0x000378ac
   1ee60:	00033080 	.word	0x00033080

0001ee64 <smp_pairing_req>:
{
   1ee64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee68:	460d      	mov	r5, r1
   1ee6a:	b086      	sub	sp, #24
   1ee6c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ee6e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ee72:	f7ff fd43 	bl	1e8fc <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1ee76:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ee7a:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ee7c:	f898 3003 	ldrb.w	r3, [r8, #3]
   1ee80:	3b07      	subs	r3, #7
   1ee82:	2b09      	cmp	r3, #9
   1ee84:	d903      	bls.n	1ee8e <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1ee86:	2006      	movs	r0, #6
}
   1ee88:	b006      	add	sp, #24
   1ee8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1ee8e:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1ee92:	b15b      	cbz	r3, 1eeac <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1ee94:	1d25      	adds	r5, r4, #4
   1ee96:	210f      	movs	r1, #15
   1ee98:	4628      	mov	r0, r5
   1ee9a:	f00f feb8 	bl	2ec0e <atomic_test_bit>
   1ee9e:	b980      	cbnz	r0, 1eec2 <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   1eea0:	4620      	mov	r0, r4
   1eea2:	f7ff fdc3 	bl	1ea2c <smp_init>
		if (ret) {
   1eea6:	b160      	cbz	r0, 1eec2 <smp_pairing_req+0x5e>
			return ret;
   1eea8:	b2c0      	uxtb	r0, r0
   1eeaa:	e7ed      	b.n	1ee88 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1eeac:	7a30      	ldrb	r0, [r6, #8]
   1eeae:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1eeb2:	f001 f95d 	bl	20170 <bt_keys_get_addr>
   1eeb6:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1eeba:	2800      	cmp	r0, #0
   1eebc:	d1ea      	bne.n	1ee94 <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   1eebe:	2008      	movs	r0, #8
   1eec0:	e7e2      	b.n	1ee88 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1eec2:	2301      	movs	r3, #1
   1eec4:	7263      	strb	r3, [r4, #9]
   1eec6:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1eeca:	4620      	mov	r0, r4
   1eecc:	f8c4 300a 	str.w	r3, [r4, #10]
   1eed0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1eed4:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1eed6:	2302      	movs	r3, #2
   1eed8:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1eeda:	f898 1002 	ldrb.w	r1, [r8, #2]
   1eede:	f7ff fd49 	bl	1e974 <get_auth>
   1eee2:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1eee4:	4620      	mov	r0, r4
   1eee6:	f7ff fd1f 	bl	1e928 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1eeea:	4ba9      	ldr	r3, [pc, #676]	; (1f190 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   1eeec:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1eeee:	781b      	ldrb	r3, [r3, #0]
   1eef0:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1eef2:	2310      	movs	r3, #16
   1eef4:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1eef6:	f898 3004 	ldrb.w	r3, [r8, #4]
   1eefa:	f003 0303 	and.w	r3, r3, #3
   1eefe:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1ef00:	f898 3005 	ldrb.w	r3, [r8, #5]
   1ef04:	f003 0301 	and.w	r3, r3, #1
   1ef08:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1ef0a:	7ce3      	ldrb	r3, [r4, #19]
   1ef0c:	071b      	lsls	r3, r3, #28
   1ef0e:	d50d      	bpl.n	1ef2c <smp_pairing_req+0xc8>
   1ef10:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ef14:	0718      	lsls	r0, r3, #28
   1ef16:	d509      	bpl.n	1ef2c <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1ef18:	2105      	movs	r1, #5
   1ef1a:	4628      	mov	r0, r5
   1ef1c:	f00f fede 	bl	2ecdc <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1ef20:	7d63      	ldrb	r3, [r4, #21]
   1ef22:	f003 0302 	and.w	r3, r3, #2
   1ef26:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1ef28:	2300      	movs	r3, #0
   1ef2a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1ef2c:	7ce3      	ldrb	r3, [r4, #19]
   1ef2e:	0699      	lsls	r1, r3, #26
   1ef30:	d507      	bpl.n	1ef42 <smp_pairing_req+0xde>
   1ef32:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ef36:	069a      	lsls	r2, r3, #26
   1ef38:	d503      	bpl.n	1ef42 <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1ef3a:	2114      	movs	r1, #20
   1ef3c:	4628      	mov	r0, r5
   1ef3e:	f00f fecd 	bl	2ecdc <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1ef42:	7da3      	ldrb	r3, [r4, #22]
   1ef44:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1ef48:	7d63      	ldrb	r3, [r4, #21]
   1ef4a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1ef4e:	7ce3      	ldrb	r3, [r4, #19]
   1ef50:	07db      	lsls	r3, r3, #31
   1ef52:	d507      	bpl.n	1ef64 <smp_pairing_req+0x100>
   1ef54:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ef58:	07d8      	lsls	r0, r3, #31
   1ef5a:	d503      	bpl.n	1ef64 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1ef5c:	210d      	movs	r1, #13
   1ef5e:	4628      	mov	r0, r5
   1ef60:	f00f febc 	bl	2ecdc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1ef64:	2103      	movs	r1, #3
   1ef66:	4628      	mov	r0, r5
   1ef68:	f00f feb8 	bl	2ecdc <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ef6c:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1ef6e:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ef72:	f00f fe4c 	bl	2ec0e <atomic_test_bit>
   1ef76:	bb40      	cbnz	r0, 1efca <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1ef78:	f1b8 0f04 	cmp.w	r8, #4
   1ef7c:	d845      	bhi.n	1f00a <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ef7e:	7ae3      	ldrb	r3, [r4, #11]
   1ef80:	7ca2      	ldrb	r2, [r4, #18]
   1ef82:	4013      	ands	r3, r2
   1ef84:	07d9      	lsls	r1, r3, #31
   1ef86:	d43e      	bmi.n	1f006 <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1ef88:	7b21      	ldrb	r1, [r4, #12]
   1ef8a:	7ce3      	ldrb	r3, [r4, #19]
   1ef8c:	4319      	orrs	r1, r3
   1ef8e:	f011 0104 	ands.w	r1, r1, #4
   1ef92:	d011      	beq.n	1efb8 <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1ef94:	4620      	mov	r0, r4
   1ef96:	f7ff fcc7 	bl	1e928 <get_io_capa>
   1ef9a:	4b7e      	ldr	r3, [pc, #504]	; (1f194 <smp_pairing_req+0x330>)
   1ef9c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1efa0:	4498      	add	r8, r3
   1efa2:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1efa6:	2904      	cmp	r1, #4
   1efa8:	d106      	bne.n	1efb8 <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1efaa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1efae:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1efb0:	2b00      	cmp	r3, #0
   1efb2:	bf14      	ite	ne
   1efb4:	2101      	movne	r1, #1
   1efb6:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1efb8:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1efba:	4620      	mov	r0, r4
   1efbc:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1efc0:	f00f fe2b 	bl	2ec1a <update_keys_check>
   1efc4:	bb18      	cbnz	r0, 1f00e <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1efc6:	2003      	movs	r0, #3
   1efc8:	e75e      	b.n	1ee88 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1efca:	7b23      	ldrb	r3, [r4, #12]
   1efcc:	7ce0      	ldrb	r0, [r4, #19]
   1efce:	ea03 0200 	and.w	r2, r3, r0
   1efd2:	0712      	lsls	r2, r2, #28
   1efd4:	d506      	bpl.n	1efe4 <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1efd6:	7ae2      	ldrb	r2, [r4, #11]
   1efd8:	f894 c012 	ldrb.w	ip, [r4, #18]
   1efdc:	ea42 020c 	orr.w	r2, r2, ip
   1efe0:	07d2      	lsls	r2, r2, #31
   1efe2:	d4e9      	bmi.n	1efb8 <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1efe4:	f1b8 0f04 	cmp.w	r8, #4
   1efe8:	d80f      	bhi.n	1f00a <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1efea:	ea43 0100 	orr.w	r1, r3, r0
   1efee:	f011 0104 	ands.w	r1, r1, #4
   1eff2:	d0e1      	beq.n	1efb8 <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1eff4:	4620      	mov	r0, r4
   1eff6:	f7ff fc97 	bl	1e928 <get_io_capa>
   1effa:	4b67      	ldr	r3, [pc, #412]	; (1f198 <smp_pairing_req+0x334>)
   1effc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1f000:	4443      	add	r3, r8
   1f002:	5c19      	ldrb	r1, [r3, r0]
   1f004:	e7d8      	b.n	1efb8 <smp_pairing_req+0x154>
		return LEGACY_OOB;
   1f006:	2106      	movs	r1, #6
   1f008:	e7d6      	b.n	1efb8 <smp_pairing_req+0x154>
		return JUST_WORKS;
   1f00a:	2100      	movs	r1, #0
   1f00c:	e7d4      	b.n	1efb8 <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1f00e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f012:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1f014:	2b03      	cmp	r3, #3
   1f016:	d03c      	beq.n	1f092 <smp_pairing_req+0x22e>
   1f018:	d82a      	bhi.n	1f070 <smp_pairing_req+0x20c>
   1f01a:	3b01      	subs	r3, #1
   1f01c:	2b01      	cmp	r3, #1
   1f01e:	f63f af4e 	bhi.w	1eebe <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f022:	2105      	movs	r1, #5
   1f024:	4628      	mov	r0, r5
   1f026:	f00f fdf2 	bl	2ec0e <atomic_test_bit>
   1f02a:	2800      	cmp	r0, #0
   1f02c:	f040 80be 	bne.w	1f1ac <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f030:	4620      	mov	r0, r4
   1f032:	f7ff fc63 	bl	1e8fc <latch_auth_cb>
   1f036:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f038:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1f03a:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f03e:	f7ff fc5d 	bl	1e8fc <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f042:	f108 0188 	add.w	r1, r8, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f046:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f048:	f898 0008 	ldrb.w	r0, [r8, #8]
   1f04c:	f001 f930 	bl	202b0 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f050:	7a23      	ldrb	r3, [r4, #8]
   1f052:	b310      	cbz	r0, 1f09a <smp_pairing_req+0x236>
   1f054:	7b42      	ldrb	r2, [r0, #13]
   1f056:	07d2      	lsls	r2, r2, #31
   1f058:	d51f      	bpl.n	1f09a <smp_pairing_req+0x236>
   1f05a:	b9f3      	cbnz	r3, 1f09a <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1f05c:	4a4f      	ldr	r2, [pc, #316]	; (1f19c <smp_pairing_req+0x338>)
   1f05e:	4618      	mov	r0, r3
   1f060:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1f064:	494e      	ldr	r1, [pc, #312]	; (1f1a0 <smp_pairing_req+0x33c>)
   1f066:	2201      	movs	r2, #1
   1f068:	9300      	str	r3, [sp, #0]
   1f06a:	f00f fe28 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1f06e:	e726      	b.n	1eebe <smp_pairing_req+0x5a>
	switch (sec) {
   1f070:	2b04      	cmp	r3, #4
   1f072:	f47f af24 	bne.w	1eebe <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f076:	7d23      	ldrb	r3, [r4, #20]
   1f078:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1f07a:	4293      	cmp	r3, r2
   1f07c:	bf28      	it	cs
   1f07e:	4613      	movcs	r3, r2
   1f080:	2b10      	cmp	r3, #16
   1f082:	f47f af00 	bne.w	1ee86 <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f086:	2105      	movs	r1, #5
   1f088:	4628      	mov	r0, r5
   1f08a:	f00f fdc0 	bl	2ec0e <atomic_test_bit>
   1f08e:	2800      	cmp	r0, #0
   1f090:	d099      	beq.n	1efc6 <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   1f092:	7a23      	ldrb	r3, [r4, #8]
   1f094:	2b00      	cmp	r3, #0
   1f096:	d1c4      	bne.n	1f022 <smp_pairing_req+0x1be>
   1f098:	e795      	b.n	1efc6 <smp_pairing_req+0x162>
	switch (smp->method) {
   1f09a:	2b06      	cmp	r3, #6
   1f09c:	d85d      	bhi.n	1f15a <smp_pairing_req+0x2f6>
   1f09e:	e8df f003 	tbb	[pc, r3]
   1f0a2:	5418      	.short	0x5418
   1f0a4:	5c5c5c2d 	.word	0x5c5c5c2d
   1f0a8:	04          	.byte	0x04
   1f0a9:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f0aa:	2e00      	cmp	r6, #0
   1f0ac:	d061      	beq.n	1f172 <smp_pairing_req+0x30e>
   1f0ae:	68f3      	ldr	r3, [r6, #12]
   1f0b0:	2b00      	cmp	r3, #0
   1f0b2:	d05e      	beq.n	1f172 <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   1f0b4:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f0b6:	210a      	movs	r1, #10
   1f0b8:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1f0ba:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f0be:	f00f fe0d 	bl	2ecdc <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f0c2:	68f3      	ldr	r3, [r6, #12]
   1f0c4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f0c8:	a905      	add	r1, sp, #20
   1f0ca:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f0cc:	7a23      	ldrb	r3, [r4, #8]
   1f0ce:	2b00      	cmp	r3, #0
   1f0d0:	d151      	bne.n	1f176 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f0d2:	210f      	movs	r1, #15
   1f0d4:	4628      	mov	r0, r5
   1f0d6:	f00f fd9a 	bl	2ec0e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f0da:	2800      	cmp	r0, #0
   1f0dc:	d14b      	bne.n	1f176 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f0de:	2f00      	cmp	r7, #0
   1f0e0:	d049      	beq.n	1f176 <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f0e2:	697b      	ldr	r3, [r7, #20]
   1f0e4:	2b00      	cmp	r3, #0
   1f0e6:	d046      	beq.n	1f176 <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f0e8:	4628      	mov	r0, r5
   1f0ea:	210a      	movs	r1, #10
   1f0ec:	f00f fdf6 	bl	2ecdc <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1f0f0:	697b      	ldr	r3, [r7, #20]
   1f0f2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1f0f6:	4798      	blx	r3
		return 0;
   1f0f8:	2000      	movs	r0, #0
   1f0fa:	e6c5      	b.n	1ee88 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1f0fc:	2104      	movs	r1, #4
   1f0fe:	a805      	add	r0, sp, #20
   1f100:	f7fc fbbe 	bl	1b880 <bt_rand>
   1f104:	2800      	cmp	r0, #0
   1f106:	f47f aeda 	bne.w	1eebe <smp_pairing_req+0x5a>
			passkey %= 1000000;
   1f10a:	9b05      	ldr	r3, [sp, #20]
   1f10c:	4a25      	ldr	r2, [pc, #148]	; (1f1a4 <smp_pairing_req+0x340>)
   1f10e:	fbb3 f1f2 	udiv	r1, r3, r2
   1f112:	fb02 3311 	mls	r3, r2, r1, r3
   1f116:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1f118:	b14e      	cbz	r6, 1f12e <smp_pairing_req+0x2ca>
   1f11a:	6833      	ldr	r3, [r6, #0]
   1f11c:	b13b      	cbz	r3, 1f12e <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f11e:	210b      	movs	r1, #11
   1f120:	4628      	mov	r0, r5
   1f122:	f00f fddb 	bl	2ecdc <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1f126:	4640      	mov	r0, r8
   1f128:	6833      	ldr	r3, [r6, #0]
   1f12a:	9905      	ldr	r1, [sp, #20]
   1f12c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1f12e:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   1f130:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1f134:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   1f138:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1f13a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1f13e:	0a1b      	lsrs	r3, r3, #8
   1f140:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1f144:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1f148:	e7c0      	b.n	1f0cc <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f14a:	4628      	mov	r0, r5
   1f14c:	210a      	movs	r1, #10
   1f14e:	f00f fdc5 	bl	2ecdc <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1f152:	4640      	mov	r0, r8
   1f154:	6873      	ldr	r3, [r6, #4]
   1f156:	4798      	blx	r3
	if (ret) {
   1f158:	e7b8      	b.n	1f0cc <smp_pairing_req+0x268>
	switch (smp->method) {
   1f15a:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f15c:	4b12      	ldr	r3, [pc, #72]	; (1f1a8 <smp_pairing_req+0x344>)
   1f15e:	2201      	movs	r2, #1
   1f160:	9302      	str	r3, [sp, #8]
   1f162:	2300      	movs	r3, #0
   1f164:	490e      	ldr	r1, [pc, #56]	; (1f1a0 <smp_pairing_req+0x33c>)
   1f166:	4618      	mov	r0, r3
   1f168:	e9cd 3300 	strd	r3, r3, [sp]
   1f16c:	f00f fda7 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1f170:	e6a5      	b.n	1eebe <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f172:	2002      	movs	r0, #2
   1f174:	e688      	b.n	1ee88 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1f176:	2103      	movs	r1, #3
   1f178:	4620      	mov	r0, r4
   1f17a:	f00f fdaf 	bl	2ecdc <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f17e:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f180:	f00f fdac 	bl	2ecdc <atomic_set_bit>
}
   1f184:	b006      	add	sp, #24
   1f186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1f18a:	f00f bdd6 	b.w	2ed3a <send_pairing_rsp>
   1f18e:	bf00      	nop
   1f190:	20031ad0 	.word	0x20031ad0
   1f194:	00037bcd 	.word	0x00037bcd
   1f198:	00037bb4 	.word	0x00037bb4
   1f19c:	000378cd 	.word	0x000378cd
   1f1a0:	00033080 	.word	0x00033080
   1f1a4:	000f4240 	.word	0x000f4240
   1f1a8:	00037875 	.word	0x00037875
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1f1ac:	7a23      	ldrb	r3, [r4, #8]
   1f1ae:	b973      	cbnz	r3, 1f1ce <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f1b0:	210f      	movs	r1, #15
   1f1b2:	4628      	mov	r0, r5
   1f1b4:	f00f fd2b 	bl	2ec0e <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f1b8:	b948      	cbnz	r0, 1f1ce <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f1ba:	b147      	cbz	r7, 1f1ce <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f1bc:	697b      	ldr	r3, [r7, #20]
   1f1be:	b133      	cbz	r3, 1f1ce <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f1c0:	4628      	mov	r0, r5
   1f1c2:	210a      	movs	r1, #10
   1f1c4:	f00f fd8a 	bl	2ecdc <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1f1c8:	4630      	mov	r0, r6
   1f1ca:	697b      	ldr	r3, [r7, #20]
   1f1cc:	e793      	b.n	1f0f6 <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f1ce:	210c      	movs	r1, #12
   1f1d0:	4620      	mov	r0, r4
   1f1d2:	e7d5      	b.n	1f180 <smp_pairing_req+0x31c>

0001f1d4 <compute_and_check_and_send_periph_dhcheck>:
{
   1f1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f1d8:	4604      	mov	r4, r0
   1f1da:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   1f1dc:	ad0c      	add	r5, sp, #48	; 0x30
   1f1de:	2210      	movs	r2, #16
   1f1e0:	2100      	movs	r1, #0
   1f1e2:	4628      	mov	r0, r5
   1f1e4:	f012 fb5d 	bl	318a2 <memset>
	switch (smp->method) {
   1f1e8:	7a23      	ldrb	r3, [r4, #8]
   1f1ea:	2b05      	cmp	r3, #5
   1f1ec:	d83a      	bhi.n	1f264 <compute_and_check_and_send_periph_dhcheck+0x90>
   1f1ee:	e8df f003 	tbb	[pc, r3]
   1f1f2:	0306      	.short	0x0306
   1f1f4:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1f1f8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1f1fc:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f1fe:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f202:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1f206:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f20a:	e9cd 7201 	strd	r7, r2, [sp, #4]
   1f20e:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f212:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f216:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1f21a:	9200      	str	r2, [sp, #0]
   1f21c:	4641      	mov	r1, r8
   1f21e:	464a      	mov	r2, r9
   1f220:	338f      	adds	r3, #143	; 0x8f
   1f222:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1f226:	f001 f853 	bl	202d0 <bt_crypto_f5>
   1f22a:	4682      	mov	sl, r0
   1f22c:	b348      	cbz	r0, 1f282 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   1f22e:	4b4e      	ldr	r3, [pc, #312]	; (1f368 <compute_and_check_and_send_periph_dhcheck+0x194>)
   1f230:	9302      	str	r3, [sp, #8]
   1f232:	2300      	movs	r3, #0
   1f234:	e9cd 3300 	strd	r3, r3, [sp]
   1f238:	2201      	movs	r2, #1
   1f23a:	4618      	mov	r0, r3
   1f23c:	494b      	ldr	r1, [pc, #300]	; (1f36c <compute_and_check_and_send_periph_dhcheck+0x198>)
   1f23e:	f00f fd3e 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f242:	e01a      	b.n	1f27a <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   1f244:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1f248:	2b00      	cmp	r3, #0
   1f24a:	d0d8      	beq.n	1f1fe <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1f24c:	462e      	mov	r6, r5
   1f24e:	f103 0710 	add.w	r7, r3, #16
   1f252:	4632      	mov	r2, r6
   1f254:	6818      	ldr	r0, [r3, #0]
   1f256:	6859      	ldr	r1, [r3, #4]
   1f258:	3308      	adds	r3, #8
   1f25a:	c203      	stmia	r2!, {r0, r1}
   1f25c:	42bb      	cmp	r3, r7
   1f25e:	4616      	mov	r6, r2
   1f260:	d1f7      	bne.n	1f252 <compute_and_check_and_send_periph_dhcheck+0x7e>
   1f262:	e7cc      	b.n	1f1fe <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   1f264:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f266:	4b42      	ldr	r3, [pc, #264]	; (1f370 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   1f268:	2201      	movs	r2, #1
   1f26a:	9302      	str	r3, [sp, #8]
   1f26c:	2300      	movs	r3, #0
   1f26e:	493f      	ldr	r1, [pc, #252]	; (1f36c <compute_and_check_and_send_periph_dhcheck+0x198>)
   1f270:	4618      	mov	r0, r3
   1f272:	e9cd 3300 	strd	r3, r3, [sp]
   1f276:	f00f fd22 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f27a:	2008      	movs	r0, #8
}
   1f27c:	b010      	add	sp, #64	; 0x40
   1f27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1f282:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1f286:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1f288:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1f28c:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1f28e:	9301      	str	r3, [sp, #4]
   1f290:	f104 0311 	add.w	r3, r4, #17
   1f294:	9202      	str	r2, [sp, #8]
   1f296:	9300      	str	r3, [sp, #0]
   1f298:	4642      	mov	r2, r8
   1f29a:	462b      	mov	r3, r5
   1f29c:	4649      	mov	r1, r9
   1f29e:	4638      	mov	r0, r7
   1f2a0:	9603      	str	r6, [sp, #12]
   1f2a2:	f010 f815 	bl	2f2d0 <bt_crypto_f6>
   1f2a6:	b130      	cbz	r0, 1f2b6 <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   1f2a8:	4b32      	ldr	r3, [pc, #200]	; (1f374 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   1f2aa:	f8cd a000 	str.w	sl, [sp]
   1f2ae:	e9cd a301 	strd	sl, r3, [sp, #4]
   1f2b2:	4653      	mov	r3, sl
   1f2b4:	e7c0      	b.n	1f238 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   1f2b6:	7a23      	ldrb	r3, [r4, #8]
   1f2b8:	2b05      	cmp	r3, #5
   1f2ba:	d10e      	bne.n	1f2da <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   1f2bc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1f2c0:	b311      	cbz	r1, 1f308 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1f2c2:	460b      	mov	r3, r1
   1f2c4:	46ac      	mov	ip, r5
   1f2c6:	f101 0e10 	add.w	lr, r1, #16
   1f2ca:	4662      	mov	r2, ip
   1f2cc:	6818      	ldr	r0, [r3, #0]
   1f2ce:	6859      	ldr	r1, [r3, #4]
   1f2d0:	3308      	adds	r3, #8
   1f2d2:	c203      	stmia	r2!, {r0, r1}
   1f2d4:	4573      	cmp	r3, lr
   1f2d6:	4694      	mov	ip, r2
   1f2d8:	d1f7      	bne.n	1f2ca <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f2da:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f2de:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f2e2:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1f2e6:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f2e8:	9301      	str	r3, [sp, #4]
   1f2ea:	f104 030a 	add.w	r3, r4, #10
   1f2ee:	9202      	str	r2, [sp, #8]
   1f2f0:	9300      	str	r3, [sp, #0]
   1f2f2:	464a      	mov	r2, r9
   1f2f4:	462b      	mov	r3, r5
   1f2f6:	4641      	mov	r1, r8
   1f2f8:	4638      	mov	r0, r7
   1f2fa:	f8cd a00c 	str.w	sl, [sp, #12]
   1f2fe:	f00f ffe7 	bl	2f2d0 <bt_crypto_f6>
   1f302:	b130      	cbz	r0, 1f312 <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   1f304:	4b1c      	ldr	r3, [pc, #112]	; (1f378 <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   1f306:	e793      	b.n	1f230 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   1f308:	2210      	movs	r2, #16
   1f30a:	4628      	mov	r0, r5
   1f30c:	f012 fac9 	bl	318a2 <memset>
   1f310:	e7e3      	b.n	1f2da <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   1f312:	2210      	movs	r2, #16
   1f314:	4651      	mov	r1, sl
   1f316:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1f31a:	f012 fa78 	bl	3180e <memcmp>
   1f31e:	bb00      	cbnz	r0, 1f362 <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1f320:	210d      	movs	r1, #13
   1f322:	4620      	mov	r0, r4
   1f324:	f00f fcea 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!buf) {
   1f328:	4607      	mov	r7, r0
   1f32a:	2800      	cmp	r0, #0
   1f32c:	d0a5      	beq.n	1f27a <compute_and_check_and_send_periph_dhcheck+0xa6>
   1f32e:	2110      	movs	r1, #16
   1f330:	300c      	adds	r0, #12
   1f332:	f010 f87e 	bl	2f432 <net_buf_simple_add>
   1f336:	4632      	mov	r2, r6
   1f338:	4603      	mov	r3, r0
   1f33a:	4616      	mov	r6, r2
   1f33c:	ce03      	ldmia	r6!, {r0, r1}
   1f33e:	42ae      	cmp	r6, r5
   1f340:	6018      	str	r0, [r3, #0]
   1f342:	6059      	str	r1, [r3, #4]
   1f344:	4632      	mov	r2, r6
   1f346:	f103 0308 	add.w	r3, r3, #8
   1f34a:	d1f6      	bne.n	1f33a <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   1f34c:	2200      	movs	r2, #0
   1f34e:	4639      	mov	r1, r7
   1f350:	4620      	mov	r0, r4
   1f352:	f00f fc97 	bl	2ec84 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f356:	1d20      	adds	r0, r4, #4
   1f358:	2101      	movs	r1, #1
   1f35a:	f00f fcbf 	bl	2ecdc <atomic_set_bit>
	return 0;
   1f35e:	2000      	movs	r0, #0
   1f360:	e78c      	b.n	1f27c <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1f362:	200b      	movs	r0, #11
   1f364:	e78a      	b.n	1f27c <compute_and_check_and_send_periph_dhcheck+0xa8>
   1f366:	bf00      	nop
   1f368:	000378fa 	.word	0x000378fa
   1f36c:	00033080 	.word	0x00033080
   1f370:	00037875 	.word	0x00037875
   1f374:	0003790f 	.word	0x0003790f
   1f378:	00037932 	.word	0x00037932

0001f37c <bt_smp_connected>:
{
   1f37c:	b538      	push	{r3, r4, r5, lr}
   1f37e:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1f380:	4908      	ldr	r1, [pc, #32]	; (1f3a4 <bt_smp_connected+0x28>)
   1f382:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1f386:	308c      	adds	r0, #140	; 0x8c
   1f388:	f011 fec8 	bl	3111c <k_work_init_delayable>
	smp_reset(smp);
   1f38c:	4628      	mov	r0, r5
   1f38e:	f00f fd4e 	bl	2ee2e <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f392:	4b05      	ldr	r3, [pc, #20]	; (1f3a8 <bt_smp_connected+0x2c>)
   1f394:	34bc      	adds	r4, #188	; 0xbc
   1f396:	e8d4 2fef 	ldaex	r2, [r4]
   1f39a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1f39e:	2900      	cmp	r1, #0
   1f3a0:	d1f9      	bne.n	1f396 <bt_smp_connected+0x1a>
}
   1f3a2:	bd38      	pop	{r3, r4, r5, pc}
   1f3a4:	0001ffd9 	.word	0x0001ffd9
   1f3a8:	2000a200 	.word	0x2000a200

0001f3ac <smp_pairing_confirm>:
{
   1f3ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f3ae:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1f3b0:	68cd      	ldr	r5, [r1, #12]
{
   1f3b2:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f3b4:	210b      	movs	r1, #11
   1f3b6:	4630      	mov	r0, r6
   1f3b8:	f00f fc50 	bl	2ec5c <atomic_clear_bit>
   1f3bc:	462b      	mov	r3, r5
   1f3be:	f104 0217 	add.w	r2, r4, #23
   1f3c2:	f105 0110 	add.w	r1, r5, #16
   1f3c6:	f853 0b04 	ldr.w	r0, [r3], #4
   1f3ca:	428b      	cmp	r3, r1
   1f3cc:	f842 0b04 	str.w	r0, [r2], #4
   1f3d0:	d1f9      	bne.n	1f3c6 <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f3d2:	2105      	movs	r1, #5
   1f3d4:	4630      	mov	r0, r6
   1f3d6:	f00f fc1a 	bl	2ec0e <atomic_test_bit>
   1f3da:	b928      	cbnz	r0, 1f3e8 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   1f3dc:	4620      	mov	r0, r4
}
   1f3de:	b004      	add	sp, #16
   1f3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1f3e4:	f00f bd99 	b.w	2ef1a <legacy_pairing_confirm>
	switch (smp->method) {
   1f3e8:	7a23      	ldrb	r3, [r4, #8]
   1f3ea:	2b01      	cmp	r3, #1
   1f3ec:	d00a      	beq.n	1f404 <smp_pairing_confirm+0x58>
   1f3ee:	2b02      	cmp	r3, #2
   1f3f0:	d115      	bne.n	1f41e <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f3f2:	2104      	movs	r1, #4
   1f3f4:	4620      	mov	r0, r4
   1f3f6:	f00f fc71 	bl	2ecdc <atomic_set_bit>
}
   1f3fa:	b004      	add	sp, #16
   1f3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1f400:	f7ff bbca 	b.w	1eb98 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f404:	210a      	movs	r1, #10
   1f406:	4630      	mov	r0, r6
   1f408:	f00f fc01 	bl	2ec0e <atomic_test_bit>
   1f40c:	2800      	cmp	r0, #0
   1f40e:	d0f0      	beq.n	1f3f2 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f410:	4630      	mov	r0, r6
   1f412:	2100      	movs	r1, #0
   1f414:	f00f fc62 	bl	2ecdc <atomic_set_bit>
			return 0;
   1f418:	2000      	movs	r0, #0
}
   1f41a:	b004      	add	sp, #16
   1f41c:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1f41e:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f420:	4b05      	ldr	r3, [pc, #20]	; (1f438 <smp_pairing_confirm+0x8c>)
   1f422:	2201      	movs	r2, #1
   1f424:	9302      	str	r3, [sp, #8]
   1f426:	2300      	movs	r3, #0
   1f428:	4904      	ldr	r1, [pc, #16]	; (1f43c <smp_pairing_confirm+0x90>)
   1f42a:	4618      	mov	r0, r3
   1f42c:	e9cd 3300 	strd	r3, r3, [sp]
   1f430:	f00f fc45 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f434:	2008      	movs	r0, #8
   1f436:	e7f0      	b.n	1f41a <smp_pairing_confirm+0x6e>
   1f438:	00037875 	.word	0x00037875
   1f43c:	00033080 	.word	0x00033080

0001f440 <smp_pairing_random>:
{
   1f440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f444:	4604      	mov	r4, r0
   1f446:	b089      	sub	sp, #36	; 0x24
   1f448:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f44a:	f7ff fa57 	bl	1e8fc <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f44e:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f452:	4605      	mov	r5, r0
   1f454:	464a      	mov	r2, r9
   1f456:	68f3      	ldr	r3, [r6, #12]
   1f458:	f103 0110 	add.w	r1, r3, #16
   1f45c:	f853 0b04 	ldr.w	r0, [r3], #4
   1f460:	428b      	cmp	r3, r1
   1f462:	f842 0b04 	str.w	r0, [r2], #4
   1f466:	d1f9      	bne.n	1f45c <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f468:	1d27      	adds	r7, r4, #4
   1f46a:	2105      	movs	r1, #5
   1f46c:	4638      	mov	r0, r7
   1f46e:	f00f fbce 	bl	2ec0e <atomic_test_bit>
   1f472:	2800      	cmp	r0, #0
   1f474:	d14f      	bne.n	1f516 <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   1f476:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f47a:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f47e:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f482:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f484:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f486:	9201      	str	r2, [sp, #4]
   1f488:	9300      	str	r3, [sp, #0]
   1f48a:	4649      	mov	r1, r9
   1f48c:	4630      	mov	r0, r6
   1f48e:	9502      	str	r5, [sp, #8]
   1f490:	f104 0310 	add.w	r3, r4, #16
   1f494:	f104 0209 	add.w	r2, r4, #9
   1f498:	f00f fce4 	bl	2ee64 <smp_c1>
	if (err) {
   1f49c:	bb20      	cbnz	r0, 1f4e8 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1f49e:	2210      	movs	r2, #16
   1f4a0:	4629      	mov	r1, r5
   1f4a2:	f104 0017 	add.w	r0, r4, #23
   1f4a6:	f012 f9b2 	bl	3180e <memcmp>
   1f4aa:	4680      	mov	r8, r0
   1f4ac:	2800      	cmp	r0, #0
   1f4ae:	d177      	bne.n	1f5a0 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   1f4b0:	462b      	mov	r3, r5
   1f4b2:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1f4b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   1f4ba:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   1f4bc:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1f4be:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1f4c2:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   1f4c6:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1f4c8:	4629      	mov	r1, r5
   1f4ca:	4630      	mov	r0, r6
   1f4cc:	f00e fa15 	bl	2d8fa <bt_encrypt_le>
		if (err) {
   1f4d0:	b170      	cbz	r0, 1f4f0 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1f4d2:	4b62      	ldr	r3, [pc, #392]	; (1f65c <smp_pairing_random+0x21c>)
   1f4d4:	f8cd 8000 	str.w	r8, [sp]
   1f4d8:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1f4dc:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   1f4de:	2201      	movs	r2, #1
   1f4e0:	4618      	mov	r0, r3
   1f4e2:	495f      	ldr	r1, [pc, #380]	; (1f660 <smp_pairing_random+0x220>)
   1f4e4:	f00f fbeb 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f4e8:	2008      	movs	r0, #8
}
   1f4ea:	b009      	add	sp, #36	; 0x24
   1f4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f4f0:	4633      	mov	r3, r6
   1f4f2:	ae08      	add	r6, sp, #32
   1f4f4:	462a      	mov	r2, r5
   1f4f6:	ca03      	ldmia	r2!, {r0, r1}
   1f4f8:	42b2      	cmp	r2, r6
   1f4fa:	6018      	str	r0, [r3, #0]
   1f4fc:	6059      	str	r1, [r3, #4]
   1f4fe:	4615      	mov	r5, r2
   1f500:	f103 0308 	add.w	r3, r3, #8
   1f504:	d1f6      	bne.n	1f4f4 <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f506:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f508:	4638      	mov	r0, r7
   1f50a:	f00f fbe7 	bl	2ecdc <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1f50e:	4620      	mov	r0, r4
   1f510:	f00f fc2d 	bl	2ed6e <smp_send_pairing_random>
   1f514:	e7e9      	b.n	1f4ea <smp_pairing_random+0xaa>
	switch (smp->method) {
   1f516:	7a23      	ldrb	r3, [r4, #8]
   1f518:	2b05      	cmp	r3, #5
   1f51a:	f200 8091 	bhi.w	1f640 <smp_pairing_random+0x200>
   1f51e:	e8df f003 	tbb	[pc, r3]
   1f522:	1f19      	.short	0x1f19
   1f524:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1f528:	ab04      	add	r3, sp, #16
   1f52a:	494e      	ldr	r1, [pc, #312]	; (1f664 <smp_pairing_random+0x224>)
   1f52c:	9300      	str	r3, [sp, #0]
   1f52e:	464a      	mov	r2, r9
   1f530:	6809      	ldr	r1, [r1, #0]
   1f532:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1f536:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f53a:	f000 ff31 	bl	203a0 <bt_crypto_g2>
   1f53e:	2800      	cmp	r0, #0
   1f540:	d1d2      	bne.n	1f4e8 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f542:	210a      	movs	r1, #10
   1f544:	4638      	mov	r0, r7
   1f546:	f00f fbc9 	bl	2ecdc <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1f54a:	68ab      	ldr	r3, [r5, #8]
   1f54c:	9904      	ldr	r1, [sp, #16]
   1f54e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f552:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f554:	210d      	movs	r1, #13
   1f556:	4620      	mov	r0, r4
   1f558:	f00f fbc0 	bl	2ecdc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f55c:	2110      	movs	r1, #16
   1f55e:	e7d3      	b.n	1f508 <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f560:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1f564:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f568:	493e      	ldr	r1, [pc, #248]	; (1f664 <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f56a:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f56c:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f56e:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f572:	9500      	str	r5, [sp, #0]
   1f574:	464a      	mov	r2, r9
   1f576:	6809      	ldr	r1, [r1, #0]
   1f578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f57c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f580:	f00f fe81 	bl	2f286 <bt_crypto_f4>
   1f584:	b128      	cbz	r0, 1f592 <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   1f586:	4b38      	ldr	r3, [pc, #224]	; (1f668 <smp_pairing_random+0x228>)
   1f588:	9302      	str	r3, [sp, #8]
   1f58a:	2300      	movs	r3, #0
   1f58c:	e9cd 3300 	strd	r3, r3, [sp]
   1f590:	e7a5      	b.n	1f4de <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1f592:	2210      	movs	r2, #16
   1f594:	4629      	mov	r1, r5
   1f596:	f104 0017 	add.w	r0, r4, #23
   1f59a:	f012 f938 	bl	3180e <memcmp>
   1f59e:	b108      	cbz	r0, 1f5a4 <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1f5a0:	2004      	movs	r0, #4
   1f5a2:	e7a2      	b.n	1f4ea <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   1f5a4:	2103      	movs	r1, #3
   1f5a6:	4620      	mov	r0, r4
   1f5a8:	f00f fb98 	bl	2ecdc <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1f5ac:	f00f fbdf 	bl	2ed6e <smp_send_pairing_random>
		if (err) {
   1f5b0:	2800      	cmp	r0, #0
   1f5b2:	d19a      	bne.n	1f4ea <smp_pairing_random+0xaa>
		smp->passkey_round++;
   1f5b4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1f5b8:	3301      	adds	r3, #1
   1f5ba:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1f5bc:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1f5be:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1f5c2:	d109      	bne.n	1f5d8 <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f5c4:	210d      	movs	r1, #13
   1f5c6:	4620      	mov	r0, r4
   1f5c8:	f00f fb88 	bl	2ecdc <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f5cc:	2110      	movs	r1, #16
   1f5ce:	4638      	mov	r0, r7
   1f5d0:	f00f fb84 	bl	2ecdc <atomic_set_bit>
			return 0;
   1f5d4:	2000      	movs	r0, #0
   1f5d6:	e788      	b.n	1f4ea <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   1f5d8:	2110      	movs	r1, #16
   1f5da:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f5de:	f7fc f94f 	bl	1b880 <bt_rand>
   1f5e2:	3800      	subs	r0, #0
   1f5e4:	bf18      	it	ne
   1f5e6:	2001      	movne	r0, #1
   1f5e8:	00c0      	lsls	r0, r0, #3
   1f5ea:	e77e      	b.n	1f4ea <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   1f5ec:	2110      	movs	r1, #16
   1f5ee:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f5f2:	f7fc f945 	bl	1b880 <bt_rand>
   1f5f6:	2800      	cmp	r0, #0
   1f5f8:	f47f af76 	bne.w	1f4e8 <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f5fc:	b365      	cbz	r5, 1f658 <smp_pairing_random+0x218>
   1f5fe:	68eb      	ldr	r3, [r5, #12]
   1f600:	b353      	cbz	r3, 1f658 <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   1f602:	4b1a      	ldr	r3, [pc, #104]	; (1f66c <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f604:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1f606:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f608:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   1f60a:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f60e:	7ca3      	ldrb	r3, [r4, #18]
   1f610:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f614:	d412      	bmi.n	1f63c <smp_pairing_random+0x1fc>
   1f616:	2b00      	cmp	r3, #0
   1f618:	bf14      	ite	ne
   1f61a:	2301      	movne	r3, #1
   1f61c:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1f61e:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   1f622:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1f624:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   1f626:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1f62a:	210c      	movs	r1, #12
   1f62c:	f00f fb56 	bl	2ecdc <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f630:	68eb      	ldr	r3, [r5, #12]
   1f632:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f636:	a904      	add	r1, sp, #16
   1f638:	4798      	blx	r3
			return 0;
   1f63a:	e7cb      	b.n	1f5d4 <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   1f63c:	005b      	lsls	r3, r3, #1
   1f63e:	e7ee      	b.n	1f61e <smp_pairing_random+0x1de>
	switch (smp->method) {
   1f640:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f642:	4b0b      	ldr	r3, [pc, #44]	; (1f670 <smp_pairing_random+0x230>)
   1f644:	2201      	movs	r2, #1
   1f646:	9302      	str	r3, [sp, #8]
   1f648:	2300      	movs	r3, #0
   1f64a:	4905      	ldr	r1, [pc, #20]	; (1f660 <smp_pairing_random+0x220>)
   1f64c:	4618      	mov	r0, r3
   1f64e:	e9cd 3300 	strd	r3, r3, [sp]
   1f652:	f00f fb34 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f656:	e747      	b.n	1f4e8 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f658:	2002      	movs	r0, #2
   1f65a:	e746      	b.n	1f4ea <smp_pairing_random+0xaa>
   1f65c:	00037956 	.word	0x00037956
   1f660:	00033080 	.word	0x00033080
   1f664:	20030b04 	.word	0x20030b04
   1f668:	0003796b 	.word	0x0003796b
   1f66c:	0003322e 	.word	0x0003322e
   1f670:	00037875 	.word	0x00037875

0001f674 <bt_smp_start_security>:
{
   1f674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1f678:	78c6      	ldrb	r6, [r0, #3]
{
   1f67a:	4604      	mov	r4, r0
	switch (conn->role) {
   1f67c:	2e01      	cmp	r6, #1
   1f67e:	d005      	beq.n	1f68c <bt_smp_start_security+0x18>
		return -EINVAL;
   1f680:	f06f 0415 	mvn.w	r4, #21
}
   1f684:	4620      	mov	r0, r4
   1f686:	b003      	add	sp, #12
   1f688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1f68c:	f7ff f990 	bl	1e9b0 <smp_chan_get>
	if (!smp) {
   1f690:	4605      	mov	r5, r0
   1f692:	2800      	cmp	r0, #0
   1f694:	f000 80ac 	beq.w	1f7f0 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f698:	1d07      	adds	r7, r0, #4
   1f69a:	2104      	movs	r1, #4
   1f69c:	4638      	mov	r0, r7
   1f69e:	f00f fab6 	bl	2ec0e <atomic_test_bit>
   1f6a2:	2800      	cmp	r0, #0
   1f6a4:	f040 80a7 	bne.w	1f7f6 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f6a8:	2103      	movs	r1, #3
   1f6aa:	4638      	mov	r0, r7
   1f6ac:	f00f faaf 	bl	2ec0e <atomic_test_bit>
   1f6b0:	b110      	cbz	r0, 1f6b8 <bt_smp_start_security+0x44>
		return -EBUSY;
   1f6b2:	f06f 040f 	mvn.w	r4, #15
   1f6b6:	e7e5      	b.n	1f684 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f6b8:	4631      	mov	r1, r6
   1f6ba:	4638      	mov	r0, r7
   1f6bc:	f00f faa7 	bl	2ec0e <atomic_test_bit>
   1f6c0:	2800      	cmp	r0, #0
   1f6c2:	d1f6      	bne.n	1f6b2 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f6c4:	4628      	mov	r0, r5
   1f6c6:	f7ff f919 	bl	1e8fc <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f6ca:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f6ce:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1f6d0:	7a9b      	ldrb	r3, [r3, #10]
   1f6d2:	2b03      	cmp	r3, #3
   1f6d4:	d042      	beq.n	1f75c <bt_smp_start_security+0xe8>
   1f6d6:	d832      	bhi.n	1f73e <bt_smp_start_security+0xca>
   1f6d8:	3b01      	subs	r3, #1
   1f6da:	2b01      	cmp	r3, #1
   1f6dc:	d948      	bls.n	1f770 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1f6de:	210b      	movs	r1, #11
   1f6e0:	1d20      	adds	r0, r4, #4
   1f6e2:	f00f fa94 	bl	2ec0e <atomic_test_bit>
   1f6e6:	2800      	cmp	r0, #0
   1f6e8:	d1ca      	bne.n	1f680 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1f6ea:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f6ee:	b983      	cbnz	r3, 1f712 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1f6f0:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1f6f4:	4632      	mov	r2, r6
   1f6f6:	2020      	movs	r0, #32
   1f6f8:	7a21      	ldrb	r1, [r4, #8]
   1f6fa:	f000 fd6f 	bl	201dc <bt_keys_find>
   1f6fe:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f702:	b930      	cbnz	r0, 1f712 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1f704:	4632      	mov	r2, r6
   1f706:	2004      	movs	r0, #4
   1f708:	7a21      	ldrb	r1, [r4, #8]
   1f70a:	f000 fd67 	bl	201dc <bt_keys_find>
   1f70e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1f712:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f716:	2b00      	cmp	r3, #0
   1f718:	d0b2      	beq.n	1f680 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1f71a:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1f71c:	f012 0f24 	tst.w	r2, #36	; 0x24
   1f720:	d0ae      	beq.n	1f680 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1f722:	7aa1      	ldrb	r1, [r4, #10]
   1f724:	2902      	cmp	r1, #2
   1f726:	d923      	bls.n	1f770 <bt_smp_start_security+0xfc>
   1f728:	7b58      	ldrb	r0, [r3, #13]
   1f72a:	07c0      	lsls	r0, r0, #31
   1f72c:	d5a8      	bpl.n	1f680 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1f72e:	2903      	cmp	r1, #3
   1f730:	d01e      	beq.n	1f770 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f732:	0692      	lsls	r2, r2, #26
   1f734:	d5a4      	bpl.n	1f680 <bt_smp_start_security+0xc>
   1f736:	7b1b      	ldrb	r3, [r3, #12]
   1f738:	2b10      	cmp	r3, #16
   1f73a:	d1a1      	bne.n	1f680 <bt_smp_start_security+0xc>
   1f73c:	e018      	b.n	1f770 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f73e:	2b04      	cmp	r3, #4
   1f740:	d1cd      	bne.n	1f6de <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f742:	4628      	mov	r0, r5
   1f744:	f7ff f8f0 	bl	1e928 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f748:	2803      	cmp	r0, #3
   1f74a:	d104      	bne.n	1f756 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f74c:	2e00      	cmp	r6, #0
   1f74e:	d0c6      	beq.n	1f6de <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f750:	68f3      	ldr	r3, [r6, #12]
   1f752:	2b00      	cmp	r3, #0
   1f754:	d0c3      	beq.n	1f6de <bt_smp_start_security+0x6a>
   1f756:	4b29      	ldr	r3, [pc, #164]	; (1f7fc <bt_smp_start_security+0x188>)
   1f758:	781b      	ldrb	r3, [r3, #0]
   1f75a:	e007      	b.n	1f76c <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f75c:	4628      	mov	r0, r5
   1f75e:	f7ff f8e3 	bl	1e928 <get_io_capa>
   1f762:	2803      	cmp	r0, #3
   1f764:	d104      	bne.n	1f770 <bt_smp_start_security+0xfc>
   1f766:	2e00      	cmp	r6, #0
   1f768:	d0b9      	beq.n	1f6de <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1f76a:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f76c:	2b00      	cmp	r3, #0
   1f76e:	d0b6      	beq.n	1f6de <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1f770:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f774:	b13b      	cbz	r3, 1f786 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1f776:	4628      	mov	r0, r5
   1f778:	f7ff f958 	bl	1ea2c <smp_init>
   1f77c:	4680      	mov	r8, r0
   1f77e:	b170      	cbz	r0, 1f79e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1f780:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1f784:	e77e      	b.n	1f684 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f786:	7a20      	ldrb	r0, [r4, #8]
   1f788:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f78c:	f000 fcf0 	bl	20170 <bt_keys_get_addr>
   1f790:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f794:	2800      	cmp	r0, #0
   1f796:	d1ee      	bne.n	1f776 <bt_smp_start_security+0x102>
			return -ENOMEM;
   1f798:	f06f 040b 	mvn.w	r4, #11
   1f79c:	e772      	b.n	1f684 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1f79e:	210b      	movs	r1, #11
   1f7a0:	4628      	mov	r0, r5
   1f7a2:	f00f faab 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1f7a6:	4606      	mov	r6, r0
   1f7a8:	2800      	cmp	r0, #0
   1f7aa:	d0e9      	beq.n	1f780 <bt_smp_start_security+0x10c>
   1f7ac:	2101      	movs	r1, #1
   1f7ae:	300c      	adds	r0, #12
   1f7b0:	f00f fe3f 	bl	2f432 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1f7b4:	2109      	movs	r1, #9
   1f7b6:	4681      	mov	r9, r0
   1f7b8:	4628      	mov	r0, r5
   1f7ba:	f7ff f8db 	bl	1e974 <get_auth>
   1f7be:	4643      	mov	r3, r8
   1f7c0:	f889 0000 	strb.w	r0, [r9]
   1f7c4:	4632      	mov	r2, r6
   1f7c6:	4620      	mov	r0, r4
   1f7c8:	2106      	movs	r1, #6
   1f7ca:	f8cd 8000 	str.w	r8, [sp]
   1f7ce:	f00e fa87 	bl	2dce0 <bt_l2cap_send_cb>
	if (err) {
   1f7d2:	4604      	mov	r4, r0
   1f7d4:	b118      	cbz	r0, 1f7de <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1f7d6:	4630      	mov	r0, r6
   1f7d8:	f000 fee0 	bl	2059c <net_buf_unref>
		return err;
   1f7dc:	e752      	b.n	1f684 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1f7de:	4638      	mov	r0, r7
   1f7e0:	210f      	movs	r1, #15
   1f7e2:	f00f fa7b 	bl	2ecdc <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f7e6:	2101      	movs	r1, #1
   1f7e8:	4628      	mov	r0, r5
   1f7ea:	f00f fa77 	bl	2ecdc <atomic_set_bit>
	return 0;
   1f7ee:	e749      	b.n	1f684 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1f7f0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1f7f4:	e746      	b.n	1f684 <bt_smp_start_security+0x10>
		return -EIO;
   1f7f6:	f06f 0404 	mvn.w	r4, #4
   1f7fa:	e743      	b.n	1f684 <bt_smp_start_security+0x10>
   1f7fc:	20031acf 	.word	0x20031acf

0001f800 <smp_pairing_complete>:
{
   1f800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f802:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f804:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f808:	1d04      	adds	r4, r0, #4
	if (!status) {
   1f80a:	bb39      	cbnz	r1, 1f85c <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f80c:	210d      	movs	r1, #13
   1f80e:	4620      	mov	r0, r4
   1f810:	f00f f9fd 	bl	2ec0e <atomic_test_bit>
	return list->head;
   1f814:	4b36      	ldr	r3, [pc, #216]	; (1f8f0 <smp_pairing_complete+0xf0>)
   1f816:	4607      	mov	r7, r0
   1f818:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f81a:	b19b      	cbz	r3, 1f844 <smp_pairing_complete+0x44>
	return node->next;
   1f81c:	681c      	ldr	r4, [r3, #0]
   1f81e:	b104      	cbz	r4, 1f822 <smp_pairing_complete+0x22>
   1f820:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1f822:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1f826:	b113      	cbz	r3, 1f82e <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   1f828:	4639      	mov	r1, r7
   1f82a:	4628      	mov	r0, r5
   1f82c:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f82e:	b14c      	cbz	r4, 1f844 <smp_pairing_complete+0x44>
   1f830:	4623      	mov	r3, r4
   1f832:	68e4      	ldr	r4, [r4, #12]
   1f834:	681b      	ldr	r3, [r3, #0]
   1f836:	b11c      	cbz	r4, 1f840 <smp_pairing_complete+0x40>
   1f838:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1f83a:	2b00      	cmp	r3, #0
   1f83c:	d1f4      	bne.n	1f828 <smp_pairing_complete+0x28>
   1f83e:	e7f7      	b.n	1f830 <smp_pairing_complete+0x30>
   1f840:	2b00      	cmp	r3, #0
   1f842:	d1f1      	bne.n	1f828 <smp_pairing_complete+0x28>
	smp_reset(smp);
   1f844:	4630      	mov	r0, r6
   1f846:	f00f faf2 	bl	2ee2e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1f84a:	7a6a      	ldrb	r2, [r5, #9]
   1f84c:	7aab      	ldrb	r3, [r5, #10]
   1f84e:	429a      	cmp	r2, r3
   1f850:	d04d      	beq.n	1f8ee <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   1f852:	4628      	mov	r0, r5
}
   1f854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1f858:	f7ff bf0c 	b.w	1f674 <bt_smp_start_security>
	switch (smp_err) {
   1f85c:	3901      	subs	r1, #1
   1f85e:	b2c9      	uxtb	r1, r1
   1f860:	290e      	cmp	r1, #14
   1f862:	bf96      	itet	ls
   1f864:	4b23      	ldrls	r3, [pc, #140]	; (1f8f4 <smp_pairing_complete+0xf4>)
	if (!status) {
   1f866:	2709      	movhi	r7, #9
   1f868:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1f86a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1f86e:	b143      	cbz	r3, 1f882 <smp_pairing_complete+0x82>
   1f870:	7b1b      	ldrb	r3, [r3, #12]
   1f872:	bb33      	cbnz	r3, 1f8c2 <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   1f874:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1f878:	f00f fcc1 	bl	2f1fe <bt_keys_clear>
			conn->le.keys = NULL;
   1f87c:	2300      	movs	r3, #0
   1f87e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f882:	2102      	movs	r1, #2
   1f884:	4620      	mov	r0, r4
   1f886:	f00f f9c2 	bl	2ec0e <atomic_test_bit>
   1f88a:	b948      	cbnz	r0, 1f8a0 <smp_pairing_complete+0xa0>
	switch (err) {
   1f88c:	2f07      	cmp	r7, #7
   1f88e:	bf94      	ite	ls
   1f890:	4b19      	ldrls	r3, [pc, #100]	; (1f8f8 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f892:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1f894:	463a      	mov	r2, r7
   1f896:	4628      	mov	r0, r5
   1f898:	bf98      	it	ls
   1f89a:	5dd9      	ldrbls	r1, [r3, r7]
   1f89c:	f7fc fd6e 	bl	1c37c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f8a0:	2103      	movs	r1, #3
   1f8a2:	4620      	mov	r0, r4
   1f8a4:	f00f f9b3 	bl	2ec0e <atomic_test_bit>
   1f8a8:	2800      	cmp	r0, #0
   1f8aa:	d0cb      	beq.n	1f844 <smp_pairing_complete+0x44>
	return list->head;
   1f8ac:	4b10      	ldr	r3, [pc, #64]	; (1f8f0 <smp_pairing_complete+0xf0>)
   1f8ae:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f8b0:	2b00      	cmp	r3, #0
   1f8b2:	d0c7      	beq.n	1f844 <smp_pairing_complete+0x44>
	return node->next;
   1f8b4:	681c      	ldr	r4, [r3, #0]
   1f8b6:	b104      	cbz	r4, 1f8ba <smp_pairing_complete+0xba>
   1f8b8:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1f8ba:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1f8be:	b94b      	cbnz	r3, 1f8d4 <smp_pairing_complete+0xd4>
   1f8c0:	e00b      	b.n	1f8da <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1f8c2:	2102      	movs	r1, #2
   1f8c4:	4620      	mov	r0, r4
   1f8c6:	f00f f9a2 	bl	2ec0e <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1f8ca:	2800      	cmp	r0, #0
   1f8cc:	d1d2      	bne.n	1f874 <smp_pairing_complete+0x74>
   1f8ce:	e7d8      	b.n	1f882 <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f8d0:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1f8d2:	b123      	cbz	r3, 1f8de <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   1f8d4:	4639      	mov	r1, r7
   1f8d6:	4628      	mov	r0, r5
   1f8d8:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f8da:	2c00      	cmp	r4, #0
   1f8dc:	d0b2      	beq.n	1f844 <smp_pairing_complete+0x44>
   1f8de:	4623      	mov	r3, r4
   1f8e0:	68e4      	ldr	r4, [r4, #12]
   1f8e2:	685b      	ldr	r3, [r3, #4]
   1f8e4:	2c00      	cmp	r4, #0
   1f8e6:	d1f3      	bne.n	1f8d0 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   1f8e8:	2b00      	cmp	r3, #0
   1f8ea:	d1f3      	bne.n	1f8d4 <smp_pairing_complete+0xd4>
   1f8ec:	e7aa      	b.n	1f844 <smp_pairing_complete+0x44>
}
   1f8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f8f0:	200309dc 	.word	0x200309dc
   1f8f4:	00037ba5 	.word	0x00037ba5
   1f8f8:	00037b94 	.word	0x00037b94

0001f8fc <smp_error>:
{
   1f8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f8fe:	1d03      	adds	r3, r0, #4
{
   1f900:	4606      	mov	r6, r0
   1f902:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f904:	4618      	mov	r0, r3
   1f906:	2102      	movs	r1, #2
{
   1f908:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f90a:	f00f f980 	bl	2ec0e <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1f90e:	4604      	mov	r4, r0
   1f910:	b120      	cbz	r0, 1f91c <smp_error+0x20>
   1f912:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1f916:	fab4 f484 	clz	r4, r4
   1f91a:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f91c:	2103      	movs	r1, #3
   1f91e:	4618      	mov	r0, r3
   1f920:	f00f f975 	bl	2ec0e <atomic_test_bit>
   1f924:	b1b0      	cbz	r0, 1f954 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1f926:	4639      	mov	r1, r7
   1f928:	4630      	mov	r0, r6
   1f92a:	f7ff ff69 	bl	1f800 <smp_pairing_complete>
	if (remote_already_completed) {
   1f92e:	b1f4      	cbz	r4, 1f96e <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1f930:	4b1d      	ldr	r3, [pc, #116]	; (1f9a8 <smp_error+0xac>)
   1f932:	491e      	ldr	r1, [pc, #120]	; (1f9ac <smp_error+0xb0>)
   1f934:	9302      	str	r3, [sp, #8]
   1f936:	2300      	movs	r3, #0
   1f938:	2202      	movs	r2, #2
   1f93a:	4618      	mov	r0, r3
   1f93c:	e9cd 3300 	strd	r3, r3, [sp]
   1f940:	f00f f9bd 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1f944:	2105      	movs	r1, #5
   1f946:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1f94a:	f00e f8d3 	bl	2daf4 <bt_conn_disconnect>
		return 0;
   1f94e:	2000      	movs	r0, #0
}
   1f950:	b005      	add	sp, #20
   1f952:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f954:	2101      	movs	r1, #1
   1f956:	4618      	mov	r0, r3
   1f958:	f00f f959 	bl	2ec0e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f95c:	2800      	cmp	r0, #0
   1f95e:	d1e2      	bne.n	1f926 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f960:	210f      	movs	r1, #15
   1f962:	4618      	mov	r0, r3
   1f964:	f00f f953 	bl	2ec0e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f968:	2800      	cmp	r0, #0
   1f96a:	d1dc      	bne.n	1f926 <smp_error+0x2a>
   1f96c:	e7df      	b.n	1f92e <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1f96e:	2105      	movs	r1, #5
   1f970:	4630      	mov	r0, r6
   1f972:	f00f f9c3 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!buf) {
   1f976:	4605      	mov	r5, r0
   1f978:	b190      	cbz	r0, 1f9a0 <smp_error+0xa4>
   1f97a:	2101      	movs	r1, #1
   1f97c:	300c      	adds	r0, #12
   1f97e:	f00f fd58 	bl	2f432 <net_buf_simple_add>
	rsp->reason = reason;
   1f982:	7007      	strb	r7, [r0, #0]
   1f984:	9400      	str	r4, [sp, #0]
   1f986:	4623      	mov	r3, r4
   1f988:	462a      	mov	r2, r5
   1f98a:	2106      	movs	r1, #6
   1f98c:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1f990:	f00e f9a6 	bl	2dce0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1f994:	2800      	cmp	r0, #0
   1f996:	d0da      	beq.n	1f94e <smp_error+0x52>
		net_buf_unref(buf);
   1f998:	4628      	mov	r0, r5
   1f99a:	f000 fdff 	bl	2059c <net_buf_unref>
   1f99e:	e7d6      	b.n	1f94e <smp_error+0x52>
		return -ENOBUFS;
   1f9a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f9a4:	e7d4      	b.n	1f950 <smp_error+0x54>
   1f9a6:	bf00      	nop
   1f9a8:	00037984 	.word	0x00037984
   1f9ac:	00033080 	.word	0x00033080

0001f9b0 <bt_smp_recv>:
{
   1f9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1f9b4:	8a0b      	ldrh	r3, [r1, #16]
{
   1f9b6:	4604      	mov	r4, r0
   1f9b8:	460e      	mov	r6, r1
   1f9ba:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1f9bc:	b963      	cbnz	r3, 1f9d8 <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   1f9be:	4a3c      	ldr	r2, [pc, #240]	; (1fab0 <bt_smp_recv+0x100>)
   1f9c0:	4618      	mov	r0, r3
   1f9c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1f9c6:	493b      	ldr	r1, [pc, #236]	; (1fab4 <bt_smp_recv+0x104>)
   1f9c8:	2201      	movs	r2, #1
   1f9ca:	9300      	str	r3, [sp, #0]
   1f9cc:	f00f f977 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
}
   1f9d0:	2000      	movs	r0, #0
   1f9d2:	b006      	add	sp, #24
   1f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1f9d8:	2101      	movs	r1, #1
   1f9da:	f106 000c 	add.w	r0, r6, #12
   1f9de:	f00f fd58 	bl	2f492 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f9e2:	2104      	movs	r1, #4
   1f9e4:	4607      	mov	r7, r0
   1f9e6:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   1f9ea:	f00f f910 	bl	2ec0e <atomic_test_bit>
   1f9ee:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1f9f2:	7839      	ldrb	r1, [r7, #0]
   1f9f4:	4604      	mov	r4, r0
   1f9f6:	b158      	cbz	r0, 1fa10 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1f9f8:	4b2f      	ldr	r3, [pc, #188]	; (1fab8 <bt_smp_recv+0x108>)
   1f9fa:	2202      	movs	r2, #2
   1f9fc:	9302      	str	r3, [sp, #8]
   1f9fe:	2300      	movs	r3, #0
   1fa00:	4618      	mov	r0, r3
   1fa02:	e9cd 3300 	strd	r3, r3, [sp]
   1fa06:	9103      	str	r1, [sp, #12]
   1fa08:	492a      	ldr	r1, [pc, #168]	; (1fab4 <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1fa0a:	f00f f958 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return 0;
   1fa0e:	e7df      	b.n	1f9d0 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1fa10:	290e      	cmp	r1, #14
   1fa12:	d908      	bls.n	1fa26 <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1fa14:	4b29      	ldr	r3, [pc, #164]	; (1fabc <bt_smp_recv+0x10c>)
   1fa16:	9103      	str	r1, [sp, #12]
   1fa18:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1fa1c:	2202      	movs	r2, #2
   1fa1e:	4603      	mov	r3, r0
   1fa20:	4924      	ldr	r1, [pc, #144]	; (1fab4 <bt_smp_recv+0x104>)
   1fa22:	9000      	str	r0, [sp, #0]
   1fa24:	e7f1      	b.n	1fa0a <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   1fa26:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1fac0 <bt_smp_recv+0x110>
   1fa2a:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1fa2e:	b96b      	cbnz	r3, 1fa4c <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1fa30:	4a24      	ldr	r2, [pc, #144]	; (1fac4 <bt_smp_recv+0x114>)
   1fa32:	9103      	str	r1, [sp, #12]
   1fa34:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1fa38:	491e      	ldr	r1, [pc, #120]	; (1fab4 <bt_smp_recv+0x104>)
   1fa3a:	2202      	movs	r2, #2
   1fa3c:	9300      	str	r3, [sp, #0]
   1fa3e:	f00f f93e 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1fa42:	2107      	movs	r1, #7
		smp_error(smp, err);
   1fa44:	4628      	mov	r0, r5
   1fa46:	f7ff ff59 	bl	1f8fc <smp_error>
   1fa4a:	e7c1      	b.n	1f9d0 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1fa4c:	4628      	mov	r0, r5
   1fa4e:	f00f f9dc 	bl	2ee0a <atomic_test_and_clear_bit>
   1fa52:	783a      	ldrb	r2, [r7, #0]
   1fa54:	4603      	mov	r3, r0
   1fa56:	b968      	cbnz	r0, 1fa74 <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1fa58:	9203      	str	r2, [sp, #12]
   1fa5a:	4a1b      	ldr	r2, [pc, #108]	; (1fac8 <bt_smp_recv+0x118>)
   1fa5c:	4915      	ldr	r1, [pc, #84]	; (1fab4 <bt_smp_recv+0x104>)
   1fa5e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1fa62:	9000      	str	r0, [sp, #0]
   1fa64:	2202      	movs	r2, #2
   1fa66:	f00f f92a 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1fa6a:	783b      	ldrb	r3, [r7, #0]
   1fa6c:	2b05      	cmp	r3, #5
   1fa6e:	d0af      	beq.n	1f9d0 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1fa70:	2108      	movs	r1, #8
   1fa72:	e7e7      	b.n	1fa44 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   1fa74:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   1fa78:	8a33      	ldrh	r3, [r6, #16]
   1fa7a:	7909      	ldrb	r1, [r1, #4]
   1fa7c:	4299      	cmp	r1, r3
   1fa7e:	d00d      	beq.n	1fa9c <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1fa80:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1fa84:	4b11      	ldr	r3, [pc, #68]	; (1facc <bt_smp_recv+0x11c>)
   1fa86:	490b      	ldr	r1, [pc, #44]	; (1fab4 <bt_smp_recv+0x104>)
   1fa88:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1fa8c:	2201      	movs	r2, #1
   1fa8e:	4623      	mov	r3, r4
   1fa90:	4620      	mov	r0, r4
   1fa92:	9400      	str	r4, [sp, #0]
   1fa94:	f00f f913 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1fa98:	210a      	movs	r1, #10
   1fa9a:	e7d3      	b.n	1fa44 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   1fa9c:	4631      	mov	r1, r6
   1fa9e:	4628      	mov	r0, r5
   1faa0:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   1faa4:	4798      	blx	r3
	if (err) {
   1faa6:	4601      	mov	r1, r0
   1faa8:	2800      	cmp	r0, #0
   1faaa:	d091      	beq.n	1f9d0 <bt_smp_recv+0x20>
   1faac:	e7ca      	b.n	1fa44 <bt_smp_recv+0x94>
   1faae:	bf00      	nop
   1fab0:	000379dc 	.word	0x000379dc
   1fab4:	00033080 	.word	0x00033080
   1fab8:	000379f7 	.word	0x000379f7
   1fabc:	00037a28 	.word	0x00037a28
   1fac0:	00033edc 	.word	0x00033edc
   1fac4:	00037a4a 	.word	0x00037a4a
   1fac8:	00037a64 	.word	0x00037a64
   1facc:	0003760a 	.word	0x0003760a

0001fad0 <bt_smp_pkey_ready>:
{
   1fad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   1fad2:	4a10      	ldr	r2, [pc, #64]	; (1fb14 <bt_smp_pkey_ready+0x44>)
{
   1fad4:	4603      	mov	r3, r0
	sc_public_key = pkey;
   1fad6:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   1fad8:	b948      	cbnz	r0, 1faee <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   1fada:	4a0f      	ldr	r2, [pc, #60]	; (1fb18 <bt_smp_pkey_ready+0x48>)
   1fadc:	490f      	ldr	r1, [pc, #60]	; (1fb1c <bt_smp_pkey_ready+0x4c>)
   1fade:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1fae2:	9000      	str	r0, [sp, #0]
   1fae4:	2202      	movs	r2, #2
   1fae6:	f00f f8ea 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
}
   1faea:	b004      	add	sp, #16
   1faec:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   1faee:	480c      	ldr	r0, [pc, #48]	; (1fb20 <bt_smp_pkey_ready+0x50>)
   1faf0:	f005 fff6 	bl	25ae0 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1faf4:	4b0b      	ldr	r3, [pc, #44]	; (1fb24 <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   1faf6:	1f1c      	subs	r4, r3, #4
   1faf8:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1fafc:	065b      	lsls	r3, r3, #25
   1fafe:	d5f4      	bpl.n	1faea <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   1fb00:	4620      	mov	r0, r4
   1fb02:	f7ff f897 	bl	1ec34 <smp_public_key_periph>
		if (err) {
   1fb06:	4601      	mov	r1, r0
   1fb08:	2800      	cmp	r0, #0
   1fb0a:	d0ee      	beq.n	1faea <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   1fb0c:	4620      	mov	r0, r4
   1fb0e:	f7ff fef5 	bl	1f8fc <smp_error>
   1fb12:	e7ea      	b.n	1faea <bt_smp_pkey_ready+0x1a>
   1fb14:	20030b04 	.word	0x20030b04
   1fb18:	00037a7f 	.word	0x00037a7f
   1fb1c:	00033080 	.word	0x00033080
   1fb20:	20008dd8 	.word	0x20008dd8
   1fb24:	2000a204 	.word	0x2000a204

0001fb28 <smp_ident_addr_info>:
{
   1fb28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fb2c:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1fb30:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fb32:	f023 0302 	bic.w	r3, r3, #2
   1fb36:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   1fb3a:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fb3e:	783b      	ldrb	r3, [r7, #0]
{
   1fb40:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fb42:	f106 0888 	add.w	r8, r6, #136	; 0x88
   1fb46:	b32b      	cbz	r3, 1fb94 <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1fb48:	79bb      	ldrb	r3, [r7, #6]
   1fb4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fb4e:	2bc0      	cmp	r3, #192	; 0xc0
   1fb50:	d020      	beq.n	1fb94 <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1fb52:	4638      	mov	r0, r7
   1fb54:	f7f9 fbe0 	bl	19318 <bt_addr_le_str>
   1fb58:	2400      	movs	r4, #0
   1fb5a:	4b4d      	ldr	r3, [pc, #308]	; (1fc90 <smp_ident_addr_info+0x168>)
   1fb5c:	2201      	movs	r2, #1
   1fb5e:	494d      	ldr	r1, [pc, #308]	; (1fc94 <smp_ident_addr_info+0x16c>)
   1fb60:	9003      	str	r0, [sp, #12]
   1fb62:	9302      	str	r3, [sp, #8]
   1fb64:	4620      	mov	r0, r4
   1fb66:	4623      	mov	r3, r4
   1fb68:	e9cd 4400 	strd	r4, r4, [sp]
   1fb6c:	f00f f8a7 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fb70:	4640      	mov	r0, r8
   1fb72:	f7f9 fbd1 	bl	19318 <bt_addr_le_str>
   1fb76:	4b48      	ldr	r3, [pc, #288]	; (1fc98 <smp_ident_addr_info+0x170>)
   1fb78:	9003      	str	r0, [sp, #12]
   1fb7a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1fb7e:	4620      	mov	r0, r4
   1fb80:	4623      	mov	r3, r4
   1fb82:	2201      	movs	r2, #1
   1fb84:	4943      	ldr	r1, [pc, #268]	; (1fc94 <smp_ident_addr_info+0x16c>)
   1fb86:	9400      	str	r4, [sp, #0]
   1fb88:	f00f f899 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1fb8c:	200a      	movs	r0, #10
}
   1fb8e:	b004      	add	sp, #16
   1fb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1fb94:	2207      	movs	r2, #7
   1fb96:	4639      	mov	r1, r7
   1fb98:	4640      	mov	r0, r8
   1fb9a:	f011 fe38 	bl	3180e <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1fb9e:	b168      	cbz	r0, 1fbbc <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1fba0:	4639      	mov	r1, r7
   1fba2:	7a30      	ldrb	r0, [r6, #8]
   1fba4:	f000 fb84 	bl	202b0 <bt_keys_find_addr>
		if (keys) {
   1fba8:	4605      	mov	r5, r0
   1fbaa:	b138      	cbz	r0, 1fbbc <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   1fbac:	4601      	mov	r1, r0
   1fbae:	4620      	mov	r0, r4
   1fbb0:	f00f f833 	bl	2ec1a <update_keys_check>
   1fbb4:	b1e8      	cbz	r0, 1fbf2 <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   1fbb6:	4628      	mov	r0, r5
   1fbb8:	f00f fb21 	bl	2f1fe <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fbbc:	210d      	movs	r1, #13
   1fbbe:	1d20      	adds	r0, r4, #4
   1fbc0:	f00f f825 	bl	2ec0e <atomic_test_bit>
   1fbc4:	2800      	cmp	r0, #0
   1fbc6:	d052      	beq.n	1fc6e <smp_ident_addr_info+0x146>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1fbc8:	4642      	mov	r2, r8
   1fbca:	2002      	movs	r0, #2
   1fbcc:	7a31      	ldrb	r1, [r6, #8]
   1fbce:	f00f fb02 	bl	2f1d6 <bt_keys_get_type>
		if (!keys) {
   1fbd2:	4605      	mov	r5, r0
   1fbd4:	b978      	cbnz	r0, 1fbf6 <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fbd6:	4640      	mov	r0, r8
   1fbd8:	f7f9 fb9e 	bl	19318 <bt_addr_le_str>
   1fbdc:	4b2f      	ldr	r3, [pc, #188]	; (1fc9c <smp_ident_addr_info+0x174>)
   1fbde:	9003      	str	r0, [sp, #12]
   1fbe0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1fbe4:	2201      	movs	r2, #1
   1fbe6:	462b      	mov	r3, r5
   1fbe8:	4628      	mov	r0, r5
   1fbea:	492a      	ldr	r1, [pc, #168]	; (1fc94 <smp_ident_addr_info+0x16c>)
   1fbec:	9500      	str	r5, [sp, #0]
   1fbee:	f00f f866 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   1fbf2:	2008      	movs	r0, #8
   1fbf4:	e7cb      	b.n	1fb8e <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1fbf6:	78f3      	ldrb	r3, [r6, #3]
   1fbf8:	bb9b      	cbnz	r3, 1fc62 <smp_ident_addr_info+0x13a>
			dst = &conn->le.resp_addr;
   1fbfa:	f106 0396 	add.w	r3, r6, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1fbfe:	781a      	ldrb	r2, [r3, #0]
   1fc00:	2a01      	cmp	r2, #1
   1fc02:	d11e      	bne.n	1fc42 <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   1fc04:	799a      	ldrb	r2, [r3, #6]
   1fc06:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1fc0a:	2a40      	cmp	r2, #64	; 0x40
   1fc0c:	d119      	bne.n	1fc42 <smp_ident_addr_info+0x11a>
   1fc0e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1fc12:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   1fc16:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1fc1a:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fc1c:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
   1fc20:	b17b      	cbz	r3, 1fc42 <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1fc22:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   1fc26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fc2a:	2bc0      	cmp	r3, #192	; 0xc0
   1fc2c:	d009      	beq.n	1fc42 <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1fc2e:	4639      	mov	r1, r7
   1fc30:	1c68      	adds	r0, r5, #1
   1fc32:	f00f f81e 	bl	2ec72 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1fc36:	4640      	mov	r0, r8
   1fc38:	f00f f81b 	bl	2ec72 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1fc3c:	4630      	mov	r0, r6
   1fc3e:	f7fc fb6f 	bl	1c320 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1fc42:	4628      	mov	r0, r5
   1fc44:	f7fa ff9a 	bl	1ab7c <bt_id_find_conflict>
	if (conflict) {
   1fc48:	b170      	cbz	r0, 1fc68 <smp_ident_addr_info+0x140>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1fc4a:	4b15      	ldr	r3, [pc, #84]	; (1fca0 <smp_ident_addr_info+0x178>)
   1fc4c:	2202      	movs	r2, #2
   1fc4e:	9302      	str	r3, [sp, #8]
   1fc50:	2300      	movs	r3, #0
   1fc52:	4910      	ldr	r1, [pc, #64]	; (1fc94 <smp_ident_addr_info+0x16c>)
   1fc54:	4618      	mov	r0, r3
   1fc56:	e9cd 3300 	strd	r3, r3, [sp]
   1fc5a:	f00f f830 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fc5e:	2003      	movs	r0, #3
   1fc60:	e795      	b.n	1fb8e <smp_ident_addr_info+0x66>
			dst = &conn->le.init_addr;
   1fc62:	f106 038f 	add.w	r3, r6, #143	; 0x8f
   1fc66:	e7ca      	b.n	1fbfe <smp_ident_addr_info+0xd6>
	bt_id_add(new_bond);
   1fc68:	4628      	mov	r0, r5
   1fc6a:	f7fa ff97 	bl	1ab9c <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fc6e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fc72:	075b      	lsls	r3, r3, #29
   1fc74:	d503      	bpl.n	1fc7e <smp_ident_addr_info+0x156>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fc76:	210a      	movs	r1, #10
   1fc78:	4620      	mov	r0, r4
   1fc7a:	f00f f82f 	bl	2ecdc <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1fc7e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fc82:	b109      	cbz	r1, 1fc88 <smp_ident_addr_info+0x160>
	return 0;
   1fc84:	2000      	movs	r0, #0
   1fc86:	e782      	b.n	1fb8e <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   1fc88:	4620      	mov	r0, r4
   1fc8a:	f7ff fdb9 	bl	1f800 <smp_pairing_complete>
   1fc8e:	e7f9      	b.n	1fc84 <smp_ident_addr_info+0x15c>
   1fc90:	00037a98 	.word	0x00037a98
   1fc94:	00033080 	.word	0x00033080
   1fc98:	00037b16 	.word	0x00037b16
   1fc9c:	0003785b 	.word	0x0003785b
   1fca0:	00037aac 	.word	0x00037aac

0001fca4 <smp_central_ident>:
{
   1fca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fca6:	460b      	mov	r3, r1
   1fca8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fcaa:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1fcae:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fcb0:	210d      	movs	r1, #13
   1fcb2:	3004      	adds	r0, #4
   1fcb4:	f00e ffab 	bl	2ec0e <atomic_test_bit>
   1fcb8:	b318      	cbz	r0, 1fd02 <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1fcba:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1fcbe:	7a29      	ldrb	r1, [r5, #8]
   1fcc0:	463a      	mov	r2, r7
   1fcc2:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   1fcc4:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1fcc6:	f00f fa86 	bl	2f1d6 <bt_keys_get_type>
		if (!keys) {
   1fcca:	4605      	mov	r5, r0
   1fccc:	b980      	cbnz	r0, 1fcf0 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fcce:	4638      	mov	r0, r7
   1fcd0:	f7f9 fb22 	bl	19318 <bt_addr_le_str>
   1fcd4:	4b17      	ldr	r3, [pc, #92]	; (1fd34 <smp_central_ident+0x90>)
   1fcd6:	9003      	str	r0, [sp, #12]
   1fcd8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1fcdc:	4628      	mov	r0, r5
   1fcde:	462b      	mov	r3, r5
   1fce0:	2201      	movs	r2, #1
   1fce2:	4915      	ldr	r1, [pc, #84]	; (1fd38 <smp_central_ident+0x94>)
   1fce4:	9500      	str	r5, [sp, #0]
   1fce6:	f00e ffea 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1fcea:	2008      	movs	r0, #8
}
   1fcec:	b005      	add	sp, #20
   1fcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fcf0:	4632      	mov	r2, r6
   1fcf2:	f832 3b02 	ldrh.w	r3, [r2], #2
   1fcf6:	8303      	strh	r3, [r0, #24]
   1fcf8:	f8d6 3002 	ldr.w	r3, [r6, #2]
   1fcfc:	6103      	str	r3, [r0, #16]
   1fcfe:	6853      	ldr	r3, [r2, #4]
   1fd00:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1fd02:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fd06:	f023 0201 	bic.w	r2, r3, #1
   1fd0a:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1fd0e:	079a      	lsls	r2, r3, #30
   1fd10:	d508      	bpl.n	1fd24 <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1fd12:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fd14:	4620      	mov	r0, r4
   1fd16:	f00e ffe1 	bl	2ecdc <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1fd1a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fd1e:	b129      	cbz	r1, 1fd2c <smp_central_ident+0x88>
	return 0;
   1fd20:	2000      	movs	r0, #0
   1fd22:	e7e3      	b.n	1fcec <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fd24:	075b      	lsls	r3, r3, #29
   1fd26:	d5f8      	bpl.n	1fd1a <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fd28:	210a      	movs	r1, #10
   1fd2a:	e7f3      	b.n	1fd14 <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   1fd2c:	4620      	mov	r0, r4
   1fd2e:	f7ff fd67 	bl	1f800 <smp_pairing_complete>
   1fd32:	e7f5      	b.n	1fd20 <smp_central_ident+0x7c>
   1fd34:	0003785b 	.word	0x0003785b
   1fd38:	00033080 	.word	0x00033080

0001fd3c <smp_pairing_failed>:
{
   1fd3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fd40:	460e      	mov	r6, r1
   1fd42:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fd44:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1fd48:	f7fe fdd8 	bl	1e8fc <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1fd4c:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1fd4e:	4914      	ldr	r1, [pc, #80]	; (1fda0 <smp_pairing_failed+0x64>)
   1fd50:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1fd52:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1fd54:	9303      	str	r3, [sp, #12]
   1fd56:	4b13      	ldr	r3, [pc, #76]	; (1fda4 <smp_pairing_failed+0x68>)
   1fd58:	2201      	movs	r2, #1
   1fd5a:	9302      	str	r3, [sp, #8]
   1fd5c:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1fd5e:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1fd60:	4618      	mov	r0, r3
   1fd62:	e9cd 3300 	strd	r3, r3, [sp]
   1fd66:	f00e ffaa 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1fd6a:	210a      	movs	r1, #10
   1fd6c:	4638      	mov	r0, r7
   1fd6e:	f00f f84c 	bl	2ee0a <atomic_test_and_clear_bit>
   1fd72:	b140      	cbz	r0, 1fd86 <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1fd74:	b975      	cbnz	r5, 1fd94 <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   1fd76:	4620      	mov	r0, r4
   1fd78:	7831      	ldrb	r1, [r6, #0]
   1fd7a:	f7ff fd41 	bl	1f800 <smp_pairing_complete>
}
   1fd7e:	2000      	movs	r0, #0
   1fd80:	b004      	add	sp, #16
   1fd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1fd86:	210b      	movs	r1, #11
   1fd88:	4638      	mov	r0, r7
   1fd8a:	f00f f83e 	bl	2ee0a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1fd8e:	2800      	cmp	r0, #0
   1fd90:	d1f0      	bne.n	1fd74 <smp_pairing_failed+0x38>
   1fd92:	e7f0      	b.n	1fd76 <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1fd94:	692b      	ldr	r3, [r5, #16]
   1fd96:	2b00      	cmp	r3, #0
   1fd98:	d0ed      	beq.n	1fd76 <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   1fd9a:	4640      	mov	r0, r8
   1fd9c:	4798      	blx	r3
   1fd9e:	e7ea      	b.n	1fd76 <smp_pairing_failed+0x3a>
   1fda0:	00033080 	.word	0x00033080
   1fda4:	00037ae7 	.word	0x00037ae7

0001fda8 <bt_smp_encrypt_change>:
{
   1fda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1fdac:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1fdae:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1fdb2:	4604      	mov	r4, r0
   1fdb4:	460f      	mov	r7, r1
   1fdb6:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1fdb8:	2101      	movs	r1, #1
   1fdba:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   1fdbc:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1fdc0:	f00f f823 	bl	2ee0a <atomic_test_and_clear_bit>
   1fdc4:	2800      	cmp	r0, #0
   1fdc6:	d068      	beq.n	1fe9a <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   1fdc8:	b1e7      	cbz	r7, 1fe04 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1fdca:	2103      	movs	r1, #3
   1fdcc:	4630      	mov	r0, r6
   1fdce:	f00e ff1e 	bl	2ec0e <atomic_test_bit>
   1fdd2:	2800      	cmp	r0, #0
   1fdd4:	d061      	beq.n	1fe9a <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   1fdd6:	4638      	mov	r0, r7
   1fdd8:	f7fa fa08 	bl	1a1ec <bt_security_err_get>
	switch (auth_err) {
   1fddc:	3801      	subs	r0, #1
   1fdde:	b2c0      	uxtb	r0, r0
   1fde0:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1fde2:	bf8c      	ite	hi
   1fde4:	2400      	movhi	r4, #0
   1fde6:	4b75      	ldrls	r3, [pc, #468]	; (1ffbc <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1fde8:	f04f 0102 	mov.w	r1, #2
   1fdec:	bf98      	it	ls
   1fdee:	5c1c      	ldrbls	r4, [r3, r0]
   1fdf0:	4630      	mov	r0, r6
   1fdf2:	f00e ff73 	bl	2ecdc <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1fdf6:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1fdf8:	4628      	mov	r0, r5
}
   1fdfa:	b00c      	add	sp, #48	; 0x30
   1fdfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1fe00:	f7ff bcfe 	b.w	1f800 <smp_pairing_complete>
	if (!conn->encrypt) {
   1fe04:	f898 300b 	ldrb.w	r3, [r8, #11]
   1fe08:	2b00      	cmp	r3, #0
   1fe0a:	d046      	beq.n	1fe9a <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1fe0c:	2103      	movs	r1, #3
   1fe0e:	4630      	mov	r0, r6
   1fe10:	f00e fefd 	bl	2ec0e <atomic_test_bit>
   1fe14:	b928      	cbnz	r0, 1fe22 <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   1fe16:	4628      	mov	r0, r5
}
   1fe18:	b00c      	add	sp, #48	; 0x30
   1fe1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1fe1e:	f00f b806 	b.w	2ee2e <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fe22:	2105      	movs	r1, #5
   1fe24:	4630      	mov	r0, r6
   1fe26:	f00e fef2 	bl	2ec0e <atomic_test_bit>
   1fe2a:	b1b8      	cbz	r0, 1fe5c <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1fe2c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1fe30:	071b      	lsls	r3, r3, #28
   1fe32:	d507      	bpl.n	1fe44 <bt_smp_encrypt_change+0x9c>
   1fe34:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1fe38:	071f      	lsls	r7, r3, #28
   1fe3a:	d503      	bpl.n	1fe44 <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1fe3c:	2111      	movs	r1, #17
   1fe3e:	4630      	mov	r0, r6
   1fe40:	f00e ff4c 	bl	2ecdc <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1fe44:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1fe48:	f023 0308 	bic.w	r3, r3, #8
   1fe4c:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1fe50:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1fe54:	f023 0308 	bic.w	r3, r3, #8
   1fe58:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1fe5c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1fe60:	07d8      	lsls	r0, r3, #31
   1fe62:	d51d      	bpl.n	1fea0 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1fe64:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fe66:	4628      	mov	r0, r5
   1fe68:	f00e ff38 	bl	2ecdc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1fe6c:	2102      	movs	r1, #2
   1fe6e:	4630      	mov	r0, r6
   1fe70:	f00e ff34 	bl	2ecdc <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1fe74:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1fe76:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
   1fe7a:	b9cf      	cbnz	r7, 1feb0 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1fe7c:	f103 0088 	add.w	r0, r3, #136	; 0x88
   1fe80:	f7f9 fa4a 	bl	19318 <bt_addr_le_str>
   1fe84:	4b4e      	ldr	r3, [pc, #312]	; (1ffc0 <bt_smp_encrypt_change+0x218>)
   1fe86:	9003      	str	r0, [sp, #12]
   1fe88:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1fe8c:	2201      	movs	r2, #1
   1fe8e:	463b      	mov	r3, r7
   1fe90:	4638      	mov	r0, r7
   1fe92:	494c      	ldr	r1, [pc, #304]	; (1ffc4 <bt_smp_encrypt_change+0x21c>)
   1fe94:	9700      	str	r7, [sp, #0]
   1fe96:	f00e ff12 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
}
   1fe9a:	b00c      	add	sp, #48	; 0x30
   1fe9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1fea0:	0799      	lsls	r1, r3, #30
   1fea2:	d501      	bpl.n	1fea8 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1fea4:	2108      	movs	r1, #8
   1fea6:	e7de      	b.n	1fe66 <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fea8:	075a      	lsls	r2, r3, #29
   1feaa:	d5df      	bpl.n	1fe6c <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1feac:	210a      	movs	r1, #10
   1feae:	e7da      	b.n	1fe66 <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1feb0:	2105      	movs	r1, #5
   1feb2:	f00e feac 	bl	2ec0e <atomic_test_bit>
   1feb6:	4607      	mov	r7, r0
   1feb8:	b9b0      	cbnz	r0, 1fee8 <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1feba:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1febe:	07db      	lsls	r3, r3, #31
   1fec0:	d512      	bpl.n	1fee8 <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   1fec2:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1fec4:	211a      	movs	r1, #26
   1fec6:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   1fec8:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1fecc:	f7fb fcd8 	bl	1b880 <bt_rand>
   1fed0:	4681      	mov	r9, r0
   1fed2:	b170      	cbz	r0, 1fef2 <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   1fed4:	4b3c      	ldr	r3, [pc, #240]	; (1ffc8 <bt_smp_encrypt_change+0x220>)
   1fed6:	2201      	movs	r2, #1
   1fed8:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1fedc:	4638      	mov	r0, r7
   1fede:	463b      	mov	r3, r7
   1fee0:	4938      	ldr	r1, [pc, #224]	; (1ffc4 <bt_smp_encrypt_change+0x21c>)
   1fee2:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1fee4:	f00e feeb 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1fee8:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1feec:	2900      	cmp	r1, #0
   1feee:	d1d4      	bne.n	1fe9a <bt_smp_encrypt_change+0xf2>
   1fef0:	e782      	b.n	1fdf8 <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1fef2:	2106      	movs	r1, #6
   1fef4:	4628      	mov	r0, r5
   1fef6:	f00e ff01 	bl	2ecfc <smp_create_pdu.constprop.0>
		if (!buf) {
   1fefa:	4607      	mov	r7, r0
   1fefc:	b938      	cbnz	r0, 1ff0e <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1fefe:	4b33      	ldr	r3, [pc, #204]	; (1ffcc <bt_smp_encrypt_change+0x224>)
   1ff00:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1ff04:	2201      	movs	r2, #1
   1ff06:	463b      	mov	r3, r7
   1ff08:	492e      	ldr	r1, [pc, #184]	; (1ffc4 <bt_smp_encrypt_change+0x21c>)
   1ff0a:	9700      	str	r7, [sp, #0]
   1ff0c:	e7ea      	b.n	1fee4 <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   1ff0e:	2110      	movs	r1, #16
   1ff10:	300c      	adds	r0, #12
   1ff12:	f00f fa8e 	bl	2f432 <net_buf_simple_add>
   1ff16:	f898 200c 	ldrb.w	r2, [r8, #12]
   1ff1a:	a905      	add	r1, sp, #20
   1ff1c:	4682      	mov	sl, r0
   1ff1e:	f011 fc86 	bl	3182e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1ff22:	f898 000c 	ldrb.w	r0, [r8, #12]
   1ff26:	280f      	cmp	r0, #15
   1ff28:	d805      	bhi.n	1ff36 <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   1ff2a:	f1c0 0210 	rsb	r2, r0, #16
   1ff2e:	4649      	mov	r1, r9
   1ff30:	4450      	add	r0, sl
   1ff32:	f011 fcb6 	bl	318a2 <memset>
		smp_send(smp, buf, NULL, NULL);
   1ff36:	4639      	mov	r1, r7
   1ff38:	2200      	movs	r2, #0
   1ff3a:	4628      	mov	r0, r5
   1ff3c:	f00e fea2 	bl	2ec84 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1ff40:	2107      	movs	r1, #7
   1ff42:	4628      	mov	r0, r5
   1ff44:	f00e feda 	bl	2ecfc <smp_create_pdu.constprop.0>
		if (!buf) {
   1ff48:	4607      	mov	r7, r0
   1ff4a:	b908      	cbnz	r0, 1ff50 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1ff4c:	4b20      	ldr	r3, [pc, #128]	; (1ffd0 <bt_smp_encrypt_change+0x228>)
   1ff4e:	e7d7      	b.n	1ff00 <bt_smp_encrypt_change+0x158>
   1ff50:	210a      	movs	r1, #10
   1ff52:	300c      	adds	r0, #12
   1ff54:	f00f fa6d 	bl	2f432 <net_buf_simple_add>
   1ff58:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ff5a:	aa09      	add	r2, sp, #36	; 0x24
   1ff5c:	ca03      	ldmia	r2!, {r0, r1}
   1ff5e:	f8c3 0002 	str.w	r0, [r3, #2]
   1ff62:	f8c3 1006 	str.w	r1, [r3, #6]
   1ff66:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   1ff6a:	4639      	mov	r1, r7
   1ff6c:	4628      	mov	r0, r5
   1ff6e:	801a      	strh	r2, [r3, #0]
   1ff70:	4a18      	ldr	r2, [pc, #96]	; (1ffd4 <bt_smp_encrypt_change+0x22c>)
   1ff72:	f00e fe87 	bl	2ec84 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ff76:	4630      	mov	r0, r6
   1ff78:	210d      	movs	r1, #13
   1ff7a:	f00e fe48 	bl	2ec0e <atomic_test_bit>
   1ff7e:	ae09      	add	r6, sp, #36	; 0x24
   1ff80:	2800      	cmp	r0, #0
   1ff82:	d0b1      	beq.n	1fee8 <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1ff84:	2101      	movs	r1, #1
   1ff86:	4640      	mov	r0, r8
   1ff88:	f00f f935 	bl	2f1f6 <bt_keys_add_type>
   1ff8c:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   1ff90:	ab05      	add	r3, sp, #20
   1ff92:	461a      	mov	r2, r3
   1ff94:	ca03      	ldmia	r2!, {r0, r1}
   1ff96:	42b2      	cmp	r2, r6
   1ff98:	6038      	str	r0, [r7, #0]
   1ff9a:	6079      	str	r1, [r7, #4]
   1ff9c:	4613      	mov	r3, r2
   1ff9e:	f107 0708 	add.w	r7, r7, #8
   1ffa2:	d1f6      	bne.n	1ff92 <bt_smp_encrypt_change+0x1ea>
   1ffa4:	4633      	mov	r3, r6
   1ffa6:	cb03      	ldmia	r3!, {r0, r1}
   1ffa8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1ffac:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   1ffb0:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   1ffb4:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   1ffb8:	e796      	b.n	1fee8 <bt_smp_encrypt_change+0x140>
   1ffba:	bf00      	nop
   1ffbc:	00037b9c 	.word	0x00037b9c
   1ffc0:	00037b09 	.word	0x00037b09
   1ffc4:	00033080 	.word	0x00033080
   1ffc8:	00037b1e 	.word	0x00037b1e
   1ffcc:	00037b39 	.word	0x00037b39
   1ffd0:	00037b60 	.word	0x00037b60
   1ffd4:	0002f1a9 	.word	0x0002f1a9

0001ffd8 <smp_timeout>:
{
   1ffd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   1ffda:	4b0c      	ldr	r3, [pc, #48]	; (2000c <smp_timeout+0x34>)
{
   1ffdc:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   1ffde:	9302      	str	r3, [sp, #8]
   1ffe0:	2300      	movs	r3, #0
   1ffe2:	2201      	movs	r2, #1
   1ffe4:	4618      	mov	r0, r3
   1ffe6:	e9cd 3300 	strd	r3, r3, [sp]
   1ffea:	4909      	ldr	r1, [pc, #36]	; (20010 <smp_timeout+0x38>)
   1ffec:	f00e fe67 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1fff0:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   1fff4:	2108      	movs	r1, #8
   1fff6:	f7ff fc03 	bl	1f800 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1fffa:	2104      	movs	r1, #4
   1fffc:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
}
   20000:	b004      	add	sp, #16
   20002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   20006:	f00e be69 	b.w	2ecdc <atomic_set_bit>
   2000a:	bf00      	nop
   2000c:	00037b88 	.word	0x00037b88
   20010:	00033080 	.word	0x00033080

00020014 <bt_smp_update_keys>:
{
   20014:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20018:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2001a:	f7fe fcc9 	bl	1e9b0 <smp_chan_get>
	if (!smp) {
   2001e:	4605      	mov	r5, r0
   20020:	2800      	cmp	r0, #0
   20022:	d074      	beq.n	2010e <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20024:	1d07      	adds	r7, r0, #4
   20026:	2103      	movs	r1, #3
   20028:	4638      	mov	r0, r7
   2002a:	f00e fdf0 	bl	2ec0e <atomic_test_bit>
   2002e:	2800      	cmp	r0, #0
   20030:	d06d      	beq.n	2010e <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   20032:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   20036:	b108      	cbz	r0, 2003c <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   20038:	f00f f8e1 	bl	2f1fe <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2003c:	f104 0888 	add.w	r8, r4, #136	; 0x88
   20040:	4641      	mov	r1, r8
   20042:	7a20      	ldrb	r0, [r4, #8]
   20044:	f000 f894 	bl	20170 <bt_keys_get_addr>
   20048:	4606      	mov	r6, r0
   2004a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   2004e:	b9a0      	cbnz	r0, 2007a <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   20050:	4640      	mov	r0, r8
   20052:	f7f9 f961 	bl	19318 <bt_addr_le_str>
   20056:	4b39      	ldr	r3, [pc, #228]	; (2013c <bt_smp_update_keys+0x128>)
   20058:	9003      	str	r0, [sp, #12]
   2005a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2005e:	4630      	mov	r0, r6
   20060:	4633      	mov	r3, r6
   20062:	2201      	movs	r2, #1
   20064:	4936      	ldr	r1, [pc, #216]	; (20140 <bt_smp_update_keys+0x12c>)
   20066:	9600      	str	r6, [sp, #0]
   20068:	f00e fe29 	bl	2ecbe <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2006c:	2108      	movs	r1, #8
   2006e:	4628      	mov	r0, r5
}
   20070:	b004      	add	sp, #16
   20072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   20076:	f7ff bc41 	b.w	1f8fc <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   2007a:	210e      	movs	r1, #14
   2007c:	4638      	mov	r0, r7
   2007e:	f00e fdc6 	bl	2ec0e <atomic_test_bit>
   20082:	b128      	cbz	r0, 20090 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   20084:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20088:	7b53      	ldrb	r3, [r2, #13]
   2008a:	f043 0302 	orr.w	r3, r3, #2
   2008e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   20090:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   20092:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   20096:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   20098:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   2009a:	d83b      	bhi.n	20114 <bt_smp_update_keys+0x100>
   2009c:	2a00      	cmp	r2, #0
   2009e:	d040      	beq.n	20122 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   200a0:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   200a4:	7b53      	ldrb	r3, [r2, #13]
   200a6:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   200aa:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   200ac:	7d2b      	ldrb	r3, [r5, #20]
   200ae:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   200b0:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   200b4:	428b      	cmp	r3, r1
   200b6:	bf28      	it	cs
   200b8:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   200ba:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   200bc:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   200be:	2105      	movs	r1, #5
   200c0:	f00e fda5 	bl	2ec0e <atomic_test_bit>
   200c4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   200c8:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   200ca:	b398      	cbz	r0, 20134 <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   200cc:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   200d0:	210d      	movs	r1, #13
   200d2:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   200d4:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   200d6:	f00e fd9a 	bl	2ec0e <atomic_test_bit>
   200da:	b1c0      	cbz	r0, 2010e <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   200dc:	2120      	movs	r1, #32
   200de:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   200e2:	f00f f888 	bl	2f1f6 <bt_keys_add_type>
   200e6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   200ea:	f105 0247 	add.w	r2, r5, #71	; 0x47
   200ee:	331a      	adds	r3, #26
   200f0:	3557      	adds	r5, #87	; 0x57
   200f2:	f852 1b04 	ldr.w	r1, [r2], #4
   200f6:	42aa      	cmp	r2, r5
   200f8:	f843 1b04 	str.w	r1, [r3], #4
   200fc:	d1f9      	bne.n	200f2 <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   200fe:	2300      	movs	r3, #0
   20100:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20104:	6113      	str	r3, [r2, #16]
   20106:	6153      	str	r3, [r2, #20]
   20108:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   2010c:	8313      	strh	r3, [r2, #24]
}
   2010e:	b004      	add	sp, #16
   20110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   20114:	3a05      	subs	r2, #5
   20116:	2a01      	cmp	r2, #1
   20118:	d803      	bhi.n	20122 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   2011a:	f043 0320 	orr.w	r3, r3, #32
   2011e:	734b      	strb	r3, [r1, #13]
   20120:	e7be      	b.n	200a0 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   20122:	f023 0320 	bic.w	r3, r3, #32
   20126:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   20128:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   2012c:	7b53      	ldrb	r3, [r2, #13]
   2012e:	f023 0301 	bic.w	r3, r3, #1
   20132:	e7ba      	b.n	200aa <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   20134:	f022 0210 	bic.w	r2, r2, #16
   20138:	735a      	strb	r2, [r3, #13]
   2013a:	e7e8      	b.n	2010e <bt_smp_update_keys+0xfa>
   2013c:	0003785b 	.word	0x0003785b
   20140:	00033080 	.word	0x00033080

00020144 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   20144:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   20146:	4b07      	ldr	r3, [pc, #28]	; (20164 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   20148:	4807      	ldr	r0, [pc, #28]	; (20168 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2014a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2014e:	f003 0306 	and.w	r3, r3, #6
   20152:	1f9a      	subs	r2, r3, #6
   20154:	4253      	negs	r3, r2
   20156:	4153      	adcs	r3, r2
   20158:	4a04      	ldr	r2, [pc, #16]	; (2016c <bt_smp_init+0x28>)
   2015a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   2015c:	f7fb fbba 	bl	1b8d4 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   20160:	2000      	movs	r0, #0
   20162:	bd08      	pop	{r3, pc}
   20164:	20008000 	.word	0x20008000
   20168:	200085f8 	.word	0x200085f8
   2016c:	20031acf 	.word	0x20031acf

00020170 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   20170:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20172:	4c10      	ldr	r4, [pc, #64]	; (201b4 <bt_keys_get_addr+0x44>)
{
   20174:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20176:	f814 3b01 	ldrb.w	r3, [r4], #1
{
   2017a:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   2017c:	4283      	cmp	r3, r0
   2017e:	d007      	beq.n	20190 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   20180:	2207      	movs	r2, #7
   20182:	490d      	ldr	r1, [pc, #52]	; (201b8 <bt_keys_get_addr+0x48>)
   20184:	480d      	ldr	r0, [pc, #52]	; (201bc <bt_keys_get_addr+0x4c>)
   20186:	f011 fb42 	bl	3180e <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   2018a:	b148      	cbz	r0, 201a0 <bt_keys_get_addr+0x30>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   2018c:	2000      	movs	r0, #0
}
   2018e:	bd70      	pop	{r4, r5, r6, pc}
   20190:	2207      	movs	r2, #7
   20192:	4620      	mov	r0, r4
   20194:	f011 fb3b 	bl	3180e <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20198:	2800      	cmp	r0, #0
   2019a:	d1f1      	bne.n	20180 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   2019c:	4805      	ldr	r0, [pc, #20]	; (201b4 <bt_keys_get_addr+0x44>)
   2019e:	e7f6      	b.n	2018e <bt_keys_get_addr+0x1e>
		keys->id = id;
   201a0:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   201a4:	682b      	ldr	r3, [r5, #0]
   201a6:	6023      	str	r3, [r4, #0]
   201a8:	88ab      	ldrh	r3, [r5, #4]
   201aa:	80a3      	strh	r3, [r4, #4]
   201ac:	79ab      	ldrb	r3, [r5, #6]
   201ae:	71a3      	strb	r3, [r4, #6]
}
   201b0:	e7f4      	b.n	2019c <bt_keys_get_addr+0x2c>
   201b2:	bf00      	nop
   201b4:	20030b08 	.word	0x20030b08
   201b8:	0003668a 	.word	0x0003668a
   201bc:	20030b09 	.word	0x20030b09

000201c0 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   201c0:	b410      	push	{r4}
   201c2:	460b      	mov	r3, r1
   201c4:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   201c6:	4a04      	ldr	r2, [pc, #16]	; (201d8 <bt_keys_foreach_type+0x18>)
   201c8:	89d4      	ldrh	r4, [r2, #14]
   201ca:	4204      	tst	r4, r0
   201cc:	d002      	beq.n	201d4 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
   201ce:	4610      	mov	r0, r2
		}
	}
}
   201d0:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   201d2:	4718      	bx	r3
}
   201d4:	bc10      	pop	{r4}
   201d6:	4770      	bx	lr
   201d8:	20030b08 	.word	0x20030b08

000201dc <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   201dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   201e0:	2300      	movs	r3, #0
{
   201e2:	4605      	mov	r5, r0
   201e4:	460e      	mov	r6, r1
   201e6:	4617      	mov	r7, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   201e8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2021c <bt_keys_find+0x40>
   201ec:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   201f0:	f898 2000 	ldrb.w	r2, [r8]
   201f4:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   201f6:	b113      	cbz	r3, 201fe <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   201f8:	2000      	movs	r0, #0
}
   201fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   201fe:	2c00      	cmp	r4, #0
   20200:	d0fa      	beq.n	201f8 <bt_keys_find+0x1c>
   20202:	42b2      	cmp	r2, r6
   20204:	d1f8      	bne.n	201f8 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   20206:	2207      	movs	r2, #7
   20208:	4639      	mov	r1, r7
   2020a:	4805      	ldr	r0, [pc, #20]	; (20220 <bt_keys_find+0x44>)
   2020c:	f011 faff 	bl	3180e <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20210:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   20212:	2800      	cmp	r0, #0
   20214:	d1ea      	bne.n	201ec <bt_keys_find+0x10>
			return &key_pool[i];
   20216:	4801      	ldr	r0, [pc, #4]	; (2021c <bt_keys_find+0x40>)
   20218:	e7ef      	b.n	201fa <bt_keys_find+0x1e>
   2021a:	bf00      	nop
   2021c:	20030b08 	.word	0x20030b08
   20220:	20030b09 	.word	0x20030b09

00020224 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   20224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   20226:	780b      	ldrb	r3, [r1, #0]
   20228:	4606      	mov	r6, r0
   2022a:	2b01      	cmp	r3, #1
   2022c:	460c      	mov	r4, r1
   2022e:	d001      	beq.n	20234 <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   20230:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   20232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   20234:	798b      	ldrb	r3, [r1, #6]
   20236:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2023a:	2b40      	cmp	r3, #64	; 0x40
   2023c:	d1f8      	bne.n	20230 <bt_keys_find_irk+0xc>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2023e:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   20240:	4d18      	ldr	r5, [pc, #96]	; (202a4 <bt_keys_find_irk+0x80>)
	return memcmp(a, b, sizeof(*a));
   20242:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   20246:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   20248:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2024a:	f002 0202 	and.w	r2, r2, #2
   2024e:	b1db      	cbz	r3, 20288 <bt_keys_find_irk+0x64>
   20250:	2300      	movs	r3, #0
   20252:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   20254:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20256:	f002 0202 	and.w	r2, r2, #2
   2025a:	2b00      	cmp	r3, #0
   2025c:	d1e8      	bne.n	20230 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2025e:	2a00      	cmp	r2, #0
   20260:	d0e6      	beq.n	20230 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   20262:	42b1      	cmp	r1, r6
   20264:	d1e4      	bne.n	20230 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   20266:	1c67      	adds	r7, r4, #1
   20268:	4639      	mov	r1, r7
   2026a:	480f      	ldr	r0, [pc, #60]	; (202a8 <bt_keys_find_irk+0x84>)
   2026c:	f00c ffbc 	bl	2d1e8 <bt_rpa_irk_matches>
   20270:	2301      	movs	r3, #1
   20272:	2800      	cmp	r0, #0
   20274:	d0ed      	beq.n	20252 <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   20276:	f8d4 3001 	ldr.w	r3, [r4, #1]
   2027a:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   2027e:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   20282:	4b0a      	ldr	r3, [pc, #40]	; (202ac <bt_keys_find_irk+0x88>)
   20284:	809a      	strh	r2, [r3, #4]
}
   20286:	e00b      	b.n	202a0 <bt_keys_find_irk+0x7c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   20288:	2a00      	cmp	r2, #0
   2028a:	d0e2      	beq.n	20252 <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   2028c:	42b0      	cmp	r0, r6
   2028e:	d1e0      	bne.n	20252 <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   20290:	2206      	movs	r2, #6
   20292:	4639      	mov	r1, r7
   20294:	1c60      	adds	r0, r4, #1
   20296:	f011 faba 	bl	3180e <memcmp>
   2029a:	2301      	movs	r3, #1
   2029c:	2800      	cmp	r0, #0
   2029e:	d1d2      	bne.n	20246 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   202a0:	4800      	ldr	r0, [pc, #0]	; (202a4 <bt_keys_find_irk+0x80>)
   202a2:	e7c6      	b.n	20232 <bt_keys_find_irk+0xe>
   202a4:	20030b08 	.word	0x20030b08
   202a8:	20030b32 	.word	0x20030b32
   202ac:	20030b42 	.word	0x20030b42

000202b0 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   202b0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   202b2:	4c06      	ldr	r4, [pc, #24]	; (202cc <bt_keys_find_addr+0x1c>)
   202b4:	7823      	ldrb	r3, [r4, #0]
   202b6:	4283      	cmp	r3, r0
   202b8:	d104      	bne.n	202c4 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   202ba:	2207      	movs	r2, #7
   202bc:	1c60      	adds	r0, r4, #1
   202be:	f011 faa6 	bl	3180e <memcmp>
   202c2:	b108      	cbz	r0, 202c8 <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   202c4:	2000      	movs	r0, #0
}
   202c6:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   202c8:	4620      	mov	r0, r4
   202ca:	e7fc      	b.n	202c6 <bt_keys_find_addr+0x16>
   202cc:	20030b08 	.word	0x20030b08

000202d0 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   202d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202d4:	b09a      	sub	sp, #104	; 0x68
   202d6:	4616      	mov	r6, r2
   202d8:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   202dc:	aa0c      	add	r2, sp, #48	; 0x30
{
   202de:	4684      	mov	ip, r0
   202e0:	468a      	mov	sl, r1
   202e2:	4690      	mov	r8, r2
   202e4:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   202e6:	4b2c      	ldr	r3, [pc, #176]	; (20398 <bt_crypto_f5+0xc8>)
   202e8:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   202ec:	4614      	mov	r4, r2
   202ee:	6818      	ldr	r0, [r3, #0]
   202f0:	6859      	ldr	r1, [r3, #4]
   202f2:	3308      	adds	r3, #8
   202f4:	c403      	stmia	r4!, {r0, r1}
   202f6:	4573      	cmp	r3, lr
   202f8:	4622      	mov	r2, r4
   202fa:	d1f7      	bne.n	202ec <bt_crypto_f5+0x1c>
   202fc:	6818      	ldr	r0, [r3, #0]
   202fe:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   20300:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   20302:	6020      	str	r0, [r4, #0]
   20304:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   20306:	2220      	movs	r2, #32
   20308:	a804      	add	r0, sp, #16
   2030a:	f00e ff86 	bl	2f21a <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   2030e:	466b      	mov	r3, sp
   20310:	2220      	movs	r2, #32
   20312:	4822      	ldr	r0, [pc, #136]	; (2039c <bt_crypto_f5+0xcc>)
   20314:	a904      	add	r1, sp, #16
   20316:	f00e ff98 	bl	2f24a <bt_crypto_aes_cmac>
	if (err) {
   2031a:	4604      	mov	r4, r0
   2031c:	bbc0      	cbnz	r0, 20390 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   2031e:	2210      	movs	r2, #16
   20320:	4651      	mov	r1, sl
   20322:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   20326:	f00e ff78 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   2032a:	2210      	movs	r2, #16
   2032c:	4631      	mov	r1, r6
   2032e:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   20332:	f00e ff72 	bl	2f21a <sys_memcpy_swap>
	m[37] = a1->type;
   20336:	4629      	mov	r1, r5
   20338:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   2033c:	2206      	movs	r2, #6
   2033e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   20342:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   20346:	f00e ff68 	bl	2f21a <sys_memcpy_swap>
	m[44] = a2->type;
   2034a:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2034c:	2206      	movs	r2, #6
	m[44] = a2->type;
   2034e:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   20352:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   20356:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2035a:	f00e ff5e 	bl	2f21a <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   2035e:	464b      	mov	r3, r9
   20360:	2235      	movs	r2, #53	; 0x35
   20362:	4641      	mov	r1, r8
   20364:	4668      	mov	r0, sp
   20366:	f00e ff70 	bl	2f24a <bt_crypto_aes_cmac>
	if (err) {
   2036a:	4604      	mov	r4, r0
   2036c:	b980      	cbnz	r0, 20390 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   2036e:	4648      	mov	r0, r9
   20370:	f00e ff5d 	bl	2f22e <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   20374:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   20376:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   20378:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   2037c:	4641      	mov	r1, r8
   2037e:	463b      	mov	r3, r7
   20380:	4668      	mov	r0, sp
   20382:	f00e ff62 	bl	2f24a <bt_crypto_aes_cmac>
	if (err) {
   20386:	4604      	mov	r4, r0
   20388:	b910      	cbnz	r0, 20390 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   2038a:	4638      	mov	r0, r7
   2038c:	f00e ff4f 	bl	2f22e <sys_mem_swap.constprop.0>

	return 0;
}
   20390:	4620      	mov	r0, r4
   20392:	b01a      	add	sp, #104	; 0x68
   20394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20398:	00033230 	.word	0x00033230
   2039c:	00037bf5 	.word	0x00037bf5

000203a0 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   203a0:	b570      	push	{r4, r5, r6, lr}
   203a2:	460e      	mov	r6, r1
   203a4:	461d      	mov	r5, r3
   203a6:	4614      	mov	r4, r2
   203a8:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   203aa:	4601      	mov	r1, r0
   203ac:	2220      	movs	r2, #32
   203ae:	a804      	add	r0, sp, #16
   203b0:	f00e ff33 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   203b4:	2220      	movs	r2, #32
   203b6:	4631      	mov	r1, r6
   203b8:	a80c      	add	r0, sp, #48	; 0x30
   203ba:	f00e ff2e 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   203be:	2210      	movs	r2, #16
   203c0:	4629      	mov	r1, r5
   203c2:	a814      	add	r0, sp, #80	; 0x50
   203c4:	f00e ff29 	bl	2f21a <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   203c8:	2210      	movs	r2, #16
   203ca:	4621      	mov	r1, r4
   203cc:	4668      	mov	r0, sp
   203ce:	f00e ff24 	bl	2f21a <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   203d2:	466b      	mov	r3, sp
   203d4:	2250      	movs	r2, #80	; 0x50
   203d6:	4618      	mov	r0, r3
   203d8:	a904      	add	r1, sp, #16
   203da:	f00e ff36 	bl	2f24a <bt_crypto_aes_cmac>
	if (err) {
   203de:	b940      	cbnz	r0, 203f2 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   203e0:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   203e2:	4a05      	ldr	r2, [pc, #20]	; (203f8 <bt_crypto_g2+0x58>)
   203e4:	ba1b      	rev	r3, r3
   203e6:	fbb3 f1f2 	udiv	r1, r3, r2
   203ea:	fb02 3311 	mls	r3, r2, r1, r3
   203ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   203f0:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   203f2:	b018      	add	sp, #96	; 0x60
   203f4:	bd70      	pop	{r4, r5, r6, pc}
   203f6:	bf00      	nop
   203f8:	000f4240 	.word	0x000f4240

000203fc <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   203fc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   203fe:	4804      	ldr	r0, [pc, #16]	; (20410 <fs_init+0x14>)
   20400:	f010 fd2b 	bl	30e5a <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   20404:	4b03      	ldr	r3, [pc, #12]	; (20414 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   20406:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   20408:	e9c3 3300 	strd	r3, r3, [r3]
   2040c:	bd08      	pop	{r3, pc}
   2040e:	bf00      	nop
   20410:	20030b64 	.word	0x20030b64
   20414:	20030b78 	.word	0x20030b78

00020418 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   20418:	222c      	movs	r2, #44	; 0x2c
   2041a:	4b02      	ldr	r3, [pc, #8]	; (20424 <net_buf_pool_get+0xc>)
   2041c:	fb02 3000 	mla	r0, r2, r0, r3
   20420:	4770      	bx	lr
   20422:	bf00      	nop
   20424:	20008eb0 	.word	0x20008eb0

00020428 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20428:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2042a:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2042c:	4b05      	ldr	r3, [pc, #20]	; (20444 <net_buf_id+0x1c>)
   2042e:	fb01 3302 	mla	r3, r1, r2, r3
   20432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20434:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20436:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20438:	331b      	adds	r3, #27
   2043a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   2043e:	fbb0 f0f3 	udiv	r0, r0, r3
   20442:	4770      	bx	lr
   20444:	20008eb0 	.word	0x20008eb0

00020448 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   20448:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2044a:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2044c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2044e:	4b09      	ldr	r3, [pc, #36]	; (20474 <fixed_data_alloc+0x2c>)
   20450:	fb04 3302 	mla	r3, r4, r2, r3
   20454:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   20456:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20458:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2045a:	681a      	ldr	r2, [r3, #0]
   2045c:	4294      	cmp	r4, r2
   2045e:	bf94      	ite	ls
   20460:	600c      	strls	r4, [r1, #0]
   20462:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   20464:	e9d3 5400 	ldrd	r5, r4, [r3]
   20468:	f7ff ffde 	bl	20428 <net_buf_id>
}
   2046c:	fb05 4000 	mla	r0, r5, r0, r4
   20470:	bd38      	pop	{r3, r4, r5, pc}
   20472:	bf00      	nop
   20474:	20008eb0 	.word	0x20008eb0

00020478 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   20478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2047c:	4605      	mov	r5, r0
   2047e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20480:	4610      	mov	r0, r2
   20482:	4619      	mov	r1, r3
{
   20484:	4691      	mov	r9, r2
   20486:	4698      	mov	r8, r3
   20488:	4617      	mov	r7, r2
   2048a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2048c:	f010 fffb 	bl	31486 <sys_clock_timeout_end_calc>
   20490:	4682      	mov	sl, r0
   20492:	468b      	mov	fp, r1
	__asm__ volatile(
   20494:	f04f 0320 	mov.w	r3, #32
   20498:	f3ef 8111 	mrs	r1, BASEPRI
   2049c:	f383 8812 	msr	BASEPRI_MAX, r3
   204a0:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   204a4:	8b6b      	ldrh	r3, [r5, #26]
   204a6:	2b00      	cmp	r3, #0
   204a8:	d058      	beq.n	2055c <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   204aa:	8b2a      	ldrh	r2, [r5, #24]
   204ac:	429a      	cmp	r2, r3
   204ae:	d93c      	bls.n	2052a <net_buf_alloc_len+0xb2>
   204b0:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   204b2:	2200      	movs	r2, #0
   204b4:	2300      	movs	r3, #0
   204b6:	4628      	mov	r0, r5
   204b8:	f005 fade 	bl	25a78 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   204bc:	9900      	ldr	r1, [sp, #0]
   204be:	4604      	mov	r4, r0
   204c0:	2800      	cmp	r0, #0
   204c2:	d032      	beq.n	2052a <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   204c4:	f381 8811 	msr	BASEPRI, r1
   204c8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   204cc:	9b01      	ldr	r3, [sp, #4]
   204ce:	2b00      	cmp	r3, #0
   204d0:	d055      	beq.n	2057e <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   204d2:	ea58 0309 	orrs.w	r3, r8, r9
   204d6:	d00f      	beq.n	204f8 <net_buf_alloc_len+0x80>
   204d8:	f1b8 3fff 	cmp.w	r8, #4294967295
   204dc:	bf08      	it	eq
   204de:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   204e2:	d009      	beq.n	204f8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   204e4:	f006 f9f4 	bl	268d0 <sys_clock_tick_get>
   204e8:	ebba 0700 	subs.w	r7, sl, r0
   204ec:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   204f0:	2e00      	cmp	r6, #0
   204f2:	bfbc      	itt	lt
   204f4:	2700      	movlt	r7, #0
   204f6:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   204f8:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   204fc:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   204fe:	4d25      	ldr	r5, [pc, #148]	; (20594 <net_buf_alloc_len+0x11c>)
   20500:	463a      	mov	r2, r7
   20502:	fb08 5303 	mla	r3, r8, r3, r5
   20506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20508:	4620      	mov	r0, r4
   2050a:	681b      	ldr	r3, [r3, #0]
   2050c:	a901      	add	r1, sp, #4
   2050e:	f8d3 9000 	ldr.w	r9, [r3]
   20512:	4633      	mov	r3, r6
   20514:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   20516:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   20518:	2800      	cmp	r0, #0
   2051a:	d131      	bne.n	20580 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   2051c:	7aa0      	ldrb	r0, [r4, #10]
   2051e:	4621      	mov	r1, r4
   20520:	fb00 5008 	mla	r0, r0, r8, r5
   20524:	f010 fd2a 	bl	30f7c <k_queue_prepend>
}
   20528:	e024      	b.n	20574 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   2052a:	8b68      	ldrh	r0, [r5, #26]
   2052c:	1e43      	subs	r3, r0, #1
   2052e:	836b      	strh	r3, [r5, #26]
   20530:	f381 8811 	msr	BASEPRI, r1
   20534:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20538:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2053a:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2053c:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2053e:	331b      	adds	r3, #27
   20540:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20544:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20546:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   2054a:	4b12      	ldr	r3, [pc, #72]	; (20594 <net_buf_alloc_len+0x11c>)
   2054c:	4a12      	ldr	r2, [pc, #72]	; (20598 <net_buf_alloc_len+0x120>)
   2054e:	1aeb      	subs	r3, r5, r3
   20550:	109b      	asrs	r3, r3, #2
   20552:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   20554:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   20556:	7f2b      	ldrb	r3, [r5, #28]
   20558:	72e3      	strb	r3, [r4, #11]
		goto success;
   2055a:	e7b7      	b.n	204cc <net_buf_alloc_len+0x54>
   2055c:	f381 8811 	msr	BASEPRI, r1
   20560:	f3bf 8f6f 	isb	sy
   20564:	464a      	mov	r2, r9
   20566:	4643      	mov	r3, r8
   20568:	4628      	mov	r0, r5
   2056a:	f005 fa85 	bl	25a78 <z_impl_k_queue_get>
	if (!buf) {
   2056e:	4604      	mov	r4, r0
   20570:	2800      	cmp	r0, #0
   20572:	d1ab      	bne.n	204cc <net_buf_alloc_len+0x54>
		return NULL;
   20574:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   20576:	4620      	mov	r0, r4
   20578:	b003      	add	sp, #12
   2057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   2057e:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   20580:	2300      	movs	r3, #0
	buf->ref   = 1U;
   20582:	2201      	movs	r2, #1
	buf->frags = NULL;
   20584:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   20586:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   20588:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   2058a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   2058c:	6963      	ldr	r3, [r4, #20]
   2058e:	8262      	strh	r2, [r4, #18]
   20590:	60e3      	str	r3, [r4, #12]
	return buf;
   20592:	e7f0      	b.n	20576 <net_buf_alloc_len+0xfe>
   20594:	20008eb0 	.word	0x20008eb0
   20598:	ba2e8ba3 	.word	0xba2e8ba3

0002059c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2059c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   205a0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   205a2:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   205a4:	272c      	movs	r7, #44	; 0x2c
   205a6:	4d15      	ldr	r5, [pc, #84]	; (205fc <net_buf_unref+0x60>)
	while (buf) {
   205a8:	b90c      	cbnz	r4, 205ae <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   205aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   205ae:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   205b0:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   205b4:	3b01      	subs	r3, #1
   205b6:	b2db      	uxtb	r3, r3
   205b8:	7223      	strb	r3, [r4, #8]
   205ba:	2b00      	cmp	r3, #0
   205bc:	d1f5      	bne.n	205aa <net_buf_unref+0xe>
		if (buf->__buf) {
   205be:	6961      	ldr	r1, [r4, #20]
   205c0:	b159      	cbz	r1, 205da <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   205c2:	7a63      	ldrb	r3, [r4, #9]
   205c4:	07db      	lsls	r3, r3, #31
   205c6:	d407      	bmi.n	205d8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   205c8:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   205ca:	4620      	mov	r0, r4
   205cc:	fb07 5303 	mla	r3, r7, r3, r5
   205d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   205d2:	681b      	ldr	r3, [r3, #0]
   205d4:	689b      	ldr	r3, [r3, #8]
   205d6:	4798      	blx	r3
			buf->__buf = NULL;
   205d8:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   205da:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   205dc:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   205de:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   205e2:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   205e4:	6a1b      	ldr	r3, [r3, #32]
   205e6:	b11b      	cbz	r3, 205f0 <net_buf_unref+0x54>
			pool->destroy(buf);
   205e8:	4620      	mov	r0, r4
   205ea:	4798      	blx	r3
{
   205ec:	4644      	mov	r4, r8
   205ee:	e7db      	b.n	205a8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   205f0:	4621      	mov	r1, r4
   205f2:	fb00 5007 	mla	r0, r0, r7, r5
   205f6:	f010 fcc1 	bl	30f7c <k_queue_prepend>
}
   205fa:	e7f7      	b.n	205ec <net_buf_unref+0x50>
   205fc:	20008eb0 	.word	0x20008eb0

00020600 <xoshiro128_next>:
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
	}
}

static uint32_t xoshiro128_next(void)
{
   20600:	b570      	push	{r4, r5, r6, lr}
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   20602:	4b0c      	ldr	r3, [pc, #48]	; (20634 <xoshiro128_next+0x34>)
   20604:	6819      	ldr	r1, [r3, #0]
   20606:	68d8      	ldr	r0, [r3, #12]

	const uint32_t t = state[1] << 9;

	state[2] ^= state[0];
   20608:	e9d3 5201 	ldrd	r5, r2, [r3, #4]
   2060c:	404a      	eors	r2, r1
	state[3] ^= state[1];
   2060e:	ea80 0405 	eor.w	r4, r0, r5
	state[1] ^= state[2];
   20612:	ea85 0602 	eor.w	r6, r5, r2
   20616:	605e      	str	r6, [r3, #4]
	state[0] ^= state[3];

	state[2] ^= t;
   20618:	ea82 2245 	eor.w	r2, r2, r5, lsl #9
	state[0] ^= state[3];
   2061c:	ea81 0604 	eor.w	r6, r1, r4
	return (x << k) | (x >> (32 - k));
   20620:	ea4f 5474 	mov.w	r4, r4, ror #21
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   20624:	4408      	add	r0, r1
	state[0] ^= state[3];
   20626:	601e      	str	r6, [r3, #0]
	state[2] ^= t;
   20628:	609a      	str	r2, [r3, #8]

	state[3] = rotl(state[3], 11);
   2062a:	60dc      	str	r4, [r3, #12]

	return result;
}
   2062c:	eb01 6070 	add.w	r0, r1, r0, ror #25
   20630:	bd70      	pop	{r4, r5, r6, pc}
   20632:	bf00      	nop
   20634:	20030b80 	.word	0x20030b80

00020638 <xoshiro128_init_state>:
{
   20638:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2063a:	480f      	ldr	r0, [pc, #60]	; (20678 <xoshiro128_init_state+0x40>)
   2063c:	4c0f      	ldr	r4, [pc, #60]	; (2067c <xoshiro128_init_state+0x44>)
   2063e:	6883      	ldr	r3, [r0, #8]
   20640:	2210      	movs	r2, #16
   20642:	4621      	mov	r1, r4
   20644:	681b      	ldr	r3, [r3, #0]
   20646:	4798      	blx	r3
	if (rc == 0) {
   20648:	b918      	cbnz	r0, 20652 <xoshiro128_init_state+0x1a>
		initialized = true;
   2064a:	2201      	movs	r2, #1
   2064c:	4b0c      	ldr	r3, [pc, #48]	; (20680 <xoshiro128_init_state+0x48>)
   2064e:	701a      	strb	r2, [r3, #0]
}
   20650:	bd10      	pop	{r4, pc}
   20652:	f00f fc5e 	bl	2ff12 <sys_clock_cycle_get_32>
		state[0] = k_cycle_get_32();
   20656:	6020      	str	r0, [r4, #0]
   20658:	f00f fc5b 	bl	2ff12 <sys_clock_cycle_get_32>
		state[1] = k_cycle_get_32() ^ 0x9b64c2b0;
   2065c:	4b09      	ldr	r3, [pc, #36]	; (20684 <xoshiro128_init_state+0x4c>)
   2065e:	4043      	eors	r3, r0
   20660:	6063      	str	r3, [r4, #4]
   20662:	f00f fc56 	bl	2ff12 <sys_clock_cycle_get_32>
		state[2] = k_cycle_get_32() ^ 0x86d3d2d4;
   20666:	4b08      	ldr	r3, [pc, #32]	; (20688 <xoshiro128_init_state+0x50>)
   20668:	4043      	eors	r3, r0
   2066a:	60a3      	str	r3, [r4, #8]
   2066c:	f00f fc51 	bl	2ff12 <sys_clock_cycle_get_32>
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
   20670:	4b06      	ldr	r3, [pc, #24]	; (2068c <xoshiro128_init_state+0x54>)
   20672:	4043      	eors	r3, r0
   20674:	60e3      	str	r3, [r4, #12]
}
   20676:	e7eb      	b.n	20650 <xoshiro128_init_state+0x18>
   20678:	00032968 	.word	0x00032968
   2067c:	20030b80 	.word	0x20030b80
   20680:	20031ad1 	.word	0x20031ad1
   20684:	9b64c2b0 	.word	0x9b64c2b0
   20688:	86d3d2d4 	.word	0x86d3d2d4
   2068c:	a00ae278 	.word	0xa00ae278

00020690 <xoshiro128_initialize>:
{
   20690:	b508      	push	{r3, lr}
   20692:	4804      	ldr	r0, [pc, #16]	; (206a4 <xoshiro128_initialize+0x14>)
   20694:	f010 faf7 	bl	30c86 <z_device_is_ready>
	return 0;
   20698:	2800      	cmp	r0, #0
}
   2069a:	bf0c      	ite	eq
   2069c:	f06f 0012 	mvneq.w	r0, #18
   206a0:	2000      	movne	r0, #0
   206a2:	bd08      	pop	{r3, pc}
   206a4:	00032968 	.word	0x00032968

000206a8 <z_impl_sys_rand32_get>:

uint32_t z_impl_sys_rand32_get(void)
{
   206a8:	b508      	push	{r3, lr}
	if (unlikely(!initialized)) {
   206aa:	4b04      	ldr	r3, [pc, #16]	; (206bc <z_impl_sys_rand32_get+0x14>)
   206ac:	781b      	ldrb	r3, [r3, #0]
   206ae:	b90b      	cbnz	r3, 206b4 <z_impl_sys_rand32_get+0xc>
		xoshiro128_init_state();
   206b0:	f7ff ffc2 	bl	20638 <xoshiro128_init_state>
	}

	return xoshiro128_next();
}
   206b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return xoshiro128_next();
   206b8:	f7ff bfa2 	b.w	20600 <xoshiro128_next>
   206bc:	20031ad1 	.word	0x20031ad1

000206c0 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   206c0:	2813      	cmp	r0, #19
   206c2:	d80e      	bhi.n	206e2 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   206c4:	4a08      	ldr	r2, [pc, #32]	; (206e8 <adc_gain_invert+0x28>)
   206c6:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   206ca:	b153      	cbz	r3, 206e2 <adc_gain_invert+0x22>
   206cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   206d0:	7852      	ldrb	r2, [r2, #1]
   206d2:	b132      	cbz	r2, 206e2 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   206d4:	6808      	ldr	r0, [r1, #0]
   206d6:	4343      	muls	r3, r0
   206d8:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   206dc:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   206de:	600b      	str	r3, [r1, #0]
			rv = 0;
   206e0:	4770      	bx	lr
	int rv = -EINVAL;
   206e2:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   206e6:	4770      	bx	lr
   206e8:	00037c1a 	.word	0x00037c1a

000206ec <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   206ec:	2201      	movs	r2, #1
   206ee:	4b05      	ldr	r3, [pc, #20]	; (20704 <adc_context_start_sampling+0x18>)
   206f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   206f4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   206f8:	b109      	cbz	r1, 206fe <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   206fa:	60da      	str	r2, [r3, #12]
}
   206fc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   206fe:	601a      	str	r2, [r3, #0]
   20700:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   20702:	4770      	bx	lr
   20704:	4000e000 	.word	0x4000e000

00020708 <adc_nrfx_channel_setup>:
{
   20708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   2070a:	790d      	ldrb	r5, [r1, #4]
   2070c:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   20710:	2c07      	cmp	r4, #7
   20712:	d825      	bhi.n	20760 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   20714:	780a      	ldrb	r2, [r1, #0]
   20716:	2a0b      	cmp	r2, #11
   20718:	d818      	bhi.n	2074c <adc_nrfx_channel_setup+0x44>
   2071a:	e8df f002 	tbb	[pc, r2]
   2071e:	0707      	.short	0x0707
   20720:	06170707 	.word	0x06170707
   20724:	13111717 	.word	0x13111717
   20728:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   2072a:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   2072c:	784b      	ldrb	r3, [r1, #1]
   2072e:	2b03      	cmp	r3, #3
   20730:	d01a      	beq.n	20768 <adc_nrfx_channel_setup+0x60>
   20732:	2b04      	cmp	r3, #4
   20734:	f04f 0300 	mov.w	r3, #0
   20738:	d017      	beq.n	2076a <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   2073a:	4a30      	ldr	r2, [pc, #192]	; (207fc <adc_nrfx_channel_setup+0xf4>)
   2073c:	9202      	str	r2, [sp, #8]
   2073e:	e008      	b.n	20752 <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   20740:	2205      	movs	r2, #5
		break;
   20742:	e7f3      	b.n	2072c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   20744:	2206      	movs	r2, #6
		break;
   20746:	e7f1      	b.n	2072c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   20748:	2207      	movs	r2, #7
		break;
   2074a:	e7ef      	b.n	2072c <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   2074c:	4b2c      	ldr	r3, [pc, #176]	; (20800 <adc_nrfx_channel_setup+0xf8>)
   2074e:	9302      	str	r3, [sp, #8]
   20750:	2300      	movs	r3, #0
   20752:	2201      	movs	r2, #1
   20754:	4618      	mov	r0, r3
   20756:	e9cd 3300 	strd	r3, r3, [sp]
   2075a:	492a      	ldr	r1, [pc, #168]	; (20804 <adc_nrfx_channel_setup+0xfc>)
   2075c:	f00e feb5 	bl	2f4ca <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   20760:	f06f 0015 	mvn.w	r0, #21
}
   20764:	b004      	add	sp, #16
   20766:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   20768:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   2076a:	f244 060a 	movw	r6, #16394	; 0x400a
   2076e:	8848      	ldrh	r0, [r1, #2]
   20770:	42b0      	cmp	r0, r6
   20772:	d03d      	beq.n	207f0 <adc_nrfx_channel_setup+0xe8>
   20774:	d80a      	bhi.n	2078c <adc_nrfx_channel_setup+0x84>
   20776:	f244 0603 	movw	r6, #16387	; 0x4003
   2077a:	42b0      	cmp	r0, r6
   2077c:	d014      	beq.n	207a8 <adc_nrfx_channel_setup+0xa0>
   2077e:	f244 0605 	movw	r6, #16389	; 0x4005
   20782:	42b0      	cmp	r0, r6
   20784:	d032      	beq.n	207ec <adc_nrfx_channel_setup+0xe4>
   20786:	b398      	cbz	r0, 207f0 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   20788:	4b1f      	ldr	r3, [pc, #124]	; (20808 <adc_nrfx_channel_setup+0x100>)
   2078a:	e7e0      	b.n	2074e <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   2078c:	f244 0614 	movw	r6, #16404	; 0x4014
   20790:	42b0      	cmp	r0, r6
   20792:	d02f      	beq.n	207f4 <adc_nrfx_channel_setup+0xec>
   20794:	f244 0628 	movw	r6, #16424	; 0x4028
   20798:	42b0      	cmp	r0, r6
   2079a:	d02d      	beq.n	207f8 <adc_nrfx_channel_setup+0xf0>
   2079c:	f244 060f 	movw	r6, #16399	; 0x400f
   207a0:	42b0      	cmp	r0, r6
   207a2:	d1f1      	bne.n	20788 <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   207a4:	2003      	movs	r0, #3
   207a6:	e000      	b.n	207aa <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   207a8:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   207aa:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   207ae:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   207b0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   207b4:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   207b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   207bc:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   207be:	0123      	lsls	r3, r4, #4
   207c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   207c4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   207c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   207cc:	0123      	lsls	r3, r4, #4
   207ce:	798a      	ldrb	r2, [r1, #6]
   207d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   207d4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   207d8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   207dc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   207e0:	4b0a      	ldr	r3, [pc, #40]	; (2080c <adc_nrfx_channel_setup+0x104>)
   207e2:	794a      	ldrb	r2, [r1, #5]
   207e4:	4423      	add	r3, r4
   207e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   207ea:	e7bb      	b.n	20764 <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   207ec:	2001      	movs	r0, #1
   207ee:	e7dc      	b.n	207aa <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   207f0:	2002      	movs	r0, #2
   207f2:	e7da      	b.n	207aa <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   207f4:	2004      	movs	r0, #4
   207f6:	e7d8      	b.n	207aa <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   207f8:	2005      	movs	r0, #5
   207fa:	e7d6      	b.n	207aa <adc_nrfx_channel_setup+0xa2>
   207fc:	00037c61 	.word	0x00037c61
   20800:	00037c42 	.word	0x00037c42
   20804:	00033008 	.word	0x00033008
   20808:	00037c85 	.word	0x00037c85
   2080c:	20008160 	.word	0x20008160

00020810 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   20810:	b5f0      	push	{r4, r5, r6, r7, lr}
   20812:	460c      	mov	r4, r1
   20814:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   20816:	f04f 33ff 	mov.w	r3, #4294967295
   2081a:	f04f 32ff 	mov.w	r2, #4294967295
   2081e:	486d      	ldr	r0, [pc, #436]	; (209d4 <adc_nrfx_read+0x1c4>)
   20820:	f005 f984 	bl	25b2c <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   20824:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   20826:	1e73      	subs	r3, r6, #1
   20828:	2bfe      	cmp	r3, #254	; 0xfe
   2082a:	f04f 0300 	mov.w	r3, #0
   2082e:	d909      	bls.n	20844 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   20830:	4a69      	ldr	r2, [pc, #420]	; (209d8 <adc_nrfx_read+0x1c8>)
   20832:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   20834:	2201      	movs	r2, #1
   20836:	4618      	mov	r0, r3
   20838:	e9cd 3300 	strd	r3, r3, [sp]
   2083c:	4967      	ldr	r1, [pc, #412]	; (209dc <adc_nrfx_read+0x1cc>)
   2083e:	f00e fe44 	bl	2f4ca <z_log_msg_runtime_create.constprop.0>
	if (error) {
   20842:	e014      	b.n	2086e <adc_nrfx_read+0x5e>
   20844:	461a      	mov	r2, r3
	active_channels = 0U;
   20846:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   20848:	4d65      	ldr	r5, [pc, #404]	; (209e0 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   2084a:	4f66      	ldr	r7, [pc, #408]	; (209e4 <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   2084c:	fa26 f302 	lsr.w	r3, r6, r2
   20850:	f013 0301 	ands.w	r3, r3, #1
   20854:	d039      	beq.n	208ca <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   20856:	5cbb      	ldrb	r3, [r7, r2]
   20858:	b98b      	cbnz	r3, 2087e <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   2085a:	9203      	str	r2, [sp, #12]
   2085c:	4a62      	ldr	r2, [pc, #392]	; (209e8 <adc_nrfx_read+0x1d8>)
   2085e:	9202      	str	r2, [sp, #8]
   20860:	e9cd 3300 	strd	r3, r3, [sp]
   20864:	2201      	movs	r2, #1
   20866:	4618      	mov	r0, r3
   20868:	495c      	ldr	r1, [pc, #368]	; (209dc <adc_nrfx_read+0x1cc>)
   2086a:	f00e fe2e 	bl	2f4ca <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   2086e:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   20872:	4858      	ldr	r0, [pc, #352]	; (209d4 <adc_nrfx_read+0x1c4>)
   20874:	f005 f934 	bl	25ae0 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   20878:	4620      	mov	r0, r4
   2087a:	b007      	add	sp, #28
   2087c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   2087e:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   20882:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   20886:	f1bc 0c00 	subs.w	ip, ip, #0
   2088a:	bf18      	it	ne
   2088c:	f04f 0c01 	movne.w	ip, #1
   20890:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   20894:	3001      	adds	r0, #1
   20896:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   2089a:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   2089e:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   208a2:	f102 0151 	add.w	r1, r2, #81	; 0x51
   208a6:	0109      	lsls	r1, r1, #4
   208a8:	506b      	str	r3, [r5, r1]
   208aa:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   208ac:	3201      	adds	r2, #1
   208ae:	2a08      	cmp	r2, #8
   208b0:	d1cc      	bne.n	2084c <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   208b2:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   208b4:	2300      	movs	r3, #0
   208b6:	f1a2 0108 	sub.w	r1, r2, #8
   208ba:	2906      	cmp	r1, #6
   208bc:	d818      	bhi.n	208f0 <adc_nrfx_read+0xe0>
   208be:	e8df f001 	tbb	[pc, r1]
   208c2:	171e      	.short	0x171e
   208c4:	17091720 	.word	0x17091720
   208c8:	15          	.byte	0x15
   208c9:	00          	.byte	0x00
   208ca:	f102 0151 	add.w	r1, r2, #81	; 0x51
   208ce:	0109      	lsls	r1, r1, #4
   208d0:	506b      	str	r3, [r5, r1]
}
   208d2:	e7eb      	b.n	208ac <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   208d4:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   208d6:	4a42      	ldr	r2, [pc, #264]	; (209e0 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   208d8:	2801      	cmp	r0, #1
   208da:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   208de:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   208e0:	d911      	bls.n	20906 <adc_nrfx_read+0xf6>
   208e2:	b193      	cbz	r3, 2090a <adc_nrfx_read+0xfa>
		LOG_ERR(
   208e4:	4b41      	ldr	r3, [pc, #260]	; (209ec <adc_nrfx_read+0x1dc>)
   208e6:	9302      	str	r3, [sp, #8]
   208e8:	2300      	movs	r3, #0
   208ea:	e7a3      	b.n	20834 <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   208ec:	2303      	movs	r3, #3
		break;
   208ee:	e7f2      	b.n	208d6 <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   208f0:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   208f2:	4a3f      	ldr	r2, [pc, #252]	; (209f0 <adc_nrfx_read+0x1e0>)
   208f4:	9300      	str	r3, [sp, #0]
   208f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   208fa:	2300      	movs	r3, #0
   208fc:	e7b2      	b.n	20864 <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   208fe:	2300      	movs	r3, #0
   20900:	e7e9      	b.n	208d6 <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   20902:	2301      	movs	r3, #1
   20904:	e7e7      	b.n	208d6 <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   20906:	2b08      	cmp	r3, #8
   20908:	d816      	bhi.n	20938 <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   2090a:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   2090e:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   20910:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   20912:	b9b2      	cbnz	r2, 20942 <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   20914:	68e2      	ldr	r2, [r4, #12]
   20916:	429a      	cmp	r2, r3
   20918:	d217      	bcs.n	2094a <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   2091a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2091e:	4b35      	ldr	r3, [pc, #212]	; (209f4 <adc_nrfx_read+0x1e4>)
   20920:	2201      	movs	r2, #1
   20922:	9302      	str	r3, [sp, #8]
   20924:	2300      	movs	r3, #0
   20926:	492d      	ldr	r1, [pc, #180]	; (209dc <adc_nrfx_read+0x1cc>)
   20928:	4618      	mov	r0, r3
   2092a:	e9cd 3300 	strd	r3, r3, [sp]
   2092e:	f00e fdcc 	bl	2f4ca <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   20932:	f06f 040b 	mvn.w	r4, #11
   20936:	e79c      	b.n	20872 <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   20938:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   2093a:	4b2f      	ldr	r3, [pc, #188]	; (209f8 <adc_nrfx_read+0x1e8>)
   2093c:	9302      	str	r3, [sp, #8]
   2093e:	2300      	movs	r3, #0
   20940:	e78e      	b.n	20860 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   20942:	8992      	ldrh	r2, [r2, #12]
   20944:	fb02 3303 	mla	r3, r2, r3, r3
   20948:	e7e4      	b.n	20914 <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   2094a:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2094c:	68a2      	ldr	r2, [r4, #8]
   2094e:	4b24      	ldr	r3, [pc, #144]	; (209e0 <adc_nrfx_read+0x1d0>)
   20950:	4f2a      	ldr	r7, [pc, #168]	; (209fc <adc_nrfx_read+0x1ec>)
   20952:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   20956:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   2095a:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   2095e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20962:	6833      	ldr	r3, [r6, #0]
   20964:	463e      	mov	r6, r7
   20966:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   20968:	2500      	movs	r5, #0
   2096a:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   2096c:	6823      	ldr	r3, [r4, #0]
   2096e:	b36b      	cbz	r3, 209cc <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   20970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   20972:	f107 0488 	add.w	r4, r7, #136	; 0x88
   20976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   2097a:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   2097c:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   20980:	b320      	cbz	r0, 209cc <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20982:	e8d6 3fef 	ldaex	r3, [r6]
   20986:	e8c6 5fe2 	stlex	r2, r5, [r6]
   2098a:	2a00      	cmp	r2, #0
   2098c:	d1f9      	bne.n	20982 <adc_nrfx_read+0x172>
   2098e:	491c      	ldr	r1, [pc, #112]	; (20a00 <adc_nrfx_read+0x1f0>)
   20990:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20994:	460e      	mov	r6, r1
   20996:	4629      	mov	r1, r5
   20998:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   2099c:	2300      	movs	r3, #0
   2099e:	fbe4 6100 	umlal	r6, r1, r4, r0
   209a2:	4a18      	ldr	r2, [pc, #96]	; (20a04 <adc_nrfx_read+0x1f4>)
   209a4:	4630      	mov	r0, r6
   209a6:	f7e8 facb 	bl	8f40 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   209aa:	2200      	movs	r2, #0
   209ac:	e9cd 0100 	strd	r0, r1, [sp]
   209b0:	2300      	movs	r3, #0
   209b2:	f107 0008 	add.w	r0, r7, #8
   209b6:	f006 f80f 	bl	269d8 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   209ba:	f04f 32ff 	mov.w	r2, #4294967295
   209be:	f04f 33ff 	mov.w	r3, #4294967295
   209c2:	4811      	ldr	r0, [pc, #68]	; (20a08 <adc_nrfx_read+0x1f8>)
   209c4:	f005 f8b2 	bl	25b2c <z_impl_k_sem_take>
	return ctx->status;
   209c8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   209ca:	e752      	b.n	20872 <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   209cc:	480b      	ldr	r0, [pc, #44]	; (209fc <adc_nrfx_read+0x1ec>)
   209ce:	f7ff fe8d 	bl	206ec <adc_context_start_sampling>
   209d2:	e7f2      	b.n	209ba <adc_nrfx_read+0x1aa>
   209d4:	200081a0 	.word	0x200081a0
   209d8:	00037cb0 	.word	0x00037cb0
   209dc:	00033008 	.word	0x00033008
   209e0:	4000e000 	.word	0x4000e000
   209e4:	20008200 	.word	0x20008200
   209e8:	00037cce 	.word	0x00037cce
   209ec:	00037d0d 	.word	0x00037d0d
   209f0:	00037ce8 	.word	0x00037ce8
   209f4:	00037d62 	.word	0x00037d62
   209f8:	00037d3f 	.word	0x00037d3f
   209fc:	20008160 	.word	0x20008160
   20a00:	000f423f 	.word	0x000f423f
   20a04:	000f4240 	.word	0x000f4240
   20a08:	200081b8 	.word	0x200081b8

00020a0c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   20a0c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a0e:	2400      	movs	r4, #0
   20a10:	4b0d      	ldr	r3, [pc, #52]	; (20a48 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   20a12:	200e      	movs	r0, #14
   20a14:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20a18:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   20a1c:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   20a20:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   20a24:	2212      	movs	r2, #18
   20a26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   20a2a:	f7f0 fbc7 	bl	111bc <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20a2e:	4622      	mov	r2, r4
   20a30:	2101      	movs	r1, #1
   20a32:	200e      	movs	r0, #14
   20a34:	f7f0 fbf2 	bl	1121c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   20a38:	4804      	ldr	r0, [pc, #16]	; (20a4c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   20a3a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   20a3c:	b913      	cbnz	r3, 20a44 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   20a3e:	3040      	adds	r0, #64	; 0x40
   20a40:	f005 f84e 	bl	25ae0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   20a44:	2000      	movs	r0, #0
   20a46:	bd10      	pop	{r4, pc}
   20a48:	4000e000 	.word	0x4000e000
   20a4c:	20008160 	.word	0x20008160

00020a50 <saadc_irq_handler>:
{
   20a50:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a52:	4b2d      	ldr	r3, [pc, #180]	; (20b08 <saadc_irq_handler+0xb8>)
   20a54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   20a58:	2a00      	cmp	r2, #0
   20a5a:	d048      	beq.n	20aee <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a5c:	2200      	movs	r2, #0
   20a5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   20a62:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20a66:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   20a68:	4c28      	ldr	r4, [pc, #160]	; (20b0c <saadc_irq_handler+0xbc>)
   20a6a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   20a6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   20a70:	6f63      	ldr	r3, [r4, #116]	; 0x74
   20a72:	4625      	mov	r5, r4
   20a74:	b3b3      	cbz	r3, 20ae4 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   20a76:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   20a7a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   20a7e:	b133      	cbz	r3, 20a8e <saadc_irq_handler+0x3e>
			action = callback(dev,
   20a80:	f104 0174 	add.w	r1, r4, #116	; 0x74
   20a84:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   20a86:	2801      	cmp	r0, #1
   20a88:	d014      	beq.n	20ab4 <saadc_irq_handler+0x64>
   20a8a:	2802      	cmp	r0, #2
   20a8c:	d024      	beq.n	20ad8 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   20a8e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   20a92:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   20a96:	429a      	cmp	r2, r3
   20a98:	d91e      	bls.n	20ad8 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   20a9a:	3301      	adds	r3, #1
   20a9c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   20aa0:	4b19      	ldr	r3, [pc, #100]	; (20b08 <saadc_irq_handler+0xb8>)
   20aa2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   20aa6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   20aaa:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   20aac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   20ab0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   20ab4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   20ab8:	b923      	cbnz	r3, 20ac4 <saadc_irq_handler+0x74>
}
   20aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   20abe:	4813      	ldr	r0, [pc, #76]	; (20b0c <saadc_irq_handler+0xbc>)
   20ac0:	f7ff be14 	b.w	206ec <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20ac4:	e8d5 3fef 	ldaex	r3, [r5]
   20ac8:	1e5a      	subs	r2, r3, #1
   20aca:	e8c5 2fe1 	stlex	r1, r2, [r5]
   20ace:	2900      	cmp	r1, #0
   20ad0:	d1f8      	bne.n	20ac4 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   20ad2:	2b01      	cmp	r3, #1
   20ad4:	dcf1      	bgt.n	20aba <saadc_irq_handler+0x6a>
   20ad6:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   20ad8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   20adc:	b113      	cbz	r3, 20ae4 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   20ade:	480c      	ldr	r0, [pc, #48]	; (20b10 <saadc_irq_handler+0xc0>)
   20ae0:	f010 fcff 	bl	314e2 <z_impl_k_timer_stop>
   20ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   20ae8:	480a      	ldr	r0, [pc, #40]	; (20b14 <saadc_irq_handler+0xc4>)
   20aea:	f004 bff9 	b.w	25ae0 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20aee:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   20af2:	2900      	cmp	r1, #0
   20af4:	d0ef      	beq.n	20ad6 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20af6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   20afa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20afe:	2201      	movs	r2, #1
   20b00:	609a      	str	r2, [r3, #8]
   20b02:	601a      	str	r2, [r3, #0]
   20b04:	605a      	str	r2, [r3, #4]
}
   20b06:	e7e6      	b.n	20ad6 <saadc_irq_handler+0x86>
   20b08:	4000e000 	.word	0x4000e000
   20b0c:	20008160 	.word	0x20008160
   20b10:	20008168 	.word	0x20008168
   20b14:	200081b8 	.word	0x200081b8

00020b18 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20b18:	4b08      	ldr	r3, [pc, #32]	; (20b3c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20b1a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20b1c:	1ac3      	subs	r3, r0, r3
{
   20b1e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b20:	4907      	ldr	r1, [pc, #28]	; (20b40 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   20b22:	109b      	asrs	r3, r3, #2
{
   20b24:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b26:	4359      	muls	r1, r3
   20b28:	2240      	movs	r2, #64	; 0x40
   20b2a:	4806      	ldr	r0, [pc, #24]	; (20b44 <onoff_stop+0x2c>)
   20b2c:	f00e fd0c 	bl	2f548 <stop>
	notify(mgr, res);
   20b30:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b32:	4601      	mov	r1, r0
	notify(mgr, res);
   20b34:	4620      	mov	r0, r4
}
   20b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   20b3a:	4718      	bx	r3
   20b3c:	20030ba4 	.word	0x20030ba4
   20b40:	b6db6db7 	.word	0xb6db6db7
   20b44:	00032908 	.word	0x00032908

00020b48 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b48:	2340      	movs	r3, #64	; 0x40
{
   20b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20b4c:	4c0b      	ldr	r4, [pc, #44]	; (20b7c <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b4e:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   20b50:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b52:	460b      	mov	r3, r1
{
   20b54:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b56:	490a      	ldr	r1, [pc, #40]	; (20b80 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   20b58:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b5a:	4361      	muls	r1, r4
{
   20b5c:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b5e:	4a09      	ldr	r2, [pc, #36]	; (20b84 <onoff_start+0x3c>)
   20b60:	4809      	ldr	r0, [pc, #36]	; (20b88 <onoff_start+0x40>)
   20b62:	f00e fd1d 	bl	2f5a0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   20b66:	1e01      	subs	r1, r0, #0
   20b68:	da05      	bge.n	20b76 <onoff_start+0x2e>
		notify(mgr, err);
   20b6a:	4630      	mov	r0, r6
   20b6c:	462b      	mov	r3, r5
	}
}
   20b6e:	b002      	add	sp, #8
   20b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   20b74:	4718      	bx	r3
}
   20b76:	b002      	add	sp, #8
   20b78:	bd70      	pop	{r4, r5, r6, pc}
   20b7a:	bf00      	nop
   20b7c:	20030ba4 	.word	0x20030ba4
   20b80:	b6db6db7 	.word	0xb6db6db7
   20b84:	0002f60b 	.word	0x0002f60b
   20b88:	00032908 	.word	0x00032908

00020b8c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   20b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b90:	2200      	movs	r2, #0
   20b92:	2101      	movs	r1, #1
{
   20b94:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b96:	2005      	movs	r0, #5
   20b98:	f7f0 fb40 	bl	1121c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20b9c:	4811      	ldr	r0, [pc, #68]	; (20be4 <clk_init+0x58>)
   20b9e:	f002 fd61 	bl	23664 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20ba2:	4b11      	ldr	r3, [pc, #68]	; (20be8 <clk_init+0x5c>)
   20ba4:	4298      	cmp	r0, r3
   20ba6:	d119      	bne.n	20bdc <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20ba8:	f002 fd6c 	bl	23684 <nrfx_clock_enable>
   20bac:	2400      	movs	r4, #0
	return &data->mgr[type];
   20bae:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20bb2:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20bb4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 20bec <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   20bb8:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20bba:	4641      	mov	r1, r8
   20bbc:	fb09 5004 	mla	r0, r9, r4, r5
   20bc0:	f009 fd8b 	bl	2a6da <onoff_manager_init>
		if (err < 0) {
   20bc4:	2800      	cmp	r0, #0
   20bc6:	db07      	blt.n	20bd8 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20bc8:	2301      	movs	r3, #1
   20bca:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20bce:	441c      	add	r4, r3
   20bd0:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20bd2:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20bd4:	d1f0      	bne.n	20bb8 <clk_init+0x2c>
	}

	return 0;
   20bd6:	2000      	movs	r0, #0
}
   20bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   20bdc:	f06f 0004 	mvn.w	r0, #4
   20be0:	e7fa      	b.n	20bd8 <clk_init+0x4c>
   20be2:	bf00      	nop
   20be4:	00020c25 	.word	0x00020c25
   20be8:	0bad0000 	.word	0x0bad0000
   20bec:	00033f6c 	.word	0x00033f6c

00020bf0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20bf0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   20bf2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   20bf4:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   20bf6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   20bf8:	434b      	muls	r3, r1
   20bfa:	4808      	ldr	r0, [pc, #32]	; (20c1c <clkstarted_handle.constprop.0+0x2c>)
   20bfc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   20bfe:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
   20c00:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   20c04:	4418      	add	r0, r3
	sub_data->cb = NULL;
   20c06:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   20c08:	f00e fc8b 	bl	2f522 <set_on_state>
	if (callback) {
   20c0c:	b12d      	cbz	r5, 20c1a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20c0e:	4632      	mov	r2, r6
   20c10:	462b      	mov	r3, r5
}
   20c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20c16:	4802      	ldr	r0, [pc, #8]	; (20c20 <clkstarted_handle.constprop.0+0x30>)
   20c18:	4718      	bx	r3
}
   20c1a:	bd70      	pop	{r4, r5, r6, pc}
   20c1c:	20030ba4 	.word	0x20030ba4
   20c20:	00032908 	.word	0x00032908

00020c24 <clock_event_handler>:
	switch (event) {
   20c24:	2805      	cmp	r0, #5
   20c26:	d811      	bhi.n	20c4c <clock_event_handler+0x28>
   20c28:	e8df f000 	tbb	[pc, r0]
   20c2c:	10100e03 	.word	0x10100e03
   20c30:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20c32:	4b07      	ldr	r3, [pc, #28]	; (20c50 <clock_event_handler+0x2c>)
   20c34:	6f98      	ldr	r0, [r3, #120]	; 0x78
   20c36:	f010 0007 	ands.w	r0, r0, #7
   20c3a:	d107      	bne.n	20c4c <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20c3c:	f7ff bfd8 	b.w	20bf0 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   20c40:	2002      	movs	r0, #2
   20c42:	e7fb      	b.n	20c3c <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   20c44:	2003      	movs	r0, #3
   20c46:	e7f9      	b.n	20c3c <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20c48:	2001      	movs	r0, #1
   20c4a:	e7f7      	b.n	20c3c <clock_event_handler+0x18>
}
   20c4c:	4770      	bx	lr
   20c4e:	bf00      	nop
   20c50:	20030ba4 	.word	0x20030ba4

00020c54 <generic_hfclk_start>:
{
   20c54:	b508      	push	{r3, lr}
	__asm__ volatile(
   20c56:	f04f 0320 	mov.w	r3, #32
   20c5a:	f3ef 8111 	mrs	r1, BASEPRI
   20c5e:	f383 8812 	msr	BASEPRI_MAX, r3
   20c62:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   20c66:	4a11      	ldr	r2, [pc, #68]	; (20cac <generic_hfclk_start+0x58>)
   20c68:	6813      	ldr	r3, [r2, #0]
   20c6a:	f043 0002 	orr.w	r0, r3, #2
   20c6e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20c70:	07da      	lsls	r2, r3, #31
   20c72:	d408      	bmi.n	20c86 <generic_hfclk_start+0x32>
	__asm__ volatile(
   20c74:	f381 8811 	msr	BASEPRI, r1
   20c78:	f3bf 8f6f 	isb	sy
}
   20c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20c80:	2001      	movs	r0, #1
   20c82:	f002 bd13 	b.w	236ac <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20c86:	4b0a      	ldr	r3, [pc, #40]	; (20cb0 <generic_hfclk_start+0x5c>)
   20c88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20c8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   20c90:	07d3      	lsls	r3, r2, #31
   20c92:	d5ef      	bpl.n	20c74 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   20c94:	4807      	ldr	r0, [pc, #28]	; (20cb4 <generic_hfclk_start+0x60>)
   20c96:	f00e fc44 	bl	2f522 <set_on_state>
   20c9a:	f381 8811 	msr	BASEPRI, r1
   20c9e:	f3bf 8f6f 	isb	sy
}
   20ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   20ca6:	2000      	movs	r0, #0
   20ca8:	f7ff bfa2 	b.w	20bf0 <clkstarted_handle.constprop.0>
   20cac:	20030c44 	.word	0x20030c44
   20cb0:	40005000 	.word	0x40005000
   20cb4:	20030c1c 	.word	0x20030c1c

00020cb8 <api_blocking_start>:
{
   20cb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20cba:	2200      	movs	r2, #0
   20cbc:	2301      	movs	r3, #1
   20cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20cc2:	ab04      	add	r3, sp, #16
   20cc4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20cc8:	4a09      	ldr	r2, [pc, #36]	; (20cf0 <api_blocking_start+0x38>)
   20cca:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20ccc:	f8cd d000 	str.w	sp, [sp]
   20cd0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20cd4:	f00e fc92 	bl	2f5fc <api_start>
	if (err < 0) {
   20cd8:	2800      	cmp	r0, #0
   20cda:	db05      	blt.n	20ce8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20cdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20ce0:	2300      	movs	r3, #0
   20ce2:	4668      	mov	r0, sp
   20ce4:	f004 ff22 	bl	25b2c <z_impl_k_sem_take>
}
   20ce8:	b007      	add	sp, #28
   20cea:	f85d fb04 	ldr.w	pc, [sp], #4
   20cee:	bf00      	nop
   20cf0:	0002f641 	.word	0x0002f641

00020cf4 <generic_hfclk_stop>:
{
   20cf4:	b510      	push	{r4, lr}
	__asm__ volatile(
   20cf6:	f04f 0320 	mov.w	r3, #32
   20cfa:	f3ef 8411 	mrs	r4, BASEPRI
   20cfe:	f383 8812 	msr	BASEPRI_MAX, r3
   20d02:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   20d06:	4a07      	ldr	r2, [pc, #28]	; (20d24 <generic_hfclk_stop+0x30>)
   20d08:	6813      	ldr	r3, [r2, #0]
   20d0a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   20d0e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   20d10:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   20d12:	d402      	bmi.n	20d1a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20d14:	2001      	movs	r0, #1
   20d16:	f00f f99d 	bl	30054 <nrfx_clock_stop>
	__asm__ volatile(
   20d1a:	f384 8811 	msr	BASEPRI, r4
   20d1e:	f3bf 8f6f 	isb	sy
}
   20d22:	bd10      	pop	{r4, pc}
   20d24:	20030c44 	.word	0x20030c44

00020d28 <z_nrf_clock_control_lf_on>:
{
   20d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20d2c:	2201      	movs	r2, #1
   20d2e:	4607      	mov	r7, r0
   20d30:	4935      	ldr	r1, [pc, #212]	; (20e08 <z_nrf_clock_control_lf_on+0xe0>)
   20d32:	e8d1 3fef 	ldaex	r3, [r1]
   20d36:	e8c1 2fe0 	stlex	r0, r2, [r1]
   20d3a:	2800      	cmp	r0, #0
   20d3c:	d1f9      	bne.n	20d32 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   20d3e:	b933      	cbnz	r3, 20d4e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   20d40:	4932      	ldr	r1, [pc, #200]	; (20e0c <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   20d42:	4833      	ldr	r0, [pc, #204]	; (20e10 <z_nrf_clock_control_lf_on+0xe8>)
   20d44:	604b      	str	r3, [r1, #4]
   20d46:	60cb      	str	r3, [r1, #12]
   20d48:	608a      	str	r2, [r1, #8]
   20d4a:	f009 fcd9 	bl	2a700 <onoff_request>
	switch (start_mode) {
   20d4e:	1e7b      	subs	r3, r7, #1
   20d50:	2b01      	cmp	r3, #1
   20d52:	d828      	bhi.n	20da6 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   20d54:	2f01      	cmp	r7, #1
   20d56:	d106      	bne.n	20d66 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20d58:	4b2e      	ldr	r3, [pc, #184]	; (20e14 <z_nrf_clock_control_lf_on+0xec>)
   20d5a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   20d5e:	f003 0303 	and.w	r3, r3, #3
   20d62:	2b02      	cmp	r3, #2
   20d64:	d01f      	beq.n	20da6 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20d66:	f010 f85f 	bl	30e28 <k_is_in_isr>
   20d6a:	4605      	mov	r5, r0
   20d6c:	b9e8      	cbnz	r0, 20daa <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   20d6e:	4b2a      	ldr	r3, [pc, #168]	; (20e18 <z_nrf_clock_control_lf_on+0xf0>)
   20d70:	781b      	ldrb	r3, [r3, #0]
   20d72:	b1d3      	cbz	r3, 20daa <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   20d74:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   20d76:	4606      	mov	r6, r0
   20d78:	4b26      	ldr	r3, [pc, #152]	; (20e14 <z_nrf_clock_control_lf_on+0xec>)
   20d7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20d7e:	4c25      	ldr	r4, [pc, #148]	; (20e14 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20d80:	f8df 8098 	ldr.w	r8, [pc, #152]	; 20e1c <z_nrf_clock_control_lf_on+0xf4>
   20d84:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20d88:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   20d8c:	03d2      	lsls	r2, r2, #15
   20d8e:	d516      	bpl.n	20dbe <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20d90:	f003 0303 	and.w	r3, r3, #3
   20d94:	2b02      	cmp	r3, #2
   20d96:	d001      	beq.n	20d9c <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20d98:	2f01      	cmp	r7, #1
   20d9a:	d110      	bne.n	20dbe <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   20d9c:	b375      	cbz	r5, 20dfc <z_nrf_clock_control_lf_on+0xd4>
   20d9e:	f386 8811 	msr	BASEPRI, r6
   20da2:	f3bf 8f6f 	isb	sy
}
   20da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   20daa:	f04f 0320 	mov.w	r3, #32
   20dae:	f3ef 8611 	mrs	r6, BASEPRI
   20db2:	f383 8812 	msr	BASEPRI_MAX, r3
   20db6:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20dba:	2501      	movs	r5, #1
   20dbc:	e7df      	b.n	20d7e <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20dbe:	b1c5      	cbz	r5, 20df2 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20dc0:	4630      	mov	r0, r6
   20dc2:	f7f0 f9a1 	bl	11108 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20dc6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20dca:	b2db      	uxtb	r3, r3
   20dcc:	2b01      	cmp	r3, #1
   20dce:	d1d9      	bne.n	20d84 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20dd0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20dd4:	2a00      	cmp	r2, #0
   20dd6:	d0d5      	beq.n	20d84 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20dd8:	2200      	movs	r2, #0
   20dda:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   20dde:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20de2:	2202      	movs	r2, #2
   20de4:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   20de8:	2220      	movs	r2, #32
   20dea:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20dee:	60a3      	str	r3, [r4, #8]
}
   20df0:	e7c8      	b.n	20d84 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   20df2:	2100      	movs	r1, #0
   20df4:	2021      	movs	r0, #33	; 0x21
   20df6:	f005 fb97 	bl	26528 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20dfa:	e7e4      	b.n	20dc6 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   20dfc:	2202      	movs	r2, #2
   20dfe:	4b05      	ldr	r3, [pc, #20]	; (20e14 <z_nrf_clock_control_lf_on+0xec>)
   20e00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20e04:	e7cf      	b.n	20da6 <z_nrf_clock_control_lf_on+0x7e>
   20e06:	bf00      	nop
   20e08:	20030ba0 	.word	0x20030ba0
   20e0c:	20030b90 	.word	0x20030b90
   20e10:	20030bc0 	.word	0x20030bc0
   20e14:	40005000 	.word	0x40005000
   20e18:	20031eff 	.word	0x20031eff
   20e1c:	e000e100 	.word	0xe000e100

00020e20 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   20e20:	b508      	push	{r3, lr}
   20e22:	4807      	ldr	r0, [pc, #28]	; (20e40 <uart_console_init+0x20>)
   20e24:	f00f ff2f 	bl	30c86 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   20e28:	b138      	cbz	r0, 20e3a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   20e2a:	4806      	ldr	r0, [pc, #24]	; (20e44 <uart_console_init+0x24>)
   20e2c:	f7f1 f804 	bl	11e38 <__stdout_hook_install>
	__printk_hook_install(console_out);
   20e30:	4804      	ldr	r0, [pc, #16]	; (20e44 <uart_console_init+0x24>)
   20e32:	f7ed fc43 	bl	e6bc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   20e36:	2000      	movs	r0, #0
}
   20e38:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20e3a:	f06f 0012 	mvn.w	r0, #18
   20e3e:	e7fb      	b.n	20e38 <uart_console_init+0x18>
   20e40:	00032998 	.word	0x00032998
   20e44:	00020e49 	.word	0x00020e49

00020e48 <console_out>:
	if ('\n' == c) {
   20e48:	280a      	cmp	r0, #10
{
   20e4a:	b538      	push	{r3, r4, r5, lr}
   20e4c:	4604      	mov	r4, r0
   20e4e:	4d07      	ldr	r5, [pc, #28]	; (20e6c <console_out+0x24>)
	if ('\n' == c) {
   20e50:	d104      	bne.n	20e5c <console_out+0x14>
	api->poll_out(dev, out_char);
   20e52:	68ab      	ldr	r3, [r5, #8]
   20e54:	210d      	movs	r1, #13
   20e56:	4628      	mov	r0, r5
   20e58:	69db      	ldr	r3, [r3, #28]
   20e5a:	4798      	blx	r3
   20e5c:	68ab      	ldr	r3, [r5, #8]
   20e5e:	4803      	ldr	r0, [pc, #12]	; (20e6c <console_out+0x24>)
   20e60:	69db      	ldr	r3, [r3, #28]
   20e62:	b2e1      	uxtb	r1, r4
   20e64:	4798      	blx	r3
}
   20e66:	4620      	mov	r0, r4
   20e68:	bd38      	pop	{r3, r4, r5, pc}
   20e6a:	bf00      	nop
   20e6c:	00032998 	.word	0x00032998

00020e70 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   20e70:	b530      	push	{r4, r5, lr}
	return port->config;
   20e72:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20e74:	f001 041f 	and.w	r4, r1, #31
   20e78:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   20e7a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   20e7e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20e80:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   20e84:	d105      	bne.n	20e92 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   20e86:	4620      	mov	r0, r4
   20e88:	f002 ff18 	bl	23cbc <nrfx_gpiote_trigger_disable>

		return 0;
   20e8c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   20e8e:	b005      	add	sp, #20
   20e90:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   20e92:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   20e94:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20e98:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   20e9c:	d114      	bne.n	20ec8 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   20e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20ea2:	bf0c      	ite	eq
   20ea4:	2304      	moveq	r3, #4
   20ea6:	2305      	movne	r3, #5
   20ea8:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20eac:	2300      	movs	r3, #0
   20eae:	4620      	mov	r0, r4
   20eb0:	4619      	mov	r1, r3
   20eb2:	aa02      	add	r2, sp, #8
   20eb4:	f002 fd40 	bl	23938 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20eb8:	4b1f      	ldr	r3, [pc, #124]	; (20f38 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   20eba:	4298      	cmp	r0, r3
   20ebc:	d138      	bne.n	20f30 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   20ebe:	2101      	movs	r1, #1
   20ec0:	4620      	mov	r0, r4
   20ec2:	f002 feb5 	bl	23c30 <nrfx_gpiote_trigger_enable>
	return 0;
   20ec6:	e7e1      	b.n	20e8c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20ec8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   20ecc:	d025      	beq.n	20f1a <gpio_nrfx_pin_interrupt_configure+0xaa>
   20ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   20ed2:	bf14      	ite	ne
   20ed4:	2301      	movne	r3, #1
   20ed6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   20ed8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   20edc:	6883      	ldr	r3, [r0, #8]
   20ede:	40cb      	lsrs	r3, r1
   20ee0:	07d9      	lsls	r1, r3, #31
   20ee2:	d4e3      	bmi.n	20eac <gpio_nrfx_pin_interrupt_configure+0x3c>
   20ee4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   20ee8:	d1e0      	bne.n	20eac <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   20eea:	4a14      	ldr	r2, [pc, #80]	; (20f3c <gpio_nrfx_pin_interrupt_configure+0xcc>)
   20eec:	4814      	ldr	r0, [pc, #80]	; (20f40 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   20eee:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   20ef0:	2901      	cmp	r1, #1
   20ef2:	bf08      	it	eq
   20ef4:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   20ef6:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20efa:	3380      	adds	r3, #128	; 0x80
   20efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20f00:	07db      	lsls	r3, r3, #31
   20f02:	d4d3      	bmi.n	20eac <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20f04:	f10d 0507 	add.w	r5, sp, #7
   20f08:	4629      	mov	r1, r5
   20f0a:	4620      	mov	r0, r4
   20f0c:	f002 fe3c 	bl	23b88 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   20f10:	4b0c      	ldr	r3, [pc, #48]	; (20f44 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   20f12:	4298      	cmp	r0, r3
   20f14:	d003      	beq.n	20f1e <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   20f16:	9503      	str	r5, [sp, #12]
   20f18:	e7c8      	b.n	20eac <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20f1a:	2303      	movs	r3, #3
   20f1c:	e7dc      	b.n	20ed8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   20f1e:	4628      	mov	r0, r5
   20f20:	f002 fe80 	bl	23c24 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20f24:	4b04      	ldr	r3, [pc, #16]	; (20f38 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   20f26:	4298      	cmp	r0, r3
   20f28:	d0f5      	beq.n	20f16 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   20f2a:	f06f 000b 	mvn.w	r0, #11
   20f2e:	e7ae      	b.n	20e8e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   20f30:	f06f 0015 	mvn.w	r0, #21
   20f34:	e7ab      	b.n	20e8e <gpio_nrfx_pin_interrupt_configure+0x1e>
   20f36:	bf00      	nop
   20f38:	0bad0000 	.word	0x0bad0000
   20f3c:	40842500 	.word	0x40842500
   20f40:	40842800 	.word	0x40842800
   20f44:	0bad0004 	.word	0x0bad0004

00020f48 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20f48:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   20f4a:	f002 fe5b 	bl	23c04 <nrfx_gpiote_is_init>
   20f4e:	4604      	mov	r4, r0
   20f50:	b968      	cbnz	r0, 20f6e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   20f52:	f002 fe2f 	bl	23bb4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20f56:	4b08      	ldr	r3, [pc, #32]	; (20f78 <gpio_nrfx_init+0x30>)
   20f58:	4298      	cmp	r0, r3
   20f5a:	d10a      	bne.n	20f72 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   20f5c:	4621      	mov	r1, r4
   20f5e:	4807      	ldr	r0, [pc, #28]	; (20f7c <gpio_nrfx_init+0x34>)
   20f60:	f002 fe0c 	bl	23b7c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20f64:	4622      	mov	r2, r4
   20f66:	2105      	movs	r1, #5
   20f68:	202f      	movs	r0, #47	; 0x2f
   20f6a:	f7f0 f957 	bl	1121c <z_arm_irq_priority_set>
		return 0;
   20f6e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   20f70:	bd10      	pop	{r4, pc}
		return -EIO;
   20f72:	f06f 0004 	mvn.w	r0, #4
   20f76:	e7fb      	b.n	20f70 <gpio_nrfx_init+0x28>
   20f78:	0bad0000 	.word	0x0bad0000
   20f7c:	00020f81 	.word	0x00020f81

00020f80 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20f80:	0942      	lsrs	r2, r0, #5
{
   20f82:	4603      	mov	r3, r0
   20f84:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20f86:	d002      	beq.n	20f8e <nrfx_gpio_handler+0xe>
   20f88:	2a01      	cmp	r2, #1
   20f8a:	d017      	beq.n	20fbc <nrfx_gpio_handler+0x3c>
}
   20f8c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20f8e:	4e0d      	ldr	r6, [pc, #52]	; (20fc4 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   20f90:	6932      	ldr	r2, [r6, #16]
   20f92:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20f94:	2900      	cmp	r1, #0
   20f96:	d0f9      	beq.n	20f8c <nrfx_gpio_handler+0xc>
   20f98:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   20f9a:	f003 031f 	and.w	r3, r3, #31
   20f9e:	680c      	ldr	r4, [r1, #0]
   20fa0:	409d      	lsls	r5, r3
   20fa2:	2900      	cmp	r1, #0
   20fa4:	d0f2      	beq.n	20f8c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   20fa6:	688a      	ldr	r2, [r1, #8]
   20fa8:	402a      	ands	r2, r5
   20faa:	d002      	beq.n	20fb2 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   20fac:	4630      	mov	r0, r6
   20fae:	684b      	ldr	r3, [r1, #4]
   20fb0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20fb2:	b12c      	cbz	r4, 20fc0 <nrfx_gpio_handler+0x40>
   20fb4:	6823      	ldr	r3, [r4, #0]
   20fb6:	4621      	mov	r1, r4
   20fb8:	461c      	mov	r4, r3
   20fba:	e7f2      	b.n	20fa2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20fbc:	4e02      	ldr	r6, [pc, #8]	; (20fc8 <nrfx_gpio_handler+0x48>)
   20fbe:	e7e7      	b.n	20f90 <nrfx_gpio_handler+0x10>
   20fc0:	4623      	mov	r3, r4
   20fc2:	e7f8      	b.n	20fb6 <nrfx_gpio_handler+0x36>
   20fc4:	00032938 	.word	0x00032938
   20fc8:	00032920 	.word	0x00032920

00020fcc <gpio_nrfx_pin_configure>:
{
   20fcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   20fd0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20fd2:	f001 051f 	and.w	r5, r1, #31
   20fd6:	7b3b      	ldrb	r3, [r7, #12]
{
   20fd8:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20fda:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   20fde:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20fe0:	4628      	mov	r0, r5
   20fe2:	f10d 0103 	add.w	r1, sp, #3
   20fe6:	f002 fdcf 	bl	23b88 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20fea:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20fee:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20ff0:	d10b      	bne.n	2100a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   20ff2:	4628      	mov	r0, r5
   20ff4:	f002 fe8a 	bl	23d0c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   20ff8:	4b3c      	ldr	r3, [pc, #240]	; (210ec <gpio_nrfx_pin_configure+0x120>)
   20ffa:	4598      	cmp	r8, r3
   20ffc:	d103      	bne.n	21006 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   20ffe:	f89d 0003 	ldrb.w	r0, [sp, #3]
   21002:	f002 fe09 	bl	23c18 <nrfx_gpiote_channel_free>
		return 0;
   21006:	2000      	movs	r0, #0
   21008:	e00c      	b.n	21024 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2100a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2100c:	4628      	mov	r0, r5
   2100e:	4619      	mov	r1, r3
   21010:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   21012:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21016:	f002 fc8f 	bl	23938 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2101a:	4b34      	ldr	r3, [pc, #208]	; (210ec <gpio_nrfx_pin_configure+0x120>)
   2101c:	4298      	cmp	r0, r3
   2101e:	d004      	beq.n	2102a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   21020:	f06f 0015 	mvn.w	r0, #21
}
   21024:	b004      	add	sp, #16
   21026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   2102a:	4580      	cmp	r8, r0
   2102c:	d103      	bne.n	21036 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   2102e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   21032:	f002 fdf1 	bl	23c18 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   21036:	03a3      	lsls	r3, r4, #14
   21038:	d549      	bpl.n	210ce <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2103a:	f240 3306 	movw	r3, #774	; 0x306
   2103e:	4023      	ands	r3, r4
   21040:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   21044:	d019      	beq.n	2107a <gpio_nrfx_pin_configure+0xae>
   21046:	d80c      	bhi.n	21062 <gpio_nrfx_pin_configure+0x96>
   21048:	2b06      	cmp	r3, #6
   2104a:	d017      	beq.n	2107c <gpio_nrfx_pin_configure+0xb0>
   2104c:	d804      	bhi.n	21058 <gpio_nrfx_pin_configure+0x8c>
   2104e:	b1ab      	cbz	r3, 2107c <gpio_nrfx_pin_configure+0xb0>
   21050:	2b02      	cmp	r3, #2
   21052:	d1e5      	bne.n	21020 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   21054:	2304      	movs	r3, #4
   21056:	e011      	b.n	2107c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   21058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2105c:	d1e0      	bne.n	21020 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   2105e:	2301      	movs	r3, #1
   21060:	e00c      	b.n	2107c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   21062:	f240 2202 	movw	r2, #514	; 0x202
   21066:	4293      	cmp	r3, r2
   21068:	d026      	beq.n	210b8 <gpio_nrfx_pin_configure+0xec>
   2106a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   2106e:	d025      	beq.n	210bc <gpio_nrfx_pin_configure+0xf0>
   21070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21074:	d1d4      	bne.n	21020 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   21076:	2302      	movs	r3, #2
   21078:	e000      	b.n	2107c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   2107a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   2107c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   21080:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   21084:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   21088:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   2108a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   2108e:	bf4c      	ite	mi
   21090:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   21092:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21096:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   21098:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2109c:	d510      	bpl.n	210c0 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2109e:	2301      	movs	r3, #1
   210a0:	687a      	ldr	r2, [r7, #4]
   210a2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   210a4:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   210a6:	2200      	movs	r2, #0
   210a8:	4628      	mov	r0, r5
   210aa:	a901      	add	r1, sp, #4
   210ac:	f002 fcf2 	bl	23a94 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   210b0:	4b0e      	ldr	r3, [pc, #56]	; (210ec <gpio_nrfx_pin_configure+0x120>)
   210b2:	4298      	cmp	r0, r3
   210b4:	d0a7      	beq.n	21006 <gpio_nrfx_pin_configure+0x3a>
   210b6:	e7b3      	b.n	21020 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   210b8:	2305      	movs	r3, #5
   210ba:	e7df      	b.n	2107c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   210bc:	2303      	movs	r3, #3
   210be:	e7dd      	b.n	2107c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   210c0:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   210c2:	bf41      	itttt	mi
   210c4:	2301      	movmi	r3, #1
   210c6:	687a      	ldrmi	r2, [r7, #4]
   210c8:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   210ca:	60d3      	strmi	r3, [r2, #12]
}
   210cc:	e7eb      	b.n	210a6 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   210ce:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   210d0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   210d4:	bf4c      	ite	mi
   210d6:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   210d8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   210dc:	461a      	mov	r2, r3
   210de:	4628      	mov	r0, r5
   210e0:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   210e2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   210e6:	f002 fc27 	bl	23938 <nrfx_gpiote_input_configure>
   210ea:	e7e1      	b.n	210b0 <gpio_nrfx_pin_configure+0xe4>
   210ec:	0bad0000 	.word	0x0bad0000

000210f0 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   210f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   210f4:	6844      	ldr	r4, [r0, #4]
{
   210f6:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   210f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   210fa:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   210fc:	2100      	movs	r1, #0
   210fe:	4630      	mov	r0, r6
   21100:	aa07      	add	r2, sp, #28
   21102:	f00e ff0a 	bl	2ff1a <pinctrl_lookup_state>
	if (ret < 0) {
   21106:	2800      	cmp	r0, #0
   21108:	db2a      	blt.n	21160 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2110a:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2110c:	6832      	ldr	r2, [r6, #0]
   2110e:	7919      	ldrb	r1, [r3, #4]
   21110:	6818      	ldr	r0, [r3, #0]
   21112:	f001 ff33 	bl	22f7c <pinctrl_configure_pins>
	if (err < 0) {
   21116:	2800      	cmp	r0, #0
   21118:	db22      	blt.n	21160 <spi_nrfx_init+0x70>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2111a:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   2111c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2111e:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   21120:	68ac      	ldr	r4, [r5, #8]
   21122:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   21126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2112a:	429c      	cmp	r4, r3
   2112c:	d304      	bcc.n	21138 <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   2112e:	4628      	mov	r0, r5
   21130:	f00e fb34 	bl	2f79c <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   21134:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   21136:	e013      	b.n	21160 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   21138:	6820      	ldr	r0, [r4, #0]
   2113a:	f00f fda4 	bl	30c86 <z_device_is_ready>
   2113e:	4603      	mov	r3, r0
   21140:	b988      	cbnz	r0, 21166 <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   21142:	7922      	ldrb	r2, [r4, #4]
   21144:	4919      	ldr	r1, [pc, #100]	; (211ac <spi_nrfx_init+0xbc>)
   21146:	9204      	str	r2, [sp, #16]
   21148:	6822      	ldr	r2, [r4, #0]
   2114a:	6812      	ldr	r2, [r2, #0]
   2114c:	9000      	str	r0, [sp, #0]
   2114e:	9203      	str	r2, [sp, #12]
   21150:	4a17      	ldr	r2, [pc, #92]	; (211b0 <spi_nrfx_init+0xc0>)
   21152:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21156:	2201      	movs	r2, #1
   21158:	f00e fada 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   2115c:	f06f 0012 	mvn.w	r0, #18
#endif
}
   21160:	b008      	add	sp, #32
   21162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   21166:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   21168:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   2116a:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   2116c:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   21170:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21172:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
   21176:	bf54      	ite	pl
   21178:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2117c:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   21180:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21184:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   21188:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   2118a:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2118e:	bf4c      	ite	mi
   21190:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21194:	ea27 070e 	bicpl.w	r7, r7, lr
   21198:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   2119c:	f8d8 3000 	ldr.w	r3, [r8]
   211a0:	4798      	blx	r3
		if (ret < 0) {
   211a2:	2800      	cmp	r0, #0
   211a4:	dbdc      	blt.n	21160 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   211a6:	3408      	adds	r4, #8
   211a8:	e7bb      	b.n	21122 <spi_nrfx_init+0x32>
   211aa:	bf00      	nop
   211ac:	00033128 	.word	0x00033128
   211b0:	00037df1 	.word	0x00037df1

000211b4 <transfer_next_chunk>:
{
   211b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   211b6:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   211b8:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   211ba:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   211bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   211be:	b98d      	cbnz	r5, 211e4 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   211c0:	2b00      	cmp	r3, #0
   211c2:	d137      	bne.n	21234 <transfer_next_chunk+0x80>
	int error = 0;
   211c4:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   211c6:	2200      	movs	r2, #0
   211c8:	4620      	mov	r0, r4
   211ca:	4611      	mov	r1, r2
   211cc:	f00e fac4 	bl	2f758 <_spi_context_cs_control>
	ctx->sync_status = status;
   211d0:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   211d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   211d6:	f004 fc83 	bl	25ae0 <z_impl_k_sem_give>
	dev_data->busy = false;
   211da:	2300      	movs	r3, #0
   211dc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   211e0:	b004      	add	sp, #16
   211e2:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   211e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   211e6:	bb0b      	cbnz	r3, 2122c <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   211e8:	bb39      	cbnz	r1, 2123a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   211ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   211ee:	42aa      	cmp	r2, r5
   211f0:	bf28      	it	cs
   211f2:	462a      	movcs	r2, r5
   211f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   211f6:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   211f8:	9100      	str	r1, [sp, #0]
   211fa:	b11b      	cbz	r3, 21204 <transfer_next_chunk+0x50>
   211fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   211fe:	2b00      	cmp	r3, #0
   21200:	bf18      	it	ne
   21202:	4613      	movne	r3, r2
   21204:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   21206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   21208:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   2120a:	b11b      	cbz	r3, 21214 <transfer_next_chunk+0x60>
   2120c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2120e:	2b00      	cmp	r3, #0
   21210:	bf18      	it	ne
   21212:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   21214:	2200      	movs	r2, #0
   21216:	4669      	mov	r1, sp
   21218:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2121a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   2121c:	f003 fbc8 	bl	249b0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   21220:	4b0d      	ldr	r3, [pc, #52]	; (21258 <transfer_next_chunk+0xa4>)
   21222:	4298      	cmp	r0, r3
   21224:	d0dc      	beq.n	211e0 <transfer_next_chunk+0x2c>
			error = -EIO;
   21226:	f06f 0504 	mvn.w	r5, #4
   2122a:	e7cc      	b.n	211c6 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   2122c:	429d      	cmp	r5, r3
   2122e:	bf28      	it	cs
   21230:	461d      	movcs	r5, r3
   21232:	e7d9      	b.n	211e8 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   21234:	461d      	mov	r5, r3
   21236:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   21238:	e7d7      	b.n	211ea <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2123a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   2123e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21242:	d0d2      	beq.n	211ea <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   21244:	2d08      	cmp	r5, #8
   21246:	bf28      	it	cs
   21248:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2124a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   2124c:	462a      	mov	r2, r5
   2124e:	f010 faee 	bl	3182e <memcpy>
			tx_buf = dev_data->buffer;
   21252:	6f21      	ldr	r1, [r4, #112]	; 0x70
   21254:	e7c9      	b.n	211ea <transfer_next_chunk+0x36>
   21256:	bf00      	nop
   21258:	0bad0000 	.word	0x0bad0000

0002125c <event_handler>:
{
   2125c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   2125e:	7803      	ldrb	r3, [r0, #0]
{
   21260:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   21262:	2b00      	cmp	r3, #0
   21264:	d154      	bne.n	21310 <event_handler+0xb4>
	if (!ctx->tx_len) {
   21266:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   21268:	6e89      	ldr	r1, [r1, #104]	; 0x68
   2126a:	b152      	cbz	r2, 21282 <event_handler+0x26>
	if (len > ctx->tx_len) {
   2126c:	4291      	cmp	r1, r2
   2126e:	d91d      	bls.n	212ac <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   21270:	4a28      	ldr	r2, [pc, #160]	; (21314 <event_handler+0xb8>)
   21272:	4618      	mov	r0, r3
   21274:	e9cd 3201 	strd	r3, r2, [sp, #4]
   21278:	4927      	ldr	r1, [pc, #156]	; (21318 <event_handler+0xbc>)
   2127a:	2201      	movs	r2, #1
   2127c:	9300      	str	r3, [sp, #0]
   2127e:	f00e fa47 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   21282:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   21284:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   21286:	b15b      	cbz	r3, 212a0 <event_handler+0x44>
	if (len > ctx->rx_len) {
   21288:	429a      	cmp	r2, r3
   2128a:	d928      	bls.n	212de <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   2128c:	4b21      	ldr	r3, [pc, #132]	; (21314 <event_handler+0xb8>)
   2128e:	2201      	movs	r2, #1
   21290:	9302      	str	r3, [sp, #8]
   21292:	2300      	movs	r3, #0
   21294:	4920      	ldr	r1, [pc, #128]	; (21318 <event_handler+0xbc>)
   21296:	4618      	mov	r0, r3
   21298:	e9cd 3300 	strd	r3, r3, [sp]
   2129c:	f00e fa38 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   212a0:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   212a2:	b004      	add	sp, #16
   212a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   212a8:	f7ff bf84 	b.w	211b4 <transfer_next_chunk>
	ctx->tx_len -= len;
   212ac:	1a52      	subs	r2, r2, r1
   212ae:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   212b0:	b97a      	cbnz	r2, 212d2 <event_handler+0x76>
		++ctx->current_tx;
   212b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   212b4:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   212b8:	3308      	adds	r3, #8
   212ba:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   212bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   212be:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   212c2:	3b01      	subs	r3, #1
   212c4:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   212c6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   212ca:	f00e fa0e 	bl	2f6ea <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   212ce:	6560      	str	r0, [r4, #84]	; 0x54
   212d0:	e7d7      	b.n	21282 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   212d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   212d4:	2b00      	cmp	r3, #0
   212d6:	d0d4      	beq.n	21282 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   212d8:	440b      	add	r3, r1
   212da:	6563      	str	r3, [r4, #84]	; 0x54
   212dc:	e7d1      	b.n	21282 <event_handler+0x26>
	ctx->rx_len -= len;
   212de:	1a9b      	subs	r3, r3, r2
   212e0:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   212e2:	b97b      	cbnz	r3, 21304 <event_handler+0xa8>
		++ctx->current_rx;
   212e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   212e6:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   212ea:	3308      	adds	r3, #8
   212ec:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   212ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   212f0:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   212f4:	3b01      	subs	r3, #1
   212f6:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   212f8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   212fc:	f00e f9f5 	bl	2f6ea <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   21300:	65e0      	str	r0, [r4, #92]	; 0x5c
   21302:	e7cd      	b.n	212a0 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   21304:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   21306:	2b00      	cmp	r3, #0
   21308:	d0ca      	beq.n	212a0 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   2130a:	4413      	add	r3, r2
   2130c:	65e3      	str	r3, [r4, #92]	; 0x5c
   2130e:	e7c7      	b.n	212a0 <event_handler+0x44>
}
   21310:	b004      	add	sp, #16
   21312:	bd10      	pop	{r4, pc}
   21314:	00037e15 	.word	0x00037e15
   21318:	00033128 	.word	0x00033128

0002131c <spi_nrfx_transceive>:
{
   2131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21320:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   21322:	888b      	ldrh	r3, [r1, #4]
   21324:	460f      	mov	r7, r1
   21326:	0499      	lsls	r1, r3, #18
   21328:	4680      	mov	r8, r0
   2132a:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   2132c:	6904      	ldr	r4, [r0, #16]
{
   2132e:	b08f      	sub	sp, #60	; 0x3c
   21330:	d435      	bmi.n	2139e <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   21332:	f04f 32ff 	mov.w	r2, #4294967295
   21336:	f04f 33ff 	mov.w	r3, #4294967295
   2133a:	f104 0010 	add.w	r0, r4, #16
   2133e:	f004 fbf5 	bl	25b2c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   21342:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   21344:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   21348:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   2134c:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   2134e:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   21350:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   21354:	9306      	str	r3, [sp, #24]
   21356:	b123      	cbz	r3, 21362 <spi_nrfx_transceive+0x46>
   21358:	f8da 3000 	ldr.w	r3, [sl]
   2135c:	429f      	cmp	r7, r3
   2135e:	f000 80da 	beq.w	21516 <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   21362:	88be      	ldrh	r6, [r7, #4]
   21364:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   21368:	d020      	beq.n	213ac <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   2136a:	4ba1      	ldr	r3, [pc, #644]	; (215f0 <spi_nrfx_transceive+0x2d4>)
   2136c:	2201      	movs	r2, #1
   2136e:	9302      	str	r3, [sp, #8]
   21370:	2300      	movs	r3, #0
   21372:	49a0      	ldr	r1, [pc, #640]	; (215f4 <spi_nrfx_transceive+0x2d8>)
   21374:	4618      	mov	r0, r3
   21376:	e9cd 3300 	strd	r3, r3, [sp]
   2137a:	f00e f9c9 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   2137e:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   21382:	6823      	ldr	r3, [r4, #0]
   21384:	889b      	ldrh	r3, [r3, #4]
   21386:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   2138a:	d104      	bne.n	21396 <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   2138c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2138e:	f104 0010 	add.w	r0, r4, #16
   21392:	f004 fba5 	bl	25ae0 <z_impl_k_sem_give>
}
   21396:	4628      	mov	r0, r5
   21398:	b00f      	add	sp, #60	; 0x3c
   2139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2139e:	69a3      	ldr	r3, [r4, #24]
   213a0:	2b00      	cmp	r3, #0
   213a2:	d1c6      	bne.n	21332 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   213a4:	6863      	ldr	r3, [r4, #4]
   213a6:	429f      	cmp	r7, r3
   213a8:	d1c3      	bne.n	21332 <spi_nrfx_transceive+0x16>
   213aa:	e7cb      	b.n	21344 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   213ac:	f016 0201 	ands.w	r2, r6, #1
   213b0:	d00e      	beq.n	213d0 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   213b2:	f8d8 2000 	ldr.w	r2, [r8]
   213b6:	4618      	mov	r0, r3
   213b8:	9203      	str	r2, [sp, #12]
   213ba:	4a8f      	ldr	r2, [pc, #572]	; (215f8 <spi_nrfx_transceive+0x2dc>)
   213bc:	498d      	ldr	r1, [pc, #564]	; (215f4 <spi_nrfx_transceive+0x2d8>)
   213be:	e9cd 3201 	strd	r3, r2, [sp, #4]
   213c2:	9300      	str	r3, [sp, #0]
   213c4:	2201      	movs	r2, #1
   213c6:	f00e f9a3 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   213ca:	f06f 0515 	mvn.w	r5, #21
   213ce:	e7d8      	b.n	21382 <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   213d0:	f016 0308 	ands.w	r3, r6, #8
   213d4:	d00a      	beq.n	213ec <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   213d6:	4b89      	ldr	r3, [pc, #548]	; (215fc <spi_nrfx_transceive+0x2e0>)
   213d8:	9200      	str	r2, [sp, #0]
   213da:	e9cd 2301 	strd	r2, r3, [sp, #4]
   213de:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   213e0:	2201      	movs	r2, #1
   213e2:	4618      	mov	r0, r3
   213e4:	4983      	ldr	r1, [pc, #524]	; (215f4 <spi_nrfx_transceive+0x2d8>)
   213e6:	f00e f993 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   213ea:	e7ee      	b.n	213ca <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   213ec:	f3c6 1245 	ubfx	r2, r6, #5, #6
   213f0:	2a08      	cmp	r2, #8
   213f2:	d004      	beq.n	213fe <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   213f4:	4a82      	ldr	r2, [pc, #520]	; (21600 <spi_nrfx_transceive+0x2e4>)
   213f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   213fa:	9300      	str	r3, [sp, #0]
   213fc:	e7f0      	b.n	213e0 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   213fe:	683a      	ldr	r2, [r7, #0]
   21400:	9207      	str	r2, [sp, #28]
   21402:	9907      	ldr	r1, [sp, #28]
   21404:	4a7f      	ldr	r2, [pc, #508]	; (21604 <spi_nrfx_transceive+0x2e8>)
   21406:	4291      	cmp	r1, r2
   21408:	d801      	bhi.n	2140e <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   2140a:	4a7f      	ldr	r2, [pc, #508]	; (21608 <spi_nrfx_transceive+0x2ec>)
   2140c:	e7f3      	b.n	213f6 <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   2140e:	4b7f      	ldr	r3, [pc, #508]	; (2160c <spi_nrfx_transceive+0x2f0>)
   21410:	429d      	cmp	r5, r3
   21412:	d906      	bls.n	21422 <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   21414:	4a7e      	ldr	r2, [pc, #504]	; (21610 <spi_nrfx_transceive+0x2f4>)
   21416:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   2141a:	f012 0f03 	tst.w	r2, #3
   2141e:	bf18      	it	ne
   21420:	461d      	movne	r5, r3
	config = dev_config->def_config;
   21422:	9b05      	ldr	r3, [sp, #20]
   21424:	f10d 0c20 	add.w	ip, sp, #32
   21428:	f103 0e0c 	add.w	lr, r3, #12
   2142c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   21430:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   21434:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   21436:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2143a:	42ab      	cmp	r3, r5
   2143c:	bf28      	it	cs
   2143e:	462b      	movcs	r3, r5
   21440:	461d      	mov	r5, r3
	if (frequency < 250000) {
   21442:	4b74      	ldr	r3, [pc, #464]	; (21614 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   21444:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   21448:	429d      	cmp	r5, r3
   2144a:	d946      	bls.n	214da <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   2144c:	4b72      	ldr	r3, [pc, #456]	; (21618 <spi_nrfx_transceive+0x2fc>)
   2144e:	429d      	cmp	r5, r3
   21450:	d946      	bls.n	214e0 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   21452:	4b72      	ldr	r3, [pc, #456]	; (2161c <spi_nrfx_transceive+0x300>)
   21454:	429d      	cmp	r5, r3
   21456:	d946      	bls.n	214e6 <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   21458:	4b71      	ldr	r3, [pc, #452]	; (21620 <spi_nrfx_transceive+0x304>)
   2145a:	429d      	cmp	r5, r3
   2145c:	d946      	bls.n	214ec <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   2145e:	4b71      	ldr	r3, [pc, #452]	; (21624 <spi_nrfx_transceive+0x308>)
   21460:	429d      	cmp	r5, r3
   21462:	d946      	bls.n	214f2 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   21464:	4b70      	ldr	r3, [pc, #448]	; (21628 <spi_nrfx_transceive+0x30c>)
   21466:	429d      	cmp	r5, r3
   21468:	d346      	bcc.n	214f8 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   2146a:	4b68      	ldr	r3, [pc, #416]	; (2160c <spi_nrfx_transceive+0x2f0>)
   2146c:	429d      	cmp	r5, r3
   2146e:	d346      	bcc.n	214fe <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   21470:	4b6e      	ldr	r3, [pc, #440]	; (2162c <spi_nrfx_transceive+0x310>)
   21472:	429d      	cmp	r5, r3
   21474:	bf2c      	ite	cs
   21476:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   2147a:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   2147e:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   21480:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   21482:	f006 0304 	and.w	r3, r6, #4
   21486:	d53d      	bpl.n	21504 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   21488:	2b00      	cmp	r3, #0
   2148a:	bf14      	ite	ne
   2148c:	2303      	movne	r3, #3
   2148e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   21490:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   21494:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   21496:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   2149a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   2149e:	b12b      	cbz	r3, 214ac <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   214a0:	9805      	ldr	r0, [sp, #20]
   214a2:	f003 fa33 	bl	2490c <nrfx_spim_uninit>
		dev_data->initialized = false;
   214a6:	2300      	movs	r3, #0
   214a8:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   214ac:	4653      	mov	r3, sl
   214ae:	4a60      	ldr	r2, [pc, #384]	; (21630 <spi_nrfx_transceive+0x314>)
   214b0:	9805      	ldr	r0, [sp, #20]
   214b2:	a908      	add	r1, sp, #32
   214b4:	f003 f90c 	bl	246d0 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   214b8:	4b5e      	ldr	r3, [pc, #376]	; (21634 <spi_nrfx_transceive+0x318>)
   214ba:	4298      	cmp	r0, r3
   214bc:	d026      	beq.n	2150c <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   214be:	4b5e      	ldr	r3, [pc, #376]	; (21638 <spi_nrfx_transceive+0x31c>)
   214c0:	9003      	str	r0, [sp, #12]
   214c2:	9302      	str	r3, [sp, #8]
   214c4:	2300      	movs	r3, #0
   214c6:	2201      	movs	r2, #1
   214c8:	4618      	mov	r0, r3
   214ca:	e9cd 3300 	strd	r3, r3, [sp]
   214ce:	4949      	ldr	r1, [pc, #292]	; (215f4 <spi_nrfx_transceive+0x2d8>)
   214d0:	f00e f91e 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   214d4:	f06f 0504 	mvn.w	r5, #4
   214d8:	e753      	b.n	21382 <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   214da:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   214de:	e7ce      	b.n	2147e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   214e0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   214e4:	e7cb      	b.n	2147e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   214e6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   214ea:	e7c8      	b.n	2147e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   214ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   214f0:	e7c5      	b.n	2147e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   214f2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   214f6:	e7c2      	b.n	2147e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   214f8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   214fc:	e7bf      	b.n	2147e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   214fe:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   21502:	e7bc      	b.n	2147e <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   21504:	3b00      	subs	r3, #0
   21506:	bf18      	it	ne
   21508:	2301      	movne	r3, #1
   2150a:	e7c1      	b.n	21490 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   2150c:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   2150e:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   21512:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   21516:	2301      	movs	r3, #1
   21518:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2151c:	f1b9 0f00 	cmp.w	r9, #0
   21520:	d154      	bne.n	215cc <spi_nrfx_transceive+0x2b0>
   21522:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   21526:	2300      	movs	r3, #0
   21528:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   2152a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   2152e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   21532:	f104 0044 	add.w	r0, r4, #68	; 0x44
   21536:	f00e f8d8 	bl	2f6ea <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   2153a:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2153c:	f1bb 0f00 	cmp.w	fp, #0
   21540:	d14c      	bne.n	215dc <spi_nrfx_transceive+0x2c0>
   21542:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   21546:	2300      	movs	r3, #0
   21548:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   2154a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2154e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   21552:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   21556:	f00e f8c8 	bl	2f6ea <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   2155a:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   2155c:	2101      	movs	r1, #1
   2155e:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   21560:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   21562:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   21564:	4620      	mov	r0, r4
   21566:	f00e f8f7 	bl	2f758 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   2156a:	4640      	mov	r0, r8
   2156c:	f7ff fe22 	bl	211b4 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   21570:	6e25      	ldr	r5, [r4, #96]	; 0x60
   21572:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   21574:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   21576:	429d      	cmp	r5, r3
   21578:	bf38      	it	cc
   2157a:	461d      	movcc	r5, r3
   2157c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   21580:	435d      	muls	r5, r3
			     ctx->config->frequency;
   21582:	f857 3b28 	ldr.w	r3, [r7], #40
   21586:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2158a:	681b      	ldr	r3, [r3, #0]
   2158c:	4631      	mov	r1, r6
   2158e:	fbb5 f5f3 	udiv	r5, r5, r3
   21592:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   21596:	35c8      	adds	r5, #200	; 0xc8
   21598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2159c:	2300      	movs	r3, #0
   2159e:	fbe5 010c 	umlal	r0, r1, r5, ip
   215a2:	f7e7 fccd 	bl	8f40 <__aeabi_uldivmod>
   215a6:	4602      	mov	r2, r0
   215a8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   215aa:	4638      	mov	r0, r7
   215ac:	f004 fabe 	bl	25b2c <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   215b0:	b1e0      	cbz	r0, 215ec <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   215b2:	4b22      	ldr	r3, [pc, #136]	; (2163c <spi_nrfx_transceive+0x320>)
   215b4:	2201      	movs	r2, #1
   215b6:	e9cd 6301 	strd	r6, r3, [sp, #4]
   215ba:	4630      	mov	r0, r6
   215bc:	4633      	mov	r3, r6
   215be:	490d      	ldr	r1, [pc, #52]	; (215f4 <spi_nrfx_transceive+0x2d8>)
   215c0:	9600      	str	r6, [sp, #0]
   215c2:	f00e f8a5 	bl	2f710 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   215c6:	f06f 0573 	mvn.w	r5, #115	; 0x73
   215ca:	e6da      	b.n	21382 <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   215cc:	f8d9 3000 	ldr.w	r3, [r9]
   215d0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   215d2:	2b00      	cmp	r3, #0
   215d4:	d0a7      	beq.n	21526 <spi_nrfx_transceive+0x20a>
   215d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   215da:	e7a5      	b.n	21528 <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   215dc:	f8db 3000 	ldr.w	r3, [fp]
   215e0:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   215e2:	2b00      	cmp	r3, #0
   215e4:	d0af      	beq.n	21546 <spi_nrfx_transceive+0x22a>
   215e6:	f8db 3004 	ldr.w	r3, [fp, #4]
   215ea:	e7ad      	b.n	21548 <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   215ec:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   215ee:	e6c8      	b.n	21382 <spi_nrfx_transceive+0x66>
   215f0:	00037e33 	.word	0x00037e33
   215f4:	00033128 	.word	0x00033128
   215f8:	00037e4d 	.word	0x00037e4d
   215fc:	00037e6f 	.word	0x00037e6f
   21600:	00037e8e 	.word	0x00037e8e
   21604:	0001e847 	.word	0x0001e847
   21608:	00037ebd 	.word	0x00037ebd
   2160c:	00f42400 	.word	0x00f42400
   21610:	40005000 	.word	0x40005000
   21614:	0003d08f 	.word	0x0003d08f
   21618:	0007a11f 	.word	0x0007a11f
   2161c:	000f423f 	.word	0x000f423f
   21620:	001e847f 	.word	0x001e847f
   21624:	003d08ff 	.word	0x003d08ff
   21628:	007a1200 	.word	0x007a1200
   2162c:	01e84800 	.word	0x01e84800
   21630:	0002125d 	.word	0x0002125d
   21634:	0bad0000 	.word	0x0bad0000
   21638:	00037eee 	.word	0x00037eee
   2163c:	00037f15 	.word	0x00037f15

00021640 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   21640:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   21644:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   21648:	280a      	cmp	r0, #10
   2164a:	bf9a      	itte	ls
   2164c:	4b02      	ldrls	r3, [pc, #8]	; (21658 <qspi_get_zephyr_ret_code+0x18>)
   2164e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   21652:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   21656:	4770      	bx	lr
   21658:	00034380 	.word	0x00034380

0002165c <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   2165c:	4b02      	ldr	r3, [pc, #8]	; (21668 <qspi_nor_pages_layout+0xc>)
   2165e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21660:	2301      	movs	r3, #1
   21662:	6013      	str	r3, [r2, #0]
}
   21664:	4770      	bx	lr
   21666:	bf00      	nop
   21668:	000340d0 	.word	0x000340d0

0002166c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   2166c:	4800      	ldr	r0, [pc, #0]	; (21670 <qspi_flash_get_parameters+0x4>)
   2166e:	4770      	bx	lr
   21670:	00034064 	.word	0x00034064

00021674 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   21674:	4b05      	ldr	r3, [pc, #20]	; (2168c <qspi_wait_for_completion.isra.0+0x18>)
   21676:	4299      	cmp	r1, r3
   21678:	d106      	bne.n	21688 <qspi_wait_for_completion.isra.0+0x14>
   2167a:	f04f 32ff 	mov.w	r2, #4294967295
   2167e:	f04f 33ff 	mov.w	r3, #4294967295
   21682:	3030      	adds	r0, #48	; 0x30
   21684:	f004 ba52 	b.w	25b2c <z_impl_k_sem_take>
}
   21688:	4770      	bx	lr
   2168a:	bf00      	nop
   2168c:	0bad0000 	.word	0x0bad0000

00021690 <qspi_device_init>:
{
   21690:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   21692:	6905      	ldr	r5, [r0, #16]
{
   21694:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   21696:	4e0f      	ldr	r6, [pc, #60]	; (216d4 <qspi_device_init+0x44>)
	qspi_lock(dev);
   21698:	4628      	mov	r0, r5
   2169a:	f00e f8b8 	bl	2f80e <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   2169e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   216a2:	f00e f89d 	bl	2f7e0 <k_sem_give>
	if (!qspi_initialized) {
   216a6:	7833      	ldrb	r3, [r6, #0]
   216a8:	b98b      	cbnz	r3, 216ce <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   216aa:	462a      	mov	r2, r5
   216ac:	490a      	ldr	r1, [pc, #40]	; (216d8 <qspi_device_init+0x48>)
   216ae:	6860      	ldr	r0, [r4, #4]
   216b0:	f002 fdde 	bl	24270 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   216b4:	f7ff ffc4 	bl	21640 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   216b8:	fab0 f380 	clz	r3, r0
   216bc:	4605      	mov	r5, r0
   216be:	095b      	lsrs	r3, r3, #5
   216c0:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   216c2:	6920      	ldr	r0, [r4, #16]
   216c4:	3018      	adds	r0, #24
   216c6:	f00e f88b 	bl	2f7e0 <k_sem_give>
}
   216ca:	4628      	mov	r0, r5
   216cc:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   216ce:	2500      	movs	r5, #0
   216d0:	e7f7      	b.n	216c2 <qspi_device_init+0x32>
   216d2:	bf00      	nop
   216d4:	20031ada 	.word	0x20031ada
   216d8:	0002f7e5 	.word	0x0002f7e5

000216dc <qspi_send_cmd>:
{
   216dc:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   216de:	684c      	ldr	r4, [r1, #4]
{
   216e0:	4605      	mov	r5, r0
   216e2:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   216e4:	b1ec      	cbz	r4, 21722 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   216e6:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   216ea:	6888      	ldr	r0, [r1, #8]
   216ec:	b1d8      	cbz	r0, 21726 <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   216ee:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   216f2:	b1c8      	cbz	r0, 21728 <qspi_send_cmd+0x4c>
   216f4:	b1c3      	cbz	r3, 21728 <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   216f6:	4283      	cmp	r3, r0
   216f8:	d10f      	bne.n	2171a <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   216fa:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   216fc:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   216fe:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   21700:	d915      	bls.n	2172e <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   21702:	e9cd 1303 	strd	r1, r3, [sp, #12]
   21706:	4b1a      	ldr	r3, [pc, #104]	; (21770 <qspi_send_cmd+0x94>)
   21708:	2202      	movs	r2, #2
   2170a:	9302      	str	r3, [sp, #8]
   2170c:	2300      	movs	r3, #0
   2170e:	4919      	ldr	r1, [pc, #100]	; (21774 <qspi_send_cmd+0x98>)
   21710:	4618      	mov	r0, r3
   21712:	e9cd 3300 	strd	r3, r3, [sp]
   21716:	f00e f86b 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
}
   2171a:	f06f 0015 	mvn.w	r0, #21
   2171e:	b008      	add	sp, #32
   21720:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   21722:	4623      	mov	r3, r4
   21724:	e7e1      	b.n	216ea <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   21726:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   21728:	3301      	adds	r3, #1
   2172a:	4403      	add	r3, r0
   2172c:	e7e6      	b.n	216fc <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   2172e:	f88d 3019 	strb.w	r3, [sp, #25]
   21732:	f240 1301 	movw	r3, #257	; 0x101
   21736:	f8ad 301a 	strh.w	r3, [sp, #26]
   2173a:	2300      	movs	r3, #0
	qspi_lock(dev);
   2173c:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   2173e:	f88d 301c 	strb.w	r3, [sp, #28]
   21742:	f88d 1018 	strb.w	r1, [sp, #24]
   21746:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   2174a:	f00e f860 	bl	2f80e <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   2174e:	4621      	mov	r1, r4
   21750:	4632      	mov	r2, r6
   21752:	a806      	add	r0, sp, #24
   21754:	f002 fe66 	bl	24424 <nrfx_qspi_cinstr_xfer>
   21758:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   2175a:	6928      	ldr	r0, [r5, #16]
   2175c:	3018      	adds	r0, #24
   2175e:	f00e f83f 	bl	2f7e0 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   21762:	4620      	mov	r0, r4
}
   21764:	b008      	add	sp, #32
   21766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   2176a:	f7ff bf69 	b.w	21640 <qspi_get_zephyr_ret_code>
   2176e:	bf00      	nop
   21770:	00037f52 	.word	0x00037f52
   21774:	00033118 	.word	0x00033118

00021778 <qspi_device_uninit>:
{
   21778:	b538      	push	{r3, r4, r5, lr}
   2177a:	4604      	mov	r4, r0
	qspi_lock(dev);
   2177c:	6900      	ldr	r0, [r0, #16]
   2177e:	f00e f846 	bl	2f80e <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   21782:	6925      	ldr	r5, [r4, #16]
   21784:	2200      	movs	r2, #0
   21786:	2300      	movs	r3, #0
   21788:	f105 0048 	add.w	r0, r5, #72	; 0x48
   2178c:	f004 f9ce 	bl	25b2c <z_impl_k_sem_take>
	if (last) {
   21790:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21792:	b94b      	cbnz	r3, 217a8 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   21794:	4d0a      	ldr	r5, [pc, #40]	; (217c0 <qspi_device_uninit+0x48>)
   21796:	f002 fe85 	bl	244a4 <nrfx_qspi_mem_busy_check>
   2179a:	42a8      	cmp	r0, r5
   2179c:	d10a      	bne.n	217b4 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   2179e:	f002 fea3 	bl	244e8 <nrfx_qspi_uninit>
		qspi_initialized = false;
   217a2:	2200      	movs	r2, #0
   217a4:	4b07      	ldr	r3, [pc, #28]	; (217c4 <qspi_device_uninit+0x4c>)
   217a6:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   217a8:	6920      	ldr	r0, [r4, #16]
}
   217aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   217ae:	3018      	adds	r0, #24
   217b0:	f00e b816 	b.w	2f7e0 <k_sem_give>
	return z_impl_k_sleep(timeout);
   217b4:	2100      	movs	r1, #0
   217b6:	f240 6067 	movw	r0, #1639	; 0x667
   217ba:	f004 feb5 	bl	26528 <z_impl_k_sleep>
   217be:	e7ea      	b.n	21796 <qspi_device_uninit+0x1e>
   217c0:	0bad0000 	.word	0x0bad0000
   217c4:	20031ada 	.word	0x20031ada

000217c8 <qspi_nor_read>:
{
   217c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217cc:	4681      	mov	r9, r0
   217ce:	460e      	mov	r6, r1
   217d0:	461c      	mov	r4, r3
	if (!dest) {
   217d2:	4690      	mov	r8, r2
{
   217d4:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   217d6:	b1aa      	cbz	r2, 21804 <qspi_nor_read+0x3c>
	if (!size) {
   217d8:	2b00      	cmp	r3, #0
   217da:	f000 809f 	beq.w	2191c <qspi_nor_read+0x154>
	if (addr < 0 ||
   217de:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   217e0:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   217e2:	db03      	blt.n	217ec <qspi_nor_read+0x24>
   217e4:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   217e6:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   217e8:	4293      	cmp	r3, r2
   217ea:	d911      	bls.n	21810 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   217ec:	4b4c      	ldr	r3, [pc, #304]	; (21920 <qspi_nor_read+0x158>)
   217ee:	2201      	movs	r2, #1
   217f0:	9302      	str	r3, [sp, #8]
   217f2:	2300      	movs	r3, #0
   217f4:	e9cd 6403 	strd	r6, r4, [sp, #12]
   217f8:	4618      	mov	r0, r3
   217fa:	e9cd 3300 	strd	r3, r3, [sp]
   217fe:	4949      	ldr	r1, [pc, #292]	; (21924 <qspi_nor_read+0x15c>)
   21800:	f00d fff6 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21804:	f06f 0515 	mvn.w	r5, #21
}
   21808:	4628      	mov	r0, r5
   2180a:	b00b      	add	sp, #44	; 0x2c
   2180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   21810:	f7ff ff3e 	bl	21690 <qspi_device_init>
	if (rc != 0) {
   21814:	4605      	mov	r5, r0
   21816:	2800      	cmp	r0, #0
   21818:	d17c      	bne.n	21914 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   2181a:	4275      	negs	r5, r6
   2181c:	f005 0503 	and.w	r5, r5, #3
   21820:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21824:	f00d fff3 	bl	2f80e <qspi_lock.isra.0>
	if (flash_prefix > size) {
   21828:	42a5      	cmp	r5, r4
   2182a:	bf28      	it	cs
   2182c:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   2182e:	f1d8 0300 	rsbs	r3, r8, #0
   21832:	f003 0303 	and.w	r3, r3, #3
   21836:	f008 0703 	and.w	r7, r8, #3
   2183a:	bf58      	it	pl
   2183c:	425f      	negpl	r7, r3
   2183e:	427f      	negs	r7, r7
   21840:	f007 0703 	and.w	r7, r7, #3
   21844:	42a7      	cmp	r7, r4
   21846:	bf28      	it	cs
   21848:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   2184a:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   2184c:	1be4      	subs	r4, r4, r7
   2184e:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   21852:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   21856:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   21858:	bfc8      	it	gt
   2185a:	46a2      	movgt	sl, r4
   2185c:	f003 0b03 	and.w	fp, r3, #3
   21860:	bfc8      	it	gt
   21862:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   21866:	f1ba 0f00 	cmp.w	sl, #0
   2186a:	d019      	beq.n	218a0 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   2186c:	eb08 0307 	add.w	r3, r8, r7
   21870:	1972      	adds	r2, r6, r5
   21872:	4651      	mov	r1, sl
   21874:	4618      	mov	r0, r3
   21876:	9307      	str	r3, [sp, #28]
   21878:	f00e fc55 	bl	30126 <nrfx_qspi_read>
   2187c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   2187e:	4601      	mov	r1, r0
   21880:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21884:	f7ff fef6 	bl	21674 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   21888:	4a27      	ldr	r2, [pc, #156]	; (21928 <qspi_nor_read+0x160>)
   2188a:	4294      	cmp	r4, r2
   2188c:	d139      	bne.n	21902 <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   2188e:	42bd      	cmp	r5, r7
   21890:	d006      	beq.n	218a0 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   21892:	9b07      	ldr	r3, [sp, #28]
   21894:	4652      	mov	r2, sl
   21896:	4619      	mov	r1, r3
   21898:	eb08 0005 	add.w	r0, r8, r5
   2189c:	f00f ffe7 	bl	3186e <memmove>
	if (flash_prefix != 0) {
   218a0:	b1ad      	cbz	r5, 218ce <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   218a2:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   218a6:	2104      	movs	r1, #4
   218a8:	1bf2      	subs	r2, r6, r7
   218aa:	a808      	add	r0, sp, #32
   218ac:	f00e fc3b 	bl	30126 <nrfx_qspi_read>
   218b0:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   218b2:	4601      	mov	r1, r0
   218b4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   218b8:	f7ff fedc 	bl	21674 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   218bc:	4b1a      	ldr	r3, [pc, #104]	; (21928 <qspi_nor_read+0x160>)
   218be:	429c      	cmp	r4, r3
   218c0:	d11f      	bne.n	21902 <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   218c2:	ab08      	add	r3, sp, #32
   218c4:	462a      	mov	r2, r5
   218c6:	4640      	mov	r0, r8
   218c8:	19d9      	adds	r1, r3, r7
   218ca:	f00f ffb0 	bl	3182e <memcpy>
	if (flash_suffix != 0) {
   218ce:	f1bb 0f00 	cmp.w	fp, #0
   218d2:	d015      	beq.n	21900 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   218d4:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   218d6:	2108      	movs	r1, #8
   218d8:	4452      	add	r2, sl
   218da:	a808      	add	r0, sp, #32
   218dc:	f00e fc23 	bl	30126 <nrfx_qspi_read>
   218e0:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   218e2:	4601      	mov	r1, r0
   218e4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   218e8:	f7ff fec4 	bl	21674 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   218ec:	4b0e      	ldr	r3, [pc, #56]	; (21928 <qspi_nor_read+0x160>)
   218ee:	429c      	cmp	r4, r3
   218f0:	d107      	bne.n	21902 <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   218f2:	eb0a 0005 	add.w	r0, sl, r5
   218f6:	465a      	mov	r2, fp
   218f8:	a908      	add	r1, sp, #32
   218fa:	4440      	add	r0, r8
   218fc:	f00f ff97 	bl	3182e <memcpy>
	return res;
   21900:	4c09      	ldr	r4, [pc, #36]	; (21928 <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   21902:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21906:	3018      	adds	r0, #24
   21908:	f00d ff6a 	bl	2f7e0 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   2190c:	4620      	mov	r0, r4
   2190e:	f7ff fe97 	bl	21640 <qspi_get_zephyr_ret_code>
   21912:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   21914:	4648      	mov	r0, r9
   21916:	f7ff ff2f 	bl	21778 <qspi_device_uninit>
	return rc;
   2191a:	e775      	b.n	21808 <qspi_nor_read+0x40>
		return 0;
   2191c:	461d      	mov	r5, r3
   2191e:	e773      	b.n	21808 <qspi_nor_read+0x40>
   21920:	00037f75 	.word	0x00037f75
   21924:	00033118 	.word	0x00033118
   21928:	0bad0000 	.word	0x0bad0000

0002192c <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   2192c:	2202      	movs	r2, #2
{
   2192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21932:	4b64      	ldr	r3, [pc, #400]	; (21ac4 <qspi_nor_init+0x198>)
   21934:	b090      	sub	sp, #64	; 0x40
   21936:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2193a:	6843      	ldr	r3, [r0, #4]
{
   2193c:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2193e:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   21940:	2100      	movs	r1, #0
   21942:	4630      	mov	r0, r6
   21944:	aa0d      	add	r2, sp, #52	; 0x34
   21946:	f00e fae8 	bl	2ff1a <pinctrl_lookup_state>
	if (ret < 0) {
   2194a:	1e04      	subs	r4, r0, #0
   2194c:	db35      	blt.n	219ba <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   2194e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   21950:	6832      	ldr	r2, [r6, #0]
   21952:	7919      	ldrb	r1, [r3, #4]
   21954:	6818      	ldr	r0, [r3, #0]
   21956:	f001 fb11 	bl	22f7c <pinctrl_configure_pins>
	if (ret < 0) {
   2195a:	1e04      	subs	r4, r0, #0
   2195c:	db2d      	blt.n	219ba <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   2195e:	2200      	movs	r2, #0
   21960:	2101      	movs	r1, #1
   21962:	202b      	movs	r0, #43	; 0x2b
   21964:	f7ef fc5a 	bl	1121c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   21968:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2196a:	692a      	ldr	r2, [r5, #16]
   2196c:	4630      	mov	r0, r6
   2196e:	4956      	ldr	r1, [pc, #344]	; (21ac8 <qspi_nor_init+0x19c>)
   21970:	f002 fc7e 	bl	24270 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   21974:	f7ff fe64 	bl	21640 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   21978:	1e04      	subs	r4, r0, #0
   2197a:	db1e      	blt.n	219ba <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   2197c:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   2197e:	3b02      	subs	r3, #2
   21980:	2b01      	cmp	r3, #1
   21982:	d91e      	bls.n	219c2 <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   21984:	f896 800a 	ldrb.w	r8, [r6, #10]
   21988:	f1a8 0803 	sub.w	r8, r8, #3
   2198c:	f1b8 0f01 	cmp.w	r8, #1
   21990:	bf8c      	ite	hi
   21992:	f04f 0800 	movhi.w	r8, #0
   21996:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   2199a:	4628      	mov	r0, r5
   2199c:	f00d ff59 	bl	2f852 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   219a0:	1e04      	subs	r4, r0, #0
   219a2:	da11      	bge.n	219c8 <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   219a4:	4b49      	ldr	r3, [pc, #292]	; (21acc <qspi_nor_init+0x1a0>)
   219a6:	2201      	movs	r2, #1
   219a8:	9302      	str	r3, [sp, #8]
   219aa:	2300      	movs	r3, #0
   219ac:	4948      	ldr	r1, [pc, #288]	; (21ad0 <qspi_nor_init+0x1a4>)
   219ae:	4618      	mov	r0, r3
   219b0:	e9cd 3300 	strd	r3, r3, [sp]
   219b4:	9403      	str	r4, [sp, #12]
   219b6:	f00d ff1b 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
}
   219ba:	4620      	mov	r0, r4
   219bc:	b010      	add	sp, #64	; 0x40
   219be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   219c2:	f04f 0801 	mov.w	r8, #1
   219c6:	e7e8      	b.n	2199a <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   219c8:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   219ca:	f3c4 1480 	ubfx	r4, r4, #6, #1
   219ce:	45a0      	cmp	r8, r4
   219d0:	ae0a      	add	r6, sp, #40	; 0x28
   219d2:	af0b      	add	r7, sp, #44	; 0x2c
   219d4:	d02f      	beq.n	21a36 <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   219d6:	2300      	movs	r3, #0
			sr ^= qe_mask;
   219d8:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   219dc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   219e0:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   219e4:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   219e6:	4628      	mov	r0, r5
   219e8:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   219ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   219ee:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   219f0:	930f      	str	r3, [sp, #60]	; 0x3c
   219f2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   219f6:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   219f8:	f7ff fe70 	bl	216dc <qspi_send_cmd>
	if (ret == 0) {
   219fc:	1e04      	subs	r4, r0, #0
   219fe:	d013      	beq.n	21a28 <qspi_nor_init+0xfc>
		if (ret < 0) {
   21a00:	dadb      	bge.n	219ba <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   21a02:	4a34      	ldr	r2, [pc, #208]	; (21ad4 <qspi_nor_init+0x1a8>)
   21a04:	4b34      	ldr	r3, [pc, #208]	; (21ad8 <qspi_nor_init+0x1ac>)
   21a06:	4932      	ldr	r1, [pc, #200]	; (21ad0 <qspi_nor_init+0x1a4>)
   21a08:	f1b8 0f00 	cmp.w	r8, #0
   21a0c:	bf18      	it	ne
   21a0e:	4613      	movne	r3, r2
   21a10:	e9cd 3403 	strd	r3, r4, [sp, #12]
   21a14:	4b31      	ldr	r3, [pc, #196]	; (21adc <qspi_nor_init+0x1b0>)
   21a16:	2201      	movs	r2, #1
   21a18:	9302      	str	r3, [sp, #8]
   21a1a:	2300      	movs	r3, #0
   21a1c:	4618      	mov	r0, r3
   21a1e:	e9cd 3300 	strd	r3, r3, [sp]
   21a22:	f00d fee5 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   21a26:	e7c8      	b.n	219ba <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   21a28:	4628      	mov	r0, r5
   21a2a:	f00d ff12 	bl	2f852 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   21a2e:	1e04      	subs	r4, r0, #0
   21a30:	dbe7      	blt.n	21a02 <qspi_nor_init+0xd6>
   21a32:	07e3      	lsls	r3, r4, #31
   21a34:	d4f8      	bmi.n	21a28 <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   21a36:	4628      	mov	r0, r5
   21a38:	f7ff fe9e 	bl	21778 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   21a3c:	2403      	movs	r4, #3
   21a3e:	2300      	movs	r3, #0
   21a40:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   21a44:	930e      	str	r3, [sp, #56]	; 0x38
   21a46:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   21a48:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   21a4a:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   21a4c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   21a50:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   21a52:	f7ff fe1d 	bl	21690 <qspi_device_init>
	if (ret == 0) {
   21a56:	4602      	mov	r2, r0
   21a58:	b128      	cbz	r0, 21a66 <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   21a5a:	4628      	mov	r0, r5
   21a5c:	f7ff fe8c 	bl	21778 <qspi_device_uninit>
		return -ENODEV;
   21a60:	f06f 0412 	mvn.w	r4, #18
   21a64:	e7a9      	b.n	219ba <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   21a66:	4628      	mov	r0, r5
   21a68:	a90d      	add	r1, sp, #52	; 0x34
   21a6a:	f7ff fe37 	bl	216dc <qspi_send_cmd>
   21a6e:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   21a70:	4628      	mov	r0, r5
   21a72:	f7ff fe81 	bl	21778 <qspi_device_uninit>
	if (ret != 0) {
   21a76:	2f00      	cmp	r7, #0
   21a78:	d1f2      	bne.n	21a60 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   21a7a:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   21a7c:	4622      	mov	r2, r4
   21a7e:	4631      	mov	r1, r6
   21a80:	f105 001c 	add.w	r0, r5, #28
   21a84:	f00f fec3 	bl	3180e <memcmp>
   21a88:	4604      	mov	r4, r0
   21a8a:	2800      	cmp	r0, #0
   21a8c:	d095      	beq.n	219ba <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   21a8e:	7fab      	ldrb	r3, [r5, #30]
   21a90:	2201      	movs	r2, #1
   21a92:	9308      	str	r3, [sp, #32]
   21a94:	7f6b      	ldrb	r3, [r5, #29]
   21a96:	4638      	mov	r0, r7
   21a98:	9307      	str	r3, [sp, #28]
   21a9a:	7f2b      	ldrb	r3, [r5, #28]
   21a9c:	490c      	ldr	r1, [pc, #48]	; (21ad0 <qspi_nor_init+0x1a4>)
   21a9e:	9306      	str	r3, [sp, #24]
   21aa0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   21aa4:	9700      	str	r7, [sp, #0]
   21aa6:	9305      	str	r3, [sp, #20]
   21aa8:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   21aac:	9304      	str	r3, [sp, #16]
   21aae:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   21ab2:	9303      	str	r3, [sp, #12]
   21ab4:	4b0a      	ldr	r3, [pc, #40]	; (21ae0 <qspi_nor_init+0x1b4>)
   21ab6:	e9cd 7301 	strd	r7, r3, [sp, #4]
   21aba:	463b      	mov	r3, r7
   21abc:	f00d fe98 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   21ac0:	e7ce      	b.n	21a60 <qspi_nor_init+0x134>
   21ac2:	bf00      	nop
   21ac4:	40005000 	.word	0x40005000
   21ac8:	0002f7e5 	.word	0x0002f7e5
   21acc:	00037fc4 	.word	0x00037fc4
   21ad0:	00033118 	.word	0x00033118
   21ad4:	00037205 	.word	0x00037205
   21ad8:	00037fbe 	.word	0x00037fbe
   21adc:	00037fd4 	.word	0x00037fd4
   21ae0:	00037fe5 	.word	0x00037fe5

00021ae4 <qspi_nor_erase>:
{
   21ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   21ae8:	2900      	cmp	r1, #0
{
   21aea:	4606      	mov	r6, r0
   21aec:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   21aee:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   21af2:	b087      	sub	sp, #28
	if (addr < 0 ||
   21af4:	db05      	blt.n	21b02 <qspi_nor_erase+0x1e>
   21af6:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   21afa:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   21afc:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   21afe:	4688      	mov	r8, r1
	if (addr < 0 ||
   21b00:	d911      	bls.n	21b26 <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   21b02:	4b46      	ldr	r3, [pc, #280]	; (21c1c <qspi_nor_erase+0x138>)
   21b04:	e9cd 1503 	strd	r1, r5, [sp, #12]
   21b08:	9302      	str	r3, [sp, #8]
   21b0a:	2300      	movs	r3, #0
   21b0c:	2201      	movs	r2, #1
   21b0e:	4618      	mov	r0, r3
   21b10:	e9cd 3300 	strd	r3, r3, [sp]
   21b14:	4942      	ldr	r1, [pc, #264]	; (21c20 <qspi_nor_erase+0x13c>)
   21b16:	f00d fe6b 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   21b1a:	f06f 0415 	mvn.w	r4, #21
}
   21b1e:	4620      	mov	r0, r4
   21b20:	b007      	add	sp, #28
   21b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   21b26:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   21b2a:	2d00      	cmp	r5, #0
   21b2c:	d0f5      	beq.n	21b1a <qspi_nor_erase+0x36>
   21b2e:	f3c5 030b 	ubfx	r3, r5, #0, #12
   21b32:	4313      	orrs	r3, r2
   21b34:	d1f1      	bne.n	21b1a <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   21b36:	f7ff fdab 	bl	21690 <qspi_device_init>
	if (rv != 0) {
   21b3a:	4604      	mov	r4, r0
   21b3c:	bb68      	cbnz	r0, 21b9a <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   21b3e:	6930      	ldr	r0, [r6, #16]
   21b40:	f00d fe6c 	bl	2f81c <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   21b44:	4621      	mov	r1, r4
   21b46:	4630      	mov	r0, r6
   21b48:	f00d fe6e 	bl	2f828 <qspi_nor_write_protection_set>
	if (rv != 0) {
   21b4c:	4604      	mov	r4, r0
   21b4e:	bb08      	cbnz	r0, 21b94 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   21b50:	6930      	ldr	r0, [r6, #16]
   21b52:	f00d fe5c 	bl	2f80e <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   21b56:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 21c24 <qspi_nor_erase+0x140>
		if (size == params->size) {
   21b5a:	f8da 3018 	ldr.w	r3, [sl, #24]
   21b5e:	42ab      	cmp	r3, r5
   21b60:	d11f      	bne.n	21ba2 <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   21b62:	f00e fae3 	bl	3012c <nrfx_qspi_chip_erase>
   21b66:	46a9      	mov	r9, r5
   21b68:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   21b6a:	4639      	mov	r1, r7
   21b6c:	6930      	ldr	r0, [r6, #16]
   21b6e:	f7ff fd81 	bl	21674 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   21b72:	455f      	cmp	r7, fp
   21b74:	d141      	bne.n	21bfa <qspi_nor_erase+0x116>
	while (size > 0) {
   21b76:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   21b7a:	44c8      	add	r8, r9
	while (size > 0) {
   21b7c:	d1ed      	bne.n	21b5a <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   21b7e:	6930      	ldr	r0, [r6, #16]
   21b80:	3018      	adds	r0, #24
   21b82:	f00d fe2d 	bl	2f7e0 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   21b86:	2101      	movs	r1, #1
   21b88:	4630      	mov	r0, r6
   21b8a:	f00d fe4d 	bl	2f828 <qspi_nor_write_protection_set>
   21b8e:	2c00      	cmp	r4, #0
   21b90:	bf08      	it	eq
   21b92:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   21b94:	6930      	ldr	r0, [r6, #16]
   21b96:	f00d fe23 	bl	2f7e0 <k_sem_give>
	qspi_device_uninit(dev);
   21b9a:	4630      	mov	r0, r6
   21b9c:	f7ff fdec 	bl	21778 <qspi_device_uninit>
	return rv;
   21ba0:	e7bd      	b.n	21b1e <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21ba2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   21ba6:	d30a      	bcc.n	21bbe <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   21ba8:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21bac:	b953      	cbnz	r3, 21bc4 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21bae:	4641      	mov	r1, r8
   21bb0:	2001      	movs	r0, #1
   21bb2:	f002 fce7 	bl	24584 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   21bb6:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21bba:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   21bbc:	e7d5      	b.n	21b6a <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21bbe:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   21bc2:	d309      	bcc.n	21bd8 <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   21bc4:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21bc8:	b930      	cbnz	r0, 21bd8 <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   21bca:	4641      	mov	r1, r8
   21bcc:	f002 fcda 	bl	24584 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   21bd0:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   21bd4:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   21bd6:	e7c8      	b.n	21b6a <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   21bd8:	4b13      	ldr	r3, [pc, #76]	; (21c28 <qspi_nor_erase+0x144>)
   21bda:	2201      	movs	r2, #1
   21bdc:	9302      	str	r3, [sp, #8]
   21bde:	2300      	movs	r3, #0
   21be0:	490f      	ldr	r1, [pc, #60]	; (21c20 <qspi_nor_erase+0x13c>)
   21be2:	4618      	mov	r0, r3
   21be4:	e9cd 3300 	strd	r3, r3, [sp]
   21be8:	e9cd 8503 	strd	r8, r5, [sp, #12]
   21bec:	f00d fe00 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   21bf0:	490e      	ldr	r1, [pc, #56]	; (21c2c <qspi_nor_erase+0x148>)
   21bf2:	6930      	ldr	r0, [r6, #16]
   21bf4:	f7ff fd3e 	bl	21674 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   21bf8:	4f0c      	ldr	r7, [pc, #48]	; (21c2c <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   21bfa:	4b0d      	ldr	r3, [pc, #52]	; (21c30 <qspi_nor_erase+0x14c>)
   21bfc:	2201      	movs	r2, #1
   21bfe:	9302      	str	r3, [sp, #8]
   21c00:	2300      	movs	r3, #0
   21c02:	e9cd 8503 	strd	r8, r5, [sp, #12]
   21c06:	4618      	mov	r0, r3
   21c08:	e9cd 3300 	strd	r3, r3, [sp]
   21c0c:	4904      	ldr	r1, [pc, #16]	; (21c20 <qspi_nor_erase+0x13c>)
   21c0e:	f00d fdef 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   21c12:	4638      	mov	r0, r7
   21c14:	f7ff fd14 	bl	21640 <qspi_get_zephyr_ret_code>
   21c18:	4604      	mov	r4, r0
			break;
   21c1a:	e7b0      	b.n	21b7e <qspi_nor_erase+0x9a>
   21c1c:	00038017 	.word	0x00038017
   21c20:	00033118 	.word	0x00033118
   21c24:	0bad0000 	.word	0x0bad0000
   21c28:	00038061 	.word	0x00038061
   21c2c:	0bad0004 	.word	0x0bad0004
   21c30:	0003807f 	.word	0x0003807f

00021c34 <qspi_nor_write>:
{
   21c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21c38:	4605      	mov	r5, r0
   21c3a:	460f      	mov	r7, r1
   21c3c:	461e      	mov	r6, r3
	if (!src) {
   21c3e:	4690      	mov	r8, r2
{
   21c40:	b088      	sub	sp, #32
	if (!src) {
   21c42:	b1ca      	cbz	r2, 21c78 <qspi_nor_write+0x44>
	if ((size == 0)
   21c44:	b1c3      	cbz	r3, 21c78 <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   21c46:	2b04      	cmp	r3, #4
   21c48:	d901      	bls.n	21c4e <qspi_nor_write+0x1a>
   21c4a:	079a      	lsls	r2, r3, #30
   21c4c:	d114      	bne.n	21c78 <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   21c4e:	07bb      	lsls	r3, r7, #30
   21c50:	d112      	bne.n	21c78 <qspi_nor_write+0x44>
	if (addr < 0 ||
   21c52:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   21c54:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   21c56:	db03      	blt.n	21c60 <qspi_nor_write+0x2c>
   21c58:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   21c5a:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   21c5c:	4293      	cmp	r3, r2
   21c5e:	d911      	bls.n	21c84 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   21c60:	4b40      	ldr	r3, [pc, #256]	; (21d64 <qspi_nor_write+0x130>)
   21c62:	2201      	movs	r2, #1
   21c64:	9302      	str	r3, [sp, #8]
   21c66:	2300      	movs	r3, #0
   21c68:	e9cd 7603 	strd	r7, r6, [sp, #12]
   21c6c:	4618      	mov	r0, r3
   21c6e:	e9cd 3300 	strd	r3, r3, [sp]
   21c72:	493d      	ldr	r1, [pc, #244]	; (21d68 <qspi_nor_write+0x134>)
   21c74:	f00d fdbc 	bl	2f7f0 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21c78:	f06f 0415 	mvn.w	r4, #21
}
   21c7c:	4620      	mov	r0, r4
   21c7e:	b008      	add	sp, #32
   21c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   21c84:	4628      	mov	r0, r5
   21c86:	f7ff fd03 	bl	21690 <qspi_device_init>
	if (rc != 0) {
   21c8a:	4604      	mov	r4, r0
   21c8c:	2800      	cmp	r0, #0
   21c8e:	d160      	bne.n	21d52 <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   21c90:	6928      	ldr	r0, [r5, #16]
   21c92:	f00d fdc3 	bl	2f81c <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   21c96:	4621      	mov	r1, r4
   21c98:	4628      	mov	r0, r5
   21c9a:	f00d fdc5 	bl	2f828 <qspi_nor_write_protection_set>
   21c9e:	4604      	mov	r4, r0
	qspi_lock(dev);
   21ca0:	6928      	ldr	r0, [r5, #16]
   21ca2:	f00d fdb4 	bl	2f80e <qspi_lock.isra.0>
	if (!res) {
   21ca6:	2c00      	cmp	r4, #0
   21ca8:	d140      	bne.n	21d2c <qspi_nor_write+0xf8>
		if (size < 4U) {
   21caa:	2e03      	cmp	r6, #3
   21cac:	d81c      	bhi.n	21ce8 <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   21cae:	463a      	mov	r2, r7
   21cb0:	2104      	movs	r1, #4
   21cb2:	a807      	add	r0, sp, #28
   21cb4:	f00e fa37 	bl	30126 <nrfx_qspi_read>
   21cb8:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   21cba:	4601      	mov	r1, r0
   21cbc:	6928      	ldr	r0, [r5, #16]
   21cbe:	f7ff fcd9 	bl	21674 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   21cc2:	4b2a      	ldr	r3, [pc, #168]	; (21d6c <qspi_nor_write+0x138>)
   21cc4:	429c      	cmp	r4, r3
   21cc6:	d131      	bne.n	21d2c <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   21cc8:	4632      	mov	r2, r6
   21cca:	4641      	mov	r1, r8
   21ccc:	a807      	add	r0, sp, #28
   21cce:	f00f fdae 	bl	3182e <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   21cd2:	463a      	mov	r2, r7
   21cd4:	2104      	movs	r1, #4
   21cd6:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   21cd8:	f00e fa22 	bl	30120 <nrfx_qspi_write>
   21cdc:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21cde:	4601      	mov	r1, r0
   21ce0:	6928      	ldr	r0, [r5, #16]
   21ce2:	f7ff fcc7 	bl	21674 <qspi_wait_for_completion.isra.0>
   21ce6:	e021      	b.n	21d2c <qspi_nor_write+0xf8>
   21ce8:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   21cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21cf0:	d033      	beq.n	21d5a <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   21cf2:	f8df a078 	ldr.w	sl, [pc, #120]	; 21d6c <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   21cf6:	2e04      	cmp	r6, #4
   21cf8:	46b1      	mov	r9, r6
   21cfa:	bf28      	it	cs
   21cfc:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   21d00:	4641      	mov	r1, r8
   21d02:	464a      	mov	r2, r9
   21d04:	a807      	add	r0, sp, #28
   21d06:	f00f fd92 	bl	3182e <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   21d0a:	463a      	mov	r2, r7
   21d0c:	2104      	movs	r1, #4
   21d0e:	a807      	add	r0, sp, #28
   21d10:	f00e fa06 	bl	30120 <nrfx_qspi_write>
   21d14:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21d16:	4601      	mov	r1, r0
   21d18:	6928      	ldr	r0, [r5, #16]
   21d1a:	f7ff fcab 	bl	21674 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   21d1e:	4554      	cmp	r4, sl
   21d20:	d104      	bne.n	21d2c <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   21d22:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   21d26:	44c8      	add	r8, r9
				addr += len;
   21d28:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   21d2a:	d1e4      	bne.n	21cf6 <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   21d2c:	6928      	ldr	r0, [r5, #16]
   21d2e:	3018      	adds	r0, #24
   21d30:	f00d fd56 	bl	2f7e0 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   21d34:	2101      	movs	r1, #1
   21d36:	4628      	mov	r0, r5
   21d38:	f00d fd76 	bl	2f828 <qspi_nor_write_protection_set>
   21d3c:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   21d3e:	6928      	ldr	r0, [r5, #16]
   21d40:	f00d fd4e 	bl	2f7e0 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   21d44:	2c00      	cmp	r4, #0
   21d46:	bf14      	ite	ne
   21d48:	4620      	movne	r0, r4
   21d4a:	4630      	moveq	r0, r6
   21d4c:	f7ff fc78 	bl	21640 <qspi_get_zephyr_ret_code>
   21d50:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   21d52:	4628      	mov	r0, r5
   21d54:	f7ff fd10 	bl	21778 <qspi_device_uninit>
	return rc;
   21d58:	e790      	b.n	21c7c <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   21d5a:	463a      	mov	r2, r7
   21d5c:	4631      	mov	r1, r6
   21d5e:	4640      	mov	r0, r8
   21d60:	e7ba      	b.n	21cd8 <qspi_nor_write+0xa4>
   21d62:	bf00      	nop
   21d64:	0003809d 	.word	0x0003809d
   21d68:	00033118 	.word	0x00033118
   21d6c:	0bad0000 	.word	0x0bad0000

00021d70 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   21d70:	4b02      	ldr	r3, [pc, #8]	; (21d7c <flash_nrf_pages_layout+0xc>)
   21d72:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21d74:	2301      	movs	r3, #1
   21d76:	6013      	str	r3, [r2, #0]
}
   21d78:	4770      	bx	lr
   21d7a:	bf00      	nop
   21d7c:	20030c60 	.word	0x20030c60

00021d80 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   21d80:	4800      	ldr	r0, [pc, #0]	; (21d84 <flash_nrf_get_parameters+0x4>)
   21d82:	4770      	bx	lr
   21d84:	000340ec 	.word	0x000340ec

00021d88 <flash_nrf_read>:
{
   21d88:	b570      	push	{r4, r5, r6, lr}
   21d8a:	460c      	mov	r4, r1
   21d8c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   21d8e:	4619      	mov	r1, r3
   21d90:	4620      	mov	r0, r4
{
   21d92:	461d      	mov	r5, r3
   21d94:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   21d96:	f00d fd77 	bl	2f888 <is_regular_addr_valid>
   21d9a:	4603      	mov	r3, r0
   21d9c:	b968      	cbnz	r0, 21dba <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21d9e:	4a0f      	ldr	r2, [pc, #60]	; (21ddc <flash_nrf_read+0x54>)
   21da0:	9000      	str	r0, [sp, #0]
   21da2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21da6:	e9cd 4503 	strd	r4, r5, [sp, #12]
   21daa:	2201      	movs	r2, #1
   21dac:	490c      	ldr	r1, [pc, #48]	; (21de0 <flash_nrf_read+0x58>)
   21dae:	f00d fd7c 	bl	2f8aa <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21db2:	f06f 0015 	mvn.w	r0, #21
}
   21db6:	b006      	add	sp, #24
   21db8:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   21dba:	b165      	cbz	r5, 21dd6 <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   21dbc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   21dc0:	462a      	mov	r2, r5
   21dc2:	4621      	mov	r1, r4
   21dc4:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   21dc6:	da04      	bge.n	21dd2 <flash_nrf_read+0x4a>
}
   21dc8:	b006      	add	sp, #24
   21dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   21dce:	f008 bd85 	b.w	2a8dc <soc_secure_mem_read>
   21dd2:	f00f fd2c 	bl	3182e <memcpy>
		return 0;
   21dd6:	2000      	movs	r0, #0
   21dd8:	e7ed      	b.n	21db6 <flash_nrf_read+0x2e>
   21dda:	bf00      	nop
   21ddc:	000380fd 	.word	0x000380fd
   21de0:	000330a8 	.word	0x000330a8

00021de4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   21de4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21de6:	2201      	movs	r2, #1
   21de8:	4806      	ldr	r0, [pc, #24]	; (21e04 <nrf_flash_init+0x20>)
   21dea:	4611      	mov	r1, r2
   21dec:	f00f f8d0 	bl	30f90 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   21df0:	f00e f990 	bl	30114 <nrfx_nvmc_flash_page_count_get>
   21df4:	4c04      	ldr	r4, [pc, #16]	; (21e08 <nrf_flash_init+0x24>)
   21df6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21df8:	f00e f989 	bl	3010e <nrfx_nvmc_flash_page_size_get>
   21dfc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   21dfe:	2000      	movs	r0, #0
   21e00:	bd10      	pop	{r4, pc}
   21e02:	bf00      	nop
   21e04:	20030c68 	.word	0x20030c68
   21e08:	20030c60 	.word	0x20030c60

00021e0c <flash_nrf_erase>:
{
   21e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e0e:	b087      	sub	sp, #28
   21e10:	460e      	mov	r6, r1
   21e12:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21e14:	f00e f97b 	bl	3010e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   21e18:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21e1a:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   21e1c:	4630      	mov	r0, r6
   21e1e:	f00d fd33 	bl	2f888 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21e22:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   21e24:	4603      	mov	r3, r0
   21e26:	b388      	cbz	r0, 21e8c <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21e28:	fbb6 f3f5 	udiv	r3, r6, r5
   21e2c:	fb05 6313 	mls	r3, r5, r3, r6
   21e30:	b923      	cbnz	r3, 21e3c <flash_nrf_erase+0x30>
   21e32:	fbb4 f3f5 	udiv	r3, r4, r5
   21e36:	fb05 4313 	mls	r3, r5, r3, r4
   21e3a:	b173      	cbz	r3, 21e5a <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   21e3c:	4b18      	ldr	r3, [pc, #96]	; (21ea0 <flash_nrf_erase+0x94>)
   21e3e:	2201      	movs	r2, #1
   21e40:	9302      	str	r3, [sp, #8]
   21e42:	2300      	movs	r3, #0
   21e44:	4618      	mov	r0, r3
   21e46:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21e4a:	e9cd 3300 	strd	r3, r3, [sp]
   21e4e:	4915      	ldr	r1, [pc, #84]	; (21ea4 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21e50:	f00d fd2b 	bl	2f8aa <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   21e54:	f06f 0015 	mvn.w	r0, #21
   21e58:	e002      	b.n	21e60 <flash_nrf_erase+0x54>
		if (!n_pages) {
   21e5a:	42a5      	cmp	r5, r4
   21e5c:	d902      	bls.n	21e64 <flash_nrf_erase+0x58>
			return 0;
   21e5e:	2000      	movs	r0, #0
}
   21e60:	b007      	add	sp, #28
   21e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   21e64:	f04f 32ff 	mov.w	r2, #4294967295
   21e68:	f04f 33ff 	mov.w	r3, #4294967295
   21e6c:	480e      	ldr	r0, [pc, #56]	; (21ea8 <flash_nrf_erase+0x9c>)
   21e6e:	f003 fe5d 	bl	25b2c <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21e72:	f00e f94c 	bl	3010e <nrfx_nvmc_flash_page_size_get>
   21e76:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   21e78:	4638      	mov	r0, r7
   21e7a:	f002 f8bb 	bl	23ff4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   21e7e:	1b64      	subs	r4, r4, r5
   21e80:	442f      	add	r7, r5
   21e82:	d1f9      	bne.n	21e78 <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   21e84:	4808      	ldr	r0, [pc, #32]	; (21ea8 <flash_nrf_erase+0x9c>)
   21e86:	f003 fe2b 	bl	25ae0 <z_impl_k_sem_give>
}
   21e8a:	e7e8      	b.n	21e5e <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21e8c:	4a07      	ldr	r2, [pc, #28]	; (21eac <flash_nrf_erase+0xa0>)
   21e8e:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21e92:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21e96:	4903      	ldr	r1, [pc, #12]	; (21ea4 <flash_nrf_erase+0x98>)
   21e98:	2201      	movs	r2, #1
   21e9a:	9000      	str	r0, [sp, #0]
   21e9c:	e7d8      	b.n	21e50 <flash_nrf_erase+0x44>
   21e9e:	bf00      	nop
   21ea0:	0003811a 	.word	0x0003811a
   21ea4:	000330a8 	.word	0x000330a8
   21ea8:	20030c68 	.word	0x20030c68
   21eac:	000380fd 	.word	0x000380fd

00021eb0 <flash_nrf_write>:
{
   21eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21eb2:	460e      	mov	r6, r1
   21eb4:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   21eb6:	4619      	mov	r1, r3
   21eb8:	4630      	mov	r0, r6
{
   21eba:	461c      	mov	r4, r3
   21ebc:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   21ebe:	f00d fce3 	bl	2f888 <is_regular_addr_valid>
   21ec2:	4603      	mov	r3, r0
   21ec4:	b968      	cbnz	r0, 21ee2 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21ec6:	4a1d      	ldr	r2, [pc, #116]	; (21f3c <flash_nrf_write+0x8c>)
   21ec8:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21ecc:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21ed0:	2201      	movs	r2, #1
   21ed2:	491b      	ldr	r1, [pc, #108]	; (21f40 <flash_nrf_write+0x90>)
   21ed4:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   21ed6:	f00d fce8 	bl	2f8aa <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21eda:	f06f 0015 	mvn.w	r0, #21
}
   21ede:	b007      	add	sp, #28
   21ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   21ee2:	ea46 0504 	orr.w	r5, r6, r4
   21ee6:	f015 0503 	ands.w	r5, r5, #3
   21eea:	d00a      	beq.n	21f02 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   21eec:	4b15      	ldr	r3, [pc, #84]	; (21f44 <flash_nrf_write+0x94>)
   21eee:	2201      	movs	r2, #1
   21ef0:	9302      	str	r3, [sp, #8]
   21ef2:	2300      	movs	r3, #0
   21ef4:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21ef8:	4618      	mov	r0, r3
   21efa:	e9cd 3300 	strd	r3, r3, [sp]
   21efe:	4910      	ldr	r1, [pc, #64]	; (21f40 <flash_nrf_write+0x90>)
   21f00:	e7e9      	b.n	21ed6 <flash_nrf_write+0x26>
	if (!len) {
   21f02:	b1a4      	cbz	r4, 21f2e <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   21f04:	f04f 32ff 	mov.w	r2, #4294967295
   21f08:	f04f 33ff 	mov.w	r3, #4294967295
   21f0c:	480e      	ldr	r0, [pc, #56]	; (21f48 <flash_nrf_write+0x98>)
   21f0e:	f003 fe0d 	bl	25b2c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   21f12:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   21f16:	42a5      	cmp	r5, r4
   21f18:	eb05 0006 	add.w	r0, r5, r6
   21f1c:	d109      	bne.n	21f32 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21f1e:	4a0b      	ldr	r2, [pc, #44]	; (21f4c <flash_nrf_write+0x9c>)
   21f20:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   21f24:	07db      	lsls	r3, r3, #31
   21f26:	d5fb      	bpl.n	21f20 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   21f28:	4807      	ldr	r0, [pc, #28]	; (21f48 <flash_nrf_write+0x98>)
   21f2a:	f003 fdd9 	bl	25ae0 <z_impl_k_sem_give>
	return ret;
   21f2e:	2000      	movs	r0, #0
   21f30:	e7d5      	b.n	21ede <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   21f32:	5979      	ldr	r1, [r7, r5]
   21f34:	f002 f87a 	bl	2402c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   21f38:	3504      	adds	r5, #4
}
   21f3a:	e7ec      	b.n	21f16 <flash_nrf_write+0x66>
   21f3c:	000380fd 	.word	0x000380fd
   21f40:	000330a8 	.word	0x000330a8
   21f44:	00038139 	.word	0x00038139
   21f48:	20030c68 	.word	0x20030c68
   21f4c:	40039000 	.word	0x40039000

00021f50 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   21f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   21f52:	ab0b      	add	r3, sp, #44	; 0x2c
   21f54:	9305      	str	r3, [sp, #20]
   21f56:	9303      	str	r3, [sp, #12]
   21f58:	4b05      	ldr	r3, [pc, #20]	; (21f70 <z_log_msg_runtime_create.constprop.0+0x20>)
   21f5a:	2201      	movs	r2, #1
   21f5c:	9302      	str	r3, [sp, #8]
   21f5e:	2300      	movs	r3, #0
   21f60:	4618      	mov	r0, r3
   21f62:	e9cd 3300 	strd	r3, r3, [sp]
   21f66:	f7ed fadf 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   21f6a:	b007      	add	sp, #28
   21f6c:	f85d fb04 	ldr.w	pc, [sp], #4
   21f70:	00038178 	.word	0x00038178

00021f74 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   21f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21f76:	461d      	mov	r5, r3
	return config->uarte_regs;
   21f78:	6843      	ldr	r3, [r0, #4]
{
   21f7a:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   21f7c:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   21f7e:	f8d3 c000 	ldr.w	ip, [r3]
   21f82:	f04f 0320 	mov.w	r3, #32
   21f86:	f3ef 8711 	mrs	r7, BASEPRI
   21f8a:	f383 8812 	msr	BASEPRI_MAX, r3
   21f8e:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   21f92:	68e3      	ldr	r3, [r4, #12]
   21f94:	68d8      	ldr	r0, [r3, #12]
   21f96:	b138      	cbz	r0, 21fa8 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   21f98:	f387 8811 	msr	BASEPRI, r7
   21f9c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   21fa0:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   21fa4:	b003      	add	sp, #12
   21fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   21fa8:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   21faa:	68e3      	ldr	r3, [r4, #12]
   21fac:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   21fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   21fb2:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   21fb6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   21fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21fbe:	68e3      	ldr	r3, [r4, #12]
   21fc0:	d111      	bne.n	21fe6 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   21fc2:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   21fc4:	68e3      	ldr	r3, [r4, #12]
   21fc6:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   21fc8:	4621      	mov	r1, r4
   21fca:	4630      	mov	r0, r6
   21fcc:	f00d fe28 	bl	2fc20 <start_tx_locked>
   21fd0:	f387 8811 	msr	BASEPRI, r7
   21fd4:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   21fd8:	7ae3      	ldrb	r3, [r4, #11]
   21fda:	2b01      	cmp	r3, #1
   21fdc:	d101      	bne.n	21fe2 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   21fde:	1c6b      	adds	r3, r5, #1
   21fe0:	d106      	bne.n	21ff0 <uarte_nrfx_tx+0x7c>
	return 0;
   21fe2:	2000      	movs	r0, #0
   21fe4:	e7de      	b.n	21fa4 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   21fe6:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   21fe8:	4620      	mov	r0, r4
   21fea:	f00d fd92 	bl	2fb12 <setup_tx_cache>
   21fee:	e7eb      	b.n	21fc8 <uarte_nrfx_tx+0x54>
   21ff0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   21ff4:	2100      	movs	r1, #0
   21ff6:	480a      	ldr	r0, [pc, #40]	; (22020 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   21ff8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   21ffc:	2300      	movs	r3, #0
   21ffe:	fbc5 0106 	smlal	r0, r1, r5, r6
   22002:	4a08      	ldr	r2, [pc, #32]	; (22024 <uarte_nrfx_tx+0xb0>)
   22004:	f7e6 ff9c 	bl	8f40 <__aeabi_uldivmod>
   22008:	68e4      	ldr	r4, [r4, #12]
   2200a:	4602      	mov	r2, r0
   2200c:	460b      	mov	r3, r1
   2200e:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   22010:	2000      	movs	r0, #0
   22012:	2100      	movs	r1, #0
   22014:	e9cd 0100 	strd	r0, r1, [sp]
   22018:	4620      	mov	r0, r4
   2201a:	f004 fcdd 	bl	269d8 <z_impl_k_timer_start>
   2201e:	e7e0      	b.n	21fe2 <uarte_nrfx_tx+0x6e>
   22020:	000f423f 	.word	0x000f423f
   22024:	000f4240 	.word	0x000f4240

00022028 <uarte_nrfx_configure>:
{
   22028:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   2202a:	794b      	ldrb	r3, [r1, #5]
   2202c:	2b01      	cmp	r3, #1
   2202e:	d029      	beq.n	22084 <uarte_nrfx_configure+0x5c>
   22030:	2b03      	cmp	r3, #3
   22032:	d124      	bne.n	2207e <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   22034:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   22036:	798b      	ldrb	r3, [r1, #6]
   22038:	2b03      	cmp	r3, #3
   2203a:	d120      	bne.n	2207e <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   2203c:	79ce      	ldrb	r6, [r1, #7]
   2203e:	b10e      	cbz	r6, 22044 <uarte_nrfx_configure+0x1c>
   22040:	2e01      	cmp	r6, #1
   22042:	d11c      	bne.n	2207e <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   22044:	790a      	ldrb	r2, [r1, #4]
   22046:	2a01      	cmp	r2, #1
   22048:	d01e      	beq.n	22088 <uarte_nrfx_configure+0x60>
   2204a:	2a02      	cmp	r2, #2
   2204c:	d020      	beq.n	22090 <uarte_nrfx_configure+0x68>
   2204e:	b9b2      	cbnz	r2, 2207e <uarte_nrfx_configure+0x56>
   22050:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   22052:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   22054:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   22056:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2205a:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   2205e:	d06e      	beq.n	2213e <uarte_nrfx_configure+0x116>
   22060:	d833      	bhi.n	220ca <uarte_nrfx_configure+0xa2>
   22062:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   22066:	d06d      	beq.n	22144 <uarte_nrfx_configure+0x11c>
   22068:	d81c      	bhi.n	220a4 <uarte_nrfx_configure+0x7c>
   2206a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2206e:	d06b      	beq.n	22148 <uarte_nrfx_configure+0x120>
   22070:	d810      	bhi.n	22094 <uarte_nrfx_configure+0x6c>
   22072:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   22076:	d06a      	beq.n	2214e <uarte_nrfx_configure+0x126>
   22078:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2207c:	d06a      	beq.n	22154 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   2207e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22082:	e05b      	b.n	2213c <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   22084:	2700      	movs	r7, #0
   22086:	e7d6      	b.n	22036 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   22088:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2208c:	220e      	movs	r2, #14
   2208e:	e7e0      	b.n	22052 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   22090:	2400      	movs	r4, #0
   22092:	e7fb      	b.n	2208c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   22094:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   22098:	d05f      	beq.n	2215a <uarte_nrfx_configure+0x132>
   2209a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2209e:	d1ee      	bne.n	2207e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   220a0:	4b38      	ldr	r3, [pc, #224]	; (22184 <uarte_nrfx_configure+0x15c>)
   220a2:	e03c      	b.n	2211e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   220a4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   220a8:	d05a      	beq.n	22160 <uarte_nrfx_configure+0x138>
   220aa:	d807      	bhi.n	220bc <uarte_nrfx_configure+0x94>
   220ac:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   220b0:	d058      	beq.n	22164 <uarte_nrfx_configure+0x13c>
   220b2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   220b6:	d1e2      	bne.n	2207e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   220b8:	4b33      	ldr	r3, [pc, #204]	; (22188 <uarte_nrfx_configure+0x160>)
   220ba:	e030      	b.n	2211e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   220bc:	f647 2512 	movw	r5, #31250	; 0x7a12
   220c0:	42ab      	cmp	r3, r5
   220c2:	d1dc      	bne.n	2207e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   220c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   220c8:	e029      	b.n	2211e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   220ca:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   220ce:	d04b      	beq.n	22168 <uarte_nrfx_configure+0x140>
   220d0:	d813      	bhi.n	220fa <uarte_nrfx_configure+0xd2>
   220d2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   220d6:	d04a      	beq.n	2216e <uarte_nrfx_configure+0x146>
   220d8:	d809      	bhi.n	220ee <uarte_nrfx_configure+0xc6>
   220da:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   220de:	42ab      	cmp	r3, r5
   220e0:	d047      	beq.n	22172 <uarte_nrfx_configure+0x14a>
   220e2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   220e6:	d1ca      	bne.n	2207e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   220e8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   220ec:	e017      	b.n	2211e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   220ee:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   220f2:	d1c4      	bne.n	2207e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   220f4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   220f8:	e011      	b.n	2211e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   220fa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   220fe:	d03b      	beq.n	22178 <uarte_nrfx_configure+0x150>
   22100:	d808      	bhi.n	22114 <uarte_nrfx_configure+0xec>
   22102:	4d22      	ldr	r5, [pc, #136]	; (2218c <uarte_nrfx_configure+0x164>)
   22104:	42ab      	cmp	r3, r5
   22106:	d03a      	beq.n	2217e <uarte_nrfx_configure+0x156>
   22108:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2210c:	d1b7      	bne.n	2207e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2210e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22112:	e004      	b.n	2211e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   22114:	4d1e      	ldr	r5, [pc, #120]	; (22190 <uarte_nrfx_configure+0x168>)
   22116:	42ab      	cmp	r3, r5
   22118:	d1b1      	bne.n	2207e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2211a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   2211e:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22120:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   22124:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   22126:	433a      	orrs	r2, r7
   22128:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   2212a:	4334      	orrs	r4, r6
   2212c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2212e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   22132:	1d2b      	adds	r3, r5, #4
   22134:	c903      	ldmia	r1, {r0, r1}
   22136:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   2213a:	2000      	movs	r0, #0
}
   2213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2213e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   22142:	e7ec      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   22144:	4b13      	ldr	r3, [pc, #76]	; (22194 <uarte_nrfx_configure+0x16c>)
   22146:	e7ea      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   22148:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2214c:	e7e7      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   2214e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22152:	e7e4      	b.n	2211e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   22154:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   22158:	e7e1      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2215a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2215e:	e7de      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   22160:	4b0d      	ldr	r3, [pc, #52]	; (22198 <uarte_nrfx_configure+0x170>)
   22162:	e7dc      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22164:	4b0d      	ldr	r3, [pc, #52]	; (2219c <uarte_nrfx_configure+0x174>)
   22166:	e7da      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   22168:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2216c:	e7d7      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2216e:	4b0c      	ldr	r3, [pc, #48]	; (221a0 <uarte_nrfx_configure+0x178>)
   22170:	e7d5      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   22172:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   22176:	e7d2      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   22178:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2217c:	e7cf      	b.n	2211e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2217e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22182:	e7cc      	b.n	2211e <uarte_nrfx_configure+0xf6>
   22184:	0013b000 	.word	0x0013b000
   22188:	004ea000 	.word	0x004ea000
   2218c:	0003d090 	.word	0x0003d090
   22190:	000f4240 	.word	0x000f4240
   22194:	00275000 	.word	0x00275000
   22198:	0075c000 	.word	0x0075c000
   2219c:	003af000 	.word	0x003af000
   221a0:	013a9000 	.word	0x013a9000

000221a4 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   221a4:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   221a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   221aa:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   221ae:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   221b0:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   221b4:	b087      	sub	sp, #28
   221b6:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   221ba:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   221bc:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   221c0:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   221c2:	aa05      	add	r2, sp, #20
   221c4:	4640      	mov	r0, r8
   221c6:	f00d fea8 	bl	2ff1a <pinctrl_lookup_state>
	if (ret < 0) {
   221ca:	1e04      	subs	r4, r0, #0
   221cc:	db25      	blt.n	2221a <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   221ce:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   221d0:	f8d8 2000 	ldr.w	r2, [r8]
   221d4:	7919      	ldrb	r1, [r3, #4]
   221d6:	6818      	ldr	r0, [r3, #0]
   221d8:	f000 fed0 	bl	22f7c <pinctrl_configure_pins>
	if (err < 0) {
   221dc:	1e04      	subs	r4, r0, #0
   221de:	db1c      	blt.n	2221a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   221e0:	4638      	mov	r0, r7
   221e2:	1d31      	adds	r1, r6, #4
   221e4:	f7ff ff20 	bl	22028 <uarte_nrfx_configure>
	if (err) {
   221e8:	4604      	mov	r4, r0
   221ea:	b9b0      	cbnz	r0, 2221a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   221ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   221f0:	0799      	lsls	r1, r3, #30
   221f2:	d523      	bpl.n	2223c <uarte_instance_init.constprop.0+0x98>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   221f4:	f106 001c 	add.w	r0, r6, #28
   221f8:	f001 fb0a 	bl	23810 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   221fc:	4b47      	ldr	r3, [pc, #284]	; (2231c <uarte_instance_init.constprop.0+0x178>)
   221fe:	4298      	cmp	r0, r3
   22200:	d00f      	beq.n	22222 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   22202:	4b47      	ldr	r3, [pc, #284]	; (22320 <uarte_instance_init.constprop.0+0x17c>)
   22204:	4620      	mov	r0, r4
   22206:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2220a:	9400      	str	r4, [sp, #0]
   2220c:	4623      	mov	r3, r4
   2220e:	2201      	movs	r2, #1
   22210:	4944      	ldr	r1, [pc, #272]	; (22324 <uarte_instance_init.constprop.0+0x180>)
   22212:	f7ff fe9d 	bl	21f50 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   22216:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2221a:	4620      	mov	r0, r4
   2221c:	b007      	add	sp, #28
   2221e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22222:	7f33      	ldrb	r3, [r6, #28]
   22224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   22228:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   2222c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   22230:	2301      	movs	r3, #1
   22232:	7f32      	ldrb	r2, [r6, #28]
   22234:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   22236:	4a3c      	ldr	r2, [pc, #240]	; (22328 <uarte_instance_init.constprop.0+0x184>)
   22238:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   2223c:	68f3      	ldr	r3, [r6, #12]
   2223e:	2b00      	cmp	r3, #0
   22240:	d059      	beq.n	222f6 <uarte_instance_init.constprop.0+0x152>
    p_reg->INTENSET = mask;
   22242:	2204      	movs	r2, #4
	return config->uarte_regs;
   22244:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   22246:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   2224a:	681b      	ldr	r3, [r3, #0]
   2224c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   22250:	2201      	movs	r2, #1
   22252:	f8d8 100c 	ldr.w	r1, [r8, #12]
   22256:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   2225a:	4934      	ldr	r1, [pc, #208]	; (2232c <uarte_instance_init.constprop.0+0x188>)
   2225c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22260:	2108      	movs	r1, #8
   22262:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22266:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2226a:	b1a1      	cbz	r1, 22296 <uarte_instance_init.constprop.0+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2226c:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2226e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   22272:	b91a      	cbnz	r2, 2227c <uarte_instance_init.constprop.0+0xd8>
   22274:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   22278:	2a00      	cmp	r2, #0
   2227a:	d0f8      	beq.n	2226e <uarte_instance_init.constprop.0+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2227c:	2200      	movs	r2, #0
   2227e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   22282:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   22286:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2228a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   2228e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   22292:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   22296:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2229a:	2200      	movs	r2, #0
   2229c:	4924      	ldr	r1, [pc, #144]	; (22330 <uarte_instance_init.constprop.0+0x18c>)
   2229e:	3080      	adds	r0, #128	; 0x80
   222a0:	f00f f913 	bl	314ca <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   222a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   222a8:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   222ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
   222b0:	2200      	movs	r2, #0
   222b2:	4920      	ldr	r1, [pc, #128]	; (22334 <uarte_instance_init.constprop.0+0x190>)
   222b4:	3020      	adds	r0, #32
   222b6:	f00f f908 	bl	314ca <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   222ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   222be:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   222c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   222c6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   222c8:	bf5c      	itt	pl
   222ca:	f44f 7380 	movpl.w	r3, #256	; 0x100
   222ce:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   222d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   222d6:	06db      	lsls	r3, r3, #27
   222d8:	bf44      	itt	mi
   222da:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   222de:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   222e2:	6973      	ldr	r3, [r6, #20]
   222e4:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   222e8:	2300      	movs	r3, #0
   222ea:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   222ee:	2301      	movs	r3, #1
   222f0:	60ab      	str	r3, [r5, #8]
   222f2:	60eb      	str	r3, [r5, #12]
	return 0;
   222f4:	e791      	b.n	2221a <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   222f6:	2308      	movs	r3, #8
   222f8:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   222fc:	f899 3008 	ldrb.w	r3, [r9, #8]
   22300:	2b00      	cmp	r3, #0
   22302:	d1de      	bne.n	222c2 <uarte_instance_init.constprop.0+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22304:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   22308:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2230c:	69b3      	ldr	r3, [r6, #24]
   2230e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22312:	2301      	movs	r3, #1
   22314:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22318:	602b      	str	r3, [r5, #0]
}
   2231a:	e7d2      	b.n	222c2 <uarte_instance_init.constprop.0+0x11e>
   2231c:	0bad0000 	.word	0x0bad0000
   22320:	00038178 	.word	0x00038178
   22324:	00033148 	.word	0x00033148
   22328:	40017000 	.word	0x40017000
   2232c:	000a0210 	.word	0x000a0210
   22330:	0002fda7 	.word	0x0002fda7
   22334:	0002fe77 	.word	0x0002fe77

00022338 <uarte_nrfx_poll_out>:
{
   22338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2233c:	4604      	mov	r4, r0
   2233e:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   22340:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22342:	f00e fd71 	bl	30e28 <k_is_in_isr>
   22346:	b9b0      	cbnz	r0, 22376 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   22348:	4b2a      	ldr	r3, [pc, #168]	; (223f4 <uarte_nrfx_poll_out+0xbc>)
   2234a:	781b      	ldrb	r3, [r3, #0]
   2234c:	b19b      	cbz	r3, 22376 <uarte_nrfx_poll_out+0x3e>
{
   2234e:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22350:	6860      	ldr	r0, [r4, #4]
   22352:	f00d fc55 	bl	2fc00 <is_tx_ready.isra.0>
   22356:	2800      	cmp	r0, #0
   22358:	d138      	bne.n	223cc <uarte_nrfx_poll_out+0x94>
   2235a:	2001      	movs	r0, #1
   2235c:	f00d fe78 	bl	30050 <nrfx_busy_wait>
   22360:	3f01      	subs	r7, #1
   22362:	d1f5      	bne.n	22350 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   22364:	2100      	movs	r1, #0
   22366:	2021      	movs	r0, #33	; 0x21
   22368:	f004 f8de 	bl	26528 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2236c:	e7ef      	b.n	2234e <uarte_nrfx_poll_out+0x16>
   2236e:	f381 8811 	msr	BASEPRI, r1
   22372:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22376:	f04f 0320 	mov.w	r3, #32
   2237a:	f3ef 8111 	mrs	r1, BASEPRI
   2237e:	f383 8812 	msr	BASEPRI_MAX, r3
   22382:	f3bf 8f6f 	isb	sy
   22386:	f8d4 8004 	ldr.w	r8, [r4, #4]
   2238a:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   2238c:	4640      	mov	r0, r8
   2238e:	f00d fc37 	bl	2fc00 <is_tx_ready.isra.0>
   22392:	2800      	cmp	r0, #0
   22394:	d0eb      	beq.n	2236e <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   22396:	68eb      	ldr	r3, [r5, #12]
   22398:	b15b      	cbz	r3, 223b2 <uarte_nrfx_poll_out+0x7a>
   2239a:	68da      	ldr	r2, [r3, #12]
   2239c:	b14a      	cbz	r2, 223b2 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   2239e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   223a2:	2a00      	cmp	r2, #0
   223a4:	da05      	bge.n	223b2 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   223a6:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   223aa:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   223ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   223b2:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   223b4:	2201      	movs	r2, #1
	*data->char_out = c;
   223b6:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   223b8:	4620      	mov	r0, r4
   223ba:	6969      	ldr	r1, [r5, #20]
   223bc:	f00d fac9 	bl	2f952 <tx_start>
	__asm__ volatile(
   223c0:	f387 8811 	msr	BASEPRI, r7
   223c4:	f3bf 8f6f 	isb	sy
}
   223c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   223cc:	f04f 0320 	mov.w	r3, #32
   223d0:	f3ef 8111 	mrs	r1, BASEPRI
   223d4:	f383 8812 	msr	BASEPRI_MAX, r3
   223d8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   223dc:	6860      	ldr	r0, [r4, #4]
   223de:	460f      	mov	r7, r1
   223e0:	f00d fc0e 	bl	2fc00 <is_tx_ready.isra.0>
   223e4:	2800      	cmp	r0, #0
   223e6:	d1e4      	bne.n	223b2 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   223e8:	f381 8811 	msr	BASEPRI, r1
   223ec:	f3bf 8f6f 	isb	sy
}
   223f0:	e7b8      	b.n	22364 <uarte_nrfx_poll_out+0x2c>
   223f2:	bf00      	nop
   223f4:	20031eff 	.word	0x20031eff

000223f8 <uarte_nrfx_isr_async>:
{
   223f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   223fc:	6843      	ldr	r3, [r0, #4]
{
   223fe:	4604      	mov	r4, r0
	return config->uarte_regs;
   22400:	681d      	ldr	r5, [r3, #0]
{
   22402:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22404:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   22408:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   2240a:	b169      	cbz	r1, 22428 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2240c:	2200      	movs	r2, #0
   2240e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   22412:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   22416:	68da      	ldr	r2, [r3, #12]
   22418:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   2241c:	3301      	adds	r3, #1
   2241e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   22422:	b008      	add	sp, #32
   22424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22428:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2242c:	b323      	cbz	r3, 22478 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2242e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   22432:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   22436:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   22438:	2214      	movs	r2, #20
	return config->uarte_regs;
   2243a:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   2243c:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2243e:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22442:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   22446:	f00f fa2c 	bl	318a2 <memset>
   2244a:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2244c:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   2244e:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   22452:	f100 8103 	bmi.w	2265c <uarte_nrfx_isr_async+0x264>
   22456:	07b3      	lsls	r3, r6, #30
   22458:	f100 8102 	bmi.w	22660 <uarte_nrfx_isr_async+0x268>
   2245c:	0777      	lsls	r7, r6, #29
   2245e:	f100 8101 	bmi.w	22664 <uarte_nrfx_isr_async+0x26c>
   22462:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   22466:	4620      	mov	r0, r4
   22468:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2246a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   2246e:	f00d fa98 	bl	2f9a2 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   22472:	4620      	mov	r0, r4
   22474:	f00d fb2b 	bl	2face <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22478:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   2247c:	b38b      	cbz	r3, 224e2 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   2247e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   22482:	06d8      	lsls	r0, r3, #27
   22484:	d52d      	bpl.n	224e2 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22486:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   2248a:	2201      	movs	r2, #1
   2248c:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   22490:	6926      	ldr	r6, [r4, #16]
   22492:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   22496:	6863      	ldr	r3, [r4, #4]
   22498:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   2249a:	68f3      	ldr	r3, [r6, #12]
   2249c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   224a0:	68f0      	ldr	r0, [r6, #12]
   224a2:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   224a4:	f00f f81d 	bl	314e2 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   224a8:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   224aa:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   224ae:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   224b2:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   224b6:	68f2      	ldr	r2, [r6, #12]
   224b8:	6e10      	ldr	r0, [r2, #96]	; 0x60
   224ba:	1a1b      	subs	r3, r3, r0
   224bc:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   224be:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   224c0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   224c4:	4408      	add	r0, r1
	if (rx_len > 0) {
   224c6:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   224c8:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   224ca:	dd02      	ble.n	224d2 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   224cc:	4620      	mov	r0, r4
   224ce:	f00d fa6f 	bl	2f9b0 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   224d2:	68f1      	ldr	r1, [r6, #12]
   224d4:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   224d8:	2b00      	cmp	r3, #0
   224da:	f040 80c5 	bne.w	22668 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   224de:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224e2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   224e6:	b383      	cbz	r3, 2254a <uarte_nrfx_isr_async+0x152>
   224e8:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   224ec:	bb6e      	cbnz	r6, 2254a <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   224ee:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224f0:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   224f4:	4631      	mov	r1, r6
   224f6:	a803      	add	r0, sp, #12
   224f8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   224fc:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   224fe:	f00f f9d0 	bl	318a2 <memset>
   22502:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   22504:	a903      	add	r1, sp, #12
   22506:	4620      	mov	r0, r4
	struct uart_event evt = {
   22508:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   2250c:	f00d fa49 	bl	2f9a2 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   22510:	68fb      	ldr	r3, [r7, #12]
   22512:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   22514:	1c51      	adds	r1, r2, #1
   22516:	d018      	beq.n	2254a <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   22518:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   2251a:	68ff      	ldr	r7, [r7, #12]
   2251c:	498e      	ldr	r1, [pc, #568]	; (22758 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   2251e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   22520:	468e      	mov	lr, r1
   22522:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   22526:	4631      	mov	r1, r6
   22528:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2252c:	fbcc e100 	smlal	lr, r1, ip, r0
   22530:	2300      	movs	r3, #0
   22532:	4670      	mov	r0, lr
   22534:	4a89      	ldr	r2, [pc, #548]	; (2275c <uarte_nrfx_isr_async+0x364>)
   22536:	f7e6 fd03 	bl	8f40 <__aeabi_uldivmod>
   2253a:	4602      	mov	r2, r0
   2253c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2253e:	e9cd 0100 	strd	r0, r1, [sp]
   22542:	f107 0080 	add.w	r0, r7, #128	; 0x80
   22546:	f004 fa47 	bl	269d8 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2254a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2254e:	b333      	cbz	r3, 2259e <uarte_nrfx_isr_async+0x1a6>
   22550:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   22554:	bb1e      	cbnz	r6, 2259e <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22556:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   2255a:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   2255c:	4620      	mov	r0, r4
   2255e:	68f9      	ldr	r1, [r7, #12]
   22560:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   22564:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   22566:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   2256a:	f00d fa3a 	bl	2f9e2 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   2256e:	68f9      	ldr	r1, [r7, #12]
   22570:	4620      	mov	r0, r4
   22572:	3164      	adds	r1, #100	; 0x64
   22574:	f00d fa35 	bl	2f9e2 <rx_buf_release>
	if (data->async->rx_enabled) {
   22578:	68fb      	ldr	r3, [r7, #12]
   2257a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   2257e:	2a00      	cmp	r2, #0
   22580:	f000 80a3 	beq.w	226ca <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   22584:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22588:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2258c:	06d8      	lsls	r0, r3, #27
   2258e:	d503      	bpl.n	22598 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   22590:	2102      	movs	r1, #2
   22592:	4620      	mov	r0, r4
   22594:	f00d fb0a 	bl	2fbac <async_uart_release>
	notify_rx_disable(dev);
   22598:	4620      	mov	r0, r4
   2259a:	f00d fa3a 	bl	2fa12 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2259e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   225a2:	b1db      	cbz	r3, 225dc <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   225a4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   225a8:	05d9      	lsls	r1, r3, #23
   225aa:	d517      	bpl.n	225dc <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   225ac:	6863      	ldr	r3, [r4, #4]
   225ae:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   225b0:	f04f 0120 	mov.w	r1, #32
   225b4:	f3ef 8211 	mrs	r2, BASEPRI
   225b8:	f381 8812 	msr	BASEPRI_MAX, r1
   225bc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225c0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   225c4:	b131      	cbz	r1, 225d4 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   225c6:	2100      	movs	r1, #0
   225c8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   225cc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   225d0:	2101      	movs	r1, #1
   225d2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   225d4:	f382 8811 	msr	BASEPRI, r2
   225d8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225dc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   225e0:	2b00      	cmp	r3, #0
   225e2:	f43f af1e 	beq.w	22422 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   225e6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   225ea:	025a      	lsls	r2, r3, #9
   225ec:	f57f af19 	bpl.w	22422 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   225f0:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   225f2:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   225f4:	e9d3 7300 	ldrd	r7, r3, [r3]
   225f8:	06db      	lsls	r3, r3, #27
   225fa:	d46b      	bmi.n	226d4 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   225fc:	68eb      	ldr	r3, [r5, #12]
   225fe:	689b      	ldr	r3, [r3, #8]
   22600:	2b00      	cmp	r3, #0
   22602:	f43f af0e 	beq.w	22422 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   22606:	f04f 0320 	mov.w	r3, #32
   2260a:	f3ef 8211 	mrs	r2, BASEPRI
   2260e:	f383 8812 	msr	BASEPRI_MAX, r3
   22612:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   22616:	68eb      	ldr	r3, [r5, #12]
   22618:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2261c:	2900      	cmp	r1, #0
   2261e:	bfac      	ite	ge
   22620:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   22624:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   22628:	f382 8811 	msr	BASEPRI, r2
   2262c:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   22630:	68eb      	ldr	r3, [r5, #12]
   22632:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   22636:	2a00      	cmp	r2, #0
   22638:	d059      	beq.n	226ee <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   2263a:	f04f 0320 	mov.w	r3, #32
   2263e:	f3ef 8611 	mrs	r6, BASEPRI
   22642:	f383 8812 	msr	BASEPRI_MAX, r3
   22646:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   2264a:	4629      	mov	r1, r5
   2264c:	4620      	mov	r0, r4
   2264e:	f00d fae7 	bl	2fc20 <start_tx_locked>
	__asm__ volatile(
   22652:	f386 8811 	msr	BASEPRI, r6
   22656:	f3bf 8f6f 	isb	sy
				return;
   2265a:	e6e2      	b.n	22422 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2265c:	2601      	movs	r6, #1
   2265e:	e702      	b.n	22466 <uarte_nrfx_isr_async+0x6e>
   22660:	2602      	movs	r6, #2
   22662:	e700      	b.n	22466 <uarte_nrfx_isr_async+0x6e>
   22664:	2604      	movs	r6, #4
   22666:	e6fe      	b.n	22466 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   22668:	4620      	mov	r0, r4
   2266a:	3158      	adds	r1, #88	; 0x58
   2266c:	f00d f9b9 	bl	2f9e2 <rx_buf_release>
	__asm__ volatile(
   22670:	f04f 0320 	mov.w	r3, #32
   22674:	f3ef 8111 	mrs	r1, BASEPRI
   22678:	f383 8812 	msr	BASEPRI_MAX, r3
   2267c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   22680:	68f3      	ldr	r3, [r6, #12]
   22682:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   22684:	b1f2      	cbz	r2, 226c4 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   22686:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   22688:	68f3      	ldr	r3, [r6, #12]
   2268a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2268c:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   2268e:	2300      	movs	r3, #0
   22690:	68f2      	ldr	r2, [r6, #12]
   22692:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   22694:	68f2      	ldr	r2, [r6, #12]
   22696:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   22698:	68f2      	ldr	r2, [r6, #12]
   2269a:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2269c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   226a0:	b90b      	cbnz	r3, 226a6 <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   226a2:	2301      	movs	r3, #1
   226a4:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   226a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   226aa:	f023 0320 	bic.w	r3, r3, #32
   226ae:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   226b2:	f381 8811 	msr	BASEPRI, r1
   226b6:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   226ba:	2200      	movs	r2, #0
   226bc:	68f3      	ldr	r3, [r6, #12]
   226be:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   226c2:	e70e      	b.n	224e2 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   226c4:	2301      	movs	r3, #1
   226c6:	607b      	str	r3, [r7, #4]
}
   226c8:	e7f3      	b.n	226b2 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   226ca:	4611      	mov	r1, r2
   226cc:	6860      	ldr	r0, [r4, #4]
   226ce:	f00d fa38 	bl	2fb42 <rx_flush.isra.0>
   226d2:	e759      	b.n	22588 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   226d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   226d8:	2101      	movs	r1, #1
   226da:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   226de:	4620      	mov	r0, r4
   226e0:	f00d fa64 	bl	2fbac <async_uart_release>
		if (!data->async->tx_size) {
   226e4:	68eb      	ldr	r3, [r5, #12]
   226e6:	68db      	ldr	r3, [r3, #12]
   226e8:	2b00      	cmp	r3, #0
   226ea:	d187      	bne.n	225fc <uarte_nrfx_isr_async+0x204>
   226ec:	e699      	b.n	22422 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   226ee:	6899      	ldr	r1, [r3, #8]
   226f0:	691a      	ldr	r2, [r3, #16]
   226f2:	4291      	cmp	r1, r2
   226f4:	d00c      	beq.n	22710 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   226f6:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   226f8:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   226fa:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   226fc:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   226fe:	d128      	bne.n	22752 <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   22700:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   22702:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   22704:	f00d fa05 	bl	2fb12 <setup_tx_cache>
   22708:	2800      	cmp	r0, #0
   2270a:	d196      	bne.n	2263a <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   2270c:	68eb      	ldr	r3, [r5, #12]
   2270e:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   22710:	68e8      	ldr	r0, [r5, #12]
   22712:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   22714:	f00e fee5 	bl	314e2 <z_impl_k_timer_stop>
	struct uart_event evt = {
   22718:	2214      	movs	r2, #20
   2271a:	2100      	movs	r1, #0
   2271c:	a803      	add	r0, sp, #12
   2271e:	f00f f8c0 	bl	318a2 <memset>
		.data.tx.buf = data->async->tx_buf,
   22722:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   22724:	4620      	mov	r0, r4
	struct uart_event evt = {
   22726:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   22728:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2272a:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   2272e:	68db      	ldr	r3, [r3, #12]
   22730:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   22732:	bf1c      	itt	ne
   22734:	2301      	movne	r3, #1
   22736:	f88d 300c 	strbne.w	r3, [sp, #12]
   2273a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2273e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   22742:	2300      	movs	r3, #0
   22744:	68ea      	ldr	r2, [r5, #12]
   22746:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   22748:	68ea      	ldr	r2, [r5, #12]
   2274a:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   2274c:	f00d f929 	bl	2f9a2 <user_callback>
   22750:	e667      	b.n	22422 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   22752:	4616      	mov	r6, r2
   22754:	e7dc      	b.n	22710 <uarte_nrfx_isr_async+0x318>
   22756:	bf00      	nop
   22758:	000f423f 	.word	0x000f423f
   2275c:	000f4240 	.word	0x000f4240

00022760 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   22760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   22762:	7e01      	ldrb	r1, [r0, #24]
   22764:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   22766:	2902      	cmp	r1, #2
   22768:	d014      	beq.n	22794 <bt_rpmsg_send+0x34>
   2276a:	2904      	cmp	r1, #4
   2276c:	d011      	beq.n	22792 <bt_rpmsg_send+0x32>
   2276e:	b1f9      	cbz	r1, 227b0 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   22770:	4b10      	ldr	r3, [pc, #64]	; (227b4 <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   22772:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   22774:	9302      	str	r3, [sp, #8]
   22776:	2300      	movs	r3, #0
   22778:	2201      	movs	r2, #1
   2277a:	4618      	mov	r0, r3
   2277c:	e9cd 3300 	strd	r3, r3, [sp]
   22780:	490d      	ldr	r1, [pc, #52]	; (227b8 <bt_rpmsg_send+0x58>)
   22782:	f00d fb7c 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   22786:	4620      	mov	r0, r4
   22788:	f7fd ff08 	bl	2059c <net_buf_unref>
	return 0;
}
   2278c:	2000      	movs	r0, #0
   2278e:	b004      	add	sp, #16
   22790:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   22792:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   22794:	f104 000c 	add.w	r0, r4, #12
   22798:	f00c fe6a 	bl	2f470 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   2279c:	8a22      	ldrh	r2, [r4, #16]
   2279e:	68e1      	ldr	r1, [r4, #12]
   227a0:	4806      	ldr	r0, [pc, #24]	; (227bc <bt_rpmsg_send+0x5c>)
   227a2:	f7ed fe33 	bl	1040c <ipc_service_send>
	if (err < 0) {
   227a6:	2800      	cmp	r0, #0
   227a8:	daed      	bge.n	22786 <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   227aa:	4b05      	ldr	r3, [pc, #20]	; (227c0 <bt_rpmsg_send+0x60>)
   227ac:	9003      	str	r0, [sp, #12]
   227ae:	e7e1      	b.n	22774 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   227b0:	2101      	movs	r1, #1
   227b2:	e7ef      	b.n	22794 <bt_rpmsg_send+0x34>
   227b4:	000381ba 	.word	0x000381ba
   227b8:	00033048 	.word	0x00033048
   227bc:	20030c80 	.word	0x20030c80
   227c0:	000381ca 	.word	0x000381ca

000227c4 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   227c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   227c6:	4809      	ldr	r0, [pc, #36]	; (227ec <bt_rpmsg_init+0x28>)
   227c8:	f7f8 f898 	bl	1a8fc <bt_hci_driver_register>
	if (err < 0) {
   227cc:	1e04      	subs	r4, r0, #0
   227ce:	da0a      	bge.n	227e6 <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   227d0:	4b07      	ldr	r3, [pc, #28]	; (227f0 <bt_rpmsg_init+0x2c>)
   227d2:	2201      	movs	r2, #1
   227d4:	9302      	str	r3, [sp, #8]
   227d6:	2300      	movs	r3, #0
   227d8:	4906      	ldr	r1, [pc, #24]	; (227f4 <bt_rpmsg_init+0x30>)
   227da:	4618      	mov	r0, r3
   227dc:	e9cd 3300 	strd	r3, r3, [sp]
   227e0:	9403      	str	r4, [sp, #12]
   227e2:	f00d fb4c 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   227e6:	4620      	mov	r0, r4
   227e8:	b004      	add	sp, #16
   227ea:	bd10      	pop	{r4, pc}
   227ec:	00034190 	.word	0x00034190
   227f0:	000381e2 	.word	0x000381e2
   227f4:	00033048 	.word	0x00033048

000227f8 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   227f8:	4801      	ldr	r0, [pc, #4]	; (22800 <hci_ept_bound+0x8>)
   227fa:	f003 b971 	b.w	25ae0 <z_impl_k_sem_give>
   227fe:	bf00      	nop
   22800:	20008d30 	.word	0x20008d30

00022804 <bt_rpmsg_open>:
{
   22804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   22806:	4816      	ldr	r0, [pc, #88]	; (22860 <bt_rpmsg_open+0x5c>)
   22808:	f7ed fda2 	bl	10350 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   2280c:	4604      	mov	r4, r0
   2280e:	b180      	cbz	r0, 22832 <bt_rpmsg_open+0x2e>
   22810:	f110 0f78 	cmn.w	r0, #120	; 0x78
   22814:	d00d      	beq.n	22832 <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   22816:	4b13      	ldr	r3, [pc, #76]	; (22864 <bt_rpmsg_open+0x60>)
   22818:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   2281a:	9302      	str	r3, [sp, #8]
   2281c:	2300      	movs	r3, #0
   2281e:	2201      	movs	r2, #1
   22820:	4618      	mov	r0, r3
   22822:	e9cd 3300 	strd	r3, r3, [sp]
   22826:	4910      	ldr	r1, [pc, #64]	; (22868 <bt_rpmsg_open+0x64>)
   22828:	f00d fb29 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
}
   2282c:	4620      	mov	r0, r4
   2282e:	b004      	add	sp, #16
   22830:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   22832:	4a0e      	ldr	r2, [pc, #56]	; (2286c <bt_rpmsg_open+0x68>)
   22834:	490e      	ldr	r1, [pc, #56]	; (22870 <bt_rpmsg_open+0x6c>)
   22836:	480a      	ldr	r0, [pc, #40]	; (22860 <bt_rpmsg_open+0x5c>)
   22838:	f7ed fdb6 	bl	103a8 <ipc_service_register_endpoint>
	if (err) {
   2283c:	4604      	mov	r4, r0
   2283e:	b110      	cbz	r0, 22846 <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   22840:	4b0c      	ldr	r3, [pc, #48]	; (22874 <bt_rpmsg_open+0x70>)
   22842:	9003      	str	r0, [sp, #12]
   22844:	e7e9      	b.n	2281a <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   22846:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2284a:	2300      	movs	r3, #0
   2284c:	480a      	ldr	r0, [pc, #40]	; (22878 <bt_rpmsg_open+0x74>)
   2284e:	f003 f96d 	bl	25b2c <z_impl_k_sem_take>
	if (err) {
   22852:	4604      	mov	r4, r0
   22854:	2800      	cmp	r0, #0
   22856:	d0e9      	beq.n	2282c <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   22858:	4b08      	ldr	r3, [pc, #32]	; (2287c <bt_rpmsg_open+0x78>)
   2285a:	9003      	str	r0, [sp, #12]
   2285c:	e7dd      	b.n	2281a <bt_rpmsg_open+0x16>
   2285e:	bf00      	nop
   22860:	000329b0 	.word	0x000329b0
   22864:	0003820c 	.word	0x0003820c
   22868:	00033048 	.word	0x00033048
   2286c:	20008718 	.word	0x20008718
   22870:	20030c80 	.word	0x20030c80
   22874:	0003823c 	.word	0x0003823c
   22878:	20008d30 	.word	0x20008d30
   2287c:	00038260 	.word	0x00038260

00022880 <hci_ept_recv>:
{
   22880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22884:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   22886:	7800      	ldrb	r0, [r0, #0]
{
   22888:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   2288a:	2804      	cmp	r0, #4
{
   2288c:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   2288e:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   22892:	d009      	beq.n	228a8 <hci_ept_recv+0x28>
   22894:	2805      	cmp	r0, #5
   22896:	f000 8099 	beq.w	229cc <hci_ept_recv+0x14c>
   2289a:	2802      	cmp	r0, #2
   2289c:	f040 80bd 	bne.w	22a1a <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   228a0:	2b03      	cmp	r3, #3
   228a2:	d867      	bhi.n	22974 <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   228a4:	4b63      	ldr	r3, [pc, #396]	; (22a34 <hci_ept_recv+0x1b4>)
   228a6:	e002      	b.n	228ae <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   228a8:	2b01      	cmp	r3, #1
   228aa:	d80c      	bhi.n	228c6 <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   228ac:	4b62      	ldr	r3, [pc, #392]	; (22a38 <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   228ae:	9302      	str	r3, [sp, #8]
   228b0:	2300      	movs	r3, #0
   228b2:	2201      	movs	r2, #1
   228b4:	4618      	mov	r0, r3
   228b6:	e9cd 3300 	strd	r3, r3, [sp]
   228ba:	4960      	ldr	r1, [pc, #384]	; (22a3c <hci_ept_recv+0x1bc>)
   228bc:	f00d fadf 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
}
   228c0:	b009      	add	sp, #36	; 0x24
   228c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   228c6:	7873      	ldrb	r3, [r6, #1]
   228c8:	2b3e      	cmp	r3, #62	; 0x3e
   228ca:	d136      	bne.n	2293a <hci_ept_recv+0xba>
		switch (subevt_type) {
   228cc:	78f7      	ldrb	r7, [r6, #3]
   228ce:	1ebb      	subs	r3, r7, #2
   228d0:	425f      	negs	r7, r3
   228d2:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   228d4:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   228d8:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   228da:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   228de:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   228e2:	d12f      	bne.n	22944 <hci_ept_recv+0xc4>
   228e4:	b35f      	cbz	r7, 2293e <hci_ept_recv+0xbe>
   228e6:	f04f 0800 	mov.w	r8, #0
   228ea:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   228ee:	f8df b150 	ldr.w	fp, [pc, #336]	; 22a40 <hci_ept_recv+0x1c0>
   228f2:	f8df a148 	ldr.w	sl, [pc, #328]	; 22a3c <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   228f6:	4642      	mov	r2, r8
   228f8:	464b      	mov	r3, r9
   228fa:	4639      	mov	r1, r7
   228fc:	f89d 001c 	ldrb.w	r0, [sp, #28]
   22900:	f7f6 fdd6 	bl	194b0 <bt_buf_get_evt>
		if (!buf) {
   22904:	4604      	mov	r4, r0
   22906:	b1f8      	cbz	r0, 22948 <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22908:	f100 070c 	add.w	r7, r0, #12
   2290c:	2202      	movs	r2, #2
   2290e:	a907      	add	r1, sp, #28
   22910:	4638      	mov	r0, r7
   22912:	f00c fd94 	bl	2f43e <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   22916:	4638      	mov	r0, r7
   22918:	f00c fdcf 	bl	2f4ba <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   2291c:	4285      	cmp	r5, r0
   2291e:	d91e      	bls.n	2295e <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   22920:	4b48      	ldr	r3, [pc, #288]	; (22a44 <hci_ept_recv+0x1c4>)
   22922:	e9cd 5003 	strd	r5, r0, [sp, #12]
   22926:	9302      	str	r3, [sp, #8]
   22928:	2300      	movs	r3, #0
   2292a:	2201      	movs	r2, #1
   2292c:	4618      	mov	r0, r3
   2292e:	e9cd 3300 	strd	r3, r3, [sp]
   22932:	4942      	ldr	r1, [pc, #264]	; (22a3c <hci_ept_recv+0x1bc>)
   22934:	f00d faa3 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
   22938:	e03c      	b.n	229b4 <hci_ept_recv+0x134>
			return false;
   2293a:	2700      	movs	r7, #0
   2293c:	e7ca      	b.n	228d4 <hci_ept_recv+0x54>
   2293e:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   22942:	e7d2      	b.n	228ea <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   22944:	4b40      	ldr	r3, [pc, #256]	; (22a48 <hci_ept_recv+0x1c8>)
   22946:	e7b2      	b.n	228ae <hci_ept_recv+0x2e>
			if (discardable) {
   22948:	2f00      	cmp	r7, #0
   2294a:	d1b9      	bne.n	228c0 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   2294c:	463b      	mov	r3, r7
   2294e:	2202      	movs	r2, #2
   22950:	4651      	mov	r1, sl
   22952:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   22956:	9700      	str	r7, [sp, #0]
   22958:	f00d fa91 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   2295c:	e7cb      	b.n	228f6 <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2295e:	462a      	mov	r2, r5
   22960:	1cf1      	adds	r1, r6, #3
   22962:	4638      	mov	r0, r7
   22964:	f00c fd6b 	bl	2f43e <net_buf_simple_add_mem>
		bt_recv(buf);
   22968:	4620      	mov	r0, r4
}
   2296a:	b009      	add	sp, #36	; 0x24
   2296c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   22970:	f7f7 bf94 	b.w	1a89c <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   22974:	2200      	movs	r2, #0
   22976:	2300      	movs	r3, #0
   22978:	2003      	movs	r0, #3
   2297a:	f7f6 fd69 	bl	19450 <bt_buf_get_rx>
	if (buf) {
   2297e:	4604      	mov	r4, r0
   22980:	b1e0      	cbz	r0, 229bc <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   22982:	f8d6 3001 	ldr.w	r3, [r6, #1]
   22986:	f100 070c 	add.w	r7, r0, #12
   2298a:	2204      	movs	r2, #4
   2298c:	4638      	mov	r0, r7
   2298e:	a907      	add	r1, sp, #28
   22990:	9307      	str	r3, [sp, #28]
   22992:	f00c fd54 	bl	2f43e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   22996:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   2299a:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   2299c:	429d      	cmp	r5, r3
   2299e:	d034      	beq.n	22a0a <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   229a0:	4b2a      	ldr	r3, [pc, #168]	; (22a4c <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   229a2:	9302      	str	r3, [sp, #8]
   229a4:	2300      	movs	r3, #0
   229a6:	2201      	movs	r2, #1
   229a8:	4618      	mov	r0, r3
   229aa:	e9cd 3300 	strd	r3, r3, [sp]
   229ae:	4923      	ldr	r1, [pc, #140]	; (22a3c <hci_ept_recv+0x1bc>)
   229b0:	f00d fa65 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   229b4:	4620      	mov	r0, r4
   229b6:	f7fd fdf1 	bl	2059c <net_buf_unref>
	if (buf) {
   229ba:	e781      	b.n	228c0 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   229bc:	4b24      	ldr	r3, [pc, #144]	; (22a50 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   229be:	e9cd 4301 	strd	r4, r3, [sp, #4]
   229c2:	2201      	movs	r2, #1
   229c4:	4623      	mov	r3, r4
   229c6:	491d      	ldr	r1, [pc, #116]	; (22a3c <hci_ept_recv+0x1bc>)
   229c8:	9400      	str	r4, [sp, #0]
   229ca:	e777      	b.n	228bc <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   229cc:	2b03      	cmp	r3, #3
   229ce:	d801      	bhi.n	229d4 <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   229d0:	4b20      	ldr	r3, [pc, #128]	; (22a54 <hci_ept_recv+0x1d4>)
   229d2:	e76c      	b.n	228ae <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   229d4:	2200      	movs	r2, #0
   229d6:	2300      	movs	r3, #0
   229d8:	f7f6 fd3a 	bl	19450 <bt_buf_get_rx>
	if (buf) {
   229dc:	4604      	mov	r4, r0
   229de:	b190      	cbz	r0, 22a06 <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   229e0:	f8d6 3001 	ldr.w	r3, [r6, #1]
   229e4:	f100 070c 	add.w	r7, r0, #12
   229e8:	2204      	movs	r2, #4
   229ea:	4638      	mov	r0, r7
   229ec:	a907      	add	r1, sp, #28
   229ee:	9307      	str	r3, [sp, #28]
   229f0:	f00c fd25 	bl	2f43e <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   229f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   229f8:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   229fa:	f3c3 030d 	ubfx	r3, r3, #0, #14
   229fe:	429d      	cmp	r5, r3
   22a00:	d003      	beq.n	22a0a <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   22a02:	4b15      	ldr	r3, [pc, #84]	; (22a58 <hci_ept_recv+0x1d8>)
   22a04:	e7cd      	b.n	229a2 <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   22a06:	4b15      	ldr	r3, [pc, #84]	; (22a5c <hci_ept_recv+0x1dc>)
   22a08:	e7d9      	b.n	229be <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   22a0a:	4638      	mov	r0, r7
   22a0c:	f00c fd55 	bl	2f4ba <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   22a10:	4285      	cmp	r5, r0
   22a12:	d885      	bhi.n	22920 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22a14:	462a      	mov	r2, r5
   22a16:	1d71      	adds	r1, r6, #5
   22a18:	e7a3      	b.n	22962 <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   22a1a:	4b11      	ldr	r3, [pc, #68]	; (22a60 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   22a1c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   22a1e:	9302      	str	r3, [sp, #8]
   22a20:	2300      	movs	r3, #0
   22a22:	2201      	movs	r2, #1
   22a24:	4618      	mov	r0, r3
   22a26:	e9cd 3300 	strd	r3, r3, [sp]
   22a2a:	4904      	ldr	r1, [pc, #16]	; (22a3c <hci_ept_recv+0x1bc>)
   22a2c:	f00d fa27 	bl	2fe7e <z_log_msg_runtime_create.constprop.0>
   22a30:	e746      	b.n	228c0 <hci_ept_recv+0x40>
   22a32:	bf00      	nop
   22a34:	0003831d 	.word	0x0003831d
   22a38:	00038280 	.word	0x00038280
   22a3c:	00033048 	.word	0x00033048
   22a40:	000382c5 	.word	0x000382c5
   22a44:	000382fa 	.word	0x000382fa
   22a48:	000382a1 	.word	0x000382a1
   22a4c:	00038356 	.word	0x00038356
   22a50:	0003833c 	.word	0x0003833c
   22a54:	00038378 	.word	0x00038378
   22a58:	000383b1 	.word	0x000383b1
   22a5c:	00038397 	.word	0x00038397
   22a60:	000383d3 	.word	0x000383d3

00022a64 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22a64:	2301      	movs	r3, #1
   22a66:	4083      	lsls	r3, r0
{
   22a68:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22a6a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22a6c:	4a0b      	ldr	r2, [pc, #44]	; (22a9c <compare_int_lock+0x38>)
   22a6e:	e8d2 1fef 	ldaex	r1, [r2]
   22a72:	ea01 0504 	and.w	r5, r1, r4
   22a76:	e8c2 5fe6 	stlex	r6, r5, [r2]
   22a7a:	2e00      	cmp	r6, #0
   22a7c:	d1f7      	bne.n	22a6e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22a7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22a82:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   22a84:	4806      	ldr	r0, [pc, #24]	; (22aa0 <compare_int_lock+0x3c>)
   22a86:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   22a8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22a8e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   22a92:	420b      	tst	r3, r1
}
   22a94:	bf14      	ite	ne
   22a96:	2001      	movne	r0, #1
   22a98:	2000      	moveq	r0, #0
   22a9a:	bd70      	pop	{r4, r5, r6, pc}
   22a9c:	20030c90 	.word	0x20030c90
   22aa0:	40015000 	.word	0x40015000

00022aa4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   22aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22aa6:	491b      	ldr	r1, [pc, #108]	; (22b14 <sys_clock_timeout_handler+0x70>)
{
   22aa8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   22aaa:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22aae:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   22ab0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22ab4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22ab8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   22aba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22abe:	d30f      	bcc.n	22ae0 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   22ac0:	f003 feaa 	bl	26818 <sys_clock_announce>
    return p_reg->CC[ch];
   22ac4:	00a3      	lsls	r3, r4, #2
   22ac6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22aca:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   22ace:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   22ad2:	4295      	cmp	r5, r2
   22ad4:	d11d      	bne.n	22b12 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   22ad6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22ada:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   22ade:	e012      	b.n	22b06 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22ae0:	4b0d      	ldr	r3, [pc, #52]	; (22b18 <sys_clock_timeout_handler+0x74>)
   22ae2:	681b      	ldr	r3, [r3, #0]
   22ae4:	0a1a      	lsrs	r2, r3, #8
   22ae6:	061b      	lsls	r3, r3, #24
   22ae8:	195e      	adds	r6, r3, r5
   22aea:	4b0c      	ldr	r3, [pc, #48]	; (22b1c <sys_clock_timeout_handler+0x78>)
   22aec:	f142 0700 	adc.w	r7, r2, #0
   22af0:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   22af4:	f003 fe90 	bl	26818 <sys_clock_announce>
    return p_reg->CC[ch];
   22af8:	4a09      	ldr	r2, [pc, #36]	; (22b20 <sys_clock_timeout_handler+0x7c>)
   22afa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   22afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   22b02:	429d      	cmp	r5, r3
   22b04:	d105      	bne.n	22b12 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   22b0a:	4a05      	ldr	r2, [pc, #20]	; (22b20 <sys_clock_timeout_handler+0x7c>)
   22b0c:	40a3      	lsls	r3, r4
   22b0e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   22b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b14:	2000a3d0 	.word	0x2000a3d0
   22b18:	20030c94 	.word	0x20030c94
   22b1c:	2000a3d8 	.word	0x2000a3d8
   22b20:	40015000 	.word	0x40015000

00022b24 <compare_int_unlock>:
	if (key) {
   22b24:	b1d9      	cbz	r1, 22b5e <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   22b26:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22b28:	4a0d      	ldr	r2, [pc, #52]	; (22b60 <compare_int_unlock+0x3c>)
   22b2a:	4083      	lsls	r3, r0
   22b2c:	e8d2 cfef 	ldaex	ip, [r2]
   22b30:	ea4c 0c03 	orr.w	ip, ip, r3
   22b34:	e8c2 cfe1 	stlex	r1, ip, [r2]
   22b38:	2900      	cmp	r1, #0
   22b3a:	d1f7      	bne.n	22b2c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   22b40:	4a08      	ldr	r2, [pc, #32]	; (22b64 <compare_int_unlock+0x40>)
   22b42:	4083      	lsls	r3, r0
   22b44:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22b48:	4b07      	ldr	r3, [pc, #28]	; (22b68 <compare_int_unlock+0x44>)
   22b4a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22b4e:	40c3      	lsrs	r3, r0
   22b50:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b52:	bf42      	ittt	mi
   22b54:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   22b58:	4b04      	ldrmi	r3, [pc, #16]	; (22b6c <compare_int_unlock+0x48>)
   22b5a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   22b5e:	4770      	bx	lr
   22b60:	20030c90 	.word	0x20030c90
   22b64:	40015000 	.word	0x40015000
   22b68:	20030c88 	.word	0x20030c88
   22b6c:	e000e100 	.word	0xe000e100

00022b70 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   22b70:	b2c3      	uxtb	r3, r0
}
   22b72:	4802      	ldr	r0, [pc, #8]	; (22b7c <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   22b74:	009b      	lsls	r3, r3, #2
   22b76:	4418      	add	r0, r3
   22b78:	4770      	bx	lr
   22b7a:	bf00      	nop
   22b7c:	40015140 	.word	0x40015140

00022b80 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   22b80:	4b02      	ldr	r3, [pc, #8]	; (22b8c <z_nrf_rtc_timer_compare_read+0xc>)
   22b82:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   22b86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   22b8a:	4770      	bx	lr
   22b8c:	40015000 	.word	0x40015000

00022b90 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22b90:	4b0d      	ldr	r3, [pc, #52]	; (22bc8 <z_nrf_rtc_timer_read+0x38>)
   22b92:	6818      	ldr	r0, [r3, #0]
   22b94:	0a01      	lsrs	r1, r0, #8
   22b96:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22b98:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   22b9c:	4b0b      	ldr	r3, [pc, #44]	; (22bcc <z_nrf_rtc_timer_read+0x3c>)
   22b9e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22ba2:	1818      	adds	r0, r3, r0
   22ba4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22bac:	d20a      	bcs.n	22bc4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22bae:	4b08      	ldr	r3, [pc, #32]	; (22bd0 <z_nrf_rtc_timer_read+0x40>)
   22bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   22bb4:	4290      	cmp	r0, r2
   22bb6:	eb71 0303 	sbcs.w	r3, r1, r3
   22bba:	d203      	bcs.n	22bc4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22bbc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22bc0:	f141 0100 	adc.w	r1, r1, #0
}
   22bc4:	4770      	bx	lr
   22bc6:	bf00      	nop
   22bc8:	20030c94 	.word	0x20030c94
   22bcc:	40015000 	.word	0x40015000
   22bd0:	2000a3d8 	.word	0x2000a3d8

00022bd4 <compare_set>:
{
   22bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22bd8:	b085      	sub	sp, #20
   22bda:	4614      	mov	r4, r2
   22bdc:	461d      	mov	r5, r3
   22bde:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   22be0:	f7ff ff40 	bl	22a64 <compare_int_lock>
   22be4:	9002      	str	r0, [sp, #8]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22be6:	f7ff ffd3 	bl	22b90 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22bea:	42a0      	cmp	r0, r4
   22bec:	eb71 0305 	sbcs.w	r3, r1, r5
   22bf0:	d278      	bcs.n	22ce4 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   22bf2:	4b43      	ldr	r3, [pc, #268]	; (22d00 <compare_set+0x12c>)
   22bf4:	1a20      	subs	r0, r4, r0
   22bf6:	eb65 0101 	sbc.w	r1, r5, r1
   22bfa:	4298      	cmp	r0, r3
   22bfc:	f171 0100 	sbcs.w	r1, r1, #0
   22c00:	d27b      	bcs.n	22cfa <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
   22c02:	4b40      	ldr	r3, [pc, #256]	; (22d04 <compare_set+0x130>)
   22c04:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   22c08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   22c0c:	429d      	cmp	r5, r3
   22c0e:	bf08      	it	eq
   22c10:	4294      	cmpeq	r4, r2
   22c12:	d052      	beq.n	22cba <compare_set+0xe6>
	return absolute_time & COUNTER_MAX;
   22c14:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
   22c18:	9301      	str	r3, [sp, #4]
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	uint32_t tick_inc = 2;
   22c1e:	f04f 0902 	mov.w	r9, #2
   22c22:	ea4f 0887 	mov.w	r8, r7, lsl #2
   22c26:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   22c2a:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c2e:	40bb      	lsls	r3, r7
    return p_reg->CC[ch];
   22c30:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22c34:	9e01      	ldr	r6, [sp, #4]
     return p_reg->COUNTER;
   22c36:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 22d08 <compare_set+0x134>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c3a:	9303      	str	r3, [sp, #12]
   22c3c:	f8da b504 	ldr.w	fp, [sl, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22c40:	eba0 000b 	sub.w	r0, r0, fp
   22c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22c48:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   22c4c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   22c4e:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
   22c52:	d102      	bne.n	22c5a <compare_set+0x86>
	z_impl_k_busy_wait(usec_to_wait);
   22c54:	2013      	movs	r0, #19
   22c56:	f00e fc12 	bl	3147e <z_impl_k_busy_wait>
	return (a - b) & COUNTER_MAX;
   22c5a:	f06f 0001 	mvn.w	r0, #1
   22c5e:	eba0 000b 	sub.w	r0, r0, fp
   22c62:	4430      	add	r0, r6
   22c64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   22c68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
		event_clear(chan);
   22c6c:	4638      	mov	r0, r7
			cc_val = now + tick_inc;
   22c6e:	bf84      	itt	hi
   22c70:	eb0b 0609 	addhi.w	r6, fp, r9
			tick_inc++;
   22c74:	f109 0901 	addhi.w	r9, r9, #1
		event_clear(chan);
   22c78:	f00d f934 	bl	2fee4 <event_clear>
    p_reg->EVTENSET = mask;
   22c7c:	9b03      	ldr	r3, [sp, #12]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22c7e:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   22c82:	f8ca 3344 	str.w	r3, [sl, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   22c86:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
   22c8a:	f8da 0504 	ldr.w	r0, [sl, #1284]	; 0x504
	} while ((now2 != now) &&
   22c8e:	4583      	cmp	fp, r0
   22c90:	d00a      	beq.n	22ca8 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
   22c92:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   22c96:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   22c9a:	30fe      	adds	r0, #254	; 0xfe
   22c9c:	4430      	add	r0, r6
   22c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   22ca2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22ca6:	d81b      	bhi.n	22ce0 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   22ca8:	9b01      	ldr	r3, [sp, #4]
   22caa:	1af6      	subs	r6, r6, r3
   22cac:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   22cb0:	1936      	adds	r6, r6, r4
   22cb2:	f145 0300 	adc.w	r3, r5, #0
   22cb6:	4634      	mov	r4, r6
   22cb8:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   22cba:	4912      	ldr	r1, [pc, #72]	; (22d04 <compare_set+0x130>)
	cc_data[chan].callback = handler;
   22cbc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   22cbe:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   22cc2:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   22cc6:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   22cc8:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   22cca:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   22ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22cce:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   22cd0:	4638      	mov	r0, r7
   22cd2:	9902      	ldr	r1, [sp, #8]
   22cd4:	f7ff ff26 	bl	22b24 <compare_int_unlock>
}
   22cd8:	4620      	mov	r0, r4
   22cda:	b005      	add	sp, #20
   22cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ce0:	4630      	mov	r0, r6
   22ce2:	e7ab      	b.n	22c3c <compare_set+0x68>
		atomic_or(&force_isr_mask, BIT(chan));
   22ce4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ce6:	4a09      	ldr	r2, [pc, #36]	; (22d0c <compare_set+0x138>)
   22ce8:	40bb      	lsls	r3, r7
   22cea:	e8d2 0fef 	ldaex	r0, [r2]
   22cee:	4318      	orrs	r0, r3
   22cf0:	e8c2 0fe1 	stlex	r1, r0, [r2]
   22cf4:	2900      	cmp	r1, #0
   22cf6:	d0e0      	beq.n	22cba <compare_set+0xe6>
   22cf8:	e7f7      	b.n	22cea <compare_set+0x116>
			return -EINVAL;
   22cfa:	f06f 0415 	mvn.w	r4, #21
   22cfe:	e7e7      	b.n	22cd0 <compare_set+0xfc>
   22d00:	01000001 	.word	0x01000001
   22d04:	2000a3b0 	.word	0x2000a3b0
   22d08:	40015000 	.word	0x40015000
   22d0c:	20030c88 	.word	0x20030c88

00022d10 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   22d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   22d16:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22d18:	f04f 30ff 	mov.w	r0, #4294967295
   22d1c:	f04f 31ff 	mov.w	r1, #4294967295
   22d20:	4c19      	ldr	r4, [pc, #100]	; (22d88 <sys_clock_driver_init+0x78>)
   22d22:	4b1a      	ldr	r3, [pc, #104]	; (22d8c <sys_clock_driver_init+0x7c>)
   22d24:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   22d28:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22d2c:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   22d30:	e9c3 0106 	strd	r0, r1, [r3, #24]
   22d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   22d38:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22d3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22d3e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   22d42:	4b13      	ldr	r3, [pc, #76]	; (22d90 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22d44:	2101      	movs	r1, #1
   22d46:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   22d4a:	2015      	movs	r0, #21
   22d4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22d50:	462a      	mov	r2, r5
   22d52:	f7ee fa63 	bl	1121c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22d56:	2015      	movs	r0, #21
   22d58:	f7ee fa30 	bl	111bc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22d5c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22d5e:	2203      	movs	r2, #3
   22d60:	60a3      	str	r3, [r4, #8]
   22d62:	6023      	str	r3, [r4, #0]
   22d64:	4b0b      	ldr	r3, [pc, #44]	; (22d94 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22d66:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   22d68:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   22d6a:	4b0b      	ldr	r3, [pc, #44]	; (22d98 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22d6c:	4a0b      	ldr	r2, [pc, #44]	; (22d9c <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   22d6e:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22d70:	4b0b      	ldr	r3, [pc, #44]	; (22da0 <sys_clock_driver_init+0x90>)
   22d72:	9501      	str	r5, [sp, #4]
   22d74:	9300      	str	r3, [sp, #0]
   22d76:	2300      	movs	r3, #0
   22d78:	f7ff ff2c 	bl	22bd4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22d7c:	4630      	mov	r0, r6
   22d7e:	f7fd ffd3 	bl	20d28 <z_nrf_clock_control_lf_on>

	return 0;
}
   22d82:	4628      	mov	r0, r5
   22d84:	b002      	add	sp, #8
   22d86:	bd70      	pop	{r4, r5, r6, pc}
   22d88:	40015000 	.word	0x40015000
   22d8c:	2000a3b0 	.word	0x2000a3b0
   22d90:	e000e100 	.word	0xe000e100
   22d94:	20030c90 	.word	0x20030c90
   22d98:	20030c8c 	.word	0x20030c8c
   22d9c:	007fffff 	.word	0x007fffff
   22da0:	00022aa5 	.word	0x00022aa5

00022da4 <rtc_nrf_isr>:
{
   22da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   22da8:	4b3c      	ldr	r3, [pc, #240]	; (22e9c <rtc_nrf_isr+0xf8>)
   22daa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22dae:	0792      	lsls	r2, r2, #30
   22db0:	d50b      	bpl.n	22dca <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22db2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   22db6:	b142      	cbz	r2, 22dca <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22db8:	2200      	movs	r2, #0
   22dba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   22dbe:	4a38      	ldr	r2, [pc, #224]	; (22ea0 <rtc_nrf_isr+0xfc>)
   22dc0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   22dc4:	6813      	ldr	r3, [r2, #0]
   22dc6:	3301      	adds	r3, #1
   22dc8:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22dca:	4d36      	ldr	r5, [pc, #216]	; (22ea4 <rtc_nrf_isr+0x100>)
   22dcc:	2400      	movs	r4, #0
   22dce:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22dd0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   22dd4:	4e31      	ldr	r6, [pc, #196]	; (22e9c <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
   22dd6:	f04f 0320 	mov.w	r3, #32
   22dda:	f3ef 8111 	mrs	r1, BASEPRI
   22dde:	f383 8812 	msr	BASEPRI_MAX, r3
   22de2:	f3bf 8f6f 	isb	sy
   22de6:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   22dea:	fa0a f904 	lsl.w	r9, sl, r4
   22dee:	ea19 0f03 	tst.w	r9, r3
   22df2:	d10a      	bne.n	22e0a <rtc_nrf_isr+0x66>
	__asm__ volatile(
   22df4:	f381 8811 	msr	BASEPRI, r1
   22df8:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22dfc:	3510      	adds	r5, #16
   22dfe:	b114      	cbz	r4, 22e06 <rtc_nrf_isr+0x62>
}
   22e00:	b003      	add	sp, #12
   22e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22e06:	2401      	movs	r4, #1
   22e08:	e7e5      	b.n	22dd6 <rtc_nrf_isr+0x32>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22e0a:	2301      	movs	r3, #1
   22e0c:	40a3      	lsls	r3, r4
   22e0e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22e10:	4a25      	ldr	r2, [pc, #148]	; (22ea8 <rtc_nrf_isr+0x104>)
   22e12:	e8d2 0fef 	ldaex	r0, [r2]
   22e16:	ea00 0c03 	and.w	ip, r0, r3
   22e1a:	e8c2 cfee 	stlex	lr, ip, [r2]
   22e1e:	f1be 0f00 	cmp.w	lr, #0
   22e22:	d1f6      	bne.n	22e12 <rtc_nrf_isr+0x6e>
   22e24:	b920      	cbnz	r0, 22e30 <rtc_nrf_isr+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22e26:	4b21      	ldr	r3, [pc, #132]	; (22eac <rtc_nrf_isr+0x108>)
   22e28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   22e2c:	2b00      	cmp	r3, #0
   22e2e:	d0e1      	beq.n	22df4 <rtc_nrf_isr+0x50>
			event_clear(chan);
   22e30:	4620      	mov	r0, r4
   22e32:	f00d f857 	bl	2fee4 <event_clear>
   22e36:	f381 8811 	msr	BASEPRI, r1
   22e3a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   22e3e:	f7ff fea7 	bl	22b90 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   22e42:	f04f 0320 	mov.w	r3, #32
   22e46:	f3ef 8c11 	mrs	ip, BASEPRI
   22e4a:	f383 8812 	msr	BASEPRI_MAX, r3
   22e4e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   22e52:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   22e56:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   22e5a:	4290      	cmp	r0, r2
   22e5c:	4199      	sbcs	r1, r3
   22e5e:	d204      	bcs.n	22e6a <rtc_nrf_isr+0xc6>
	__asm__ volatile(
   22e60:	f38c 8811 	msr	BASEPRI, ip
   22e64:	f3bf 8f6f 	isb	sy
		if (handler) {
   22e68:	e7c8      	b.n	22dfc <rtc_nrf_isr+0x58>
			cc_data[chan].callback = NULL;
   22e6a:	2100      	movs	r1, #0
			user_context = cc_data[chan].user_context;
   22e6c:	e9d5 8b00 	ldrd	r8, fp, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22e70:	f04f 30ff 	mov.w	r0, #4294967295
			cc_data[chan].callback = NULL;
   22e74:	6029      	str	r1, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22e76:	f04f 31ff 	mov.w	r1, #4294967295
   22e7a:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   22e7e:	4907      	ldr	r1, [pc, #28]	; (22e9c <rtc_nrf_isr+0xf8>)
   22e80:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   22e84:	f38c 8811 	msr	BASEPRI, ip
   22e88:	f3bf 8f6f 	isb	sy
		if (handler) {
   22e8c:	f1b8 0f00 	cmp.w	r8, #0
   22e90:	d0b4      	beq.n	22dfc <rtc_nrf_isr+0x58>
			handler(chan, expire_time, user_context);
   22e92:	4620      	mov	r0, r4
   22e94:	f8cd b000 	str.w	fp, [sp]
   22e98:	47c0      	blx	r8
   22e9a:	e7af      	b.n	22dfc <rtc_nrf_isr+0x58>
   22e9c:	40015000 	.word	0x40015000
   22ea0:	20030c94 	.word	0x20030c94
   22ea4:	2000a3b0 	.word	0x2000a3b0
   22ea8:	20030c88 	.word	0x20030c88
   22eac:	40015140 	.word	0x40015140

00022eb0 <z_nrf_rtc_timer_chan_alloc>:
{
   22eb0:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   22eb2:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   22eb4:	4b0c      	ldr	r3, [pc, #48]	; (22ee8 <z_nrf_rtc_timer_chan_alloc+0x38>)
   22eb6:	6818      	ldr	r0, [r3, #0]
   22eb8:	b190      	cbz	r0, 22ee0 <z_nrf_rtc_timer_chan_alloc+0x30>
   22eba:	fab0 f080 	clz	r0, r0
   22ebe:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   22ec2:	fa04 f100 	lsl.w	r1, r4, r0
   22ec6:	43c9      	mvns	r1, r1
   22ec8:	e8d3 2fef 	ldaex	r2, [r3]
   22ecc:	ea02 0501 	and.w	r5, r2, r1
   22ed0:	e8c3 5fe6 	stlex	r6, r5, [r3]
   22ed4:	2e00      	cmp	r6, #0
   22ed6:	d1f7      	bne.n	22ec8 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   22ed8:	40c2      	lsrs	r2, r0
   22eda:	07d2      	lsls	r2, r2, #31
   22edc:	d5eb      	bpl.n	22eb6 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   22ede:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   22ee0:	f06f 000b 	mvn.w	r0, #11
   22ee4:	e7fb      	b.n	22ede <z_nrf_rtc_timer_chan_alloc+0x2e>
   22ee6:	bf00      	nop
   22ee8:	20030c8c 	.word	0x20030c8c

00022eec <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   22eec:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22eee:	4a05      	ldr	r2, [pc, #20]	; (22f04 <z_nrf_rtc_timer_chan_free+0x18>)
   22ef0:	4083      	lsls	r3, r0
   22ef2:	e8d2 0fef 	ldaex	r0, [r2]
   22ef6:	4318      	orrs	r0, r3
   22ef8:	e8c2 0fe1 	stlex	r1, r0, [r2]
   22efc:	2900      	cmp	r1, #0
   22efe:	d1f8      	bne.n	22ef2 <z_nrf_rtc_timer_chan_free+0x6>
}
   22f00:	4770      	bx	lr
   22f02:	bf00      	nop
   22f04:	20030c8c 	.word	0x20030c8c

00022f08 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22f08:	1c43      	adds	r3, r0, #1
{
   22f0a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22f0c:	d020      	beq.n	22f50 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22f0e:	2801      	cmp	r0, #1
   22f10:	dd20      	ble.n	22f54 <sys_clock_set_timeout+0x4c>
   22f12:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22f16:	da1f      	bge.n	22f58 <sys_clock_set_timeout+0x50>
   22f18:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22f1a:	f7ff fe39 	bl	22b90 <z_nrf_rtc_timer_read>
   22f1e:	4b0f      	ldr	r3, [pc, #60]	; (22f5c <sys_clock_set_timeout+0x54>)
   22f20:	e9d3 1300 	ldrd	r1, r3, [r3]
   22f24:	1a42      	subs	r2, r0, r1
		ticks = 0;
   22f26:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   22f2a:	bf28      	it	cs
   22f2c:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   22f2e:	480c      	ldr	r0, [pc, #48]	; (22f60 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   22f30:	3201      	adds	r2, #1
   22f32:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   22f34:	4282      	cmp	r2, r0
   22f36:	bf28      	it	cs
   22f38:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   22f3a:	2000      	movs	r0, #0
   22f3c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22f3e:	4909      	ldr	r1, [pc, #36]	; (22f64 <sys_clock_set_timeout+0x5c>)
   22f40:	9001      	str	r0, [sp, #4]
   22f42:	9100      	str	r1, [sp, #0]
   22f44:	f143 0300 	adc.w	r3, r3, #0
   22f48:	f7ff fe44 	bl	22bd4 <compare_set>
}
   22f4c:	b002      	add	sp, #8
   22f4e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22f50:	4803      	ldr	r0, [pc, #12]	; (22f60 <sys_clock_set_timeout+0x58>)
   22f52:	e7e1      	b.n	22f18 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22f54:	2400      	movs	r4, #0
   22f56:	e7e0      	b.n	22f1a <sys_clock_set_timeout+0x12>
   22f58:	4c01      	ldr	r4, [pc, #4]	; (22f60 <sys_clock_set_timeout+0x58>)
   22f5a:	e7de      	b.n	22f1a <sys_clock_set_timeout+0x12>
   22f5c:	2000a3d0 	.word	0x2000a3d0
   22f60:	007fffff 	.word	0x007fffff
   22f64:	00022aa5 	.word	0x00022aa5

00022f68 <sys_clock_elapsed>:
{
   22f68:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   22f6a:	f7ff fe11 	bl	22b90 <z_nrf_rtc_timer_read>
   22f6e:	4b02      	ldr	r3, [pc, #8]	; (22f78 <sys_clock_elapsed+0x10>)
   22f70:	681b      	ldr	r3, [r3, #0]
}
   22f72:	1ac0      	subs	r0, r0, r3
   22f74:	bd08      	pop	{r3, pc}
   22f76:	bf00      	nop
   22f78:	2000a3d0 	.word	0x2000a3d0

00022f7c <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22f7c:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   22f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   22f84:	4e52      	ldr	r6, [pc, #328]	; (230d0 <pinctrl_configure_pins+0x154>)
   22f86:	4f53      	ldr	r7, [pc, #332]	; (230d4 <pinctrl_configure_pins+0x158>)
   22f88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22f8c:	4281      	cmp	r1, r0
   22f8e:	d102      	bne.n	22f96 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   22f90:	2000      	movs	r0, #0
}
   22f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   22f96:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   22f98:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   22f9c:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   22fa0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   22fa2:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   22fa6:	bf08      	it	eq
   22fa8:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   22fac:	2c22      	cmp	r4, #34	; 0x22
   22fae:	f200 808c 	bhi.w	230ca <pinctrl_configure_pins+0x14e>
   22fb2:	e8df f004 	tbb	[pc, r4]
   22fb6:	2312      	.short	0x2312
   22fb8:	3e2b4228 	.word	0x3e2b4228
   22fbc:	8a8a8a42 	.word	0x8a8a8a42
   22fc0:	8a72458a 	.word	0x8a72458a
   22fc4:	8a8a8a8a 	.word	0x8a8a8a8a
   22fc8:	8a8a8a8a 	.word	0x8a8a8a8a
   22fcc:	8a8a8a8a 	.word	0x8a8a8a8a
   22fd0:	758a8a8a 	.word	0x758a8a8a
   22fd4:	84817e7b 	.word	0x84817e7b
   22fd8:	87          	.byte	0x87
   22fd9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   22fda:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   22fde:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   22fe2:	f1b8 0f01 	cmp.w	r8, #1
   22fe6:	bf14      	ite	ne
   22fe8:	46b6      	movne	lr, r6
   22fea:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   22fec:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22ff0:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   22ff4:	f8ce 4008 	str.w	r4, [lr, #8]
   22ff8:	2401      	movs	r4, #1
   22ffa:	e002      	b.n	23002 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   22ffc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   23000:	2400      	movs	r4, #0
   23002:	46a6      	mov	lr, r4
   23004:	e023      	b.n	2304e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   23006:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   2300a:	e7e8      	b.n	22fde <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2300c:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2300e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   23012:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   23016:	f1b9 0f01 	cmp.w	r9, #1
   2301a:	bf14      	ite	ne
   2301c:	46b0      	movne	r8, r6
   2301e:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   23020:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23024:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   23028:	f8c8 e00c 	str.w	lr, [r8, #12]
   2302c:	f04f 0e01 	mov.w	lr, #1
   23030:	e00d      	b.n	2304e <pinctrl_configure_pins+0xd2>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   23032:	2401      	movs	r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   23034:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (write != NO_WRITE) {
   23038:	e7eb      	b.n	23012 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2303a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   2303e:	e7df      	b.n	23000 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   23040:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   23044:	2d00      	cmp	r5, #0
   23046:	d1db      	bne.n	23000 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   23048:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   2304a:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2304c:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2304e:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   23052:	f003 091f 	and.w	r9, r3, #31
   23056:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2305a:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   2305e:	ea4f 1353 	mov.w	r3, r3, lsr #5
   23062:	bf1c      	itt	ne
   23064:	2401      	movne	r4, #1
   23066:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   2306a:	2b01      	cmp	r3, #1
   2306c:	bf0c      	ite	eq
   2306e:	46b8      	moveq	r8, r7
   23070:	46b0      	movne	r8, r6
   23072:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   23076:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2307a:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   2307e:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   23082:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   23084:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   23088:	ea43 030e 	orr.w	r3, r3, lr
   2308c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23090:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   23094:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   23098:	e778      	b.n	22f8c <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2309a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2309e:	e7d1      	b.n	23044 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   230a0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   230a4:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   230a6:	f04f 0e00 	mov.w	lr, #0
   230aa:	e7d0      	b.n	2304e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   230ac:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
			if (write != NO_WRITE) {
   230b0:	e795      	b.n	22fde <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   230b2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   230b6:	e7f5      	b.n	230a4 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   230b8:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   230bc:	e7f2      	b.n	230a4 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   230be:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   230c2:	e7ef      	b.n	230a4 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   230c4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   230c8:	e7ec      	b.n	230a4 <pinctrl_configure_pins+0x128>
		switch (NRF_GET_FUN(pins[i])) {
   230ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   230ce:	e760      	b.n	22f92 <pinctrl_configure_pins+0x16>
   230d0:	40842500 	.word	0x40842500
   230d4:	40842800 	.word	0x40842800

000230d8 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   230d8:	b510      	push	{r4, lr}
   230da:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   230dc:	6902      	ldr	r2, [r0, #16]
{
   230de:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   230e0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   230e4:	4924      	ldr	r1, [pc, #144]	; (23178 <mbox_nrf_init+0xa0>)
   230e6:	2000      	movs	r0, #0
   230e8:	f000 ff10 	bl	23f0c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   230ec:	2200      	movs	r2, #0
   230ee:	2101      	movs	r1, #1
   230f0:	202a      	movs	r0, #42	; 0x2a
   230f2:	f7ee f893 	bl	1121c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   230f6:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   230f8:	2284      	movs	r2, #132	; 0x84
   230fa:	2100      	movs	r1, #0
   230fc:	a805      	add	r0, sp, #20
   230fe:	f00e fbd0 	bl	318a2 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   23102:	6863      	ldr	r3, [r4, #4]
   23104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   23108:	d309      	bcc.n	2311e <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   2310a:	4b1c      	ldr	r3, [pc, #112]	; (2317c <mbox_nrf_init+0xa4>)
   2310c:	2202      	movs	r2, #2
   2310e:	9302      	str	r3, [sp, #8]
   23110:	2300      	movs	r3, #0
   23112:	491b      	ldr	r1, [pc, #108]	; (23180 <mbox_nrf_init+0xa8>)
   23114:	4618      	mov	r0, r3
   23116:	e9cd 3300 	strd	r3, r3, [sp]
   2311a:	f00c ff23 	bl	2ff64 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   2311e:	6823      	ldr	r3, [r4, #0]
   23120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   23124:	d309      	bcc.n	2313a <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   23126:	4b17      	ldr	r3, [pc, #92]	; (23184 <mbox_nrf_init+0xac>)
   23128:	2202      	movs	r2, #2
   2312a:	9302      	str	r3, [sp, #8]
   2312c:	2300      	movs	r3, #0
   2312e:	4914      	ldr	r1, [pc, #80]	; (23180 <mbox_nrf_init+0xa8>)
   23130:	4618      	mov	r0, r3
   23132:	e9cd 3300 	strd	r3, r3, [sp]
   23136:	f00c ff15 	bl	2ff64 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   2313a:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   2313c:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   2313e:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23140:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   23142:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23144:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   23146:	40d9      	lsrs	r1, r3
   23148:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   2314a:	bf44      	itt	mi
   2314c:	fa00 f103 	lslmi.w	r1, r0, r3
   23150:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   23154:	6821      	ldr	r1, [r4, #0]
   23156:	40d9      	lsrs	r1, r3
   23158:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   2315a:	bf48      	it	mi
   2315c:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23160:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   23164:	bf48      	it	mi
   23166:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23168:	2b10      	cmp	r3, #16
   2316a:	d1ea      	bne.n	23142 <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   2316c:	a805      	add	r0, sp, #20
   2316e:	f000 fee5 	bl	23f3c <nrfx_ipc_config_load>

	return 0;
}
   23172:	2000      	movs	r0, #0
   23174:	b026      	add	sp, #152	; 0x98
   23176:	bd10      	pop	{r4, pc}
   23178:	000231d9 	.word	0x000231d9
   2317c:	0003841d 	.word	0x0003841d
   23180:	000330e0 	.word	0x000330e0
   23184:	00038449 	.word	0x00038449

00023188 <mbox_nrf_send>:
{
   23188:	b530      	push	{r4, r5, lr}
   2318a:	4605      	mov	r5, r0
   2318c:	460c      	mov	r4, r1
   2318e:	b085      	sub	sp, #20
	if (msg) {
   23190:	b14a      	cbz	r2, 231a6 <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   23192:	4b0f      	ldr	r3, [pc, #60]	; (231d0 <mbox_nrf_send+0x48>)
   23194:	2202      	movs	r2, #2
   23196:	9302      	str	r3, [sp, #8]
   23198:	2300      	movs	r3, #0
   2319a:	490e      	ldr	r1, [pc, #56]	; (231d4 <mbox_nrf_send+0x4c>)
   2319c:	4618      	mov	r0, r3
   2319e:	e9cd 3300 	strd	r3, r3, [sp]
   231a2:	f00c fedf 	bl	2ff64 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   231a6:	2c0f      	cmp	r4, #15
   231a8:	d80f      	bhi.n	231ca <mbox_nrf_send+0x42>
   231aa:	686b      	ldr	r3, [r5, #4]
   231ac:	685b      	ldr	r3, [r3, #4]
   231ae:	40e3      	lsrs	r3, r4
   231b0:	07db      	lsls	r3, r3, #31
   231b2:	d50a      	bpl.n	231ca <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   231b4:	2301      	movs	r3, #1
	return 0;
   231b6:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   231b8:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   231ba:	b2e4      	uxtb	r4, r4
   231bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   231c0:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   231c4:	6023      	str	r3, [r4, #0]
}
   231c6:	b005      	add	sp, #20
   231c8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   231ca:	f06f 0015 	mvn.w	r0, #21
   231ce:	e7fa      	b.n	231c6 <mbox_nrf_send+0x3e>
   231d0:	00038475 	.word	0x00038475
   231d4:	000330e0 	.word	0x000330e0

000231d8 <mbox_dispatcher>:
{
   231d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   231da:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   231de:	280f      	cmp	r0, #15
{
   231e0:	4604      	mov	r4, r0
   231e2:	460d      	mov	r5, r1
   231e4:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   231e6:	d803      	bhi.n	231f0 <mbox_dispatcher+0x18>
   231e8:	681b      	ldr	r3, [r3, #0]
   231ea:	40c3      	lsrs	r3, r0
   231ec:	07db      	lsls	r3, r3, #31
   231ee:	d409      	bmi.n	23204 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   231f0:	4b14      	ldr	r3, [pc, #80]	; (23244 <mbox_dispatcher+0x6c>)
   231f2:	2202      	movs	r2, #2
   231f4:	9302      	str	r3, [sp, #8]
   231f6:	2300      	movs	r3, #0
   231f8:	4913      	ldr	r1, [pc, #76]	; (23248 <mbox_dispatcher+0x70>)
   231fa:	4618      	mov	r0, r3
   231fc:	e9cd 3300 	strd	r3, r3, [sp]
   23200:	f00c feb0 	bl	2ff64 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   23204:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   23208:	40e3      	lsrs	r3, r4
   2320a:	f013 0301 	ands.w	r3, r3, #1
   2320e:	d108      	bne.n	23222 <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   23210:	4a0e      	ldr	r2, [pc, #56]	; (2324c <mbox_dispatcher+0x74>)
   23212:	4618      	mov	r0, r3
   23214:	e9cd 3201 	strd	r3, r2, [sp, #4]
   23218:	490b      	ldr	r1, [pc, #44]	; (23248 <mbox_dispatcher+0x70>)
   2321a:	2202      	movs	r2, #2
   2321c:	9300      	str	r3, [sp, #0]
   2321e:	f00c fea1 	bl	2ff64 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   23222:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   23226:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   2322a:	b145      	cbz	r5, 2323e <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   2322c:	2300      	movs	r3, #0
   2322e:	4621      	mov	r1, r4
   23230:	4630      	mov	r0, r6
   23232:	46ac      	mov	ip, r5
   23234:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   23236:	b004      	add	sp, #16
   23238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   2323c:	4760      	bx	ip
}
   2323e:	b004      	add	sp, #16
   23240:	bd70      	pop	{r4, r5, r6, pc}
   23242:	bf00      	nop
   23244:	00038490 	.word	0x00038490
   23248:	000330e0 	.word	0x000330e0
   2324c:	000384ac 	.word	0x000384ac

00023250 <mbox_nrf_set_enabled>:
{
   23250:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   23252:	290f      	cmp	r1, #15
{
   23254:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   23256:	6905      	ldr	r5, [r0, #16]
{
   23258:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   2325a:	d841      	bhi.n	232e0 <mbox_nrf_set_enabled+0x90>
   2325c:	6843      	ldr	r3, [r0, #4]
   2325e:	681b      	ldr	r3, [r3, #0]
   23260:	40cb      	lsrs	r3, r1
   23262:	07db      	lsls	r3, r3, #31
   23264:	d53c      	bpl.n	232e0 <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   23266:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2326a:	40cb      	lsrs	r3, r1
   2326c:	f003 0301 	and.w	r3, r3, #1
   23270:	b91a      	cbnz	r2, 2327a <mbox_nrf_set_enabled+0x2a>
   23272:	bb0b      	cbnz	r3, 232b8 <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   23274:	f06f 0077 	mvn.w	r0, #119	; 0x77
   23278:	e030      	b.n	232dc <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   2327a:	2b00      	cmp	r3, #0
   2327c:	d1fa      	bne.n	23274 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   2327e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   23282:	b943      	cbnz	r3, 23296 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   23284:	4a18      	ldr	r2, [pc, #96]	; (232e8 <mbox_nrf_set_enabled+0x98>)
   23286:	4618      	mov	r0, r3
   23288:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2328c:	4917      	ldr	r1, [pc, #92]	; (232ec <mbox_nrf_set_enabled+0x9c>)
   2328e:	2202      	movs	r2, #2
   23290:	9300      	str	r3, [sp, #0]
   23292:	f00c fe67 	bl	2ff64 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   23296:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2329a:	b913      	cbnz	r3, 232a2 <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   2329c:	202a      	movs	r0, #42	; 0x2a
   2329e:	f7ed ff8d 	bl	111bc <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   232a2:	2201      	movs	r2, #1
   232a4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   232a8:	40a2      	lsls	r2, r4
   232aa:	4313      	orrs	r3, r2
   232ac:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   232b0:	b2e0      	uxtb	r0, r4
   232b2:	f000 fe63 	bl	23f7c <nrfx_ipc_receive_event_enable>
   232b6:	e00a      	b.n	232ce <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   232b8:	b2c8      	uxtb	r0, r1
   232ba:	f000 fe67 	bl	23f8c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   232be:	2201      	movs	r2, #1
   232c0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   232c4:	40a2      	lsls	r2, r4
   232c6:	ea23 0302 	bic.w	r3, r3, r2
   232ca:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   232ce:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   232d2:	b913      	cbnz	r3, 232da <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   232d4:	202a      	movs	r0, #42	; 0x2a
   232d6:	f7ed ff7f 	bl	111d8 <arch_irq_disable>
	return 0;
   232da:	2000      	movs	r0, #0
}
   232dc:	b005      	add	sp, #20
   232de:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   232e0:	f06f 0015 	mvn.w	r0, #21
   232e4:	e7fa      	b.n	232dc <mbox_nrf_set_enabled+0x8c>
   232e6:	bf00      	nop
   232e8:	000384c9 	.word	0x000384c9
   232ec:	000330e0 	.word	0x000330e0

000232f0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   232f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   232f2:	ab0b      	add	r3, sp, #44	; 0x2c
   232f4:	9305      	str	r3, [sp, #20]
   232f6:	9303      	str	r3, [sp, #12]
   232f8:	4b05      	ldr	r3, [pc, #20]	; (23310 <z_log_msg_runtime_create.constprop.0+0x20>)
   232fa:	2201      	movs	r2, #1
   232fc:	9302      	str	r3, [sp, #8]
   232fe:	2300      	movs	r3, #0
   23300:	4618      	mov	r0, r3
   23302:	e9cd 3300 	strd	r3, r3, [sp]
   23306:	f7ec f90f 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2330a:	b007      	add	sp, #28
   2330c:	f85d fb04 	ldr.w	pc, [sp], #4
   23310:	00038526 	.word	0x00038526

00023314 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   23316:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   23318:	f7ec f896 	bl	f448 <z_impl_log_panic>
   2331c:	4b06      	ldr	r3, [pc, #24]	; (23338 <k_sys_fatal_error_handler+0x24>)
   2331e:	4620      	mov	r0, r4
   23320:	9302      	str	r3, [sp, #8]
   23322:	2201      	movs	r2, #1
   23324:	4623      	mov	r3, r4
   23326:	e9cd 4400 	strd	r4, r4, [sp]
   2332a:	4904      	ldr	r1, [pc, #16]	; (2333c <k_sys_fatal_error_handler+0x28>)
   2332c:	f7ff ffe0 	bl	232f0 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   23330:	4620      	mov	r0, r4
   23332:	f7ee fb75 	bl	11a20 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   23336:	bf00      	nop
   23338:	00038526 	.word	0x00038526
   2333c:	000330a0 	.word	0x000330a0

00023340 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   23340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23344:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   23346:	4b15      	ldr	r3, [pc, #84]	; (2339c <tfm_ns_interface_dispatch+0x5c>)
   23348:	4604      	mov	r4, r0
   2334a:	f893 8000 	ldrb.w	r8, [r3]
   2334e:	460d      	mov	r5, r1
   23350:	4616      	mov	r6, r2
   23352:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   23354:	f1b8 0f00 	cmp.w	r8, #0
   23358:	d115      	bne.n	23386 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   2335a:	4668      	mov	r0, sp
   2335c:	f008 fad5 	bl	2b90a <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   23360:	463a      	mov	r2, r7
   23362:	4631      	mov	r1, r6
   23364:	4628      	mov	r0, r5
   23366:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   23368:	47a0      	blx	r4
   2336a:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   2336c:	4668      	mov	r0, sp
   2336e:	f008 facd 	bl	2b90c <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   23372:	f1b8 0f00 	cmp.w	r8, #0
   23376:	d002      	beq.n	2337e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   23378:	4809      	ldr	r0, [pc, #36]	; (233a0 <tfm_ns_interface_dispatch+0x60>)
   2337a:	f002 fb3f 	bl	259fc <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   2337e:	4620      	mov	r0, r4
   23380:	b022      	add	sp, #136	; 0x88
   23382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   23386:	f04f 32ff 	mov.w	r2, #4294967295
   2338a:	f04f 33ff 	mov.w	r3, #4294967295
   2338e:	4804      	ldr	r0, [pc, #16]	; (233a0 <tfm_ns_interface_dispatch+0x60>)
   23390:	f002 faba 	bl	25908 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   23394:	2800      	cmp	r0, #0
   23396:	d0e0      	beq.n	2335a <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   23398:	241f      	movs	r4, #31
   2339a:	e7f0      	b.n	2337e <tfm_ns_interface_dispatch+0x3e>
   2339c:	20031eff 	.word	0x20031eff
   233a0:	20008c2c 	.word	0x20008c2c

000233a4 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   233a4:	b530      	push	{r4, r5, lr}
   233a6:	b095      	sub	sp, #84	; 0x54
   233a8:	4605      	mov	r5, r0
   233aa:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   233ac:	2230      	movs	r2, #48	; 0x30
   233ae:	2100      	movs	r1, #0
   233b0:	a808      	add	r0, sp, #32
   233b2:	f00e fa76 	bl	318a2 <memset>
   233b6:	233f      	movs	r3, #63	; 0x3f
   233b8:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   233ba:	ab07      	add	r3, sp, #28
   233bc:	9303      	str	r3, [sp, #12]
   233be:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   233c0:	9406      	str	r4, [sp, #24]
   233c2:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   233c6:	b154      	cbz	r4, 233de <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   233c8:	2301      	movs	r3, #1
   233ca:	aa05      	add	r2, sp, #20
   233cc:	9200      	str	r2, [sp, #0]
   233ce:	2100      	movs	r1, #0
   233d0:	4804      	ldr	r0, [pc, #16]	; (233e4 <psa_generate_random+0x40>)
   233d2:	9301      	str	r3, [sp, #4]
   233d4:	aa03      	add	r2, sp, #12
   233d6:	f000 f807 	bl	233e8 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   233da:	b015      	add	sp, #84	; 0x54
   233dc:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   233de:	4620      	mov	r0, r4
   233e0:	e7fb      	b.n	233da <psa_generate_random+0x36>
   233e2:	bf00      	nop
   233e4:	40000100 	.word	0x40000100

000233e8 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   233e8:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   233ea:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   233ee:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   233f2:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   233f4:	d20d      	bcs.n	23412 <psa_call+0x2a>
        (type < INT16_MIN) ||
   233f6:	ea43 0504 	orr.w	r5, r3, r4
   233fa:	2dff      	cmp	r5, #255	; 0xff
   233fc:	d809      	bhi.n	23412 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   233fe:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   23402:	4613      	mov	r3, r2
   23404:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   23408:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   2340a:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   2340c:	4803      	ldr	r0, [pc, #12]	; (2341c <psa_call+0x34>)
   2340e:	f7ff bf97 	b.w	23340 <tfm_ns_interface_dispatch>
}
   23412:	f06f 0080 	mvn.w	r0, #128	; 0x80
   23416:	bc30      	pop	{r4, r5}
   23418:	4770      	bx	lr
   2341a:	bf00      	nop
   2341c:	00007c21 	.word	0x00007c21

00023420 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   23420:	2300      	movs	r3, #0
{
   23422:	b507      	push	{r0, r1, r2, lr}
   23424:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   23426:	9300      	str	r3, [sp, #0]
   23428:	4601      	mov	r1, r0
   2342a:	4803      	ldr	r0, [pc, #12]	; (23438 <psa_connect+0x18>)
   2342c:	f7ff ff88 	bl	23340 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   23430:	b003      	add	sp, #12
   23432:	f85d fb04 	ldr.w	pc, [sp], #4
   23436:	bf00      	nop
   23438:	00007c19 	.word	0x00007c19

0002343c <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   2343c:	2300      	movs	r3, #0
{
   2343e:	b507      	push	{r0, r1, r2, lr}
   23440:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   23442:	461a      	mov	r2, r3
   23444:	9300      	str	r3, [sp, #0]
   23446:	4803      	ldr	r0, [pc, #12]	; (23454 <psa_close+0x18>)
   23448:	f7ff ff7a 	bl	23340 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   2344c:	b003      	add	sp, #12
   2344e:	f85d fb04 	ldr.w	pc, [sp], #4
   23452:	bf00      	nop
   23454:	00007c11 	.word	0x00007c11

00023458 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   23458:	4b04      	ldr	r3, [pc, #16]	; (2346c <SystemCoreClockUpdate+0x14>)
   2345a:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   2345e:	4b04      	ldr	r3, [pc, #16]	; (23470 <SystemCoreClockUpdate+0x18>)
   23460:	f002 0203 	and.w	r2, r2, #3
   23464:	40d3      	lsrs	r3, r2
   23466:	4a03      	ldr	r2, [pc, #12]	; (23474 <SystemCoreClockUpdate+0x1c>)
   23468:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   2346a:	4770      	bx	lr
   2346c:	40005000 	.word	0x40005000
   23470:	07a12000 	.word	0x07a12000
   23474:	20008738 	.word	0x20008738

00023478 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   23478:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2347a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   2347c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2347e:	fab2 f382 	clz	r3, r2
   23482:	f1c3 031f 	rsb	r3, r3, #31
   23486:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   23488:	fa05 f403 	lsl.w	r4, r5, r3
   2348c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23490:	e8d0 6fef 	ldaex	r6, [r0]
   23494:	4296      	cmp	r6, r2
   23496:	d104      	bne.n	234a2 <nrfx_flag32_alloc+0x2a>
   23498:	e8c0 4fec 	stlex	ip, r4, [r0]
   2349c:	f1bc 0f00 	cmp.w	ip, #0
   234a0:	d1f6      	bne.n	23490 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   234a2:	d1eb      	bne.n	2347c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   234a4:	4801      	ldr	r0, [pc, #4]	; (234ac <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   234a6:	700b      	strb	r3, [r1, #0]
}
   234a8:	bd70      	pop	{r4, r5, r6, pc}
   234aa:	bf00      	nop
   234ac:	0bad0000 	.word	0x0bad0000

000234b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   234b0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   234b2:	6803      	ldr	r3, [r0, #0]
   234b4:	40cb      	lsrs	r3, r1
   234b6:	07db      	lsls	r3, r3, #31
   234b8:	d410      	bmi.n	234dc <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   234ba:	2301      	movs	r3, #1
   234bc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   234be:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   234c0:	ea43 0102 	orr.w	r1, r3, r2
   234c4:	e8d0 4fef 	ldaex	r4, [r0]
   234c8:	4294      	cmp	r4, r2
   234ca:	d104      	bne.n	234d6 <nrfx_flag32_free+0x26>
   234cc:	e8c0 1fec 	stlex	ip, r1, [r0]
   234d0:	f1bc 0f00 	cmp.w	ip, #0
   234d4:	d1f6      	bne.n	234c4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   234d6:	d1f2      	bne.n	234be <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   234d8:	4801      	ldr	r0, [pc, #4]	; (234e0 <nrfx_flag32_free+0x30>)
}
   234da:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   234dc:	4801      	ldr	r0, [pc, #4]	; (234e4 <nrfx_flag32_free+0x34>)
   234de:	e7fc      	b.n	234da <nrfx_flag32_free+0x2a>
   234e0:	0bad0000 	.word	0x0bad0000
   234e4:	0bad0004 	.word	0x0bad0004

000234e8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   234e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   234ea:	2803      	cmp	r0, #3
   234ec:	f200 80a0 	bhi.w	23630 <clock_stop+0x148>
   234f0:	e8df f000 	tbb	[pc, r0]
   234f4:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   234f8:	2202      	movs	r2, #2
   234fa:	4b59      	ldr	r3, [pc, #356]	; (23660 <clock_stop+0x178>)
   234fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23500:	2200      	movs	r2, #0
   23502:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   23506:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2350a:	2201      	movs	r2, #1
   2350c:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2350e:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   23510:	2301      	movs	r3, #1
   23512:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   23516:	2803      	cmp	r0, #3
   23518:	f200 808a 	bhi.w	23630 <clock_stop+0x148>
   2351c:	e8df f000 	tbb	[pc, r0]
   23520:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   23524:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23526:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   23528:	4b4d      	ldr	r3, [pc, #308]	; (23660 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2352a:	f10d 0407 	add.w	r4, sp, #7
   2352e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23532:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   23536:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2353a:	605a      	str	r2, [r3, #4]
   2353c:	e7e8      	b.n	23510 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   2353e:	f44f 7200 	mov.w	r2, #512	; 0x200
   23542:	4b47      	ldr	r3, [pc, #284]	; (23660 <clock_stop+0x178>)
   23544:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23548:	2200      	movs	r2, #0
   2354a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   2354e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23552:	2201      	movs	r2, #1
   23554:	625a      	str	r2, [r3, #36]	; 0x24
   23556:	e7da      	b.n	2350e <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   23558:	f44f 7280 	mov.w	r2, #256	; 0x100
   2355c:	4b40      	ldr	r3, [pc, #256]	; (23660 <clock_stop+0x178>)
   2355e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23562:	2200      	movs	r2, #0
   23564:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   23568:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2356c:	2201      	movs	r2, #1
   2356e:	61da      	str	r2, [r3, #28]
   23570:	e7cd      	b.n	2350e <clock_stop+0x26>
    switch (domain)
   23572:	f242 7510 	movw	r5, #10000	; 0x2710
   23576:	4e3a      	ldr	r6, [pc, #232]	; (23660 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   23578:	b36c      	cbz	r4, 235d6 <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2357a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   2357e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   23582:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23584:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   23588:	03d9      	lsls	r1, r3, #15
   2358a:	d551      	bpl.n	23630 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2358c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23590:	2801      	cmp	r0, #1
   23592:	d14d      	bne.n	23630 <clock_stop+0x148>
   23594:	f00c fd5c 	bl	30050 <nrfx_busy_wait>
   23598:	3d01      	subs	r5, #1
   2359a:	d1ed      	bne.n	23578 <clock_stop+0x90>
   2359c:	e048      	b.n	23630 <clock_stop+0x148>
   2359e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   235a2:	2801      	cmp	r0, #1
   235a4:	d144      	bne.n	23630 <clock_stop+0x148>
   235a6:	f00c fd53 	bl	30050 <nrfx_busy_wait>
   235aa:	3d01      	subs	r5, #1
   235ac:	d14f      	bne.n	2364e <clock_stop+0x166>
   235ae:	e03f      	b.n	23630 <clock_stop+0x148>
   235b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   235b4:	2801      	cmp	r0, #1
   235b6:	d13b      	bne.n	23630 <clock_stop+0x148>
   235b8:	f00c fd4a 	bl	30050 <nrfx_busy_wait>
   235bc:	3d01      	subs	r5, #1
   235be:	d037      	beq.n	23630 <clock_stop+0x148>
            if (p_clk_src != NULL)
   235c0:	b1bc      	cbz	r4, 235f2 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   235c2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   235c6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   235ca:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   235cc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   235d0:	03db      	lsls	r3, r3, #15
   235d2:	d52d      	bpl.n	23630 <clock_stop+0x148>
   235d4:	e7ec      	b.n	235b0 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   235d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   235da:	03da      	lsls	r2, r3, #15
   235dc:	d528      	bpl.n	23630 <clock_stop+0x148>
   235de:	2001      	movs	r0, #1
   235e0:	f00c fd36 	bl	30050 <nrfx_busy_wait>
   235e4:	3d01      	subs	r5, #1
   235e6:	d1f6      	bne.n	235d6 <clock_stop+0xee>
   235e8:	e022      	b.n	23630 <clock_stop+0x148>
    switch (domain)
   235ea:	f242 7510 	movw	r5, #10000	; 0x2710
   235ee:	4e1c      	ldr	r6, [pc, #112]	; (23660 <clock_stop+0x178>)
   235f0:	e7e6      	b.n	235c0 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   235f2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   235f6:	03d8      	lsls	r0, r3, #15
   235f8:	d51a      	bpl.n	23630 <clock_stop+0x148>
   235fa:	2001      	movs	r0, #1
   235fc:	f00c fd28 	bl	30050 <nrfx_busy_wait>
   23600:	3d01      	subs	r5, #1
   23602:	d1f6      	bne.n	235f2 <clock_stop+0x10a>
   23604:	e014      	b.n	23630 <clock_stop+0x148>
    switch (domain)
   23606:	f242 7510 	movw	r5, #10000	; 0x2710
   2360a:	4e15      	ldr	r6, [pc, #84]	; (23660 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   2360c:	b194      	cbz	r4, 23634 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   2360e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23612:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   23616:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   23618:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   2361c:	03d9      	lsls	r1, r3, #15
   2361e:	d507      	bpl.n	23630 <clock_stop+0x148>
   23620:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23624:	2801      	cmp	r0, #1
   23626:	d103      	bne.n	23630 <clock_stop+0x148>
   23628:	f00c fd12 	bl	30050 <nrfx_busy_wait>
   2362c:	3d01      	subs	r5, #1
   2362e:	d1ed      	bne.n	2360c <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   23630:	b002      	add	sp, #8
   23632:	bd70      	pop	{r4, r5, r6, pc}
   23634:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23638:	03da      	lsls	r2, r3, #15
   2363a:	d5f9      	bpl.n	23630 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2363c:	2001      	movs	r0, #1
   2363e:	f00c fd07 	bl	30050 <nrfx_busy_wait>
   23642:	3d01      	subs	r5, #1
   23644:	d1f6      	bne.n	23634 <clock_stop+0x14c>
   23646:	e7f3      	b.n	23630 <clock_stop+0x148>
    switch (domain)
   23648:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   2364c:	4e04      	ldr	r6, [pc, #16]	; (23660 <clock_stop+0x178>)
   2364e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   23652:	03db      	lsls	r3, r3, #15
   23654:	d5ec      	bpl.n	23630 <clock_stop+0x148>
   23656:	2c00      	cmp	r4, #0
   23658:	d1a1      	bne.n	2359e <clock_stop+0xb6>
   2365a:	2001      	movs	r0, #1
   2365c:	e7a3      	b.n	235a6 <clock_stop+0xbe>
   2365e:	bf00      	nop
   23660:	40005000 	.word	0x40005000

00023664 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   23664:	4b04      	ldr	r3, [pc, #16]	; (23678 <nrfx_clock_init+0x14>)
   23666:	791a      	ldrb	r2, [r3, #4]
   23668:	b922      	cbnz	r2, 23674 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2366a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   2366c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2366e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   23670:	4802      	ldr	r0, [pc, #8]	; (2367c <nrfx_clock_init+0x18>)
   23672:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   23674:	4802      	ldr	r0, [pc, #8]	; (23680 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   23676:	4770      	bx	lr
   23678:	20030d20 	.word	0x20030d20
   2367c:	0bad0000 	.word	0x0bad0000
   23680:	0bad000c 	.word	0x0bad000c

00023684 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   23684:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   23686:	2005      	movs	r0, #5
   23688:	f7ed fdba 	bl	11200 <arch_irq_is_enabled>
   2368c:	b910      	cbnz	r0, 23694 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2368e:	2005      	movs	r0, #5
   23690:	f7ed fd94 	bl	111bc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   23694:	2201      	movs	r2, #1
   23696:	4b04      	ldr	r3, [pc, #16]	; (236a8 <nrfx_clock_enable+0x24>)
   23698:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   2369c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   236a0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   236a4:	bd08      	pop	{r3, pc}
   236a6:	bf00      	nop
   236a8:	40005000 	.word	0x40005000

000236ac <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   236ac:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   236ae:	2803      	cmp	r0, #3
   236b0:	d818      	bhi.n	236e4 <nrfx_clock_start+0x38>
   236b2:	e8df f000 	tbb	[pc, r0]
   236b6:	3002      	.short	0x3002
   236b8:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   236ba:	4a29      	ldr	r2, [pc, #164]	; (23760 <nrfx_clock_start+0xb4>)
   236bc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   236c0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   236c4:	03c9      	lsls	r1, r1, #15
   236c6:	d40e      	bmi.n	236e6 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   236c8:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   236cc:	07db      	lsls	r3, r3, #31
   236ce:	d513      	bpl.n	236f8 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   236d0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   236d4:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   236d8:	3b01      	subs	r3, #1
   236da:	2b01      	cmp	r3, #1
   236dc:	d809      	bhi.n	236f2 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   236de:	2302      	movs	r3, #2
   236e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   236e4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   236e6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   236ea:	2b02      	cmp	r3, #2
   236ec:	d005      	beq.n	236fa <nrfx_clock_start+0x4e>
   236ee:	2b01      	cmp	r3, #1
   236f0:	d002      	beq.n	236f8 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   236f2:	2000      	movs	r0, #0
   236f4:	f7ff fef8 	bl	234e8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   236f8:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   236fa:	4a19      	ldr	r2, [pc, #100]	; (23760 <nrfx_clock_start+0xb4>)
   236fc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23700:	2300      	movs	r3, #0
   23702:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   23706:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   2370a:	2302      	movs	r3, #2
   2370c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23710:	2301      	movs	r3, #1
   23712:	6093      	str	r3, [r2, #8]
}
   23714:	e7e6      	b.n	236e4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23716:	2200      	movs	r2, #0
   23718:	4b11      	ldr	r3, [pc, #68]	; (23760 <nrfx_clock_start+0xb4>)
   2371a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2371e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   23722:	2201      	movs	r2, #1
   23724:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23728:	601a      	str	r2, [r3, #0]
}
   2372a:	e7db      	b.n	236e4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2372c:	2200      	movs	r2, #0
   2372e:	4b0c      	ldr	r3, [pc, #48]	; (23760 <nrfx_clock_start+0xb4>)
   23730:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23734:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   23738:	f44f 7200 	mov.w	r2, #512	; 0x200
   2373c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23740:	2201      	movs	r2, #1
   23742:	621a      	str	r2, [r3, #32]
}
   23744:	e7ce      	b.n	236e4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23746:	2200      	movs	r2, #0
   23748:	4b05      	ldr	r3, [pc, #20]	; (23760 <nrfx_clock_start+0xb4>)
   2374a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2374e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   23752:	f44f 7280 	mov.w	r2, #256	; 0x100
   23756:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2375a:	2201      	movs	r2, #1
   2375c:	619a      	str	r2, [r3, #24]
}
   2375e:	e7c1      	b.n	236e4 <nrfx_clock_start+0x38>
   23760:	40005000 	.word	0x40005000

00023764 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   23764:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23766:	4b28      	ldr	r3, [pc, #160]	; (23808 <nrfx_power_clock_irq_handler+0xa4>)
   23768:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2376c:	b152      	cbz	r2, 23784 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2376e:	2000      	movs	r0, #0
   23770:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   23774:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   23778:	2201      	movs	r2, #1
   2377a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2377e:	4b23      	ldr	r3, [pc, #140]	; (2380c <nrfx_power_clock_irq_handler+0xa8>)
   23780:	681b      	ldr	r3, [r3, #0]
   23782:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23784:	4b20      	ldr	r3, [pc, #128]	; (23808 <nrfx_power_clock_irq_handler+0xa4>)
   23786:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2378a:	b18a      	cbz	r2, 237b0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2378c:	2200      	movs	r2, #0
   2378e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   23792:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23796:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2379a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2379e:	f002 0203 	and.w	r2, r2, #3
   237a2:	2a01      	cmp	r2, #1
   237a4:	f04f 0102 	mov.w	r1, #2
   237a8:	d126      	bne.n	237f8 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   237aa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   237ae:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   237b0:	4b15      	ldr	r3, [pc, #84]	; (23808 <nrfx_power_clock_irq_handler+0xa4>)
   237b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   237b6:	b162      	cbz	r2, 237d2 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   237b8:	2200      	movs	r2, #0
   237ba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   237be:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   237c2:	f44f 7280 	mov.w	r2, #256	; 0x100
   237c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   237ca:	4b10      	ldr	r3, [pc, #64]	; (2380c <nrfx_power_clock_irq_handler+0xa8>)
   237cc:	2004      	movs	r0, #4
   237ce:	681b      	ldr	r3, [r3, #0]
   237d0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   237d2:	4b0d      	ldr	r3, [pc, #52]	; (23808 <nrfx_power_clock_irq_handler+0xa4>)
   237d4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   237d8:	b1aa      	cbz	r2, 23806 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   237da:	2200      	movs	r2, #0
   237dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   237e0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   237e4:	f44f 7200 	mov.w	r2, #512	; 0x200
   237e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   237ec:	4b07      	ldr	r3, [pc, #28]	; (2380c <nrfx_power_clock_irq_handler+0xa8>)
   237ee:	2005      	movs	r0, #5
    }
#endif
}
   237f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   237f4:	681b      	ldr	r3, [r3, #0]
   237f6:	4718      	bx	r3
   237f8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   237fc:	4b03      	ldr	r3, [pc, #12]	; (2380c <nrfx_power_clock_irq_handler+0xa8>)
   237fe:	2001      	movs	r0, #1
   23800:	681b      	ldr	r3, [r3, #0]
   23802:	4798      	blx	r3
   23804:	e7d4      	b.n	237b0 <nrfx_power_clock_irq_handler+0x4c>
}
   23806:	bd10      	pop	{r4, pc}
   23808:	40005000 	.word	0x40005000
   2380c:	20030d20 	.word	0x20030d20

00023810 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   23810:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   23812:	4801      	ldr	r0, [pc, #4]	; (23818 <nrfx_dppi_channel_alloc+0x8>)
   23814:	f7ff be30 	b.w	23478 <nrfx_flag32_alloc>
   23818:	2000873c 	.word	0x2000873c

0002381c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   2381c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   2381e:	4a04      	ldr	r2, [pc, #16]	; (23830 <nrfx_dppi_channel_free+0x14>)
   23820:	4083      	lsls	r3, r0
{
   23822:	4601      	mov	r1, r0
   23824:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   23828:	4802      	ldr	r0, [pc, #8]	; (23834 <nrfx_dppi_channel_free+0x18>)
   2382a:	f7ff be41 	b.w	234b0 <nrfx_flag32_free>
   2382e:	bf00      	nop
   23830:	40017000 	.word	0x40017000
   23834:	2000873c 	.word	0x2000873c

00023838 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   23838:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2383a:	f003 021f 	and.w	r2, r3, #31
   2383e:	6002      	str	r2, [r0, #0]
}
   23840:	4a03      	ldr	r2, [pc, #12]	; (23850 <nrf_gpio_pin_port_decode+0x18>)
   23842:	4804      	ldr	r0, [pc, #16]	; (23854 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   23844:	095b      	lsrs	r3, r3, #5
}
   23846:	2b01      	cmp	r3, #1
   23848:	bf18      	it	ne
   2384a:	4610      	movne	r0, r2
   2384c:	4770      	bx	lr
   2384e:	bf00      	nop
   23850:	40842500 	.word	0x40842500
   23854:	40842800 	.word	0x40842800

00023858 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23858:	4b03      	ldr	r3, [pc, #12]	; (23868 <pin_in_use_by_te+0x10>)
   2385a:	3008      	adds	r0, #8
   2385c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23860:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23864:	4770      	bx	lr
   23866:	bf00      	nop
   23868:	20008740 	.word	0x20008740

0002386c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2386c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2386e:	4c0d      	ldr	r4, [pc, #52]	; (238a4 <call_handler+0x38>)
   23870:	f100 0308 	add.w	r3, r0, #8
   23874:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   23878:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2387a:	05da      	lsls	r2, r3, #23
{
   2387c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2387e:	d507      	bpl.n	23890 <call_handler+0x24>
   23880:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   23884:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   23888:	6852      	ldr	r2, [r2, #4]
   2388a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2388e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   23890:	68a3      	ldr	r3, [r4, #8]
   23892:	b12b      	cbz	r3, 238a0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23894:	4631      	mov	r1, r6
   23896:	4628      	mov	r0, r5
   23898:	68e2      	ldr	r2, [r4, #12]
    }
}
   2389a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2389e:	4718      	bx	r3
}
   238a0:	bd70      	pop	{r4, r5, r6, pc}
   238a2:	bf00      	nop
   238a4:	20008740 	.word	0x20008740

000238a8 <release_handler>:
{
   238a8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   238aa:	4a12      	ldr	r2, [pc, #72]	; (238f4 <release_handler+0x4c>)
   238ac:	3008      	adds	r0, #8
   238ae:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   238b2:	05d9      	lsls	r1, r3, #23
   238b4:	d51b      	bpl.n	238ee <release_handler+0x46>
   238b6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   238ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   238be:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   238c2:	2000      	movs	r0, #0
   238c4:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   238c8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   238cc:	f413 7f80 	tst.w	r3, #256	; 0x100
   238d0:	d003      	beq.n	238da <release_handler+0x32>
   238d2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   238d6:	4299      	cmp	r1, r3
   238d8:	d009      	beq.n	238ee <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   238da:	3001      	adds	r0, #1
   238dc:	2830      	cmp	r0, #48	; 0x30
   238de:	d1f3      	bne.n	238c8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   238e0:	2300      	movs	r3, #0
   238e2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   238e6:	4804      	ldr	r0, [pc, #16]	; (238f8 <release_handler+0x50>)
}
   238e8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   238ea:	f7ff bde1 	b.w	234b0 <nrfx_flag32_free>
}
   238ee:	bc10      	pop	{r4}
   238f0:	4770      	bx	lr
   238f2:	bf00      	nop
   238f4:	20008740 	.word	0x20008740
   238f8:	200087b4 	.word	0x200087b4

000238fc <pin_handler_trigger_uninit>:
{
   238fc:	b538      	push	{r3, r4, r5, lr}
   238fe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23900:	f7ff ffaa 	bl	23858 <pin_in_use_by_te>
   23904:	4c0b      	ldr	r4, [pc, #44]	; (23934 <pin_handler_trigger_uninit+0x38>)
   23906:	f102 0508 	add.w	r5, r2, #8
   2390a:	b160      	cbz	r0, 23926 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2390c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2390e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23912:	0b5b      	lsrs	r3, r3, #13
   23914:	009b      	lsls	r3, r3, #2
   23916:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2391a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   2391e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   23922:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   23926:	4610      	mov	r0, r2
   23928:	f7ff ffbe 	bl	238a8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2392c:	2300      	movs	r3, #0
   2392e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   23932:	bd38      	pop	{r3, r4, r5, pc}
   23934:	20008740 	.word	0x20008740

00023938 <nrfx_gpiote_input_configure>:
{
   23938:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2393c:	4604      	mov	r4, r0
   2393e:	4690      	mov	r8, r2
   23940:	461d      	mov	r5, r3
    if (p_input_config)
   23942:	b301      	cbz	r1, 23986 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23944:	4e4f      	ldr	r6, [pc, #316]	; (23a84 <nrfx_gpiote_input_configure+0x14c>)
   23946:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2394a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2394e:	079b      	lsls	r3, r3, #30
   23950:	d502      	bpl.n	23958 <nrfx_gpiote_input_configure+0x20>
   23952:	f7ff ff81 	bl	23858 <pin_in_use_by_te>
   23956:	bb28      	cbnz	r0, 239a4 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23958:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2395a:	4620      	mov	r0, r4
   2395c:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23960:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23964:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23968:	f10d 020f 	add.w	r2, sp, #15
   2396c:	460b      	mov	r3, r1
   2396e:	f10d 010e 	add.w	r1, sp, #14
   23972:	f00c fb71 	bl	30058 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   23976:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2397a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2397e:	f043 0301 	orr.w	r3, r3, #1
   23982:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   23986:	f1b8 0f00 	cmp.w	r8, #0
   2398a:	d02d      	beq.n	239e8 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2398c:	4e3d      	ldr	r6, [pc, #244]	; (23a84 <nrfx_gpiote_input_configure+0x14c>)
   2398e:	f104 0708 	add.w	r7, r4, #8
   23992:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   23996:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   2399a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2399c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   239a0:	d502      	bpl.n	239a8 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   239a2:	b1cb      	cbz	r3, 239d8 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   239a4:	4838      	ldr	r0, [pc, #224]	; (23a88 <nrfx_gpiote_input_configure+0x150>)
   239a6:	e021      	b.n	239ec <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   239a8:	f021 0120 	bic.w	r1, r1, #32
   239ac:	04c9      	lsls	r1, r1, #19
   239ae:	0cc9      	lsrs	r1, r1, #19
   239b0:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   239b4:	b183      	cbz	r3, 239d8 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   239b6:	2803      	cmp	r0, #3
   239b8:	d8f4      	bhi.n	239a4 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   239ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
   239be:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   239c2:	4662      	mov	r2, ip
   239c4:	0092      	lsls	r2, r2, #2
   239c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   239ca:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   239ce:	b980      	cbnz	r0, 239f2 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   239d0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   239d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   239d8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   239dc:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   239e0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   239e4:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   239e8:	bb1d      	cbnz	r5, 23a32 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   239ea:	4828      	ldr	r0, [pc, #160]	; (23a8c <nrfx_gpiote_input_configure+0x154>)
}
   239ec:	b004      	add	sp, #16
   239ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   239f2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   239f6:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   239fa:	f023 0303 	bic.w	r3, r3, #3
   239fe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23a02:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   23a06:	f041 0120 	orr.w	r1, r1, #32
   23a0a:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   23a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   23a12:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23a16:	0223      	lsls	r3, r4, #8
   23a18:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   23a1c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   23a20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   23a24:	ea43 030e 	orr.w	r3, r3, lr
   23a28:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   23a2c:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   23a30:	e7d2      	b.n	239d8 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   23a32:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   23a34:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   23a38:	f7ff ff36 	bl	238a8 <release_handler>
    if (!handler)
   23a3c:	2e00      	cmp	r6, #0
   23a3e:	d0d4      	beq.n	239ea <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23a40:	4d10      	ldr	r5, [pc, #64]	; (23a84 <nrfx_gpiote_input_configure+0x14c>)
   23a42:	e9d5 2300 	ldrd	r2, r3, [r5]
   23a46:	4296      	cmp	r6, r2
   23a48:	d101      	bne.n	23a4e <nrfx_gpiote_input_configure+0x116>
   23a4a:	429f      	cmp	r7, r3
   23a4c:	d018      	beq.n	23a80 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23a4e:	4810      	ldr	r0, [pc, #64]	; (23a90 <nrfx_gpiote_input_configure+0x158>)
   23a50:	f10d 010f 	add.w	r1, sp, #15
   23a54:	f7ff fd10 	bl	23478 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   23a58:	4b0c      	ldr	r3, [pc, #48]	; (23a8c <nrfx_gpiote_input_configure+0x154>)
   23a5a:	4298      	cmp	r0, r3
   23a5c:	d1c6      	bne.n	239ec <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   23a5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   23a62:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23a66:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   23a68:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23a6a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   23a6e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23a72:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   23a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23a7a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   23a7e:	e7b4      	b.n	239ea <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23a80:	2200      	movs	r2, #0
   23a82:	e7ee      	b.n	23a62 <nrfx_gpiote_input_configure+0x12a>
   23a84:	20008740 	.word	0x20008740
   23a88:	0bad0004 	.word	0x0bad0004
   23a8c:	0bad0000 	.word	0x0bad0000
   23a90:	200087b4 	.word	0x200087b4

00023a94 <nrfx_gpiote_output_configure>:
{
   23a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a96:	4604      	mov	r4, r0
   23a98:	4615      	mov	r5, r2
   23a9a:	b085      	sub	sp, #20
    if (p_config)
   23a9c:	b319      	cbz	r1, 23ae6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23a9e:	4e34      	ldr	r6, [pc, #208]	; (23b70 <nrfx_gpiote_output_configure+0xdc>)
   23aa0:	f100 0708 	add.w	r7, r0, #8
   23aa4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   23aa8:	0793      	lsls	r3, r2, #30
   23aaa:	d403      	bmi.n	23ab4 <nrfx_gpiote_output_configure+0x20>
   23aac:	f7ff fed4 	bl	23858 <pin_in_use_by_te>
   23ab0:	2800      	cmp	r0, #0
   23ab2:	d15a      	bne.n	23b6a <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   23ab4:	f012 0f1c 	tst.w	r2, #28
   23ab8:	d002      	beq.n	23ac0 <nrfx_gpiote_output_configure+0x2c>
   23aba:	784b      	ldrb	r3, [r1, #1]
   23abc:	2b01      	cmp	r3, #1
   23abe:	d054      	beq.n	23b6a <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   23ac0:	2301      	movs	r3, #1
   23ac2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   23ac6:	2300      	movs	r3, #0
   23ac8:	1c4a      	adds	r2, r1, #1
   23aca:	e9cd 1300 	strd	r1, r3, [sp]
   23ace:	4620      	mov	r0, r4
   23ad0:	1c8b      	adds	r3, r1, #2
   23ad2:	f10d 010f 	add.w	r1, sp, #15
   23ad6:	f00c fabf 	bl	30058 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   23ada:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   23ade:	f043 0303 	orr.w	r3, r3, #3
   23ae2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   23ae6:	b915      	cbnz	r5, 23aee <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   23ae8:	4822      	ldr	r0, [pc, #136]	; (23b74 <nrfx_gpiote_output_configure+0xe0>)
}
   23aea:	b005      	add	sp, #20
   23aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23aee:	4e20      	ldr	r6, [pc, #128]	; (23b70 <nrfx_gpiote_output_configure+0xdc>)
   23af0:	f104 0708 	add.w	r7, r4, #8
   23af4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   23af8:	0783      	lsls	r3, r0, #30
   23afa:	d536      	bpl.n	23b6a <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   23afc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   23b00:	2300      	movs	r3, #0
   23b02:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   23b04:	f020 0020 	bic.w	r0, r0, #32
   23b08:	0089      	lsls	r1, r1, #2
   23b0a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   23b0e:	04c0      	lsls	r0, r0, #19
   23b10:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   23b14:	0cc0      	lsrs	r0, r0, #19
   23b16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   23b1a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   23b1e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   23b22:	786a      	ldrb	r2, [r5, #1]
   23b24:	2a00      	cmp	r2, #0
   23b26:	d0df      	beq.n	23ae8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   23b28:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   23b2c:	78ad      	ldrb	r5, [r5, #2]
   23b2e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   23b32:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23b36:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23b3a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   23b3e:	0223      	lsls	r3, r4, #8
   23b40:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   23b44:	0412      	lsls	r2, r2, #16
   23b46:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23b4a:	ea43 030e 	orr.w	r3, r3, lr
   23b4e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   23b50:	052a      	lsls	r2, r5, #20
   23b52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23b56:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23b5a:	4313      	orrs	r3, r2
   23b5c:	f040 0020 	orr.w	r0, r0, #32
   23b60:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   23b64:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   23b68:	e7be      	b.n	23ae8 <nrfx_gpiote_output_configure+0x54>
{
   23b6a:	4803      	ldr	r0, [pc, #12]	; (23b78 <nrfx_gpiote_output_configure+0xe4>)
   23b6c:	e7bd      	b.n	23aea <nrfx_gpiote_output_configure+0x56>
   23b6e:	bf00      	nop
   23b70:	20008740 	.word	0x20008740
   23b74:	0bad0000 	.word	0x0bad0000
   23b78:	0bad0004 	.word	0x0bad0004

00023b7c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   23b7c:	4b01      	ldr	r3, [pc, #4]	; (23b84 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   23b7e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   23b82:	4770      	bx	lr
   23b84:	20008740 	.word	0x20008740

00023b88 <nrfx_gpiote_channel_get>:
{
   23b88:	b508      	push	{r3, lr}
   23b8a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23b8c:	f7ff fe64 	bl	23858 <pin_in_use_by_te>
   23b90:	b138      	cbz	r0, 23ba2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23b92:	4b05      	ldr	r3, [pc, #20]	; (23ba8 <nrfx_gpiote_channel_get+0x20>)
   23b94:	3208      	adds	r2, #8
   23b96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   23b9a:	4804      	ldr	r0, [pc, #16]	; (23bac <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23b9c:	0b5b      	lsrs	r3, r3, #13
   23b9e:	700b      	strb	r3, [r1, #0]
}
   23ba0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23ba2:	4803      	ldr	r0, [pc, #12]	; (23bb0 <nrfx_gpiote_channel_get+0x28>)
   23ba4:	e7fc      	b.n	23ba0 <nrfx_gpiote_channel_get+0x18>
   23ba6:	bf00      	nop
   23ba8:	20008740 	.word	0x20008740
   23bac:	0bad0000 	.word	0x0bad0000
   23bb0:	0bad0004 	.word	0x0bad0004

00023bb4 <nrfx_gpiote_init>:
{
   23bb4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23bb6:	4c0f      	ldr	r4, [pc, #60]	; (23bf4 <nrfx_gpiote_init+0x40>)
   23bb8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   23bbc:	b9bd      	cbnz	r5, 23bee <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   23bbe:	2260      	movs	r2, #96	; 0x60
   23bc0:	4629      	mov	r1, r5
   23bc2:	f104 0010 	add.w	r0, r4, #16
   23bc6:	f00d fe6c 	bl	318a2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   23bca:	202f      	movs	r0, #47	; 0x2f
   23bcc:	f7ed faf6 	bl	111bc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23bd0:	4b09      	ldr	r3, [pc, #36]	; (23bf8 <nrfx_gpiote_init+0x44>)
    return err_code;
   23bd2:	480a      	ldr	r0, [pc, #40]	; (23bfc <nrfx_gpiote_init+0x48>)
   23bd4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   23bd8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   23bdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23be0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23be4:	2301      	movs	r3, #1
   23be6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   23bea:	6763      	str	r3, [r4, #116]	; 0x74
}
   23bec:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   23bee:	4804      	ldr	r0, [pc, #16]	; (23c00 <nrfx_gpiote_init+0x4c>)
   23bf0:	e7fc      	b.n	23bec <nrfx_gpiote_init+0x38>
   23bf2:	bf00      	nop
   23bf4:	20008740 	.word	0x20008740
   23bf8:	4002f000 	.word	0x4002f000
   23bfc:	0bad0000 	.word	0x0bad0000
   23c00:	0bad0005 	.word	0x0bad0005

00023c04 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   23c04:	4b03      	ldr	r3, [pc, #12]	; (23c14 <nrfx_gpiote_is_init+0x10>)
   23c06:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   23c0a:	3800      	subs	r0, #0
   23c0c:	bf18      	it	ne
   23c0e:	2001      	movne	r0, #1
   23c10:	4770      	bx	lr
   23c12:	bf00      	nop
   23c14:	20008740 	.word	0x20008740

00023c18 <nrfx_gpiote_channel_free>:
{
   23c18:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   23c1a:	4801      	ldr	r0, [pc, #4]	; (23c20 <nrfx_gpiote_channel_free+0x8>)
   23c1c:	f7ff bc48 	b.w	234b0 <nrfx_flag32_free>
   23c20:	200087b0 	.word	0x200087b0

00023c24 <nrfx_gpiote_channel_alloc>:
{
   23c24:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   23c26:	4801      	ldr	r0, [pc, #4]	; (23c2c <nrfx_gpiote_channel_alloc+0x8>)
   23c28:	f7ff bc26 	b.w	23478 <nrfx_flag32_alloc>
   23c2c:	200087b0 	.word	0x200087b0

00023c30 <nrfx_gpiote_trigger_enable>:
{
   23c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23c32:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23c34:	f7ff fe10 	bl	23858 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23c38:	4b1d      	ldr	r3, [pc, #116]	; (23cb0 <nrfx_gpiote_trigger_enable+0x80>)
   23c3a:	f104 0208 	add.w	r2, r4, #8
   23c3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23c42:	b1d0      	cbz	r0, 23c7a <nrfx_gpiote_trigger_enable+0x4a>
   23c44:	f013 0502 	ands.w	r5, r3, #2
   23c48:	d117      	bne.n	23c7a <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   23c4a:	481a      	ldr	r0, [pc, #104]	; (23cb4 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23c4c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   23c4e:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23c50:	5085      	str	r5, [r0, r2]
   23c52:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   23c54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23c58:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   23c5c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23c60:	f040 0001 	orr.w	r0, r0, #1
   23c64:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   23c68:	b129      	cbz	r1, 23c76 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   23c6a:	2201      	movs	r2, #1
   23c6c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   23c70:	4a11      	ldr	r2, [pc, #68]	; (23cb8 <nrfx_gpiote_trigger_enable+0x88>)
   23c72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23c76:	b003      	add	sp, #12
   23c78:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23c7a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   23c7e:	2b04      	cmp	r3, #4
   23c80:	d011      	beq.n	23ca6 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   23c82:	2b05      	cmp	r3, #5
   23c84:	d011      	beq.n	23caa <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23c86:	a801      	add	r0, sp, #4
   23c88:	9401      	str	r4, [sp, #4]
   23c8a:	f7ff fdd5 	bl	23838 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23c8e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   23c90:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23c92:	40d9      	lsrs	r1, r3
   23c94:	f001 0101 	and.w	r1, r1, #1
   23c98:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23c9a:	4620      	mov	r0, r4
}
   23c9c:	b003      	add	sp, #12
   23c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23ca2:	f00c ba22 	b.w	300ea <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   23ca6:	2103      	movs	r1, #3
   23ca8:	e7f7      	b.n	23c9a <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   23caa:	2102      	movs	r1, #2
   23cac:	e7f5      	b.n	23c9a <nrfx_gpiote_trigger_enable+0x6a>
   23cae:	bf00      	nop
   23cb0:	20008740 	.word	0x20008740
   23cb4:	4002f100 	.word	0x4002f100
   23cb8:	4002f000 	.word	0x4002f000

00023cbc <nrfx_gpiote_trigger_disable>:
{
   23cbc:	b508      	push	{r3, lr}
   23cbe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23cc0:	f7ff fdca 	bl	23858 <pin_in_use_by_te>
   23cc4:	b1c0      	cbz	r0, 23cf8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23cc6:	4b0f      	ldr	r3, [pc, #60]	; (23d04 <nrfx_gpiote_trigger_disable+0x48>)
   23cc8:	f102 0108 	add.w	r1, r2, #8
   23ccc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23cd0:	0799      	lsls	r1, r3, #30
   23cd2:	d411      	bmi.n	23cf8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23cd4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23cd6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23cd8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   23cda:	490b      	ldr	r1, [pc, #44]	; (23d08 <nrfx_gpiote_trigger_disable+0x4c>)
   23cdc:	009b      	lsls	r3, r3, #2
   23cde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23ce2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23ce6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   23cea:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   23cee:	f022 0203 	bic.w	r2, r2, #3
   23cf2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   23cf6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23cf8:	2100      	movs	r1, #0
}
   23cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23cfe:	4610      	mov	r0, r2
   23d00:	f00c b9f3 	b.w	300ea <nrf_gpio_cfg_sense_set>
   23d04:	20008740 	.word	0x20008740
   23d08:	4002f000 	.word	0x4002f000

00023d0c <nrfx_gpiote_pin_uninit>:
{
   23d0c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23d0e:	4b10      	ldr	r3, [pc, #64]	; (23d50 <nrfx_gpiote_pin_uninit+0x44>)
   23d10:	f100 0208 	add.w	r2, r0, #8
   23d14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   23d18:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   23d1a:	07db      	lsls	r3, r3, #31
   23d1c:	d516      	bpl.n	23d4c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   23d1e:	f7ff ffcd 	bl	23cbc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   23d22:	4620      	mov	r0, r4
   23d24:	f7ff fdea 	bl	238fc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23d28:	a801      	add	r0, sp, #4
   23d2a:	9401      	str	r4, [sp, #4]
   23d2c:	f7ff fd84 	bl	23838 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   23d30:	9b01      	ldr	r3, [sp, #4]
   23d32:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   23d36:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   23d3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23d3e:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   23d42:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   23d46:	4803      	ldr	r0, [pc, #12]	; (23d54 <nrfx_gpiote_pin_uninit+0x48>)
}
   23d48:	b002      	add	sp, #8
   23d4a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23d4c:	4802      	ldr	r0, [pc, #8]	; (23d58 <nrfx_gpiote_pin_uninit+0x4c>)
   23d4e:	e7fb      	b.n	23d48 <nrfx_gpiote_pin_uninit+0x3c>
   23d50:	20008740 	.word	0x20008740
   23d54:	0bad0000 	.word	0x0bad0000
   23d58:	0bad0004 	.word	0x0bad0004

00023d5c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   23d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   23d60:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   23d62:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23d64:	4634      	mov	r4, r6
{
   23d66:	4b63      	ldr	r3, [pc, #396]	; (23ef4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   23d68:	4863      	ldr	r0, [pc, #396]	; (23ef8 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23d6a:	4964      	ldr	r1, [pc, #400]	; (23efc <nrfx_gpiote_irq_handler+0x1a0>)
{
   23d6c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23d6e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   23d70:	b135      	cbz	r5, 23d80 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   23d72:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   23d76:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23d78:	bf1e      	ittt	ne
   23d7a:	601c      	strne	r4, [r3, #0]
   23d7c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   23d7e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23d80:	3304      	adds	r3, #4
   23d82:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   23d84:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23d88:	d1f1      	bne.n	23d6e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23d8a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23ef8 <nrfx_gpiote_irq_handler+0x19c>
   23d8e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   23d92:	2b00      	cmp	r3, #0
   23d94:	f000 8091 	beq.w	23eba <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   23d98:	f8df 8164 	ldr.w	r8, [pc, #356]	; 23f00 <nrfx_gpiote_irq_handler+0x1a4>
   23d9c:	f8d8 3020 	ldr.w	r3, [r8, #32]
   23da0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23da2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   23da6:	4b57      	ldr	r3, [pc, #348]	; (23f04 <nrfx_gpiote_irq_handler+0x1a8>)
   23da8:	6a1a      	ldr	r2, [r3, #32]
   23daa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23dac:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23dae:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   23db2:	f10d 0b10 	add.w	fp, sp, #16
   23db6:	ea4f 1349 	mov.w	r3, r9, lsl #5
   23dba:	9300      	str	r3, [sp, #0]
   23dbc:	e048      	b.n	23e50 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   23dbe:	fa94 f4a4 	rbit	r4, r4
   23dc2:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   23dc6:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23dc8:	4a4f      	ldr	r2, [pc, #316]	; (23f08 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   23dca:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23dcc:	f104 0308 	add.w	r3, r4, #8
   23dd0:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   23dd4:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   23dd6:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   23dd8:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   23ddc:	fa03 f202 	lsl.w	r2, r3, r2
   23de0:	f81b 3000 	ldrb.w	r3, [fp, r0]
   23de4:	9403      	str	r4, [sp, #12]
   23de6:	ea23 0302 	bic.w	r3, r3, r2
   23dea:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23dee:	a803      	add	r0, sp, #12
   23df0:	f7ff fd22 	bl	23838 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23df4:	9b03      	ldr	r3, [sp, #12]
   23df6:	08b9      	lsrs	r1, r7, #2
   23df8:	3380      	adds	r3, #128	; 0x80
   23dfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   23dfe:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   23e02:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23e04:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   23e06:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   23e0a:	d52b      	bpl.n	23e64 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   23e0c:	4620      	mov	r0, r4
   23e0e:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23e10:	b2dd      	uxtb	r5, r3
   23e12:	f7ff fd2b 	bl	2386c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e16:	a803      	add	r0, sp, #12
   23e18:	9403      	str	r4, [sp, #12]
   23e1a:	f7ff fd0d 	bl	23838 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23e1e:	9b03      	ldr	r3, [sp, #12]
   23e20:	3380      	adds	r3, #128	; 0x80
   23e22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   23e26:	f3c3 4301 	ubfx	r3, r3, #16, #2
   23e2a:	429d      	cmp	r5, r3
   23e2c:	d107      	bne.n	23e3e <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23e2e:	2100      	movs	r1, #0
   23e30:	4620      	mov	r0, r4
   23e32:	f00c f95a 	bl	300ea <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   23e36:	4629      	mov	r1, r5
   23e38:	4620      	mov	r0, r4
   23e3a:	f00c f956 	bl	300ea <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e3e:	a803      	add	r0, sp, #12
   23e40:	9403      	str	r4, [sp, #12]
   23e42:	f7ff fcf9 	bl	23838 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   23e46:	2201      	movs	r2, #1
   23e48:	9b03      	ldr	r3, [sp, #12]
   23e4a:	fa02 f303 	lsl.w	r3, r2, r3
   23e4e:	6203      	str	r3, [r0, #32]
            while (latch[i])
   23e50:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   23e54:	2c00      	cmp	r4, #0
   23e56:	d1b2      	bne.n	23dbe <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23e58:	f1b9 0f00 	cmp.w	r9, #0
   23e5c:	d11d      	bne.n	23e9a <nrfx_gpiote_irq_handler+0x13e>
   23e5e:	f04f 0901 	mov.w	r9, #1
   23e62:	e7a8      	b.n	23db6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23e64:	2b02      	cmp	r3, #2
   23e66:	d10c      	bne.n	23e82 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23e68:	2103      	movs	r1, #3
   23e6a:	4620      	mov	r0, r4
   23e6c:	f00c f93d 	bl	300ea <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23e70:	f005 0305 	and.w	r3, r5, #5
   23e74:	2b01      	cmp	r3, #1
   23e76:	d1e2      	bne.n	23e3e <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   23e78:	4639      	mov	r1, r7
   23e7a:	4620      	mov	r0, r4
   23e7c:	f7ff fcf6 	bl	2386c <call_handler>
   23e80:	e7dd      	b.n	23e3e <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23e82:	2102      	movs	r1, #2
   23e84:	4620      	mov	r0, r4
   23e86:	9301      	str	r3, [sp, #4]
   23e88:	f00c f92f 	bl	300ea <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23e8c:	2d03      	cmp	r5, #3
   23e8e:	d0f3      	beq.n	23e78 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23e90:	9b01      	ldr	r3, [sp, #4]
   23e92:	2b03      	cmp	r3, #3
   23e94:	d1d3      	bne.n	23e3e <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   23e96:	2d02      	cmp	r5, #2
   23e98:	e7ed      	b.n	23e76 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23e9a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   23e9e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   23ea2:	f8d8 3020 	ldr.w	r3, [r8, #32]
   23ea6:	4917      	ldr	r1, [pc, #92]	; (23f04 <nrfx_gpiote_irq_handler+0x1a8>)
   23ea8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23eaa:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   23eae:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   23eb0:	4313      	orrs	r3, r2
   23eb2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23eb4:	620a      	str	r2, [r1, #32]
   23eb6:	f47f af7a 	bne.w	23dae <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   23eba:	2401      	movs	r4, #1
    while (mask)
   23ebc:	b916      	cbnz	r6, 23ec4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   23ebe:	b007      	add	sp, #28
   23ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   23ec4:	fa96 f3a6 	rbit	r3, r6
   23ec8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   23ecc:	fa04 f203 	lsl.w	r2, r4, r3
   23ed0:	009b      	lsls	r3, r3, #2
   23ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23ed6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23eda:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   23ede:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23ee2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   23ee6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   23eea:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23eee:	f7ff fcbd 	bl	2386c <call_handler>
   23ef2:	e7e3      	b.n	23ebc <nrfx_gpiote_irq_handler+0x160>
   23ef4:	4002f100 	.word	0x4002f100
   23ef8:	4002f000 	.word	0x4002f000
   23efc:	4002f120 	.word	0x4002f120
   23f00:	40842500 	.word	0x40842500
   23f04:	40842800 	.word	0x40842800
   23f08:	20008740 	.word	0x20008740

00023f0c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   23f0c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23f0e:	4c08      	ldr	r4, [pc, #32]	; (23f30 <nrfx_ipc_init+0x24>)
{
   23f10:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23f12:	7923      	ldrb	r3, [r4, #4]
{
   23f14:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23f16:	b943      	cbnz	r3, 23f2a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   23f18:	202a      	movs	r0, #42	; 0x2a
   23f1a:	f7ed f94f 	bl	111bc <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23f1e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   23f20:	4804      	ldr	r0, [pc, #16]	; (23f34 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23f22:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   23f24:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   23f26:	60a5      	str	r5, [r4, #8]
}
   23f28:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   23f2a:	4803      	ldr	r0, [pc, #12]	; (23f38 <nrfx_ipc_init+0x2c>)
   23f2c:	e7fc      	b.n	23f28 <nrfx_ipc_init+0x1c>
   23f2e:	bf00      	nop
   23f30:	20030d28 	.word	0x20030d28
   23f34:	0bad0000 	.word	0x0bad0000
   23f38:	0bad000c 	.word	0x0bad000c

00023f3c <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23f3c:	2300      	movs	r3, #0
{
   23f3e:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   23f40:	4a0d      	ldr	r2, [pc, #52]	; (23f78 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   23f42:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23f46:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23f4a:	3301      	adds	r3, #1
   23f4c:	2b10      	cmp	r3, #16
   23f4e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   23f52:	d1f6      	bne.n	23f42 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   23f54:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   23f56:	4a08      	ldr	r2, [pc, #32]	; (23f78 <nrfx_ipc_config_load+0x3c>)
   23f58:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   23f5c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   23f60:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23f64:	3301      	adds	r3, #1
   23f66:	2b10      	cmp	r3, #16
   23f68:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   23f6c:	d1f6      	bne.n	23f5c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   23f6e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   23f72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23f76:	bd30      	pop	{r4, r5, pc}
   23f78:	4002a000 	.word	0x4002a000

00023f7c <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   23f7c:	2301      	movs	r3, #1
   23f7e:	4a02      	ldr	r2, [pc, #8]	; (23f88 <nrfx_ipc_receive_event_enable+0xc>)
   23f80:	4083      	lsls	r3, r0
   23f82:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23f86:	4770      	bx	lr
   23f88:	4002a000 	.word	0x4002a000

00023f8c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   23f8c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   23f8e:	4a02      	ldr	r2, [pc, #8]	; (23f98 <nrfx_ipc_receive_event_disable+0xc>)
   23f90:	4083      	lsls	r3, r0
   23f92:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   23f96:	4770      	bx	lr
   23f98:	4002a000 	.word	0x4002a000

00023f9c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   23f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   23f9e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23fa0:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   23fa2:	4b0b      	ldr	r3, [pc, #44]	; (23fd0 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   23fa4:	4d0b      	ldr	r5, [pc, #44]	; (23fd4 <nrfx_ipc_irq_handler+0x38>)
   23fa6:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   23faa:	b904      	cbnz	r4, 23fae <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   23fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   23fae:	fa94 f0a4 	rbit	r0, r4
   23fb2:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   23fb6:	fa06 f300 	lsl.w	r3, r6, r0
   23fba:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23fbe:	4b06      	ldr	r3, [pc, #24]	; (23fd8 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   23fc0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23fc2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   23fc4:	682b      	ldr	r3, [r5, #0]
   23fc6:	2b00      	cmp	r3, #0
   23fc8:	d0ef      	beq.n	23faa <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   23fca:	68a9      	ldr	r1, [r5, #8]
   23fcc:	4798      	blx	r3
   23fce:	e7ec      	b.n	23faa <nrfx_ipc_irq_handler+0xe>
   23fd0:	4002a000 	.word	0x4002a000
   23fd4:	20030d28 	.word	0x20030d28
   23fd8:	4002a100 	.word	0x4002a100

00023fdc <nvmc_word_write>:
   23fdc:	4a04      	ldr	r2, [pc, #16]	; (23ff0 <nvmc_word_write+0x14>)
   23fde:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   23fe2:	07db      	lsls	r3, r3, #31
   23fe4:	d5fb      	bpl.n	23fde <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   23fe6:	6001      	str	r1, [r0, #0]
   23fe8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   23fec:	4770      	bx	lr
   23fee:	bf00      	nop
   23ff0:	40039000 	.word	0x40039000

00023ff4 <nrfx_nvmc_page_erase>:
    return !(addr % flash_page_size_get());
   23ff4:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   23ff8:	b97b      	cbnz	r3, 2401a <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   23ffa:	2202      	movs	r2, #2
   23ffc:	4b08      	ldr	r3, [pc, #32]	; (24020 <nrfx_nvmc_page_erase+0x2c>)
   23ffe:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   24002:	f04f 32ff 	mov.w	r2, #4294967295
   24006:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24008:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2400c:	07d2      	lsls	r2, r2, #31
   2400e:	d5fb      	bpl.n	24008 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   24010:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   24012:	4804      	ldr	r0, [pc, #16]	; (24024 <nrfx_nvmc_page_erase+0x30>)
   24014:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   24018:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   2401a:	4803      	ldr	r0, [pc, #12]	; (24028 <nrfx_nvmc_page_erase+0x34>)
}
   2401c:	4770      	bx	lr
   2401e:	bf00      	nop
   24020:	40039000 	.word	0x40039000
   24024:	0bad0000 	.word	0x0bad0000
   24028:	0bad000a 	.word	0x0bad000a

0002402c <nrfx_nvmc_word_write>:
   2402c:	2301      	movs	r3, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2402e:	b510      	push	{r4, lr}
   24030:	4c04      	ldr	r4, [pc, #16]	; (24044 <nrfx_nvmc_word_write+0x18>)
   24032:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   24036:	f7ff ffd1 	bl	23fdc <nvmc_word_write>
   2403a:	2300      	movs	r3, #0
   2403c:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   24040:	bd10      	pop	{r4, pc}
   24042:	bf00      	nop
   24044:	40039000 	.word	0x40039000

00024048 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   24048:	b570      	push	{r4, r5, r6, lr}
   2404a:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   2404e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   24052:	d168      	bne.n	24126 <qspi_xfer+0xde>
   24054:	0784      	lsls	r4, r0, #30
   24056:	d166      	bne.n	24126 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   24058:	4d35      	ldr	r5, [pc, #212]	; (24130 <qspi_xfer+0xe8>)
   2405a:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   2405e:	2c01      	cmp	r4, #1
   24060:	d001      	beq.n	24066 <qspi_xfer+0x1e>
   24062:	429c      	cmp	r4, r3
   24064:	d161      	bne.n	2412a <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   24066:	682c      	ldr	r4, [r5, #0]
   24068:	bb04      	cbnz	r4, 240ac <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2406a:	2b02      	cmp	r3, #2
   2406c:	4b31      	ldr	r3, [pc, #196]	; (24134 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   2406e:	bf0b      	itete	eq
   24070:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   24074:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   24078:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   2407c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   24080:	bf0b      	itete	eq
   24082:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   24086:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   2408a:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   2408c:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2408e:	2100      	movs	r1, #0
   24090:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24094:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   24098:	2201      	movs	r2, #1
   2409a:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   2409e:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   240a0:	4a24      	ldr	r2, [pc, #144]	; (24134 <qspi_xfer+0xec>)
   240a2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   240a6:	2b00      	cmp	r3, #0
   240a8:	d0fb      	beq.n	240a2 <qspi_xfer+0x5a>
   240aa:	e00d      	b.n	240c8 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
   240ac:	68ae      	ldr	r6, [r5, #8]
   240ae:	4c21      	ldr	r4, [pc, #132]	; (24134 <qspi_xfer+0xec>)
   240b0:	b166      	cbz	r6, 240cc <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   240b2:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   240b4:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   240b6:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   240b8:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   240ba:	d12d      	bne.n	24118 <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
   240bc:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   240c0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   240c4:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   240c8:	481b      	ldr	r0, [pc, #108]	; (24138 <qspi_xfer+0xf0>)
}
   240ca:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   240cc:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   240ce:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   240d2:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   240d4:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   240d6:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   240d8:	bf0c      	ite	eq
   240da:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   240de:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   240e2:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   240e6:	bf0b      	itete	eq
   240e8:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   240ec:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   240f0:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   240f4:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   240f8:	bf08      	it	eq
   240fa:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   240fc:	490d      	ldr	r1, [pc, #52]	; (24134 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
   240fe:	bf18      	it	ne
   24100:	2304      	movne	r3, #4
   24102:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   24106:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2410c:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   24110:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24114:	601a      	str	r2, [r3, #0]
}
   24116:	e7d7      	b.n	240c8 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
   24118:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   2411c:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   24120:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   24124:	e7d0      	b.n	240c8 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
   24126:	4805      	ldr	r0, [pc, #20]	; (2413c <qspi_xfer+0xf4>)
   24128:	e7cf      	b.n	240ca <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
   2412a:	4805      	ldr	r0, [pc, #20]	; (24140 <qspi_xfer+0xf8>)
   2412c:	e7cd      	b.n	240ca <qspi_xfer+0x82>
   2412e:	bf00      	nop
   24130:	20030d34 	.word	0x20030d34
   24134:	4002b000 	.word	0x4002b000
   24138:	0bad0000 	.word	0x0bad0000
   2413c:	0bad000a 	.word	0x0bad000a
   24140:	0bad000b 	.word	0x0bad000b

00024144 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   24144:	b538      	push	{r3, r4, r5, lr}
   24146:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24148:	4d06      	ldr	r5, [pc, #24]	; (24164 <qspi_ready_wait+0x20>)
   2414a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   2414e:	b933      	cbnz	r3, 2415e <qspi_ready_wait+0x1a>
   24150:	200a      	movs	r0, #10
   24152:	f00b ff7d 	bl	30050 <nrfx_busy_wait>
   24156:	3c01      	subs	r4, #1
   24158:	d1f7      	bne.n	2414a <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   2415a:	4803      	ldr	r0, [pc, #12]	; (24168 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   2415c:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   2415e:	4803      	ldr	r0, [pc, #12]	; (2416c <qspi_ready_wait+0x28>)
   24160:	e7fc      	b.n	2415c <qspi_ready_wait+0x18>
   24162:	bf00      	nop
   24164:	4002b000 	.word	0x4002b000
   24168:	0bad0007 	.word	0x0bad0007
   2416c:	0bad0000 	.word	0x0bad0000

00024170 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   24170:	4b08      	ldr	r3, [pc, #32]	; (24194 <qspi_event_xfer_handle.constprop.0+0x24>)
   24172:	689a      	ldr	r2, [r3, #8]
   24174:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   24176:	691a      	ldr	r2, [r3, #16]
   24178:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   2417a:	699a      	ldr	r2, [r3, #24]
   2417c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   2417e:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   24180:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   24182:	b132      	cbz	r2, 24192 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   24184:	695a      	ldr	r2, [r3, #20]
   24186:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   24188:	69da      	ldr	r2, [r3, #28]
   2418a:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   2418c:	2200      	movs	r2, #0
   2418e:	60da      	str	r2, [r3, #12]
   24190:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   24192:	4770      	bx	lr
   24194:	20030d34 	.word	0x20030d34

00024198 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   24198:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
   2419a:	4a0a      	ldr	r2, [pc, #40]	; (241c4 <nrf_gpio_cfg.constprop.0+0x2c>)
   2419c:	4c0a      	ldr	r4, [pc, #40]	; (241c8 <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
   2419e:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   241a2:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   241a4:	2801      	cmp	r0, #1
   241a6:	bf18      	it	ne
   241a8:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   241aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   241ae:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   241b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   241b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   241ba:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   241be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   241c2:	bd10      	pop	{r4, pc}
   241c4:	40842800 	.word	0x40842800
   241c8:	40842500 	.word	0x40842500

000241cc <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   241cc:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   241ce:	4b0e      	ldr	r3, [pc, #56]	; (24208 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   241d0:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   241d2:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   241d6:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   241da:	2807      	cmp	r0, #7
   241dc:	d813      	bhi.n	24206 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   241de:	e8df f000 	tbb	[pc, r0]
   241e2:	0f11      	.short	0x0f11
   241e4:	080a0b0d 	.word	0x080a0b0d
   241e8:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   241ea:	0e10      	lsrs	r0, r2, #24
   241ec:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   241ee:	0c10      	lsrs	r0, r2, #16
   241f0:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   241f2:	0a10      	lsrs	r0, r2, #8
   241f4:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   241f6:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   241f8:	0e1a      	lsrs	r2, r3, #24
   241fa:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   241fc:	0c1a      	lsrs	r2, r3, #16
   241fe:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   24200:	0a1a      	lsrs	r2, r3, #8
   24202:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   24204:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   24206:	bd10      	pop	{r4, pc}
   24208:	4002b000 	.word	0x4002b000

0002420c <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   2420c:	3802      	subs	r0, #2
   2420e:	2807      	cmp	r0, #7
   24210:	d81f      	bhi.n	24252 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   24212:	e8df f000 	tbb	[pc, r0]
   24216:	2729      	.short	0x2729
   24218:	21231125 	.word	0x21231125
   2421c:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   2421e:	79cb      	ldrb	r3, [r1, #7]
   24220:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   24222:	798a      	ldrb	r2, [r1, #6]
   24224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   24228:	794a      	ldrb	r2, [r1, #5]
   2422a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   2422e:	790a      	ldrb	r2, [r1, #4]
   24230:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   24232:	4a0e      	ldr	r2, [pc, #56]	; (2426c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   24234:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   24238:	78cb      	ldrb	r3, [r1, #3]
   2423a:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   2423c:	788a      	ldrb	r2, [r1, #2]
   2423e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   24242:	784a      	ldrb	r2, [r1, #1]
   24244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   24248:	780a      	ldrb	r2, [r1, #0]
   2424a:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   2424c:	4a07      	ldr	r2, [pc, #28]	; (2426c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   2424e:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   24252:	4770      	bx	lr
    switch (length)
   24254:	2300      	movs	r3, #0
   24256:	e7e4      	b.n	24222 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   24258:	2300      	movs	r3, #0
   2425a:	e7e5      	b.n	24228 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   2425c:	2300      	movs	r3, #0
   2425e:	e7e6      	b.n	2422e <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   24260:	2300      	movs	r3, #0
   24262:	e7eb      	b.n	2423c <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   24264:	2300      	movs	r3, #0
   24266:	e7ec      	b.n	24242 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   24268:	2300      	movs	r3, #0
   2426a:	e7ed      	b.n	24248 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   2426c:	4002b000 	.word	0x4002b000

00024270 <nrfx_qspi_init>:
{
   24270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   24272:	4f67      	ldr	r7, [pc, #412]	; (24410 <nrfx_qspi_init+0x1a0>)
{
   24274:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   24276:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
{
   2427a:	460d      	mov	r5, r1
   2427c:	4616      	mov	r6, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   2427e:	2b00      	cmp	r3, #0
   24280:	f040 80c2 	bne.w	24408 <nrfx_qspi_init+0x198>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   24284:	7cc2      	ldrb	r2, [r0, #19]
   24286:	b112      	cbz	r2, 2428e <nrfx_qspi_init+0x1e>
   24288:	7d03      	ldrb	r3, [r0, #20]
   2428a:	2b00      	cmp	r3, #0
   2428c:	d16c      	bne.n	24368 <nrfx_qspi_init+0xf8>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2428e:	7920      	ldrb	r0, [r4, #4]
   24290:	28ff      	cmp	r0, #255	; 0xff
   24292:	f000 80bb 	beq.w	2440c <nrfx_qspi_init+0x19c>
   24296:	7963      	ldrb	r3, [r4, #5]
   24298:	2bff      	cmp	r3, #255	; 0xff
   2429a:	f000 80b7 	beq.w	2440c <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2429e:	79a3      	ldrb	r3, [r4, #6]
   242a0:	2bff      	cmp	r3, #255	; 0xff
   242a2:	f000 80b3 	beq.w	2440c <nrfx_qspi_init+0x19c>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   242a6:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   242a8:	29ff      	cmp	r1, #255	; 0xff
   242aa:	f000 80af 	beq.w	2440c <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   242ae:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   242b0:	f8df c160 	ldr.w	ip, [pc, #352]	; 24414 <nrfx_qspi_init+0x1a4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   242b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   242b8:	4563      	cmp	r3, ip
   242ba:	f040 80a7 	bne.w	2440c <nrfx_qspi_init+0x19c>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   242be:	290e      	cmp	r1, #14
   242c0:	f040 80a4 	bne.w	2440c <nrfx_qspi_init+0x19c>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   242c4:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   242c6:	2bff      	cmp	r3, #255	; 0xff
   242c8:	d002      	beq.n	242d0 <nrfx_qspi_init+0x60>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   242ca:	2b0f      	cmp	r3, #15
   242cc:	f040 809e 	bne.w	2440c <nrfx_qspi_init+0x19c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   242d0:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   242d2:	2bff      	cmp	r3, #255	; 0xff
   242d4:	d002      	beq.n	242dc <nrfx_qspi_init+0x6c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   242d6:	2b10      	cmp	r3, #16
   242d8:	f040 8098 	bne.w	2440c <nrfx_qspi_init+0x19c>
    if (!p_config->skip_gpio_cfg)
   242dc:	b9b2      	cbnz	r2, 2430c <nrfx_qspi_init+0x9c>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   242de:	2103      	movs	r1, #3
   242e0:	f7ff ff5a 	bl	24198 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   242e4:	7960      	ldrb	r0, [r4, #5]
   242e6:	f7ff ff57 	bl	24198 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   242ea:	79a0      	ldrb	r0, [r4, #6]
   242ec:	f7ff ff54 	bl	24198 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   242f0:	79e0      	ldrb	r0, [r4, #7]
   242f2:	f7ff ff51 	bl	24198 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   242f6:	7a20      	ldrb	r0, [r4, #8]
   242f8:	28ff      	cmp	r0, #255	; 0xff
   242fa:	d001      	beq.n	24300 <nrfx_qspi_init+0x90>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   242fc:	f7ff ff4c 	bl	24198 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24300:	7a60      	ldrb	r0, [r4, #9]
   24302:	28ff      	cmp	r0, #255	; 0xff
   24304:	d002      	beq.n	2430c <nrfx_qspi_init+0x9c>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   24306:	2103      	movs	r1, #3
   24308:	f7ff ff46 	bl	24198 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   2430c:	7d23      	ldrb	r3, [r4, #20]
   2430e:	bb5b      	cbnz	r3, 24368 <nrfx_qspi_init+0xf8>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   24310:	7923      	ldrb	r3, [r4, #4]
   24312:	2bff      	cmp	r3, #255	; 0xff
   24314:	bf14      	ite	ne
   24316:	461a      	movne	r2, r3
   24318:	f04f 32ff 	moveq.w	r2, #4294967295
   2431c:	4b3e      	ldr	r3, [pc, #248]	; (24418 <nrfx_qspi_init+0x1a8>)
   2431e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   24322:	7962      	ldrb	r2, [r4, #5]
   24324:	2aff      	cmp	r2, #255	; 0xff
   24326:	bf08      	it	eq
   24328:	f04f 32ff 	moveq.w	r2, #4294967295
   2432c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   24330:	79a2      	ldrb	r2, [r4, #6]
   24332:	2aff      	cmp	r2, #255	; 0xff
   24334:	bf08      	it	eq
   24336:	f04f 32ff 	moveq.w	r2, #4294967295
   2433a:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   2433e:	79e2      	ldrb	r2, [r4, #7]
   24340:	2aff      	cmp	r2, #255	; 0xff
   24342:	bf08      	it	eq
   24344:	f04f 32ff 	moveq.w	r2, #4294967295
   24348:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   2434c:	7a22      	ldrb	r2, [r4, #8]
   2434e:	2aff      	cmp	r2, #255	; 0xff
   24350:	bf08      	it	eq
   24352:	f04f 32ff 	moveq.w	r2, #4294967295
   24356:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   2435a:	7a62      	ldrb	r2, [r4, #9]
   2435c:	2aff      	cmp	r2, #255	; 0xff
   2435e:	bf08      	it	eq
   24360:	f04f 32ff 	moveq.w	r2, #4294967295
   24364:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   24368:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   2436a:	4a2b      	ldr	r2, [pc, #172]	; (24418 <nrfx_qspi_init+0x1a8>)
   2436c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   24370:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   24372:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   24374:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   24376:	019b      	lsls	r3, r3, #6
   24378:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   2437c:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   2437e:	7b61      	ldrb	r1, [r4, #13]
   24380:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   24384:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   24388:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   2438a:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   2438e:	bbb1      	cbnz	r1, 243fe <nrfx_qspi_init+0x18e>
        regval |= ((1 << 16) | (1 << 17));
   24390:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   24394:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   24398:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   2439c:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   243a0:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   243a4:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   243a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   243aa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   243ae:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   243b0:	7be1      	ldrb	r1, [r4, #15]
   243b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   243b6:	7c21      	ldrb	r1, [r4, #16]
   243b8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   243bc:	7c61      	ldrb	r1, [r4, #17]
   243be:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   243c2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   243c6:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   243c8:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   243cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   243d0:	2301      	movs	r3, #1
   243d2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   243d6:	b115      	cbz	r5, 243de <nrfx_qspi_init+0x16e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   243d8:	202b      	movs	r0, #43	; 0x2b
   243da:	f7ec feef 	bl	111bc <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   243de:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   243e0:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   243e2:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   243e6:	4b0c      	ldr	r3, [pc, #48]	; (24418 <nrfx_qspi_init+0x1a8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   243e8:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   243ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   243f0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   243f4:	601a      	str	r2, [r3, #0]
}
   243f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   243fa:	f7ff bea3 	b.w	24144 <qspi_ready_wait>
        regval &= ~(1 << 17);
   243fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   24402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   24406:	e7c5      	b.n	24394 <nrfx_qspi_init+0x124>
        return NRFX_ERROR_INVALID_STATE;
   24408:	4804      	ldr	r0, [pc, #16]	; (2441c <nrfx_qspi_init+0x1ac>)
}
   2440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2440c:	4804      	ldr	r0, [pc, #16]	; (24420 <nrfx_qspi_init+0x1b0>)
   2440e:	e7fc      	b.n	2440a <nrfx_qspi_init+0x19a>
   24410:	20030d34 	.word	0x20030d34
   24414:	000d1211 	.word	0x000d1211
   24418:	4002b000 	.word	0x4002b000
   2441c:	0bad0005 	.word	0x0bad0005
   24420:	0bad0004 	.word	0x0bad0004

00024424 <nrfx_qspi_cinstr_xfer>:
{
   24424:	b570      	push	{r4, r5, r6, lr}
   24426:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   24428:	4a19      	ldr	r2, [pc, #100]	; (24490 <nrfx_qspi_cinstr_xfer+0x6c>)
{
   2442a:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   2442c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   24430:	2a01      	cmp	r2, #1
   24432:	d12b      	bne.n	2448c <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24434:	2200      	movs	r2, #0
   24436:	4e17      	ldr	r6, [pc, #92]	; (24494 <nrfx_qspi_cinstr_xfer+0x70>)
   24438:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   2443c:	b111      	cbz	r1, 24444 <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   2443e:	7840      	ldrb	r0, [r0, #1]
   24440:	f7ff fee4 	bl	2420c <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   24444:	2301      	movs	r3, #1
   24446:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2444a:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2444c:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2444e:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   24454:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24456:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   24458:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2445a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2445e:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   24460:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   24464:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   24466:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2446a:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   2446e:	f7ff fe69 	bl	24144 <qspi_ready_wait>
   24472:	4b09      	ldr	r3, [pc, #36]	; (24498 <nrfx_qspi_cinstr_xfer+0x74>)
   24474:	4298      	cmp	r0, r3
   24476:	d008      	beq.n	2448a <nrfx_qspi_cinstr_xfer+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24478:	2300      	movs	r3, #0
   2447a:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   2447e:	b11c      	cbz	r4, 24488 <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   24480:	4621      	mov	r1, r4
   24482:	7868      	ldrb	r0, [r5, #1]
   24484:	f7ff fea2 	bl	241cc <nrf_qspi_cinstrdata_get.constprop.0>
        return NRFX_ERROR_BUSY;
   24488:	4804      	ldr	r0, [pc, #16]	; (2449c <nrfx_qspi_cinstr_xfer+0x78>)
}
   2448a:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   2448c:	4804      	ldr	r0, [pc, #16]	; (244a0 <nrfx_qspi_cinstr_xfer+0x7c>)
   2448e:	e7fc      	b.n	2448a <nrfx_qspi_cinstr_xfer+0x66>
   24490:	20030d34 	.word	0x20030d34
   24494:	4002b000 	.word	0x4002b000
   24498:	0bad0007 	.word	0x0bad0007
   2449c:	0bad0000 	.word	0x0bad0000
   244a0:	0bad000b 	.word	0x0bad000b

000244a4 <nrfx_qspi_mem_busy_check>:
{
   244a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   244a6:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   244a8:	4a0c      	ldr	r2, [pc, #48]	; (244dc <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   244aa:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   244ac:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   244ae:	f10d 0207 	add.w	r2, sp, #7
   244b2:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   244b4:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   244b8:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   244bc:	f7ff ffb2 	bl	24424 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   244c0:	4b07      	ldr	r3, [pc, #28]	; (244e0 <nrfx_qspi_mem_busy_check+0x3c>)
   244c2:	4298      	cmp	r0, r3
   244c4:	d106      	bne.n	244d4 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   244c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   244ca:	f013 0f01 	tst.w	r3, #1
   244ce:	4b05      	ldr	r3, [pc, #20]	; (244e4 <nrfx_qspi_mem_busy_check+0x40>)
   244d0:	bf18      	it	ne
   244d2:	4618      	movne	r0, r3
}
   244d4:	b005      	add	sp, #20
   244d6:	f85d fb04 	ldr.w	pc, [sp], #4
   244da:	bf00      	nop
   244dc:	01000205 	.word	0x01000205
   244e0:	0bad0000 	.word	0x0bad0000
   244e4:	0bad000b 	.word	0x0bad000b

000244e8 <nrfx_qspi_uninit>:
{
   244e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   244ec:	202b      	movs	r0, #43	; 0x2b
   244ee:	f7ec fe73 	bl	111d8 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   244f2:	4b21      	ldr	r3, [pc, #132]	; (24578 <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
   244f4:	4e21      	ldr	r6, [pc, #132]	; (2457c <nrfx_qspi_uninit+0x94>)
   244f6:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   244fa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   244fe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   24502:	bf04      	itt	eq
   24504:	4a1e      	ldreq	r2, [pc, #120]	; (24580 <nrfx_qspi_uninit+0x98>)
   24506:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   2450a:	2201      	movs	r2, #1
   2450c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24510:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   24512:	2200      	movs	r2, #0
   24514:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24518:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   2451c:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   24520:	bb22      	cbnz	r2, 2456c <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   24522:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   24526:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   2452a:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   2452c:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   24530:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   24534:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   24538:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   2453c:	f00b fded 	bl	3011a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   24540:	fa5f f089 	uxtb.w	r0, r9
   24544:	f00b fde9 	bl	3011a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   24548:	fa5f f088 	uxtb.w	r0, r8
   2454c:	f00b fde5 	bl	3011a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   24550:	b2f8      	uxtb	r0, r7
   24552:	f00b fde2 	bl	3011a <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24556:	b2e8      	uxtb	r0, r5
   24558:	28ff      	cmp	r0, #255	; 0xff
   2455a:	b2e4      	uxtb	r4, r4
   2455c:	d001      	beq.n	24562 <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
   2455e:	f00b fddc 	bl	3011a <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24562:	2cff      	cmp	r4, #255	; 0xff
   24564:	d002      	beq.n	2456c <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
   24566:	4620      	mov	r0, r4
   24568:	f00b fdd7 	bl	3011a <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   2456c:	2300      	movs	r3, #0
   2456e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   24572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24576:	bf00      	nop
   24578:	4002b000 	.word	0x4002b000
   2457c:	20030d34 	.word	0x20030d34
   24580:	00030100 	.word	0x00030100

00024584 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
   24584:	078b      	lsls	r3, r1, #30
   24586:	d121      	bne.n	245cc <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   24588:	4a12      	ldr	r2, [pc, #72]	; (245d4 <nrfx_qspi_erase+0x50>)
   2458a:	6813      	ldr	r3, [r2, #0]
   2458c:	b11b      	cbz	r3, 24596 <nrfx_qspi_erase+0x12>
   2458e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   24592:	2b01      	cmp	r3, #1
   24594:	d11c      	bne.n	245d0 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   24596:	2304      	movs	r3, #4
   24598:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   2459c:	4b0e      	ldr	r3, [pc, #56]	; (245d8 <nrfx_qspi_erase+0x54>)
   2459e:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245a2:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   245a4:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245a8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245ac:	2101      	movs	r1, #1
   245ae:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   245b0:	6810      	ldr	r0, [r2, #0]
   245b2:	b940      	cbnz	r0, 245c6 <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   245b4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   245b8:	2900      	cmp	r1, #0
   245ba:	d0fb      	beq.n	245b4 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   245bc:	2301      	movs	r3, #1
   245be:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   245c2:	4806      	ldr	r0, [pc, #24]	; (245dc <nrfx_qspi_erase+0x58>)
   245c4:	4770      	bx	lr
    p_reg->INTENSET = mask;
   245c6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   245ca:	e7fa      	b.n	245c2 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
   245cc:	4804      	ldr	r0, [pc, #16]	; (245e0 <nrfx_qspi_erase+0x5c>)
   245ce:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   245d0:	4804      	ldr	r0, [pc, #16]	; (245e4 <nrfx_qspi_erase+0x60>)
}
   245d2:	4770      	bx	lr
   245d4:	20030d34 	.word	0x20030d34
   245d8:	4002b000 	.word	0x4002b000
   245dc:	0bad0000 	.word	0x0bad0000
   245e0:	0bad000a 	.word	0x0bad000a
   245e4:	0bad000b 	.word	0x0bad000b

000245e8 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   245e8:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   245ea:	4b17      	ldr	r3, [pc, #92]	; (24648 <nrfx_qspi_irq_handler+0x60>)
   245ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   245f0:	b1e2      	cbz	r2, 2462c <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245f2:	2200      	movs	r2, #0
    switch (m_cb.state)
   245f4:	4c15      	ldr	r4, [pc, #84]	; (2464c <nrfx_qspi_irq_handler+0x64>)
   245f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   245fa:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   245fe:	2a03      	cmp	r2, #3
   24600:	d015      	beq.n	2462e <nrfx_qspi_irq_handler+0x46>
   24602:	2a04      	cmp	r2, #4
   24604:	d015      	beq.n	24632 <nrfx_qspi_irq_handler+0x4a>
   24606:	2a02      	cmp	r2, #2
   24608:	d104      	bne.n	24614 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   2460a:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   2460c:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   24610:	f7ff fdae 	bl	24170 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   24614:	68a3      	ldr	r3, [r4, #8]
   24616:	b913      	cbnz	r3, 2461e <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   24618:	2301      	movs	r3, #1
   2461a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   2461e:	e9d4 3100 	ldrd	r3, r1, [r4]
   24622:	2000      	movs	r0, #0
   24624:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   24626:	2300      	movs	r3, #0
   24628:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   2462c:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   2462e:	2302      	movs	r3, #2
   24630:	e7ec      	b.n	2460c <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   24632:	2203      	movs	r2, #3
   24634:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   24638:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   2463c:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   2463e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   24642:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   24646:	e7e5      	b.n	24614 <nrfx_qspi_irq_handler+0x2c>
   24648:	4002b000 	.word	0x4002b000
   2464c:	20030d34 	.word	0x20030d34

00024650 <nrf_gpio_pin_clear>:
        case 0: return NRF_P0;
   24650:	4a05      	ldr	r2, [pc, #20]	; (24668 <nrf_gpio_pin_clear+0x18>)
   24652:	4b06      	ldr	r3, [pc, #24]	; (2466c <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
   24654:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   24658:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   2465a:	2801      	cmp	r0, #1
   2465c:	bf18      	it	ne
   2465e:	4613      	movne	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   24660:	2201      	movs	r2, #1
   24662:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   24664:	60da      	str	r2, [r3, #12]
}
   24666:	4770      	bx	lr
   24668:	40842500 	.word	0x40842500
   2466c:	40842800 	.word	0x40842800

00024670 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   24670:	b570      	push	{r4, r5, r6, lr}
        case 0: return NRF_P0;
   24672:	4c0d      	ldr	r4, [pc, #52]	; (246a8 <nrf_gpio_cfg.constprop.0+0x38>)
   24674:	4e0d      	ldr	r6, [pc, #52]	; (246ac <nrf_gpio_cfg.constprop.0+0x3c>)
    *p_pin = pin_number & 0x1F;
   24676:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   2467a:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   2467c:	2801      	cmp	r0, #1
   2467e:	bf18      	it	ne
   24680:	4634      	movne	r4, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   24682:	f89d 0010 	ldrb.w	r0, [sp, #16]
   24686:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   2468a:	0200      	lsls	r0, r0, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2468c:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24690:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
   24694:	4308      	orrs	r0, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   24696:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2469a:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2469e:	4328      	orrs	r0, r5
    reg->PIN_CNF[pin_number] = cnf;
   246a0:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
   246a4:	bd70      	pop	{r4, r5, r6, pc}
   246a6:	bf00      	nop
   246a8:	40842800 	.word	0x40842800
   246ac:	40842500 	.word	0x40842500

000246b0 <nrf_gpio_pin_set>:
        case 0: return NRF_P0;
   246b0:	4a05      	ldr	r2, [pc, #20]	; (246c8 <nrf_gpio_pin_set+0x18>)
   246b2:	4b06      	ldr	r3, [pc, #24]	; (246cc <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   246b4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   246b8:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   246ba:	2801      	cmp	r0, #1
   246bc:	bf18      	it	ne
   246be:	4613      	movne	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   246c0:	2201      	movs	r2, #1
   246c2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   246c4:	609a      	str	r2, [r3, #8]
}
   246c6:	4770      	bx	lr
   246c8:	40842500 	.word	0x40842500
   246cc:	40842800 	.word	0x40842800

000246d0 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   246d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   246d4:	4d87      	ldr	r5, [pc, #540]	; (248f4 <nrfx_spim_init+0x224>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   246d6:	7907      	ldrb	r7, [r0, #4]
{
   246d8:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   246da:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   246de:	7f09      	ldrb	r1, [r1, #28]
{
   246e0:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   246e2:	2900      	cmp	r1, #0
   246e4:	f040 8100 	bne.w	248e8 <nrfx_spim_init+0x218>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   246e8:	2f00      	cmp	r7, #0
   246ea:	f040 80ff 	bne.w	248ec <nrfx_spim_init+0x21c>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   246ee:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   246f2:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   246f4:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   246f6:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   246fa:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   246fc:	d027      	beq.n	2474e <nrfx_spim_init+0x7e>
   246fe:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   24702:	d124      	bne.n	2474e <nrfx_spim_init+0x7e>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   24704:	b119      	cbz	r1, 2470e <nrfx_spim_init+0x3e>
   24706:	7d20      	ldrb	r0, [r4, #20]
   24708:	2800      	cmp	r0, #0
   2470a:	f040 80d5 	bne.w	248b8 <nrfx_spim_init+0x1e8>
   2470e:	487a      	ldr	r0, [pc, #488]	; (248f8 <nrfx_spim_init+0x228>)
   24710:	4581      	cmp	r9, r0
   24712:	d11c      	bne.n	2474e <nrfx_spim_init+0x7e>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   24714:	7820      	ldrb	r0, [r4, #0]
   24716:	28ff      	cmp	r0, #255	; 0xff
   24718:	d002      	beq.n	24720 <nrfx_spim_init+0x50>
   2471a:	2808      	cmp	r0, #8
   2471c:	f040 80e8 	bne.w	248f0 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   24720:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   24722:	28ff      	cmp	r0, #255	; 0xff
   24724:	d002      	beq.n	2472c <nrfx_spim_init+0x5c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   24726:	280b      	cmp	r0, #11
   24728:	f040 80e2 	bne.w	248f0 <nrfx_spim_init+0x220>
   2472c:	2eff      	cmp	r6, #255	; 0xff
   2472e:	d002      	beq.n	24736 <nrfx_spim_init+0x66>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   24730:	2e0c      	cmp	r6, #12
   24732:	f040 80dd 	bne.w	248f0 <nrfx_spim_init+0x220>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   24736:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   24738:	28ff      	cmp	r0, #255	; 0xff
   2473a:	d002      	beq.n	24742 <nrfx_spim_init+0x72>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2473c:	2809      	cmp	r0, #9
   2473e:	f040 80d7 	bne.w	248f0 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   24742:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   24744:	28ff      	cmp	r0, #255	; 0xff
   24746:	d002      	beq.n	2474e <nrfx_spim_init+0x7e>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   24748:	280a      	cmp	r0, #10
   2474a:	f040 80d1 	bne.w	248f0 <nrfx_spim_init+0x220>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   2474e:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   24752:	7fab      	ldrb	r3, [r5, #30]
   24754:	f361 0300 	bfi	r3, r1, #0, #1
   24758:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   2475a:	7922      	ldrb	r2, [r4, #4]
   2475c:	b2db      	uxtb	r3, r3
   2475e:	f362 0341 	bfi	r3, r2, #1, #1
   24762:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   24764:	7c62      	ldrb	r2, [r4, #17]
   24766:	b2db      	uxtb	r3, r3
   24768:	f362 0382 	bfi	r3, r2, #2, #1
   2476c:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   2476e:	78e3      	ldrb	r3, [r4, #3]
   24770:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   24772:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   24774:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   24778:	2b00      	cmp	r3, #0
   2477a:	d142      	bne.n	24802 <nrfx_spim_init+0x132>
                    : NRF_GPIO_PIN_S0S1;
   2477c:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   2477e:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   24780:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   24784:	7b23      	ldrb	r3, [r4, #12]
   24786:	bf08      	it	eq
   24788:	2703      	moveq	r7, #3
   2478a:	2b01      	cmp	r3, #1
   2478c:	f200 8096 	bhi.w	248bc <nrfx_spim_init+0x1ec>
        nrf_gpio_pin_clear(pin_number);
   24790:	f7ff ff5e 	bl	24650 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   24794:	2300      	movs	r3, #0
   24796:	9700      	str	r7, [sp, #0]
   24798:	7820      	ldrb	r0, [r4, #0]
   2479a:	461a      	mov	r2, r3
   2479c:	2101      	movs	r1, #1
   2479e:	f7ff ff67 	bl	24670 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   247a2:	7860      	ldrb	r0, [r4, #1]
   247a4:	28ff      	cmp	r0, #255	; 0xff
   247a6:	d008      	beq.n	247ba <nrfx_spim_init+0xea>
   247a8:	f7ff ff52 	bl	24650 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   247ac:	2201      	movs	r2, #1
   247ae:	9700      	str	r7, [sp, #0]
   247b0:	2300      	movs	r3, #0
   247b2:	4611      	mov	r1, r2
   247b4:	7860      	ldrb	r0, [r4, #1]
   247b6:	f7ff ff5b 	bl	24670 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   247ba:	78a0      	ldrb	r0, [r4, #2]
   247bc:	28ff      	cmp	r0, #255	; 0xff
   247be:	d005      	beq.n	247cc <nrfx_spim_init+0xfc>
            nrf_gpio_cfg(p_config->miso_pin,
   247c0:	2200      	movs	r2, #0
   247c2:	9700      	str	r7, [sp, #0]
   247c4:	4611      	mov	r1, r2
   247c6:	7ba3      	ldrb	r3, [r4, #14]
   247c8:	f7ff ff52 	bl	24670 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   247cc:	78e0      	ldrb	r0, [r4, #3]
   247ce:	28ff      	cmp	r0, #255	; 0xff
   247d0:	d00b      	beq.n	247ea <nrfx_spim_init+0x11a>
    if (value == 0)
   247d2:	7923      	ldrb	r3, [r4, #4]
   247d4:	2b00      	cmp	r3, #0
   247d6:	d074      	beq.n	248c2 <nrfx_spim_init+0x1f2>
        nrf_gpio_pin_clear(pin_number);
   247d8:	f7ff ff3a 	bl	24650 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   247dc:	2201      	movs	r2, #1
   247de:	9700      	str	r7, [sp, #0]
   247e0:	2300      	movs	r3, #0
   247e2:	4611      	mov	r1, r2
   247e4:	78e0      	ldrb	r0, [r4, #3]
   247e6:	f7ff ff43 	bl	24670 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   247ea:	7be0      	ldrb	r0, [r4, #15]
   247ec:	28ff      	cmp	r0, #255	; 0xff
   247ee:	d008      	beq.n	24802 <nrfx_spim_init+0x132>
        nrf_gpio_pin_set(pin_number);
   247f0:	f7ff ff5e 	bl	246b0 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   247f4:	2201      	movs	r2, #1
   247f6:	9700      	str	r7, [sp, #0]
   247f8:	2300      	movs	r3, #0
   247fa:	4611      	mov	r1, r2
   247fc:	7be0      	ldrb	r0, [r4, #15]
   247fe:	f7ff ff37 	bl	24670 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   24802:	7d23      	ldrb	r3, [r4, #20]
   24804:	bb6b      	cbnz	r3, 24862 <nrfx_spim_init+0x192>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   24806:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   24808:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2480a:	2bff      	cmp	r3, #255	; 0xff
   2480c:	bf18      	it	ne
   2480e:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   24810:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   24812:	bf08      	it	eq
   24814:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   24818:	2bff      	cmp	r3, #255	; 0xff
   2481a:	bf08      	it	eq
   2481c:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   24820:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   24824:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   24828:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2482c:	f898 3004 	ldrb.w	r3, [r8, #4]
   24830:	b9bb      	cbnz	r3, 24862 <nrfx_spim_init+0x192>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   24832:	78e3      	ldrb	r3, [r4, #3]
   24834:	2bff      	cmp	r3, #255	; 0xff
   24836:	d047      	beq.n	248c8 <nrfx_spim_init+0x1f8>
   24838:	7c62      	ldrb	r2, [r4, #17]
   2483a:	2a00      	cmp	r2, #0
   2483c:	d044      	beq.n	248c8 <nrfx_spim_init+0x1f8>
                                    (p_config->ss_active_high == true
   2483e:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   24840:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   24842:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   24846:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   2484a:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2484e:	f898 3004 	ldrb.w	r3, [r8, #4]
   24852:	b933      	cbnz	r3, 24862 <nrfx_spim_init+0x192>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   24854:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   24856:	2bff      	cmp	r3, #255	; 0xff
   24858:	bf08      	it	eq
   2485a:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   2485e:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   24862:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   24864:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   24868:	68a3      	ldr	r3, [r4, #8]
   2486a:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   2486e:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   24870:	7b22      	ldrb	r2, [r4, #12]
   24872:	3b00      	subs	r3, #0
   24874:	bf18      	it	ne
   24876:	2301      	movne	r3, #1
    switch (spi_mode)
   24878:	2a02      	cmp	r2, #2
   2487a:	d02f      	beq.n	248dc <nrfx_spim_init+0x20c>
   2487c:	2a03      	cmp	r2, #3
   2487e:	d030      	beq.n	248e2 <nrfx_spim_init+0x212>
   24880:	2a01      	cmp	r2, #1
   24882:	d101      	bne.n	24888 <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   24884:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   24888:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2488c:	79a3      	ldrb	r3, [r4, #6]
   2488e:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   24892:	2307      	movs	r3, #7
   24894:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   24898:	682b      	ldr	r3, [r5, #0]
   2489a:	b12b      	cbz	r3, 248a8 <nrfx_spim_init+0x1d8>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2489c:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   248a0:	f340 3007 	sbfx	r0, r0, #12, #8
   248a4:	f7ec fc8a 	bl	111bc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   248a8:	2300      	movs	r3, #0
   248aa:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   248ac:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   248ae:	4813      	ldr	r0, [pc, #76]	; (248fc <nrfx_spim_init+0x22c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   248b0:	772b      	strb	r3, [r5, #28]
}
   248b2:	b003      	add	sp, #12
   248b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   248b8:	4601      	mov	r1, r0
   248ba:	e748      	b.n	2474e <nrfx_spim_init+0x7e>
   248bc:	f7ff fef8 	bl	246b0 <nrf_gpio_pin_set>
   248c0:	e768      	b.n	24794 <nrfx_spim_init+0xc4>
   248c2:	f7ff fef5 	bl	246b0 <nrf_gpio_pin_set>
   248c6:	e789      	b.n	247dc <nrfx_spim_init+0x10c>
    p_reg->PSEL.CSN = pin;
   248c8:	f04f 33ff 	mov.w	r3, #4294967295
   248cc:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   248d0:	2300      	movs	r3, #0
   248d2:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   248d6:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   248da:	e7b8      	b.n	2484e <nrfx_spim_init+0x17e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   248dc:	f043 0304 	orr.w	r3, r3, #4
        break;
   248e0:	e7d2      	b.n	24888 <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   248e2:	f043 0306 	orr.w	r3, r3, #6
        break;
   248e6:	e7cf      	b.n	24888 <nrfx_spim_init+0x1b8>
        return err_code;
   248e8:	4805      	ldr	r0, [pc, #20]	; (24900 <nrfx_spim_init+0x230>)
   248ea:	e7e2      	b.n	248b2 <nrfx_spim_init+0x1e2>
        return err_code;
   248ec:	4805      	ldr	r0, [pc, #20]	; (24904 <nrfx_spim_init+0x234>)
   248ee:	e7e0      	b.n	248b2 <nrfx_spim_init+0x1e2>
            return err_code;
   248f0:	4805      	ldr	r0, [pc, #20]	; (24908 <nrfx_spim_init+0x238>)
   248f2:	e7de      	b.n	248b2 <nrfx_spim_init+0x1e2>
   248f4:	20030d68 	.word	0x20030d68
   248f8:	4000a000 	.word	0x4000a000
   248fc:	0bad0000 	.word	0x0bad0000
   24900:	0bad0005 	.word	0x0bad0005
   24904:	0bad0003 	.word	0x0bad0003
   24908:	0bad0004 	.word	0x0bad0004

0002490c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   2490c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   24910:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   24912:	4d25      	ldr	r5, [pc, #148]	; (249a8 <nrfx_spim_uninit+0x9c>)
   24914:	015e      	lsls	r6, r3, #5
   24916:	eb05 1843 	add.w	r8, r5, r3, lsl #5
   2491a:	59ab      	ldr	r3, [r5, r6]
{
   2491c:	4607      	mov	r7, r0
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   2491e:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   24920:	b1cb      	cbz	r3, 24956 <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   24922:	f344 3007 	sbfx	r0, r4, #12, #8
   24926:	f7ec fc57 	bl	111d8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2492a:	4b20      	ldr	r3, [pc, #128]	; (249ac <nrfx_spim_uninit+0xa0>)
   2492c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   24930:	f898 301d 	ldrb.w	r3, [r8, #29]
   24934:	b17b      	cbz	r3, 24956 <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24936:	2301      	movs	r3, #1
   24938:	f04f 0864 	mov.w	r8, #100	; 0x64
   2493c:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2493e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   24942:	b92b      	cbnz	r3, 24950 <nrfx_spim_uninit+0x44>
   24944:	2001      	movs	r0, #1
   24946:	f00b fb83 	bl	30050 <nrfx_busy_wait>
   2494a:	f1b8 0801 	subs.w	r8, r8, #1
   2494e:	d1f6      	bne.n	2493e <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
   24950:	2200      	movs	r2, #0
   24952:	19ab      	adds	r3, r5, r6
   24954:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   24956:	2300      	movs	r3, #0
   24958:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   2495c:	19ab      	adds	r3, r5, r6
   2495e:	7f9b      	ldrb	r3, [r3, #30]
   24960:	07db      	lsls	r3, r3, #31
   24962:	d41b      	bmi.n	2499c <nrfx_spim_uninit+0x90>
    return p_reg->PSEL.SCK;
   24964:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   24968:	f00b fbe4 	bl	30134 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   2496c:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   24970:	f00b fbe0 	bl	30134 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   24974:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   24978:	f00b fbdc 	bl	30134 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2497c:	793b      	ldrb	r3, [r7, #4]
   2497e:	b91b      	cbnz	r3, 24988 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
   24980:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   24984:	f00b fbd6 	bl	30134 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   24988:	19ab      	adds	r3, r5, r6
   2498a:	7fd8      	ldrb	r0, [r3, #31]
   2498c:	28ff      	cmp	r0, #255	; 0xff
   2498e:	d005      	beq.n	2499c <nrfx_spim_uninit+0x90>
    nrf_gpio_cfg(
   24990:	2300      	movs	r3, #0
   24992:	2201      	movs	r2, #1
   24994:	4619      	mov	r1, r3
   24996:	9300      	str	r3, [sp, #0]
   24998:	f7ff fe6a 	bl	24670 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   2499c:	2300      	movs	r3, #0
   2499e:	4435      	add	r5, r6
   249a0:	772b      	strb	r3, [r5, #28]
}
   249a2:	b002      	add	sp, #8
   249a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   249a8:	20030d68 	.word	0x20030d68
   249ac:	00080152 	.word	0x00080152

000249b0 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   249b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   249b4:	4f38      	ldr	r7, [pc, #224]	; (24a98 <nrfx_spim_xfer+0xe8>)
   249b6:	7903      	ldrb	r3, [r0, #4]
{
   249b8:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   249ba:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   249be:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   249c2:	4681      	mov	r9, r0
   249c4:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   249c6:	015e      	lsls	r6, r3, #5
   249c8:	2a00      	cmp	r2, #0
   249ca:	d163      	bne.n	24a94 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   249cc:	59ba      	ldr	r2, [r7, r6]
   249ce:	b12a      	cbz	r2, 249dc <nrfx_spim_xfer+0x2c>
   249d0:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   249d4:	bf04      	itt	eq
   249d6:	2201      	moveq	r2, #1
   249d8:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   249dc:	eb07 0c06 	add.w	ip, r7, r6
   249e0:	f10c 0c0c 	add.w	ip, ip, #12
   249e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   249e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   249ec:	2101      	movs	r1, #1
   249ee:	4640      	mov	r0, r8
   249f0:	f00b fbac 	bl	3014c <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   249f4:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   249f6:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   249fa:	b121      	cbz	r1, 24a06 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   249fc:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   24a00:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24a04:	d106      	bne.n	24a14 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   24a06:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   24a08:	b152      	cbz	r2, 24a20 <nrfx_spim_xfer+0x70>
   24a0a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   24a0e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24a12:	d005      	beq.n	24a20 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   24a14:	2300      	movs	r3, #0
   24a16:	443e      	add	r6, r7
        return err_code;
   24a18:	4820      	ldr	r0, [pc, #128]	; (24a9c <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   24a1a:	7773      	strb	r3, [r6, #29]
}
   24a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   24a20:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24a22:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24a26:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24a2a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   24a2e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24a32:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24a36:	2200      	movs	r2, #0
   24a38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   24a3c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   24a40:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   24a44:	bf18      	it	ne
   24a46:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   24a48:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   24a4c:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   24a50:	bf18      	it	ne
   24a52:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   24a54:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   24a58:	072a      	lsls	r2, r5, #28
   24a5a:	d507      	bpl.n	24a6c <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   24a5c:	59ba      	ldr	r2, [r7, r6]
   24a5e:	b972      	cbnz	r2, 24a7e <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   24a60:	2100      	movs	r1, #0
   24a62:	4640      	mov	r0, r8
   24a64:	f00b fb72 	bl	3014c <set_ss_pin_state>
    return err_code;
   24a68:	480d      	ldr	r0, [pc, #52]	; (24aa0 <nrfx_spim_xfer+0xf0>)
   24a6a:	e7d7      	b.n	24a1c <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24a6c:	2201      	movs	r2, #1
   24a6e:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   24a70:	59ba      	ldr	r2, [r7, r6]
   24a72:	b922      	cbnz	r2, 24a7e <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24a74:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   24a78:	2a00      	cmp	r2, #0
   24a7a:	d0fb      	beq.n	24a74 <nrfx_spim_xfer+0xc4>
   24a7c:	e7f0      	b.n	24a60 <nrfx_spim_xfer+0xb0>
    if (!enable)
   24a7e:	f015 0f04 	tst.w	r5, #4
   24a82:	f04f 0240 	mov.w	r2, #64	; 0x40
   24a86:	d002      	beq.n	24a8e <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   24a88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24a8c:	e7ec      	b.n	24a68 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   24a8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24a92:	e7e9      	b.n	24a68 <nrfx_spim_xfer+0xb8>
        return err_code;
   24a94:	4803      	ldr	r0, [pc, #12]	; (24aa4 <nrfx_spim_xfer+0xf4>)
   24a96:	e7c1      	b.n	24a1c <nrfx_spim_xfer+0x6c>
   24a98:	20030d68 	.word	0x20030d68
   24a9c:	0bad000a 	.word	0x0bad000a
   24aa0:	0bad0000 	.word	0x0bad0000
   24aa4:	0bad000b 	.word	0x0bad000b

00024aa8 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   24aa8:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24aaa:	4b0c      	ldr	r3, [pc, #48]	; (24adc <nrfx_spim_4_irq_handler+0x34>)
   24aac:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   24ab0:	b192      	cbz	r2, 24ad8 <nrfx_spim_4_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ab2:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   24ab4:	4c0a      	ldr	r4, [pc, #40]	; (24ae0 <nrfx_spim_4_irq_handler+0x38>)
   24ab6:	4629      	mov	r1, r5
   24ab8:	4620      	mov	r0, r4
   24aba:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   24abe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   24ac2:	f00b fb43 	bl	3014c <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   24ac6:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   24aca:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   24acc:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   24ace:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   24ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   24ad6:	4718      	bx	r3
}
   24ad8:	bd70      	pop	{r4, r5, r6, pc}
   24ada:	bf00      	nop
   24adc:	4000a000 	.word	0x4000a000
   24ae0:	20030d68 	.word	0x20030d68

00024ae4 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   24ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ae8:	460e      	mov	r6, r1
   24aea:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   24aec:	4d0c      	ldr	r5, [pc, #48]	; (24b20 <metal_generic_dev_open+0x3c>)
   24aee:	f855 4f18 	ldr.w	r4, [r5, #24]!
   24af2:	42ac      	cmp	r4, r5
   24af4:	d103      	bne.n	24afe <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   24af6:	f06f 0012 	mvn.w	r0, #18
   24afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   24afe:	4631      	mov	r1, r6
   24b00:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   24b04:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   24b08:	f7e4 fc75 	bl	93f6 <strcmp>
   24b0c:	b930      	cbnz	r0, 24b1c <metal_generic_dev_open+0x38>
			*device = dev;
   24b0e:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   24b12:	4640      	mov	r0, r8
}
   24b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   24b18:	f00b bc27 	b.w	3036a <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   24b1c:	6824      	ldr	r4, [r4, #0]
   24b1e:	e7e8      	b.n	24af2 <metal_generic_dev_open+0xe>
   24b20:	20030d88 	.word	0x20030d88

00024b24 <metal_bus_unregister>:
{
   24b24:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   24b26:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   24b2a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   24b2c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   24b2e:	f100 0324 	add.w	r3, r0, #36	; 0x24
   24b32:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   24b34:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   24b38:	6843      	ldr	r3, [r0, #4]
{
   24b3a:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   24b3c:	b103      	cbz	r3, 24b40 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   24b3e:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   24b40:	4b05      	ldr	r3, [pc, #20]	; (24b58 <metal_bus_unregister+0x34>)
   24b42:	781a      	ldrb	r2, [r3, #0]
   24b44:	2a06      	cmp	r2, #6
   24b46:	d905      	bls.n	24b54 <metal_bus_unregister+0x30>
   24b48:	685b      	ldr	r3, [r3, #4]
   24b4a:	b11b      	cbz	r3, 24b54 <metal_bus_unregister+0x30>
   24b4c:	2007      	movs	r0, #7
   24b4e:	6822      	ldr	r2, [r4, #0]
   24b50:	4902      	ldr	r1, [pc, #8]	; (24b5c <metal_bus_unregister+0x38>)
   24b52:	4798      	blx	r3
}
   24b54:	2000      	movs	r0, #0
   24b56:	bd10      	pop	{r4, pc}
   24b58:	20030d88 	.word	0x20030d88
   24b5c:	00038579 	.word	0x00038579

00024b60 <metal_bus_find>:
{
   24b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b64:	4607      	mov	r7, r0
   24b66:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   24b68:	4e0b      	ldr	r6, [pc, #44]	; (24b98 <metal_bus_find+0x38>)
   24b6a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   24b6e:	42b4      	cmp	r4, r6
   24b70:	d102      	bne.n	24b78 <metal_bus_find+0x18>
	return -ENOENT;
   24b72:	f06f 0001 	mvn.w	r0, #1
   24b76:	e00a      	b.n	24b8e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   24b78:	4639      	mov	r1, r7
   24b7a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   24b7e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   24b82:	f7e4 fc38 	bl	93f6 <strcmp>
   24b86:	b920      	cbnz	r0, 24b92 <metal_bus_find+0x32>
   24b88:	b11d      	cbz	r5, 24b92 <metal_bus_find+0x32>
			*result = bus;
   24b8a:	f8c5 8000 	str.w	r8, [r5]
}
   24b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   24b92:	6824      	ldr	r4, [r4, #0]
   24b94:	e7eb      	b.n	24b6e <metal_bus_find+0xe>
   24b96:	bf00      	nop
   24b98:	20030d88 	.word	0x20030d88

00024b9c <metal_bus_register>:
{
   24b9c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   24b9e:	4604      	mov	r4, r0
   24ba0:	b910      	cbnz	r0, 24ba8 <metal_bus_register+0xc>
		return -EINVAL;
   24ba2:	f06f 0015 	mvn.w	r0, #21
}
   24ba6:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   24ba8:	6800      	ldr	r0, [r0, #0]
   24baa:	2800      	cmp	r0, #0
   24bac:	d0f9      	beq.n	24ba2 <metal_bus_register+0x6>
   24bae:	f7e4 fc2c 	bl	940a <strlen>
   24bb2:	2800      	cmp	r0, #0
   24bb4:	d0f5      	beq.n	24ba2 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   24bb6:	2100      	movs	r1, #0
   24bb8:	6820      	ldr	r0, [r4, #0]
   24bba:	f7ff ffd1 	bl	24b60 <metal_bus_find>
   24bbe:	b1c8      	cbz	r0, 24bf4 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   24bc0:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   24bc4:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   24bc8:	4b0c      	ldr	r3, [pc, #48]	; (24bfc <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   24bca:	f104 0224 	add.w	r2, r4, #36	; 0x24
   24bce:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   24bd0:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   24bd4:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   24bd6:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   24bd8:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   24bda:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   24bdc:	781a      	ldrb	r2, [r3, #0]
   24bde:	2a06      	cmp	r2, #6
   24be0:	d901      	bls.n	24be6 <metal_bus_register+0x4a>
   24be2:	685b      	ldr	r3, [r3, #4]
   24be4:	b90b      	cbnz	r3, 24bea <metal_bus_register+0x4e>
	return 0;
   24be6:	2000      	movs	r0, #0
   24be8:	e7dd      	b.n	24ba6 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   24bea:	2007      	movs	r0, #7
   24bec:	6822      	ldr	r2, [r4, #0]
   24bee:	4904      	ldr	r1, [pc, #16]	; (24c00 <metal_bus_register+0x64>)
   24bf0:	4798      	blx	r3
   24bf2:	e7f8      	b.n	24be6 <metal_bus_register+0x4a>
		return -EEXIST;
   24bf4:	f06f 0010 	mvn.w	r0, #16
   24bf8:	e7d5      	b.n	24ba6 <metal_bus_register+0xa>
   24bfa:	bf00      	nop
   24bfc:	20030d88 	.word	0x20030d88
   24c00:	0003857b 	.word	0x0003857b

00024c04 <metal_register_generic_device>:
{
   24c04:	b510      	push	{r4, lr}
   24c06:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   24c08:	6800      	ldr	r0, [r0, #0]
   24c0a:	b910      	cbnz	r0, 24c12 <metal_register_generic_device+0xe>
		return -EINVAL;
   24c0c:	f06f 0015 	mvn.w	r0, #21
}
   24c10:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   24c12:	f7e4 fbfa 	bl	940a <strlen>
   24c16:	2800      	cmp	r0, #0
   24c18:	d0f8      	beq.n	24c0c <metal_register_generic_device+0x8>
   24c1a:	68a3      	ldr	r3, [r4, #8]
   24c1c:	2b01      	cmp	r3, #1
   24c1e:	d8f5      	bhi.n	24c0c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   24c20:	4b06      	ldr	r3, [pc, #24]	; (24c3c <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   24c22:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   24c26:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   24c28:	4b05      	ldr	r3, [pc, #20]	; (24c40 <metal_register_generic_device+0x3c>)
   24c2a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   24c2c:	f103 0018 	add.w	r0, r3, #24
   24c30:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   24c32:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   24c34:	61d9      	str	r1, [r3, #28]
	return 0;
   24c36:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   24c38:	6011      	str	r1, [r2, #0]
}
   24c3a:	e7e9      	b.n	24c10 <metal_register_generic_device+0xc>
   24c3c:	200087bc 	.word	0x200087bc
   24c40:	20030d88 	.word	0x20030d88

00024c44 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   24c44:	4b0e      	ldr	r3, [pc, #56]	; (24c80 <metal_init+0x3c>)
{
   24c46:	b510      	push	{r4, lr}
   24c48:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   24c4a:	2220      	movs	r2, #32
   24c4c:	2100      	movs	r1, #0
   24c4e:	4618      	mov	r0, r3
   24c50:	f00c fe27 	bl	318a2 <memset>

	_metal.common.log_handler   = params->log_handler;
   24c54:	6822      	ldr	r2, [r4, #0]
   24c56:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   24c58:	4602      	mov	r2, r0
   24c5a:	7921      	ldrb	r1, [r4, #4]
   24c5c:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   24c60:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   24c64:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   24c68:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   24c6c:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   24c70:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   24c74:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   24c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   24c7a:	f000 b80f 	b.w	24c9c <metal_sys_init>
   24c7e:	bf00      	nop
   24c80:	20030d88 	.word	0x20030d88

00024c84 <metal_finish>:

void metal_finish(void)
{
   24c84:	b508      	push	{r3, lr}
	metal_sys_finish();
   24c86:	f000 f811 	bl	24cac <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   24c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   24c8e:	2220      	movs	r2, #32
   24c90:	2100      	movs	r1, #0
   24c92:	4801      	ldr	r0, [pc, #4]	; (24c98 <metal_finish+0x14>)
   24c94:	f00c be05 	b.w	318a2 <memset>
   24c98:	20030d88 	.word	0x20030d88

00024c9c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   24c9c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   24c9e:	4802      	ldr	r0, [pc, #8]	; (24ca8 <metal_sys_init+0xc>)
   24ca0:	f7ff ff7c 	bl	24b9c <metal_bus_register>
	return 0;
}
   24ca4:	2000      	movs	r0, #0
   24ca6:	bd08      	pop	{r3, pc}
   24ca8:	200087bc 	.word	0x200087bc

00024cac <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   24cac:	4801      	ldr	r0, [pc, #4]	; (24cb4 <metal_sys_finish+0x8>)
   24cae:	f7ff bf39 	b.w	24b24 <metal_bus_unregister>
   24cb2:	bf00      	nop
   24cb4:	200087bc 	.word	0x200087bc

00024cb8 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   24cb8:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   24cba:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   24cbc:	2b06      	cmp	r3, #6
{
   24cbe:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   24cc0:	bf88      	it	hi
   24cc2:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   24cc4:	4b09      	ldr	r3, [pc, #36]	; (24cec <metal_zephyr_log_handler+0x34>)
{
   24cc6:	ac05      	add	r4, sp, #20
   24cc8:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   24ccc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   24cd0:	4807      	ldr	r0, [pc, #28]	; (24cf0 <metal_zephyr_log_handler+0x38>)
   24cd2:	f005 fac9 	bl	2a268 <printk>

	va_start(args, format);
	vprintk(format, args);
   24cd6:	4621      	mov	r1, r4
   24cd8:	4628      	mov	r0, r5
	va_start(args, format);
   24cda:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   24cdc:	f7e9 fcf4 	bl	e6c8 <vprintk>
	va_end(args);
}
   24ce0:	b002      	add	sp, #8
   24ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   24ce6:	b003      	add	sp, #12
   24ce8:	4770      	bx	lr
   24cea:	bf00      	nop
   24cec:	000341cc 	.word	0x000341cc
   24cf0:	00035b75 	.word	0x00035b75

00024cf4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   24cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cf8:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   24cfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   24cfc:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   24cfe:	4293      	cmp	r3, r2
{
   24d00:	4617      	mov	r7, r2
   24d02:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   24d04:	d341      	bcc.n	24d8a <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   24d06:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   24d08:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   24d0c:	42bd      	cmp	r5, r7
   24d0e:	d103      	bne.n	24d18 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   24d10:	2000      	movs	r0, #0
}
   24d12:	b007      	add	sp, #28
   24d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   24d18:	fb0b f805 	mul.w	r8, fp, r5
   24d1c:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   24d20:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   24d22:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   24d26:	1d23      	adds	r3, r4, #4
   24d28:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   24d2a:	b9ca      	cbnz	r2, 24d60 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   24d2c:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   24d2e:	6861      	ldr	r1, [r4, #4]
   24d30:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   24d32:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   24d36:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   24d38:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   24d3a:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   24d3e:	1e5c      	subs	r4, r3, #1
   24d40:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   24d44:	425b      	negs	r3, r3
   24d46:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   24d4a:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   24d4c:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   24d50:	6884      	ldr	r4, [r0, #8]
   24d52:	3306      	adds	r3, #6
   24d54:	42a1      	cmp	r1, r4
   24d56:	bf28      	it	cs
   24d58:	f04f 31ff 	movcs.w	r1, #4294967295
   24d5c:	f00b fad1 	bl	30302 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   24d60:	f859 3008 	ldr.w	r3, [r9, r8]
   24d64:	4630      	mov	r0, r6
   24d66:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   24d68:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   24d6a:	b2a9      	uxth	r1, r5
   24d6c:	6a1b      	ldr	r3, [r3, #32]
   24d6e:	9301      	str	r3, [sp, #4]
   24d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24d72:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   24d76:	9300      	str	r3, [sp, #0]
   24d78:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   24d7c:	9b05      	ldr	r3, [sp, #20]
   24d7e:	f00b fb39 	bl	303f4 <virtqueue_create>
		if (ret)
   24d82:	2800      	cmp	r0, #0
   24d84:	d1c5      	bne.n	24d12 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   24d86:	3501      	adds	r5, #1
   24d88:	e7c0      	b.n	24d0c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   24d8a:	4801      	ldr	r0, [pc, #4]	; (24d90 <virtio_create_virtqueues+0x9c>)
   24d8c:	e7c1      	b.n	24d12 <virtio_create_virtqueues+0x1e>
   24d8e:	bf00      	nop
   24d90:	fffff440 	.word	0xfffff440

00024d94 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   24d94:	b510      	push	{r4, lr}
	if (vq) {
   24d96:	4604      	mov	r4, r0
   24d98:	b190      	cbz	r0, 24dc0 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   24d9a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   24d9c:	8943      	ldrh	r3, [r0, #10]
   24d9e:	429a      	cmp	r2, r3
   24da0:	d009      	beq.n	24db6 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   24da2:	4b08      	ldr	r3, [pc, #32]	; (24dc4 <virtqueue_free+0x30>)
   24da4:	781a      	ldrb	r2, [r3, #0]
   24da6:	2a03      	cmp	r2, #3
   24da8:	d905      	bls.n	24db6 <virtqueue_free+0x22>
   24daa:	685b      	ldr	r3, [r3, #4]
   24dac:	b11b      	cbz	r3, 24db6 <virtqueue_free+0x22>
   24dae:	6842      	ldr	r2, [r0, #4]
   24db0:	4905      	ldr	r1, [pc, #20]	; (24dc8 <virtqueue_free+0x34>)
   24db2:	2004      	movs	r0, #4
   24db4:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   24db6:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   24db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24dbc:	f00c bd14 	b.w	317e8 <k_free>
   24dc0:	bd10      	pop	{r4, pc}
   24dc2:	bf00      	nop
   24dc4:	20030d88 	.word	0x20030d88
   24dc8:	00038626 	.word	0x00038626

00024dcc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   24dcc:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   24dce:	8944      	ldrh	r4, [r0, #10]
   24dd0:	428c      	cmp	r4, r1
   24dd2:	d912      	bls.n	24dfa <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   24dd4:	6a03      	ldr	r3, [r0, #32]
   24dd6:	3c01      	subs	r4, #1
   24dd8:	885d      	ldrh	r5, [r3, #2]
   24dda:	402c      	ands	r4, r5
   24ddc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   24de0:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   24de2:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   24de4:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   24de8:	6a02      	ldr	r2, [r0, #32]
   24dea:	8853      	ldrh	r3, [r2, #2]
   24dec:	3301      	adds	r3, #1
   24dee:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   24df0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   24df2:	3301      	adds	r3, #1
   24df4:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   24df6:	2000      	movs	r0, #0
}
   24df8:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   24dfa:	4801      	ldr	r0, [pc, #4]	; (24e00 <virtqueue_add_consumed_buffer+0x34>)
   24dfc:	e7fc      	b.n	24df8 <virtqueue_add_consumed_buffer+0x2c>
   24dfe:	bf00      	nop
   24e00:	fffff441 	.word	0xfffff441

00024e04 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   24e04:	b470      	push	{r4, r5, r6}
   24e06:	9e03      	ldr	r6, [sp, #12]
   24e08:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   24e0a:	b158      	cbz	r0, 24e24 <rpmsg_send_offchannel_raw+0x20>
   24e0c:	6a00      	ldr	r0, [r0, #32]
   24e0e:	b148      	cbz	r0, 24e24 <rpmsg_send_offchannel_raw+0x20>
   24e10:	b143      	cbz	r3, 24e24 <rpmsg_send_offchannel_raw+0x20>
   24e12:	3401      	adds	r4, #1
   24e14:	d006      	beq.n	24e24 <rpmsg_send_offchannel_raw+0x20>
   24e16:	2e00      	cmp	r6, #0
   24e18:	db04      	blt.n	24e24 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   24e1a:	6f84      	ldr	r4, [r0, #120]	; 0x78
   24e1c:	b114      	cbz	r4, 24e24 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   24e1e:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   24e20:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   24e22:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   24e24:	4801      	ldr	r0, [pc, #4]	; (24e2c <rpmsg_send_offchannel_raw+0x28>)
}
   24e26:	bc70      	pop	{r4, r5, r6}
   24e28:	4770      	bx	lr
   24e2a:	bf00      	nop
   24e2c:	fffff82d 	.word	0xfffff82d

00024e30 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   24e30:	b470      	push	{r4, r5, r6}
   24e32:	9e03      	ldr	r6, [sp, #12]
   24e34:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   24e36:	b160      	cbz	r0, 24e52 <rpmsg_send_offchannel_nocopy+0x22>
   24e38:	6a00      	ldr	r0, [r0, #32]
   24e3a:	b150      	cbz	r0, 24e52 <rpmsg_send_offchannel_nocopy+0x22>
   24e3c:	b14b      	cbz	r3, 24e52 <rpmsg_send_offchannel_nocopy+0x22>
   24e3e:	3401      	adds	r4, #1
   24e40:	d007      	beq.n	24e52 <rpmsg_send_offchannel_nocopy+0x22>
   24e42:	2e00      	cmp	r6, #0
   24e44:	db05      	blt.n	24e52 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   24e46:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   24e4a:	b114      	cbz	r4, 24e52 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   24e4c:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   24e4e:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   24e50:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   24e52:	4801      	ldr	r0, [pc, #4]	; (24e58 <rpmsg_send_offchannel_nocopy+0x28>)
}
   24e54:	bc70      	pop	{r4, r5, r6}
   24e56:	4770      	bx	lr
   24e58:	fffff82d 	.word	0xfffff82d

00024e5c <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   24e5c:	b570      	push	{r4, r5, r6, lr}
   24e5e:	460c      	mov	r4, r1
   24e60:	4611      	mov	r1, r2
   24e62:	4605      	mov	r5, r0
   24e64:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   24e66:	4b0c      	ldr	r3, [pc, #48]	; (24e98 <rpmsg_register_endpoint+0x3c>)
   24e68:	2220      	movs	r2, #32
   24e6a:	2900      	cmp	r1, #0
   24e6c:	bf08      	it	eq
   24e6e:	4619      	moveq	r1, r3
   24e70:	4620      	mov	r0, r4
   24e72:	f00c fe7f 	bl	31b74 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   24e76:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   24e78:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   24e7a:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   24e7c:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   24e7e:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   24e80:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   24e82:	9b06      	ldr	r3, [sp, #24]
   24e84:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   24e86:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   24e88:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   24e8c:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   24e90:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   24e92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   24e94:	6013      	str	r3, [r2, #0]
}
   24e96:	bd70      	pop	{r4, r5, r6, pc}
   24e98:	000365fc 	.word	0x000365fc

00024e9c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   24e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24ea0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   24ea4:	460d      	mov	r5, r1
   24ea6:	4692      	mov	sl, r2
   24ea8:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   24eaa:	4606      	mov	r6, r0
   24eac:	2800      	cmp	r0, #0
   24eae:	d06c      	beq.n	24f8a <rpmsg_create_ept+0xee>
   24eb0:	2900      	cmp	r1, #0
   24eb2:	d06a      	beq.n	24f8a <rpmsg_create_ept+0xee>
   24eb4:	f1b9 0f00 	cmp.w	r9, #0
   24eb8:	d067      	beq.n	24f8a <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   24eba:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   24ebe:	4640      	mov	r0, r8
   24ec0:	f00b fc01 	bl	306c6 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   24ec4:	1c78      	adds	r0, r7, #1
   24ec6:	d140      	bne.n	24f4a <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   24ec8:	6cac      	ldr	r4, [r5, #72]	; 0x48
   24eca:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24ece:	f014 0401 	ands.w	r4, r4, #1
   24ed2:	d00b      	beq.n	24eec <rpmsg_create_ept+0x50>
	for (bit = start;
   24ed4:	2400      	movs	r4, #0
	     bit++)
   24ed6:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24ed8:	2c80      	cmp	r4, #128	; 0x80
   24eda:	d054      	beq.n	24f86 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24edc:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24ede:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   24ee2:	f004 011f 	and.w	r1, r4, #31
   24ee6:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24ee8:	07d1      	lsls	r1, r2, #31
   24eea:	d4f4      	bmi.n	24ed6 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24eec:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24eee:	0960      	lsrs	r0, r4, #5
   24ef0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   24ef4:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24ef8:	f004 041f 	and.w	r4, r4, #31
   24efc:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24efe:	430a      	orrs	r2, r1
   24f00:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   24f04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24f06:	4652      	mov	r2, sl
   24f08:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24f0e:	4631      	mov	r1, r6
   24f10:	9300      	str	r3, [sp, #0]
   24f12:	4628      	mov	r0, r5
   24f14:	463b      	mov	r3, r7
   24f16:	f7ff ffa1 	bl	24e5c <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   24f1a:	4640      	mov	r0, r8
   24f1c:	f000 fde0 	bl	25ae0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   24f20:	7834      	ldrb	r4, [r6, #0]
   24f22:	b174      	cbz	r4, 24f42 <rpmsg_create_ept+0xa6>
   24f24:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   24f28:	b15c      	cbz	r4, 24f42 <rpmsg_create_ept+0xa6>
   24f2a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   24f2c:	3301      	adds	r3, #1
   24f2e:	d12e      	bne.n	24f8e <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   24f30:	2100      	movs	r1, #0
   24f32:	4630      	mov	r0, r6
   24f34:	f00b fbf6 	bl	30724 <rpmsg_send_ns_message>

	if (status)
   24f38:	4604      	mov	r4, r0
   24f3a:	b110      	cbz	r0, 24f42 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   24f3c:	4630      	mov	r0, r6
   24f3e:	f00b fbc8 	bl	306d2 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   24f42:	4620      	mov	r0, r4
   24f44:	b004      	add	sp, #16
   24f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   24f4a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   24f4e:	d3d9      	bcc.n	24f04 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   24f50:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   24f54:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   24f56:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   24f5a:	d80f      	bhi.n	24f7c <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24f5c:	0958      	lsrs	r0, r3, #5
   24f5e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24f62:	f003 031f 	and.w	r3, r3, #31
   24f66:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   24f6a:	07d2      	lsls	r2, r2, #31
   24f6c:	d40b      	bmi.n	24f86 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24f6e:	2201      	movs	r2, #1
   24f70:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24f74:	4323      	orrs	r3, r4
   24f76:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   24f7a:	e7c3      	b.n	24f04 <rpmsg_create_ept+0x68>
   24f7c:	4c05      	ldr	r4, [pc, #20]	; (24f94 <rpmsg_create_ept+0xf8>)
   24f7e:	4640      	mov	r0, r8
   24f80:	f000 fdae 	bl	25ae0 <z_impl_k_sem_give>
}
   24f84:	e7dd      	b.n	24f42 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   24f86:	4c04      	ldr	r4, [pc, #16]	; (24f98 <rpmsg_create_ept+0xfc>)
   24f88:	e7f9      	b.n	24f7e <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   24f8a:	4c02      	ldr	r4, [pc, #8]	; (24f94 <rpmsg_create_ept+0xf8>)
   24f8c:	e7d9      	b.n	24f42 <rpmsg_create_ept+0xa6>
   24f8e:	2400      	movs	r4, #0
   24f90:	e7d7      	b.n	24f42 <rpmsg_create_ept+0xa6>
   24f92:	bf00      	nop
   24f94:	fffff82d 	.word	0xfffff82d
   24f98:	fffff829 	.word	0xfffff829

00024f9c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   24f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24fa0:	b085      	sub	sp, #20
   24fa2:	460f      	mov	r7, r1
   24fa4:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24fa6:	a903      	add	r1, sp, #12
   24fa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   24faa:	4605      	mov	r5, r0
   24fac:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24fae:	f00b fdc9 	bl	30b44 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   24fb2:	4604      	mov	r4, r0
   24fb4:	b1e0      	cbz	r0, 24ff0 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   24fb6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   24fb8:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   24fba:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
   24fbe:	429e      	cmp	r6, r3
   24fc0:	bfa8      	it	ge
   24fc2:	461e      	movge	r6, r3
   24fc4:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   24fc6:	f8d0 c008 	ldr.w	ip, [r0, #8]
   24fca:	1a61      	subs	r1, r4, r1
   24fcc:	4633      	mov	r3, r6
   24fce:	464a      	mov	r2, r9
   24fd0:	4561      	cmp	r1, ip
   24fd2:	bf28      	it	cs
   24fd4:	f04f 31ff 	movcs.w	r1, #4294967295
   24fd8:	f00b f959 	bl	3028e <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   24fdc:	4623      	mov	r3, r4
   24fde:	4642      	mov	r2, r8
   24fe0:	4639      	mov	r1, r7
   24fe2:	4628      	mov	r0, r5
   24fe4:	9600      	str	r6, [sp, #0]
   24fe6:	f00b fd4d 	bl	30a84 <rpmsg_virtio_send_offchannel_nocopy>
}
   24fea:	b005      	add	sp, #20
   24fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   24ff0:	4800      	ldr	r0, [pc, #0]	; (24ff4 <rpmsg_virtio_send_offchannel_raw+0x58>)
   24ff2:	e7fa      	b.n	24fea <rpmsg_virtio_send_offchannel_raw+0x4e>
   24ff4:	fffff82e 	.word	0xfffff82e

00024ff8 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   24ff8:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   24ffa:	4604      	mov	r4, r0
   24ffc:	b1e0      	cbz	r0, 25038 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   24ffe:	f100 0558 	add.w	r5, r0, #88	; 0x58
   25002:	4628      	mov	r0, r5
   25004:	f00b fc1e 	bl	30844 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   25008:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   2500c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   2500e:	b953      	cbnz	r3, 25026 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   25010:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   25014:	3c10      	subs	r4, #16
	if (length <= 0) {
   25016:	2c00      	cmp	r4, #0
   25018:	dc00      	bgt.n	2501c <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   2501a:	4c08      	ldr	r4, [pc, #32]	; (2503c <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   2501c:	4628      	mov	r0, r5
   2501e:	f00b fc0f 	bl	30840 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   25022:	4620      	mov	r0, r4
   25024:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   25026:	2b01      	cmp	r3, #1
   25028:	d1f7      	bne.n	2501a <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   2502a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   2502e:	f00b fb32 	bl	30696 <virtqueue_get_desc_size>
   25032:	f1a0 0410 	sub.w	r4, r0, #16
   25036:	e7ee      	b.n	25016 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   25038:	4c01      	ldr	r4, [pc, #4]	; (25040 <rpmsg_virtio_get_buffer_size+0x48>)
   2503a:	e7f2      	b.n	25022 <rpmsg_virtio_get_buffer_size+0x2a>
   2503c:	fffff82e 	.word	0xfffff82e
   25040:	fffff82d 	.word	0xfffff82d

00025044 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   25044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25048:	b08a      	sub	sp, #40	; 0x28
   2504a:	460d      	mov	r5, r1
   2504c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   25050:	4690      	mov	r8, r2
   25052:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   25054:	4604      	mov	r4, r0
   25056:	b920      	cbnz	r0, 25062 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   25058:	4f81      	ldr	r7, [pc, #516]	; (25260 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   2505a:	4638      	mov	r0, r7
   2505c:	b00a      	add	sp, #40	; 0x28
   2505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   25062:	2900      	cmp	r1, #0
   25064:	d0f8      	beq.n	25058 <rpmsg_init_vdev_with_config+0x14>
   25066:	2b00      	cmp	r3, #0
   25068:	d0f6      	beq.n	25058 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   2506a:	2294      	movs	r2, #148	; 0x94
   2506c:	2100      	movs	r1, #0
   2506e:	f00c fc18 	bl	318a2 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25072:	2201      	movs	r2, #1
   25074:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25078:	4611      	mov	r1, r2
   2507a:	f00b ff89 	bl	30f90 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2507e:	4b79      	ldr	r3, [pc, #484]	; (25264 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   25080:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   25084:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   25088:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2508a:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   2508c:	4b76      	ldr	r3, [pc, #472]	; (25268 <rpmsg_init_vdev_with_config+0x224>)
   2508e:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   25090:	4b76      	ldr	r3, [pc, #472]	; (2526c <rpmsg_init_vdev_with_config+0x228>)
   25092:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   25096:	4b76      	ldr	r3, [pc, #472]	; (25270 <rpmsg_init_vdev_with_config+0x22c>)
   25098:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   2509c:	4b75      	ldr	r3, [pc, #468]	; (25274 <rpmsg_init_vdev_with_config+0x230>)
   2509e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   250a2:	4b75      	ldr	r3, [pc, #468]	; (25278 <rpmsg_init_vdev_with_config+0x234>)
   250a4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   250a8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   250ac:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   250b0:	f1b8 0f00 	cmp.w	r8, #0
   250b4:	d16e      	bne.n	25194 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   250b6:	2f00      	cmp	r7, #0
   250b8:	d0ce      	beq.n	25058 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   250ba:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   250be:	f104 0394 	add.w	r3, r4, #148	; 0x94
   250c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   250c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   250ca:	6a03      	ldr	r3, [r0, #32]
   250cc:	689b      	ldr	r3, [r3, #8]
   250ce:	4798      	blx	r3
   250d0:	2300      	movs	r3, #0
   250d2:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   250d4:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   250d8:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   250da:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   250de:	f1b8 0f00 	cmp.w	r8, #0
   250e2:	d16d      	bne.n	251c0 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   250e4:	7a3b      	ldrb	r3, [r7, #8]
   250e6:	2b00      	cmp	r3, #0
   250e8:	d068      	beq.n	251bc <rpmsg_init_vdev_with_config+0x178>
   250ea:	f109 030c 	add.w	r3, r9, #12
   250ee:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   250f2:	f1b9 0f00 	cmp.w	r9, #0
   250f6:	d0af      	beq.n	25058 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   250f8:	f8d9 2008 	ldr.w	r2, [r9, #8]
   250fc:	2a00      	cmp	r2, #0
   250fe:	f000 80ad 	beq.w	2525c <rpmsg_init_vdev_with_config+0x218>
   25102:	689b      	ldr	r3, [r3, #8]
   25104:	2b00      	cmp	r3, #0
   25106:	f000 80a9 	beq.w	2525c <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   2510a:	4b5c      	ldr	r3, [pc, #368]	; (2527c <rpmsg_init_vdev_with_config+0x238>)
   2510c:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   2510e:	4b5c      	ldr	r3, [pc, #368]	; (25280 <rpmsg_init_vdev_with_config+0x23c>)
   25110:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   25112:	4b5c      	ldr	r3, [pc, #368]	; (25284 <rpmsg_init_vdev_with_config+0x240>)
   25114:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   25116:	4b5c      	ldr	r3, [pc, #368]	; (25288 <rpmsg_init_vdev_with_config+0x244>)
   25118:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   2511a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2511c:	681b      	ldr	r3, [r3, #0]
   2511e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   25122:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25124:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   25126:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   2512a:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   2512e:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   25132:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   25134:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   25138:	9300      	str	r3, [sp, #0]
   2513a:	2202      	movs	r2, #2
   2513c:	2100      	movs	r1, #0
   2513e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   25142:	ab04      	add	r3, sp, #16
   25144:	f7ff fdd6 	bl	24cf4 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   25148:	4607      	mov	r7, r0
   2514a:	2800      	cmp	r0, #0
   2514c:	d185      	bne.n	2505a <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   2514e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   25152:	f00b fa3b 	bl	305cc <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   25156:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25158:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   2515a:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   2515c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2515e:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   25160:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   25162:	f1b8 0f00 	cmp.w	r8, #0
   25166:	d161      	bne.n	2522c <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   25168:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   2516a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2516e:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   25170:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   25174:	895b      	ldrh	r3, [r3, #10]
   25176:	4553      	cmp	r3, sl
   25178:	d834      	bhi.n	251e4 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   2517a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   2517e:	e9c4 4400 	strd	r4, r4, [r4]
   25182:	2b00      	cmp	r3, #0
   25184:	d159      	bne.n	2523a <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   25186:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   2518a:	2104      	movs	r1, #4
   2518c:	6a03      	ldr	r3, [r0, #32]
   2518e:	685b      	ldr	r3, [r3, #4]
   25190:	4798      	blx	r3
}
   25192:	e762      	b.n	2505a <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   25194:	f1b8 0f01 	cmp.w	r8, #1
   25198:	d195      	bne.n	250c6 <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   2519a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2519e:	6a03      	ldr	r3, [r0, #32]
   251a0:	681b      	ldr	r3, [r3, #0]
   251a2:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   251a4:	0642      	lsls	r2, r0, #25
   251a6:	d506      	bpl.n	251b6 <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   251a8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   251ac:	2100      	movs	r1, #0
   251ae:	6a03      	ldr	r3, [r0, #32]
   251b0:	685b      	ldr	r3, [r3, #4]
   251b2:	4798      	blx	r3
}
   251b4:	e7f1      	b.n	2519a <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   251b6:	0743      	lsls	r3, r0, #29
   251b8:	d5ef      	bpl.n	2519a <rpmsg_init_vdev_with_config+0x156>
   251ba:	e784      	b.n	250c6 <rpmsg_init_vdev_with_config+0x82>
   251bc:	464b      	mov	r3, r9
   251be:	e796      	b.n	250ee <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   251c0:	f1b8 0f01 	cmp.w	r8, #1
   251c4:	d1b1      	bne.n	2512a <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   251c6:	4b2e      	ldr	r3, [pc, #184]	; (25280 <rpmsg_init_vdev_with_config+0x23c>)
   251c8:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   251ca:	4b2c      	ldr	r3, [pc, #176]	; (2527c <rpmsg_init_vdev_with_config+0x238>)
   251cc:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   251ce:	4b2e      	ldr	r3, [pc, #184]	; (25288 <rpmsg_init_vdev_with_config+0x244>)
   251d0:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   251d2:	4b2c      	ldr	r3, [pc, #176]	; (25284 <rpmsg_init_vdev_with_config+0x240>)
   251d4:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   251d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   251d8:	699b      	ldr	r3, [r3, #24]
   251da:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   251de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   251e0:	681b      	ldr	r3, [r3, #0]
   251e2:	e7a0      	b.n	25126 <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   251e4:	4648      	mov	r0, r9
   251e6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   251ea:	f00b fc9c 	bl	30b26 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   251ee:	4605      	mov	r5, r0
   251f0:	b1c8      	cbz	r0, 25226 <rpmsg_init_vdev_with_config+0x1e2>
   251f2:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   251f4:	9008      	str	r0, [sp, #32]
   251f6:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   251f8:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   251fa:	2200      	movs	r2, #0
   251fc:	4281      	cmp	r1, r0
   251fe:	bf28      	it	cs
   25200:	f04f 31ff 	movcs.w	r1, #4294967295
   25204:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   25208:	4630      	mov	r0, r6
   2520a:	f00b f87a 	bl	30302 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   2520e:	9500      	str	r5, [sp, #0]
   25210:	2301      	movs	r3, #1
   25212:	2200      	movs	r2, #0
   25214:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   25218:	a908      	add	r1, sp, #32
   2521a:	f00b f918 	bl	3044e <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   2521e:	b918      	cbnz	r0, 25228 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   25220:	f10a 0a01 	add.w	sl, sl, #1
   25224:	e7a4      	b.n	25170 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   25226:	4819      	ldr	r0, [pc, #100]	; (2528c <rpmsg_init_vdev_with_config+0x248>)
   25228:	4607      	mov	r7, r0
   2522a:	e716      	b.n	2505a <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   2522c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   25230:	e9c4 4400 	strd	r4, r4, [r4]
   25234:	2b00      	cmp	r3, #0
   25236:	f43f af10 	beq.w	2505a <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   2523a:	2300      	movs	r3, #0
   2523c:	9302      	str	r3, [sp, #8]
   2523e:	4b14      	ldr	r3, [pc, #80]	; (25290 <rpmsg_init_vdev_with_config+0x24c>)
   25240:	4620      	mov	r0, r4
   25242:	9301      	str	r3, [sp, #4]
   25244:	2335      	movs	r3, #53	; 0x35
   25246:	4a13      	ldr	r2, [pc, #76]	; (25294 <rpmsg_init_vdev_with_config+0x250>)
   25248:	9300      	str	r3, [sp, #0]
   2524a:	f104 0108 	add.w	r1, r4, #8
   2524e:	f7ff fe05 	bl	24e5c <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   25252:	f1b8 0f00 	cmp.w	r8, #0
   25256:	f47f af00 	bne.w	2505a <rpmsg_init_vdev_with_config+0x16>
   2525a:	e794      	b.n	25186 <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   2525c:	4f0b      	ldr	r7, [pc, #44]	; (2528c <rpmsg_init_vdev_with_config+0x248>)
   2525e:	e6fc      	b.n	2505a <rpmsg_init_vdev_with_config+0x16>
   25260:	fffff82d 	.word	0xfffff82d
   25264:	00024f9d 	.word	0x00024f9d
   25268:	00030831 	.word	0x00030831
   2526c:	00030a45 	.word	0x00030a45
   25270:	00030b45 	.word	0x00030b45
   25274:	00030a85 	.word	0x00030a85
   25278:	00030851 	.word	0x00030851
   2527c:	00038648 	.word	0x00038648
   25280:	0003864e 	.word	0x0003864e
   25284:	00030991 	.word	0x00030991
   25288:	0003083f 	.word	0x0003083f
   2528c:	fffff82e 	.word	0xfffff82e
   25290:	00030893 	.word	0x00030893
   25294:	00038654 	.word	0x00038654

00025298 <rpmsg_init_vdev>:
{
   25298:	b5f0      	push	{r4, r5, r6, r7, lr}
   2529a:	4605      	mov	r5, r0
   2529c:	460e      	mov	r6, r1
   2529e:	4617      	mov	r7, r2
   252a0:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   252a2:	4a07      	ldr	r2, [pc, #28]	; (252c0 <rpmsg_init_vdev+0x28>)
   252a4:	ac03      	add	r4, sp, #12
   252a6:	ca07      	ldmia	r2, {r0, r1, r2}
   252a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   252ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   252ae:	4631      	mov	r1, r6
   252b0:	9200      	str	r2, [sp, #0]
   252b2:	4628      	mov	r0, r5
   252b4:	463a      	mov	r2, r7
   252b6:	9401      	str	r4, [sp, #4]
   252b8:	f7ff fec4 	bl	25044 <rpmsg_init_vdev_with_config>
}
   252bc:	b007      	add	sp, #28
   252be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   252c0:	000331d8 	.word	0x000331d8

000252c4 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   252c4:	2203      	movs	r2, #3
   252c6:	4b11      	ldr	r3, [pc, #68]	; (2530c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   252c8:	4911      	ldr	r1, [pc, #68]	; (25310 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   252ca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   252cc:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   252ce:	4a11      	ldr	r2, [pc, #68]	; (25314 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   252d0:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   252d2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   252d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   252d8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   252da:	2200      	movs	r2, #0
   252dc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   252de:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   252e0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   252e2:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   252e4:	490c      	ldr	r1, [pc, #48]	; (25318 <_DoInit+0x54>)
   252e6:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   252e8:	2110      	movs	r1, #16
   252ea:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   252ec:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   252ee:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   252f0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   252f2:	4a0a      	ldr	r2, [pc, #40]	; (2531c <_DoInit+0x58>)
   252f4:	6812      	ldr	r2, [r2, #0]
   252f6:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   252fa:	4a09      	ldr	r2, [pc, #36]	; (25320 <_DoInit+0x5c>)
   252fc:	6810      	ldr	r0, [r2, #0]
   252fe:	8892      	ldrh	r2, [r2, #4]
   25300:	6018      	str	r0, [r3, #0]
   25302:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   25304:	2220      	movs	r2, #32
   25306:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   25308:	4770      	bx	lr
   2530a:	bf00      	nop
   2530c:	20030da8 	.word	0x20030da8
   25310:	00038657 	.word	0x00038657
   25314:	20031aff 	.word	0x20031aff
   25318:	20031aef 	.word	0x20031aef
   2531c:	00038660 	.word	0x00038660
   25320:	00038664 	.word	0x00038664

00025324 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   25328:	f04f 0b18 	mov.w	fp, #24
   2532c:	4f20      	ldr	r7, [pc, #128]	; (253b0 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2532e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   25330:	fb0b 7200 	mla	r2, fp, r0, r7
   25334:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   25336:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25338:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2533a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2533c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2533e:	d831      	bhi.n	253a4 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   25340:	f8d2 a020 	ldr.w	sl, [r2, #32]
   25344:	ebaa 0905 	sub.w	r9, sl, r5
   25348:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   2534c:	4294      	cmp	r4, r2
   2534e:	d811      	bhi.n	25374 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   25350:	2318      	movs	r3, #24
   25352:	fb06 3303 	mla	r3, r6, r3, r3
   25356:	443b      	add	r3, r7
   25358:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2535a:	4622      	mov	r2, r4
   2535c:	4641      	mov	r1, r8
   2535e:	4428      	add	r0, r5
   25360:	f00c fa65 	bl	3182e <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   25364:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   25366:	2318      	movs	r3, #24
      return 1;
   25368:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2536a:	fb03 7306 	mla	r3, r3, r6, r7
   2536e:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   25370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   25374:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   25376:	429c      	cmp	r4, r3
   25378:	d818      	bhi.n	253ac <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2537a:	fb00 bb0b 	mla	fp, r0, fp, fp
   2537e:	44bb      	add	fp, r7
   25380:	f8db 0004 	ldr.w	r0, [fp, #4]
   25384:	464a      	mov	r2, r9
   25386:	4428      	add	r0, r5
   25388:	442c      	add	r4, r5
   2538a:	f00c fa50 	bl	3182e <memcpy>
      if (NumBytes) {
   2538e:	ebb4 040a 	subs.w	r4, r4, sl
   25392:	d0e8      	beq.n	25366 <SEGGER_RTT_WriteSkipNoLock+0x42>
   25394:	4622      	mov	r2, r4
   25396:	f8db 0004 	ldr.w	r0, [fp, #4]
   2539a:	eb08 0109 	add.w	r1, r8, r9
   2539e:	f00c fa46 	bl	3182e <memcpy>
      return 1;
   253a2:	e7e0      	b.n	25366 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   253a4:	3b01      	subs	r3, #1
   253a6:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   253a8:	42a3      	cmp	r3, r4
   253aa:	d2d1      	bcs.n	25350 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   253ac:	2000      	movs	r0, #0
   253ae:	e7df      	b.n	25370 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   253b0:	20030da8 	.word	0x20030da8

000253b4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   253b4:	2218      	movs	r2, #24
   253b6:	4b03      	ldr	r3, [pc, #12]	; (253c4 <SEGGER_RTT_HasDataUp+0x10>)
   253b8:	fb02 3300 	mla	r3, r2, r0, r3
   253bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   253be:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   253c0:	1a80      	subs	r0, r0, r2
   253c2:	4770      	bx	lr
   253c4:	20030da8 	.word	0x20030da8

000253c8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   253c8:	4b01      	ldr	r3, [pc, #4]	; (253d0 <z_impl_z_errno+0x8>)
   253ca:	6898      	ldr	r0, [r3, #8]
}
   253cc:	3084      	adds	r0, #132	; 0x84
   253ce:	4770      	bx	lr
   253d0:	20030e50 	.word	0x20030e50

000253d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   253d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253d8:	4606      	mov	r6, r0
   253da:	b086      	sub	sp, #24
   253dc:	460f      	mov	r7, r1
	__asm__ volatile(
   253de:	f04f 0320 	mov.w	r3, #32
   253e2:	f3ef 8811 	mrs	r8, BASEPRI
   253e6:	f383 8812 	msr	BASEPRI_MAX, r3
   253ea:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   253ee:	f001 f8b5 	bl	2655c <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   253f2:	2400      	movs	r4, #0
   253f4:	2e04      	cmp	r6, #4
   253f6:	bf96      	itet	ls
   253f8:	4b21      	ldrls	r3, [pc, #132]	; (25480 <z_fatal_error+0xac>)
   253fa:	4b22      	ldrhi	r3, [pc, #136]	; (25484 <z_fatal_error+0xb0>)
   253fc:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   25400:	4605      	mov	r5, r0
   25402:	e9cd 3404 	strd	r3, r4, [sp, #16]
   25406:	4b20      	ldr	r3, [pc, #128]	; (25488 <z_fatal_error+0xb4>)
   25408:	2201      	movs	r2, #1
   2540a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2540e:	4620      	mov	r0, r4
   25410:	4623      	mov	r3, r4
   25412:	491e      	ldr	r1, [pc, #120]	; (2548c <z_fatal_error+0xb8>)
   25414:	9603      	str	r6, [sp, #12]
   25416:	9400      	str	r4, [sp, #0]
   25418:	f00b fc40 	bl	30c9c <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2541c:	b16f      	cbz	r7, 2543a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2541e:	69fb      	ldr	r3, [r7, #28]
   25420:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25424:	b14b      	cbz	r3, 2543a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   25426:	4b1a      	ldr	r3, [pc, #104]	; (25490 <z_fatal_error+0xbc>)
   25428:	2201      	movs	r2, #1
   2542a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2542e:	4620      	mov	r0, r4
   25430:	4623      	mov	r3, r4
   25432:	4916      	ldr	r1, [pc, #88]	; (2548c <z_fatal_error+0xb8>)
   25434:	9400      	str	r4, [sp, #0]
   25436:	f00b fc31 	bl	30c9c <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2543a:	b12d      	cbz	r5, 25448 <z_fatal_error+0x74>
   2543c:	4628      	mov	r0, r5
   2543e:	f00b fcf9 	bl	30e34 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25442:	b108      	cbz	r0, 25448 <z_fatal_error+0x74>
   25444:	7803      	ldrb	r3, [r0, #0]
   25446:	b903      	cbnz	r3, 2544a <z_fatal_error+0x76>
		thread_name = "unknown";
   25448:	4812      	ldr	r0, [pc, #72]	; (25494 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2544a:	4b13      	ldr	r3, [pc, #76]	; (25498 <z_fatal_error+0xc4>)
   2544c:	2201      	movs	r2, #1
   2544e:	9302      	str	r3, [sp, #8]
   25450:	2300      	movs	r3, #0
   25452:	e9cd 5003 	strd	r5, r0, [sp, #12]
   25456:	e9cd 3300 	strd	r3, r3, [sp]
   2545a:	4618      	mov	r0, r3
   2545c:	490b      	ldr	r1, [pc, #44]	; (2548c <z_fatal_error+0xb8>)
   2545e:	f00b fc1d 	bl	30c9c <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25462:	4639      	mov	r1, r7
   25464:	4630      	mov	r0, r6
   25466:	f7fd ff55 	bl	23314 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2546a:	f388 8811 	msr	BASEPRI, r8
   2546e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25472:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25474:	b006      	add	sp, #24
   25476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2547a:	f7ec bb1b 	b.w	11ab4 <z_impl_k_thread_abort>
   2547e:	bf00      	nop
   25480:	000341f0 	.word	0x000341f0
   25484:	000360bb 	.word	0x000360bb
   25488:	0003866b 	.word	0x0003866b
   2548c:	00033100 	.word	0x00033100
   25490:	00038693 	.word	0x00038693
   25494:	00035f26 	.word	0x00035f26
   25498:	000386b4 	.word	0x000386b4

0002549c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2549c:	4b0f      	ldr	r3, [pc, #60]	; (254dc <z_sys_init_run_level+0x40>)
{
   2549e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   254a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   254a4:	3001      	adds	r0, #1
   254a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   254aa:	42a6      	cmp	r6, r4
   254ac:	d800      	bhi.n	254b0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   254ae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   254b0:	e9d4 3500 	ldrd	r3, r5, [r4]
   254b4:	4628      	mov	r0, r5
   254b6:	4798      	blx	r3
		if (dev != NULL) {
   254b8:	b16d      	cbz	r5, 254d6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   254ba:	b138      	cbz	r0, 254cc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   254bc:	2800      	cmp	r0, #0
   254be:	bfb8      	it	lt
   254c0:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   254c2:	28ff      	cmp	r0, #255	; 0xff
   254c4:	bfa8      	it	ge
   254c6:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   254c8:	68eb      	ldr	r3, [r5, #12]
   254ca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   254cc:	68ea      	ldr	r2, [r5, #12]
   254ce:	7853      	ldrb	r3, [r2, #1]
   254d0:	f043 0301 	orr.w	r3, r3, #1
   254d4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   254d6:	3408      	adds	r4, #8
   254d8:	e7e7      	b.n	254aa <z_sys_init_run_level+0xe>
   254da:	bf00      	nop
   254dc:	00034204 	.word	0x00034204

000254e0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   254e0:	2201      	movs	r2, #1
{
   254e2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   254e4:	4b09      	ldr	r3, [pc, #36]	; (2550c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   254e6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   254e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   254ea:	f7ff ffd7 	bl	2549c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   254ee:	f001 fb69 	bl	26bc4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   254f2:	2004      	movs	r0, #4
   254f4:	f7ff ffd2 	bl	2549c <z_sys_init_run_level>

	z_init_static_threads();
   254f8:	f000 f98e 	bl	25818 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   254fc:	f7e7 fbae 	bl	cc5c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25500:	4a03      	ldr	r2, [pc, #12]	; (25510 <bg_thread_main+0x30>)
   25502:	7b13      	ldrb	r3, [r2, #12]
   25504:	f023 0301 	bic.w	r3, r3, #1
   25508:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2550a:	bd08      	pop	{r3, pc}
   2550c:	20031eff 	.word	0x20031eff
   25510:	2000a488 	.word	0x2000a488

00025514 <z_bss_zero>:
{
   25514:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   25516:	4803      	ldr	r0, [pc, #12]	; (25524 <z_bss_zero+0x10>)
   25518:	4a03      	ldr	r2, [pc, #12]	; (25528 <z_bss_zero+0x14>)
   2551a:	2100      	movs	r1, #0
   2551c:	1a12      	subs	r2, r2, r0
   2551e:	f00b fbcd 	bl	30cbc <z_early_memset>
}
   25522:	bd08      	pop	{r3, pc}
   25524:	20008fe8 	.word	0x20008fe8
   25528:	20031f18 	.word	0x20031f18

0002552c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   2552c:	23a8      	movs	r3, #168	; 0xa8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2552e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   25530:	4e14      	ldr	r6, [pc, #80]	; (25584 <z_init_cpu+0x58>)
{
   25532:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   25534:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   25538:	4b13      	ldr	r3, [pc, #76]	; (25588 <z_init_cpu+0x5c>)
   2553a:	2201      	movs	r2, #1
   2553c:	9305      	str	r3, [sp, #20]
   2553e:	230f      	movs	r3, #15
   25540:	e9cd 3203 	strd	r3, r2, [sp, #12]
   25544:	2300      	movs	r3, #0
   25546:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2554a:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   2554c:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25550:	4d0e      	ldr	r5, [pc, #56]	; (2558c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   25552:	490f      	ldr	r1, [pc, #60]	; (25590 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25554:	fb03 5500 	mla	r5, r3, r0, r5
{
   25558:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2555a:	fb02 1100 	mla	r1, r2, r0, r1
   2555e:	4b0d      	ldr	r3, [pc, #52]	; (25594 <z_init_cpu+0x68>)
   25560:	4630      	mov	r0, r6
   25562:	9500      	str	r5, [sp, #0]
   25564:	f000 f8ee 	bl	25744 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25568:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   2556a:	752c      	strb	r4, [r5, #20]
   2556c:	f023 0304 	bic.w	r3, r3, #4
   25570:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25572:	4b09      	ldr	r3, [pc, #36]	; (25598 <z_init_cpu+0x6c>)
   25574:	3401      	adds	r4, #1
   25576:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2557a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   2557c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2557e:	b006      	add	sp, #24
   25580:	bd70      	pop	{r4, r5, r6, pc}
   25582:	bf00      	nop
   25584:	2000a3e0 	.word	0x2000a3e0
   25588:	00038716 	.word	0x00038716
   2558c:	20030e50 	.word	0x20030e50
   25590:	20054658 	.word	0x20054658
   25594:	000258d1 	.word	0x000258d1
   25598:	20053e58 	.word	0x20053e58

0002559c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2559c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2559e:	2000      	movs	r0, #0
{
   255a0:	b0b0      	sub	sp, #192	; 0xc0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   255a2:	f7ff ff7b 	bl	2549c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   255a6:	4b2f      	ldr	r3, [pc, #188]	; (25664 <z_cstart+0xc8>)
	uint32_t msp =
   255a8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   255ac:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   255b0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   255b4:	2400      	movs	r4, #0
   255b6:	23e0      	movs	r3, #224	; 0xe0
   255b8:	4d2b      	ldr	r5, [pc, #172]	; (25668 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   255ba:	4e2c      	ldr	r6, [pc, #176]	; (2566c <z_cstart+0xd0>)
   255bc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   255c0:	77ec      	strb	r4, [r5, #31]
   255c2:	762c      	strb	r4, [r5, #24]
   255c4:	766c      	strb	r4, [r5, #25]
   255c6:	76ac      	strb	r4, [r5, #26]
   255c8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   255cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   255ce:	4f28      	ldr	r7, [pc, #160]	; (25670 <z_cstart+0xd4>)
   255d0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   255d4:	626b      	str	r3, [r5, #36]	; 0x24
   255d6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   255da:	f7ec f9cf 	bl	1197c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   255de:	f7eb fd7f 	bl	110e0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   255e2:	f04f 33ff 	mov.w	r3, #4294967295
   255e6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   255e8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   255ea:	f7ec fbff 	bl	11dec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   255ee:	f7ec fa77 	bl	11ae0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   255f2:	f7e9 ff19 	bl	f428 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   255f6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   255fa:	ad06      	add	r5, sp, #24
   255fc:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   255fe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   25602:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	k_thread_system_pool_assign(dummy_thread);
   25606:	f001 fabf 	bl	26b88 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2560a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2560c:	f00b fb3a 	bl	30c84 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   25610:	2001      	movs	r0, #1
   25612:	f7ff ff43 	bl	2549c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   25616:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   25618:	4d16      	ldr	r5, [pc, #88]	; (25674 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2561a:	f7ff ff3f 	bl	2549c <z_sys_init_run_level>
	z_sched_init();
   2561e:	f000 fef5 	bl	2640c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25622:	4b15      	ldr	r3, [pc, #84]	; (25678 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   25624:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25626:	9305      	str	r3, [sp, #20]
   25628:	2301      	movs	r3, #1
   2562a:	4914      	ldr	r1, [pc, #80]	; (2567c <z_cstart+0xe0>)
   2562c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25630:	e9cd 4303 	strd	r4, r3, [sp, #12]
   25634:	4628      	mov	r0, r5
   25636:	463b      	mov	r3, r7
   25638:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2563c:	9400      	str	r4, [sp, #0]
   2563e:	f000 f881 	bl	25744 <z_setup_new_thread>
   25642:	4606      	mov	r6, r0
   25644:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   25646:	4628      	mov	r0, r5
   25648:	f022 0204 	bic.w	r2, r2, #4
   2564c:	736a      	strb	r2, [r5, #13]
   2564e:	f00b fe1d 	bl	3128c <z_ready_thread>
	z_init_cpu(0);
   25652:	4620      	mov	r0, r4
   25654:	f7ff ff6a 	bl	2552c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25658:	463a      	mov	r2, r7
   2565a:	4631      	mov	r1, r6
   2565c:	4628      	mov	r0, r5
   2565e:	f7eb fe91 	bl	11384 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25662:	bf00      	nop
   25664:	20053e58 	.word	0x20053e58
   25668:	e000ed00 	.word	0xe000ed00
   2566c:	20030e50 	.word	0x20030e50
   25670:	000254e1 	.word	0x000254e1
   25674:	2000a488 	.word	0x2000a488
   25678:	0003871b 	.word	0x0003871b
   2567c:	20054798 	.word	0x20054798

00025680 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   25680:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25682:	4c06      	ldr	r4, [pc, #24]	; (2569c <statics_init+0x1c>)
   25684:	4d06      	ldr	r5, [pc, #24]	; (256a0 <statics_init+0x20>)
   25686:	42ac      	cmp	r4, r5
   25688:	d301      	bcc.n	2568e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2568a:	2000      	movs	r0, #0
   2568c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2568e:	4620      	mov	r0, r4
   25690:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   25694:	f00b fb16 	bl	30cc4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25698:	3414      	adds	r4, #20
   2569a:	e7f4      	b.n	25686 <statics_init+0x6>
   2569c:	20008b8c 	.word	0x20008b8c
   256a0:	20008ba0 	.word	0x20008ba0

000256a4 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   256a4:	2000      	movs	r0, #0
{
   256a6:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   256a8:	4c05      	ldr	r4, [pc, #20]	; (256c0 <init_mem_slab_module+0x1c>)
   256aa:	4d06      	ldr	r5, [pc, #24]	; (256c4 <init_mem_slab_module+0x20>)
   256ac:	42ac      	cmp	r4, r5
   256ae:	d300      	bcc.n	256b2 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   256b0:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   256b2:	4620      	mov	r0, r4
   256b4:	f00b fb78 	bl	30da8 <create_free_list>
		if (rc < 0) {
   256b8:	2800      	cmp	r0, #0
   256ba:	dbf9      	blt.n	256b0 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   256bc:	341c      	adds	r4, #28
   256be:	e7f5      	b.n	256ac <init_mem_slab_module+0x8>
   256c0:	20008b38 	.word	0x20008b38
   256c4:	20008b8c 	.word	0x20008b8c

000256c8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   256c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   256ca:	460c      	mov	r4, r1
	__asm__ volatile(
   256cc:	f04f 0520 	mov.w	r5, #32
   256d0:	f3ef 8111 	mrs	r1, BASEPRI
   256d4:	f385 8812 	msr	BASEPRI_MAX, r5
   256d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   256dc:	6945      	ldr	r5, [r0, #20]
   256de:	b15d      	cbz	r5, 256f8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   256e0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   256e2:	682b      	ldr	r3, [r5, #0]
   256e4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   256e6:	6983      	ldr	r3, [r0, #24]
   256e8:	3301      	adds	r3, #1
   256ea:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   256ec:	2000      	movs	r0, #0
	__asm__ volatile(
   256ee:	f381 8811 	msr	BASEPRI, r1
   256f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   256f6:	e011      	b.n	2571c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   256f8:	ea52 0603 	orrs.w	r6, r2, r3
   256fc:	d103      	bne.n	25706 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   256fe:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   25702:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   25704:	e7f3      	b.n	256ee <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   25706:	e9cd 2300 	strd	r2, r3, [sp]
   2570a:	4602      	mov	r2, r0
   2570c:	3008      	adds	r0, #8
   2570e:	f000 fd87 	bl	26220 <z_pend_curr>
		if (result == 0) {
   25712:	b918      	cbnz	r0, 2571c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   25714:	4b02      	ldr	r3, [pc, #8]	; (25720 <k_mem_slab_alloc+0x58>)
   25716:	689b      	ldr	r3, [r3, #8]
   25718:	695b      	ldr	r3, [r3, #20]
   2571a:	6023      	str	r3, [r4, #0]
}
   2571c:	b002      	add	sp, #8
   2571e:	bd70      	pop	{r4, r5, r6, pc}
   25720:	20030e50 	.word	0x20030e50

00025724 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   25724:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   25726:	4604      	mov	r4, r0
   25728:	b908      	cbnz	r0, 2572e <z_impl_k_thread_name_set+0xa>
		thread = _current;
   2572a:	4b05      	ldr	r3, [pc, #20]	; (25740 <z_impl_k_thread_name_set+0x1c>)
   2572c:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2572e:	221f      	movs	r2, #31
   25730:	f104 0062 	add.w	r0, r4, #98	; 0x62
   25734:	f00c fa1e 	bl	31b74 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   25738:	2000      	movs	r0, #0
   2573a:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   2573e:	bd10      	pop	{r4, pc}
   25740:	20030e50 	.word	0x20030e50

00025744 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25744:	b5f0      	push	{r4, r5, r6, r7, lr}
   25746:	b085      	sub	sp, #20
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   25748:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2574a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   2574e:	7307      	strb	r7, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25750:	2704      	movs	r7, #4
   25752:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   25756:	2500      	movs	r5, #0
{
   25758:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   2575a:	7347      	strb	r7, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2575c:	3207      	adds	r2, #7

	thread_base->prio = priority;
   2575e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25760:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   25764:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
	thread_base->prio = priority;
   25768:	7387      	strb	r7, [r0, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   2576a:	188f      	adds	r7, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2576c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2576e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
   25772:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   25774:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   25776:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2577a:	9202      	str	r2, [sp, #8]
   2577c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
{
   2577e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25780:	9201      	str	r2, [sp, #4]
   25782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25784:	9200      	str	r2, [sp, #0]
   25786:	463a      	mov	r2, r7
   25788:	f7eb fddc 	bl	11344 <arch_new_thread>
	new_thread->init_data = NULL;
   2578c:	6565      	str	r5, [r4, #84]	; 0x54
	if (name != NULL) {
   2578e:	b18e      	cbz	r6, 257b4 <z_setup_new_thread+0x70>
   25790:	221f      	movs	r2, #31
   25792:	4631      	mov	r1, r6
   25794:	f104 0062 	add.w	r0, r4, #98	; 0x62
   25798:	f00c f9ec 	bl	31b74 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2579c:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
	if (!_current) {
   257a0:	4b06      	ldr	r3, [pc, #24]	; (257bc <z_setup_new_thread+0x78>)
   257a2:	689b      	ldr	r3, [r3, #8]
   257a4:	b10b      	cbz	r3, 257aa <z_setup_new_thread+0x66>
	new_thread->resource_pool = _current->resource_pool;
   257a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
   257aa:	4638      	mov	r0, r7
   257ac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   257b0:	b005      	add	sp, #20
   257b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->name[0] = '\0';
   257b4:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
   257b8:	e7f2      	b.n	257a0 <z_setup_new_thread+0x5c>
   257ba:	bf00      	nop
   257bc:	20030e50 	.word	0x20030e50

000257c0 <z_impl_k_thread_create>:
{
   257c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   257c2:	2500      	movs	r5, #0
{
   257c4:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   257c6:	9505      	str	r5, [sp, #20]
   257c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   257ca:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   257ce:	9504      	str	r5, [sp, #16]
   257d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   257d2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   257d4:	9503      	str	r5, [sp, #12]
   257d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   257d8:	9502      	str	r5, [sp, #8]
   257da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   257dc:	9501      	str	r5, [sp, #4]
   257de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   257e0:	9500      	str	r5, [sp, #0]
   257e2:	f7ff ffaf 	bl	25744 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   257e6:	f1b6 3fff 	cmp.w	r6, #4294967295
   257ea:	bf08      	it	eq
   257ec:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   257f0:	d005      	beq.n	257fe <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   257f2:	ea56 0307 	orrs.w	r3, r6, r7
   257f6:	d105      	bne.n	25804 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   257f8:	4620      	mov	r0, r4
   257fa:	f000 fd87 	bl	2630c <z_sched_start>
}
   257fe:	4620      	mov	r0, r4
   25800:	b007      	add	sp, #28
   25802:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25804:	463a      	mov	r2, r7
   25806:	4633      	mov	r3, r6
   25808:	4902      	ldr	r1, [pc, #8]	; (25814 <z_impl_k_thread_create+0x54>)
   2580a:	f104 0018 	add.w	r0, r4, #24
   2580e:	f000 ff85 	bl	2671c <z_add_timeout>
   25812:	e7f4      	b.n	257fe <z_impl_k_thread_create+0x3e>
   25814:	000311f9 	.word	0x000311f9

00025818 <z_init_static_threads>:
{
   25818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2581c:	4c29      	ldr	r4, [pc, #164]	; (258c4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2581e:	4d2a      	ldr	r5, [pc, #168]	; (258c8 <z_init_static_threads+0xb0>)
{
   25820:	b087      	sub	sp, #28
   25822:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   25824:	42ae      	cmp	r6, r5
   25826:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2582a:	d30f      	bcc.n	2584c <z_init_static_threads+0x34>
	k_sched_lock();
   2582c:	f000 fdbe 	bl	263ac <k_sched_lock>
   25830:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25834:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   25838:	4c22      	ldr	r4, [pc, #136]	; (258c4 <z_init_static_threads+0xac>)
   2583a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 258cc <z_init_static_threads+0xb4>
   2583e:	42ac      	cmp	r4, r5
   25840:	d320      	bcc.n	25884 <z_init_static_threads+0x6c>
}
   25842:	b007      	add	sp, #28
   25844:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   25848:	f000 bdc4 	b.w	263d4 <k_sched_unlock>
		z_setup_new_thread(
   2584c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25850:	9305      	str	r3, [sp, #20]
   25852:	f854 3c10 	ldr.w	r3, [r4, #-16]
   25856:	9304      	str	r3, [sp, #16]
   25858:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2585c:	9303      	str	r3, [sp, #12]
   2585e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   25862:	9302      	str	r3, [sp, #8]
   25864:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   25868:	9301      	str	r3, [sp, #4]
   2586a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2586e:	9300      	str	r3, [sp, #0]
   25870:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   25874:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   25878:	f7ff ff64 	bl	25744 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2587c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   25880:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   25882:	e7ce      	b.n	25822 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25884:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25886:	1c5a      	adds	r2, r3, #1
   25888:	d00d      	beq.n	258a6 <z_init_static_threads+0x8e>
   2588a:	2100      	movs	r1, #0
   2588c:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   2588e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   25892:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25896:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2589a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2589e:	d104      	bne.n	258aa <z_init_static_threads+0x92>
	z_sched_start(thread);
   258a0:	4640      	mov	r0, r8
   258a2:	f000 fd33 	bl	2630c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   258a6:	3430      	adds	r4, #48	; 0x30
   258a8:	e7c9      	b.n	2583e <z_init_static_threads+0x26>
   258aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   258ae:	2300      	movs	r3, #0
   258b0:	f7e3 fb46 	bl	8f40 <__aeabi_uldivmod>
   258b4:	4602      	mov	r2, r0
   258b6:	460b      	mov	r3, r1
   258b8:	f108 0018 	add.w	r0, r8, #24
   258bc:	4649      	mov	r1, r9
   258be:	f000 ff2d 	bl	2671c <z_add_timeout>
   258c2:	e7f0      	b.n	258a6 <z_init_static_threads+0x8e>
   258c4:	00032c80 	.word	0x00032c80
   258c8:	00032f20 	.word	0x00032f20
   258cc:	000311f9 	.word	0x000311f9

000258d0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   258d0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   258d2:	4c0b      	ldr	r4, [pc, #44]	; (25900 <idle+0x30>)
   258d4:	4d0b      	ldr	r5, [pc, #44]	; (25904 <idle+0x34>)
	__asm__ volatile(
   258d6:	f04f 0220 	mov.w	r2, #32
   258da:	f3ef 8311 	mrs	r3, BASEPRI
   258de:	f382 8812 	msr	BASEPRI_MAX, r2
   258e2:	f3bf 8f6f 	isb	sy
   258e6:	f00b fd98 	bl	3141a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   258ea:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   258ec:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   258ee:	b913      	cbnz	r3, 258f6 <idle+0x26>
	arch_cpu_idle();
   258f0:	f7eb fbfc 	bl	110ec <arch_cpu_idle>
}
   258f4:	e7ef      	b.n	258d6 <idle+0x6>
   258f6:	f7eb f965 	bl	10bc4 <pm_system_suspend>
   258fa:	2800      	cmp	r0, #0
   258fc:	d1eb      	bne.n	258d6 <idle+0x6>
   258fe:	e7f7      	b.n	258f0 <idle+0x20>
   25900:	20030e50 	.word	0x20030e50
   25904:	20031eff 	.word	0x20031eff

00025908 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2590c:	4604      	mov	r4, r0
   2590e:	4617      	mov	r7, r2
   25910:	461e      	mov	r6, r3
   25912:	f04f 0320 	mov.w	r3, #32
   25916:	f3ef 8811 	mrs	r8, BASEPRI
   2591a:	f383 8812 	msr	BASEPRI_MAX, r3
   2591e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25922:	68c3      	ldr	r3, [r0, #12]
   25924:	4a33      	ldr	r2, [pc, #204]	; (259f4 <z_impl_k_mutex_lock+0xec>)
   25926:	b17b      	cbz	r3, 25948 <z_impl_k_mutex_lock+0x40>
   25928:	6880      	ldr	r0, [r0, #8]
   2592a:	6891      	ldr	r1, [r2, #8]
   2592c:	4288      	cmp	r0, r1
   2592e:	d019      	beq.n	25964 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   25930:	ea57 0306 	orrs.w	r3, r7, r6
   25934:	d118      	bne.n	25968 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   25936:	f388 8811 	msr	BASEPRI, r8
   2593a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2593e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25942:	b002      	add	sp, #8
   25944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   25948:	6891      	ldr	r1, [r2, #8]
   2594a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2594e:	3301      	adds	r3, #1
   25950:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   25952:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   25954:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   25956:	60a3      	str	r3, [r4, #8]
   25958:	f388 8811 	msr	BASEPRI, r8
   2595c:	f3bf 8f6f 	isb	sy
		return 0;
   25960:	2000      	movs	r0, #0
   25962:	e7ee      	b.n	25942 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   25964:	6921      	ldr	r1, [r4, #16]
   25966:	e7f2      	b.n	2594e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   25968:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2596c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   25970:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   25974:	4299      	cmp	r1, r3
   25976:	bfa8      	it	ge
   25978:	4619      	movge	r1, r3
   2597a:	4291      	cmp	r1, r2
   2597c:	bfb8      	it	lt
   2597e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25980:	428b      	cmp	r3, r1
   25982:	dd2e      	ble.n	259e2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   25984:	f00b fa61 	bl	30e4a <adjust_owner_prio.isra.0>
   25988:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2598a:	4622      	mov	r2, r4
   2598c:	4641      	mov	r1, r8
   2598e:	e9cd 7600 	strd	r7, r6, [sp]
   25992:	4819      	ldr	r0, [pc, #100]	; (259f8 <z_impl_k_mutex_lock+0xf0>)
   25994:	f000 fc44 	bl	26220 <z_pend_curr>
	if (got_mutex == 0) {
   25998:	2800      	cmp	r0, #0
   2599a:	d0e1      	beq.n	25960 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   2599c:	f04f 0320 	mov.w	r3, #32
   259a0:	f3ef 8611 	mrs	r6, BASEPRI
   259a4:	f383 8812 	msr	BASEPRI_MAX, r3
   259a8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   259ac:	68a0      	ldr	r0, [r4, #8]
   259ae:	b1d0      	cbz	r0, 259e6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   259b0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   259b2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   259b4:	429c      	cmp	r4, r3
   259b6:	d00a      	beq.n	259ce <z_impl_k_mutex_lock+0xc6>
   259b8:	b14b      	cbz	r3, 259ce <z_impl_k_mutex_lock+0xc6>
   259ba:	f993 300e 	ldrsb.w	r3, [r3, #14]
   259be:	4299      	cmp	r1, r3
   259c0:	bfa8      	it	ge
   259c2:	4619      	movge	r1, r3
   259c4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   259c8:	4299      	cmp	r1, r3
   259ca:	bfb8      	it	lt
   259cc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   259ce:	f00b fa3c 	bl	30e4a <adjust_owner_prio.isra.0>
   259d2:	b140      	cbz	r0, 259e6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   259d4:	4631      	mov	r1, r6
   259d6:	4808      	ldr	r0, [pc, #32]	; (259f8 <z_impl_k_mutex_lock+0xf0>)
   259d8:	f000 fc86 	bl	262e8 <z_reschedule>
	return -EAGAIN;
   259dc:	f06f 000a 	mvn.w	r0, #10
   259e0:	e7af      	b.n	25942 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   259e2:	2500      	movs	r5, #0
   259e4:	e7d1      	b.n	2598a <z_impl_k_mutex_lock+0x82>
	if (resched) {
   259e6:	2d00      	cmp	r5, #0
   259e8:	d1f4      	bne.n	259d4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   259ea:	f386 8811 	msr	BASEPRI, r6
   259ee:	f3bf 8f6f 	isb	sy
   259f2:	e7f3      	b.n	259dc <z_impl_k_mutex_lock+0xd4>
   259f4:	20030e50 	.word	0x20030e50
   259f8:	20031f00 	.word	0x20031f00

000259fc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   259fc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   259fe:	6883      	ldr	r3, [r0, #8]
{
   25a00:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   25a02:	b373      	cbz	r3, 25a62 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   25a04:	4a1a      	ldr	r2, [pc, #104]	; (25a70 <z_impl_k_mutex_unlock+0x74>)
   25a06:	6892      	ldr	r2, [r2, #8]
   25a08:	4293      	cmp	r3, r2
   25a0a:	d12d      	bne.n	25a68 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   25a0c:	68c3      	ldr	r3, [r0, #12]
   25a0e:	2b01      	cmp	r3, #1
   25a10:	d903      	bls.n	25a1a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   25a12:	3b01      	subs	r3, #1
   25a14:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   25a16:	2000      	movs	r0, #0
}
   25a18:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   25a1a:	f04f 0320 	mov.w	r3, #32
   25a1e:	f3ef 8511 	mrs	r5, BASEPRI
   25a22:	f383 8812 	msr	BASEPRI_MAX, r3
   25a26:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   25a2a:	6901      	ldr	r1, [r0, #16]
   25a2c:	6880      	ldr	r0, [r0, #8]
   25a2e:	f00b fa0c 	bl	30e4a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25a32:	4620      	mov	r0, r4
   25a34:	f00b fc61 	bl	312fa <z_unpend_first_thread>
	mutex->owner = new_owner;
   25a38:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25a3a:	b160      	cbz	r0, 25a56 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   25a3c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25a40:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   25a42:	2200      	movs	r2, #0
   25a44:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		z_ready_thread(new_owner);
   25a48:	f00b fc20 	bl	3128c <z_ready_thread>
		z_reschedule(&lock, key);
   25a4c:	4629      	mov	r1, r5
   25a4e:	4809      	ldr	r0, [pc, #36]	; (25a74 <z_impl_k_mutex_unlock+0x78>)
   25a50:	f000 fc4a 	bl	262e8 <z_reschedule>
   25a54:	e7df      	b.n	25a16 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   25a56:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25a58:	f385 8811 	msr	BASEPRI, r5
   25a5c:	f3bf 8f6f 	isb	sy
   25a60:	e7d9      	b.n	25a16 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   25a62:	f06f 0015 	mvn.w	r0, #21
   25a66:	e7d7      	b.n	25a18 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   25a68:	f04f 30ff 	mov.w	r0, #4294967295
   25a6c:	e7d4      	b.n	25a18 <z_impl_k_mutex_unlock+0x1c>
   25a6e:	bf00      	nop
   25a70:	20030e50 	.word	0x20030e50
   25a74:	20031f00 	.word	0x20031f00

00025a78 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25a7a:	4611      	mov	r1, r2
	__asm__ volatile(
   25a7c:	f04f 0220 	mov.w	r2, #32
   25a80:	f3ef 8511 	mrs	r5, BASEPRI
   25a84:	f382 8812 	msr	BASEPRI_MAX, r2
   25a88:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   25a8c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25a8e:	b19c      	cbz	r4, 25ab8 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25a90:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25a92:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25a94:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25a98:	4294      	cmp	r4, r2
	list->head = node;
   25a9a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   25a9c:	bf08      	it	eq
   25a9e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25aa0:	2101      	movs	r1, #1
   25aa2:	4620      	mov	r0, r4
   25aa4:	f00b fa47 	bl	30f36 <z_queue_node_peek>
   25aa8:	4604      	mov	r4, r0
	__asm__ volatile(
   25aaa:	f385 8811 	msr	BASEPRI, r5
   25aae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   25ab2:	4620      	mov	r0, r4
   25ab4:	b003      	add	sp, #12
   25ab6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25ab8:	ea51 0203 	orrs.w	r2, r1, r3
   25abc:	d0f5      	beq.n	25aaa <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25abe:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25ac2:	e9cd 1300 	strd	r1, r3, [sp]
   25ac6:	4610      	mov	r0, r2
   25ac8:	4629      	mov	r1, r5
   25aca:	f000 fba9 	bl	26220 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   25ace:	2800      	cmp	r0, #0
   25ad0:	d1ef      	bne.n	25ab2 <z_impl_k_queue_get+0x3a>
   25ad2:	4b02      	ldr	r3, [pc, #8]	; (25adc <z_impl_k_queue_get+0x64>)
   25ad4:	689b      	ldr	r3, [r3, #8]
   25ad6:	695c      	ldr	r4, [r3, #20]
   25ad8:	e7eb      	b.n	25ab2 <z_impl_k_queue_get+0x3a>
   25ada:	bf00      	nop
   25adc:	20030e50 	.word	0x20030e50

00025ae0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   25ae0:	b538      	push	{r3, r4, r5, lr}
   25ae2:	4604      	mov	r4, r0
	__asm__ volatile(
   25ae4:	f04f 0320 	mov.w	r3, #32
   25ae8:	f3ef 8511 	mrs	r5, BASEPRI
   25aec:	f383 8812 	msr	BASEPRI_MAX, r3
   25af0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25af4:	f00b fc01 	bl	312fa <z_unpend_first_thread>

	if (thread != NULL) {
   25af8:	b150      	cbz	r0, 25b10 <z_impl_k_sem_give+0x30>
   25afa:	2200      	movs	r2, #0
   25afc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25b00:	f00b fbc4 	bl	3128c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25b04:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25b0a:	4807      	ldr	r0, [pc, #28]	; (25b28 <z_impl_k_sem_give+0x48>)
   25b0c:	f000 bbec 	b.w	262e8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25b10:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25b14:	429a      	cmp	r2, r3
   25b16:	bf18      	it	ne
   25b18:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25b1a:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25b1c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25b1e:	f104 0010 	add.w	r0, r4, #16
   25b22:	f00b fe3b 	bl	3179c <z_handle_obj_poll_events>
}
   25b26:	e7ed      	b.n	25b04 <z_impl_k_sem_give+0x24>
   25b28:	20031f00 	.word	0x20031f00

00025b2c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25b2c:	b513      	push	{r0, r1, r4, lr}
   25b2e:	f04f 0420 	mov.w	r4, #32
   25b32:	f3ef 8111 	mrs	r1, BASEPRI
   25b36:	f384 8812 	msr	BASEPRI_MAX, r4
   25b3a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25b3e:	6884      	ldr	r4, [r0, #8]
   25b40:	b144      	cbz	r4, 25b54 <z_impl_k_sem_take+0x28>
		sem->count--;
   25b42:	3c01      	subs	r4, #1
   25b44:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   25b46:	f381 8811 	msr	BASEPRI, r1
   25b4a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25b4e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25b50:	b002      	add	sp, #8
   25b52:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25b54:	ea52 0403 	orrs.w	r4, r2, r3
   25b58:	d106      	bne.n	25b68 <z_impl_k_sem_take+0x3c>
   25b5a:	f381 8811 	msr	BASEPRI, r1
   25b5e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25b62:	f06f 000f 	mvn.w	r0, #15
   25b66:	e7f3      	b.n	25b50 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25b68:	e9cd 2300 	strd	r2, r3, [sp]
   25b6c:	4602      	mov	r2, r0
   25b6e:	4802      	ldr	r0, [pc, #8]	; (25b78 <z_impl_k_sem_take+0x4c>)
   25b70:	f000 fb56 	bl	26220 <z_pend_curr>
	return ret;
   25b74:	e7ec      	b.n	25b50 <z_impl_k_sem_take+0x24>
   25b76:	bf00      	nop
   25b78:	20031f00 	.word	0x20031f00

00025b7c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25b7e:	2400      	movs	r4, #0
   25b80:	4b08      	ldr	r3, [pc, #32]	; (25ba4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	struct k_work_queue_config cfg = {
   25b86:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25b88:	ab02      	add	r3, sp, #8
   25b8a:	9300      	str	r3, [sp, #0]
   25b8c:	4906      	ldr	r1, [pc, #24]	; (25ba8 <k_sys_work_q_init+0x2c>)
   25b8e:	f04f 33ff 	mov.w	r3, #4294967295
   25b92:	4806      	ldr	r0, [pc, #24]	; (25bac <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25b94:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25b98:	f000 f924 	bl	25de4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25b9c:	4620      	mov	r0, r4
   25b9e:	b004      	add	sp, #16
   25ba0:	bd10      	pop	{r4, pc}
   25ba2:	bf00      	nop
   25ba4:	00038723 	.word	0x00038723
   25ba8:	20054b98 	.word	0x20054b98
   25bac:	2000a530 	.word	0x2000a530

00025bb0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bb4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   25bb6:	f04f 38ff 	mov.w	r8, #4294967295
   25bba:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   25bbe:	4e48      	ldr	r6, [pc, #288]	; (25ce0 <work_queue_main+0x130>)
{
   25bc0:	b085      	sub	sp, #20
	__asm__ volatile(
   25bc2:	f04f 0320 	mov.w	r3, #32
   25bc6:	f3ef 8711 	mrs	r7, BASEPRI
   25bca:	f383 8812 	msr	BASEPRI_MAX, r3
   25bce:	f3bf 8f6f 	isb	sy
   25bd2:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
Z_GENLIST_GET(slist, snode)
   25bd6:	b98d      	cbnz	r5, 25bfc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   25bd8:	2102      	movs	r1, #2
   25bda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   25bde:	f00b f9e7 	bl	30fb0 <flag_test_and_clear>
   25be2:	2800      	cmp	r0, #0
   25be4:	d143      	bne.n	25c6e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   25be6:	2300      	movs	r3, #0
   25be8:	4639      	mov	r1, r7
   25bea:	e9cd 8900 	strd	r8, r9, [sp]
   25bee:	9302      	str	r3, [sp, #8]
   25bf0:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
   25bf4:	483b      	ldr	r0, [pc, #236]	; (25ce4 <work_queue_main+0x134>)
   25bf6:	f000 fd17 	bl	26628 <z_sched_wait>
			continue;
   25bfa:	e7e2      	b.n	25bc2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25bfc:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
	return node->next;
   25c00:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25c02:	4295      	cmp	r5, r2
	list->head = node;
   25c04:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	list->tail = node;
   25c08:	bf08      	it	eq
   25c0a:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
	*flagp |= BIT(bit);
   25c0e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   25c12:	f043 0302 	orr.w	r3, r3, #2
   25c16:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	*flagp &= ~BIT(bit);
   25c1a:	68eb      	ldr	r3, [r5, #12]
   25c1c:	f023 0304 	bic.w	r3, r3, #4
   25c20:	f043 0301 	orr.w	r3, r3, #1
   25c24:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   25c26:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   25c28:	f387 8811 	msr	BASEPRI, r7
   25c2c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   25c30:	4628      	mov	r0, r5
   25c32:	4798      	blx	r3
	__asm__ volatile(
   25c34:	f04f 0320 	mov.w	r3, #32
   25c38:	f3ef 8b11 	mrs	fp, BASEPRI
   25c3c:	f383 8812 	msr	BASEPRI_MAX, r3
   25c40:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   25c44:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25c46:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25c48:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25c4c:	d419      	bmi.n	25c82 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   25c4e:	60ea      	str	r2, [r5, #12]
   25c50:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   25c54:	f023 0302 	bic.w	r3, r3, #2
   25c58:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	__asm__ volatile(
   25c5c:	f38b 8811 	msr	BASEPRI, fp
   25c60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25c64:	05db      	lsls	r3, r3, #23
   25c66:	d4ac      	bmi.n	25bc2 <work_queue_main+0x12>
	z_impl_k_yield();
   25c68:	f000 fbdc 	bl	26424 <z_impl_k_yield>
}
   25c6c:	e7a9      	b.n	25bc2 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25c6e:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25c72:	2200      	movs	r2, #0
   25c74:	2101      	movs	r1, #1
   25c76:	4628      	mov	r0, r5
   25c78:	f00b fb95 	bl	313a6 <z_sched_wake>
   25c7c:	2800      	cmp	r0, #0
   25c7e:	d1f8      	bne.n	25c72 <work_queue_main+0xc2>
   25c80:	e7b1      	b.n	25be6 <work_queue_main+0x36>
	return list->head;
   25c82:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   25c84:	f023 0303 	bic.w	r3, r3, #3
   25c88:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25c8a:	2800      	cmp	r0, #0
   25c8c:	d0e0      	beq.n	25c50 <work_queue_main+0xa0>
	return node->next;
   25c8e:	2700      	movs	r7, #0
	parent->next = child;
   25c90:	463b      	mov	r3, r7
	return node->next;
   25c92:	f8d0 a000 	ldr.w	sl, [r0]
   25c96:	2800      	cmp	r0, #0
   25c98:	d0da      	beq.n	25c50 <work_queue_main+0xa0>
		if (wc->work == work) {
   25c9a:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25c9c:	4601      	mov	r1, r0
		if (wc->work == work) {
   25c9e:	4295      	cmp	r5, r2
   25ca0:	d10c      	bne.n	25cbc <work_queue_main+0x10c>
   25ca2:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   25ca4:	b99f      	cbnz	r7, 25cce <work_queue_main+0x11e>
   25ca6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   25ca8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   25caa:	4282      	cmp	r2, r0
   25cac:	d100      	bne.n	25cb0 <work_queue_main+0x100>
	list->tail = node;
   25cae:	6071      	str	r1, [r6, #4]
	parent->next = child;
   25cb0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   25cb4:	f7ff ff14 	bl	25ae0 <z_impl_k_sem_give>
}
   25cb8:	4639      	mov	r1, r7
   25cba:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25cbc:	f1ba 0f00 	cmp.w	sl, #0
   25cc0:	d00b      	beq.n	25cda <work_queue_main+0x12a>
	return node->next;
   25cc2:	f8da 2000 	ldr.w	r2, [sl]
   25cc6:	4650      	mov	r0, sl
   25cc8:	460f      	mov	r7, r1
   25cca:	4692      	mov	sl, r2
   25ccc:	e7e3      	b.n	25c96 <work_queue_main+0xe6>
	parent->next = child;
   25cce:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25cd0:	6872      	ldr	r2, [r6, #4]
   25cd2:	4282      	cmp	r2, r0
	list->tail = node;
   25cd4:	bf08      	it	eq
   25cd6:	6077      	streq	r7, [r6, #4]
}
   25cd8:	e7ea      	b.n	25cb0 <work_queue_main+0x100>
   25cda:	4652      	mov	r2, sl
   25cdc:	e7f3      	b.n	25cc6 <work_queue_main+0x116>
   25cde:	bf00      	nop
   25ce0:	20030e78 	.word	0x20030e78
   25ce4:	20031f00 	.word	0x20031f00

00025ce8 <cancel_sync_locked>:
{
   25ce8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25cea:	68c3      	ldr	r3, [r0, #12]
{
   25cec:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   25cee:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   25cf2:	079b      	lsls	r3, r3, #30
{
   25cf4:	460c      	mov	r4, r1
	if (ret) {
   25cf6:	d50d      	bpl.n	25d14 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25cf8:	2201      	movs	r2, #1
   25cfa:	2100      	movs	r1, #0
   25cfc:	f104 0008 	add.w	r0, r4, #8
   25d00:	f00b f946 	bl	30f90 <z_impl_k_sem_init>
	parent->next = child;
   25d04:	2300      	movs	r3, #0
   25d06:	6023      	str	r3, [r4, #0]
	return list->tail;
   25d08:	4b05      	ldr	r3, [pc, #20]	; (25d20 <cancel_sync_locked+0x38>)
	canceler->work = work;
   25d0a:	6065      	str	r5, [r4, #4]
   25d0c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25d0e:	b91a      	cbnz	r2, 25d18 <cancel_sync_locked+0x30>
	list->head = node;
   25d10:	e9c3 4400 	strd	r4, r4, [r3]
}
   25d14:	4630      	mov	r0, r6
   25d16:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25d18:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25d1a:	605c      	str	r4, [r3, #4]
}
   25d1c:	e7fa      	b.n	25d14 <cancel_sync_locked+0x2c>
   25d1e:	bf00      	nop
   25d20:	20030e78 	.word	0x20030e78

00025d24 <submit_to_queue_locked>:
{
   25d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   25d26:	68c3      	ldr	r3, [r0, #12]
{
   25d28:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25d2a:	079a      	lsls	r2, r3, #30
{
   25d2c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25d2e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25d32:	d42c      	bmi.n	25d8e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25d34:	075b      	lsls	r3, r3, #29
   25d36:	d41a      	bmi.n	25d6e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   25d38:	680b      	ldr	r3, [r1, #0]
   25d3a:	b90b      	cbnz	r3, 25d40 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25d3c:	6883      	ldr	r3, [r0, #8]
   25d3e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   25d40:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25d42:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   25d44:	bf42      	ittt	mi
   25d46:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   25d48:	2602      	movmi	r6, #2
			*queuep = work->queue;
   25d4a:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   25d4c:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   25d4e:	bf58      	it	pl
   25d50:	2601      	movpl	r6, #1
	if (queue == NULL) {
   25d52:	2d00      	cmp	r5, #0
   25d54:	d03a      	beq.n	25dcc <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25d56:	4b1f      	ldr	r3, [pc, #124]	; (25dd4 <submit_to_queue_locked+0xb0>)
   25d58:	689b      	ldr	r3, [r3, #8]
   25d5a:	42ab      	cmp	r3, r5
   25d5c:	d00a      	beq.n	25d74 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   25d5e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25d62:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25d64:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25d68:	d414      	bmi.n	25d94 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   25d6a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   25d6e:	2300      	movs	r3, #0
   25d70:	603b      	str	r3, [r7, #0]
	return ret;
   25d72:	e025      	b.n	25dc0 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25d74:	f00b f858 	bl	30e28 <k_is_in_isr>
   25d78:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   25d7c:	2800      	cmp	r0, #0
   25d7e:	d1f0      	bne.n	25d62 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25d80:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25d82:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25d86:	d5f0      	bpl.n	25d6a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   25d88:	b152      	cbz	r2, 25da0 <submit_to_queue_locked+0x7c>
   25d8a:	075b      	lsls	r3, r3, #29
   25d8c:	d408      	bmi.n	25da0 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   25d8e:	f06f 060f 	mvn.w	r6, #15
   25d92:	e7ec      	b.n	25d6e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   25d94:	2a00      	cmp	r2, #0
   25d96:	d1fa      	bne.n	25d8e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   25d98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25d9c:	2b00      	cmp	r3, #0
   25d9e:	d1f6      	bne.n	25d8e <submit_to_queue_locked+0x6a>
	parent->next = child;
   25da0:	2300      	movs	r3, #0
   25da2:	6023      	str	r3, [r4, #0]
	return list->tail;
   25da4:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
Z_GENLIST_APPEND(slist, snode)
   25da8:	b963      	cbnz	r3, 25dc4 <submit_to_queue_locked+0xa0>
	list->head = node;
   25daa:	e9c5 442a 	strd	r4, r4, [r5, #168]	; 0xa8
		(void)notify_queue_locked(queue);
   25dae:	4628      	mov	r0, r5
   25db0:	f00b f917 	bl	30fe2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25db4:	68e3      	ldr	r3, [r4, #12]
   25db6:	f043 0304 	orr.w	r3, r3, #4
   25dba:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25dbc:	683b      	ldr	r3, [r7, #0]
   25dbe:	60a3      	str	r3, [r4, #8]
}
   25dc0:	4630      	mov	r0, r6
   25dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25dc4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25dc6:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
}
   25dca:	e7f0      	b.n	25dae <submit_to_queue_locked+0x8a>
		return -EINVAL;
   25dcc:	f06f 0615 	mvn.w	r6, #21
   25dd0:	e7cd      	b.n	25d6e <submit_to_queue_locked+0x4a>
   25dd2:	bf00      	nop
   25dd4:	20030e50 	.word	0x20030e50

00025dd8 <k_work_submit>:
{
   25dd8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   25dda:	4801      	ldr	r0, [pc, #4]	; (25de0 <k_work_submit+0x8>)
   25ddc:	f00b b987 	b.w	310ee <k_work_submit_to_queue>
   25de0:	2000a530 	.word	0x2000a530

00025de4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   25de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   25de6:	4604      	mov	r4, r0
	list->head = NULL;
   25de8:	2000      	movs	r0, #0
   25dea:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   25dec:	e9c4 002a 	strd	r0, r0, [r4, #168]	; 0xa8
   25df0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   25df2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	list->tail = (sys_dnode_t *)list;
   25df6:	e9c4 002c 	strd	r0, r0, [r4, #176]	; 0xb0
   25dfa:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   25dfe:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   25e02:	b31d      	cbz	r5, 25e4c <k_work_queue_start+0x68>
   25e04:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   25e06:	2800      	cmp	r0, #0
   25e08:	f240 1001 	movw	r0, #257	; 0x101
   25e0c:	bf08      	it	eq
   25e0e:	2001      	moveq	r0, #1
	*flagp = flags;
   25e10:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25e14:	2000      	movs	r0, #0
   25e16:	f04f 36ff 	mov.w	r6, #4294967295
   25e1a:	f04f 37ff 	mov.w	r7, #4294967295
   25e1e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25e22:	e9cd 0001 	strd	r0, r0, [sp, #4]
   25e26:	e9cd 6706 	strd	r6, r7, [sp, #24]
   25e2a:	4620      	mov	r0, r4
   25e2c:	4b08      	ldr	r3, [pc, #32]	; (25e50 <k_work_queue_start+0x6c>)
   25e2e:	9400      	str	r4, [sp, #0]
   25e30:	f7ff fcc6 	bl	257c0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   25e34:	b125      	cbz	r5, 25e40 <k_work_queue_start+0x5c>
   25e36:	6829      	ldr	r1, [r5, #0]
   25e38:	b111      	cbz	r1, 25e40 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   25e3a:	4620      	mov	r0, r4
   25e3c:	f7ff fc72 	bl	25724 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25e40:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   25e42:	b009      	add	sp, #36	; 0x24
   25e44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25e48:	f00a bff6 	b.w	30e38 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25e4c:	2001      	movs	r0, #1
   25e4e:	e7df      	b.n	25e10 <k_work_queue_start+0x2c>
   25e50:	00025bb1 	.word	0x00025bb1

00025e54 <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   25e54:	b530      	push	{r4, r5, lr}
   25e56:	460a      	mov	r2, r1
   25e58:	4604      	mov	r4, r0
   25e5a:	b085      	sub	sp, #20
	__asm__ volatile(
   25e5c:	f04f 0320 	mov.w	r3, #32
   25e60:	f3ef 8511 	mrs	r5, BASEPRI
   25e64:	f383 8812 	msr	BASEPRI_MAX, r3
   25e68:	f3bf 8f6f 	isb	sy
	return *flagp;
   25e6c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   25e70:	f013 0f06 	tst.w	r3, #6
   25e74:	d11d      	bne.n	25eb2 <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   25e76:	b1b1      	cbz	r1, 25ea6 <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   25e78:	f043 030c 	orr.w	r3, r3, #12
   25e7c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   25e80:	4620      	mov	r0, r4
   25e82:	f00b f8ae 	bl	30fe2 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   25e86:	2300      	movs	r3, #0
   25e88:	f04f 32ff 	mov.w	r2, #4294967295
   25e8c:	9302      	str	r3, [sp, #8]
   25e8e:	f04f 33ff 	mov.w	r3, #4294967295
   25e92:	4629      	mov	r1, r5
   25e94:	e9cd 2300 	strd	r2, r3, [sp]
   25e98:	480c      	ldr	r0, [pc, #48]	; (25ecc <k_work_queue_drain+0x78>)
   25e9a:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   25e9e:	f000 fbc3 	bl	26628 <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   25ea2:	b005      	add	sp, #20
   25ea4:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   25ea6:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
   25eaa:	b148      	cbz	r0, 25ec0 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   25eac:	f043 0304 	orr.w	r3, r3, #4
   25eb0:	e7e4      	b.n	25e7c <k_work_queue_drain+0x28>
   25eb2:	f043 0104 	orr.w	r1, r3, #4
   25eb6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
		if (plug) {
   25eba:	2a00      	cmp	r2, #0
   25ebc:	d0e0      	beq.n	25e80 <k_work_queue_drain+0x2c>
   25ebe:	e7db      	b.n	25e78 <k_work_queue_drain+0x24>
	__asm__ volatile(
   25ec0:	f385 8811 	msr	BASEPRI, r5
   25ec4:	f3bf 8f6f 	isb	sy
	return ret;
   25ec8:	e7eb      	b.n	25ea2 <k_work_queue_drain+0x4e>
   25eca:	bf00      	nop
   25ecc:	20031f00 	.word	0x20031f00

00025ed0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25ed2:	9001      	str	r0, [sp, #4]
   25ed4:	4608      	mov	r0, r1
	__asm__ volatile(
   25ed6:	f04f 0120 	mov.w	r1, #32
   25eda:	f3ef 8411 	mrs	r4, BASEPRI
   25ede:	f381 8812 	msr	BASEPRI_MAX, r1
   25ee2:	f3bf 8f6f 	isb	sy
	return *flagp;
   25ee6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25ee8:	f011 0f0e 	tst.w	r1, #14
   25eec:	d116      	bne.n	25f1c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25eee:	ea53 0502 	orrs.w	r5, r3, r2
   25ef2:	d108      	bne.n	25f06 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   25ef4:	a901      	add	r1, sp, #4
   25ef6:	f7ff ff15 	bl	25d24 <submit_to_queue_locked>
	__asm__ volatile(
   25efa:	f384 8811 	msr	BASEPRI, r4
   25efe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25f02:	b003      	add	sp, #12
   25f04:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   25f06:	f041 0108 	orr.w	r1, r1, #8
   25f0a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   25f0c:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25f0e:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   25f10:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25f12:	4903      	ldr	r1, [pc, #12]	; (25f20 <k_work_schedule_for_queue+0x50>)
   25f14:	f000 fc02 	bl	2671c <z_add_timeout>
	return ret;
   25f18:	2001      	movs	r0, #1
   25f1a:	e7ee      	b.n	25efa <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   25f1c:	2000      	movs	r0, #0
   25f1e:	e7ec      	b.n	25efa <k_work_schedule_for_queue+0x2a>
   25f20:	00031057 	.word	0x00031057

00025f24 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25f24:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   25f26:	4801      	ldr	r0, [pc, #4]	; (25f2c <k_work_schedule+0x8>)
   25f28:	f7ff bfd2 	b.w	25ed0 <k_work_schedule_for_queue>
   25f2c:	2000a530 	.word	0x2000a530

00025f30 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25f32:	460c      	mov	r4, r1
   25f34:	4616      	mov	r6, r2
   25f36:	461d      	mov	r5, r3
   25f38:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   25f3a:	f04f 0320 	mov.w	r3, #32
   25f3e:	f3ef 8711 	mrs	r7, BASEPRI
   25f42:	f383 8812 	msr	BASEPRI_MAX, r3
   25f46:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   25f4a:	4608      	mov	r0, r1
   25f4c:	f00b f83b 	bl	30fc6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25f50:	ea55 0306 	orrs.w	r3, r5, r6
   25f54:	d109      	bne.n	25f6a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   25f56:	4620      	mov	r0, r4
   25f58:	a901      	add	r1, sp, #4
   25f5a:	f7ff fee3 	bl	25d24 <submit_to_queue_locked>
	__asm__ volatile(
   25f5e:	f387 8811 	msr	BASEPRI, r7
   25f62:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25f66:	b003      	add	sp, #12
   25f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   25f6a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25f6c:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   25f70:	f043 0308 	orr.w	r3, r3, #8
   25f74:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25f76:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25f78:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   25f7a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25f7c:	4902      	ldr	r1, [pc, #8]	; (25f88 <k_work_reschedule_for_queue+0x58>)
   25f7e:	462b      	mov	r3, r5
   25f80:	f000 fbcc 	bl	2671c <z_add_timeout>
	return ret;
   25f84:	2001      	movs	r0, #1
   25f86:	e7ea      	b.n	25f5e <k_work_reschedule_for_queue+0x2e>
   25f88:	00031057 	.word	0x00031057

00025f8c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25f8c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25f8e:	4801      	ldr	r0, [pc, #4]	; (25f94 <k_work_reschedule+0x8>)
   25f90:	f7ff bfce 	b.w	25f30 <k_work_reschedule_for_queue>
   25f94:	2000a530 	.word	0x2000a530

00025f98 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   25f98:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   25f9a:	4d07      	ldr	r5, [pc, #28]	; (25fb8 <z_reset_time_slice+0x20>)
   25f9c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   25f9e:	b154      	cbz	r4, 25fb6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   25fa0:	f7fc ffe2 	bl	22f68 <sys_clock_elapsed>
   25fa4:	4b05      	ldr	r3, [pc, #20]	; (25fbc <z_reset_time_slice+0x24>)
   25fa6:	4404      	add	r4, r0
   25fa8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   25faa:	6828      	ldr	r0, [r5, #0]
   25fac:	2100      	movs	r1, #0
	}
}
   25fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   25fb2:	f00b ba42 	b.w	3143a <z_set_timeout_expiry>
}
   25fb6:	bd38      	pop	{r3, r4, r5, pc}
   25fb8:	20030e88 	.word	0x20030e88
   25fbc:	20030e50 	.word	0x20030e50

00025fc0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   25fc0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   25fc2:	4d0d      	ldr	r5, [pc, #52]	; (25ff8 <update_cache+0x38>)
   25fc4:	462b      	mov	r3, r5
   25fc6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25fca:	429c      	cmp	r4, r3
   25fcc:	d000      	beq.n	25fd0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   25fce:	b904      	cbnz	r4, 25fd2 <update_cache+0x12>
   25fd0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   25fd2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   25fd4:	b938      	cbnz	r0, 25fe6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   25fd6:	7b5a      	ldrb	r2, [r3, #13]
   25fd8:	06d2      	lsls	r2, r2, #27
   25fda:	d104      	bne.n	25fe6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   25fdc:	69a2      	ldr	r2, [r4, #24]
   25fde:	b912      	cbnz	r2, 25fe6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   25fe0:	89da      	ldrh	r2, [r3, #14]
   25fe2:	2a7f      	cmp	r2, #127	; 0x7f
   25fe4:	d805      	bhi.n	25ff2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   25fe6:	429c      	cmp	r4, r3
   25fe8:	d002      	beq.n	25ff0 <update_cache+0x30>
			z_reset_time_slice(thread);
   25fea:	4620      	mov	r0, r4
   25fec:	f7ff ffd4 	bl	25f98 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   25ff0:	4623      	mov	r3, r4
   25ff2:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   25ff4:	bd38      	pop	{r3, r4, r5, pc}
   25ff6:	bf00      	nop
   25ff8:	20030e50 	.word	0x20030e50

00025ffc <move_thread_to_end_of_prio_q>:
{
   25ffc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   25ffe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   26002:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   26004:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   26006:	7b43      	ldrb	r3, [r0, #13]
   26008:	da04      	bge.n	26014 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2600a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2600e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   26010:	f00b f8d7 	bl	311c2 <sys_dlist_remove>
	return list->head == list;
   26014:	4a15      	ldr	r2, [pc, #84]	; (2606c <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   26016:	7b4b      	ldrb	r3, [r1, #13]
   26018:	4610      	mov	r0, r2
   2601a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2601e:	734b      	strb	r3, [r1, #13]
   26020:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   26024:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26026:	4283      	cmp	r3, r0
   26028:	bf08      	it	eq
   2602a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2602c:	b923      	cbnz	r3, 26038 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   2602e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   26032:	6021      	str	r1, [r4, #0]
	list->tail = node;
   26034:	6251      	str	r1, [r2, #36]	; 0x24
}
   26036:	e00c      	b.n	26052 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   26038:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2603c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   26040:	42b5      	cmp	r5, r6
   26042:	d00e      	beq.n	26062 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26044:	42ae      	cmp	r6, r5
   26046:	dd0c      	ble.n	26062 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   26048:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2604a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2604e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   26050:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   26052:	6890      	ldr	r0, [r2, #8]
}
   26054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   26058:	1a43      	subs	r3, r0, r1
   2605a:	4258      	negs	r0, r3
   2605c:	4158      	adcs	r0, r3
   2605e:	f7ff bfaf 	b.w	25fc0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26062:	429c      	cmp	r4, r3
   26064:	d0e3      	beq.n	2602e <move_thread_to_end_of_prio_q+0x32>
   26066:	681b      	ldr	r3, [r3, #0]
   26068:	e7e0      	b.n	2602c <move_thread_to_end_of_prio_q+0x30>
   2606a:	bf00      	nop
   2606c:	20030e50 	.word	0x20030e50

00026070 <ready_thread>:
{
   26070:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   26072:	f990 300d 	ldrsb.w	r3, [r0, #13]
   26076:	7b42      	ldrb	r2, [r0, #13]
   26078:	2b00      	cmp	r3, #0
   2607a:	db29      	blt.n	260d0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2607c:	06d3      	lsls	r3, r2, #27
   2607e:	d127      	bne.n	260d0 <ready_thread+0x60>
	return node->next != NULL;
   26080:	6983      	ldr	r3, [r0, #24]
   26082:	bb2b      	cbnz	r3, 260d0 <ready_thread+0x60>
	return list->head == list;
   26084:	4913      	ldr	r1, [pc, #76]	; (260d4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   26086:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2608a:	7342      	strb	r2, [r0, #13]
   2608c:	460a      	mov	r2, r1
   2608e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26092:	4294      	cmp	r4, r2
   26094:	bf18      	it	ne
   26096:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   26098:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2609a:	b923      	cbnz	r3, 260a6 <ready_thread+0x36>
	node->prev = tail;
   2609c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   260a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   260a2:	6248      	str	r0, [r1, #36]	; 0x24
}
   260a4:	e00c      	b.n	260c0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   260a6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   260aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   260ae:	42b5      	cmp	r5, r6
   260b0:	d00a      	beq.n	260c8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   260b2:	42ae      	cmp	r6, r5
   260b4:	dd08      	ble.n	260c8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   260b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   260b8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   260bc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   260be:	6058      	str	r0, [r3, #4]
		update_cache(0);
   260c0:	2000      	movs	r0, #0
}
   260c2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   260c4:	f7ff bf7c 	b.w	25fc0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   260c8:	42a3      	cmp	r3, r4
   260ca:	d0e7      	beq.n	2609c <ready_thread+0x2c>
   260cc:	681b      	ldr	r3, [r3, #0]
   260ce:	e7e4      	b.n	2609a <ready_thread+0x2a>
}
   260d0:	bc70      	pop	{r4, r5, r6}
   260d2:	4770      	bx	lr
   260d4:	20030e50 	.word	0x20030e50

000260d8 <unready_thread>:
{
   260d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   260da:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   260de:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   260e0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   260e2:	7b43      	ldrb	r3, [r0, #13]
   260e4:	da04      	bge.n	260f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   260e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   260ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   260ec:	f00b f869 	bl	311c2 <sys_dlist_remove>
	update_cache(thread == _current);
   260f0:	4b04      	ldr	r3, [pc, #16]	; (26104 <unready_thread+0x2c>)
   260f2:	6898      	ldr	r0, [r3, #8]
   260f4:	1a43      	subs	r3, r0, r1
   260f6:	4258      	negs	r0, r3
   260f8:	4158      	adcs	r0, r3
}
   260fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   260fe:	f7ff bf5f 	b.w	25fc0 <update_cache>
   26102:	bf00      	nop
   26104:	20030e50 	.word	0x20030e50

00026108 <pend_locked>:
{
   26108:	b570      	push	{r4, r5, r6, lr}
   2610a:	4615      	mov	r5, r2
   2610c:	461c      	mov	r4, r3
   2610e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26110:	f00b f894 	bl	3123c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26114:	f1b4 3fff 	cmp.w	r4, #4294967295
   26118:	bf08      	it	eq
   2611a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2611e:	d008      	beq.n	26132 <pend_locked+0x2a>
   26120:	462a      	mov	r2, r5
   26122:	4623      	mov	r3, r4
   26124:	f106 0018 	add.w	r0, r6, #24
   26128:	4902      	ldr	r1, [pc, #8]	; (26134 <pend_locked+0x2c>)
}
   2612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2612e:	f000 baf5 	b.w	2671c <z_add_timeout>
   26132:	bd70      	pop	{r4, r5, r6, pc}
   26134:	000311f9 	.word	0x000311f9

00026138 <k_sched_time_slice_set>:
{
   26138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2613a:	4604      	mov	r4, r0
   2613c:	460d      	mov	r5, r1
	__asm__ volatile(
   2613e:	f04f 0320 	mov.w	r3, #32
   26142:	f3ef 8711 	mrs	r7, BASEPRI
   26146:	f383 8812 	msr	BASEPRI_MAX, r3
   2614a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   2614e:	2600      	movs	r6, #0
   26150:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26154:	f240 30e7 	movw	r0, #999	; 0x3e7
   26158:	4631      	mov	r1, r6
   2615a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2615e:	2300      	movs	r3, #0
   26160:	fbe4 010c 	umlal	r0, r1, r4, ip
   26164:	f7e2 feec 	bl	8f40 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26168:	42b4      	cmp	r4, r6
   2616a:	dd02      	ble.n	26172 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   2616c:	2802      	cmp	r0, #2
   2616e:	bfb8      	it	lt
   26170:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26172:	4a07      	ldr	r2, [pc, #28]	; (26190 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   26174:	4b07      	ldr	r3, [pc, #28]	; (26194 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26176:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   26178:	4a07      	ldr	r2, [pc, #28]	; (26198 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   2617a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   2617c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   2617e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   26180:	f7ff ff0a 	bl	25f98 <z_reset_time_slice>
	__asm__ volatile(
   26184:	f387 8811 	msr	BASEPRI, r7
   26188:	f3bf 8f6f 	isb	sy
}
   2618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2618e:	bf00      	nop
   26190:	20030e88 	.word	0x20030e88
   26194:	20030e50 	.word	0x20030e50
   26198:	20030e84 	.word	0x20030e84

0002619c <z_time_slice>:
{
   2619c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2619e:	f04f 0320 	mov.w	r3, #32
   261a2:	f3ef 8511 	mrs	r5, BASEPRI
   261a6:	f383 8812 	msr	BASEPRI_MAX, r3
   261aa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   261ae:	4b17      	ldr	r3, [pc, #92]	; (2620c <z_time_slice+0x70>)
   261b0:	4a17      	ldr	r2, [pc, #92]	; (26210 <z_time_slice+0x74>)
   261b2:	689c      	ldr	r4, [r3, #8]
   261b4:	6811      	ldr	r1, [r2, #0]
   261b6:	428c      	cmp	r4, r1
   261b8:	d107      	bne.n	261ca <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   261ba:	4620      	mov	r0, r4
   261bc:	f7ff feec 	bl	25f98 <z_reset_time_slice>
	__asm__ volatile(
   261c0:	f385 8811 	msr	BASEPRI, r5
   261c4:	f3bf 8f6f 	isb	sy
}
   261c8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   261ca:	2100      	movs	r1, #0
   261cc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   261ce:	4a11      	ldr	r2, [pc, #68]	; (26214 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   261d0:	6812      	ldr	r2, [r2, #0]
   261d2:	b1c2      	cbz	r2, 26206 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   261d4:	89e2      	ldrh	r2, [r4, #14]
   261d6:	2a7f      	cmp	r2, #127	; 0x7f
   261d8:	d815      	bhi.n	26206 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   261da:	7b62      	ldrb	r2, [r4, #13]
   261dc:	06d2      	lsls	r2, r2, #27
   261de:	d112      	bne.n	26206 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   261e0:	4a0d      	ldr	r2, [pc, #52]	; (26218 <z_time_slice+0x7c>)
   261e2:	f994 100e 	ldrsb.w	r1, [r4, #14]
   261e6:	6812      	ldr	r2, [r2, #0]
   261e8:	4291      	cmp	r1, r2
   261ea:	db0c      	blt.n	26206 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   261ec:	4a0b      	ldr	r2, [pc, #44]	; (2621c <z_time_slice+0x80>)
   261ee:	4294      	cmp	r4, r2
   261f0:	d009      	beq.n	26206 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   261f2:	691a      	ldr	r2, [r3, #16]
   261f4:	4282      	cmp	r2, r0
   261f6:	dc03      	bgt.n	26200 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   261f8:	4620      	mov	r0, r4
   261fa:	f7ff feff 	bl	25ffc <move_thread_to_end_of_prio_q>
   261fe:	e7dc      	b.n	261ba <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   26200:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   26202:	611a      	str	r2, [r3, #16]
   26204:	e7dc      	b.n	261c0 <z_time_slice+0x24>
   26206:	2200      	movs	r2, #0
   26208:	e7fb      	b.n	26202 <z_time_slice+0x66>
   2620a:	bf00      	nop
   2620c:	20030e50 	.word	0x20030e50
   26210:	20030e80 	.word	0x20030e80
   26214:	20030e88 	.word	0x20030e88
   26218:	20030e84 	.word	0x20030e84
   2621c:	2000a3e0 	.word	0x2000a3e0

00026220 <z_pend_curr>:
{
   26220:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   26222:	480c      	ldr	r0, [pc, #48]	; (26254 <z_pend_curr+0x34>)
   26224:	4d0c      	ldr	r5, [pc, #48]	; (26258 <z_pend_curr+0x38>)
   26226:	6886      	ldr	r6, [r0, #8]
{
   26228:	460c      	mov	r4, r1
	pending_current = _current;
   2622a:	602e      	str	r6, [r5, #0]
{
   2622c:	4611      	mov	r1, r2
   2622e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   26232:	f04f 0620 	mov.w	r6, #32
   26236:	f3ef 8511 	mrs	r5, BASEPRI
   2623a:	f386 8812 	msr	BASEPRI_MAX, r6
   2623e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   26242:	6880      	ldr	r0, [r0, #8]
   26244:	f7ff ff60 	bl	26108 <pend_locked>
	ret = arch_swap(key);
   26248:	4620      	mov	r0, r4
}
   2624a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2624e:	f7eb b81b 	b.w	11288 <arch_swap>
   26252:	bf00      	nop
   26254:	20030e50 	.word	0x20030e50
   26258:	20030e80 	.word	0x20030e80

0002625c <z_set_prio>:
{
   2625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2625e:	4604      	mov	r4, r0
   26260:	f04f 0320 	mov.w	r3, #32
   26264:	f3ef 8611 	mrs	r6, BASEPRI
   26268:	f383 8812 	msr	BASEPRI_MAX, r3
   2626c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   26270:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   26272:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26274:	06da      	lsls	r2, r3, #27
   26276:	d119      	bne.n	262ac <z_set_prio+0x50>
	return node->next != NULL;
   26278:	6985      	ldr	r5, [r0, #24]
   2627a:	b9bd      	cbnz	r5, 262ac <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2627c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26280:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26282:	f00a ff9e 	bl	311c2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26286:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   26288:	4a16      	ldr	r2, [pc, #88]	; (262e4 <z_set_prio+0x88>)
   2628a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2628e:	7343      	strb	r3, [r0, #13]
   26290:	4613      	mov	r3, r2
				thread->base.prio = prio;
   26292:	7381      	strb	r1, [r0, #14]
   26294:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26298:	4298      	cmp	r0, r3
   2629a:	bf18      	it	ne
   2629c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   2629e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   262a0:	b95d      	cbnz	r5, 262ba <z_set_prio+0x5e>
	node->prev = tail;
   262a2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   262a6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   262a8:	6254      	str	r4, [r2, #36]	; 0x24
}
   262aa:	e011      	b.n	262d0 <z_set_prio+0x74>
   262ac:	2000      	movs	r0, #0
			thread->base.prio = prio;
   262ae:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   262b0:	f386 8811 	msr	BASEPRI, r6
   262b4:	f3bf 8f6f 	isb	sy
}
   262b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   262ba:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   262be:	42b9      	cmp	r1, r7
   262c0:	d00b      	beq.n	262da <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   262c2:	428f      	cmp	r7, r1
   262c4:	dd09      	ble.n	262da <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   262c6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   262c8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   262cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   262ce:	606c      	str	r4, [r5, #4]
			update_cache(1);
   262d0:	2001      	movs	r0, #1
   262d2:	f7ff fe75 	bl	25fc0 <update_cache>
   262d6:	2001      	movs	r0, #1
   262d8:	e7ea      	b.n	262b0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   262da:	42a8      	cmp	r0, r5
   262dc:	d0e1      	beq.n	262a2 <z_set_prio+0x46>
   262de:	682d      	ldr	r5, [r5, #0]
   262e0:	e7de      	b.n	262a0 <z_set_prio+0x44>
   262e2:	bf00      	nop
   262e4:	20030e50 	.word	0x20030e50

000262e8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   262e8:	b949      	cbnz	r1, 262fe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   262ea:	f3ef 8005 	mrs	r0, IPSR
   262ee:	b930      	cbnz	r0, 262fe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   262f0:	4b05      	ldr	r3, [pc, #20]	; (26308 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   262f2:	69da      	ldr	r2, [r3, #28]
   262f4:	689b      	ldr	r3, [r3, #8]
   262f6:	429a      	cmp	r2, r3
   262f8:	d001      	beq.n	262fe <z_reschedule+0x16>
   262fa:	f7ea bfc5 	b.w	11288 <arch_swap>
   262fe:	f381 8811 	msr	BASEPRI, r1
   26302:	f3bf 8f6f 	isb	sy
}
   26306:	4770      	bx	lr
   26308:	20030e50 	.word	0x20030e50

0002630c <z_sched_start>:
{
   2630c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2630e:	f04f 0220 	mov.w	r2, #32
   26312:	f3ef 8411 	mrs	r4, BASEPRI
   26316:	f382 8812 	msr	BASEPRI_MAX, r2
   2631a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2631e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   26320:	0751      	lsls	r1, r2, #29
   26322:	d404      	bmi.n	2632e <z_sched_start+0x22>
	__asm__ volatile(
   26324:	f384 8811 	msr	BASEPRI, r4
   26328:	f3bf 8f6f 	isb	sy
}
   2632c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2632e:	f022 0204 	bic.w	r2, r2, #4
   26332:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   26334:	f7ff fe9c 	bl	26070 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   26338:	4621      	mov	r1, r4
}
   2633a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2633e:	4801      	ldr	r0, [pc, #4]	; (26344 <z_sched_start+0x38>)
   26340:	f7ff bfd2 	b.w	262e8 <z_reschedule>
   26344:	20031f00 	.word	0x20031f00

00026348 <z_impl_k_thread_suspend>:
{
   26348:	b570      	push	{r4, r5, r6, lr}
   2634a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2634c:	3018      	adds	r0, #24
   2634e:	f00b f84e 	bl	313ee <z_abort_timeout>
	__asm__ volatile(
   26352:	f04f 0320 	mov.w	r3, #32
   26356:	f3ef 8611 	mrs	r6, BASEPRI
   2635a:	f383 8812 	msr	BASEPRI_MAX, r3
   2635e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   26362:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   26366:	7b63      	ldrb	r3, [r4, #13]
   26368:	2a00      	cmp	r2, #0
   2636a:	da05      	bge.n	26378 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2636c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   26370:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26372:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26374:	f00a ff25 	bl	311c2 <sys_dlist_remove>
		update_cache(thread == _current);
   26378:	4d0b      	ldr	r5, [pc, #44]	; (263a8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2637a:	7b63      	ldrb	r3, [r4, #13]
   2637c:	68a8      	ldr	r0, [r5, #8]
   2637e:	f043 0310 	orr.w	r3, r3, #16
   26382:	7363      	strb	r3, [r4, #13]
   26384:	1b03      	subs	r3, r0, r4
   26386:	4258      	negs	r0, r3
   26388:	4158      	adcs	r0, r3
   2638a:	f7ff fe19 	bl	25fc0 <update_cache>
	__asm__ volatile(
   2638e:	f386 8811 	msr	BASEPRI, r6
   26392:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   26396:	68ab      	ldr	r3, [r5, #8]
   26398:	42a3      	cmp	r3, r4
   2639a:	d103      	bne.n	263a4 <z_impl_k_thread_suspend+0x5c>
}
   2639c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   263a0:	f00a bfe7 	b.w	31372 <z_reschedule_unlocked>
}
   263a4:	bd70      	pop	{r4, r5, r6, pc}
   263a6:	bf00      	nop
   263a8:	20030e50 	.word	0x20030e50

000263ac <k_sched_lock>:
	__asm__ volatile(
   263ac:	f04f 0320 	mov.w	r3, #32
   263b0:	f3ef 8111 	mrs	r1, BASEPRI
   263b4:	f383 8812 	msr	BASEPRI_MAX, r3
   263b8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   263bc:	4b04      	ldr	r3, [pc, #16]	; (263d0 <k_sched_lock+0x24>)
   263be:	689a      	ldr	r2, [r3, #8]
   263c0:	7bd3      	ldrb	r3, [r2, #15]
   263c2:	3b01      	subs	r3, #1
   263c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   263c6:	f381 8811 	msr	BASEPRI, r1
   263ca:	f3bf 8f6f 	isb	sy
}
   263ce:	4770      	bx	lr
   263d0:	20030e50 	.word	0x20030e50

000263d4 <k_sched_unlock>:
{
   263d4:	b510      	push	{r4, lr}
	__asm__ volatile(
   263d6:	f04f 0320 	mov.w	r3, #32
   263da:	f3ef 8411 	mrs	r4, BASEPRI
   263de:	f383 8812 	msr	BASEPRI_MAX, r3
   263e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   263e6:	4b08      	ldr	r3, [pc, #32]	; (26408 <k_sched_unlock+0x34>)
		update_cache(0);
   263e8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   263ea:	689a      	ldr	r2, [r3, #8]
   263ec:	7bd3      	ldrb	r3, [r2, #15]
   263ee:	3301      	adds	r3, #1
   263f0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   263f2:	f7ff fde5 	bl	25fc0 <update_cache>
	__asm__ volatile(
   263f6:	f384 8811 	msr	BASEPRI, r4
   263fa:	f3bf 8f6f 	isb	sy
}
   263fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   26402:	f00a bfb6 	b.w	31372 <z_reschedule_unlocked>
   26406:	bf00      	nop
   26408:	20030e50 	.word	0x20030e50

0002640c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2640c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2640e:	4b04      	ldr	r3, [pc, #16]	; (26420 <z_sched_init+0x14>)
   26410:	4608      	mov	r0, r1
   26412:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   26416:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2641a:	f7ff be8d 	b.w	26138 <k_sched_time_slice_set>
   2641e:	bf00      	nop
   26420:	20030e50 	.word	0x20030e50

00026424 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   26424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   26426:	f04f 0320 	mov.w	r3, #32
   2642a:	f3ef 8511 	mrs	r5, BASEPRI
   2642e:	f383 8812 	msr	BASEPRI_MAX, r3
   26432:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   26436:	4919      	ldr	r1, [pc, #100]	; (2649c <z_impl_k_yield+0x78>)
   26438:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2643a:	7b43      	ldrb	r3, [r0, #13]
   2643c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26440:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26442:	f00a febe 	bl	311c2 <sys_dlist_remove>
	return list->head == list;
   26446:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   26448:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2644a:	7b5a      	ldrb	r2, [r3, #13]
   2644c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26450:	735a      	strb	r2, [r3, #13]
   26452:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   26456:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26458:	4282      	cmp	r2, r0
   2645a:	bf08      	it	eq
   2645c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2645e:	b922      	cbnz	r2, 2646a <z_impl_k_yield+0x46>
	node->prev = tail;
   26460:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   26464:	6023      	str	r3, [r4, #0]
	list->tail = node;
   26466:	624b      	str	r3, [r1, #36]	; 0x24
}
   26468:	e00c      	b.n	26484 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2646a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2646e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   26472:	42be      	cmp	r6, r7
   26474:	d00e      	beq.n	26494 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26476:	42b7      	cmp	r7, r6
   26478:	dd0c      	ble.n	26494 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2647a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2647c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   26480:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   26482:	6053      	str	r3, [r2, #4]
	update_cache(1);
   26484:	2001      	movs	r0, #1
   26486:	f7ff fd9b 	bl	25fc0 <update_cache>
   2648a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2648c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26490:	f7ea befa 	b.w	11288 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   26494:	42a2      	cmp	r2, r4
   26496:	d0e3      	beq.n	26460 <z_impl_k_yield+0x3c>
   26498:	6812      	ldr	r2, [r2, #0]
   2649a:	e7e0      	b.n	2645e <z_impl_k_yield+0x3a>
   2649c:	20030e50 	.word	0x20030e50

000264a0 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   264a0:	ea50 0301 	orrs.w	r3, r0, r1
{
   264a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264a8:	4605      	mov	r5, r0
   264aa:	460e      	mov	r6, r1
	if (ticks == 0) {
   264ac:	d103      	bne.n	264b6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   264ae:	f7ff ffb9 	bl	26424 <z_impl_k_yield>
		k_yield();
		return 0;
   264b2:	2000      	movs	r0, #0
   264b4:	e02c      	b.n	26510 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   264b6:	1c83      	adds	r3, r0, #2
   264b8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   264bc:	db2a      	blt.n	26514 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   264be:	f00a ffd8 	bl	31472 <sys_clock_tick_get_32>
   264c2:	182c      	adds	r4, r5, r0
   264c4:	f04f 0320 	mov.w	r3, #32
   264c8:	f3ef 8811 	mrs	r8, BASEPRI
   264cc:	f383 8812 	msr	BASEPRI_MAX, r3
   264d0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   264d4:	4f11      	ldr	r7, [pc, #68]	; (2651c <z_tick_sleep+0x7c>)
   264d6:	4b12      	ldr	r3, [pc, #72]	; (26520 <z_tick_sleep+0x80>)
   264d8:	68b8      	ldr	r0, [r7, #8]
   264da:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   264dc:	f7ff fdfc 	bl	260d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   264e0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   264e2:	4910      	ldr	r1, [pc, #64]	; (26524 <z_tick_sleep+0x84>)
   264e4:	462a      	mov	r2, r5
   264e6:	4633      	mov	r3, r6
   264e8:	3018      	adds	r0, #24
   264ea:	f000 f917 	bl	2671c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   264ee:	68ba      	ldr	r2, [r7, #8]
   264f0:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   264f2:	7b53      	ldrb	r3, [r2, #13]
   264f4:	f043 0310 	orr.w	r3, r3, #16
   264f8:	7353      	strb	r3, [r2, #13]
   264fa:	f7ea fec5 	bl	11288 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   264fe:	f00a ffb8 	bl	31472 <sys_clock_tick_get_32>
   26502:	1a20      	subs	r0, r4, r0
   26504:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   26508:	2801      	cmp	r0, #1
   2650a:	f173 0300 	sbcs.w	r3, r3, #0
   2650e:	dbd0      	blt.n	264b2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   26510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26514:	f06f 0401 	mvn.w	r4, #1
   26518:	1a24      	subs	r4, r4, r0
   2651a:	e7d3      	b.n	264c4 <z_tick_sleep+0x24>
   2651c:	20030e50 	.word	0x20030e50
   26520:	20030e80 	.word	0x20030e80
   26524:	000311f9 	.word	0x000311f9

00026528 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26528:	f1b1 3fff 	cmp.w	r1, #4294967295
   2652c:	bf08      	it	eq
   2652e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26532:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26534:	d106      	bne.n	26544 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   26536:	4b08      	ldr	r3, [pc, #32]	; (26558 <z_impl_k_sleep+0x30>)
   26538:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2653a:	f7ff ff05 	bl	26348 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2653e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   26542:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   26544:	f7ff ffac 	bl	264a0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   26548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2654c:	fb80 0303 	smull	r0, r3, r0, r3
   26550:	0bc0      	lsrs	r0, r0, #15
   26552:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   26556:	e7f4      	b.n	26542 <z_impl_k_sleep+0x1a>
   26558:	20030e50 	.word	0x20030e50

0002655c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2655c:	4b01      	ldr	r3, [pc, #4]	; (26564 <z_impl_z_current_get+0x8>)
   2655e:	6898      	ldr	r0, [r3, #8]
   26560:	4770      	bx	lr
   26562:	bf00      	nop
   26564:	20030e50 	.word	0x20030e50

00026568 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   26568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2656c:	4604      	mov	r4, r0
   2656e:	f04f 0320 	mov.w	r3, #32
   26572:	f3ef 8611 	mrs	r6, BASEPRI
   26576:	f383 8812 	msr	BASEPRI_MAX, r3
   2657a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2657e:	7b03      	ldrb	r3, [r0, #12]
   26580:	07d9      	lsls	r1, r3, #31
   26582:	d50b      	bpl.n	2659c <z_thread_abort+0x34>
	__asm__ volatile(
   26584:	f386 8811 	msr	BASEPRI, r6
   26588:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   2658c:	4040      	eors	r0, r0
   2658e:	f380 8811 	msr	BASEPRI, r0
   26592:	f04f 0004 	mov.w	r0, #4
   26596:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   26598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2659c:	7b43      	ldrb	r3, [r0, #13]
   2659e:	071a      	lsls	r2, r3, #28
   265a0:	d504      	bpl.n	265ac <z_thread_abort+0x44>
   265a2:	f386 8811 	msr	BASEPRI, r6
   265a6:	f3bf 8f6f 	isb	sy
   265aa:	e7f5      	b.n	26598 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   265ac:	f023 0220 	bic.w	r2, r3, #32
   265b0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   265b4:	09d2      	lsrs	r2, r2, #7
   265b6:	d120      	bne.n	265fa <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   265b8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   265ba:	68a3      	ldr	r3, [r4, #8]
   265bc:	b113      	cbz	r3, 265c4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   265be:	4620      	mov	r0, r4
   265c0:	f00a fe07 	bl	311d2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   265c4:	f104 0018 	add.w	r0, r4, #24
   265c8:	f00a ff11 	bl	313ee <z_abort_timeout>
   265cc:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   265d0:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   265d4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   265d6:	42bd      	cmp	r5, r7
   265d8:	d000      	beq.n	265dc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   265da:	b9b5      	cbnz	r5, 2660a <z_thread_abort+0xa2>
		update_cache(1);
   265dc:	2001      	movs	r0, #1
   265de:	f7ff fcef 	bl	25fc0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   265e2:	4b10      	ldr	r3, [pc, #64]	; (26624 <z_thread_abort+0xbc>)
   265e4:	689b      	ldr	r3, [r3, #8]
   265e6:	42a3      	cmp	r3, r4
   265e8:	d1db      	bne.n	265a2 <z_thread_abort+0x3a>
   265ea:	f3ef 8305 	mrs	r3, IPSR
   265ee:	2b00      	cmp	r3, #0
   265f0:	d1d7      	bne.n	265a2 <z_thread_abort+0x3a>
   265f2:	4630      	mov	r0, r6
   265f4:	f7ea fe48 	bl	11288 <arch_swap>
	return ret;
   265f8:	e7d3      	b.n	265a2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   265fa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   265fe:	f043 0308 	orr.w	r3, r3, #8
   26602:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26604:	f00a fddd 	bl	311c2 <sys_dlist_remove>
}
   26608:	e7d7      	b.n	265ba <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2660a:	4628      	mov	r0, r5
   2660c:	f00a fde1 	bl	311d2 <unpend_thread_no_timeout>
   26610:	f105 0018 	add.w	r0, r5, #24
   26614:	f00a feeb 	bl	313ee <z_abort_timeout>
		ready_thread(thread);
   26618:	4628      	mov	r0, r5
   2661a:	f8c5 809c 	str.w	r8, [r5, #156]	; 0x9c
   2661e:	f7ff fd27 	bl	26070 <ready_thread>
   26622:	e7d7      	b.n	265d4 <z_thread_abort+0x6c>
   26624:	20030e50 	.word	0x20030e50

00026628 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   26628:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2662a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2662e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26630:	e9cd 6700 	strd	r6, r7, [sp]
   26634:	f7ff fdf4 	bl	26220 <z_pend_curr>

	if (data != NULL) {
   26638:	b11c      	cbz	r4, 26642 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2663a:	4b03      	ldr	r3, [pc, #12]	; (26648 <z_sched_wait+0x20>)
   2663c:	689b      	ldr	r3, [r3, #8]
   2663e:	695b      	ldr	r3, [r3, #20]
   26640:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26642:	b002      	add	sp, #8
   26644:	bdd0      	pop	{r4, r6, r7, pc}
   26646:	bf00      	nop
   26648:	20030e50 	.word	0x20030e50

0002664c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2664c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2664e:	4806      	ldr	r0, [pc, #24]	; (26668 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   26650:	4a06      	ldr	r2, [pc, #24]	; (2666c <z_data_copy+0x20>)
   26652:	4907      	ldr	r1, [pc, #28]	; (26670 <z_data_copy+0x24>)
   26654:	1a12      	subs	r2, r2, r0
   26656:	f00a fb33 	bl	30cc0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2665a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2665e:	4a05      	ldr	r2, [pc, #20]	; (26674 <z_data_copy+0x28>)
   26660:	4905      	ldr	r1, [pc, #20]	; (26678 <z_data_copy+0x2c>)
   26662:	4806      	ldr	r0, [pc, #24]	; (2667c <z_data_copy+0x30>)
   26664:	f00a bb2c 	b.w	30cc0 <z_early_memcpy>
   26668:	20008000 	.word	0x20008000
   2666c:	20008fe4 	.word	0x20008fe4
   26670:	00038b44 	.word	0x00038b44
   26674:	00000000 	.word	0x00000000
   26678:	00038b44 	.word	0x00038b44
   2667c:	20008000 	.word	0x20008000

00026680 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26680:	4b03      	ldr	r3, [pc, #12]	; (26690 <elapsed+0x10>)
   26682:	681b      	ldr	r3, [r3, #0]
   26684:	b90b      	cbnz	r3, 2668a <elapsed+0xa>
   26686:	f7fc bc6f 	b.w	22f68 <sys_clock_elapsed>
}
   2668a:	2000      	movs	r0, #0
   2668c:	4770      	bx	lr
   2668e:	bf00      	nop
   26690:	20030e8c 	.word	0x20030e8c

00026694 <next_timeout>:

static int32_t next_timeout(void)
{
   26694:	b510      	push	{r4, lr}
	return list->head == list;
   26696:	4b11      	ldr	r3, [pc, #68]	; (266dc <next_timeout+0x48>)
   26698:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2669a:	429c      	cmp	r4, r3
   2669c:	d10a      	bne.n	266b4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2669e:	f7ff ffef 	bl	26680 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   266a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   266a6:	4b0e      	ldr	r3, [pc, #56]	; (266e0 <next_timeout+0x4c>)
   266a8:	691b      	ldr	r3, [r3, #16]
   266aa:	b113      	cbz	r3, 266b2 <next_timeout+0x1e>
   266ac:	4298      	cmp	r0, r3
   266ae:	bfa8      	it	ge
   266b0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   266b2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   266b4:	f7ff ffe4 	bl	26680 <elapsed>
	if ((to == NULL) ||
   266b8:	2c00      	cmp	r4, #0
   266ba:	d0f2      	beq.n	266a2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   266bc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   266c0:	1a1b      	subs	r3, r3, r0
   266c2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   266c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   266ca:	f172 0100 	sbcs.w	r1, r2, #0
   266ce:	dae8      	bge.n	266a2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   266d0:	2a00      	cmp	r2, #0
   266d2:	bfac      	ite	ge
   266d4:	4618      	movge	r0, r3
   266d6:	2000      	movlt	r0, #0
   266d8:	e7e5      	b.n	266a6 <next_timeout+0x12>
   266da:	bf00      	nop
   266dc:	200087e8 	.word	0x200087e8
   266e0:	20030e50 	.word	0x20030e50

000266e4 <remove_timeout>:
{
   266e4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   266e6:	b170      	cbz	r0, 26706 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   266e8:	4b0b      	ldr	r3, [pc, #44]	; (26718 <remove_timeout+0x34>)
   266ea:	685b      	ldr	r3, [r3, #4]
   266ec:	4298      	cmp	r0, r3
   266ee:	d00a      	beq.n	26706 <remove_timeout+0x22>
   266f0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   266f2:	b143      	cbz	r3, 26706 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   266f4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   266f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   266fc:	1912      	adds	r2, r2, r4
   266fe:	eb41 0105 	adc.w	r1, r1, r5
   26702:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   26706:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   2670a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2670c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2670e:	2300      	movs	r3, #0
	node->prev = NULL;
   26710:	e9c0 3300 	strd	r3, r3, [r0]
}
   26714:	bd30      	pop	{r4, r5, pc}
   26716:	bf00      	nop
   26718:	200087e8 	.word	0x200087e8

0002671c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2671c:	f1b3 3fff 	cmp.w	r3, #4294967295
   26720:	bf08      	it	eq
   26722:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   26726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26728:	4604      	mov	r4, r0
   2672a:	461d      	mov	r5, r3
   2672c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2672e:	d061      	beq.n	267f4 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   26730:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   26732:	f04f 0320 	mov.w	r3, #32
   26736:	f3ef 8711 	mrs	r7, BASEPRI
   2673a:	f383 8812 	msr	BASEPRI_MAX, r3
   2673e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26742:	3201      	adds	r2, #1
   26744:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   26748:	da24      	bge.n	26794 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2674a:	f06f 0301 	mvn.w	r3, #1
   2674e:	492f      	ldr	r1, [pc, #188]	; (2680c <z_add_timeout+0xf0>)
   26750:	e9d1 2000 	ldrd	r2, r0, [r1]
   26754:	1a9b      	subs	r3, r3, r2
   26756:	f04f 32ff 	mov.w	r2, #4294967295
   2675a:	eb62 0000 	sbc.w	r0, r2, r0
   2675e:	1b9e      	subs	r6, r3, r6
   26760:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   26764:	2e01      	cmp	r6, #1
   26766:	f170 0300 	sbcs.w	r3, r0, #0
   2676a:	da01      	bge.n	26770 <z_add_timeout+0x54>
   2676c:	2601      	movs	r6, #1
   2676e:	2000      	movs	r0, #0
   26770:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   26774:	4e26      	ldr	r6, [pc, #152]	; (26810 <z_add_timeout+0xf4>)
   26776:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2677a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2677c:	45b4      	cmp	ip, r6
   2677e:	bf08      	it	eq
   26780:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   26784:	f1bc 0f00 	cmp.w	ip, #0
   26788:	d10d      	bne.n	267a6 <z_add_timeout+0x8a>
	node->prev = tail;
   2678a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   2678e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26790:	6074      	str	r4, [r6, #4]
}
   26792:	e01c      	b.n	267ce <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   26794:	f7ff ff74 	bl	26680 <elapsed>
   26798:	3601      	adds	r6, #1
   2679a:	f145 0500 	adc.w	r5, r5, #0
   2679e:	1836      	adds	r6, r6, r0
   267a0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   267a4:	e7e4      	b.n	26770 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   267a6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   267aa:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   267ae:	4293      	cmp	r3, r2
   267b0:	eb71 0e00 	sbcs.w	lr, r1, r0
   267b4:	da1f      	bge.n	267f6 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   267b6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   267b8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   267bc:	eb60 0001 	sbc.w	r0, r0, r1
   267c0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   267c4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   267c8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   267ca:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   267ce:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   267d0:	42b3      	cmp	r3, r6
   267d2:	d00b      	beq.n	267ec <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   267d4:	429c      	cmp	r4, r3
   267d6:	d109      	bne.n	267ec <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   267d8:	f7ff ff5c 	bl	26694 <next_timeout>

			if (next_time == 0 ||
   267dc:	b118      	cbz	r0, 267e6 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   267de:	4b0d      	ldr	r3, [pc, #52]	; (26814 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   267e0:	691b      	ldr	r3, [r3, #16]
   267e2:	4283      	cmp	r3, r0
   267e4:	d002      	beq.n	267ec <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   267e6:	2100      	movs	r1, #0
   267e8:	f7fc fb8e 	bl	22f08 <sys_clock_set_timeout>
	__asm__ volatile(
   267ec:	f387 8811 	msr	BASEPRI, r7
   267f0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   267f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   267f6:	1a9b      	subs	r3, r3, r2
   267f8:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   267fc:	45ac      	cmp	ip, r5
   267fe:	e9c4 3104 	strd	r3, r1, [r4, #16]
   26802:	d0c2      	beq.n	2678a <z_add_timeout+0x6e>
   26804:	f8dc c000 	ldr.w	ip, [ip]
   26808:	e7bc      	b.n	26784 <z_add_timeout+0x68>
   2680a:	bf00      	nop
   2680c:	2000a5f8 	.word	0x2000a5f8
   26810:	200087e8 	.word	0x200087e8
   26814:	20030e50 	.word	0x20030e50

00026818 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   26818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2681c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2681e:	f7ff fcbd 	bl	2619c <z_time_slice>
	__asm__ volatile(
   26822:	f04f 0320 	mov.w	r3, #32
   26826:	f3ef 8611 	mrs	r6, BASEPRI
   2682a:	f383 8812 	msr	BASEPRI_MAX, r3
   2682e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   26832:	4f24      	ldr	r7, [pc, #144]	; (268c4 <sys_clock_announce+0xac>)
	return list->head == list;
   26834:	f8df 8090 	ldr.w	r8, [pc, #144]	; 268c8 <sys_clock_announce+0xb0>
   26838:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2683c:	4a23      	ldr	r2, [pc, #140]	; (268cc <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2683e:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   26840:	603c      	str	r4, [r7, #0]
	return list->head == list;
   26842:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   26846:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2684a:	d00b      	beq.n	26864 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2684c:	b150      	cbz	r0, 26864 <sys_clock_announce+0x4c>
   2684e:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   26852:	42ac      	cmp	r4, r5
   26854:	eb71 090c 	sbcs.w	r9, r1, ip
   26858:	da17      	bge.n	2688a <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2685a:	1b2d      	subs	r5, r5, r4
   2685c:	eb6c 0c01 	sbc.w	ip, ip, r1
   26860:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   26864:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   26866:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   2686a:	eb4e 0101 	adc.w	r1, lr, r1
   2686e:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   26872:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   26874:	f7ff ff0e 	bl	26694 <next_timeout>
   26878:	4621      	mov	r1, r4
   2687a:	f7fc fb45 	bl	22f08 <sys_clock_set_timeout>
	__asm__ volatile(
   2687e:	f386 8811 	msr	BASEPRI, r6
   26882:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   26886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2688a:	18eb      	adds	r3, r5, r3
   2688c:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   26890:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   26894:	2200      	movs	r2, #0
   26896:	2300      	movs	r3, #0
   26898:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   2689c:	f7ff ff22 	bl	266e4 <remove_timeout>
   268a0:	f386 8811 	msr	BASEPRI, r6
   268a4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   268a8:	6883      	ldr	r3, [r0, #8]
   268aa:	4798      	blx	r3
	__asm__ volatile(
   268ac:	f04f 0320 	mov.w	r3, #32
   268b0:	f3ef 8611 	mrs	r6, BASEPRI
   268b4:	f383 8812 	msr	BASEPRI_MAX, r3
   268b8:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   268bc:	683c      	ldr	r4, [r7, #0]
   268be:	1b64      	subs	r4, r4, r5
   268c0:	e7ba      	b.n	26838 <sys_clock_announce+0x20>
   268c2:	bf00      	nop
   268c4:	20030e8c 	.word	0x20030e8c
   268c8:	200087e8 	.word	0x200087e8
   268cc:	2000a5f8 	.word	0x2000a5f8

000268d0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   268d0:	b510      	push	{r4, lr}
   268d2:	f04f 0320 	mov.w	r3, #32
   268d6:	f3ef 8411 	mrs	r4, BASEPRI
   268da:	f383 8812 	msr	BASEPRI_MAX, r3
   268de:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   268e2:	f7ff fecd 	bl	26680 <elapsed>
   268e6:	4603      	mov	r3, r0
   268e8:	4a05      	ldr	r2, [pc, #20]	; (26900 <sys_clock_tick_get+0x30>)
   268ea:	e9d2 0100 	ldrd	r0, r1, [r2]
   268ee:	1818      	adds	r0, r3, r0
   268f0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   268f4:	f384 8811 	msr	BASEPRI, r4
   268f8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   268fc:	bd10      	pop	{r4, pc}
   268fe:	bf00      	nop
   26900:	2000a5f8 	.word	0x2000a5f8

00026904 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   26904:	b570      	push	{r4, r5, r6, lr}
   26906:	4604      	mov	r4, r0
	__asm__ volatile(
   26908:	f04f 0320 	mov.w	r3, #32
   2690c:	f3ef 8511 	mrs	r5, BASEPRI
   26910:	f383 8812 	msr	BASEPRI_MAX, r3
   26914:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   26918:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   2691c:	3301      	adds	r3, #1
   2691e:	f142 0200 	adc.w	r2, r2, #0
   26922:	2b02      	cmp	r3, #2
   26924:	f172 0200 	sbcs.w	r2, r2, #0
   26928:	d322      	bcc.n	26970 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   2692a:	f00a fda6 	bl	3147a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   2692e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   26932:	3001      	adds	r0, #1
   26934:	f141 0100 	adc.w	r1, r1, #0
   26938:	18c0      	adds	r0, r0, r3
   2693a:	eb41 0102 	adc.w	r1, r1, r2
   2693e:	2801      	cmp	r0, #1
   26940:	f171 0100 	sbcs.w	r1, r1, #0
   26944:	db32      	blt.n	269ac <z_timer_expiration_handler+0xa8>
   26946:	f00a fd98 	bl	3147a <z_impl_k_uptime_ticks>
   2694a:	3001      	adds	r0, #1
   2694c:	f141 0300 	adc.w	r3, r1, #0
   26950:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   26954:	1880      	adds	r0, r0, r2
   26956:	f06f 0201 	mvn.w	r2, #1
   2695a:	eb43 0301 	adc.w	r3, r3, r1
   2695e:	f04f 31ff 	mov.w	r1, #4294967295
   26962:	1a12      	subs	r2, r2, r0
   26964:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26968:	4620      	mov	r0, r4
   2696a:	491a      	ldr	r1, [pc, #104]	; (269d4 <z_timer_expiration_handler+0xd0>)
   2696c:	f7ff fed6 	bl	2671c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   26970:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26972:	3301      	adds	r3, #1
   26974:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   26976:	6a23      	ldr	r3, [r4, #32]
   26978:	b173      	cbz	r3, 26998 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   2697a:	f385 8811 	msr	BASEPRI, r5
   2697e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   26982:	4620      	mov	r0, r4
   26984:	6a23      	ldr	r3, [r4, #32]
   26986:	4798      	blx	r3
	__asm__ volatile(
   26988:	f04f 0320 	mov.w	r3, #32
   2698c:	f3ef 8511 	mrs	r5, BASEPRI
   26990:	f383 8812 	msr	BASEPRI_MAX, r3
   26994:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26998:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2699c:	42a6      	cmp	r6, r4
   2699e:	d000      	beq.n	269a2 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   269a0:	b94e      	cbnz	r6, 269b6 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   269a2:	f385 8811 	msr	BASEPRI, r5
   269a6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   269aa:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   269ac:	f06f 0201 	mvn.w	r2, #1
   269b0:	f04f 33ff 	mov.w	r3, #4294967295
   269b4:	e7d8      	b.n	26968 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   269b6:	4630      	mov	r0, r6
   269b8:	f00a fc78 	bl	312ac <z_unpend_thread_no_timeout>
   269bc:	2300      	movs	r3, #0
   269be:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
   269c2:	f385 8811 	msr	BASEPRI, r5
   269c6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   269ca:	4630      	mov	r0, r6
}
   269cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   269d0:	f00a bc5c 	b.w	3128c <z_ready_thread>
   269d4:	00026905 	.word	0x00026905

000269d8 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   269d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   269dc:	bf08      	it	eq
   269de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   269e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   269e6:	4619      	mov	r1, r3
   269e8:	4605      	mov	r5, r0
   269ea:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   269ee:	4614      	mov	r4, r2
   269f0:	4691      	mov	r9, r2
   269f2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   269f4:	d037      	beq.n	26a66 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   269f6:	f1b0 3fff 	cmp.w	r0, #4294967295
   269fa:	bf08      	it	eq
   269fc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   26a00:	4637      	mov	r7, r6
   26a02:	4682      	mov	sl, r0
   26a04:	d011      	beq.n	26a2a <z_impl_k_timer_start+0x52>
   26a06:	ea50 0306 	orrs.w	r3, r0, r6
   26a0a:	d00e      	beq.n	26a2a <z_impl_k_timer_start+0x52>
   26a0c:	1c72      	adds	r2, r6, #1
   26a0e:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   26a12:	db0a      	blt.n	26a2a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   26a14:	2e02      	cmp	r6, #2
   26a16:	4684      	mov	ip, r0
   26a18:	f170 0000 	sbcs.w	r0, r0, #0
   26a1c:	bfbc      	itt	lt
   26a1e:	2702      	movlt	r7, #2
   26a20:	f04f 0c00 	movlt.w	ip, #0
   26a24:	3f01      	subs	r7, #1
   26a26:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   26a2a:	1c63      	adds	r3, r4, #1
   26a2c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26a30:	db0a      	blt.n	26a48 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   26a32:	2c01      	cmp	r4, #1
   26a34:	f171 0300 	sbcs.w	r3, r1, #0
   26a38:	4622      	mov	r2, r4
   26a3a:	bfbc      	itt	lt
   26a3c:	2201      	movlt	r2, #1
   26a3e:	2100      	movlt	r1, #0
   26a40:	f112 39ff 	adds.w	r9, r2, #4294967295
   26a44:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   26a48:	4628      	mov	r0, r5
   26a4a:	f00a fcd0 	bl	313ee <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   26a4e:	2300      	movs	r3, #0
	timer->period = period;
   26a50:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   26a54:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26a56:	464a      	mov	r2, r9
   26a58:	4643      	mov	r3, r8
   26a5a:	4628      	mov	r0, r5
		     duration);
}
   26a5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26a60:	4902      	ldr	r1, [pc, #8]	; (26a6c <z_impl_k_timer_start+0x94>)
   26a62:	f7ff be5b 	b.w	2671c <z_add_timeout>
}
   26a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26a6a:	bf00      	nop
   26a6c:	00026905 	.word	0x00026905

00026a70 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26a70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   26a74:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   26a76:	4b29      	ldr	r3, [pc, #164]	; (26b1c <z_impl_k_poll+0xac>)
{
   26a78:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   26a7a:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   26a7c:	2301      	movs	r3, #1
   26a7e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   26a82:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   26a86:	ea52 0305 	orrs.w	r3, r2, r5
   26a8a:	bf0c      	ite	eq
   26a8c:	2301      	moveq	r3, #1
   26a8e:	2300      	movne	r3, #0
   26a90:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   26a94:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   26a96:	f00a fd72 	bl	3157e <register_events>
   26a9a:	4681      	mov	r9, r0
	__asm__ volatile(
   26a9c:	f04f 0320 	mov.w	r3, #32
   26aa0:	f3ef 8a11 	mrs	sl, BASEPRI
   26aa4:	f383 8812 	msr	BASEPRI_MAX, r3
   26aa8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   26aac:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   26ab0:	b964      	cbnz	r4, 26acc <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   26ab2:	4601      	mov	r1, r0
   26ab4:	4652      	mov	r2, sl
   26ab6:	4640      	mov	r0, r8
   26ab8:	f00a fe32 	bl	31720 <clear_event_registrations>
	__asm__ volatile(
   26abc:	f38a 8811 	msr	BASEPRI, sl
   26ac0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   26ac4:	4620      	mov	r0, r4
   26ac6:	b002      	add	sp, #8
   26ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   26acc:	2300      	movs	r3, #0
   26ace:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26ad2:	ea56 0305 	orrs.w	r3, r6, r5
   26ad6:	d106      	bne.n	26ae6 <z_impl_k_poll+0x76>
   26ad8:	f38a 8811 	msr	BASEPRI, sl
   26adc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   26ae0:	f06f 040a 	mvn.w	r4, #10
   26ae4:	e7ee      	b.n	26ac4 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   26ae6:	4651      	mov	r1, sl
   26ae8:	e9cd 6500 	strd	r6, r5, [sp]
   26aec:	4a0c      	ldr	r2, [pc, #48]	; (26b20 <z_impl_k_poll+0xb0>)
   26aee:	480d      	ldr	r0, [pc, #52]	; (26b24 <z_impl_k_poll+0xb4>)
   26af0:	f7ff fb96 	bl	26220 <z_pend_curr>
   26af4:	4604      	mov	r4, r0
	__asm__ volatile(
   26af6:	f04f 0320 	mov.w	r3, #32
   26afa:	f3ef 8511 	mrs	r5, BASEPRI
   26afe:	f383 8812 	msr	BASEPRI_MAX, r3
   26b02:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   26b06:	462a      	mov	r2, r5
   26b08:	4649      	mov	r1, r9
   26b0a:	4640      	mov	r0, r8
   26b0c:	f00a fe08 	bl	31720 <clear_event_registrations>
	__asm__ volatile(
   26b10:	f385 8811 	msr	BASEPRI, r5
   26b14:	f3bf 8f6f 	isb	sy
	return swap_rc;
   26b18:	e7d4      	b.n	26ac4 <z_impl_k_poll+0x54>
   26b1a:	bf00      	nop
   26b1c:	20030e50 	.word	0x20030e50
   26b20:	200087f0 	.word	0x200087f0
   26b24:	20031f00 	.word	0x20031f00

00026b28 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   26b28:	b538      	push	{r3, r4, r5, lr}
   26b2a:	4603      	mov	r3, r0
	__asm__ volatile(
   26b2c:	f04f 0220 	mov.w	r2, #32
   26b30:	f3ef 8511 	mrs	r5, BASEPRI
   26b34:	f382 8812 	msr	BASEPRI_MAX, r2
   26b38:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   26b3c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   26b3e:	2101      	movs	r1, #1
   26b40:	6081      	str	r1, [r0, #8]
	return list->head == list;
   26b42:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   26b44:	4283      	cmp	r3, r0
   26b46:	d106      	bne.n	26b56 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   26b48:	f385 8811 	msr	BASEPRI, r5
   26b4c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   26b50:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   26b52:	4620      	mov	r0, r4
   26b54:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   26b56:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26b5a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26b5c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26b5e:	2300      	movs	r3, #0
	node->prev = NULL;
   26b60:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26b64:	f00a fd82 	bl	3166c <signal_poll_event>
	z_reschedule(&lock, key);
   26b68:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26b6a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26b6c:	4801      	ldr	r0, [pc, #4]	; (26b74 <z_impl_k_poll_signal_raise+0x4c>)
   26b6e:	f7ff fbbb 	bl	262e8 <z_reschedule>
	return rc;
   26b72:	e7ee      	b.n	26b52 <z_impl_k_poll_signal_raise+0x2a>
   26b74:	20031f00 	.word	0x20031f00

00026b78 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   26b78:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   26b7a:	4601      	mov	r1, r0
   26b7c:	4801      	ldr	r0, [pc, #4]	; (26b84 <k_aligned_alloc+0xc>)
   26b7e:	f00a be20 	b.w	317c2 <z_heap_aligned_alloc>
   26b82:	bf00      	nop
   26b84:	20008b8c 	.word	0x20008b8c

00026b88 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   26b88:	4b01      	ldr	r3, [pc, #4]	; (26b90 <k_thread_system_pool_assign+0x8>)
   26b8a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
}
   26b8e:	4770      	bx	lr
   26b90:	20008b8c 	.word	0x20008b8c

00026b94 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   26b94:	b538      	push	{r3, r4, r5, lr}
   26b96:	4604      	mov	r4, r0
   26b98:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   26b9a:	f00a f945 	bl	30e28 <k_is_in_isr>
   26b9e:	b928      	cbnz	r0, 26bac <z_thread_aligned_alloc+0x18>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26ba0:	4b06      	ldr	r3, [pc, #24]	; (26bbc <z_thread_aligned_alloc+0x28>)
   26ba2:	689b      	ldr	r3, [r3, #8]
   26ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	}

	if (heap != NULL) {
   26ba8:	b90b      	cbnz	r3, 26bae <z_thread_aligned_alloc+0x1a>
	} else {
		ret = NULL;
	}

	return ret;
}
   26baa:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   26bac:	4b04      	ldr	r3, [pc, #16]	; (26bc0 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   26bae:	462a      	mov	r2, r5
   26bb0:	4621      	mov	r1, r4
   26bb2:	4618      	mov	r0, r3
}
   26bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   26bb8:	f00a be03 	b.w	317c2 <z_heap_aligned_alloc>
   26bbc:	20030e50 	.word	0x20030e50
   26bc0:	20008b8c 	.word	0x20008b8c

00026bc4 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   26bc4:	4801      	ldr	r0, [pc, #4]	; (26bcc <boot_banner+0x8>)
   26bc6:	f003 bb4f 	b.w	2a268 <printk>
   26bca:	bf00      	nop
   26bcc:	0003872c 	.word	0x0003872c

00026bd0 <log>:
   26bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26bd2:	4604      	mov	r4, r0
   26bd4:	460d      	mov	r5, r1
   26bd6:	f7e2 ff77 	bl	9ac8 <__ieee754_log>
   26bda:	4b17      	ldr	r3, [pc, #92]	; (26c38 <log+0x68>)
   26bdc:	4606      	mov	r6, r0
   26bde:	460f      	mov	r7, r1
   26be0:	f993 3000 	ldrsb.w	r3, [r3]
   26be4:	3301      	adds	r3, #1
   26be6:	d01a      	beq.n	26c1e <log+0x4e>
   26be8:	4622      	mov	r2, r4
   26bea:	462b      	mov	r3, r5
   26bec:	4620      	mov	r0, r4
   26bee:	4629      	mov	r1, r5
   26bf0:	f7e2 fa86 	bl	9100 <__aeabi_dcmpun>
   26bf4:	b998      	cbnz	r0, 26c1e <log+0x4e>
   26bf6:	2200      	movs	r2, #0
   26bf8:	2300      	movs	r3, #0
   26bfa:	4620      	mov	r0, r4
   26bfc:	4629      	mov	r1, r5
   26bfe:	f7e2 fa55 	bl	90ac <__aeabi_dcmpgt>
   26c02:	b960      	cbnz	r0, 26c1e <log+0x4e>
   26c04:	2200      	movs	r2, #0
   26c06:	2300      	movs	r3, #0
   26c08:	4620      	mov	r0, r4
   26c0a:	4629      	mov	r1, r5
   26c0c:	f7e2 fa26 	bl	905c <__aeabi_dcmpeq>
   26c10:	b140      	cbz	r0, 26c24 <log+0x54>
   26c12:	f004 feea 	bl	2b9ea <__errno>
   26c16:	2600      	movs	r6, #0
   26c18:	2322      	movs	r3, #34	; 0x22
   26c1a:	4f08      	ldr	r7, [pc, #32]	; (26c3c <log+0x6c>)
   26c1c:	6003      	str	r3, [r0, #0]
   26c1e:	4630      	mov	r0, r6
   26c20:	4639      	mov	r1, r7
   26c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c24:	f004 fee1 	bl	2b9ea <__errno>
   26c28:	2321      	movs	r3, #33	; 0x21
   26c2a:	6003      	str	r3, [r0, #0]
   26c2c:	4804      	ldr	r0, [pc, #16]	; (26c40 <log+0x70>)
   26c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26c32:	f000 b807 	b.w	26c44 <nan>
   26c36:	bf00      	nop
   26c38:	20008adc 	.word	0x20008adc
   26c3c:	fff00000 	.word	0xfff00000
   26c40:	000365fc 	.word	0x000365fc

00026c44 <nan>:
   26c44:	2000      	movs	r0, #0
   26c46:	4901      	ldr	r1, [pc, #4]	; (26c4c <nan+0x8>)
   26c48:	4770      	bx	lr
   26c4a:	bf00      	nop
   26c4c:	7ff80000 	.word	0x7ff80000

00026c50 <malloc>:
   26c50:	4b02      	ldr	r3, [pc, #8]	; (26c5c <malloc+0xc>)
   26c52:	4601      	mov	r1, r0
   26c54:	6818      	ldr	r0, [r3, #0]
   26c56:	f000 bac5 	b.w	271e4 <_malloc_r>
   26c5a:	bf00      	nop
   26c5c:	200087f8 	.word	0x200087f8

00026c60 <free>:
   26c60:	4b02      	ldr	r3, [pc, #8]	; (26c6c <free+0xc>)
   26c62:	4601      	mov	r1, r0
   26c64:	6818      	ldr	r0, [r3, #0]
   26c66:	f000 ba73 	b.w	27150 <_free_r>
   26c6a:	bf00      	nop
   26c6c:	200087f8 	.word	0x200087f8

00026c70 <validate_structure>:
   26c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26c72:	6801      	ldr	r1, [r0, #0]
   26c74:	4604      	mov	r4, r0
   26c76:	293b      	cmp	r1, #59	; 0x3b
   26c78:	d911      	bls.n	26c9e <validate_structure+0x2e>
   26c7a:	223c      	movs	r2, #60	; 0x3c
   26c7c:	4668      	mov	r0, sp
   26c7e:	f00b f826 	bl	31cce <div>
   26c82:	9a01      	ldr	r2, [sp, #4]
   26c84:	6863      	ldr	r3, [r4, #4]
   26c86:	9900      	ldr	r1, [sp, #0]
   26c88:	2a00      	cmp	r2, #0
   26c8a:	440b      	add	r3, r1
   26c8c:	bfb4      	ite	lt
   26c8e:	323c      	addlt	r2, #60	; 0x3c
   26c90:	6022      	strge	r2, [r4, #0]
   26c92:	6063      	str	r3, [r4, #4]
   26c94:	bfbe      	ittt	lt
   26c96:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26c9a:	6022      	strlt	r2, [r4, #0]
   26c9c:	6063      	strlt	r3, [r4, #4]
   26c9e:	6861      	ldr	r1, [r4, #4]
   26ca0:	293b      	cmp	r1, #59	; 0x3b
   26ca2:	d911      	bls.n	26cc8 <validate_structure+0x58>
   26ca4:	223c      	movs	r2, #60	; 0x3c
   26ca6:	4668      	mov	r0, sp
   26ca8:	f00b f811 	bl	31cce <div>
   26cac:	9a01      	ldr	r2, [sp, #4]
   26cae:	68a3      	ldr	r3, [r4, #8]
   26cb0:	9900      	ldr	r1, [sp, #0]
   26cb2:	2a00      	cmp	r2, #0
   26cb4:	440b      	add	r3, r1
   26cb6:	bfb4      	ite	lt
   26cb8:	323c      	addlt	r2, #60	; 0x3c
   26cba:	6062      	strge	r2, [r4, #4]
   26cbc:	60a3      	str	r3, [r4, #8]
   26cbe:	bfbe      	ittt	lt
   26cc0:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26cc4:	6062      	strlt	r2, [r4, #4]
   26cc6:	60a3      	strlt	r3, [r4, #8]
   26cc8:	68a1      	ldr	r1, [r4, #8]
   26cca:	2917      	cmp	r1, #23
   26ccc:	d911      	bls.n	26cf2 <validate_structure+0x82>
   26cce:	2218      	movs	r2, #24
   26cd0:	4668      	mov	r0, sp
   26cd2:	f00a fffc 	bl	31cce <div>
   26cd6:	9a01      	ldr	r2, [sp, #4]
   26cd8:	68e3      	ldr	r3, [r4, #12]
   26cda:	9900      	ldr	r1, [sp, #0]
   26cdc:	2a00      	cmp	r2, #0
   26cde:	440b      	add	r3, r1
   26ce0:	bfb4      	ite	lt
   26ce2:	3218      	addlt	r2, #24
   26ce4:	60a2      	strge	r2, [r4, #8]
   26ce6:	60e3      	str	r3, [r4, #12]
   26ce8:	bfbe      	ittt	lt
   26cea:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26cee:	60a2      	strlt	r2, [r4, #8]
   26cf0:	60e3      	strlt	r3, [r4, #12]
   26cf2:	6921      	ldr	r1, [r4, #16]
   26cf4:	290b      	cmp	r1, #11
   26cf6:	d911      	bls.n	26d1c <validate_structure+0xac>
   26cf8:	220c      	movs	r2, #12
   26cfa:	4668      	mov	r0, sp
   26cfc:	f00a ffe7 	bl	31cce <div>
   26d00:	9a01      	ldr	r2, [sp, #4]
   26d02:	6963      	ldr	r3, [r4, #20]
   26d04:	9900      	ldr	r1, [sp, #0]
   26d06:	2a00      	cmp	r2, #0
   26d08:	440b      	add	r3, r1
   26d0a:	bfb4      	ite	lt
   26d0c:	320c      	addlt	r2, #12
   26d0e:	6122      	strge	r2, [r4, #16]
   26d10:	6163      	str	r3, [r4, #20]
   26d12:	bfbe      	ittt	lt
   26d14:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26d18:	6122      	strlt	r2, [r4, #16]
   26d1a:	6163      	strlt	r3, [r4, #20]
   26d1c:	6963      	ldr	r3, [r4, #20]
   26d1e:	079a      	lsls	r2, r3, #30
   26d20:	d11c      	bne.n	26d5c <validate_structure+0xec>
   26d22:	2164      	movs	r1, #100	; 0x64
   26d24:	fb93 f2f1 	sdiv	r2, r3, r1
   26d28:	fb01 3212 	mls	r2, r1, r2, r3
   26d2c:	b9c2      	cbnz	r2, 26d60 <validate_structure+0xf0>
   26d2e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   26d32:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26d36:	fb93 f1f2 	sdiv	r1, r3, r2
   26d3a:	fb02 3311 	mls	r3, r2, r1, r3
   26d3e:	2b00      	cmp	r3, #0
   26d40:	bf14      	ite	ne
   26d42:	231c      	movne	r3, #28
   26d44:	231d      	moveq	r3, #29
   26d46:	68e2      	ldr	r2, [r4, #12]
   26d48:	2a00      	cmp	r2, #0
   26d4a:	dc0b      	bgt.n	26d64 <validate_structure+0xf4>
   26d4c:	200b      	movs	r0, #11
   26d4e:	2164      	movs	r1, #100	; 0x64
   26d50:	4d33      	ldr	r5, [pc, #204]	; (26e20 <validate_structure+0x1b0>)
   26d52:	68e6      	ldr	r6, [r4, #12]
   26d54:	2e00      	cmp	r6, #0
   26d56:	dd11      	ble.n	26d7c <validate_structure+0x10c>
   26d58:	b003      	add	sp, #12
   26d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d5c:	231c      	movs	r3, #28
   26d5e:	e7f2      	b.n	26d46 <validate_structure+0xd6>
   26d60:	231d      	movs	r3, #29
   26d62:	e7f0      	b.n	26d46 <validate_structure+0xd6>
   26d64:	482e      	ldr	r0, [pc, #184]	; (26e20 <validate_structure+0x1b0>)
   26d66:	2502      	movs	r5, #2
   26d68:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   26d6c:	2901      	cmp	r1, #1
   26d6e:	d132      	bne.n	26dd6 <validate_structure+0x166>
   26d70:	4293      	cmp	r3, r2
   26d72:	daf1      	bge.n	26d58 <validate_structure+0xe8>
   26d74:	1ad2      	subs	r2, r2, r3
   26d76:	e9c4 2503 	strd	r2, r5, [r4, #12]
   26d7a:	e7f5      	b.n	26d68 <validate_structure+0xf8>
   26d7c:	6922      	ldr	r2, [r4, #16]
   26d7e:	3a01      	subs	r2, #1
   26d80:	6122      	str	r2, [r4, #16]
   26d82:	3201      	adds	r2, #1
   26d84:	d116      	bne.n	26db4 <validate_structure+0x144>
   26d86:	6963      	ldr	r3, [r4, #20]
   26d88:	1e5a      	subs	r2, r3, #1
   26d8a:	0797      	lsls	r7, r2, #30
   26d8c:	e9c4 0204 	strd	r0, r2, [r4, #16]
   26d90:	d119      	bne.n	26dc6 <validate_structure+0x156>
   26d92:	fb92 f7f1 	sdiv	r7, r2, r1
   26d96:	fb01 2217 	mls	r2, r1, r7, r2
   26d9a:	b9b2      	cbnz	r2, 26dca <validate_structure+0x15a>
   26d9c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   26da0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26da4:	fb93 f7f2 	sdiv	r7, r3, r2
   26da8:	fb02 3317 	mls	r3, r2, r7, r3
   26dac:	2b00      	cmp	r3, #0
   26dae:	bf14      	ite	ne
   26db0:	231c      	movne	r3, #28
   26db2:	231d      	moveq	r3, #29
   26db4:	6922      	ldr	r2, [r4, #16]
   26db6:	2a01      	cmp	r2, #1
   26db8:	bf14      	ite	ne
   26dba:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
   26dbe:	461a      	moveq	r2, r3
   26dc0:	4432      	add	r2, r6
   26dc2:	60e2      	str	r2, [r4, #12]
   26dc4:	e7c5      	b.n	26d52 <validate_structure+0xe2>
   26dc6:	231c      	movs	r3, #28
   26dc8:	e7f4      	b.n	26db4 <validate_structure+0x144>
   26dca:	231d      	movs	r3, #29
   26dcc:	e7f2      	b.n	26db4 <validate_structure+0x144>
   26dce:	231c      	movs	r3, #28
   26dd0:	e7ca      	b.n	26d68 <validate_structure+0xf8>
   26dd2:	231d      	movs	r3, #29
   26dd4:	e7c8      	b.n	26d68 <validate_structure+0xf8>
   26dd6:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   26dda:	42b2      	cmp	r2, r6
   26ddc:	ddbc      	ble.n	26d58 <validate_structure+0xe8>
   26dde:	3101      	adds	r1, #1
   26de0:	1b92      	subs	r2, r2, r6
   26de2:	290c      	cmp	r1, #12
   26de4:	60e2      	str	r2, [r4, #12]
   26de6:	6121      	str	r1, [r4, #16]
   26de8:	d1be      	bne.n	26d68 <validate_structure+0xf8>
   26dea:	6963      	ldr	r3, [r4, #20]
   26dec:	2100      	movs	r1, #0
   26dee:	1c5a      	adds	r2, r3, #1
   26df0:	6121      	str	r1, [r4, #16]
   26df2:	0791      	lsls	r1, r2, #30
   26df4:	6162      	str	r2, [r4, #20]
   26df6:	d1ea      	bne.n	26dce <validate_structure+0x15e>
   26df8:	2164      	movs	r1, #100	; 0x64
   26dfa:	fb92 f6f1 	sdiv	r6, r2, r1
   26dfe:	fb01 2216 	mls	r2, r1, r6, r2
   26e02:	2a00      	cmp	r2, #0
   26e04:	d1e5      	bne.n	26dd2 <validate_structure+0x162>
   26e06:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   26e0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26e0e:	fb93 f1f2 	sdiv	r1, r3, r2
   26e12:	fb02 3311 	mls	r3, r2, r1, r3
   26e16:	2b00      	cmp	r3, #0
   26e18:	bf14      	ite	ne
   26e1a:	231c      	movne	r3, #28
   26e1c:	231d      	moveq	r3, #29
   26e1e:	e7a3      	b.n	26d68 <validate_structure+0xf8>
   26e20:	00034250 	.word	0x00034250

00026e24 <mktime>:
   26e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e28:	4607      	mov	r7, r0
   26e2a:	f001 fcd7 	bl	287dc <__gettzinfo>
   26e2e:	4682      	mov	sl, r0
   26e30:	4638      	mov	r0, r7
   26e32:	f7ff ff1d 	bl	26c70 <validate_structure>
   26e36:	223c      	movs	r2, #60	; 0x3c
   26e38:	697d      	ldr	r5, [r7, #20]
   26e3a:	e9d7 4300 	ldrd	r4, r3, [r7]
   26e3e:	fb02 4403 	mla	r4, r2, r3, r4
   26e42:	68bb      	ldr	r3, [r7, #8]
   26e44:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   26e48:	fb02 4403 	mla	r4, r2, r3, r4
   26e4c:	4abd      	ldr	r2, [pc, #756]	; (27144 <mktime+0x320>)
   26e4e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
   26e52:	3e01      	subs	r6, #1
   26e54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   26e58:	2b01      	cmp	r3, #1
   26e5a:	4416      	add	r6, r2
   26e5c:	dd11      	ble.n	26e82 <mktime+0x5e>
   26e5e:	07a9      	lsls	r1, r5, #30
   26e60:	d10f      	bne.n	26e82 <mktime+0x5e>
   26e62:	2264      	movs	r2, #100	; 0x64
   26e64:	fb95 f3f2 	sdiv	r3, r5, r2
   26e68:	fb02 5313 	mls	r3, r2, r3, r5
   26e6c:	b943      	cbnz	r3, 26e80 <mktime+0x5c>
   26e6e:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   26e72:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26e76:	fb93 f1f2 	sdiv	r1, r3, r2
   26e7a:	fb02 3311 	mls	r3, r2, r1, r3
   26e7e:	b903      	cbnz	r3, 26e82 <mktime+0x5e>
   26e80:	3601      	adds	r6, #1
   26e82:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
   26e86:	f644 6220 	movw	r2, #20000	; 0x4e20
   26e8a:	61fe      	str	r6, [r7, #28]
   26e8c:	3310      	adds	r3, #16
   26e8e:	4293      	cmp	r3, r2
   26e90:	f200 8154 	bhi.w	2713c <mktime+0x318>
   26e94:	2d46      	cmp	r5, #70	; 0x46
   26e96:	f340 809f 	ble.w	26fd8 <mktime+0x1b4>
   26e9a:	2346      	movs	r3, #70	; 0x46
   26e9c:	f240 1c6d 	movw	ip, #365	; 0x16d
   26ea0:	2164      	movs	r1, #100	; 0x64
   26ea2:	f44f 70c8 	mov.w	r0, #400	; 0x190
   26ea6:	079a      	lsls	r2, r3, #30
   26ea8:	f040 8090 	bne.w	26fcc <mktime+0x1a8>
   26eac:	fb93 f2f1 	sdiv	r2, r3, r1
   26eb0:	fb01 3212 	mls	r2, r1, r2, r3
   26eb4:	2a00      	cmp	r2, #0
   26eb6:	f040 808c 	bne.w	26fd2 <mktime+0x1ae>
   26eba:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   26ebe:	fb92 fef0 	sdiv	lr, r2, r0
   26ec2:	fb00 221e 	mls	r2, r0, lr, r2
   26ec6:	2a00      	cmp	r2, #0
   26ec8:	bf14      	ite	ne
   26eca:	4662      	movne	r2, ip
   26ecc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   26ed0:	3301      	adds	r3, #1
   26ed2:	4416      	add	r6, r2
   26ed4:	429d      	cmp	r5, r3
   26ed6:	d1e6      	bne.n	26ea6 <mktime+0x82>
   26ed8:	4b9b      	ldr	r3, [pc, #620]	; (27148 <mktime+0x324>)
   26eda:	ea4f 78e4 	mov.w	r8, r4, asr #31
   26ede:	fbc6 4803 	smlal	r4, r8, r6, r3
   26ee2:	f000 ff51 	bl	27d88 <__tz_lock>
   26ee6:	f000 ff5b 	bl	27da0 <_tzset_unlocked>
   26eea:	4b98      	ldr	r3, [pc, #608]	; (2714c <mktime+0x328>)
   26eec:	681b      	ldr	r3, [r3, #0]
   26eee:	2b00      	cmp	r3, #0
   26ef0:	f000 811a 	beq.w	27128 <mktime+0x304>
   26ef4:	6978      	ldr	r0, [r7, #20]
   26ef6:	f8da 3004 	ldr.w	r3, [sl, #4]
   26efa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   26efe:	f8d7 9020 	ldr.w	r9, [r7, #32]
   26f02:	4283      	cmp	r3, r0
   26f04:	f040 80ab 	bne.w	2705e <mktime+0x23a>
   26f08:	f8da 0050 	ldr.w	r0, [sl, #80]	; 0x50
   26f0c:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28
   26f10:	e9da 2308 	ldrd	r2, r3, [sl, #32]
   26f14:	e9da 1b12 	ldrd	r1, fp, [sl, #72]	; 0x48
   26f18:	1a12      	subs	r2, r2, r0
   26f1a:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
   26f1e:	ebb1 0e0c 	subs.w	lr, r1, ip
   26f22:	f8cd e000 	str.w	lr, [sp]
   26f26:	eb6b 7eec 	sbc.w	lr, fp, ip, asr #31
   26f2a:	f8cd e004 	str.w	lr, [sp, #4]
   26f2e:	f8dd e000 	ldr.w	lr, [sp]
   26f32:	4574      	cmp	r4, lr
   26f34:	f8dd e004 	ldr.w	lr, [sp, #4]
   26f38:	eb78 0e0e 	sbcs.w	lr, r8, lr
   26f3c:	f280 80b5 	bge.w	270aa <mktime+0x286>
   26f40:	f8da 1000 	ldr.w	r1, [sl]
   26f44:	b121      	cbz	r1, 26f50 <mktime+0x12c>
   26f46:	4294      	cmp	r4, r2
   26f48:	eb78 0303 	sbcs.w	r3, r8, r3
   26f4c:	f2c0 80bb 	blt.w	270c6 <mktime+0x2a2>
   26f50:	f1b9 0f00 	cmp.w	r9, #0
   26f54:	f040 8090 	bne.w	27078 <mktime+0x254>
   26f58:	ebac 0000 	sub.w	r0, ip, r0
   26f5c:	f04f 0901 	mov.w	r9, #1
   26f60:	683b      	ldr	r3, [r7, #0]
   26f62:	1904      	adds	r4, r0, r4
   26f64:	f8d7 b00c 	ldr.w	fp, [r7, #12]
   26f68:	4403      	add	r3, r0
   26f6a:	eb48 78e0 	adc.w	r8, r8, r0, asr #31
   26f6e:	4638      	mov	r0, r7
   26f70:	603b      	str	r3, [r7, #0]
   26f72:	f7ff fe7d 	bl	26c70 <validate_structure>
   26f76:	68fa      	ldr	r2, [r7, #12]
   26f78:	ebb2 020b 	subs.w	r2, r2, fp
   26f7c:	d079      	beq.n	27072 <mktime+0x24e>
   26f7e:	2a01      	cmp	r2, #1
   26f80:	f300 80a9 	bgt.w	270d6 <mktime+0x2b2>
   26f84:	1c93      	adds	r3, r2, #2
   26f86:	bfd8      	it	le
   26f88:	2201      	movle	r2, #1
   26f8a:	69fb      	ldr	r3, [r7, #28]
   26f8c:	18d3      	adds	r3, r2, r3
   26f8e:	f140 80ab 	bpl.w	270e8 <mktime+0x2c4>
   26f92:	1e6b      	subs	r3, r5, #1
   26f94:	0798      	lsls	r0, r3, #30
   26f96:	f040 80a1 	bne.w	270dc <mktime+0x2b8>
   26f9a:	2164      	movs	r1, #100	; 0x64
   26f9c:	fb93 f0f1 	sdiv	r0, r3, r1
   26fa0:	fb01 3310 	mls	r3, r1, r0, r3
   26fa4:	2b00      	cmp	r3, #0
   26fa6:	f040 809c 	bne.w	270e2 <mktime+0x2be>
   26faa:	f44f 73c8 	mov.w	r3, #400	; 0x190
   26fae:	f205 756b 	addw	r5, r5, #1899	; 0x76b
   26fb2:	fb95 f1f3 	sdiv	r1, r5, r3
   26fb6:	fb03 5511 	mls	r5, r3, r1, r5
   26fba:	f240 136d 	movw	r3, #365	; 0x16d
   26fbe:	2d00      	cmp	r5, #0
   26fc0:	bf18      	it	ne
   26fc2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   26fc6:	4416      	add	r6, r2
   26fc8:	61fb      	str	r3, [r7, #28]
   26fca:	e052      	b.n	27072 <mktime+0x24e>
   26fcc:	f240 126d 	movw	r2, #365	; 0x16d
   26fd0:	e77e      	b.n	26ed0 <mktime+0xac>
   26fd2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   26fd6:	e77b      	b.n	26ed0 <mktime+0xac>
   26fd8:	f43f af7e 	beq.w	26ed8 <mktime+0xb4>
   26fdc:	2345      	movs	r3, #69	; 0x45
   26fde:	f240 1c6d 	movw	ip, #365	; 0x16d
   26fe2:	2164      	movs	r1, #100	; 0x64
   26fe4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   26fe8:	e012      	b.n	27010 <mktime+0x1ec>
   26fea:	bb62      	cbnz	r2, 27046 <mktime+0x222>
   26fec:	fb93 f2f1 	sdiv	r2, r3, r1
   26ff0:	fb01 3212 	mls	r2, r1, r2, r3
   26ff4:	bb52      	cbnz	r2, 2704c <mktime+0x228>
   26ff6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   26ffa:	fb92 fef0 	sdiv	lr, r2, r0
   26ffe:	fb00 221e 	mls	r2, r0, lr, r2
   27002:	2a00      	cmp	r2, #0
   27004:	bf14      	ite	ne
   27006:	4662      	movne	r2, ip
   27008:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   2700c:	1ab6      	subs	r6, r6, r2
   2700e:	3b01      	subs	r3, #1
   27010:	429d      	cmp	r5, r3
   27012:	f003 0203 	and.w	r2, r3, #3
   27016:	dbe8      	blt.n	26fea <mktime+0x1c6>
   27018:	b9da      	cbnz	r2, 27052 <mktime+0x22e>
   2701a:	2264      	movs	r2, #100	; 0x64
   2701c:	fb95 f3f2 	sdiv	r3, r5, r2
   27020:	fb02 5313 	mls	r3, r2, r3, r5
   27024:	b9c3      	cbnz	r3, 27058 <mktime+0x234>
   27026:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   2702a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2702e:	fb93 f1f2 	sdiv	r1, r3, r2
   27032:	fb02 3311 	mls	r3, r2, r1, r3
   27036:	2b00      	cmp	r3, #0
   27038:	f240 136d 	movw	r3, #365	; 0x16d
   2703c:	bf08      	it	eq
   2703e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   27042:	1af6      	subs	r6, r6, r3
   27044:	e748      	b.n	26ed8 <mktime+0xb4>
   27046:	f240 126d 	movw	r2, #365	; 0x16d
   2704a:	e7df      	b.n	2700c <mktime+0x1e8>
   2704c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   27050:	e7dc      	b.n	2700c <mktime+0x1e8>
   27052:	f240 136d 	movw	r3, #365	; 0x16d
   27056:	e7f4      	b.n	27042 <mktime+0x21e>
   27058:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   2705c:	e7f1      	b.n	27042 <mktime+0x21e>
   2705e:	f000 fdeb 	bl	27c38 <__tzcalc_limits>
   27062:	2800      	cmp	r0, #0
   27064:	f47f af50 	bne.w	26f08 <mktime+0xe4>
   27068:	f1b9 0f01 	cmp.w	r9, #1
   2706c:	bfa8      	it	ge
   2706e:	f04f 0901 	movge.w	r9, #1
   27072:	f1b9 0f01 	cmp.w	r9, #1
   27076:	d159      	bne.n	2712c <mktime+0x308>
   27078:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
   2707c:	f04f 0901 	mov.w	r9, #1
   27080:	191c      	adds	r4, r3, r4
   27082:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   27086:	f000 fe85 	bl	27d94 <__tz_unlock>
   2708a:	3604      	adds	r6, #4
   2708c:	2307      	movs	r3, #7
   2708e:	fb96 f3f3 	sdiv	r3, r6, r3
   27092:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   27096:	1af6      	subs	r6, r6, r3
   27098:	d44e      	bmi.n	27138 <mktime+0x314>
   2709a:	f8c7 9020 	str.w	r9, [r7, #32]
   2709e:	61be      	str	r6, [r7, #24]
   270a0:	4620      	mov	r0, r4
   270a2:	4641      	mov	r1, r8
   270a4:	b003      	add	sp, #12
   270a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270aa:	1a09      	subs	r1, r1, r0
   270ac:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   270b0:	eb6b 0e0e 	sbc.w	lr, fp, lr
   270b4:	428c      	cmp	r4, r1
   270b6:	eb78 0e0e 	sbcs.w	lr, r8, lr
   270ba:	dbd5      	blt.n	27068 <mktime+0x244>
   270bc:	f8da 1000 	ldr.w	r1, [sl]
   270c0:	2900      	cmp	r1, #0
   270c2:	f43f af40 	beq.w	26f46 <mktime+0x122>
   270c6:	f1b9 0f00 	cmp.w	r9, #0
   270ca:	dd2d      	ble.n	27128 <mktime+0x304>
   270cc:	eba0 000c 	sub.w	r0, r0, ip
   270d0:	f04f 0900 	mov.w	r9, #0
   270d4:	e744      	b.n	26f60 <mktime+0x13c>
   270d6:	f04f 32ff 	mov.w	r2, #4294967295
   270da:	e756      	b.n	26f8a <mktime+0x166>
   270dc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   270e0:	e771      	b.n	26fc6 <mktime+0x1a2>
   270e2:	f240 136d 	movw	r3, #365	; 0x16d
   270e6:	e76e      	b.n	26fc6 <mktime+0x1a2>
   270e8:	07a9      	lsls	r1, r5, #30
   270ea:	d117      	bne.n	2711c <mktime+0x2f8>
   270ec:	2064      	movs	r0, #100	; 0x64
   270ee:	fb95 f1f0 	sdiv	r1, r5, r0
   270f2:	fb00 5111 	mls	r1, r0, r1, r5
   270f6:	b9a1      	cbnz	r1, 27122 <mktime+0x2fe>
   270f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   270fc:	f205 756c 	addw	r5, r5, #1900	; 0x76c
   27100:	fb95 f0f1 	sdiv	r0, r5, r1
   27104:	fb01 5510 	mls	r5, r1, r0, r5
   27108:	f240 116d 	movw	r1, #365	; 0x16d
   2710c:	2d00      	cmp	r5, #0
   2710e:	bf08      	it	eq
   27110:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
   27114:	428b      	cmp	r3, r1
   27116:	bfa8      	it	ge
   27118:	1a5b      	subge	r3, r3, r1
   2711a:	e754      	b.n	26fc6 <mktime+0x1a2>
   2711c:	f240 116d 	movw	r1, #365	; 0x16d
   27120:	e7f8      	b.n	27114 <mktime+0x2f0>
   27122:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   27126:	e7f5      	b.n	27114 <mktime+0x2f0>
   27128:	f04f 0900 	mov.w	r9, #0
   2712c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   27130:	191c      	adds	r4, r3, r4
   27132:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   27136:	e7a6      	b.n	27086 <mktime+0x262>
   27138:	3607      	adds	r6, #7
   2713a:	e7ae      	b.n	2709a <mktime+0x276>
   2713c:	f04f 34ff 	mov.w	r4, #4294967295
   27140:	46a0      	mov	r8, r4
   27142:	e7ad      	b.n	270a0 <mktime+0x27c>
   27144:	00034220 	.word	0x00034220
   27148:	00015180 	.word	0x00015180
   2714c:	20030ea0 	.word	0x20030ea0

00027150 <_free_r>:
   27150:	b538      	push	{r3, r4, r5, lr}
   27152:	4605      	mov	r5, r0
   27154:	2900      	cmp	r1, #0
   27156:	d041      	beq.n	271dc <_free_r+0x8c>
   27158:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2715c:	1f0c      	subs	r4, r1, #4
   2715e:	2b00      	cmp	r3, #0
   27160:	bfb8      	it	lt
   27162:	18e4      	addlt	r4, r4, r3
   27164:	f001 fb42 	bl	287ec <__malloc_lock>
   27168:	4a1d      	ldr	r2, [pc, #116]	; (271e0 <_free_r+0x90>)
   2716a:	6813      	ldr	r3, [r2, #0]
   2716c:	b933      	cbnz	r3, 2717c <_free_r+0x2c>
   2716e:	6063      	str	r3, [r4, #4]
   27170:	6014      	str	r4, [r2, #0]
   27172:	4628      	mov	r0, r5
   27174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27178:	f001 bb3e 	b.w	287f8 <__malloc_unlock>
   2717c:	42a3      	cmp	r3, r4
   2717e:	d908      	bls.n	27192 <_free_r+0x42>
   27180:	6820      	ldr	r0, [r4, #0]
   27182:	1821      	adds	r1, r4, r0
   27184:	428b      	cmp	r3, r1
   27186:	bf01      	itttt	eq
   27188:	6819      	ldreq	r1, [r3, #0]
   2718a:	685b      	ldreq	r3, [r3, #4]
   2718c:	1809      	addeq	r1, r1, r0
   2718e:	6021      	streq	r1, [r4, #0]
   27190:	e7ed      	b.n	2716e <_free_r+0x1e>
   27192:	461a      	mov	r2, r3
   27194:	685b      	ldr	r3, [r3, #4]
   27196:	b10b      	cbz	r3, 2719c <_free_r+0x4c>
   27198:	42a3      	cmp	r3, r4
   2719a:	d9fa      	bls.n	27192 <_free_r+0x42>
   2719c:	6811      	ldr	r1, [r2, #0]
   2719e:	1850      	adds	r0, r2, r1
   271a0:	42a0      	cmp	r0, r4
   271a2:	d10b      	bne.n	271bc <_free_r+0x6c>
   271a4:	6820      	ldr	r0, [r4, #0]
   271a6:	4401      	add	r1, r0
   271a8:	1850      	adds	r0, r2, r1
   271aa:	6011      	str	r1, [r2, #0]
   271ac:	4283      	cmp	r3, r0
   271ae:	d1e0      	bne.n	27172 <_free_r+0x22>
   271b0:	6818      	ldr	r0, [r3, #0]
   271b2:	685b      	ldr	r3, [r3, #4]
   271b4:	4408      	add	r0, r1
   271b6:	6053      	str	r3, [r2, #4]
   271b8:	6010      	str	r0, [r2, #0]
   271ba:	e7da      	b.n	27172 <_free_r+0x22>
   271bc:	d902      	bls.n	271c4 <_free_r+0x74>
   271be:	230c      	movs	r3, #12
   271c0:	602b      	str	r3, [r5, #0]
   271c2:	e7d6      	b.n	27172 <_free_r+0x22>
   271c4:	6820      	ldr	r0, [r4, #0]
   271c6:	1821      	adds	r1, r4, r0
   271c8:	428b      	cmp	r3, r1
   271ca:	bf02      	ittt	eq
   271cc:	6819      	ldreq	r1, [r3, #0]
   271ce:	685b      	ldreq	r3, [r3, #4]
   271d0:	1809      	addeq	r1, r1, r0
   271d2:	6063      	str	r3, [r4, #4]
   271d4:	bf08      	it	eq
   271d6:	6021      	streq	r1, [r4, #0]
   271d8:	6054      	str	r4, [r2, #4]
   271da:	e7ca      	b.n	27172 <_free_r+0x22>
   271dc:	bd38      	pop	{r3, r4, r5, pc}
   271de:	bf00      	nop
   271e0:	20030e94 	.word	0x20030e94

000271e4 <_malloc_r>:
   271e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271e6:	1ccd      	adds	r5, r1, #3
   271e8:	4606      	mov	r6, r0
   271ea:	f025 0503 	bic.w	r5, r5, #3
   271ee:	3508      	adds	r5, #8
   271f0:	2d0c      	cmp	r5, #12
   271f2:	bf38      	it	cc
   271f4:	250c      	movcc	r5, #12
   271f6:	2d00      	cmp	r5, #0
   271f8:	db01      	blt.n	271fe <_malloc_r+0x1a>
   271fa:	42a9      	cmp	r1, r5
   271fc:	d903      	bls.n	27206 <_malloc_r+0x22>
   271fe:	230c      	movs	r3, #12
   27200:	6033      	str	r3, [r6, #0]
   27202:	2000      	movs	r0, #0
   27204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27206:	f001 faf1 	bl	287ec <__malloc_lock>
   2720a:	4921      	ldr	r1, [pc, #132]	; (27290 <_malloc_r+0xac>)
   2720c:	680a      	ldr	r2, [r1, #0]
   2720e:	4614      	mov	r4, r2
   27210:	b99c      	cbnz	r4, 2723a <_malloc_r+0x56>
   27212:	4f20      	ldr	r7, [pc, #128]	; (27294 <_malloc_r+0xb0>)
   27214:	683b      	ldr	r3, [r7, #0]
   27216:	b923      	cbnz	r3, 27222 <_malloc_r+0x3e>
   27218:	4621      	mov	r1, r4
   2721a:	4630      	mov	r0, r6
   2721c:	f000 fbb8 	bl	27990 <_sbrk_r>
   27220:	6038      	str	r0, [r7, #0]
   27222:	4629      	mov	r1, r5
   27224:	4630      	mov	r0, r6
   27226:	f000 fbb3 	bl	27990 <_sbrk_r>
   2722a:	1c43      	adds	r3, r0, #1
   2722c:	d123      	bne.n	27276 <_malloc_r+0x92>
   2722e:	230c      	movs	r3, #12
   27230:	4630      	mov	r0, r6
   27232:	6033      	str	r3, [r6, #0]
   27234:	f001 fae0 	bl	287f8 <__malloc_unlock>
   27238:	e7e3      	b.n	27202 <_malloc_r+0x1e>
   2723a:	6823      	ldr	r3, [r4, #0]
   2723c:	1b5b      	subs	r3, r3, r5
   2723e:	d417      	bmi.n	27270 <_malloc_r+0x8c>
   27240:	2b0b      	cmp	r3, #11
   27242:	d903      	bls.n	2724c <_malloc_r+0x68>
   27244:	6023      	str	r3, [r4, #0]
   27246:	441c      	add	r4, r3
   27248:	6025      	str	r5, [r4, #0]
   2724a:	e004      	b.n	27256 <_malloc_r+0x72>
   2724c:	6863      	ldr	r3, [r4, #4]
   2724e:	42a2      	cmp	r2, r4
   27250:	bf0c      	ite	eq
   27252:	600b      	streq	r3, [r1, #0]
   27254:	6053      	strne	r3, [r2, #4]
   27256:	4630      	mov	r0, r6
   27258:	f001 face 	bl	287f8 <__malloc_unlock>
   2725c:	f104 000b 	add.w	r0, r4, #11
   27260:	1d23      	adds	r3, r4, #4
   27262:	f020 0007 	bic.w	r0, r0, #7
   27266:	1ac2      	subs	r2, r0, r3
   27268:	bf1c      	itt	ne
   2726a:	1a1b      	subne	r3, r3, r0
   2726c:	50a3      	strne	r3, [r4, r2]
   2726e:	e7c9      	b.n	27204 <_malloc_r+0x20>
   27270:	4622      	mov	r2, r4
   27272:	6864      	ldr	r4, [r4, #4]
   27274:	e7cc      	b.n	27210 <_malloc_r+0x2c>
   27276:	1cc4      	adds	r4, r0, #3
   27278:	f024 0403 	bic.w	r4, r4, #3
   2727c:	42a0      	cmp	r0, r4
   2727e:	d0e3      	beq.n	27248 <_malloc_r+0x64>
   27280:	1a21      	subs	r1, r4, r0
   27282:	4630      	mov	r0, r6
   27284:	f000 fb84 	bl	27990 <_sbrk_r>
   27288:	3001      	adds	r0, #1
   2728a:	d1dd      	bne.n	27248 <_malloc_r+0x64>
   2728c:	e7cf      	b.n	2722e <_malloc_r+0x4a>
   2728e:	bf00      	nop
   27290:	20030e94 	.word	0x20030e94
   27294:	20030e90 	.word	0x20030e90

00027298 <_printf_float>:
   27298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2729c:	b091      	sub	sp, #68	; 0x44
   2729e:	460c      	mov	r4, r1
   272a0:	4616      	mov	r6, r2
   272a2:	461f      	mov	r7, r3
   272a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   272a8:	4605      	mov	r5, r0
   272aa:	f001 fa9b 	bl	287e4 <_localeconv_r>
   272ae:	6803      	ldr	r3, [r0, #0]
   272b0:	4618      	mov	r0, r3
   272b2:	9308      	str	r3, [sp, #32]
   272b4:	f7e2 f8a9 	bl	940a <strlen>
   272b8:	2300      	movs	r3, #0
   272ba:	9009      	str	r0, [sp, #36]	; 0x24
   272bc:	930e      	str	r3, [sp, #56]	; 0x38
   272be:	f8d8 3000 	ldr.w	r3, [r8]
   272c2:	f894 a018 	ldrb.w	sl, [r4, #24]
   272c6:	3307      	adds	r3, #7
   272c8:	f8d4 b000 	ldr.w	fp, [r4]
   272cc:	f023 0307 	bic.w	r3, r3, #7
   272d0:	f103 0208 	add.w	r2, r3, #8
   272d4:	f8c8 2000 	str.w	r2, [r8]
   272d8:	f04f 32ff 	mov.w	r2, #4294967295
   272dc:	e9d3 8900 	ldrd	r8, r9, [r3]
   272e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   272e4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   272e8:	930b      	str	r3, [sp, #44]	; 0x2c
   272ea:	4b9d      	ldr	r3, [pc, #628]	; (27560 <_printf_float+0x2c8>)
   272ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   272f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   272f4:	f7e1 ff04 	bl	9100 <__aeabi_dcmpun>
   272f8:	bb70      	cbnz	r0, 27358 <_printf_float+0xc0>
   272fa:	f04f 32ff 	mov.w	r2, #4294967295
   272fe:	4b98      	ldr	r3, [pc, #608]	; (27560 <_printf_float+0x2c8>)
   27300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   27304:	f7e1 febe 	bl	9084 <__aeabi_dcmple>
   27308:	bb30      	cbnz	r0, 27358 <_printf_float+0xc0>
   2730a:	2200      	movs	r2, #0
   2730c:	2300      	movs	r3, #0
   2730e:	4640      	mov	r0, r8
   27310:	4649      	mov	r1, r9
   27312:	f7e1 fead 	bl	9070 <__aeabi_dcmplt>
   27316:	b110      	cbz	r0, 2731e <_printf_float+0x86>
   27318:	232d      	movs	r3, #45	; 0x2d
   2731a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2731e:	4a91      	ldr	r2, [pc, #580]	; (27564 <_printf_float+0x2cc>)
   27320:	4b91      	ldr	r3, [pc, #580]	; (27568 <_printf_float+0x2d0>)
   27322:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   27326:	bf94      	ite	ls
   27328:	4690      	movls	r8, r2
   2732a:	4698      	movhi	r8, r3
   2732c:	2303      	movs	r3, #3
   2732e:	f04f 0900 	mov.w	r9, #0
   27332:	6123      	str	r3, [r4, #16]
   27334:	f02b 0304 	bic.w	r3, fp, #4
   27338:	6023      	str	r3, [r4, #0]
   2733a:	4633      	mov	r3, r6
   2733c:	aa0f      	add	r2, sp, #60	; 0x3c
   2733e:	4621      	mov	r1, r4
   27340:	4628      	mov	r0, r5
   27342:	9700      	str	r7, [sp, #0]
   27344:	f00a fb63 	bl	31a0e <_printf_common>
   27348:	3001      	adds	r0, #1
   2734a:	f040 8099 	bne.w	27480 <_printf_float+0x1e8>
   2734e:	f04f 30ff 	mov.w	r0, #4294967295
   27352:	b011      	add	sp, #68	; 0x44
   27354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27358:	4642      	mov	r2, r8
   2735a:	464b      	mov	r3, r9
   2735c:	4640      	mov	r0, r8
   2735e:	4649      	mov	r1, r9
   27360:	f7e1 fece 	bl	9100 <__aeabi_dcmpun>
   27364:	b140      	cbz	r0, 27378 <_printf_float+0xe0>
   27366:	464b      	mov	r3, r9
   27368:	4a80      	ldr	r2, [pc, #512]	; (2756c <_printf_float+0x2d4>)
   2736a:	2b00      	cmp	r3, #0
   2736c:	bfbc      	itt	lt
   2736e:	232d      	movlt	r3, #45	; 0x2d
   27370:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   27374:	4b7e      	ldr	r3, [pc, #504]	; (27570 <_printf_float+0x2d8>)
   27376:	e7d4      	b.n	27322 <_printf_float+0x8a>
   27378:	6863      	ldr	r3, [r4, #4]
   2737a:	1c5a      	adds	r2, r3, #1
   2737c:	d129      	bne.n	273d2 <_printf_float+0x13a>
   2737e:	2306      	movs	r3, #6
   27380:	6063      	str	r3, [r4, #4]
   27382:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   27386:	2200      	movs	r2, #0
   27388:	4628      	mov	r0, r5
   2738a:	6023      	str	r3, [r4, #0]
   2738c:	9206      	str	r2, [sp, #24]
   2738e:	aa0e      	add	r2, sp, #56	; 0x38
   27390:	e9cd a204 	strd	sl, r2, [sp, #16]
   27394:	aa0d      	add	r2, sp, #52	; 0x34
   27396:	9203      	str	r2, [sp, #12]
   27398:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2739c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   273a0:	6863      	ldr	r3, [r4, #4]
   273a2:	4642      	mov	r2, r8
   273a4:	9300      	str	r3, [sp, #0]
   273a6:	464b      	mov	r3, r9
   273a8:	f00a fa91 	bl	318ce <__cvt>
   273ac:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   273b0:	4680      	mov	r8, r0
   273b2:	990d      	ldr	r1, [sp, #52]	; 0x34
   273b4:	d115      	bne.n	273e2 <_printf_float+0x14a>
   273b6:	1ccb      	adds	r3, r1, #3
   273b8:	db3b      	blt.n	27432 <_printf_float+0x19a>
   273ba:	6863      	ldr	r3, [r4, #4]
   273bc:	4299      	cmp	r1, r3
   273be:	dc38      	bgt.n	27432 <_printf_float+0x19a>
   273c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   273c2:	4299      	cmp	r1, r3
   273c4:	db55      	blt.n	27472 <_printf_float+0x1da>
   273c6:	6823      	ldr	r3, [r4, #0]
   273c8:	6121      	str	r1, [r4, #16]
   273ca:	07d8      	lsls	r0, r3, #31
   273cc:	d545      	bpl.n	2745a <_printf_float+0x1c2>
   273ce:	1c4b      	adds	r3, r1, #1
   273d0:	e042      	b.n	27458 <_printf_float+0x1c0>
   273d2:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   273d6:	2a47      	cmp	r2, #71	; 0x47
   273d8:	d1d3      	bne.n	27382 <_printf_float+0xea>
   273da:	2b00      	cmp	r3, #0
   273dc:	d1d1      	bne.n	27382 <_printf_float+0xea>
   273de:	2301      	movs	r3, #1
   273e0:	e7ce      	b.n	27380 <_printf_float+0xe8>
   273e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   273e6:	d107      	bne.n	273f8 <_printf_float+0x160>
   273e8:	1cc8      	adds	r0, r1, #3
   273ea:	db25      	blt.n	27438 <_printf_float+0x1a0>
   273ec:	6863      	ldr	r3, [r4, #4]
   273ee:	428b      	cmp	r3, r1
   273f0:	db22      	blt.n	27438 <_printf_float+0x1a0>
   273f2:	f04f 0a67 	mov.w	sl, #103	; 0x67
   273f6:	e7e3      	b.n	273c0 <_printf_float+0x128>
   273f8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   273fc:	d81f      	bhi.n	2743e <_printf_float+0x1a6>
   273fe:	3901      	subs	r1, #1
   27400:	4652      	mov	r2, sl
   27402:	f104 0050 	add.w	r0, r4, #80	; 0x50
   27406:	910d      	str	r1, [sp, #52]	; 0x34
   27408:	f00a fac8 	bl	3199c <__exponent>
   2740c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2740e:	4681      	mov	r9, r0
   27410:	1813      	adds	r3, r2, r0
   27412:	2a01      	cmp	r2, #1
   27414:	6123      	str	r3, [r4, #16]
   27416:	dc02      	bgt.n	2741e <_printf_float+0x186>
   27418:	6822      	ldr	r2, [r4, #0]
   2741a:	07d2      	lsls	r2, r2, #31
   2741c:	d501      	bpl.n	27422 <_printf_float+0x18a>
   2741e:	3301      	adds	r3, #1
   27420:	6123      	str	r3, [r4, #16]
   27422:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   27426:	2b00      	cmp	r3, #0
   27428:	d087      	beq.n	2733a <_printf_float+0xa2>
   2742a:	232d      	movs	r3, #45	; 0x2d
   2742c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27430:	e783      	b.n	2733a <_printf_float+0xa2>
   27432:	f04f 0a65 	mov.w	sl, #101	; 0x65
   27436:	e7e2      	b.n	273fe <_printf_float+0x166>
   27438:	f04f 0a45 	mov.w	sl, #69	; 0x45
   2743c:	e7df      	b.n	273fe <_printf_float+0x166>
   2743e:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   27442:	d1bd      	bne.n	273c0 <_printf_float+0x128>
   27444:	2900      	cmp	r1, #0
   27446:	6863      	ldr	r3, [r4, #4]
   27448:	dd0b      	ble.n	27462 <_printf_float+0x1ca>
   2744a:	6121      	str	r1, [r4, #16]
   2744c:	b913      	cbnz	r3, 27454 <_printf_float+0x1bc>
   2744e:	6822      	ldr	r2, [r4, #0]
   27450:	07d0      	lsls	r0, r2, #31
   27452:	d502      	bpl.n	2745a <_printf_float+0x1c2>
   27454:	3301      	adds	r3, #1
   27456:	440b      	add	r3, r1
   27458:	6123      	str	r3, [r4, #16]
   2745a:	f04f 0900 	mov.w	r9, #0
   2745e:	65a1      	str	r1, [r4, #88]	; 0x58
   27460:	e7df      	b.n	27422 <_printf_float+0x18a>
   27462:	b913      	cbnz	r3, 2746a <_printf_float+0x1d2>
   27464:	6822      	ldr	r2, [r4, #0]
   27466:	07d2      	lsls	r2, r2, #31
   27468:	d501      	bpl.n	2746e <_printf_float+0x1d6>
   2746a:	3302      	adds	r3, #2
   2746c:	e7f4      	b.n	27458 <_printf_float+0x1c0>
   2746e:	2301      	movs	r3, #1
   27470:	e7f2      	b.n	27458 <_printf_float+0x1c0>
   27472:	2900      	cmp	r1, #0
   27474:	bfd4      	ite	le
   27476:	f1c1 0202 	rsble	r2, r1, #2
   2747a:	2201      	movgt	r2, #1
   2747c:	4413      	add	r3, r2
   2747e:	e7eb      	b.n	27458 <_printf_float+0x1c0>
   27480:	6823      	ldr	r3, [r4, #0]
   27482:	055a      	lsls	r2, r3, #21
   27484:	d407      	bmi.n	27496 <_printf_float+0x1fe>
   27486:	6923      	ldr	r3, [r4, #16]
   27488:	4642      	mov	r2, r8
   2748a:	4631      	mov	r1, r6
   2748c:	4628      	mov	r0, r5
   2748e:	47b8      	blx	r7
   27490:	3001      	adds	r0, #1
   27492:	d12b      	bne.n	274ec <_printf_float+0x254>
   27494:	e75b      	b.n	2734e <_printf_float+0xb6>
   27496:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2749a:	f240 80dc 	bls.w	27656 <_printf_float+0x3be>
   2749e:	2200      	movs	r2, #0
   274a0:	2300      	movs	r3, #0
   274a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   274a6:	f7e1 fdd9 	bl	905c <__aeabi_dcmpeq>
   274aa:	2800      	cmp	r0, #0
   274ac:	d033      	beq.n	27516 <_printf_float+0x27e>
   274ae:	2301      	movs	r3, #1
   274b0:	4a30      	ldr	r2, [pc, #192]	; (27574 <_printf_float+0x2dc>)
   274b2:	4631      	mov	r1, r6
   274b4:	4628      	mov	r0, r5
   274b6:	47b8      	blx	r7
   274b8:	3001      	adds	r0, #1
   274ba:	f43f af48 	beq.w	2734e <_printf_float+0xb6>
   274be:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   274c2:	4543      	cmp	r3, r8
   274c4:	db02      	blt.n	274cc <_printf_float+0x234>
   274c6:	6823      	ldr	r3, [r4, #0]
   274c8:	07d8      	lsls	r0, r3, #31
   274ca:	d50f      	bpl.n	274ec <_printf_float+0x254>
   274cc:	4631      	mov	r1, r6
   274ce:	4628      	mov	r0, r5
   274d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   274d4:	47b8      	blx	r7
   274d6:	3001      	adds	r0, #1
   274d8:	f43f af39 	beq.w	2734e <_printf_float+0xb6>
   274dc:	f04f 0900 	mov.w	r9, #0
   274e0:	f108 38ff 	add.w	r8, r8, #4294967295
   274e4:	f104 0a1a 	add.w	sl, r4, #26
   274e8:	45c8      	cmp	r8, r9
   274ea:	dc09      	bgt.n	27500 <_printf_float+0x268>
   274ec:	6823      	ldr	r3, [r4, #0]
   274ee:	079b      	lsls	r3, r3, #30
   274f0:	f100 8102 	bmi.w	276f8 <_printf_float+0x460>
   274f4:	68e0      	ldr	r0, [r4, #12]
   274f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   274f8:	4298      	cmp	r0, r3
   274fa:	bfb8      	it	lt
   274fc:	4618      	movlt	r0, r3
   274fe:	e728      	b.n	27352 <_printf_float+0xba>
   27500:	2301      	movs	r3, #1
   27502:	4652      	mov	r2, sl
   27504:	4631      	mov	r1, r6
   27506:	4628      	mov	r0, r5
   27508:	47b8      	blx	r7
   2750a:	3001      	adds	r0, #1
   2750c:	f43f af1f 	beq.w	2734e <_printf_float+0xb6>
   27510:	f109 0901 	add.w	r9, r9, #1
   27514:	e7e8      	b.n	274e8 <_printf_float+0x250>
   27516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27518:	2b00      	cmp	r3, #0
   2751a:	dc38      	bgt.n	2758e <_printf_float+0x2f6>
   2751c:	2301      	movs	r3, #1
   2751e:	4a15      	ldr	r2, [pc, #84]	; (27574 <_printf_float+0x2dc>)
   27520:	4631      	mov	r1, r6
   27522:	4628      	mov	r0, r5
   27524:	47b8      	blx	r7
   27526:	3001      	adds	r0, #1
   27528:	f43f af11 	beq.w	2734e <_printf_float+0xb6>
   2752c:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   27530:	ea59 0303 	orrs.w	r3, r9, r3
   27534:	d102      	bne.n	2753c <_printf_float+0x2a4>
   27536:	6823      	ldr	r3, [r4, #0]
   27538:	07d9      	lsls	r1, r3, #31
   2753a:	d5d7      	bpl.n	274ec <_printf_float+0x254>
   2753c:	4631      	mov	r1, r6
   2753e:	4628      	mov	r0, r5
   27540:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   27544:	47b8      	blx	r7
   27546:	3001      	adds	r0, #1
   27548:	f43f af01 	beq.w	2734e <_printf_float+0xb6>
   2754c:	f04f 0a00 	mov.w	sl, #0
   27550:	f104 0b1a 	add.w	fp, r4, #26
   27554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27556:	425b      	negs	r3, r3
   27558:	4553      	cmp	r3, sl
   2755a:	dc0d      	bgt.n	27578 <_printf_float+0x2e0>
   2755c:	464b      	mov	r3, r9
   2755e:	e793      	b.n	27488 <_printf_float+0x1f0>
   27560:	7fefffff 	.word	0x7fefffff
   27564:	0003885f 	.word	0x0003885f
   27568:	000352d0 	.word	0x000352d0
   2756c:	00038863 	.word	0x00038863
   27570:	00038867 	.word	0x00038867
   27574:	00036958 	.word	0x00036958
   27578:	2301      	movs	r3, #1
   2757a:	465a      	mov	r2, fp
   2757c:	4631      	mov	r1, r6
   2757e:	4628      	mov	r0, r5
   27580:	47b8      	blx	r7
   27582:	3001      	adds	r0, #1
   27584:	f43f aee3 	beq.w	2734e <_printf_float+0xb6>
   27588:	f10a 0a01 	add.w	sl, sl, #1
   2758c:	e7e2      	b.n	27554 <_printf_float+0x2bc>
   2758e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27590:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   27594:	4553      	cmp	r3, sl
   27596:	bfa8      	it	ge
   27598:	4653      	movge	r3, sl
   2759a:	2b00      	cmp	r3, #0
   2759c:	4699      	mov	r9, r3
   2759e:	dc36      	bgt.n	2760e <_printf_float+0x376>
   275a0:	f04f 0b00 	mov.w	fp, #0
   275a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   275a8:	f104 021a 	add.w	r2, r4, #26
   275ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
   275ae:	930a      	str	r3, [sp, #40]	; 0x28
   275b0:	eba3 0309 	sub.w	r3, r3, r9
   275b4:	455b      	cmp	r3, fp
   275b6:	dc31      	bgt.n	2761c <_printf_float+0x384>
   275b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   275ba:	459a      	cmp	sl, r3
   275bc:	dc3a      	bgt.n	27634 <_printf_float+0x39c>
   275be:	6823      	ldr	r3, [r4, #0]
   275c0:	07da      	lsls	r2, r3, #31
   275c2:	d437      	bmi.n	27634 <_printf_float+0x39c>
   275c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   275c6:	ebaa 0903 	sub.w	r9, sl, r3
   275ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   275cc:	ebaa 0303 	sub.w	r3, sl, r3
   275d0:	4599      	cmp	r9, r3
   275d2:	bfa8      	it	ge
   275d4:	4699      	movge	r9, r3
   275d6:	f1b9 0f00 	cmp.w	r9, #0
   275da:	dc33      	bgt.n	27644 <_printf_float+0x3ac>
   275dc:	f04f 0800 	mov.w	r8, #0
   275e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   275e4:	f104 0b1a 	add.w	fp, r4, #26
   275e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   275ea:	ebaa 0303 	sub.w	r3, sl, r3
   275ee:	eba3 0309 	sub.w	r3, r3, r9
   275f2:	4543      	cmp	r3, r8
   275f4:	f77f af7a 	ble.w	274ec <_printf_float+0x254>
   275f8:	2301      	movs	r3, #1
   275fa:	465a      	mov	r2, fp
   275fc:	4631      	mov	r1, r6
   275fe:	4628      	mov	r0, r5
   27600:	47b8      	blx	r7
   27602:	3001      	adds	r0, #1
   27604:	f43f aea3 	beq.w	2734e <_printf_float+0xb6>
   27608:	f108 0801 	add.w	r8, r8, #1
   2760c:	e7ec      	b.n	275e8 <_printf_float+0x350>
   2760e:	4642      	mov	r2, r8
   27610:	4631      	mov	r1, r6
   27612:	4628      	mov	r0, r5
   27614:	47b8      	blx	r7
   27616:	3001      	adds	r0, #1
   27618:	d1c2      	bne.n	275a0 <_printf_float+0x308>
   2761a:	e698      	b.n	2734e <_printf_float+0xb6>
   2761c:	2301      	movs	r3, #1
   2761e:	4631      	mov	r1, r6
   27620:	4628      	mov	r0, r5
   27622:	920a      	str	r2, [sp, #40]	; 0x28
   27624:	47b8      	blx	r7
   27626:	3001      	adds	r0, #1
   27628:	f43f ae91 	beq.w	2734e <_printf_float+0xb6>
   2762c:	f10b 0b01 	add.w	fp, fp, #1
   27630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27632:	e7bb      	b.n	275ac <_printf_float+0x314>
   27634:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   27638:	4631      	mov	r1, r6
   2763a:	4628      	mov	r0, r5
   2763c:	47b8      	blx	r7
   2763e:	3001      	adds	r0, #1
   27640:	d1c0      	bne.n	275c4 <_printf_float+0x32c>
   27642:	e684      	b.n	2734e <_printf_float+0xb6>
   27644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27646:	464b      	mov	r3, r9
   27648:	4631      	mov	r1, r6
   2764a:	4628      	mov	r0, r5
   2764c:	4442      	add	r2, r8
   2764e:	47b8      	blx	r7
   27650:	3001      	adds	r0, #1
   27652:	d1c3      	bne.n	275dc <_printf_float+0x344>
   27654:	e67b      	b.n	2734e <_printf_float+0xb6>
   27656:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2765a:	f1ba 0f01 	cmp.w	sl, #1
   2765e:	dc01      	bgt.n	27664 <_printf_float+0x3cc>
   27660:	07db      	lsls	r3, r3, #31
   27662:	d536      	bpl.n	276d2 <_printf_float+0x43a>
   27664:	2301      	movs	r3, #1
   27666:	4642      	mov	r2, r8
   27668:	4631      	mov	r1, r6
   2766a:	4628      	mov	r0, r5
   2766c:	47b8      	blx	r7
   2766e:	3001      	adds	r0, #1
   27670:	f43f ae6d 	beq.w	2734e <_printf_float+0xb6>
   27674:	4631      	mov	r1, r6
   27676:	4628      	mov	r0, r5
   27678:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2767c:	47b8      	blx	r7
   2767e:	3001      	adds	r0, #1
   27680:	f43f ae65 	beq.w	2734e <_printf_float+0xb6>
   27684:	2200      	movs	r2, #0
   27686:	2300      	movs	r3, #0
   27688:	f10a 3aff 	add.w	sl, sl, #4294967295
   2768c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   27690:	f7e1 fce4 	bl	905c <__aeabi_dcmpeq>
   27694:	b9c0      	cbnz	r0, 276c8 <_printf_float+0x430>
   27696:	4653      	mov	r3, sl
   27698:	f108 0201 	add.w	r2, r8, #1
   2769c:	4631      	mov	r1, r6
   2769e:	4628      	mov	r0, r5
   276a0:	47b8      	blx	r7
   276a2:	3001      	adds	r0, #1
   276a4:	d10c      	bne.n	276c0 <_printf_float+0x428>
   276a6:	e652      	b.n	2734e <_printf_float+0xb6>
   276a8:	2301      	movs	r3, #1
   276aa:	465a      	mov	r2, fp
   276ac:	4631      	mov	r1, r6
   276ae:	4628      	mov	r0, r5
   276b0:	47b8      	blx	r7
   276b2:	3001      	adds	r0, #1
   276b4:	f43f ae4b 	beq.w	2734e <_printf_float+0xb6>
   276b8:	f108 0801 	add.w	r8, r8, #1
   276bc:	45d0      	cmp	r8, sl
   276be:	dbf3      	blt.n	276a8 <_printf_float+0x410>
   276c0:	464b      	mov	r3, r9
   276c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
   276c6:	e6e0      	b.n	2748a <_printf_float+0x1f2>
   276c8:	f04f 0800 	mov.w	r8, #0
   276cc:	f104 0b1a 	add.w	fp, r4, #26
   276d0:	e7f4      	b.n	276bc <_printf_float+0x424>
   276d2:	2301      	movs	r3, #1
   276d4:	4642      	mov	r2, r8
   276d6:	e7e1      	b.n	2769c <_printf_float+0x404>
   276d8:	2301      	movs	r3, #1
   276da:	464a      	mov	r2, r9
   276dc:	4631      	mov	r1, r6
   276de:	4628      	mov	r0, r5
   276e0:	47b8      	blx	r7
   276e2:	3001      	adds	r0, #1
   276e4:	f43f ae33 	beq.w	2734e <_printf_float+0xb6>
   276e8:	f108 0801 	add.w	r8, r8, #1
   276ec:	68e3      	ldr	r3, [r4, #12]
   276ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
   276f0:	1a5b      	subs	r3, r3, r1
   276f2:	4543      	cmp	r3, r8
   276f4:	dcf0      	bgt.n	276d8 <_printf_float+0x440>
   276f6:	e6fd      	b.n	274f4 <_printf_float+0x25c>
   276f8:	f04f 0800 	mov.w	r8, #0
   276fc:	f104 0919 	add.w	r9, r4, #25
   27700:	e7f4      	b.n	276ec <_printf_float+0x454>
   27702:	bf00      	nop

00027704 <_printf_i>:
   27704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   27708:	7e0f      	ldrb	r7, [r1, #24]
   2770a:	4691      	mov	r9, r2
   2770c:	4680      	mov	r8, r0
   2770e:	460c      	mov	r4, r1
   27710:	2f78      	cmp	r7, #120	; 0x78
   27712:	469a      	mov	sl, r3
   27714:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   27716:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2771a:	d807      	bhi.n	2772c <_printf_i+0x28>
   2771c:	2f62      	cmp	r7, #98	; 0x62
   2771e:	d80a      	bhi.n	27736 <_printf_i+0x32>
   27720:	2f00      	cmp	r7, #0
   27722:	f000 80e0 	beq.w	278e6 <_printf_i+0x1e2>
   27726:	2f58      	cmp	r7, #88	; 0x58
   27728:	f000 80bb 	beq.w	278a2 <_printf_i+0x19e>
   2772c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   27730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   27734:	e03a      	b.n	277ac <_printf_i+0xa8>
   27736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2773a:	2b15      	cmp	r3, #21
   2773c:	d8f6      	bhi.n	2772c <_printf_i+0x28>
   2773e:	a101      	add	r1, pc, #4	; (adr r1, 27744 <_printf_i+0x40>)
   27740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   27744:	0002779d 	.word	0x0002779d
   27748:	000277b1 	.word	0x000277b1
   2774c:	0002772d 	.word	0x0002772d
   27750:	0002772d 	.word	0x0002772d
   27754:	0002772d 	.word	0x0002772d
   27758:	0002772d 	.word	0x0002772d
   2775c:	000277b1 	.word	0x000277b1
   27760:	0002772d 	.word	0x0002772d
   27764:	0002772d 	.word	0x0002772d
   27768:	0002772d 	.word	0x0002772d
   2776c:	0002772d 	.word	0x0002772d
   27770:	000278cd 	.word	0x000278cd
   27774:	00027841 	.word	0x00027841
   27778:	00027883 	.word	0x00027883
   2777c:	0002772d 	.word	0x0002772d
   27780:	0002772d 	.word	0x0002772d
   27784:	000278ef 	.word	0x000278ef
   27788:	0002772d 	.word	0x0002772d
   2778c:	00027841 	.word	0x00027841
   27790:	0002772d 	.word	0x0002772d
   27794:	0002772d 	.word	0x0002772d
   27798:	0002788b 	.word	0x0002788b
   2779c:	682b      	ldr	r3, [r5, #0]
   2779e:	f104 0642 	add.w	r6, r4, #66	; 0x42
   277a2:	1d1a      	adds	r2, r3, #4
   277a4:	681b      	ldr	r3, [r3, #0]
   277a6:	602a      	str	r2, [r5, #0]
   277a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   277ac:	2301      	movs	r3, #1
   277ae:	e0ab      	b.n	27908 <_printf_i+0x204>
   277b0:	6823      	ldr	r3, [r4, #0]
   277b2:	6829      	ldr	r1, [r5, #0]
   277b4:	061f      	lsls	r7, r3, #24
   277b6:	f101 0004 	add.w	r0, r1, #4
   277ba:	6028      	str	r0, [r5, #0]
   277bc:	d501      	bpl.n	277c2 <_printf_i+0xbe>
   277be:	680d      	ldr	r5, [r1, #0]
   277c0:	e003      	b.n	277ca <_printf_i+0xc6>
   277c2:	065e      	lsls	r6, r3, #25
   277c4:	d5fb      	bpl.n	277be <_printf_i+0xba>
   277c6:	f9b1 5000 	ldrsh.w	r5, [r1]
   277ca:	2d00      	cmp	r5, #0
   277cc:	6861      	ldr	r1, [r4, #4]
   277ce:	da7a      	bge.n	278c6 <_printf_i+0x1c2>
   277d0:	202d      	movs	r0, #45	; 0x2d
   277d2:	2900      	cmp	r1, #0
   277d4:	60a1      	str	r1, [r4, #8]
   277d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   277da:	da2d      	bge.n	27838 <_printf_i+0x134>
   277dc:	426d      	negs	r5, r5
   277de:	485e      	ldr	r0, [pc, #376]	; (27958 <_printf_i+0x254>)
   277e0:	230a      	movs	r3, #10
   277e2:	4616      	mov	r6, r2
   277e4:	fbb5 f1f3 	udiv	r1, r5, r3
   277e8:	fb03 5711 	mls	r7, r3, r1, r5
   277ec:	5dc7      	ldrb	r7, [r0, r7]
   277ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
   277f2:	462f      	mov	r7, r5
   277f4:	460d      	mov	r5, r1
   277f6:	42bb      	cmp	r3, r7
   277f8:	d9f4      	bls.n	277e4 <_printf_i+0xe0>
   277fa:	2b08      	cmp	r3, #8
   277fc:	d10b      	bne.n	27816 <_printf_i+0x112>
   277fe:	6823      	ldr	r3, [r4, #0]
   27800:	07df      	lsls	r7, r3, #31
   27802:	d508      	bpl.n	27816 <_printf_i+0x112>
   27804:	6923      	ldr	r3, [r4, #16]
   27806:	6861      	ldr	r1, [r4, #4]
   27808:	4299      	cmp	r1, r3
   2780a:	bfde      	ittt	le
   2780c:	2330      	movle	r3, #48	; 0x30
   2780e:	f806 3c01 	strble.w	r3, [r6, #-1]
   27812:	f106 36ff 	addle.w	r6, r6, #4294967295
   27816:	1b92      	subs	r2, r2, r6
   27818:	6122      	str	r2, [r4, #16]
   2781a:	464b      	mov	r3, r9
   2781c:	aa03      	add	r2, sp, #12
   2781e:	4621      	mov	r1, r4
   27820:	4640      	mov	r0, r8
   27822:	f8cd a000 	str.w	sl, [sp]
   27826:	f00a f8f2 	bl	31a0e <_printf_common>
   2782a:	3001      	adds	r0, #1
   2782c:	d171      	bne.n	27912 <_printf_i+0x20e>
   2782e:	f04f 30ff 	mov.w	r0, #4294967295
   27832:	b004      	add	sp, #16
   27834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27838:	f023 0304 	bic.w	r3, r3, #4
   2783c:	6023      	str	r3, [r4, #0]
   2783e:	e7cd      	b.n	277dc <_printf_i+0xd8>
   27840:	682b      	ldr	r3, [r5, #0]
   27842:	6820      	ldr	r0, [r4, #0]
   27844:	1d19      	adds	r1, r3, #4
   27846:	6029      	str	r1, [r5, #0]
   27848:	0605      	lsls	r5, r0, #24
   2784a:	d501      	bpl.n	27850 <_printf_i+0x14c>
   2784c:	681d      	ldr	r5, [r3, #0]
   2784e:	e002      	b.n	27856 <_printf_i+0x152>
   27850:	0641      	lsls	r1, r0, #25
   27852:	d5fb      	bpl.n	2784c <_printf_i+0x148>
   27854:	881d      	ldrh	r5, [r3, #0]
   27856:	2f6f      	cmp	r7, #111	; 0x6f
   27858:	483f      	ldr	r0, [pc, #252]	; (27958 <_printf_i+0x254>)
   2785a:	bf14      	ite	ne
   2785c:	230a      	movne	r3, #10
   2785e:	2308      	moveq	r3, #8
   27860:	2100      	movs	r1, #0
   27862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   27866:	6866      	ldr	r6, [r4, #4]
   27868:	2e00      	cmp	r6, #0
   2786a:	60a6      	str	r6, [r4, #8]
   2786c:	dbb9      	blt.n	277e2 <_printf_i+0xde>
   2786e:	6821      	ldr	r1, [r4, #0]
   27870:	f021 0104 	bic.w	r1, r1, #4
   27874:	6021      	str	r1, [r4, #0]
   27876:	2d00      	cmp	r5, #0
   27878:	d1b3      	bne.n	277e2 <_printf_i+0xde>
   2787a:	2e00      	cmp	r6, #0
   2787c:	d1b1      	bne.n	277e2 <_printf_i+0xde>
   2787e:	4616      	mov	r6, r2
   27880:	e7bb      	b.n	277fa <_printf_i+0xf6>
   27882:	6823      	ldr	r3, [r4, #0]
   27884:	f043 0320 	orr.w	r3, r3, #32
   27888:	6023      	str	r3, [r4, #0]
   2788a:	2778      	movs	r7, #120	; 0x78
   2788c:	4833      	ldr	r0, [pc, #204]	; (2795c <_printf_i+0x258>)
   2788e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   27892:	6829      	ldr	r1, [r5, #0]
   27894:	6823      	ldr	r3, [r4, #0]
   27896:	1d0e      	adds	r6, r1, #4
   27898:	602e      	str	r6, [r5, #0]
   2789a:	061e      	lsls	r6, r3, #24
   2789c:	d503      	bpl.n	278a6 <_printf_i+0x1a2>
   2789e:	680d      	ldr	r5, [r1, #0]
   278a0:	e004      	b.n	278ac <_printf_i+0x1a8>
   278a2:	482d      	ldr	r0, [pc, #180]	; (27958 <_printf_i+0x254>)
   278a4:	e7f3      	b.n	2788e <_printf_i+0x18a>
   278a6:	065d      	lsls	r5, r3, #25
   278a8:	d5f9      	bpl.n	2789e <_printf_i+0x19a>
   278aa:	880d      	ldrh	r5, [r1, #0]
   278ac:	07d9      	lsls	r1, r3, #31
   278ae:	bf44      	itt	mi
   278b0:	f043 0320 	orrmi.w	r3, r3, #32
   278b4:	6023      	strmi	r3, [r4, #0]
   278b6:	b10d      	cbz	r5, 278bc <_printf_i+0x1b8>
   278b8:	2310      	movs	r3, #16
   278ba:	e7d1      	b.n	27860 <_printf_i+0x15c>
   278bc:	6823      	ldr	r3, [r4, #0]
   278be:	f023 0320 	bic.w	r3, r3, #32
   278c2:	6023      	str	r3, [r4, #0]
   278c4:	e7f8      	b.n	278b8 <_printf_i+0x1b4>
   278c6:	4824      	ldr	r0, [pc, #144]	; (27958 <_printf_i+0x254>)
   278c8:	230a      	movs	r3, #10
   278ca:	e7cc      	b.n	27866 <_printf_i+0x162>
   278cc:	682b      	ldr	r3, [r5, #0]
   278ce:	6826      	ldr	r6, [r4, #0]
   278d0:	1d18      	adds	r0, r3, #4
   278d2:	6961      	ldr	r1, [r4, #20]
   278d4:	6028      	str	r0, [r5, #0]
   278d6:	0635      	lsls	r5, r6, #24
   278d8:	681b      	ldr	r3, [r3, #0]
   278da:	d501      	bpl.n	278e0 <_printf_i+0x1dc>
   278dc:	6019      	str	r1, [r3, #0]
   278de:	e002      	b.n	278e6 <_printf_i+0x1e2>
   278e0:	0670      	lsls	r0, r6, #25
   278e2:	d5fb      	bpl.n	278dc <_printf_i+0x1d8>
   278e4:	8019      	strh	r1, [r3, #0]
   278e6:	2300      	movs	r3, #0
   278e8:	4616      	mov	r6, r2
   278ea:	6123      	str	r3, [r4, #16]
   278ec:	e795      	b.n	2781a <_printf_i+0x116>
   278ee:	682b      	ldr	r3, [r5, #0]
   278f0:	2100      	movs	r1, #0
   278f2:	1d1a      	adds	r2, r3, #4
   278f4:	602a      	str	r2, [r5, #0]
   278f6:	681e      	ldr	r6, [r3, #0]
   278f8:	6862      	ldr	r2, [r4, #4]
   278fa:	4630      	mov	r0, r6
   278fc:	f00a fbf1 	bl	320e2 <memchr>
   27900:	b108      	cbz	r0, 27906 <_printf_i+0x202>
   27902:	1b80      	subs	r0, r0, r6
   27904:	6060      	str	r0, [r4, #4]
   27906:	6863      	ldr	r3, [r4, #4]
   27908:	6123      	str	r3, [r4, #16]
   2790a:	2300      	movs	r3, #0
   2790c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27910:	e783      	b.n	2781a <_printf_i+0x116>
   27912:	6923      	ldr	r3, [r4, #16]
   27914:	4632      	mov	r2, r6
   27916:	4649      	mov	r1, r9
   27918:	4640      	mov	r0, r8
   2791a:	47d0      	blx	sl
   2791c:	3001      	adds	r0, #1
   2791e:	d086      	beq.n	2782e <_printf_i+0x12a>
   27920:	6823      	ldr	r3, [r4, #0]
   27922:	079b      	lsls	r3, r3, #30
   27924:	d414      	bmi.n	27950 <_printf_i+0x24c>
   27926:	68e0      	ldr	r0, [r4, #12]
   27928:	9b03      	ldr	r3, [sp, #12]
   2792a:	4298      	cmp	r0, r3
   2792c:	bfb8      	it	lt
   2792e:	4618      	movlt	r0, r3
   27930:	e77f      	b.n	27832 <_printf_i+0x12e>
   27932:	2301      	movs	r3, #1
   27934:	4632      	mov	r2, r6
   27936:	4649      	mov	r1, r9
   27938:	4640      	mov	r0, r8
   2793a:	47d0      	blx	sl
   2793c:	3001      	adds	r0, #1
   2793e:	f43f af76 	beq.w	2782e <_printf_i+0x12a>
   27942:	3501      	adds	r5, #1
   27944:	68e3      	ldr	r3, [r4, #12]
   27946:	9903      	ldr	r1, [sp, #12]
   27948:	1a5b      	subs	r3, r3, r1
   2794a:	42ab      	cmp	r3, r5
   2794c:	dcf1      	bgt.n	27932 <_printf_i+0x22e>
   2794e:	e7ea      	b.n	27926 <_printf_i+0x222>
   27950:	2500      	movs	r5, #0
   27952:	f104 0619 	add.w	r6, r4, #25
   27956:	e7f5      	b.n	27944 <_printf_i+0x240>
   27958:	0003886b 	.word	0x0003886b
   2795c:	0003887c 	.word	0x0003887c

00027960 <iprintf>:
   27960:	b40f      	push	{r0, r1, r2, r3}
   27962:	4b0a      	ldr	r3, [pc, #40]	; (2798c <iprintf+0x2c>)
   27964:	b513      	push	{r0, r1, r4, lr}
   27966:	681c      	ldr	r4, [r3, #0]
   27968:	b124      	cbz	r4, 27974 <iprintf+0x14>
   2796a:	69a3      	ldr	r3, [r4, #24]
   2796c:	b913      	cbnz	r3, 27974 <iprintf+0x14>
   2796e:	4620      	mov	r0, r4
   27970:	f000 fc38 	bl	281e4 <__sinit>
   27974:	ab05      	add	r3, sp, #20
   27976:	9a04      	ldr	r2, [sp, #16]
   27978:	68a1      	ldr	r1, [r4, #8]
   2797a:	4620      	mov	r0, r4
   2797c:	9301      	str	r3, [sp, #4]
   2797e:	f001 fc0f 	bl	291a0 <_vfiprintf_r>
   27982:	b002      	add	sp, #8
   27984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27988:	b004      	add	sp, #16
   2798a:	4770      	bx	lr
   2798c:	200087f8 	.word	0x200087f8

00027990 <_sbrk_r>:
   27990:	b538      	push	{r3, r4, r5, lr}
   27992:	2300      	movs	r3, #0
   27994:	4d05      	ldr	r5, [pc, #20]	; (279ac <_sbrk_r+0x1c>)
   27996:	4604      	mov	r4, r0
   27998:	4608      	mov	r0, r1
   2799a:	602b      	str	r3, [r5, #0]
   2799c:	f7ea fa86 	bl	11eac <_sbrk>
   279a0:	1c43      	adds	r3, r0, #1
   279a2:	d102      	bne.n	279aa <_sbrk_r+0x1a>
   279a4:	682b      	ldr	r3, [r5, #0]
   279a6:	b103      	cbz	r3, 279aa <_sbrk_r+0x1a>
   279a8:	6023      	str	r3, [r4, #0]
   279aa:	bd38      	pop	{r3, r4, r5, pc}
   279ac:	20030ea4 	.word	0x20030ea4

000279b0 <strtod>:
   279b0:	460a      	mov	r2, r1
   279b2:	4601      	mov	r1, r0
   279b4:	4802      	ldr	r0, [pc, #8]	; (279c0 <strtod+0x10>)
   279b6:	4b03      	ldr	r3, [pc, #12]	; (279c4 <strtod+0x14>)
   279b8:	6800      	ldr	r0, [r0, #0]
   279ba:	f7e2 ba35 	b.w	9e28 <_strtod_l>
   279be:	bf00      	nop
   279c0:	200087f8 	.word	0x200087f8
   279c4:	20008864 	.word	0x20008864

000279c8 <strtok>:
   279c8:	4b16      	ldr	r3, [pc, #88]	; (27a24 <strtok+0x5c>)
   279ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279ce:	681f      	ldr	r7, [r3, #0]
   279d0:	4605      	mov	r5, r0
   279d2:	460e      	mov	r6, r1
   279d4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   279d6:	b9ec      	cbnz	r4, 27a14 <strtok+0x4c>
   279d8:	2050      	movs	r0, #80	; 0x50
   279da:	f7ff f939 	bl	26c50 <malloc>
   279de:	4602      	mov	r2, r0
   279e0:	65b8      	str	r0, [r7, #88]	; 0x58
   279e2:	b920      	cbnz	r0, 279ee <strtok+0x26>
   279e4:	4b10      	ldr	r3, [pc, #64]	; (27a28 <strtok+0x60>)
   279e6:	2157      	movs	r1, #87	; 0x57
   279e8:	4810      	ldr	r0, [pc, #64]	; (27a2c <strtok+0x64>)
   279ea:	f000 fb9b 	bl	28124 <__assert_func>
   279ee:	e9c0 4400 	strd	r4, r4, [r0]
   279f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   279f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
   279fa:	6184      	str	r4, [r0, #24]
   279fc:	7704      	strb	r4, [r0, #28]
   279fe:	6244      	str	r4, [r0, #36]	; 0x24
   27a00:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   27a04:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   27a08:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   27a0c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   27a10:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   27a14:	6dba      	ldr	r2, [r7, #88]	; 0x58
   27a16:	4631      	mov	r1, r6
   27a18:	4628      	mov	r0, r5
   27a1a:	2301      	movs	r3, #1
   27a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27a20:	f00a b8fe 	b.w	31c20 <__strtok_r>
   27a24:	200087f8 	.word	0x200087f8
   27a28:	0003888d 	.word	0x0003888d
   27a2c:	000388a4 	.word	0x000388a4

00027a30 <_strtol_l.constprop.0>:
   27a30:	2b24      	cmp	r3, #36	; 0x24
   27a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27a36:	4686      	mov	lr, r0
   27a38:	4690      	mov	r8, r2
   27a3a:	d801      	bhi.n	27a40 <_strtol_l.constprop.0+0x10>
   27a3c:	2b01      	cmp	r3, #1
   27a3e:	d106      	bne.n	27a4e <_strtol_l.constprop.0+0x1e>
   27a40:	f003 ffd3 	bl	2b9ea <__errno>
   27a44:	2316      	movs	r3, #22
   27a46:	6003      	str	r3, [r0, #0]
   27a48:	2000      	movs	r0, #0
   27a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27a4e:	460d      	mov	r5, r1
   27a50:	4835      	ldr	r0, [pc, #212]	; (27b28 <_strtol_l.constprop.0+0xf8>)
   27a52:	462a      	mov	r2, r5
   27a54:	f815 4b01 	ldrb.w	r4, [r5], #1
   27a58:	5d06      	ldrb	r6, [r0, r4]
   27a5a:	f016 0608 	ands.w	r6, r6, #8
   27a5e:	d1f8      	bne.n	27a52 <_strtol_l.constprop.0+0x22>
   27a60:	2c2d      	cmp	r4, #45	; 0x2d
   27a62:	d124      	bne.n	27aae <_strtol_l.constprop.0+0x7e>
   27a64:	782c      	ldrb	r4, [r5, #0]
   27a66:	2601      	movs	r6, #1
   27a68:	1c95      	adds	r5, r2, #2
   27a6a:	bb2b      	cbnz	r3, 27ab8 <_strtol_l.constprop.0+0x88>
   27a6c:	2c30      	cmp	r4, #48	; 0x30
   27a6e:	d030      	beq.n	27ad2 <_strtol_l.constprop.0+0xa2>
   27a70:	230a      	movs	r3, #10
   27a72:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   27a76:	2200      	movs	r2, #0
   27a78:	f10c 3cff 	add.w	ip, ip, #4294967295
   27a7c:	4610      	mov	r0, r2
   27a7e:	fbbc f9f3 	udiv	r9, ip, r3
   27a82:	fb03 ca19 	mls	sl, r3, r9, ip
   27a86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   27a8a:	2f09      	cmp	r7, #9
   27a8c:	d828      	bhi.n	27ae0 <_strtol_l.constprop.0+0xb0>
   27a8e:	463c      	mov	r4, r7
   27a90:	42a3      	cmp	r3, r4
   27a92:	dd34      	ble.n	27afe <_strtol_l.constprop.0+0xce>
   27a94:	1c57      	adds	r7, r2, #1
   27a96:	d007      	beq.n	27aa8 <_strtol_l.constprop.0+0x78>
   27a98:	4581      	cmp	r9, r0
   27a9a:	d32d      	bcc.n	27af8 <_strtol_l.constprop.0+0xc8>
   27a9c:	d101      	bne.n	27aa2 <_strtol_l.constprop.0+0x72>
   27a9e:	45a2      	cmp	sl, r4
   27aa0:	db2a      	blt.n	27af8 <_strtol_l.constprop.0+0xc8>
   27aa2:	fb00 4003 	mla	r0, r0, r3, r4
   27aa6:	2201      	movs	r2, #1
   27aa8:	f815 4b01 	ldrb.w	r4, [r5], #1
   27aac:	e7eb      	b.n	27a86 <_strtol_l.constprop.0+0x56>
   27aae:	2c2b      	cmp	r4, #43	; 0x2b
   27ab0:	bf04      	itt	eq
   27ab2:	782c      	ldrbeq	r4, [r5, #0]
   27ab4:	1c95      	addeq	r5, r2, #2
   27ab6:	e7d8      	b.n	27a6a <_strtol_l.constprop.0+0x3a>
   27ab8:	2b10      	cmp	r3, #16
   27aba:	d1da      	bne.n	27a72 <_strtol_l.constprop.0+0x42>
   27abc:	2c30      	cmp	r4, #48	; 0x30
   27abe:	d1d8      	bne.n	27a72 <_strtol_l.constprop.0+0x42>
   27ac0:	782a      	ldrb	r2, [r5, #0]
   27ac2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   27ac6:	2a58      	cmp	r2, #88	; 0x58
   27ac8:	d1d3      	bne.n	27a72 <_strtol_l.constprop.0+0x42>
   27aca:	786c      	ldrb	r4, [r5, #1]
   27acc:	2310      	movs	r3, #16
   27ace:	3502      	adds	r5, #2
   27ad0:	e7cf      	b.n	27a72 <_strtol_l.constprop.0+0x42>
   27ad2:	782b      	ldrb	r3, [r5, #0]
   27ad4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27ad8:	2b58      	cmp	r3, #88	; 0x58
   27ada:	d0f6      	beq.n	27aca <_strtol_l.constprop.0+0x9a>
   27adc:	2308      	movs	r3, #8
   27ade:	e7c8      	b.n	27a72 <_strtol_l.constprop.0+0x42>
   27ae0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   27ae4:	2f19      	cmp	r7, #25
   27ae6:	d801      	bhi.n	27aec <_strtol_l.constprop.0+0xbc>
   27ae8:	3c37      	subs	r4, #55	; 0x37
   27aea:	e7d1      	b.n	27a90 <_strtol_l.constprop.0+0x60>
   27aec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   27af0:	2f19      	cmp	r7, #25
   27af2:	d804      	bhi.n	27afe <_strtol_l.constprop.0+0xce>
   27af4:	3c57      	subs	r4, #87	; 0x57
   27af6:	e7cb      	b.n	27a90 <_strtol_l.constprop.0+0x60>
   27af8:	f04f 32ff 	mov.w	r2, #4294967295
   27afc:	e7d4      	b.n	27aa8 <_strtol_l.constprop.0+0x78>
   27afe:	1c53      	adds	r3, r2, #1
   27b00:	d108      	bne.n	27b14 <_strtol_l.constprop.0+0xe4>
   27b02:	2322      	movs	r3, #34	; 0x22
   27b04:	4660      	mov	r0, ip
   27b06:	f8ce 3000 	str.w	r3, [lr]
   27b0a:	f1b8 0f00 	cmp.w	r8, #0
   27b0e:	d09c      	beq.n	27a4a <_strtol_l.constprop.0+0x1a>
   27b10:	1e69      	subs	r1, r5, #1
   27b12:	e006      	b.n	27b22 <_strtol_l.constprop.0+0xf2>
   27b14:	b106      	cbz	r6, 27b18 <_strtol_l.constprop.0+0xe8>
   27b16:	4240      	negs	r0, r0
   27b18:	f1b8 0f00 	cmp.w	r8, #0
   27b1c:	d095      	beq.n	27a4a <_strtol_l.constprop.0+0x1a>
   27b1e:	2a00      	cmp	r2, #0
   27b20:	d1f6      	bne.n	27b10 <_strtol_l.constprop.0+0xe0>
   27b22:	f8c8 1000 	str.w	r1, [r8]
   27b26:	e790      	b.n	27a4a <_strtol_l.constprop.0+0x1a>
   27b28:	0003875f 	.word	0x0003875f

00027b2c <strtol>:
   27b2c:	4613      	mov	r3, r2
   27b2e:	460a      	mov	r2, r1
   27b30:	4601      	mov	r1, r0
   27b32:	4802      	ldr	r0, [pc, #8]	; (27b3c <strtol+0x10>)
   27b34:	6800      	ldr	r0, [r0, #0]
   27b36:	f7ff bf7b 	b.w	27a30 <_strtol_l.constprop.0>
   27b3a:	bf00      	nop
   27b3c:	200087f8 	.word	0x200087f8

00027b40 <_strtoul_l.constprop.0>:
   27b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b44:	4686      	mov	lr, r0
   27b46:	460d      	mov	r5, r1
   27b48:	4e35      	ldr	r6, [pc, #212]	; (27c20 <_strtoul_l.constprop.0+0xe0>)
   27b4a:	4628      	mov	r0, r5
   27b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
   27b50:	5d37      	ldrb	r7, [r6, r4]
   27b52:	f017 0708 	ands.w	r7, r7, #8
   27b56:	d1f8      	bne.n	27b4a <_strtoul_l.constprop.0+0xa>
   27b58:	2c2d      	cmp	r4, #45	; 0x2d
   27b5a:	d126      	bne.n	27baa <_strtoul_l.constprop.0+0x6a>
   27b5c:	782c      	ldrb	r4, [r5, #0]
   27b5e:	2701      	movs	r7, #1
   27b60:	1c85      	adds	r5, r0, #2
   27b62:	bb3b      	cbnz	r3, 27bb4 <_strtoul_l.constprop.0+0x74>
   27b64:	2c30      	cmp	r4, #48	; 0x30
   27b66:	d032      	beq.n	27bce <_strtoul_l.constprop.0+0x8e>
   27b68:	230a      	movs	r3, #10
   27b6a:	f04f 38ff 	mov.w	r8, #4294967295
   27b6e:	2600      	movs	r6, #0
   27b70:	fbb8 f8f3 	udiv	r8, r8, r3
   27b74:	fb03 f908 	mul.w	r9, r3, r8
   27b78:	4630      	mov	r0, r6
   27b7a:	ea6f 0909 	mvn.w	r9, r9
   27b7e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   27b82:	f1bc 0f09 	cmp.w	ip, #9
   27b86:	d829      	bhi.n	27bdc <_strtoul_l.constprop.0+0x9c>
   27b88:	4664      	mov	r4, ip
   27b8a:	42a3      	cmp	r3, r4
   27b8c:	dd37      	ble.n	27bfe <_strtoul_l.constprop.0+0xbe>
   27b8e:	f1b6 3fff 	cmp.w	r6, #4294967295
   27b92:	d007      	beq.n	27ba4 <_strtoul_l.constprop.0+0x64>
   27b94:	4580      	cmp	r8, r0
   27b96:	d32f      	bcc.n	27bf8 <_strtoul_l.constprop.0+0xb8>
   27b98:	d101      	bne.n	27b9e <_strtoul_l.constprop.0+0x5e>
   27b9a:	45a1      	cmp	r9, r4
   27b9c:	db2c      	blt.n	27bf8 <_strtoul_l.constprop.0+0xb8>
   27b9e:	fb00 4003 	mla	r0, r0, r3, r4
   27ba2:	2601      	movs	r6, #1
   27ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
   27ba8:	e7e9      	b.n	27b7e <_strtoul_l.constprop.0+0x3e>
   27baa:	2c2b      	cmp	r4, #43	; 0x2b
   27bac:	bf04      	itt	eq
   27bae:	782c      	ldrbeq	r4, [r5, #0]
   27bb0:	1c85      	addeq	r5, r0, #2
   27bb2:	e7d6      	b.n	27b62 <_strtoul_l.constprop.0+0x22>
   27bb4:	2b10      	cmp	r3, #16
   27bb6:	d1d8      	bne.n	27b6a <_strtoul_l.constprop.0+0x2a>
   27bb8:	2c30      	cmp	r4, #48	; 0x30
   27bba:	d1d6      	bne.n	27b6a <_strtoul_l.constprop.0+0x2a>
   27bbc:	7828      	ldrb	r0, [r5, #0]
   27bbe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   27bc2:	2858      	cmp	r0, #88	; 0x58
   27bc4:	d1d1      	bne.n	27b6a <_strtoul_l.constprop.0+0x2a>
   27bc6:	786c      	ldrb	r4, [r5, #1]
   27bc8:	2310      	movs	r3, #16
   27bca:	3502      	adds	r5, #2
   27bcc:	e7cd      	b.n	27b6a <_strtoul_l.constprop.0+0x2a>
   27bce:	782b      	ldrb	r3, [r5, #0]
   27bd0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27bd4:	2b58      	cmp	r3, #88	; 0x58
   27bd6:	d0f6      	beq.n	27bc6 <_strtoul_l.constprop.0+0x86>
   27bd8:	2308      	movs	r3, #8
   27bda:	e7c6      	b.n	27b6a <_strtoul_l.constprop.0+0x2a>
   27bdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   27be0:	f1bc 0f19 	cmp.w	ip, #25
   27be4:	d801      	bhi.n	27bea <_strtoul_l.constprop.0+0xaa>
   27be6:	3c37      	subs	r4, #55	; 0x37
   27be8:	e7cf      	b.n	27b8a <_strtoul_l.constprop.0+0x4a>
   27bea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   27bee:	f1bc 0f19 	cmp.w	ip, #25
   27bf2:	d804      	bhi.n	27bfe <_strtoul_l.constprop.0+0xbe>
   27bf4:	3c57      	subs	r4, #87	; 0x57
   27bf6:	e7c8      	b.n	27b8a <_strtoul_l.constprop.0+0x4a>
   27bf8:	f04f 36ff 	mov.w	r6, #4294967295
   27bfc:	e7d2      	b.n	27ba4 <_strtoul_l.constprop.0+0x64>
   27bfe:	1c73      	adds	r3, r6, #1
   27c00:	d106      	bne.n	27c10 <_strtoul_l.constprop.0+0xd0>
   27c02:	2322      	movs	r3, #34	; 0x22
   27c04:	4630      	mov	r0, r6
   27c06:	f8ce 3000 	str.w	r3, [lr]
   27c0a:	b932      	cbnz	r2, 27c1a <_strtoul_l.constprop.0+0xda>
   27c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27c10:	b107      	cbz	r7, 27c14 <_strtoul_l.constprop.0+0xd4>
   27c12:	4240      	negs	r0, r0
   27c14:	2a00      	cmp	r2, #0
   27c16:	d0f9      	beq.n	27c0c <_strtoul_l.constprop.0+0xcc>
   27c18:	b106      	cbz	r6, 27c1c <_strtoul_l.constprop.0+0xdc>
   27c1a:	1e69      	subs	r1, r5, #1
   27c1c:	6011      	str	r1, [r2, #0]
   27c1e:	e7f5      	b.n	27c0c <_strtoul_l.constprop.0+0xcc>
   27c20:	0003875f 	.word	0x0003875f

00027c24 <strtoul>:
   27c24:	4613      	mov	r3, r2
   27c26:	460a      	mov	r2, r1
   27c28:	4601      	mov	r1, r0
   27c2a:	4802      	ldr	r0, [pc, #8]	; (27c34 <strtoul+0x10>)
   27c2c:	6800      	ldr	r0, [r0, #0]
   27c2e:	f7ff bf87 	b.w	27b40 <_strtoul_l.constprop.0>
   27c32:	bf00      	nop
   27c34:	200087f8 	.word	0x200087f8

00027c38 <__tzcalc_limits>:
   27c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27c3c:	4604      	mov	r4, r0
   27c3e:	f000 fdcd 	bl	287dc <__gettzinfo>
   27c42:	f240 73b1 	movw	r3, #1969	; 0x7b1
   27c46:	429c      	cmp	r4, r3
   27c48:	f340 8098 	ble.w	27d7c <__tzcalc_limits+0x144>
   27c4c:	f46f 67f6 	mvn.w	r7, #1968	; 0x7b0
   27c50:	f2a4 73b2 	subw	r3, r4, #1970	; 0x7b2
   27c54:	f240 126d 	movw	r2, #365	; 0x16d
   27c58:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   27c5c:	19e5      	adds	r5, r4, r7
   27c5e:	4601      	mov	r1, r0
   27c60:	f100 0750 	add.w	r7, r0, #80	; 0x50
   27c64:	6044      	str	r4, [r0, #4]
   27c66:	10ad      	asrs	r5, r5, #2
   27c68:	fb02 5503 	mla	r5, r2, r3, r5
   27c6c:	f06f 0263 	mvn.w	r2, #99	; 0x63
   27c70:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
   27c74:	fb93 f3f2 	sdiv	r3, r3, r2
   27c78:	f44f 72c8 	mov.w	r2, #400	; 0x190
   27c7c:	441d      	add	r5, r3
   27c7e:	eb04 030c 	add.w	r3, r4, ip
   27c82:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 27d80 <__tzcalc_limits+0x148>
   27c86:	fbb3 f3f2 	udiv	r3, r3, r2
   27c8a:	441d      	add	r5, r3
   27c8c:	7a0b      	ldrb	r3, [r1, #8]
   27c8e:	694a      	ldr	r2, [r1, #20]
   27c90:	2b4a      	cmp	r3, #74	; 0x4a
   27c92:	d131      	bne.n	27cf8 <__tzcalc_limits+0xc0>
   27c94:	07a6      	lsls	r6, r4, #30
   27c96:	eb05 0302 	add.w	r3, r5, r2
   27c9a:	d106      	bne.n	27caa <__tzcalc_limits+0x72>
   27c9c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   27ca0:	fb94 f6fe 	sdiv	r6, r4, lr
   27ca4:	fb0e 4616 	mls	r6, lr, r6, r4
   27ca8:	b936      	cbnz	r6, 27cb8 <__tzcalc_limits+0x80>
   27caa:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   27cae:	fb94 f6fe 	sdiv	r6, r4, lr
   27cb2:	fb0e 4616 	mls	r6, lr, r6, r4
   27cb6:	b9ee      	cbnz	r6, 27cf4 <__tzcalc_limits+0xbc>
   27cb8:	2a3b      	cmp	r2, #59	; 0x3b
   27cba:	bfd4      	ite	le
   27cbc:	2200      	movle	r2, #0
   27cbe:	2201      	movgt	r2, #1
   27cc0:	4413      	add	r3, r2
   27cc2:	3b01      	subs	r3, #1
   27cc4:	698a      	ldr	r2, [r1, #24]
   27cc6:	fb0c 2303 	mla	r3, ip, r3, r2
   27cca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   27ccc:	4413      	add	r3, r2
   27cce:	17da      	asrs	r2, r3, #31
   27cd0:	e9c1 3208 	strd	r3, r2, [r1, #32]
   27cd4:	3128      	adds	r1, #40	; 0x28
   27cd6:	428f      	cmp	r7, r1
   27cd8:	d1d8      	bne.n	27c8c <__tzcalc_limits+0x54>
   27cda:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
   27cde:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
   27ce2:	428c      	cmp	r4, r1
   27ce4:	4193      	sbcs	r3, r2
   27ce6:	bfb4      	ite	lt
   27ce8:	2301      	movlt	r3, #1
   27cea:	2300      	movge	r3, #0
   27cec:	6003      	str	r3, [r0, #0]
   27cee:	2001      	movs	r0, #1
   27cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27cf4:	2200      	movs	r2, #0
   27cf6:	e7e3      	b.n	27cc0 <__tzcalc_limits+0x88>
   27cf8:	2b44      	cmp	r3, #68	; 0x44
   27cfa:	d101      	bne.n	27d00 <__tzcalc_limits+0xc8>
   27cfc:	18ab      	adds	r3, r5, r2
   27cfe:	e7e1      	b.n	27cc4 <__tzcalc_limits+0x8c>
   27d00:	07a3      	lsls	r3, r4, #30
   27d02:	d105      	bne.n	27d10 <__tzcalc_limits+0xd8>
   27d04:	2664      	movs	r6, #100	; 0x64
   27d06:	fb94 f3f6 	sdiv	r3, r4, r6
   27d0a:	fb06 4313 	mls	r3, r6, r3, r4
   27d0e:	bb7b      	cbnz	r3, 27d70 <__tzcalc_limits+0x138>
   27d10:	f44f 73c8 	mov.w	r3, #400	; 0x190
   27d14:	fb94 f6f3 	sdiv	r6, r4, r3
   27d18:	fb03 4616 	mls	r6, r3, r6, r4
   27d1c:	fab6 f686 	clz	r6, r6
   27d20:	0976      	lsrs	r6, r6, #5
   27d22:	f04f 0a30 	mov.w	sl, #48	; 0x30
   27d26:	f8df e05c 	ldr.w	lr, [pc, #92]	; 27d84 <__tzcalc_limits+0x14c>
   27d2a:	f8d1 900c 	ldr.w	r9, [r1, #12]
   27d2e:	462b      	mov	r3, r5
   27d30:	f04f 0800 	mov.w	r8, #0
   27d34:	fb0a e606 	mla	r6, sl, r6, lr
   27d38:	f108 0801 	add.w	r8, r8, #1
   27d3c:	45c1      	cmp	r9, r8
   27d3e:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
   27d42:	dc17      	bgt.n	27d74 <__tzcalc_limits+0x13c>
   27d44:	f103 0804 	add.w	r8, r3, #4
   27d48:	2607      	movs	r6, #7
   27d4a:	fb98 f6f6 	sdiv	r6, r8, r6
   27d4e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   27d52:	eba8 0606 	sub.w	r6, r8, r6
   27d56:	1b92      	subs	r2, r2, r6
   27d58:	690e      	ldr	r6, [r1, #16]
   27d5a:	f106 36ff 	add.w	r6, r6, #4294967295
   27d5e:	bf48      	it	mi
   27d60:	3207      	addmi	r2, #7
   27d62:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   27d66:	4432      	add	r2, r6
   27d68:	4572      	cmp	r2, lr
   27d6a:	da05      	bge.n	27d78 <__tzcalc_limits+0x140>
   27d6c:	4413      	add	r3, r2
   27d6e:	e7a9      	b.n	27cc4 <__tzcalc_limits+0x8c>
   27d70:	2601      	movs	r6, #1
   27d72:	e7d6      	b.n	27d22 <__tzcalc_limits+0xea>
   27d74:	4473      	add	r3, lr
   27d76:	e7df      	b.n	27d38 <__tzcalc_limits+0x100>
   27d78:	3a07      	subs	r2, #7
   27d7a:	e7f5      	b.n	27d68 <__tzcalc_limits+0x130>
   27d7c:	2000      	movs	r0, #0
   27d7e:	e7b7      	b.n	27cf0 <__tzcalc_limits+0xb8>
   27d80:	00015180 	.word	0x00015180
   27d84:	00034310 	.word	0x00034310

00027d88 <__tz_lock>:
   27d88:	4801      	ldr	r0, [pc, #4]	; (27d90 <__tz_lock+0x8>)
   27d8a:	f003 be1e 	b.w	2b9ca <__retarget_lock_acquire>
   27d8e:	bf00      	nop
   27d90:	20008c40 	.word	0x20008c40

00027d94 <__tz_unlock>:
   27d94:	4801      	ldr	r0, [pc, #4]	; (27d9c <__tz_unlock+0x8>)
   27d96:	f003 be24 	b.w	2b9e2 <__retarget_lock_release>
   27d9a:	bf00      	nop
   27d9c:	20008c40 	.word	0x20008c40

00027da0 <_tzset_unlocked>:
   27da0:	4b01      	ldr	r3, [pc, #4]	; (27da8 <_tzset_unlocked+0x8>)
   27da2:	6818      	ldr	r0, [r3, #0]
   27da4:	f000 b802 	b.w	27dac <_tzset_unlocked_r>
   27da8:	200087f8 	.word	0x200087f8

00027dac <_tzset_unlocked_r>:
   27dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27db0:	4607      	mov	r7, r0
   27db2:	b08d      	sub	sp, #52	; 0x34
   27db4:	f000 fd12 	bl	287dc <__gettzinfo>
   27db8:	49b7      	ldr	r1, [pc, #732]	; (28098 <_tzset_unlocked_r+0x2ec>)
   27dba:	4604      	mov	r4, r0
   27dbc:	4638      	mov	r0, r7
   27dbe:	f00a f977 	bl	320b0 <_getenv_r>
   27dc2:	4eb6      	ldr	r6, [pc, #728]	; (2809c <_tzset_unlocked_r+0x2f0>)
   27dc4:	4605      	mov	r5, r0
   27dc6:	b970      	cbnz	r0, 27de6 <_tzset_unlocked_r+0x3a>
   27dc8:	4bb5      	ldr	r3, [pc, #724]	; (280a0 <_tzset_unlocked_r+0x2f4>)
   27dca:	4ab6      	ldr	r2, [pc, #728]	; (280a4 <_tzset_unlocked_r+0x2f8>)
   27dcc:	6018      	str	r0, [r3, #0]
   27dce:	4bb6      	ldr	r3, [pc, #728]	; (280a8 <_tzset_unlocked_r+0x2fc>)
   27dd0:	6018      	str	r0, [r3, #0]
   27dd2:	4bb6      	ldr	r3, [pc, #728]	; (280ac <_tzset_unlocked_r+0x300>)
   27dd4:	6830      	ldr	r0, [r6, #0]
   27dd6:	e9c3 2200 	strd	r2, r2, [r3]
   27dda:	f7fe ff41 	bl	26c60 <free>
   27dde:	6035      	str	r5, [r6, #0]
   27de0:	b00d      	add	sp, #52	; 0x34
   27de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27de6:	6831      	ldr	r1, [r6, #0]
   27de8:	2900      	cmp	r1, #0
   27dea:	d164      	bne.n	27eb6 <_tzset_unlocked_r+0x10a>
   27dec:	6830      	ldr	r0, [r6, #0]
   27dee:	f7fe ff37 	bl	26c60 <free>
   27df2:	4628      	mov	r0, r5
   27df4:	f7e1 fb09 	bl	940a <strlen>
   27df8:	1c41      	adds	r1, r0, #1
   27dfa:	4638      	mov	r0, r7
   27dfc:	f7ff f9f2 	bl	271e4 <_malloc_r>
   27e00:	6030      	str	r0, [r6, #0]
   27e02:	2800      	cmp	r0, #0
   27e04:	d15c      	bne.n	27ec0 <_tzset_unlocked_r+0x114>
   27e06:	782b      	ldrb	r3, [r5, #0]
   27e08:	ae0a      	add	r6, sp, #40	; 0x28
   27e0a:	4aa9      	ldr	r2, [pc, #676]	; (280b0 <_tzset_unlocked_r+0x304>)
   27e0c:	2b3a      	cmp	r3, #58	; 0x3a
   27e0e:	49a9      	ldr	r1, [pc, #676]	; (280b4 <_tzset_unlocked_r+0x308>)
   27e10:	4633      	mov	r3, r6
   27e12:	bf08      	it	eq
   27e14:	3501      	addeq	r5, #1
   27e16:	4628      	mov	r0, r5
   27e18:	f001 faee 	bl	293f8 <siscanf>
   27e1c:	2800      	cmp	r0, #0
   27e1e:	dddf      	ble.n	27de0 <_tzset_unlocked_r+0x34>
   27e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27e22:	eb05 0903 	add.w	r9, r5, r3
   27e26:	5ceb      	ldrb	r3, [r5, r3]
   27e28:	2b2d      	cmp	r3, #45	; 0x2d
   27e2a:	d14d      	bne.n	27ec8 <_tzset_unlocked_r+0x11c>
   27e2c:	f109 0901 	add.w	r9, r9, #1
   27e30:	f04f 3aff 	mov.w	sl, #4294967295
   27e34:	af08      	add	r7, sp, #32
   27e36:	f10d 081e 	add.w	r8, sp, #30
   27e3a:	2500      	movs	r5, #0
   27e3c:	4633      	mov	r3, r6
   27e3e:	aa07      	add	r2, sp, #28
   27e40:	499d      	ldr	r1, [pc, #628]	; (280b8 <_tzset_unlocked_r+0x30c>)
   27e42:	4648      	mov	r0, r9
   27e44:	9603      	str	r6, [sp, #12]
   27e46:	f8cd 8000 	str.w	r8, [sp]
   27e4a:	f8ad 501e 	strh.w	r5, [sp, #30]
   27e4e:	f8ad 5020 	strh.w	r5, [sp, #32]
   27e52:	e9cd 6701 	strd	r6, r7, [sp, #4]
   27e56:	f001 facf 	bl	293f8 <siscanf>
   27e5a:	42a8      	cmp	r0, r5
   27e5c:	ddc0      	ble.n	27de0 <_tzset_unlocked_r+0x34>
   27e5e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   27e62:	213c      	movs	r1, #60	; 0x3c
   27e64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27e68:	f8df b240 	ldr.w	fp, [pc, #576]	; 280ac <_tzset_unlocked_r+0x300>
   27e6c:	fb01 3302 	mla	r3, r1, r2, r3
   27e70:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   27e74:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   27e78:	fb01 3302 	mla	r3, r1, r2, r3
   27e7c:	498d      	ldr	r1, [pc, #564]	; (280b4 <_tzset_unlocked_r+0x308>)
   27e7e:	fb0a f303 	mul.w	r3, sl, r3
   27e82:	62a3      	str	r3, [r4, #40]	; 0x28
   27e84:	4b8a      	ldr	r3, [pc, #552]	; (280b0 <_tzset_unlocked_r+0x304>)
   27e86:	f8cb 3000 	str.w	r3, [fp]
   27e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27e8c:	eb09 0a03 	add.w	sl, r9, r3
   27e90:	f8df 9228 	ldr.w	r9, [pc, #552]	; 280bc <_tzset_unlocked_r+0x310>
   27e94:	4633      	mov	r3, r6
   27e96:	464a      	mov	r2, r9
   27e98:	4650      	mov	r0, sl
   27e9a:	f001 faad 	bl	293f8 <siscanf>
   27e9e:	42a8      	cmp	r0, r5
   27ea0:	dc19      	bgt.n	27ed6 <_tzset_unlocked_r+0x12a>
   27ea2:	f8db 3000 	ldr.w	r3, [fp]
   27ea6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   27ea8:	f8cb 3004 	str.w	r3, [fp, #4]
   27eac:	4b7c      	ldr	r3, [pc, #496]	; (280a0 <_tzset_unlocked_r+0x2f4>)
   27eae:	601a      	str	r2, [r3, #0]
   27eb0:	4b7d      	ldr	r3, [pc, #500]	; (280a8 <_tzset_unlocked_r+0x2fc>)
   27eb2:	601d      	str	r5, [r3, #0]
   27eb4:	e794      	b.n	27de0 <_tzset_unlocked_r+0x34>
   27eb6:	f7e1 fa9e 	bl	93f6 <strcmp>
   27eba:	2800      	cmp	r0, #0
   27ebc:	d196      	bne.n	27dec <_tzset_unlocked_r+0x40>
   27ebe:	e78f      	b.n	27de0 <_tzset_unlocked_r+0x34>
   27ec0:	4629      	mov	r1, r5
   27ec2:	f009 fe3d 	bl	31b40 <strcpy>
   27ec6:	e79e      	b.n	27e06 <_tzset_unlocked_r+0x5a>
   27ec8:	2b2b      	cmp	r3, #43	; 0x2b
   27eca:	f04f 0a01 	mov.w	sl, #1
   27ece:	bf08      	it	eq
   27ed0:	f109 0901 	addeq.w	r9, r9, #1
   27ed4:	e7ae      	b.n	27e34 <_tzset_unlocked_r+0x88>
   27ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27ed8:	f8cb 9004 	str.w	r9, [fp, #4]
   27edc:	eb0a 0903 	add.w	r9, sl, r3
   27ee0:	f81a 3003 	ldrb.w	r3, [sl, r3]
   27ee4:	2b2d      	cmp	r3, #45	; 0x2d
   27ee6:	f040 808f 	bne.w	28008 <_tzset_unlocked_r+0x25c>
   27eea:	f109 0901 	add.w	r9, r9, #1
   27eee:	f04f 35ff 	mov.w	r5, #4294967295
   27ef2:	2300      	movs	r3, #0
   27ef4:	aa07      	add	r2, sp, #28
   27ef6:	4970      	ldr	r1, [pc, #448]	; (280b8 <_tzset_unlocked_r+0x30c>)
   27ef8:	4648      	mov	r0, r9
   27efa:	f8ad 301c 	strh.w	r3, [sp, #28]
   27efe:	f8ad 301e 	strh.w	r3, [sp, #30]
   27f02:	f8ad 3020 	strh.w	r3, [sp, #32]
   27f06:	930a      	str	r3, [sp, #40]	; 0x28
   27f08:	4633      	mov	r3, r6
   27f0a:	e9cd 7602 	strd	r7, r6, [sp, #8]
   27f0e:	e9cd 8600 	strd	r8, r6, [sp]
   27f12:	f001 fa71 	bl	293f8 <siscanf>
   27f16:	2800      	cmp	r0, #0
   27f18:	dc7d      	bgt.n	28016 <_tzset_unlocked_r+0x26a>
   27f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27f1c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   27f20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   27f22:	f04f 0b00 	mov.w	fp, #0
   27f26:	6523      	str	r3, [r4, #80]	; 0x50
   27f28:	444d      	add	r5, r9
   27f2a:	46a1      	mov	r9, r4
   27f2c:	782b      	ldrb	r3, [r5, #0]
   27f2e:	2b2c      	cmp	r3, #44	; 0x2c
   27f30:	bf08      	it	eq
   27f32:	3501      	addeq	r5, #1
   27f34:	f895 a000 	ldrb.w	sl, [r5]
   27f38:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
   27f3c:	d17d      	bne.n	2803a <_tzset_unlocked_r+0x28e>
   27f3e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   27f42:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   27f46:	495e      	ldr	r1, [pc, #376]	; (280c0 <_tzset_unlocked_r+0x314>)
   27f48:	4628      	mov	r0, r5
   27f4a:	9603      	str	r6, [sp, #12]
   27f4c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   27f50:	ab09      	add	r3, sp, #36	; 0x24
   27f52:	9300      	str	r3, [sp, #0]
   27f54:	4633      	mov	r3, r6
   27f56:	f001 fa4f 	bl	293f8 <siscanf>
   27f5a:	2803      	cmp	r0, #3
   27f5c:	f47f af40 	bne.w	27de0 <_tzset_unlocked_r+0x34>
   27f60:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   27f64:	1e4b      	subs	r3, r1, #1
   27f66:	2b0b      	cmp	r3, #11
   27f68:	f63f af3a 	bhi.w	27de0 <_tzset_unlocked_r+0x34>
   27f6c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   27f70:	1e53      	subs	r3, r2, #1
   27f72:	2b04      	cmp	r3, #4
   27f74:	f63f af34 	bhi.w	27de0 <_tzset_unlocked_r+0x34>
   27f78:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   27f7c:	2b06      	cmp	r3, #6
   27f7e:	f63f af2f 	bhi.w	27de0 <_tzset_unlocked_r+0x34>
   27f82:	f889 a008 	strb.w	sl, [r9, #8]
   27f86:	f8c9 3014 	str.w	r3, [r9, #20]
   27f8a:	e9c9 1203 	strd	r1, r2, [r9, #12]
   27f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27f90:	eb05 0a03 	add.w	sl, r5, r3
   27f94:	2302      	movs	r3, #2
   27f96:	f8ad 301c 	strh.w	r3, [sp, #28]
   27f9a:	2300      	movs	r3, #0
   27f9c:	f8ad 301e 	strh.w	r3, [sp, #30]
   27fa0:	f8ad 3020 	strh.w	r3, [sp, #32]
   27fa4:	930a      	str	r3, [sp, #40]	; 0x28
   27fa6:	f89a 3000 	ldrb.w	r3, [sl]
   27faa:	2b2f      	cmp	r3, #47	; 0x2f
   27fac:	d109      	bne.n	27fc2 <_tzset_unlocked_r+0x216>
   27fae:	4633      	mov	r3, r6
   27fb0:	aa07      	add	r2, sp, #28
   27fb2:	4944      	ldr	r1, [pc, #272]	; (280c4 <_tzset_unlocked_r+0x318>)
   27fb4:	4650      	mov	r0, sl
   27fb6:	e9cd 7602 	strd	r7, r6, [sp, #8]
   27fba:	e9cd 8600 	strd	r8, r6, [sp]
   27fbe:	f001 fa1b 	bl	293f8 <siscanf>
   27fc2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   27fc6:	213c      	movs	r1, #60	; 0x3c
   27fc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27fcc:	f109 0928 	add.w	r9, r9, #40	; 0x28
   27fd0:	fb01 3302 	mla	r3, r1, r2, r3
   27fd4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   27fd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   27fdc:	fb01 3302 	mla	r3, r1, r2, r3
   27fe0:	f849 3c10 	str.w	r3, [r9, #-16]
   27fe4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   27fe6:	4455      	add	r5, sl
   27fe8:	f1bb 0f00 	cmp.w	fp, #0
   27fec:	d022      	beq.n	28034 <_tzset_unlocked_r+0x288>
   27fee:	6860      	ldr	r0, [r4, #4]
   27ff0:	f7ff fe22 	bl	27c38 <__tzcalc_limits>
   27ff4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   27ff6:	4b2a      	ldr	r3, [pc, #168]	; (280a0 <_tzset_unlocked_r+0x2f4>)
   27ff8:	601a      	str	r2, [r3, #0]
   27ffa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   27ffc:	1a9b      	subs	r3, r3, r2
   27ffe:	4a2a      	ldr	r2, [pc, #168]	; (280a8 <_tzset_unlocked_r+0x2fc>)
   28000:	bf18      	it	ne
   28002:	2301      	movne	r3, #1
   28004:	6013      	str	r3, [r2, #0]
   28006:	e6eb      	b.n	27de0 <_tzset_unlocked_r+0x34>
   28008:	2b2b      	cmp	r3, #43	; 0x2b
   2800a:	f04f 0501 	mov.w	r5, #1
   2800e:	bf08      	it	eq
   28010:	f109 0901 	addeq.w	r9, r9, #1
   28014:	e76d      	b.n	27ef2 <_tzset_unlocked_r+0x146>
   28016:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   2801a:	213c      	movs	r1, #60	; 0x3c
   2801c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   28020:	fb01 3302 	mla	r3, r1, r2, r3
   28024:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   28028:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2802c:	fb01 3302 	mla	r3, r1, r2, r3
   28030:	436b      	muls	r3, r5
   28032:	e775      	b.n	27f20 <_tzset_unlocked_r+0x174>
   28034:	f04f 0b01 	mov.w	fp, #1
   28038:	e778      	b.n	27f2c <_tzset_unlocked_r+0x180>
   2803a:	f1ba 0f4a 	cmp.w	sl, #74	; 0x4a
   2803e:	f04f 020a 	mov.w	r2, #10
   28042:	a90b      	add	r1, sp, #44	; 0x2c
   28044:	bf06      	itte	eq
   28046:	3501      	addeq	r5, #1
   28048:	4653      	moveq	r3, sl
   2804a:	2344      	movne	r3, #68	; 0x44
   2804c:	4628      	mov	r0, r5
   2804e:	9305      	str	r3, [sp, #20]
   28050:	f7ff fde8 	bl	27c24 <strtoul>
   28054:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   28058:	9b05      	ldr	r3, [sp, #20]
   2805a:	45aa      	cmp	sl, r5
   2805c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   28060:	d114      	bne.n	2808c <_tzset_unlocked_r+0x2e0>
   28062:	234d      	movs	r3, #77	; 0x4d
   28064:	f1bb 0f00 	cmp.w	fp, #0
   28068:	d107      	bne.n	2807a <_tzset_unlocked_r+0x2ce>
   2806a:	2103      	movs	r1, #3
   2806c:	7223      	strb	r3, [r4, #8]
   2806e:	2302      	movs	r3, #2
   28070:	f8c4 b014 	str.w	fp, [r4, #20]
   28074:	e9c4 1303 	strd	r1, r3, [r4, #12]
   28078:	e78c      	b.n	27f94 <_tzset_unlocked_r+0x1e8>
   2807a:	220b      	movs	r2, #11
   2807c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   28080:	2301      	movs	r3, #1
   28082:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   28086:	2300      	movs	r3, #0
   28088:	63e3      	str	r3, [r4, #60]	; 0x3c
   2808a:	e783      	b.n	27f94 <_tzset_unlocked_r+0x1e8>
   2808c:	b280      	uxth	r0, r0
   2808e:	f889 3008 	strb.w	r3, [r9, #8]
   28092:	f8c9 0014 	str.w	r0, [r9, #20]
   28096:	e77d      	b.n	27f94 <_tzset_unlocked_r+0x1e8>
   28098:	0003891a 	.word	0x0003891a
   2809c:	20030e98 	.word	0x20030e98
   280a0:	20030e9c 	.word	0x20030e9c
   280a4:	0003891d 	.word	0x0003891d
   280a8:	20030ea0 	.word	0x20030ea0
   280ac:	2000885c 	.word	0x2000885c
   280b0:	20031f0b 	.word	0x20031f0b
   280b4:	00038921 	.word	0x00038921
   280b8:	00038944 	.word	0x00038944
   280bc:	20031f00 	.word	0x20031f00
   280c0:	00038930 	.word	0x00038930
   280c4:	00038943 	.word	0x00038943

000280c8 <vsniprintf>:
   280c8:	b507      	push	{r0, r1, r2, lr}
   280ca:	9300      	str	r3, [sp, #0]
   280cc:	4613      	mov	r3, r2
   280ce:	460a      	mov	r2, r1
   280d0:	4601      	mov	r1, r0
   280d2:	4803      	ldr	r0, [pc, #12]	; (280e0 <vsniprintf+0x18>)
   280d4:	6800      	ldr	r0, [r0, #0]
   280d6:	f009 fdcf 	bl	31c78 <_vsniprintf_r>
   280da:	b003      	add	sp, #12
   280dc:	f85d fb04 	ldr.w	pc, [sp], #4
   280e0:	200087f8 	.word	0x200087f8

000280e4 <_vsiprintf_r>:
   280e4:	b500      	push	{lr}
   280e6:	b09b      	sub	sp, #108	; 0x6c
   280e8:	9100      	str	r1, [sp, #0]
   280ea:	9104      	str	r1, [sp, #16]
   280ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   280f0:	9105      	str	r1, [sp, #20]
   280f2:	9102      	str	r1, [sp, #8]
   280f4:	4905      	ldr	r1, [pc, #20]	; (2810c <_vsiprintf_r+0x28>)
   280f6:	9103      	str	r1, [sp, #12]
   280f8:	4669      	mov	r1, sp
   280fa:	f000 ff55 	bl	28fa8 <_svfiprintf_r>
   280fe:	9b00      	ldr	r3, [sp, #0]
   28100:	2200      	movs	r2, #0
   28102:	701a      	strb	r2, [r3, #0]
   28104:	b01b      	add	sp, #108	; 0x6c
   28106:	f85d fb04 	ldr.w	pc, [sp], #4
   2810a:	bf00      	nop
   2810c:	ffff0208 	.word	0xffff0208

00028110 <vsiprintf>:
   28110:	4613      	mov	r3, r2
   28112:	460a      	mov	r2, r1
   28114:	4601      	mov	r1, r0
   28116:	4802      	ldr	r0, [pc, #8]	; (28120 <vsiprintf+0x10>)
   28118:	6800      	ldr	r0, [r0, #0]
   2811a:	f7ff bfe3 	b.w	280e4 <_vsiprintf_r>
   2811e:	bf00      	nop
   28120:	200087f8 	.word	0x200087f8

00028124 <__assert_func>:
   28124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28126:	4614      	mov	r4, r2
   28128:	461a      	mov	r2, r3
   2812a:	4b09      	ldr	r3, [pc, #36]	; (28150 <__assert_func+0x2c>)
   2812c:	4605      	mov	r5, r0
   2812e:	681b      	ldr	r3, [r3, #0]
   28130:	68d8      	ldr	r0, [r3, #12]
   28132:	b954      	cbnz	r4, 2814a <__assert_func+0x26>
   28134:	4b07      	ldr	r3, [pc, #28]	; (28154 <__assert_func+0x30>)
   28136:	461c      	mov	r4, r3
   28138:	9100      	str	r1, [sp, #0]
   2813a:	4907      	ldr	r1, [pc, #28]	; (28158 <__assert_func+0x34>)
   2813c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   28140:	462b      	mov	r3, r5
   28142:	f000 f8cd 	bl	282e0 <fiprintf>
   28146:	f00a f98c 	bl	32462 <abort>
   2814a:	4b04      	ldr	r3, [pc, #16]	; (2815c <__assert_func+0x38>)
   2814c:	e7f4      	b.n	28138 <__assert_func+0x14>
   2814e:	bf00      	nop
   28150:	200087f8 	.word	0x200087f8
   28154:	000365fc 	.word	0x000365fc
   28158:	00038963 	.word	0x00038963
   2815c:	00038956 	.word	0x00038956

00028160 <std>:
   28160:	2300      	movs	r3, #0
   28162:	b510      	push	{r4, lr}
   28164:	4604      	mov	r4, r0
   28166:	6083      	str	r3, [r0, #8]
   28168:	8181      	strh	r1, [r0, #12]
   2816a:	4619      	mov	r1, r3
   2816c:	6643      	str	r3, [r0, #100]	; 0x64
   2816e:	81c2      	strh	r2, [r0, #14]
   28170:	2208      	movs	r2, #8
   28172:	6183      	str	r3, [r0, #24]
   28174:	e9c0 3300 	strd	r3, r3, [r0]
   28178:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2817c:	305c      	adds	r0, #92	; 0x5c
   2817e:	f009 fb90 	bl	318a2 <memset>
   28182:	4b05      	ldr	r3, [pc, #20]	; (28198 <std+0x38>)
   28184:	6224      	str	r4, [r4, #32]
   28186:	6263      	str	r3, [r4, #36]	; 0x24
   28188:	4b04      	ldr	r3, [pc, #16]	; (2819c <std+0x3c>)
   2818a:	62a3      	str	r3, [r4, #40]	; 0x28
   2818c:	4b04      	ldr	r3, [pc, #16]	; (281a0 <std+0x40>)
   2818e:	62e3      	str	r3, [r4, #44]	; 0x2c
   28190:	4b04      	ldr	r3, [pc, #16]	; (281a4 <std+0x44>)
   28192:	6323      	str	r3, [r4, #48]	; 0x30
   28194:	bd10      	pop	{r4, pc}
   28196:	bf00      	nop
   28198:	000323bf 	.word	0x000323bf
   2819c:	000323e5 	.word	0x000323e5
   281a0:	0003241d 	.word	0x0003241d
   281a4:	00032441 	.word	0x00032441

000281a8 <_cleanup_r>:
   281a8:	4901      	ldr	r1, [pc, #4]	; (281b0 <_cleanup_r+0x8>)
   281aa:	f009 be3b 	b.w	31e24 <_fwalk_reent>
   281ae:	bf00      	nop
   281b0:	00029625 	.word	0x00029625

000281b4 <__sfp_lock_acquire>:
   281b4:	4801      	ldr	r0, [pc, #4]	; (281bc <__sfp_lock_acquire+0x8>)
   281b6:	f003 bc0e 	b.w	2b9d6 <__retarget_lock_acquire_recursive>
   281ba:	bf00      	nop
   281bc:	20008bc8 	.word	0x20008bc8

000281c0 <__sfp_lock_release>:
   281c0:	4801      	ldr	r0, [pc, #4]	; (281c8 <__sfp_lock_release+0x8>)
   281c2:	f003 bc10 	b.w	2b9e6 <__retarget_lock_release_recursive>
   281c6:	bf00      	nop
   281c8:	20008bc8 	.word	0x20008bc8

000281cc <__sinit_lock_acquire>:
   281cc:	4801      	ldr	r0, [pc, #4]	; (281d4 <__sinit_lock_acquire+0x8>)
   281ce:	f003 bc02 	b.w	2b9d6 <__retarget_lock_acquire_recursive>
   281d2:	bf00      	nop
   281d4:	20008bdc 	.word	0x20008bdc

000281d8 <__sinit_lock_release>:
   281d8:	4801      	ldr	r0, [pc, #4]	; (281e0 <__sinit_lock_release+0x8>)
   281da:	f003 bc04 	b.w	2b9e6 <__retarget_lock_release_recursive>
   281de:	bf00      	nop
   281e0:	20008bdc 	.word	0x20008bdc

000281e4 <__sinit>:
   281e4:	b510      	push	{r4, lr}
   281e6:	4604      	mov	r4, r0
   281e8:	f7ff fff0 	bl	281cc <__sinit_lock_acquire>
   281ec:	69a3      	ldr	r3, [r4, #24]
   281ee:	b11b      	cbz	r3, 281f8 <__sinit+0x14>
   281f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   281f4:	f7ff bff0 	b.w	281d8 <__sinit_lock_release>
   281f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   281fc:	6523      	str	r3, [r4, #80]	; 0x50
   281fe:	4620      	mov	r0, r4
   28200:	4b12      	ldr	r3, [pc, #72]	; (2824c <__sinit+0x68>)
   28202:	4a13      	ldr	r2, [pc, #76]	; (28250 <__sinit+0x6c>)
   28204:	681b      	ldr	r3, [r3, #0]
   28206:	62a2      	str	r2, [r4, #40]	; 0x28
   28208:	42a3      	cmp	r3, r4
   2820a:	bf04      	itt	eq
   2820c:	2301      	moveq	r3, #1
   2820e:	61a3      	streq	r3, [r4, #24]
   28210:	f000 f820 	bl	28254 <__sfp>
   28214:	6060      	str	r0, [r4, #4]
   28216:	4620      	mov	r0, r4
   28218:	f000 f81c 	bl	28254 <__sfp>
   2821c:	60a0      	str	r0, [r4, #8]
   2821e:	4620      	mov	r0, r4
   28220:	f000 f818 	bl	28254 <__sfp>
   28224:	2200      	movs	r2, #0
   28226:	2104      	movs	r1, #4
   28228:	60e0      	str	r0, [r4, #12]
   2822a:	6860      	ldr	r0, [r4, #4]
   2822c:	f7ff ff98 	bl	28160 <std>
   28230:	2201      	movs	r2, #1
   28232:	2109      	movs	r1, #9
   28234:	68a0      	ldr	r0, [r4, #8]
   28236:	f7ff ff93 	bl	28160 <std>
   2823a:	2202      	movs	r2, #2
   2823c:	2112      	movs	r1, #18
   2823e:	68e0      	ldr	r0, [r4, #12]
   28240:	f7ff ff8e 	bl	28160 <std>
   28244:	2301      	movs	r3, #1
   28246:	61a3      	str	r3, [r4, #24]
   28248:	e7d2      	b.n	281f0 <__sinit+0xc>
   2824a:	bf00      	nop
   2824c:	0003421c 	.word	0x0003421c
   28250:	000281a9 	.word	0x000281a9

00028254 <__sfp>:
   28254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28256:	4607      	mov	r7, r0
   28258:	f7ff ffac 	bl	281b4 <__sfp_lock_acquire>
   2825c:	4b1e      	ldr	r3, [pc, #120]	; (282d8 <__sfp+0x84>)
   2825e:	681e      	ldr	r6, [r3, #0]
   28260:	69b3      	ldr	r3, [r6, #24]
   28262:	b913      	cbnz	r3, 2826a <__sfp+0x16>
   28264:	4630      	mov	r0, r6
   28266:	f7ff ffbd 	bl	281e4 <__sinit>
   2826a:	3648      	adds	r6, #72	; 0x48
   2826c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   28270:	3b01      	subs	r3, #1
   28272:	d503      	bpl.n	2827c <__sfp+0x28>
   28274:	6833      	ldr	r3, [r6, #0]
   28276:	b30b      	cbz	r3, 282bc <__sfp+0x68>
   28278:	6836      	ldr	r6, [r6, #0]
   2827a:	e7f7      	b.n	2826c <__sfp+0x18>
   2827c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   28280:	b9d5      	cbnz	r5, 282b8 <__sfp+0x64>
   28282:	4b16      	ldr	r3, [pc, #88]	; (282dc <__sfp+0x88>)
   28284:	f104 0058 	add.w	r0, r4, #88	; 0x58
   28288:	6665      	str	r5, [r4, #100]	; 0x64
   2828a:	60e3      	str	r3, [r4, #12]
   2828c:	f003 fb93 	bl	2b9b6 <__retarget_lock_init_recursive>
   28290:	f7ff ff96 	bl	281c0 <__sfp_lock_release>
   28294:	2208      	movs	r2, #8
   28296:	4629      	mov	r1, r5
   28298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2829c:	6025      	str	r5, [r4, #0]
   2829e:	61a5      	str	r5, [r4, #24]
   282a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   282a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   282a8:	f009 fafb 	bl	318a2 <memset>
   282ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   282b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   282b4:	4620      	mov	r0, r4
   282b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   282b8:	3468      	adds	r4, #104	; 0x68
   282ba:	e7d9      	b.n	28270 <__sfp+0x1c>
   282bc:	2104      	movs	r1, #4
   282be:	4638      	mov	r0, r7
   282c0:	f009 fd9a 	bl	31df8 <__sfmoreglue>
   282c4:	4604      	mov	r4, r0
   282c6:	6030      	str	r0, [r6, #0]
   282c8:	2800      	cmp	r0, #0
   282ca:	d1d5      	bne.n	28278 <__sfp+0x24>
   282cc:	f7ff ff78 	bl	281c0 <__sfp_lock_release>
   282d0:	230c      	movs	r3, #12
   282d2:	603b      	str	r3, [r7, #0]
   282d4:	e7ee      	b.n	282b4 <__sfp+0x60>
   282d6:	bf00      	nop
   282d8:	0003421c 	.word	0x0003421c
   282dc:	ffff0001 	.word	0xffff0001

000282e0 <fiprintf>:
   282e0:	b40e      	push	{r1, r2, r3}
   282e2:	b503      	push	{r0, r1, lr}
   282e4:	ab03      	add	r3, sp, #12
   282e6:	4601      	mov	r1, r0
   282e8:	4805      	ldr	r0, [pc, #20]	; (28300 <fiprintf+0x20>)
   282ea:	f853 2b04 	ldr.w	r2, [r3], #4
   282ee:	6800      	ldr	r0, [r0, #0]
   282f0:	9301      	str	r3, [sp, #4]
   282f2:	f000 ff55 	bl	291a0 <_vfiprintf_r>
   282f6:	b002      	add	sp, #8
   282f8:	f85d eb04 	ldr.w	lr, [sp], #4
   282fc:	b003      	add	sp, #12
   282fe:	4770      	bx	lr
   28300:	200087f8 	.word	0x200087f8

00028304 <__gethex>:
   28304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28308:	b08b      	sub	sp, #44	; 0x2c
   2830a:	468b      	mov	fp, r1
   2830c:	4690      	mov	r8, r2
   2830e:	9305      	str	r3, [sp, #20]
   28310:	4bac      	ldr	r3, [pc, #688]	; (285c4 <__gethex+0x2c0>)
   28312:	9002      	str	r0, [sp, #8]
   28314:	681b      	ldr	r3, [r3, #0]
   28316:	4618      	mov	r0, r3
   28318:	9303      	str	r3, [sp, #12]
   2831a:	f7e1 f876 	bl	940a <strlen>
   2831e:	9b03      	ldr	r3, [sp, #12]
   28320:	9001      	str	r0, [sp, #4]
   28322:	4403      	add	r3, r0
   28324:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   28328:	9306      	str	r3, [sp, #24]
   2832a:	f8db 3000 	ldr.w	r3, [fp]
   2832e:	1c9a      	adds	r2, r3, #2
   28330:	4617      	mov	r7, r2
   28332:	f812 0b01 	ldrb.w	r0, [r2], #1
   28336:	2830      	cmp	r0, #48	; 0x30
   28338:	d0fa      	beq.n	28330 <__gethex+0x2c>
   2833a:	1afb      	subs	r3, r7, r3
   2833c:	f1a3 0a02 	sub.w	sl, r3, #2
   28340:	f009 fde0 	bl	31f04 <__hexdig_fun>
   28344:	4604      	mov	r4, r0
   28346:	2800      	cmp	r0, #0
   28348:	d138      	bne.n	283bc <__gethex+0xb8>
   2834a:	9a01      	ldr	r2, [sp, #4]
   2834c:	4638      	mov	r0, r7
   2834e:	9903      	ldr	r1, [sp, #12]
   28350:	f009 fbfe 	bl	31b50 <strncmp>
   28354:	4605      	mov	r5, r0
   28356:	2800      	cmp	r0, #0
   28358:	d164      	bne.n	28424 <__gethex+0x120>
   2835a:	9b01      	ldr	r3, [sp, #4]
   2835c:	5cf8      	ldrb	r0, [r7, r3]
   2835e:	18fe      	adds	r6, r7, r3
   28360:	f009 fdd0 	bl	31f04 <__hexdig_fun>
   28364:	2800      	cmp	r0, #0
   28366:	d05f      	beq.n	28428 <__gethex+0x124>
   28368:	4633      	mov	r3, r6
   2836a:	7818      	ldrb	r0, [r3, #0]
   2836c:	461f      	mov	r7, r3
   2836e:	3301      	adds	r3, #1
   28370:	2830      	cmp	r0, #48	; 0x30
   28372:	d0fa      	beq.n	2836a <__gethex+0x66>
   28374:	f009 fdc6 	bl	31f04 <__hexdig_fun>
   28378:	fab0 f480 	clz	r4, r0
   2837c:	4635      	mov	r5, r6
   2837e:	f04f 0a01 	mov.w	sl, #1
   28382:	0964      	lsrs	r4, r4, #5
   28384:	463a      	mov	r2, r7
   28386:	4616      	mov	r6, r2
   28388:	3201      	adds	r2, #1
   2838a:	7830      	ldrb	r0, [r6, #0]
   2838c:	f009 fdba 	bl	31f04 <__hexdig_fun>
   28390:	2800      	cmp	r0, #0
   28392:	d1f8      	bne.n	28386 <__gethex+0x82>
   28394:	9a01      	ldr	r2, [sp, #4]
   28396:	4630      	mov	r0, r6
   28398:	9903      	ldr	r1, [sp, #12]
   2839a:	f009 fbd9 	bl	31b50 <strncmp>
   2839e:	b980      	cbnz	r0, 283c2 <__gethex+0xbe>
   283a0:	b94d      	cbnz	r5, 283b6 <__gethex+0xb2>
   283a2:	9b01      	ldr	r3, [sp, #4]
   283a4:	18f5      	adds	r5, r6, r3
   283a6:	462a      	mov	r2, r5
   283a8:	4616      	mov	r6, r2
   283aa:	3201      	adds	r2, #1
   283ac:	7830      	ldrb	r0, [r6, #0]
   283ae:	f009 fda9 	bl	31f04 <__hexdig_fun>
   283b2:	2800      	cmp	r0, #0
   283b4:	d1f8      	bne.n	283a8 <__gethex+0xa4>
   283b6:	1bad      	subs	r5, r5, r6
   283b8:	00ad      	lsls	r5, r5, #2
   283ba:	e004      	b.n	283c6 <__gethex+0xc2>
   283bc:	2400      	movs	r4, #0
   283be:	4625      	mov	r5, r4
   283c0:	e7e0      	b.n	28384 <__gethex+0x80>
   283c2:	2d00      	cmp	r5, #0
   283c4:	d1f7      	bne.n	283b6 <__gethex+0xb2>
   283c6:	7833      	ldrb	r3, [r6, #0]
   283c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   283cc:	2b50      	cmp	r3, #80	; 0x50
   283ce:	d138      	bne.n	28442 <__gethex+0x13e>
   283d0:	7873      	ldrb	r3, [r6, #1]
   283d2:	2b2b      	cmp	r3, #43	; 0x2b
   283d4:	d02a      	beq.n	2842c <__gethex+0x128>
   283d6:	2b2d      	cmp	r3, #45	; 0x2d
   283d8:	d02c      	beq.n	28434 <__gethex+0x130>
   283da:	1c71      	adds	r1, r6, #1
   283dc:	f04f 0900 	mov.w	r9, #0
   283e0:	7808      	ldrb	r0, [r1, #0]
   283e2:	f009 fd8f 	bl	31f04 <__hexdig_fun>
   283e6:	1e43      	subs	r3, r0, #1
   283e8:	b2db      	uxtb	r3, r3
   283ea:	2b18      	cmp	r3, #24
   283ec:	d829      	bhi.n	28442 <__gethex+0x13e>
   283ee:	f1a0 0210 	sub.w	r2, r0, #16
   283f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   283f6:	f009 fd85 	bl	31f04 <__hexdig_fun>
   283fa:	1e43      	subs	r3, r0, #1
   283fc:	b2db      	uxtb	r3, r3
   283fe:	2b18      	cmp	r3, #24
   28400:	d91b      	bls.n	2843a <__gethex+0x136>
   28402:	f1b9 0f00 	cmp.w	r9, #0
   28406:	d000      	beq.n	2840a <__gethex+0x106>
   28408:	4252      	negs	r2, r2
   2840a:	4415      	add	r5, r2
   2840c:	f8cb 1000 	str.w	r1, [fp]
   28410:	b1cc      	cbz	r4, 28446 <__gethex+0x142>
   28412:	f1ba 0f00 	cmp.w	sl, #0
   28416:	bf0c      	ite	eq
   28418:	2606      	moveq	r6, #6
   2841a:	2600      	movne	r6, #0
   2841c:	4630      	mov	r0, r6
   2841e:	b00b      	add	sp, #44	; 0x2c
   28420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28424:	463e      	mov	r6, r7
   28426:	4625      	mov	r5, r4
   28428:	2401      	movs	r4, #1
   2842a:	e7cc      	b.n	283c6 <__gethex+0xc2>
   2842c:	f04f 0900 	mov.w	r9, #0
   28430:	1cb1      	adds	r1, r6, #2
   28432:	e7d5      	b.n	283e0 <__gethex+0xdc>
   28434:	f04f 0901 	mov.w	r9, #1
   28438:	e7fa      	b.n	28430 <__gethex+0x12c>
   2843a:	230a      	movs	r3, #10
   2843c:	fb03 0002 	mla	r0, r3, r2, r0
   28440:	e7d5      	b.n	283ee <__gethex+0xea>
   28442:	4631      	mov	r1, r6
   28444:	e7e2      	b.n	2840c <__gethex+0x108>
   28446:	1bf3      	subs	r3, r6, r7
   28448:	4621      	mov	r1, r4
   2844a:	3b01      	subs	r3, #1
   2844c:	2b07      	cmp	r3, #7
   2844e:	dc0a      	bgt.n	28466 <__gethex+0x162>
   28450:	9802      	ldr	r0, [sp, #8]
   28452:	f000 f9d7 	bl	28804 <_Balloc>
   28456:	4604      	mov	r4, r0
   28458:	b940      	cbnz	r0, 2846c <__gethex+0x168>
   2845a:	4b5b      	ldr	r3, [pc, #364]	; (285c8 <__gethex+0x2c4>)
   2845c:	4602      	mov	r2, r0
   2845e:	21de      	movs	r1, #222	; 0xde
   28460:	485a      	ldr	r0, [pc, #360]	; (285cc <__gethex+0x2c8>)
   28462:	f7ff fe5f 	bl	28124 <__assert_func>
   28466:	3101      	adds	r1, #1
   28468:	105b      	asrs	r3, r3, #1
   2846a:	e7ef      	b.n	2844c <__gethex+0x148>
   2846c:	f04f 0b00 	mov.w	fp, #0
   28470:	9b01      	ldr	r3, [sp, #4]
   28472:	f100 0914 	add.w	r9, r0, #20
   28476:	f1c3 0301 	rsb	r3, r3, #1
   2847a:	46da      	mov	sl, fp
   2847c:	f8cd 9010 	str.w	r9, [sp, #16]
   28480:	9308      	str	r3, [sp, #32]
   28482:	42b7      	cmp	r7, r6
   28484:	d338      	bcc.n	284f8 <__gethex+0x1f4>
   28486:	9e04      	ldr	r6, [sp, #16]
   28488:	4650      	mov	r0, sl
   2848a:	f846 ab04 	str.w	sl, [r6], #4
   2848e:	eba6 0609 	sub.w	r6, r6, r9
   28492:	10b6      	asrs	r6, r6, #2
   28494:	6126      	str	r6, [r4, #16]
   28496:	0176      	lsls	r6, r6, #5
   28498:	f009 fe31 	bl	320fe <__hi0bits>
   2849c:	f8d8 7000 	ldr.w	r7, [r8]
   284a0:	1a36      	subs	r6, r6, r0
   284a2:	42be      	cmp	r6, r7
   284a4:	dd60      	ble.n	28568 <__gethex+0x264>
   284a6:	1bf6      	subs	r6, r6, r7
   284a8:	4620      	mov	r0, r4
   284aa:	4631      	mov	r1, r6
   284ac:	f009 fee4 	bl	32278 <__any_on>
   284b0:	4682      	mov	sl, r0
   284b2:	b178      	cbz	r0, 284d4 <__gethex+0x1d0>
   284b4:	1e73      	subs	r3, r6, #1
   284b6:	f04f 0a01 	mov.w	sl, #1
   284ba:	1159      	asrs	r1, r3, #5
   284bc:	f003 021f 	and.w	r2, r3, #31
   284c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   284c4:	fa0a f202 	lsl.w	r2, sl, r2
   284c8:	420a      	tst	r2, r1
   284ca:	d003      	beq.n	284d4 <__gethex+0x1d0>
   284cc:	4553      	cmp	r3, sl
   284ce:	dc42      	bgt.n	28556 <__gethex+0x252>
   284d0:	f04f 0a02 	mov.w	sl, #2
   284d4:	4435      	add	r5, r6
   284d6:	4631      	mov	r1, r6
   284d8:	4620      	mov	r0, r4
   284da:	f009 fcc2 	bl	31e62 <rshift>
   284de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   284e2:	42ab      	cmp	r3, r5
   284e4:	da4e      	bge.n	28584 <__gethex+0x280>
   284e6:	4621      	mov	r1, r4
   284e8:	9802      	ldr	r0, [sp, #8]
   284ea:	f000 f9cb 	bl	28884 <_Bfree>
   284ee:	2300      	movs	r3, #0
   284f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   284f2:	26a3      	movs	r6, #163	; 0xa3
   284f4:	6013      	str	r3, [r2, #0]
   284f6:	e791      	b.n	2841c <__gethex+0x118>
   284f8:	1e73      	subs	r3, r6, #1
   284fa:	9a06      	ldr	r2, [sp, #24]
   284fc:	9307      	str	r3, [sp, #28]
   284fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   28502:	4293      	cmp	r3, r2
   28504:	d017      	beq.n	28536 <__gethex+0x232>
   28506:	f1bb 0f20 	cmp.w	fp, #32
   2850a:	d106      	bne.n	2851a <__gethex+0x216>
   2850c:	9b04      	ldr	r3, [sp, #16]
   2850e:	f843 ab04 	str.w	sl, [r3], #4
   28512:	f04f 0a00 	mov.w	sl, #0
   28516:	9304      	str	r3, [sp, #16]
   28518:	46d3      	mov	fp, sl
   2851a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   2851e:	f009 fcf1 	bl	31f04 <__hexdig_fun>
   28522:	f000 000f 	and.w	r0, r0, #15
   28526:	9b07      	ldr	r3, [sp, #28]
   28528:	fa00 f00b 	lsl.w	r0, r0, fp
   2852c:	f10b 0b04 	add.w	fp, fp, #4
   28530:	ea4a 0a00 	orr.w	sl, sl, r0
   28534:	e00d      	b.n	28552 <__gethex+0x24e>
   28536:	1e73      	subs	r3, r6, #1
   28538:	9a08      	ldr	r2, [sp, #32]
   2853a:	4413      	add	r3, r2
   2853c:	42bb      	cmp	r3, r7
   2853e:	d3e2      	bcc.n	28506 <__gethex+0x202>
   28540:	4618      	mov	r0, r3
   28542:	9a01      	ldr	r2, [sp, #4]
   28544:	9903      	ldr	r1, [sp, #12]
   28546:	9309      	str	r3, [sp, #36]	; 0x24
   28548:	f009 fb02 	bl	31b50 <strncmp>
   2854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2854e:	2800      	cmp	r0, #0
   28550:	d1d9      	bne.n	28506 <__gethex+0x202>
   28552:	461e      	mov	r6, r3
   28554:	e795      	b.n	28482 <__gethex+0x17e>
   28556:	1eb1      	subs	r1, r6, #2
   28558:	4620      	mov	r0, r4
   2855a:	f009 fe8d 	bl	32278 <__any_on>
   2855e:	2800      	cmp	r0, #0
   28560:	d0b6      	beq.n	284d0 <__gethex+0x1cc>
   28562:	f04f 0a03 	mov.w	sl, #3
   28566:	e7b5      	b.n	284d4 <__gethex+0x1d0>
   28568:	da09      	bge.n	2857e <__gethex+0x27a>
   2856a:	1bbe      	subs	r6, r7, r6
   2856c:	4621      	mov	r1, r4
   2856e:	9802      	ldr	r0, [sp, #8]
   28570:	4632      	mov	r2, r6
   28572:	1bad      	subs	r5, r5, r6
   28574:	f000 fb54 	bl	28c20 <__lshift>
   28578:	4604      	mov	r4, r0
   2857a:	f100 0914 	add.w	r9, r0, #20
   2857e:	f04f 0a00 	mov.w	sl, #0
   28582:	e7ac      	b.n	284de <__gethex+0x1da>
   28584:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28588:	42ab      	cmp	r3, r5
   2858a:	dd70      	ble.n	2866e <__gethex+0x36a>
   2858c:	1b5d      	subs	r5, r3, r5
   2858e:	42af      	cmp	r7, r5
   28590:	dc35      	bgt.n	285fe <__gethex+0x2fa>
   28592:	f8d8 300c 	ldr.w	r3, [r8, #12]
   28596:	2b02      	cmp	r3, #2
   28598:	d029      	beq.n	285ee <__gethex+0x2ea>
   2859a:	2b03      	cmp	r3, #3
   2859c:	d02b      	beq.n	285f6 <__gethex+0x2f2>
   2859e:	2b01      	cmp	r3, #1
   285a0:	d11c      	bne.n	285dc <__gethex+0x2d8>
   285a2:	42af      	cmp	r7, r5
   285a4:	d11a      	bne.n	285dc <__gethex+0x2d8>
   285a6:	2f01      	cmp	r7, #1
   285a8:	d112      	bne.n	285d0 <__gethex+0x2cc>
   285aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   285ae:	2662      	movs	r6, #98	; 0x62
   285b0:	9a05      	ldr	r2, [sp, #20]
   285b2:	6013      	str	r3, [r2, #0]
   285b4:	2301      	movs	r3, #1
   285b6:	6123      	str	r3, [r4, #16]
   285b8:	f8c9 3000 	str.w	r3, [r9]
   285bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   285be:	601c      	str	r4, [r3, #0]
   285c0:	e72c      	b.n	2841c <__gethex+0x118>
   285c2:	bf00      	nop
   285c4:	00034308 	.word	0x00034308
   285c8:	00038a13 	.word	0x00038a13
   285cc:	00038a24 	.word	0x00038a24
   285d0:	1e79      	subs	r1, r7, #1
   285d2:	4620      	mov	r0, r4
   285d4:	f009 fe50 	bl	32278 <__any_on>
   285d8:	2800      	cmp	r0, #0
   285da:	d1e6      	bne.n	285aa <__gethex+0x2a6>
   285dc:	4621      	mov	r1, r4
   285de:	9802      	ldr	r0, [sp, #8]
   285e0:	f000 f950 	bl	28884 <_Bfree>
   285e4:	2300      	movs	r3, #0
   285e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   285e8:	2650      	movs	r6, #80	; 0x50
   285ea:	6013      	str	r3, [r2, #0]
   285ec:	e716      	b.n	2841c <__gethex+0x118>
   285ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   285f0:	2b00      	cmp	r3, #0
   285f2:	d1f3      	bne.n	285dc <__gethex+0x2d8>
   285f4:	e7d9      	b.n	285aa <__gethex+0x2a6>
   285f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   285f8:	2b00      	cmp	r3, #0
   285fa:	d1d6      	bne.n	285aa <__gethex+0x2a6>
   285fc:	e7ee      	b.n	285dc <__gethex+0x2d8>
   285fe:	1e6e      	subs	r6, r5, #1
   28600:	f1ba 0f00 	cmp.w	sl, #0
   28604:	d130      	bne.n	28668 <__gethex+0x364>
   28606:	b126      	cbz	r6, 28612 <__gethex+0x30e>
   28608:	4631      	mov	r1, r6
   2860a:	4620      	mov	r0, r4
   2860c:	f009 fe34 	bl	32278 <__any_on>
   28610:	4682      	mov	sl, r0
   28612:	1172      	asrs	r2, r6, #5
   28614:	2301      	movs	r3, #1
   28616:	f006 061f 	and.w	r6, r6, #31
   2861a:	4629      	mov	r1, r5
   2861c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   28620:	4620      	mov	r0, r4
   28622:	40b3      	lsls	r3, r6
   28624:	1b7f      	subs	r7, r7, r5
   28626:	2602      	movs	r6, #2
   28628:	4213      	tst	r3, r2
   2862a:	bf18      	it	ne
   2862c:	f04a 0a02 	orrne.w	sl, sl, #2
   28630:	f009 fc17 	bl	31e62 <rshift>
   28634:	f8d8 5004 	ldr.w	r5, [r8, #4]
   28638:	f1ba 0f00 	cmp.w	sl, #0
   2863c:	d047      	beq.n	286ce <__gethex+0x3ca>
   2863e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   28642:	2b02      	cmp	r3, #2
   28644:	d015      	beq.n	28672 <__gethex+0x36e>
   28646:	2b03      	cmp	r3, #3
   28648:	d017      	beq.n	2867a <__gethex+0x376>
   2864a:	2b01      	cmp	r3, #1
   2864c:	d109      	bne.n	28662 <__gethex+0x35e>
   2864e:	f01a 0f02 	tst.w	sl, #2
   28652:	d006      	beq.n	28662 <__gethex+0x35e>
   28654:	f8d9 3000 	ldr.w	r3, [r9]
   28658:	ea4a 0a03 	orr.w	sl, sl, r3
   2865c:	f01a 0f01 	tst.w	sl, #1
   28660:	d10e      	bne.n	28680 <__gethex+0x37c>
   28662:	f046 0610 	orr.w	r6, r6, #16
   28666:	e032      	b.n	286ce <__gethex+0x3ca>
   28668:	f04f 0a01 	mov.w	sl, #1
   2866c:	e7d1      	b.n	28612 <__gethex+0x30e>
   2866e:	2601      	movs	r6, #1
   28670:	e7e2      	b.n	28638 <__gethex+0x334>
   28672:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28674:	f1c3 0301 	rsb	r3, r3, #1
   28678:	9315      	str	r3, [sp, #84]	; 0x54
   2867a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2867c:	2b00      	cmp	r3, #0
   2867e:	d0f0      	beq.n	28662 <__gethex+0x35e>
   28680:	f8d4 b010 	ldr.w	fp, [r4, #16]
   28684:	f104 0314 	add.w	r3, r4, #20
   28688:	f04f 0c00 	mov.w	ip, #0
   2868c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   28690:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   28694:	4618      	mov	r0, r3
   28696:	f853 2b04 	ldr.w	r2, [r3], #4
   2869a:	f1b2 3fff 	cmp.w	r2, #4294967295
   2869e:	d01b      	beq.n	286d8 <__gethex+0x3d4>
   286a0:	3201      	adds	r2, #1
   286a2:	6002      	str	r2, [r0, #0]
   286a4:	2e02      	cmp	r6, #2
   286a6:	f104 0314 	add.w	r3, r4, #20
   286aa:	d13c      	bne.n	28726 <__gethex+0x422>
   286ac:	f8d8 2000 	ldr.w	r2, [r8]
   286b0:	3a01      	subs	r2, #1
   286b2:	42ba      	cmp	r2, r7
   286b4:	d109      	bne.n	286ca <__gethex+0x3c6>
   286b6:	1179      	asrs	r1, r7, #5
   286b8:	2201      	movs	r2, #1
   286ba:	f007 071f 	and.w	r7, r7, #31
   286be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   286c2:	fa02 f707 	lsl.w	r7, r2, r7
   286c6:	421f      	tst	r7, r3
   286c8:	d13a      	bne.n	28740 <__gethex+0x43c>
   286ca:	f046 0620 	orr.w	r6, r6, #32
   286ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   286d0:	601c      	str	r4, [r3, #0]
   286d2:	9b05      	ldr	r3, [sp, #20]
   286d4:	601d      	str	r5, [r3, #0]
   286d6:	e6a1      	b.n	2841c <__gethex+0x118>
   286d8:	4299      	cmp	r1, r3
   286da:	f843 cc04 	str.w	ip, [r3, #-4]
   286de:	d8d9      	bhi.n	28694 <__gethex+0x390>
   286e0:	68a3      	ldr	r3, [r4, #8]
   286e2:	459b      	cmp	fp, r3
   286e4:	db17      	blt.n	28716 <__gethex+0x412>
   286e6:	6861      	ldr	r1, [r4, #4]
   286e8:	9802      	ldr	r0, [sp, #8]
   286ea:	3101      	adds	r1, #1
   286ec:	f000 f88a 	bl	28804 <_Balloc>
   286f0:	4681      	mov	r9, r0
   286f2:	b918      	cbnz	r0, 286fc <__gethex+0x3f8>
   286f4:	4b1a      	ldr	r3, [pc, #104]	; (28760 <__gethex+0x45c>)
   286f6:	4602      	mov	r2, r0
   286f8:	2184      	movs	r1, #132	; 0x84
   286fa:	e6b1      	b.n	28460 <__gethex+0x15c>
   286fc:	6922      	ldr	r2, [r4, #16]
   286fe:	f104 010c 	add.w	r1, r4, #12
   28702:	300c      	adds	r0, #12
   28704:	3202      	adds	r2, #2
   28706:	0092      	lsls	r2, r2, #2
   28708:	f009 f891 	bl	3182e <memcpy>
   2870c:	4621      	mov	r1, r4
   2870e:	464c      	mov	r4, r9
   28710:	9802      	ldr	r0, [sp, #8]
   28712:	f000 f8b7 	bl	28884 <_Bfree>
   28716:	6923      	ldr	r3, [r4, #16]
   28718:	1c5a      	adds	r2, r3, #1
   2871a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2871e:	6122      	str	r2, [r4, #16]
   28720:	2201      	movs	r2, #1
   28722:	615a      	str	r2, [r3, #20]
   28724:	e7be      	b.n	286a4 <__gethex+0x3a0>
   28726:	6922      	ldr	r2, [r4, #16]
   28728:	455a      	cmp	r2, fp
   2872a:	dd0b      	ble.n	28744 <__gethex+0x440>
   2872c:	2101      	movs	r1, #1
   2872e:	4620      	mov	r0, r4
   28730:	f009 fb97 	bl	31e62 <rshift>
   28734:	3501      	adds	r5, #1
   28736:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2873a:	42ab      	cmp	r3, r5
   2873c:	f6ff aed3 	blt.w	284e6 <__gethex+0x1e2>
   28740:	2601      	movs	r6, #1
   28742:	e7c2      	b.n	286ca <__gethex+0x3c6>
   28744:	f017 071f 	ands.w	r7, r7, #31
   28748:	d0fa      	beq.n	28740 <__gethex+0x43c>
   2874a:	4453      	add	r3, sl
   2874c:	f1c7 0720 	rsb	r7, r7, #32
   28750:	f853 0c04 	ldr.w	r0, [r3, #-4]
   28754:	f009 fcd3 	bl	320fe <__hi0bits>
   28758:	42b8      	cmp	r0, r7
   2875a:	dbe7      	blt.n	2872c <__gethex+0x428>
   2875c:	e7f0      	b.n	28740 <__gethex+0x43c>
   2875e:	bf00      	nop
   28760:	00038a13 	.word	0x00038a13

00028764 <_findenv_r>:
   28764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28768:	f8df a06c 	ldr.w	sl, [pc, #108]	; 287d8 <_findenv_r+0x74>
   2876c:	4606      	mov	r6, r0
   2876e:	4689      	mov	r9, r1
   28770:	4617      	mov	r7, r2
   28772:	f000 ff4b 	bl	2960c <__env_lock>
   28776:	f8da 4000 	ldr.w	r4, [sl]
   2877a:	b134      	cbz	r4, 2878a <_findenv_r+0x26>
   2877c:	464b      	mov	r3, r9
   2877e:	4698      	mov	r8, r3
   28780:	f813 2b01 	ldrb.w	r2, [r3], #1
   28784:	b13a      	cbz	r2, 28796 <_findenv_r+0x32>
   28786:	2a3d      	cmp	r2, #61	; 0x3d
   28788:	d1f9      	bne.n	2877e <_findenv_r+0x1a>
   2878a:	4630      	mov	r0, r6
   2878c:	f000 ff44 	bl	29618 <__env_unlock>
   28790:	2000      	movs	r0, #0
   28792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28796:	eba8 0809 	sub.w	r8, r8, r9
   2879a:	46a3      	mov	fp, r4
   2879c:	f854 0b04 	ldr.w	r0, [r4], #4
   287a0:	2800      	cmp	r0, #0
   287a2:	d0f2      	beq.n	2878a <_findenv_r+0x26>
   287a4:	4642      	mov	r2, r8
   287a6:	4649      	mov	r1, r9
   287a8:	f009 f9d2 	bl	31b50 <strncmp>
   287ac:	2800      	cmp	r0, #0
   287ae:	d1f4      	bne.n	2879a <_findenv_r+0x36>
   287b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   287b4:	eb03 0508 	add.w	r5, r3, r8
   287b8:	f813 3008 	ldrb.w	r3, [r3, r8]
   287bc:	2b3d      	cmp	r3, #61	; 0x3d
   287be:	d1ec      	bne.n	2879a <_findenv_r+0x36>
   287c0:	f8da 3000 	ldr.w	r3, [sl]
   287c4:	4630      	mov	r0, r6
   287c6:	ebab 0303 	sub.w	r3, fp, r3
   287ca:	109b      	asrs	r3, r3, #2
   287cc:	603b      	str	r3, [r7, #0]
   287ce:	f000 ff23 	bl	29618 <__env_unlock>
   287d2:	1c68      	adds	r0, r5, #1
   287d4:	e7dd      	b.n	28792 <_findenv_r+0x2e>
   287d6:	bf00      	nop
   287d8:	200089d0 	.word	0x200089d0

000287dc <__gettzinfo>:
   287dc:	4800      	ldr	r0, [pc, #0]	; (287e0 <__gettzinfo+0x4>)
   287de:	4770      	bx	lr
   287e0:	200083a8 	.word	0x200083a8

000287e4 <_localeconv_r>:
   287e4:	4800      	ldr	r0, [pc, #0]	; (287e8 <_localeconv_r+0x4>)
   287e6:	4770      	bx	lr
   287e8:	20008954 	.word	0x20008954

000287ec <__malloc_lock>:
   287ec:	4801      	ldr	r0, [pc, #4]	; (287f4 <__malloc_lock+0x8>)
   287ee:	f003 b8f2 	b.w	2b9d6 <__retarget_lock_acquire_recursive>
   287f2:	bf00      	nop
   287f4:	20008bb4 	.word	0x20008bb4

000287f8 <__malloc_unlock>:
   287f8:	4801      	ldr	r0, [pc, #4]	; (28800 <__malloc_unlock+0x8>)
   287fa:	f003 b8f4 	b.w	2b9e6 <__retarget_lock_release_recursive>
   287fe:	bf00      	nop
   28800:	20008bb4 	.word	0x20008bb4

00028804 <_Balloc>:
   28804:	b570      	push	{r4, r5, r6, lr}
   28806:	6a46      	ldr	r6, [r0, #36]	; 0x24
   28808:	4604      	mov	r4, r0
   2880a:	460d      	mov	r5, r1
   2880c:	b976      	cbnz	r6, 2882c <_Balloc+0x28>
   2880e:	2010      	movs	r0, #16
   28810:	f7fe fa1e 	bl	26c50 <malloc>
   28814:	4602      	mov	r2, r0
   28816:	6260      	str	r0, [r4, #36]	; 0x24
   28818:	b920      	cbnz	r0, 28824 <_Balloc+0x20>
   2881a:	4b18      	ldr	r3, [pc, #96]	; (2887c <_Balloc+0x78>)
   2881c:	2166      	movs	r1, #102	; 0x66
   2881e:	4818      	ldr	r0, [pc, #96]	; (28880 <_Balloc+0x7c>)
   28820:	f7ff fc80 	bl	28124 <__assert_func>
   28824:	e9c0 6601 	strd	r6, r6, [r0, #4]
   28828:	6006      	str	r6, [r0, #0]
   2882a:	60c6      	str	r6, [r0, #12]
   2882c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2882e:	68f3      	ldr	r3, [r6, #12]
   28830:	b183      	cbz	r3, 28854 <_Balloc+0x50>
   28832:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28834:	68db      	ldr	r3, [r3, #12]
   28836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2883a:	b9b8      	cbnz	r0, 2886c <_Balloc+0x68>
   2883c:	2101      	movs	r1, #1
   2883e:	4620      	mov	r0, r4
   28840:	fa01 f605 	lsl.w	r6, r1, r5
   28844:	1d72      	adds	r2, r6, #5
   28846:	0092      	lsls	r2, r2, #2
   28848:	f009 f833 	bl	318b2 <_calloc_r>
   2884c:	b160      	cbz	r0, 28868 <_Balloc+0x64>
   2884e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   28852:	e00e      	b.n	28872 <_Balloc+0x6e>
   28854:	2221      	movs	r2, #33	; 0x21
   28856:	2104      	movs	r1, #4
   28858:	4620      	mov	r0, r4
   2885a:	f009 f82a 	bl	318b2 <_calloc_r>
   2885e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28860:	60f0      	str	r0, [r6, #12]
   28862:	68db      	ldr	r3, [r3, #12]
   28864:	2b00      	cmp	r3, #0
   28866:	d1e4      	bne.n	28832 <_Balloc+0x2e>
   28868:	2000      	movs	r0, #0
   2886a:	bd70      	pop	{r4, r5, r6, pc}
   2886c:	6802      	ldr	r2, [r0, #0]
   2886e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   28872:	2300      	movs	r3, #0
   28874:	e9c0 3303 	strd	r3, r3, [r0, #12]
   28878:	e7f7      	b.n	2886a <_Balloc+0x66>
   2887a:	bf00      	nop
   2887c:	0003888d 	.word	0x0003888d
   28880:	00038aa6 	.word	0x00038aa6

00028884 <_Bfree>:
   28884:	b570      	push	{r4, r5, r6, lr}
   28886:	6a46      	ldr	r6, [r0, #36]	; 0x24
   28888:	4605      	mov	r5, r0
   2888a:	460c      	mov	r4, r1
   2888c:	b976      	cbnz	r6, 288ac <_Bfree+0x28>
   2888e:	2010      	movs	r0, #16
   28890:	f7fe f9de 	bl	26c50 <malloc>
   28894:	4602      	mov	r2, r0
   28896:	6268      	str	r0, [r5, #36]	; 0x24
   28898:	b920      	cbnz	r0, 288a4 <_Bfree+0x20>
   2889a:	4b09      	ldr	r3, [pc, #36]	; (288c0 <_Bfree+0x3c>)
   2889c:	218a      	movs	r1, #138	; 0x8a
   2889e:	4809      	ldr	r0, [pc, #36]	; (288c4 <_Bfree+0x40>)
   288a0:	f7ff fc40 	bl	28124 <__assert_func>
   288a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   288a8:	6006      	str	r6, [r0, #0]
   288aa:	60c6      	str	r6, [r0, #12]
   288ac:	b13c      	cbz	r4, 288be <_Bfree+0x3a>
   288ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   288b0:	6862      	ldr	r2, [r4, #4]
   288b2:	68db      	ldr	r3, [r3, #12]
   288b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   288b8:	6021      	str	r1, [r4, #0]
   288ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   288be:	bd70      	pop	{r4, r5, r6, pc}
   288c0:	0003888d 	.word	0x0003888d
   288c4:	00038aa6 	.word	0x00038aa6

000288c8 <__multadd>:
   288c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   288cc:	f101 0c14 	add.w	ip, r1, #20
   288d0:	4607      	mov	r7, r0
   288d2:	460c      	mov	r4, r1
   288d4:	461e      	mov	r6, r3
   288d6:	690d      	ldr	r5, [r1, #16]
   288d8:	2000      	movs	r0, #0
   288da:	f8dc 3000 	ldr.w	r3, [ip]
   288de:	3001      	adds	r0, #1
   288e0:	b299      	uxth	r1, r3
   288e2:	4285      	cmp	r5, r0
   288e4:	fb02 6101 	mla	r1, r2, r1, r6
   288e8:	ea4f 4613 	mov.w	r6, r3, lsr #16
   288ec:	ea4f 4311 	mov.w	r3, r1, lsr #16
   288f0:	b289      	uxth	r1, r1
   288f2:	fb02 3306 	mla	r3, r2, r6, r3
   288f6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   288fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   288fe:	f84c 1b04 	str.w	r1, [ip], #4
   28902:	dcea      	bgt.n	288da <__multadd+0x12>
   28904:	b30e      	cbz	r6, 2894a <__multadd+0x82>
   28906:	68a3      	ldr	r3, [r4, #8]
   28908:	42ab      	cmp	r3, r5
   2890a:	dc19      	bgt.n	28940 <__multadd+0x78>
   2890c:	6861      	ldr	r1, [r4, #4]
   2890e:	4638      	mov	r0, r7
   28910:	3101      	adds	r1, #1
   28912:	f7ff ff77 	bl	28804 <_Balloc>
   28916:	4680      	mov	r8, r0
   28918:	b928      	cbnz	r0, 28926 <__multadd+0x5e>
   2891a:	4602      	mov	r2, r0
   2891c:	4b0c      	ldr	r3, [pc, #48]	; (28950 <__multadd+0x88>)
   2891e:	21b5      	movs	r1, #181	; 0xb5
   28920:	480c      	ldr	r0, [pc, #48]	; (28954 <__multadd+0x8c>)
   28922:	f7ff fbff 	bl	28124 <__assert_func>
   28926:	6922      	ldr	r2, [r4, #16]
   28928:	f104 010c 	add.w	r1, r4, #12
   2892c:	300c      	adds	r0, #12
   2892e:	3202      	adds	r2, #2
   28930:	0092      	lsls	r2, r2, #2
   28932:	f008 ff7c 	bl	3182e <memcpy>
   28936:	4621      	mov	r1, r4
   28938:	4644      	mov	r4, r8
   2893a:	4638      	mov	r0, r7
   2893c:	f7ff ffa2 	bl	28884 <_Bfree>
   28940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   28944:	3501      	adds	r5, #1
   28946:	615e      	str	r6, [r3, #20]
   28948:	6125      	str	r5, [r4, #16]
   2894a:	4620      	mov	r0, r4
   2894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28950:	00038a13 	.word	0x00038a13
   28954:	00038aa6 	.word	0x00038aa6

00028958 <__s2b>:
   28958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2895c:	4615      	mov	r5, r2
   2895e:	461f      	mov	r7, r3
   28960:	2209      	movs	r2, #9
   28962:	3308      	adds	r3, #8
   28964:	460c      	mov	r4, r1
   28966:	4606      	mov	r6, r0
   28968:	2100      	movs	r1, #0
   2896a:	fb93 f3f2 	sdiv	r3, r3, r2
   2896e:	2201      	movs	r2, #1
   28970:	429a      	cmp	r2, r3
   28972:	db09      	blt.n	28988 <__s2b+0x30>
   28974:	4630      	mov	r0, r6
   28976:	f7ff ff45 	bl	28804 <_Balloc>
   2897a:	b940      	cbnz	r0, 2898e <__s2b+0x36>
   2897c:	4602      	mov	r2, r0
   2897e:	4b19      	ldr	r3, [pc, #100]	; (289e4 <__s2b+0x8c>)
   28980:	21ce      	movs	r1, #206	; 0xce
   28982:	4819      	ldr	r0, [pc, #100]	; (289e8 <__s2b+0x90>)
   28984:	f7ff fbce 	bl	28124 <__assert_func>
   28988:	0052      	lsls	r2, r2, #1
   2898a:	3101      	adds	r1, #1
   2898c:	e7f0      	b.n	28970 <__s2b+0x18>
   2898e:	9b08      	ldr	r3, [sp, #32]
   28990:	2d09      	cmp	r5, #9
   28992:	6143      	str	r3, [r0, #20]
   28994:	f04f 0301 	mov.w	r3, #1
   28998:	6103      	str	r3, [r0, #16]
   2899a:	dd16      	ble.n	289ca <__s2b+0x72>
   2899c:	f104 0909 	add.w	r9, r4, #9
   289a0:	442c      	add	r4, r5
   289a2:	46c8      	mov	r8, r9
   289a4:	f818 3b01 	ldrb.w	r3, [r8], #1
   289a8:	4601      	mov	r1, r0
   289aa:	220a      	movs	r2, #10
   289ac:	4630      	mov	r0, r6
   289ae:	3b30      	subs	r3, #48	; 0x30
   289b0:	f7ff ff8a 	bl	288c8 <__multadd>
   289b4:	45a0      	cmp	r8, r4
   289b6:	d1f5      	bne.n	289a4 <__s2b+0x4c>
   289b8:	f1a5 0408 	sub.w	r4, r5, #8
   289bc:	444c      	add	r4, r9
   289be:	1b2d      	subs	r5, r5, r4
   289c0:	1963      	adds	r3, r4, r5
   289c2:	42bb      	cmp	r3, r7
   289c4:	db04      	blt.n	289d0 <__s2b+0x78>
   289c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   289ca:	340a      	adds	r4, #10
   289cc:	2509      	movs	r5, #9
   289ce:	e7f6      	b.n	289be <__s2b+0x66>
   289d0:	f814 3b01 	ldrb.w	r3, [r4], #1
   289d4:	4601      	mov	r1, r0
   289d6:	220a      	movs	r2, #10
   289d8:	4630      	mov	r0, r6
   289da:	3b30      	subs	r3, #48	; 0x30
   289dc:	f7ff ff74 	bl	288c8 <__multadd>
   289e0:	e7ee      	b.n	289c0 <__s2b+0x68>
   289e2:	bf00      	nop
   289e4:	00038a13 	.word	0x00038a13
   289e8:	00038aa6 	.word	0x00038aa6

000289ec <__i2b>:
   289ec:	b510      	push	{r4, lr}
   289ee:	460c      	mov	r4, r1
   289f0:	2101      	movs	r1, #1
   289f2:	f7ff ff07 	bl	28804 <_Balloc>
   289f6:	4602      	mov	r2, r0
   289f8:	b928      	cbnz	r0, 28a06 <__i2b+0x1a>
   289fa:	4b05      	ldr	r3, [pc, #20]	; (28a10 <__i2b+0x24>)
   289fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
   28a00:	4804      	ldr	r0, [pc, #16]	; (28a14 <__i2b+0x28>)
   28a02:	f7ff fb8f 	bl	28124 <__assert_func>
   28a06:	2301      	movs	r3, #1
   28a08:	6144      	str	r4, [r0, #20]
   28a0a:	6103      	str	r3, [r0, #16]
   28a0c:	bd10      	pop	{r4, pc}
   28a0e:	bf00      	nop
   28a10:	00038a13 	.word	0x00038a13
   28a14:	00038aa6 	.word	0x00038aa6

00028a18 <__multiply>:
   28a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a1c:	4614      	mov	r4, r2
   28a1e:	690a      	ldr	r2, [r1, #16]
   28a20:	460f      	mov	r7, r1
   28a22:	b085      	sub	sp, #20
   28a24:	6923      	ldr	r3, [r4, #16]
   28a26:	429a      	cmp	r2, r3
   28a28:	bfa2      	ittt	ge
   28a2a:	4623      	movge	r3, r4
   28a2c:	460c      	movge	r4, r1
   28a2e:	461f      	movge	r7, r3
   28a30:	f8d4 a010 	ldr.w	sl, [r4, #16]
   28a34:	68a3      	ldr	r3, [r4, #8]
   28a36:	f8d7 9010 	ldr.w	r9, [r7, #16]
   28a3a:	6861      	ldr	r1, [r4, #4]
   28a3c:	eb0a 0609 	add.w	r6, sl, r9
   28a40:	42b3      	cmp	r3, r6
   28a42:	bfb8      	it	lt
   28a44:	3101      	addlt	r1, #1
   28a46:	f7ff fedd 	bl	28804 <_Balloc>
   28a4a:	b930      	cbnz	r0, 28a5a <__multiply+0x42>
   28a4c:	4602      	mov	r2, r0
   28a4e:	4b45      	ldr	r3, [pc, #276]	; (28b64 <__multiply+0x14c>)
   28a50:	f240 115d 	movw	r1, #349	; 0x15d
   28a54:	4844      	ldr	r0, [pc, #272]	; (28b68 <__multiply+0x150>)
   28a56:	f7ff fb65 	bl	28124 <__assert_func>
   28a5a:	f100 0514 	add.w	r5, r0, #20
   28a5e:	2200      	movs	r2, #0
   28a60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   28a64:	462b      	mov	r3, r5
   28a66:	4543      	cmp	r3, r8
   28a68:	d321      	bcc.n	28aae <__multiply+0x96>
   28a6a:	f107 0114 	add.w	r1, r7, #20
   28a6e:	f104 0214 	add.w	r2, r4, #20
   28a72:	f104 0715 	add.w	r7, r4, #21
   28a76:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   28a7a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   28a7e:	9302      	str	r3, [sp, #8]
   28a80:	1b13      	subs	r3, r2, r4
   28a82:	3b15      	subs	r3, #21
   28a84:	f023 0303 	bic.w	r3, r3, #3
   28a88:	3304      	adds	r3, #4
   28a8a:	42ba      	cmp	r2, r7
   28a8c:	bf38      	it	cc
   28a8e:	2304      	movcc	r3, #4
   28a90:	9301      	str	r3, [sp, #4]
   28a92:	9b02      	ldr	r3, [sp, #8]
   28a94:	9103      	str	r1, [sp, #12]
   28a96:	428b      	cmp	r3, r1
   28a98:	d80c      	bhi.n	28ab4 <__multiply+0x9c>
   28a9a:	2e00      	cmp	r6, #0
   28a9c:	dd03      	ble.n	28aa6 <__multiply+0x8e>
   28a9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   28aa2:	2b00      	cmp	r3, #0
   28aa4:	d05b      	beq.n	28b5e <__multiply+0x146>
   28aa6:	6106      	str	r6, [r0, #16]
   28aa8:	b005      	add	sp, #20
   28aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28aae:	f843 2b04 	str.w	r2, [r3], #4
   28ab2:	e7d8      	b.n	28a66 <__multiply+0x4e>
   28ab4:	f8b1 a000 	ldrh.w	sl, [r1]
   28ab8:	f1ba 0f00 	cmp.w	sl, #0
   28abc:	d024      	beq.n	28b08 <__multiply+0xf0>
   28abe:	f104 0e14 	add.w	lr, r4, #20
   28ac2:	46a9      	mov	r9, r5
   28ac4:	f04f 0c00 	mov.w	ip, #0
   28ac8:	f85e 7b04 	ldr.w	r7, [lr], #4
   28acc:	f8d9 3000 	ldr.w	r3, [r9]
   28ad0:	fa1f fb87 	uxth.w	fp, r7
   28ad4:	4572      	cmp	r2, lr
   28ad6:	b29b      	uxth	r3, r3
   28ad8:	ea4f 4717 	mov.w	r7, r7, lsr #16
   28adc:	fb0a 330b 	mla	r3, sl, fp, r3
   28ae0:	4463      	add	r3, ip
   28ae2:	f8d9 c000 	ldr.w	ip, [r9]
   28ae6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   28aea:	fb0a c707 	mla	r7, sl, r7, ip
   28aee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   28af2:	b29b      	uxth	r3, r3
   28af4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   28af8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   28afc:	f849 3b04 	str.w	r3, [r9], #4
   28b00:	d8e2      	bhi.n	28ac8 <__multiply+0xb0>
   28b02:	9b01      	ldr	r3, [sp, #4]
   28b04:	f845 c003 	str.w	ip, [r5, r3]
   28b08:	9b03      	ldr	r3, [sp, #12]
   28b0a:	3104      	adds	r1, #4
   28b0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   28b10:	f1b9 0f00 	cmp.w	r9, #0
   28b14:	d021      	beq.n	28b5a <__multiply+0x142>
   28b16:	682b      	ldr	r3, [r5, #0]
   28b18:	f104 0c14 	add.w	ip, r4, #20
   28b1c:	46ae      	mov	lr, r5
   28b1e:	f04f 0a00 	mov.w	sl, #0
   28b22:	f8bc b000 	ldrh.w	fp, [ip]
   28b26:	b29b      	uxth	r3, r3
   28b28:	f8be 7002 	ldrh.w	r7, [lr, #2]
   28b2c:	fb09 770b 	mla	r7, r9, fp, r7
   28b30:	4457      	add	r7, sl
   28b32:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   28b36:	f84e 3b04 	str.w	r3, [lr], #4
   28b3a:	f85c 3b04 	ldr.w	r3, [ip], #4
   28b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   28b42:	f8be 3000 	ldrh.w	r3, [lr]
   28b46:	4562      	cmp	r2, ip
   28b48:	fb09 330a 	mla	r3, r9, sl, r3
   28b4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   28b50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   28b54:	d8e5      	bhi.n	28b22 <__multiply+0x10a>
   28b56:	9f01      	ldr	r7, [sp, #4]
   28b58:	51eb      	str	r3, [r5, r7]
   28b5a:	3504      	adds	r5, #4
   28b5c:	e799      	b.n	28a92 <__multiply+0x7a>
   28b5e:	3e01      	subs	r6, #1
   28b60:	e79b      	b.n	28a9a <__multiply+0x82>
   28b62:	bf00      	nop
   28b64:	00038a13 	.word	0x00038a13
   28b68:	00038aa6 	.word	0x00038aa6

00028b6c <__pow5mult>:
   28b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28b70:	4615      	mov	r5, r2
   28b72:	f012 0203 	ands.w	r2, r2, #3
   28b76:	4607      	mov	r7, r0
   28b78:	460e      	mov	r6, r1
   28b7a:	d007      	beq.n	28b8c <__pow5mult+0x20>
   28b7c:	3a01      	subs	r2, #1
   28b7e:	4c25      	ldr	r4, [pc, #148]	; (28c14 <__pow5mult+0xa8>)
   28b80:	2300      	movs	r3, #0
   28b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   28b86:	f7ff fe9f 	bl	288c8 <__multadd>
   28b8a:	4606      	mov	r6, r0
   28b8c:	10ad      	asrs	r5, r5, #2
   28b8e:	d03d      	beq.n	28c0c <__pow5mult+0xa0>
   28b90:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   28b92:	b97c      	cbnz	r4, 28bb4 <__pow5mult+0x48>
   28b94:	2010      	movs	r0, #16
   28b96:	f7fe f85b 	bl	26c50 <malloc>
   28b9a:	4602      	mov	r2, r0
   28b9c:	6278      	str	r0, [r7, #36]	; 0x24
   28b9e:	b928      	cbnz	r0, 28bac <__pow5mult+0x40>
   28ba0:	4b1d      	ldr	r3, [pc, #116]	; (28c18 <__pow5mult+0xac>)
   28ba2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   28ba6:	481d      	ldr	r0, [pc, #116]	; (28c1c <__pow5mult+0xb0>)
   28ba8:	f7ff fabc 	bl	28124 <__assert_func>
   28bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
   28bb0:	6004      	str	r4, [r0, #0]
   28bb2:	60c4      	str	r4, [r0, #12]
   28bb4:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   28bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   28bbc:	b94c      	cbnz	r4, 28bd2 <__pow5mult+0x66>
   28bbe:	f240 2171 	movw	r1, #625	; 0x271
   28bc2:	4638      	mov	r0, r7
   28bc4:	f7ff ff12 	bl	289ec <__i2b>
   28bc8:	2300      	movs	r3, #0
   28bca:	4604      	mov	r4, r0
   28bcc:	f8c8 0008 	str.w	r0, [r8, #8]
   28bd0:	6003      	str	r3, [r0, #0]
   28bd2:	f04f 0900 	mov.w	r9, #0
   28bd6:	07eb      	lsls	r3, r5, #31
   28bd8:	d50a      	bpl.n	28bf0 <__pow5mult+0x84>
   28bda:	4631      	mov	r1, r6
   28bdc:	4622      	mov	r2, r4
   28bde:	4638      	mov	r0, r7
   28be0:	f7ff ff1a 	bl	28a18 <__multiply>
   28be4:	4680      	mov	r8, r0
   28be6:	4631      	mov	r1, r6
   28be8:	4638      	mov	r0, r7
   28bea:	4646      	mov	r6, r8
   28bec:	f7ff fe4a 	bl	28884 <_Bfree>
   28bf0:	106d      	asrs	r5, r5, #1
   28bf2:	d00b      	beq.n	28c0c <__pow5mult+0xa0>
   28bf4:	6820      	ldr	r0, [r4, #0]
   28bf6:	b938      	cbnz	r0, 28c08 <__pow5mult+0x9c>
   28bf8:	4622      	mov	r2, r4
   28bfa:	4621      	mov	r1, r4
   28bfc:	4638      	mov	r0, r7
   28bfe:	f7ff ff0b 	bl	28a18 <__multiply>
   28c02:	6020      	str	r0, [r4, #0]
   28c04:	f8c0 9000 	str.w	r9, [r0]
   28c08:	4604      	mov	r4, r0
   28c0a:	e7e4      	b.n	28bd6 <__pow5mult+0x6a>
   28c0c:	4630      	mov	r0, r6
   28c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28c12:	bf00      	nop
   28c14:	00034374 	.word	0x00034374
   28c18:	0003888d 	.word	0x0003888d
   28c1c:	00038aa6 	.word	0x00038aa6

00028c20 <__lshift>:
   28c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28c24:	460c      	mov	r4, r1
   28c26:	4607      	mov	r7, r0
   28c28:	4691      	mov	r9, r2
   28c2a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   28c2e:	6923      	ldr	r3, [r4, #16]
   28c30:	6849      	ldr	r1, [r1, #4]
   28c32:	eb03 1862 	add.w	r8, r3, r2, asr #5
   28c36:	68a3      	ldr	r3, [r4, #8]
   28c38:	f108 0601 	add.w	r6, r8, #1
   28c3c:	42b3      	cmp	r3, r6
   28c3e:	db0b      	blt.n	28c58 <__lshift+0x38>
   28c40:	4638      	mov	r0, r7
   28c42:	f7ff fddf 	bl	28804 <_Balloc>
   28c46:	4605      	mov	r5, r0
   28c48:	b948      	cbnz	r0, 28c5e <__lshift+0x3e>
   28c4a:	4602      	mov	r2, r0
   28c4c:	4b28      	ldr	r3, [pc, #160]	; (28cf0 <__lshift+0xd0>)
   28c4e:	f240 11d9 	movw	r1, #473	; 0x1d9
   28c52:	4828      	ldr	r0, [pc, #160]	; (28cf4 <__lshift+0xd4>)
   28c54:	f7ff fa66 	bl	28124 <__assert_func>
   28c58:	3101      	adds	r1, #1
   28c5a:	005b      	lsls	r3, r3, #1
   28c5c:	e7ee      	b.n	28c3c <__lshift+0x1c>
   28c5e:	2300      	movs	r3, #0
   28c60:	f100 0114 	add.w	r1, r0, #20
   28c64:	f100 0210 	add.w	r2, r0, #16
   28c68:	4618      	mov	r0, r3
   28c6a:	4553      	cmp	r3, sl
   28c6c:	db33      	blt.n	28cd6 <__lshift+0xb6>
   28c6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   28c72:	f104 0314 	add.w	r3, r4, #20
   28c76:	6920      	ldr	r0, [r4, #16]
   28c78:	f019 091f 	ands.w	r9, r9, #31
   28c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   28c80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   28c84:	d02b      	beq.n	28cde <__lshift+0xbe>
   28c86:	f1c9 0e20 	rsb	lr, r9, #32
   28c8a:	468a      	mov	sl, r1
   28c8c:	2200      	movs	r2, #0
   28c8e:	6818      	ldr	r0, [r3, #0]
   28c90:	fa00 f009 	lsl.w	r0, r0, r9
   28c94:	4310      	orrs	r0, r2
   28c96:	f84a 0b04 	str.w	r0, [sl], #4
   28c9a:	f853 2b04 	ldr.w	r2, [r3], #4
   28c9e:	459c      	cmp	ip, r3
   28ca0:	fa22 f20e 	lsr.w	r2, r2, lr
   28ca4:	d8f3      	bhi.n	28c8e <__lshift+0x6e>
   28ca6:	ebac 0304 	sub.w	r3, ip, r4
   28caa:	f104 0015 	add.w	r0, r4, #21
   28cae:	3b15      	subs	r3, #21
   28cb0:	f023 0303 	bic.w	r3, r3, #3
   28cb4:	3304      	adds	r3, #4
   28cb6:	4584      	cmp	ip, r0
   28cb8:	bf38      	it	cc
   28cba:	2304      	movcc	r3, #4
   28cbc:	50ca      	str	r2, [r1, r3]
   28cbe:	b10a      	cbz	r2, 28cc4 <__lshift+0xa4>
   28cc0:	f108 0602 	add.w	r6, r8, #2
   28cc4:	3e01      	subs	r6, #1
   28cc6:	4638      	mov	r0, r7
   28cc8:	4621      	mov	r1, r4
   28cca:	612e      	str	r6, [r5, #16]
   28ccc:	f7ff fdda 	bl	28884 <_Bfree>
   28cd0:	4628      	mov	r0, r5
   28cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28cd6:	3301      	adds	r3, #1
   28cd8:	f842 0f04 	str.w	r0, [r2, #4]!
   28cdc:	e7c5      	b.n	28c6a <__lshift+0x4a>
   28cde:	3904      	subs	r1, #4
   28ce0:	f853 2b04 	ldr.w	r2, [r3], #4
   28ce4:	459c      	cmp	ip, r3
   28ce6:	f841 2f04 	str.w	r2, [r1, #4]!
   28cea:	d8f9      	bhi.n	28ce0 <__lshift+0xc0>
   28cec:	e7ea      	b.n	28cc4 <__lshift+0xa4>
   28cee:	bf00      	nop
   28cf0:	00038a13 	.word	0x00038a13
   28cf4:	00038aa6 	.word	0x00038aa6

00028cf8 <__mdiff>:
   28cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cfc:	4689      	mov	r9, r1
   28cfe:	4606      	mov	r6, r0
   28d00:	4611      	mov	r1, r2
   28d02:	4614      	mov	r4, r2
   28d04:	4648      	mov	r0, r9
   28d06:	f009 fa49 	bl	3219c <__mcmp>
   28d0a:	1e05      	subs	r5, r0, #0
   28d0c:	d112      	bne.n	28d34 <__mdiff+0x3c>
   28d0e:	4629      	mov	r1, r5
   28d10:	4630      	mov	r0, r6
   28d12:	f7ff fd77 	bl	28804 <_Balloc>
   28d16:	4602      	mov	r2, r0
   28d18:	b928      	cbnz	r0, 28d26 <__mdiff+0x2e>
   28d1a:	4b40      	ldr	r3, [pc, #256]	; (28e1c <__mdiff+0x124>)
   28d1c:	f240 2132 	movw	r1, #562	; 0x232
   28d20:	483f      	ldr	r0, [pc, #252]	; (28e20 <__mdiff+0x128>)
   28d22:	f7ff f9ff 	bl	28124 <__assert_func>
   28d26:	2301      	movs	r3, #1
   28d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
   28d2c:	4610      	mov	r0, r2
   28d2e:	b003      	add	sp, #12
   28d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d34:	bfbc      	itt	lt
   28d36:	464b      	movlt	r3, r9
   28d38:	46a1      	movlt	r9, r4
   28d3a:	4630      	mov	r0, r6
   28d3c:	bfb8      	it	lt
   28d3e:	2501      	movlt	r5, #1
   28d40:	f8d9 1004 	ldr.w	r1, [r9, #4]
   28d44:	bfb4      	ite	lt
   28d46:	461c      	movlt	r4, r3
   28d48:	2500      	movge	r5, #0
   28d4a:	f7ff fd5b 	bl	28804 <_Balloc>
   28d4e:	4602      	mov	r2, r0
   28d50:	b918      	cbnz	r0, 28d5a <__mdiff+0x62>
   28d52:	4b32      	ldr	r3, [pc, #200]	; (28e1c <__mdiff+0x124>)
   28d54:	f44f 7110 	mov.w	r1, #576	; 0x240
   28d58:	e7e2      	b.n	28d20 <__mdiff+0x28>
   28d5a:	f8d9 7010 	ldr.w	r7, [r9, #16]
   28d5e:	f104 0e14 	add.w	lr, r4, #20
   28d62:	6926      	ldr	r6, [r4, #16]
   28d64:	f100 0b14 	add.w	fp, r0, #20
   28d68:	60c5      	str	r5, [r0, #12]
   28d6a:	f109 0514 	add.w	r5, r9, #20
   28d6e:	f109 0310 	add.w	r3, r9, #16
   28d72:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   28d76:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   28d7a:	46d9      	mov	r9, fp
   28d7c:	f04f 0c00 	mov.w	ip, #0
   28d80:	9301      	str	r3, [sp, #4]
   28d82:	9b01      	ldr	r3, [sp, #4]
   28d84:	f85e 0b04 	ldr.w	r0, [lr], #4
   28d88:	f853 af04 	ldr.w	sl, [r3, #4]!
   28d8c:	b281      	uxth	r1, r0
   28d8e:	4576      	cmp	r6, lr
   28d90:	9301      	str	r3, [sp, #4]
   28d92:	fa1f f38a 	uxth.w	r3, sl
   28d96:	ea4f 4010 	mov.w	r0, r0, lsr #16
   28d9a:	eba3 0301 	sub.w	r3, r3, r1
   28d9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   28da2:	4463      	add	r3, ip
   28da4:	eb00 4023 	add.w	r0, r0, r3, asr #16
   28da8:	b29b      	uxth	r3, r3
   28daa:	ea4f 4c20 	mov.w	ip, r0, asr #16
   28dae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   28db2:	f849 3b04 	str.w	r3, [r9], #4
   28db6:	d8e4      	bhi.n	28d82 <__mdiff+0x8a>
   28db8:	1b33      	subs	r3, r6, r4
   28dba:	3415      	adds	r4, #21
   28dbc:	3b15      	subs	r3, #21
   28dbe:	f023 0303 	bic.w	r3, r3, #3
   28dc2:	3304      	adds	r3, #4
   28dc4:	42a6      	cmp	r6, r4
   28dc6:	bf38      	it	cc
   28dc8:	2304      	movcc	r3, #4
   28dca:	441d      	add	r5, r3
   28dcc:	445b      	add	r3, fp
   28dce:	462c      	mov	r4, r5
   28dd0:	461e      	mov	r6, r3
   28dd2:	4544      	cmp	r4, r8
   28dd4:	d30e      	bcc.n	28df4 <__mdiff+0xfc>
   28dd6:	f108 0103 	add.w	r1, r8, #3
   28dda:	1b49      	subs	r1, r1, r5
   28ddc:	3d03      	subs	r5, #3
   28dde:	f021 0103 	bic.w	r1, r1, #3
   28de2:	45a8      	cmp	r8, r5
   28de4:	bf38      	it	cc
   28de6:	2100      	movcc	r1, #0
   28de8:	440b      	add	r3, r1
   28dea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   28dee:	b199      	cbz	r1, 28e18 <__mdiff+0x120>
   28df0:	6117      	str	r7, [r2, #16]
   28df2:	e79b      	b.n	28d2c <__mdiff+0x34>
   28df4:	f854 1b04 	ldr.w	r1, [r4], #4
   28df8:	46e6      	mov	lr, ip
   28dfa:	fa1f fc81 	uxth.w	ip, r1
   28dfe:	0c08      	lsrs	r0, r1, #16
   28e00:	4471      	add	r1, lr
   28e02:	44f4      	add	ip, lr
   28e04:	b289      	uxth	r1, r1
   28e06:	eb00 402c 	add.w	r0, r0, ip, asr #16
   28e0a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   28e0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   28e12:	f846 1b04 	str.w	r1, [r6], #4
   28e16:	e7dc      	b.n	28dd2 <__mdiff+0xda>
   28e18:	3f01      	subs	r7, #1
   28e1a:	e7e6      	b.n	28dea <__mdiff+0xf2>
   28e1c:	00038a13 	.word	0x00038a13
   28e20:	00038aa6 	.word	0x00038aa6

00028e24 <__ulp>:
   28e24:	4b0e      	ldr	r3, [pc, #56]	; (28e60 <__ulp+0x3c>)
   28e26:	400b      	ands	r3, r1
   28e28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   28e2c:	2b00      	cmp	r3, #0
   28e2e:	dc08      	bgt.n	28e42 <__ulp+0x1e>
   28e30:	425b      	negs	r3, r3
   28e32:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   28e36:	ea4f 5223 	mov.w	r2, r3, asr #20
   28e3a:	da04      	bge.n	28e46 <__ulp+0x22>
   28e3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   28e40:	4113      	asrs	r3, r2
   28e42:	2200      	movs	r2, #0
   28e44:	e008      	b.n	28e58 <__ulp+0x34>
   28e46:	f1a2 0314 	sub.w	r3, r2, #20
   28e4a:	2b1e      	cmp	r3, #30
   28e4c:	bfd6      	itet	le
   28e4e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   28e52:	2201      	movgt	r2, #1
   28e54:	40da      	lsrle	r2, r3
   28e56:	2300      	movs	r3, #0
   28e58:	4619      	mov	r1, r3
   28e5a:	4610      	mov	r0, r2
   28e5c:	4770      	bx	lr
   28e5e:	bf00      	nop
   28e60:	7ff00000 	.word	0x7ff00000

00028e64 <__b2d>:
   28e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e66:	6902      	ldr	r2, [r0, #16]
   28e68:	f100 0614 	add.w	r6, r0, #20
   28e6c:	4f21      	ldr	r7, [pc, #132]	; (28ef4 <__b2d+0x90>)
   28e6e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   28e72:	f852 4c04 	ldr.w	r4, [r2, #-4]
   28e76:	1f15      	subs	r5, r2, #4
   28e78:	4620      	mov	r0, r4
   28e7a:	f009 f940 	bl	320fe <__hi0bits>
   28e7e:	4603      	mov	r3, r0
   28e80:	f1c0 0020 	rsb	r0, r0, #32
   28e84:	2b0a      	cmp	r3, #10
   28e86:	6008      	str	r0, [r1, #0]
   28e88:	dc13      	bgt.n	28eb2 <__b2d+0x4e>
   28e8a:	42ae      	cmp	r6, r5
   28e8c:	f1c3 0c0b 	rsb	ip, r3, #11
   28e90:	f103 0315 	add.w	r3, r3, #21
   28e94:	bf34      	ite	cc
   28e96:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   28e9a:	2200      	movcs	r2, #0
   28e9c:	fa24 fe0c 	lsr.w	lr, r4, ip
   28ea0:	fa04 f303 	lsl.w	r3, r4, r3
   28ea4:	fa22 f20c 	lsr.w	r2, r2, ip
   28ea8:	ea4e 0107 	orr.w	r1, lr, r7
   28eac:	431a      	orrs	r2, r3
   28eae:	4610      	mov	r0, r2
   28eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28eb2:	42ae      	cmp	r6, r5
   28eb4:	bf36      	itet	cc
   28eb6:	f1a2 0508 	subcc.w	r5, r2, #8
   28eba:	2200      	movcs	r2, #0
   28ebc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   28ec0:	3b0b      	subs	r3, #11
   28ec2:	d014      	beq.n	28eee <__b2d+0x8a>
   28ec4:	f1c3 0720 	rsb	r7, r3, #32
   28ec8:	409c      	lsls	r4, r3
   28eca:	42b5      	cmp	r5, r6
   28ecc:	fa22 f107 	lsr.w	r1, r2, r7
   28ed0:	fa02 f203 	lsl.w	r2, r2, r3
   28ed4:	ea44 0401 	orr.w	r4, r4, r1
   28ed8:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   28edc:	bf8c      	ite	hi
   28ede:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   28ee2:	2400      	movls	r4, #0
   28ee4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   28ee8:	40fc      	lsrs	r4, r7
   28eea:	4322      	orrs	r2, r4
   28eec:	e7df      	b.n	28eae <__b2d+0x4a>
   28eee:	ea44 0107 	orr.w	r1, r4, r7
   28ef2:	e7dc      	b.n	28eae <__b2d+0x4a>
   28ef4:	3ff00000 	.word	0x3ff00000

00028ef8 <__d2b>:
   28ef8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   28efc:	2101      	movs	r1, #1
   28efe:	4690      	mov	r8, r2
   28f00:	4699      	mov	r9, r3
   28f02:	9e08      	ldr	r6, [sp, #32]
   28f04:	f7ff fc7e 	bl	28804 <_Balloc>
   28f08:	4604      	mov	r4, r0
   28f0a:	b930      	cbnz	r0, 28f1a <__d2b+0x22>
   28f0c:	4602      	mov	r2, r0
   28f0e:	4b24      	ldr	r3, [pc, #144]	; (28fa0 <__d2b+0xa8>)
   28f10:	f240 310a 	movw	r1, #778	; 0x30a
   28f14:	4823      	ldr	r0, [pc, #140]	; (28fa4 <__d2b+0xac>)
   28f16:	f7ff f905 	bl	28124 <__assert_func>
   28f1a:	f3c9 550a 	ubfx	r5, r9, #20, #11
   28f1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
   28f22:	b10d      	cbz	r5, 28f28 <__d2b+0x30>
   28f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   28f28:	9301      	str	r3, [sp, #4]
   28f2a:	f1b8 0300 	subs.w	r3, r8, #0
   28f2e:	d024      	beq.n	28f7a <__d2b+0x82>
   28f30:	4668      	mov	r0, sp
   28f32:	9300      	str	r3, [sp, #0]
   28f34:	f009 f905 	bl	32142 <__lo0bits>
   28f38:	e9dd 1200 	ldrd	r1, r2, [sp]
   28f3c:	b1d8      	cbz	r0, 28f76 <__d2b+0x7e>
   28f3e:	f1c0 0320 	rsb	r3, r0, #32
   28f42:	fa02 f303 	lsl.w	r3, r2, r3
   28f46:	40c2      	lsrs	r2, r0
   28f48:	430b      	orrs	r3, r1
   28f4a:	9201      	str	r2, [sp, #4]
   28f4c:	6163      	str	r3, [r4, #20]
   28f4e:	9b01      	ldr	r3, [sp, #4]
   28f50:	2b00      	cmp	r3, #0
   28f52:	61a3      	str	r3, [r4, #24]
   28f54:	bf0c      	ite	eq
   28f56:	2201      	moveq	r2, #1
   28f58:	2202      	movne	r2, #2
   28f5a:	6122      	str	r2, [r4, #16]
   28f5c:	b1ad      	cbz	r5, 28f8a <__d2b+0x92>
   28f5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   28f62:	4405      	add	r5, r0
   28f64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   28f68:	6035      	str	r5, [r6, #0]
   28f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28f6c:	6018      	str	r0, [r3, #0]
   28f6e:	4620      	mov	r0, r4
   28f70:	b002      	add	sp, #8
   28f72:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   28f76:	6161      	str	r1, [r4, #20]
   28f78:	e7e9      	b.n	28f4e <__d2b+0x56>
   28f7a:	a801      	add	r0, sp, #4
   28f7c:	f009 f8e1 	bl	32142 <__lo0bits>
   28f80:	9b01      	ldr	r3, [sp, #4]
   28f82:	3020      	adds	r0, #32
   28f84:	2201      	movs	r2, #1
   28f86:	6163      	str	r3, [r4, #20]
   28f88:	e7e7      	b.n	28f5a <__d2b+0x62>
   28f8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   28f8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   28f92:	6030      	str	r0, [r6, #0]
   28f94:	6918      	ldr	r0, [r3, #16]
   28f96:	f009 f8b2 	bl	320fe <__hi0bits>
   28f9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   28f9e:	e7e4      	b.n	28f6a <__d2b+0x72>
   28fa0:	00038a13 	.word	0x00038a13
   28fa4:	00038aa6 	.word	0x00038aa6

00028fa8 <_svfiprintf_r>:
   28fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28fac:	4698      	mov	r8, r3
   28fae:	898b      	ldrh	r3, [r1, #12]
   28fb0:	b09d      	sub	sp, #116	; 0x74
   28fb2:	4607      	mov	r7, r0
   28fb4:	061b      	lsls	r3, r3, #24
   28fb6:	460d      	mov	r5, r1
   28fb8:	4614      	mov	r4, r2
   28fba:	d510      	bpl.n	28fde <_svfiprintf_r+0x36>
   28fbc:	690b      	ldr	r3, [r1, #16]
   28fbe:	b973      	cbnz	r3, 28fde <_svfiprintf_r+0x36>
   28fc0:	2140      	movs	r1, #64	; 0x40
   28fc2:	f7fe f90f 	bl	271e4 <_malloc_r>
   28fc6:	6028      	str	r0, [r5, #0]
   28fc8:	6128      	str	r0, [r5, #16]
   28fca:	b930      	cbnz	r0, 28fda <_svfiprintf_r+0x32>
   28fcc:	230c      	movs	r3, #12
   28fce:	603b      	str	r3, [r7, #0]
   28fd0:	f04f 30ff 	mov.w	r0, #4294967295
   28fd4:	b01d      	add	sp, #116	; 0x74
   28fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fda:	2340      	movs	r3, #64	; 0x40
   28fdc:	616b      	str	r3, [r5, #20]
   28fde:	2300      	movs	r3, #0
   28fe0:	f8cd 800c 	str.w	r8, [sp, #12]
   28fe4:	f04f 0901 	mov.w	r9, #1
   28fe8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2918c <_svfiprintf_r+0x1e4>
   28fec:	9309      	str	r3, [sp, #36]	; 0x24
   28fee:	2320      	movs	r3, #32
   28ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   28ff4:	2330      	movs	r3, #48	; 0x30
   28ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   28ffa:	4623      	mov	r3, r4
   28ffc:	469a      	mov	sl, r3
   28ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
   29002:	b10a      	cbz	r2, 29008 <_svfiprintf_r+0x60>
   29004:	2a25      	cmp	r2, #37	; 0x25
   29006:	d1f9      	bne.n	28ffc <_svfiprintf_r+0x54>
   29008:	ebba 0b04 	subs.w	fp, sl, r4
   2900c:	d00b      	beq.n	29026 <_svfiprintf_r+0x7e>
   2900e:	465b      	mov	r3, fp
   29010:	4622      	mov	r2, r4
   29012:	4629      	mov	r1, r5
   29014:	4638      	mov	r0, r7
   29016:	f009 f950 	bl	322ba <__ssputs_r>
   2901a:	3001      	adds	r0, #1
   2901c:	f000 80a7 	beq.w	2916e <_svfiprintf_r+0x1c6>
   29020:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29022:	445a      	add	r2, fp
   29024:	9209      	str	r2, [sp, #36]	; 0x24
   29026:	f89a 3000 	ldrb.w	r3, [sl]
   2902a:	2b00      	cmp	r3, #0
   2902c:	f000 809f 	beq.w	2916e <_svfiprintf_r+0x1c6>
   29030:	2300      	movs	r3, #0
   29032:	f04f 32ff 	mov.w	r2, #4294967295
   29036:	f10a 0a01 	add.w	sl, sl, #1
   2903a:	9304      	str	r3, [sp, #16]
   2903c:	9307      	str	r3, [sp, #28]
   2903e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   29042:	931a      	str	r3, [sp, #104]	; 0x68
   29044:	e9cd 2305 	strd	r2, r3, [sp, #20]
   29048:	4654      	mov	r4, sl
   2904a:	2205      	movs	r2, #5
   2904c:	484f      	ldr	r0, [pc, #316]	; (2918c <_svfiprintf_r+0x1e4>)
   2904e:	f814 1b01 	ldrb.w	r1, [r4], #1
   29052:	f009 f846 	bl	320e2 <memchr>
   29056:	9a04      	ldr	r2, [sp, #16]
   29058:	b9d8      	cbnz	r0, 29092 <_svfiprintf_r+0xea>
   2905a:	06d0      	lsls	r0, r2, #27
   2905c:	bf44      	itt	mi
   2905e:	2320      	movmi	r3, #32
   29060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   29064:	0711      	lsls	r1, r2, #28
   29066:	bf44      	itt	mi
   29068:	232b      	movmi	r3, #43	; 0x2b
   2906a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2906e:	f89a 3000 	ldrb.w	r3, [sl]
   29072:	2b2a      	cmp	r3, #42	; 0x2a
   29074:	d015      	beq.n	290a2 <_svfiprintf_r+0xfa>
   29076:	9a07      	ldr	r2, [sp, #28]
   29078:	4654      	mov	r4, sl
   2907a:	2000      	movs	r0, #0
   2907c:	f04f 0c0a 	mov.w	ip, #10
   29080:	4621      	mov	r1, r4
   29082:	f811 3b01 	ldrb.w	r3, [r1], #1
   29086:	3b30      	subs	r3, #48	; 0x30
   29088:	2b09      	cmp	r3, #9
   2908a:	d94b      	bls.n	29124 <_svfiprintf_r+0x17c>
   2908c:	b1b0      	cbz	r0, 290bc <_svfiprintf_r+0x114>
   2908e:	9207      	str	r2, [sp, #28]
   29090:	e014      	b.n	290bc <_svfiprintf_r+0x114>
   29092:	eba0 0308 	sub.w	r3, r0, r8
   29096:	46a2      	mov	sl, r4
   29098:	fa09 f303 	lsl.w	r3, r9, r3
   2909c:	4313      	orrs	r3, r2
   2909e:	9304      	str	r3, [sp, #16]
   290a0:	e7d2      	b.n	29048 <_svfiprintf_r+0xa0>
   290a2:	9b03      	ldr	r3, [sp, #12]
   290a4:	1d19      	adds	r1, r3, #4
   290a6:	681b      	ldr	r3, [r3, #0]
   290a8:	2b00      	cmp	r3, #0
   290aa:	9103      	str	r1, [sp, #12]
   290ac:	bfbb      	ittet	lt
   290ae:	425b      	neglt	r3, r3
   290b0:	f042 0202 	orrlt.w	r2, r2, #2
   290b4:	9307      	strge	r3, [sp, #28]
   290b6:	9307      	strlt	r3, [sp, #28]
   290b8:	bfb8      	it	lt
   290ba:	9204      	strlt	r2, [sp, #16]
   290bc:	7823      	ldrb	r3, [r4, #0]
   290be:	2b2e      	cmp	r3, #46	; 0x2e
   290c0:	d10a      	bne.n	290d8 <_svfiprintf_r+0x130>
   290c2:	7863      	ldrb	r3, [r4, #1]
   290c4:	2b2a      	cmp	r3, #42	; 0x2a
   290c6:	d132      	bne.n	2912e <_svfiprintf_r+0x186>
   290c8:	9b03      	ldr	r3, [sp, #12]
   290ca:	3402      	adds	r4, #2
   290cc:	1d1a      	adds	r2, r3, #4
   290ce:	681b      	ldr	r3, [r3, #0]
   290d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   290d4:	9203      	str	r2, [sp, #12]
   290d6:	9305      	str	r3, [sp, #20]
   290d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 29190 <_svfiprintf_r+0x1e8>
   290dc:	2203      	movs	r2, #3
   290de:	7821      	ldrb	r1, [r4, #0]
   290e0:	4650      	mov	r0, sl
   290e2:	f008 fffe 	bl	320e2 <memchr>
   290e6:	b138      	cbz	r0, 290f8 <_svfiprintf_r+0x150>
   290e8:	eba0 000a 	sub.w	r0, r0, sl
   290ec:	2240      	movs	r2, #64	; 0x40
   290ee:	9b04      	ldr	r3, [sp, #16]
   290f0:	3401      	adds	r4, #1
   290f2:	4082      	lsls	r2, r0
   290f4:	4313      	orrs	r3, r2
   290f6:	9304      	str	r3, [sp, #16]
   290f8:	f814 1b01 	ldrb.w	r1, [r4], #1
   290fc:	2206      	movs	r2, #6
   290fe:	4825      	ldr	r0, [pc, #148]	; (29194 <_svfiprintf_r+0x1ec>)
   29100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29104:	f008 ffed 	bl	320e2 <memchr>
   29108:	2800      	cmp	r0, #0
   2910a:	d036      	beq.n	2917a <_svfiprintf_r+0x1d2>
   2910c:	4b22      	ldr	r3, [pc, #136]	; (29198 <_svfiprintf_r+0x1f0>)
   2910e:	bb1b      	cbnz	r3, 29158 <_svfiprintf_r+0x1b0>
   29110:	9b03      	ldr	r3, [sp, #12]
   29112:	3307      	adds	r3, #7
   29114:	f023 0307 	bic.w	r3, r3, #7
   29118:	3308      	adds	r3, #8
   2911a:	9303      	str	r3, [sp, #12]
   2911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2911e:	4433      	add	r3, r6
   29120:	9309      	str	r3, [sp, #36]	; 0x24
   29122:	e76a      	b.n	28ffa <_svfiprintf_r+0x52>
   29124:	fb0c 3202 	mla	r2, ip, r2, r3
   29128:	460c      	mov	r4, r1
   2912a:	2001      	movs	r0, #1
   2912c:	e7a8      	b.n	29080 <_svfiprintf_r+0xd8>
   2912e:	2300      	movs	r3, #0
   29130:	3401      	adds	r4, #1
   29132:	f04f 0c0a 	mov.w	ip, #10
   29136:	4619      	mov	r1, r3
   29138:	9305      	str	r3, [sp, #20]
   2913a:	4620      	mov	r0, r4
   2913c:	f810 2b01 	ldrb.w	r2, [r0], #1
   29140:	3a30      	subs	r2, #48	; 0x30
   29142:	2a09      	cmp	r2, #9
   29144:	d903      	bls.n	2914e <_svfiprintf_r+0x1a6>
   29146:	2b00      	cmp	r3, #0
   29148:	d0c6      	beq.n	290d8 <_svfiprintf_r+0x130>
   2914a:	9105      	str	r1, [sp, #20]
   2914c:	e7c4      	b.n	290d8 <_svfiprintf_r+0x130>
   2914e:	fb0c 2101 	mla	r1, ip, r1, r2
   29152:	4604      	mov	r4, r0
   29154:	2301      	movs	r3, #1
   29156:	e7f0      	b.n	2913a <_svfiprintf_r+0x192>
   29158:	ab03      	add	r3, sp, #12
   2915a:	462a      	mov	r2, r5
   2915c:	a904      	add	r1, sp, #16
   2915e:	4638      	mov	r0, r7
   29160:	9300      	str	r3, [sp, #0]
   29162:	4b0e      	ldr	r3, [pc, #56]	; (2919c <_svfiprintf_r+0x1f4>)
   29164:	f7fe f898 	bl	27298 <_printf_float>
   29168:	1c42      	adds	r2, r0, #1
   2916a:	4606      	mov	r6, r0
   2916c:	d1d6      	bne.n	2911c <_svfiprintf_r+0x174>
   2916e:	89ab      	ldrh	r3, [r5, #12]
   29170:	065b      	lsls	r3, r3, #25
   29172:	f53f af2d 	bmi.w	28fd0 <_svfiprintf_r+0x28>
   29176:	9809      	ldr	r0, [sp, #36]	; 0x24
   29178:	e72c      	b.n	28fd4 <_svfiprintf_r+0x2c>
   2917a:	ab03      	add	r3, sp, #12
   2917c:	462a      	mov	r2, r5
   2917e:	a904      	add	r1, sp, #16
   29180:	4638      	mov	r0, r7
   29182:	9300      	str	r3, [sp, #0]
   29184:	4b05      	ldr	r3, [pc, #20]	; (2919c <_svfiprintf_r+0x1f4>)
   29186:	f7fe fabd 	bl	27704 <_printf_i>
   2918a:	e7ed      	b.n	29168 <_svfiprintf_r+0x1c0>
   2918c:	00038b1b 	.word	0x00038b1b
   29190:	00038b21 	.word	0x00038b21
   29194:	00038b25 	.word	0x00038b25
   29198:	00027299 	.word	0x00027299
   2919c:	000322bb 	.word	0x000322bb

000291a0 <_vfiprintf_r>:
   291a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   291a4:	460d      	mov	r5, r1
   291a6:	b09d      	sub	sp, #116	; 0x74
   291a8:	4614      	mov	r4, r2
   291aa:	4698      	mov	r8, r3
   291ac:	4606      	mov	r6, r0
   291ae:	b118      	cbz	r0, 291b8 <_vfiprintf_r+0x18>
   291b0:	6983      	ldr	r3, [r0, #24]
   291b2:	b90b      	cbnz	r3, 291b8 <_vfiprintf_r+0x18>
   291b4:	f7ff f816 	bl	281e4 <__sinit>
   291b8:	4b87      	ldr	r3, [pc, #540]	; (293d8 <_vfiprintf_r+0x238>)
   291ba:	429d      	cmp	r5, r3
   291bc:	d11b      	bne.n	291f6 <_vfiprintf_r+0x56>
   291be:	6875      	ldr	r5, [r6, #4]
   291c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   291c2:	07d9      	lsls	r1, r3, #31
   291c4:	d405      	bmi.n	291d2 <_vfiprintf_r+0x32>
   291c6:	89ab      	ldrh	r3, [r5, #12]
   291c8:	059a      	lsls	r2, r3, #22
   291ca:	d402      	bmi.n	291d2 <_vfiprintf_r+0x32>
   291cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   291ce:	f002 fc02 	bl	2b9d6 <__retarget_lock_acquire_recursive>
   291d2:	89ab      	ldrh	r3, [r5, #12]
   291d4:	071b      	lsls	r3, r3, #28
   291d6:	d501      	bpl.n	291dc <_vfiprintf_r+0x3c>
   291d8:	692b      	ldr	r3, [r5, #16]
   291da:	b9eb      	cbnz	r3, 29218 <_vfiprintf_r+0x78>
   291dc:	4629      	mov	r1, r5
   291de:	4630      	mov	r0, r6
   291e0:	f000 f998 	bl	29514 <__swsetup_r>
   291e4:	b1c0      	cbz	r0, 29218 <_vfiprintf_r+0x78>
   291e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   291e8:	07dc      	lsls	r4, r3, #31
   291ea:	d50e      	bpl.n	2920a <_vfiprintf_r+0x6a>
   291ec:	f04f 30ff 	mov.w	r0, #4294967295
   291f0:	b01d      	add	sp, #116	; 0x74
   291f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   291f6:	4b79      	ldr	r3, [pc, #484]	; (293dc <_vfiprintf_r+0x23c>)
   291f8:	429d      	cmp	r5, r3
   291fa:	d101      	bne.n	29200 <_vfiprintf_r+0x60>
   291fc:	68b5      	ldr	r5, [r6, #8]
   291fe:	e7df      	b.n	291c0 <_vfiprintf_r+0x20>
   29200:	4b77      	ldr	r3, [pc, #476]	; (293e0 <_vfiprintf_r+0x240>)
   29202:	429d      	cmp	r5, r3
   29204:	bf08      	it	eq
   29206:	68f5      	ldreq	r5, [r6, #12]
   29208:	e7da      	b.n	291c0 <_vfiprintf_r+0x20>
   2920a:	89ab      	ldrh	r3, [r5, #12]
   2920c:	0598      	lsls	r0, r3, #22
   2920e:	d4ed      	bmi.n	291ec <_vfiprintf_r+0x4c>
   29210:	6da8      	ldr	r0, [r5, #88]	; 0x58
   29212:	f002 fbe8 	bl	2b9e6 <__retarget_lock_release_recursive>
   29216:	e7e9      	b.n	291ec <_vfiprintf_r+0x4c>
   29218:	2300      	movs	r3, #0
   2921a:	f8cd 800c 	str.w	r8, [sp, #12]
   2921e:	f04f 0901 	mov.w	r9, #1
   29222:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 293e4 <_vfiprintf_r+0x244>
   29226:	9309      	str	r3, [sp, #36]	; 0x24
   29228:	2320      	movs	r3, #32
   2922a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2922e:	2330      	movs	r3, #48	; 0x30
   29230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   29234:	4623      	mov	r3, r4
   29236:	469a      	mov	sl, r3
   29238:	f813 2b01 	ldrb.w	r2, [r3], #1
   2923c:	b10a      	cbz	r2, 29242 <_vfiprintf_r+0xa2>
   2923e:	2a25      	cmp	r2, #37	; 0x25
   29240:	d1f9      	bne.n	29236 <_vfiprintf_r+0x96>
   29242:	ebba 0b04 	subs.w	fp, sl, r4
   29246:	d00b      	beq.n	29260 <_vfiprintf_r+0xc0>
   29248:	465b      	mov	r3, fp
   2924a:	4622      	mov	r2, r4
   2924c:	4629      	mov	r1, r5
   2924e:	4630      	mov	r0, r6
   29250:	f009 f8a3 	bl	3239a <__sfputs_r>
   29254:	3001      	adds	r0, #1
   29256:	f000 80a6 	beq.w	293a6 <_vfiprintf_r+0x206>
   2925a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2925c:	445a      	add	r2, fp
   2925e:	9209      	str	r2, [sp, #36]	; 0x24
   29260:	f89a 3000 	ldrb.w	r3, [sl]
   29264:	2b00      	cmp	r3, #0
   29266:	f000 809e 	beq.w	293a6 <_vfiprintf_r+0x206>
   2926a:	2300      	movs	r3, #0
   2926c:	f04f 32ff 	mov.w	r2, #4294967295
   29270:	f10a 0a01 	add.w	sl, sl, #1
   29274:	9304      	str	r3, [sp, #16]
   29276:	9307      	str	r3, [sp, #28]
   29278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2927c:	931a      	str	r3, [sp, #104]	; 0x68
   2927e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   29282:	4654      	mov	r4, sl
   29284:	2205      	movs	r2, #5
   29286:	4857      	ldr	r0, [pc, #348]	; (293e4 <_vfiprintf_r+0x244>)
   29288:	f814 1b01 	ldrb.w	r1, [r4], #1
   2928c:	f008 ff29 	bl	320e2 <memchr>
   29290:	9b04      	ldr	r3, [sp, #16]
   29292:	b9d0      	cbnz	r0, 292ca <_vfiprintf_r+0x12a>
   29294:	06d9      	lsls	r1, r3, #27
   29296:	bf44      	itt	mi
   29298:	2220      	movmi	r2, #32
   2929a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2929e:	071a      	lsls	r2, r3, #28
   292a0:	bf44      	itt	mi
   292a2:	222b      	movmi	r2, #43	; 0x2b
   292a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   292a8:	f89a 2000 	ldrb.w	r2, [sl]
   292ac:	2a2a      	cmp	r2, #42	; 0x2a
   292ae:	d014      	beq.n	292da <_vfiprintf_r+0x13a>
   292b0:	9a07      	ldr	r2, [sp, #28]
   292b2:	4654      	mov	r4, sl
   292b4:	2000      	movs	r0, #0
   292b6:	f04f 0c0a 	mov.w	ip, #10
   292ba:	4621      	mov	r1, r4
   292bc:	f811 3b01 	ldrb.w	r3, [r1], #1
   292c0:	3b30      	subs	r3, #48	; 0x30
   292c2:	2b09      	cmp	r3, #9
   292c4:	d94a      	bls.n	2935c <_vfiprintf_r+0x1bc>
   292c6:	b970      	cbnz	r0, 292e6 <_vfiprintf_r+0x146>
   292c8:	e014      	b.n	292f4 <_vfiprintf_r+0x154>
   292ca:	eba0 0008 	sub.w	r0, r0, r8
   292ce:	46a2      	mov	sl, r4
   292d0:	fa09 f000 	lsl.w	r0, r9, r0
   292d4:	4318      	orrs	r0, r3
   292d6:	9004      	str	r0, [sp, #16]
   292d8:	e7d3      	b.n	29282 <_vfiprintf_r+0xe2>
   292da:	9a03      	ldr	r2, [sp, #12]
   292dc:	1d11      	adds	r1, r2, #4
   292de:	6812      	ldr	r2, [r2, #0]
   292e0:	2a00      	cmp	r2, #0
   292e2:	9103      	str	r1, [sp, #12]
   292e4:	db01      	blt.n	292ea <_vfiprintf_r+0x14a>
   292e6:	9207      	str	r2, [sp, #28]
   292e8:	e004      	b.n	292f4 <_vfiprintf_r+0x154>
   292ea:	4252      	negs	r2, r2
   292ec:	f043 0302 	orr.w	r3, r3, #2
   292f0:	9207      	str	r2, [sp, #28]
   292f2:	9304      	str	r3, [sp, #16]
   292f4:	7823      	ldrb	r3, [r4, #0]
   292f6:	2b2e      	cmp	r3, #46	; 0x2e
   292f8:	d10a      	bne.n	29310 <_vfiprintf_r+0x170>
   292fa:	7863      	ldrb	r3, [r4, #1]
   292fc:	2b2a      	cmp	r3, #42	; 0x2a
   292fe:	d132      	bne.n	29366 <_vfiprintf_r+0x1c6>
   29300:	9b03      	ldr	r3, [sp, #12]
   29302:	3402      	adds	r4, #2
   29304:	1d1a      	adds	r2, r3, #4
   29306:	681b      	ldr	r3, [r3, #0]
   29308:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2930c:	9203      	str	r2, [sp, #12]
   2930e:	9305      	str	r3, [sp, #20]
   29310:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 293e8 <_vfiprintf_r+0x248>
   29314:	2203      	movs	r2, #3
   29316:	7821      	ldrb	r1, [r4, #0]
   29318:	4650      	mov	r0, sl
   2931a:	f008 fee2 	bl	320e2 <memchr>
   2931e:	b138      	cbz	r0, 29330 <_vfiprintf_r+0x190>
   29320:	eba0 000a 	sub.w	r0, r0, sl
   29324:	2240      	movs	r2, #64	; 0x40
   29326:	9b04      	ldr	r3, [sp, #16]
   29328:	3401      	adds	r4, #1
   2932a:	4082      	lsls	r2, r0
   2932c:	4313      	orrs	r3, r2
   2932e:	9304      	str	r3, [sp, #16]
   29330:	f814 1b01 	ldrb.w	r1, [r4], #1
   29334:	2206      	movs	r2, #6
   29336:	482d      	ldr	r0, [pc, #180]	; (293ec <_vfiprintf_r+0x24c>)
   29338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2933c:	f008 fed1 	bl	320e2 <memchr>
   29340:	2800      	cmp	r0, #0
   29342:	d03f      	beq.n	293c4 <_vfiprintf_r+0x224>
   29344:	4b2a      	ldr	r3, [pc, #168]	; (293f0 <_vfiprintf_r+0x250>)
   29346:	bb1b      	cbnz	r3, 29390 <_vfiprintf_r+0x1f0>
   29348:	9b03      	ldr	r3, [sp, #12]
   2934a:	3307      	adds	r3, #7
   2934c:	f023 0307 	bic.w	r3, r3, #7
   29350:	3308      	adds	r3, #8
   29352:	9303      	str	r3, [sp, #12]
   29354:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29356:	443b      	add	r3, r7
   29358:	9309      	str	r3, [sp, #36]	; 0x24
   2935a:	e76b      	b.n	29234 <_vfiprintf_r+0x94>
   2935c:	fb0c 3202 	mla	r2, ip, r2, r3
   29360:	460c      	mov	r4, r1
   29362:	2001      	movs	r0, #1
   29364:	e7a9      	b.n	292ba <_vfiprintf_r+0x11a>
   29366:	2300      	movs	r3, #0
   29368:	3401      	adds	r4, #1
   2936a:	f04f 0c0a 	mov.w	ip, #10
   2936e:	4619      	mov	r1, r3
   29370:	9305      	str	r3, [sp, #20]
   29372:	4620      	mov	r0, r4
   29374:	f810 2b01 	ldrb.w	r2, [r0], #1
   29378:	3a30      	subs	r2, #48	; 0x30
   2937a:	2a09      	cmp	r2, #9
   2937c:	d903      	bls.n	29386 <_vfiprintf_r+0x1e6>
   2937e:	2b00      	cmp	r3, #0
   29380:	d0c6      	beq.n	29310 <_vfiprintf_r+0x170>
   29382:	9105      	str	r1, [sp, #20]
   29384:	e7c4      	b.n	29310 <_vfiprintf_r+0x170>
   29386:	fb0c 2101 	mla	r1, ip, r1, r2
   2938a:	4604      	mov	r4, r0
   2938c:	2301      	movs	r3, #1
   2938e:	e7f0      	b.n	29372 <_vfiprintf_r+0x1d2>
   29390:	ab03      	add	r3, sp, #12
   29392:	462a      	mov	r2, r5
   29394:	a904      	add	r1, sp, #16
   29396:	4630      	mov	r0, r6
   29398:	9300      	str	r3, [sp, #0]
   2939a:	4b16      	ldr	r3, [pc, #88]	; (293f4 <_vfiprintf_r+0x254>)
   2939c:	f7fd ff7c 	bl	27298 <_printf_float>
   293a0:	4607      	mov	r7, r0
   293a2:	1c78      	adds	r0, r7, #1
   293a4:	d1d6      	bne.n	29354 <_vfiprintf_r+0x1b4>
   293a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   293a8:	07d9      	lsls	r1, r3, #31
   293aa:	d405      	bmi.n	293b8 <_vfiprintf_r+0x218>
   293ac:	89ab      	ldrh	r3, [r5, #12]
   293ae:	059a      	lsls	r2, r3, #22
   293b0:	d402      	bmi.n	293b8 <_vfiprintf_r+0x218>
   293b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   293b4:	f002 fb17 	bl	2b9e6 <__retarget_lock_release_recursive>
   293b8:	89ab      	ldrh	r3, [r5, #12]
   293ba:	065b      	lsls	r3, r3, #25
   293bc:	f53f af16 	bmi.w	291ec <_vfiprintf_r+0x4c>
   293c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   293c2:	e715      	b.n	291f0 <_vfiprintf_r+0x50>
   293c4:	ab03      	add	r3, sp, #12
   293c6:	462a      	mov	r2, r5
   293c8:	a904      	add	r1, sp, #16
   293ca:	4630      	mov	r0, r6
   293cc:	9300      	str	r3, [sp, #0]
   293ce:	4b09      	ldr	r3, [pc, #36]	; (293f4 <_vfiprintf_r+0x254>)
   293d0:	f7fe f998 	bl	27704 <_printf_i>
   293d4:	e7e4      	b.n	293a0 <_vfiprintf_r+0x200>
   293d6:	bf00      	nop
   293d8:	000342e8 	.word	0x000342e8
   293dc:	000342c8 	.word	0x000342c8
   293e0:	000342a8 	.word	0x000342a8
   293e4:	00038b1b 	.word	0x00038b1b
   293e8:	00038b21 	.word	0x00038b21
   293ec:	00038b25 	.word	0x00038b25
   293f0:	00027299 	.word	0x00027299
   293f4:	0003239b 	.word	0x0003239b

000293f8 <siscanf>:
   293f8:	b40e      	push	{r1, r2, r3}
   293fa:	b530      	push	{r4, r5, lr}
   293fc:	b09c      	sub	sp, #112	; 0x70
   293fe:	f44f 7201 	mov.w	r2, #516	; 0x204
   29402:	ac1f      	add	r4, sp, #124	; 0x7c
   29404:	f8ad 2014 	strh.w	r2, [sp, #20]
   29408:	9002      	str	r0, [sp, #8]
   2940a:	f854 5b04 	ldr.w	r5, [r4], #4
   2940e:	9006      	str	r0, [sp, #24]
   29410:	f7df fffb 	bl	940a <strlen>
   29414:	4b0b      	ldr	r3, [pc, #44]	; (29444 <siscanf+0x4c>)
   29416:	462a      	mov	r2, r5
   29418:	9003      	str	r0, [sp, #12]
   2941a:	a902      	add	r1, sp, #8
   2941c:	930b      	str	r3, [sp, #44]	; 0x2c
   2941e:	2300      	movs	r3, #0
   29420:	9007      	str	r0, [sp, #28]
   29422:	930f      	str	r3, [sp, #60]	; 0x3c
   29424:	9314      	str	r3, [sp, #80]	; 0x50
   29426:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2942a:	4807      	ldr	r0, [pc, #28]	; (29448 <siscanf+0x50>)
   2942c:	f8ad 3016 	strh.w	r3, [sp, #22]
   29430:	4623      	mov	r3, r4
   29432:	6800      	ldr	r0, [r0, #0]
   29434:	9401      	str	r4, [sp, #4]
   29436:	f000 f983 	bl	29740 <__ssvfiscanf_r>
   2943a:	b01c      	add	sp, #112	; 0x70
   2943c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   29440:	b003      	add	sp, #12
   29442:	4770      	bx	lr
   29444:	000323e1 	.word	0x000323e1
   29448:	200087f8 	.word	0x200087f8

0002944c <__swbuf_r>:
   2944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2944e:	460e      	mov	r6, r1
   29450:	4614      	mov	r4, r2
   29452:	4605      	mov	r5, r0
   29454:	b118      	cbz	r0, 2945e <__swbuf_r+0x12>
   29456:	6983      	ldr	r3, [r0, #24]
   29458:	b90b      	cbnz	r3, 2945e <__swbuf_r+0x12>
   2945a:	f7fe fec3 	bl	281e4 <__sinit>
   2945e:	4b21      	ldr	r3, [pc, #132]	; (294e4 <__swbuf_r+0x98>)
   29460:	429c      	cmp	r4, r3
   29462:	d110      	bne.n	29486 <__swbuf_r+0x3a>
   29464:	686c      	ldr	r4, [r5, #4]
   29466:	69a3      	ldr	r3, [r4, #24]
   29468:	60a3      	str	r3, [r4, #8]
   2946a:	89a3      	ldrh	r3, [r4, #12]
   2946c:	071a      	lsls	r2, r3, #28
   2946e:	d501      	bpl.n	29474 <__swbuf_r+0x28>
   29470:	6923      	ldr	r3, [r4, #16]
   29472:	b993      	cbnz	r3, 2949a <__swbuf_r+0x4e>
   29474:	4621      	mov	r1, r4
   29476:	4628      	mov	r0, r5
   29478:	f000 f84c 	bl	29514 <__swsetup_r>
   2947c:	b168      	cbz	r0, 2949a <__swbuf_r+0x4e>
   2947e:	f04f 37ff 	mov.w	r7, #4294967295
   29482:	4638      	mov	r0, r7
   29484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29486:	4b18      	ldr	r3, [pc, #96]	; (294e8 <__swbuf_r+0x9c>)
   29488:	429c      	cmp	r4, r3
   2948a:	d101      	bne.n	29490 <__swbuf_r+0x44>
   2948c:	68ac      	ldr	r4, [r5, #8]
   2948e:	e7ea      	b.n	29466 <__swbuf_r+0x1a>
   29490:	4b16      	ldr	r3, [pc, #88]	; (294ec <__swbuf_r+0xa0>)
   29492:	429c      	cmp	r4, r3
   29494:	bf08      	it	eq
   29496:	68ec      	ldreq	r4, [r5, #12]
   29498:	e7e5      	b.n	29466 <__swbuf_r+0x1a>
   2949a:	6923      	ldr	r3, [r4, #16]
   2949c:	b2f6      	uxtb	r6, r6
   2949e:	6820      	ldr	r0, [r4, #0]
   294a0:	4637      	mov	r7, r6
   294a2:	1ac0      	subs	r0, r0, r3
   294a4:	6963      	ldr	r3, [r4, #20]
   294a6:	4283      	cmp	r3, r0
   294a8:	dc05      	bgt.n	294b6 <__swbuf_r+0x6a>
   294aa:	4621      	mov	r1, r4
   294ac:	4628      	mov	r0, r5
   294ae:	f000 f8b9 	bl	29624 <_fflush_r>
   294b2:	2800      	cmp	r0, #0
   294b4:	d1e3      	bne.n	2947e <__swbuf_r+0x32>
   294b6:	68a3      	ldr	r3, [r4, #8]
   294b8:	3001      	adds	r0, #1
   294ba:	3b01      	subs	r3, #1
   294bc:	60a3      	str	r3, [r4, #8]
   294be:	6823      	ldr	r3, [r4, #0]
   294c0:	1c5a      	adds	r2, r3, #1
   294c2:	6022      	str	r2, [r4, #0]
   294c4:	701e      	strb	r6, [r3, #0]
   294c6:	6963      	ldr	r3, [r4, #20]
   294c8:	4283      	cmp	r3, r0
   294ca:	d004      	beq.n	294d6 <__swbuf_r+0x8a>
   294cc:	89a3      	ldrh	r3, [r4, #12]
   294ce:	07db      	lsls	r3, r3, #31
   294d0:	d5d7      	bpl.n	29482 <__swbuf_r+0x36>
   294d2:	2e0a      	cmp	r6, #10
   294d4:	d1d5      	bne.n	29482 <__swbuf_r+0x36>
   294d6:	4621      	mov	r1, r4
   294d8:	4628      	mov	r0, r5
   294da:	f000 f8a3 	bl	29624 <_fflush_r>
   294de:	2800      	cmp	r0, #0
   294e0:	d0cf      	beq.n	29482 <__swbuf_r+0x36>
   294e2:	e7cc      	b.n	2947e <__swbuf_r+0x32>
   294e4:	000342e8 	.word	0x000342e8
   294e8:	000342c8 	.word	0x000342c8
   294ec:	000342a8 	.word	0x000342a8

000294f0 <_write_r>:
   294f0:	b538      	push	{r3, r4, r5, lr}
   294f2:	4604      	mov	r4, r0
   294f4:	4d06      	ldr	r5, [pc, #24]	; (29510 <_write_r+0x20>)
   294f6:	4608      	mov	r0, r1
   294f8:	4611      	mov	r1, r2
   294fa:	2200      	movs	r2, #0
   294fc:	602a      	str	r2, [r5, #0]
   294fe:	461a      	mov	r2, r3
   29500:	f002 fa42 	bl	2b988 <_write>
   29504:	1c43      	adds	r3, r0, #1
   29506:	d102      	bne.n	2950e <_write_r+0x1e>
   29508:	682b      	ldr	r3, [r5, #0]
   2950a:	b103      	cbz	r3, 2950e <_write_r+0x1e>
   2950c:	6023      	str	r3, [r4, #0]
   2950e:	bd38      	pop	{r3, r4, r5, pc}
   29510:	20030ea4 	.word	0x20030ea4

00029514 <__swsetup_r>:
   29514:	4b31      	ldr	r3, [pc, #196]	; (295dc <__swsetup_r+0xc8>)
   29516:	b570      	push	{r4, r5, r6, lr}
   29518:	681d      	ldr	r5, [r3, #0]
   2951a:	4606      	mov	r6, r0
   2951c:	460c      	mov	r4, r1
   2951e:	b125      	cbz	r5, 2952a <__swsetup_r+0x16>
   29520:	69ab      	ldr	r3, [r5, #24]
   29522:	b913      	cbnz	r3, 2952a <__swsetup_r+0x16>
   29524:	4628      	mov	r0, r5
   29526:	f7fe fe5d 	bl	281e4 <__sinit>
   2952a:	4b2d      	ldr	r3, [pc, #180]	; (295e0 <__swsetup_r+0xcc>)
   2952c:	429c      	cmp	r4, r3
   2952e:	d10e      	bne.n	2954e <__swsetup_r+0x3a>
   29530:	686c      	ldr	r4, [r5, #4]
   29532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29536:	071a      	lsls	r2, r3, #28
   29538:	d42c      	bmi.n	29594 <__swsetup_r+0x80>
   2953a:	06dd      	lsls	r5, r3, #27
   2953c:	d411      	bmi.n	29562 <__swsetup_r+0x4e>
   2953e:	2209      	movs	r2, #9
   29540:	6032      	str	r2, [r6, #0]
   29542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29546:	f04f 30ff 	mov.w	r0, #4294967295
   2954a:	81a3      	strh	r3, [r4, #12]
   2954c:	e03d      	b.n	295ca <__swsetup_r+0xb6>
   2954e:	4b25      	ldr	r3, [pc, #148]	; (295e4 <__swsetup_r+0xd0>)
   29550:	429c      	cmp	r4, r3
   29552:	d101      	bne.n	29558 <__swsetup_r+0x44>
   29554:	68ac      	ldr	r4, [r5, #8]
   29556:	e7ec      	b.n	29532 <__swsetup_r+0x1e>
   29558:	4b23      	ldr	r3, [pc, #140]	; (295e8 <__swsetup_r+0xd4>)
   2955a:	429c      	cmp	r4, r3
   2955c:	bf08      	it	eq
   2955e:	68ec      	ldreq	r4, [r5, #12]
   29560:	e7e7      	b.n	29532 <__swsetup_r+0x1e>
   29562:	0758      	lsls	r0, r3, #29
   29564:	d512      	bpl.n	2958c <__swsetup_r+0x78>
   29566:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29568:	b141      	cbz	r1, 2957c <__swsetup_r+0x68>
   2956a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2956e:	4299      	cmp	r1, r3
   29570:	d002      	beq.n	29578 <__swsetup_r+0x64>
   29572:	4630      	mov	r0, r6
   29574:	f7fd fdec 	bl	27150 <_free_r>
   29578:	2300      	movs	r3, #0
   2957a:	6363      	str	r3, [r4, #52]	; 0x34
   2957c:	89a3      	ldrh	r3, [r4, #12]
   2957e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29582:	81a3      	strh	r3, [r4, #12]
   29584:	2300      	movs	r3, #0
   29586:	6063      	str	r3, [r4, #4]
   29588:	6923      	ldr	r3, [r4, #16]
   2958a:	6023      	str	r3, [r4, #0]
   2958c:	89a3      	ldrh	r3, [r4, #12]
   2958e:	f043 0308 	orr.w	r3, r3, #8
   29592:	81a3      	strh	r3, [r4, #12]
   29594:	6923      	ldr	r3, [r4, #16]
   29596:	b94b      	cbnz	r3, 295ac <__swsetup_r+0x98>
   29598:	89a3      	ldrh	r3, [r4, #12]
   2959a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2959e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   295a2:	d003      	beq.n	295ac <__swsetup_r+0x98>
   295a4:	4621      	mov	r1, r4
   295a6:	4630      	mov	r0, r6
   295a8:	f000 f88a 	bl	296c0 <__smakebuf_r>
   295ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   295b0:	f013 0201 	ands.w	r2, r3, #1
   295b4:	d00a      	beq.n	295cc <__swsetup_r+0xb8>
   295b6:	2200      	movs	r2, #0
   295b8:	60a2      	str	r2, [r4, #8]
   295ba:	6962      	ldr	r2, [r4, #20]
   295bc:	4252      	negs	r2, r2
   295be:	61a2      	str	r2, [r4, #24]
   295c0:	6922      	ldr	r2, [r4, #16]
   295c2:	b942      	cbnz	r2, 295d6 <__swsetup_r+0xc2>
   295c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   295c8:	d1bb      	bne.n	29542 <__swsetup_r+0x2e>
   295ca:	bd70      	pop	{r4, r5, r6, pc}
   295cc:	0799      	lsls	r1, r3, #30
   295ce:	bf58      	it	pl
   295d0:	6962      	ldrpl	r2, [r4, #20]
   295d2:	60a2      	str	r2, [r4, #8]
   295d4:	e7f4      	b.n	295c0 <__swsetup_r+0xac>
   295d6:	2000      	movs	r0, #0
   295d8:	e7f7      	b.n	295ca <__swsetup_r+0xb6>
   295da:	bf00      	nop
   295dc:	200087f8 	.word	0x200087f8
   295e0:	000342e8 	.word	0x000342e8
   295e4:	000342c8 	.word	0x000342c8
   295e8:	000342a8 	.word	0x000342a8

000295ec <_close_r>:
   295ec:	b538      	push	{r3, r4, r5, lr}
   295ee:	2300      	movs	r3, #0
   295f0:	4d05      	ldr	r5, [pc, #20]	; (29608 <_close_r+0x1c>)
   295f2:	4604      	mov	r4, r0
   295f4:	4608      	mov	r0, r1
   295f6:	602b      	str	r3, [r5, #0]
   295f8:	f002 f9ca 	bl	2b990 <_close>
   295fc:	1c43      	adds	r3, r0, #1
   295fe:	d102      	bne.n	29606 <_close_r+0x1a>
   29600:	682b      	ldr	r3, [r5, #0]
   29602:	b103      	cbz	r3, 29606 <_close_r+0x1a>
   29604:	6023      	str	r3, [r4, #0]
   29606:	bd38      	pop	{r3, r4, r5, pc}
   29608:	20030ea4 	.word	0x20030ea4

0002960c <__env_lock>:
   2960c:	4801      	ldr	r0, [pc, #4]	; (29614 <__env_lock+0x8>)
   2960e:	f002 b9e2 	b.w	2b9d6 <__retarget_lock_acquire_recursive>
   29612:	bf00      	nop
   29614:	20008ba0 	.word	0x20008ba0

00029618 <__env_unlock>:
   29618:	4801      	ldr	r0, [pc, #4]	; (29620 <__env_unlock+0x8>)
   2961a:	f002 b9e4 	b.w	2b9e6 <__retarget_lock_release_recursive>
   2961e:	bf00      	nop
   29620:	20008ba0 	.word	0x20008ba0

00029624 <_fflush_r>:
   29624:	b538      	push	{r3, r4, r5, lr}
   29626:	690b      	ldr	r3, [r1, #16]
   29628:	4605      	mov	r5, r0
   2962a:	460c      	mov	r4, r1
   2962c:	b913      	cbnz	r3, 29634 <_fflush_r+0x10>
   2962e:	2500      	movs	r5, #0
   29630:	4628      	mov	r0, r5
   29632:	bd38      	pop	{r3, r4, r5, pc}
   29634:	b118      	cbz	r0, 2963e <_fflush_r+0x1a>
   29636:	6983      	ldr	r3, [r0, #24]
   29638:	b90b      	cbnz	r3, 2963e <_fflush_r+0x1a>
   2963a:	f7fe fdd3 	bl	281e4 <__sinit>
   2963e:	4b14      	ldr	r3, [pc, #80]	; (29690 <_fflush_r+0x6c>)
   29640:	429c      	cmp	r4, r3
   29642:	d11b      	bne.n	2967c <_fflush_r+0x58>
   29644:	686c      	ldr	r4, [r5, #4]
   29646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2964a:	2b00      	cmp	r3, #0
   2964c:	d0ef      	beq.n	2962e <_fflush_r+0xa>
   2964e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29650:	07d0      	lsls	r0, r2, #31
   29652:	d404      	bmi.n	2965e <_fflush_r+0x3a>
   29654:	0599      	lsls	r1, r3, #22
   29656:	d402      	bmi.n	2965e <_fflush_r+0x3a>
   29658:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2965a:	f002 f9bc 	bl	2b9d6 <__retarget_lock_acquire_recursive>
   2965e:	4628      	mov	r0, r5
   29660:	4621      	mov	r1, r4
   29662:	f008 ff05 	bl	32470 <__sflush_r>
   29666:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29668:	4605      	mov	r5, r0
   2966a:	07da      	lsls	r2, r3, #31
   2966c:	d4e0      	bmi.n	29630 <_fflush_r+0xc>
   2966e:	89a3      	ldrh	r3, [r4, #12]
   29670:	059b      	lsls	r3, r3, #22
   29672:	d4dd      	bmi.n	29630 <_fflush_r+0xc>
   29674:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29676:	f002 f9b6 	bl	2b9e6 <__retarget_lock_release_recursive>
   2967a:	e7d9      	b.n	29630 <_fflush_r+0xc>
   2967c:	4b05      	ldr	r3, [pc, #20]	; (29694 <_fflush_r+0x70>)
   2967e:	429c      	cmp	r4, r3
   29680:	d101      	bne.n	29686 <_fflush_r+0x62>
   29682:	68ac      	ldr	r4, [r5, #8]
   29684:	e7df      	b.n	29646 <_fflush_r+0x22>
   29686:	4b04      	ldr	r3, [pc, #16]	; (29698 <_fflush_r+0x74>)
   29688:	429c      	cmp	r4, r3
   2968a:	bf08      	it	eq
   2968c:	68ec      	ldreq	r4, [r5, #12]
   2968e:	e7da      	b.n	29646 <_fflush_r+0x22>
   29690:	000342e8 	.word	0x000342e8
   29694:	000342c8 	.word	0x000342c8
   29698:	000342a8 	.word	0x000342a8

0002969c <_lseek_r>:
   2969c:	b538      	push	{r3, r4, r5, lr}
   2969e:	4604      	mov	r4, r0
   296a0:	4d06      	ldr	r5, [pc, #24]	; (296bc <_lseek_r+0x20>)
   296a2:	4608      	mov	r0, r1
   296a4:	4611      	mov	r1, r2
   296a6:	2200      	movs	r2, #0
   296a8:	602a      	str	r2, [r5, #0]
   296aa:	461a      	mov	r2, r3
   296ac:	f002 f973 	bl	2b996 <_lseek>
   296b0:	1c43      	adds	r3, r0, #1
   296b2:	d102      	bne.n	296ba <_lseek_r+0x1e>
   296b4:	682b      	ldr	r3, [r5, #0]
   296b6:	b103      	cbz	r3, 296ba <_lseek_r+0x1e>
   296b8:	6023      	str	r3, [r4, #0]
   296ba:	bd38      	pop	{r3, r4, r5, pc}
   296bc:	20030ea4 	.word	0x20030ea4

000296c0 <__smakebuf_r>:
   296c0:	898b      	ldrh	r3, [r1, #12]
   296c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   296c4:	079d      	lsls	r5, r3, #30
   296c6:	4606      	mov	r6, r0
   296c8:	460c      	mov	r4, r1
   296ca:	d507      	bpl.n	296dc <__smakebuf_r+0x1c>
   296cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
   296d0:	6023      	str	r3, [r4, #0]
   296d2:	6123      	str	r3, [r4, #16]
   296d4:	2301      	movs	r3, #1
   296d6:	6163      	str	r3, [r4, #20]
   296d8:	b003      	add	sp, #12
   296da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   296dc:	ab01      	add	r3, sp, #4
   296de:	466a      	mov	r2, sp
   296e0:	f008 ff45 	bl	3256e <__swhatbuf_r>
   296e4:	9f00      	ldr	r7, [sp, #0]
   296e6:	4605      	mov	r5, r0
   296e8:	4630      	mov	r0, r6
   296ea:	4639      	mov	r1, r7
   296ec:	f7fd fd7a 	bl	271e4 <_malloc_r>
   296f0:	b948      	cbnz	r0, 29706 <__smakebuf_r+0x46>
   296f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   296f6:	059a      	lsls	r2, r3, #22
   296f8:	d4ee      	bmi.n	296d8 <__smakebuf_r+0x18>
   296fa:	f023 0303 	bic.w	r3, r3, #3
   296fe:	f043 0302 	orr.w	r3, r3, #2
   29702:	81a3      	strh	r3, [r4, #12]
   29704:	e7e2      	b.n	296cc <__smakebuf_r+0xc>
   29706:	4b0d      	ldr	r3, [pc, #52]	; (2973c <__smakebuf_r+0x7c>)
   29708:	62b3      	str	r3, [r6, #40]	; 0x28
   2970a:	89a3      	ldrh	r3, [r4, #12]
   2970c:	6020      	str	r0, [r4, #0]
   2970e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29712:	81a3      	strh	r3, [r4, #12]
   29714:	9b01      	ldr	r3, [sp, #4]
   29716:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2971a:	b15b      	cbz	r3, 29734 <__smakebuf_r+0x74>
   2971c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29720:	4630      	mov	r0, r6
   29722:	f000 fb1b 	bl	29d5c <_isatty_r>
   29726:	b128      	cbz	r0, 29734 <__smakebuf_r+0x74>
   29728:	89a3      	ldrh	r3, [r4, #12]
   2972a:	f023 0303 	bic.w	r3, r3, #3
   2972e:	f043 0301 	orr.w	r3, r3, #1
   29732:	81a3      	strh	r3, [r4, #12]
   29734:	89a3      	ldrh	r3, [r4, #12]
   29736:	431d      	orrs	r5, r3
   29738:	81a5      	strh	r5, [r4, #12]
   2973a:	e7cd      	b.n	296d8 <__smakebuf_r+0x18>
   2973c:	000281a9 	.word	0x000281a9

00029740 <__ssvfiscanf_r>:
   29740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29744:	460c      	mov	r4, r1
   29746:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   2974a:	2100      	movs	r1, #0
   2974c:	4606      	mov	r6, r0
   2974e:	f10d 0804 	add.w	r8, sp, #4
   29752:	4fa7      	ldr	r7, [pc, #668]	; (299f0 <__ssvfiscanf_r+0x2b0>)
   29754:	9300      	str	r3, [sp, #0]
   29756:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2975a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2975e:	49a5      	ldr	r1, [pc, #660]	; (299f4 <__ssvfiscanf_r+0x2b4>)
   29760:	91a0      	str	r1, [sp, #640]	; 0x280
   29762:	49a5      	ldr	r1, [pc, #660]	; (299f8 <__ssvfiscanf_r+0x2b8>)
   29764:	91a1      	str	r1, [sp, #644]	; 0x284
   29766:	7813      	ldrb	r3, [r2, #0]
   29768:	2b00      	cmp	r3, #0
   2976a:	f000 815c 	beq.w	29a26 <__ssvfiscanf_r+0x2e6>
   2976e:	5cf9      	ldrb	r1, [r7, r3]
   29770:	1c55      	adds	r5, r2, #1
   29772:	f011 0108 	ands.w	r1, r1, #8
   29776:	d019      	beq.n	297ac <__ssvfiscanf_r+0x6c>
   29778:	6863      	ldr	r3, [r4, #4]
   2977a:	2b00      	cmp	r3, #0
   2977c:	dd0f      	ble.n	2979e <__ssvfiscanf_r+0x5e>
   2977e:	6823      	ldr	r3, [r4, #0]
   29780:	781a      	ldrb	r2, [r3, #0]
   29782:	5cba      	ldrb	r2, [r7, r2]
   29784:	0712      	lsls	r2, r2, #28
   29786:	d401      	bmi.n	2978c <__ssvfiscanf_r+0x4c>
   29788:	462a      	mov	r2, r5
   2978a:	e7ec      	b.n	29766 <__ssvfiscanf_r+0x26>
   2978c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2978e:	3301      	adds	r3, #1
   29790:	3201      	adds	r2, #1
   29792:	6023      	str	r3, [r4, #0]
   29794:	9245      	str	r2, [sp, #276]	; 0x114
   29796:	6862      	ldr	r2, [r4, #4]
   29798:	3a01      	subs	r2, #1
   2979a:	6062      	str	r2, [r4, #4]
   2979c:	e7ec      	b.n	29778 <__ssvfiscanf_r+0x38>
   2979e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   297a0:	4621      	mov	r1, r4
   297a2:	4630      	mov	r0, r6
   297a4:	4798      	blx	r3
   297a6:	2800      	cmp	r0, #0
   297a8:	d0e9      	beq.n	2977e <__ssvfiscanf_r+0x3e>
   297aa:	e7ed      	b.n	29788 <__ssvfiscanf_r+0x48>
   297ac:	2b25      	cmp	r3, #37	; 0x25
   297ae:	d012      	beq.n	297d6 <__ssvfiscanf_r+0x96>
   297b0:	4699      	mov	r9, r3
   297b2:	6863      	ldr	r3, [r4, #4]
   297b4:	2b00      	cmp	r3, #0
   297b6:	f340 8094 	ble.w	298e2 <__ssvfiscanf_r+0x1a2>
   297ba:	6822      	ldr	r2, [r4, #0]
   297bc:	7813      	ldrb	r3, [r2, #0]
   297be:	454b      	cmp	r3, r9
   297c0:	f040 8131 	bne.w	29a26 <__ssvfiscanf_r+0x2e6>
   297c4:	6863      	ldr	r3, [r4, #4]
   297c6:	3201      	adds	r2, #1
   297c8:	3b01      	subs	r3, #1
   297ca:	6022      	str	r2, [r4, #0]
   297cc:	6063      	str	r3, [r4, #4]
   297ce:	9b45      	ldr	r3, [sp, #276]	; 0x114
   297d0:	3301      	adds	r3, #1
   297d2:	9345      	str	r3, [sp, #276]	; 0x114
   297d4:	e7d8      	b.n	29788 <__ssvfiscanf_r+0x48>
   297d6:	9141      	str	r1, [sp, #260]	; 0x104
   297d8:	9143      	str	r1, [sp, #268]	; 0x10c
   297da:	7853      	ldrb	r3, [r2, #1]
   297dc:	2b2a      	cmp	r3, #42	; 0x2a
   297de:	bf04      	itt	eq
   297e0:	2310      	moveq	r3, #16
   297e2:	1c95      	addeq	r5, r2, #2
   297e4:	f04f 020a 	mov.w	r2, #10
   297e8:	bf08      	it	eq
   297ea:	9341      	streq	r3, [sp, #260]	; 0x104
   297ec:	46a9      	mov	r9, r5
   297ee:	f819 1b01 	ldrb.w	r1, [r9], #1
   297f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   297f6:	2b09      	cmp	r3, #9
   297f8:	d91e      	bls.n	29838 <__ssvfiscanf_r+0xf8>
   297fa:	f8df a200 	ldr.w	sl, [pc, #512]	; 299fc <__ssvfiscanf_r+0x2bc>
   297fe:	2203      	movs	r2, #3
   29800:	4650      	mov	r0, sl
   29802:	f008 fc6e 	bl	320e2 <memchr>
   29806:	b138      	cbz	r0, 29818 <__ssvfiscanf_r+0xd8>
   29808:	eba0 000a 	sub.w	r0, r0, sl
   2980c:	2301      	movs	r3, #1
   2980e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29810:	464d      	mov	r5, r9
   29812:	4083      	lsls	r3, r0
   29814:	4313      	orrs	r3, r2
   29816:	9341      	str	r3, [sp, #260]	; 0x104
   29818:	f815 3b01 	ldrb.w	r3, [r5], #1
   2981c:	2b78      	cmp	r3, #120	; 0x78
   2981e:	d806      	bhi.n	2982e <__ssvfiscanf_r+0xee>
   29820:	2b57      	cmp	r3, #87	; 0x57
   29822:	d810      	bhi.n	29846 <__ssvfiscanf_r+0x106>
   29824:	2b25      	cmp	r3, #37	; 0x25
   29826:	d0c3      	beq.n	297b0 <__ssvfiscanf_r+0x70>
   29828:	d856      	bhi.n	298d8 <__ssvfiscanf_r+0x198>
   2982a:	2b00      	cmp	r3, #0
   2982c:	d064      	beq.n	298f8 <__ssvfiscanf_r+0x1b8>
   2982e:	2303      	movs	r3, #3
   29830:	9347      	str	r3, [sp, #284]	; 0x11c
   29832:	230a      	movs	r3, #10
   29834:	9342      	str	r3, [sp, #264]	; 0x108
   29836:	e06a      	b.n	2990e <__ssvfiscanf_r+0x1ce>
   29838:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2983a:	464d      	mov	r5, r9
   2983c:	fb02 1103 	mla	r1, r2, r3, r1
   29840:	3930      	subs	r1, #48	; 0x30
   29842:	9143      	str	r1, [sp, #268]	; 0x10c
   29844:	e7d2      	b.n	297ec <__ssvfiscanf_r+0xac>
   29846:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2984a:	2a20      	cmp	r2, #32
   2984c:	d8ef      	bhi.n	2982e <__ssvfiscanf_r+0xee>
   2984e:	a101      	add	r1, pc, #4	; (adr r1, 29854 <__ssvfiscanf_r+0x114>)
   29850:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   29854:	00029943 	.word	0x00029943
   29858:	0002982f 	.word	0x0002982f
   2985c:	0002982f 	.word	0x0002982f
   29860:	00029965 	.word	0x00029965
   29864:	0002982f 	.word	0x0002982f
   29868:	0002982f 	.word	0x0002982f
   2986c:	0002982f 	.word	0x0002982f
   29870:	0002982f 	.word	0x0002982f
   29874:	0002982f 	.word	0x0002982f
   29878:	0002982f 	.word	0x0002982f
   2987c:	0002982f 	.word	0x0002982f
   29880:	0002997b 	.word	0x0002997b
   29884:	00029961 	.word	0x00029961
   29888:	000298df 	.word	0x000298df
   2988c:	000298df 	.word	0x000298df
   29890:	000298df 	.word	0x000298df
   29894:	0002982f 	.word	0x0002982f
   29898:	00029955 	.word	0x00029955
   2989c:	0002982f 	.word	0x0002982f
   298a0:	0002982f 	.word	0x0002982f
   298a4:	0002982f 	.word	0x0002982f
   298a8:	0002982f 	.word	0x0002982f
   298ac:	0002998b 	.word	0x0002998b
   298b0:	0002995d 	.word	0x0002995d
   298b4:	000298ff 	.word	0x000298ff
   298b8:	0002982f 	.word	0x0002982f
   298bc:	0002982f 	.word	0x0002982f
   298c0:	00029987 	.word	0x00029987
   298c4:	0002982f 	.word	0x0002982f
   298c8:	00029961 	.word	0x00029961
   298cc:	0002982f 	.word	0x0002982f
   298d0:	0002982f 	.word	0x0002982f
   298d4:	00029943 	.word	0x00029943
   298d8:	3b45      	subs	r3, #69	; 0x45
   298da:	2b02      	cmp	r3, #2
   298dc:	d8a7      	bhi.n	2982e <__ssvfiscanf_r+0xee>
   298de:	2305      	movs	r3, #5
   298e0:	e014      	b.n	2990c <__ssvfiscanf_r+0x1cc>
   298e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   298e4:	4621      	mov	r1, r4
   298e6:	4630      	mov	r0, r6
   298e8:	4798      	blx	r3
   298ea:	2800      	cmp	r0, #0
   298ec:	f43f af65 	beq.w	297ba <__ssvfiscanf_r+0x7a>
   298f0:	9844      	ldr	r0, [sp, #272]	; 0x110
   298f2:	2800      	cmp	r0, #0
   298f4:	f040 808f 	bne.w	29a16 <__ssvfiscanf_r+0x2d6>
   298f8:	f04f 30ff 	mov.w	r0, #4294967295
   298fc:	e08f      	b.n	29a1e <__ssvfiscanf_r+0x2de>
   298fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29900:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   29904:	9341      	str	r3, [sp, #260]	; 0x104
   29906:	2310      	movs	r3, #16
   29908:	9342      	str	r3, [sp, #264]	; 0x108
   2990a:	2304      	movs	r3, #4
   2990c:	9347      	str	r3, [sp, #284]	; 0x11c
   2990e:	6863      	ldr	r3, [r4, #4]
   29910:	2b00      	cmp	r3, #0
   29912:	dd4a      	ble.n	299aa <__ssvfiscanf_r+0x26a>
   29914:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29916:	0659      	lsls	r1, r3, #25
   29918:	d404      	bmi.n	29924 <__ssvfiscanf_r+0x1e4>
   2991a:	6823      	ldr	r3, [r4, #0]
   2991c:	781a      	ldrb	r2, [r3, #0]
   2991e:	5cba      	ldrb	r2, [r7, r2]
   29920:	0712      	lsls	r2, r2, #28
   29922:	d449      	bmi.n	299b8 <__ssvfiscanf_r+0x278>
   29924:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   29926:	2b02      	cmp	r3, #2
   29928:	dc58      	bgt.n	299dc <__ssvfiscanf_r+0x29c>
   2992a:	466b      	mov	r3, sp
   2992c:	4622      	mov	r2, r4
   2992e:	a941      	add	r1, sp, #260	; 0x104
   29930:	4630      	mov	r0, r6
   29932:	f000 f87d 	bl	29a30 <_scanf_chars>
   29936:	2801      	cmp	r0, #1
   29938:	d075      	beq.n	29a26 <__ssvfiscanf_r+0x2e6>
   2993a:	2802      	cmp	r0, #2
   2993c:	f47f af24 	bne.w	29788 <__ssvfiscanf_r+0x48>
   29940:	e7d6      	b.n	298f0 <__ssvfiscanf_r+0x1b0>
   29942:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   29948:	9241      	str	r2, [sp, #260]	; 0x104
   2994a:	2210      	movs	r2, #16
   2994c:	2b6e      	cmp	r3, #110	; 0x6e
   2994e:	9242      	str	r2, [sp, #264]	; 0x108
   29950:	d902      	bls.n	29958 <__ssvfiscanf_r+0x218>
   29952:	e7da      	b.n	2990a <__ssvfiscanf_r+0x1ca>
   29954:	2300      	movs	r3, #0
   29956:	9342      	str	r3, [sp, #264]	; 0x108
   29958:	2303      	movs	r3, #3
   2995a:	e7d7      	b.n	2990c <__ssvfiscanf_r+0x1cc>
   2995c:	2308      	movs	r3, #8
   2995e:	e7d3      	b.n	29908 <__ssvfiscanf_r+0x1c8>
   29960:	220a      	movs	r2, #10
   29962:	e7f3      	b.n	2994c <__ssvfiscanf_r+0x20c>
   29964:	4629      	mov	r1, r5
   29966:	4640      	mov	r0, r8
   29968:	f008 fea3 	bl	326b2 <__sccl>
   2996c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2996e:	4605      	mov	r5, r0
   29970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29974:	9341      	str	r3, [sp, #260]	; 0x104
   29976:	2301      	movs	r3, #1
   29978:	e7c8      	b.n	2990c <__ssvfiscanf_r+0x1cc>
   2997a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2997c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29980:	9341      	str	r3, [sp, #260]	; 0x104
   29982:	2300      	movs	r3, #0
   29984:	e7c2      	b.n	2990c <__ssvfiscanf_r+0x1cc>
   29986:	2302      	movs	r3, #2
   29988:	e7c0      	b.n	2990c <__ssvfiscanf_r+0x1cc>
   2998a:	9841      	ldr	r0, [sp, #260]	; 0x104
   2998c:	06c3      	lsls	r3, r0, #27
   2998e:	f53f aefb 	bmi.w	29788 <__ssvfiscanf_r+0x48>
   29992:	9b00      	ldr	r3, [sp, #0]
   29994:	f010 0f01 	tst.w	r0, #1
   29998:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2999a:	f103 0104 	add.w	r1, r3, #4
   2999e:	9100      	str	r1, [sp, #0]
   299a0:	681b      	ldr	r3, [r3, #0]
   299a2:	bf14      	ite	ne
   299a4:	801a      	strhne	r2, [r3, #0]
   299a6:	601a      	streq	r2, [r3, #0]
   299a8:	e6ee      	b.n	29788 <__ssvfiscanf_r+0x48>
   299aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   299ac:	4621      	mov	r1, r4
   299ae:	4630      	mov	r0, r6
   299b0:	4798      	blx	r3
   299b2:	2800      	cmp	r0, #0
   299b4:	d0ae      	beq.n	29914 <__ssvfiscanf_r+0x1d4>
   299b6:	e79b      	b.n	298f0 <__ssvfiscanf_r+0x1b0>
   299b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   299ba:	3201      	adds	r2, #1
   299bc:	9245      	str	r2, [sp, #276]	; 0x114
   299be:	6862      	ldr	r2, [r4, #4]
   299c0:	3a01      	subs	r2, #1
   299c2:	2a00      	cmp	r2, #0
   299c4:	6062      	str	r2, [r4, #4]
   299c6:	dd02      	ble.n	299ce <__ssvfiscanf_r+0x28e>
   299c8:	3301      	adds	r3, #1
   299ca:	6023      	str	r3, [r4, #0]
   299cc:	e7a5      	b.n	2991a <__ssvfiscanf_r+0x1da>
   299ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   299d0:	4621      	mov	r1, r4
   299d2:	4630      	mov	r0, r6
   299d4:	4798      	blx	r3
   299d6:	2800      	cmp	r0, #0
   299d8:	d09f      	beq.n	2991a <__ssvfiscanf_r+0x1da>
   299da:	e789      	b.n	298f0 <__ssvfiscanf_r+0x1b0>
   299dc:	2b04      	cmp	r3, #4
   299de:	dc0f      	bgt.n	29a00 <__ssvfiscanf_r+0x2c0>
   299e0:	466b      	mov	r3, sp
   299e2:	4622      	mov	r2, r4
   299e4:	a941      	add	r1, sp, #260	; 0x104
   299e6:	4630      	mov	r0, r6
   299e8:	f000 f87c 	bl	29ae4 <_scanf_i>
   299ec:	e7a3      	b.n	29936 <__ssvfiscanf_r+0x1f6>
   299ee:	bf00      	nop
   299f0:	0003875f 	.word	0x0003875f
   299f4:	00032603 	.word	0x00032603
   299f8:	00032679 	.word	0x00032679
   299fc:	00038b21 	.word	0x00038b21
   29a00:	4b0a      	ldr	r3, [pc, #40]	; (29a2c <__ssvfiscanf_r+0x2ec>)
   29a02:	2b00      	cmp	r3, #0
   29a04:	f43f aec0 	beq.w	29788 <__ssvfiscanf_r+0x48>
   29a08:	466b      	mov	r3, sp
   29a0a:	4622      	mov	r2, r4
   29a0c:	a941      	add	r1, sp, #260	; 0x104
   29a0e:	4630      	mov	r0, r6
   29a10:	f3af 8000 	nop.w
   29a14:	e78f      	b.n	29936 <__ssvfiscanf_r+0x1f6>
   29a16:	89a3      	ldrh	r3, [r4, #12]
   29a18:	065b      	lsls	r3, r3, #25
   29a1a:	f53f af6d 	bmi.w	298f8 <__ssvfiscanf_r+0x1b8>
   29a1e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   29a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29a26:	9844      	ldr	r0, [sp, #272]	; 0x110
   29a28:	e7f9      	b.n	29a1e <__ssvfiscanf_r+0x2de>
   29a2a:	bf00      	nop
   29a2c:	00000000 	.word	0x00000000

00029a30 <_scanf_chars>:
   29a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29a34:	4615      	mov	r5, r2
   29a36:	688a      	ldr	r2, [r1, #8]
   29a38:	4680      	mov	r8, r0
   29a3a:	460c      	mov	r4, r1
   29a3c:	b932      	cbnz	r2, 29a4c <_scanf_chars+0x1c>
   29a3e:	698a      	ldr	r2, [r1, #24]
   29a40:	2a00      	cmp	r2, #0
   29a42:	bf14      	ite	ne
   29a44:	f04f 32ff 	movne.w	r2, #4294967295
   29a48:	2201      	moveq	r2, #1
   29a4a:	608a      	str	r2, [r1, #8]
   29a4c:	6822      	ldr	r2, [r4, #0]
   29a4e:	2700      	movs	r7, #0
   29a50:	f8df 908c 	ldr.w	r9, [pc, #140]	; 29ae0 <_scanf_chars+0xb0>
   29a54:	06d1      	lsls	r1, r2, #27
   29a56:	bf5f      	itttt	pl
   29a58:	681a      	ldrpl	r2, [r3, #0]
   29a5a:	1d11      	addpl	r1, r2, #4
   29a5c:	6019      	strpl	r1, [r3, #0]
   29a5e:	6816      	ldrpl	r6, [r2, #0]
   29a60:	69a0      	ldr	r0, [r4, #24]
   29a62:	b188      	cbz	r0, 29a88 <_scanf_chars+0x58>
   29a64:	2801      	cmp	r0, #1
   29a66:	d107      	bne.n	29a78 <_scanf_chars+0x48>
   29a68:	682b      	ldr	r3, [r5, #0]
   29a6a:	781a      	ldrb	r2, [r3, #0]
   29a6c:	6963      	ldr	r3, [r4, #20]
   29a6e:	5c9b      	ldrb	r3, [r3, r2]
   29a70:	b953      	cbnz	r3, 29a88 <_scanf_chars+0x58>
   29a72:	2f00      	cmp	r7, #0
   29a74:	d031      	beq.n	29ada <_scanf_chars+0xaa>
   29a76:	e022      	b.n	29abe <_scanf_chars+0x8e>
   29a78:	2802      	cmp	r0, #2
   29a7a:	d120      	bne.n	29abe <_scanf_chars+0x8e>
   29a7c:	682b      	ldr	r3, [r5, #0]
   29a7e:	781b      	ldrb	r3, [r3, #0]
   29a80:	f819 3003 	ldrb.w	r3, [r9, r3]
   29a84:	071b      	lsls	r3, r3, #28
   29a86:	d41a      	bmi.n	29abe <_scanf_chars+0x8e>
   29a88:	6823      	ldr	r3, [r4, #0]
   29a8a:	3701      	adds	r7, #1
   29a8c:	06da      	lsls	r2, r3, #27
   29a8e:	bf5e      	ittt	pl
   29a90:	682b      	ldrpl	r3, [r5, #0]
   29a92:	781b      	ldrbpl	r3, [r3, #0]
   29a94:	f806 3b01 	strbpl.w	r3, [r6], #1
   29a98:	682a      	ldr	r2, [r5, #0]
   29a9a:	686b      	ldr	r3, [r5, #4]
   29a9c:	3201      	adds	r2, #1
   29a9e:	3b01      	subs	r3, #1
   29aa0:	602a      	str	r2, [r5, #0]
   29aa2:	68a2      	ldr	r2, [r4, #8]
   29aa4:	606b      	str	r3, [r5, #4]
   29aa6:	3a01      	subs	r2, #1
   29aa8:	60a2      	str	r2, [r4, #8]
   29aaa:	b142      	cbz	r2, 29abe <_scanf_chars+0x8e>
   29aac:	2b00      	cmp	r3, #0
   29aae:	dcd7      	bgt.n	29a60 <_scanf_chars+0x30>
   29ab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   29ab4:	4629      	mov	r1, r5
   29ab6:	4640      	mov	r0, r8
   29ab8:	4798      	blx	r3
   29aba:	2800      	cmp	r0, #0
   29abc:	d0d0      	beq.n	29a60 <_scanf_chars+0x30>
   29abe:	6823      	ldr	r3, [r4, #0]
   29ac0:	f013 0310 	ands.w	r3, r3, #16
   29ac4:	d105      	bne.n	29ad2 <_scanf_chars+0xa2>
   29ac6:	68e2      	ldr	r2, [r4, #12]
   29ac8:	3201      	adds	r2, #1
   29aca:	60e2      	str	r2, [r4, #12]
   29acc:	69a2      	ldr	r2, [r4, #24]
   29ace:	b102      	cbz	r2, 29ad2 <_scanf_chars+0xa2>
   29ad0:	7033      	strb	r3, [r6, #0]
   29ad2:	6923      	ldr	r3, [r4, #16]
   29ad4:	2000      	movs	r0, #0
   29ad6:	443b      	add	r3, r7
   29ad8:	6123      	str	r3, [r4, #16]
   29ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29ade:	bf00      	nop
   29ae0:	0003875f 	.word	0x0003875f

00029ae4 <_scanf_i>:
   29ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ae8:	4698      	mov	r8, r3
   29aea:	b087      	sub	sp, #28
   29aec:	4b78      	ldr	r3, [pc, #480]	; (29cd0 <_scanf_i+0x1ec>)
   29aee:	460c      	mov	r4, r1
   29af0:	4682      	mov	sl, r0
   29af2:	4616      	mov	r6, r2
   29af4:	4627      	mov	r7, r4
   29af6:	f04f 0b00 	mov.w	fp, #0
   29afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29afe:	ab03      	add	r3, sp, #12
   29b00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   29b04:	4b73      	ldr	r3, [pc, #460]	; (29cd4 <_scanf_i+0x1f0>)
   29b06:	69a1      	ldr	r1, [r4, #24]
   29b08:	4a73      	ldr	r2, [pc, #460]	; (29cd8 <_scanf_i+0x1f4>)
   29b0a:	2903      	cmp	r1, #3
   29b0c:	bf08      	it	eq
   29b0e:	461a      	moveq	r2, r3
   29b10:	68a3      	ldr	r3, [r4, #8]
   29b12:	9201      	str	r2, [sp, #4]
   29b14:	1e5a      	subs	r2, r3, #1
   29b16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   29b1a:	bf89      	itett	hi
   29b1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   29b20:	f04f 0900 	movls.w	r9, #0
   29b24:	eb03 0905 	addhi.w	r9, r3, r5
   29b28:	f240 135d 	movwhi	r3, #349	; 0x15d
   29b2c:	bf88      	it	hi
   29b2e:	60a3      	strhi	r3, [r4, #8]
   29b30:	f857 3b1c 	ldr.w	r3, [r7], #28
   29b34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   29b38:	463d      	mov	r5, r7
   29b3a:	6023      	str	r3, [r4, #0]
   29b3c:	6831      	ldr	r1, [r6, #0]
   29b3e:	ab03      	add	r3, sp, #12
   29b40:	2202      	movs	r2, #2
   29b42:	7809      	ldrb	r1, [r1, #0]
   29b44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   29b48:	f008 facb 	bl	320e2 <memchr>
   29b4c:	2800      	cmp	r0, #0
   29b4e:	d040      	beq.n	29bd2 <_scanf_i+0xee>
   29b50:	f1bb 0f01 	cmp.w	fp, #1
   29b54:	d112      	bne.n	29b7c <_scanf_i+0x98>
   29b56:	6862      	ldr	r2, [r4, #4]
   29b58:	b92a      	cbnz	r2, 29b66 <_scanf_i+0x82>
   29b5a:	6822      	ldr	r2, [r4, #0]
   29b5c:	2108      	movs	r1, #8
   29b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   29b62:	6061      	str	r1, [r4, #4]
   29b64:	6022      	str	r2, [r4, #0]
   29b66:	6822      	ldr	r2, [r4, #0]
   29b68:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   29b6c:	6022      	str	r2, [r4, #0]
   29b6e:	68a2      	ldr	r2, [r4, #8]
   29b70:	1e51      	subs	r1, r2, #1
   29b72:	60a1      	str	r1, [r4, #8]
   29b74:	b9da      	cbnz	r2, 29bae <_scanf_i+0xca>
   29b76:	f04f 0b02 	mov.w	fp, #2
   29b7a:	e7df      	b.n	29b3c <_scanf_i+0x58>
   29b7c:	f1bb 0f02 	cmp.w	fp, #2
   29b80:	d006      	beq.n	29b90 <_scanf_i+0xac>
   29b82:	68a2      	ldr	r2, [r4, #8]
   29b84:	1e51      	subs	r1, r2, #1
   29b86:	60a1      	str	r1, [r4, #8]
   29b88:	b98a      	cbnz	r2, 29bae <_scanf_i+0xca>
   29b8a:	f04f 0b01 	mov.w	fp, #1
   29b8e:	e7d5      	b.n	29b3c <_scanf_i+0x58>
   29b90:	6822      	ldr	r2, [r4, #0]
   29b92:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   29b96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29b9a:	d11f      	bne.n	29bdc <_scanf_i+0xf8>
   29b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   29ba0:	2110      	movs	r1, #16
   29ba2:	6022      	str	r2, [r4, #0]
   29ba4:	68a2      	ldr	r2, [r4, #8]
   29ba6:	6061      	str	r1, [r4, #4]
   29ba8:	1e51      	subs	r1, r2, #1
   29baa:	60a1      	str	r1, [r4, #8]
   29bac:	b1b2      	cbz	r2, 29bdc <_scanf_i+0xf8>
   29bae:	6832      	ldr	r2, [r6, #0]
   29bb0:	1c51      	adds	r1, r2, #1
   29bb2:	6031      	str	r1, [r6, #0]
   29bb4:	7812      	ldrb	r2, [r2, #0]
   29bb6:	f805 2b01 	strb.w	r2, [r5], #1
   29bba:	6872      	ldr	r2, [r6, #4]
   29bbc:	3a01      	subs	r2, #1
   29bbe:	2a00      	cmp	r2, #0
   29bc0:	6072      	str	r2, [r6, #4]
   29bc2:	dc06      	bgt.n	29bd2 <_scanf_i+0xee>
   29bc4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   29bc8:	4631      	mov	r1, r6
   29bca:	4650      	mov	r0, sl
   29bcc:	4790      	blx	r2
   29bce:	2800      	cmp	r0, #0
   29bd0:	d174      	bne.n	29cbc <_scanf_i+0x1d8>
   29bd2:	f10b 0b01 	add.w	fp, fp, #1
   29bd6:	f1bb 0f03 	cmp.w	fp, #3
   29bda:	d1af      	bne.n	29b3c <_scanf_i+0x58>
   29bdc:	6863      	ldr	r3, [r4, #4]
   29bde:	b90b      	cbnz	r3, 29be4 <_scanf_i+0x100>
   29be0:	230a      	movs	r3, #10
   29be2:	6063      	str	r3, [r4, #4]
   29be4:	6863      	ldr	r3, [r4, #4]
   29be6:	f04f 0b00 	mov.w	fp, #0
   29bea:	493c      	ldr	r1, [pc, #240]	; (29cdc <_scanf_i+0x1f8>)
   29bec:	6960      	ldr	r0, [r4, #20]
   29bee:	1ac9      	subs	r1, r1, r3
   29bf0:	f008 fd5f 	bl	326b2 <__sccl>
   29bf4:	68a3      	ldr	r3, [r4, #8]
   29bf6:	6822      	ldr	r2, [r4, #0]
   29bf8:	b373      	cbz	r3, 29c58 <_scanf_i+0x174>
   29bfa:	6831      	ldr	r1, [r6, #0]
   29bfc:	6960      	ldr	r0, [r4, #20]
   29bfe:	f891 c000 	ldrb.w	ip, [r1]
   29c02:	f810 000c 	ldrb.w	r0, [r0, ip]
   29c06:	b338      	cbz	r0, 29c58 <_scanf_i+0x174>
   29c08:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   29c0c:	d116      	bne.n	29c3c <_scanf_i+0x158>
   29c0e:	0510      	lsls	r0, r2, #20
   29c10:	d514      	bpl.n	29c3c <_scanf_i+0x158>
   29c12:	f10b 0b01 	add.w	fp, fp, #1
   29c16:	f1b9 0f00 	cmp.w	r9, #0
   29c1a:	d003      	beq.n	29c24 <_scanf_i+0x140>
   29c1c:	3301      	adds	r3, #1
   29c1e:	f109 39ff 	add.w	r9, r9, #4294967295
   29c22:	60a3      	str	r3, [r4, #8]
   29c24:	6873      	ldr	r3, [r6, #4]
   29c26:	3b01      	subs	r3, #1
   29c28:	2b00      	cmp	r3, #0
   29c2a:	6073      	str	r3, [r6, #4]
   29c2c:	dd0d      	ble.n	29c4a <_scanf_i+0x166>
   29c2e:	6833      	ldr	r3, [r6, #0]
   29c30:	3301      	adds	r3, #1
   29c32:	6033      	str	r3, [r6, #0]
   29c34:	68a3      	ldr	r3, [r4, #8]
   29c36:	3b01      	subs	r3, #1
   29c38:	60a3      	str	r3, [r4, #8]
   29c3a:	e7db      	b.n	29bf4 <_scanf_i+0x110>
   29c3c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   29c40:	6022      	str	r2, [r4, #0]
   29c42:	780b      	ldrb	r3, [r1, #0]
   29c44:	f805 3b01 	strb.w	r3, [r5], #1
   29c48:	e7ec      	b.n	29c24 <_scanf_i+0x140>
   29c4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   29c4e:	4631      	mov	r1, r6
   29c50:	4650      	mov	r0, sl
   29c52:	4798      	blx	r3
   29c54:	2800      	cmp	r0, #0
   29c56:	d0ed      	beq.n	29c34 <_scanf_i+0x150>
   29c58:	6823      	ldr	r3, [r4, #0]
   29c5a:	05d9      	lsls	r1, r3, #23
   29c5c:	d50d      	bpl.n	29c7a <_scanf_i+0x196>
   29c5e:	42bd      	cmp	r5, r7
   29c60:	d909      	bls.n	29c76 <_scanf_i+0x192>
   29c62:	f105 39ff 	add.w	r9, r5, #4294967295
   29c66:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   29c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   29c6e:	4632      	mov	r2, r6
   29c70:	464d      	mov	r5, r9
   29c72:	4650      	mov	r0, sl
   29c74:	4798      	blx	r3
   29c76:	42bd      	cmp	r5, r7
   29c78:	d028      	beq.n	29ccc <_scanf_i+0x1e8>
   29c7a:	6822      	ldr	r2, [r4, #0]
   29c7c:	f012 0210 	ands.w	r2, r2, #16
   29c80:	d113      	bne.n	29caa <_scanf_i+0x1c6>
   29c82:	702a      	strb	r2, [r5, #0]
   29c84:	4639      	mov	r1, r7
   29c86:	6863      	ldr	r3, [r4, #4]
   29c88:	4650      	mov	r0, sl
   29c8a:	9e01      	ldr	r6, [sp, #4]
   29c8c:	47b0      	blx	r6
   29c8e:	f8d8 3000 	ldr.w	r3, [r8]
   29c92:	6821      	ldr	r1, [r4, #0]
   29c94:	1d1a      	adds	r2, r3, #4
   29c96:	f011 0f20 	tst.w	r1, #32
   29c9a:	f8c8 2000 	str.w	r2, [r8]
   29c9e:	681b      	ldr	r3, [r3, #0]
   29ca0:	d00f      	beq.n	29cc2 <_scanf_i+0x1de>
   29ca2:	6018      	str	r0, [r3, #0]
   29ca4:	68e3      	ldr	r3, [r4, #12]
   29ca6:	3301      	adds	r3, #1
   29ca8:	60e3      	str	r3, [r4, #12]
   29caa:	1bed      	subs	r5, r5, r7
   29cac:	6923      	ldr	r3, [r4, #16]
   29cae:	2000      	movs	r0, #0
   29cb0:	445d      	add	r5, fp
   29cb2:	442b      	add	r3, r5
   29cb4:	6123      	str	r3, [r4, #16]
   29cb6:	b007      	add	sp, #28
   29cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29cbc:	f04f 0b00 	mov.w	fp, #0
   29cc0:	e7ca      	b.n	29c58 <_scanf_i+0x174>
   29cc2:	07ca      	lsls	r2, r1, #31
   29cc4:	bf4c      	ite	mi
   29cc6:	8018      	strhmi	r0, [r3, #0]
   29cc8:	6018      	strpl	r0, [r3, #0]
   29cca:	e7eb      	b.n	29ca4 <_scanf_i+0x1c0>
   29ccc:	2001      	movs	r0, #1
   29cce:	e7f2      	b.n	29cb6 <_scanf_i+0x1d2>
   29cd0:	000331e4 	.word	0x000331e4
   29cd4:	00031c71 	.word	0x00031c71
   29cd8:	00031c75 	.word	0x00031c75
   29cdc:	00038b3c 	.word	0x00038b3c

00029ce0 <_read_r>:
   29ce0:	b538      	push	{r3, r4, r5, lr}
   29ce2:	4604      	mov	r4, r0
   29ce4:	4d06      	ldr	r5, [pc, #24]	; (29d00 <_read_r+0x20>)
   29ce6:	4608      	mov	r0, r1
   29ce8:	4611      	mov	r1, r2
   29cea:	2200      	movs	r2, #0
   29cec:	602a      	str	r2, [r5, #0]
   29cee:	461a      	mov	r2, r3
   29cf0:	f001 fe46 	bl	2b980 <_read>
   29cf4:	1c43      	adds	r3, r0, #1
   29cf6:	d102      	bne.n	29cfe <_read_r+0x1e>
   29cf8:	682b      	ldr	r3, [r5, #0]
   29cfa:	b103      	cbz	r3, 29cfe <_read_r+0x1e>
   29cfc:	6023      	str	r3, [r4, #0]
   29cfe:	bd38      	pop	{r3, r4, r5, pc}
   29d00:	20030ea4 	.word	0x20030ea4

00029d04 <raise>:
   29d04:	4b02      	ldr	r3, [pc, #8]	; (29d10 <raise+0xc>)
   29d06:	4601      	mov	r1, r0
   29d08:	6818      	ldr	r0, [r3, #0]
   29d0a:	f008 bd0b 	b.w	32724 <_raise_r>
   29d0e:	bf00      	nop
   29d10:	200087f8 	.word	0x200087f8

00029d14 <_kill_r>:
   29d14:	b538      	push	{r3, r4, r5, lr}
   29d16:	2300      	movs	r3, #0
   29d18:	4d06      	ldr	r5, [pc, #24]	; (29d34 <_kill_r+0x20>)
   29d1a:	4604      	mov	r4, r0
   29d1c:	4608      	mov	r0, r1
   29d1e:	4611      	mov	r1, r2
   29d20:	602b      	str	r3, [r5, #0]
   29d22:	f001 fe3f 	bl	2b9a4 <_kill>
   29d26:	1c43      	adds	r3, r0, #1
   29d28:	d102      	bne.n	29d30 <_kill_r+0x1c>
   29d2a:	682b      	ldr	r3, [r5, #0]
   29d2c:	b103      	cbz	r3, 29d30 <_kill_r+0x1c>
   29d2e:	6023      	str	r3, [r4, #0]
   29d30:	bd38      	pop	{r3, r4, r5, pc}
   29d32:	bf00      	nop
   29d34:	20030ea4 	.word	0x20030ea4

00029d38 <_fstat_r>:
   29d38:	b538      	push	{r3, r4, r5, lr}
   29d3a:	2300      	movs	r3, #0
   29d3c:	4d06      	ldr	r5, [pc, #24]	; (29d58 <_fstat_r+0x20>)
   29d3e:	4604      	mov	r4, r0
   29d40:	4608      	mov	r0, r1
   29d42:	4611      	mov	r1, r2
   29d44:	602b      	str	r3, [r5, #0]
   29d46:	f001 fe31 	bl	2b9ac <_fstat>
   29d4a:	1c43      	adds	r3, r0, #1
   29d4c:	d102      	bne.n	29d54 <_fstat_r+0x1c>
   29d4e:	682b      	ldr	r3, [r5, #0]
   29d50:	b103      	cbz	r3, 29d54 <_fstat_r+0x1c>
   29d52:	6023      	str	r3, [r4, #0]
   29d54:	bd38      	pop	{r3, r4, r5, pc}
   29d56:	bf00      	nop
   29d58:	20030ea4 	.word	0x20030ea4

00029d5c <_isatty_r>:
   29d5c:	b538      	push	{r3, r4, r5, lr}
   29d5e:	2300      	movs	r3, #0
   29d60:	4d05      	ldr	r5, [pc, #20]	; (29d78 <_isatty_r+0x1c>)
   29d62:	4604      	mov	r4, r0
   29d64:	4608      	mov	r0, r1
   29d66:	602b      	str	r3, [r5, #0]
   29d68:	f001 fe17 	bl	2b99a <_isatty>
   29d6c:	1c43      	adds	r3, r0, #1
   29d6e:	d102      	bne.n	29d76 <_isatty_r+0x1a>
   29d70:	682b      	ldr	r3, [r5, #0]
   29d72:	b103      	cbz	r3, 29d76 <_isatty_r+0x1a>
   29d74:	6023      	str	r3, [r4, #0]
   29d76:	bd38      	pop	{r3, r4, r5, pc}
   29d78:	20030ea4 	.word	0x20030ea4

00029d7c <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   29d7c:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   29d7e:	f7fc fbed 	bl	2655c <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   29d82:	f7fc ff01 	bl	26b88 <k_thread_system_pool_assign>
    return 0;
}
   29d86:	2000      	movs	r0, #0
   29d88:	bd08      	pop	{r3, pc}

00029d8a <gpio_pin_get_dt>:
{
   29d8a:	4603      	mov	r3, r0
   29d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return gpio_pin_get(spec->port, spec->pin);
   29d8e:	6800      	ldr	r0, [r0, #0]
   29d90:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
   29d92:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
   29d94:	6883      	ldr	r3, [r0, #8]
   29d96:	a901      	add	r1, sp, #4
   29d98:	685b      	ldr	r3, [r3, #4]
   29d9a:	4798      	blx	r3
	if (ret == 0) {
   29d9c:	b940      	cbnz	r0, 29db0 <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
   29d9e:	9b01      	ldr	r3, [sp, #4]
   29da0:	682a      	ldr	r2, [r5, #0]
   29da2:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   29da4:	2301      	movs	r3, #1
   29da6:	40a3      	lsls	r3, r4
   29da8:	421a      	tst	r2, r3
   29daa:	bf14      	ite	ne
   29dac:	2001      	movne	r0, #1
   29dae:	2000      	moveq	r0, #0
}
   29db0:	b003      	add	sp, #12
   29db2:	bd30      	pop	{r4, r5, pc}

00029db4 <k_sem_give>:
	z_impl_k_sem_give(sem);
   29db4:	f7fb be94 	b.w	25ae0 <z_impl_k_sem_give>

00029db8 <k_uptime_get>:
{
   29db8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   29dba:	f007 fb5e 	bl	3147a <z_impl_k_uptime_ticks>
   29dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29dc2:	fba0 0302 	umull	r0, r3, r0, r2
   29dc6:	fb02 3101 	mla	r1, r2, r1, r3
   29dca:	0bc0      	lsrs	r0, r0, #15
}
   29dcc:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   29dd0:	0bc9      	lsrs	r1, r1, #15
   29dd2:	bd08      	pop	{r3, pc}

00029dd4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29dd6:	ab0b      	add	r3, sp, #44	; 0x2c
   29dd8:	9305      	str	r3, [sp, #20]
   29dda:	9303      	str	r3, [sp, #12]
   29ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29dde:	9302      	str	r3, [sp, #8]
   29de0:	2300      	movs	r3, #0
   29de2:	4618      	mov	r0, r3
   29de4:	e9cd 3300 	strd	r3, r3, [sp]
   29de8:	f7e5 fb9e 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   29dec:	b007      	add	sp, #28
   29dee:	f85d fb04 	ldr.w	pc, [sp], #4

00029df2 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   29df2:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   29df4:	6883      	ldr	r3, [r0, #8]
   29df6:	2264      	movs	r2, #100	; 0x64
   29df8:	68dc      	ldr	r4, [r3, #12]
   29dfa:	2332      	movs	r3, #50	; 0x32
   29dfc:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   29dfe:	bc10      	pop	{r4}
   29e00:	4760      	bx	ip

00029e02 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   29e02:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   29e04:	6883      	ldr	r3, [r0, #8]
   29e06:	685c      	ldr	r4, [r3, #4]
   29e08:	f04f 33ff 	mov.w	r3, #4294967295
   29e0c:	46a4      	mov	ip, r4
}
   29e0e:	bc10      	pop	{r4}
   29e10:	4760      	bx	ip

00029e12 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   29e12:	f7fb be8b 	b.w	25b2c <z_impl_k_sem_take>

00029e16 <gpio_add_callback.isra.0>:
	if (api->manage_callback == NULL) {
   29e16:	6883      	ldr	r3, [r0, #8]
   29e18:	69db      	ldr	r3, [r3, #28]
   29e1a:	b10b      	cbz	r3, 29e20 <gpio_add_callback.isra.0+0xa>
	return api->manage_callback(port, callback, true);
   29e1c:	2201      	movs	r2, #1
   29e1e:	4718      	bx	r3
}
   29e20:	4770      	bx	lr

00029e22 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   29e22:	4603      	mov	r3, r0
   29e24:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29e26:	7919      	ldrb	r1, [r3, #4]
   29e28:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   29e2a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29e2c:	fa03 f101 	lsl.w	r1, r3, r1
   29e30:	6903      	ldr	r3, [r0, #16]
   29e32:	681b      	ldr	r3, [r3, #0]
   29e34:	4219      	tst	r1, r3
   29e36:	d003      	beq.n	29e40 <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
   29e38:	b122      	cbz	r2, 29e44 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
   29e3a:	6883      	ldr	r3, [r0, #8]
   29e3c:	691b      	ldr	r3, [r3, #16]
   29e3e:	e003      	b.n	29e48 <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
   29e40:	2a00      	cmp	r2, #0
   29e42:	d0fa      	beq.n	29e3a <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
   29e44:	6883      	ldr	r3, [r0, #8]
   29e46:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   29e48:	4718      	bx	r3

00029e4a <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   29e4a:	4603      	mov	r3, r0
   29e4c:	b470      	push	{r4, r5, r6}
   29e4e:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   29e50:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   29e52:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   29e54:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   29e56:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29e58:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   29e5a:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29e5c:	408c      	lsls	r4, r1
   29e5e:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   29e60:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   29e64:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29e66:	bf14      	ite	ne
   29e68:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   29e6a:	43a3      	biceq	r3, r4
   29e6c:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   29e6e:	6833      	ldr	r3, [r6, #0]
}
   29e70:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   29e72:	4718      	bx	r3

00029e74 <gpio_pin_interrupt_configure_dt.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
   29e74:	4603      	mov	r3, r0
   29e76:	b430      	push	{r4, r5}
   29e78:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   29e7a:	6800      	ldr	r0, [r0, #0]
   29e7c:	7919      	ldrb	r1, [r3, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29e7e:	2301      	movs	r3, #1
   29e80:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   29e82:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29e84:	682d      	ldr	r5, [r5, #0]
   29e86:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29e88:	422b      	tst	r3, r5
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29e8a:	69a4      	ldr	r4, [r4, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   29e8c:	bf18      	it	ne
   29e8e:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29e92:	46a4      	mov	ip, r4
}
   29e94:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29e96:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   29e9a:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   29e9e:	4760      	bx	ip

00029ea0 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   29ea0:	f7fc bb42 	b.w	26528 <z_impl_k_sleep>

00029ea4 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   29ea4:	4601      	mov	r1, r0
   29ea6:	f240 30e7 	movw	r0, #999	; 0x3e7
   29eaa:	b508      	push	{r3, lr}
   29eac:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   29eb0:	2300      	movs	r3, #0
   29eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29eb6:	1449      	asrs	r1, r1, #17
   29eb8:	f7df f842 	bl	8f40 <__aeabi_uldivmod>
}
   29ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   29ec0:	f7ff bfee 	b.w	29ea0 <k_sleep.isra.0>

00029ec4 <send_protobuf>:
{
   29ec4:	b510      	push	{r4, lr}
   29ec6:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
	buf_proto = send_array_dd_v0();
   29eca:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   29ece:	4620      	mov	r0, r4
   29ed0:	f7e3 fa82 	bl	d3d8 <send_array_dd_v0>
	send_bluetooth(buf_proto);
   29ed4:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   29ed8:	f240 72cc 	movw	r2, #1996	; 0x7cc
   29edc:	4668      	mov	r0, sp
   29ede:	f007 fca6 	bl	3182e <memcpy>
   29ee2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29ee6:	f7e2 fcc3 	bl	c870 <send_bluetooth>
}
   29eea:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   29eee:	bd10      	pop	{r4, pc}

00029ef0 <error>:
{
   29ef0:	b508      	push	{r3, lr}
	turn_off_all_leds();
   29ef2:	f7e2 fe69 	bl	cbc8 <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   29ef6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29efa:	2100      	movs	r1, #0
   29efc:	f7ff ffd0 	bl	29ea0 <k_sleep.isra.0>
	while (true)
   29f00:	e7f9      	b.n	29ef6 <error+0x6>

00029f02 <parse_comma_delimited_str>:
{
   29f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f04:	460d      	mov	r5, r1
   29f06:	4616      	mov	r6, r2
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   29f08:	2401      	movs	r4, #1
		*string = '\0';
   29f0a:	2700      	movs	r7, #0
	fields[i++] = string;
   29f0c:	6008      	str	r0, [r1, #0]
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   29f0e:	42b4      	cmp	r4, r6
   29f10:	da03      	bge.n	29f1a <parse_comma_delimited_str+0x18>
   29f12:	212c      	movs	r1, #44	; 0x2c
   29f14:	f007 fe07 	bl	31b26 <strchr>
   29f18:	b908      	cbnz	r0, 29f1e <parse_comma_delimited_str+0x1c>
	return --i;
   29f1a:	1e60      	subs	r0, r4, #1
}
   29f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*string = '\0';
   29f1e:	f800 7b01 	strb.w	r7, [r0], #1
		fields[i++] = ++string;
   29f22:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
   29f26:	3401      	adds	r4, #1
   29f28:	e7f1      	b.n	29f0e <parse_comma_delimited_str+0xc>

00029f2a <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   29f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   29f2c:	6806      	ldr	r6, [r0, #0]
   29f2e:	8902      	ldrh	r2, [r0, #8]
   29f30:	8a33      	ldrh	r3, [r6, #16]
   29f32:	429a      	cmp	r2, r3
   29f34:	d271      	bcs.n	2a01a <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29f36:	6831      	ldr	r1, [r6, #0]
   29f38:	8942      	ldrh	r2, [r0, #10]
   29f3a:	0093      	lsls	r3, r2, #2
   29f3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   29f40:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29f44:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   29f48:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29f4a:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29f4c:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   29f50:	d01f      	beq.n	29f92 <load_descriptor_values+0x68>
   29f52:	2902      	cmp	r1, #2
   29f54:	d02a      	beq.n	29fac <load_descriptor_values+0x82>
   29f56:	2900      	cmp	r1, #0
   29f58:	d135      	bne.n	29fc6 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   29f5a:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   29f5e:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   29f62:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   29f66:	0f12      	lsrs	r2, r2, #28
   29f68:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   29f6a:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   29f6c:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29f70:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   29f72:	2a00      	cmp	r2, #0
   29f74:	d134      	bne.n	29fe0 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   29f76:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   29f78:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   29f7a:	f004 040e 	and.w	r4, r4, #14
   29f7e:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   29f80:	bf11      	iteee	ne
   29f82:	2300      	movne	r3, #0
   29f84:	89c2      	ldrheq	r2, [r0, #14]
   29f86:	6873      	ldreq	r3, [r6, #4]
   29f88:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   29f8c:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   29f8e:	2001      	movs	r0, #1
}
   29f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f92:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   29f94:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f98:	4419      	add	r1, r3
   29f9a:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   29f9c:	0f0b      	lsrs	r3, r1, #28
   29f9e:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   29fa2:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   29fa4:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   29fa6:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   29faa:	e7dd      	b.n	29f68 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29fac:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   29fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29fb2:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29fb4:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29fb8:	0a1a      	lsrs	r2, r3, #8
   29fba:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   29fbe:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   29fc0:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   29fc2:	898a      	ldrh	r2, [r1, #12]
            break;
   29fc4:	e7d0      	b.n	29f68 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29fc6:	6832      	ldr	r2, [r6, #0]
   29fc8:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29fca:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29fce:	0a19      	lsrs	r1, r3, #8
   29fd0:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   29fd4:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29fd8:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   29fda:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   29fdc:	b25b      	sxtb	r3, r3
            break;
   29fde:	e7c3      	b.n	29f68 <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   29fe0:	443a      	add	r2, r7
   29fe2:	6182      	str	r2, [r0, #24]
        if (size_offset)
   29fe4:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   29fe8:	b123      	cbz	r3, 29ff4 <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   29fea:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29fec:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   29fee:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29ff0:	d109      	bne.n	2a006 <load_descriptor_values+0xdc>
   29ff2:	e00f      	b.n	2a014 <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   29ff4:	f004 0530 	and.w	r5, r4, #48	; 0x30
   29ff8:	2d20      	cmp	r5, #32
   29ffa:	d1f7      	bne.n	29fec <load_descriptor_values+0xc2>
   29ffc:	2c3f      	cmp	r4, #63	; 0x3f
   29ffe:	d804      	bhi.n	2a00a <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   2a000:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   2a004:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   2a006:	61c2      	str	r2, [r0, #28]
   2a008:	e7b7      	b.n	29f7a <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   2a00a:	2980      	cmp	r1, #128	; 0x80
   2a00c:	d1fa      	bne.n	2a004 <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   2a00e:	f100 0314 	add.w	r3, r0, #20
   2a012:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   2a014:	6813      	ldr	r3, [r2, #0]
   2a016:	61c3      	str	r3, [r0, #28]
   2a018:	e7af      	b.n	29f7a <load_descriptor_values+0x50>
        return false;
   2a01a:	2000      	movs	r0, #0
   2a01c:	e7b8      	b.n	29f90 <load_descriptor_values+0x66>

0002a01e <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   2a01e:	8903      	ldrh	r3, [r0, #8]
{
   2a020:	b510      	push	{r4, lr}
    iter->index++;
   2a022:	3301      	adds	r3, #1
   2a024:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   2a026:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   2a028:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   2a02a:	8a0a      	ldrh	r2, [r1, #16]
   2a02c:	429a      	cmp	r2, r3
   2a02e:	d803      	bhi.n	2a038 <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   2a030:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   2a032:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   2a036:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2a038:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   2a03a:	680b      	ldr	r3, [r1, #0]
   2a03c:	8942      	ldrh	r2, [r0, #10]
   2a03e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   2a042:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2a044:	f001 0103 	and.w	r1, r1, #3
   2a048:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   2a04c:	440a      	add	r2, r1
   2a04e:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   2a050:	8982      	ldrh	r2, [r0, #12]
   2a052:	f003 0130 	and.w	r1, r3, #48	; 0x30
   2a056:	2900      	cmp	r1, #0
   2a058:	bf08      	it	eq
   2a05a:	3201      	addeq	r2, #1
   2a05c:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   2a05e:	89c2      	ldrh	r2, [r0, #14]
   2a060:	f003 030e 	and.w	r3, r3, #14
   2a064:	2b08      	cmp	r3, #8
   2a066:	bf08      	it	eq
   2a068:	3201      	addeq	r2, #1
   2a06a:	81c2      	strh	r2, [r0, #14]
}
   2a06c:	e7e3      	b.n	2a036 <advance_iterator+0x18>

0002a06e <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   2a06e:	b570      	push	{r4, r5, r6, lr}
   2a070:	4604      	mov	r4, r0
   2a072:	460e      	mov	r6, r1
   2a074:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   2a076:	2100      	movs	r1, #0
   2a078:	2220      	movs	r2, #32
   2a07a:	3008      	adds	r0, #8
   2a07c:	f007 fc11 	bl	318a2 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   2a080:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2a084:	4620      	mov	r0, r4
}
   2a086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   2a08a:	f7ff bf4e 	b.w	29f2a <load_descriptor_values>

0002a08e <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   2a08e:	b538      	push	{r3, r4, r5, lr}
   2a090:	460c      	mov	r4, r1
   2a092:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2a094:	680b      	ldr	r3, [r1, #0]
   2a096:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   2a098:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   2a09a:	681b      	ldr	r3, [r3, #0]
   2a09c:	0a1b      	lsrs	r3, r3, #8
   2a09e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a0a2:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a0a4:	bf14      	ite	ne
   2a0a6:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   2a0a8:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   2a0aa:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a0ac:	f7ff ffdf 	bl	2a06e <pb_field_iter_begin>
    iter->pSize = &extension->found;
   2a0b0:	622c      	str	r4, [r5, #32]
    return status;
}
   2a0b2:	bd38      	pop	{r3, r4, r5, pc}

0002a0b4 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   2a0b4:	b510      	push	{r4, lr}
   2a0b6:	4604      	mov	r4, r0
    advance_iterator(iter);
   2a0b8:	f7ff ffb1 	bl	2a01e <advance_iterator>
    (void)load_descriptor_values(iter);
   2a0bc:	f7ff ff35 	bl	29f2a <load_descriptor_values>
    return iter->index != 0;
   2a0c0:	8920      	ldrh	r0, [r4, #8]
}
   2a0c2:	3800      	subs	r0, #0
   2a0c4:	bf18      	it	ne
   2a0c6:	2001      	movne	r0, #1
   2a0c8:	bd10      	pop	{r4, pc}

0002a0ca <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   2a0ca:	f7ff bfd0 	b.w	2a06e <pb_field_iter_begin>

0002a0ce <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   2a0ce:	f7ff bfde 	b.w	2a08e <pb_field_iter_begin_extension>

0002a0d2 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   2a0d2:	b410      	push	{r4}
   2a0d4:	460b      	mov	r3, r1
   2a0d6:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   2a0d8:	8a52      	ldrh	r2, [r2, #18]
   2a0da:	2a08      	cmp	r2, #8
   2a0dc:	d10e      	bne.n	2a0fc <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   2a0de:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   2a0e0:	b162      	cbz	r2, 2a0fc <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   2a0e2:	b128      	cbz	r0, 2a0f0 <pb_default_field_callback+0x1e>
   2a0e4:	6814      	ldr	r4, [r2, #0]
   2a0e6:	b11c      	cbz	r4, 2a0f0 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   2a0e8:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a0ea:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   2a0ec:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a0ee:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   2a0f0:	b123      	cbz	r3, 2a0fc <pb_default_field_callback+0x2a>
   2a0f2:	6814      	ldr	r4, [r2, #0]
   2a0f4:	b114      	cbz	r4, 2a0fc <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a0f6:	4618      	mov	r0, r3
   2a0f8:	3204      	adds	r2, #4
   2a0fa:	e7f6      	b.n	2a0ea <pb_default_field_callback+0x18>
}
   2a0fc:	2001      	movs	r0, #1
   2a0fe:	bc10      	pop	{r4}
   2a100:	4770      	bx	lr

0002a102 <buf_write>:
{
   2a102:	4603      	mov	r3, r0
   2a104:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   2a106:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2a108:	1884      	adds	r4, r0, r2
   2a10a:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a10c:	f007 fb8f 	bl	3182e <memcpy>
}
   2a110:	2001      	movs	r0, #1
   2a112:	bd10      	pop	{r4, pc}

0002a114 <pb_encode_varint>:
{
   2a114:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   2a116:	2a80      	cmp	r2, #128	; 0x80
{
   2a118:	b085      	sub	sp, #20
    if (value <= 0x7F)
   2a11a:	f173 0100 	sbcs.w	r1, r3, #0
{
   2a11e:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2a120:	b2d4      	uxtb	r4, r2
   2a122:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2a124:	d206      	bcs.n	2a134 <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   2a126:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2a128:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   2a12c:	f7e3 fe3e 	bl	ddac <pb_write>
}
   2a130:	b005      	add	sp, #20
   2a132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2a134:	09d5      	lsrs	r5, r2, #7
   2a136:	4608      	mov	r0, r1
    size_t i = 0;
   2a138:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   2a13a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a13e:	ea53 0c05 	orrs.w	ip, r3, r5
   2a142:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2a144:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2a148:	d108      	bne.n	2a15c <pb_encode_varint+0x48>
   2a14a:	463a      	mov	r2, r7
    buffer[i++] = byte;
   2a14c:	f102 0310 	add.w	r3, r2, #16
   2a150:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2a152:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2a154:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2a158:	3201      	adds	r2, #1
   2a15a:	e7e7      	b.n	2a12c <pb_encode_varint+0x18>
        byte |= 0x80;
   2a15c:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a160:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2a162:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   2a166:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   2a16a:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   2a16e:	d1e6      	bne.n	2a13e <pb_encode_varint+0x2a>
    if (high)
   2a170:	2b00      	cmp	r3, #0
   2a172:	d0eb      	beq.n	2a14c <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2a174:	0118      	lsls	r0, r3, #4
   2a176:	f000 0070 	and.w	r0, r0, #112	; 0x70
   2a17a:	4304      	orrs	r4, r0
        high >>= 3;
   2a17c:	08db      	lsrs	r3, r3, #3
        while (high)
   2a17e:	2b00      	cmp	r3, #0
   2a180:	d0e4      	beq.n	2a14c <pb_encode_varint+0x38>
            byte |= 0x80;
   2a182:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   2a186:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   2a188:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   2a18c:	3201      	adds	r2, #1
   2a18e:	09db      	lsrs	r3, r3, #7
   2a190:	e7f5      	b.n	2a17e <pb_encode_varint+0x6a>

0002a192 <pb_encode_svarint>:
    if (value < 0)
   2a192:	1892      	adds	r2, r2, r2
   2a194:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   2a198:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   2a19c:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2a1a0:	f7ff bfb8 	b.w	2a114 <pb_encode_varint>

0002a1a4 <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2a1a4:	2204      	movs	r2, #4
   2a1a6:	f7e3 be01 	b.w	ddac <pb_write>

0002a1aa <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   2a1aa:	2208      	movs	r2, #8
   2a1ac:	f7e3 bdfe 	b.w	ddac <pb_write>

0002a1b0 <pb_encode_tag>:
{
   2a1b0:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   2a1b2:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   2a1b6:	0f5b      	lsrs	r3, r3, #29
   2a1b8:	f7ff bfac 	b.w	2a114 <pb_encode_varint>

0002a1bc <pb_encode_string>:
{
   2a1bc:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a1be:	2300      	movs	r3, #0
{
   2a1c0:	4604      	mov	r4, r0
   2a1c2:	460d      	mov	r5, r1
   2a1c4:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a1c6:	f7ff ffa5 	bl	2a114 <pb_encode_varint>
   2a1ca:	b130      	cbz	r0, 2a1da <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   2a1cc:	4632      	mov	r2, r6
   2a1ce:	4629      	mov	r1, r5
   2a1d0:	4620      	mov	r0, r4
}
   2a1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   2a1d6:	f7e3 bde9 	b.w	ddac <pb_write>
}
   2a1da:	bd70      	pop	{r4, r5, r6, pc}

0002a1dc <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   2a1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a1e0:	4606      	mov	r6, r0
   2a1e2:	460d      	mov	r5, r1
   2a1e4:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   2a1e6:	4698      	mov	r8, r3
   2a1e8:	b32b      	cbz	r3, 2a236 <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   2a1ea:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a1ee:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a1f2:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a1f6:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a1f8:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a1fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a1fe:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a202:	441c      	add	r4, r3
   2a204:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a206:	45ca      	cmp	sl, r9
   2a208:	d309      	bcc.n	2a21e <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a20a:	4639      	mov	r1, r7
   2a20c:	4630      	mov	r0, r6
   2a20e:	46ac      	mov	ip, r5
   2a210:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a214:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   2a218:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a21c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a21e:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2a222:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2a226:	4620      	mov	r0, r4
		*ps = s;
   2a228:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a22c:	f7df f8ed 	bl	940a <strlen>
   2a230:	3001      	adds	r0, #1
   2a232:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a234:	e7e7      	b.n	2a206 <cbpprintf_external+0x2a>
}
   2a236:	f06f 0015 	mvn.w	r0, #21
   2a23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a23e <arch_printk_char_out>:
}
   2a23e:	2000      	movs	r0, #0
   2a240:	4770      	bx	lr

0002a242 <str_out>:
{
   2a242:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a244:	688a      	ldr	r2, [r1, #8]
   2a246:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a248:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a24a:	b114      	cbz	r4, 2a252 <str_out+0x10>
   2a24c:	684b      	ldr	r3, [r1, #4]
   2a24e:	4293      	cmp	r3, r2
   2a250:	dc01      	bgt.n	2a256 <str_out+0x14>
		ctx->count++;
   2a252:	608d      	str	r5, [r1, #8]
}
   2a254:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a256:	3b01      	subs	r3, #1
   2a258:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a25a:	bf08      	it	eq
   2a25c:	2200      	moveq	r2, #0
   2a25e:	608d      	str	r5, [r1, #8]
   2a260:	bf0c      	ite	eq
   2a262:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a264:	54a0      	strbne	r0, [r4, r2]
   2a266:	e7f5      	b.n	2a254 <str_out+0x12>

0002a268 <printk>:
{
   2a268:	b40f      	push	{r0, r1, r2, r3}
   2a26a:	b507      	push	{r0, r1, r2, lr}
   2a26c:	a904      	add	r1, sp, #16
   2a26e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a272:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a274:	f7e4 fa28 	bl	e6c8 <vprintk>
}
   2a278:	b003      	add	sp, #12
   2a27a:	f85d eb04 	ldr.w	lr, [sp], #4
   2a27e:	b004      	add	sp, #16
   2a280:	4770      	bx	lr

0002a282 <snprintk>:
{
   2a282:	b40c      	push	{r2, r3}
   2a284:	b507      	push	{r0, r1, r2, lr}
   2a286:	ab04      	add	r3, sp, #16
   2a288:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a28c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a28e:	f7e4 fa29 	bl	e6e4 <vsnprintk>
}
   2a292:	b003      	add	sp, #12
   2a294:	f85d eb04 	ldr.w	lr, [sp], #4
   2a298:	b002      	add	sp, #8
   2a29a:	4770      	bx	lr

0002a29c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a29c:	4604      	mov	r4, r0
   2a29e:	b508      	push	{r3, lr}
   2a2a0:	4608      	mov	r0, r1
   2a2a2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a2a4:	461a      	mov	r2, r3
   2a2a6:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a2a8:	f7fc f958 	bl	2655c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a2ac:	f7e7 fc02 	bl	11ab4 <z_impl_k_thread_abort>

0002a2b0 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2a2b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a2b4:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2a2b6:	0840      	lsrs	r0, r0, #1
   2a2b8:	4770      	bx	lr

0002a2ba <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a2bc:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a2be:	f7ff fff7 	bl	2a2b0 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2a2c2:	fab0 f080 	clz	r0, r0
   2a2c6:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a2ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2a2ce:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2a2d2:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2a2d4:	1d17      	adds	r7, r2, #4
{
   2a2d6:	460c      	mov	r4, r1
   2a2d8:	3206      	adds	r2, #6
   2a2da:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a2dc:	b956      	cbnz	r6, 2a2f4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a2de:	2101      	movs	r1, #1
   2a2e0:	fa01 f000 	lsl.w	r0, r1, r0
   2a2e4:	68d9      	ldr	r1, [r3, #12]
   2a2e6:	4301      	orrs	r1, r0
   2a2e8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a2ea:	f8cc 4010 	str.w	r4, [ip, #16]
   2a2ee:	53dd      	strh	r5, [r3, r7]
   2a2f0:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2a2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a2f4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a2f6:	3104      	adds	r1, #4
   2a2f8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a2fa:	53d8      	strh	r0, [r3, r7]
   2a2fc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a300:	529e      	strh	r6, [r3, r2]
   2a302:	80c5      	strh	r5, [r0, #6]
   2a304:	525d      	strh	r5, [r3, r1]
   2a306:	e7f4      	b.n	2a2f2 <free_list_add+0x38>

0002a308 <free_list_remove_bidx>:
{
   2a308:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a30a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a30e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a310:	4299      	cmp	r1, r3
   2a312:	f102 0104 	add.w	r1, r2, #4
   2a316:	d10a      	bne.n	2a32e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a318:	2301      	movs	r3, #1
   2a31a:	fa03 f202 	lsl.w	r2, r3, r2
   2a31e:	68c3      	ldr	r3, [r0, #12]
   2a320:	ea23 0302 	bic.w	r3, r3, r2
   2a324:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a326:	2300      	movs	r3, #0
   2a328:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a32c:	bd10      	pop	{r4, pc}
   2a32e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a330:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a334:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a338:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a33c:	80cb      	strh	r3, [r1, #6]
   2a33e:	8082      	strh	r2, [r0, #4]
}
   2a340:	e7f4      	b.n	2a32c <free_list_remove_bidx+0x24>

0002a342 <free_list_remove>:
{
   2a342:	b508      	push	{r3, lr}
   2a344:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a346:	f7ff ffb3 	bl	2a2b0 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a34a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a34e:	4618      	mov	r0, r3
}
   2a350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a354:	f1c2 021f 	rsb	r2, r2, #31
   2a358:	f7ff bfd6 	b.w	2a308 <free_list_remove_bidx>

0002a35c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2a35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a360:	fab1 f581 	clz	r5, r1
   2a364:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2a368:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2a36c:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a370:	4603      	mov	r3, r0
   2a372:	460e      	mov	r6, r1
	if (b->next) {
   2a374:	b1c2      	cbz	r2, 2a3a8 <alloc_chunk+0x4c>
   2a376:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2a378:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a37c:	4618      	mov	r0, r3
   2a37e:	4621      	mov	r1, r4
   2a380:	f7ff ff96 	bl	2a2b0 <chunk_size>
   2a384:	42b0      	cmp	r0, r6
   2a386:	d306      	bcc.n	2a396 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a388:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2a38a:	4618      	mov	r0, r3
   2a38c:	f7ff ffbc 	bl	2a308 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2a390:	4620      	mov	r0, r4
   2a392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a396:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2a39a:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2a39c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2a39e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a3a2:	d001      	beq.n	2a3a8 <alloc_chunk+0x4c>
   2a3a4:	4282      	cmp	r2, r0
   2a3a6:	d1e7      	bne.n	2a378 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a3a8:	f04f 34ff 	mov.w	r4, #4294967295
   2a3ac:	f1c5 0220 	rsb	r2, r5, #32
   2a3b0:	4094      	lsls	r4, r2
   2a3b2:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a3b4:	4014      	ands	r4, r2
   2a3b6:	d0eb      	beq.n	2a390 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a3b8:	fa94 f2a4 	rbit	r2, r4
   2a3bc:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a3c0:	1d11      	adds	r1, r2, #4
   2a3c2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a3c6:	4621      	mov	r1, r4
   2a3c8:	e7df      	b.n	2a38a <alloc_chunk+0x2e>

0002a3ca <merge_chunks>:
{
   2a3ca:	b538      	push	{r3, r4, r5, lr}
   2a3cc:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a3ce:	f7ff ff6f 	bl	2a2b0 <chunk_size>
{
   2a3d2:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a3d4:	4604      	mov	r4, r0
   2a3d6:	4611      	mov	r1, r2
   2a3d8:	4618      	mov	r0, r3
   2a3da:	f7ff ff69 	bl	2a2b0 <chunk_size>
   2a3de:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a3e0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a3e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a3e6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a3e8:	4618      	mov	r0, r3
   2a3ea:	f7ff ff61 	bl	2a2b0 <chunk_size>
	void *cmem = &buf[c];
   2a3ee:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a3f0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a3f4:	bd38      	pop	{r3, r4, r5, pc}

0002a3f6 <split_chunks>:
{
   2a3f6:	b538      	push	{r3, r4, r5, lr}
   2a3f8:	460c      	mov	r4, r1
   2a3fa:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a3fc:	f7ff ff58 	bl	2a2b0 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2a400:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a402:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2a404:	4405      	add	r5, r0
   2a406:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a40a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a40c:	8060      	strh	r0, [r4, #2]
   2a40e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a412:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a414:	8044      	strh	r4, [r0, #2]
   2a416:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a41a:	4618      	mov	r0, r3
   2a41c:	4611      	mov	r1, r2
   2a41e:	f7ff ff47 	bl	2a2b0 <chunk_size>
	void *cmem = &buf[c];
   2a422:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a424:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a428:	bd38      	pop	{r3, r4, r5, pc}

0002a42a <free_chunk>:
{
   2a42a:	b538      	push	{r3, r4, r5, lr}
   2a42c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a42e:	f7ff ff3f 	bl	2a2b0 <chunk_size>
   2a432:	460c      	mov	r4, r1
   2a434:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a436:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a43a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a43c:	07da      	lsls	r2, r3, #31
   2a43e:	d40a      	bmi.n	2a456 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a440:	4628      	mov	r0, r5
   2a442:	f7ff ff7e 	bl	2a342 <free_list_remove>
	return c + chunk_size(h, c);
   2a446:	4621      	mov	r1, r4
   2a448:	4628      	mov	r0, r5
   2a44a:	f7ff ff31 	bl	2a2b0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a44e:	1822      	adds	r2, r4, r0
   2a450:	4628      	mov	r0, r5
   2a452:	f7ff ffba 	bl	2a3ca <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a456:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a45a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a45c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a460:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a462:	07db      	lsls	r3, r3, #31
   2a464:	d40c      	bmi.n	2a480 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a466:	4628      	mov	r0, r5
   2a468:	f7ff ff6b 	bl	2a342 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a46c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a470:	4622      	mov	r2, r4
   2a472:	1a61      	subs	r1, r4, r1
   2a474:	4628      	mov	r0, r5
   2a476:	f7ff ffa8 	bl	2a3ca <merge_chunks>
   2a47a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a47e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a480:	4621      	mov	r1, r4
   2a482:	4628      	mov	r0, r5
}
   2a484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a488:	f7ff bf17 	b.w	2a2ba <free_list_add>

0002a48c <sys_heap_free>:
	if (mem == NULL) {
   2a48c:	b161      	cbz	r1, 2a4a8 <sys_heap_free+0x1c>
   2a48e:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a490:	3904      	subs	r1, #4
   2a492:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2a494:	f021 0307 	bic.w	r3, r1, #7
   2a498:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2a49a:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   2a49c:	08c9      	lsrs	r1, r1, #3
   2a49e:	f022 0201 	bic.w	r2, r2, #1
   2a4a2:	805a      	strh	r2, [r3, #2]
   2a4a4:	f7ff bfc1 	b.w	2a42a <free_chunk>
}
   2a4a8:	4770      	bx	lr

0002a4aa <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2a4aa:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a4ac:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2a4ae:	b909      	cbnz	r1, 2a4b4 <sys_heap_alloc+0xa>
		return NULL;
   2a4b0:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a4b2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a4b4:	68ab      	ldr	r3, [r5, #8]
   2a4b6:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a4ba:	d9f9      	bls.n	2a4b0 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a4bc:	310b      	adds	r1, #11
   2a4be:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a4c0:	4621      	mov	r1, r4
   2a4c2:	4628      	mov	r0, r5
   2a4c4:	f7ff ff4a 	bl	2a35c <alloc_chunk>
	if (c == 0U) {
   2a4c8:	4606      	mov	r6, r0
   2a4ca:	2800      	cmp	r0, #0
   2a4cc:	d0f0      	beq.n	2a4b0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a4ce:	4601      	mov	r1, r0
   2a4d0:	4628      	mov	r0, r5
   2a4d2:	f7ff feed 	bl	2a2b0 <chunk_size>
   2a4d6:	42a0      	cmp	r0, r4
   2a4d8:	d907      	bls.n	2a4ea <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a4da:	4628      	mov	r0, r5
   2a4dc:	1932      	adds	r2, r6, r4
   2a4de:	f7ff ff8a 	bl	2a3f6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a4e2:	4611      	mov	r1, r2
   2a4e4:	4628      	mov	r0, r5
   2a4e6:	f7ff fee8 	bl	2a2ba <free_list_add>
	void *cmem = &buf[c];
   2a4ea:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a4ee:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a4f0:	8853      	ldrh	r3, [r2, #2]
   2a4f2:	3004      	adds	r0, #4
   2a4f4:	f043 0301 	orr.w	r3, r3, #1
   2a4f8:	8053      	strh	r3, [r2, #2]
	return mem;
   2a4fa:	e7da      	b.n	2a4b2 <sys_heap_alloc+0x8>

0002a4fc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2a4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a500:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2a504:	ea19 0901 	ands.w	r9, r9, r1
{
   2a508:	460f      	mov	r7, r1
   2a50a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   2a50c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   2a50e:	d00c      	beq.n	2a52a <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   2a510:	424b      	negs	r3, r1
   2a512:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2a514:	2b04      	cmp	r3, #4
   2a516:	461a      	mov	r2, r3
   2a518:	464f      	mov	r7, r9
   2a51a:	bf28      	it	cs
   2a51c:	2204      	movcs	r2, #4
	rew = align & -align;
   2a51e:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2a520:	b964      	cbnz	r4, 2a53c <sys_heap_aligned_alloc+0x40>
		return NULL;
   2a522:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a524:	4628      	mov	r0, r5
   2a526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2a52a:	2904      	cmp	r1, #4
   2a52c:	d804      	bhi.n	2a538 <sys_heap_aligned_alloc+0x3c>
}
   2a52e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2a532:	4611      	mov	r1, r2
   2a534:	f7ff bfb9 	b.w	2a4aa <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2a538:	2204      	movs	r2, #4
   2a53a:	e7f1      	b.n	2a520 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2a53c:	68b3      	ldr	r3, [r6, #8]
   2a53e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2a542:	d9ee      	bls.n	2a522 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a544:	f104 010b 	add.w	r1, r4, #11
   2a548:	4439      	add	r1, r7
   2a54a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2a54c:	4630      	mov	r0, r6
   2a54e:	08c9      	lsrs	r1, r1, #3
   2a550:	f7ff ff04 	bl	2a35c <alloc_chunk>
	if (c0 == 0) {
   2a554:	4680      	mov	r8, r0
   2a556:	2800      	cmp	r0, #0
   2a558:	d0e3      	beq.n	2a522 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2a55a:	f109 0504 	add.w	r5, r9, #4
   2a55e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2a562:	1e7b      	subs	r3, r7, #1
   2a564:	4435      	add	r5, r6
   2a566:	441d      	add	r5, r3
   2a568:	427f      	negs	r7, r7
   2a56a:	403d      	ands	r5, r7
   2a56c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a570:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a572:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a574:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a576:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a578:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2a57c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2a57e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a582:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2a586:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2a58a:	d208      	bcs.n	2a59e <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2a58c:	4601      	mov	r1, r0
   2a58e:	463a      	mov	r2, r7
   2a590:	4630      	mov	r0, r6
   2a592:	f7ff ff30 	bl	2a3f6 <split_chunks>
		free_list_add(h, c0);
   2a596:	4641      	mov	r1, r8
   2a598:	4630      	mov	r0, r6
   2a59a:	f7ff fe8e 	bl	2a2ba <free_list_add>
	return c + chunk_size(h, c);
   2a59e:	4639      	mov	r1, r7
   2a5a0:	4630      	mov	r0, r6
   2a5a2:	f7ff fe85 	bl	2a2b0 <chunk_size>
   2a5a6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2a5a8:	4284      	cmp	r4, r0
   2a5aa:	d207      	bcs.n	2a5bc <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2a5ac:	4630      	mov	r0, r6
   2a5ae:	4622      	mov	r2, r4
   2a5b0:	f7ff ff21 	bl	2a3f6 <split_chunks>
		free_list_add(h, c_end);
   2a5b4:	4621      	mov	r1, r4
   2a5b6:	4630      	mov	r0, r6
   2a5b8:	f7ff fe7f 	bl	2a2ba <free_list_add>
	void *cmem = &buf[c];
   2a5bc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a5c0:	8873      	ldrh	r3, [r6, #2]
   2a5c2:	f043 0301 	orr.w	r3, r3, #1
   2a5c6:	8073      	strh	r3, [r6, #2]
   2a5c8:	e7ac      	b.n	2a524 <sys_heap_aligned_alloc+0x28>

0002a5ca <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2a5ca:	b4f0      	push	{r4, r5, r6, r7}
   2a5cc:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2a5ce:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a5d0:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a5d2:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a5d4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a5d8:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2a5dc:	1a0e      	subs	r6, r1, r0
   2a5de:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   2a5e0:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2a5e4:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2a5e6:	2700      	movs	r7, #0
   2a5e8:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2a5ea:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   2a5ee:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   2a5f0:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a5f2:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   2a5f4:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2a5f8:	f1c2 0220 	rsb	r2, r2, #32
   2a5fc:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2a5fe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   2a602:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2a606:	4294      	cmp	r4, r2
   2a608:	d1fb      	bne.n	2a602 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a60a:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a60c:	f042 0201 	orr.w	r2, r2, #1
   2a610:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2a612:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a614:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2a616:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a61a:	8007      	strh	r7, [r0, #0]
   2a61c:	8065      	strh	r5, [r4, #2]
   2a61e:	1984      	adds	r4, r0, r6
   2a620:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2a624:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2a628:	8067      	strh	r7, [r4, #2]
   2a62a:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a62c:	885a      	ldrh	r2, [r3, #2]
   2a62e:	f042 0201 	orr.w	r2, r2, #1
   2a632:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2a634:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2a636:	f7ff be40 	b.w	2a2ba <free_list_add>

0002a63a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a63a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2a63c:	f013 0307 	ands.w	r3, r3, #7
   2a640:	d105      	bne.n	2a64e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a642:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a644:	2b00      	cmp	r3, #0
   2a646:	bf0c      	ite	eq
   2a648:	2000      	moveq	r0, #0
   2a64a:	2003      	movne	r0, #3
   2a64c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a64e:	2b02      	cmp	r3, #2
   2a650:	d105      	bne.n	2a65e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a652:	8b40      	ldrh	r0, [r0, #26]
   2a654:	fab0 f080 	clz	r0, r0
   2a658:	0940      	lsrs	r0, r0, #5
   2a65a:	0080      	lsls	r0, r0, #2
   2a65c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a65e:	2b01      	cmp	r3, #1
   2a660:	d105      	bne.n	2a66e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a662:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a664:	2b00      	cmp	r3, #0
   2a666:	bf0c      	ite	eq
   2a668:	2000      	moveq	r0, #0
   2a66a:	2005      	movne	r0, #5
   2a66c:	4770      	bx	lr
	int evt = EVT_NOP;
   2a66e:	2000      	movs	r0, #0
}
   2a670:	4770      	bx	lr

0002a672 <validate_args>:
{
   2a672:	b510      	push	{r4, lr}
   2a674:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a676:	b100      	cbz	r0, 2a67a <validate_args+0x8>
   2a678:	b911      	cbnz	r1, 2a680 <validate_args+0xe>
		return -EINVAL;
   2a67a:	f06f 0015 	mvn.w	r0, #21
}
   2a67e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a680:	1d08      	adds	r0, r1, #4
   2a682:	f000 f895 	bl	2a7b0 <sys_notify_validate>
	if ((rv == 0)
   2a686:	2800      	cmp	r0, #0
   2a688:	d1f9      	bne.n	2a67e <validate_args+0xc>
	    && ((cli->notify.flags
   2a68a:	68a3      	ldr	r3, [r4, #8]
   2a68c:	2b03      	cmp	r3, #3
   2a68e:	d9f6      	bls.n	2a67e <validate_args+0xc>
   2a690:	e7f3      	b.n	2a67a <validate_args+0x8>

0002a692 <notify_one>:
{
   2a692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a696:	460d      	mov	r5, r1
   2a698:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a69a:	4619      	mov	r1, r3
   2a69c:	1d28      	adds	r0, r5, #4
{
   2a69e:	4690      	mov	r8, r2
   2a6a0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a6a2:	f000 f899 	bl	2a7d8 <sys_notify_finalize>
	if (cb) {
   2a6a6:	4604      	mov	r4, r0
   2a6a8:	b138      	cbz	r0, 2a6ba <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a6aa:	4633      	mov	r3, r6
   2a6ac:	4642      	mov	r2, r8
   2a6ae:	4629      	mov	r1, r5
   2a6b0:	4638      	mov	r0, r7
   2a6b2:	46a4      	mov	ip, r4
}
   2a6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a6b8:	4760      	bx	ip
}
   2a6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a6be <transition_complete>:
{
   2a6be:	b410      	push	{r4}
	__asm__ volatile(
   2a6c0:	f04f 0420 	mov.w	r4, #32
   2a6c4:	f3ef 8211 	mrs	r2, BASEPRI
   2a6c8:	f384 8812 	msr	BASEPRI_MAX, r4
   2a6cc:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2a6d0:	6141      	str	r1, [r0, #20]
}
   2a6d2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2a6d4:	2101      	movs	r1, #1
   2a6d6:	f7e4 b81b 	b.w	e710 <process_event>

0002a6da <onoff_manager_init>:
{
   2a6da:	b538      	push	{r3, r4, r5, lr}
   2a6dc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a6de:	4605      	mov	r5, r0
   2a6e0:	b158      	cbz	r0, 2a6fa <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2a6e2:	b151      	cbz	r1, 2a6fa <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2a6e4:	680b      	ldr	r3, [r1, #0]
   2a6e6:	b143      	cbz	r3, 2a6fa <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2a6e8:	684b      	ldr	r3, [r1, #4]
   2a6ea:	b133      	cbz	r3, 2a6fa <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a6ec:	221c      	movs	r2, #28
   2a6ee:	2100      	movs	r1, #0
   2a6f0:	f007 f8d7 	bl	318a2 <memset>
	return 0;
   2a6f4:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a6f6:	612c      	str	r4, [r5, #16]
}
   2a6f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a6fa:	f06f 0015 	mvn.w	r0, #21
   2a6fe:	e7fb      	b.n	2a6f8 <onoff_manager_init+0x1e>

0002a700 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2a700:	b570      	push	{r4, r5, r6, lr}
   2a702:	4605      	mov	r5, r0
   2a704:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2a706:	f7ff ffb4 	bl	2a672 <validate_args>

	if (rv < 0) {
   2a70a:	1e04      	subs	r4, r0, #0
   2a70c:	db15      	blt.n	2a73a <onoff_request+0x3a>
   2a70e:	f04f 0320 	mov.w	r3, #32
   2a712:	f3ef 8211 	mrs	r2, BASEPRI
   2a716:	f383 8812 	msr	BASEPRI_MAX, r3
   2a71a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2a71e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a722:	8b6b      	ldrh	r3, [r5, #26]
   2a724:	8b2c      	ldrh	r4, [r5, #24]
   2a726:	428b      	cmp	r3, r1
   2a728:	f004 0407 	and.w	r4, r4, #7
   2a72c:	d107      	bne.n	2a73e <onoff_request+0x3e>
	__asm__ volatile(
   2a72e:	f382 8811 	msr	BASEPRI, r2
   2a732:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   2a736:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2a73a:	4620      	mov	r0, r4
   2a73c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2a73e:	2c02      	cmp	r4, #2
   2a740:	d10c      	bne.n	2a75c <onoff_request+0x5c>
		mgr->refs += 1U;
   2a742:	3301      	adds	r3, #1
   2a744:	836b      	strh	r3, [r5, #26]
   2a746:	f382 8811 	msr	BASEPRI, r2
   2a74a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2a74e:	2300      	movs	r3, #0
   2a750:	4622      	mov	r2, r4
   2a752:	4631      	mov	r1, r6
   2a754:	4628      	mov	r0, r5
   2a756:	f7ff ff9c 	bl	2a692 <notify_one>
   2a75a:	e7ee      	b.n	2a73a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2a75c:	2c06      	cmp	r4, #6
   2a75e:	d814      	bhi.n	2a78a <onoff_request+0x8a>
   2a760:	e8df f004 	tbb	[pc, r4]
   2a764:	13131304 	.word	0x13131304
   2a768:	1a04      	.short	0x1a04
   2a76a:	04          	.byte	0x04
   2a76b:	00          	.byte	0x00
	parent->next = child;
   2a76c:	2300      	movs	r3, #0
   2a76e:	6033      	str	r3, [r6, #0]
	return list->tail;
   2a770:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2a772:	b93b      	cbnz	r3, 2a784 <onoff_request+0x84>
	list->head = node;
   2a774:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   2a778:	b9ac      	cbnz	r4, 2a7a6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2a77a:	2102      	movs	r1, #2
   2a77c:	4628      	mov	r0, r5
   2a77e:	f7e3 ffc7 	bl	e710 <process_event>
   2a782:	e7da      	b.n	2a73a <onoff_request+0x3a>
	parent->next = child;
   2a784:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2a786:	606e      	str	r6, [r5, #4]
}
   2a788:	e7f6      	b.n	2a778 <onoff_request+0x78>
   2a78a:	f382 8811 	msr	BASEPRI, r2
   2a78e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2a792:	f06f 0404 	mvn.w	r4, #4
   2a796:	e7d0      	b.n	2a73a <onoff_request+0x3a>
   2a798:	f382 8811 	msr	BASEPRI, r2
   2a79c:	f3bf 8f6f 	isb	sy
   2a7a0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a7a4:	e7c9      	b.n	2a73a <onoff_request+0x3a>
   2a7a6:	f382 8811 	msr	BASEPRI, r2
   2a7aa:	f3bf 8f6f 	isb	sy
		if (notify) {
   2a7ae:	e7c4      	b.n	2a73a <onoff_request+0x3a>

0002a7b0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2a7b0:	4603      	mov	r3, r0
   2a7b2:	b140      	cbz	r0, 2a7c6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a7b4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2a7b6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2a7ba:	2a02      	cmp	r2, #2
   2a7bc:	d006      	beq.n	2a7cc <sys_notify_validate+0x1c>
   2a7be:	2a03      	cmp	r2, #3
   2a7c0:	d004      	beq.n	2a7cc <sys_notify_validate+0x1c>
   2a7c2:	2a01      	cmp	r2, #1
   2a7c4:	d005      	beq.n	2a7d2 <sys_notify_validate+0x22>
   2a7c6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2a7ca:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2a7cc:	681a      	ldr	r2, [r3, #0]
   2a7ce:	2a00      	cmp	r2, #0
   2a7d0:	d0f9      	beq.n	2a7c6 <sys_notify_validate+0x16>
		notify->result = 0;
   2a7d2:	2000      	movs	r0, #0
   2a7d4:	6098      	str	r0, [r3, #8]
   2a7d6:	4770      	bx	lr

0002a7d8 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2a7d8:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a7da:	6842      	ldr	r2, [r0, #4]
   2a7dc:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   2a7de:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2a7e2:	2a02      	cmp	r2, #2
   2a7e4:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   2a7e8:	6081      	str	r1, [r0, #8]
	switch (method) {
   2a7ea:	d007      	beq.n	2a7fc <sys_notify_finalize+0x24>
   2a7ec:	2a03      	cmp	r2, #3
   2a7ee:	d002      	beq.n	2a7f6 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a7f0:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   2a7f2:	2000      	movs	r0, #0
   2a7f4:	e001      	b.n	2a7fa <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   2a7f6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a7f8:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2a7fa:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2a7fc:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a7fe:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2a800:	2800      	cmp	r0, #0
   2a802:	d0f6      	beq.n	2a7f2 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   2a804:	f7fc f990 	bl	26b28 <z_impl_k_poll_signal_raise>
   2a808:	e7f3      	b.n	2a7f2 <sys_notify_finalize+0x1a>

0002a80a <outs>:
{
   2a80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a80e:	4607      	mov	r7, r0
   2a810:	4688      	mov	r8, r1
   2a812:	4615      	mov	r5, r2
   2a814:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a816:	4614      	mov	r4, r2
   2a818:	42b4      	cmp	r4, r6
   2a81a:	d305      	bcc.n	2a828 <outs+0x1e>
   2a81c:	b10e      	cbz	r6, 2a822 <outs+0x18>
	return (int)count;
   2a81e:	1b60      	subs	r0, r4, r5
   2a820:	e008      	b.n	2a834 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a822:	7823      	ldrb	r3, [r4, #0]
   2a824:	2b00      	cmp	r3, #0
   2a826:	d0fa      	beq.n	2a81e <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2a828:	4641      	mov	r1, r8
   2a82a:	f814 0b01 	ldrb.w	r0, [r4], #1
   2a82e:	47b8      	blx	r7
		if (rc < 0) {
   2a830:	2800      	cmp	r0, #0
   2a832:	daf1      	bge.n	2a818 <outs+0xe>
}
   2a834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a838 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2a838:	b40f      	push	{r0, r1, r2, r3}
   2a83a:	b507      	push	{r0, r1, r2, lr}
   2a83c:	a904      	add	r1, sp, #16
   2a83e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2a842:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2a844:	f7e3 ff40 	bl	e6c8 <vprintk>

	va_end(ap);
}
   2a848:	b003      	add	sp, #12
   2a84a:	f85d eb04 	ldr.w	lr, [sp], #4
   2a84e:	b004      	add	sp, #16
   2a850:	4770      	bx	lr

0002a852 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 100);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2a852:	4770      	bx	lr

0002a854 <nordicsemi_nrf53_init>:
{
   2a854:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a856:	f04f 0320 	mov.w	r3, #32
   2a85a:	f3ef 8511 	mrs	r5, BASEPRI
   2a85e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a862:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   2a866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   2a86a:	2401      	movs	r4, #1
   2a86c:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   2a86e:	4621      	mov	r1, r4
   2a870:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2a874:	2021      	movs	r0, #33	; 0x21
   2a876:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   2a87a:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   2a87e:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2a882:	f000 f824 	bl	2a8ce <soc_secure_gpio_pin_mcu_select>
   2a886:	4621      	mov	r1, r4
   2a888:	2020      	movs	r0, #32
   2a88a:	f000 f820 	bl	2a8ce <soc_secure_gpio_pin_mcu_select>
   2a88e:	4621      	mov	r1, r4
   2a890:	200b      	movs	r0, #11
   2a892:	f000 f81c 	bl	2a8ce <soc_secure_gpio_pin_mcu_select>
   2a896:	4621      	mov	r1, r4
   2a898:	200a      	movs	r0, #10
   2a89a:	f000 f818 	bl	2a8ce <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   2a89e:	f385 8811 	msr	BASEPRI, r5
   2a8a2:	f3bf 8f6f 	isb	sy
}
   2a8a6:	2000      	movs	r0, #0
   2a8a8:	bd38      	pop	{r3, r4, r5, pc}

0002a8aa <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2a8aa:	2806      	cmp	r0, #6
   2a8ac:	d108      	bne.n	2a8c0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2a8ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a8b2:	2201      	movs	r2, #1
   2a8b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a8b8:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a8bc:	bf20      	wfe
    while (true)
   2a8be:	e7fd      	b.n	2a8bc <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2a8c0:	4770      	bx	lr

0002a8c2 <pm_state_exit_post_ops>:
   2a8c2:	2300      	movs	r3, #0
   2a8c4:	f383 8811 	msr	BASEPRI, r3
   2a8c8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a8cc:	4770      	bx	lr

0002a8ce <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   2a8ce:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   2a8d0:	aa01      	add	r2, sp, #4
   2a8d2:	f005 fba1 	bl	30018 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   2a8d6:	b003      	add	sp, #12
   2a8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0002a8dc <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2a8dc:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2a8de:	ab01      	add	r3, sp, #4
   2a8e0:	f005 fb82 	bl	2ffe8 <tfm_platform_mem_read>

	switch (status) {
   2a8e4:	2802      	cmp	r0, #2
   2a8e6:	d00a      	beq.n	2a8fe <soc_secure_mem_read+0x22>
   2a8e8:	2803      	cmp	r0, #3
   2a8ea:	d00b      	beq.n	2a904 <soc_secure_mem_read+0x28>
   2a8ec:	b968      	cbnz	r0, 2a90a <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2a8ee:	9801      	ldr	r0, [sp, #4]
   2a8f0:	3800      	subs	r0, #0
   2a8f2:	bf18      	it	ne
   2a8f4:	2001      	movne	r0, #1
   2a8f6:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2a8f8:	b003      	add	sp, #12
   2a8fa:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2a8fe:	f06f 0015 	mvn.w	r0, #21
   2a902:	e7f9      	b.n	2a8f8 <soc_secure_mem_read+0x1c>
	switch (status) {
   2a904:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a908:	e7f6      	b.n	2a8f8 <soc_secure_mem_read+0x1c>
		return -EPERM;
   2a90a:	f04f 30ff 	mov.w	r0, #4294967295
   2a90e:	e7f3      	b.n	2a8f8 <soc_secure_mem_read+0x1c>

0002a910 <dummy_timestamp>:
}
   2a910:	2000      	movs	r0, #0
   2a912:	4770      	bx	lr

0002a914 <default_get_timestamp>:
   2a914:	f005 bafd 	b.w	2ff12 <sys_clock_cycle_get_32>

0002a918 <atomic_inc>:
{
   2a918:	4603      	mov	r3, r0
}
   2a91a:	e8d3 0fef 	ldaex	r0, [r3]
   2a91e:	1c42      	adds	r2, r0, #1
   2a920:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2a924:	2900      	cmp	r1, #0
   2a926:	d1f8      	bne.n	2a91a <atomic_inc+0x2>
   2a928:	4770      	bx	lr

0002a92a <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   2a92a:	2100      	movs	r1, #0
{
   2a92c:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   2a92e:	4608      	mov	r0, r1
   2a930:	f7e4 fcfc 	bl	f32c <z_log_init.isra.0>
	}

	return 0;
}
   2a934:	2000      	movs	r0, #0
   2a936:	bd08      	pop	{r3, pc}

0002a938 <z_log_notify_backend_enabled>:
}
   2a938:	4770      	bx	lr

0002a93a <z_log_get_tag>:
}
   2a93a:	2000      	movs	r0, #0
   2a93c:	4770      	bx	lr

0002a93e <z_log_msg_finalize>:
{
   2a93e:	b570      	push	{r4, r5, r6, lr}
   2a940:	460e      	mov	r6, r1
   2a942:	4615      	mov	r5, r2
   2a944:	4619      	mov	r1, r3
	if (!msg) {
   2a946:	4604      	mov	r4, r0
   2a948:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2a94c:	b918      	cbnz	r0, 2a956 <z_log_msg_finalize+0x18>
}
   2a94e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2a952:	f7e4 bd97 	b.w	f484 <z_log_dropped>
	if (data) {
   2a956:	b12b      	cbz	r3, 2a964 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2a958:	3010      	adds	r0, #16
   2a95a:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2a95e:	4418      	add	r0, r3
   2a960:	f006 ff65 	bl	3182e <memcpy>
	msg->hdr.source = source;
   2a964:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2a968:	4620      	mov	r0, r4
}
   2a96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2a96e:	f7e4 bd9d 	b.w	f4ac <z_log_msg_commit>

0002a972 <out_func>:
{
   2a972:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2a974:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   2a978:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2a97c:	2101      	movs	r1, #1
   2a97e:	6852      	ldr	r2, [r2, #4]
   2a980:	f10d 0007 	add.w	r0, sp, #7
   2a984:	4798      	blx	r3
}
   2a986:	2000      	movs	r0, #0
   2a988:	b003      	add	sp, #12
   2a98a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a98e <cr_out_func>:
	if (c == '\n') {
   2a98e:	280a      	cmp	r0, #10
{
   2a990:	b538      	push	{r3, r4, r5, lr}
   2a992:	4604      	mov	r4, r0
   2a994:	460d      	mov	r5, r1
	if (c == '\n') {
   2a996:	d102      	bne.n	2a99e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2a998:	200d      	movs	r0, #13
   2a99a:	f7ff ffea 	bl	2a972 <out_func>
	out_func(c, ctx);
   2a99e:	4629      	mov	r1, r5
   2a9a0:	4620      	mov	r0, r4
   2a9a2:	f7ff ffe6 	bl	2a972 <out_func>
}
   2a9a6:	2000      	movs	r0, #0
   2a9a8:	bd38      	pop	{r3, r4, r5, pc}

0002a9aa <buffer_write>:
{
   2a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a9ac:	4606      	mov	r6, r0
   2a9ae:	460d      	mov	r5, r1
   2a9b0:	4614      	mov	r4, r2
   2a9b2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2a9b4:	4621      	mov	r1, r4
   2a9b6:	4628      	mov	r0, r5
   2a9b8:	463a      	mov	r2, r7
   2a9ba:	47b0      	blx	r6
	} while (len != 0);
   2a9bc:	1a24      	subs	r4, r4, r0
		buf += processed;
   2a9be:	4405      	add	r5, r0
	} while (len != 0);
   2a9c0:	d1f8      	bne.n	2a9b4 <buffer_write+0xa>
}
   2a9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a9c4 <cbvprintf>:
{
   2a9c4:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2a9c6:	2400      	movs	r4, #0
   2a9c8:	9400      	str	r4, [sp, #0]
   2a9ca:	f7e4 f827 	bl	ea1c <z_cbvprintf_impl>
}
   2a9ce:	b002      	add	sp, #8
   2a9d0:	bd10      	pop	{r4, pc}

0002a9d2 <log_output_flush>:
{
   2a9d2:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2a9d4:	6842      	ldr	r2, [r0, #4]
{
   2a9d6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2a9d8:	e9d2 2300 	ldrd	r2, r3, [r2]
   2a9dc:	6881      	ldr	r1, [r0, #8]
   2a9de:	6800      	ldr	r0, [r0, #0]
   2a9e0:	f7ff ffe3 	bl	2a9aa <buffer_write>
	output->control_block->offset = 0;
   2a9e4:	2200      	movs	r2, #0
   2a9e6:	6863      	ldr	r3, [r4, #4]
   2a9e8:	601a      	str	r2, [r3, #0]
}
   2a9ea:	bd10      	pop	{r4, pc}

0002a9ec <nvs_flash_rd>:
{
   2a9ec:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2a9ee:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a9f0:	8984      	ldrh	r4, [r0, #12]
   2a9f2:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a9f4:	fa16 f181 	uxtah	r1, r6, r1
   2a9f8:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2a9fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2a9fe:	6884      	ldr	r4, [r0, #8]
   2aa00:	6824      	ldr	r4, [r4, #0]
   2aa02:	46a4      	mov	ip, r4
}
   2aa04:	bc70      	pop	{r4, r5, r6}
   2aa06:	4760      	bx	ip

0002aa08 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2aa08:	680b      	ldr	r3, [r1, #0]
   2aa0a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2aa0e:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2aa10:	89c0      	ldrh	r0, [r0, #14]
   2aa12:	0c1a      	lsrs	r2, r3, #16
   2aa14:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2aa18:	bf04      	itt	eq
   2aa1a:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2aa1e:	600b      	streq	r3, [r1, #0]
}
   2aa20:	4770      	bx	lr

0002aa22 <nvs_flash_block_cmp>:
{
   2aa22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2aa26:	4681      	mov	r9, r0
   2aa28:	460e      	mov	r6, r1
   2aa2a:	4617      	mov	r7, r2
   2aa2c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aa30:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa32:	681d      	ldr	r5, [r3, #0]
   2aa34:	426d      	negs	r5, r5
	block_size =
   2aa36:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2aa3a:	b91c      	cbnz	r4, 2aa44 <nvs_flash_block_cmp+0x22>
	return 0;
   2aa3c:	4620      	mov	r0, r4
}
   2aa3e:	b009      	add	sp, #36	; 0x24
   2aa40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aa44:	42ac      	cmp	r4, r5
   2aa46:	46a0      	mov	r8, r4
   2aa48:	bf28      	it	cs
   2aa4a:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2aa4c:	466a      	mov	r2, sp
   2aa4e:	4643      	mov	r3, r8
   2aa50:	4631      	mov	r1, r6
   2aa52:	4648      	mov	r0, r9
   2aa54:	f7ff ffca 	bl	2a9ec <nvs_flash_rd>
		if (rc) {
   2aa58:	2800      	cmp	r0, #0
   2aa5a:	d1f0      	bne.n	2aa3e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2aa5c:	4642      	mov	r2, r8
   2aa5e:	4669      	mov	r1, sp
   2aa60:	4638      	mov	r0, r7
   2aa62:	f006 fed4 	bl	3180e <memcmp>
		if (rc) {
   2aa66:	b920      	cbnz	r0, 2aa72 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2aa68:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aa6c:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2aa6e:	4447      	add	r7, r8
   2aa70:	e7e3      	b.n	2aa3a <nvs_flash_block_cmp+0x18>
			return 1;
   2aa72:	2001      	movs	r0, #1
   2aa74:	e7e3      	b.n	2aa3e <nvs_flash_block_cmp+0x1c>

0002aa76 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa76:	4601      	mov	r1, r0
{
   2aa78:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa7a:	2207      	movs	r2, #7
{
   2aa7c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa7e:	20ff      	movs	r0, #255	; 0xff
   2aa80:	f7e3 ff54 	bl	e92c <crc8_ccitt>
	entry->crc8 = crc8;
   2aa84:	71e0      	strb	r0, [r4, #7]
}
   2aa86:	bd10      	pop	{r4, pc}

0002aa88 <nvs_flash_cmp_const>:
{
   2aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa8c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aa90:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa92:	681d      	ldr	r5, [r3, #0]
{
   2aa94:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa96:	426d      	negs	r5, r5
	block_size =
   2aa98:	f005 0520 	and.w	r5, r5, #32
{
   2aa9c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2aa9e:	4668      	mov	r0, sp
{
   2aaa0:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2aaa2:	462a      	mov	r2, r5
   2aaa4:	f006 fefd 	bl	318a2 <memset>
	while (len) {
   2aaa8:	b91c      	cbnz	r4, 2aab2 <nvs_flash_cmp_const+0x2a>
	return 0;
   2aaaa:	4620      	mov	r0, r4
}
   2aaac:	b008      	add	sp, #32
   2aaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aab2:	42ac      	cmp	r4, r5
   2aab4:	46a0      	mov	r8, r4
   2aab6:	bf28      	it	cs
   2aab8:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2aaba:	466a      	mov	r2, sp
   2aabc:	4643      	mov	r3, r8
   2aabe:	4631      	mov	r1, r6
   2aac0:	4638      	mov	r0, r7
   2aac2:	f7ff ffae 	bl	2aa22 <nvs_flash_block_cmp>
		if (rc) {
   2aac6:	2800      	cmp	r0, #0
   2aac8:	d1f0      	bne.n	2aaac <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2aaca:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aace:	4446      	add	r6, r8
   2aad0:	e7ea      	b.n	2aaa8 <nvs_flash_cmp_const+0x20>

0002aad2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2aad2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2aad4:	ab0b      	add	r3, sp, #44	; 0x2c
   2aad6:	9305      	str	r3, [sp, #20]
   2aad8:	9303      	str	r3, [sp, #12]
   2aada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2aadc:	9302      	str	r3, [sp, #8]
   2aade:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2aae0:	9301      	str	r3, [sp, #4]
   2aae2:	2300      	movs	r3, #0
   2aae4:	4618      	mov	r0, r3
   2aae6:	9300      	str	r3, [sp, #0]
   2aae8:	f7e4 fd1e 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2aaec:	b007      	add	sp, #28
   2aaee:	f85d fb04 	ldr.w	pc, [sp], #4

0002aaf2 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2aaf2:	7803      	ldrb	r3, [r0, #0]
   2aaf4:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2aaf6:	bf81      	itttt	hi
   2aaf8:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2aafc:	18c9      	addhi	r1, r1, r3
   2aafe:	425b      	neghi	r3, r3
   2ab00:	4019      	andhi	r1, r3
}
   2ab02:	4608      	mov	r0, r1
   2ab04:	4770      	bx	lr

0002ab06 <nvs_ate_valid>:
{
   2ab06:	b570      	push	{r4, r5, r6, lr}
   2ab08:	460c      	mov	r4, r1
   2ab0a:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab0c:	2108      	movs	r1, #8
   2ab0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ab10:	f7ff ffef 	bl	2aaf2 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab14:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab16:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab18:	4621      	mov	r1, r4
   2ab1a:	20ff      	movs	r0, #255	; 0xff
   2ab1c:	f7e3 ff06 	bl	e92c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2ab20:	79e3      	ldrb	r3, [r4, #7]
   2ab22:	4283      	cmp	r3, r0
   2ab24:	d107      	bne.n	2ab36 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2ab26:	89aa      	ldrh	r2, [r5, #12]
   2ab28:	8863      	ldrh	r3, [r4, #2]
   2ab2a:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2ab2c:	4283      	cmp	r3, r0
   2ab2e:	bf2c      	ite	cs
   2ab30:	2000      	movcs	r0, #0
   2ab32:	2001      	movcc	r0, #1
}
   2ab34:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2ab36:	2000      	movs	r0, #0
   2ab38:	e7fc      	b.n	2ab34 <nvs_ate_valid+0x2e>

0002ab3a <nvs_close_ate_valid>:
{
   2ab3a:	b538      	push	{r3, r4, r5, lr}
   2ab3c:	4605      	mov	r5, r0
   2ab3e:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2ab40:	f7ff ffe1 	bl	2ab06 <nvs_ate_valid>
   2ab44:	b1a0      	cbz	r0, 2ab70 <nvs_close_ate_valid+0x36>
   2ab46:	88a0      	ldrh	r0, [r4, #4]
   2ab48:	b998      	cbnz	r0, 2ab72 <nvs_close_ate_valid+0x38>
   2ab4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ab4e:	8822      	ldrh	r2, [r4, #0]
   2ab50:	429a      	cmp	r2, r3
   2ab52:	d10d      	bne.n	2ab70 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab54:	2108      	movs	r1, #8
   2ab56:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2ab58:	f7ff ffcb 	bl	2aaf2 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2ab5c:	8862      	ldrh	r2, [r4, #2]
   2ab5e:	89ab      	ldrh	r3, [r5, #12]
   2ab60:	1a9b      	subs	r3, r3, r2
   2ab62:	fbb3 f2f0 	udiv	r2, r3, r0
   2ab66:	fb02 3010 	mls	r0, r2, r0, r3
   2ab6a:	fab0 f080 	clz	r0, r0
   2ab6e:	0940      	lsrs	r0, r0, #5
}
   2ab70:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2ab72:	2000      	movs	r0, #0
   2ab74:	e7fc      	b.n	2ab70 <nvs_close_ate_valid+0x36>

0002ab76 <nvs_prev_ate>:
{
   2ab76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ab78:	4604      	mov	r4, r0
   2ab7a:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ab7e:	2108      	movs	r1, #8
   2ab80:	f7ff ffb7 	bl	2aaf2 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ab84:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab86:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ab88:	6829      	ldr	r1, [r5, #0]
   2ab8a:	4620      	mov	r0, r4
   2ab8c:	f7ff ff2e 	bl	2a9ec <nvs_flash_rd>
	if (rc) {
   2ab90:	4606      	mov	r6, r0
   2ab92:	2800      	cmp	r0, #0
   2ab94:	d136      	bne.n	2ac04 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2ab96:	682b      	ldr	r3, [r5, #0]
   2ab98:	443b      	add	r3, r7
   2ab9a:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2ab9c:	89a2      	ldrh	r2, [r4, #12]
   2ab9e:	b299      	uxth	r1, r3
   2aba0:	1bd2      	subs	r2, r2, r7
   2aba2:	4291      	cmp	r1, r2
   2aba4:	d12e      	bne.n	2ac04 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2aba6:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2aba8:	bf09      	itett	eq
   2abaa:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2abac:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2abb0:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2abb4:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2abb8:	4620      	mov	r0, r4
   2abba:	2308      	movs	r3, #8
   2abbc:	466a      	mov	r2, sp
   2abbe:	6029      	str	r1, [r5, #0]
   2abc0:	f7ff ff14 	bl	2a9ec <nvs_flash_rd>
	if (rc) {
   2abc4:	b9e8      	cbnz	r0, 2ac02 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2abc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2abc8:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2abca:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2abcc:	f813 1b01 	ldrb.w	r1, [r3], #1
   2abd0:	428a      	cmp	r2, r1
   2abd2:	d10c      	bne.n	2abee <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2abd4:	3001      	adds	r0, #1
   2abd6:	2808      	cmp	r0, #8
   2abd8:	d1f8      	bne.n	2abcc <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2abda:	6863      	ldr	r3, [r4, #4]
   2abdc:	e005      	b.n	2abea <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2abde:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2abe0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2abe4:	0c1b      	lsrs	r3, r3, #16
   2abe6:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2abe8:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2abea:	602b      	str	r3, [r5, #0]
		return 0;
   2abec:	e00a      	b.n	2ac04 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2abee:	4669      	mov	r1, sp
   2abf0:	4620      	mov	r0, r4
   2abf2:	f7ff ffa2 	bl	2ab3a <nvs_close_ate_valid>
   2abf6:	2800      	cmp	r0, #0
   2abf8:	d1f1      	bne.n	2abde <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2abfa:	4629      	mov	r1, r5
   2abfc:	4620      	mov	r0, r4
   2abfe:	f7e4 ff31 	bl	fa64 <nvs_recover_last_ate>
   2ac02:	4606      	mov	r6, r0
}
   2ac04:	4630      	mov	r0, r6
   2ac06:	b003      	add	sp, #12
   2ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ac0a <nvs_flash_al_wrt>:
{
   2ac0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ac0e:	4607      	mov	r7, r0
   2ac10:	4690      	mov	r8, r2
	if (!len) {
   2ac12:	461e      	mov	r6, r3
{
   2ac14:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2ac16:	b91b      	cbnz	r3, 2ac20 <nvs_flash_al_wrt+0x16>
		return 0;
   2ac18:	2000      	movs	r0, #0
}
   2ac1a:	b009      	add	sp, #36	; 0x24
   2ac1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2ac20:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ac22:	8983      	ldrh	r3, [r0, #12]
   2ac24:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2ac26:	fa14 f181 	uxtah	r1, r4, r1
   2ac2a:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ac30:	681d      	ldr	r5, [r3, #0]
   2ac32:	426d      	negs	r5, r5
	if (blen > 0) {
   2ac34:	4035      	ands	r5, r6
   2ac36:	d00c      	beq.n	2ac52 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2ac38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2ac3a:	6883      	ldr	r3, [r0, #8]
   2ac3c:	4621      	mov	r1, r4
   2ac3e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2ac42:	462b      	mov	r3, r5
   2ac44:	47c8      	blx	r9
		if (rc) {
   2ac46:	2800      	cmp	r0, #0
   2ac48:	d1e7      	bne.n	2ac1a <nvs_flash_al_wrt+0x10>
	if (len) {
   2ac4a:	1b76      	subs	r6, r6, r5
   2ac4c:	d0e4      	beq.n	2ac18 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2ac4e:	442c      	add	r4, r5
		data8 += blen;
   2ac50:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2ac52:	2320      	movs	r3, #32
   2ac54:	4632      	mov	r2, r6
   2ac56:	4641      	mov	r1, r8
   2ac58:	4668      	mov	r0, sp
   2ac5a:	f006 fdf5 	bl	31848 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2ac5e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   2ac60:	eb0d 0006 	add.w	r0, sp, r6
   2ac64:	682a      	ldr	r2, [r5, #0]
   2ac66:	7929      	ldrb	r1, [r5, #4]
   2ac68:	1b92      	subs	r2, r2, r6
   2ac6a:	f006 fe1a 	bl	318a2 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2ac6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2ac70:	682b      	ldr	r3, [r5, #0]
   2ac72:	6882      	ldr	r2, [r0, #8]
   2ac74:	4621      	mov	r1, r4
   2ac76:	6855      	ldr	r5, [r2, #4]
   2ac78:	466a      	mov	r2, sp
   2ac7a:	47a8      	blx	r5
	return rc;
   2ac7c:	e7cd      	b.n	2ac1a <nvs_flash_al_wrt+0x10>

0002ac7e <nvs_flash_ate_wrt>:
{
   2ac7e:	b510      	push	{r4, lr}
   2ac80:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ac82:	2308      	movs	r3, #8
   2ac84:	6841      	ldr	r1, [r0, #4]
{
   2ac86:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ac88:	f7ff ffbf 	bl	2ac0a <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ac8c:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ac8e:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ac90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ac92:	f7ff ff2e 	bl	2aaf2 <nvs_al_size.isra.0>
   2ac96:	6863      	ldr	r3, [r4, #4]
   2ac98:	1a1b      	subs	r3, r3, r0
   2ac9a:	6063      	str	r3, [r4, #4]
}
   2ac9c:	4610      	mov	r0, r2
   2ac9e:	bd10      	pop	{r4, pc}

0002aca0 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2aca0:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2aca2:	2400      	movs	r4, #0
   2aca4:	9400      	str	r4, [sp, #0]
   2aca6:	f7e5 fae5 	bl	10274 <nvs_read_hist>
	return rc;
}
   2acaa:	b002      	add	sp, #8
   2acac:	bd10      	pop	{r4, pc}

0002acae <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2acae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2acb0:	ab0b      	add	r3, sp, #44	; 0x2c
   2acb2:	9305      	str	r3, [sp, #20]
   2acb4:	9303      	str	r3, [sp, #12]
   2acb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2acb8:	2201      	movs	r2, #1
   2acba:	9302      	str	r3, [sp, #8]
   2acbc:	2300      	movs	r3, #0
   2acbe:	4618      	mov	r0, r3
   2acc0:	e9cd 3300 	strd	r3, r3, [sp]
   2acc4:	f7e4 fc30 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2acc8:	b007      	add	sp, #28
   2acca:	f85d fb04 	ldr.w	pc, [sp], #4

0002acce <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2acce:	6903      	ldr	r3, [r0, #16]
}
   2acd0:	f8d3 0390 	ldr.w	r0, [r3, #912]	; 0x390
   2acd4:	4770      	bx	lr

0002acd6 <drop_tx_buffer>:
}
   2acd6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2acda:	4770      	bx	lr

0002acdc <release_rx_buffer>:
{
   2acdc:	4608      	mov	r0, r1
   2acde:	b508      	push	{r3, lr}
   2ace0:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2ace2:	b118      	cbz	r0, 2acec <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   2ace4:	f005 fd3f 	bl	30766 <rpmsg_release_rx_buffer>
	return 0;
   2ace8:	2000      	movs	r0, #0
}
   2acea:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2acec:	f06f 0001 	mvn.w	r0, #1
   2acf0:	e7fb      	b.n	2acea <release_rx_buffer+0xe>

0002acf2 <hold_rx_buffer>:
{
   2acf2:	4608      	mov	r0, r1
   2acf4:	b508      	push	{r3, lr}
   2acf6:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2acf8:	b118      	cbz	r0, 2ad02 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   2acfa:	f005 fd2c 	bl	30756 <rpmsg_hold_rx_buffer>
	return 0;
   2acfe:	2000      	movs	r0, #0
}
   2ad00:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2ad02:	f06f 0001 	mvn.w	r0, #1
   2ad06:	e7fb      	b.n	2ad00 <hold_rx_buffer+0xe>

0002ad08 <send_nocopy>:
{
   2ad08:	b513      	push	{r0, r1, r4, lr}
   2ad0a:	4604      	mov	r4, r0
   2ad0c:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ad0e:	6921      	ldr	r1, [r4, #16]
   2ad10:	f501 7163 	add.w	r1, r1, #908	; 0x38c
   2ad14:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   2ad18:	2902      	cmp	r1, #2
   2ad1a:	d109      	bne.n	2ad30 <send_nocopy+0x28>
	if (len == 0) {
   2ad1c:	b15b      	cbz	r3, 2ad36 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2ad1e:	b168      	cbz	r0, 2ad3c <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2ad20:	9300      	str	r3, [sp, #0]
   2ad22:	4613      	mov	r3, r2
   2ad24:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2ad28:	f7fa f882 	bl	24e30 <rpmsg_send_offchannel_nocopy>
}
   2ad2c:	b002      	add	sp, #8
   2ad2e:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2ad30:	f06f 000f 	mvn.w	r0, #15
   2ad34:	e7fa      	b.n	2ad2c <send_nocopy+0x24>
		return -EBADMSG;
   2ad36:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   2ad3a:	e7f7      	b.n	2ad2c <send_nocopy+0x24>
		return -ENOENT;
   2ad3c:	f06f 0001 	mvn.w	r0, #1
   2ad40:	e7f4      	b.n	2ad2c <send_nocopy+0x24>

0002ad42 <get_tx_buffer>:
{
   2ad42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ad46:	461c      	mov	r4, r3
   2ad48:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   2ad4c:	4616      	mov	r6, r2
   2ad4e:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2ad50:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2ad52:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2ad54:	b339      	cbz	r1, 2ada6 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2ad56:	b34a      	cbz	r2, 2adac <get_tx_buffer+0x6a>
   2ad58:	b344      	cbz	r4, 2adac <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   2ad5a:	1c6a      	adds	r2, r5, #1
   2ad5c:	f143 0300 	adc.w	r3, r3, #0
   2ad60:	2a02      	cmp	r2, #2
   2ad62:	f173 0300 	sbcs.w	r3, r3, #0
   2ad66:	d224      	bcs.n	2adb2 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   2ad68:	6822      	ldr	r2, [r4, #0]
   2ad6a:	b142      	cbz	r2, 2ad7e <get_tx_buffer+0x3c>
   2ad6c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
   2ad70:	429a      	cmp	r2, r3
   2ad72:	d904      	bls.n	2ad7e <get_tx_buffer+0x3c>
		return -ENOMEM;
   2ad74:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   2ad78:	6023      	str	r3, [r4, #0]
}
   2ad7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2ad7e:	ea05 0908 	and.w	r9, r5, r8
   2ad82:	f109 0301 	add.w	r3, r9, #1
   2ad86:	425a      	negs	r2, r3
   2ad88:	415a      	adcs	r2, r3
   2ad8a:	4621      	mov	r1, r4
   2ad8c:	4638      	mov	r0, r7
   2ad8e:	f005 fcf3 	bl	30778 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2ad92:	b988      	cbnz	r0, 2adb8 <get_tx_buffer+0x76>
   2ad94:	f1b8 3fff 	cmp.w	r8, #4294967295
   2ad98:	bf08      	it	eq
   2ad9a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2ad9e:	d0f0      	beq.n	2ad82 <get_tx_buffer+0x40>
		return -ENOBUFS;
   2ada0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ada4:	e7e9      	b.n	2ad7a <get_tx_buffer+0x38>
		return -ENOENT;
   2ada6:	f06f 0001 	mvn.w	r0, #1
   2adaa:	e7e6      	b.n	2ad7a <get_tx_buffer+0x38>
		return -EINVAL;
   2adac:	f06f 0015 	mvn.w	r0, #21
   2adb0:	e7e3      	b.n	2ad7a <get_tx_buffer+0x38>
		return -ENOTSUP;
   2adb2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2adb6:	e7e0      	b.n	2ad7a <get_tx_buffer+0x38>
	(*r_data) = payload;
   2adb8:	6030      	str	r0, [r6, #0]
	return 0;
   2adba:	2000      	movs	r0, #0
   2adbc:	e7dd      	b.n	2ad7a <get_tx_buffer+0x38>

0002adbe <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2adbe:	f005 bd20 	b.w	30802 <rpmsg_destroy_ept>

0002adc2 <get_ept_slot_with_name>:
{
   2adc2:	b538      	push	{r3, r4, r5, lr}
   2adc4:	460d      	mov	r5, r1
   2adc6:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   2adc8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2adcc:	4628      	mov	r0, r5
   2adce:	f7de fb12 	bl	93f6 <strcmp>
   2add2:	b130      	cbz	r0, 2ade2 <get_ept_slot_with_name+0x20>
   2add4:	4628      	mov	r0, r5
   2add6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2adda:	f7de fb0c 	bl	93f6 <strcmp>
   2adde:	b920      	cbnz	r0, 2adea <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2ade0:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   2ade2:	2370      	movs	r3, #112	; 0x70
   2ade4:	fb03 4000 	mla	r0, r3, r0, r4
}
   2ade8:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   2adea:	2000      	movs	r0, #0
   2adec:	e7fc      	b.n	2ade8 <get_ept_slot_with_name+0x26>

0002adee <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2adee:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2adf2:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   2adf6:	f006 b97a 	b.w	310ee <k_work_submit_to_queue>

0002adfa <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2adfa:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
	virtqueue_notification(data->vr.vq[vq_id]);
   2adfe:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2ae02:	3b00      	subs	r3, #0
   2ae04:	bf18      	it	ne
   2ae06:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   2ae08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2ae0c:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2ae10:	f005 bc53 	b.w	306ba <virtqueue_notification>

0002ae14 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2ae14:	68cb      	ldr	r3, [r1, #12]
   2ae16:	b133      	cbz	r3, 2ae26 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   2ae18:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   2ae1a:	6883      	ldr	r3, [r0, #8]
   2ae1c:	681b      	ldr	r3, [r3, #0]
   2ae1e:	b113      	cbz	r3, 2ae26 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2ae20:	2200      	movs	r2, #0
   2ae22:	6909      	ldr	r1, [r1, #16]
   2ae24:	4718      	bx	r3
}
   2ae26:	4770      	bx	lr

0002ae28 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2ae28:	f7fa bde8 	b.w	259fc <z_impl_k_mutex_unlock>

0002ae2c <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ae2c:	e8d0 3fef 	ldaex	r3, [r0]
   2ae30:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2ae34:	2a00      	cmp	r2, #0
   2ae36:	d1f9      	bne.n	2ae2c <atomic_set.isra.0>
}
   2ae38:	4770      	bx	lr

0002ae3a <backend_init>:
{
   2ae3a:	b510      	push	{r4, lr}
	data->role = conf->role;
   2ae3c:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2ae3e:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2ae40:	681b      	ldr	r3, [r3, #0]
   2ae42:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
	return z_impl_k_mutex_init(mutex);
   2ae46:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   2ae4a:	f006 f806 	bl	30e5a <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2ae4e:	2100      	movs	r1, #0
   2ae50:	f504 7063 	add.w	r0, r4, #908	; 0x38c
   2ae54:	f7ff ffea 	bl	2ae2c <atomic_set.isra.0>
}
   2ae58:	4608      	mov	r0, r1
   2ae5a:	bd10      	pop	{r4, pc}

0002ae5c <ns_bind_cb>:
{
   2ae5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ae60:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2ae62:	460d      	mov	r5, r1
   2ae64:	b379      	cbz	r1, 2aec6 <ns_bind_cb+0x6a>
   2ae66:	780b      	ldrb	r3, [r1, #0]
   2ae68:	b36b      	cbz	r3, 2aec6 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   2ae6a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   2ae6e:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2ae72:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2ae74:	f04f 32ff 	mov.w	r2, #4294967295
   2ae78:	f04f 33ff 	mov.w	r3, #4294967295
   2ae7c:	4620      	mov	r0, r4
   2ae7e:	f7fa fd43 	bl	25908 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2ae82:	462a      	mov	r2, r5
   2ae84:	4640      	mov	r0, r8
   2ae86:	a901      	add	r1, sp, #4
   2ae88:	f7e5 fb28 	bl	104dc <get_ept>
	if (rpmsg_ept == NULL) {
   2ae8c:	9e01      	ldr	r6, [sp, #4]
   2ae8e:	b92e      	cbnz	r6, 2ae9c <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2ae90:	4620      	mov	r0, r4
}
   2ae92:	b002      	add	sp, #8
   2ae94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   2ae98:	f7ff bfc6 	b.w	2ae28 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2ae9c:	b158      	cbz	r0, 2aeb6 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2ae9e:	4620      	mov	r0, r4
   2aea0:	f7ff ffc2 	bl	2ae28 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2aea4:	463b      	mov	r3, r7
   2aea6:	462a      	mov	r2, r5
   2aea8:	4631      	mov	r1, r6
   2aeaa:	4640      	mov	r0, r8
}
   2aeac:	b002      	add	sp, #8
   2aeae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2aeb2:	f7e5 baf1 	b.w	10498 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2aeb6:	2220      	movs	r2, #32
   2aeb8:	4629      	mov	r1, r5
   2aeba:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2aebe:	f006 fe59 	bl	31b74 <strncpy>
		rpmsg_ept->dest = dest;
   2aec2:	6637      	str	r7, [r6, #96]	; 0x60
   2aec4:	e7e4      	b.n	2ae90 <ns_bind_cb+0x34>
}
   2aec6:	b002      	add	sp, #8
   2aec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aecc <ept_cb>:
{
   2aecc:	b510      	push	{r4, lr}
   2aece:	4608      	mov	r0, r1
   2aed0:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   2aed2:	4611      	mov	r1, r2
   2aed4:	b952      	cbnz	r2, 2aeec <ept_cb+0x20>
		if (!ept->bound) {
   2aed6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2aeda:	b92a      	cbnz	r2, 2aee8 <ept_cb+0x1c>
			ept->bound = true;
   2aedc:	2201      	movs	r2, #1
			bound_cb(ept);
   2aede:	4618      	mov	r0, r3
			ept->bound = true;
   2aee0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   2aee4:	f7e5 fc4c 	bl	10780 <bound_cb>
}
   2aee8:	2000      	movs	r0, #0
   2aeea:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2aeec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2aeee:	6854      	ldr	r4, [r2, #4]
   2aef0:	2c00      	cmp	r4, #0
   2aef2:	d0f9      	beq.n	2aee8 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2aef4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2aef6:	47a0      	blx	r4
   2aef8:	e7f6      	b.n	2aee8 <ept_cb+0x1c>

0002aefa <deregister_ept>:
{
   2aefa:	b510      	push	{r4, lr}
   2aefc:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aefe:	6903      	ldr	r3, [r0, #16]
   2af00:	f503 7363 	add.w	r3, r3, #908	; 0x38c
   2af04:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   2af08:	2b02      	cmp	r3, #2
   2af0a:	d10a      	bne.n	2af22 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2af0c:	b161      	cbz	r1, 2af28 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2af0e:	4608      	mov	r0, r1
   2af10:	f005 fc77 	bl	30802 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2af14:	2270      	movs	r2, #112	; 0x70
   2af16:	2100      	movs	r1, #0
   2af18:	4620      	mov	r0, r4
   2af1a:	f006 fcc2 	bl	318a2 <memset>
	return 0;
   2af1e:	2000      	movs	r0, #0
}
   2af20:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2af22:	f06f 000f 	mvn.w	r0, #15
   2af26:	e7fb      	b.n	2af20 <deregister_ept+0x26>
		return -ENOENT;
   2af28:	f06f 0001 	mvn.w	r0, #1
   2af2c:	e7f8      	b.n	2af20 <deregister_ept+0x26>

0002af2e <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2af2e:	f005 bc68 	b.w	30802 <rpmsg_destroy_ept>

0002af32 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2af32:	b538      	push	{r3, r4, r5, lr}
   2af34:	460d      	mov	r5, r1
	if (!instance) {
   2af36:	4604      	mov	r4, r0
   2af38:	b160      	cbz	r0, 2af54 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2af3a:	30e0      	adds	r0, #224	; 0xe0
   2af3c:	f005 fe8d 	bl	30c5a <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2af40:	b10d      	cbz	r5, 2af46 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2af42:	2000      	movs	r0, #0
}
   2af44:	bd38      	pop	{r3, r4, r5, pc}
   2af46:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   2af4a:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   2af4e:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2af52:	e7f6      	b.n	2af42 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2af54:	f06f 0015 	mvn.w	r0, #21
   2af58:	e7f4      	b.n	2af44 <ipc_rpmsg_deinit+0x12>

0002af5a <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   2af5a:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2af5c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2af60:	b113      	cbz	r3, 2af68 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2af62:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2af66:	4718      	bx	r3
}
   2af68:	4770      	bx	lr

0002af6a <virtio_set_features>:
}
   2af6a:	4770      	bx	lr

0002af6c <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   2af6c:	6983      	ldr	r3, [r0, #24]
   2af6e:	b913      	cbnz	r3, 2af76 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2af70:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2af74:	7019      	strb	r1, [r3, #0]
}
   2af76:	4770      	bx	lr

0002af78 <virtio_get_features>:
}
   2af78:	2001      	movs	r0, #1
   2af7a:	4770      	bx	lr

0002af7c <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2af7c:	6983      	ldr	r3, [r0, #24]
   2af7e:	2b01      	cmp	r3, #1
   2af80:	d104      	bne.n	2af8c <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2af82:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2af86:	7818      	ldrb	r0, [r3, #0]
   2af88:	b2c0      	uxtb	r0, r0
   2af8a:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2af8c:	2004      	movs	r0, #4
}
   2af8e:	4770      	bx	lr

0002af90 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2af90:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2af92:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2af94:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2af96:	4620      	mov	r0, r4
   2af98:	f006 fc2d 	bl	317f6 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2af9c:	4605      	mov	r5, r0
   2af9e:	b118      	cbz	r0, 2afa8 <virtqueue_allocate+0x18>
   2afa0:	4622      	mov	r2, r4
   2afa2:	2100      	movs	r1, #0
   2afa4:	f006 fc7d 	bl	318a2 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   2afa8:	4628      	mov	r0, r5
   2afaa:	bd38      	pop	{r3, r4, r5, pc}

0002afac <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2afac:	b538      	push	{r3, r4, r5, lr}
   2afae:	4604      	mov	r4, r0
   2afb0:	2230      	movs	r2, #48	; 0x30
   2afb2:	2100      	movs	r1, #0
   2afb4:	f006 fc75 	bl	318a2 <memset>
   2afb8:	2218      	movs	r2, #24
   2afba:	2100      	movs	r1, #0
   2afbc:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2afc0:	f006 fc6f 	bl	318a2 <memset>
   2afc4:	2218      	movs	r2, #24
   2afc6:	2100      	movs	r1, #0
   2afc8:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2afcc:	f006 fc69 	bl	318a2 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2afd0:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2afd4:	f7f9 fede 	bl	24d94 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   2afd8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2afdc:	f7f9 feda 	bl	24d94 <virtqueue_free>
	vr->shm_io = 0;
   2afe0:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   2afe2:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   2afe6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2afea:	f005 f8e7 	bl	301bc <metal_device_close>
	metal_finish();
   2afee:	f7f9 fe49 	bl	24c84 <metal_finish>
	if (io->ops.close)
   2aff2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   2aff4:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2aff8:	b10b      	cbz	r3, 2affe <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2affa:	4628      	mov	r0, r5
   2affc:	4798      	blx	r3
   2affe:	2238      	movs	r2, #56	; 0x38
   2b000:	2100      	movs	r1, #0
   2b002:	4628      	mov	r0, r5
   2b004:	f006 fc4d 	bl	318a2 <memset>

	return 0;
}
   2b008:	2000      	movs	r0, #0
   2b00a:	bd38      	pop	{r3, r4, r5, pc}

0002b00c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2b00c:	b538      	push	{r3, r4, r5, lr}
   2b00e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2b010:	42ab      	cmp	r3, r5
{
   2b012:	4611      	mov	r1, r2
   2b014:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2b016:	d804      	bhi.n	2b022 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b018:	461a      	mov	r2, r3
   2b01a:	f006 fc08 	bl	3182e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2b01e:	4620      	mov	r0, r4
   2b020:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2b022:	2400      	movs	r4, #0
   2b024:	e7fb      	b.n	2b01e <_copy+0x12>

0002b026 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2b026:	f006 bc3c 	b.w	318a2 <memset>

0002b02a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2b02a:	09c3      	lsrs	r3, r0, #7
   2b02c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2b030:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b034:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2b038:	b2c0      	uxtb	r0, r0
   2b03a:	4770      	bx	lr

0002b03c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b03c:	78cb      	ldrb	r3, [r1, #3]
   2b03e:	7802      	ldrb	r2, [r0, #0]
   2b040:	4053      	eors	r3, r2
   2b042:	7003      	strb	r3, [r0, #0]
   2b044:	884b      	ldrh	r3, [r1, #2]
   2b046:	7842      	ldrb	r2, [r0, #1]
   2b048:	4053      	eors	r3, r2
   2b04a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b04c:	680a      	ldr	r2, [r1, #0]
   2b04e:	7883      	ldrb	r3, [r0, #2]
   2b050:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b054:	7083      	strb	r3, [r0, #2]
   2b056:	680a      	ldr	r2, [r1, #0]
   2b058:	78c3      	ldrb	r3, [r0, #3]
   2b05a:	4053      	eors	r3, r2
   2b05c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b05e:	79cb      	ldrb	r3, [r1, #7]
   2b060:	7902      	ldrb	r2, [r0, #4]
   2b062:	4053      	eors	r3, r2
   2b064:	7103      	strb	r3, [r0, #4]
   2b066:	88cb      	ldrh	r3, [r1, #6]
   2b068:	7942      	ldrb	r2, [r0, #5]
   2b06a:	4053      	eors	r3, r2
   2b06c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b06e:	684a      	ldr	r2, [r1, #4]
   2b070:	7983      	ldrb	r3, [r0, #6]
   2b072:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b076:	7183      	strb	r3, [r0, #6]
   2b078:	684a      	ldr	r2, [r1, #4]
   2b07a:	79c3      	ldrb	r3, [r0, #7]
   2b07c:	4053      	eors	r3, r2
   2b07e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b080:	7acb      	ldrb	r3, [r1, #11]
   2b082:	7a02      	ldrb	r2, [r0, #8]
   2b084:	4053      	eors	r3, r2
   2b086:	7203      	strb	r3, [r0, #8]
   2b088:	7a42      	ldrb	r2, [r0, #9]
   2b08a:	894b      	ldrh	r3, [r1, #10]
   2b08c:	4053      	eors	r3, r2
   2b08e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b090:	688a      	ldr	r2, [r1, #8]
   2b092:	7a83      	ldrb	r3, [r0, #10]
   2b094:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b098:	7283      	strb	r3, [r0, #10]
   2b09a:	688a      	ldr	r2, [r1, #8]
   2b09c:	7ac3      	ldrb	r3, [r0, #11]
   2b09e:	4053      	eors	r3, r2
   2b0a0:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b0a2:	7bcb      	ldrb	r3, [r1, #15]
   2b0a4:	7b02      	ldrb	r2, [r0, #12]
   2b0a6:	4053      	eors	r3, r2
   2b0a8:	7303      	strb	r3, [r0, #12]
   2b0aa:	89cb      	ldrh	r3, [r1, #14]
   2b0ac:	7b42      	ldrb	r2, [r0, #13]
   2b0ae:	4053      	eors	r3, r2
   2b0b0:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b0b2:	68ca      	ldr	r2, [r1, #12]
   2b0b4:	7b83      	ldrb	r3, [r0, #14]
   2b0b6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b0ba:	7383      	strb	r3, [r0, #14]
   2b0bc:	68ca      	ldr	r2, [r1, #12]
   2b0be:	7bc3      	ldrb	r3, [r0, #15]
   2b0c0:	4053      	eors	r3, r2
   2b0c2:	73c3      	strb	r3, [r0, #15]
}
   2b0c4:	4770      	bx	lr

0002b0c6 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b0c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b0c8:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b0ca:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b0cc:	f88d 2000 	strb.w	r2, [sp]
   2b0d0:	7942      	ldrb	r2, [r0, #5]
   2b0d2:	f88d 2001 	strb.w	r2, [sp, #1]
   2b0d6:	7a82      	ldrb	r2, [r0, #10]
   2b0d8:	f88d 2002 	strb.w	r2, [sp, #2]
   2b0dc:	7bc2      	ldrb	r2, [r0, #15]
   2b0de:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b0e2:	7902      	ldrb	r2, [r0, #4]
   2b0e4:	f88d 2004 	strb.w	r2, [sp, #4]
   2b0e8:	7a42      	ldrb	r2, [r0, #9]
   2b0ea:	f88d 2005 	strb.w	r2, [sp, #5]
   2b0ee:	7b82      	ldrb	r2, [r0, #14]
   2b0f0:	f88d 2006 	strb.w	r2, [sp, #6]
   2b0f4:	78c2      	ldrb	r2, [r0, #3]
   2b0f6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b0fa:	7a02      	ldrb	r2, [r0, #8]
   2b0fc:	f88d 2008 	strb.w	r2, [sp, #8]
   2b100:	7b42      	ldrb	r2, [r0, #13]
   2b102:	f88d 2009 	strb.w	r2, [sp, #9]
   2b106:	7882      	ldrb	r2, [r0, #2]
   2b108:	f88d 200a 	strb.w	r2, [sp, #10]
   2b10c:	79c2      	ldrb	r2, [r0, #7]
   2b10e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b112:	7b02      	ldrb	r2, [r0, #12]
   2b114:	f88d 200c 	strb.w	r2, [sp, #12]
   2b118:	7842      	ldrb	r2, [r0, #1]
   2b11a:	f88d 200d 	strb.w	r2, [sp, #13]
   2b11e:	7982      	ldrb	r2, [r0, #6]
   2b120:	f88d 200e 	strb.w	r2, [sp, #14]
   2b124:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b128:	2310      	movs	r3, #16
   2b12a:	466a      	mov	r2, sp
   2b12c:	4619      	mov	r1, r3
   2b12e:	f7ff ff6d 	bl	2b00c <_copy>
}
   2b132:	b005      	add	sp, #20
   2b134:	f85d fb04 	ldr.w	pc, [sp], #4

0002b138 <mult_row_column>:
{
   2b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b13a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b13c:	7808      	ldrb	r0, [r1, #0]
{
   2b13e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b140:	f7ff ff73 	bl	2b02a <_double_byte>
   2b144:	4605      	mov	r5, r0
   2b146:	7860      	ldrb	r0, [r4, #1]
   2b148:	f7ff ff6f 	bl	2b02a <_double_byte>
   2b14c:	78a2      	ldrb	r2, [r4, #2]
   2b14e:	7863      	ldrb	r3, [r4, #1]
   2b150:	4053      	eors	r3, r2
   2b152:	78e2      	ldrb	r2, [r4, #3]
   2b154:	4053      	eors	r3, r2
   2b156:	405d      	eors	r5, r3
   2b158:	4068      	eors	r0, r5
   2b15a:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b15c:	7860      	ldrb	r0, [r4, #1]
   2b15e:	7827      	ldrb	r7, [r4, #0]
   2b160:	f7ff ff63 	bl	2b02a <_double_byte>
   2b164:	4605      	mov	r5, r0
   2b166:	78a0      	ldrb	r0, [r4, #2]
   2b168:	f7ff ff5f 	bl	2b02a <_double_byte>
   2b16c:	78a3      	ldrb	r3, [r4, #2]
   2b16e:	405f      	eors	r7, r3
   2b170:	78e3      	ldrb	r3, [r4, #3]
   2b172:	405f      	eors	r7, r3
   2b174:	407d      	eors	r5, r7
   2b176:	4068      	eors	r0, r5
   2b178:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b17a:	7863      	ldrb	r3, [r4, #1]
   2b17c:	7827      	ldrb	r7, [r4, #0]
   2b17e:	78a0      	ldrb	r0, [r4, #2]
   2b180:	405f      	eors	r7, r3
   2b182:	f7ff ff52 	bl	2b02a <_double_byte>
   2b186:	4605      	mov	r5, r0
   2b188:	78e0      	ldrb	r0, [r4, #3]
   2b18a:	f7ff ff4e 	bl	2b02a <_double_byte>
   2b18e:	78e3      	ldrb	r3, [r4, #3]
   2b190:	405f      	eors	r7, r3
   2b192:	407d      	eors	r5, r7
   2b194:	4068      	eors	r0, r5
   2b196:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b198:	7820      	ldrb	r0, [r4, #0]
   2b19a:	f7ff ff46 	bl	2b02a <_double_byte>
   2b19e:	7862      	ldrb	r2, [r4, #1]
   2b1a0:	7823      	ldrb	r3, [r4, #0]
   2b1a2:	4053      	eors	r3, r2
   2b1a4:	78a2      	ldrb	r2, [r4, #2]
   2b1a6:	4053      	eors	r3, r2
   2b1a8:	ea80 0503 	eor.w	r5, r0, r3
   2b1ac:	78e0      	ldrb	r0, [r4, #3]
   2b1ae:	f7ff ff3c 	bl	2b02a <_double_byte>
   2b1b2:	b2ed      	uxtb	r5, r5
   2b1b4:	4045      	eors	r5, r0
   2b1b6:	70f5      	strb	r5, [r6, #3]
}
   2b1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b1ba <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b1ba:	b570      	push	{r4, r5, r6, lr}
   2b1bc:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b1be:	4605      	mov	r5, r0
{
   2b1c0:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2b1c2:	2800      	cmp	r0, #0
   2b1c4:	d049      	beq.n	2b25a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b1c6:	2900      	cmp	r1, #0
   2b1c8:	d049      	beq.n	2b25e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b1ca:	2a00      	cmp	r2, #0
   2b1cc:	d049      	beq.n	2b262 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b1ce:	2310      	movs	r3, #16
   2b1d0:	460a      	mov	r2, r1
   2b1d2:	4668      	mov	r0, sp
   2b1d4:	4619      	mov	r1, r3
   2b1d6:	f7ff ff19 	bl	2b00c <_copy>
	add_round_key(state, s->words);
   2b1da:	4621      	mov	r1, r4
   2b1dc:	4668      	mov	r0, sp
   2b1de:	f7ff ff2d 	bl	2b03c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b1e2:	3410      	adds	r4, #16
   2b1e4:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b1e8:	4668      	mov	r0, sp
   2b1ea:	f7e5 fe03 	bl	10df4 <sub_bytes>
		shift_rows(state);
   2b1ee:	4668      	mov	r0, sp
   2b1f0:	f7ff ff69 	bl	2b0c6 <shift_rows>
	mult_row_column(t, s);
   2b1f4:	4669      	mov	r1, sp
   2b1f6:	a804      	add	r0, sp, #16
   2b1f8:	f7ff ff9e 	bl	2b138 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b1fc:	a901      	add	r1, sp, #4
   2b1fe:	a805      	add	r0, sp, #20
   2b200:	f7ff ff9a 	bl	2b138 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b204:	a902      	add	r1, sp, #8
   2b206:	a806      	add	r0, sp, #24
   2b208:	f7ff ff96 	bl	2b138 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b20c:	a903      	add	r1, sp, #12
   2b20e:	a807      	add	r0, sp, #28
   2b210:	f7ff ff92 	bl	2b138 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b214:	2310      	movs	r3, #16
   2b216:	4668      	mov	r0, sp
   2b218:	4619      	mov	r1, r3
   2b21a:	eb0d 0203 	add.w	r2, sp, r3
   2b21e:	f7ff fef5 	bl	2b00c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b222:	4621      	mov	r1, r4
   2b224:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b226:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b228:	f7ff ff08 	bl	2b03c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b22c:	42b4      	cmp	r4, r6
   2b22e:	d1db      	bne.n	2b1e8 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b230:	f7e5 fde0 	bl	10df4 <sub_bytes>
	shift_rows(state);
   2b234:	4668      	mov	r0, sp
   2b236:	f7ff ff46 	bl	2b0c6 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b23a:	4621      	mov	r1, r4
   2b23c:	4668      	mov	r0, sp
   2b23e:	f7ff fefd 	bl	2b03c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b242:	2310      	movs	r3, #16
   2b244:	466a      	mov	r2, sp
   2b246:	4619      	mov	r1, r3
   2b248:	4628      	mov	r0, r5
   2b24a:	f7ff fedf 	bl	2b00c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b24e:	4668      	mov	r0, sp
   2b250:	2210      	movs	r2, #16
   2b252:	2100      	movs	r1, #0
   2b254:	f7ff fee7 	bl	2b026 <_set>

	return TC_CRYPTO_SUCCESS;
   2b258:	2001      	movs	r0, #1
}
   2b25a:	b008      	add	sp, #32
   2b25c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b25e:	4608      	mov	r0, r1
   2b260:	e7fb      	b.n	2b25a <tc_aes_encrypt+0xa0>
   2b262:	4610      	mov	r0, r2
   2b264:	e7f9      	b.n	2b25a <tc_aes_encrypt+0xa0>

0002b266 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b266:	460a      	mov	r2, r1
{
   2b268:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b26a:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2b26e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b270:	2b00      	cmp	r3, #0
   2b272:	bfac      	ite	ge
   2b274:	2300      	movge	r3, #0
   2b276:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b278:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b27c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b280:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b282:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b286:	d002      	beq.n	2b28e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b288:	7813      	ldrb	r3, [r2, #0]
   2b28a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b28c:	e7f4      	b.n	2b278 <gf_double+0x12>
	}
}
   2b28e:	bd10      	pop	{r4, pc}

0002b290 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b290:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b292:	b120      	cbz	r0, 2b29e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b294:	2258      	movs	r2, #88	; 0x58
   2b296:	2100      	movs	r1, #0
   2b298:	f7ff fec5 	bl	2b026 <_set>
   2b29c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b29e:	bd08      	pop	{r3, pc}

0002b2a0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b2a0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b2a2:	4604      	mov	r4, r0
   2b2a4:	b188      	cbz	r0, 2b2ca <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b2a6:	2210      	movs	r2, #16
   2b2a8:	2100      	movs	r1, #0
   2b2aa:	f7ff febc 	bl	2b026 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b2ae:	2210      	movs	r2, #16
   2b2b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b2b4:	2100      	movs	r1, #0
   2b2b6:	f7ff feb6 	bl	2b026 <_set>
	s->leftover_offset = 0;
   2b2ba:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b2bc:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2b2be:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2b2c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b2c4:	2001      	movs	r0, #1
   2b2c6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2b2ca:	bd10      	pop	{r4, pc}

0002b2cc <tc_cmac_setup>:
{
   2b2cc:	b570      	push	{r4, r5, r6, lr}
   2b2ce:	4604      	mov	r4, r0
   2b2d0:	460d      	mov	r5, r1
   2b2d2:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b2d4:	b310      	cbz	r0, 2b31c <tc_cmac_setup+0x50>
   2b2d6:	b311      	cbz	r1, 2b31e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b2d8:	2258      	movs	r2, #88	; 0x58
   2b2da:	2100      	movs	r1, #0
   2b2dc:	f7ff fea3 	bl	2b026 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b2e0:	4629      	mov	r1, r5
   2b2e2:	4630      	mov	r0, r6
	s->sched = sched;
   2b2e4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b2e6:	f7e5 fd91 	bl	10e0c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b2ea:	2210      	movs	r2, #16
   2b2ec:	2100      	movs	r1, #0
   2b2ee:	4620      	mov	r0, r4
   2b2f0:	f7ff fe99 	bl	2b026 <_set>
	gf_double (s->K1, s->iv);
   2b2f4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b2f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b2fa:	4621      	mov	r1, r4
   2b2fc:	4620      	mov	r0, r4
   2b2fe:	f7ff ff5c 	bl	2b1ba <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b302:	4621      	mov	r1, r4
   2b304:	4628      	mov	r0, r5
   2b306:	f7ff ffae 	bl	2b266 <gf_double>
	gf_double (s->K2, s->K1);
   2b30a:	4629      	mov	r1, r5
   2b30c:	f104 0020 	add.w	r0, r4, #32
   2b310:	f7ff ffa9 	bl	2b266 <gf_double>
	tc_cmac_init(s);
   2b314:	4620      	mov	r0, r4
   2b316:	f7ff ffc3 	bl	2b2a0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b31a:	2001      	movs	r0, #1
}
   2b31c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b31e:	4608      	mov	r0, r1
   2b320:	e7fc      	b.n	2b31c <tc_cmac_setup+0x50>

0002b322 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b326:	460e      	mov	r6, r1
   2b328:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b32a:	4604      	mov	r4, r0
   2b32c:	2800      	cmp	r0, #0
   2b32e:	d060      	beq.n	2b3f2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b330:	b1fa      	cbz	r2, 2b372 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b332:	2900      	cmp	r1, #0
   2b334:	d05d      	beq.n	2b3f2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b336:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b33a:	ea53 0102 	orrs.w	r1, r3, r2
   2b33e:	d058      	beq.n	2b3f2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b340:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b342:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b346:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b34a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b34e:	f1b8 0f00 	cmp.w	r8, #0
   2b352:	d02c      	beq.n	2b3ae <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b354:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b358:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b35c:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b35e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b360:	d20a      	bcs.n	2b378 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b362:	462b      	mov	r3, r5
   2b364:	4632      	mov	r2, r6
   2b366:	4629      	mov	r1, r5
   2b368:	f7ff fe50 	bl	2b00c <_copy>
			s->leftover_offset += data_length;
   2b36c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b36e:	442b      	add	r3, r5
   2b370:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b372:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b378:	463b      	mov	r3, r7
   2b37a:	4632      	mov	r2, r6
   2b37c:	4639      	mov	r1, r7
   2b37e:	f7ff fe45 	bl	2b00c <_copy>
		s->leftover_offset = 0;
   2b382:	2300      	movs	r3, #0
   2b384:	3d10      	subs	r5, #16
   2b386:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b388:	4445      	add	r5, r8
		data += remaining_space;
   2b38a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b38c:	1e63      	subs	r3, r4, #1
   2b38e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b392:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b396:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b39a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b39c:	ea82 0200 	eor.w	r2, r2, r0
   2b3a0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b3a2:	d1f6      	bne.n	2b392 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b3a4:	4621      	mov	r1, r4
   2b3a6:	4620      	mov	r0, r4
   2b3a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b3aa:	f7ff ff06 	bl	2b1ba <tc_aes_encrypt>
   2b3ae:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b3b2:	2d10      	cmp	r5, #16
   2b3b4:	d80a      	bhi.n	2b3cc <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b3b6:	2d00      	cmp	r5, #0
   2b3b8:	d0db      	beq.n	2b372 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b3ba:	462b      	mov	r3, r5
   2b3bc:	4632      	mov	r2, r6
   2b3be:	4629      	mov	r1, r5
   2b3c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b3c4:	f7ff fe22 	bl	2b00c <_copy>
		s->leftover_offset = data_length;
   2b3c8:	6465      	str	r5, [r4, #68]	; 0x44
   2b3ca:	e7d2      	b.n	2b372 <tc_cmac_update+0x50>
   2b3cc:	1e63      	subs	r3, r4, #1
   2b3ce:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b3d0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b3d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b3d8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b3da:	ea82 0200 	eor.w	r2, r2, r0
   2b3de:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b3e0:	d1f6      	bne.n	2b3d0 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b3e2:	4621      	mov	r1, r4
   2b3e4:	4620      	mov	r0, r4
   2b3e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b3e8:	f7ff fee7 	bl	2b1ba <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b3ec:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b3ee:	3d10      	subs	r5, #16
   2b3f0:	e7df      	b.n	2b3b2 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b3f2:	2000      	movs	r0, #0
   2b3f4:	e7be      	b.n	2b374 <tc_cmac_update+0x52>

0002b3f6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b3f6:	b570      	push	{r4, r5, r6, lr}
   2b3f8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b3fa:	4605      	mov	r5, r0
   2b3fc:	b1f0      	cbz	r0, 2b43c <tc_cmac_final+0x46>
   2b3fe:	b371      	cbz	r1, 2b45e <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b400:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b402:	2a10      	cmp	r2, #16
   2b404:	d11b      	bne.n	2b43e <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b406:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b408:	1e63      	subs	r3, r4, #1
   2b40a:	3901      	subs	r1, #1
   2b40c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b410:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b414:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b418:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b41a:	ea82 0206 	eor.w	r2, r2, r6
   2b41e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2b422:	ea82 0206 	eor.w	r2, r2, r6
   2b426:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b428:	d1f2      	bne.n	2b410 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b42a:	4621      	mov	r1, r4
   2b42c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b42e:	4628      	mov	r0, r5
   2b430:	f7ff fec3 	bl	2b1ba <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b434:	4620      	mov	r0, r4
   2b436:	f7ff ff2b 	bl	2b290 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b43a:	2001      	movs	r0, #1
}
   2b43c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b43e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b442:	2100      	movs	r1, #0
   2b444:	f1c2 0210 	rsb	r2, r2, #16
   2b448:	4420      	add	r0, r4
   2b44a:	f7ff fdec 	bl	2b026 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b44e:	2280      	movs	r2, #128	; 0x80
   2b450:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2b452:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b456:	4423      	add	r3, r4
   2b458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b45c:	e7d4      	b.n	2b408 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2b45e:	4608      	mov	r0, r1
   2b460:	e7ec      	b.n	2b43c <tc_cmac_final+0x46>

0002b462 <tc_sha256_update>:
{
   2b462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b464:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2b466:	b110      	cbz	r0, 2b46e <tc_sha256_update+0xc>
   2b468:	b1f9      	cbz	r1, 2b4aa <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2b46a:	b90a      	cbnz	r2, 2b470 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2b46c:	2001      	movs	r0, #1
}
   2b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2b470:	2700      	movs	r7, #0
   2b472:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2b474:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2b478:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2b47a:	1c5a      	adds	r2, r3, #1
   2b47c:	6682      	str	r2, [r0, #104]	; 0x68
   2b47e:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b482:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b484:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2b486:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b48a:	d90b      	bls.n	2b4a4 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2b48c:	4631      	mov	r1, r6
   2b48e:	f7e5 fd11 	bl	10eb4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2b492:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2b496:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2b49a:	f142 0200 	adc.w	r2, r2, #0
   2b49e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2b4a2:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2b4a4:	42a5      	cmp	r5, r4
   2b4a6:	d1e7      	bne.n	2b478 <tc_sha256_update+0x16>
   2b4a8:	e7e0      	b.n	2b46c <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2b4aa:	4608      	mov	r0, r1
   2b4ac:	e7df      	b.n	2b46e <tc_sha256_update+0xc>

0002b4ae <tc_sha256_final>:
{
   2b4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b4b0:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2b4b2:	4605      	mov	r5, r0
   2b4b4:	2800      	cmp	r0, #0
   2b4b6:	d054      	beq.n	2b562 <tc_sha256_final+0xb4>
   2b4b8:	2900      	cmp	r1, #0
   2b4ba:	d053      	beq.n	2b564 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2b4bc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2b4be:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2b4c2:	00d8      	lsls	r0, r3, #3
   2b4c4:	1812      	adds	r2, r2, r0
   2b4c6:	f141 0100 	adc.w	r1, r1, #0
   2b4ca:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b4ce:	2280      	movs	r2, #128	; 0x80
   2b4d0:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b4d2:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b4d4:	4423      	add	r3, r4
   2b4d6:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2b4d8:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b4dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2b4e0:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b4e4:	d90a      	bls.n	2b4fc <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2b4e6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2b4ea:	4639      	mov	r1, r7
   2b4ec:	4430      	add	r0, r6
   2b4ee:	f7ff fd9a 	bl	2b026 <_set>
		compress(s->iv, s->leftover);
   2b4f2:	4631      	mov	r1, r6
   2b4f4:	4620      	mov	r0, r4
   2b4f6:	f7e5 fcdd 	bl	10eb4 <compress>
		s->leftover_offset = 0;
   2b4fa:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2b4fc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2b4fe:	2100      	movs	r1, #0
   2b500:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2b504:	4430      	add	r0, r6
   2b506:	f7ff fd8e 	bl	2b026 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b50a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2b50c:	4631      	mov	r1, r6
   2b50e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b510:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2b512:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b514:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2b516:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b51a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b51e:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2b520:	0e1b      	lsrs	r3, r3, #24
   2b522:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2b526:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b528:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2b52c:	f7e5 fcc2 	bl	10eb4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b530:	1d2b      	adds	r3, r5, #4
   2b532:	1f21      	subs	r1, r4, #4
   2b534:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2b536:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b53a:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2b53c:	0e10      	lsrs	r0, r2, #24
   2b53e:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2b542:	0c10      	lsrs	r0, r2, #16
   2b544:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2b548:	0a10      	lsrs	r0, r2, #8
   2b54a:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2b54e:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b552:	42ab      	cmp	r3, r5
   2b554:	d1ef      	bne.n	2b536 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2b556:	4620      	mov	r0, r4
   2b558:	2270      	movs	r2, #112	; 0x70
   2b55a:	2100      	movs	r1, #0
   2b55c:	f7ff fd63 	bl	2b026 <_set>
	return TC_CRYPTO_SUCCESS;
   2b560:	2001      	movs	r0, #1
}
   2b562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b564:	4608      	mov	r0, r1
   2b566:	e7fc      	b.n	2b562 <tc_sha256_final+0xb4>

0002b568 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2b568:	b530      	push	{r4, r5, lr}
   2b56a:	1e43      	subs	r3, r0, #1
   2b56c:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2b56e:	42a9      	cmp	r1, r5
   2b570:	d106      	bne.n	2b580 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2b572:	2136      	movs	r1, #54	; 0x36
   2b574:	245c      	movs	r4, #92	; 0x5c
   2b576:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2b578:	1a13      	subs	r3, r2, r0
   2b57a:	2b3f      	cmp	r3, #63	; 0x3f
   2b57c:	d90c      	bls.n	2b598 <rekey+0x30>
	}
}
   2b57e:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2b580:	780c      	ldrb	r4, [r1, #0]
   2b582:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2b586:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2b58a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b58e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2b592:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2b596:	e7ea      	b.n	2b56e <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2b598:	f802 1b01 	strb.w	r1, [r2], #1
   2b59c:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2b5a0:	e7ea      	b.n	2b578 <rekey+0x10>

0002b5a2 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2b5a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b5a4:	460e      	mov	r6, r1
   2b5a6:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2b5a8:	4605      	mov	r5, r0
{
   2b5aa:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2b5ac:	b1b8      	cbz	r0, 2b5de <tc_hmac_set_key+0x3c>
   2b5ae:	b341      	cbz	r1, 2b602 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2b5b0:	b34a      	cbz	r2, 2b606 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2b5b2:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2b5b4:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2b5b8:	d813      	bhi.n	2b5e2 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2b5ba:	a810      	add	r0, sp, #64	; 0x40
   2b5bc:	f7e5 fd64 	bl	11088 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2b5c0:	4622      	mov	r2, r4
   2b5c2:	4669      	mov	r1, sp
   2b5c4:	a810      	add	r0, sp, #64	; 0x40
   2b5c6:	f7ff ff4c 	bl	2b462 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2b5ca:	a910      	add	r1, sp, #64	; 0x40
   2b5cc:	a834      	add	r0, sp, #208	; 0xd0
   2b5ce:	f7ff ff6e 	bl	2b4ae <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2b5d2:	4622      	mov	r2, r4
   2b5d4:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2b5d6:	4638      	mov	r0, r7
   2b5d8:	f7ff ffc6 	bl	2b568 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2b5dc:	2001      	movs	r0, #1
}
   2b5de:	b04d      	add	sp, #308	; 0x134
   2b5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2b5e2:	f7e5 fd51 	bl	11088 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2b5e6:	4622      	mov	r2, r4
   2b5e8:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2b5ea:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2b5ee:	4628      	mov	r0, r5
   2b5f0:	f7ff ff37 	bl	2b462 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2b5f4:	4629      	mov	r1, r5
   2b5f6:	4620      	mov	r0, r4
   2b5f8:	f7ff ff59 	bl	2b4ae <tc_sha256_final>
		rekey(ctx->key,
   2b5fc:	2220      	movs	r2, #32
   2b5fe:	4621      	mov	r1, r4
   2b600:	e7e9      	b.n	2b5d6 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2b602:	4608      	mov	r0, r1
   2b604:	e7eb      	b.n	2b5de <tc_hmac_set_key+0x3c>
   2b606:	4610      	mov	r0, r2
   2b608:	e7e9      	b.n	2b5de <tc_hmac_set_key+0x3c>

0002b60a <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2b60a:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2b60c:	4604      	mov	r4, r0
   2b60e:	b140      	cbz	r0, 2b622 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2b610:	f7e5 fd3a 	bl	11088 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2b614:	2240      	movs	r2, #64	; 0x40
   2b616:	4620      	mov	r0, r4
   2b618:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2b61c:	f7ff ff21 	bl	2b462 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2b620:	2001      	movs	r0, #1
}
   2b622:	bd10      	pop	{r4, pc}

0002b624 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2b624:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2b626:	b110      	cbz	r0, 2b62e <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2b628:	f7ff ff1b 	bl	2b462 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2b62c:	2001      	movs	r0, #1
}
   2b62e:	bd08      	pop	{r3, pc}

0002b630 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2b630:	b570      	push	{r4, r5, r6, lr}
   2b632:	460e      	mov	r6, r1
   2b634:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b636:	4605      	mov	r5, r0
   2b638:	b1f0      	cbz	r0, 2b678 <tc_hmac_final+0x48>
   2b63a:	2920      	cmp	r1, #32
   2b63c:	d11c      	bne.n	2b678 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2b63e:	b1ea      	cbz	r2, 2b67c <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2b640:	4611      	mov	r1, r2
   2b642:	f7ff ff34 	bl	2b4ae <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2b646:	4620      	mov	r0, r4
   2b648:	f7e5 fd1e 	bl	11088 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2b64c:	2240      	movs	r2, #64	; 0x40
   2b64e:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2b652:	4620      	mov	r0, r4
   2b654:	f7ff ff05 	bl	2b462 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2b658:	4632      	mov	r2, r6
   2b65a:	4629      	mov	r1, r5
   2b65c:	4620      	mov	r0, r4
   2b65e:	f7ff ff00 	bl	2b462 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2b662:	4621      	mov	r1, r4
   2b664:	4628      	mov	r0, r5
   2b666:	f7ff ff22 	bl	2b4ae <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2b66a:	4620      	mov	r0, r4
   2b66c:	22f0      	movs	r2, #240	; 0xf0
   2b66e:	2100      	movs	r1, #0
   2b670:	f7ff fcd9 	bl	2b026 <_set>

	return TC_CRYPTO_SUCCESS;
   2b674:	2001      	movs	r0, #1
}
   2b676:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b678:	2000      	movs	r0, #0
   2b67a:	e7fc      	b.n	2b676 <tc_hmac_final+0x46>
   2b67c:	4610      	mov	r0, r2
   2b67e:	e7fa      	b.n	2b676 <tc_hmac_final+0x46>

0002b680 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2b680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b684:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2b686:	f04f 0b01 	mov.w	fp, #1
{
   2b68a:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2b68c:	2300      	movs	r3, #0
{
   2b68e:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b690:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2b694:	4631      	mov	r1, r6
{
   2b696:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b698:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2b69a:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2b69e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2b6a2:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b6a6:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b6aa:	f7ff ff7a 	bl	2b5a2 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2b6ae:	4620      	mov	r0, r4
   2b6b0:	f7ff ffab 	bl	2b60a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b6b4:	2220      	movs	r2, #32
   2b6b6:	4629      	mov	r1, r5
   2b6b8:	4620      	mov	r0, r4
   2b6ba:	f7ff ffb3 	bl	2b624 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2b6be:	465a      	mov	r2, fp
   2b6c0:	4620      	mov	r0, r4
   2b6c2:	f10d 0106 	add.w	r1, sp, #6
   2b6c6:	f7ff ffad 	bl	2b624 <tc_hmac_update>

	if (data && datalen)
   2b6ca:	f1b8 0f00 	cmp.w	r8, #0
   2b6ce:	d007      	beq.n	2b6e0 <update+0x60>
   2b6d0:	f1b9 0f00 	cmp.w	r9, #0
   2b6d4:	d004      	beq.n	2b6e0 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2b6d6:	464a      	mov	r2, r9
   2b6d8:	4641      	mov	r1, r8
   2b6da:	4620      	mov	r0, r4
   2b6dc:	f7ff ffa2 	bl	2b624 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2b6e0:	b13f      	cbz	r7, 2b6f2 <update+0x72>
   2b6e2:	f1ba 0f00 	cmp.w	sl, #0
   2b6e6:	d004      	beq.n	2b6f2 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2b6e8:	4652      	mov	r2, sl
   2b6ea:	4639      	mov	r1, r7
   2b6ec:	4620      	mov	r0, r4
   2b6ee:	f7ff ff99 	bl	2b624 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2b6f2:	4622      	mov	r2, r4
   2b6f4:	2120      	movs	r1, #32
   2b6f6:	4630      	mov	r0, r6
   2b6f8:	f7ff ff9a 	bl	2b630 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b6fc:	2220      	movs	r2, #32
   2b6fe:	4631      	mov	r1, r6
   2b700:	4620      	mov	r0, r4
   2b702:	f7ff ff4e 	bl	2b5a2 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2b706:	4620      	mov	r0, r4
   2b708:	f7ff ff7f 	bl	2b60a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b70c:	2220      	movs	r2, #32
   2b70e:	4629      	mov	r1, r5
   2b710:	4620      	mov	r0, r4
   2b712:	f7ff ff87 	bl	2b624 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b716:	4622      	mov	r2, r4
   2b718:	2120      	movs	r1, #32
   2b71a:	4628      	mov	r0, r5
   2b71c:	f7ff ff88 	bl	2b630 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2b720:	f1b8 0f00 	cmp.w	r8, #0
   2b724:	d03a      	beq.n	2b79c <update+0x11c>
   2b726:	f1b9 0f00 	cmp.w	r9, #0
   2b72a:	d037      	beq.n	2b79c <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b72c:	2220      	movs	r2, #32
   2b72e:	4631      	mov	r1, r6
   2b730:	4620      	mov	r0, r4
   2b732:	f7ff ff36 	bl	2b5a2 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2b736:	4620      	mov	r0, r4
   2b738:	f7ff ff67 	bl	2b60a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b73c:	2220      	movs	r2, #32
   2b73e:	4629      	mov	r1, r5
   2b740:	4620      	mov	r0, r4
   2b742:	f7ff ff6f 	bl	2b624 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2b746:	2201      	movs	r2, #1
   2b748:	f10d 0107 	add.w	r1, sp, #7
   2b74c:	4620      	mov	r0, r4
   2b74e:	f7ff ff69 	bl	2b624 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2b752:	464a      	mov	r2, r9
   2b754:	4641      	mov	r1, r8
   2b756:	4620      	mov	r0, r4
   2b758:	f7ff ff64 	bl	2b624 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2b75c:	b13f      	cbz	r7, 2b76e <update+0xee>
   2b75e:	f1ba 0f00 	cmp.w	sl, #0
   2b762:	d004      	beq.n	2b76e <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2b764:	4652      	mov	r2, sl
   2b766:	4639      	mov	r1, r7
   2b768:	4620      	mov	r0, r4
   2b76a:	f7ff ff5b 	bl	2b624 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2b76e:	4622      	mov	r2, r4
   2b770:	2120      	movs	r1, #32
   2b772:	4630      	mov	r0, r6
   2b774:	f7ff ff5c 	bl	2b630 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b778:	2220      	movs	r2, #32
   2b77a:	4631      	mov	r1, r6
   2b77c:	4620      	mov	r0, r4
   2b77e:	f7ff ff10 	bl	2b5a2 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2b782:	4620      	mov	r0, r4
   2b784:	f7ff ff41 	bl	2b60a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b788:	2220      	movs	r2, #32
   2b78a:	4629      	mov	r1, r5
   2b78c:	4620      	mov	r0, r4
   2b78e:	f7ff ff49 	bl	2b624 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b792:	4622      	mov	r2, r4
   2b794:	2120      	movs	r1, #32
   2b796:	4628      	mov	r0, r5
   2b798:	f7ff ff4a 	bl	2b630 <tc_hmac_final>
}
   2b79c:	b003      	add	sp, #12
   2b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b7a2 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2b7a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b7a4:	460c      	mov	r4, r1
   2b7a6:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2b7a8:	4605      	mov	r5, r0
   2b7aa:	b1b0      	cbz	r0, 2b7da <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2b7ac:	b1b9      	cbz	r1, 2b7de <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2b7ae:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2b7b0:	2220      	movs	r2, #32
   2b7b2:	2100      	movs	r1, #0
   2b7b4:	30f0      	adds	r0, #240	; 0xf0
   2b7b6:	f7ff fc36 	bl	2b026 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2b7ba:	2220      	movs	r2, #32
   2b7bc:	2101      	movs	r1, #1
   2b7be:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2b7c2:	f7ff fc30 	bl	2b026 <_set>
	update(prng, personalization, plen, 0, 0);
   2b7c6:	4628      	mov	r0, r5
   2b7c8:	4633      	mov	r3, r6
   2b7ca:	463a      	mov	r2, r7
   2b7cc:	4621      	mov	r1, r4
   2b7ce:	9600      	str	r6, [sp, #0]
   2b7d0:	f7ff ff56 	bl	2b680 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2b7d4:	2001      	movs	r0, #1
	prng->countdown = 0;
   2b7d6:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2b7da:	b003      	add	sp, #12
   2b7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b7de:	4608      	mov	r0, r1
   2b7e0:	e7fb      	b.n	2b7da <tc_hmac_prng_init+0x38>

0002b7e2 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2b7e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b7e4:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2b7e6:	4605      	mov	r5, r0
   2b7e8:	b180      	cbz	r0, 2b80c <tc_hmac_prng_reseed+0x2a>
   2b7ea:	b179      	cbz	r1, 2b80c <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2b7ec:	2a1f      	cmp	r2, #31
   2b7ee:	d90d      	bls.n	2b80c <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2b7f0:	b153      	cbz	r3, 2b808 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2b7f2:	b16c      	cbz	r4, 2b810 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2b7f4:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2b7f6:	f7ff ff43 	bl	2b680 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2b7fa:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2b7fe:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2b800:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2b804:	b003      	add	sp, #12
   2b806:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2b808:	9300      	str	r3, [sp, #0]
   2b80a:	e7f4      	b.n	2b7f6 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2b80c:	2000      	movs	r0, #0
   2b80e:	e7f9      	b.n	2b804 <tc_hmac_prng_reseed+0x22>
   2b810:	4620      	mov	r0, r4
   2b812:	e7f7      	b.n	2b804 <tc_hmac_prng_reseed+0x22>

0002b814 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2b814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b818:	460d      	mov	r5, r1
   2b81a:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2b81c:	4680      	mov	r8, r0
   2b81e:	b3d8      	cbz	r0, 2b898 <tc_hmac_prng_generate+0x84>
   2b820:	b3d2      	cbz	r2, 2b898 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2b822:	1e4b      	subs	r3, r1, #1
   2b824:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2b828:	d236      	bcs.n	2b898 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2b82a:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2b82e:	b3ab      	cbz	r3, 2b89c <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2b830:	3b01      	subs	r3, #1
   2b832:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b836:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b83a:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b83e:	2220      	movs	r2, #32
   2b840:	4649      	mov	r1, r9
   2b842:	4620      	mov	r0, r4
   2b844:	f7ff fead 	bl	2b5a2 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2b848:	4620      	mov	r0, r4
   2b84a:	f7ff fede 	bl	2b60a <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b84e:	2220      	movs	r2, #32
   2b850:	4639      	mov	r1, r7
   2b852:	4620      	mov	r0, r4
   2b854:	f7ff fee6 	bl	2b624 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b858:	4622      	mov	r2, r4
   2b85a:	2120      	movs	r1, #32
   2b85c:	4638      	mov	r0, r7
   2b85e:	f7ff fee7 	bl	2b630 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2b862:	2d20      	cmp	r5, #32
   2b864:	462e      	mov	r6, r5
   2b866:	bf28      	it	cs
   2b868:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2b86a:	4640      	mov	r0, r8
   2b86c:	4633      	mov	r3, r6
   2b86e:	463a      	mov	r2, r7
   2b870:	4631      	mov	r1, r6
   2b872:	f7ff fbcb 	bl	2b00c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2b876:	2d20      	cmp	r5, #32
   2b878:	bf38      	it	cc
   2b87a:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2b87c:	3d20      	subs	r5, #32
		out += bufferlen;
   2b87e:	44b0      	add	r8, r6
	while (outlen != 0) {
   2b880:	d1dd      	bne.n	2b83e <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2b882:	4620      	mov	r0, r4
   2b884:	462b      	mov	r3, r5
   2b886:	462a      	mov	r2, r5
   2b888:	4629      	mov	r1, r5
   2b88a:	9500      	str	r5, [sp, #0]
   2b88c:	f7ff fef8 	bl	2b680 <update>

	return TC_CRYPTO_SUCCESS;
   2b890:	2001      	movs	r0, #1
}
   2b892:	b003      	add	sp, #12
   2b894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2b898:	2000      	movs	r0, #0
   2b89a:	e7fa      	b.n	2b892 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2b89c:	f04f 30ff 	mov.w	r0, #4294967295
   2b8a0:	e7f7      	b.n	2b892 <tc_hmac_prng_generate+0x7e>

0002b8a2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b8a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b8a4:	ab0b      	add	r3, sp, #44	; 0x2c
   2b8a6:	9305      	str	r3, [sp, #20]
   2b8a8:	9303      	str	r3, [sp, #12]
   2b8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b8ac:	2201      	movs	r2, #1
   2b8ae:	9302      	str	r3, [sp, #8]
   2b8b0:	2300      	movs	r3, #0
   2b8b2:	4618      	mov	r0, r3
   2b8b4:	e9cd 3300 	strd	r3, r3, [sp]
   2b8b8:	f7e3 fe36 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2b8bc:	b007      	add	sp, #28
   2b8be:	f85d fb04 	ldr.w	pc, [sp], #4

0002b8c2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2b8c2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2b8c4:	6800      	ldr	r0, [r0, #0]
   2b8c6:	f7e5 bc29 	b.w	1111c <z_arm_fatal_error>

0002b8ca <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2b8ca:	2100      	movs	r1, #0
   2b8cc:	2001      	movs	r0, #1
   2b8ce:	f7e5 bc25 	b.w	1111c <z_arm_fatal_error>

0002b8d2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2b8d2:	b508      	push	{r3, lr}
	handler();
   2b8d4:	f7e5 fcb8 	bl	11248 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2b8d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2b8dc:	f7e5 bd88 	b.w	113f0 <z_arm_exc_exit>

0002b8e0 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2b8e0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b8e4:	f383 880b 	msr	PSPLIM, r3
}
   2b8e8:	4770      	bx	lr

0002b8ea <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b8ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b8ec:	ab0b      	add	r3, sp, #44	; 0x2c
   2b8ee:	9305      	str	r3, [sp, #20]
   2b8f0:	9303      	str	r3, [sp, #12]
   2b8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b8f4:	2201      	movs	r2, #1
   2b8f6:	9302      	str	r3, [sp, #8]
   2b8f8:	2300      	movs	r3, #0
   2b8fa:	4618      	mov	r0, r3
   2b8fc:	e9cd 3300 	strd	r3, r3, [sp]
   2b900:	f7e3 fe12 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2b904:	b007      	add	sp, #28
   2b906:	f85d fb04 	ldr.w	pc, [sp], #4

0002b90a <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2b90a:	4770      	bx	lr

0002b90c <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2b90c:	4770      	bx	lr

0002b90e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2b90e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2b912:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2b916:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2b918:	bf08      	it	eq
   2b91a:	f06f 0015 	mvneq.w	r0, #21
   2b91e:	4770      	bx	lr

0002b920 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b922:	ab0b      	add	r3, sp, #44	; 0x2c
   2b924:	9305      	str	r3, [sp, #20]
   2b926:	9303      	str	r3, [sp, #12]
   2b928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b92a:	2201      	movs	r2, #1
   2b92c:	9302      	str	r3, [sp, #8]
   2b92e:	2300      	movs	r3, #0
   2b930:	4618      	mov	r0, r3
   2b932:	e9cd 3300 	strd	r3, r3, [sp]
   2b936:	f7e3 fdf7 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2b93a:	b007      	add	sp, #28
   2b93c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b940 <mpu_configure_region>:
{
   2b940:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   2b942:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2b944:	684b      	ldr	r3, [r1, #4]
{
   2b946:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   2b948:	890a      	ldrh	r2, [r1, #8]
   2b94a:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2b94c:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2b94e:	3b01      	subs	r3, #1
   2b950:	f024 041f 	bic.w	r4, r4, #31
   2b954:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2b956:	f002 021f 	and.w	r2, r2, #31
   2b95a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2b95e:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   2b962:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   2b964:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2b968:	9303      	str	r3, [sp, #12]
   2b96a:	f7e6 f8ef 	bl	11b4c <region_allocate_and_init>
}
   2b96e:	b005      	add	sp, #20
   2b970:	bd30      	pop	{r4, r5, pc}

0002b972 <malloc_prepare>:
}
   2b972:	2000      	movs	r0, #0
   2b974:	4770      	bx	lr

0002b976 <_stdout_hook_default>:
}
   2b976:	f04f 30ff 	mov.w	r0, #4294967295
   2b97a:	4770      	bx	lr

0002b97c <_stdin_hook_default>:
}
   2b97c:	2000      	movs	r0, #0
   2b97e:	4770      	bx	lr

0002b980 <_read>:
{
   2b980:	4608      	mov	r0, r1
   2b982:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2b984:	f7e6 ba5e 	b.w	11e44 <z_impl_zephyr_read_stdin>

0002b988 <_write>:
{
   2b988:	4608      	mov	r0, r1
   2b98a:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2b98c:	f7e6 ba6e 	b.w	11e6c <z_impl_zephyr_write_stdout>

0002b990 <_close>:
int _close(int file)
   2b990:	f04f 30ff 	mov.w	r0, #4294967295
   2b994:	4770      	bx	lr

0002b996 <_lseek>:
}
   2b996:	2000      	movs	r0, #0
   2b998:	4770      	bx	lr

0002b99a <_isatty>:
}
   2b99a:	2802      	cmp	r0, #2
   2b99c:	bfcc      	ite	gt
   2b99e:	2000      	movgt	r0, #0
   2b9a0:	2001      	movle	r0, #1
   2b9a2:	4770      	bx	lr

0002b9a4 <_kill>:
}
   2b9a4:	2000      	movs	r0, #0
   2b9a6:	4770      	bx	lr

0002b9a8 <_getpid>:
}
   2b9a8:	2000      	movs	r0, #0
   2b9aa:	4770      	bx	lr

0002b9ac <_fstat>:
	st->st_mode = S_IFCHR;
   2b9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2b9b0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2b9b2:	604b      	str	r3, [r1, #4]
}
   2b9b4:	4770      	bx	lr

0002b9b6 <__retarget_lock_init_recursive>:
{
   2b9b6:	b510      	push	{r4, lr}
   2b9b8:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   2b9ba:	2014      	movs	r0, #20
   2b9bc:	f7fb f948 	bl	26c50 <malloc>
   2b9c0:	6020      	str	r0, [r4, #0]
}
   2b9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   2b9c6:	f005 ba48 	b.w	30e5a <z_impl_k_mutex_init>

0002b9ca <__retarget_lock_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b9ca:	f04f 32ff 	mov.w	r2, #4294967295
   2b9ce:	f04f 33ff 	mov.w	r3, #4294967295
   2b9d2:	f7fa b8ab 	b.w	25b2c <z_impl_k_sem_take>

0002b9d6 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2b9d6:	f04f 32ff 	mov.w	r2, #4294967295
   2b9da:	f04f 33ff 	mov.w	r3, #4294967295
   2b9de:	f7f9 bf93 	b.w	25908 <z_impl_k_mutex_lock>

0002b9e2 <__retarget_lock_release>:
	z_impl_k_sem_give(sem);
   2b9e2:	f7fa b87d 	b.w	25ae0 <z_impl_k_sem_give>

0002b9e6 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   2b9e6:	f7fa b809 	b.w	259fc <z_impl_k_mutex_unlock>

0002b9ea <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2b9ea:	f7f9 bced 	b.w	253c8 <z_impl_z_errno>

0002b9ee <mac_process_notify>:
	LoRaMacProcess();
   2b9ee:	f7ea bb8b 	b.w	16108 <LoRaMacProcess>

0002b9f2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b9f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b9f4:	ab0b      	add	r3, sp, #44	; 0x2c
   2b9f6:	9305      	str	r3, [sp, #20]
   2b9f8:	9303      	str	r3, [sp, #12]
   2b9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b9fc:	9302      	str	r3, [sp, #8]
   2b9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ba00:	9301      	str	r3, [sp, #4]
   2ba02:	2300      	movs	r3, #0
   2ba04:	4618      	mov	r0, r3
   2ba06:	9300      	str	r3, [sp, #0]
   2ba08:	f7e3 fd8e 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2ba0c:	b007      	add	sp, #28
   2ba0e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba12 <BoardGetUniqueId>:
}
   2ba12:	4770      	bx	lr

0002ba14 <lorawan_get_payload_sizes>:
{
   2ba14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ba16:	4605      	mov	r5, r0
   2ba18:	460c      	mov	r4, r1
	(void) LoRaMacQueryTxPossible(0, &tx_info);
   2ba1a:	2000      	movs	r0, #0
   2ba1c:	a901      	add	r1, sp, #4
   2ba1e:	f7eb fa93 	bl	16f48 <LoRaMacQueryTxPossible>
	*max_next_payload_size = tx_info.MaxPossibleApplicationDataSize;
   2ba22:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2ba26:	702b      	strb	r3, [r5, #0]
	*max_payload_size = tx_info.CurrentPossiblePayloadSize;
   2ba28:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2ba2c:	7023      	strb	r3, [r4, #0]
}
   2ba2e:	b003      	add	sp, #12
   2ba30:	bd30      	pop	{r4, r5, pc}

0002ba32 <lorawan_set_conf_msg_tries>:
	mib_req.Type = MIB_CHANNELS_NB_TRANS;
   2ba32:	2325      	movs	r3, #37	; 0x25
{
   2ba34:	b500      	push	{lr}
   2ba36:	b08b      	sub	sp, #44	; 0x2c
	mib_req.Param.ChannelsNbTrans = tries;
   2ba38:	f88d 0004 	strb.w	r0, [sp, #4]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
   2ba3c:	4668      	mov	r0, sp
	mib_req.Type = MIB_CHANNELS_NB_TRANS;
   2ba3e:	f88d 3000 	strb.w	r3, [sp]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
   2ba42:	f7eb fbc3 	bl	171cc <LoRaMacMibSetRequestConfirm>
	return 0;
   2ba46:	2800      	cmp	r0, #0
}
   2ba48:	bf14      	ite	ne
   2ba4a:	f06f 0015 	mvnne.w	r0, #21
   2ba4e:	2000      	moveq	r0, #0
   2ba50:	b00b      	add	sp, #44	; 0x2c
   2ba52:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba56 <timer_work_handler>:
	TimerIrqHandler();
   2ba56:	f7e7 bb8b 	b.w	13170 <TimerIrqHandler>

0002ba5a <k_uptime_get_32>:
{
   2ba5a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   2ba5c:	f005 fd0d 	bl	3147a <z_impl_k_uptime_ticks>
   2ba60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ba64:	fba0 0302 	umull	r0, r3, r0, r2
   2ba68:	fb02 3301 	mla	r3, r2, r1, r3
   2ba6c:	0bc0      	lsrs	r0, r0, #15
}
   2ba6e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2ba72:	bd08      	pop	{r3, pc}

0002ba74 <RtcGetCalendarTime>:
{
   2ba74:	b538      	push	{r3, r4, r5, lr}
   2ba76:	4605      	mov	r5, r0
   2ba78:	f005 fcff 	bl	3147a <z_impl_k_uptime_ticks>
   2ba7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ba80:	fba0 4302 	umull	r4, r3, r0, r2
   2ba84:	fb02 3101 	mla	r1, r2, r1, r3
   2ba88:	0be4      	lsrs	r4, r4, #15
   2ba8a:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
   2ba8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ba92:	2300      	movs	r3, #0
   2ba94:	0bc9      	lsrs	r1, r1, #15
   2ba96:	f7dd fa03 	bl	8ea0 <__aeabi_ldivmod>
	*milliseconds = now % MSEC_PER_SEC;
   2ba9a:	802a      	strh	r2, [r5, #0]
}
   2ba9c:	bd38      	pop	{r3, r4, r5, pc}

0002ba9e <RtcGetTimerValue>:
	return k_uptime_get_32();
   2ba9e:	f7ff bfdc 	b.w	2ba5a <k_uptime_get_32>

0002baa2 <RtcGetMinimumTimeout>:
}
   2baa2:	2001      	movs	r0, #1
   2baa4:	4770      	bx	lr

0002baa6 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   2baa6:	4601      	mov	r1, r0
   2baa8:	f240 30e7 	movw	r0, #999	; 0x3e7
   2baac:	b508      	push	{r3, lr}
   2baae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bab2:	2300      	movs	r3, #0
   2bab4:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2bab8:	0c49      	lsrs	r1, r1, #17
   2baba:	f7dd fa41 	bl	8f40 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   2babe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   2bac2:	f7fa bd31 	b.w	26528 <z_impl_k_sleep>

0002bac6 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   2bac6:	4770      	bx	lr

0002bac8 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
   2bac8:	4770      	bx	lr

0002baca <BoardCriticalSectionBegin>:
	__asm__ volatile(
   2baca:	f04f 0220 	mov.w	r2, #32
   2bace:	f3ef 8311 	mrs	r3, BASEPRI
   2bad2:	f382 8812 	msr	BASEPRI_MAX, r2
   2bad6:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   2bada:	6003      	str	r3, [r0, #0]
}
   2badc:	4770      	bx	lr

0002bade <BoardCriticalSectionEnd>:
	__asm__ volatile(
   2bade:	6803      	ldr	r3, [r0, #0]
   2bae0:	f383 8811 	msr	BASEPRI, r3
   2bae4:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   2bae8:	4770      	bx	lr

0002baea <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2baea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2baec:	ab0b      	add	r3, sp, #44	; 0x2c
   2baee:	9305      	str	r3, [sp, #20]
   2baf0:	9303      	str	r3, [sp, #12]
   2baf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2baf4:	9302      	str	r3, [sp, #8]
   2baf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2baf8:	9301      	str	r3, [sp, #4]
   2bafa:	2300      	movs	r3, #0
   2bafc:	4618      	mov	r0, r3
   2bafe:	9300      	str	r3, [sp, #0]
   2bb00:	f7e3 fd12 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2bb04:	b007      	add	sp, #28
   2bb06:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb0a <SX1276CheckRfFrequency>:
}
   2bb0a:	2001      	movs	r0, #1
   2bb0c:	4770      	bx	lr

0002bb0e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2bb0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2bb10:	ab0b      	add	r3, sp, #44	; 0x2c
   2bb12:	9305      	str	r3, [sp, #20]
   2bb14:	9303      	str	r3, [sp, #12]
   2bb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bb18:	9302      	str	r3, [sp, #8]
   2bb1a:	2300      	movs	r3, #0
   2bb1c:	4618      	mov	r0, r3
   2bb1e:	e9cd 3300 	strd	r3, r3, [sp]
   2bb22:	f7e3 fd01 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2bb26:	b007      	add	sp, #28
   2bb28:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb2c <SX1276GetBoardTcxoWakeupTime>:
}
   2bb2c:	2000      	movs	r0, #0
   2bb2e:	4770      	bx	lr

0002bb30 <SX1276SetAntSwLowPower>:
}
   2bb30:	4770      	bx	lr

0002bb32 <SX1276SetBoardTcxo>:
}
   2bb32:	4770      	bx	lr

0002bb34 <SX1276SetAntSw>:
void SX127xSetAntSw(uint8_t opMode)
   2bb34:	4770      	bx	lr

0002bb36 <SX1276Reset>:
{
   2bb36:	b508      	push	{r3, lr}
	gpio_pin_set_dt(&dev_config.reset, 1);
   2bb38:	2001      	movs	r0, #1
   2bb3a:	f7e7 f8bb 	bl	12cb4 <gpio_pin_set_dt.constprop.0.isra.0>
   2bb3e:	2100      	movs	r1, #0
   2bb40:	2021      	movs	r0, #33	; 0x21
   2bb42:	f7fa fcf1 	bl	26528 <z_impl_k_sleep>
	gpio_pin_set_dt(&dev_config.reset, 0);
   2bb46:	2000      	movs	r0, #0
   2bb48:	f7e7 f8b4 	bl	12cb4 <gpio_pin_set_dt.constprop.0.isra.0>
}
   2bb4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2bb50:	20c5      	movs	r0, #197	; 0xc5
   2bb52:	2100      	movs	r1, #0
   2bb54:	f7fa bce8 	b.w	26528 <z_impl_k_sleep>

0002bb58 <randr>:
{
   2bb58:	b538      	push	{r3, r4, r5, lr}
   2bb5a:	4605      	mov	r5, r0
   2bb5c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
   2bb5e:	f7e7 fa8f 	bl	13080 <rand1>
   2bb62:	1b61      	subs	r1, r4, r5
   2bb64:	3101      	adds	r1, #1
   2bb66:	fb90 f3f1 	sdiv	r3, r0, r1
   2bb6a:	fb03 0011 	mls	r0, r3, r1, r0
}
   2bb6e:	4428      	add	r0, r5
   2bb70:	bd38      	pop	{r3, r4, r5, pc}

0002bb72 <memcpy1>:
    while( size-- )
   2bb72:	3801      	subs	r0, #1
   2bb74:	440a      	add	r2, r1
   2bb76:	4291      	cmp	r1, r2
   2bb78:	d100      	bne.n	2bb7c <memcpy1+0xa>
}
   2bb7a:	4770      	bx	lr
        *dst++ = *src++;
   2bb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2bb80:	f800 3f01 	strb.w	r3, [r0, #1]!
   2bb84:	e7f7      	b.n	2bb76 <memcpy1+0x4>

0002bb86 <memcpyr>:
    while( size-- )
   2bb86:	4410      	add	r0, r2
   2bb88:	440a      	add	r2, r1
   2bb8a:	4291      	cmp	r1, r2
   2bb8c:	d100      	bne.n	2bb90 <memcpyr+0xa>
}
   2bb8e:	4770      	bx	lr
        *dst-- = *src++;
   2bb90:	f811 3b01 	ldrb.w	r3, [r1], #1
   2bb94:	f800 3d01 	strb.w	r3, [r0, #-1]!
   2bb98:	e7f7      	b.n	2bb8a <memcpyr+0x4>

0002bb9a <memset1>:
    while( size-- )
   2bb9a:	4402      	add	r2, r0
   2bb9c:	4290      	cmp	r0, r2
   2bb9e:	d100      	bne.n	2bba2 <memset1+0x8>
}
   2bba0:	4770      	bx	lr
        *dst++ = value;
   2bba2:	f800 1b01 	strb.w	r1, [r0], #1
   2bba6:	e7f9      	b.n	2bb9c <memset1+0x2>

0002bba8 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
   2bba8:	b082      	sub	sp, #8
   2bbaa:	b082      	sub	sp, #8
   2bbac:	f10d 0c08 	add.w	ip, sp, #8
   2bbb0:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bbb4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
   2bbb8:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
   2bbba:	440b      	add	r3, r1
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bbbc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bbc0:	440a      	add	r2, r1
   2bbc2:	b291      	uxth	r1, r2
   2bbc4:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
   2bbc6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
   2bbca:	bfa2      	ittt	ge
   2bbcc:	f5a1 727a 	subge.w	r2, r1, #1000	; 0x3e8
        c.Seconds++;
   2bbd0:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
   2bbd2:	b212      	sxthge	r2, r2
    }
    return c;
   2bbd4:	6003      	str	r3, [r0, #0]
   2bbd6:	8082      	strh	r2, [r0, #4]
}
   2bbd8:	b002      	add	sp, #8
   2bbda:	b002      	add	sp, #8
   2bbdc:	4770      	bx	lr

0002bbde <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
   2bbde:	b082      	sub	sp, #8
   2bbe0:	b082      	sub	sp, #8
   2bbe2:	f10d 0c08 	add.w	ip, sp, #8
   2bbe6:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bbea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
   2bbee:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
   2bbf0:	1acb      	subs	r3, r1, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bbf2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bbf6:	1a52      	subs	r2, r2, r1
   2bbf8:	b291      	uxth	r1, r2
   2bbfa:	b212      	sxth	r2, r2
    if( c.SubSeconds < 0 )
   2bbfc:	2a00      	cmp	r2, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
   2bbfe:	bfbe      	ittt	lt
   2bc00:	f501 727a 	addlt.w	r2, r1, #1000	; 0x3e8
        c.Seconds--;
   2bc04:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
   2bc08:	b212      	sxthlt	r2, r2
    }
    return c;
   2bc0a:	6003      	str	r3, [r0, #0]
   2bc0c:	8082      	strh	r2, [r0, #4]
}
   2bc0e:	b002      	add	sp, #8
   2bc10:	b002      	add	sp, #8
   2bc12:	4770      	bx	lr

0002bc14 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
   2bc14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2bc16:	466b      	mov	r3, sp
   2bc18:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bc1c:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bc1e:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bc20:	9302      	str	r3, [sp, #8]
   2bc22:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bc26:	f7ff ff25 	bl	2ba74 <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
   2bc2a:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bc2c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bc30:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
   2bc32:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bc34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2bc38:	1ac9      	subs	r1, r1, r3
   2bc3a:	b28b      	uxth	r3, r1
   2bc3c:	b209      	sxth	r1, r1
    if( c.SubSeconds < 0 )
   2bc3e:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
   2bc40:	bfbe      	ittt	lt
   2bc42:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
   2bc46:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
   2bc4a:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
   2bc4c:	f7e6 fd3a 	bl	126c4 <RtcBkupWrite>
}
   2bc50:	b005      	add	sp, #20
   2bc52:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc56 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
   2bc56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bc58:	2300      	movs	r3, #0
{
   2bc5a:	4604      	mov	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bc5c:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bc5e:	9302      	str	r3, [sp, #8]
   2bc60:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bc64:	f7ff ff06 	bl	2ba74 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
   2bc68:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bc6a:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
   2bc6c:	4668      	mov	r0, sp
   2bc6e:	f7e6 fd2f 	bl	126d0 <RtcBkupRead>
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
   2bc72:	4620      	mov	r0, r4
    c.Seconds = a.Seconds + b.Seconds;
   2bc74:	9b02      	ldr	r3, [sp, #8]
   2bc76:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bc78:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
   2bc7c:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bc7e:	9b01      	ldr	r3, [sp, #4]
   2bc80:	440b      	add	r3, r1
   2bc82:	b299      	uxth	r1, r3
   2bc84:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
   2bc86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
   2bc8a:	bfa2      	ittt	ge
   2bc8c:	f5a1 737a 	subge.w	r3, r1, #1000	; 0x3e8
        c.Seconds++;
   2bc90:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
   2bc92:	b21b      	sxthge	r3, r3
    return sysTime;
   2bc94:	6022      	str	r2, [r4, #0]
   2bc96:	80a3      	strh	r3, [r4, #4]
}
   2bc98:	b004      	add	sp, #16
   2bc9a:	bd10      	pop	{r4, pc}

0002bc9c <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bc9c:	2300      	movs	r3, #0
{
   2bc9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bca0:	4604      	mov	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bca2:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bca4:	9300      	str	r3, [sp, #0]
   2bca6:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bcaa:	f7ff fee3 	bl	2ba74 <RtcGetCalendarTime>
   2bcae:	466d      	mov	r5, sp
   2bcb0:	9000      	str	r0, [sp, #0]

    return calendarTime;
   2bcb2:	e895 0003 	ldmia.w	r5, {r0, r1}
   2bcb6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   2bcba:	4620      	mov	r0, r4
   2bcbc:	b003      	add	sp, #12
   2bcbe:	bd30      	pop	{r4, r5, pc}

0002bcc0 <SysTimeToMs>:

TimerTime_t SysTimeToMs( SysTime_t sysTime )
{
   2bcc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2bcc2:	466b      	mov	r3, sp
   2bcc4:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
   2bcc8:	a903      	add	r1, sp, #12
   2bcca:	a802      	add	r0, sp, #8
   2bccc:	f7e6 fd00 	bl	126d0 <RtcBkupRead>
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return ( TimerTime_t )( calendarTime.Seconds * 1000 + calendarTime.SubSeconds );
}
   2bcd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c.Seconds = a.Seconds - b.Seconds;
   2bcd4:	9b02      	ldr	r3, [sp, #8]
   2bcd6:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bcd8:	9903      	ldr	r1, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
   2bcda:	1ad2      	subs	r2, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bcdc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2bce0:	1a5b      	subs	r3, r3, r1
   2bce2:	b299      	uxth	r1, r3
   2bce4:	b21b      	sxth	r3, r3
    if( c.SubSeconds < 0 )
   2bce6:	2b00      	cmp	r3, #0
        c.SubSeconds += 1000;
   2bce8:	bfbe      	ittt	lt
   2bcea:	f501 717a 	addlt.w	r1, r1, #1000	; 0x3e8
        c.Seconds--;
   2bcee:	f102 32ff 	addlt.w	r2, r2, #4294967295
        c.SubSeconds += 1000;
   2bcf2:	b20b      	sxthlt	r3, r1
}
   2bcf4:	fb00 3002 	mla	r0, r0, r2, r3
   2bcf8:	b005      	add	sp, #20
   2bcfa:	f85d fb04 	ldr.w	pc, [sp], #4

0002bcfe <SysTimeFromMs>:

SysTime_t SysTimeFromMs( TimerTime_t timeMs )
{
    uint32_t seconds = timeMs / 1000;
   2bcfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   2bd02:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t seconds = timeMs / 1000;
   2bd04:	fbb1 f4f3 	udiv	r4, r1, r3
{
   2bd08:	4606      	mov	r6, r0
   2bd0a:	fb03 1514 	mls	r5, r3, r4, r1
    uint32_t subSeconds = timeMs - seconds * 1000;
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
   2bd0e:	4668      	mov	r0, sp
   2bd10:	a901      	add	r1, sp, #4
    uint32_t seconds = timeMs / 1000;
   2bd12:	9400      	str	r4, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
   2bd14:	9501      	str	r5, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
   2bd16:	f7e6 fcdb 	bl	126d0 <RtcBkupRead>

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
   2bd1a:	4630      	mov	r0, r6
    c.Seconds = a.Seconds + b.Seconds;
   2bd1c:	9b00      	ldr	r3, [sp, #0]
   2bd1e:	441c      	add	r4, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bd20:	9b01      	ldr	r3, [sp, #4]
   2bd22:	442b      	add	r3, r5
   2bd24:	b29a      	uxth	r2, r3
   2bd26:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
   2bd28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
   2bd2c:	bfa2      	ittt	ge
   2bd2e:	f5a2 737a 	subge.w	r3, r2, #1000	; 0x3e8
        c.Seconds++;
   2bd32:	3401      	addge	r4, #1
        c.SubSeconds -= 1000;
   2bd34:	b21b      	sxthge	r3, r3
    return c;
   2bd36:	6034      	str	r4, [r6, #0]
   2bd38:	80b3      	strh	r3, [r6, #4]
}
   2bd3a:	b002      	add	sp, #8
   2bd3c:	bd70      	pop	{r4, r5, r6, pc}

0002bd3e <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   2bd3e:	b570      	push	{r4, r5, r6, lr}
   2bd40:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   2bd42:	f7ff feae 	bl	2baa2 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   2bd46:	2301      	movs	r3, #1
   2bd48:	7263      	strb	r3, [r4, #9]
    int32_t minTicks= RtcGetMinimumTimeout( );
   2bd4a:	4605      	mov	r5, r0

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   2bd4c:	6826      	ldr	r6, [r4, #0]
   2bd4e:	f7e6 fcc7 	bl	126e0 <RtcGetTimerElapsedTime>
   2bd52:	4428      	add	r0, r5
   2bd54:	4286      	cmp	r6, r0
   2bd56:	d203      	bcs.n	2bd60 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   2bd58:	f7e6 fcc2 	bl	126e0 <RtcGetTimerElapsedTime>
   2bd5c:	4405      	add	r5, r0
   2bd5e:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   2bd60:	6820      	ldr	r0, [r4, #0]
}
   2bd62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   2bd66:	f7e6 bccb 	b.w	12700 <RtcSetAlarm>

0002bd6a <TimerInit>:
    obj->Timestamp = 0;
   2bd6a:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   2bd6c:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   2bd70:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   2bd74:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   2bd76:	6143      	str	r3, [r0, #20]
}
   2bd78:	4770      	bx	lr

0002bd7a <TimerSetValue>:
{
   2bd7a:	b538      	push	{r3, r4, r5, lr}
   2bd7c:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   2bd7e:	4608      	mov	r0, r1
   2bd80:	f7ff fea1 	bl	2bac6 <RtcMs2Tick>
   2bd84:	4604      	mov	r4, r0
    TimerStop( obj );
   2bd86:	4628      	mov	r0, r5
   2bd88:	f7e7 fa30 	bl	131ec <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   2bd8c:	f7ff fe89 	bl	2baa2 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   2bd90:	42a0      	cmp	r0, r4
   2bd92:	bf38      	it	cc
   2bd94:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   2bd96:	e9c5 0000 	strd	r0, r0, [r5]
}
   2bd9a:	bd38      	pop	{r3, r4, r5, pc}

0002bd9c <TimerGetCurrentTime>:
{
   2bd9c:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   2bd9e:	f7ff fe7e 	bl	2ba9e <RtcGetTimerValue>
}
   2bda2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   2bda6:	f7ff be8f 	b.w	2bac8 <RtcTick2Ms>

0002bdaa <TimerGetElapsedTime>:
{
   2bdaa:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   2bdac:	4604      	mov	r4, r0
   2bdae:	b150      	cbz	r0, 2bdc6 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   2bdb0:	f7ff fe75 	bl	2ba9e <RtcGetTimerValue>
   2bdb4:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   2bdb6:	4620      	mov	r0, r4
   2bdb8:	f7ff fe85 	bl	2bac6 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2bdbc:	1a28      	subs	r0, r5, r0
}
   2bdbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2bdc2:	f7ff be81 	b.w	2bac8 <RtcTick2Ms>
}
   2bdc6:	bd38      	pop	{r3, r4, r5, pc}

0002bdc8 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   2bdc8:	f7ff be6d 	b.w	2baa6 <DelayMsMcu>

0002bdcc <SX1276Write>:
{
   2bdcc:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   2bdce:	2201      	movs	r2, #1
{
   2bdd0:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   2bdd4:	f10d 0107 	add.w	r1, sp, #7
   2bdd8:	f7e7 f8c8 	bl	12f6c <SX1276WriteBuffer>
}
   2bddc:	b003      	add	sp, #12
   2bdde:	f85d fb04 	ldr.w	pc, [sp], #4

0002bde2 <SX1276Read>:
{
   2bde2:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   2bde4:	2201      	movs	r2, #1
   2bde6:	f10d 0107 	add.w	r1, sp, #7
   2bdea:	f7e7 f817 	bl	12e1c <SX1276ReadBuffer>
}
   2bdee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2bdf2:	b003      	add	sp, #12
   2bdf4:	f85d fb04 	ldr.w	pc, [sp], #4

0002bdf8 <SX1276SetOpMode>:
{
   2bdf8:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   2bdfa:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   2bdfc:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   2bdfe:	b964      	cbnz	r4, 2be1a <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   2be00:	f7ff fe96 	bl	2bb30 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2be04:	2001      	movs	r0, #1
   2be06:	f7ff ffec 	bl	2bde2 <SX1276Read>
   2be0a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   2be0e:	4321      	orrs	r1, r4
   2be10:	2001      	movs	r0, #1
}
   2be12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2be16:	f7ff bfd9 	b.w	2bdcc <SX1276Write>
        SX1276SetBoardTcxo( true );
   2be1a:	f7ff fe8a 	bl	2bb32 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   2be1e:	2000      	movs	r0, #0
   2be20:	f7ff fe86 	bl	2bb30 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   2be24:	4620      	mov	r0, r4
   2be26:	f7ff fe85 	bl	2bb34 <SX1276SetAntSw>
   2be2a:	e7eb      	b.n	2be04 <SX1276SetOpMode+0xc>

0002be2c <SX1276IsChannelFree>:
{
   2be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be2e:	4607      	mov	r7, r0
   2be30:	460c      	mov	r4, r1
   2be32:	4616      	mov	r6, r2
   2be34:	461d      	mov	r5, r3
    SX1276SetSleep( );
   2be36:	f7e7 fd59 	bl	138ec <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
   2be3a:	2000      	movs	r0, #0
   2be3c:	f7e7 ff88 	bl	13d50 <SX1276SetModem>
    SX1276SetChannel( freq );
   2be40:	4638      	mov	r0, r7
   2be42:	f7e7 fa97 	bl	13374 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
   2be46:	4620      	mov	r0, r4
   2be48:	f7e7 f9fa 	bl	13240 <GetFskBandwidthRegValue>
   2be4c:	4604      	mov	r4, r0
   2be4e:	4601      	mov	r1, r0
   2be50:	2012      	movs	r0, #18
   2be52:	f7ff ffbb 	bl	2bdcc <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
   2be56:	4621      	mov	r1, r4
   2be58:	2013      	movs	r0, #19
   2be5a:	f7ff ffb7 	bl	2bdcc <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2be5e:	2005      	movs	r0, #5
   2be60:	f7ff ffca 	bl	2bdf8 <SX1276SetOpMode>
    DelayMs( 1 );
   2be64:	2001      	movs	r0, #1
   2be66:	f7ff ffaf 	bl	2bdc8 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   2be6a:	f7ff ff97 	bl	2bd9c <TimerGetCurrentTime>
   2be6e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   2be70:	4620      	mov	r0, r4
   2be72:	f7ff ff9a 	bl	2bdaa <TimerGetElapsedTime>
   2be76:	42a8      	cmp	r0, r5
   2be78:	d304      	bcc.n	2be84 <SX1276IsChannelFree+0x58>
    bool status = true;
   2be7a:	2401      	movs	r4, #1
    SX1276SetSleep( );
   2be7c:	f7e7 fd36 	bl	138ec <SX1276SetSleep>
}
   2be80:	4620      	mov	r0, r4
   2be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
   2be84:	2000      	movs	r0, #0
   2be86:	f7e7 ff41 	bl	13d0c <SX1276ReadRssi>
        if( rssi > rssiThresh )
   2be8a:	42b0      	cmp	r0, r6
   2be8c:	ddf0      	ble.n	2be70 <SX1276IsChannelFree+0x44>
            status = false;
   2be8e:	2400      	movs	r4, #0
   2be90:	e7f4      	b.n	2be7c <SX1276IsChannelFree+0x50>

0002be92 <SX1276Random>:
{
   2be92:	b538      	push	{r3, r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2be94:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
   2be96:	2001      	movs	r0, #1
   2be98:	f7e7 ff5a 	bl	13d50 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   2be9c:	21ff      	movs	r1, #255	; 0xff
   2be9e:	2011      	movs	r0, #17
   2bea0:	f7ff ff94 	bl	2bdcc <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2bea4:	2005      	movs	r0, #5
   2bea6:	f7ff ffa7 	bl	2bdf8 <SX1276SetOpMode>
    uint32_t rnd = 0;
   2beaa:	4625      	mov	r5, r4
        DelayMs( 1 );
   2beac:	2001      	movs	r0, #1
   2beae:	f7ff ff8b 	bl	2bdc8 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   2beb2:	202c      	movs	r0, #44	; 0x2c
   2beb4:	f7ff ff95 	bl	2bde2 <SX1276Read>
   2beb8:	f000 0001 	and.w	r0, r0, #1
   2bebc:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
   2bebe:	3401      	adds	r4, #1
   2bec0:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   2bec2:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   2bec6:	d1f1      	bne.n	2beac <SX1276Random+0x1a>
    SX1276SetSleep( );
   2bec8:	f7e7 fd10 	bl	138ec <SX1276SetSleep>
}
   2becc:	4628      	mov	r0, r5
   2bece:	bd38      	pop	{r3, r4, r5, pc}

0002bed0 <SX1276GetWakeupTime>:
{
   2bed0:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   2bed2:	f7ff fe2b 	bl	2bb2c <SX1276GetBoardTcxoWakeupTime>
}
   2bed6:	3001      	adds	r0, #1
   2bed8:	bd08      	pop	{r3, pc}

0002beda <xor_block>:
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
   2beda:	780a      	ldrb	r2, [r1, #0]
   2bedc:	7803      	ldrb	r3, [r0, #0]
   2bede:	4053      	eors	r3, r2
   2bee0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
   2bee2:	784a      	ldrb	r2, [r1, #1]
   2bee4:	7843      	ldrb	r3, [r0, #1]
   2bee6:	4053      	eors	r3, r2
   2bee8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
   2beea:	788a      	ldrb	r2, [r1, #2]
   2beec:	7883      	ldrb	r3, [r0, #2]
   2beee:	4053      	eors	r3, r2
   2bef0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
   2bef2:	78ca      	ldrb	r2, [r1, #3]
   2bef4:	78c3      	ldrb	r3, [r0, #3]
   2bef6:	4053      	eors	r3, r2
   2bef8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
   2befa:	790a      	ldrb	r2, [r1, #4]
   2befc:	7903      	ldrb	r3, [r0, #4]
   2befe:	4053      	eors	r3, r2
   2bf00:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
   2bf02:	794a      	ldrb	r2, [r1, #5]
   2bf04:	7943      	ldrb	r3, [r0, #5]
   2bf06:	4053      	eors	r3, r2
   2bf08:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
   2bf0a:	798a      	ldrb	r2, [r1, #6]
   2bf0c:	7983      	ldrb	r3, [r0, #6]
   2bf0e:	4053      	eors	r3, r2
   2bf10:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
   2bf12:	79ca      	ldrb	r2, [r1, #7]
   2bf14:	79c3      	ldrb	r3, [r0, #7]
   2bf16:	4053      	eors	r3, r2
   2bf18:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
   2bf1a:	7a0a      	ldrb	r2, [r1, #8]
   2bf1c:	7a03      	ldrb	r3, [r0, #8]
   2bf1e:	4053      	eors	r3, r2
   2bf20:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
   2bf22:	7a4a      	ldrb	r2, [r1, #9]
   2bf24:	7a43      	ldrb	r3, [r0, #9]
   2bf26:	4053      	eors	r3, r2
   2bf28:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
   2bf2a:	7a8a      	ldrb	r2, [r1, #10]
   2bf2c:	7a83      	ldrb	r3, [r0, #10]
   2bf2e:	4053      	eors	r3, r2
   2bf30:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
   2bf32:	7aca      	ldrb	r2, [r1, #11]
   2bf34:	7ac3      	ldrb	r3, [r0, #11]
   2bf36:	4053      	eors	r3, r2
   2bf38:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
   2bf3a:	7b0a      	ldrb	r2, [r1, #12]
   2bf3c:	7b03      	ldrb	r3, [r0, #12]
   2bf3e:	4053      	eors	r3, r2
   2bf40:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
   2bf42:	7b4a      	ldrb	r2, [r1, #13]
   2bf44:	7b43      	ldrb	r3, [r0, #13]
   2bf46:	4053      	eors	r3, r2
   2bf48:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
   2bf4a:	7b8a      	ldrb	r2, [r1, #14]
   2bf4c:	7b83      	ldrb	r3, [r0, #14]
   2bf4e:	4053      	eors	r3, r2
   2bf50:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
   2bf52:	7bca      	ldrb	r2, [r1, #15]
   2bf54:	7bc3      	ldrb	r3, [r0, #15]
   2bf56:	4053      	eors	r3, r2
   2bf58:	73c3      	strb	r3, [r0, #15]
}
   2bf5a:	4770      	bx	lr

0002bf5c <copy_and_key>:
{
   2bf5c:	b510      	push	{r4, lr}
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
   2bf5e:	780b      	ldrb	r3, [r1, #0]
   2bf60:	7814      	ldrb	r4, [r2, #0]
   2bf62:	4063      	eors	r3, r4
   2bf64:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
   2bf66:	7854      	ldrb	r4, [r2, #1]
   2bf68:	784b      	ldrb	r3, [r1, #1]
   2bf6a:	4063      	eors	r3, r4
   2bf6c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
   2bf6e:	7894      	ldrb	r4, [r2, #2]
   2bf70:	788b      	ldrb	r3, [r1, #2]
   2bf72:	4063      	eors	r3, r4
   2bf74:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
   2bf76:	78d4      	ldrb	r4, [r2, #3]
   2bf78:	78cb      	ldrb	r3, [r1, #3]
   2bf7a:	4063      	eors	r3, r4
   2bf7c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
   2bf7e:	7914      	ldrb	r4, [r2, #4]
   2bf80:	790b      	ldrb	r3, [r1, #4]
   2bf82:	4063      	eors	r3, r4
   2bf84:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
   2bf86:	7954      	ldrb	r4, [r2, #5]
   2bf88:	794b      	ldrb	r3, [r1, #5]
   2bf8a:	4063      	eors	r3, r4
   2bf8c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
   2bf8e:	7994      	ldrb	r4, [r2, #6]
   2bf90:	798b      	ldrb	r3, [r1, #6]
   2bf92:	4063      	eors	r3, r4
   2bf94:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
   2bf96:	79d4      	ldrb	r4, [r2, #7]
   2bf98:	79cb      	ldrb	r3, [r1, #7]
   2bf9a:	4063      	eors	r3, r4
   2bf9c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
   2bf9e:	7a14      	ldrb	r4, [r2, #8]
   2bfa0:	7a0b      	ldrb	r3, [r1, #8]
   2bfa2:	4063      	eors	r3, r4
   2bfa4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
   2bfa6:	7a54      	ldrb	r4, [r2, #9]
   2bfa8:	7a4b      	ldrb	r3, [r1, #9]
   2bfaa:	4063      	eors	r3, r4
   2bfac:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
   2bfae:	7a8b      	ldrb	r3, [r1, #10]
   2bfb0:	7a94      	ldrb	r4, [r2, #10]
   2bfb2:	4063      	eors	r3, r4
   2bfb4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
   2bfb6:	7ad4      	ldrb	r4, [r2, #11]
   2bfb8:	7acb      	ldrb	r3, [r1, #11]
   2bfba:	4063      	eors	r3, r4
   2bfbc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
   2bfbe:	7b14      	ldrb	r4, [r2, #12]
   2bfc0:	7b0b      	ldrb	r3, [r1, #12]
   2bfc2:	4063      	eors	r3, r4
   2bfc4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
   2bfc6:	7b54      	ldrb	r4, [r2, #13]
   2bfc8:	7b4b      	ldrb	r3, [r1, #13]
   2bfca:	4063      	eors	r3, r4
   2bfcc:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
   2bfce:	7b94      	ldrb	r4, [r2, #14]
   2bfd0:	7b8b      	ldrb	r3, [r1, #14]
   2bfd2:	4063      	eors	r3, r4
   2bfd4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
   2bfd6:	7bcb      	ldrb	r3, [r1, #15]
   2bfd8:	7bd2      	ldrb	r2, [r2, #15]
   2bfda:	4053      	eors	r3, r2
   2bfdc:	73c3      	strb	r3, [r0, #15]
}
   2bfde:	bd10      	pop	{r4, pc}

0002bfe0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
   2bfe0:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
   2bfe2:	2210      	movs	r2, #16
{
   2bfe4:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
   2bfe6:	2100      	movs	r1, #0
   2bfe8:	30f1      	adds	r0, #241	; 0xf1
   2bfea:	f7ff fdd6 	bl	2bb9a <memset1>
    ctx->M_n = 0;
   2bfee:	2100      	movs	r1, #0
   2bff0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
   2bff4:	4620      	mov	r0, r4
}
   2bff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
   2bffa:	22f0      	movs	r2, #240	; 0xf0
   2bffc:	f7ff bdcd 	b.w	2bb9a <memset1>

0002c000 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
   2c000:	4602      	mov	r2, r0
   2c002:	4608      	mov	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
   2c004:	2110      	movs	r1, #16
   2c006:	f7e8 ba61 	b.w	144cc <aes_set_key>

0002c00a <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
   2c00a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c00e:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
   2c010:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
   2c014:	460e      	mov	r6, r1
   2c016:	4615      	mov	r5, r2
   2c018:	b085      	sub	sp, #20
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
   2c01a:	f204 1901 	addw	r9, r4, #257	; 0x101
    if( ctx->M_n > 0 )
   2c01e:	b388      	cbz	r0, 2c084 <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
   2c020:	f1c0 0810 	rsb	r8, r0, #16
   2c024:	4590      	cmp	r8, r2
   2c026:	4647      	mov	r7, r8
   2c028:	bf28      	it	cs
   2c02a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
   2c02c:	4448      	add	r0, r9
   2c02e:	b2ba      	uxth	r2, r7
   2c030:	f7ff fd9f 	bl	2bb72 <memcpy1>
        ctx->M_n += mlen;
   2c034:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   2c038:	443b      	add	r3, r7
        if( ctx->M_n < 16 || len == mlen )
   2c03a:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
   2c03c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
   2c040:	d92d      	bls.n	2c09e <AES_CMAC_Update+0x94>
   2c042:	45a8      	cmp	r8, r5
   2c044:	d22b      	bcs.n	2c09e <AES_CMAC_Update+0x94>
   2c046:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2c04a:	f504 7180 	add.w	r1, r4, #256	; 0x100
            return;
        XOR( ctx->M_last, ctx->X );
   2c04e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c052:	7c18      	ldrb	r0, [r3, #16]
   2c054:	428b      	cmp	r3, r1
   2c056:	ea82 0200 	eor.w	r2, r2, r0
   2c05a:	701a      	strb	r2, [r3, #0]
   2c05c:	d1f7      	bne.n	2c04e <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c05e:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
   2c062:	2210      	movs	r2, #16
   2c064:	4641      	mov	r1, r8
   2c066:	4668      	mov	r0, sp
   2c068:	f7ff fd83 	bl	2bb72 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
   2c06c:	4622      	mov	r2, r4
   2c06e:	4669      	mov	r1, sp
   2c070:	4668      	mov	r0, sp
   2c072:	f7e8 fab1 	bl	145d8 <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
   2c076:	2210      	movs	r2, #16
   2c078:	4669      	mov	r1, sp
   2c07a:	4640      	mov	r0, r8
   2c07c:	f7ff fd79 	bl	2bb72 <memcpy1>

        data += mlen;
   2c080:	443e      	add	r6, r7
        len -= mlen;
   2c082:	1bed      	subs	r5, r5, r7
   2c084:	f504 7880 	add.w	r8, r4, #256	; 0x100
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c088:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
    while( len > 16 )
   2c08c:	2d10      	cmp	r5, #16
   2c08e:	d809      	bhi.n	2c0a4 <AES_CMAC_Update+0x9a>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
   2c090:	4631      	mov	r1, r6
   2c092:	4648      	mov	r0, r9
   2c094:	b2aa      	uxth	r2, r5
   2c096:	f7ff fd6c 	bl	2bb72 <memcpy1>
    ctx->M_n = len;
   2c09a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
   2c09e:	b005      	add	sp, #20
   2c0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c0a4:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2c0a8:	1e71      	subs	r1, r6, #1
        XOR( data, ctx->X );
   2c0aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c0ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2c0b2:	4543      	cmp	r3, r8
   2c0b4:	ea82 0200 	eor.w	r2, r2, r0
   2c0b8:	701a      	strb	r2, [r3, #0]
   2c0ba:	d1f6      	bne.n	2c0aa <AES_CMAC_Update+0xa0>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c0bc:	2210      	movs	r2, #16
   2c0be:	4639      	mov	r1, r7
   2c0c0:	4668      	mov	r0, sp
   2c0c2:	f7ff fd56 	bl	2bb72 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
   2c0c6:	4622      	mov	r2, r4
   2c0c8:	4669      	mov	r1, sp
   2c0ca:	4668      	mov	r0, sp
   2c0cc:	f7e8 fa84 	bl	145d8 <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
   2c0d0:	2210      	movs	r2, #16
   2c0d2:	4669      	mov	r1, sp
   2c0d4:	4638      	mov	r0, r7
   2c0d6:	f7ff fd4c 	bl	2bb72 <memcpy1>
        data += 16;
   2c0da:	3610      	adds	r6, #16
        len -= 16;
   2c0dc:	3d10      	subs	r5, #16
   2c0de:	e7d5      	b.n	2c08c <AES_CMAC_Update+0x82>

0002c0e0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
   2c0e0:	b570      	push	{r4, r5, r6, lr}
   2c0e2:	460c      	mov	r4, r1
   2c0e4:	b088      	sub	sp, #32
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
   2c0e6:	2210      	movs	r2, #16
   2c0e8:	2100      	movs	r1, #0
{
   2c0ea:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
   2c0ec:	4668      	mov	r0, sp
   2c0ee:	f7ff fd54 	bl	2bb9a <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
   2c0f2:	4622      	mov	r2, r4
   2c0f4:	4669      	mov	r1, sp
   2c0f6:	4668      	mov	r0, sp
   2c0f8:	f7e8 fa6e 	bl	145d8 <aes_encrypt>

    if( K[0] & 0x80 )
   2c0fc:	f99d 3000 	ldrsb.w	r3, [sp]
   2c100:	466a      	mov	r2, sp
   2c102:	2b00      	cmp	r3, #0
    {
        LSHIFT( K, K );
   2c104:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
   2c108:	da43      	bge.n	2c192 <AES_CMAC_Final+0xb2>
        LSHIFT( K, K );
   2c10a:	7813      	ldrb	r3, [r2, #0]
   2c10c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2c110:	3101      	adds	r1, #1
   2c112:	005b      	lsls	r3, r3, #1
   2c114:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
   2c118:	290f      	cmp	r1, #15
   2c11a:	f802 3c01 	strb.w	r3, [r2, #-1]
   2c11e:	d1f4      	bne.n	2c10a <AES_CMAC_Final+0x2a>
   2c120:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c124:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
   2c126:	f083 0387 	eor.w	r3, r3, #135	; 0x87
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
   2c12a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        LSHIFT( K, K );
   2c12e:	b2db      	uxtb	r3, r3
    if( ctx->M_n == 16 )
   2c130:	2a10      	cmp	r2, #16
        K[15] ^= 0x87;
   2c132:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ctx->M_n == 16 )
   2c136:	d13b      	bne.n	2c1b0 <AES_CMAC_Final+0xd0>
   2c138:	4669      	mov	r1, sp
   2c13a:	f504 7380 	add.w	r3, r4, #256	; 0x100
   2c13e:	f504 7088 	add.w	r0, r4, #272	; 0x110
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
   2c142:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   2c146:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c14a:	4298      	cmp	r0, r3
   2c14c:	ea82 0206 	eor.w	r2, r2, r6
   2c150:	701a      	strb	r2, [r3, #0]
   2c152:	d1f6      	bne.n	2c142 <AES_CMAC_Final+0x62>
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
   2c154:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2c158:	f504 7180 	add.w	r1, r4, #256	; 0x100
   2c15c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c160:	7c18      	ldrb	r0, [r3, #16]
   2c162:	4299      	cmp	r1, r3
   2c164:	ea82 0200 	eor.w	r2, r2, r0
   2c168:	701a      	strb	r2, [r3, #0]
   2c16a:	d1f7      	bne.n	2c15c <AES_CMAC_Final+0x7c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c16c:	2210      	movs	r2, #16
   2c16e:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
   2c172:	eb0d 0002 	add.w	r0, sp, r2
   2c176:	f7ff fcfc 	bl	2bb72 <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
   2c17a:	4622      	mov	r2, r4
   2c17c:	4629      	mov	r1, r5
   2c17e:	a804      	add	r0, sp, #16
   2c180:	f7e8 fa2a 	bl	145d8 <aes_encrypt>
    memset1( K, 0, sizeof K );
   2c184:	2210      	movs	r2, #16
   2c186:	2100      	movs	r1, #0
   2c188:	4668      	mov	r0, sp
   2c18a:	f7ff fd06 	bl	2bb9a <memset1>
}
   2c18e:	b008      	add	sp, #32
   2c190:	bd70      	pop	{r4, r5, r6, pc}
        LSHIFT( K, K );
   2c192:	7813      	ldrb	r3, [r2, #0]
   2c194:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2c198:	3101      	adds	r1, #1
   2c19a:	005b      	lsls	r3, r3, #1
   2c19c:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
   2c1a0:	290f      	cmp	r1, #15
   2c1a2:	f802 3c01 	strb.w	r3, [r2, #-1]
   2c1a6:	d1f4      	bne.n	2c192 <AES_CMAC_Final+0xb2>
   2c1a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c1ac:	005b      	lsls	r3, r3, #1
   2c1ae:	e7bc      	b.n	2c12a <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
   2c1b0:	f99d 3000 	ldrsb.w	r3, [sp]
   2c1b4:	4669      	mov	r1, sp
   2c1b6:	2b00      	cmp	r3, #0
            LSHIFT( K, K );
   2c1b8:	f04f 0000 	mov.w	r0, #0
        if( K[0] & 0x80 )
   2c1bc:	da39      	bge.n	2c232 <AES_CMAC_Final+0x152>
            LSHIFT( K, K );
   2c1be:	780b      	ldrb	r3, [r1, #0]
   2c1c0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2c1c4:	3001      	adds	r0, #1
   2c1c6:	005b      	lsls	r3, r3, #1
   2c1c8:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   2c1cc:	280f      	cmp	r0, #15
   2c1ce:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c1d2:	d1f4      	bne.n	2c1be <AES_CMAC_Final+0xde>
   2c1d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c1d8:	005b      	lsls	r3, r3, #1
            K[15] ^= 0x87;
   2c1da:	f083 0387 	eor.w	r3, r3, #135	; 0x87
        ctx->M_last[ctx->M_n] = 0x80;
   2c1de:	2180      	movs	r1, #128	; 0x80
            ctx->M_last[ctx->M_n] = 0;
   2c1e0:	2600      	movs	r6, #0
            LSHIFT( K, K );
   2c1e2:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
   2c1e4:	f88d 300f 	strb.w	r3, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
   2c1e8:	18a3      	adds	r3, r4, r2
   2c1ea:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
   2c1ee:	f202 1301 	addw	r3, r2, #257	; 0x101
   2c1f2:	f1c4 21ff 	rsb	r1, r4, #4278255360	; 0xff00ff00
   2c1f6:	4423      	add	r3, r4
   2c1f8:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
   2c1fc:	18c8      	adds	r0, r1, r3
   2c1fe:	280f      	cmp	r0, #15
   2c200:	d926      	bls.n	2c250 <AES_CMAC_Final+0x170>
   2c202:	1c53      	adds	r3, r2, #1
   2c204:	2b10      	cmp	r3, #16
   2c206:	f1c2 020f 	rsb	r2, r2, #15
   2c20a:	bf88      	it	hi
   2c20c:	2200      	movhi	r2, #0
   2c20e:	4669      	mov	r1, sp
   2c210:	441a      	add	r2, r3
   2c212:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   2c216:	f504 7380 	add.w	r3, r4, #256	; 0x100
   2c21a:	f504 7088 	add.w	r0, r4, #272	; 0x110
        XOR( K, ctx->M_last );
   2c21e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   2c222:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c226:	4298      	cmp	r0, r3
   2c228:	ea82 0206 	eor.w	r2, r2, r6
   2c22c:	701a      	strb	r2, [r3, #0]
   2c22e:	d1f6      	bne.n	2c21e <AES_CMAC_Final+0x13e>
   2c230:	e790      	b.n	2c154 <AES_CMAC_Final+0x74>
            LSHIFT( K, K );
   2c232:	780b      	ldrb	r3, [r1, #0]
   2c234:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2c238:	3001      	adds	r0, #1
   2c23a:	005b      	lsls	r3, r3, #1
   2c23c:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   2c240:	280f      	cmp	r0, #15
   2c242:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c246:	d1f4      	bne.n	2c232 <AES_CMAC_Final+0x152>
   2c248:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c24c:	005b      	lsls	r3, r3, #1
   2c24e:	e7c6      	b.n	2c1de <AES_CMAC_Final+0xfe>
            ctx->M_last[ctx->M_n] = 0;
   2c250:	f803 6f01 	strb.w	r6, [r3, #1]!
   2c254:	e7d2      	b.n	2c1fc <AES_CMAC_Final+0x11c>

0002c256 <SecureElementComputeAesCmac>:
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
   2c256:	2b7e      	cmp	r3, #126	; 0x7e
   2c258:	d801      	bhi.n	2c25e <SecureElementComputeAesCmac+0x8>
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
   2c25a:	f7e8 bb23 	b.w	148a4 <ComputeCmac>
}
   2c25e:	2003      	movs	r0, #3
   2c260:	4770      	bx	lr

0002c262 <SecureElementVerifyAesCmac>:
{
   2c262:	b530      	push	{r4, r5, lr}
   2c264:	460d      	mov	r5, r1
   2c266:	4614      	mov	r4, r2
    if( buffer == NULL )
   2c268:	4601      	mov	r1, r0
{
   2c26a:	b085      	sub	sp, #20
    if( buffer == NULL )
   2c26c:	b168      	cbz	r0, 2c28a <SecureElementVerifyAesCmac+0x28>
    uint32_t              compCmac = 0;
   2c26e:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
   2c270:	aa03      	add	r2, sp, #12
   2c272:	9200      	str	r2, [sp, #0]
   2c274:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
   2c276:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
   2c278:	f7e8 fb14 	bl	148a4 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
   2c27c:	b918      	cbnz	r0, 2c286 <SecureElementVerifyAesCmac+0x24>
    if( expectedCmac != compCmac )
   2c27e:	9803      	ldr	r0, [sp, #12]
   2c280:	1b00      	subs	r0, r0, r4
   2c282:	bf18      	it	ne
   2c284:	2001      	movne	r0, #1
}
   2c286:	b005      	add	sp, #20
   2c288:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   2c28a:	2002      	movs	r0, #2
   2c28c:	e7fb      	b.n	2c286 <SecureElementVerifyAesCmac+0x24>

0002c28e <SecureElementSetKey>:
    if( key == NULL )
   2c28e:	b109      	cbz	r1, 2c294 <SecureElementSetKey+0x6>
   2c290:	f7e8 bbe6 	b.w	14a60 <SecureElementSetKey.part.0>
}
   2c294:	2002      	movs	r0, #2
   2c296:	4770      	bx	lr

0002c298 <SecureElementDeriveAndStoreKey>:
{
   2c298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2c29a:	4614      	mov	r4, r2
    if( input == NULL )
   2c29c:	b1a0      	cbz	r0, 2c2c8 <SecureElementDeriveAndStoreKey+0x30>
    uint8_t               key[16] = { 0 };
   2c29e:	2300      	movs	r3, #0
    if( targetKeyID == MC_KE_KEY )
   2c2a0:	2a7f      	cmp	r2, #127	; 0x7f
    uint8_t               key[16] = { 0 };
   2c2a2:	e9cd 3300 	strd	r3, r3, [sp]
   2c2a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( targetKeyID == MC_KE_KEY )
   2c2aa:	d101      	bne.n	2c2b0 <SecureElementDeriveAndStoreKey+0x18>
        if( rootKeyID != MC_ROOT_KEY )
   2c2ac:	2908      	cmp	r1, #8
   2c2ae:	d10d      	bne.n	2c2cc <SecureElementDeriveAndStoreKey+0x34>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
   2c2b0:	460a      	mov	r2, r1
   2c2b2:	466b      	mov	r3, sp
   2c2b4:	2110      	movs	r1, #16
   2c2b6:	f7e8 fb95 	bl	149e4 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
   2c2ba:	b918      	cbnz	r0, 2c2c4 <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
   2c2bc:	4669      	mov	r1, sp
   2c2be:	4620      	mov	r0, r4
   2c2c0:	f7e8 fbce 	bl	14a60 <SecureElementSetKey.part.0>
}
   2c2c4:	b004      	add	sp, #16
   2c2c6:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   2c2c8:	2002      	movs	r0, #2
   2c2ca:	e7fb      	b.n	2c2c4 <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   2c2cc:	2003      	movs	r0, #3
   2c2ce:	e7f9      	b.n	2c2c4 <SecureElementDeriveAndStoreKey+0x2c>

0002c2d0 <SecureElementProcessJoinAccept>:
{
   2c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2d4:	b091      	sub	sp, #68	; 0x44
   2c2d6:	4681      	mov	r9, r0
   2c2d8:	e9dd 641b 	ldrd	r6, r4, [sp, #108]	; 0x6c
   2c2dc:	468a      	mov	sl, r1
   2c2de:	4617      	mov	r7, r2
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
   2c2e0:	4698      	mov	r8, r3
{
   2c2e2:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
   2c2e6:	2b00      	cmp	r3, #0
   2c2e8:	d06c      	beq.n	2c3c4 <SecureElementProcessJoinAccept+0xf4>
   2c2ea:	2e00      	cmp	r6, #0
   2c2ec:	d06a      	beq.n	2c3c4 <SecureElementProcessJoinAccept+0xf4>
   2c2ee:	2c00      	cmp	r4, #0
   2c2f0:	d068      	beq.n	2c3c4 <SecureElementProcessJoinAccept+0xf4>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
   2c2f2:	2d21      	cmp	r5, #33	; 0x21
   2c2f4:	d868      	bhi.n	2c3c8 <SecureElementProcessJoinAccept+0xf8>
        encKeyID = J_S_ENC_KEY;
   2c2f6:	28ff      	cmp	r0, #255	; 0xff
   2c2f8:	bf0c      	ite	eq
   2c2fa:	f04f 0b01 	moveq.w	fp, #1
   2c2fe:	f04f 0b03 	movne.w	fp, #3
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
   2c302:	4619      	mov	r1, r3
   2c304:	462a      	mov	r2, r5
   2c306:	4630      	mov	r0, r6
   2c308:	f7ff fc33 	bl	2bb72 <memcpy1>
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
   2c30c:	1e69      	subs	r1, r5, #1
   2c30e:	465a      	mov	r2, fp
   2c310:	1c73      	adds	r3, r6, #1
   2c312:	b289      	uxth	r1, r1
   2c314:	f108 0001 	add.w	r0, r8, #1
   2c318:	f7e8 fb64 	bl	149e4 <SecureElementAesEncrypt>
   2c31c:	4683      	mov	fp, r0
   2c31e:	2800      	cmp	r0, #0
   2c320:	d154      	bne.n	2c3cc <SecureElementProcessJoinAccept+0xfc>
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
   2c322:	f896 800b 	ldrb.w	r8, [r6, #11]
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
   2c326:	1973      	adds	r3, r6, r5
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
   2c328:	ea4f 18d8 	mov.w	r8, r8, lsr #7
   2c32c:	f884 8000 	strb.w	r8, [r4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c330:	f813 4c02 	ldrb.w	r4, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
   2c334:	f813 1c03 	ldrb.w	r1, [r3, #-3]
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
   2c338:	f813 2c04 	ldrb.w	r2, [r3, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c33c:	0424      	lsls	r4, r4, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
   2c33e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c342:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
   2c346:	4314      	orrs	r4, r2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
   2c348:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    if( *versionMinor == 0 )
   2c34c:	f1b8 0f00 	cmp.w	r8, #0
   2c350:	d10c      	bne.n	2c36c <SecureElementProcessJoinAccept+0x9c>
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
   2c352:	1f29      	subs	r1, r5, #4
   2c354:	2301      	movs	r3, #1
   2c356:	4622      	mov	r2, r4
   2c358:	4630      	mov	r0, r6
   2c35a:	b289      	uxth	r1, r1
   2c35c:	f7ff ff81 	bl	2c262 <SecureElementVerifyAesCmac>
   2c360:	3800      	subs	r0, #0
   2c362:	bf18      	it	ne
   2c364:	2001      	movne	r0, #1
}
   2c366:	b011      	add	sp, #68	; 0x44
   2c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c36c:	e9cd 0001 	strd	r0, r0, [sp, #4]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c370:	2208      	movs	r2, #8
   2c372:	4651      	mov	r1, sl
        uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c374:	9003      	str	r0, [sp, #12]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c376:	f10d 0005 	add.w	r0, sp, #5
        micHeader11[bufItr++] = ( uint8_t ) joinReqType;
   2c37a:	f88d 9004 	strb.w	r9, [sp, #4]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c37e:	f7ff fc02 	bl	2bb86 <memcpyr>
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c382:	2229      	movs	r2, #41	; 0x29
   2c384:	4659      	mov	r1, fp
        micHeader11[bufItr++] = devNonce & 0xFF;
   2c386:	f88d 700d 	strb.w	r7, [sp, #13]
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c38a:	a805      	add	r0, sp, #20
        micHeader11[bufItr++] = ( devNonce >> 8 ) & 0xFF;
   2c38c:	0a3f      	lsrs	r7, r7, #8
   2c38e:	f88d 700e 	strb.w	r7, [sp, #14]
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c392:	f8cd b010 	str.w	fp, [sp, #16]
   2c396:	f005 fa84 	bl	318a2 <memset>
        memcpy1( localBuffer, micHeader11, JOIN_ACCEPT_MIC_COMPUTATION_OFFSET );
   2c39a:	220c      	movs	r2, #12
   2c39c:	a901      	add	r1, sp, #4
   2c39e:	a804      	add	r0, sp, #16
   2c3a0:	f7ff fbe7 	bl	2bb72 <memcpy1>
        memcpy1( localBuffer + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET - 1, decJoinAccept, encJoinAcceptSize );
   2c3a4:	462a      	mov	r2, r5
   2c3a6:	4631      	mov	r1, r6
   2c3a8:	f10d 001b 	add.w	r0, sp, #27
   2c3ac:	f7ff fbe1 	bl	2bb72 <memcpy1>
        if( SecureElementVerifyAesCmac( localBuffer,
   2c3b0:	2302      	movs	r3, #2
   2c3b2:	4622      	mov	r2, r4
   2c3b4:	1de9      	adds	r1, r5, #7
   2c3b6:	a804      	add	r0, sp, #16
   2c3b8:	f7ff ff53 	bl	2c262 <SecureElementVerifyAesCmac>
            return SECURE_ELEMENT_FAIL_CMAC;
   2c3bc:	2800      	cmp	r0, #0
   2c3be:	bf18      	it	ne
   2c3c0:	4640      	movne	r0, r8
   2c3c2:	e7d0      	b.n	2c366 <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_ERROR_NPE;
   2c3c4:	2002      	movs	r0, #2
   2c3c6:	e7ce      	b.n	2c366 <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   2c3c8:	2005      	movs	r0, #5
   2c3ca:	e7cc      	b.n	2c366 <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
   2c3cc:	2007      	movs	r0, #7
   2c3ce:	e7ca      	b.n	2c366 <SecureElementProcessJoinAccept+0x96>

0002c3d0 <SoftSeHalGetUniqueId>:

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
    BoardGetUniqueId( id );
   2c3d0:	f7ff bb1f 	b.w	2ba12 <BoardGetUniqueId>

0002c3d4 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
   2c3d4:	b1d8      	cbz	r0, 2c40e <DetermineFrameType+0x3a>
   2c3d6:	b1d1      	cbz	r1, 2c40e <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
   2c3d8:	7b03      	ldrb	r3, [r0, #12]
   2c3da:	071b      	lsls	r3, r3, #28
   2c3dc:	d007      	beq.n	2c3ee <DetermineFrameType+0x1a>
   2c3de:	f890 3020 	ldrb.w	r3, [r0, #32]
   2c3e2:	b983      	cbnz	r3, 2c406 <DetermineFrameType+0x32>
    else if( macMsg->FRMPayloadSize == 0 )
   2c3e4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2c3e8:	b17b      	cbz	r3, 2c40a <DetermineFrameType+0x36>
        return LORAMAC_STATUS_ERROR;
   2c3ea:	2017      	movs	r0, #23
   2c3ec:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
   2c3ee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2c3f2:	b153      	cbz	r3, 2c40a <DetermineFrameType+0x36>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
   2c3f4:	f890 3020 	ldrb.w	r3, [r0, #32]
   2c3f8:	2b00      	cmp	r3, #0
   2c3fa:	bf14      	ite	ne
   2c3fc:	2303      	movne	r3, #3
   2c3fe:	2302      	moveq	r3, #2
    return LORAMAC_STATUS_OK;
   2c400:	2000      	movs	r0, #0
        *fType = FRAME_TYPE_C;
   2c402:	700b      	strb	r3, [r1, #0]
   2c404:	4770      	bx	lr
   2c406:	2300      	movs	r3, #0
   2c408:	e7fa      	b.n	2c400 <DetermineFrameType+0x2c>
    else if( macMsg->FRMPayloadSize == 0 )
   2c40a:	2301      	movs	r3, #1
   2c40c:	e7f8      	b.n	2c400 <DetermineFrameType+0x2c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   2c40e:	2003      	movs	r0, #3
}
   2c410:	4770      	bx	lr

0002c412 <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
   2c412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c416:	b08b      	sub	sp, #44	; 0x2c
   2c418:	468a      	mov	sl, r1
   2c41a:	9300      	str	r3, [sp, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
   2c41c:	6841      	ldr	r1, [r0, #4]
   2c41e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    int8_t datarate = adrNext->Datarate;
   2c420:	f990 800c 	ldrsb.w	r8, [r0, #12]
    int8_t txPower = adrNext->TxPower;
   2c424:	f990 600d 	ldrsb.w	r6, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
   2c428:	f890 b00e 	ldrb.w	fp, [r0, #14]
    *adrAckCounter = adrNext->AdrAckCounter;
   2c42c:	6019      	str	r1, [r3, #0]

    if( adrNext->AdrEnabled == true )
   2c42e:	7847      	ldrb	r7, [r0, #1]
{
   2c430:	4604      	mov	r4, r0
   2c432:	4691      	mov	r9, r2
    if( adrNext->AdrEnabled == true )
   2c434:	2f00      	cmp	r7, #0
   2c436:	d058      	beq.n	2c4ea <LoRaMacAdrCalcNext+0xd8>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
   2c438:	2302      	movs	r3, #2
   2c43a:	f88d 3010 	strb.w	r3, [sp, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c43e:	7bc3      	ldrb	r3, [r0, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c440:	a904      	add	r1, sp, #16
   2c442:	7c00      	ldrb	r0, [r0, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c444:	f88d 3012 	strb.w	r3, [sp, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c448:	f000 fb77 	bl	2cb3a <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
        datarate = MAX( datarate, minTxDatarate );

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c44c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
        minTxDatarate = phyParam.Value;
   2c450:	b243      	sxtb	r3, r0
        {
            adrAckReq = true;
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c452:	8961      	ldrh	r1, [r4, #10]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c454:	6860      	ldr	r0, [r4, #4]
        datarate = MAX( datarate, minTxDatarate );
   2c456:	4598      	cmp	r8, r3
   2c458:	4645      	mov	r5, r8
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c45a:	4461      	add	r1, ip
        datarate = MAX( datarate, minTxDatarate );
   2c45c:	bfb8      	it	lt
   2c45e:	461d      	movlt	r5, r3
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c460:	4560      	cmp	r0, ip
   2c462:	bf34      	ite	cc
   2c464:	2700      	movcc	r7, #0
   2c466:	2701      	movcs	r7, #1
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c468:	4288      	cmp	r0, r1
   2c46a:	d309      	bcc.n	2c480 <LoRaMacAdrCalcNext+0x6e>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
   2c46c:	210a      	movs	r1, #10
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c46e:	7c20      	ldrb	r0, [r4, #16]
            getPhy.Attribute = PHY_DEF_TX_POWER;
   2c470:	f88d 1010 	strb.w	r1, [sp, #16]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c474:	a904      	add	r1, sp, #16
   2c476:	9301      	str	r3, [sp, #4]
   2c478:	f000 fb5f 	bl	2cb3a <RegionGetPhyParam>
            txPower = phyParam.Value;
   2c47c:	9b01      	ldr	r3, [sp, #4]
   2c47e:	b246      	sxtb	r6, r0
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
   2c480:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   2c484:	8960      	ldrh	r0, [r4, #10]
   2c486:	6861      	ldr	r1, [r4, #4]
   2c488:	eb0c 0e40 	add.w	lr, ip, r0, lsl #1
   2c48c:	4571      	cmp	r1, lr
   2c48e:	d319      	bcc.n	2c4c4 <LoRaMacAdrCalcNext+0xb2>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
   2c490:	eba1 010c 	sub.w	r1, r1, ip
   2c494:	fbb1 fcf0 	udiv	ip, r1, r0
   2c498:	fb00 111c 	mls	r1, r0, ip, r1
   2c49c:	b991      	cbnz	r1, 2c4c4 <LoRaMacAdrCalcNext+0xb2>
            {
                if( datarate == minTxDatarate )
   2c49e:	4598      	cmp	r8, r3
   2c4a0:	dc03      	bgt.n	2c4aa <LoRaMacAdrCalcNext+0x98>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
   2c4a2:	7823      	ldrb	r3, [r4, #0]
   2c4a4:	b9cb      	cbnz	r3, 2c4da <LoRaMacAdrCalcNext+0xc8>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
                        RegionInitDefaults( adrNext->Region, &params );
                    }

                    // Restore NbTrans
                    nbTrans = 1;
   2c4a6:	f04f 0b01 	mov.w	fp, #1
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
   2c4aa:	2320      	movs	r3, #32
   2c4ac:	f88d 3010 	strb.w	r3, [sp, #16]
                getPhy.Datarate = datarate;
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c4b0:	7be3      	ldrb	r3, [r4, #15]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c4b2:	7c20      	ldrb	r0, [r4, #16]
   2c4b4:	a904      	add	r1, sp, #16
                getPhy.Datarate = datarate;
   2c4b6:	f88d 5011 	strb.w	r5, [sp, #17]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c4ba:	f88d 3012 	strb.w	r3, [sp, #18]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c4be:	f000 fb3c 	bl	2cb3a <RegionGetPhyParam>
                datarate = phyParam.Value;
   2c4c2:	b245      	sxtb	r5, r0

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
    return adrAckReq;
}
   2c4c4:	4638      	mov	r0, r7
    *nbTransOut = nbTrans;
   2c4c6:	9b00      	ldr	r3, [sp, #0]
    *drOut = datarate;
   2c4c8:	f88a 5000 	strb.w	r5, [sl]
    *txPowOut = txPower;
   2c4cc:	f889 6000 	strb.w	r6, [r9]
    *nbTransOut = nbTrans;
   2c4d0:	f883 b000 	strb.w	fp, [r3]
}
   2c4d4:	b00b      	add	sp, #44	; 0x2c
   2c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   2c4da:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
   2c4dc:	7c20      	ldrb	r0, [r4, #16]
   2c4de:	a906      	add	r1, sp, #24
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   2c4e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        RegionInitDefaults( adrNext->Region, &params );
   2c4e4:	f000 fb39 	bl	2cb5a <RegionInitDefaults>
   2c4e8:	e7dd      	b.n	2c4a6 <LoRaMacAdrCalcNext+0x94>
    int8_t datarate = adrNext->Datarate;
   2c4ea:	4645      	mov	r5, r8
   2c4ec:	e7ea      	b.n	2c4c4 <LoRaMacAdrCalcNext+0xb2>

0002c4ee <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
   2c4ee:	4770      	bx	lr

0002c4f0 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c4f0:	4770      	bx	lr

0002c4f2 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
   2c4f2:	4770      	bx	lr

0002c4f4 <LoRaMacClassBSetMulticastSlotState>:
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
   2c4f4:	4770      	bx	lr

0002c4f6 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c4f6:	2000      	movs	r0, #0
   2c4f8:	4770      	bx	lr

0002c4fa <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c4fa:	4770      	bx	lr

0002c4fc <LoRaMacClassBPingSlotTimerEvent>:
        TimerStart( &Ctx.BeaconTimer );
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
   2c4fc:	4770      	bx	lr

0002c4fe <LoRaMacClassBMulticastSlotTimerEvent>:
        }
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
   2c4fe:	4770      	bx	lr

0002c500 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c500:	2000      	movs	r0, #0
   2c502:	4770      	bx	lr

0002c504 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
   2c504:	2000      	movs	r0, #0
   2c506:	4770      	bx	lr

0002c508 <LoRaMacClassBIsPingExpected>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsPingExpected( void )
   2c508:	2000      	movs	r0, #0
   2c50a:	4770      	bx	lr

0002c50c <LoRaMacClassBIsMulticastExpected>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsMulticastExpected( void )
   2c50c:	2000      	movs	r0, #0
   2c50e:	4770      	bx	lr

0002c510 <LoRaMacClassBIsBeaconModeActive>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
   2c510:	2000      	movs	r0, #0
   2c512:	4770      	bx	lr

0002c514 <LoRaMacClassBSetPingSlotInfo>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
   2c514:	4770      	bx	lr

0002c516 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c516:	4770      	bx	lr

0002c518 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
   2c518:	4770      	bx	lr

0002c51a <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c51a:	2002      	movs	r0, #2
   2c51c:	4770      	bx	lr

0002c51e <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c51e:	2002      	movs	r0, #2
   2c520:	4770      	bx	lr

0002c522 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
   2c522:	2002      	movs	r0, #2
   2c524:	4770      	bx	lr

0002c526 <LoRaMacClassBPingSlotInfoAns>:
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBPingSlotInfoAns( void )
   2c526:	4770      	bx	lr

0002c528 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c528:	2000      	movs	r0, #0
   2c52a:	4770      	bx	lr

0002c52c <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c52c:	4770      	bx	lr

0002c52e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
   2c52e:	4770      	bx	lr

0002c530 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c530:	2000      	movs	r0, #0
   2c532:	4770      	bx	lr

0002c534 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c534:	2000      	movs	r0, #0
   2c536:	4770      	bx	lr

0002c538 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
   2c538:	4770      	bx	lr

0002c53a <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
   2c53a:	4770      	bx	lr

0002c53c <LoRaMacClassBProcess>:

void LoRaMacClassBProcess( void )
   2c53c:	4770      	bx	lr

0002c53e <DeriveSessionKey11x>:
{
   2c53e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c540:	460c      	mov	r4, r1
   2c542:	4605      	mov	r5, r0
   2c544:	461f      	mov	r7, r3
    if( joinEUI == 0 )
   2c546:	4611      	mov	r1, r2
{
   2c548:	b085      	sub	sp, #20
    if( joinEUI == 0 )
   2c54a:	b362      	cbz	r2, 2c5a6 <DeriveSessionKey11x+0x68>
    switch( keyID )
   2c54c:	2806      	cmp	r0, #6
   2c54e:	d006      	beq.n	2c55e <DeriveSessionKey11x+0x20>
   2c550:	2807      	cmp	r0, #7
   2c552:	d006      	beq.n	2c562 <DeriveSessionKey11x+0x24>
   2c554:	2805      	cmp	r0, #5
   2c556:	d024      	beq.n	2c5a2 <DeriveSessionKey11x+0x64>
   2c558:	2001      	movs	r0, #1
    KeyIdentifier_t rootKeyId = NWK_KEY;
   2c55a:	2601      	movs	r6, #1
   2c55c:	e003      	b.n	2c566 <DeriveSessionKey11x+0x28>
    switch( keyID )
   2c55e:	2004      	movs	r0, #4
   2c560:	e7fb      	b.n	2c55a <DeriveSessionKey11x+0x1c>
   2c562:	2002      	movs	r0, #2
            rootKeyId = APP_KEY;
   2c564:	2600      	movs	r6, #0
    uint8_t compBase[16] = { 0 };
   2c566:	2300      	movs	r3, #0
    memcpyr( compBase + 4, joinEUI, 8 );
   2c568:	2208      	movs	r2, #8
    uint8_t compBase[16] = { 0 };
   2c56a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2c56e:	9303      	str	r3, [sp, #12]
            compBase[0] = 0x03;
   2c570:	f88d 0000 	strb.w	r0, [sp]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c574:	0a23      	lsrs	r3, r4, #8
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
   2c576:	f88d 4001 	strb.w	r4, [sp, #1]
    memcpyr( compBase + 4, joinEUI, 8 );
   2c57a:	a801      	add	r0, sp, #4
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c57c:	0c24      	lsrs	r4, r4, #16
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c57e:	f88d 3002 	strb.w	r3, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c582:	f88d 4003 	strb.w	r4, [sp, #3]
    memcpyr( compBase + 4, joinEUI, 8 );
   2c586:	f7ff fafe 	bl	2bb86 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c58a:	462a      	mov	r2, r5
   2c58c:	4631      	mov	r1, r6
   2c58e:	4668      	mov	r0, sp
    compBase[12] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
   2c590:	f8ad 700c 	strh.w	r7, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c594:	f7ff fe80 	bl	2c298 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c598:	2800      	cmp	r0, #0
   2c59a:	bf18      	it	ne
   2c59c:	200e      	movne	r0, #14
}
   2c59e:	b005      	add	sp, #20
   2c5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( keyID )
   2c5a2:	2003      	movs	r0, #3
   2c5a4:	e7d9      	b.n	2c55a <DeriveSessionKey11x+0x1c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c5a6:	2009      	movs	r0, #9
   2c5a8:	e7f9      	b.n	2c59e <DeriveSessionKey11x+0x60>

0002c5aa <DeriveSessionKey10x>:
{
   2c5aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t compBase[16] = { 0 };
   2c5ac:	2400      	movs	r4, #0
            compBase[0] = 0x01;
   2c5ae:	2807      	cmp	r0, #7
    uint8_t compBase[16] = { 0 };
   2c5b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
            compBase[0] = 0x01;
   2c5b4:	bf0c      	ite	eq
   2c5b6:	2402      	moveq	r4, #2
   2c5b8:	2401      	movne	r4, #1
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
   2c5ba:	f88d 1001 	strb.w	r1, [sp, #1]
   2c5be:	f88d 4000 	strb.w	r4, [sp]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
   2c5c2:	f8ad 2004 	strh.w	r2, [sp, #4]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c5c6:	0a0c      	lsrs	r4, r1, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
   2c5c8:	0c12      	lsrs	r2, r2, #16
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c5ca:	0c09      	lsrs	r1, r1, #16
   2c5cc:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
   2c5d0:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
   2c5d4:	f88d 3007 	strb.w	r3, [sp, #7]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c5d8:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
   2c5da:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c5dc:	2101      	movs	r1, #1
   2c5de:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c5e0:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
   2c5e4:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c5e8:	f7ff fe56 	bl	2c298 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c5ec:	2800      	cmp	r0, #0
}
   2c5ee:	bf18      	it	ne
   2c5f0:	200e      	movne	r0, #14
   2c5f2:	b004      	add	sp, #16
   2c5f4:	bd10      	pop	{r4, pc}

0002c5f6 <PayloadEncrypt>:
{
   2c5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c5fa:	b088      	sub	sp, #32
   2c5fc:	4690      	mov	r8, r2
   2c5fe:	460d      	mov	r5, r1
    if( buffer == 0 )
   2c600:	4607      	mov	r7, r0
{
   2c602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
   2c604:	2800      	cmp	r0, #0
   2c606:	d047      	beq.n	2c698 <PayloadEncrypt+0xa2>
    uint8_t sBlock[16] = { 0 };
   2c608:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
   2c60a:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
   2c60c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
   2c610:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
   2c614:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    aBlock[6] = address & 0xFF;
   2c618:	f8ad 3016 	strh.w	r3, [sp, #22]
    aBlock[5] = dir;
   2c61c:	f88d 1015 	strb.w	r1, [sp, #21]
    uint8_t sBlock[16] = { 0 };
   2c620:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   2c624:	0c19      	lsrs	r1, r3, #16
    uint8_t sBlock[16] = { 0 };
   2c626:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
   2c62a:	0e1b      	lsrs	r3, r3, #24
   2c62c:	f88d 3019 	strb.w	r3, [sp, #25]
    aBlock[10] = frameCounter & 0xFF;
   2c630:	f8ad 201a 	strh.w	r2, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   2c634:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   2c636:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
   2c638:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   2c63a:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   2c63e:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   2c642:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
   2c646:	b2e3      	uxtb	r3, r4
   2c648:	011e      	lsls	r6, r3, #4
   2c64a:	2d00      	cmp	r5, #0
   2c64c:	b2f6      	uxtb	r6, r6
   2c64e:	dc03      	bgt.n	2c658 <PayloadEncrypt+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
   2c650:	2000      	movs	r0, #0
}
   2c652:	b008      	add	sp, #32
   2c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
   2c658:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
   2c65a:	3301      	adds	r3, #1
   2c65c:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
   2c660:	4642      	mov	r2, r8
   2c662:	466b      	mov	r3, sp
   2c664:	eb0d 0001 	add.w	r0, sp, r1
   2c668:	f7e8 f9bc 	bl	149e4 <SecureElementAesEncrypt>
   2c66c:	4603      	mov	r3, r0
   2c66e:	b9a8      	cbnz	r0, 2c69c <PayloadEncrypt+0xa6>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c670:	2d10      	cmp	r5, #16
   2c672:	4628      	mov	r0, r5
   2c674:	4669      	mov	r1, sp
   2c676:	bfa8      	it	ge
   2c678:	2010      	movge	r0, #16
   2c67a:	443e      	add	r6, r7
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c67c:	7832      	ldrb	r2, [r6, #0]
   2c67e:	f811 cb01 	ldrb.w	ip, [r1], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c682:	3301      	adds	r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c684:	ea82 020c 	eor.w	r2, r2, ip
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c688:	4298      	cmp	r0, r3
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c68a:	f806 2b01 	strb.w	r2, [r6], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c68e:	dcf5      	bgt.n	2c67c <PayloadEncrypt+0x86>
        size -= 16;
   2c690:	3d10      	subs	r5, #16
   2c692:	b22d      	sxth	r5, r5
        bufferIndex += 16;
   2c694:	3401      	adds	r4, #1
   2c696:	e7d6      	b.n	2c646 <PayloadEncrypt+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c698:	2009      	movs	r0, #9
   2c69a:	e7da      	b.n	2c652 <PayloadEncrypt+0x5c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c69c:	200e      	movs	r0, #14
   2c69e:	e7d8      	b.n	2c652 <PayloadEncrypt+0x5c>

0002c6a0 <LoRaMacCryptoDeriveMcKEKey.part.0>:
LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
   2c6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
   2c6a2:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c6a4:	227f      	movs	r2, #127	; 0x7f
   2c6a6:	2108      	movs	r1, #8
   2c6a8:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
   2c6aa:	e9cd 3300 	strd	r3, r3, [sp]
   2c6ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c6b2:	f7ff fdf1 	bl	2c298 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c6b6:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   2c6b8:	bf18      	it	ne
   2c6ba:	200e      	movne	r0, #14
   2c6bc:	b005      	add	sp, #20
   2c6be:	f85d fb04 	ldr.w	pc, [sp], #4

0002c6c2 <ComputeCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
   2c6c2:	b570      	push	{r4, r5, r6, lr}
   2c6c4:	b086      	sub	sp, #24
   2c6c6:	460c      	mov	r4, r1
   2c6c8:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
   2c6cc:	4613      	mov	r3, r2
    if( ( msg == 0 ) || ( cmac == 0 ) )
   2c6ce:	4601      	mov	r1, r0
   2c6d0:	b330      	cbz	r0, 2c720 <ComputeCmacB0.constprop.0+0x5e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   2c6d2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   2c6d6:	d825      	bhi.n	2c724 <ComputeCmacB0.constprop.0+0x62>
    b0[0] = 0x49;
   2c6d8:	2249      	movs	r2, #73	; 0x49
   2c6da:	9202      	str	r2, [sp, #8]
    b0[4] = 0x00;
   2c6dc:	2200      	movs	r2, #0
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   2c6de:	0c30      	lsrs	r0, r6, #16
    b0[4] = 0x00;
   2c6e0:	f8ad 200c 	strh.w	r2, [sp, #12]
    b0[14] = 0x00;
   2c6e4:	f88d 2016 	strb.w	r2, [sp, #22]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   2c6ea:	f88d 0010 	strb.w	r0, [sp, #16]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   2c6ee:	0c28      	lsrs	r0, r5, #16
    b0[6] = devAddr & 0xFF;
   2c6f0:	f8ad 600e 	strh.w	r6, [sp, #14]
    b0[10] = fCnt & 0xFF;
   2c6f4:	f8ad 5012 	strh.w	r5, [sp, #18]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   2c6f8:	f88d 0014 	strb.w	r0, [sp, #20]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c6fc:	9200      	str	r2, [sp, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   2c6fe:	0e36      	lsrs	r6, r6, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c700:	4622      	mov	r2, r4
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   2c702:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c704:	a802      	add	r0, sp, #8
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   2c706:	f88d 6011 	strb.w	r6, [sp, #17]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   2c70a:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
   2c70e:	f88d 4017 	strb.w	r4, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c712:	f7ff fda0 	bl	2c256 <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c716:	2800      	cmp	r0, #0
   2c718:	bf18      	it	ne
   2c71a:	200e      	movne	r0, #14
}
   2c71c:	b006      	add	sp, #24
   2c71e:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c720:	2009      	movs	r0, #9
   2c722:	e7fb      	b.n	2c71c <ComputeCmacB0.constprop.0+0x5a>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   2c724:	200d      	movs	r0, #13
   2c726:	e7f9      	b.n	2c71c <ComputeCmacB0.constprop.0+0x5a>

0002c728 <LoRaMacCryptoGetFCntDown>:
    uint32_t lastDown = 0;
   2c728:	2300      	movs	r3, #0
{
   2c72a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c72c:	460c      	mov	r4, r1
    if( currentDown == NULL )
   2c72e:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
   2c730:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
   2c732:	b1ca      	cbz	r2, 2c768 <LoRaMacCryptoGetFCntDown+0x40>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
   2c734:	a901      	add	r1, sp, #4
   2c736:	f7eb fc37 	bl	17fa8 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   2c73a:	b918      	cbnz	r0, 2c744 <LoRaMacCryptoGetFCntDown+0x1c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
   2c73c:	9b01      	ldr	r3, [sp, #4]
   2c73e:	1c5a      	adds	r2, r3, #1
   2c740:	d102      	bne.n	2c748 <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
   2c742:	602c      	str	r4, [r5, #0]
}
   2c744:	b003      	add	sp, #12
   2c746:	bd30      	pop	{r4, r5, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
   2c748:	b29a      	uxth	r2, r3
   2c74a:	1aa2      	subs	r2, r4, r2
        if( fCntDiff > 0 )
   2c74c:	2a00      	cmp	r2, #0
   2c74e:	dd01      	ble.n	2c754 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown + fCntDiff;
   2c750:	189c      	adds	r4, r3, r2
   2c752:	e7f6      	b.n	2c742 <LoRaMacCryptoGetFCntDown+0x1a>
        else if( fCntDiff == 0 )
   2c754:	d102      	bne.n	2c75c <LoRaMacCryptoGetFCntDown+0x34>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
   2c756:	2007      	movs	r0, #7
            *currentDown = lastDown;
   2c758:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
   2c75a:	e7f3      	b.n	2c744 <LoRaMacCryptoGetFCntDown+0x1c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
   2c75c:	0c1b      	lsrs	r3, r3, #16
   2c75e:	041b      	lsls	r3, r3, #16
   2c760:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2c764:	441c      	add	r4, r3
   2c766:	e7ec      	b.n	2c742 <LoRaMacCryptoGetFCntDown+0x1a>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c768:	2009      	movs	r0, #9
   2c76a:	e7eb      	b.n	2c744 <LoRaMacCryptoGetFCntDown+0x1c>

0002c76c <LoRaMacCryptoDeriveMcRootKey>:
{
   2c76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
   2c76e:	b9b1      	cbnz	r1, 2c79e <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
   2c770:	2801      	cmp	r0, #1
        compBase[0] = 0x20;
   2c772:	bf08      	it	eq
   2c774:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
   2c776:	e9cd 1100 	strd	r1, r1, [sp]
   2c77a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c77e:	f04f 0208 	mov.w	r2, #8
   2c782:	f04f 0100 	mov.w	r1, #0
   2c786:	4668      	mov	r0, sp
        compBase[0] = 0x20;
   2c788:	bf08      	it	eq
   2c78a:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c78e:	f7ff fd83 	bl	2c298 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c792:	2800      	cmp	r0, #0
   2c794:	bf18      	it	ne
   2c796:	200e      	movne	r0, #14
}
   2c798:	b005      	add	sp, #20
   2c79a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
   2c79e:	200a      	movs	r0, #10
   2c7a0:	e7fa      	b.n	2c798 <LoRaMacCryptoDeriveMcRootKey+0x2c>

0002c7a2 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
   2c7a2:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c7a4:	4604      	mov	r4, r0
   2c7a6:	2800      	cmp	r0, #0
   2c7a8:	d045      	beq.n	2c836 <LoRaMacParserJoinAccept+0x94>
   2c7aa:	6801      	ldr	r1, [r0, #0]
   2c7ac:	2900      	cmp	r1, #0
   2c7ae:	d042      	beq.n	2c836 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c7b0:	f811 3b01 	ldrb.w	r3, [r1], #1

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
   2c7b4:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c7b6:	7143      	strb	r3, [r0, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
   2c7b8:	3006      	adds	r0, #6
   2c7ba:	f7ff f9da 	bl	2bb72 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
   2c7be:	4620      	mov	r0, r4
   2c7c0:	f850 1b09 	ldr.w	r1, [r0], #9
   2c7c4:	2203      	movs	r2, #3
   2c7c6:	3104      	adds	r1, #4
   2c7c8:	f7ff f9d3 	bl	2bb72 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c7cc:	6821      	ldr	r1, [r4, #0]
   2c7ce:	79cb      	ldrb	r3, [r1, #7]
   2c7d0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c7d2:	7a0a      	ldrb	r2, [r1, #8]
   2c7d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2c7d8:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c7da:	7a4a      	ldrb	r2, [r1, #9]
   2c7dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c7e0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c7e2:	7a8a      	ldrb	r2, [r1, #10]
   2c7e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c7e8:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
   2c7ea:	7acb      	ldrb	r3, [r1, #11]
   2c7ec:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
   2c7ee:	7b0b      	ldrb	r3, [r1, #12]
   2c7f0:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
   2c7f2:	7923      	ldrb	r3, [r4, #4]
   2c7f4:	2b21      	cmp	r3, #33	; 0x21
   2c7f6:	d11a      	bne.n	2c82e <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
   2c7f8:	2210      	movs	r2, #16
   2c7fa:	310d      	adds	r1, #13
   2c7fc:	f104 0012 	add.w	r0, r4, #18
   2c800:	f7ff f9b7 	bl	2bb72 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
   2c804:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c806:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c808:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c80a:	5c8b      	ldrb	r3, [r1, r2]
   2c80c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c80e:	5c08      	ldrb	r0, [r1, r0]
   2c810:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2c814:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c816:	1c90      	adds	r0, r2, #2
   2c818:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c81a:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c81c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

    return LORAMAC_PARSER_SUCCESS;
   2c820:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c822:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c824:	5c8a      	ldrb	r2, [r1, r2]
   2c826:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c82a:	6263      	str	r3, [r4, #36]	; 0x24
}
   2c82c:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
   2c82e:	2b11      	cmp	r3, #17
   2c830:	dc03      	bgt.n	2c83a <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
   2c832:	220d      	movs	r2, #13
   2c834:	e7e7      	b.n	2c806 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
   2c836:	2002      	movs	r0, #2
   2c838:	e7f8      	b.n	2c82c <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
   2c83a:	2001      	movs	r0, #1
   2c83c:	e7f6      	b.n	2c82c <LoRaMacParserJoinAccept+0x8a>

0002c83e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
   2c83e:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c840:	4604      	mov	r4, r0
   2c842:	2800      	cmp	r0, #0
   2c844:	d063      	beq.n	2c90e <LoRaMacParserData+0xd0>
   2c846:	6801      	ldr	r1, [r0, #0]
   2c848:	2900      	cmp	r1, #0
   2c84a:	d060      	beq.n	2c90e <LoRaMacParserData+0xd0>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c84c:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c84e:	3010      	adds	r0, #16
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c850:	f800 3c0b 	strb.w	r3, [r0, #-11]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
   2c854:	784b      	ldrb	r3, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c856:	3108      	adds	r1, #8
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
   2c858:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c85c:	f811 2c06 	ldrb.w	r2, [r1, #-6]
   2c860:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2c864:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c868:	f811 2c05 	ldrb.w	r2, [r1, #-5]
   2c86c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c870:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c874:	f811 2c04 	ldrb.w	r2, [r1, #-4]
   2c878:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c87c:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
   2c880:	f811 3c03 	ldrb.w	r3, [r1, #-3]
   2c884:	f800 3c04 	strb.w	r3, [r0, #-4]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
   2c888:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   2c88c:	f820 3c02 	strh.w	r3, [r0, #-2]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
   2c890:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   2c894:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c898:	f810 2c04 	ldrb.w	r2, [r0, #-4]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
   2c89c:	f820 3c02 	strh.w	r3, [r0, #-2]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c8a0:	f002 020f 	and.w	r2, r2, #15
   2c8a4:	f7ff f965 	bl	2bb72 <memcpy1>
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
   2c8a8:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c8aa:	7b23      	ldrb	r3, [r4, #12]
    macMsg->FPort = 0;
   2c8ac:	f884 2020 	strb.w	r2, [r4, #32]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c8b0:	f003 030f 	and.w	r3, r3, #15
    macMsg->FRMPayloadSize = 0;
   2c8b4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
   2c8b8:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c8ba:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
   2c8be:	1a11      	subs	r1, r2, r0
   2c8c0:	2904      	cmp	r1, #4
   2c8c2:	dd0d      	ble.n	2c8e0 <LoRaMacParserData+0xa2>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2c8c4:	6821      	ldr	r1, [r4, #0]
   2c8c6:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2c8c8:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2c8ca:	5c08      	ldrb	r0, [r1, r0]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2c8cc:	1ad2      	subs	r2, r2, r3
   2c8ce:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2c8d0:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2c8d4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
   2c8d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2c8da:	4419      	add	r1, r3
   2c8dc:	f7ff f949 	bl	2bb72 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
   2c8e0:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
   2c8e2:	7923      	ldrb	r3, [r4, #4]
   2c8e4:	6822      	ldr	r2, [r4, #0]
   2c8e6:	441a      	add	r2, r3
   2c8e8:	f812 3c04 	ldrb.w	r3, [r2, #-4]
   2c8ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
   2c8ee:	f812 1c03 	ldrb.w	r1, [r2, #-3]
   2c8f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2c8f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
   2c8f8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
   2c8fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2c900:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
   2c902:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2c906:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c90a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2c90c:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
   2c90e:	2002      	movs	r0, #2
   2c910:	e7fc      	b.n	2c90c <LoRaMacParserData+0xce>

0002c912 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
   2c912:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c914:	4604      	mov	r4, r0
   2c916:	b360      	cbz	r0, 2c972 <LoRaMacSerializerJoinRequest+0x60>
   2c918:	6803      	ldr	r3, [r0, #0]
   2c91a:	b353      	cbz	r3, 2c972 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
   2c91c:	7902      	ldrb	r2, [r0, #4]
   2c91e:	2a16      	cmp	r2, #22
   2c920:	d929      	bls.n	2c976 <LoRaMacSerializerJoinRequest+0x64>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c922:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2c924:	7942      	ldrb	r2, [r0, #5]
   2c926:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c928:	f851 0b06 	ldr.w	r0, [r1], #6
   2c92c:	2208      	movs	r2, #8
   2c92e:	3001      	adds	r0, #1
   2c930:	f7ff f929 	bl	2bb86 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2c934:	4621      	mov	r1, r4
   2c936:	f851 0b0e 	ldr.w	r0, [r1], #14
   2c93a:	2208      	movs	r2, #8
   2c93c:	3009      	adds	r0, #9
   2c93e:	f7ff f922 	bl	2bb86 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
   2c942:	6823      	ldr	r3, [r4, #0]
   2c944:	8ae2      	ldrh	r2, [r4, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2c946:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
   2c948:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
   2c94a:	8ae3      	ldrh	r3, [r4, #22]
   2c94c:	6822      	ldr	r2, [r4, #0]
   2c94e:	0a1b      	lsrs	r3, r3, #8
   2c950:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c952:	6823      	ldr	r3, [r4, #0]
   2c954:	69a2      	ldr	r2, [r4, #24]
   2c956:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c958:	69a3      	ldr	r3, [r4, #24]
   2c95a:	6822      	ldr	r2, [r4, #0]
   2c95c:	0a1b      	lsrs	r3, r3, #8
   2c95e:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c960:	6823      	ldr	r3, [r4, #0]
   2c962:	8b62      	ldrh	r2, [r4, #26]
   2c964:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2c966:	6823      	ldr	r3, [r4, #0]
   2c968:	7ee2      	ldrb	r2, [r4, #27]
   2c96a:	759a      	strb	r2, [r3, #22]
    macMsg->BufSize = bufItr;
   2c96c:	2317      	movs	r3, #23
   2c96e:	7123      	strb	r3, [r4, #4]
}
   2c970:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2c972:	2001      	movs	r0, #1
   2c974:	e7fc      	b.n	2c970 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2c976:	2002      	movs	r0, #2
   2c978:	e7fa      	b.n	2c970 <LoRaMacSerializerJoinRequest+0x5e>

0002c97a <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
   2c97a:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c97c:	4604      	mov	r4, r0
   2c97e:	2800      	cmp	r0, #0
   2c980:	d02f      	beq.n	2c9e2 <LoRaMacSerializerReJoinType1+0x68>
   2c982:	6803      	ldr	r3, [r0, #0]
   2c984:	b36b      	cbz	r3, 2c9e2 <LoRaMacSerializerReJoinType1+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
   2c986:	7902      	ldrb	r2, [r0, #4]
   2c988:	2a17      	cmp	r2, #23
   2c98a:	d92c      	bls.n	2c9e6 <LoRaMacSerializerReJoinType1+0x6c>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c98c:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2c98e:	7942      	ldrb	r2, [r0, #5]
   2c990:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
   2c992:	6803      	ldr	r3, [r0, #0]
   2c994:	7982      	ldrb	r2, [r0, #6]
   2c996:	705a      	strb	r2, [r3, #1]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c998:	f851 0b07 	ldr.w	r0, [r1], #7
   2c99c:	2208      	movs	r2, #8
   2c99e:	3002      	adds	r0, #2
   2c9a0:	f7ff f8f1 	bl	2bb86 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2c9a4:	4621      	mov	r1, r4
   2c9a6:	f851 0b0f 	ldr.w	r0, [r1], #15
   2c9aa:	2208      	movs	r2, #8
   2c9ac:	300a      	adds	r0, #10
   2c9ae:	f7ff f8ea 	bl	2bb86 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
   2c9b2:	6823      	ldr	r3, [r4, #0]
   2c9b4:	8b22      	ldrh	r2, [r4, #24]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2c9b6:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
   2c9b8:	749a      	strb	r2, [r3, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
   2c9ba:	8b23      	ldrh	r3, [r4, #24]
   2c9bc:	6822      	ldr	r2, [r4, #0]
   2c9be:	0a1b      	lsrs	r3, r3, #8
   2c9c0:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c9c2:	6823      	ldr	r3, [r4, #0]
   2c9c4:	69e2      	ldr	r2, [r4, #28]
   2c9c6:	751a      	strb	r2, [r3, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c9c8:	69e3      	ldr	r3, [r4, #28]
   2c9ca:	6822      	ldr	r2, [r4, #0]
   2c9cc:	0a1b      	lsrs	r3, r3, #8
   2c9ce:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c9d0:	6823      	ldr	r3, [r4, #0]
   2c9d2:	8be2      	ldrh	r2, [r4, #30]
   2c9d4:	759a      	strb	r2, [r3, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2c9d6:	6823      	ldr	r3, [r4, #0]
   2c9d8:	7fe2      	ldrb	r2, [r4, #31]
   2c9da:	75da      	strb	r2, [r3, #23]
    macMsg->BufSize = bufItr;
   2c9dc:	2318      	movs	r3, #24
   2c9de:	7123      	strb	r3, [r4, #4]
}
   2c9e0:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2c9e2:	2001      	movs	r0, #1
   2c9e4:	e7fc      	b.n	2c9e0 <LoRaMacSerializerReJoinType1+0x66>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2c9e6:	2002      	movs	r0, #2
   2c9e8:	e7fa      	b.n	2c9e0 <LoRaMacSerializerReJoinType1+0x66>

0002c9ea <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
   2c9ea:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c9ec:	4604      	mov	r4, r0
   2c9ee:	2800      	cmp	r0, #0
   2c9f0:	d02f      	beq.n	2ca52 <LoRaMacSerializerReJoinType0or2+0x68>
   2c9f2:	6803      	ldr	r3, [r0, #0]
   2c9f4:	b36b      	cbz	r3, 2ca52 <LoRaMacSerializerReJoinType0or2+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
   2c9f6:	7902      	ldrb	r2, [r0, #4]
   2c9f8:	2a12      	cmp	r2, #18
   2c9fa:	d92c      	bls.n	2ca56 <LoRaMacSerializerReJoinType0or2+0x6c>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
   2c9fc:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2c9fe:	7942      	ldrb	r2, [r0, #5]
   2ca00:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
   2ca02:	6803      	ldr	r3, [r0, #0]
   2ca04:	7982      	ldrb	r2, [r0, #6]
   2ca06:	705a      	strb	r2, [r3, #1]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
   2ca08:	f851 0b07 	ldr.w	r0, [r1], #7
   2ca0c:	2203      	movs	r2, #3
   2ca0e:	3002      	adds	r0, #2
   2ca10:	f7ff f8af 	bl	2bb72 <memcpy1>
    bufItr += LORAMAC_NET_ID_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2ca14:	4621      	mov	r1, r4
   2ca16:	f851 0b0a 	ldr.w	r0, [r1], #10
   2ca1a:	2208      	movs	r2, #8
   2ca1c:	3005      	adds	r0, #5
   2ca1e:	f7ff f8b2 	bl	2bb86 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
   2ca22:	6823      	ldr	r3, [r4, #0]
   2ca24:	8a62      	ldrh	r2, [r4, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2ca26:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
   2ca28:	735a      	strb	r2, [r3, #13]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
   2ca2a:	8a63      	ldrh	r3, [r4, #18]
   2ca2c:	6822      	ldr	r2, [r4, #0]
   2ca2e:	0a1b      	lsrs	r3, r3, #8
   2ca30:	7393      	strb	r3, [r2, #14]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2ca32:	6823      	ldr	r3, [r4, #0]
   2ca34:	6962      	ldr	r2, [r4, #20]
   2ca36:	73da      	strb	r2, [r3, #15]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2ca38:	6963      	ldr	r3, [r4, #20]
   2ca3a:	6822      	ldr	r2, [r4, #0]
   2ca3c:	0a1b      	lsrs	r3, r3, #8
   2ca3e:	7413      	strb	r3, [r2, #16]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2ca40:	6823      	ldr	r3, [r4, #0]
   2ca42:	8ae2      	ldrh	r2, [r4, #22]
   2ca44:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2ca46:	6823      	ldr	r3, [r4, #0]
   2ca48:	7de2      	ldrb	r2, [r4, #23]
   2ca4a:	749a      	strb	r2, [r3, #18]
    macMsg->BufSize = bufItr;
   2ca4c:	2313      	movs	r3, #19
   2ca4e:	7123      	strb	r3, [r4, #4]
}
   2ca50:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2ca52:	2001      	movs	r0, #1
   2ca54:	e7fc      	b.n	2ca50 <LoRaMacSerializerReJoinType0or2+0x66>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2ca56:	2002      	movs	r0, #2
   2ca58:	e7fa      	b.n	2ca50 <LoRaMacSerializerReJoinType0or2+0x66>

0002ca5a <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
   2ca5a:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2ca5c:	4604      	mov	r4, r0
   2ca5e:	2800      	cmp	r0, #0
   2ca60:	d063      	beq.n	2cb2a <LoRaMacSerializerData+0xd0>
   2ca62:	6801      	ldr	r1, [r0, #0]
   2ca64:	2900      	cmp	r1, #0
   2ca66:	d060      	beq.n	2cb2a <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2ca68:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
   2ca6a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2ca6e:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
   2ca72:	2a00      	cmp	r2, #0
   2ca74:	d157      	bne.n	2cb26 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2ca76:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
   2ca78:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
   2ca7a:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
   2ca7c:	4413      	add	r3, r2
   2ca7e:	4298      	cmp	r0, r3
   2ca80:	d355      	bcc.n	2cb2e <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2ca82:	7963      	ldrb	r3, [r4, #5]
   2ca84:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2ca86:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
   2ca88:	6823      	ldr	r3, [r4, #0]
   2ca8a:	68a2      	ldr	r2, [r4, #8]
   2ca8c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
   2ca8e:	68a3      	ldr	r3, [r4, #8]
   2ca90:	6822      	ldr	r2, [r4, #0]
   2ca92:	0a1b      	lsrs	r3, r3, #8
   2ca94:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
   2ca96:	6823      	ldr	r3, [r4, #0]
   2ca98:	8962      	ldrh	r2, [r4, #10]
   2ca9a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
   2ca9c:	6823      	ldr	r3, [r4, #0]
   2ca9e:	7ae2      	ldrb	r2, [r4, #11]
   2caa0:	711a      	strb	r2, [r3, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
   2caa2:	6823      	ldr	r3, [r4, #0]
   2caa4:	7b22      	ldrb	r2, [r4, #12]
   2caa6:	715a      	strb	r2, [r3, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
   2caa8:	6823      	ldr	r3, [r4, #0]
   2caaa:	89e2      	ldrh	r2, [r4, #14]
   2caac:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
   2caae:	89e3      	ldrh	r3, [r4, #14]
   2cab0:	6822      	ldr	r2, [r4, #0]
   2cab2:	0a1b      	lsrs	r3, r3, #8
   2cab4:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2cab6:	7b22      	ldrb	r2, [r4, #12]
   2cab8:	f851 0b10 	ldr.w	r0, [r1], #16
   2cabc:	f002 020f 	and.w	r2, r2, #15
   2cac0:	3008      	adds	r0, #8
   2cac2:	f7ff f856 	bl	2bb72 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2cac6:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
   2cac8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2cacc:	f003 030f 	and.w	r3, r3, #15
   2cad0:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
   2cad4:	b12a      	cbz	r2, 2cae2 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
   2cad6:	f894 1020 	ldrb.w	r1, [r4, #32]
   2cada:	6822      	ldr	r2, [r4, #0]
   2cadc:	5551      	strb	r1, [r2, r5]
   2cade:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
   2cae2:	6820      	ldr	r0, [r4, #0]
   2cae4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   2cae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2caea:	4428      	add	r0, r5
   2caec:	f7ff f841 	bl	2bb72 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
   2caf0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2caf4:	6822      	ldr	r2, [r4, #0]
   2caf6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
   2caf8:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2cafa:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2cafc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2cafe:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2cb00:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2cb02:	b292      	uxth	r2, r2
   2cb04:	0a09      	lsrs	r1, r1, #8
   2cb06:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cb08:	6821      	ldr	r1, [r4, #0]
   2cb0a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2cb0c:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cb0e:	b292      	uxth	r2, r2
   2cb10:	5488      	strb	r0, [r1, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cb12:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cb16:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cb18:	6821      	ldr	r1, [r4, #0]
   2cb1a:	b292      	uxth	r2, r2
   2cb1c:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2cb1e:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cb20:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
   2cb22:	7123      	strb	r3, [r4, #4]
}
   2cb24:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
   2cb26:	3309      	adds	r3, #9
   2cb28:	e7a6      	b.n	2ca78 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2cb2a:	2001      	movs	r0, #1
   2cb2c:	e7fa      	b.n	2cb24 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2cb2e:	2002      	movs	r0, #2
   2cb30:	e7f8      	b.n	2cb24 <LoRaMacSerializerData+0xca>

0002cb32 <RegionIsActive>:
}
   2cb32:	1f43      	subs	r3, r0, #5
   2cb34:	4258      	negs	r0, r3
   2cb36:	4158      	adcs	r0, r3
   2cb38:	4770      	bx	lr

0002cb3a <RegionGetPhyParam>:
    switch( region )
   2cb3a:	2805      	cmp	r0, #5
{
   2cb3c:	b082      	sub	sp, #8
    switch( region )
   2cb3e:	d103      	bne.n	2cb48 <RegionGetPhyParam+0xe>
        EU868_GET_PHY_PARAM( );
   2cb40:	4608      	mov	r0, r1
}
   2cb42:	b002      	add	sp, #8
        EU868_GET_PHY_PARAM( );
   2cb44:	f7eb bfac 	b.w	18aa0 <RegionEU868GetPhyParam>
}
   2cb48:	2000      	movs	r0, #0
   2cb4a:	b002      	add	sp, #8
   2cb4c:	4770      	bx	lr

0002cb4e <RegionSetBandTxDone>:
    switch( region )
   2cb4e:	2805      	cmp	r0, #5
   2cb50:	d102      	bne.n	2cb58 <RegionSetBandTxDone+0xa>
        EU868_SET_BAND_TX_DONE( );
   2cb52:	4608      	mov	r0, r1
   2cb54:	f7ec b834 	b.w	18bc0 <RegionEU868SetBandTxDone>
}
   2cb58:	4770      	bx	lr

0002cb5a <RegionInitDefaults>:
    switch( region )
   2cb5a:	2805      	cmp	r0, #5
   2cb5c:	d102      	bne.n	2cb64 <RegionInitDefaults+0xa>
        EU868_INIT_DEFAULTS( );
   2cb5e:	4608      	mov	r0, r1
   2cb60:	f7ec b84a 	b.w	18bf8 <RegionEU868InitDefaults>
}
   2cb64:	4770      	bx	lr

0002cb66 <RegionVerify>:
{
   2cb66:	4603      	mov	r3, r0
    switch( region )
   2cb68:	2b05      	cmp	r3, #5
{
   2cb6a:	4608      	mov	r0, r1
   2cb6c:	4611      	mov	r1, r2
    switch( region )
   2cb6e:	d101      	bne.n	2cb74 <RegionVerify+0xe>
        EU868_VERIFY( );
   2cb70:	f000 ba86 	b.w	2d080 <RegionEU868Verify>
}
   2cb74:	2000      	movs	r0, #0
   2cb76:	4770      	bx	lr

0002cb78 <RegionApplyCFList>:
    switch( region )
   2cb78:	2805      	cmp	r0, #5
   2cb7a:	d102      	bne.n	2cb82 <RegionApplyCFList+0xa>
        EU868_APPLY_CF_LIST( );
   2cb7c:	4608      	mov	r0, r1
   2cb7e:	f000 bac6 	b.w	2d10e <RegionEU868ApplyCFList>
}
   2cb82:	4770      	bx	lr

0002cb84 <RegionChanMaskSet>:
    switch( region )
   2cb84:	2805      	cmp	r0, #5
   2cb86:	d102      	bne.n	2cb8e <RegionChanMaskSet+0xa>
        EU868_CHAN_MASK_SET( );
   2cb88:	4608      	mov	r0, r1
   2cb8a:	f7ec b89b 	b.w	18cc4 <RegionEU868ChanMaskSet>
}
   2cb8e:	2000      	movs	r0, #0
   2cb90:	4770      	bx	lr

0002cb92 <RegionComputeRxWindowParameters>:
{
   2cb92:	b410      	push	{r4}
   2cb94:	4604      	mov	r4, r0
    switch( region )
   2cb96:	2c05      	cmp	r4, #5
{
   2cb98:	4608      	mov	r0, r1
   2cb9a:	4611      	mov	r1, r2
   2cb9c:	461a      	mov	r2, r3
   2cb9e:	9b01      	ldr	r3, [sp, #4]
    switch( region )
   2cba0:	d102      	bne.n	2cba8 <RegionComputeRxWindowParameters+0x16>
}
   2cba2:	bc10      	pop	{r4}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
   2cba4:	f7ec b8a8 	b.w	18cf8 <RegionEU868ComputeRxWindowParameters>
}
   2cba8:	bc10      	pop	{r4}
   2cbaa:	4770      	bx	lr

0002cbac <RegionRxConfig>:
{
   2cbac:	4603      	mov	r3, r0
    switch( region )
   2cbae:	2b05      	cmp	r3, #5
{
   2cbb0:	4608      	mov	r0, r1
   2cbb2:	4611      	mov	r1, r2
    switch( region )
   2cbb4:	d101      	bne.n	2cbba <RegionRxConfig+0xe>
        EU868_RX_CONFIG( );
   2cbb6:	f7ec b8d1 	b.w	18d5c <RegionEU868RxConfig>
}
   2cbba:	2000      	movs	r0, #0
   2cbbc:	4770      	bx	lr

0002cbbe <RegionTxConfig>:
{
   2cbbe:	b410      	push	{r4}
   2cbc0:	4604      	mov	r4, r0
    switch( region )
   2cbc2:	2c05      	cmp	r4, #5
{
   2cbc4:	4608      	mov	r0, r1
   2cbc6:	4611      	mov	r1, r2
   2cbc8:	461a      	mov	r2, r3
    switch( region )
   2cbca:	d102      	bne.n	2cbd2 <RegionTxConfig+0x14>
}
   2cbcc:	bc10      	pop	{r4}
        EU868_TX_CONFIG( );
   2cbce:	f7ec b931 	b.w	18e34 <RegionEU868TxConfig>
}
   2cbd2:	2000      	movs	r0, #0
   2cbd4:	bc10      	pop	{r4}
   2cbd6:	4770      	bx	lr

0002cbd8 <RegionLinkAdrReq>:
{
   2cbd8:	b430      	push	{r4, r5}
   2cbda:	4605      	mov	r5, r0
    switch( region )
   2cbdc:	2d05      	cmp	r5, #5
{
   2cbde:	4608      	mov	r0, r1
   2cbe0:	4611      	mov	r1, r2
   2cbe2:	461a      	mov	r2, r3
   2cbe4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
   2cbe8:	d103      	bne.n	2cbf2 <RegionLinkAdrReq+0x1a>
        EU868_LINK_ADR_REQ( );
   2cbea:	9402      	str	r4, [sp, #8]
}
   2cbec:	bc30      	pop	{r4, r5}
        EU868_LINK_ADR_REQ( );
   2cbee:	f7ec b9a5 	b.w	18f3c <RegionEU868LinkAdrReq>
}
   2cbf2:	2000      	movs	r0, #0
   2cbf4:	bc30      	pop	{r4, r5}
   2cbf6:	4770      	bx	lr

0002cbf8 <RegionRxParamSetupReq>:
    switch( region )
   2cbf8:	2805      	cmp	r0, #5
   2cbfa:	d102      	bne.n	2cc02 <RegionRxParamSetupReq+0xa>
        EU868_RX_PARAM_SETUP_REQ( );
   2cbfc:	4608      	mov	r0, r1
   2cbfe:	f000 ba64 	b.w	2d0ca <RegionEU868RxParamSetupReq>
}
   2cc02:	2000      	movs	r0, #0
   2cc04:	4770      	bx	lr

0002cc06 <RegionNewChannelReq>:
    switch( region )
   2cc06:	2805      	cmp	r0, #5
   2cc08:	d102      	bne.n	2cc10 <RegionNewChannelReq+0xa>
        EU868_NEW_CHANNEL_REQ( );
   2cc0a:	4608      	mov	r0, r1
   2cc0c:	f000 bac5 	b.w	2d19a <RegionEU868NewChannelReq>
}
   2cc10:	2000      	movs	r0, #0
   2cc12:	4770      	bx	lr

0002cc14 <RegionTxParamSetupReq>:
    switch( region )
   2cc14:	2805      	cmp	r0, #5
   2cc16:	d102      	bne.n	2cc1e <RegionTxParamSetupReq+0xa>
        EU868_TX_PARAM_SETUP_REQ( );
   2cc18:	4608      	mov	r0, r1
   2cc1a:	f000 ba74 	b.w	2d106 <RegionEU868TxParamSetupReq>
}
   2cc1e:	2000      	movs	r0, #0
   2cc20:	4770      	bx	lr

0002cc22 <RegionDlChannelReq>:
    switch( region )
   2cc22:	2805      	cmp	r0, #5
   2cc24:	d102      	bne.n	2cc2c <RegionDlChannelReq+0xa>
        EU868_DL_CHANNEL_REQ( );
   2cc26:	4608      	mov	r0, r1
   2cc28:	f7ec ba36 	b.w	19098 <RegionEU868DlChannelReq>
}
   2cc2c:	2000      	movs	r0, #0
   2cc2e:	4770      	bx	lr

0002cc30 <RegionAlternateDr>:
{
   2cc30:	4603      	mov	r3, r0
    switch( region )
   2cc32:	2b05      	cmp	r3, #5
{
   2cc34:	4608      	mov	r0, r1
   2cc36:	4611      	mov	r1, r2
    switch( region )
   2cc38:	d101      	bne.n	2cc3e <RegionAlternateDr+0xe>
        EU868_ALTERNATE_DR( );
   2cc3a:	f000 ba67 	b.w	2d10c <RegionEU868AlternateDr>
}
   2cc3e:	2000      	movs	r0, #0
   2cc40:	4770      	bx	lr

0002cc42 <RegionNextChannel>:
{
   2cc42:	b410      	push	{r4}
   2cc44:	4604      	mov	r4, r0
    switch( region )
   2cc46:	2c05      	cmp	r4, #5
{
   2cc48:	4608      	mov	r0, r1
   2cc4a:	4611      	mov	r1, r2
   2cc4c:	461a      	mov	r2, r3
   2cc4e:	9b01      	ldr	r3, [sp, #4]
    switch( region )
   2cc50:	d102      	bne.n	2cc58 <RegionNextChannel+0x16>
}
   2cc52:	bc10      	pop	{r4}
        EU868_NEXT_CHANNEL( );
   2cc54:	f7ec ba4c 	b.w	190f0 <RegionEU868NextChannel>
}
   2cc58:	2009      	movs	r0, #9
   2cc5a:	bc10      	pop	{r4}
   2cc5c:	4770      	bx	lr

0002cc5e <RegionApplyDrOffset>:
{
   2cc5e:	b410      	push	{r4}
   2cc60:	4604      	mov	r4, r0
    switch( region )
   2cc62:	2c05      	cmp	r4, #5
{
   2cc64:	4608      	mov	r0, r1
   2cc66:	4611      	mov	r1, r2
   2cc68:	461a      	mov	r2, r3
    switch( region )
   2cc6a:	d102      	bne.n	2cc72 <RegionApplyDrOffset+0x14>
}
   2cc6c:	bc10      	pop	{r4}
        EU868_APPLY_DR_OFFSET( );
   2cc6e:	f000 bab5 	b.w	2d1dc <RegionEU868ApplyDrOffset>
}
   2cc72:	b2c8      	uxtb	r0, r1
   2cc74:	bc10      	pop	{r4}
   2cc76:	4770      	bx	lr

0002cc78 <RegionCommonChanVerifyDr>:
{
   2cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( value >= min ) && ( value <= max ) )
   2cc7a:	429a      	cmp	r2, r3
{
   2cc7c:	9d06      	ldr	r5, [sp, #24]
    if( ( value >= min ) && ( value <= max ) )
   2cc7e:	db03      	blt.n	2cc88 <RegionCommonChanVerifyDr+0x10>
   2cc80:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   2cc84:	429a      	cmp	r2, r3
   2cc86:	dd20      	ble.n	2ccca <RegionCommonChanVerifyDr+0x52>
        return false;
   2cc88:	2000      	movs	r0, #0
}
   2cc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
   2cc8c:	2600      	movs	r6, #0
   2cc8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2cc92:	f831 c014 	ldrh.w	ip, [r1, r4, lsl #1]
   2cc96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2cc9a:	fa4c f706 	asr.w	r7, ip, r6
   2cc9e:	07ff      	lsls	r7, r7, #31
   2cca0:	d507      	bpl.n	2ccb2 <RegionCommonChanVerifyDr+0x3a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
   2cca2:	7a1f      	ldrb	r7, [r3, #8]
    if( ( value >= min ) && ( value <= max ) )
   2cca4:	f007 0e0f 	and.w	lr, r7, #15
   2cca8:	4596      	cmp	lr, r2
   2ccaa:	dc02      	bgt.n	2ccb2 <RegionCommonChanVerifyDr+0x3a>
   2ccac:	ebb2 1f17 	cmp.w	r2, r7, lsr #4
   2ccb0:	dd0d      	ble.n	2ccce <RegionCommonChanVerifyDr+0x56>
        for( uint8_t j = 0; j < 16; j++ )
   2ccb2:	3601      	adds	r6, #1
   2ccb4:	2e10      	cmp	r6, #16
   2ccb6:	f103 030c 	add.w	r3, r3, #12
   2ccba:	d1ee      	bne.n	2cc9a <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
   2ccbc:	3401      	adds	r4, #1
   2ccbe:	b2e4      	uxtb	r4, r4
   2ccc0:	0123      	lsls	r3, r4, #4
   2ccc2:	b2db      	uxtb	r3, r3
   2ccc4:	4298      	cmp	r0, r3
   2ccc6:	d8e1      	bhi.n	2cc8c <RegionCommonChanVerifyDr+0x14>
   2ccc8:	e7de      	b.n	2cc88 <RegionCommonChanVerifyDr+0x10>
   2ccca:	2400      	movs	r4, #0
   2cccc:	e7f8      	b.n	2ccc0 <RegionCommonChanVerifyDr+0x48>
                    return true;
   2ccce:	2001      	movs	r0, #1
   2ccd0:	e7db      	b.n	2cc8a <RegionCommonChanVerifyDr+0x12>

0002ccd2 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
   2ccd2:	4288      	cmp	r0, r1
   2ccd4:	db04      	blt.n	2cce0 <RegionCommonValueInRange+0xe>
   2ccd6:	4290      	cmp	r0, r2
   2ccd8:	bfcc      	ite	gt
   2ccda:	2000      	movgt	r0, #0
   2ccdc:	2001      	movle	r0, #1
   2ccde:	4770      	bx	lr
    return 0;
   2cce0:	2000      	movs	r0, #0
}
   2cce2:	4770      	bx	lr

0002cce4 <RegionCommonChanDisable>:
{
   2cce4:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
   2cce6:	0914      	lsrs	r4, r2, #4
   2cce8:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
{
   2ccec:	4603      	mov	r3, r0
    uint8_t index = id / 16;
   2ccee:	ea4f 1011 	mov.w	r0, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
   2ccf2:	d30e      	bcc.n	2cd12 <RegionCommonChanDisable+0x2e>
   2ccf4:	4291      	cmp	r1, r2
   2ccf6:	d20c      	bcs.n	2cd12 <RegionCommonChanDisable+0x2e>
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
   2ccf8:	b202      	sxth	r2, r0
   2ccfa:	2001      	movs	r0, #1
   2ccfc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
   2cd00:	f001 010f 	and.w	r1, r1, #15
   2cd04:	fa00 f101 	lsl.w	r1, r0, r1
   2cd08:	ea24 0101 	bic.w	r1, r4, r1
   2cd0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
   2cd10:	bd10      	pop	{r4, pc}
        return false;
   2cd12:	2000      	movs	r0, #0
   2cd14:	e7fc      	b.n	2cd10 <RegionCommonChanDisable+0x2c>

0002cd16 <RegionCommonCountChannels>:
{
   2cd16:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( channelsMask == NULL )
   2cd18:	b128      	cbz	r0, 2cd26 <RegionCommonCountChannels+0x10>
   2cd1a:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
   2cd1e:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
   2cd20:	2000      	movs	r0, #0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cd22:	4291      	cmp	r1, r2
   2cd24:	d300      	bcc.n	2cd28 <RegionCommonCountChannels+0x12>
}
   2cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cd28:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
   2cd2a:	4623      	mov	r3, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cd2c:	f835 cb02 	ldrh.w	ip, [r5], #2
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
   2cd30:	fa07 f604 	lsl.w	r6, r7, r4
   2cd34:	ea36 060c 	bics.w	r6, r6, ip
            nbActiveBits++;
   2cd38:	bf08      	it	eq
   2cd3a:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
   2cd3c:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
   2cd40:	bf08      	it	eq
   2cd42:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
   2cd44:	2c10      	cmp	r4, #16
   2cd46:	d1f3      	bne.n	2cd30 <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cd48:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cd4a:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cd4c:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cd4e:	b2c9      	uxtb	r1, r1
   2cd50:	e7e7      	b.n	2cd22 <RegionCommonCountChannels+0xc>

0002cd52 <RegionCommonChanMaskCopy>:
{
   2cd52:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
   2cd54:	b100      	cbz	r0, 2cd58 <RegionCommonChanMaskCopy+0x6>
   2cd56:	b949      	cbnz	r1, 2cd6c <RegionCommonChanMaskCopy+0x1a>
}
   2cd58:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
   2cd5a:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
   2cd5e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
   2cd62:	3301      	adds	r3, #1
   2cd64:	b2dc      	uxtb	r4, r3
   2cd66:	42a2      	cmp	r2, r4
   2cd68:	d8f7      	bhi.n	2cd5a <RegionCommonChanMaskCopy+0x8>
   2cd6a:	e7f5      	b.n	2cd58 <RegionCommonChanMaskCopy+0x6>
   2cd6c:	2300      	movs	r3, #0
   2cd6e:	e7f9      	b.n	2cd64 <RegionCommonChanMaskCopy+0x12>

0002cd70 <RegionCommonSetBandTxDone>:
{
   2cd70:	b082      	sub	sp, #8
   2cd72:	b530      	push	{r4, r5, lr}
   2cd74:	8804      	ldrh	r4, [r0, #0]
   2cd76:	9304      	str	r3, [sp, #16]
    if( joined == false )
   2cd78:	b9d2      	cbnz	r2, 2cdb0 <RegionCommonSetBandTxDone+0x40>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
   2cd7a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
   2cd7e:	d315      	bcc.n	2cdac <RegionCommonSetBandTxDone+0x3c>
            joinDutyCycle = BACKOFF_DC_10_HOURS;
   2cd80:	f649 25af 	movw	r5, #39599	; 0x9aaf
   2cd84:	f242 7210 	movw	r2, #10000	; 0x2710
   2cd88:	42ab      	cmp	r3, r5
   2cd8a:	bf98      	it	ls
   2cd8c:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   2cd90:	4294      	cmp	r4, r2
   2cd92:	bf38      	it	cc
   2cd94:	4614      	movcc	r4, r2
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cd96:	4361      	muls	r1, r4
}
   2cd98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cd9c:	68c3      	ldr	r3, [r0, #12]
}
   2cd9e:	b002      	add	sp, #8
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cda0:	428b      	cmp	r3, r1
        band->TimeCredits = 0;
   2cda2:	bf94      	ite	ls
   2cda4:	2300      	movls	r3, #0
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
   2cda6:	1a5b      	subhi	r3, r3, r1
   2cda8:	60c3      	str	r3, [r0, #12]
}
   2cdaa:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
   2cdac:	2264      	movs	r2, #100	; 0x64
   2cdae:	e7ef      	b.n	2cd90 <RegionCommonSetBandTxDone+0x20>
    if( dutyCycle == 0 )
   2cdb0:	2c01      	cmp	r4, #1
   2cdb2:	bf38      	it	cc
   2cdb4:	2401      	movcc	r4, #1
   2cdb6:	e7ee      	b.n	2cd96 <RegionCommonSetBandTxDone+0x26>

0002cdb8 <RegionCommonParseLinkAdrReq>:
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
   2cdb8:	7803      	ldrb	r3, [r0, #0]
   2cdba:	2b03      	cmp	r3, #3
   2cdbc:	d114      	bne.n	2cde8 <RegionCommonParseLinkAdrReq+0x30>
        linkAdrParams->Datarate = payload[1];
   2cdbe:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
   2cdc0:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
   2cdc4:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
   2cdc6:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
   2cdc8:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
   2cdca:	7883      	ldrb	r3, [r0, #2]
   2cdcc:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
   2cdce:	78c2      	ldrb	r2, [r0, #3]
   2cdd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cdd4:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
   2cdd6:	7903      	ldrb	r3, [r0, #4]
        retIndex = 5;
   2cdd8:	2005      	movs	r0, #5
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
   2cdda:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
   2cdde:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
   2cde2:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
   2cde4:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
   2cde6:	4770      	bx	lr
    uint8_t retIndex = 0;
   2cde8:	2000      	movs	r0, #0
}
   2cdea:	4770      	bx	lr

0002cdec <RegionCommonLinkAdrReqVerifyParams>:
{
   2cdec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2cdf0:	4698      	mov	r8, r3
    if( verifyParams->AdrEnabled == false )
   2cdf2:	7943      	ldrb	r3, [r0, #5]
{
   2cdf4:	4691      	mov	r9, r2
   2cdf6:	4604      	mov	r4, r0
   2cdf8:	468a      	mov	sl, r1
    uint8_t status = verifyParams->Status;
   2cdfa:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
   2cdfc:	f990 2006 	ldrsb.w	r2, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
   2ce00:	f990 6007 	ldrsb.w	r6, [r0, #7]
    if( verifyParams->AdrEnabled == false )
   2ce04:	b183      	cbz	r3, 2ce28 <RegionCommonLinkAdrReqVerifyParams+0x3c>
    int8_t nbRepetitions = verifyParams->NbRep;
   2ce06:	f990 7008 	ldrsb.w	r7, [r0, #8]
    if( status != 0 )
   2ce0a:	b375      	cbz	r5, 2ce6a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        if( datarate == 0x0F )
   2ce0c:	2a0f      	cmp	r2, #15
   2ce0e:	d112      	bne.n	2ce36 <RegionCommonLinkAdrReqVerifyParams+0x4a>
            datarate =  verifyParams->CurrentDatarate;
   2ce10:	f994 2009 	ldrsb.w	r2, [r4, #9]
        if( txPower == 0x0F )
   2ce14:	2e0f      	cmp	r6, #15
   2ce16:	d11e      	bne.n	2ce56 <RegionCommonLinkAdrReqVerifyParams+0x6a>
            txPower =  verifyParams->CurrentTxPower;
   2ce18:	f994 600a 	ldrsb.w	r6, [r4, #10]
    if( status == 0x07 )
   2ce1c:	2d07      	cmp	r5, #7
   2ce1e:	d124      	bne.n	2ce6a <RegionCommonLinkAdrReqVerifyParams+0x7e>
            nbRepetitions = 1;
   2ce20:	2f00      	cmp	r7, #0
   2ce22:	bf08      	it	eq
   2ce24:	2701      	moveq	r7, #1
   2ce26:	e020      	b.n	2ce6a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        nbRepetitions = verifyParams->CurrentNbRep;
   2ce28:	f990 700b 	ldrsb.w	r7, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
   2ce2c:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
   2ce30:	f990 600a 	ldrsb.w	r6, [r0, #10]
   2ce34:	e7e9      	b.n	2ce0a <RegionCommonLinkAdrReqVerifyParams+0x1e>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
   2ce36:	69a3      	ldr	r3, [r4, #24]
   2ce38:	9301      	str	r3, [sp, #4]
   2ce3a:	f994 3015 	ldrsb.w	r3, [r4, #21]
   2ce3e:	9300      	str	r3, [sp, #0]
   2ce40:	f994 3014 	ldrsb.w	r3, [r4, #20]
   2ce44:	6921      	ldr	r1, [r4, #16]
   2ce46:	7b20      	ldrb	r0, [r4, #12]
   2ce48:	f7ff ff16 	bl	2cc78 <RegionCommonChanVerifyDr>
   2ce4c:	2800      	cmp	r0, #0
   2ce4e:	d1e1      	bne.n	2ce14 <RegionCommonLinkAdrReqVerifyParams+0x28>
            status &= 0xFD; // Datarate KO
   2ce50:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
   2ce54:	e7de      	b.n	2ce14 <RegionCommonLinkAdrReqVerifyParams+0x28>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
   2ce56:	f994 301d 	ldrsb.w	r3, [r4, #29]
    if( ( value >= min ) && ( value <= max ) )
   2ce5a:	42b3      	cmp	r3, r6
   2ce5c:	dc0f      	bgt.n	2ce7e <RegionCommonLinkAdrReqVerifyParams+0x92>
   2ce5e:	f994 301c 	ldrsb.w	r3, [r4, #28]
   2ce62:	42b3      	cmp	r3, r6
   2ce64:	dada      	bge.n	2ce1c <RegionCommonLinkAdrReqVerifyParams+0x30>
                status &= 0xFB; // TxPower KO
   2ce66:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
}
   2ce6a:	4628      	mov	r0, r5
    *dr = datarate;
   2ce6c:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
   2ce70:	f889 6000 	strb.w	r6, [r9]
    *nbRep = nbRepetitions;
   2ce74:	f888 7000 	strb.w	r7, [r8]
}
   2ce78:	b002      	add	sp, #8
   2ce7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ce7e:	461e      	mov	r6, r3
   2ce80:	e7cc      	b.n	2ce1c <RegionCommonLinkAdrReqVerifyParams+0x30>

0002ce82 <RegionCommonComputeSymbolTimeFsk>:
}
   2ce82:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   2ce86:	fbb3 f0f0 	udiv	r0, r3, r0
   2ce8a:	4770      	bx	lr

0002ce8c <RegionCommonComputeRxWindowParameters>:
{
   2ce8c:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
   2ce8e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2ce92:	436a      	muls	r2, r5
   2ce94:	1f0c      	subs	r4, r1, #4
   2ce96:	fb00 2204 	mla	r2, r0, r4, r2
   2ce9a:	0052      	lsls	r2, r2, #1
   2ce9c:	bf1e      	ittt	ne
   2ce9e:	f100 34ff 	addne.w	r4, r0, #4294967295
   2cea2:	1912      	addne	r2, r2, r4
   2cea4:	fbb2 f2f0 	udivne	r2, r2, r0
   2cea8:	4291      	cmp	r1, r2
   2ceaa:	bf38      	it	cc
   2ceac:	4611      	movcc	r1, r2
   2ceae:	9a03      	ldr	r2, [sp, #12]
   2ceb0:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
   2ceb2:	0082      	lsls	r2, r0, #2
   2ceb4:	4348      	muls	r0, r1
   2ceb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2ceba:	bf1c      	itt	ne
   2cebc:	3001      	addne	r0, #1
   2cebe:	0840      	lsrne	r0, r0, #1
   2cec0:	1a12      	subs	r2, r2, r0
   2cec2:	fb01 2313 	mls	r3, r1, r3, r2
   2cec6:	2b00      	cmp	r3, #0
   2cec8:	bfc6      	itte	gt
   2ceca:	f203 33e7 	addwgt	r3, r3, #999	; 0x3e7
   2cece:	fbb3 f1f1 	udivgt	r1, r3, r1
   2ced2:	fb93 f1f1 	sdivle	r1, r3, r1
   2ced6:	9b04      	ldr	r3, [sp, #16]
   2ced8:	6019      	str	r1, [r3, #0]
}
   2ceda:	bd30      	pop	{r4, r5, pc}

0002cedc <RegionCommonComputeTxPower>:
{
   2cedc:	b538      	push	{r3, r4, r5, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
   2cede:	0040      	lsls	r0, r0, #1
{
   2cee0:	4614      	mov	r4, r2
   2cee2:	460d      	mov	r5, r1
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
   2cee4:	f7db fe34 	bl	8b50 <__aeabi_ui2f>
   2cee8:	4601      	mov	r1, r0
   2ceea:	4628      	mov	r0, r5
   2ceec:	f7db fd7e 	bl	89ec <__aeabi_fsub>
   2cef0:	4621      	mov	r1, r4
   2cef2:	f7db fd7b 	bl	89ec <__aeabi_fsub>
   2cef6:	f7db fa93 	bl	8420 <__aeabi_f2d>
   2cefa:	f7dc fd65 	bl	99c8 <floor>
   2cefe:	f7db fcf9 	bl	88f4 <__aeabi_d2iz>
}
   2cf02:	b240      	sxtb	r0, r0
   2cf04:	bd38      	pop	{r3, r4, r5, pc}

0002cf06 <RegionCommonCountNbOfEnabledChannels>:
{
   2cf06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf0a:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2cf0c:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
   2cf0e:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
   2cf10:	469e      	mov	lr, r3
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2cf12:	8a04      	ldrh	r4, [r0, #16]
   2cf14:	011e      	lsls	r6, r3, #4
   2cf16:	b2f6      	uxtb	r6, r6
   2cf18:	42b4      	cmp	r4, r6
   2cf1a:	d946      	bls.n	2cfaa <RegionCommonCountNbOfEnabledChannels+0xa4>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
   2cf1c:	2400      	movs	r4, #0
   2cf1e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   2cf22:	ea4f 0943 	mov.w	r9, r3, lsl #1
   2cf26:	00ad      	lsls	r5, r5, #2
   2cf28:	6847      	ldr	r7, [r0, #4]
   2cf2a:	f837 7009 	ldrh.w	r7, [r7, r9]
   2cf2e:	4127      	asrs	r7, r4
   2cf30:	07ff      	lsls	r7, r7, #31
   2cf32:	d529      	bpl.n	2cf88 <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
   2cf34:	6887      	ldr	r7, [r0, #8]
   2cf36:	eb07 0a05 	add.w	sl, r7, r5
   2cf3a:	597f      	ldr	r7, [r7, r5]
   2cf3c:	b327      	cbz	r7, 2cf88 <RegionCommonCountNbOfEnabledChannels+0x82>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
   2cf3e:	7807      	ldrb	r7, [r0, #0]
   2cf40:	b937      	cbnz	r7, 2cf50 <RegionCommonCountNbOfEnabledChannels+0x4a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
   2cf42:	6947      	ldr	r7, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
   2cf44:	b127      	cbz	r7, 2cf50 <RegionCommonCountNbOfEnabledChannels+0x4a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
   2cf46:	f837 7009 	ldrh.w	r7, [r7, r9]
   2cf4a:	4127      	asrs	r7, r4
   2cf4c:	07ff      	lsls	r7, r7, #31
   2cf4e:	d51b      	bpl.n	2cf88 <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
   2cf50:	f89a 7008 	ldrb.w	r7, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
   2cf54:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
   2cf58:	f347 0803 	sbfx	r8, r7, #0, #4
    if( ( value >= min ) && ( value <= max ) )
   2cf5c:	fa4f f888 	sxtb.w	r8, r8
   2cf60:	45d8      	cmp	r8, fp
   2cf62:	dc11      	bgt.n	2cf88 <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
   2cf64:	f347 1703 	sbfx	r7, r7, #4, #4
    if( ( value >= min ) && ( value <= max ) )
   2cf68:	b27f      	sxtb	r7, r7
   2cf6a:	455f      	cmp	r7, fp
   2cf6c:	db0c      	blt.n	2cf88 <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
   2cf6e:	f89a 7009 	ldrb.w	r7, [sl, #9]
   2cf72:	eb07 0847 	add.w	r8, r7, r7, lsl #1
   2cf76:	68c7      	ldr	r7, [r0, #12]
   2cf78:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   2cf7c:	7d3f      	ldrb	r7, [r7, #20]
   2cf7e:	b95f      	cbnz	r7, 2cf98 <RegionCommonCountNbOfEnabledChannels+0x92>
                    nbRestrictedChannelsCount++;
   2cf80:	f10c 0c01 	add.w	ip, ip, #1
   2cf84:	fa5f fc8c 	uxtb.w	ip, ip
        for( uint8_t j = 0; j < 16; j++ )
   2cf88:	3401      	adds	r4, #1
   2cf8a:	2c10      	cmp	r4, #16
   2cf8c:	f105 050c 	add.w	r5, r5, #12
   2cf90:	d1ca      	bne.n	2cf28 <RegionCommonCountNbOfEnabledChannels+0x22>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2cf92:	3301      	adds	r3, #1
   2cf94:	b2db      	uxtb	r3, r3
   2cf96:	e7bc      	b.n	2cf12 <RegionCommonCountNbOfEnabledChannels+0xc>
                enabledChannels[nbChannelCount++] = i + j;
   2cf98:	f10e 0701 	add.w	r7, lr, #1
   2cf9c:	eb06 0804 	add.w	r8, r6, r4
   2cfa0:	f801 800e 	strb.w	r8, [r1, lr]
   2cfa4:	fa5f fe87 	uxtb.w	lr, r7
   2cfa8:	e7ee      	b.n	2cf88 <RegionCommonCountNbOfEnabledChannels+0x82>
    *nbRestrictedChannels = nbRestrictedChannelsCount;
   2cfaa:	9b01      	ldr	r3, [sp, #4]
    *nbEnabledChannels = nbChannelCount;
   2cfac:	f882 e000 	strb.w	lr, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
   2cfb0:	f883 c000 	strb.w	ip, [r3]
}
   2cfb4:	b003      	add	sp, #12
   2cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cfba <RegionCommonIdentifyChannels>:
{
   2cfba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2cfbe:	4604      	mov	r4, r0
   2cfc0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
   2cfc4:	6840      	ldr	r0, [r0, #4]
{
   2cfc6:	461d      	mov	r5, r3
   2cfc8:	468a      	mov	sl, r1
   2cfca:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
   2cfcc:	f7fe feed 	bl	2bdaa <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
   2cfd0:	6823      	ldr	r3, [r4, #0]
    *nbEnabledChannels = 0;
   2cfd2:	f04f 0800 	mov.w	r8, #0
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
   2cfd6:	1a1b      	subs	r3, r3, r0
   2cfd8:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
   2cfda:	2301      	movs	r3, #1
   2cfdc:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
   2cfde:	f885 8000 	strb.w	r8, [r5]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
   2cfe2:	6863      	ldr	r3, [r4, #4]
   2cfe4:	b113      	cbz	r3, 2cfec <RegionCommonIdentifyChannels+0x32>
   2cfe6:	6823      	ldr	r3, [r4, #0]
   2cfe8:	4283      	cmp	r3, r0
   2cfea:	d824      	bhi.n	2d036 <RegionCommonIdentifyChannels+0x7c>
        *aggregatedTimeOff = 0;
   2cfec:	f8ca 8000 	str.w	r8, [sl]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
   2cff0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   2cff4:	69a3      	ldr	r3, [r4, #24]
   2cff6:	f89c e000 	ldrb.w	lr, [ip]
   2cffa:	9303      	str	r3, [sp, #12]
   2cffc:	ab01      	add	r3, sp, #4
   2cffe:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
   2d002:	e883 0003 	stmia.w	r3, {r0, r1}
   2d006:	7d23      	ldrb	r3, [r4, #20]
   2d008:	4670      	mov	r0, lr
   2d00a:	9300      	str	r3, [sp, #0]
   2d00c:	f8dc 100c 	ldr.w	r1, [ip, #12]
   2d010:	7a23      	ldrb	r3, [r4, #8]
   2d012:	7a62      	ldrb	r2, [r4, #9]
   2d014:	f7eb fbac 	bl	18770 <RegionCommonUpdateBandTimeOff>
   2d018:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
   2d01a:	4633      	mov	r3, r6
   2d01c:	462a      	mov	r2, r5
   2d01e:	4649      	mov	r1, r9
   2d020:	69e0      	ldr	r0, [r4, #28]
   2d022:	f7ff ff70 	bl	2cf06 <RegionCommonCountNbOfEnabledChannels>
    if( *nbEnabledChannels > 0 )
   2d026:	782b      	ldrb	r3, [r5, #0]
   2d028:	b12b      	cbz	r3, 2d036 <RegionCommonIdentifyChannels+0x7c>
        return LORAMAC_STATUS_OK;
   2d02a:	2000      	movs	r0, #0
        *nextTxDelay = 0;
   2d02c:	f8c7 8000 	str.w	r8, [r7]
}
   2d030:	b004      	add	sp, #16
   2d032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
   2d036:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
   2d038:	2b00      	cmp	r3, #0
   2d03a:	bf0c      	ite	eq
   2d03c:	200c      	moveq	r0, #12
   2d03e:	200b      	movne	r0, #11
   2d040:	e7f6      	b.n	2d030 <RegionCommonIdentifyChannels+0x76>

0002d042 <RegionCommonGetNextLowerTxDr>:
{
   2d042:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
   2d044:	f990 2000 	ldrsb.w	r2, [r0]
    if( params->CurrentDr == params->MinDr )
   2d048:	f990 5002 	ldrsb.w	r5, [r0, #2]
{
   2d04c:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
   2d04e:	4295      	cmp	r5, r2
   2d050:	d00f      	beq.n	2d072 <RegionCommonGetNextLowerTxDr+0x30>
            drLocal = ( drLocal - 1 );
   2d052:	3a01      	subs	r2, #1
   2d054:	b252      	sxtb	r2, r2
        } while( ( drLocal != params->MinDr ) &&
   2d056:	4295      	cmp	r5, r2
   2d058:	d00b      	beq.n	2d072 <RegionCommonGetNextLowerTxDr+0x30>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
   2d05a:	68a3      	ldr	r3, [r4, #8]
   2d05c:	9301      	str	r3, [sp, #4]
   2d05e:	f994 3001 	ldrsb.w	r3, [r4, #1]
   2d062:	9300      	str	r3, [sp, #0]
   2d064:	6861      	ldr	r1, [r4, #4]
   2d066:	462b      	mov	r3, r5
   2d068:	78e0      	ldrb	r0, [r4, #3]
   2d06a:	f7ff fe05 	bl	2cc78 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
   2d06e:	2800      	cmp	r0, #0
   2d070:	d0ef      	beq.n	2d052 <RegionCommonGetNextLowerTxDr+0x10>
}
   2d072:	4610      	mov	r0, r2
   2d074:	b003      	add	sp, #12
   2d076:	bd30      	pop	{r4, r5, pc}

0002d078 <RegionCommonLimitTxPower>:
}
   2d078:	4288      	cmp	r0, r1
   2d07a:	bfb8      	it	lt
   2d07c:	4608      	movlt	r0, r1
   2d07e:	4770      	bx	lr

0002d080 <RegionEU868Verify>:
{
   2d080:	b507      	push	{r0, r1, r2, lr}
    switch( phyAttribute )
   2d082:	290e      	cmp	r1, #14
   2d084:	d81f      	bhi.n	2d0c6 <RegionEU868Verify+0x46>
   2d086:	e8df f001 	tbb	[pc, r1]
   2d08a:	1e0c      	.short	0x1e0c
   2d08c:	1c1e1e1e 	.word	0x1c1e1e1e
   2d090:	1c1e1c12 	.word	0x1c1e1c12
   2d094:	1e1e1e1c 	.word	0x1e1e1e1c
   2d098:	08          	.byte	0x08
   2d099:	00          	.byte	0x00
            return EU868_DUTY_CYCLE_ENABLED;
   2d09a:	2001      	movs	r0, #1
}
   2d09c:	b003      	add	sp, #12
   2d09e:	f85d fb04 	ldr.w	pc, [sp], #4
            return VerifyRfFreq( verify->Frequency, &band );
   2d0a2:	f10d 0107 	add.w	r1, sp, #7
   2d0a6:	6800      	ldr	r0, [r0, #0]
   2d0a8:	f7eb fcac 	bl	18a04 <VerifyRfFreq>
   2d0ac:	e7f6      	b.n	2d09c <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
   2d0ae:	2205      	movs	r2, #5
   2d0b0:	2100      	movs	r1, #0
   2d0b2:	f990 0000 	ldrsb.w	r0, [r0]
   2d0b6:	f7ff fe0c 	bl	2ccd2 <RegionCommonValueInRange>
   2d0ba:	3800      	subs	r0, #0
   2d0bc:	bf18      	it	ne
   2d0be:	2001      	movne	r0, #1
   2d0c0:	e7ec      	b.n	2d09c <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
   2d0c2:	2207      	movs	r2, #7
   2d0c4:	e7f4      	b.n	2d0b0 <RegionEU868Verify+0x30>
    switch( phyAttribute )
   2d0c6:	2000      	movs	r0, #0
   2d0c8:	e7e8      	b.n	2d09c <RegionEU868Verify+0x1c>

0002d0ca <RegionEU868RxParamSetupReq>:
{
   2d0ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d0cc:	4605      	mov	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
   2d0ce:	f10d 0107 	add.w	r1, sp, #7
   2d0d2:	6840      	ldr	r0, [r0, #4]
   2d0d4:	f7eb fc96 	bl	18a04 <VerifyRfFreq>
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
   2d0d8:	2207      	movs	r2, #7
   2d0da:	1d84      	adds	r4, r0, #6
   2d0dc:	2100      	movs	r1, #0
   2d0de:	f995 0000 	ldrsb.w	r0, [r5]
   2d0e2:	b2e4      	uxtb	r4, r4
   2d0e4:	f7ff fdf5 	bl	2ccd2 <RegionCommonValueInRange>
   2d0e8:	b908      	cbnz	r0, 2d0ee <RegionEU868RxParamSetupReq+0x24>
        status &= 0xFD; // Datarate KO
   2d0ea:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
   2d0ee:	2205      	movs	r2, #5
   2d0f0:	2100      	movs	r1, #0
   2d0f2:	f995 0001 	ldrsb.w	r0, [r5, #1]
   2d0f6:	f7ff fdec 	bl	2ccd2 <RegionCommonValueInRange>
   2d0fa:	b908      	cbnz	r0, 2d100 <RegionEU868RxParamSetupReq+0x36>
        status &= 0xFB; // Rx1DrOffset range KO
   2d0fc:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
}
   2d100:	4620      	mov	r0, r4
   2d102:	b003      	add	sp, #12
   2d104:	bd30      	pop	{r4, r5, pc}

0002d106 <RegionEU868TxParamSetupReq>:
}
   2d106:	f04f 30ff 	mov.w	r0, #4294967295
   2d10a:	4770      	bx	lr

0002d10c <RegionEU868AlternateDr>:
}
   2d10c:	4770      	bx	lr

0002d10e <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   2d10e:	2350      	movs	r3, #80	; 0x50
{
   2d110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d114:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   2d116:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
   2d11a:	7a03      	ldrb	r3, [r0, #8]
{
   2d11c:	4680      	mov	r8, r0
    if( applyCFList->Size != 16 )
   2d11e:	2b10      	cmp	r3, #16
   2d120:	d12e      	bne.n	2d180 <RegionEU868ApplyCFList+0x72>
    if( applyCFList->Payload[15] != 0 )
   2d122:	6843      	ldr	r3, [r0, #4]
   2d124:	7bdb      	ldrb	r3, [r3, #15]
   2d126:	bb5b      	cbnz	r3, 2d180 <RegionEU868ApplyCFList+0x72>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d128:	2103      	movs	r1, #3
            newChannel.Frequency = 0;
   2d12a:	461c      	mov	r4, r3
            newChannel.Frequency *= 100;
   2d12c:	2764      	movs	r7, #100	; 0x64
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
   2d12e:	2907      	cmp	r1, #7
   2d130:	f101 0601 	add.w	r6, r1, #1
   2d134:	f103 0503 	add.w	r5, r3, #3
   2d138:	d815      	bhi.n	2d166 <RegionEU868ApplyCFList+0x58>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   2d13a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2d13e:	5cc2      	ldrb	r2, [r0, r3]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   2d140:	4418      	add	r0, r3
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   2d142:	9203      	str	r2, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   2d144:	7843      	ldrb	r3, [r0, #1]
   2d146:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2d14a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
   2d14c:	7882      	ldrb	r2, [r0, #2]
   2d14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
   2d152:	437b      	muls	r3, r7
            newChannel.Rx1Frequency = 0;
   2d154:	e9cd 3403 	strd	r3, r4, [sp, #12]
        if( newChannel.Frequency != 0 )
   2d158:	b9ab      	cbnz	r3, 2d186 <RegionEU868ApplyCFList+0x78>
            RegionEU868ChannelsRemove( &channelRemove );
   2d15a:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
   2d15c:	f88d 1000 	strb.w	r1, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
   2d160:	f7ec f8a0 	bl	192a4 <RegionEU868ChannelsRemove>
   2d164:	e016      	b.n	2d194 <RegionEU868ApplyCFList+0x86>
   2d166:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
   2d168:	f88d 1000 	strb.w	r1, [sp]
            newChannel.Frequency = 0;
   2d16c:	9403      	str	r4, [sp, #12]
            newChannel.DrRange.Value = 0;
   2d16e:	f88d 4014 	strb.w	r4, [sp, #20]
            newChannel.Rx1Frequency = 0;
   2d172:	9404      	str	r4, [sp, #16]
            RegionEU868ChannelsRemove( &channelRemove );
   2d174:	f7ec f896 	bl	192a4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d178:	b2f1      	uxtb	r1, r6
   2d17a:	2910      	cmp	r1, #16
   2d17c:	462b      	mov	r3, r5
   2d17e:	d1d6      	bne.n	2d12e <RegionEU868ApplyCFList+0x20>
}
   2d180:	b006      	add	sp, #24
   2d182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            channelAdd.NewChannel = &newChannel;
   2d186:	ab03      	add	r3, sp, #12
            RegionEU868ChannelAdd( &channelAdd );
   2d188:	a801      	add	r0, sp, #4
            channelAdd.NewChannel = &newChannel;
   2d18a:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
   2d18c:	f88d 1008 	strb.w	r1, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
   2d190:	f7ec f828 	bl	191e4 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d194:	462b      	mov	r3, r5
   2d196:	b2f1      	uxtb	r1, r6
   2d198:	e7c9      	b.n	2d12e <RegionEU868ApplyCFList+0x20>

0002d19a <RegionEU868NewChannelReq>:
{
   2d19a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
   2d19c:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
   2d19e:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
   2d1a0:	6811      	ldr	r1, [r2, #0]
   2d1a2:	b949      	cbnz	r1, 2d1b8 <RegionEU868NewChannelReq+0x1e>
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   2d1a4:	a801      	add	r0, sp, #4
        channelRemove.ChannelId = newChannelReq->ChannelId;
   2d1a6:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   2d1aa:	f7ec f87b 	bl	192a4 <RegionEU868ChannelsRemove>
   2d1ae:	b178      	cbz	r0, 2d1d0 <RegionEU868NewChannelReq+0x36>
    uint8_t status = 0x03;
   2d1b0:	2003      	movs	r0, #3
}
   2d1b2:	b005      	add	sp, #20
   2d1b4:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( RegionEU868ChannelAdd( &channelAdd ) )
   2d1b8:	a802      	add	r0, sp, #8
        channelAdd.NewChannel = newChannelReq->NewChannel;
   2d1ba:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
   2d1bc:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
   2d1c0:	f7ec f810 	bl	191e4 <RegionEU868ChannelAdd>
   2d1c4:	2804      	cmp	r0, #4
   2d1c6:	d005      	beq.n	2d1d4 <RegionEU868NewChannelReq+0x3a>
   2d1c8:	2805      	cmp	r0, #5
   2d1ca:	d005      	beq.n	2d1d8 <RegionEU868NewChannelReq+0x3e>
   2d1cc:	2800      	cmp	r0, #0
   2d1ce:	d0ef      	beq.n	2d1b0 <RegionEU868NewChannelReq+0x16>
{
   2d1d0:	2000      	movs	r0, #0
   2d1d2:	e7ee      	b.n	2d1b2 <RegionEU868NewChannelReq+0x18>
                status &= 0xFE;
   2d1d4:	2002      	movs	r0, #2
   2d1d6:	e7ec      	b.n	2d1b2 <RegionEU868NewChannelReq+0x18>
                status &= 0xFD;
   2d1d8:	2001      	movs	r0, #1
   2d1da:	e7ea      	b.n	2d1b2 <RegionEU868NewChannelReq+0x18>

0002d1dc <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
   2d1dc:	1a88      	subs	r0, r1, r2

    if( datarate < 0 )
   2d1de:	b240      	sxtb	r0, r0
   2d1e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    {
        datarate = DR_0;
    }
    return datarate;
}
   2d1e4:	b2c0      	uxtb	r0, r0
   2d1e6:	4770      	bx	lr

0002d1e8 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2d1e8:	b530      	push	{r4, r5, lr}
   2d1ea:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   2d1ec:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   2d1f0:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2d1f2:	794b      	ldrb	r3, [r1, #5]
   2d1f4:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   2d1f8:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2d1fa:	220d      	movs	r2, #13
   2d1fc:	2100      	movs	r1, #0
   2d1fe:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2d202:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   2d206:	f004 fb4c 	bl	318a2 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2d20a:	aa02      	add	r2, sp, #8
   2d20c:	4611      	mov	r1, r2
   2d20e:	4628      	mov	r0, r5
   2d210:	f000 fb73 	bl	2d8fa <bt_encrypt_le>
	if (err) {
   2d214:	b110      	cbz	r0, 2d21c <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2d216:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2d218:	b007      	add	sp, #28
   2d21a:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2d21c:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2d21e:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   2d220:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   2d224:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2d226:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   2d228:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2d22a:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2d22e:	f004 faee 	bl	3180e <memcmp>
   2d232:	fab0 f080 	clz	r0, r0
   2d236:	0940      	lsrs	r0, r0, #5
   2d238:	e7ee      	b.n	2d218 <bt_rpa_irk_matches+0x30>

0002d23a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2d23a:	b510      	push	{r4, lr}
   2d23c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2d23e:	7801      	ldrb	r1, [r0, #0]
   2d240:	7822      	ldrb	r2, [r4, #0]
{
   2d242:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2d244:	428a      	cmp	r2, r1
   2d246:	d00f      	beq.n	2d268 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2d248:	4669      	mov	r1, sp
   2d24a:	f7ec f8c5 	bl	193d8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2d24e:	4620      	mov	r0, r4
   2d250:	a905      	add	r1, sp, #20
   2d252:	f7ec f8c1 	bl	193d8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2d256:	2210      	movs	r2, #16
   2d258:	f10d 0115 	add.w	r1, sp, #21
   2d25c:	f10d 0001 	add.w	r0, sp, #1
   2d260:	f004 fad5 	bl	3180e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2d264:	b00a      	add	sp, #40	; 0x28
   2d266:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2d268:	2a01      	cmp	r2, #1
   2d26a:	d006      	beq.n	2d27a <bt_uuid_cmp+0x40>
   2d26c:	2a02      	cmp	r2, #2
   2d26e:	d007      	beq.n	2d280 <bt_uuid_cmp+0x46>
   2d270:	b972      	cbnz	r2, 2d290 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2d272:	8840      	ldrh	r0, [r0, #2]
   2d274:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2d276:	1ac0      	subs	r0, r0, r3
   2d278:	e7f4      	b.n	2d264 <bt_uuid_cmp+0x2a>
   2d27a:	6840      	ldr	r0, [r0, #4]
   2d27c:	6863      	ldr	r3, [r4, #4]
   2d27e:	e7fa      	b.n	2d276 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2d280:	2210      	movs	r2, #16
   2d282:	1c61      	adds	r1, r4, #1
   2d284:	3001      	adds	r0, #1
}
   2d286:	b00a      	add	sp, #40	; 0x28
   2d288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2d28c:	f004 babf 	b.w	3180e <memcmp>
	switch (u1->type) {
   2d290:	f06f 0015 	mvn.w	r0, #21
   2d294:	e7e6      	b.n	2d264 <bt_uuid_cmp+0x2a>

0002d296 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2d296:	2a04      	cmp	r2, #4
   2d298:	d00a      	beq.n	2d2b0 <bt_uuid_create+0x1a>
   2d29a:	2a10      	cmp	r2, #16
   2d29c:	d00d      	beq.n	2d2ba <bt_uuid_create+0x24>
   2d29e:	2a02      	cmp	r2, #2
   2d2a0:	f04f 0300 	mov.w	r3, #0
   2d2a4:	d115      	bne.n	2d2d2 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2d2a6:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2d2a8:	880b      	ldrh	r3, [r1, #0]
   2d2aa:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2d2ac:	2001      	movs	r0, #1
   2d2ae:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2d2b0:	2301      	movs	r3, #1
   2d2b2:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2d2b4:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2d2b6:	6043      	str	r3, [r0, #4]
		break;
   2d2b8:	e7f8      	b.n	2d2ac <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2d2ba:	2302      	movs	r3, #2
   2d2bc:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d2c0:	f101 0310 	add.w	r3, r1, #16
   2d2c4:	f851 2b04 	ldr.w	r2, [r1], #4
   2d2c8:	4299      	cmp	r1, r3
   2d2ca:	f840 2b04 	str.w	r2, [r0], #4
   2d2ce:	d1f9      	bne.n	2d2c4 <bt_uuid_create+0x2e>
   2d2d0:	e7ec      	b.n	2d2ac <bt_uuid_create+0x16>
	switch (data_len) {
   2d2d2:	4618      	mov	r0, r3
}
   2d2d4:	4770      	bx	lr

0002d2d6 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2d2d6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2d2d8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2d2da:	2106      	movs	r1, #6
{
   2d2dc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2d2de:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2d2e2:	f7ee facd 	bl	1b880 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2d2e6:	b918      	cbnz	r0, 2d2f0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2d2e8:	79a3      	ldrb	r3, [r4, #6]
   2d2ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2d2ee:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2d2f0:	bd10      	pop	{r4, pc}

0002d2f2 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2d2f2:	280f      	cmp	r0, #15
   2d2f4:	d807      	bhi.n	2d306 <bt_hci_evt_get_flags+0x14>
   2d2f6:	280d      	cmp	r0, #13
   2d2f8:	d80b      	bhi.n	2d312 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2d2fa:	2805      	cmp	r0, #5
   2d2fc:	bf08      	it	eq
   2d2fe:	2003      	moveq	r0, #3
   2d300:	bf18      	it	ne
   2d302:	2002      	movne	r0, #2
   2d304:	4770      	bx	lr
	switch (evt) {
   2d306:	2813      	cmp	r0, #19
   2d308:	d003      	beq.n	2d312 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2d30a:	281a      	cmp	r0, #26
   2d30c:	bf08      	it	eq
   2d30e:	2001      	moveq	r0, #1
   2d310:	e7f6      	b.n	2d300 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2d312:	2001      	movs	r0, #1
	}
}
   2d314:	4770      	bx	lr

0002d316 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2d316:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2d31a:	b183      	cbz	r3, 2d33e <update_sec_level+0x28>
   2d31c:	7b5a      	ldrb	r2, [r3, #13]
   2d31e:	07d1      	lsls	r1, r2, #31
   2d320:	d50d      	bpl.n	2d33e <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2d322:	06d2      	lsls	r2, r2, #27
   2d324:	d50d      	bpl.n	2d342 <update_sec_level+0x2c>
   2d326:	7b1b      	ldrb	r3, [r3, #12]
   2d328:	2b10      	cmp	r3, #16
   2d32a:	bf14      	ite	ne
   2d32c:	2303      	movne	r3, #3
   2d32e:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2d330:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2d332:	7a80      	ldrb	r0, [r0, #10]
}
   2d334:	4298      	cmp	r0, r3
   2d336:	bf8c      	ite	hi
   2d338:	2000      	movhi	r0, #0
   2d33a:	2001      	movls	r0, #1
   2d33c:	4770      	bx	lr
   2d33e:	2302      	movs	r3, #2
   2d340:	e7f6      	b.n	2d330 <update_sec_level+0x1a>
   2d342:	2303      	movs	r3, #3
   2d344:	e7f4      	b.n	2d330 <update_sec_level+0x1a>

0002d346 <hci_vendor_event>:
}
   2d346:	4770      	bx	lr

0002d348 <atomic_or>:
{
   2d348:	4603      	mov	r3, r0
   2d34a:	b510      	push	{r4, lr}
}
   2d34c:	e8d3 0fef 	ldaex	r0, [r3]
   2d350:	ea40 0201 	orr.w	r2, r0, r1
   2d354:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d358:	2c00      	cmp	r4, #0
   2d35a:	d1f7      	bne.n	2d34c <atomic_or+0x4>
   2d35c:	bd10      	pop	{r4, pc}

0002d35e <bt_addr_copy>:
   2d35e:	680b      	ldr	r3, [r1, #0]
   2d360:	6003      	str	r3, [r0, #0]
   2d362:	888b      	ldrh	r3, [r1, #4]
   2d364:	8083      	strh	r3, [r0, #4]
}
   2d366:	4770      	bx	lr

0002d368 <bt_addr_le_copy>:
   2d368:	680b      	ldr	r3, [r1, #0]
   2d36a:	6003      	str	r3, [r0, #0]
   2d36c:	888b      	ldrh	r3, [r1, #4]
   2d36e:	8083      	strh	r3, [r0, #4]
   2d370:	798b      	ldrb	r3, [r1, #6]
   2d372:	7183      	strb	r3, [r0, #6]
}
   2d374:	4770      	bx	lr

0002d376 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d376:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d378:	ab0b      	add	r3, sp, #44	; 0x2c
   2d37a:	9305      	str	r3, [sp, #20]
   2d37c:	9303      	str	r3, [sp, #12]
   2d37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d380:	9302      	str	r3, [sp, #8]
   2d382:	2300      	movs	r3, #0
   2d384:	4618      	mov	r0, r3
   2d386:	e9cd 3300 	strd	r3, r3, [sp]
   2d38a:	f7e2 f8cd 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2d38e:	b007      	add	sp, #28
   2d390:	f85d fb04 	ldr.w	pc, [sp], #4

0002d394 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d394:	e8d0 3fef 	ldaex	r3, [r0]
   2d398:	400b      	ands	r3, r1
   2d39a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2d39e:	2a00      	cmp	r2, #0
   2d3a0:	d1f8      	bne.n	2d394 <atomic_and.isra.0>
}
   2d3a2:	4770      	bx	lr

0002d3a4 <sys_put_le64>:
	dst[1] = val >> 8;
   2d3a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2d3a8:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2d3aa:	2300      	movs	r3, #0
   2d3ac:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2d3ae:	0e00      	lsrs	r0, r0, #24
   2d3b0:	70d0      	strb	r0, [r2, #3]
   2d3b2:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2d3b6:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2d3b8:	7093      	strb	r3, [r2, #2]
   2d3ba:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2d3bc:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2d3be:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2d3c0:	71d1      	strb	r1, [r2, #7]
}
   2d3c2:	4770      	bx	lr

0002d3c4 <bt_hci_disconnect>:
{
   2d3c4:	b570      	push	{r4, r5, r6, lr}
   2d3c6:	4606      	mov	r6, r0
   2d3c8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2d3ca:	f240 4006 	movw	r0, #1030	; 0x406
   2d3ce:	2103      	movs	r1, #3
   2d3d0:	f7ec fc7a 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   2d3d4:	4604      	mov	r4, r0
   2d3d6:	b168      	cbz	r0, 2d3f4 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2d3d8:	2103      	movs	r1, #3
   2d3da:	300c      	adds	r0, #12
   2d3dc:	f002 f829 	bl	2f432 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2d3e0:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2d3e2:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d3e4:	4621      	mov	r1, r4
}
   2d3e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d3ea:	2200      	movs	r2, #0
   2d3ec:	f240 4006 	movw	r0, #1030	; 0x406
   2d3f0:	f7ec bca4 	b.w	19d3c <bt_hci_cmd_send_sync>
}
   2d3f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d3f8:	bd70      	pop	{r4, r5, r6, pc}

0002d3fa <bt_le_set_data_len>:
{
   2d3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3fc:	4607      	mov	r7, r0
   2d3fe:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d400:	f242 0022 	movw	r0, #8226	; 0x2022
   2d404:	2106      	movs	r1, #6
{
   2d406:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d408:	f7ec fc5e 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   2d40c:	4604      	mov	r4, r0
   2d40e:	b178      	cbz	r0, 2d430 <bt_le_set_data_len+0x36>
   2d410:	2106      	movs	r1, #6
   2d412:	300c      	adds	r0, #12
   2d414:	f002 f80d 	bl	2f432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d418:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2d41a:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d41c:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2d41e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2d420:	4621      	mov	r1, r4
}
   2d422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2d426:	2200      	movs	r2, #0
   2d428:	f242 0022 	movw	r0, #8226	; 0x2022
   2d42c:	f7ec bc86 	b.w	19d3c <bt_hci_cmd_send_sync>
}
   2d430:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d436 <bt_le_set_phy>:
{
   2d436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d43a:	4681      	mov	r9, r0
   2d43c:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d43e:	f242 0032 	movw	r0, #8242	; 0x2032
   2d442:	2107      	movs	r1, #7
{
   2d444:	4617      	mov	r7, r2
   2d446:	461e      	mov	r6, r3
   2d448:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d44c:	f7ec fc3c 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   2d450:	4605      	mov	r5, r0
   2d452:	b1a0      	cbz	r0, 2d47e <bt_le_set_phy+0x48>
   2d454:	2107      	movs	r1, #7
   2d456:	300c      	adds	r0, #12
   2d458:	f001 ffeb 	bl	2f432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d45c:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2d460:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d464:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2d466:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2d468:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2d46a:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2d46e:	4629      	mov	r1, r5
}
   2d470:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2d474:	2200      	movs	r2, #0
   2d476:	f242 0032 	movw	r0, #8242	; 0x2032
   2d47a:	f7ec bc5f 	b.w	19d3c <bt_hci_cmd_send_sync>
}
   2d47e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d486 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2d486:	68c0      	ldr	r0, [r0, #12]
   2d488:	f7ec bd22 	b.w	19ed0 <bt_hci_le_enh_conn_complete>

0002d48c <bt_le_conn_params_valid>:
{
   2d48c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2d48e:	8803      	ldrh	r3, [r0, #0]
   2d490:	8842      	ldrh	r2, [r0, #2]
   2d492:	4293      	cmp	r3, r2
   2d494:	d819      	bhi.n	2d4ca <bt_le_conn_params_valid+0x3e>
   2d496:	2b05      	cmp	r3, #5
   2d498:	d917      	bls.n	2d4ca <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2d49a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2d49e:	d814      	bhi.n	2d4ca <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2d4a0:	8883      	ldrh	r3, [r0, #4]
   2d4a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2d4a6:	d210      	bcs.n	2d4ca <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d4a8:	f640 4476 	movw	r4, #3190	; 0xc76
   2d4ac:	88c0      	ldrh	r0, [r0, #6]
   2d4ae:	f1a0 010a 	sub.w	r1, r0, #10
   2d4b2:	b289      	uxth	r1, r1
   2d4b4:	42a1      	cmp	r1, r4
   2d4b6:	d808      	bhi.n	2d4ca <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2d4b8:	3301      	adds	r3, #1
   2d4ba:	b29b      	uxth	r3, r3
   2d4bc:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d4be:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2d4c2:	bf34      	ite	cc
   2d4c4:	2001      	movcc	r0, #1
   2d4c6:	2000      	movcs	r0, #0
}
   2d4c8:	bd10      	pop	{r4, pc}
		return false;
   2d4ca:	2000      	movs	r0, #0
   2d4cc:	e7fc      	b.n	2d4c8 <bt_le_conn_params_valid+0x3c>

0002d4ce <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2d4ce:	f240 3041 	movw	r0, #833	; 0x341
   2d4d2:	4770      	bx	lr

0002d4d4 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2d4d4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2d4d6:	f7f2 feeb 	bl	202b0 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2d4da:	b118      	cbz	r0, 2d4e4 <bt_addr_le_is_bonded+0x10>
   2d4dc:	89c0      	ldrh	r0, [r0, #14]
   2d4de:	3800      	subs	r0, #0
   2d4e0:	bf18      	it	ne
   2d4e2:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2d4e4:	bd08      	pop	{r3, pc}

0002d4e6 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2d4e6:	2207      	movs	r2, #7
{
   2d4e8:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d4ea:	f004 f990 	bl	3180e <memcmp>
}
   2d4ee:	fab0 f080 	clz	r0, r0
   2d4f2:	0940      	lsrs	r0, r0, #5
   2d4f4:	bd08      	pop	{r3, pc}

0002d4f6 <bt_addr_copy>:
   2d4f6:	680b      	ldr	r3, [r1, #0]
   2d4f8:	6003      	str	r3, [r0, #0]
   2d4fa:	888b      	ldrh	r3, [r1, #4]
   2d4fc:	8083      	strh	r3, [r0, #4]
}
   2d4fe:	4770      	bx	lr

0002d500 <bt_addr_le_copy>:
   2d500:	680b      	ldr	r3, [r1, #0]
   2d502:	6003      	str	r3, [r0, #0]
   2d504:	888b      	ldrh	r3, [r1, #4]
   2d506:	8083      	strh	r3, [r0, #4]
   2d508:	798b      	ldrb	r3, [r1, #6]
   2d50a:	7183      	strb	r3, [r0, #6]
}
   2d50c:	4770      	bx	lr

0002d50e <hci_id_add>:
{
   2d50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d510:	460f      	mov	r7, r1
   2d512:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2d514:	bb30      	cbnz	r0, 2d564 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2d516:	2127      	movs	r1, #39	; 0x27
   2d518:	f242 0027 	movw	r0, #8231	; 0x2027
   2d51c:	f7ec fbd4 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   2d520:	4605      	mov	r5, r0
   2d522:	b310      	cbz	r0, 2d56a <hci_id_add+0x5c>
   2d524:	2127      	movs	r1, #39	; 0x27
   2d526:	300c      	adds	r0, #12
   2d528:	f001 ff83 	bl	2f432 <net_buf_simple_add>
   2d52c:	4622      	mov	r2, r4
   2d52e:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2d530:	4639      	mov	r1, r7
   2d532:	f7ff ffe5 	bl	2d500 <bt_addr_le_copy>
   2d536:	1dc3      	adds	r3, r0, #7
   2d538:	f104 0110 	add.w	r1, r4, #16
   2d53c:	f852 0b04 	ldr.w	r0, [r2], #4
   2d540:	428a      	cmp	r2, r1
   2d542:	f843 0b04 	str.w	r0, [r3], #4
   2d546:	d1f9      	bne.n	2d53c <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2d548:	2210      	movs	r2, #16
   2d54a:	2100      	movs	r1, #0
   2d54c:	f106 0017 	add.w	r0, r6, #23
   2d550:	f004 f9a7 	bl	318a2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2d554:	4629      	mov	r1, r5
}
   2d556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2d55a:	2200      	movs	r2, #0
   2d55c:	f242 0027 	movw	r0, #8231	; 0x2027
   2d560:	f7ec bbec 	b.w	19d3c <bt_hci_cmd_send_sync>
		return -EINVAL;
   2d564:	f06f 0015 	mvn.w	r0, #21
}
   2d568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2d56a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d56e:	e7fb      	b.n	2d568 <hci_id_add+0x5a>

0002d570 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2d570:	7a03      	ldrb	r3, [r0, #8]
{
   2d572:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2d574:	075b      	lsls	r3, r3, #29
   2d576:	d505      	bpl.n	2d584 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2d578:	4601      	mov	r1, r0
   2d57a:	322a      	adds	r2, #42	; 0x2a
   2d57c:	f811 0b01 	ldrb.w	r0, [r1], #1
   2d580:	f7ff bfc5 	b.w	2d50e <hci_id_add>
}
   2d584:	4770      	bx	lr

0002d586 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d586:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d588:	ab0b      	add	r3, sp, #44	; 0x2c
   2d58a:	9305      	str	r3, [sp, #20]
   2d58c:	9303      	str	r3, [sp, #12]
   2d58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d590:	9302      	str	r3, [sp, #8]
   2d592:	2300      	movs	r3, #0
   2d594:	4618      	mov	r0, r3
   2d596:	e9cd 3300 	strd	r3, r3, [sp]
   2d59a:	f7e1 ffc5 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2d59e:	b007      	add	sp, #28
   2d5a0:	f85d fb04 	ldr.w	pc, [sp], #4

0002d5a4 <addr_res_enable>:
{
   2d5a4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2d5a6:	2101      	movs	r1, #1
{
   2d5a8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2d5aa:	f242 002d 	movw	r0, #8237	; 0x202d
   2d5ae:	f7ec fb8b 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   2d5b2:	4604      	mov	r4, r0
   2d5b4:	b158      	cbz	r0, 2d5ce <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2d5b6:	4629      	mov	r1, r5
   2d5b8:	300c      	adds	r0, #12
   2d5ba:	f001 ff49 	bl	2f450 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2d5be:	4621      	mov	r1, r4
}
   2d5c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2d5c4:	2200      	movs	r2, #0
   2d5c6:	f242 002d 	movw	r0, #8237	; 0x202d
   2d5ca:	f7ec bbb7 	b.w	19d3c <bt_hci_cmd_send_sync>
}
   2d5ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d5d2:	bd38      	pop	{r3, r4, r5, pc}

0002d5d4 <adv_unpause_enabled>:
{
   2d5d4:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d5d6:	f100 0310 	add.w	r3, r0, #16
   2d5da:	e8d3 2fef 	ldaex	r2, [r3]
   2d5de:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2d5e2:	e8c3 1fe4 	stlex	r4, r1, [r3]
   2d5e6:	2c00      	cmp	r4, #0
   2d5e8:	d1f7      	bne.n	2d5da <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2d5ea:	0413      	lsls	r3, r2, #16
   2d5ec:	d503      	bpl.n	2d5f6 <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   2d5ee:	2101      	movs	r1, #1
}
   2d5f0:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2d5f2:	f000 b96d 	b.w	2d8d0 <bt_le_adv_set_enable>
}
   2d5f6:	bc10      	pop	{r4}
   2d5f8:	4770      	bx	lr

0002d5fa <find_rl_conflict>:
{
   2d5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   2d5fe:	684f      	ldr	r7, [r1, #4]
{
   2d600:	4605      	mov	r5, r0
   2d602:	460c      	mov	r4, r1
   2d604:	b086      	sub	sp, #24
	if (conflict->found) {
   2d606:	b9c7      	cbnz	r7, 2d63a <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   2d608:	7a03      	ldrb	r3, [r0, #8]
   2d60a:	075b      	lsls	r3, r3, #29
   2d60c:	d515      	bpl.n	2d63a <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2d60e:	6808      	ldr	r0, [r1, #0]
   2d610:	1c69      	adds	r1, r5, #1
   2d612:	3001      	adds	r0, #1
   2d614:	f7ff ff67 	bl	2d4e6 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d618:	f8d4 8000 	ldr.w	r8, [r4]
   2d61c:	2216      	movs	r2, #22
   2d61e:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2d620:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d622:	4668      	mov	r0, sp
   2d624:	f004 f93d 	bl	318a2 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   2d628:	2210      	movs	r2, #16
   2d62a:	4669      	mov	r1, sp
   2d62c:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   2d630:	f004 f8ed 	bl	3180e <memcmp>
   2d634:	b920      	cbnz	r0, 2d640 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   2d636:	b106      	cbz	r6, 2d63a <find_rl_conflict+0x40>
		conflict->found = resident;
   2d638:	6065      	str	r5, [r4, #4]
}
   2d63a:	b006      	add	sp, #24
   2d63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d640:	6820      	ldr	r0, [r4, #0]
   2d642:	2210      	movs	r2, #16
   2d644:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2d648:	302a      	adds	r0, #42	; 0x2a
   2d64a:	f004 f8e0 	bl	3180e <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d64e:	2800      	cmp	r0, #0
   2d650:	d0f2      	beq.n	2d638 <find_rl_conflict+0x3e>
   2d652:	e7f0      	b.n	2d636 <find_rl_conflict+0x3c>

0002d654 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2d654:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d658:	e8d3 2faf 	lda	r2, [r3]
   2d65c:	0612      	lsls	r2, r2, #24
   2d65e:	d50a      	bpl.n	2d676 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d660:	e8d3 1fef 	ldaex	r1, [r3]
   2d664:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   2d668:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2d66c:	2a00      	cmp	r2, #0
   2d66e:	d1f7      	bne.n	2d660 <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   2d670:	2100      	movs	r1, #0
   2d672:	f000 b92d 	b.w	2d8d0 <bt_le_adv_set_enable>
}
   2d676:	4770      	bx	lr

0002d678 <bt_lookup_id_addr>:
{
   2d678:	b510      	push	{r4, lr}
   2d67a:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2d67c:	b930      	cbnz	r0, 2d68c <bt_lookup_id_addr+0x14>
   2d67e:	b119      	cbz	r1, 2d688 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2d680:	f7f2 fdd0 	bl	20224 <bt_keys_find_irk>
		if (keys) {
   2d684:	b100      	cbz	r0, 2d688 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2d686:	1c44      	adds	r4, r0, #1
}
   2d688:	4620      	mov	r0, r4
   2d68a:	bd10      	pop	{r4, pc}
		return NULL;
   2d68c:	2400      	movs	r4, #0
   2d68e:	e7fb      	b.n	2d688 <bt_lookup_id_addr+0x10>

0002d690 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2d690:	b118      	cbz	r0, 2d69a <bt_id_set_adv_random_addr+0xa>
   2d692:	b111      	cbz	r1, 2d69a <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2d694:	4608      	mov	r0, r1
   2d696:	f7ed ba33 	b.w	1ab00 <set_random_address>
}
   2d69a:	f06f 0015 	mvn.w	r0, #21
   2d69e:	4770      	bx	lr

0002d6a0 <bt_id_set_adv_private_addr>:
{
   2d6a0:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2d6a2:	4604      	mov	r4, r0
   2d6a4:	b180      	cbz	r0, 2d6c8 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2d6a6:	2106      	movs	r1, #6
   2d6a8:	4668      	mov	r0, sp
   2d6aa:	f7ee f8e9 	bl	1b880 <bt_rand>
	if (err) {
   2d6ae:	b948      	cbnz	r0, 2d6c4 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2d6b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d6b4:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2d6b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d6ba:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   2d6bc:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d6c0:	f7ff ffe6 	bl	2d690 <bt_id_set_adv_random_addr>
}
   2d6c4:	b002      	add	sp, #8
   2d6c6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2d6c8:	f06f 0015 	mvn.w	r0, #21
   2d6cc:	e7fa      	b.n	2d6c4 <bt_id_set_adv_private_addr+0x24>

0002d6ce <bt_id_adv_random_addr_check>:
}
   2d6ce:	3800      	subs	r0, #0
   2d6d0:	bf18      	it	ne
   2d6d2:	2001      	movne	r0, #1
   2d6d4:	4770      	bx	lr

0002d6d6 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2d6d6:	7a03      	ldrb	r3, [r0, #8]
   2d6d8:	07d9      	lsls	r1, r3, #31
   2d6da:	d504      	bpl.n	2d6e6 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2d6dc:	f023 0301 	bic.w	r3, r3, #1
   2d6e0:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2d6e2:	f7ed ba5b 	b.w	1ab9c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2d6e6:	0799      	lsls	r1, r3, #30
   2d6e8:	d504      	bpl.n	2d6f4 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2d6ea:	f023 0302 	bic.w	r3, r3, #2
   2d6ee:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2d6f0:	f7ed bb20 	b.w	1ad34 <bt_id_del>
}
   2d6f4:	4770      	bx	lr

0002d6f6 <get_adv_channel_map>:
{
   2d6f6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2d6f8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2d6fc:	bf0c      	ite	eq
   2d6fe:	2007      	moveq	r0, #7
   2d700:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2d702:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2d704:	bf48      	it	mi
   2d706:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2d70a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2d70c:	bf48      	it	mi
   2d70e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2d712:	4770      	bx	lr

0002d714 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d714:	e8d0 0faf 	lda	r0, [r0]
}
   2d718:	4770      	bx	lr

0002d71a <atomic_and>:
{
   2d71a:	4603      	mov	r3, r0
   2d71c:	b510      	push	{r4, lr}
}
   2d71e:	e8d3 0fef 	ldaex	r0, [r3]
   2d722:	ea00 0201 	and.w	r2, r0, r1
   2d726:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d72a:	2c00      	cmp	r4, #0
   2d72c:	d1f7      	bne.n	2d71e <atomic_and+0x4>
   2d72e:	bd10      	pop	{r4, pc}

0002d730 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d730:	680b      	ldr	r3, [r1, #0]
   2d732:	6003      	str	r3, [r0, #0]
   2d734:	888b      	ldrh	r3, [r1, #4]
   2d736:	8083      	strh	r3, [r0, #4]
   2d738:	798b      	ldrb	r3, [r1, #6]
   2d73a:	7183      	strb	r3, [r0, #6]
   2d73c:	4770      	bx	lr

0002d73e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d73e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d740:	ab0b      	add	r3, sp, #44	; 0x2c
   2d742:	9305      	str	r3, [sp, #20]
   2d744:	9303      	str	r3, [sp, #12]
   2d746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d748:	9302      	str	r3, [sp, #8]
   2d74a:	2300      	movs	r3, #0
   2d74c:	4618      	mov	r0, r3
   2d74e:	e9cd 3300 	strd	r3, r3, [sp]
   2d752:	f7e1 fee9 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2d756:	b007      	add	sp, #28
   2d758:	f85d fb04 	ldr.w	pc, [sp], #4

0002d75c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d75c:	2301      	movs	r3, #1
{
   2d75e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d760:	fa03 f101 	lsl.w	r1, r3, r1
{
   2d764:	4604      	mov	r4, r0
	if (val) {
   2d766:	b142      	cbz	r2, 2d77a <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d768:	e8d4 3fef 	ldaex	r3, [r4]
   2d76c:	430b      	orrs	r3, r1
   2d76e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2d772:	2a00      	cmp	r2, #0
   2d774:	d1f8      	bne.n	2d768 <atomic_set_bit_to+0xc>
	}
}
   2d776:	bc10      	pop	{r4}
   2d778:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d77a:	43c9      	mvns	r1, r1
}
   2d77c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d77e:	f7ff bfcc 	b.w	2d71a <atomic_and>

0002d782 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d786:	b087      	sub	sp, #28
   2d788:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2d78c:	4605      	mov	r5, r0
   2d78e:	460c      	mov	r4, r1
   2d790:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2d792:	2100      	movs	r1, #0
   2d794:	2210      	movs	r2, #16
   2d796:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d798:	461f      	mov	r7, r3
   2d79a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2d79e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2d7a2:	f004 f87e 	bl	318a2 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2d7a6:	b9ce      	cbnz	r6, 2d7dc <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   2d7a8:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2d7ac:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2d7ae:	f242 0008 	movw	r0, #8200	; 0x2008
   2d7b2:	a902      	add	r1, sp, #8
   2d7b4:	f7ed fd1a 	bl	1b1ec <hci_set_ad>
		if (err) {
   2d7b8:	4604      	mov	r4, r0
   2d7ba:	b958      	cbnz	r0, 2d7d4 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   2d7bc:	f1ba 0f00 	cmp.w	sl, #0
   2d7c0:	d13a      	bne.n	2d838 <le_adv_update.constprop.0+0xb6>
   2d7c2:	3510      	adds	r5, #16
   2d7c4:	e8d5 3fef 	ldaex	r3, [r5]
   2d7c8:	f043 0304 	orr.w	r3, r3, #4
   2d7cc:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2d7d0:	2a00      	cmp	r2, #0
   2d7d2:	d1f7      	bne.n	2d7c4 <le_adv_update.constprop.0+0x42>
}
   2d7d4:	4620      	mov	r0, r4
   2d7d6:	b007      	add	sp, #28
   2d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2d7dc:	f7ed f946 	bl	1aa6c <bt_get_name>
   2d7e0:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2d7e2:	b9e4      	cbnz	r4, 2d81e <le_adv_update.constprop.0+0x9c>
   2d7e4:	bb37      	cbnz	r7, 2d834 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   2d7e6:	4658      	mov	r0, fp
   2d7e8:	f7db fe0f 	bl	940a <strlen>
   2d7ec:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2d7ee:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2d7f0:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2d7f4:	f88d 3000 	strb.w	r3, [sp]
   2d7f8:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2d7fc:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2d800:	d1d4      	bne.n	2d7ac <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2d802:	2202      	movs	r2, #2
			d[1].data = &data;
   2d804:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2d808:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2d80a:	e7d0      	b.n	2d7ae <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d80c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2d810:	3a08      	subs	r2, #8
   2d812:	2a01      	cmp	r2, #1
   2d814:	d924      	bls.n	2d860 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2d816:	3301      	adds	r3, #1
   2d818:	4598      	cmp	r8, r3
   2d81a:	d1f7      	bne.n	2d80c <le_adv_update.constprop.0+0x8a>
   2d81c:	e7e2      	b.n	2d7e4 <le_adv_update.constprop.0+0x62>
   2d81e:	2300      	movs	r3, #0
   2d820:	e7fa      	b.n	2d818 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d822:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2d826:	3a08      	subs	r2, #8
   2d828:	2a01      	cmp	r2, #1
   2d82a:	d919      	bls.n	2d860 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2d82c:	3301      	adds	r3, #1
   2d82e:	4599      	cmp	r9, r3
   2d830:	d1f7      	bne.n	2d822 <le_adv_update.constprop.0+0xa0>
   2d832:	e7d8      	b.n	2d7e6 <le_adv_update.constprop.0+0x64>
   2d834:	2300      	movs	r3, #0
   2d836:	e7fa      	b.n	2d82e <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2d838:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2d83a:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2d83c:	bf08      	it	eq
   2d83e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d840:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   2d844:	bf08      	it	eq
   2d846:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d848:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2d84a:	bf08      	it	eq
   2d84c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2d850:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d854:	f7ed fcca 	bl	1b1ec <hci_set_ad>
		if (err) {
   2d858:	2800      	cmp	r0, #0
   2d85a:	d0b2      	beq.n	2d7c2 <le_adv_update.constprop.0+0x40>
   2d85c:	4604      	mov	r4, r0
   2d85e:	e7b9      	b.n	2d7d4 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   2d860:	f06f 0415 	mvn.w	r4, #21
   2d864:	e7b6      	b.n	2d7d4 <le_adv_update.constprop.0+0x52>

0002d866 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2d866:	6843      	ldr	r3, [r0, #4]
   2d868:	f013 0008 	ands.w	r0, r3, #8
   2d86c:	d00a      	beq.n	2d884 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2d86e:	035a      	lsls	r2, r3, #13
   2d870:	d407      	bmi.n	2d882 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2d872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2d876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2d87a:	bf14      	ite	ne
   2d87c:	2002      	movne	r0, #2
   2d87e:	2001      	moveq	r0, #1
   2d880:	4770      	bx	lr
   2d882:	2001      	movs	r0, #1
}
   2d884:	4770      	bx	lr

0002d886 <bt_le_adv_set_enable_legacy>:
{
   2d886:	b570      	push	{r4, r5, r6, lr}
   2d888:	4606      	mov	r6, r0
   2d88a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2d88c:	f242 000a 	movw	r0, #8202	; 0x200a
   2d890:	2101      	movs	r1, #1
{
   2d892:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2d894:	f7ec fa18 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   2d898:	4604      	mov	r4, r0
   2d89a:	b1b0      	cbz	r0, 2d8ca <bt_le_adv_set_enable_legacy+0x44>
   2d89c:	300c      	adds	r0, #12
	if (enable) {
   2d89e:	b195      	cbz	r5, 2d8c6 <bt_le_adv_set_enable_legacy+0x40>
   2d8a0:	2101      	movs	r1, #1
   2d8a2:	f001 fdd5 	bl	2f450 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2d8a6:	4620      	mov	r0, r4
   2d8a8:	f106 0210 	add.w	r2, r6, #16
   2d8ac:	a903      	add	r1, sp, #12
   2d8ae:	2307      	movs	r3, #7
   2d8b0:	9500      	str	r5, [sp, #0]
   2d8b2:	f7ec f9f7 	bl	19ca4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2d8b6:	2200      	movs	r2, #0
   2d8b8:	4621      	mov	r1, r4
   2d8ba:	f242 000a 	movw	r0, #8202	; 0x200a
   2d8be:	f7ec fa3d 	bl	19d3c <bt_hci_cmd_send_sync>
}
   2d8c2:	b006      	add	sp, #24
   2d8c4:	bd70      	pop	{r4, r5, r6, pc}
   2d8c6:	4629      	mov	r1, r5
   2d8c8:	e7eb      	b.n	2d8a2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2d8ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d8ce:	e7f8      	b.n	2d8c2 <bt_le_adv_set_enable_legacy+0x3c>

0002d8d0 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2d8d0:	f7ff bfd9 	b.w	2d886 <bt_le_adv_set_enable_legacy>

0002d8d4 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2d8d4:	3018      	adds	r0, #24
   2d8d6:	f003 bc2f 	b.w	31138 <k_work_cancel_delayable>

0002d8da <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d8da:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d8dc:	ab0b      	add	r3, sp, #44	; 0x2c
   2d8de:	9305      	str	r3, [sp, #20]
   2d8e0:	9303      	str	r3, [sp, #12]
   2d8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d8e4:	2201      	movs	r2, #1
   2d8e6:	9302      	str	r3, [sp, #8]
   2d8e8:	2300      	movs	r3, #0
   2d8ea:	4618      	mov	r0, r3
   2d8ec:	e9cd 3300 	strd	r3, r3, [sp]
   2d8f0:	f7e1 fe1a 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2d8f4:	b007      	add	sp, #28
   2d8f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d8fa <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2d8fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d8fc:	460d      	mov	r5, r1
   2d8fe:	4614      	mov	r4, r2
   2d900:	b0b1      	sub	sp, #196	; 0xc4
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2d902:	b370      	cbz	r0, 2d962 <bt_encrypt_le+0x68>
   2d904:	b369      	cbz	r1, 2d962 <bt_encrypt_le+0x68>
   2d906:	b362      	cbz	r2, 2d962 <bt_encrypt_le+0x68>
	for (; length > 0; length--) {
   2d908:	466e      	mov	r6, sp
   2d90a:	4632      	mov	r2, r6
   2d90c:	4637      	mov	r7, r6
   2d90e:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   2d912:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   2d916:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   2d918:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   2d91c:	d1f9      	bne.n	2d912 <bt_encrypt_le+0x18>
	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2d91e:	4631      	mov	r1, r6
   2d920:	a804      	add	r0, sp, #16
   2d922:	f7e3 fa73 	bl	10e0c <tc_aes128_set_encrypt_key>
   2d926:	b1e0      	cbz	r0, 2d962 <bt_encrypt_le+0x68>
   2d928:	f105 0310 	add.w	r3, r5, #16
		*pdst++ = *psrc--;
   2d92c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   2d930:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   2d932:	f806 2b01 	strb.w	r2, [r6], #1
	for (; length > 0; length--) {
   2d936:	d1f9      	bne.n	2d92c <bt_encrypt_le+0x32>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2d938:	4639      	mov	r1, r7
   2d93a:	4620      	mov	r0, r4
   2d93c:	aa04      	add	r2, sp, #16
   2d93e:	f7fd fc3c 	bl	2b1ba <tc_aes_encrypt>
   2d942:	b170      	cbz	r0, 2d962 <bt_encrypt_le+0x68>
   2d944:	1e63      	subs	r3, r4, #1
   2d946:	f104 0210 	add.w	r2, r4, #16
   2d94a:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2d94c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2d950:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2d954:	429c      	cmp	r4, r3
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2d956:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2d958:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2d95a:	d1f7      	bne.n	2d94c <bt_encrypt_le+0x52>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   2d95c:	2000      	movs	r0, #0
}
   2d95e:	b031      	add	sp, #196	; 0xc4
   2d960:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   2d962:	f06f 0015 	mvn.w	r0, #21
   2d966:	e7fa      	b.n	2d95e <bt_encrypt_le+0x64>

0002d968 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d96a:	ab0b      	add	r3, sp, #44	; 0x2c
   2d96c:	9305      	str	r3, [sp, #20]
   2d96e:	9303      	str	r3, [sp, #12]
   2d970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d972:	9302      	str	r3, [sp, #8]
   2d974:	2300      	movs	r3, #0
   2d976:	4618      	mov	r0, r3
   2d978:	e9cd 3300 	strd	r3, r3, [sp]
   2d97c:	f7e1 fdd4 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2d980:	b007      	add	sp, #28
   2d982:	f85d fb04 	ldr.w	pc, [sp], #4

0002d986 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d986:	2200      	movs	r2, #0
	return list->head;
   2d988:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d98a:	b90b      	cbnz	r3, 2d990 <sys_slist_find_and_remove+0xa>
   2d98c:	4618      	mov	r0, r3
   2d98e:	4770      	bx	lr
   2d990:	428b      	cmp	r3, r1
   2d992:	d110      	bne.n	2d9b6 <sys_slist_find_and_remove+0x30>
	return node->next;
   2d994:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d996:	b942      	cbnz	r2, 2d9aa <sys_slist_find_and_remove+0x24>
   2d998:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2d99a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d99c:	4291      	cmp	r1, r2
   2d99e:	d100      	bne.n	2d9a2 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2d9a0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2d9a2:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d9a4:	2001      	movs	r0, #1
	parent->next = child;
   2d9a6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d9a8:	4770      	bx	lr
	parent->next = child;
   2d9aa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d9ac:	6843      	ldr	r3, [r0, #4]
   2d9ae:	4299      	cmp	r1, r3
	list->tail = node;
   2d9b0:	bf08      	it	eq
   2d9b2:	6042      	streq	r2, [r0, #4]
}
   2d9b4:	e7f5      	b.n	2d9a2 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2d9b6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d9b8:	681b      	ldr	r3, [r3, #0]
   2d9ba:	e7e6      	b.n	2d98a <sys_slist_find_and_remove+0x4>

0002d9bc <atomic_and>:
{
   2d9bc:	4603      	mov	r3, r0
   2d9be:	b510      	push	{r4, lr}
}
   2d9c0:	e8d3 0fef 	ldaex	r0, [r3]
   2d9c4:	ea00 0201 	and.w	r2, r0, r1
   2d9c8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d9cc:	2c00      	cmp	r4, #0
   2d9ce:	d1f7      	bne.n	2d9c0 <atomic_and+0x4>
   2d9d0:	bd10      	pop	{r4, pc}

0002d9d2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d9d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d9d4:	ab0b      	add	r3, sp, #44	; 0x2c
   2d9d6:	9305      	str	r3, [sp, #20]
   2d9d8:	9303      	str	r3, [sp, #12]
   2d9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d9dc:	9302      	str	r3, [sp, #8]
   2d9de:	2300      	movs	r3, #0
   2d9e0:	4618      	mov	r0, r3
   2d9e2:	e9cd 3300 	strd	r3, r3, [sp]
   2d9e6:	f7e1 fd9f 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2d9ea:	b007      	add	sp, #28
   2d9ec:	f85d fb04 	ldr.w	pc, [sp], #4

0002d9f0 <tx_complete_work>:
	tx_notify(conn);
   2d9f0:	3828      	subs	r0, #40	; 0x28
   2d9f2:	f7ee b8bd 	b.w	1bb70 <tx_notify>

0002d9f6 <bt_conn_reset_rx_state>:
{
   2d9f6:	b510      	push	{r4, lr}
   2d9f8:	4604      	mov	r4, r0
	if (!conn->rx) {
   2d9fa:	6900      	ldr	r0, [r0, #16]
   2d9fc:	b118      	cbz	r0, 2da06 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2d9fe:	f7f2 fdcd 	bl	2059c <net_buf_unref>
	conn->rx = NULL;
   2da02:	2300      	movs	r3, #0
   2da04:	6123      	str	r3, [r4, #16]
}
   2da06:	bd10      	pop	{r4, pc}

0002da08 <conn_cleanup>:
{
   2da08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2da0c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2da0e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2da10:	f104 0638 	add.w	r6, r4, #56	; 0x38
   2da14:	2300      	movs	r3, #0
   2da16:	2200      	movs	r2, #0
   2da18:	4630      	mov	r0, r6
   2da1a:	f001 fcaf 	bl	2f37c <net_buf_get>
   2da1e:	4603      	mov	r3, r0
   2da20:	b950      	cbnz	r0, 2da38 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   2da22:	4620      	mov	r0, r4
   2da24:	f7ff ffe7 	bl	2d9f6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2da28:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2da2c:	2200      	movs	r2, #0
}
   2da2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2da32:	2300      	movs	r3, #0
   2da34:	f7f8 baaa 	b.w	25f8c <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2da38:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   2da3a:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   2da3c:	f7f2 fdae 	bl	2059c <net_buf_unref>
		if (tx) {
   2da40:	2d00      	cmp	r5, #0
   2da42:	d0e7      	beq.n	2da14 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   2da44:	4629      	mov	r1, r5
   2da46:	4620      	mov	r0, r4
   2da48:	f7ee f8c2 	bl	1bbd0 <conn_tx_destroy>
   2da4c:	e7e0      	b.n	2da10 <conn_cleanup+0x8>

0002da4e <bt_conn_ref>:
{
   2da4e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2da50:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2da54:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   2da58:	b15b      	cbz	r3, 2da72 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2da5a:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2da5c:	e8d2 4fef 	ldaex	r4, [r2]
   2da60:	429c      	cmp	r4, r3
   2da62:	d104      	bne.n	2da6e <bt_conn_ref+0x20>
   2da64:	e8c2 1fec 	stlex	ip, r1, [r2]
   2da68:	f1bc 0f00 	cmp.w	ip, #0
   2da6c:	d1f6      	bne.n	2da5c <bt_conn_ref+0xe>
   2da6e:	d1f1      	bne.n	2da54 <bt_conn_ref+0x6>
}
   2da70:	bd10      	pop	{r4, pc}
			return NULL;
   2da72:	4618      	mov	r0, r3
   2da74:	e7fc      	b.n	2da70 <bt_conn_ref+0x22>

0002da76 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2da76:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2da7a:	e8d3 2fef 	ldaex	r2, [r3]
   2da7e:	3a01      	subs	r2, #1
   2da80:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2da84:	2900      	cmp	r1, #0
   2da86:	d1f8      	bne.n	2da7a <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2da88:	f240 1201 	movw	r2, #257	; 0x101
   2da8c:	8841      	ldrh	r1, [r0, #2]
   2da8e:	4291      	cmp	r1, r2
   2da90:	d104      	bne.n	2da9c <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2da92:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2da96:	b90b      	cbnz	r3, 2da9c <bt_conn_unref+0x26>
		bt_le_adv_resume();
   2da98:	f7ed be58 	b.w	1b74c <bt_le_adv_resume>
}
   2da9c:	4770      	bx	lr

0002da9e <conn_lookup_handle>:
{
   2da9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2daa2:	4607      	mov	r7, r0
   2daa4:	460e      	mov	r6, r1
   2daa6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2daa8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2daaa:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2daae:	42b4      	cmp	r4, r6
   2dab0:	d103      	bne.n	2daba <conn_lookup_handle+0x1c>
	return NULL;
   2dab2:	2300      	movs	r3, #0
}
   2dab4:	4618      	mov	r0, r3
   2dab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2daba:	fb09 7004 	mla	r0, r9, r4, r7
   2dabe:	f7ff ffc6 	bl	2da4e <bt_conn_ref>
   2dac2:	4603      	mov	r3, r0
		if (!conn) {
   2dac4:	b158      	cbz	r0, 2dade <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2dac6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2dac8:	2d01      	cmp	r5, #1
   2daca:	d002      	beq.n	2dad2 <conn_lookup_handle+0x34>
   2dacc:	3d07      	subs	r5, #7
   2dace:	2d01      	cmp	r5, #1
   2dad0:	d803      	bhi.n	2dada <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2dad2:	881a      	ldrh	r2, [r3, #0]
   2dad4:	4542      	cmp	r2, r8
   2dad6:	d0ed      	beq.n	2dab4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2dad8:	4618      	mov	r0, r3
   2dada:	f7ff ffcc 	bl	2da76 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2dade:	3401      	adds	r4, #1
   2dae0:	e7e5      	b.n	2daae <conn_lookup_handle+0x10>

0002dae2 <bt_conn_connected>:
{
   2dae2:	b510      	push	{r4, lr}
   2dae4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2dae6:	f7ee fee3 	bl	1c8b0 <bt_l2cap_connected>
	notify_connected(conn);
   2daea:	4620      	mov	r0, r4
}
   2daec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2daf0:	f7ee b820 	b.w	1bb34 <notify_connected>

0002daf4 <bt_conn_disconnect>:
{
   2daf4:	b510      	push	{r4, lr}
	switch (conn->state) {
   2daf6:	7b43      	ldrb	r3, [r0, #13]
{
   2daf8:	4604      	mov	r4, r0
	switch (conn->state) {
   2dafa:	3b02      	subs	r3, #2
   2dafc:	2b06      	cmp	r3, #6
   2dafe:	d816      	bhi.n	2db2e <bt_conn_disconnect+0x3a>
   2db00:	e8df f003 	tbb	[pc, r3]
   2db04:	15151504 	.word	0x15151504
   2db08:	0b09      	.short	0x0b09
   2db0a:	09          	.byte	0x09
   2db0b:	00          	.byte	0x00
		conn->err = reason;
   2db0c:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2db0e:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2db10:	4620      	mov	r0, r4
   2db12:	f7ee fa79 	bl	1c008 <bt_conn_set_state>
{
   2db16:	2000      	movs	r0, #0
}
   2db18:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2db1a:	8800      	ldrh	r0, [r0, #0]
   2db1c:	f7ff fc52 	bl	2d3c4 <bt_hci_disconnect>
	if (err) {
   2db20:	2800      	cmp	r0, #0
   2db22:	d1f9      	bne.n	2db18 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2db24:	7b63      	ldrb	r3, [r4, #13]
   2db26:	2b07      	cmp	r3, #7
   2db28:	d1f5      	bne.n	2db16 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2db2a:	2108      	movs	r1, #8
   2db2c:	e7f0      	b.n	2db10 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2db2e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2db32:	e7f1      	b.n	2db18 <bt_conn_disconnect+0x24>

0002db34 <bt_conn_set_security>:
{
   2db34:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2db36:	7b43      	ldrb	r3, [r0, #13]
{
   2db38:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2db3a:	2b07      	cmp	r3, #7
{
   2db3c:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2db3e:	d122      	bne.n	2db86 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2db40:	7a43      	ldrb	r3, [r0, #9]
   2db42:	428b      	cmp	r3, r1
   2db44:	d215      	bcs.n	2db72 <bt_conn_set_security+0x3e>
   2db46:	7a83      	ldrb	r3, [r0, #10]
   2db48:	428b      	cmp	r3, r1
   2db4a:	d212      	bcs.n	2db72 <bt_conn_set_security+0x3e>
	if (val) {
   2db4c:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2db4e:	f100 0004 	add.w	r0, r0, #4
   2db52:	d510      	bpl.n	2db76 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2db54:	e8d0 3fef 	ldaex	r3, [r0]
   2db58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2db5c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2db60:	2a00      	cmp	r2, #0
   2db62:	d1f7      	bne.n	2db54 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2db64:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   2db68:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2db6a:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2db6c:	f7f1 fd82 	bl	1f674 <bt_smp_start_security>
	if (err) {
   2db70:	b930      	cbnz	r0, 2db80 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   2db72:	2000      	movs	r0, #0
}
   2db74:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2db76:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2db7a:	f7ff ff1f 	bl	2d9bc <atomic_and>
   2db7e:	e7f1      	b.n	2db64 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   2db80:	7a63      	ldrb	r3, [r4, #9]
   2db82:	72a3      	strb	r3, [r4, #10]
   2db84:	e7f6      	b.n	2db74 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   2db86:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2db8a:	e7f3      	b.n	2db74 <bt_conn_set_security+0x40>

0002db8c <bt_conn_get_security>:
}
   2db8c:	7a40      	ldrb	r0, [r0, #9]
   2db8e:	4770      	bx	lr

0002db90 <bt_conn_is_peer_addr_le>:
{
   2db90:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2db92:	7a03      	ldrb	r3, [r0, #8]
{
   2db94:	4604      	mov	r4, r0
	if (id != conn->id) {
   2db96:	428b      	cmp	r3, r1
{
   2db98:	4615      	mov	r5, r2
	if (id != conn->id) {
   2db9a:	d115      	bne.n	2dbc8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2db9c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2dba0:	2207      	movs	r2, #7
   2dba2:	4628      	mov	r0, r5
   2dba4:	f003 fe33 	bl	3180e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2dba8:	b180      	cbz	r0, 2dbcc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2dbaa:	78e3      	ldrb	r3, [r4, #3]
   2dbac:	2207      	movs	r2, #7
   2dbae:	b943      	cbnz	r3, 2dbc2 <bt_conn_is_peer_addr_le+0x32>
   2dbb0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2dbb4:	4628      	mov	r0, r5
   2dbb6:	f003 fe2a 	bl	3180e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2dbba:	fab0 f080 	clz	r0, r0
   2dbbe:	0940      	lsrs	r0, r0, #5
}
   2dbc0:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2dbc2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2dbc6:	e7f5      	b.n	2dbb4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2dbc8:	2000      	movs	r0, #0
   2dbca:	e7f9      	b.n	2dbc0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2dbcc:	2001      	movs	r0, #1
   2dbce:	e7f7      	b.n	2dbc0 <bt_conn_is_peer_addr_le+0x30>

0002dbd0 <bt_conn_get_dst>:
}
   2dbd0:	3088      	adds	r0, #136	; 0x88
   2dbd2:	4770      	bx	lr

0002dbd4 <bt_conn_le_conn_update>:
{
   2dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dbd6:	4607      	mov	r7, r0
   2dbd8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2dbda:	f242 0013 	movw	r0, #8211	; 0x2013
   2dbde:	210e      	movs	r1, #14
   2dbe0:	f7ec f872 	bl	19cc8 <bt_hci_cmd_create>
	if (!buf) {
   2dbe4:	4606      	mov	r6, r0
   2dbe6:	b1d0      	cbz	r0, 2dc1e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2dbe8:	210e      	movs	r1, #14
   2dbea:	300c      	adds	r0, #12
   2dbec:	f001 fc21 	bl	2f432 <net_buf_simple_add>
   2dbf0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2dbf2:	220e      	movs	r2, #14
   2dbf4:	2100      	movs	r1, #0
   2dbf6:	f003 fe54 	bl	318a2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2dbfa:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dbfc:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2dbfe:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2dc00:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dc02:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2dc04:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2dc06:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dc08:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2dc0c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2dc0e:	88ab      	ldrh	r3, [r5, #4]
   2dc10:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2dc12:	88eb      	ldrh	r3, [r5, #6]
   2dc14:	8123      	strh	r3, [r4, #8]
}
   2dc16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dc1a:	f7ec b88f 	b.w	19d3c <bt_hci_cmd_send_sync>
}
   2dc1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dc24 <l2cap_connected>:
}
   2dc24:	4770      	bx	lr

0002dc26 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2dc26:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2dc28:	ab0b      	add	r3, sp, #44	; 0x2c
   2dc2a:	9305      	str	r3, [sp, #20]
   2dc2c:	9303      	str	r3, [sp, #12]
   2dc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dc30:	9302      	str	r3, [sp, #8]
   2dc32:	2300      	movs	r3, #0
   2dc34:	4618      	mov	r0, r3
   2dc36:	e9cd 3300 	strd	r3, r3, [sp]
   2dc3a:	f7e1 fc75 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2dc3e:	b007      	add	sp, #28
   2dc40:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc44 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2dc44:	4770      	bx	lr

0002dc46 <bt_l2cap_chan_del>:
{
   2dc46:	b570      	push	{r4, r5, r6, lr}
   2dc48:	4604      	mov	r4, r0
	if (!chan->conn) {
   2dc4a:	e9d0 3500 	ldrd	r3, r5, [r0]
   2dc4e:	b123      	cbz	r3, 2dc5a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2dc50:	686b      	ldr	r3, [r5, #4]
   2dc52:	b103      	cbz	r3, 2dc56 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2dc54:	4798      	blx	r3
	chan->conn = NULL;
   2dc56:	2300      	movs	r3, #0
   2dc58:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2dc5a:	68e3      	ldr	r3, [r4, #12]
   2dc5c:	b10b      	cbz	r3, 2dc62 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2dc5e:	4620      	mov	r0, r4
   2dc60:	4798      	blx	r3
	if (ops->released) {
   2dc62:	6a2b      	ldr	r3, [r5, #32]
   2dc64:	b11b      	cbz	r3, 2dc6e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2dc66:	4620      	mov	r0, r4
}
   2dc68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2dc6c:	4718      	bx	r3
}
   2dc6e:	bd70      	pop	{r4, r5, r6, pc}

0002dc70 <bt_l2cap_disconnected>:
{
   2dc70:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2dc72:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dc74:	b130      	cbz	r0, 2dc84 <bt_l2cap_disconnected+0x14>
	return node->next;
   2dc76:	f850 4908 	ldr.w	r4, [r0], #-8
   2dc7a:	b104      	cbz	r4, 2dc7e <bt_l2cap_disconnected+0xe>
   2dc7c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2dc7e:	f7ff ffe2 	bl	2dc46 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dc82:	b904      	cbnz	r4, 2dc86 <bt_l2cap_disconnected+0x16>
}
   2dc84:	bd38      	pop	{r3, r4, r5, pc}
   2dc86:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dc88:	b12d      	cbz	r5, 2dc96 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2dc8a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dc8c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2dc8e:	f7ff ffda 	bl	2dc46 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dc92:	462c      	mov	r4, r5
   2dc94:	e7f7      	b.n	2dc86 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2dc96:	4620      	mov	r0, r4
}
   2dc98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2dc9c:	f7ff bfd3 	b.w	2dc46 <bt_l2cap_chan_del>

0002dca0 <bt_l2cap_security_changed>:
{
   2dca0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2dca2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2dca4:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dca6:	b1bb      	cbz	r3, 2dcd8 <bt_l2cap_security_changed+0x38>
   2dca8:	4618      	mov	r0, r3
	return node->next;
   2dcaa:	f850 4908 	ldr.w	r4, [r0], #-8
   2dcae:	b104      	cbz	r4, 2dcb2 <bt_l2cap_security_changed+0x12>
   2dcb0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2dcb2:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2dcb6:	689b      	ldr	r3, [r3, #8]
   2dcb8:	b10b      	cbz	r3, 2dcbe <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2dcba:	4629      	mov	r1, r5
   2dcbc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dcbe:	b15c      	cbz	r4, 2dcd8 <bt_l2cap_security_changed+0x38>
   2dcc0:	4620      	mov	r0, r4
   2dcc2:	68a4      	ldr	r4, [r4, #8]
   2dcc4:	6843      	ldr	r3, [r0, #4]
   2dcc6:	b124      	cbz	r4, 2dcd2 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2dcc8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dcca:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2dccc:	2b00      	cmp	r3, #0
   2dcce:	d1f4      	bne.n	2dcba <bt_l2cap_security_changed+0x1a>
   2dcd0:	e7f6      	b.n	2dcc0 <bt_l2cap_security_changed+0x20>
   2dcd2:	689b      	ldr	r3, [r3, #8]
   2dcd4:	2b00      	cmp	r3, #0
   2dcd6:	d1f0      	bne.n	2dcba <bt_l2cap_security_changed+0x1a>
}
   2dcd8:	bd38      	pop	{r3, r4, r5, pc}

0002dcda <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2dcda:	3104      	adds	r1, #4
   2dcdc:	f7ee ba84 	b.w	1c1e8 <bt_conn_create_pdu_timeout>

0002dce0 <bt_l2cap_send_cb>:
{
   2dce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dce4:	4614      	mov	r4, r2
   2dce6:	4605      	mov	r5, r0
   2dce8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2dcea:	f102 000c 	add.w	r0, r2, #12
   2dcee:	2104      	movs	r1, #4
   2dcf0:	461e      	mov	r6, r3
   2dcf2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2dcf6:	f001 fbb3 	bl	2f460 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2dcfa:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2dcfc:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2dcfe:	3a04      	subs	r2, #4
   2dd00:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2dd02:	4643      	mov	r3, r8
   2dd04:	4632      	mov	r2, r6
   2dd06:	4621      	mov	r1, r4
   2dd08:	4628      	mov	r0, r5
}
   2dd0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2dd0e:	f7ee b8d3 	b.w	1beb8 <bt_conn_send_cb>

0002dd12 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2dd12:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dd14:	b128      	cbz	r0, 2dd22 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2dd16:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dd18:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2dd1a:	428b      	cmp	r3, r1
   2dd1c:	d001      	beq.n	2dd22 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   2dd1e:	6880      	ldr	r0, [r0, #8]
   2dd20:	e7f8      	b.n	2dd14 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2dd22:	4770      	bx	lr

0002dd24 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2dd24:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dd26:	b128      	cbz	r0, 2dd34 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2dd28:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dd2a:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2dd2c:	428b      	cmp	r3, r1
   2dd2e:	d001      	beq.n	2dd34 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2dd30:	6880      	ldr	r0, [r0, #8]
   2dd32:	e7f8      	b.n	2dd26 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2dd34:	4770      	bx	lr

0002dd36 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2dd36:	4770      	bx	lr

0002dd38 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2dd38:	4603      	mov	r3, r0
	return list->head;
   2dd3a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2dd3c:	b128      	cbz	r0, 2dd4a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dd3e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2dd40:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dd42:	4288      	cmp	r0, r1
	list->head = node;
   2dd44:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2dd46:	bf08      	it	eq
   2dd48:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2dd4a:	4770      	bx	lr

0002dd4c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2dd4c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2dd4e:	2000      	movs	r0, #0

	while (buf) {
   2dd50:	b903      	cbnz	r3, 2dd54 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2dd52:	4770      	bx	lr
		bytes += buf->len;
   2dd54:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2dd56:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2dd58:	4410      	add	r0, r2
		buf = buf->frags;
   2dd5a:	e7f9      	b.n	2dd50 <net_buf_frags_len+0x4>

0002dd5c <attr_read_type_cb>:
{
   2dd5c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2dd5e:	68d4      	ldr	r4, [r2, #12]
   2dd60:	3102      	adds	r1, #2
   2dd62:	7823      	ldrb	r3, [r4, #0]
   2dd64:	b913      	cbnz	r3, 2dd6c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2dd66:	7021      	strb	r1, [r4, #0]
	return true;
   2dd68:	2001      	movs	r0, #1
}
   2dd6a:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2dd6c:	428b      	cmp	r3, r1
   2dd6e:	d0fb      	beq.n	2dd68 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2dd70:	8a03      	ldrh	r3, [r0, #16]
   2dd72:	3b02      	subs	r3, #2
   2dd74:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2dd76:	2000      	movs	r0, #0
   2dd78:	6110      	str	r0, [r2, #16]
		return false;
   2dd7a:	e7f6      	b.n	2dd6a <attr_read_type_cb+0xe>

0002dd7c <att_prepare_write_req>:
}
   2dd7c:	2006      	movs	r0, #6
   2dd7e:	4770      	bx	lr

0002dd80 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dd80:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2dd84:	4108      	asrs	r0, r1
}
   2dd86:	f000 0001 	and.w	r0, r0, #1
   2dd8a:	4770      	bx	lr

0002dd8c <write_cb>:
{
   2dd8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2dd8e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2dd90:	4601      	mov	r1, r0
{
   2dd92:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2dd94:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2dd98:	6820      	ldr	r0, [r4, #0]
   2dd9a:	f000 fe39 	bl	2ea10 <bt_gatt_check_perm>
   2dd9e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2dda0:	bb00      	cbnz	r0, 2dde4 <write_cb+0x58>
	if (!data->req) {
   2dda2:	7a23      	ldrb	r3, [r4, #8]
   2dda4:	b1b3      	cbz	r3, 2ddd4 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2dda6:	f1a3 0218 	sub.w	r2, r3, #24
   2ddaa:	4253      	negs	r3, r2
   2ddac:	4153      	adcs	r3, r2
   2ddae:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2ddb0:	9301      	str	r3, [sp, #4]
   2ddb2:	8a63      	ldrh	r3, [r4, #18]
   2ddb4:	4629      	mov	r1, r5
   2ddb6:	9300      	str	r3, [sp, #0]
   2ddb8:	68ae      	ldr	r6, [r5, #8]
   2ddba:	8a23      	ldrh	r3, [r4, #16]
   2ddbc:	68e2      	ldr	r2, [r4, #12]
   2ddbe:	6820      	ldr	r0, [r4, #0]
   2ddc0:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2ddc2:	2800      	cmp	r0, #0
   2ddc4:	db08      	blt.n	2ddd8 <write_cb+0x4c>
   2ddc6:	8a23      	ldrh	r3, [r4, #16]
   2ddc8:	4283      	cmp	r3, r0
   2ddca:	d10e      	bne.n	2ddea <write_cb+0x5e>
	data->err = 0U;
   2ddcc:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2ddce:	2001      	movs	r0, #1
	data->err = 0U;
   2ddd0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2ddd2:	e008      	b.n	2dde6 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2ddd4:	2302      	movs	r3, #2
   2ddd6:	e7eb      	b.n	2ddb0 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2ddd8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2dddc:	d305      	bcc.n	2ddea <write_cb+0x5e>
		return -err;
   2ddde:	4240      	negs	r0, r0
   2dde0:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2dde2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2dde4:	2000      	movs	r0, #0
}
   2dde6:	b002      	add	sp, #8
   2dde8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2ddea:	200e      	movs	r0, #14
   2ddec:	e7f9      	b.n	2dde2 <write_cb+0x56>

0002ddee <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2ddee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2ddf0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2ddf4:	2300      	movs	r3, #0
   2ddf6:	461a      	mov	r2, r3
   2ddf8:	9300      	str	r3, [sp, #0]
   2ddfa:	f7f0 f8e5 	bl	1dfc8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2ddfe:	b005      	add	sp, #20
   2de00:	f85d fb04 	ldr.w	pc, [sp], #4

0002de04 <att_chan_mtu_updated>:
{
   2de04:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2de06:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2de08:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2de0a:	b352      	cbz	r2, 2de62 <att_chan_mtu_updated+0x5e>
	return node->next;
   2de0c:	6813      	ldr	r3, [r2, #0]
   2de0e:	b103      	cbz	r3, 2de12 <att_chan_mtu_updated+0xe>
   2de10:	3be0      	subs	r3, #224	; 0xe0
   2de12:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   2de16:	2200      	movs	r2, #0
   2de18:	4611      	mov	r1, r2
   2de1a:	e000      	b.n	2de1e <att_chan_mtu_updated+0x1a>
   2de1c:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   2de1e:	4284      	cmp	r4, r0
   2de20:	d007      	beq.n	2de32 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2de22:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2de24:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2de26:	42b1      	cmp	r1, r6
   2de28:	bf38      	it	cc
   2de2a:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2de2c:	42a2      	cmp	r2, r4
   2de2e:	bf38      	it	cc
   2de30:	4622      	movcc	r2, r4
   2de32:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2de34:	b12b      	cbz	r3, 2de42 <att_chan_mtu_updated+0x3e>
   2de36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2de3a:	2b00      	cmp	r3, #0
   2de3c:	d1ee      	bne.n	2de1c <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2de3e:	4284      	cmp	r4, r0
   2de40:	d1ef      	bne.n	2de22 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2de42:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2de44:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2de46:	428b      	cmp	r3, r1
   2de48:	d801      	bhi.n	2de4e <att_chan_mtu_updated+0x4a>
   2de4a:	4290      	cmp	r0, r2
   2de4c:	d90b      	bls.n	2de66 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2de4e:	4282      	cmp	r2, r0
   2de50:	bf38      	it	cc
   2de52:	4602      	movcc	r2, r0
   2de54:	4299      	cmp	r1, r3
   2de56:	6828      	ldr	r0, [r5, #0]
   2de58:	bf38      	it	cc
   2de5a:	4619      	movcc	r1, r3
}
   2de5c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2de5e:	f7f0 bcf7 	b.w	1e850 <bt_gatt_att_max_mtu_changed>
   2de62:	4611      	mov	r1, r2
   2de64:	e7ed      	b.n	2de42 <att_chan_mtu_updated+0x3e>
}
   2de66:	bc70      	pop	{r4, r5, r6}
   2de68:	4770      	bx	lr

0002de6a <attr_read_group_cb>:
	if (!data->rsp->len) {
   2de6a:	68d0      	ldr	r0, [r2, #12]
   2de6c:	3104      	adds	r1, #4
   2de6e:	7803      	ldrb	r3, [r0, #0]
   2de70:	b913      	cbnz	r3, 2de78 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2de72:	7001      	strb	r1, [r0, #0]
	return true;
   2de74:	2001      	movs	r0, #1
   2de76:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2de78:	428b      	cmp	r3, r1
   2de7a:	d0fb      	beq.n	2de74 <attr_read_group_cb+0xa>
		data->group = NULL;
   2de7c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2de7e:	6891      	ldr	r1, [r2, #8]
   2de80:	8a0b      	ldrh	r3, [r1, #16]
   2de82:	3b04      	subs	r3, #4
   2de84:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2de86:	6110      	str	r0, [r2, #16]
}
   2de88:	4770      	bx	lr

0002de8a <find_info_cb>:
{
   2de8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2de8c:	6893      	ldr	r3, [r2, #8]
{
   2de8e:	4605      	mov	r5, r0
   2de90:	460f      	mov	r7, r1
   2de92:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2de94:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   2de96:	b963      	cbnz	r3, 2deb2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2de98:	6850      	ldr	r0, [r2, #4]
   2de9a:	2101      	movs	r1, #1
   2de9c:	300c      	adds	r0, #12
   2de9e:	f001 fac8 	bl	2f432 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2dea2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2dea4:	682b      	ldr	r3, [r5, #0]
   2dea6:	781b      	ldrb	r3, [r3, #0]
   2dea8:	2b00      	cmp	r3, #0
   2deaa:	bf14      	ite	ne
   2deac:	2302      	movne	r3, #2
   2deae:	2301      	moveq	r3, #1
   2deb0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2deb2:	68a3      	ldr	r3, [r4, #8]
   2deb4:	781b      	ldrb	r3, [r3, #0]
   2deb6:	2b01      	cmp	r3, #1
   2deb8:	d003      	beq.n	2dec2 <find_info_cb+0x38>
   2deba:	2b02      	cmp	r3, #2
   2debc:	d019      	beq.n	2def2 <find_info_cb+0x68>
   2debe:	2000      	movs	r0, #0
   2dec0:	e016      	b.n	2def0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2dec2:	682b      	ldr	r3, [r5, #0]
   2dec4:	781b      	ldrb	r3, [r3, #0]
   2dec6:	2b00      	cmp	r3, #0
   2dec8:	d1f9      	bne.n	2debe <find_info_cb+0x34>
   2deca:	6860      	ldr	r0, [r4, #4]
   2decc:	2104      	movs	r1, #4
   2dece:	300c      	adds	r0, #12
   2ded0:	f001 faaf 	bl	2f432 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2ded4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2ded6:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2ded8:	682a      	ldr	r2, [r5, #0]
   2deda:	68e3      	ldr	r3, [r4, #12]
   2dedc:	8852      	ldrh	r2, [r2, #2]
   2dede:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2dee0:	6863      	ldr	r3, [r4, #4]
   2dee2:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2dee4:	8a1b      	ldrh	r3, [r3, #16]
   2dee6:	1ac0      	subs	r0, r0, r3
   2dee8:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2deea:	bf94      	ite	ls
   2deec:	2000      	movls	r0, #0
   2deee:	2001      	movhi	r0, #1
}
   2def0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2def2:	682b      	ldr	r3, [r5, #0]
   2def4:	781b      	ldrb	r3, [r3, #0]
   2def6:	2b02      	cmp	r3, #2
   2def8:	d1e1      	bne.n	2debe <find_info_cb+0x34>
   2defa:	6860      	ldr	r0, [r4, #4]
   2defc:	2112      	movs	r1, #18
   2defe:	300c      	adds	r0, #12
   2df00:	f001 fa97 	bl	2f432 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2df04:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2df06:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2df08:	682b      	ldr	r3, [r5, #0]
   2df0a:	68e2      	ldr	r2, [r4, #12]
   2df0c:	1c59      	adds	r1, r3, #1
   2df0e:	3202      	adds	r2, #2
   2df10:	3311      	adds	r3, #17
   2df12:	f851 0b04 	ldr.w	r0, [r1], #4
   2df16:	4299      	cmp	r1, r3
   2df18:	f842 0b04 	str.w	r0, [r2], #4
   2df1c:	d1f9      	bne.n	2df12 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2df1e:	6863      	ldr	r3, [r4, #4]
   2df20:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2df22:	8a1b      	ldrh	r3, [r3, #16]
   2df24:	1ac0      	subs	r0, r0, r3
   2df26:	2812      	cmp	r0, #18
   2df28:	e7df      	b.n	2deea <find_info_cb+0x60>

0002df2a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2df2a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2df2c:	ab0b      	add	r3, sp, #44	; 0x2c
   2df2e:	9305      	str	r3, [sp, #20]
   2df30:	9303      	str	r3, [sp, #12]
   2df32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2df34:	9302      	str	r3, [sp, #8]
   2df36:	2300      	movs	r3, #0
   2df38:	4618      	mov	r0, r3
   2df3a:	e9cd 3300 	strd	r3, r3, [sp]
   2df3e:	f7e1 faf3 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2df42:	b007      	add	sp, #28
   2df44:	f85d fb04 	ldr.w	pc, [sp], #4

0002df48 <chan_req_send>:
{
   2df48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df4a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2df4c:	6888      	ldr	r0, [r1, #8]
   2df4e:	f7ff fefd 	bl	2dd4c <net_buf_frags_len>
   2df52:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2df54:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2df56:	4283      	cmp	r3, r0
   2df58:	d30d      	bcc.n	2df76 <chan_req_send+0x2e>
	req->buf = NULL;
   2df5a:	2600      	movs	r6, #0
	chan->req = req;
   2df5c:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   2df60:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2df62:	4628      	mov	r0, r5
	req->buf = NULL;
   2df64:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2df66:	4639      	mov	r1, r7
   2df68:	f7ee fec0 	bl	1ccec <chan_send>
	if (err) {
   2df6c:	b110      	cbz	r0, 2df74 <chan_req_send+0x2c>
		req->buf = buf;
   2df6e:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2df70:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   2df74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2df76:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2df7a:	e7fb      	b.n	2df74 <chan_req_send+0x2c>

0002df7c <process_queue>:
{
   2df7c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2df7e:	2200      	movs	r2, #0
{
   2df80:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2df82:	2300      	movs	r3, #0
   2df84:	4608      	mov	r0, r1
{
   2df86:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2df88:	f001 f9f8 	bl	2f37c <net_buf_get>
	if (buf) {
   2df8c:	4605      	mov	r5, r0
   2df8e:	b158      	cbz	r0, 2dfa8 <process_queue+0x2c>
	return chan_send(chan, buf);
   2df90:	4601      	mov	r1, r0
   2df92:	4620      	mov	r0, r4
   2df94:	f7ee feaa 	bl	1ccec <chan_send>
		if (err) {
   2df98:	4604      	mov	r4, r0
   2df9a:	b118      	cbz	r0, 2dfa4 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2df9c:	4629      	mov	r1, r5
   2df9e:	4630      	mov	r0, r6
   2dfa0:	f002 ffec 	bl	30f7c <k_queue_prepend>
}
   2dfa4:	4620      	mov	r0, r4
   2dfa6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2dfa8:	f06f 0401 	mvn.w	r4, #1
   2dfac:	e7fa      	b.n	2dfa4 <process_queue+0x28>

0002dfae <bt_att_chan_send_rsp>:
{
   2dfae:	b538      	push	{r3, r4, r5, lr}
   2dfb0:	4604      	mov	r4, r0
   2dfb2:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2dfb4:	f7ee fe9a 	bl	1ccec <chan_send>
	if (err) {
   2dfb8:	b130      	cbz	r0, 2dfc8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2dfba:	4629      	mov	r1, r5
   2dfbc:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   2dfc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2dfc4:	f001 ba0d 	b.w	2f3e2 <net_buf_put>
}
   2dfc8:	bd38      	pop	{r3, r4, r5, pc}

0002dfca <att_chan_read>:
{
   2dfca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dfce:	4680      	mov	r8, r0
   2dfd0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2dfd2:	4610      	mov	r0, r2
{
   2dfd4:	4699      	mov	r9, r3
   2dfd6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2dfd8:	f7ff feb8 	bl	2dd4c <net_buf_frags_len>
   2dfdc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2dfe0:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2dfe2:	4283      	cmp	r3, r0
   2dfe4:	d97a      	bls.n	2e0dc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2dfe6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2dfea:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2dfec:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2dfee:	f001 f9fe 	bl	2f3ee <net_buf_frag_last>
	size_t len, total = 0;
   2dff2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2dff6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2dff8:	4630      	mov	r0, r6
   2dffa:	f7ff fea7 	bl	2dd4c <net_buf_frags_len>
   2dffe:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2e002:	f105 070c 	add.w	r7, r5, #12
   2e006:	1a24      	subs	r4, r4, r0
   2e008:	4638      	mov	r0, r7
   2e00a:	f001 fa56 	bl	2f4ba <net_buf_simple_tailroom>
   2e00e:	4284      	cmp	r4, r0
   2e010:	d211      	bcs.n	2e036 <att_chan_read+0x6c>
   2e012:	4630      	mov	r0, r6
   2e014:	f7ff fe9a 	bl	2dd4c <net_buf_frags_len>
   2e018:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2e01c:	1a24      	subs	r4, r4, r0
		if (!len) {
   2e01e:	bb34      	cbnz	r4, 2e06e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2e020:	7ab0      	ldrb	r0, [r6, #10]
   2e022:	f7f2 f9f9 	bl	20418 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2e026:	2200      	movs	r2, #0
   2e028:	2300      	movs	r3, #0
   2e02a:	f001 f9a2 	bl	2f372 <net_buf_alloc_fixed>
			if (!frag) {
   2e02e:	4605      	mov	r5, r0
   2e030:	b930      	cbnz	r0, 2e040 <att_chan_read+0x76>
	return total;
   2e032:	4657      	mov	r7, sl
   2e034:	e02c      	b.n	2e090 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2e036:	4638      	mov	r0, r7
   2e038:	f001 fa3f 	bl	2f4ba <net_buf_simple_tailroom>
   2e03c:	4604      	mov	r4, r0
   2e03e:	e7ee      	b.n	2e01e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2e040:	4601      	mov	r1, r0
   2e042:	4630      	mov	r0, r6
   2e044:	f001 f9e4 	bl	2f410 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e048:	4630      	mov	r0, r6
   2e04a:	f7ff fe7f 	bl	2dd4c <net_buf_frags_len>
   2e04e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2e052:	f105 070c 	add.w	r7, r5, #12
   2e056:	1a24      	subs	r4, r4, r0
   2e058:	4638      	mov	r0, r7
   2e05a:	f001 fa2e 	bl	2f4ba <net_buf_simple_tailroom>
   2e05e:	4284      	cmp	r4, r0
   2e060:	d21a      	bcs.n	2e098 <att_chan_read+0xce>
   2e062:	4630      	mov	r0, r6
   2e064:	f7ff fe72 	bl	2dd4c <net_buf_frags_len>
   2e068:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2e06c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2e06e:	68e9      	ldr	r1, [r5, #12]
   2e070:	8a2a      	ldrh	r2, [r5, #16]
   2e072:	f8cd 9000 	str.w	r9, [sp]
   2e076:	f8db 7004 	ldr.w	r7, [fp, #4]
   2e07a:	440a      	add	r2, r1
   2e07c:	9803      	ldr	r0, [sp, #12]
   2e07e:	4659      	mov	r1, fp
   2e080:	b2a3      	uxth	r3, r4
   2e082:	47b8      	blx	r7
		if (read < 0) {
   2e084:	1e07      	subs	r7, r0, #0
   2e086:	da0c      	bge.n	2e0a2 <att_chan_read+0xd8>
				return total;
   2e088:	f1ba 0f00 	cmp.w	sl, #0
   2e08c:	bf18      	it	ne
   2e08e:	4657      	movne	r7, sl
}
   2e090:	4638      	mov	r0, r7
   2e092:	b005      	add	sp, #20
   2e094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e098:	4638      	mov	r0, r7
   2e09a:	f001 fa0e 	bl	2f4ba <net_buf_simple_tailroom>
   2e09e:	4604      	mov	r4, r0
   2e0a0:	e7e5      	b.n	2e06e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2e0a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e0a4:	b993      	cbnz	r3, 2e0cc <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2e0a6:	4639      	mov	r1, r7
   2e0a8:	f105 000c 	add.w	r0, r5, #12
   2e0ac:	f001 f9c1 	bl	2f432 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e0b0:	4630      	mov	r0, r6
   2e0b2:	f7ff fe4b 	bl	2dd4c <net_buf_frags_len>
   2e0b6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2e0ba:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e0bc:	4283      	cmp	r3, r0
		total += read;
   2e0be:	44ba      	add	sl, r7
		offset += read;
   2e0c0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e0c4:	d9b5      	bls.n	2e032 <att_chan_read+0x68>
   2e0c6:	42a7      	cmp	r7, r4
   2e0c8:	d096      	beq.n	2dff8 <att_chan_read+0x2e>
   2e0ca:	e7b2      	b.n	2e032 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2e0cc:	4639      	mov	r1, r7
   2e0ce:	4628      	mov	r0, r5
   2e0d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2e0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e0d4:	4798      	blx	r3
   2e0d6:	2800      	cmp	r0, #0
   2e0d8:	d1e5      	bne.n	2e0a6 <att_chan_read+0xdc>
   2e0da:	e7aa      	b.n	2e032 <att_chan_read+0x68>
		return 0;
   2e0dc:	2700      	movs	r7, #0
   2e0de:	e7d7      	b.n	2e090 <att_chan_read+0xc6>

0002e0e0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e0e0:	2200      	movs	r2, #0
	return list->head;
   2e0e2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e0e4:	b903      	cbnz	r3, 2e0e8 <sys_slist_find_and_remove.isra.0+0x8>
   2e0e6:	4770      	bx	lr
   2e0e8:	428b      	cmp	r3, r1
   2e0ea:	d10f      	bne.n	2e10c <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2e0ec:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e0ee:	b93a      	cbnz	r2, 2e100 <sys_slist_find_and_remove.isra.0+0x20>
   2e0f0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2e0f2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e0f4:	4291      	cmp	r1, r2
   2e0f6:	d100      	bne.n	2e0fa <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2e0f8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2e0fa:	2300      	movs	r3, #0
   2e0fc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e0fe:	4770      	bx	lr
	parent->next = child;
   2e100:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e102:	6843      	ldr	r3, [r0, #4]
   2e104:	4299      	cmp	r1, r3
	list->tail = node;
   2e106:	bf08      	it	eq
   2e108:	6042      	streq	r2, [r0, #4]
}
   2e10a:	e7f6      	b.n	2e0fa <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2e10c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e10e:	681b      	ldr	r3, [r3, #0]
   2e110:	e7e8      	b.n	2e0e4 <sys_slist_find_and_remove.isra.0+0x4>

0002e112 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2e112:	2006      	movs	r0, #6
   2e114:	4770      	bx	lr

0002e116 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e116:	2301      	movs	r3, #1
{
   2e118:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e11a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e11e:	e8d0 3fef 	ldaex	r3, [r0]
   2e122:	ea43 0201 	orr.w	r2, r3, r1
   2e126:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2e12a:	2c00      	cmp	r4, #0
   2e12c:	d1f7      	bne.n	2e11e <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2e12e:	4219      	tst	r1, r3
}
   2e130:	bf14      	ite	ne
   2e132:	2001      	movne	r0, #1
   2e134:	2000      	moveq	r0, #0
   2e136:	bd10      	pop	{r4, pc}

0002e138 <read_cb>:
{
   2e138:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2e13a:	2300      	movs	r3, #0
{
   2e13c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2e13e:	6816      	ldr	r6, [r2, #0]
{
   2e140:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2e142:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e144:	4629      	mov	r1, r5
	data->err = 0x00;
   2e146:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e148:	2295      	movs	r2, #149	; 0x95
   2e14a:	f000 fc61 	bl	2ea10 <bt_gatt_check_perm>
   2e14e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2e150:	b980      	cbnz	r0, 2e174 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e152:	e9cd 0000 	strd	r0, r0, [sp]
   2e156:	4629      	mov	r1, r5
   2e158:	4630      	mov	r0, r6
   2e15a:	88a3      	ldrh	r3, [r4, #4]
   2e15c:	68a2      	ldr	r2, [r4, #8]
   2e15e:	f7ff ff34 	bl	2dfca <att_chan_read>
	if (ret < 0) {
   2e162:	2800      	cmp	r0, #0
   2e164:	da09      	bge.n	2e17a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2e166:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2e16a:	bf32      	itee	cc
   2e16c:	200e      	movcc	r0, #14
		return -err;
   2e16e:	4240      	negcs	r0, r0
   2e170:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2e172:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2e174:	2000      	movs	r0, #0
}
   2e176:	b002      	add	sp, #8
   2e178:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2e17a:	2001      	movs	r0, #1
   2e17c:	e7fb      	b.n	2e176 <read_cb+0x3e>

0002e17e <read_vl_cb>:
{
   2e17e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2e182:	2300      	movs	r3, #0
{
   2e184:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2e186:	f8d2 8000 	ldr.w	r8, [r2]
{
   2e18a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2e18c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e190:	4631      	mov	r1, r6
	data->err = 0x00;
   2e192:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e194:	2295      	movs	r2, #149	; 0x95
   2e196:	f000 fc3b 	bl	2ea10 <bt_gatt_check_perm>
   2e19a:	4605      	mov	r5, r0
   2e19c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2e19e:	b9e0      	cbnz	r0, 2e1da <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2e1a0:	68a0      	ldr	r0, [r4, #8]
   2e1a2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2e1a6:	8a02      	ldrh	r2, [r0, #16]
   2e1a8:	1a9b      	subs	r3, r3, r2
   2e1aa:	2b01      	cmp	r3, #1
   2e1ac:	dd15      	ble.n	2e1da <read_vl_cb+0x5c>
   2e1ae:	2102      	movs	r1, #2
   2e1b0:	300c      	adds	r0, #12
   2e1b2:	f001 f93e 	bl	2f432 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e1b6:	e9cd 5500 	strd	r5, r5, [sp]
   2e1ba:	4607      	mov	r7, r0
   2e1bc:	88a3      	ldrh	r3, [r4, #4]
   2e1be:	4631      	mov	r1, r6
   2e1c0:	4640      	mov	r0, r8
   2e1c2:	68a2      	ldr	r2, [r4, #8]
   2e1c4:	f7ff ff01 	bl	2dfca <att_chan_read>
	if (read < 0) {
   2e1c8:	1e03      	subs	r3, r0, #0
   2e1ca:	da0a      	bge.n	2e1e2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2e1cc:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2e1d0:	bf32      	itee	cc
   2e1d2:	230e      	movcc	r3, #14
		return -err;
   2e1d4:	425b      	negcs	r3, r3
   2e1d6:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2e1d8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2e1da:	2000      	movs	r0, #0
}
   2e1dc:	b002      	add	sp, #8
   2e1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2e1e2:	2001      	movs	r0, #1
	rsp->len = read;
   2e1e4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2e1e6:	e7f9      	b.n	2e1dc <read_vl_cb+0x5e>

0002e1e8 <bt_att_sent>:
{
   2e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e1ea:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2e1ec:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2e1f0:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e1f2:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2e1f6:	e8d3 1fef 	ldaex	r1, [r3]
   2e1fa:	f021 0110 	bic.w	r1, r1, #16
   2e1fe:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e202:	2a00      	cmp	r2, #0
   2e204:	d1f7      	bne.n	2e1f6 <bt_att_sent+0xe>
	if (!att) {
   2e206:	b30c      	cbz	r4, 2e24c <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2e208:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2e20c:	b98b      	cbnz	r3, 2e232 <bt_att_sent+0x4a>
   2e20e:	6863      	ldr	r3, [r4, #4]
   2e210:	b17b      	cbz	r3, 2e232 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e212:	1d20      	adds	r0, r4, #4
   2e214:	f7ff fd90 	bl	2dd38 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e218:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e21a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e21c:	4638      	mov	r0, r7
   2e21e:	f7ff fe93 	bl	2df48 <chan_req_send>
   2e222:	2800      	cmp	r0, #0
   2e224:	da12      	bge.n	2e24c <bt_att_sent+0x64>
	return list->head;
   2e226:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2e228:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e22a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2e22c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e22e:	b903      	cbnz	r3, 2e232 <bt_att_sent+0x4a>
	list->tail = node;
   2e230:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2e232:	4638      	mov	r0, r7
   2e234:	f105 0194 	add.w	r1, r5, #148	; 0x94
   2e238:	f7ff fea0 	bl	2df7c <process_queue>
	if (!err) {
   2e23c:	b130      	cbz	r0, 2e24c <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2e23e:	4638      	mov	r0, r7
   2e240:	f104 010c 	add.w	r1, r4, #12
}
   2e244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2e248:	f7ff be98 	b.w	2df7c <process_queue>
}
   2e24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e24e <att_req_send_process>:
{
   2e24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2e252:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2e254:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e256:	2c00      	cmp	r4, #0
   2e258:	d03b      	beq.n	2e2d2 <att_req_send_process+0x84>
	return node->next;
   2e25a:	f854 69e0 	ldr.w	r6, [r4], #-224
   2e25e:	b106      	cbz	r6, 2e262 <att_req_send_process+0x14>
   2e260:	3ee0      	subs	r6, #224	; 0xe0
{
   2e262:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2e264:	f108 0704 	add.w	r7, r8, #4
{
   2e268:	461d      	mov	r5, r3
   2e26a:	e013      	b.n	2e294 <att_req_send_process+0x46>
		if (!req && prev &&
   2e26c:	b1c3      	cbz	r3, 2e2a0 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2e26e:	2103      	movs	r1, #3
   2e270:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2e274:	f7ff fd84 	bl	2dd80 <atomic_test_bit>
   2e278:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2e27a:	f103 0090 	add.w	r0, r3, #144	; 0x90
   2e27e:	f7ff fd7f 	bl	2dd80 <atomic_test_bit>
		if (!req && prev &&
   2e282:	4282      	cmp	r2, r0
   2e284:	d10c      	bne.n	2e2a0 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e286:	b326      	cbz	r6, 2e2d2 <att_req_send_process+0x84>
   2e288:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   2e28c:	b102      	cbz	r2, 2e290 <att_req_send_process+0x42>
   2e28e:	3ae0      	subs	r2, #224	; 0xe0
{
   2e290:	4634      	mov	r4, r6
   2e292:	4616      	mov	r6, r2
		if (chan->req) {
   2e294:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2e298:	2a00      	cmp	r2, #0
   2e29a:	d1f4      	bne.n	2e286 <att_req_send_process+0x38>
		if (!req && prev &&
   2e29c:	2d00      	cmp	r5, #0
   2e29e:	d0e5      	beq.n	2e26c <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2e2a0:	4638      	mov	r0, r7
   2e2a2:	f7ff fd49 	bl	2dd38 <sys_slist_get>
	if (node) {
   2e2a6:	4605      	mov	r5, r0
   2e2a8:	b908      	cbnz	r0, 2e2ae <att_req_send_process+0x60>
   2e2aa:	4623      	mov	r3, r4
   2e2ac:	e7eb      	b.n	2e286 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   2e2ae:	4601      	mov	r1, r0
   2e2b0:	4620      	mov	r0, r4
   2e2b2:	f7ff fe49 	bl	2df48 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2e2b6:	2800      	cmp	r0, #0
   2e2b8:	da0b      	bge.n	2e2d2 <att_req_send_process+0x84>
	return list->head;
   2e2ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2e2be:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e2c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2e2c4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e2c8:	2b00      	cmp	r3, #0
   2e2ca:	d1ee      	bne.n	2e2aa <att_req_send_process+0x5c>
	list->tail = node;
   2e2cc:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2e2d0:	e7eb      	b.n	2e2aa <att_req_send_process+0x5c>
}
   2e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e2d6 <bt_att_status>:
{
   2e2d6:	b538      	push	{r3, r4, r5, lr}
   2e2d8:	4605      	mov	r5, r0
   2e2da:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2e2dc:	2100      	movs	r1, #0
   2e2de:	f7ff fd4f 	bl	2dd80 <atomic_test_bit>
   2e2e2:	b1c0      	cbz	r0, 2e316 <bt_att_status+0x40>
	if (!chan->att) {
   2e2e4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2e2e8:	b1a8      	cbz	r0, 2e316 <bt_att_status+0x40>
	if (chan->req) {
   2e2ea:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2e2ee:	b993      	cbnz	r3, 2e316 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2e2f0:	3004      	adds	r0, #4
   2e2f2:	f7ff fd21 	bl	2dd38 <sys_slist_get>
	if (!node) {
   2e2f6:	4604      	mov	r4, r0
   2e2f8:	b168      	cbz	r0, 2e316 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   2e2fa:	4601      	mov	r1, r0
   2e2fc:	1f28      	subs	r0, r5, #4
   2e2fe:	f7ff fe23 	bl	2df48 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e302:	2800      	cmp	r0, #0
   2e304:	da07      	bge.n	2e316 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2e306:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2e30a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2e30c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e30e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2e310:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e312:	b902      	cbnz	r2, 2e316 <bt_att_status+0x40>
	list->tail = node;
   2e314:	609c      	str	r4, [r3, #8]
}
   2e316:	bd38      	pop	{r3, r4, r5, pc}

0002e318 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2e318:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2e31a:	6883      	ldr	r3, [r0, #8]
   2e31c:	699b      	ldr	r3, [r3, #24]
   2e31e:	b10b      	cbz	r3, 2e324 <att_sent+0xc>
		chan->ops->sent(chan);
   2e320:	3004      	adds	r0, #4
   2e322:	4718      	bx	r3
}
   2e324:	4770      	bx	lr

0002e326 <att_unknown>:
{
   2e326:	b510      	push	{r4, lr}
   2e328:	460c      	mov	r4, r1
	if (!err) {
   2e32a:	b90a      	cbnz	r2, 2e330 <att_unknown+0xa>
		att_sent(conn, user_data);
   2e32c:	f7ff fff4 	bl	2e318 <att_sent>
	tx_meta_data_free(user_data);
   2e330:	4620      	mov	r0, r4
}
   2e332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2e336:	f7ee bc1f 	b.w	1cb78 <tx_meta_data_free>

0002e33a <att_tx_complete>:
{
   2e33a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e33e:	4606      	mov	r6, r0
   2e340:	460d      	mov	r5, r1
	if (!err) {
   2e342:	4614      	mov	r4, r2
   2e344:	b122      	cbz	r2, 2e350 <att_tx_complete+0x16>
}
   2e346:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2e34a:	4608      	mov	r0, r1
   2e34c:	f7ee bc14 	b.w	1cb78 <tx_meta_data_free>
		att_sent(conn, user_data);
   2e350:	f7ff ffe2 	bl	2e318 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2e354:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2e356:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2e358:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2e35c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2e360:	f7ee fc0a 	bl	1cb78 <tx_meta_data_free>
	if (!err && func) {
   2e364:	b92f      	cbnz	r7, 2e372 <att_tx_complete+0x38>
}
   2e366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2e36a:	4649      	mov	r1, r9
   2e36c:	4630      	mov	r0, r6
   2e36e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2e370:	3401      	adds	r4, #1
   2e372:	b2a3      	uxth	r3, r4
   2e374:	4543      	cmp	r3, r8
   2e376:	d3f8      	bcc.n	2e36a <att_tx_complete+0x30>
   2e378:	e7f5      	b.n	2e366 <att_tx_complete+0x2c>

0002e37a <att_req_sent>:
{
   2e37a:	b510      	push	{r4, lr}
   2e37c:	460c      	mov	r4, r1
	if (!err) {
   2e37e:	b90a      	cbnz	r2, 2e384 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2e380:	f7ff ffca 	bl	2e318 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2e384:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2e386:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2e38a:	b12b      	cbz	r3, 2e398 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2e38c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2e390:	2300      	movs	r3, #0
   2e392:	30b0      	adds	r0, #176	; 0xb0
   2e394:	f7f7 fdfa 	bl	25f8c <k_work_reschedule>
	tx_meta_data_free(user_data);
   2e398:	4620      	mov	r0, r4
}
   2e39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2e39e:	f7ee bbeb 	b.w	1cb78 <tx_meta_data_free>

0002e3a2 <att_cfm_sent>:
{
   2e3a2:	b510      	push	{r4, lr}
   2e3a4:	460c      	mov	r4, r1
	if (!err) {
   2e3a6:	b90a      	cbnz	r2, 2e3ac <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2e3a8:	f7ff ffb6 	bl	2e318 <att_sent>
   2e3ac:	6823      	ldr	r3, [r4, #0]
   2e3ae:	3390      	adds	r3, #144	; 0x90
   2e3b0:	e8d3 1fef 	ldaex	r1, [r3]
   2e3b4:	f021 0102 	bic.w	r1, r1, #2
   2e3b8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e3bc:	2a00      	cmp	r2, #0
   2e3be:	d1f7      	bne.n	2e3b0 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2e3c0:	4620      	mov	r0, r4
}
   2e3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2e3c6:	f7ee bbd7 	b.w	1cb78 <tx_meta_data_free>

0002e3ca <att_rsp_sent>:
{
   2e3ca:	b510      	push	{r4, lr}
   2e3cc:	460c      	mov	r4, r1
	if (!err) {
   2e3ce:	b90a      	cbnz	r2, 2e3d4 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2e3d0:	f7ff ffa2 	bl	2e318 <att_sent>
   2e3d4:	6823      	ldr	r3, [r4, #0]
   2e3d6:	3390      	adds	r3, #144	; 0x90
   2e3d8:	e8d3 1fef 	ldaex	r1, [r3]
   2e3dc:	f021 0101 	bic.w	r1, r1, #1
   2e3e0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e3e4:	2a00      	cmp	r2, #0
   2e3e6:	d1f7      	bne.n	2e3d8 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2e3e8:	4620      	mov	r0, r4
}
   2e3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2e3ee:	f7ee bbc3 	b.w	1cb78 <tx_meta_data_free>

0002e3f2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e3f6:	4688      	mov	r8, r1
   2e3f8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e3fa:	2101      	movs	r1, #1
   2e3fc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e3fe:	4605      	mov	r5, r0
   2e400:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e402:	f7ee fe35 	bl	1d070 <bt_att_chan_create_pdu>
	if (!buf) {
   2e406:	4604      	mov	r4, r0
   2e408:	b170      	cbz	r0, 2e428 <send_err_rsp.part.0+0x36>
   2e40a:	2104      	movs	r1, #4
   2e40c:	300c      	adds	r0, #12
   2e40e:	f001 f810 	bl	2f432 <net_buf_simple_add>
	rsp->request = req;
   2e412:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2e416:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2e41a:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2e41c:	4621      	mov	r1, r4
   2e41e:	4628      	mov	r0, r5
}
   2e420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2e424:	f7ff bdc3 	b.w	2dfae <bt_att_chan_send_rsp>
}
   2e428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e42c <att_write_req>:
{
   2e42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e42e:	460c      	mov	r4, r1
   2e430:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2e432:	f101 000c 	add.w	r0, r1, #12
   2e436:	f001 f834 	bl	2f4a2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2e43a:	8a22      	ldrh	r2, [r4, #16]
   2e43c:	4603      	mov	r3, r0
   2e43e:	9201      	str	r2, [sp, #4]
   2e440:	68e2      	ldr	r2, [r4, #12]
   2e442:	2112      	movs	r1, #18
   2e444:	9200      	str	r2, [sp, #0]
   2e446:	4628      	mov	r0, r5
   2e448:	2213      	movs	r2, #19
   2e44a:	f7ee ff09 	bl	1d260 <att_write_rsp.constprop.0>
}
   2e44e:	b003      	add	sp, #12
   2e450:	bd30      	pop	{r4, r5, pc}

0002e452 <att_write_cmd>:
{
   2e452:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e454:	460c      	mov	r4, r1
   2e456:	4605      	mov	r5, r0
   2e458:	f101 000c 	add.w	r0, r1, #12
   2e45c:	f001 f821 	bl	2f4a2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2e460:	8a22      	ldrh	r2, [r4, #16]
   2e462:	4603      	mov	r3, r0
   2e464:	9201      	str	r2, [sp, #4]
   2e466:	68e2      	ldr	r2, [r4, #12]
   2e468:	4628      	mov	r0, r5
   2e46a:	9200      	str	r2, [sp, #0]
   2e46c:	2200      	movs	r2, #0
   2e46e:	4611      	mov	r1, r2
   2e470:	f7ee fef6 	bl	1d260 <att_write_rsp.constprop.0>
}
   2e474:	b003      	add	sp, #12
   2e476:	bd30      	pop	{r4, r5, pc}

0002e478 <att_read_blob_req>:
{
   2e478:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2e47a:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2e47c:	210c      	movs	r1, #12
   2e47e:	8813      	ldrh	r3, [r2, #0]
   2e480:	8852      	ldrh	r2, [r2, #2]
   2e482:	9200      	str	r2, [sp, #0]
   2e484:	220d      	movs	r2, #13
   2e486:	f7ef f8ad 	bl	1d5e4 <att_read_rsp>
}
   2e48a:	b003      	add	sp, #12
   2e48c:	f85d fb04 	ldr.w	pc, [sp], #4

0002e490 <att_read_req>:
{
   2e490:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e492:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2e494:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e496:	210a      	movs	r1, #10
   2e498:	881b      	ldrh	r3, [r3, #0]
   2e49a:	9200      	str	r2, [sp, #0]
   2e49c:	220b      	movs	r2, #11
   2e49e:	f7ef f8a1 	bl	1d5e4 <att_read_rsp>
}
   2e4a2:	b003      	add	sp, #12
   2e4a4:	f85d fb04 	ldr.w	pc, [sp], #4

0002e4a8 <att_mtu_req>:
{
   2e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e4aa:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2e4ac:	f850 2b90 	ldr.w	r2, [r0], #144
{
   2e4b0:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e4b2:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2e4b4:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e4b6:	f7ff fc63 	bl	2dd80 <atomic_test_bit>
   2e4ba:	4604      	mov	r4, r0
   2e4bc:	b9f0      	cbnz	r0, 2e4fc <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2e4be:	68db      	ldr	r3, [r3, #12]
   2e4c0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2e4c2:	2e16      	cmp	r6, #22
   2e4c4:	d91c      	bls.n	2e500 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2e4c6:	4638      	mov	r0, r7
   2e4c8:	2202      	movs	r2, #2
   2e4ca:	f7ee ff2d 	bl	1d328 <bt_att_create_pdu>
	if (!pdu) {
   2e4ce:	4607      	mov	r7, r0
   2e4d0:	b1c0      	cbz	r0, 2e504 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2e4d2:	2102      	movs	r1, #2
   2e4d4:	300c      	adds	r0, #12
   2e4d6:	f000 ffac 	bl	2f432 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e4da:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2e4dc:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e4de:	7003      	strb	r3, [r0, #0]
   2e4e0:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2e4e2:	4628      	mov	r0, r5
   2e4e4:	f7ff fd63 	bl	2dfae <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e4e8:	2e41      	cmp	r6, #65	; 0x41
   2e4ea:	bf28      	it	cs
   2e4ec:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2e4ee:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e4f0:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2e4f2:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2e4f4:	f7ff fc86 	bl	2de04 <att_chan_mtu_updated>
	return 0;
   2e4f8:	4620      	mov	r0, r4
}
   2e4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2e4fc:	2006      	movs	r0, #6
   2e4fe:	e7fc      	b.n	2e4fa <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2e500:	2004      	movs	r0, #4
   2e502:	e7fa      	b.n	2e4fa <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2e504:	200e      	movs	r0, #14
   2e506:	e7f8      	b.n	2e4fa <att_mtu_req+0x52>

0002e508 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2e508:	8a0a      	ldrh	r2, [r1, #16]
   2e50a:	2300      	movs	r3, #0
   2e50c:	68c9      	ldr	r1, [r1, #12]
   2e50e:	f7ef ba13 	b.w	1d938 <att_handle_rsp>

0002e512 <bt_att_encrypt_change>:
{
   2e512:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2e514:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2e516:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2e51a:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2e51c:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2e520:	2b00      	cmp	r3, #0
   2e522:	d038      	beq.n	2e596 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2e524:	b141      	cbz	r1, 2e538 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2e526:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   2e52a:	2b00      	cmp	r3, #0
   2e52c:	d033      	beq.n	2e596 <bt_att_encrypt_change+0x84>
   2e52e:	7c1b      	ldrb	r3, [r3, #16]
   2e530:	07da      	lsls	r2, r3, #31
   2e532:	d530      	bpl.n	2e596 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2e534:	2305      	movs	r3, #5
   2e536:	e021      	b.n	2e57c <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2e538:	4628      	mov	r0, r5
   2e53a:	f7f0 f99d 	bl	1e878 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2e53e:	7a6b      	ldrb	r3, [r5, #9]
   2e540:	2b01      	cmp	r3, #1
   2e542:	d028      	beq.n	2e596 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2e544:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   2e548:	b32d      	cbz	r5, 2e596 <bt_att_encrypt_change+0x84>
   2e54a:	7c2b      	ldrb	r3, [r5, #16]
   2e54c:	07db      	lsls	r3, r3, #31
   2e54e:	d522      	bpl.n	2e596 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2e550:	68eb      	ldr	r3, [r5, #12]
   2e552:	2b00      	cmp	r3, #0
   2e554:	d0ee      	beq.n	2e534 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2e556:	4630      	mov	r0, r6
   2e558:	696a      	ldr	r2, [r5, #20]
   2e55a:	7c69      	ldrb	r1, [r5, #17]
   2e55c:	f7ee fd88 	bl	1d070 <bt_att_chan_create_pdu>
	if (!buf) {
   2e560:	4604      	mov	r4, r0
   2e562:	b150      	cbz	r0, 2e57a <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2e564:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2e568:	68eb      	ldr	r3, [r5, #12]
   2e56a:	4798      	blx	r3
   2e56c:	b168      	cbz	r0, 2e58a <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e56e:	69a0      	ldr	r0, [r4, #24]
   2e570:	f7ee fb02 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(buf);
   2e574:	4620      	mov	r0, r4
   2e576:	f7f2 f811 	bl	2059c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2e57a:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2e57c:	2200      	movs	r2, #0
   2e57e:	4630      	mov	r0, r6
}
   2e580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2e584:	4611      	mov	r1, r2
   2e586:	f7ef b9d7 	b.w	1d938 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2e58a:	4621      	mov	r1, r4
   2e58c:	4630      	mov	r0, r6
   2e58e:	f7ee fbad 	bl	1ccec <chan_send>
   2e592:	2800      	cmp	r0, #0
   2e594:	d1eb      	bne.n	2e56e <bt_att_encrypt_change+0x5c>
}
   2e596:	bd70      	pop	{r4, r5, r6, pc}

0002e598 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2e598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e59a:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2e59c:	f7ee fc04 	bl	1cda8 <att_get>
	if (!att) {
   2e5a0:	4604      	mov	r4, r0
   2e5a2:	b940      	cbnz	r0, 2e5b6 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e5a4:	69a8      	ldr	r0, [r5, #24]
   2e5a6:	f7ee fae7 	bl	1cb78 <tx_meta_data_free>
		net_buf_unref(buf);
   2e5aa:	4628      	mov	r0, r5
   2e5ac:	f7f1 fff6 	bl	2059c <net_buf_unref>
		return -ENOTCONN;
   2e5b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2e5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2e5b6:	f100 060c 	add.w	r6, r0, #12
   2e5ba:	4629      	mov	r1, r5
   2e5bc:	4630      	mov	r0, r6
   2e5be:	f000 ff10 	bl	2f3e2 <net_buf_put>
	return list->head;
   2e5c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e5c4:	b14d      	cbz	r5, 2e5da <bt_att_send+0x42>
	return node->next;
   2e5c6:	f855 49e0 	ldr.w	r4, [r5], #-224
   2e5ca:	b104      	cbz	r4, 2e5ce <bt_att_send+0x36>
   2e5cc:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   2e5ce:	4631      	mov	r1, r6
   2e5d0:	4628      	mov	r0, r5
   2e5d2:	f7ff fcd3 	bl	2df7c <process_queue>
		if (!err) {
   2e5d6:	4603      	mov	r3, r0
   2e5d8:	b980      	cbnz	r0, 2e5fc <bt_att_send+0x64>
	return 0;
   2e5da:	2000      	movs	r0, #0
   2e5dc:	e7ea      	b.n	2e5b4 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2e5de:	2103      	movs	r1, #3
   2e5e0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2e5e4:	f7ff fbcc 	bl	2dd80 <atomic_test_bit>
   2e5e8:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2e5ea:	f105 0090 	add.w	r0, r5, #144	; 0x90
   2e5ee:	f7ff fbc7 	bl	2dd80 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2e5f2:	4287      	cmp	r7, r0
   2e5f4:	f06f 0301 	mvn.w	r3, #1
   2e5f8:	d107      	bne.n	2e60a <bt_att_send+0x72>
   2e5fa:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e5fc:	2c00      	cmp	r4, #0
   2e5fe:	d0ec      	beq.n	2e5da <bt_att_send+0x42>
   2e600:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   2e604:	b922      	cbnz	r2, 2e610 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   2e606:	3302      	adds	r3, #2
   2e608:	d0e9      	beq.n	2e5de <bt_att_send+0x46>
{
   2e60a:	4625      	mov	r5, r4
   2e60c:	4614      	mov	r4, r2
   2e60e:	e7de      	b.n	2e5ce <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e610:	3ae0      	subs	r2, #224	; 0xe0
   2e612:	e7f8      	b.n	2e606 <bt_att_send+0x6e>

0002e614 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2e614:	b510      	push	{r4, lr}
   2e616:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2e618:	f7ee fbc6 	bl	1cda8 <att_get>
	if (!att) {
   2e61c:	b160      	cbz	r0, 2e638 <bt_att_req_send+0x24>
	parent->next = child;
   2e61e:	2300      	movs	r3, #0
   2e620:	6023      	str	r3, [r4, #0]
	return list->tail;
   2e622:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2e624:	b92b      	cbnz	r3, 2e632 <bt_att_req_send+0x1e>
	list->head = node;
   2e626:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2e62a:	f7ff fe10 	bl	2e24e <att_req_send_process>

	return 0;
   2e62e:	2000      	movs	r0, #0
}
   2e630:	bd10      	pop	{r4, pc}
	parent->next = child;
   2e632:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e634:	6084      	str	r4, [r0, #8]
}
   2e636:	e7f8      	b.n	2e62a <bt_att_req_send+0x16>
		return -ENOTCONN;
   2e638:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e63c:	e7f8      	b.n	2e630 <bt_att_req_send+0x1c>

0002e63e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2e63e:	2001      	movs	r0, #1
   2e640:	4770      	bx	lr

0002e642 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2e642:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2e644:	f7ee fbb0 	bl	1cda8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2e648:	b178      	cbz	r0, 2e66a <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2e64a:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2e64c:	b16b      	cbz	r3, 2e66a <bt_att_clear_out_of_sync_sent+0x28>
   2e64e:	3be0      	subs	r3, #224	; 0xe0
   2e650:	f103 0290 	add.w	r2, r3, #144	; 0x90
   2e654:	e8d2 0fef 	ldaex	r0, [r2]
   2e658:	f020 0020 	bic.w	r0, r0, #32
   2e65c:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2e660:	2900      	cmp	r1, #0
   2e662:	d1f7      	bne.n	2e654 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2e664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2e668:	e7f0      	b.n	2e64c <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2e66a:	bd08      	pop	{r3, pc}

0002e66c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2e66c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2e66e:	2104      	movs	r1, #4
   2e670:	f7ff fb58 	bl	2dd24 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2e674:	b128      	cbz	r0, 2e682 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2e676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2e67a:	2105      	movs	r1, #5
   2e67c:	308c      	adds	r0, #140	; 0x8c
   2e67e:	f7ff bb7f 	b.w	2dd80 <atomic_test_bit>
}
   2e682:	bd08      	pop	{r3, pc}

0002e684 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2e684:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2e686:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2e68a:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2e68c:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2e68e:	8082      	strh	r2, [r0, #4]
}
   2e690:	4770      	bx	lr

0002e692 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2e692:	6010      	str	r0, [r2, #0]
}
   2e694:	2000      	movs	r0, #0
   2e696:	4770      	bx	lr

0002e698 <gatt_ccc_changed>:
{
   2e698:	460b      	mov	r3, r1
   2e69a:	8909      	ldrh	r1, [r1, #8]
   2e69c:	8a5a      	ldrh	r2, [r3, #18]
   2e69e:	4291      	cmp	r1, r2
   2e6a0:	bf38      	it	cc
   2e6a2:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   2e6a4:	8a9a      	ldrh	r2, [r3, #20]
   2e6a6:	428a      	cmp	r2, r1
   2e6a8:	d003      	beq.n	2e6b2 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2e6aa:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   2e6ac:	699b      	ldr	r3, [r3, #24]
   2e6ae:	b103      	cbz	r3, 2e6b2 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2e6b0:	4718      	bx	r3
}
   2e6b2:	4770      	bx	lr

0002e6b4 <gatt_indicate_rsp>:
{
   2e6b4:	b510      	push	{r4, lr}
   2e6b6:	9c02      	ldr	r4, [sp, #8]
   2e6b8:	460a      	mov	r2, r1
	if (params->func) {
   2e6ba:	68a3      	ldr	r3, [r4, #8]
   2e6bc:	b10b      	cbz	r3, 2e6c2 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2e6be:	4621      	mov	r1, r4
   2e6c0:	4798      	blx	r3
	params->_ref--;
   2e6c2:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e6c4:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2e6c6:	3b01      	subs	r3, #1
   2e6c8:	b2db      	uxtb	r3, r3
   2e6ca:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e6cc:	b122      	cbz	r2, 2e6d8 <gatt_indicate_rsp+0x24>
   2e6ce:	b91b      	cbnz	r3, 2e6d8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2e6d0:	4620      	mov	r0, r4
}
   2e6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2e6d6:	4710      	bx	r2
}
   2e6d8:	bd10      	pop	{r4, pc}

0002e6da <match_uuid>:
	data->attr = attr;
   2e6da:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2e6dc:	8091      	strh	r1, [r2, #4]
}
   2e6de:	2000      	movs	r0, #0
   2e6e0:	4770      	bx	lr

0002e6e2 <gen_hash_m>:
{
   2e6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e6e4:	6807      	ldr	r7, [r0, #0]
{
   2e6e6:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e6e8:	783d      	ldrb	r5, [r7, #0]
{
   2e6ea:	4614      	mov	r4, r2
   2e6ec:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e6ee:	b9dd      	cbnz	r5, 2e728 <gen_hash_m+0x46>
	switch (u16->val) {
   2e6f0:	887b      	ldrh	r3, [r7, #2]
   2e6f2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2e6f6:	d004      	beq.n	2e702 <gen_hash_m+0x20>
   2e6f8:	d810      	bhi.n	2e71c <gen_hash_m+0x3a>
   2e6fa:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2e6fe:	2b03      	cmp	r3, #3
   2e700:	d812      	bhi.n	2e728 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2e702:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e706:	2202      	movs	r2, #2
   2e708:	4620      	mov	r0, r4
   2e70a:	f10d 010a 	add.w	r1, sp, #10
   2e70e:	f7fc fe08 	bl	2b322 <tc_cmac_update>
   2e712:	b968      	cbnz	r0, 2e730 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2e714:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2e718:	65a2      	str	r2, [r4, #88]	; 0x58
   2e71a:	e006      	b.n	2e72a <gen_hash_m+0x48>
	switch (u16->val) {
   2e71c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2e720:	33ff      	adds	r3, #255	; 0xff
   2e722:	b29b      	uxth	r3, r3
   2e724:	2b04      	cmp	r3, #4
   2e726:	d91e      	bls.n	2e766 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2e728:	2501      	movs	r5, #1
}
   2e72a:	4628      	mov	r0, r5
   2e72c:	b009      	add	sp, #36	; 0x24
   2e72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2e730:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e732:	2202      	movs	r2, #2
   2e734:	4620      	mov	r0, r4
   2e736:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2e73a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e73e:	f7fc fdf0 	bl	2b322 <tc_cmac_update>
   2e742:	2800      	cmp	r0, #0
   2e744:	d0e6      	beq.n	2e714 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2e746:	2000      	movs	r0, #0
   2e748:	9000      	str	r0, [sp, #0]
   2e74a:	aa03      	add	r2, sp, #12
   2e74c:	2313      	movs	r3, #19
   2e74e:	4631      	mov	r1, r6
   2e750:	6877      	ldr	r7, [r6, #4]
   2e752:	47b8      	blx	r7
		if (len < 0) {
   2e754:	1e02      	subs	r2, r0, #0
   2e756:	dbdf      	blt.n	2e718 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2e758:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e75a:	4620      	mov	r0, r4
   2e75c:	f7fc fde1 	bl	2b322 <tc_cmac_update>
   2e760:	2800      	cmp	r0, #0
   2e762:	d1e1      	bne.n	2e728 <gen_hash_m+0x46>
   2e764:	e7d6      	b.n	2e714 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2e766:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e76a:	2202      	movs	r2, #2
   2e76c:	4620      	mov	r0, r4
   2e76e:	f10d 010a 	add.w	r1, sp, #10
   2e772:	f7fc fdd6 	bl	2b322 <tc_cmac_update>
   2e776:	2800      	cmp	r0, #0
   2e778:	d0cc      	beq.n	2e714 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2e77a:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e77c:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2e77e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e782:	f10d 010a 	add.w	r1, sp, #10
   2e786:	e7e8      	b.n	2e75a <gen_hash_m+0x78>

0002e788 <bt_addr_le_eq>:
   2e788:	2207      	movs	r2, #7
{
   2e78a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2e78c:	f003 f83f 	bl	3180e <memcmp>
}
   2e790:	fab0 f080 	clz	r0, r0
   2e794:	0940      	lsrs	r0, r0, #5
   2e796:	bd08      	pop	{r3, pc}

0002e798 <bt_addr_le_copy>:
   2e798:	680b      	ldr	r3, [r1, #0]
   2e79a:	6003      	str	r3, [r0, #0]
   2e79c:	888b      	ldrh	r3, [r1, #4]
   2e79e:	8083      	strh	r3, [r0, #4]
   2e7a0:	798b      	ldrb	r3, [r1, #6]
   2e7a2:	7183      	strb	r3, [r0, #6]
}
   2e7a4:	4770      	bx	lr

0002e7a6 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2e7a6:	2300      	movs	r3, #0
   2e7a8:	6003      	str	r3, [r0, #0]
   2e7aa:	6043      	str	r3, [r0, #4]
   2e7ac:	6083      	str	r3, [r0, #8]
}
   2e7ae:	4770      	bx	lr

0002e7b0 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2e7b0:	b538      	push	{r3, r4, r5, lr}
   2e7b2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2e7b6:	4615      	mov	r5, r2
	if (offset > value_len) {
   2e7b8:	4294      	cmp	r4, r2
   2e7ba:	d30a      	bcc.n	2e7d2 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   2e7bc:	1aa4      	subs	r4, r4, r2
   2e7be:	428c      	cmp	r4, r1
   2e7c0:	bfa8      	it	ge
   2e7c2:	460c      	movge	r4, r1
   2e7c4:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e7c6:	4622      	mov	r2, r4
   2e7c8:	1959      	adds	r1, r3, r5
   2e7ca:	f003 f830 	bl	3182e <memcpy>
}
   2e7ce:	4620      	mov	r0, r4
   2e7d0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e7d2:	f06f 0406 	mvn.w	r4, #6
   2e7d6:	e7fa      	b.n	2e7ce <bt_gatt_attr_read.constprop.0+0x1e>

0002e7d8 <bt_gatt_attr_read_ccc>:
{
   2e7d8:	b530      	push	{r4, r5, lr}
   2e7da:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2e7dc:	68c9      	ldr	r1, [r1, #12]
{
   2e7de:	4614      	mov	r4, r2
   2e7e0:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2e7e2:	f7ef f9bb 	bl	1db5c <find_ccc_cfg>
	if (cfg) {
   2e7e6:	b100      	cbz	r0, 2e7ea <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2e7e8:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2e7ea:	2302      	movs	r3, #2
   2e7ec:	f8ad 000e 	strh.w	r0, [sp, #14]
   2e7f0:	9300      	str	r3, [sp, #0]
   2e7f2:	4629      	mov	r1, r5
   2e7f4:	4620      	mov	r0, r4
   2e7f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2e7fa:	f10d 030e 	add.w	r3, sp, #14
   2e7fe:	f7ff ffd7 	bl	2e7b0 <bt_gatt_attr_read.constprop.0>
}
   2e802:	b005      	add	sp, #20
   2e804:	bd30      	pop	{r4, r5, pc}

0002e806 <bt_gatt_attr_read_service>:
{
   2e806:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2e808:	460c      	mov	r4, r1
   2e80a:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2e80c:	68e3      	ldr	r3, [r4, #12]
{
   2e80e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2e810:	781c      	ldrb	r4, [r3, #0]
{
   2e812:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2e816:	b13c      	cbz	r4, 2e828 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e818:	2410      	movs	r4, #16
   2e81a:	3301      	adds	r3, #1
   2e81c:	9406      	str	r4, [sp, #24]
}
   2e81e:	b004      	add	sp, #16
   2e820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e824:	f7ff bfc4 	b.w	2e7b0 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2e828:	885b      	ldrh	r3, [r3, #2]
   2e82a:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e82e:	2302      	movs	r3, #2
   2e830:	9300      	str	r3, [sp, #0]
   2e832:	f10d 030e 	add.w	r3, sp, #14
   2e836:	f7ff ffbb 	bl	2e7b0 <bt_gatt_attr_read.constprop.0>
}
   2e83a:	b004      	add	sp, #16
   2e83c:	bd10      	pop	{r4, pc}

0002e83e <cf_read>:
{
   2e83e:	b530      	push	{r4, r5, lr}
   2e840:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2e842:	2300      	movs	r3, #0
{
   2e844:	b085      	sub	sp, #20
   2e846:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2e848:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2e84c:	f7ef f936 	bl	1dabc <find_cf_cfg>
	if (cfg) {
   2e850:	b110      	cbz	r0, 2e858 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2e852:	7a03      	ldrb	r3, [r0, #8]
   2e854:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2e858:	2301      	movs	r3, #1
   2e85a:	4629      	mov	r1, r5
   2e85c:	9300      	str	r3, [sp, #0]
   2e85e:	4620      	mov	r0, r4
   2e860:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2e864:	ab03      	add	r3, sp, #12
   2e866:	f7ff ffa3 	bl	2e7b0 <bt_gatt_attr_read.constprop.0>
}
   2e86a:	b005      	add	sp, #20
   2e86c:	bd30      	pop	{r4, r5, pc}

0002e86e <read_name>:
{
   2e86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e872:	4614      	mov	r4, r2
   2e874:	461d      	mov	r5, r3
   2e876:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2e87a:	f7ec f8f7 	bl	1aa6c <bt_get_name>
   2e87e:	4606      	mov	r6, r0
				 strlen(name));
   2e880:	f7da fdc3 	bl	940a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2e884:	b280      	uxth	r0, r0
   2e886:	9006      	str	r0, [sp, #24]
   2e888:	4633      	mov	r3, r6
   2e88a:	463a      	mov	r2, r7
   2e88c:	4629      	mov	r1, r5
   2e88e:	4620      	mov	r0, r4
}
   2e890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2e894:	f7ff bf8c 	b.w	2e7b0 <bt_gatt_attr_read.constprop.0>

0002e898 <read_appearance>:
{
   2e898:	b530      	push	{r4, r5, lr}
   2e89a:	b085      	sub	sp, #20
   2e89c:	4614      	mov	r4, r2
   2e89e:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2e8a0:	f7fe fe15 	bl	2d4ce <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2e8a4:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2e8a6:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2e8aa:	9300      	str	r3, [sp, #0]
   2e8ac:	4629      	mov	r1, r5
   2e8ae:	4620      	mov	r0, r4
   2e8b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2e8b4:	f10d 030e 	add.w	r3, sp, #14
   2e8b8:	f7ff ff7a 	bl	2e7b0 <bt_gatt_attr_read.constprop.0>
}
   2e8bc:	b005      	add	sp, #20
   2e8be:	bd30      	pop	{r4, r5, pc}

0002e8c0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2e8c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2e8c2:	ab0b      	add	r3, sp, #44	; 0x2c
   2e8c4:	9305      	str	r3, [sp, #20]
   2e8c6:	9303      	str	r3, [sp, #12]
   2e8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e8ca:	9302      	str	r3, [sp, #8]
   2e8cc:	2300      	movs	r3, #0
   2e8ce:	4618      	mov	r0, r3
   2e8d0:	e9cd 3300 	strd	r3, r3, [sp]
   2e8d4:	f7e0 fe28 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2e8d8:	b007      	add	sp, #28
   2e8da:	f85d fb04 	ldr.w	pc, [sp], #4

0002e8de <sc_clear>:
{
   2e8de:	b538      	push	{r3, r4, r5, lr}
   2e8e0:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e8e2:	f100 0588 	add.w	r5, r0, #136	; 0x88
   2e8e6:	4629      	mov	r1, r5
   2e8e8:	7a00      	ldrb	r0, [r0, #8]
   2e8ea:	f7fe fdf3 	bl	2d4d4 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2e8ee:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e8f0:	7a20      	ldrb	r0, [r4, #8]
   2e8f2:	f7ef f911 	bl	1db18 <find_sc_cfg>
		if (cfg) {
   2e8f6:	b118      	cbz	r0, 2e900 <sc_clear+0x22>
}
   2e8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2e8fc:	f7ff bf53 	b.w	2e7a6 <clear_sc_cfg>
}
   2e900:	bd38      	pop	{r3, r4, r5, pc}

0002e902 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2e902:	2a02      	cmp	r2, #2
{
   2e904:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2e906:	d108      	bne.n	2e91a <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2e908:	2300      	movs	r3, #0
   2e90a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2e90e:	461a      	mov	r2, r3
   2e910:	7a00      	ldrb	r0, [r0, #8]
   2e912:	f7ef f9d3 	bl	1dcbc <sc_save>
}
   2e916:	2002      	movs	r0, #2
   2e918:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2e91a:	f7ff ffe0 	bl	2e8de <sc_clear>
   2e91e:	e7fa      	b.n	2e916 <sc_ccc_cfg_write+0x14>

0002e920 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e920:	2301      	movs	r3, #1
   2e922:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e924:	e8d0 2fef 	ldaex	r2, [r0]
   2e928:	431a      	orrs	r2, r3
   2e92a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2e92e:	2900      	cmp	r1, #0
   2e930:	d1f8      	bne.n	2e924 <atomic_set_bit+0x4>
}
   2e932:	4770      	bx	lr

0002e934 <sc_restore_rsp>:
{
   2e934:	b538      	push	{r3, r4, r5, lr}
   2e936:	4604      	mov	r4, r0
   2e938:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2e93a:	f7ff fe80 	bl	2e63e <bt_att_fixed_chan_only>
   2e93e:	b150      	cbz	r0, 2e956 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2e940:	4620      	mov	r0, r4
   2e942:	f7ef f8bb 	bl	1dabc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2e946:	b130      	cbz	r0, 2e956 <sc_restore_rsp+0x22>
   2e948:	7a03      	ldrb	r3, [r0, #8]
   2e94a:	07db      	lsls	r3, r3, #31
   2e94c:	d503      	bpl.n	2e956 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2e94e:	2100      	movs	r1, #0
   2e950:	300c      	adds	r0, #12
   2e952:	f7ff ffe5 	bl	2e920 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2e956:	b935      	cbnz	r5, 2e966 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e958:	7a20      	ldrb	r0, [r4, #8]
   2e95a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2e95e:	f7ef f8db 	bl	1db18 <find_sc_cfg>
		if (sc_cfg) {
   2e962:	b100      	cbz	r0, 2e966 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   2e964:	6085      	str	r5, [r0, #8]
}
   2e966:	bd38      	pop	{r3, r4, r5, pc}

0002e968 <bt_gatt_attr_value_handle>:
{
   2e968:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e96a:	4604      	mov	r4, r0
   2e96c:	b910      	cbnz	r0, 2e974 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2e96e:	2000      	movs	r0, #0
}
   2e970:	b002      	add	sp, #8
   2e972:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e974:	2300      	movs	r3, #0
   2e976:	f88d 3004 	strb.w	r3, [sp, #4]
   2e97a:	f642 0303 	movw	r3, #10243	; 0x2803
   2e97e:	6800      	ldr	r0, [r0, #0]
   2e980:	a901      	add	r1, sp, #4
   2e982:	f8ad 3006 	strh.w	r3, [sp, #6]
   2e986:	f7fe fc58 	bl	2d23a <bt_uuid_cmp>
   2e98a:	2800      	cmp	r0, #0
   2e98c:	d1ef      	bne.n	2e96e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2e98e:	68e3      	ldr	r3, [r4, #12]
   2e990:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2e992:	2800      	cmp	r0, #0
   2e994:	d1ec      	bne.n	2e970 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2e996:	4620      	mov	r0, r4
   2e998:	f7ef fae6 	bl	1df68 <bt_gatt_attr_get_handle>
   2e99c:	3001      	adds	r0, #1
   2e99e:	b280      	uxth	r0, r0
	return handle;
   2e9a0:	e7e6      	b.n	2e970 <bt_gatt_attr_value_handle+0x8>

0002e9a2 <bt_gatt_attr_read_chrc>:
{
   2e9a2:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2e9a4:	68cc      	ldr	r4, [r1, #12]
{
   2e9a6:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2e9a8:	79a3      	ldrb	r3, [r4, #6]
{
   2e9aa:	b088      	sub	sp, #32
   2e9ac:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2e9ae:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2e9b2:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2e9b4:	f7ff ffd8 	bl	2e968 <bt_gatt_attr_value_handle>
   2e9b8:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2e9bc:	6824      	ldr	r4, [r4, #0]
   2e9be:	7823      	ldrb	r3, [r4, #0]
   2e9c0:	b96b      	cbnz	r3, 2e9de <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2e9c2:	8863      	ldrh	r3, [r4, #2]
   2e9c4:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2e9c8:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2e9ca:	9300      	str	r3, [sp, #0]
   2e9cc:	4631      	mov	r1, r6
   2e9ce:	4628      	mov	r0, r5
   2e9d0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2e9d4:	ab03      	add	r3, sp, #12
   2e9d6:	f7ff feeb 	bl	2e7b0 <bt_gatt_attr_read.constprop.0>
}
   2e9da:	b008      	add	sp, #32
   2e9dc:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2e9de:	1c63      	adds	r3, r4, #1
   2e9e0:	f10d 020f 	add.w	r2, sp, #15
   2e9e4:	3411      	adds	r4, #17
   2e9e6:	f853 1b04 	ldr.w	r1, [r3], #4
   2e9ea:	42a3      	cmp	r3, r4
   2e9ec:	f842 1b04 	str.w	r1, [r2], #4
   2e9f0:	d1f9      	bne.n	2e9e6 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2e9f2:	2313      	movs	r3, #19
   2e9f4:	e7e9      	b.n	2e9ca <bt_gatt_attr_read_chrc+0x28>

0002e9f6 <bt_gatt_foreach_attr>:
{
   2e9f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2e9f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2e9fc:	2300      	movs	r3, #0
   2e9fe:	461a      	mov	r2, r3
   2ea00:	9300      	str	r3, [sp, #0]
   2ea02:	f7ef fae1 	bl	1dfc8 <bt_gatt_foreach_attr_type>
}
   2ea06:	b005      	add	sp, #20
   2ea08:	f85d fb04 	ldr.w	pc, [sp], #4

0002ea0c <db_hash_process>:
	db_hash_gen(true);
   2ea0c:	f7ef bb36 	b.w	1e07c <db_hash_gen.constprop.0>

0002ea10 <bt_gatt_check_perm>:
{
   2ea10:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2ea12:	07d4      	lsls	r4, r2, #31
{
   2ea14:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ea16:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2ea18:	d504      	bpl.n	2ea24 <bt_gatt_check_perm+0x14>
   2ea1a:	f013 0f95 	tst.w	r3, #149	; 0x95
   2ea1e:	d027      	beq.n	2ea70 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ea20:	6848      	ldr	r0, [r1, #4]
   2ea22:	b328      	cbz	r0, 2ea70 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2ea24:	0790      	lsls	r0, r2, #30
   2ea26:	d504      	bpl.n	2ea32 <bt_gatt_check_perm+0x22>
   2ea28:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2ea2c:	d022      	beq.n	2ea74 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2ea2e:	6889      	ldr	r1, [r1, #8]
   2ea30:	b301      	cbz	r1, 2ea74 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2ea32:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2ea36:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2ea3a:	d007      	beq.n	2ea4c <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2ea3c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   2ea40:	b90b      	cbnz	r3, 2ea46 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2ea42:	2005      	movs	r0, #5
}
   2ea44:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2ea46:	7b5b      	ldrb	r3, [r3, #13]
   2ea48:	06db      	lsls	r3, r3, #27
   2ea4a:	d5fa      	bpl.n	2ea42 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2ea4c:	f014 0f30 	tst.w	r4, #48	; 0x30
   2ea50:	d108      	bne.n	2ea64 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2ea52:	f014 000c 	ands.w	r0, r4, #12
   2ea56:	d0f5      	beq.n	2ea44 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2ea58:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2ea5a:	2b00      	cmp	r3, #0
   2ea5c:	bf14      	ite	ne
   2ea5e:	2000      	movne	r0, #0
   2ea60:	200f      	moveq	r0, #15
   2ea62:	e7ef      	b.n	2ea44 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2ea64:	4628      	mov	r0, r5
   2ea66:	f7ff f891 	bl	2db8c <bt_conn_get_security>
   2ea6a:	2802      	cmp	r0, #2
   2ea6c:	d8f1      	bhi.n	2ea52 <bt_gatt_check_perm+0x42>
   2ea6e:	e7e8      	b.n	2ea42 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ea70:	2002      	movs	r0, #2
   2ea72:	e7e7      	b.n	2ea44 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ea74:	2003      	movs	r0, #3
   2ea76:	e7e5      	b.n	2ea44 <bt_gatt_check_perm+0x34>

0002ea78 <bt_gatt_is_subscribed>:
{
   2ea78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2ea7c:	7b43      	ldrb	r3, [r0, #13]
{
   2ea7e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2ea80:	2b07      	cmp	r3, #7
{
   2ea82:	460c      	mov	r4, r1
   2ea84:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2ea86:	d110      	bne.n	2eaaa <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2ea88:	2300      	movs	r3, #0
   2ea8a:	f88d 300c 	strb.w	r3, [sp, #12]
   2ea8e:	f642 0303 	movw	r3, #10243	; 0x2803
   2ea92:	6820      	ldr	r0, [r4, #0]
   2ea94:	a903      	add	r1, sp, #12
   2ea96:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ea9a:	f7fe fbce 	bl	2d23a <bt_uuid_cmp>
   2ea9e:	b960      	cbnz	r0, 2eaba <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2eaa0:	68e3      	ldr	r3, [r4, #12]
   2eaa2:	799b      	ldrb	r3, [r3, #6]
   2eaa4:	f013 0f30 	tst.w	r3, #48	; 0x30
   2eaa8:	d103      	bne.n	2eab2 <bt_gatt_is_subscribed+0x3a>
		return false;
   2eaaa:	2000      	movs	r0, #0
}
   2eaac:	b004      	add	sp, #16
   2eaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2eab2:	4620      	mov	r0, r4
   2eab4:	f7ef fb5e 	bl	1e174 <bt_gatt_attr_next>
   2eab8:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2eaba:	2300      	movs	r3, #0
   2eabc:	6820      	ldr	r0, [r4, #0]
   2eabe:	f88d 300c 	strb.w	r3, [sp, #12]
   2eac2:	f642 1302 	movw	r3, #10498	; 0x2902
   2eac6:	a903      	add	r1, sp, #12
   2eac8:	f8ad 300e 	strh.w	r3, [sp, #14]
   2eacc:	f7fe fbb5 	bl	2d23a <bt_uuid_cmp>
   2ead0:	b118      	cbz	r0, 2eada <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2ead2:	4620      	mov	r0, r4
   2ead4:	f7ef fb4e 	bl	1e174 <bt_gatt_attr_next>
   2ead8:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2eada:	2700      	movs	r7, #0
   2eadc:	f642 1802 	movw	r8, #10498	; 0x2902
   2eae0:	6820      	ldr	r0, [r4, #0]
   2eae2:	4669      	mov	r1, sp
   2eae4:	f88d 7000 	strb.w	r7, [sp]
   2eae8:	f8ad 8002 	strh.w	r8, [sp, #2]
   2eaec:	f7fe fba5 	bl	2d23a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2eaf0:	bb20      	cbnz	r0, 2eb3c <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2eaf2:	2300      	movs	r3, #0
   2eaf4:	6820      	ldr	r0, [r4, #0]
   2eaf6:	f88d 300c 	strb.w	r3, [sp, #12]
   2eafa:	f642 1302 	movw	r3, #10498	; 0x2902
   2eafe:	a903      	add	r1, sp, #12
   2eb00:	f8ad 300e 	strh.w	r3, [sp, #14]
   2eb04:	f7fe fb99 	bl	2d23a <bt_uuid_cmp>
   2eb08:	2800      	cmp	r0, #0
   2eb0a:	d1ce      	bne.n	2eaaa <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   2eb0c:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2eb0e:	4628      	mov	r0, r5
   2eb10:	4622      	mov	r2, r4
   2eb12:	f812 1b01 	ldrb.w	r1, [r2], #1
   2eb16:	f7ff f83b 	bl	2db90 <bt_conn_is_peer_addr_le>
   2eb1a:	b110      	cbz	r0, 2eb22 <bt_gatt_is_subscribed+0xaa>
   2eb1c:	8923      	ldrh	r3, [r4, #8]
   2eb1e:	421e      	tst	r6, r3
   2eb20:	d10a      	bne.n	2eb38 <bt_gatt_is_subscribed+0xc0>
   2eb22:	4628      	mov	r0, r5
   2eb24:	7aa1      	ldrb	r1, [r4, #10]
   2eb26:	f104 020b 	add.w	r2, r4, #11
   2eb2a:	f7ff f831 	bl	2db90 <bt_conn_is_peer_addr_le>
   2eb2e:	2800      	cmp	r0, #0
   2eb30:	d0bb      	beq.n	2eaaa <bt_gatt_is_subscribed+0x32>
   2eb32:	8a63      	ldrh	r3, [r4, #18]
   2eb34:	421e      	tst	r6, r3
   2eb36:	d0b8      	beq.n	2eaaa <bt_gatt_is_subscribed+0x32>
			return true;
   2eb38:	2001      	movs	r0, #1
   2eb3a:	e7b7      	b.n	2eaac <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2eb3c:	f642 0303 	movw	r3, #10243	; 0x2803
   2eb40:	6820      	ldr	r0, [r4, #0]
   2eb42:	a901      	add	r1, sp, #4
   2eb44:	f88d 7004 	strb.w	r7, [sp, #4]
   2eb48:	f8ad 3006 	strh.w	r3, [sp, #6]
   2eb4c:	f7fe fb75 	bl	2d23a <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2eb50:	2800      	cmp	r0, #0
   2eb52:	d0ce      	beq.n	2eaf2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2eb54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2eb58:	6820      	ldr	r0, [r4, #0]
   2eb5a:	a902      	add	r1, sp, #8
   2eb5c:	f88d 7008 	strb.w	r7, [sp, #8]
   2eb60:	f8ad 300a 	strh.w	r3, [sp, #10]
   2eb64:	f7fe fb69 	bl	2d23a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2eb68:	2800      	cmp	r0, #0
   2eb6a:	d0c2      	beq.n	2eaf2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2eb6c:	f642 0301 	movw	r3, #10241	; 0x2801
   2eb70:	6820      	ldr	r0, [r4, #0]
   2eb72:	a903      	add	r1, sp, #12
   2eb74:	f88d 700c 	strb.w	r7, [sp, #12]
   2eb78:	f8ad 300e 	strh.w	r3, [sp, #14]
   2eb7c:	f7fe fb5d 	bl	2d23a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2eb80:	2800      	cmp	r0, #0
   2eb82:	d0b6      	beq.n	2eaf2 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2eb84:	4620      	mov	r0, r4
   2eb86:	f7ef faf5 	bl	1e174 <bt_gatt_attr_next>
		if (!attr) {
   2eb8a:	4604      	mov	r4, r0
   2eb8c:	2800      	cmp	r0, #0
   2eb8e:	d1a7      	bne.n	2eae0 <bt_gatt_is_subscribed+0x68>
   2eb90:	e78b      	b.n	2eaaa <bt_gatt_is_subscribed+0x32>

0002eb92 <bt_gatt_change_aware>:
{
   2eb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2eb94:	4606      	mov	r6, r0
   2eb96:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2eb98:	f7ee ff90 	bl	1dabc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2eb9c:	b1e0      	cbz	r0, 2ebd8 <bt_gatt_change_aware+0x46>
   2eb9e:	7a03      	ldrb	r3, [r0, #8]
   2eba0:	07db      	lsls	r3, r3, #31
   2eba2:	d519      	bpl.n	2ebd8 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2eba4:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2eba8:	e8d4 5faf 	lda	r5, [r4]
   2ebac:	f015 0501 	ands.w	r5, r5, #1
   2ebb0:	d112      	bne.n	2ebd8 <bt_gatt_change_aware+0x46>
	if (!req) {
   2ebb2:	b197      	cbz	r7, 2ebda <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ebb4:	e8d4 1fef 	ldaex	r1, [r4]
   2ebb8:	f021 0302 	bic.w	r3, r1, #2
   2ebbc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2ebc0:	2a00      	cmp	r2, #0
   2ebc2:	d1f7      	bne.n	2ebb4 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2ebc4:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   2ebc8:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2ebca:	d008      	beq.n	2ebde <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2ebcc:	f7ff fd39 	bl	2e642 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2ebd0:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2ebd2:	4620      	mov	r0, r4
   2ebd4:	f7ff fea4 	bl	2e920 <atomic_set_bit>
		return true;
   2ebd8:	2501      	movs	r5, #1
}
   2ebda:	4628      	mov	r0, r5
   2ebdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2ebde:	f7ff fd2e 	bl	2e63e <bt_att_fixed_chan_only>
   2ebe2:	2800      	cmp	r0, #0
   2ebe4:	d0f9      	beq.n	2ebda <bt_gatt_change_aware+0x48>
   2ebe6:	4630      	mov	r0, r6
   2ebe8:	f7ff fd40 	bl	2e66c <bt_att_out_of_sync_sent_on_fixed>
   2ebec:	2800      	cmp	r0, #0
   2ebee:	d0f4      	beq.n	2ebda <bt_gatt_change_aware+0x48>
   2ebf0:	e8d4 3fef 	ldaex	r3, [r4]
   2ebf4:	f023 0302 	bic.w	r3, r3, #2
   2ebf8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2ebfc:	2a00      	cmp	r2, #0
   2ebfe:	d1f7      	bne.n	2ebf0 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   2ec00:	4630      	mov	r0, r6
   2ec02:	f7ff fd1e 	bl	2e642 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2ec06:	4639      	mov	r1, r7
   2ec08:	e7e3      	b.n	2ebd2 <bt_gatt_change_aware+0x40>

0002ec0a <smp_pairing_rsp>:
}
   2ec0a:	2007      	movs	r0, #7
   2ec0c:	4770      	bx	lr

0002ec0e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ec0e:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ec12:	4108      	asrs	r0, r1
}
   2ec14:	f000 0001 	and.w	r0, r0, #1
   2ec18:	4770      	bx	lr

0002ec1a <update_keys_check>:
{
   2ec1a:	4603      	mov	r3, r0
   2ec1c:	b510      	push	{r4, lr}
	if (!keys ||
   2ec1e:	b1d9      	cbz	r1, 2ec58 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2ec20:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2ec22:	f010 0f24 	tst.w	r0, #36	; 0x24
   2ec26:	d017      	beq.n	2ec58 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2ec28:	7d1a      	ldrb	r2, [r3, #20]
   2ec2a:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2ec2c:	7b09      	ldrb	r1, [r1, #12]
   2ec2e:	42a2      	cmp	r2, r4
   2ec30:	bf28      	it	cs
   2ec32:	4622      	movcs	r2, r4
   2ec34:	4291      	cmp	r1, r2
   2ec36:	d901      	bls.n	2ec3c <update_keys_check+0x22>
			return false;
   2ec38:	2000      	movs	r0, #0
}
   2ec3a:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ec3c:	0682      	lsls	r2, r0, #26
   2ec3e:	d404      	bmi.n	2ec4a <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ec40:	7a18      	ldrb	r0, [r3, #8]
   2ec42:	3800      	subs	r0, #0
   2ec44:	bf18      	it	ne
   2ec46:	2001      	movne	r0, #1
   2ec48:	e7f7      	b.n	2ec3a <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ec4a:	2105      	movs	r1, #5
   2ec4c:	1d18      	adds	r0, r3, #4
   2ec4e:	f7ff ffde 	bl	2ec0e <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ec52:	2800      	cmp	r0, #0
   2ec54:	d1f4      	bne.n	2ec40 <update_keys_check+0x26>
   2ec56:	e7ef      	b.n	2ec38 <update_keys_check+0x1e>
	return true;
   2ec58:	2001      	movs	r0, #1
   2ec5a:	e7ee      	b.n	2ec3a <update_keys_check+0x20>

0002ec5c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ec5c:	2301      	movs	r3, #1
   2ec5e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ec60:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ec62:	e8d0 2fef 	ldaex	r2, [r0]
   2ec66:	401a      	ands	r2, r3
   2ec68:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2ec6c:	2900      	cmp	r1, #0
   2ec6e:	d1f8      	bne.n	2ec62 <atomic_clear_bit+0x6>
}
   2ec70:	4770      	bx	lr

0002ec72 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ec72:	680b      	ldr	r3, [r1, #0]
   2ec74:	6003      	str	r3, [r0, #0]
   2ec76:	888b      	ldrh	r3, [r1, #4]
   2ec78:	8083      	strh	r3, [r0, #4]
   2ec7a:	798b      	ldrb	r3, [r1, #6]
   2ec7c:	7183      	strb	r3, [r0, #6]
   2ec7e:	4770      	bx	lr

0002ec80 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2ec80:	2007      	movs	r0, #7
   2ec82:	4770      	bx	lr

0002ec84 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ec84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ec86:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ec88:	2200      	movs	r2, #0
   2ec8a:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ec8c:	4604      	mov	r4, r0
   2ec8e:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ec90:	460a      	mov	r2, r1
   2ec92:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2ec96:	2106      	movs	r1, #6
   2ec98:	f7ff f822 	bl	2dce0 <bt_l2cap_send_cb>
   2ec9c:	b128      	cbz	r0, 2ecaa <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2ec9e:	4628      	mov	r0, r5
}
   2eca0:	b003      	add	sp, #12
   2eca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2eca6:	f7f1 bc79 	b.w	2059c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2ecaa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ecae:	2300      	movs	r3, #0
   2ecb0:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   2ecb4:	b003      	add	sp, #12
   2ecb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2ecba:	f7f7 b967 	b.w	25f8c <k_work_reschedule>

0002ecbe <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2ecbe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2ecc0:	ab0b      	add	r3, sp, #44	; 0x2c
   2ecc2:	9305      	str	r3, [sp, #20]
   2ecc4:	9303      	str	r3, [sp, #12]
   2ecc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ecc8:	9302      	str	r3, [sp, #8]
   2ecca:	2300      	movs	r3, #0
   2eccc:	4618      	mov	r0, r3
   2ecce:	e9cd 3300 	strd	r3, r3, [sp]
   2ecd2:	f7e0 fc29 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2ecd6:	b007      	add	sp, #28
   2ecd8:	f85d fb04 	ldr.w	pc, [sp], #4

0002ecdc <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ecdc:	2301      	movs	r3, #1
   2ecde:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ece0:	e8d0 2fef 	ldaex	r2, [r0]
   2ece4:	431a      	orrs	r2, r3
   2ece6:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2ecea:	2900      	cmp	r1, #0
   2ecec:	d1f8      	bne.n	2ece0 <atomic_set_bit+0x4>
}
   2ecee:	4770      	bx	lr

0002ecf0 <smp_keypress_notif>:
{
   2ecf0:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2ecf2:	210e      	movs	r1, #14
   2ecf4:	f7ff fff2 	bl	2ecdc <atomic_set_bit>
}
   2ecf8:	2000      	movs	r0, #0
   2ecfa:	bd08      	pop	{r3, pc}

0002ecfc <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2ecfc:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2ecfe:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2ed00:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2ed02:	4628      	mov	r0, r5
   2ed04:	2104      	movs	r1, #4
   2ed06:	f7ff ff82 	bl	2ec0e <atomic_test_bit>
   2ed0a:	b168      	cbz	r0, 2ed28 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2ed0c:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ed0e:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2ed10:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ed12:	4608      	mov	r0, r1
   2ed14:	f7fe ffe1 	bl	2dcda <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2ed18:	4604      	mov	r4, r0
   2ed1a:	b940      	cbnz	r0, 2ed2e <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2ed1c:	2104      	movs	r1, #4
   2ed1e:	4628      	mov	r0, r5
   2ed20:	f7ff ffdc 	bl	2ecdc <atomic_set_bit>
}
   2ed24:	4620      	mov	r0, r4
   2ed26:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2ed28:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ed2c:	e7ef      	b.n	2ed0e <smp_create_pdu.constprop.0+0x12>
   2ed2e:	2101      	movs	r1, #1
   2ed30:	300c      	adds	r0, #12
   2ed32:	f000 fb7e 	bl	2f432 <net_buf_simple_add>
	hdr->code = op;
   2ed36:	7006      	strb	r6, [r0, #0]
	return buf;
   2ed38:	e7f4      	b.n	2ed24 <smp_create_pdu.constprop.0+0x28>

0002ed3a <send_pairing_rsp>:
{
   2ed3a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ed3c:	2102      	movs	r1, #2
{
   2ed3e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ed40:	f7ff ffdc 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ed44:	4605      	mov	r5, r0
   2ed46:	b180      	cbz	r0, 2ed6a <send_pairing_rsp+0x30>
   2ed48:	2106      	movs	r1, #6
   2ed4a:	300c      	adds	r0, #12
   2ed4c:	f000 fb71 	bl	2f432 <net_buf_simple_add>
   2ed50:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   2ed54:	2200      	movs	r2, #0
   2ed56:	6003      	str	r3, [r0, #0]
   2ed58:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2ed5c:	4629      	mov	r1, r5
   2ed5e:	8083      	strh	r3, [r0, #4]
   2ed60:	4620      	mov	r0, r4
   2ed62:	f7ff ff8f 	bl	2ec84 <smp_send.constprop.0>
	return 0;
   2ed66:	2000      	movs	r0, #0
}
   2ed68:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ed6a:	2008      	movs	r0, #8
   2ed6c:	e7fc      	b.n	2ed68 <send_pairing_rsp+0x2e>

0002ed6e <smp_send_pairing_random>:
{
   2ed6e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ed70:	2104      	movs	r1, #4
{
   2ed72:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ed74:	f7ff ffc2 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ed78:	4605      	mov	r5, r0
   2ed7a:	b1a0      	cbz	r0, 2eda6 <smp_send_pairing_random+0x38>
   2ed7c:	2110      	movs	r1, #16
   2ed7e:	300c      	adds	r0, #12
   2ed80:	f000 fb57 	bl	2f432 <net_buf_simple_add>
   2ed84:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2ed88:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2ed8c:	f853 1b04 	ldr.w	r1, [r3], #4
   2ed90:	4293      	cmp	r3, r2
   2ed92:	f840 1b04 	str.w	r1, [r0], #4
   2ed96:	d1f9      	bne.n	2ed8c <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ed98:	4620      	mov	r0, r4
   2ed9a:	2200      	movs	r2, #0
   2ed9c:	4629      	mov	r1, r5
   2ed9e:	f7ff ff71 	bl	2ec84 <smp_send.constprop.0>
	return 0;
   2eda2:	2000      	movs	r0, #0
}
   2eda4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2eda6:	2008      	movs	r0, #8
   2eda8:	e7fc      	b.n	2eda4 <smp_send_pairing_random+0x36>

0002edaa <smp_dhkey_check>:
{
   2edaa:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2edac:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2edb0:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2edb2:	78db      	ldrb	r3, [r3, #3]
   2edb4:	2b01      	cmp	r3, #1
   2edb6:	d119      	bne.n	2edec <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2edb8:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2edba:	1d06      	adds	r6, r0, #4
   2edbc:	2110      	movs	r1, #16
   2edbe:	4630      	mov	r0, r6
   2edc0:	f7ff ff4c 	bl	2ec5c <atomic_clear_bit>
   2edc4:	462b      	mov	r3, r5
   2edc6:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2edca:	f105 0110 	add.w	r1, r5, #16
   2edce:	f853 0b04 	ldr.w	r0, [r3], #4
   2edd2:	428b      	cmp	r3, r1
   2edd4:	f842 0b04 	str.w	r0, [r2], #4
   2edd8:	d1f9      	bne.n	2edce <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2edda:	2107      	movs	r1, #7
   2eddc:	4630      	mov	r0, r6
   2edde:	f7ff ff16 	bl	2ec0e <atomic_test_bit>
   2ede2:	b128      	cbz	r0, 2edf0 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2ede4:	2109      	movs	r1, #9
   2ede6:	4630      	mov	r0, r6
   2ede8:	f7ff ff78 	bl	2ecdc <atomic_set_bit>
}
   2edec:	2000      	movs	r0, #0
   2edee:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2edf0:	210a      	movs	r1, #10
   2edf2:	4630      	mov	r0, r6
   2edf4:	f7ff ff0b 	bl	2ec0e <atomic_test_bit>
   2edf8:	2800      	cmp	r0, #0
   2edfa:	d1f3      	bne.n	2ede4 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2edfc:	4620      	mov	r0, r4
}
   2edfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2ee02:	f7f0 b9e7 	b.w	1f1d4 <compute_and_check_and_send_periph_dhcheck>

0002ee06 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2ee06:	2007      	movs	r0, #7
   2ee08:	4770      	bx	lr

0002ee0a <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ee0a:	2301      	movs	r3, #1
   2ee0c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ee10:	43ca      	mvns	r2, r1
{
   2ee12:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ee14:	e8d0 3fef 	ldaex	r3, [r0]
   2ee18:	ea03 0402 	and.w	r4, r3, r2
   2ee1c:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2ee20:	2d00      	cmp	r5, #0
   2ee22:	d1f7      	bne.n	2ee14 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2ee24:	4219      	tst	r1, r3
}
   2ee26:	bf14      	ite	ne
   2ee28:	2001      	movne	r0, #1
   2ee2a:	2000      	moveq	r0, #0
   2ee2c:	bd30      	pop	{r4, r5, pc}

0002ee2e <smp_reset>:
{
   2ee2e:	b538      	push	{r3, r4, r5, lr}
   2ee30:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ee32:	2500      	movs	r5, #0
   2ee34:	1d03      	adds	r3, r0, #4
   2ee36:	e8d3 2fef 	ldaex	r2, [r3]
   2ee3a:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2ee3e:	2900      	cmp	r1, #0
   2ee40:	d1f9      	bne.n	2ee36 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2ee42:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   2ee46:	f002 f977 	bl	31138 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2ee4a:	7225      	strb	r5, [r4, #8]
   2ee4c:	e8d4 3fef 	ldaex	r3, [r4]
   2ee50:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2ee54:	2a00      	cmp	r2, #0
   2ee56:	d1f9      	bne.n	2ee4c <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ee58:	4620      	mov	r0, r4
}
   2ee5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ee5e:	2101      	movs	r1, #1
   2ee60:	f7ff bf3c 	b.w	2ecdc <atomic_set_bit>

0002ee64 <smp_c1>:
{
   2ee64:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ee66:	b089      	sub	sp, #36	; 0x24
   2ee68:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2ee6c:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2ee6e:	7830      	ldrb	r0, [r6, #0]
{
   2ee70:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2ee72:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2ee76:	7838      	ldrb	r0, [r7, #0]
   2ee78:	f101 0c10 	add.w	ip, r1, #16
   2ee7c:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2ee80:	6810      	ldr	r0, [r2, #0]
   2ee82:	f8cd 0002 	str.w	r0, [sp, #2]
   2ee86:	8890      	ldrh	r0, [r2, #4]
   2ee88:	7992      	ldrb	r2, [r2, #6]
   2ee8a:	f8ad 0006 	strh.w	r0, [sp, #6]
   2ee8e:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2ee92:	681a      	ldr	r2, [r3, #0]
   2ee94:	4668      	mov	r0, sp
   2ee96:	f8cd 2009 	str.w	r2, [sp, #9]
   2ee9a:	889a      	ldrh	r2, [r3, #4]
   2ee9c:	799b      	ldrb	r3, [r3, #6]
   2ee9e:	f8ad 200d 	strh.w	r2, [sp, #13]
   2eea2:	4622      	mov	r2, r4
   2eea4:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   2eea8:	f811 3b01 	ldrb.w	r3, [r1], #1
   2eeac:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2eeb0:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2eeb2:	ea83 030e 	eor.w	r3, r3, lr
   2eeb6:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2eeba:	d1f5      	bne.n	2eea8 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2eebc:	4622      	mov	r2, r4
   2eebe:	4621      	mov	r1, r4
   2eec0:	4628      	mov	r0, r5
   2eec2:	f7fe fd1a 	bl	2d8fa <bt_encrypt_le>
	if (err) {
   2eec6:	4603      	mov	r3, r0
   2eec8:	bb28      	cbnz	r0, 2ef16 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2eeca:	9307      	str	r3, [sp, #28]
   2eecc:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   2eece:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2eed2:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2eed6:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2eeda:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2eede:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   2eee0:	f8cd 2016 	str.w	r2, [sp, #22]
   2eee4:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2eee8:	f104 0010 	add.w	r0, r4, #16
   2eeec:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   2eef0:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   2eef2:	f813 2b01 	ldrb.w	r2, [r3], #1
   2eef6:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2eefa:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2eefc:	ea82 0206 	eor.w	r2, r2, r6
   2ef00:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   2ef04:	d1f5      	bne.n	2eef2 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   2ef06:	4622      	mov	r2, r4
   2ef08:	4621      	mov	r1, r4
   2ef0a:	4628      	mov	r0, r5
}
   2ef0c:	b009      	add	sp, #36	; 0x24
   2ef0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2ef12:	f7fe bcf2 	b.w	2d8fa <bt_encrypt_le>
}
   2ef16:	b009      	add	sp, #36	; 0x24
   2ef18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ef1a <legacy_pairing_confirm>:
{
   2ef1a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2ef1c:	1d07      	adds	r7, r0, #4
{
   2ef1e:	4604      	mov	r4, r0
   2ef20:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2ef22:	210a      	movs	r1, #10
   2ef24:	4638      	mov	r0, r7
   2ef26:	f7ff fe72 	bl	2ec0e <atomic_test_bit>
   2ef2a:	bb88      	cbnz	r0, 2ef90 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2ef2c:	2104      	movs	r1, #4
   2ef2e:	4620      	mov	r0, r4
   2ef30:	f7ff fed4 	bl	2ecdc <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2ef34:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2ef36:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2ef3a:	f7ff fedf 	bl	2ecfc <smp_create_pdu.constprop.0>
	if (!buf) {
   2ef3e:	4605      	mov	r5, r0
   2ef40:	b1c0      	cbz	r0, 2ef74 <legacy_pairing_confirm+0x5a>
   2ef42:	2110      	movs	r1, #16
   2ef44:	300c      	adds	r0, #12
   2ef46:	f000 fa74 	bl	2f432 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2ef4a:	f106 0396 	add.w	r3, r6, #150	; 0x96
   2ef4e:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2ef50:	9002      	str	r0, [sp, #8]
   2ef52:	9301      	str	r3, [sp, #4]
   2ef54:	9600      	str	r6, [sp, #0]
   2ef56:	f104 0310 	add.w	r3, r4, #16
   2ef5a:	f104 0209 	add.w	r2, r4, #9
   2ef5e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2ef62:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2ef66:	f7ff ff7d 	bl	2ee64 <smp_c1>
   2ef6a:	4606      	mov	r6, r0
   2ef6c:	b128      	cbz	r0, 2ef7a <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2ef6e:	4628      	mov	r0, r5
   2ef70:	f7f1 fb14 	bl	2059c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2ef74:	2008      	movs	r0, #8
}
   2ef76:	b005      	add	sp, #20
   2ef78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2ef7a:	4602      	mov	r2, r0
   2ef7c:	4629      	mov	r1, r5
   2ef7e:	4620      	mov	r0, r4
   2ef80:	f7ff fe80 	bl	2ec84 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ef84:	4631      	mov	r1, r6
   2ef86:	4638      	mov	r0, r7
   2ef88:	f7ff fe68 	bl	2ec5c <atomic_clear_bit>
	return 0;
   2ef8c:	2000      	movs	r0, #0
   2ef8e:	e7f2      	b.n	2ef76 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ef90:	2100      	movs	r1, #0
   2ef92:	4638      	mov	r0, r7
   2ef94:	f7ff fea2 	bl	2ecdc <atomic_set_bit>
	return 0;
   2ef98:	e7f8      	b.n	2ef8c <legacy_pairing_confirm+0x72>

0002ef9a <bt_smp_request_ltk>:
{
   2ef9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ef9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2efa0:	4604      	mov	r4, r0
   2efa2:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2efa6:	f7ef fd03 	bl	1e9b0 <smp_chan_get>
	if (!smp) {
   2efaa:	4605      	mov	r5, r0
   2efac:	2800      	cmp	r0, #0
   2efae:	d07c      	beq.n	2f0aa <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2efb0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2efb4:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2efb6:	f1b8 0f00 	cmp.w	r8, #0
   2efba:	d128      	bne.n	2f00e <bt_smp_request_ltk+0x74>
   2efbc:	e9dd 3200 	ldrd	r3, r2, [sp]
   2efc0:	4313      	orrs	r3, r2
   2efc2:	d124      	bne.n	2f00e <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2efc4:	2103      	movs	r1, #3
   2efc6:	4630      	mov	r0, r6
   2efc8:	f7ff fe21 	bl	2ec0e <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2efcc:	b1f8      	cbz	r0, 2f00e <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2efce:	2101      	movs	r1, #1
   2efd0:	4630      	mov	r0, r6
   2efd2:	f7ff fe1c 	bl	2ec0e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2efd6:	b1d0      	cbz	r0, 2f00e <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2efd8:	7d2c      	ldrb	r4, [r5, #20]
   2efda:	7b6b      	ldrb	r3, [r5, #13]
   2efdc:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2efe0:	429c      	cmp	r4, r3
   2efe2:	bf28      	it	cs
   2efe4:	461c      	movcs	r4, r3
   2efe6:	4622      	mov	r2, r4
   2efe8:	4638      	mov	r0, r7
   2efea:	f002 fc20 	bl	3182e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2efee:	2c0f      	cmp	r4, #15
   2eff0:	d805      	bhi.n	2effe <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   2eff2:	4641      	mov	r1, r8
   2eff4:	f1c4 0210 	rsb	r2, r4, #16
   2eff8:	1938      	adds	r0, r7, r4
   2effa:	f002 fc52 	bl	318a2 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2effe:	4630      	mov	r0, r6
   2f000:	2101      	movs	r1, #1
   2f002:	f7ff fe6b 	bl	2ecdc <atomic_set_bit>
		return true;
   2f006:	2001      	movs	r0, #1
}
   2f008:	b002      	add	sp, #8
   2f00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2f00e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   2f012:	b983      	cbnz	r3, 2f036 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2f014:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2f018:	4642      	mov	r2, r8
   2f01a:	2020      	movs	r0, #32
   2f01c:	7a21      	ldrb	r1, [r4, #8]
   2f01e:	f7f1 f8dd 	bl	201dc <bt_keys_find>
   2f022:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   2f026:	b930      	cbnz	r0, 2f036 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2f028:	4642      	mov	r2, r8
   2f02a:	2001      	movs	r0, #1
   2f02c:	7a21      	ldrb	r1, [r4, #8]
   2f02e:	f7f1 f8d5 	bl	201dc <bt_keys_find>
   2f032:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2f036:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2f03a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2f03e:	f1b8 0f00 	cmp.w	r8, #0
   2f042:	d10c      	bne.n	2f05e <bt_smp_request_ltk+0xc4>
   2f044:	e9dd 3200 	ldrd	r3, r2, [sp]
   2f048:	4313      	orrs	r3, r2
   2f04a:	d108      	bne.n	2f05e <bt_smp_request_ltk+0xc4>
   2f04c:	b300      	cbz	r0, 2f090 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2f04e:	89c3      	ldrh	r3, [r0, #14]
   2f050:	069a      	lsls	r2, r3, #26
   2f052:	d505      	bpl.n	2f060 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2f054:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f056:	f100 011a 	add.w	r1, r0, #26
   2f05a:	4622      	mov	r2, r4
   2f05c:	e7c4      	b.n	2efe8 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2f05e:	b1b8      	cbz	r0, 2f090 <bt_smp_request_ltk+0xf6>
   2f060:	89c3      	ldrh	r3, [r0, #14]
   2f062:	07db      	lsls	r3, r3, #31
   2f064:	d514      	bpl.n	2f090 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2f066:	2208      	movs	r2, #8
   2f068:	4669      	mov	r1, sp
   2f06a:	3040      	adds	r0, #64	; 0x40
   2f06c:	f002 fbcf 	bl	3180e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2f070:	b970      	cbnz	r0, 2f090 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2f072:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2f076:	2202      	movs	r2, #2
   2f078:	a908      	add	r1, sp, #32
   2f07a:	3048      	adds	r0, #72	; 0x48
   2f07c:	f002 fbc7 	bl	3180e <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2f080:	4680      	mov	r8, r0
   2f082:	b928      	cbnz	r0, 2f090 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2f084:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   2f088:	7b0c      	ldrb	r4, [r1, #12]
   2f08a:	314a      	adds	r1, #74	; 0x4a
   2f08c:	4622      	mov	r2, r4
   2f08e:	e7ab      	b.n	2efe8 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f090:	210f      	movs	r1, #15
   2f092:	4630      	mov	r0, r6
   2f094:	f7ff fdbb 	bl	2ec0e <atomic_test_bit>
   2f098:	b120      	cbz	r0, 2f0a4 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2f09a:	2202      	movs	r2, #2
   2f09c:	2106      	movs	r1, #6
   2f09e:	4620      	mov	r0, r4
   2f0a0:	f7ed f96c 	bl	1c37c <bt_conn_security_changed>
	smp_reset(smp);
   2f0a4:	4628      	mov	r0, r5
   2f0a6:	f7ff fec2 	bl	2ee2e <smp_reset>
		return false;
   2f0aa:	2000      	movs	r0, #0
   2f0ac:	e7ac      	b.n	2f008 <bt_smp_request_ltk+0x6e>

0002f0ae <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2f0ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2f0b2:	4770      	bx	lr

0002f0b4 <bt_smp_dhkey_ready>:
{
   2f0b4:	b570      	push	{r4, r5, r6, lr}
   2f0b6:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2f0b8:	2008      	movs	r0, #8
   2f0ba:	f7ef fc11 	bl	1e8e0 <smp_find>
	if (smp) {
   2f0be:	4605      	mov	r5, r0
   2f0c0:	b1e0      	cbz	r0, 2f0fc <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2f0c2:	1d06      	adds	r6, r0, #4
   2f0c4:	2108      	movs	r1, #8
   2f0c6:	4630      	mov	r0, r6
   2f0c8:	f7ff fdc8 	bl	2ec5c <atomic_clear_bit>
	if (!dhkey) {
   2f0cc:	b3bc      	cbz	r4, 2f13e <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2f0ce:	2107      	movs	r1, #7
   2f0d0:	f7ff fdc4 	bl	2ec5c <atomic_clear_bit>
   2f0d4:	4623      	mov	r3, r4
   2f0d6:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2f0da:	f104 0120 	add.w	r1, r4, #32
   2f0de:	f853 0b04 	ldr.w	r0, [r3], #4
   2f0e2:	428b      	cmp	r3, r1
   2f0e4:	f842 0b04 	str.w	r0, [r2], #4
   2f0e8:	d1f9      	bne.n	2f0de <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2f0ea:	210a      	movs	r1, #10
   2f0ec:	4630      	mov	r0, r6
   2f0ee:	f7ff fd8e 	bl	2ec0e <atomic_test_bit>
   2f0f2:	b170      	cbz	r0, 2f112 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2f0f4:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2f0f6:	4630      	mov	r0, r6
   2f0f8:	f7ff fdf0 	bl	2ecdc <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2f0fc:	2007      	movs	r0, #7
   2f0fe:	f7ef fbef 	bl	1e8e0 <smp_find>
		if (smp) {
   2f102:	4604      	mov	r4, r0
   2f104:	b1e8      	cbz	r0, 2f142 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2f106:	f7ef fcad 	bl	1ea64 <smp_dhkey_generate>
			if (err) {
   2f10a:	4601      	mov	r1, r0
   2f10c:	b1c8      	cbz	r0, 2f142 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2f10e:	4620      	mov	r0, r4
   2f110:	e012      	b.n	2f138 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2f112:	2110      	movs	r1, #16
   2f114:	4630      	mov	r0, r6
   2f116:	f7ff fd7a 	bl	2ec0e <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2f11a:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2f11c:	2800      	cmp	r0, #0
   2f11e:	d1ea      	bne.n	2f0f6 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2f120:	4630      	mov	r0, r6
   2f122:	f7ff fd74 	bl	2ec0e <atomic_test_bit>
   2f126:	2800      	cmp	r0, #0
   2f128:	d0e8      	beq.n	2f0fc <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2f12a:	4628      	mov	r0, r5
   2f12c:	f7f0 f852 	bl	1f1d4 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2f130:	4601      	mov	r1, r0
   2f132:	2800      	cmp	r0, #0
   2f134:	d0e2      	beq.n	2f0fc <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2f136:	4628      	mov	r0, r5
   2f138:	f7f0 fbe0 	bl	1f8fc <smp_error>
   2f13c:	e7de      	b.n	2f0fc <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2f13e:	210b      	movs	r1, #11
   2f140:	e7f9      	b.n	2f136 <bt_smp_dhkey_ready+0x82>
}
   2f142:	bd70      	pop	{r4, r5, r6, pc}

0002f144 <bt_smp_disconnected>:
{
   2f144:	b570      	push	{r4, r5, r6, lr}
   2f146:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2f148:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2f14c:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f150:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2f152:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   2f156:	f001 ffef 	bl	31138 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f15a:	2103      	movs	r1, #3
   2f15c:	4620      	mov	r0, r4
   2f15e:	f7ff fd56 	bl	2ec0e <atomic_test_bit>
   2f162:	b1a0      	cbz	r0, 2f18e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2f164:	2108      	movs	r1, #8
   2f166:	4630      	mov	r0, r6
   2f168:	f7f0 fb4a 	bl	1f800 <smp_pairing_complete>
	if (keys) {
   2f16c:	b13d      	cbz	r5, 2f17e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2f16e:	89eb      	ldrh	r3, [r5, #14]
   2f170:	b113      	cbz	r3, 2f178 <bt_smp_disconnected+0x34>
   2f172:	7b6b      	ldrb	r3, [r5, #13]
   2f174:	079b      	lsls	r3, r3, #30
   2f176:	d502      	bpl.n	2f17e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2f178:	4628      	mov	r0, r5
   2f17a:	f000 f840 	bl	2f1fe <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2f17e:	4630      	mov	r0, r6
}
   2f180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f184:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   2f188:	2100      	movs	r1, #0
   2f18a:	f002 bb8a 	b.w	318a2 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2f18e:	2101      	movs	r1, #1
   2f190:	4620      	mov	r0, r4
   2f192:	f7ff fd3c 	bl	2ec0e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f196:	2800      	cmp	r0, #0
   2f198:	d1e4      	bne.n	2f164 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f19a:	210f      	movs	r1, #15
   2f19c:	4620      	mov	r0, r4
   2f19e:	f7ff fd36 	bl	2ec0e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2f1a2:	2800      	cmp	r0, #0
   2f1a4:	d1de      	bne.n	2f164 <bt_smp_disconnected+0x20>
   2f1a6:	e7e1      	b.n	2f16c <bt_smp_disconnected+0x28>

0002f1a8 <smp_ident_sent>:
{
   2f1a8:	b508      	push	{r3, lr}
	if (!err) {
   2f1aa:	b99a      	cbnz	r2, 2f1d4 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   2f1ac:	7883      	ldrb	r3, [r0, #2]
   2f1ae:	2b01      	cmp	r3, #1
   2f1b0:	d110      	bne.n	2f1d4 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2f1b2:	2106      	movs	r1, #6
   2f1b4:	f7fe fdad 	bl	2dd12 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2f1b8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2f1bc:	f023 0301 	bic.w	r3, r3, #1
   2f1c0:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2f1c4:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2f1c8:	b921      	cbnz	r1, 2f1d4 <smp_ident_sent+0x2c>
}
   2f1ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2f1ce:	38ec      	subs	r0, #236	; 0xec
   2f1d0:	f7f0 bb16 	b.w	1f800 <smp_pairing_complete>
}
   2f1d4:	bd08      	pop	{r3, pc}

0002f1d6 <bt_keys_get_type>:
{
   2f1d6:	b570      	push	{r4, r5, r6, lr}
   2f1d8:	4604      	mov	r4, r0
   2f1da:	460d      	mov	r5, r1
   2f1dc:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2f1de:	f7f0 fffd 	bl	201dc <bt_keys_find>
	if (keys) {
   2f1e2:	b938      	cbnz	r0, 2f1f4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2f1e4:	4631      	mov	r1, r6
   2f1e6:	4628      	mov	r0, r5
   2f1e8:	f7f0 ffc2 	bl	20170 <bt_keys_get_addr>
	if (!keys) {
   2f1ec:	b110      	cbz	r0, 2f1f4 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   2f1ee:	89c3      	ldrh	r3, [r0, #14]
   2f1f0:	431c      	orrs	r4, r3
   2f1f2:	81c4      	strh	r4, [r0, #14]
}
   2f1f4:	bd70      	pop	{r4, r5, r6, pc}

0002f1f6 <bt_keys_add_type>:
	keys->keys |= type;
   2f1f6:	89c3      	ldrh	r3, [r0, #14]
   2f1f8:	4319      	orrs	r1, r3
   2f1fa:	81c1      	strh	r1, [r0, #14]
}
   2f1fc:	4770      	bx	lr

0002f1fe <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2f1fe:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2f200:	7a03      	ldrb	r3, [r0, #8]
{
   2f202:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2f204:	075b      	lsls	r3, r3, #29
   2f206:	d501      	bpl.n	2f20c <bt_keys_clear+0xe>
		bt_id_del(keys);
   2f208:	f7eb fd94 	bl	1ad34 <bt_id_del>
   2f20c:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   2f20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f212:	225c      	movs	r2, #92	; 0x5c
   2f214:	2100      	movs	r1, #0
   2f216:	f002 bb44 	b.w	318a2 <memset>

0002f21a <sys_memcpy_swap>:
	psrc += length - 1;
   2f21a:	1e53      	subs	r3, r2, #1
   2f21c:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2f21e:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2f220:	f811 3901 	ldrb.w	r3, [r1], #-1
   2f224:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2f228:	4290      	cmp	r0, r2
   2f22a:	d1f9      	bne.n	2f220 <sys_memcpy_swap+0x6>
}
   2f22c:	4770      	bx	lr

0002f22e <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2f22e:	b510      	push	{r4, lr}
   2f230:	1e43      	subs	r3, r0, #1
   2f232:	f100 0210 	add.w	r2, r0, #16
   2f236:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2f238:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2f23c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2f240:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2f242:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2f244:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2f246:	d1f7      	bne.n	2f238 <sys_mem_swap.constprop.0+0xa>
	}
}
   2f248:	bd10      	pop	{r4, pc}

0002f24a <bt_crypto_aes_cmac>:
{
   2f24a:	b570      	push	{r4, r5, r6, lr}
   2f24c:	b0c2      	sub	sp, #264	; 0x108
   2f24e:	460d      	mov	r5, r1
   2f250:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2f252:	4601      	mov	r1, r0
   2f254:	aa16      	add	r2, sp, #88	; 0x58
   2f256:	4668      	mov	r0, sp
{
   2f258:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2f25a:	f7fc f837 	bl	2b2cc <tc_cmac_setup>
   2f25e:	b918      	cbnz	r0, 2f268 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2f260:	f06f 0004 	mvn.w	r0, #4
}
   2f264:	b042      	add	sp, #264	; 0x108
   2f266:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2f268:	4632      	mov	r2, r6
   2f26a:	4629      	mov	r1, r5
   2f26c:	4668      	mov	r0, sp
   2f26e:	f7fc f858 	bl	2b322 <tc_cmac_update>
   2f272:	2800      	cmp	r0, #0
   2f274:	d0f4      	beq.n	2f260 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2f276:	4669      	mov	r1, sp
   2f278:	4620      	mov	r0, r4
   2f27a:	f7fc f8bc 	bl	2b3f6 <tc_cmac_final>
   2f27e:	2800      	cmp	r0, #0
   2f280:	d0ee      	beq.n	2f260 <bt_crypto_aes_cmac+0x16>
	return 0;
   2f282:	2000      	movs	r0, #0
   2f284:	e7ee      	b.n	2f264 <bt_crypto_aes_cmac+0x1a>

0002f286 <bt_crypto_f4>:
{
   2f286:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f288:	460e      	mov	r6, r1
   2f28a:	4614      	mov	r4, r2
   2f28c:	461d      	mov	r5, r3
   2f28e:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2f290:	4601      	mov	r1, r0
   2f292:	2220      	movs	r2, #32
   2f294:	a805      	add	r0, sp, #20
{
   2f296:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2f298:	f7ff ffbf 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2f29c:	2220      	movs	r2, #32
   2f29e:	4631      	mov	r1, r6
   2f2a0:	a80d      	add	r0, sp, #52	; 0x34
   2f2a2:	f7ff ffba 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2f2a6:	4621      	mov	r1, r4
   2f2a8:	2210      	movs	r2, #16
   2f2aa:	a801      	add	r0, sp, #4
	m[64] = z;
   2f2ac:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2f2b0:	f7ff ffb3 	bl	2f21a <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2f2b4:	463b      	mov	r3, r7
   2f2b6:	2241      	movs	r2, #65	; 0x41
   2f2b8:	a905      	add	r1, sp, #20
   2f2ba:	a801      	add	r0, sp, #4
   2f2bc:	f7ff ffc5 	bl	2f24a <bt_crypto_aes_cmac>
	if (err) {
   2f2c0:	4604      	mov	r4, r0
   2f2c2:	b910      	cbnz	r0, 2f2ca <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2f2c4:	4638      	mov	r0, r7
   2f2c6:	f7ff ffb2 	bl	2f22e <sys_mem_swap.constprop.0>
}
   2f2ca:	4620      	mov	r0, r4
   2f2cc:	b017      	add	sp, #92	; 0x5c
   2f2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f2d0 <bt_crypto_f6>:
{
   2f2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f2d4:	4616      	mov	r6, r2
   2f2d6:	461d      	mov	r5, r3
   2f2d8:	b097      	sub	sp, #92	; 0x5c
   2f2da:	4604      	mov	r4, r0
   2f2dc:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2f2e0:	2210      	movs	r2, #16
   2f2e2:	a805      	add	r0, sp, #20
{
   2f2e4:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2f2e6:	f7ff ff98 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2f2ea:	2210      	movs	r2, #16
   2f2ec:	4631      	mov	r1, r6
   2f2ee:	a809      	add	r0, sp, #36	; 0x24
   2f2f0:	f7ff ff93 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2f2f4:	2210      	movs	r2, #16
   2f2f6:	4629      	mov	r1, r5
   2f2f8:	a80d      	add	r0, sp, #52	; 0x34
   2f2fa:	f7ff ff8e 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2f2fe:	2203      	movs	r2, #3
   2f300:	991e      	ldr	r1, [sp, #120]	; 0x78
   2f302:	a811      	add	r0, sp, #68	; 0x44
   2f304:	f7ff ff89 	bl	2f21a <sys_memcpy_swap>
	m[51] = a1->type;
   2f308:	4649      	mov	r1, r9
   2f30a:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2f30e:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2f312:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2f316:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f318:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2f31a:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f31c:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2f31e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f322:	f7ff ff7a 	bl	2f21a <sys_memcpy_swap>
	m[58] = a2->type;
   2f326:	4641      	mov	r1, r8
   2f328:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f32c:	2206      	movs	r2, #6
	m[58] = a2->type;
   2f32e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2f332:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f336:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2f33a:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2f33e:	888b      	ldrh	r3, [r1, #4]
   2f340:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f344:	f7ff ff69 	bl	2f21a <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2f348:	4621      	mov	r1, r4
   2f34a:	2210      	movs	r2, #16
   2f34c:	a801      	add	r0, sp, #4
   2f34e:	f7ff ff64 	bl	2f21a <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2f352:	463b      	mov	r3, r7
   2f354:	2241      	movs	r2, #65	; 0x41
   2f356:	a905      	add	r1, sp, #20
   2f358:	a801      	add	r0, sp, #4
   2f35a:	f7ff ff76 	bl	2f24a <bt_crypto_aes_cmac>
	if (err) {
   2f35e:	4604      	mov	r4, r0
   2f360:	b910      	cbnz	r0, 2f368 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2f362:	4638      	mov	r0, r7
   2f364:	f7ff ff63 	bl	2f22e <sys_mem_swap.constprop.0>
}
   2f368:	4620      	mov	r0, r4
   2f36a:	b017      	add	sp, #92	; 0x5c
   2f36c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002f370 <fixed_data_unref>:
}
   2f370:	4770      	bx	lr

0002f372 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2f372:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2f374:	6849      	ldr	r1, [r1, #4]
   2f376:	6809      	ldr	r1, [r1, #0]
   2f378:	f7f1 b87e 	b.w	20478 <net_buf_alloc_len>

0002f37c <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2f37c:	f7f6 bb7c 	b.w	25a78 <z_impl_k_queue_get>

0002f380 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2f380:	6883      	ldr	r3, [r0, #8]
   2f382:	440b      	add	r3, r1
   2f384:	6003      	str	r3, [r0, #0]
}
   2f386:	4770      	bx	lr

0002f388 <net_buf_slist_put>:
	__asm__ volatile(
   2f388:	f04f 0320 	mov.w	r3, #32
   2f38c:	f3ef 8211 	mrs	r2, BASEPRI
   2f390:	f383 8812 	msr	BASEPRI_MAX, r3
   2f394:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2f398:	2300      	movs	r3, #0
   2f39a:	600b      	str	r3, [r1, #0]
	return list->tail;
   2f39c:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2f39e:	b933      	cbnz	r3, 2f3ae <net_buf_slist_put+0x26>
	list->head = node;
   2f3a0:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   2f3a4:	f382 8811 	msr	BASEPRI, r2
   2f3a8:	f3bf 8f6f 	isb	sy
}
   2f3ac:	4770      	bx	lr
	parent->next = child;
   2f3ae:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2f3b0:	6041      	str	r1, [r0, #4]
}
   2f3b2:	e7f7      	b.n	2f3a4 <net_buf_slist_put+0x1c>

0002f3b4 <net_buf_slist_get>:
{
   2f3b4:	4603      	mov	r3, r0
   2f3b6:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f3b8:	f04f 0220 	mov.w	r2, #32
   2f3bc:	f3ef 8111 	mrs	r1, BASEPRI
   2f3c0:	f382 8812 	msr	BASEPRI_MAX, r2
   2f3c4:	f3bf 8f6f 	isb	sy
	return list->head;
   2f3c8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2f3ca:	b128      	cbz	r0, 2f3d8 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f3cc:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2f3ce:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f3d0:	42a0      	cmp	r0, r4
	list->head = node;
   2f3d2:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2f3d4:	bf08      	it	eq
   2f3d6:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2f3d8:	f381 8811 	msr	BASEPRI, r1
   2f3dc:	f3bf 8f6f 	isb	sy
}
   2f3e0:	bd10      	pop	{r4, pc}

0002f3e2 <net_buf_put>:
	k_fifo_put(fifo, buf);
   2f3e2:	f001 bdc0 	b.w	30f66 <k_queue_append>

0002f3e6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2f3e6:	7a02      	ldrb	r2, [r0, #8]
   2f3e8:	3201      	adds	r2, #1
   2f3ea:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2f3ec:	4770      	bx	lr

0002f3ee <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2f3ee:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2f3f0:	4618      	mov	r0, r3
   2f3f2:	685b      	ldr	r3, [r3, #4]
   2f3f4:	2b00      	cmp	r3, #0
   2f3f6:	d1fb      	bne.n	2f3f0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2f3f8:	4770      	bx	lr

0002f3fa <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2f3fa:	6842      	ldr	r2, [r0, #4]
{
   2f3fc:	b510      	push	{r4, lr}
	if (parent->frags) {
   2f3fe:	b12a      	cbz	r2, 2f40c <net_buf_frag_insert+0x12>
   2f400:	460b      	mov	r3, r1
	while (buf->frags) {
   2f402:	461c      	mov	r4, r3
   2f404:	685b      	ldr	r3, [r3, #4]
   2f406:	2b00      	cmp	r3, #0
   2f408:	d1fb      	bne.n	2f402 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2f40a:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2f40c:	6041      	str	r1, [r0, #4]
}
   2f40e:	bd10      	pop	{r4, pc}

0002f410 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2f410:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2f412:	4604      	mov	r4, r0
   2f414:	b920      	cbnz	r0, 2f420 <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   2f416:	4608      	mov	r0, r1
	buf->ref++;
   2f418:	7a0b      	ldrb	r3, [r1, #8]
   2f41a:	3301      	adds	r3, #1
   2f41c:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2f41e:	bd10      	pop	{r4, pc}
   2f420:	4603      	mov	r3, r0
	while (buf->frags) {
   2f422:	4618      	mov	r0, r3
   2f424:	685b      	ldr	r3, [r3, #4]
   2f426:	2b00      	cmp	r3, #0
   2f428:	d1fb      	bne.n	2f422 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2f42a:	f7ff ffe6 	bl	2f3fa <net_buf_frag_insert>
   2f42e:	4620      	mov	r0, r4
   2f430:	e7f5      	b.n	2f41e <net_buf_frag_add+0xe>

0002f432 <net_buf_simple_add>:
	return buf->data + buf->len;
   2f432:	8883      	ldrh	r3, [r0, #4]
   2f434:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2f436:	4419      	add	r1, r3
   2f438:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2f43a:	18d0      	adds	r0, r2, r3
   2f43c:	4770      	bx	lr

0002f43e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2f43e:	b430      	push	{r4, r5}
   2f440:	8884      	ldrh	r4, [r0, #4]
   2f442:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2f444:	18a3      	adds	r3, r4, r2
   2f446:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f448:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   2f44a:	bc30      	pop	{r4, r5}
   2f44c:	f002 b9ef 	b.w	3182e <memcpy>

0002f450 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2f450:	b510      	push	{r4, lr}
   2f452:	8883      	ldrh	r3, [r0, #4]
   2f454:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2f456:	1c5c      	adds	r4, r3, #1
   2f458:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2f45a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2f45c:	18d0      	adds	r0, r2, r3
   2f45e:	bd10      	pop	{r4, pc}

0002f460 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2f460:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2f462:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2f464:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2f466:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2f468:	4411      	add	r1, r2
	buf->data -= len;
   2f46a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2f46c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2f46e:	4770      	bx	lr

0002f470 <net_buf_simple_push_u8>:
	buf->data -= len;
   2f470:	6802      	ldr	r2, [r0, #0]
   2f472:	1e53      	subs	r3, r2, #1
   2f474:	6003      	str	r3, [r0, #0]
	buf->len += len;
   2f476:	8883      	ldrh	r3, [r0, #4]
   2f478:	3301      	adds	r3, #1
   2f47a:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   2f47c:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   2f480:	4770      	bx	lr

0002f482 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2f482:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2f484:	8882      	ldrh	r2, [r0, #4]
   2f486:	1a52      	subs	r2, r2, r1
   2f488:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2f48a:	6800      	ldr	r0, [r0, #0]
   2f48c:	4408      	add	r0, r1
   2f48e:	6018      	str	r0, [r3, #0]
}
   2f490:	4770      	bx	lr

0002f492 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2f492:	4603      	mov	r3, r0
	void *data = buf->data;
   2f494:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2f496:	889a      	ldrh	r2, [r3, #4]
   2f498:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2f49a:	4401      	add	r1, r0
	buf->len -= len;
   2f49c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2f49e:	6019      	str	r1, [r3, #0]

	return data;
}
   2f4a0:	4770      	bx	lr

0002f4a2 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2f4a2:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2f4a4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2f4a6:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2f4a8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2f4aa:	f7ff ffea 	bl	2f482 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2f4ae:	4620      	mov	r0, r4
   2f4b0:	bd10      	pop	{r4, pc}

0002f4b2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2f4b2:	6802      	ldr	r2, [r0, #0]
   2f4b4:	6880      	ldr	r0, [r0, #8]
}
   2f4b6:	1a10      	subs	r0, r2, r0
   2f4b8:	4770      	bx	lr

0002f4ba <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f4ba:	8883      	ldrh	r3, [r0, #4]
   2f4bc:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2f4be:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f4c0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2f4c2:	6803      	ldr	r3, [r0, #0]
   2f4c4:	1a5b      	subs	r3, r3, r1
}
   2f4c6:	1ad0      	subs	r0, r2, r3
   2f4c8:	4770      	bx	lr

0002f4ca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f4ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f4cc:	ab0b      	add	r3, sp, #44	; 0x2c
   2f4ce:	9305      	str	r3, [sp, #20]
   2f4d0:	9303      	str	r3, [sp, #12]
   2f4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f4d4:	2201      	movs	r2, #1
   2f4d6:	9302      	str	r3, [sp, #8]
   2f4d8:	2300      	movs	r3, #0
   2f4da:	4618      	mov	r0, r3
   2f4dc:	e9cd 3300 	strd	r3, r3, [sp]
   2f4e0:	f7e0 f822 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2f4e4:	b007      	add	sp, #28
   2f4e6:	f85d fb04 	ldr.w	pc, [sp], #4

0002f4ea <adc_context_on_timer_expired>:
{
   2f4ea:	b410      	push	{r4}
   2f4ec:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2f4ee:	3808      	subs	r0, #8
   2f4f0:	e8d0 2fef 	ldaex	r2, [r0]
   2f4f4:	1c51      	adds	r1, r2, #1
   2f4f6:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2f4fa:	2c00      	cmp	r4, #0
   2f4fc:	d1f8      	bne.n	2f4f0 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2f4fe:	b912      	cbnz	r2, 2f506 <adc_context_on_timer_expired+0x1c>
}
   2f500:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2f502:	f7f1 b8f3 	b.w	206ec <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2f506:	f06f 020f 	mvn.w	r2, #15
}
   2f50a:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2f50c:	669a      	str	r2, [r3, #104]	; 0x68
}
   2f50e:	4770      	bx	lr

0002f510 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2f510:	220c      	movs	r2, #12
   2f512:	6903      	ldr	r3, [r0, #16]
   2f514:	b2c9      	uxtb	r1, r1
   2f516:	fb01 3302 	mla	r3, r1, r2, r3
   2f51a:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   2f51c:	f000 0007 	and.w	r0, r0, #7
   2f520:	4770      	bx	lr

0002f522 <set_on_state>:
	__asm__ volatile(
   2f522:	f04f 0320 	mov.w	r3, #32
   2f526:	f3ef 8211 	mrs	r2, BASEPRI
   2f52a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f52e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2f532:	6803      	ldr	r3, [r0, #0]
   2f534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f538:	f043 0302 	orr.w	r3, r3, #2
   2f53c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2f53e:	f382 8811 	msr	BASEPRI, r2
   2f542:	f3bf 8f6f 	isb	sy
}
   2f546:	4770      	bx	lr

0002f548 <stop>:
{
   2f548:	b570      	push	{r4, r5, r6, lr}
   2f54a:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2f54c:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2f54e:	f04f 0420 	mov.w	r4, #32
   2f552:	f3ef 8511 	mrs	r5, BASEPRI
   2f556:	f384 8812 	msr	BASEPRI_MAX, r4
   2f55a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f55e:	260c      	movs	r6, #12
   2f560:	fb06 3401 	mla	r4, r6, r1, r3
   2f564:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2f566:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2f56a:	d008      	beq.n	2f57e <stop+0x36>
   2f56c:	42a2      	cmp	r2, r4
   2f56e:	d006      	beq.n	2f57e <stop+0x36>
	__asm__ volatile(
   2f570:	f385 8811 	msr	BASEPRI, r5
   2f574:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2f578:	f04f 30ff 	mov.w	r0, #4294967295
}
   2f57c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2f57e:	2201      	movs	r2, #1
   2f580:	4371      	muls	r1, r6
   2f582:	440b      	add	r3, r1
   2f584:	679a      	str	r2, [r3, #120]	; 0x78
   2f586:	f385 8811 	msr	BASEPRI, r5
   2f58a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2f58e:	6843      	ldr	r3, [r0, #4]
   2f590:	440b      	add	r3, r1
   2f592:	685b      	ldr	r3, [r3, #4]
   2f594:	4798      	blx	r3
	return 0;
   2f596:	2000      	movs	r0, #0
   2f598:	e7f0      	b.n	2f57c <stop+0x34>

0002f59a <api_stop>:
	return stop(dev, subsys, CTX_API);
   2f59a:	2280      	movs	r2, #128	; 0x80
   2f59c:	f7ff bfd4 	b.w	2f548 <stop>

0002f5a0 <async_start>:
{
   2f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f5a2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2f5a4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2f5a6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2f5a8:	f04f 0520 	mov.w	r5, #32
   2f5ac:	f3ef 8611 	mrs	r6, BASEPRI
   2f5b0:	f385 8812 	msr	BASEPRI_MAX, r5
   2f5b4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f5b8:	250c      	movs	r5, #12
   2f5ba:	4369      	muls	r1, r5
   2f5bc:	440c      	add	r4, r1
   2f5be:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2f5c0:	f005 0c07 	and.w	ip, r5, #7
   2f5c4:	f1bc 0f01 	cmp.w	ip, #1
   2f5c8:	d10b      	bne.n	2f5e2 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2f5ca:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   2f5cc:	f386 8811 	msr	BASEPRI, r6
   2f5d0:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2f5d4:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   2f5d8:	6843      	ldr	r3, [r0, #4]
   2f5da:	585b      	ldr	r3, [r3, r1]
   2f5dc:	4798      	blx	r3
	return 0;
   2f5de:	2000      	movs	r0, #0
}
   2f5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2f5e2:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2f5e6:	42af      	cmp	r7, r5
   2f5e8:	f386 8811 	msr	BASEPRI, r6
   2f5ec:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2f5f0:	bf0c      	ite	eq
   2f5f2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2f5f6:	f04f 30ff 	movne.w	r0, #4294967295
   2f5fa:	e7f1      	b.n	2f5e0 <async_start+0x40>

0002f5fc <api_start>:
{
   2f5fc:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2f5fe:	2480      	movs	r4, #128	; 0x80
   2f600:	9400      	str	r4, [sp, #0]
   2f602:	f7ff ffcd 	bl	2f5a0 <async_start>
}
   2f606:	b002      	add	sp, #8
   2f608:	bd10      	pop	{r4, pc}

0002f60a <onoff_started_callback>:
{
   2f60a:	b410      	push	{r4}
	notify(mgr, 0);
   2f60c:	241c      	movs	r4, #28
	return &data->mgr[type];
   2f60e:	6900      	ldr	r0, [r0, #16]
   2f610:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2f612:	fb03 0004 	mla	r0, r3, r4, r0
   2f616:	2100      	movs	r1, #0
}
   2f618:	bc10      	pop	{r4}
	notify(mgr, 0);
   2f61a:	4710      	bx	r2

0002f61c <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2f61c:	2003      	movs	r0, #3
   2f61e:	f7f4 b845 	b.w	236ac <nrfx_clock_start>

0002f622 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2f622:	2002      	movs	r0, #2
   2f624:	f7f4 b842 	b.w	236ac <nrfx_clock_start>

0002f628 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2f628:	2000      	movs	r0, #0
   2f62a:	f7f4 b83f 	b.w	236ac <nrfx_clock_start>

0002f62e <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2f62e:	2003      	movs	r0, #3
   2f630:	f000 bd10 	b.w	30054 <nrfx_clock_stop>

0002f634 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2f634:	2002      	movs	r0, #2
   2f636:	f000 bd0d 	b.w	30054 <nrfx_clock_stop>

0002f63a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2f63a:	2000      	movs	r0, #0
   2f63c:	f000 bd0a 	b.w	30054 <nrfx_clock_stop>

0002f640 <blocking_start_callback>:
{
   2f640:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2f642:	f7f6 ba4d 	b.w	25ae0 <z_impl_k_sem_give>

0002f646 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f646:	6843      	ldr	r3, [r0, #4]
}
   2f648:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f64a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2f64c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2f64e:	600b      	str	r3, [r1, #0]
}
   2f650:	4770      	bx	lr

0002f652 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f652:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2f654:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f658:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2f65a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2f65e:	6098      	str	r0, [r3, #8]
}
   2f660:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2f662:	60d9      	str	r1, [r3, #12]
   2f664:	4770      	bx	lr

0002f666 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f666:	6843      	ldr	r3, [r0, #4]
}
   2f668:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f66a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2f66c:	6099      	str	r1, [r3, #8]
}
   2f66e:	4770      	bx	lr

0002f670 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f670:	6843      	ldr	r3, [r0, #4]
}
   2f672:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f674:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2f676:	60d9      	str	r1, [r3, #12]
}
   2f678:	4770      	bx	lr

0002f67a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f67a:	6843      	ldr	r3, [r0, #4]
   2f67c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2f67e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2f680:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2f684:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2f686:	6090      	str	r0, [r2, #8]
}
   2f688:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2f68a:	60d3      	str	r3, [r2, #12]
   2f68c:	4770      	bx	lr

0002f68e <gpio_nrfx_manage_callback>:
{
   2f68e:	b510      	push	{r4, lr}
	return port->data;
   2f690:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2f692:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2f694:	b1f8      	cbz	r0, 2f6d6 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f696:	4288      	cmp	r0, r1
   2f698:	d119      	bne.n	2f6ce <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2f69a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2f69c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f69e:	42a1      	cmp	r1, r4
	list->head = node;
   2f6a0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2f6a2:	d100      	bne.n	2f6a6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f6a4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2f6a6:	2000      	movs	r0, #0
   2f6a8:	6008      	str	r0, [r1, #0]
	if (set) {
   2f6aa:	b12a      	cbz	r2, 2f6b8 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2f6ac:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2f6ae:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f6b0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2f6b2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f6b4:	b902      	cbnz	r2, 2f6b8 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2f6b6:	6099      	str	r1, [r3, #8]
	return 0;
   2f6b8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2f6ba:	e010      	b.n	2f6de <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f6bc:	4281      	cmp	r1, r0
   2f6be:	d106      	bne.n	2f6ce <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2f6c0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2f6c2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f6c4:	6898      	ldr	r0, [r3, #8]
   2f6c6:	4281      	cmp	r1, r0
   2f6c8:	d1ed      	bne.n	2f6a6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f6ca:	609c      	str	r4, [r3, #8]
}
   2f6cc:	e7eb      	b.n	2f6a6 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2f6ce:	4604      	mov	r4, r0
   2f6d0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f6d2:	2800      	cmp	r0, #0
   2f6d4:	d1f2      	bne.n	2f6bc <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2f6d6:	2a00      	cmp	r2, #0
   2f6d8:	d1e8      	bne.n	2f6ac <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2f6da:	f06f 0015 	mvn.w	r0, #21
}
   2f6de:	bd10      	pop	{r4, pc}

0002f6e0 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2f6e0:	2200      	movs	r2, #0
   2f6e2:	2101      	movs	r1, #1
   2f6e4:	200a      	movs	r0, #10
   2f6e6:	f7e1 bd99 	b.w	1121c <z_arm_irq_priority_set>

0002f6ea <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2f6ea:	b510      	push	{r4, lr}
	while (*count) {
   2f6ec:	680b      	ldr	r3, [r1, #0]
   2f6ee:	b913      	cbnz	r3, 2f6f6 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2f6f0:	4618      	mov	r0, r3
	*buf_len = 0;
   2f6f2:	6013      	str	r3, [r2, #0]
	return NULL;
   2f6f4:	e005      	b.n	2f702 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2f6f6:	6803      	ldr	r3, [r0, #0]
   2f6f8:	685c      	ldr	r4, [r3, #4]
   2f6fa:	b11c      	cbz	r4, 2f704 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2f6fc:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2f6fe:	6803      	ldr	r3, [r0, #0]
   2f700:	6818      	ldr	r0, [r3, #0]
}
   2f702:	bd10      	pop	{r4, pc}
		++(*current);
   2f704:	3308      	adds	r3, #8
   2f706:	6003      	str	r3, [r0, #0]
		--(*count);
   2f708:	680b      	ldr	r3, [r1, #0]
   2f70a:	3b01      	subs	r3, #1
   2f70c:	600b      	str	r3, [r1, #0]
   2f70e:	e7ed      	b.n	2f6ec <spi_context_get_next_buf.constprop.0+0x2>

0002f710 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f712:	ab0b      	add	r3, sp, #44	; 0x2c
   2f714:	9305      	str	r3, [sp, #20]
   2f716:	9303      	str	r3, [sp, #12]
   2f718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f71a:	2201      	movs	r2, #1
   2f71c:	9302      	str	r3, [sp, #8]
   2f71e:	2300      	movs	r3, #0
   2f720:	4618      	mov	r0, r3
   2f722:	e9cd 3300 	strd	r3, r3, [sp]
   2f726:	f7df feff 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2f72a:	b007      	add	sp, #28
   2f72c:	f85d fb04 	ldr.w	pc, [sp], #4

0002f730 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2f730:	4603      	mov	r3, r0
   2f732:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2f734:	7919      	ldrb	r1, [r3, #4]
   2f736:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   2f738:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2f73a:	fa03 f101 	lsl.w	r1, r3, r1
   2f73e:	6903      	ldr	r3, [r0, #16]
   2f740:	681b      	ldr	r3, [r3, #0]
   2f742:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2f744:	bf18      	it	ne
   2f746:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2f74a:	b112      	cbz	r2, 2f752 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   2f74c:	6883      	ldr	r3, [r0, #8]
   2f74e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2f750:	4718      	bx	r3
   2f752:	6883      	ldr	r3, [r0, #8]
   2f754:	691b      	ldr	r3, [r3, #16]
   2f756:	e7fb      	b.n	2f750 <gpio_pin_set_dt.isra.0+0x20>

0002f758 <_spi_context_cs_control>:
{
   2f758:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2f75a:	6803      	ldr	r3, [r0, #0]
{
   2f75c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2f75e:	b1e3      	cbz	r3, 2f79a <_spi_context_cs_control+0x42>
   2f760:	6898      	ldr	r0, [r3, #8]
   2f762:	b1d0      	cbz	r0, 2f79a <_spi_context_cs_control+0x42>
   2f764:	6805      	ldr	r5, [r0, #0]
   2f766:	b1c5      	cbz	r5, 2f79a <_spi_context_cs_control+0x42>
		if (on) {
   2f768:	b149      	cbz	r1, 2f77e <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2f76a:	2101      	movs	r1, #1
   2f76c:	f7ff ffe0 	bl	2f730 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2f770:	6823      	ldr	r3, [r4, #0]
   2f772:	689b      	ldr	r3, [r3, #8]
   2f774:	6898      	ldr	r0, [r3, #8]
}
   2f776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2f77a:	f001 be80 	b.w	3147e <z_impl_k_busy_wait>
			if (!force_off &&
   2f77e:	b912      	cbnz	r2, 2f786 <_spi_context_cs_control+0x2e>
   2f780:	889b      	ldrh	r3, [r3, #4]
   2f782:	04db      	lsls	r3, r3, #19
   2f784:	d409      	bmi.n	2f79a <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2f786:	6880      	ldr	r0, [r0, #8]
   2f788:	f001 fe79 	bl	3147e <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2f78c:	6823      	ldr	r3, [r4, #0]
   2f78e:	2100      	movs	r1, #0
   2f790:	6898      	ldr	r0, [r3, #8]
}
   2f792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2f796:	f7ff bfcb 	b.w	2f730 <gpio_pin_set_dt.isra.0>
}
   2f79a:	bd38      	pop	{r3, r4, r5, pc}

0002f79c <spi_context_unlock_unconditionally>:
{
   2f79c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2f79e:	2201      	movs	r2, #1
   2f7a0:	2100      	movs	r1, #0
{
   2f7a2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2f7a4:	f7ff ffd8 	bl	2f758 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2f7a8:	69a3      	ldr	r3, [r4, #24]
   2f7aa:	b933      	cbnz	r3, 2f7ba <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2f7ac:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2f7ae:	f104 0010 	add.w	r0, r4, #16
}
   2f7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f7b6:	f7f6 b993 	b.w	25ae0 <z_impl_k_sem_give>
   2f7ba:	bd10      	pop	{r4, pc}

0002f7bc <spi_nrfx_release>:
{
   2f7bc:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2f7be:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2f7c0:	6803      	ldr	r3, [r0, #0]
   2f7c2:	428b      	cmp	r3, r1
   2f7c4:	d106      	bne.n	2f7d4 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2f7c6:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2f7ca:	b934      	cbnz	r4, 2f7da <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2f7cc:	f7ff ffe6 	bl	2f79c <spi_context_unlock_unconditionally>
	return 0;
   2f7d0:	4620      	mov	r0, r4
}
   2f7d2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f7d4:	f06f 0015 	mvn.w	r0, #21
   2f7d8:	e7fb      	b.n	2f7d2 <spi_nrfx_release+0x16>
		return -EBUSY;
   2f7da:	f06f 000f 	mvn.w	r0, #15
   2f7de:	e7f8      	b.n	2f7d2 <spi_nrfx_release+0x16>

0002f7e0 <k_sem_give>:
   2f7e0:	f7f6 b97e 	b.w	25ae0 <z_impl_k_sem_give>

0002f7e4 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2f7e4:	b918      	cbnz	r0, 2f7ee <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2f7e6:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2f7ea:	f7ff bff9 	b.w	2f7e0 <k_sem_give>
}
   2f7ee:	4770      	bx	lr

0002f7f0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f7f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f7f2:	ab0b      	add	r3, sp, #44	; 0x2c
   2f7f4:	9305      	str	r3, [sp, #20]
   2f7f6:	9303      	str	r3, [sp, #12]
   2f7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f7fa:	9302      	str	r3, [sp, #8]
   2f7fc:	2300      	movs	r3, #0
   2f7fe:	4618      	mov	r0, r3
   2f800:	e9cd 3300 	strd	r3, r3, [sp]
   2f804:	f7df fe90 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2f808:	b007      	add	sp, #28
   2f80a:	f85d fb04 	ldr.w	pc, [sp], #4

0002f80e <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2f80e:	f04f 32ff 	mov.w	r2, #4294967295
   2f812:	f04f 33ff 	mov.w	r3, #4294967295
   2f816:	3018      	adds	r0, #24
   2f818:	f7f6 b988 	b.w	25b2c <z_impl_k_sem_take>

0002f81c <qspi_trans_lock.isra.0>:
   2f81c:	f04f 32ff 	mov.w	r2, #4294967295
   2f820:	f04f 33ff 	mov.w	r3, #4294967295
   2f824:	f7f6 b982 	b.w	25b2c <z_impl_k_sem_take>

0002f828 <qspi_nor_write_protection_set>:
{
   2f828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2f82a:	2200      	movs	r2, #0
   2f82c:	4291      	cmp	r1, r2
   2f82e:	bf0c      	ite	eq
   2f830:	2306      	moveq	r3, #6
   2f832:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2f834:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2f836:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2f83a:	9203      	str	r2, [sp, #12]
   2f83c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2f840:	f7f1 ff4c 	bl	216dc <qspi_send_cmd>
		ret = -EIO;
   2f844:	2800      	cmp	r0, #0
}
   2f846:	bf18      	it	ne
   2f848:	f06f 0004 	mvnne.w	r0, #4
   2f84c:	b005      	add	sp, #20
   2f84e:	f85d fb04 	ldr.w	pc, [sp], #4

0002f852 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2f852:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2f854:	23ff      	movs	r3, #255	; 0xff
   2f856:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2f85a:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2f85e:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2f860:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2f862:	2301      	movs	r3, #1
   2f864:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2f868:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2f86a:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2f86c:	f88d 300c 	strb.w	r3, [sp, #12]
   2f870:	ab01      	add	r3, sp, #4
   2f872:	9204      	str	r2, [sp, #16]
   2f874:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2f876:	f7f1 ff31 	bl	216dc <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2f87a:	2800      	cmp	r0, #0
   2f87c:	bfa8      	it	ge
   2f87e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2f882:	b007      	add	sp, #28
   2f884:	f85d fb04 	ldr.w	pc, [sp], #4

0002f888 <is_regular_addr_valid>:
{
   2f888:	b538      	push	{r3, r4, r5, lr}
   2f88a:	4605      	mov	r5, r0
   2f88c:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2f88e:	f000 fc3b 	bl	30108 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2f892:	2d00      	cmp	r5, #0
   2f894:	db07      	blt.n	2f8a6 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2f896:	42a8      	cmp	r0, r5
   2f898:	d905      	bls.n	2f8a6 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2f89a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2f89c:	4284      	cmp	r4, r0
   2f89e:	bf8c      	ite	hi
   2f8a0:	2000      	movhi	r0, #0
   2f8a2:	2001      	movls	r0, #1
}
   2f8a4:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2f8a6:	2000      	movs	r0, #0
   2f8a8:	e7fc      	b.n	2f8a4 <is_regular_addr_valid+0x1c>

0002f8aa <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f8aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f8ac:	ab0b      	add	r3, sp, #44	; 0x2c
   2f8ae:	9305      	str	r3, [sp, #20]
   2f8b0:	9303      	str	r3, [sp, #12]
   2f8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f8b4:	2201      	movs	r2, #1
   2f8b6:	9302      	str	r3, [sp, #8]
   2f8b8:	2300      	movs	r3, #0
   2f8ba:	4618      	mov	r0, r3
   2f8bc:	e9cd 3300 	strd	r3, r3, [sp]
   2f8c0:	f7df fe32 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2f8c4:	b007      	add	sp, #28
   2f8c6:	f85d fb04 	ldr.w	pc, [sp], #4

0002f8ca <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2f8ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f8cc:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2f8ce:	2300      	movs	r3, #0
{
   2f8d0:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2f8d2:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2f8d4:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2f8d6:	60a3      	str	r3, [r4, #8]
{
   2f8d8:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2f8da:	6913      	ldr	r3, [r2, #16]
   2f8dc:	4669      	mov	r1, sp
   2f8de:	aa01      	add	r2, sp, #4
   2f8e0:	4798      	blx	r3

	while (layout_size--) {
   2f8e2:	9b01      	ldr	r3, [sp, #4]
   2f8e4:	1e5a      	subs	r2, r3, #1
   2f8e6:	9201      	str	r2, [sp, #4]
   2f8e8:	b91b      	cbnz	r3, 2f8f2 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2f8ea:	f06f 0015 	mvn.w	r0, #21
}
   2f8ee:	b003      	add	sp, #12
   2f8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2f8f2:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2f8f4:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2f8f6:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2f8f8:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2f8fa:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2f8fc:	b985      	cbnz	r5, 2f920 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2f8fe:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2f900:	f8d0 c000 	ldr.w	ip, [r0]
   2f904:	4563      	cmp	r3, ip
   2f906:	bf28      	it	cs
   2f908:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2f90a:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2f90e:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2f910:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2f912:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2f914:	6802      	ldr	r2, [r0, #0]
   2f916:	429a      	cmp	r2, r3
   2f918:	d806      	bhi.n	2f928 <flash_get_page_info+0x5e>
		layout++;
   2f91a:	3008      	adds	r0, #8
   2f91c:	9000      	str	r0, [sp, #0]
   2f91e:	e7e0      	b.n	2f8e2 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2f920:	1a6b      	subs	r3, r5, r1
   2f922:	fbb3 f3f7 	udiv	r3, r3, r7
   2f926:	e7eb      	b.n	2f900 <flash_get_page_info+0x36>
			return 0;
   2f928:	2000      	movs	r0, #0
   2f92a:	e7e0      	b.n	2f8ee <flash_get_page_info+0x24>

0002f92c <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2f92c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2f92e:	2200      	movs	r2, #0
   2f930:	f7ff bfcb 	b.w	2f8ca <flash_get_page_info>

0002f934 <uarte_nrfx_config_get>:
{
   2f934:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2f936:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2f938:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2f93c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2f940:	2000      	movs	r0, #0
   2f942:	4770      	bx	lr

0002f944 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2f944:	6843      	ldr	r3, [r0, #4]
   2f946:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f948:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f94c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2f950:	4770      	bx	lr

0002f952 <tx_start>:
{
   2f952:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2f954:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2f956:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f958:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f95c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f960:	2200      	movs	r2, #0
   2f962:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2f966:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2f96a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2f96e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f972:	6862      	ldr	r2, [r4, #4]
   2f974:	06d2      	lsls	r2, r2, #27
   2f976:	d511      	bpl.n	2f99c <tx_start+0x4a>
	if (data->async) {
   2f978:	6902      	ldr	r2, [r0, #16]
   2f97a:	68d2      	ldr	r2, [r2, #12]
   2f97c:	b12a      	cbz	r2, 2f98a <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2f97e:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2f982:	f041 0101 	orr.w	r1, r1, #1
   2f986:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f98a:	2108      	movs	r1, #8
	return config->uarte_regs;
   2f98c:	6842      	ldr	r2, [r0, #4]
   2f98e:	6812      	ldr	r2, [r2, #0]
   2f990:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2f994:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2f998:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f99c:	2201      	movs	r2, #1
   2f99e:	609a      	str	r2, [r3, #8]
}
   2f9a0:	bd10      	pop	{r4, pc}

0002f9a2 <user_callback>:
	if (data->async->user_callback) {
   2f9a2:	6903      	ldr	r3, [r0, #16]
   2f9a4:	68da      	ldr	r2, [r3, #12]
   2f9a6:	6813      	ldr	r3, [r2, #0]
   2f9a8:	b10b      	cbz	r3, 2f9ae <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2f9aa:	6852      	ldr	r2, [r2, #4]
   2f9ac:	4718      	bx	r3
}
   2f9ae:	4770      	bx	lr

0002f9b0 <notify_uart_rx_rdy>:
{
   2f9b0:	b570      	push	{r4, r5, r6, lr}
   2f9b2:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2f9b4:	6906      	ldr	r6, [r0, #16]
{
   2f9b6:	4604      	mov	r4, r0
   2f9b8:	460d      	mov	r5, r1
	struct uart_event evt = {
   2f9ba:	2214      	movs	r2, #20
   2f9bc:	2100      	movs	r1, #0
   2f9be:	a801      	add	r0, sp, #4
   2f9c0:	f001 ff6f 	bl	318a2 <memset>
   2f9c4:	2302      	movs	r3, #2
   2f9c6:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2f9ca:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2f9cc:	4620      	mov	r0, r4
	struct uart_event evt = {
   2f9ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2f9d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2f9d2:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2f9d4:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2f9d8:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2f9da:	f7ff ffe2 	bl	2f9a2 <user_callback>
}
   2f9de:	b006      	add	sp, #24
   2f9e0:	bd70      	pop	{r4, r5, r6, pc}

0002f9e2 <rx_buf_release>:
{
   2f9e2:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2f9e4:	680e      	ldr	r6, [r1, #0]
{
   2f9e6:	4605      	mov	r5, r0
   2f9e8:	460c      	mov	r4, r1
   2f9ea:	b086      	sub	sp, #24
	if (*buf) {
   2f9ec:	b17e      	cbz	r6, 2fa0e <rx_buf_release+0x2c>
		struct uart_event evt = {
   2f9ee:	2214      	movs	r2, #20
   2f9f0:	2100      	movs	r1, #0
   2f9f2:	a801      	add	r0, sp, #4
   2f9f4:	f001 ff55 	bl	318a2 <memset>
   2f9f8:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2f9fa:	4628      	mov	r0, r5
   2f9fc:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2fa00:	f88d 3004 	strb.w	r3, [sp, #4]
   2fa04:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2fa06:	f7ff ffcc 	bl	2f9a2 <user_callback>
		*buf = NULL;
   2fa0a:	2300      	movs	r3, #0
   2fa0c:	6023      	str	r3, [r4, #0]
}
   2fa0e:	b006      	add	sp, #24
   2fa10:	bd70      	pop	{r4, r5, r6, pc}

0002fa12 <notify_rx_disable>:
{
   2fa12:	b510      	push	{r4, lr}
   2fa14:	b086      	sub	sp, #24
   2fa16:	4604      	mov	r4, r0
	struct uart_event evt = {
   2fa18:	2214      	movs	r2, #20
   2fa1a:	2100      	movs	r1, #0
   2fa1c:	a801      	add	r0, sp, #4
   2fa1e:	f001 ff40 	bl	318a2 <memset>
   2fa22:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2fa24:	4620      	mov	r0, r4
   2fa26:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2fa28:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2fa2c:	f7ff ffb9 	bl	2f9a2 <user_callback>
}
   2fa30:	b006      	add	sp, #24
   2fa32:	bd10      	pop	{r4, pc}

0002fa34 <uarte_nrfx_rx_buf_rsp>:
{
   2fa34:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2fa36:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2fa38:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2fa3a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2fa3c:	f04f 0020 	mov.w	r0, #32
   2fa40:	f3ef 8611 	mrs	r6, BASEPRI
   2fa44:	f380 8812 	msr	BASEPRI_MAX, r0
   2fa48:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2fa4c:	68ec      	ldr	r4, [r5, #12]
   2fa4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2fa50:	b198      	cbz	r0, 2fa7a <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2fa52:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2fa54:	b9a0      	cbnz	r0, 2fa80 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2fa56:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2fa58:	68ec      	ldr	r4, [r5, #12]
   2fa5a:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fa5c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2fa60:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2fa64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2fa68:	f042 0220 	orr.w	r2, r2, #32
   2fa6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2fa70:	f386 8811 	msr	BASEPRI, r6
   2fa74:	f3bf 8f6f 	isb	sy
}
   2fa78:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2fa7a:	f06f 000c 	mvn.w	r0, #12
   2fa7e:	e7f7      	b.n	2fa70 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2fa80:	f06f 000f 	mvn.w	r0, #15
   2fa84:	e7f4      	b.n	2fa70 <uarte_nrfx_rx_buf_rsp+0x3c>

0002fa86 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2fa86:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2fa88:	68d8      	ldr	r0, [r3, #12]
   2fa8a:	b120      	cbz	r0, 2fa96 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2fa8c:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2fa8e:	68db      	ldr	r3, [r3, #12]
	return 0;
   2fa90:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2fa92:	605a      	str	r2, [r3, #4]
	return 0;
   2fa94:	4770      	bx	lr
		return -ENOTSUP;
   2fa96:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2fa9a:	4770      	bx	lr

0002fa9c <uarte_nrfx_poll_in>:
{
   2fa9c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2fa9e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2faa0:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2faa2:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2faa4:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2faa6:	b960      	cbnz	r0, 2fac2 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2faa8:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2faac:	b164      	cbz	r4, 2fac8 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2faae:	6992      	ldr	r2, [r2, #24]
   2fab0:	7812      	ldrb	r2, [r2, #0]
   2fab2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fab4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2fab8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fabc:	2201      	movs	r2, #1
   2fabe:	601a      	str	r2, [r3, #0]
}
   2fac0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2fac2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fac6:	e7fb      	b.n	2fac0 <uarte_nrfx_poll_in+0x24>
		return -1;
   2fac8:	f04f 30ff 	mov.w	r0, #4294967295
   2facc:	e7f8      	b.n	2fac0 <uarte_nrfx_poll_in+0x24>

0002face <uarte_nrfx_rx_disable>:
{
   2face:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2fad0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2fad2:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2fad4:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2fad6:	68eb      	ldr	r3, [r5, #12]
   2fad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2fada:	b1ba      	cbz	r2, 2fb0c <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2fadc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2fade:	b153      	cbz	r3, 2faf6 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2fae0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2fae4:	f023 0320 	bic.w	r3, r3, #32
   2fae8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2faec:	2300      	movs	r3, #0
   2faee:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2faf2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2faf6:	68e8      	ldr	r0, [r5, #12]
   2faf8:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2fafa:	f001 fcf2 	bl	314e2 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2fafe:	2000      	movs	r0, #0
   2fb00:	68eb      	ldr	r3, [r5, #12]
   2fb02:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fb06:	2301      	movs	r3, #1
   2fb08:	6063      	str	r3, [r4, #4]
}
   2fb0a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2fb0c:	f06f 000d 	mvn.w	r0, #13
   2fb10:	e7fb      	b.n	2fb0a <uarte_nrfx_rx_disable+0x3c>

0002fb12 <setup_tx_cache>:
{
   2fb12:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2fb14:	68c3      	ldr	r3, [r0, #12]
   2fb16:	68da      	ldr	r2, [r3, #12]
   2fb18:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2fb1a:	1a52      	subs	r2, r2, r1
   2fb1c:	d00f      	beq.n	2fb3e <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2fb1e:	2a08      	cmp	r2, #8
   2fb20:	bf28      	it	cs
   2fb22:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2fb24:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2fb26:	68c3      	ldr	r3, [r0, #12]
   2fb28:	6999      	ldr	r1, [r3, #24]
   2fb2a:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2fb2c:	68c3      	ldr	r3, [r0, #12]
   2fb2e:	6898      	ldr	r0, [r3, #8]
   2fb30:	69d9      	ldr	r1, [r3, #28]
   2fb32:	4401      	add	r1, r0
   2fb34:	6998      	ldr	r0, [r3, #24]
   2fb36:	f001 fe7a 	bl	3182e <memcpy>
	return true;
   2fb3a:	2001      	movs	r0, #1
}
   2fb3c:	bd08      	pop	{r3, pc}
		return false;
   2fb3e:	4610      	mov	r0, r2
   2fb40:	e7fc      	b.n	2fb3c <setup_tx_cache+0x2a>

0002fb42 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2fb42:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2fb44:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2fb46:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2fb48:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2fb4a:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2fb4e:	b1f1      	cbz	r1, 2fb8e <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2fb50:	2100      	movs	r1, #0
   2fb52:	4618      	mov	r0, r3
   2fb54:	f001 fea5 	bl	318a2 <memset>
   2fb58:	4603      	mov	r3, r0
   2fb5a:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fb5c:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fb60:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fb62:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2fb64:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fb68:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2fb6c:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fb70:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fb72:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fb76:	2800      	cmp	r0, #0
   2fb78:	d0fb      	beq.n	2fb72 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fb7a:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2fb7e:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2fb82:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2fb86:	b92b      	cbnz	r3, 2fb94 <rx_flush.isra.0+0x52>
			return rx_amount;
   2fb88:	b2c0      	uxtb	r0, r0
}
   2fb8a:	b002      	add	sp, #8
   2fb8c:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2fb8e:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2fb90:	4669      	mov	r1, sp
   2fb92:	e7e3      	b.n	2fb5c <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2fb94:	4285      	cmp	r5, r0
   2fb96:	d1f7      	bne.n	2fb88 <rx_flush.isra.0+0x46>
   2fb98:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2fb9a:	4293      	cmp	r3, r2
   2fb9c:	d101      	bne.n	2fba2 <rx_flush.isra.0+0x60>
	return 0;
   2fb9e:	2000      	movs	r0, #0
   2fba0:	e7f3      	b.n	2fb8a <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2fba2:	f813 1b01 	ldrb.w	r1, [r3], #1
   2fba6:	2900      	cmp	r1, #0
   2fba8:	d0f7      	beq.n	2fb9a <rx_flush.isra.0+0x58>
   2fbaa:	e7ed      	b.n	2fb88 <rx_flush.isra.0+0x46>

0002fbac <async_uart_release>:
{
   2fbac:	b570      	push	{r4, r5, r6, lr}
   2fbae:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2fbb0:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2fbb2:	f04f 0320 	mov.w	r3, #32
   2fbb6:	f3ef 8611 	mrs	r6, BASEPRI
   2fbba:	f383 8812 	msr	BASEPRI_MAX, r3
   2fbbe:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2fbc2:	68d0      	ldr	r0, [r2, #12]
   2fbc4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2fbc8:	ea23 0301 	bic.w	r3, r3, r1
   2fbcc:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2fbd0:	68d5      	ldr	r5, [r2, #12]
   2fbd2:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2fbd6:	b973      	cbnz	r3, 2fbf6 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2fbd8:	2902      	cmp	r1, #2
   2fbda:	d107      	bne.n	2fbec <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2fbdc:	2205      	movs	r2, #5
   2fbde:	6860      	ldr	r0, [r4, #4]
   2fbe0:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2fbe4:	f7ff ffad 	bl	2fb42 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2fbe8:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2fbec:	2200      	movs	r2, #0
	return config->uarte_regs;
   2fbee:	6863      	ldr	r3, [r4, #4]
   2fbf0:	681b      	ldr	r3, [r3, #0]
   2fbf2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2fbf6:	f386 8811 	msr	BASEPRI, r6
   2fbfa:	f3bf 8f6f 	isb	sy
}
   2fbfe:	bd70      	pop	{r4, r5, r6, pc}

0002fc00 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2fc00:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2fc02:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fc04:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fc08:	b940      	cbnz	r0, 2fc1c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2fc0a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fc0c:	079b      	lsls	r3, r3, #30
   2fc0e:	d406      	bmi.n	2fc1e <is_tx_ready.isra.0+0x1e>
   2fc10:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2fc14:	3800      	subs	r0, #0
   2fc16:	bf18      	it	ne
   2fc18:	2001      	movne	r0, #1
   2fc1a:	4770      	bx	lr
   2fc1c:	2001      	movs	r0, #1
}
   2fc1e:	4770      	bx	lr

0002fc20 <start_tx_locked>:
{
   2fc20:	b510      	push	{r4, lr}
   2fc22:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2fc24:	6840      	ldr	r0, [r0, #4]
   2fc26:	f7ff ffeb 	bl	2fc00 <is_tx_ready.isra.0>
   2fc2a:	68cb      	ldr	r3, [r1, #12]
   2fc2c:	b918      	cbnz	r0, 2fc36 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2fc2e:	2201      	movs	r2, #1
   2fc30:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2fc34:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2fc36:	2200      	movs	r2, #0
   2fc38:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2fc3c:	f04f 32ff 	mov.w	r2, #4294967295
   2fc40:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fc42:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2fc44:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fc48:	68cb      	ldr	r3, [r1, #12]
}
   2fc4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fc4e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2fc52:	f7ff be7e 	b.w	2f952 <tx_start>

0002fc56 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2fc56:	b510      	push	{r4, lr}
   2fc58:	4604      	mov	r4, r0
   2fc5a:	2200      	movs	r2, #0
   2fc5c:	2101      	movs	r1, #1
   2fc5e:	200b      	movs	r0, #11
   2fc60:	f7e1 fadc 	bl	1121c <z_arm_irq_priority_set>
   2fc64:	200b      	movs	r0, #11
   2fc66:	f7e1 faa9 	bl	111bc <arch_irq_enable>
   2fc6a:	4620      	mov	r0, r4
   2fc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fc70:	f7f2 ba98 	b.w	221a4 <uarte_instance_init.constprop.0>

0002fc74 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2fc74:	b510      	push	{r4, lr}
   2fc76:	4604      	mov	r4, r0
   2fc78:	2200      	movs	r2, #0
   2fc7a:	2101      	movs	r1, #1
   2fc7c:	2008      	movs	r0, #8
   2fc7e:	f7e1 facd 	bl	1121c <z_arm_irq_priority_set>
   2fc82:	2008      	movs	r0, #8
   2fc84:	f7e1 fa9a 	bl	111bc <arch_irq_enable>
   2fc88:	4620      	mov	r0, r4
   2fc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fc8e:	f7f2 ba89 	b.w	221a4 <uarte_instance_init.constprop.0>

0002fc92 <uarte_nrfx_rx_enable>:
{
   2fc92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   2fc96:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   2fc9a:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   2fc9c:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   2fca0:	4605      	mov	r5, r0
   2fca2:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   2fca4:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   2fca6:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   2fcaa:	2a00      	cmp	r2, #0
   2fcac:	d175      	bne.n	2fd9a <uarte_nrfx_rx_enable+0x108>
	if (data->async->rx_enabled) {
   2fcae:	68e2      	ldr	r2, [r4, #12]
   2fcb0:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   2fcb4:	2900      	cmp	r1, #0
   2fcb6:	d173      	bne.n	2fda0 <uarte_nrfx_rx_enable+0x10e>
		MAX(timeout / RX_TIMEOUT_DIV,
   2fcb8:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   2fcbc:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   2fcbe:	bfca      	itet	gt
   2fcc0:	2205      	movgt	r2, #5
   2fcc2:	235c      	movle	r3, #92	; 0x5c
   2fcc4:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   2fcc8:	68e2      	ldr	r2, [r4, #12]
   2fcca:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   2fccc:	68e3      	ldr	r3, [r4, #12]
   2fcce:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   2fcd2:	68e3      	ldr	r3, [r4, #12]
   2fcd4:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   2fcd6:	2300      	movs	r3, #0
   2fcd8:	68e2      	ldr	r2, [r4, #12]
   2fcda:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   2fcdc:	68e2      	ldr	r2, [r4, #12]
   2fcde:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   2fce0:	68e2      	ldr	r2, [r4, #12]
   2fce2:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fce4:	f8da 3004 	ldr.w	r3, [sl, #4]
   2fce8:	06da      	lsls	r2, r3, #27
   2fcea:	d523      	bpl.n	2fd34 <uarte_nrfx_rx_enable+0xa2>
		if (data->async->rx_flush_cnt) {
   2fcec:	68e1      	ldr	r1, [r4, #12]
   2fcee:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   2fcf2:	b1fe      	cbz	r6, 2fd34 <uarte_nrfx_rx_enable+0xa2>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   2fcf4:	42be      	cmp	r6, r7
   2fcf6:	bf28      	it	cs
   2fcf8:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fcfa:	4640      	mov	r0, r8
   2fcfc:	4632      	mov	r2, r6
   2fcfe:	31c4      	adds	r1, #196	; 0xc4
   2fd00:	f001 fd95 	bl	3182e <memcpy>
			if (!len) {
   2fd04:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   2fd06:	44b0      	add	r8, r6
			if (!len) {
   2fd08:	d114      	bne.n	2fd34 <uarte_nrfx_rx_enable+0xa2>
				data->async->rx_flush_cnt -= cpy_len;
   2fd0a:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   2fd0c:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   2fd0e:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   2fd12:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   2fd14:	1b9b      	subs	r3, r3, r6
   2fd16:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   2fd1a:	f7ff fe49 	bl	2f9b0 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   2fd1e:	68e1      	ldr	r1, [r4, #12]
   2fd20:	4628      	mov	r0, r5
   2fd22:	3158      	adds	r1, #88	; 0x58
   2fd24:	f7ff fe5d 	bl	2f9e2 <rx_buf_release>
				notify_rx_disable(dev);
   2fd28:	4628      	mov	r0, r5
   2fd2a:	f7ff fe72 	bl	2fa12 <notify_rx_disable>
				return 0;
   2fd2e:	2000      	movs	r0, #0
}
   2fd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fd34:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fd36:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2fd3a:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fd3e:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   2fd42:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   2fd46:	2201      	movs	r2, #1
   2fd48:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   2fd4c:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   2fd50:	68e3      	ldr	r3, [r4, #12]
   2fd52:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fd56:	f8da 3004 	ldr.w	r3, [sl, #4]
   2fd5a:	06db      	lsls	r3, r3, #27
   2fd5c:	d519      	bpl.n	2fd92 <uarte_nrfx_rx_enable+0x100>
	__asm__ volatile(
   2fd5e:	f04f 0320 	mov.w	r3, #32
   2fd62:	f3ef 8111 	mrs	r1, BASEPRI
   2fd66:	f383 8812 	msr	BASEPRI_MAX, r3
   2fd6a:	f3bf 8f6f 	isb	sy
	if (data->async) {
   2fd6e:	692b      	ldr	r3, [r5, #16]
   2fd70:	68db      	ldr	r3, [r3, #12]
   2fd72:	b12b      	cbz	r3, 2fd80 <uarte_nrfx_rx_enable+0xee>
		data->async->low_power_mask |= mask;
   2fd74:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2fd78:	f042 0202 	orr.w	r2, r2, #2
   2fd7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2fd80:	2208      	movs	r2, #8
	return config->uarte_regs;
   2fd82:	686b      	ldr	r3, [r5, #4]
   2fd84:	681b      	ldr	r3, [r3, #0]
   2fd86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2fd8a:	f381 8811 	msr	BASEPRI, r1
   2fd8e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fd92:	2301      	movs	r3, #1
   2fd94:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   2fd98:	e7c9      	b.n	2fd2e <uarte_nrfx_rx_enable+0x9c>
		return -ENOTSUP;
   2fd9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fd9e:	e7c7      	b.n	2fd30 <uarte_nrfx_rx_enable+0x9e>
		return -EBUSY;
   2fda0:	f06f 000f 	mvn.w	r0, #15
   2fda4:	e7c4      	b.n	2fd30 <uarte_nrfx_rx_enable+0x9e>

0002fda6 <rx_timeout>:
{
   2fda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2fda8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2fdaa:	68e3      	ldr	r3, [r4, #12]
   2fdac:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2fdb0:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2fdb4:	bb13      	cbnz	r3, 2fdfc <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2fdb6:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2fdb8:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2fdba:	6873      	ldr	r3, [r6, #4]
   2fdbc:	681b      	ldr	r3, [r3, #0]
   2fdbe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2fdc2:	68e3      	ldr	r3, [r4, #12]
   2fdc4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2fdc8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2fdca:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2fdcc:	bf1f      	itttt	ne
   2fdce:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2fdd0:	68e3      	ldrne	r3, [r4, #12]
   2fdd2:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2fdd4:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2fdd6:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2fdd8:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2fddc:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2fdde:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2fde0:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2fde2:	da0c      	bge.n	2fdfe <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2fde4:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2fde8:	68e3      	ldr	r3, [r4, #12]
   2fdea:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2fdee:	4281      	cmp	r1, r0
   2fdf0:	d80b      	bhi.n	2fe0a <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2fdf2:	2210      	movs	r2, #16
	return config->uarte_regs;
   2fdf4:	6873      	ldr	r3, [r6, #4]
   2fdf6:	681b      	ldr	r3, [r3, #0]
   2fdf8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2fdfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2fdfe:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2fe02:	eb02 0c01 	add.w	ip, r2, r1
   2fe06:	4584      	cmp	ip, r0
   2fe08:	d904      	bls.n	2fe14 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2fe0a:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2fe0c:	2d00      	cmp	r5, #0
   2fe0e:	ddf0      	ble.n	2fdf2 <rx_timeout+0x4c>
		clipped = true;
   2fe10:	2701      	movs	r7, #1
   2fe12:	e005      	b.n	2fe20 <rx_timeout+0x7a>
	if (len > 0) {
   2fe14:	2a00      	cmp	r2, #0
   2fe16:	d0ec      	beq.n	2fdf2 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2fe18:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2fe1c:	428a      	cmp	r2, r1
   2fe1e:	da12      	bge.n	2fe46 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2fe20:	4629      	mov	r1, r5
   2fe22:	4630      	mov	r0, r6
   2fe24:	f7ff fdc4 	bl	2f9b0 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2fe28:	68e2      	ldr	r2, [r4, #12]
   2fe2a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2fe2c:	442b      	add	r3, r5
   2fe2e:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2fe30:	68e2      	ldr	r2, [r4, #12]
   2fe32:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2fe34:	442b      	add	r3, r5
   2fe36:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2fe38:	2f00      	cmp	r7, #0
   2fe3a:	d0da      	beq.n	2fdf2 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2fe3c:	68e0      	ldr	r0, [r4, #12]
   2fe3e:	3080      	adds	r0, #128	; 0x80
   2fe40:	f001 fb4f 	bl	314e2 <z_impl_k_timer_stop>
}
   2fe44:	e7d5      	b.n	2fdf2 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2fe46:	1a52      	subs	r2, r2, r1
   2fe48:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2fe4a:	e7d2      	b.n	2fdf2 <rx_timeout+0x4c>

0002fe4c <uarte_nrfx_tx_abort>:
{
   2fe4c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2fe4e:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2fe50:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2fe52:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2fe54:	68da      	ldr	r2, [r3, #12]
   2fe56:	6891      	ldr	r1, [r2, #8]
   2fe58:	b151      	cbz	r1, 2fe70 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2fe5a:	2400      	movs	r4, #0
   2fe5c:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2fe60:	68d8      	ldr	r0, [r3, #12]
   2fe62:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2fe64:	f001 fb3d 	bl	314e2 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fe68:	2301      	movs	r3, #1
	return 0;
   2fe6a:	4620      	mov	r0, r4
   2fe6c:	60eb      	str	r3, [r5, #12]
}
   2fe6e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2fe70:	f06f 000d 	mvn.w	r0, #13
   2fe74:	e7fb      	b.n	2fe6e <uarte_nrfx_tx_abort+0x22>

0002fe76 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2fe76:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2fe78:	6818      	ldr	r0, [r3, #0]
   2fe7a:	f7ff bfe7 	b.w	2fe4c <uarte_nrfx_tx_abort>

0002fe7e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2fe7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2fe80:	ab0b      	add	r3, sp, #44	; 0x2c
   2fe82:	9305      	str	r3, [sp, #20]
   2fe84:	9303      	str	r3, [sp, #12]
   2fe86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fe88:	9302      	str	r3, [sp, #8]
   2fe8a:	2300      	movs	r3, #0
   2fe8c:	4618      	mov	r0, r3
   2fe8e:	e9cd 3300 	strd	r3, r3, [sp]
   2fe92:	f7df fb49 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2fe96:	b007      	add	sp, #28
   2fe98:	f85d fb04 	ldr.w	pc, [sp], #4

0002fe9c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2fe9c:	2000      	movs	r0, #0
   2fe9e:	4770      	bx	lr

0002fea0 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2fea0:	b538      	push	{r3, r4, r5, lr}
   2fea2:	460c      	mov	r4, r1
   2fea4:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2fea6:	f7ea fdd9 	bl	1aa5c <bt_is_ready>
   2feaa:	b128      	cbz	r0, 2feb8 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2feac:	4629      	mov	r1, r5
   2feae:	4620      	mov	r0, r4
}
   2feb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2feb4:	f7e9 bfe0 	b.w	19e78 <bt_hci_le_rand>
}
   2feb8:	f06f 000a 	mvn.w	r0, #10
   2febc:	bd38      	pop	{r3, r4, r5, pc}

0002febe <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2febe:	4608      	mov	r0, r1
   2fec0:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2fec2:	4611      	mov	r1, r2
   2fec4:	f7f3 fa6e 	bl	233a4 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2fec8:	2800      	cmp	r0, #0
	}

	return 0;
}
   2feca:	bf18      	it	ne
   2fecc:	f06f 0004 	mvnne.w	r0, #4
   2fed0:	bd08      	pop	{r3, pc}

0002fed2 <entropy_psa_crypto_rng_init>:
{
   2fed2:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2fed4:	f000 f886 	bl	2ffe4 <psa_crypto_init>
		return -EIO;
   2fed8:	2800      	cmp	r0, #0
}
   2feda:	bf18      	it	ne
   2fedc:	f06f 0004 	mvnne.w	r0, #4
   2fee0:	bd08      	pop	{r3, pc}

0002fee2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2fee2:	4770      	bx	lr

0002fee4 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2fee4:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2fee6:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2feea:	009b      	lsls	r3, r3, #2
   2feec:	b29b      	uxth	r3, r3
   2feee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2fef2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2fef6:	601a      	str	r2, [r3, #0]
   2fef8:	681b      	ldr	r3, [r3, #0]
}
   2fefa:	4770      	bx	lr

0002fefc <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   2fefc:	b130      	cbz	r0, 2ff0c <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   2fefe:	3010      	adds	r0, #16
   2ff00:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   2ff02:	b2c0      	uxtb	r0, r0
   2ff04:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2ff08:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   2ff0c:	4770      	bx	lr

0002ff0e <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   2ff0e:	f7f2 be61 	b.w	22bd4 <compare_set>

0002ff12 <sys_clock_cycle_get_32>:
{
   2ff12:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2ff14:	f7f2 fe3c 	bl	22b90 <z_nrf_rtc_timer_read>
}
   2ff18:	bd08      	pop	{r3, pc}

0002ff1a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2ff1a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2ff1c:	6843      	ldr	r3, [r0, #4]
   2ff1e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2ff20:	7a05      	ldrb	r5, [r0, #8]
   2ff22:	6844      	ldr	r4, [r0, #4]
   2ff24:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2ff28:	42a3      	cmp	r3, r4
   2ff2a:	d302      	bcc.n	2ff32 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2ff2c:	f06f 0001 	mvn.w	r0, #1
}
   2ff30:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2ff32:	795c      	ldrb	r4, [r3, #5]
   2ff34:	428c      	cmp	r4, r1
   2ff36:	d001      	beq.n	2ff3c <pinctrl_lookup_state+0x22>
		(*state)++;
   2ff38:	3308      	adds	r3, #8
   2ff3a:	e7f0      	b.n	2ff1e <pinctrl_lookup_state+0x4>
			return 0;
   2ff3c:	2000      	movs	r0, #0
   2ff3e:	e7f7      	b.n	2ff30 <pinctrl_lookup_state+0x16>

0002ff40 <mbox_nrf_register_callback>:
{
   2ff40:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2ff42:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2ff44:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2ff46:	bf9f      	itttt	ls
   2ff48:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2ff4c:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2ff50:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2ff52:	2000      	movls	r0, #0
		return -EINVAL;
   2ff54:	bf88      	it	hi
   2ff56:	f06f 0015 	mvnhi.w	r0, #21
}
   2ff5a:	bd10      	pop	{r4, pc}

0002ff5c <mbox_nrf_mtu_get>:
}
   2ff5c:	2000      	movs	r0, #0
   2ff5e:	4770      	bx	lr

0002ff60 <mbox_nrf_max_channels_get>:
}
   2ff60:	2010      	movs	r0, #16
   2ff62:	4770      	bx	lr

0002ff64 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2ff64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2ff66:	ab0b      	add	r3, sp, #44	; 0x2c
   2ff68:	9305      	str	r3, [sp, #20]
   2ff6a:	9303      	str	r3, [sp, #12]
   2ff6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ff6e:	2202      	movs	r2, #2
   2ff70:	9302      	str	r3, [sp, #8]
   2ff72:	2300      	movs	r3, #0
   2ff74:	4618      	mov	r0, r3
   2ff76:	e9cd 3300 	strd	r3, r3, [sp]
   2ff7a:	f7df fad5 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   2ff7e:	b007      	add	sp, #28
   2ff80:	f85d fb04 	ldr.w	pc, [sp], #4

0002ff84 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2ff84:	2000      	movs	r0, #0
   2ff86:	4770      	bx	lr

0002ff88 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2ff88:	2300      	movs	r3, #0
{
   2ff8a:	b570      	push	{r4, r5, r6, lr}
   2ff8c:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2ff8e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2ff92:	ab03      	add	r3, sp, #12
   2ff94:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2ff96:	2304      	movs	r3, #4
{
   2ff98:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2ff9a:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2ff9c:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2ff9e:	b169      	cbz	r1, 2ffbc <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2ffa0:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2ffa2:	680b      	ldr	r3, [r1, #0]
   2ffa4:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2ffa6:	684b      	ldr	r3, [r1, #4]
   2ffa8:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2ffaa:	2101      	movs	r1, #1
   2ffac:	2041      	movs	r0, #65	; 0x41
   2ffae:	f7f3 fa37 	bl	23420 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2ffb2:	1e05      	subs	r5, r0, #0
   2ffb4:	dc04      	bgt.n	2ffc0 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2ffb6:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2ffb8:	b008      	add	sp, #32
   2ffba:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2ffbc:	2601      	movs	r6, #1
   2ffbe:	e7f4      	b.n	2ffaa <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2ffc0:	1e23      	subs	r3, r4, #0
   2ffc2:	bf18      	it	ne
   2ffc4:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2ffc6:	2100      	movs	r1, #0
   2ffc8:	e9cd 4300 	strd	r4, r3, [sp]
   2ffcc:	aa04      	add	r2, sp, #16
   2ffce:	4633      	mov	r3, r6
   2ffd0:	f7f3 fa0a 	bl	233e8 <psa_call>
   2ffd4:	4604      	mov	r4, r0
    psa_close(handle);
   2ffd6:	4628      	mov	r0, r5
   2ffd8:	f7f3 fa30 	bl	2343c <psa_close>
    if (status < PSA_SUCCESS) {
   2ffdc:	2c00      	cmp	r4, #0
   2ffde:	dbea      	blt.n	2ffb6 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2ffe0:	4620      	mov	r0, r4
   2ffe2:	e7e9      	b.n	2ffb8 <tfm_platform_ioctl+0x30>

0002ffe4 <psa_crypto_init>:
}
   2ffe4:	2000      	movs	r0, #0
   2ffe6:	4770      	bx	lr

0002ffe8 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2ffe8:	b510      	push	{r4, lr}
   2ffea:	b088      	sub	sp, #32
   2ffec:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2ffee:	ab05      	add	r3, sp, #20
   2fff0:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2fff2:	230c      	movs	r3, #12
   2fff4:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2fff6:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2fff8:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2fffc:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   30000:	eb0d 0103 	add.w	r1, sp, r3
   30004:	aa03      	add	r2, sp, #12
   30006:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   30008:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   3000c:	f7ff ffbc 	bl	2ff88 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   30010:	9b00      	ldr	r3, [sp, #0]
   30012:	6023      	str	r3, [r4, #0]

	return ret;
}
   30014:	b008      	add	sp, #32
   30016:	bd10      	pop	{r4, pc}

00030018 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   30018:	2300      	movs	r3, #0
{
   3001a:	b510      	push	{r4, lr}
   3001c:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   3001e:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   30022:	ab05      	add	r3, sp, #20
   30024:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   30026:	230c      	movs	r3, #12
   30028:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   3002a:	2304      	movs	r3, #4
{
   3002c:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   3002e:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   30030:	aa03      	add	r2, sp, #12
   30032:	eb0d 0103 	add.w	r1, sp, r3
   30036:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   30038:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   3003a:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   3003e:	f7ff ffa3 	bl	2ff88 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   30042:	9b00      	ldr	r3, [sp, #0]
   30044:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   30046:	b008      	add	sp, #32
   30048:	bd10      	pop	{r4, pc}

0003004a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   3004a:	f7f3 ba05 	b.w	23458 <SystemCoreClockUpdate>

0003004e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3004e:	4700      	bx	r0

00030050 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   30050:	f001 ba15 	b.w	3147e <z_impl_k_busy_wait>

00030054 <nrfx_clock_stop>:
    clock_stop(domain);
   30054:	f7f3 ba48 	b.w	234e8 <clock_stop>

00030058 <nrf_gpio_reconfigure>:
{
   30058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3005a:	4616      	mov	r6, r2
   3005c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   30060:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30062:	a801      	add	r0, sp, #4
{
   30064:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30066:	f7f3 fbe7 	bl	23838 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3006a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3006c:	f1b6 0c00 	subs.w	ip, r6, #0
   30070:	bf18      	it	ne
   30072:	f04f 0c01 	movne.w	ip, #1
   30076:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3007a:	1e0b      	subs	r3, r1, #0
   3007c:	bf18      	it	ne
   3007e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30080:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   30082:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30086:	bf14      	ite	ne
   30088:	f04f 0c0c 	movne.w	ip, #12
   3008c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   30090:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   30092:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   30096:	bf14      	ite	ne
   30098:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   3009c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   300a0:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   300a2:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   300a6:	bf14      	ite	ne
   300a8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   300ac:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   300b0:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   300b4:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   300b8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   300bc:	b101      	cbz	r1, 300c0 <nrf_gpio_reconfigure+0x68>
   300be:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   300c0:	b10e      	cbz	r6, 300c6 <nrf_gpio_reconfigure+0x6e>
   300c2:	7836      	ldrb	r6, [r6, #0]
   300c4:	0076      	lsls	r6, r6, #1
   300c6:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   300c8:	b10d      	cbz	r5, 300ce <nrf_gpio_reconfigure+0x76>
   300ca:	782d      	ldrb	r5, [r5, #0]
   300cc:	00ad      	lsls	r5, r5, #2
   300ce:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   300d0:	b10c      	cbz	r4, 300d6 <nrf_gpio_reconfigure+0x7e>
   300d2:	7824      	ldrb	r4, [r4, #0]
   300d4:	0224      	lsls	r4, r4, #8
   300d6:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   300d8:	b10f      	cbz	r7, 300de <nrf_gpio_reconfigure+0x86>
   300da:	783f      	ldrb	r7, [r7, #0]
   300dc:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   300de:	430c      	orrs	r4, r1
   300e0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   300e2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   300e6:	b003      	add	sp, #12
   300e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000300ea <nrf_gpio_cfg_sense_set>:
{
   300ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   300ec:	f10d 030f 	add.w	r3, sp, #15
   300f0:	9301      	str	r3, [sp, #4]
   300f2:	2300      	movs	r3, #0
{
   300f4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   300f8:	461a      	mov	r2, r3
   300fa:	4619      	mov	r1, r3
   300fc:	9300      	str	r3, [sp, #0]
   300fe:	f7ff ffab 	bl	30058 <nrf_gpio_reconfigure>
}
   30102:	b005      	add	sp, #20
   30104:	f85d fb04 	ldr.w	pc, [sp], #4

00030108 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   30108:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3010c:	4770      	bx	lr

0003010e <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3010e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   30112:	4770      	bx	lr

00030114 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   30114:	f44f 7080 	mov.w	r0, #256	; 0x100
   30118:	4770      	bx	lr

0003011a <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   3011a:	2100      	movs	r1, #0
   3011c:	f7f4 b83c 	b.w	24198 <nrf_gpio_cfg.constprop.0>

00030120 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   30120:	2302      	movs	r3, #2
   30122:	f7f3 bf91 	b.w	24048 <qspi_xfer>

00030126 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   30126:	2303      	movs	r3, #3
   30128:	f7f3 bf8e 	b.w	24048 <qspi_xfer>

0003012c <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   3012c:	2100      	movs	r1, #0
   3012e:	2002      	movs	r0, #2
   30130:	f7f4 ba28 	b.w	24584 <nrfx_qspi_erase>

00030134 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30134:	1c43      	adds	r3, r0, #1
{
   30136:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30138:	d005      	beq.n	30146 <spim_pin_uninit+0x12>
   3013a:	2300      	movs	r3, #0
   3013c:	2201      	movs	r2, #1
   3013e:	4619      	mov	r1, r3
   30140:	9300      	str	r3, [sp, #0]
   30142:	f7f4 fa95 	bl	24670 <nrf_gpio_cfg.constprop.0>
}
   30146:	b003      	add	sp, #12
   30148:	f85d fb04 	ldr.w	pc, [sp], #4

0003014c <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   3014c:	7f83      	ldrb	r3, [r0, #30]
   3014e:	075a      	lsls	r2, r3, #29
   30150:	d40b      	bmi.n	3016a <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   30152:	7fc0      	ldrb	r0, [r0, #31]
   30154:	28ff      	cmp	r0, #255	; 0xff
   30156:	d008      	beq.n	3016a <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   30158:	079b      	lsls	r3, r3, #30
   3015a:	bf58      	it	pl
   3015c:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   30160:	b909      	cbnz	r1, 30166 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   30162:	f7f4 ba75 	b.w	24650 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   30166:	f7f4 baa3 	b.w	246b0 <nrf_gpio_pin_set>
}
   3016a:	4770      	bx	lr

0003016c <metal_device_open>:
{
   3016c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3016e:	460c      	mov	r4, r1
   30170:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   30172:	4606      	mov	r6, r0
   30174:	b918      	cbnz	r0, 3017e <metal_device_open+0x12>
		return -EINVAL;
   30176:	f06f 0015 	mvn.w	r0, #21
}
   3017a:	b002      	add	sp, #8
   3017c:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   3017e:	f7d9 f944 	bl	940a <strlen>
   30182:	2800      	cmp	r0, #0
   30184:	d0f7      	beq.n	30176 <metal_device_open+0xa>
   30186:	2c00      	cmp	r4, #0
   30188:	d0f5      	beq.n	30176 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   3018a:	4620      	mov	r0, r4
   3018c:	f7d9 f93d 	bl	940a <strlen>
   30190:	2800      	cmp	r0, #0
   30192:	d0f0      	beq.n	30176 <metal_device_open+0xa>
   30194:	2d00      	cmp	r5, #0
   30196:	d0ee      	beq.n	30176 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   30198:	4630      	mov	r0, r6
   3019a:	a901      	add	r1, sp, #4
   3019c:	f7f4 fce0 	bl	24b60 <metal_bus_find>
	if (error)
   301a0:	2800      	cmp	r0, #0
   301a2:	d1ea      	bne.n	3017a <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   301a4:	9801      	ldr	r0, [sp, #4]
   301a6:	6883      	ldr	r3, [r0, #8]
   301a8:	b12b      	cbz	r3, 301b6 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   301aa:	462a      	mov	r2, r5
   301ac:	4621      	mov	r1, r4
}
   301ae:	b002      	add	sp, #8
   301b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   301b4:	4718      	bx	r3
		return -ENODEV;
   301b6:	f06f 0012 	mvn.w	r0, #18
   301ba:	e7de      	b.n	3017a <metal_device_open+0xe>

000301bc <metal_device_close>:
{
   301bc:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   301be:	6840      	ldr	r0, [r0, #4]
   301c0:	68c3      	ldr	r3, [r0, #12]
   301c2:	b103      	cbz	r3, 301c6 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   301c4:	4718      	bx	r3
}
   301c6:	4770      	bx	lr

000301c8 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   301c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   301cc:	b089      	sub	sp, #36	; 0x24
   301ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
   301d0:	4604      	mov	r4, r0
   301d2:	4689      	mov	r9, r1
   301d4:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   301d6:	2100      	movs	r1, #0
   301d8:	2220      	movs	r2, #32
   301da:	4668      	mov	r0, sp
{
   301dc:	461f      	mov	r7, r3
   301de:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   301e0:	f001 fb5f 	bl	318a2 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   301e4:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   301e6:	bf97      	itett	ls
   301e8:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   301ea:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   301ee:	40b3      	lslls	r3, r6
   301f0:	f103 33ff 	addls.w	r3, r3, #4294967295
   301f4:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   301f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   301f8:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   301fc:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   30200:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   30202:	3418      	adds	r4, #24
   30204:	b145      	cbz	r5, 30218 <metal_io_init+0x50>
   30206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   30208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3020a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   3020e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   30212:	b009      	add	sp, #36	; 0x24
   30214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   30218:	466d      	mov	r5, sp
   3021a:	e7f4      	b.n	30206 <metal_io_init+0x3e>

0003021c <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   3021c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   3021e:	6804      	ldr	r4, [r0, #0]
		: NULL);
   30220:	1c66      	adds	r6, r4, #1
   30222:	d031      	beq.n	30288 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   30224:	6885      	ldr	r5, [r0, #8]
   30226:	42a9      	cmp	r1, r5
   30228:	d22e      	bcs.n	30288 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   3022a:	1864      	adds	r4, r4, r1
   3022c:	d02c      	beq.n	30288 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   3022e:	185e      	adds	r6, r3, r1
   30230:	42ae      	cmp	r6, r5
		len = io->size - offset;
   30232:	bf88      	it	hi
   30234:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   30236:	6a05      	ldr	r5, [r0, #32]
   30238:	b135      	cbz	r5, 30248 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   3023a:	9300      	str	r3, [sp, #0]
   3023c:	2305      	movs	r3, #5
   3023e:	47a8      	blx	r5
   30240:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   30242:	4618      	mov	r0, r3
   30244:	b002      	add	sp, #8
   30246:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   30248:	f3bf 8f5b 	dmb	ish
		while ( len && (
   3024c:	4619      	mov	r1, r3
   3024e:	1aa4      	subs	r4, r4, r2
   30250:	1910      	adds	r0, r2, r4
   30252:	b119      	cbz	r1, 3025c <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   30254:	ea40 0502 	orr.w	r5, r0, r2
   30258:	07ad      	lsls	r5, r5, #30
   3025a:	d10a      	bne.n	30272 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   3025c:	2903      	cmp	r1, #3
   3025e:	dc0d      	bgt.n	3027c <metal_io_block_read+0x60>
   30260:	3801      	subs	r0, #1
   30262:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   30264:	428a      	cmp	r2, r1
   30266:	d0ec      	beq.n	30242 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   30268:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   3026c:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   30270:	e7f8      	b.n	30264 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   30272:	7800      	ldrb	r0, [r0, #0]
			len--;
   30274:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   30276:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   3027a:	e7e9      	b.n	30250 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   3027c:	f850 4b04 	ldr.w	r4, [r0], #4
   30280:	3904      	subs	r1, #4
   30282:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   30286:	e7e9      	b.n	3025c <metal_io_block_read+0x40>
		return -ERANGE;
   30288:	f06f 0321 	mvn.w	r3, #33	; 0x21
   3028c:	e7d9      	b.n	30242 <metal_io_block_read+0x26>

0003028e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   3028e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30290:	6804      	ldr	r4, [r0, #0]
		: NULL);
   30292:	1c65      	adds	r5, r4, #1
   30294:	d032      	beq.n	302fc <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   30296:	6885      	ldr	r5, [r0, #8]
   30298:	42a9      	cmp	r1, r5
   3029a:	d22f      	bcs.n	302fc <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   3029c:	1864      	adds	r4, r4, r1
   3029e:	d02d      	beq.n	302fc <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   302a0:	185e      	adds	r6, r3, r1
   302a2:	42ae      	cmp	r6, r5
		len = io->size - offset;
   302a4:	bf88      	it	hi
   302a6:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   302a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
   302aa:	b1cd      	cbz	r5, 302e0 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   302ac:	9300      	str	r3, [sp, #0]
   302ae:	2305      	movs	r3, #5
   302b0:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   302b2:	b002      	add	sp, #8
   302b4:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   302b6:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   302ba:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   302bc:	7005      	strb	r5, [r0, #0]
			len--;
   302be:	4615      	mov	r5, r2
   302c0:	18a0      	adds	r0, r4, r2
		while ( len && (
   302c2:	b119      	cbz	r1, 302cc <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   302c4:	ea40 0602 	orr.w	r6, r0, r2
   302c8:	07b6      	lsls	r6, r6, #30
   302ca:	d1f4      	bne.n	302b6 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   302cc:	2903      	cmp	r1, #3
   302ce:	dc0a      	bgt.n	302e6 <metal_io_block_write+0x58>
   302d0:	3d01      	subs	r5, #1
   302d2:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   302d4:	4288      	cmp	r0, r1
   302d6:	d10c      	bne.n	302f2 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   302d8:	f3bf 8f5b 	dmb	ish
	retlen = len;
   302dc:	4618      	mov	r0, r3
   302de:	e7e8      	b.n	302b2 <metal_io_block_write+0x24>
   302e0:	4619      	mov	r1, r3
   302e2:	1aa4      	subs	r4, r4, r2
   302e4:	e7eb      	b.n	302be <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   302e6:	f855 2b04 	ldr.w	r2, [r5], #4
   302ea:	3904      	subs	r1, #4
   302ec:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   302f0:	e7ec      	b.n	302cc <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   302f2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   302f6:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   302fa:	e7eb      	b.n	302d4 <metal_io_block_write+0x46>
		return -ERANGE;
   302fc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   30300:	e7d7      	b.n	302b2 <metal_io_block_write+0x24>

00030302 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   30302:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30304:	6804      	ldr	r4, [r0, #0]
   30306:	461d      	mov	r5, r3
		: NULL);
   30308:	1c66      	adds	r6, r4, #1
   3030a:	d02b      	beq.n	30364 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   3030c:	6883      	ldr	r3, [r0, #8]
   3030e:	4299      	cmp	r1, r3
   30310:	d228      	bcs.n	30364 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   30312:	1864      	adds	r4, r4, r1
   30314:	d026      	beq.n	30364 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   30316:	186e      	adds	r6, r5, r1
   30318:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   3031a:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   3031c:	bf88      	it	hi
   3031e:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   30320:	b12e      	cbz	r6, 3032e <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   30322:	2305      	movs	r3, #5
   30324:	9500      	str	r5, [sp, #0]
   30326:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   30328:	4628      	mov	r0, r5
}
   3032a:	b002      	add	sp, #8
   3032c:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   3032e:	4621      	mov	r1, r4
   30330:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   30332:	b94b      	cbnz	r3, 30348 <metal_io_block_set+0x46>
   30334:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   30336:	4299      	cmp	r1, r3
   30338:	d111      	bne.n	3035e <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   3033a:	f3bf 8f5b 	dmb	ish
   3033e:	e7f3      	b.n	30328 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   30340:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   30344:	3b01      	subs	r3, #1
   30346:	e7f4      	b.n	30332 <metal_io_block_set+0x30>
   30348:	0788      	lsls	r0, r1, #30
   3034a:	d1f9      	bne.n	30340 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   3034c:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   30350:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   30352:	2b03      	cmp	r3, #3
   30354:	ddee      	ble.n	30334 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   30356:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   3035a:	3b04      	subs	r3, #4
   3035c:	e7f9      	b.n	30352 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   3035e:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   30362:	e7e8      	b.n	30336 <metal_io_block_set+0x34>
		return -ERANGE;
   30364:	f06f 0021 	mvn.w	r0, #33	; 0x21
   30368:	e7df      	b.n	3032a <metal_io_block_set+0x28>

0003036a <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   3036a:	2000      	movs	r0, #0
   3036c:	4770      	bx	lr

0003036e <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   3036e:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   30370:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   30372:	4602      	mov	r2, r0
   30374:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   30376:	b984      	cbnz	r4, 3039a <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   30378:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   3037a:	291f      	cmp	r1, #31
   3037c:	bf98      	it	ls
   3037e:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   30382:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   30384:	b161      	cbz	r1, 303a0 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   30386:	6880      	ldr	r0, [r0, #8]
   30388:	4283      	cmp	r3, r0
   3038a:	d209      	bcs.n	303a0 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   3038c:	6910      	ldr	r0, [r2, #16]
   3038e:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   30390:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   30394:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   30396:	bc10      	pop	{r4}
   30398:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   3039a:	4623      	mov	r3, r4
}
   3039c:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   3039e:	4718      	bx	r3
			: METAL_BAD_PHYS);
   303a0:	f04f 30ff 	mov.w	r0, #4294967295
   303a4:	e7f7      	b.n	30396 <metal_io_phys+0x28>

000303a6 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   303a6:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   303a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   303aa:	4605      	mov	r5, r0
   303ac:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   303ae:	b9e3      	cbnz	r3, 303ea <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   303b0:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   303b2:	1c62      	adds	r2, r4, #1
   303b4:	bf09      	itett	eq
   303b6:	6843      	ldreq	r3, [r0, #4]
   303b8:	400c      	andne	r4, r1
   303ba:	681c      	ldreq	r4, [r3, #0]
   303bc:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   303be:	4621      	mov	r1, r4
   303c0:	4628      	mov	r0, r5
   303c2:	f7ff ffd4 	bl	3036e <metal_io_phys>
   303c6:	4286      	cmp	r6, r0
   303c8:	d007      	beq.n	303da <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   303ca:	692b      	ldr	r3, [r5, #16]
   303cc:	3301      	adds	r3, #1
   303ce:	441c      	add	r4, r3
		} while (offset < io->size);
   303d0:	68ab      	ldr	r3, [r5, #8]
   303d2:	429c      	cmp	r4, r3
   303d4:	d3f3      	bcc.n	303be <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   303d6:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   303da:	6828      	ldr	r0, [r5, #0]
		: NULL);
   303dc:	1c43      	adds	r3, r0, #1
   303de:	d007      	beq.n	303f0 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   303e0:	68ab      	ldr	r3, [r5, #8]
   303e2:	42a3      	cmp	r3, r4
   303e4:	d904      	bls.n	303f0 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   303e6:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   303e8:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   303ea:	4798      	blx	r3
   303ec:	4604      	mov	r4, r0
   303ee:	e7f4      	b.n	303da <metal_io_phys_to_virt+0x34>
		: NULL);
   303f0:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   303f2:	e7f9      	b.n	303e8 <metal_io_phys_to_virt+0x42>

000303f4 <virtqueue_create>:
{
   303f4:	b530      	push	{r4, r5, lr}
   303f6:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   303f8:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   303fc:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   303fe:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   30400:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   30402:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   30404:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   30406:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   30408:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   3040a:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   3040c:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   30410:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   30414:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   30418:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   3041a:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   3041c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   30420:	1c6a      	adds	r2, r5, #1
   30422:	4413      	add	r3, r2
   30424:	426d      	negs	r5, r5
   30426:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   30428:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3042a:	6983      	ldr	r3, [r0, #24]
   3042c:	b953      	cbnz	r3, 30444 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   3042e:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   30430:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   30432:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   30434:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   30438:	db06      	blt.n	30448 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   3043a:	2300      	movs	r3, #0
   3043c:	7393      	strb	r3, [r2, #14]
   3043e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   30442:	73d3      	strb	r3, [r2, #15]
}
   30444:	2000      	movs	r0, #0
   30446:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   30448:	3301      	adds	r3, #1
   3044a:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   3044c:	e7f0      	b.n	30430 <virtqueue_create+0x3c>

0003044e <virtqueue_add_buffer>:
{
   3044e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   30452:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   30456:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   30458:	4655      	mov	r5, sl
   3045a:	2600      	movs	r6, #0
{
   3045c:	b085      	sub	sp, #20
	needed = readable + writable;
   3045e:	eb02 0803 	add.w	r8, r2, r3
{
   30462:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   30464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   30466:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   3046a:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   3046e:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   30470:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   30474:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   30478:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   3047a:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   3047c:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   3047e:	45b0      	cmp	r8, r6
   30480:	dc1a      	bgt.n	304b8 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   30482:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   30484:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   30486:	eba3 030b 	sub.w	r3, r3, fp
   3048a:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   3048c:	69e3      	ldr	r3, [r4, #28]
   3048e:	8961      	ldrh	r1, [r4, #10]
   30490:	885a      	ldrh	r2, [r3, #2]
   30492:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   30494:	400a      	ands	r2, r1
   30496:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   3049a:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   3049e:	f3bf 8f5b 	dmb	ish
}
   304a2:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   304a4:	69e2      	ldr	r2, [r4, #28]
   304a6:	8853      	ldrh	r3, [r2, #2]
   304a8:	3301      	adds	r3, #1
   304aa:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   304ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   304ae:	3301      	adds	r3, #1
   304b0:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   304b2:	b005      	add	sp, #20
   304b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   304b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   304ba:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   304bc:	f857 1c04 	ldr.w	r1, [r7, #-4]
   304c0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   304c4:	9302      	str	r3, [sp, #8]
   304c6:	6803      	ldr	r3, [r0, #0]
   304c8:	9203      	str	r2, [sp, #12]
   304ca:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   304cc:	6883      	ldr	r3, [r0, #8]
   304ce:	3708      	adds	r7, #8
   304d0:	4299      	cmp	r1, r3
   304d2:	bf28      	it	cs
   304d4:	f04f 31ff 	movcs.w	r1, #4294967295
   304d8:	f7ff ff49 	bl	3036e <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   304dc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   304e0:	5098      	str	r0, [r3, r2]
   304e2:	2200      	movs	r2, #0
   304e4:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   304e6:	f857 2c08 	ldr.w	r2, [r7, #-8]
   304ea:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   304ec:	9a01      	ldr	r2, [sp, #4]
   304ee:	4296      	cmp	r6, r2
   304f0:	bfac      	ite	ge
   304f2:	2200      	movge	r2, #0
   304f4:	2201      	movlt	r2, #1
		if (i >= readable)
   304f6:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   304f8:	bfd8      	it	le
   304fa:	f042 0202 	orrle.w	r2, r2, #2
   304fe:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   30500:	3601      	adds	r6, #1
   30502:	89ed      	ldrh	r5, [r5, #14]
   30504:	e7bb      	b.n	3047e <virtqueue_add_buffer+0x30>

00030506 <virtqueue_get_buffer>:
{
   30506:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   30508:	b350      	cbz	r0, 30560 <virtqueue_get_buffer+0x5a>
   3050a:	6a05      	ldr	r5, [r0, #32]
   3050c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   3050e:	886b      	ldrh	r3, [r5, #2]
   30510:	42a3      	cmp	r3, r4
   30512:	d030      	beq.n	30576 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   30514:	1c63      	adds	r3, r4, #1
   30516:	85c3      	strh	r3, [r0, #46]	; 0x2e
   30518:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   3051a:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   3051e:	3b01      	subs	r3, #1
   30520:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   30522:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   30526:	686b      	ldr	r3, [r5, #4]
   30528:	b29e      	uxth	r6, r3
	if (len)
   3052a:	b109      	cbz	r1, 30530 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   3052c:	68ad      	ldr	r5, [r5, #8]
   3052e:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   30530:	f8d0 c018 	ldr.w	ip, [r0, #24]
   30534:	b29b      	uxth	r3, r3
   30536:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   3053a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   3053e:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   30540:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   30542:	442f      	add	r7, r5
	dxp->ndescs--;
   30544:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   30546:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   30548:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   3054a:	898d      	ldrh	r5, [r1, #12]
   3054c:	076f      	lsls	r7, r5, #29
   3054e:	d50e      	bpl.n	3056e <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   30550:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   30552:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   30554:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   30556:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   30558:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   3055a:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   3055c:	b102      	cbz	r2, 30560 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   3055e:	8014      	strh	r4, [r2, #0]
}
   30560:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   30562:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   30564:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   30566:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   30568:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   3056c:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   3056e:	898d      	ldrh	r5, [r1, #12]
   30570:	07ed      	lsls	r5, r5, #31
   30572:	d4f6      	bmi.n	30562 <virtqueue_get_buffer+0x5c>
   30574:	e7ec      	b.n	30550 <virtqueue_get_buffer+0x4a>
		return NULL;
   30576:	2000      	movs	r0, #0
   30578:	e7f2      	b.n	30560 <virtqueue_get_buffer+0x5a>

0003057a <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   3057a:	6983      	ldr	r3, [r0, #24]
   3057c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   30580:	6898      	ldr	r0, [r3, #8]
   30582:	4770      	bx	lr

00030584 <virtqueue_get_available_buffer>:
{
   30584:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   30586:	f3bf 8f5b 	dmb	ish
{
   3058a:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   3058c:	69c1      	ldr	r1, [r0, #28]
{
   3058e:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30590:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   30592:	884a      	ldrh	r2, [r1, #2]
{
   30594:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30596:	429a      	cmp	r2, r3
   30598:	d016      	beq.n	305c8 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   3059a:	1c5a      	adds	r2, r3, #1
   3059c:	8602      	strh	r2, [r0, #48]	; 0x30
   3059e:	8942      	ldrh	r2, [r0, #10]
   305a0:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   305a2:	4013      	ands	r3, r2
   305a4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   305a8:	888a      	ldrh	r2, [r1, #4]
   305aa:	802a      	strh	r2, [r5, #0]
   305ac:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   305ae:	6982      	ldr	r2, [r0, #24]
   305b0:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   305b2:	58d1      	ldr	r1, [r2, r3]
   305b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   305b6:	f7ff fef6 	bl	303a6 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   305ba:	882a      	ldrh	r2, [r5, #0]
   305bc:	69a3      	ldr	r3, [r4, #24]
   305be:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   305c2:	689b      	ldr	r3, [r3, #8]
   305c4:	6033      	str	r3, [r6, #0]
}
   305c6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   305c8:	2000      	movs	r0, #0
   305ca:	e7fc      	b.n	305c6 <virtqueue_get_available_buffer+0x42>

000305cc <virtqueue_disable_cb>:
{
   305cc:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   305ce:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   305d0:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   305d2:	6912      	ldr	r2, [r2, #16]
   305d4:	0092      	lsls	r2, r2, #2
   305d6:	d517      	bpl.n	30608 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   305d8:	b943      	cbnz	r3, 305ec <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   305da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   305dc:	69c2      	ldr	r2, [r0, #28]
   305de:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   305e0:	8944      	ldrh	r4, [r0, #10]
   305e2:	3b01      	subs	r3, #1
   305e4:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   305e6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   305ea:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   305ec:	6803      	ldr	r3, [r0, #0]
   305ee:	699b      	ldr	r3, [r3, #24]
   305f0:	2b01      	cmp	r3, #1
   305f2:	d108      	bne.n	30606 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   305f4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   305f6:	6a02      	ldr	r2, [r0, #32]
   305f8:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   305fa:	8940      	ldrh	r0, [r0, #10]
   305fc:	3b01      	subs	r3, #1
   305fe:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   30600:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   30604:	8093      	strh	r3, [r2, #4]
}
   30606:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   30608:	b923      	cbnz	r3, 30614 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   3060a:	69c2      	ldr	r2, [r0, #28]
   3060c:	8813      	ldrh	r3, [r2, #0]
   3060e:	f043 0301 	orr.w	r3, r3, #1
   30612:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   30614:	6803      	ldr	r3, [r0, #0]
   30616:	699b      	ldr	r3, [r3, #24]
   30618:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   3061a:	bf01      	itttt	eq
   3061c:	6a02      	ldreq	r2, [r0, #32]
   3061e:	8813      	ldrheq	r3, [r2, #0]
   30620:	f043 0301 	orreq.w	r3, r3, #1
   30624:	8013      	strheq	r3, [r2, #0]
}
   30626:	e7ee      	b.n	30606 <virtqueue_disable_cb+0x3a>

00030628 <virtqueue_kick>:
{
   30628:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   3062a:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   3062e:	6803      	ldr	r3, [r0, #0]
{
   30630:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   30632:	691a      	ldr	r2, [r3, #16]
   30634:	699b      	ldr	r3, [r3, #24]
   30636:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   3063a:	d01a      	beq.n	30672 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3063c:	b97b      	cbnz	r3, 3065e <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   3063e:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   30640:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   30642:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   30644:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   30646:	3b01      	subs	r3, #1
   30648:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   3064c:	8892      	ldrh	r2, [r2, #4]
   3064e:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   30650:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   30652:	b29b      	uxth	r3, r3
   30654:	429a      	cmp	r2, r3
   30656:	d814      	bhi.n	30682 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   30658:	2300      	movs	r3, #0
   3065a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   3065c:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3065e:	2b01      	cmp	r3, #1
   30660:	d1fa      	bne.n	30658 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   30662:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   30664:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   30666:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   30668:	6941      	ldr	r1, [r0, #20]
   3066a:	3b01      	subs	r3, #1
   3066c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   30670:	e7ec      	b.n	3064c <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   30672:	b963      	cbnz	r3, 3068e <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   30674:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   30676:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   30678:	43db      	mvns	r3, r3
   3067a:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   3067e:	2b00      	cmp	r3, #0
   30680:	d0ea      	beq.n	30658 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   30682:	6923      	ldr	r3, [r4, #16]
   30684:	2b00      	cmp	r3, #0
   30686:	d0e7      	beq.n	30658 <virtqueue_kick+0x30>
		vq->notify(vq);
   30688:	4620      	mov	r0, r4
   3068a:	4798      	blx	r3
   3068c:	e7e4      	b.n	30658 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3068e:	2b01      	cmp	r3, #1
   30690:	d1e2      	bne.n	30658 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   30692:	69c3      	ldr	r3, [r0, #28]
   30694:	e7ef      	b.n	30676 <virtqueue_kick+0x4e>

00030696 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30696:	69c3      	ldr	r3, [r0, #28]
   30698:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   3069a:	8859      	ldrh	r1, [r3, #2]
   3069c:	4291      	cmp	r1, r2
   3069e:	d00a      	beq.n	306b6 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   306a0:	8941      	ldrh	r1, [r0, #10]
   306a2:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   306a4:	400a      	ands	r2, r1
   306a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   306aa:	889a      	ldrh	r2, [r3, #4]
   306ac:	6983      	ldr	r3, [r0, #24]
   306ae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   306b2:	6898      	ldr	r0, [r3, #8]
	return len;
   306b4:	4770      	bx	lr
		return 0;
   306b6:	2000      	movs	r0, #0
}
   306b8:	4770      	bx	lr

000306ba <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   306ba:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   306be:	68c3      	ldr	r3, [r0, #12]
   306c0:	b103      	cbz	r3, 306c4 <virtqueue_notification+0xa>
		vq->callback(vq);
   306c2:	4718      	bx	r3
}
   306c4:	4770      	bx	lr

000306c6 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   306c6:	f04f 32ff 	mov.w	r2, #4294967295
   306ca:	f04f 33ff 	mov.w	r3, #4294967295
   306ce:	f7f5 ba2d 	b.w	25b2c <z_impl_k_sem_take>

000306d2 <rpmsg_unregister_endpoint>:
{
   306d2:	b570      	push	{r4, r5, r6, lr}
   306d4:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   306d6:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   306d8:	f105 0658 	add.w	r6, r5, #88	; 0x58
   306dc:	4630      	mov	r0, r6
   306de:	f7ff fff2 	bl	306c6 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   306e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   306e4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   306e8:	2b7f      	cmp	r3, #127	; 0x7f
   306ea:	d80b      	bhi.n	30704 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   306ec:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   306ee:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   306f0:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   306f2:	f003 031f 	and.w	r3, r3, #31
   306f6:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   306f8:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   306fc:	ea23 0302 	bic.w	r3, r3, r2
   30700:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   30704:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   30708:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   3070a:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   3070c:	f104 0334 	add.w	r3, r4, #52	; 0x34
   30710:	6011      	str	r1, [r2, #0]
	node->next = node;
   30712:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   30716:	2300      	movs	r3, #0
   30718:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   3071a:	4630      	mov	r0, r6
}
   3071c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30720:	f7f5 b9de 	b.w	25ae0 <z_impl_k_sem_give>

00030724 <rpmsg_send_ns_message>:
{
   30724:	b530      	push	{r4, r5, lr}
   30726:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   30728:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   3072a:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   3072c:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   3072e:	2220      	movs	r2, #32
   30730:	4601      	mov	r1, r0
   30732:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   30734:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   30736:	f001 fa1d 	bl	31b74 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   3073a:	2328      	movs	r3, #40	; 0x28
   3073c:	2201      	movs	r2, #1
   3073e:	4629      	mov	r1, r5
   30740:	e9cd 3200 	strd	r3, r2, [sp]
   30744:	4620      	mov	r0, r4
   30746:	2235      	movs	r2, #53	; 0x35
   30748:	ab02      	add	r3, sp, #8
   3074a:	f7f4 fb5b 	bl	24e04 <rpmsg_send_offchannel_raw>
}
   3074e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   30752:	b00d      	add	sp, #52	; 0x34
   30754:	bd30      	pop	{r4, r5, pc}

00030756 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   30756:	b128      	cbz	r0, 30764 <rpmsg_hold_rx_buffer+0xe>
   30758:	6a00      	ldr	r0, [r0, #32]
   3075a:	b118      	cbz	r0, 30764 <rpmsg_hold_rx_buffer+0xe>
   3075c:	b111      	cbz	r1, 30764 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   3075e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   30760:	b103      	cbz	r3, 30764 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   30762:	4718      	bx	r3
}
   30764:	4770      	bx	lr

00030766 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   30766:	b130      	cbz	r0, 30776 <rpmsg_release_rx_buffer+0x10>
   30768:	6a00      	ldr	r0, [r0, #32]
   3076a:	b120      	cbz	r0, 30776 <rpmsg_release_rx_buffer+0x10>
   3076c:	b119      	cbz	r1, 30776 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   3076e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   30772:	b103      	cbz	r3, 30776 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   30774:	4718      	bx	r3
}
   30776:	4770      	bx	lr

00030778 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   30778:	b130      	cbz	r0, 30788 <rpmsg_get_tx_payload_buffer+0x10>
   3077a:	6a00      	ldr	r0, [r0, #32]
   3077c:	b120      	cbz	r0, 30788 <rpmsg_get_tx_payload_buffer+0x10>
   3077e:	b119      	cbz	r1, 30788 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   30780:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   30784:	b103      	cbz	r3, 30788 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   30786:	4718      	bx	r3
}
   30788:	2000      	movs	r0, #0
   3078a:	4770      	bx	lr

0003078c <rpmsg_get_endpoint>:
{
   3078c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30790:	4606      	mov	r6, r0
   30792:	4688      	mov	r8, r1
   30794:	4617      	mov	r7, r2
   30796:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   30798:	6804      	ldr	r4, [r0, #0]
   3079a:	42a6      	cmp	r6, r4
   3079c:	d101      	bne.n	307a2 <rpmsg_get_endpoint+0x16>
	return NULL;
   3079e:	2500      	movs	r5, #0
   307a0:	e023      	b.n	307ea <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   307a2:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   307a4:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   307a8:	d002      	beq.n	307b0 <rpmsg_get_endpoint+0x24>
   307aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   307ac:	42bb      	cmp	r3, r7
   307ae:	d01c      	beq.n	307ea <rpmsg_get_endpoint+0x5e>
		if (name)
   307b0:	f1b8 0f00 	cmp.w	r8, #0
   307b4:	d101      	bne.n	307ba <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   307b6:	6824      	ldr	r4, [r4, #0]
   307b8:	e7ef      	b.n	3079a <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   307ba:	2220      	movs	r2, #32
   307bc:	4641      	mov	r1, r8
   307be:	4628      	mov	r0, r5
   307c0:	f001 f9c6 	bl	31b50 <strncmp>
		if (!name || !name_match)
   307c4:	2800      	cmp	r0, #0
   307c6:	d1f6      	bne.n	307b6 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   307c8:	f1b9 3fff 	cmp.w	r9, #4294967295
   307cc:	d002      	beq.n	307d4 <rpmsg_get_endpoint+0x48>
   307ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   307d0:	454b      	cmp	r3, r9
   307d2:	d00a      	beq.n	307ea <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   307d4:	1c7b      	adds	r3, r7, #1
   307d6:	d00b      	beq.n	307f0 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   307d8:	6824      	ldr	r4, [r4, #0]
   307da:	42b4      	cmp	r4, r6
   307dc:	d0df      	beq.n	3079e <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   307de:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   307e2:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   307e6:	429f      	cmp	r7, r3
   307e8:	d1e7      	bne.n	307ba <rpmsg_get_endpoint+0x2e>
}
   307ea:	4628      	mov	r0, r5
   307ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   307f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   307f2:	3301      	adds	r3, #1
   307f4:	d0f9      	beq.n	307ea <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   307f6:	6824      	ldr	r4, [r4, #0]
   307f8:	42b4      	cmp	r4, r6
   307fa:	d0d0      	beq.n	3079e <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   307fc:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   30800:	e7d6      	b.n	307b0 <rpmsg_get_endpoint+0x24>

00030802 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   30802:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   30804:	4604      	mov	r4, r0
   30806:	b190      	cbz	r0, 3082e <rpmsg_destroy_ept+0x2c>
   30808:	6a03      	ldr	r3, [r0, #32]
   3080a:	b183      	cbz	r3, 3082e <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   3080c:	7802      	ldrb	r2, [r0, #0]
   3080e:	b14a      	cbz	r2, 30824 <rpmsg_destroy_ept+0x22>
   30810:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   30814:	b133      	cbz	r3, 30824 <rpmsg_destroy_ept+0x22>
   30816:	6a43      	ldr	r3, [r0, #36]	; 0x24
   30818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   3081c:	d302      	bcc.n	30824 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   3081e:	2101      	movs	r1, #1
   30820:	f7ff ff80 	bl	30724 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   30824:	4620      	mov	r0, r4
}
   30826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   3082a:	f7ff bf52 	b.w	306d2 <rpmsg_unregister_endpoint>
}
   3082e:	bd10      	pop	{r4, pc}

00030830 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   30830:	f851 3c08 	ldr.w	r3, [r1, #-8]
   30834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   30838:	f841 3c08 	str.w	r3, [r1, #-8]
}
   3083c:	4770      	bx	lr

0003083e <rpmsg_virtio_tx_callback>:
}
   3083e:	4770      	bx	lr

00030840 <k_sem_give>:
   30840:	f7f5 b94e 	b.w	25ae0 <z_impl_k_sem_give>

00030844 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   30844:	f04f 32ff 	mov.w	r2, #4294967295
   30848:	f04f 33ff 	mov.w	r3, #4294967295
   3084c:	f7f5 b96e 	b.w	25b2c <z_impl_k_sem_take>

00030850 <rpmsg_virtio_release_tx_buffer>:
{
   30850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30852:	460c      	mov	r4, r1
   30854:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   30856:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   3085a:	f100 0758 	add.w	r7, r0, #88	; 0x58
   3085e:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   30860:	b2b6      	uxth	r6, r6
   30862:	f7ff ffef 	bl	30844 <__metal_mutex_acquire>
	r_desc->idx = idx;
   30866:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   3086a:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   3086e:	f1a4 0310 	sub.w	r3, r4, #16
   30872:	f844 2c0c 	str.w	r2, [r4, #-12]
   30876:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   3087a:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   3087e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   30882:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   30886:	4638      	mov	r0, r7
   30888:	6013      	str	r3, [r2, #0]
   3088a:	f7ff ffd9 	bl	30840 <k_sem_give>
}
   3088e:	2000      	movs	r0, #0
   30890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030892 <rpmsg_virtio_ns_callback>:
{
   30892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   30896:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   30898:	2a28      	cmp	r2, #40	; 0x28
{
   3089a:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   3089c:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   308a0:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   308a2:	d126      	bne.n	308f2 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   308a4:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   308a6:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   308a8:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   308aa:	42a1      	cmp	r1, r4
   308ac:	bf28      	it	cs
   308ae:	f04f 31ff 	movcs.w	r1, #4294967295
   308b2:	2320      	movs	r3, #32
   308b4:	466a      	mov	r2, sp
   308b6:	f7ff fcb1 	bl	3021c <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   308ba:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   308be:	f8d7 8020 	ldr.w	r8, [r7, #32]
   308c2:	4630      	mov	r0, r6
   308c4:	f7ff ffbe 	bl	30844 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   308c8:	4643      	mov	r3, r8
   308ca:	f04f 32ff 	mov.w	r2, #4294967295
   308ce:	4669      	mov	r1, sp
   308d0:	4628      	mov	r0, r5
   308d2:	f7ff ff5b 	bl	3078c <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   308d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   308d8:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   308da:	07db      	lsls	r3, r3, #31
   308dc:	d519      	bpl.n	30912 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   308de:	b960      	cbnz	r0, 308fa <rpmsg_virtio_ns_callback+0x68>
   308e0:	4630      	mov	r0, r6
   308e2:	f7ff ffad 	bl	30840 <k_sem_give>
		if (rdev->ns_unbind_cb)
   308e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   308e8:	b11b      	cbz	r3, 308f2 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   308ea:	4642      	mov	r2, r8
   308ec:	4669      	mov	r1, sp
   308ee:	4628      	mov	r0, r5
   308f0:	4798      	blx	r3
}
   308f2:	2000      	movs	r0, #0
   308f4:	b008      	add	sp, #32
   308f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   308fa:	f04f 33ff 	mov.w	r3, #4294967295
   308fe:	6283      	str	r3, [r0, #40]	; 0x28
   30900:	4630      	mov	r0, r6
   30902:	f7ff ff9d 	bl	30840 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   30906:	6b23      	ldr	r3, [r4, #48]	; 0x30
   30908:	2b00      	cmp	r3, #0
   3090a:	d0ec      	beq.n	308e6 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   3090c:	4620      	mov	r0, r4
   3090e:	4798      	blx	r3
   30910:	e7e9      	b.n	308e6 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   30912:	b920      	cbnz	r0, 3091e <rpmsg_virtio_ns_callback+0x8c>
   30914:	4630      	mov	r0, r6
   30916:	f7ff ff93 	bl	30840 <k_sem_give>
			if (rdev->ns_bind_cb)
   3091a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3091c:	e7e4      	b.n	308e8 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   3091e:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   30922:	4630      	mov	r0, r6
   30924:	f7ff ff8c 	bl	30840 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   30928:	e7e3      	b.n	308f2 <rpmsg_virtio_ns_callback+0x60>

0003092a <rpmsg_virtio_get_rx_buffer>:
{
   3092a:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   3092c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   30930:	4613      	mov	r3, r2
   30932:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   30934:	b925      	cbnz	r5, 30940 <rpmsg_virtio_get_rx_buffer+0x16>
}
   30936:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   30938:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   3093c:	f7ff bde3 	b.w	30506 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   30940:	2d01      	cmp	r5, #1
   30942:	d106      	bne.n	30952 <rpmsg_virtio_get_rx_buffer+0x28>
}
   30944:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   30946:	460a      	mov	r2, r1
   30948:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   3094c:	4619      	mov	r1, r3
   3094e:	f7ff be19 	b.w	30584 <virtqueue_get_available_buffer>
}
   30952:	2000      	movs	r0, #0
   30954:	bc30      	pop	{r4, r5}
   30956:	4770      	bx	lr

00030958 <rpmsg_virtio_return_buffer>:
{
   30958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3095a:	460c      	mov	r4, r1
   3095c:	4619      	mov	r1, r3
   3095e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   30962:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   30964:	b95d      	cbnz	r5, 3097e <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   30966:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   30968:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   3096c:	2301      	movs	r3, #1
   3096e:	462a      	mov	r2, r5
   30970:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   30974:	a902      	add	r1, sp, #8
   30976:	f7ff fd6a 	bl	3044e <virtqueue_add_buffer>
}
   3097a:	b004      	add	sp, #16
   3097c:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   3097e:	2d01      	cmp	r5, #1
   30980:	d1fb      	bne.n	3097a <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   30982:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   30986:	b004      	add	sp, #16
   30988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   3098c:	f7f4 ba1e 	b.w	24dcc <virtqueue_add_consumed_buffer>

00030990 <rpmsg_virtio_rx_callback>:
{
   30990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   30994:	6803      	ldr	r3, [r0, #0]
   30996:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   30998:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   3099c:	4630      	mov	r0, r6
   3099e:	f7ff ff51 	bl	30844 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   309a2:	4638      	mov	r0, r7
   309a4:	f10d 020a 	add.w	r2, sp, #10
   309a8:	a903      	add	r1, sp, #12
   309aa:	f7ff ffbe 	bl	3092a <rpmsg_virtio_get_rx_buffer>
   309ae:	4604      	mov	r4, r0
   309b0:	4630      	mov	r0, r6
   309b2:	f7ff ff45 	bl	30840 <k_sem_give>
	while (rp_hdr) {
   309b6:	2c00      	cmp	r4, #0
   309b8:	d041      	beq.n	30a3e <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   309ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   309be:	4630      	mov	r0, r6
   309c0:	60a3      	str	r3, [r4, #8]
   309c2:	f7ff ff3f 	bl	30844 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   309c6:	f04f 33ff 	mov.w	r3, #4294967295
   309ca:	2100      	movs	r1, #0
   309cc:	4638      	mov	r0, r7
   309ce:	6862      	ldr	r2, [r4, #4]
   309d0:	f7ff fedc 	bl	3078c <rpmsg_get_endpoint>
   309d4:	4605      	mov	r5, r0
   309d6:	4630      	mov	r0, r6
   309d8:	f7ff ff32 	bl	30840 <k_sem_give>
		if (ept) {
   309dc:	b17d      	cbz	r5, 309fe <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   309de:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   309e0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   309e2:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   309e4:	bf08      	it	eq
   309e6:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   309e8:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   309ea:	bf08      	it	eq
   309ec:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   309ee:	6823      	ldr	r3, [r4, #0]
   309f0:	89a2      	ldrh	r2, [r4, #12]
   309f2:	9100      	str	r1, [sp, #0]
   309f4:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   309f8:	f104 0110 	add.w	r1, r4, #16
   309fc:	47c0      	blx	r8
   309fe:	4630      	mov	r0, r6
   30a00:	f7ff ff20 	bl	30844 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   30a04:	68a3      	ldr	r3, [r4, #8]
   30a06:	2b00      	cmp	r3, #0
   30a08:	db06      	blt.n	30a18 <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30a0a:	4621      	mov	r1, r4
   30a0c:	4638      	mov	r0, r7
   30a0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   30a12:	9a03      	ldr	r2, [sp, #12]
   30a14:	f7ff ffa0 	bl	30958 <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   30a18:	4638      	mov	r0, r7
   30a1a:	f10d 020a 	add.w	r2, sp, #10
   30a1e:	a903      	add	r1, sp, #12
   30a20:	f7ff ff83 	bl	3092a <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   30a24:	4604      	mov	r4, r0
   30a26:	b118      	cbz	r0, 30a30 <rpmsg_virtio_rx_callback+0xa0>
   30a28:	4630      	mov	r0, r6
   30a2a:	f7ff ff09 	bl	30840 <k_sem_give>
	while (rp_hdr) {
   30a2e:	e7c4      	b.n	309ba <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   30a30:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   30a34:	f7ff fdf8 	bl	30628 <virtqueue_kick>
   30a38:	4630      	mov	r0, r6
   30a3a:	f7ff ff01 	bl	30840 <k_sem_give>
}
   30a3e:	b004      	add	sp, #16
   30a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030a44 <rpmsg_virtio_release_rx_buffer>:
{
   30a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30a46:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   30a48:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   30a4c:	f100 0758 	add.w	r7, r0, #88	; 0x58
   30a50:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   30a52:	b2b6      	uxth	r6, r6
{
   30a54:	460d      	mov	r5, r1
   30a56:	f7ff fef5 	bl	30844 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   30a5a:	4631      	mov	r1, r6
   30a5c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   30a60:	f7ff fd8b 	bl	3057a <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30a64:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   30a66:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30a68:	f1a5 0110 	sub.w	r1, r5, #16
   30a6c:	4620      	mov	r0, r4
   30a6e:	f7ff ff73 	bl	30958 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   30a72:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   30a76:	f7ff fdd7 	bl	30628 <virtqueue_kick>
   30a7a:	4638      	mov	r0, r7
}
   30a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30a80:	f7ff bede 	b.w	30840 <k_sem_give>

00030a84 <rpmsg_virtio_send_offchannel_nocopy>:
{
   30a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   30a88:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   30a8c:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   30a90:	2300      	movs	r3, #0
{
   30a92:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   30a94:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   30a96:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   30a9a:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   30a9c:	2310      	movs	r3, #16
	rp_hdr.src = src;
   30a9e:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   30aa2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   30aa4:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   30aa8:	f8ad 701c 	strh.w	r7, [sp, #28]
   30aac:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   30aae:	f8d0 c008 	ldr.w	ip, [r0, #8]
   30ab2:	1a71      	subs	r1, r6, r1
   30ab4:	eb0d 0203 	add.w	r2, sp, r3
   30ab8:	4561      	cmp	r1, ip
   30aba:	bf28      	it	cs
   30abc:	f04f 31ff 	movcs.w	r1, #4294967295
	metal_mutex_acquire(&rdev->lock);
   30ac0:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   30ac4:	f7ff fbe3 	bl	3028e <metal_io_block_write>
   30ac8:	4640      	mov	r0, r8
   30aca:	f7ff febb 	bl	30844 <__metal_mutex_acquire>
   30ace:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	idx = hdr->reserved;
   30ad2:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   30ad4:	699b      	ldr	r3, [r3, #24]
   30ad6:	b9cb      	cbnz	r3, 30b0c <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   30ad8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   30adc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   30ae0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   30ae4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   30ae6:	b9c3      	cbnz	r3, 30b1a <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   30ae8:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   30aec:	9600      	str	r6, [sp, #0]
   30aee:	2201      	movs	r2, #1
   30af0:	a902      	add	r1, sp, #8
   30af2:	f7ff fcac 	bl	3044e <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   30af6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   30afa:	f7ff fd95 	bl	30628 <virtqueue_kick>
   30afe:	4640      	mov	r0, r8
   30b00:	f7ff fe9e 	bl	30840 <k_sem_give>
}
   30b04:	4638      	mov	r0, r7
   30b06:	b008      	add	sp, #32
   30b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   30b0c:	4629      	mov	r1, r5
   30b0e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   30b12:	f7ff fd32 	bl	3057a <virtqueue_get_buffer_length>
   30b16:	4602      	mov	r2, r0
   30b18:	e7e0      	b.n	30adc <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   30b1a:	2b01      	cmp	r3, #1
   30b1c:	d1eb      	bne.n	30af6 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   30b1e:	4629      	mov	r1, r5
   30b20:	f7f4 f954 	bl	24dcc <virtqueue_add_consumed_buffer>
   30b24:	e7e7      	b.n	30af6 <rpmsg_virtio_send_offchannel_nocopy+0x72>

00030b26 <rpmsg_virtio_shm_pool_get_buffer>:
{
   30b26:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   30b28:	b148      	cbz	r0, 30b3e <rpmsg_virtio_shm_pool_get_buffer+0x18>
   30b2a:	b149      	cbz	r1, 30b40 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   30b2c:	6843      	ldr	r3, [r0, #4]
   30b2e:	428b      	cmp	r3, r1
   30b30:	d306      	bcc.n	30b40 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   30b32:	6882      	ldr	r2, [r0, #8]
   30b34:	6804      	ldr	r4, [r0, #0]
   30b36:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   30b38:	1a5b      	subs	r3, r3, r1
   30b3a:	6043      	str	r3, [r0, #4]
	return buffer;
   30b3c:	18a0      	adds	r0, r4, r2
}
   30b3e:	bd10      	pop	{r4, pc}
		return NULL;
   30b40:	2000      	movs	r0, #0
   30b42:	e7fc      	b.n	30b3e <rpmsg_virtio_shm_pool_get_buffer+0x18>

00030b44 <rpmsg_virtio_get_tx_payload_buffer>:
{
   30b44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   30b48:	4605      	mov	r5, r0
   30b4a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   30b4e:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   30b50:	6a03      	ldr	r3, [r0, #32]
   30b52:	4617      	mov	r7, r2
   30b54:	681b      	ldr	r3, [r3, #0]
   30b56:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   30b58:	0743      	lsls	r3, r0, #29
   30b5a:	d403      	bmi.n	30b64 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   30b5c:	2000      	movs	r0, #0
}
   30b5e:	b002      	add	sp, #8
   30b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   30b64:	f643 2398 	movw	r3, #15000	; 0x3a98
   30b68:	2f00      	cmp	r7, #0
   30b6a:	bf18      	it	ne
   30b6c:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   30b6e:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   30b72:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   30b76:	4640      	mov	r0, r8
   30b78:	f7ff fe64 	bl	30844 <__metal_mutex_acquire>
	return list->next == list;
   30b7c:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   30b80:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   30b84:	4554      	cmp	r4, sl
   30b86:	f8d3 9018 	ldr.w	r9, [r3, #24]
   30b8a:	d025      	beq.n	30bd8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   30b8c:	b324      	cbz	r4, 30bd8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   30b8e:	e9d4 2300 	ldrd	r2, r3, [r4]
   30b92:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   30b94:	6822      	ldr	r2, [r4, #0]
   30b96:	601a      	str	r2, [r3, #0]
	node->next = node;
   30b98:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   30b9c:	f1b9 0f00 	cmp.w	r9, #0
   30ba0:	d10e      	bne.n	30bc0 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   30ba2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   30ba6:	6033      	str	r3, [r6, #0]
   30ba8:	4640      	mov	r0, r8
   30baa:	f7ff fe49 	bl	30840 <k_sem_give>
	rp_hdr->reserved = idx;
   30bae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30bb2:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   30bb6:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   30bb8:	6833      	ldr	r3, [r6, #0]
   30bba:	3b10      	subs	r3, #16
   30bbc:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30bbe:	e7ce      	b.n	30b5e <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   30bc0:	f1b9 0f01 	cmp.w	r9, #1
   30bc4:	d1f0      	bne.n	30ba8 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   30bc6:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30bc8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   30bcc:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30bd0:	f7ff fcd3 	bl	3057a <virtqueue_get_buffer_length>
   30bd4:	6030      	str	r0, [r6, #0]
   30bd6:	e7e7      	b.n	30ba8 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   30bd8:	f1b9 0f00 	cmp.w	r9, #0
   30bdc:	d12a      	bne.n	30c34 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   30bde:	4631      	mov	r1, r6
   30be0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30be4:	f10d 0206 	add.w	r2, sp, #6
   30be8:	f7ff fc8d 	bl	30506 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   30bec:	4604      	mov	r4, r0
   30bee:	2800      	cmp	r0, #0
   30bf0:	d1da      	bne.n	30ba8 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   30bf2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   30bf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   30bf8:	b953      	cbnz	r3, 30c10 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   30bfa:	4640      	mov	r0, r8
   30bfc:	f7ff fe20 	bl	30840 <k_sem_give>
		if (rp_hdr || !tick_count)
   30c00:	2f00      	cmp	r7, #0
   30c02:	d0ab      	beq.n	30b5c <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   30c04:	2021      	movs	r0, #33	; 0x21
   30c06:	2100      	movs	r1, #0
   30c08:	f7f5 fc8e 	bl	26528 <z_impl_k_sleep>
		tick_count--;
   30c0c:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   30c0e:	e7b2      	b.n	30b76 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   30c10:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   30c14:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   30c18:	f7ff ff85 	bl	30b26 <rpmsg_virtio_shm_pool_get_buffer>
   30c1c:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   30c1e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   30c22:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   30c26:	6033      	str	r3, [r6, #0]
   30c28:	4640      	mov	r0, r8
   30c2a:	f7ff fe09 	bl	30840 <k_sem_give>
		if (rp_hdr || !tick_count)
   30c2e:	2c00      	cmp	r4, #0
   30c30:	d0e6      	beq.n	30c00 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   30c32:	e7bc      	b.n	30bae <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   30c34:	f1b9 0f01 	cmp.w	r9, #1
   30c38:	d1df      	bne.n	30bfa <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   30c3a:	4632      	mov	r2, r6
   30c3c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30c40:	f10d 0106 	add.w	r1, sp, #6
   30c44:	f7ff fc9e 	bl	30584 <virtqueue_get_available_buffer>
   30c48:	4604      	mov	r4, r0
   30c4a:	e7ed      	b.n	30c28 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

00030c4c <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   30c4c:	b120      	cbz	r0, 30c58 <rpmsg_virtio_init_shm_pool+0xc>
   30c4e:	b119      	cbz	r1, 30c58 <rpmsg_virtio_init_shm_pool+0xc>
   30c50:	b112      	cbz	r2, 30c58 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   30c52:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   30c56:	6001      	str	r1, [r0, #0]
}
   30c58:	4770      	bx	lr

00030c5a <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   30c5a:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   30c5c:	4604      	mov	r4, r0
   30c5e:	b918      	cbnz	r0, 30c68 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   30c60:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   30c62:	3834      	subs	r0, #52	; 0x34
   30c64:	f7ff fdcd 	bl	30802 <rpmsg_destroy_ept>
	return list->next == list;
   30c68:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   30c6a:	4284      	cmp	r4, r0
   30c6c:	d1f9      	bne.n	30c62 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   30c6e:	2300      	movs	r3, #0
		rvdev->svq = 0;
   30c70:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   30c74:	e7f4      	b.n	30c60 <rpmsg_deinit_vdev+0x6>

00030c76 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   30c76:	f7f4 bb25 	b.w	252c4 <_DoInit>

00030c7a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   30c7a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   30c7c:	f7ff fffb 	bl	30c76 <SEGGER_RTT_Init>

	return 0;
}
   30c80:	2000      	movs	r0, #0
   30c82:	bd08      	pop	{r3, pc}

00030c84 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   30c84:	4770      	bx	lr

00030c86 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   30c86:	b140      	cbz	r0, 30c9a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   30c88:	68c3      	ldr	r3, [r0, #12]
   30c8a:	7858      	ldrb	r0, [r3, #1]
   30c8c:	f010 0001 	ands.w	r0, r0, #1
   30c90:	bf1e      	ittt	ne
   30c92:	7818      	ldrbne	r0, [r3, #0]
   30c94:	fab0 f080 	clzne	r0, r0
   30c98:	0940      	lsrne	r0, r0, #5
}
   30c9a:	4770      	bx	lr

00030c9c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30c9e:	ab0b      	add	r3, sp, #44	; 0x2c
   30ca0:	9305      	str	r3, [sp, #20]
   30ca2:	9303      	str	r3, [sp, #12]
   30ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30ca6:	2201      	movs	r2, #1
   30ca8:	9302      	str	r3, [sp, #8]
   30caa:	2300      	movs	r3, #0
   30cac:	4618      	mov	r0, r3
   30cae:	e9cd 3300 	strd	r3, r3, [sp]
   30cb2:	f7de fc39 	bl	f528 <z_impl_z_log_msg_runtime_vcreate>
}
   30cb6:	b007      	add	sp, #28
   30cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00030cbc <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   30cbc:	f000 bdf1 	b.w	318a2 <memset>

00030cc0 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30cc0:	f000 bdb5 	b.w	3182e <memcpy>

00030cc4 <k_heap_init>:
{
   30cc4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   30cc6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   30cca:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30cce:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30cd0:	f7f9 bc7b 	b.w	2a5ca <sys_heap_init>

00030cd4 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   30cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30cd8:	b085      	sub	sp, #20
   30cda:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   30cde:	4607      	mov	r7, r0
   30ce0:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30ce2:	4650      	mov	r0, sl
   30ce4:	4621      	mov	r1, r4
{
   30ce6:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30ce8:	f000 fbcd 	bl	31486 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30cec:	f1b4 3fff 	cmp.w	r4, #4294967295
   30cf0:	bf08      	it	eq
   30cf2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30cf6:	4605      	mov	r5, r0
   30cf8:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30cfa:	bf04      	itt	eq
   30cfc:	f04f 35ff 	moveq.w	r5, #4294967295
   30d00:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30d04:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   30d08:	f04f 0320 	mov.w	r3, #32
   30d0c:	f3ef 8411 	mrs	r4, BASEPRI
   30d10:	f383 8812 	msr	BASEPRI_MAX, r3
   30d14:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30d18:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   30d1c:	464a      	mov	r2, r9
   30d1e:	4641      	mov	r1, r8
   30d20:	4638      	mov	r0, r7
   30d22:	f7f9 fbeb 	bl	2a4fc <sys_heap_aligned_alloc>
   30d26:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   30d28:	f7f5 fdd2 	bl	268d0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   30d2c:	9b03      	ldr	r3, [sp, #12]
   30d2e:	b13b      	cbz	r3, 30d40 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   30d30:	f384 8811 	msr	BASEPRI, r4
   30d34:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   30d38:	4618      	mov	r0, r3
   30d3a:	b005      	add	sp, #20
   30d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   30d40:	1a28      	subs	r0, r5, r0
   30d42:	eb66 0101 	sbc.w	r1, r6, r1
   30d46:	2801      	cmp	r0, #1
   30d48:	f171 0200 	sbcs.w	r2, r1, #0
   30d4c:	dbf0      	blt.n	30d30 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30d4e:	e9cd 0100 	strd	r0, r1, [sp]
   30d52:	465a      	mov	r2, fp
   30d54:	4621      	mov	r1, r4
   30d56:	4650      	mov	r0, sl
   30d58:	f7f5 fa62 	bl	26220 <z_pend_curr>
	__asm__ volatile(
   30d5c:	f04f 0320 	mov.w	r3, #32
   30d60:	f3ef 8411 	mrs	r4, BASEPRI
   30d64:	f383 8812 	msr	BASEPRI_MAX, r3
   30d68:	f3bf 8f6f 	isb	sy
	return k;
   30d6c:	e7d6      	b.n	30d1c <k_heap_aligned_alloc+0x48>

00030d6e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   30d6e:	b538      	push	{r3, r4, r5, lr}
   30d70:	4604      	mov	r4, r0
   30d72:	f04f 0320 	mov.w	r3, #32
   30d76:	f3ef 8511 	mrs	r5, BASEPRI
   30d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   30d7e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   30d82:	f7f9 fb83 	bl	2a48c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   30d86:	f104 000c 	add.w	r0, r4, #12
   30d8a:	f000 fafc 	bl	31386 <z_unpend_all>
   30d8e:	b130      	cbz	r0, 30d9e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   30d90:	4629      	mov	r1, r5
   30d92:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   30d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   30d9a:	f7f5 baa5 	b.w	262e8 <z_reschedule>
	__asm__ volatile(
   30d9e:	f385 8811 	msr	BASEPRI, r5
   30da2:	f3bf 8f6f 	isb	sy
}
   30da6:	bd38      	pop	{r3, r4, r5, pc}

00030da8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   30da8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   30dac:	4313      	orrs	r3, r2
   30dae:	f013 0303 	ands.w	r3, r3, #3
   30db2:	d10c      	bne.n	30dce <create_free_list+0x26>
	slab->free_list = NULL;
   30db4:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30db6:	6881      	ldr	r1, [r0, #8]
   30db8:	4299      	cmp	r1, r3
   30dba:	d801      	bhi.n	30dc0 <create_free_list+0x18>
	return 0;
   30dbc:	2000      	movs	r0, #0
   30dbe:	4770      	bx	lr
		*(char **)p = slab->free_list;
   30dc0:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30dc2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   30dc4:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   30dc6:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   30dc8:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   30dca:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30dcc:	e7f3      	b.n	30db6 <create_free_list+0xe>
		return -EINVAL;
   30dce:	f06f 0015 	mvn.w	r0, #21
}
   30dd2:	4770      	bx	lr

00030dd4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   30dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30dd6:	4604      	mov	r4, r0
   30dd8:	460d      	mov	r5, r1
	__asm__ volatile(
   30dda:	f04f 0320 	mov.w	r3, #32
   30dde:	f3ef 8611 	mrs	r6, BASEPRI
   30de2:	f383 8812 	msr	BASEPRI_MAX, r3
   30de6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   30dea:	6947      	ldr	r7, [r0, #20]
   30dec:	b97f      	cbnz	r7, 30e0e <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   30dee:	f000 fa84 	bl	312fa <z_unpend_first_thread>

		if (pending_thread != NULL) {
   30df2:	b160      	cbz	r0, 30e0e <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   30df4:	682a      	ldr	r2, [r5, #0]
   30df6:	f8c0 709c 	str.w	r7, [r0, #156]	; 0x9c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   30dfa:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   30dfc:	f000 fa46 	bl	3128c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   30e00:	4631      	mov	r1, r6
   30e02:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   30e06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   30e0a:	f7f5 ba6d 	b.w	262e8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   30e0e:	682b      	ldr	r3, [r5, #0]
   30e10:	6962      	ldr	r2, [r4, #20]
   30e12:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   30e14:	682b      	ldr	r3, [r5, #0]
   30e16:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   30e18:	69a3      	ldr	r3, [r4, #24]
   30e1a:	3b01      	subs	r3, #1
   30e1c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   30e1e:	f386 8811 	msr	BASEPRI, r6
   30e22:	f3bf 8f6f 	isb	sy
}
   30e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030e28 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30e28:	f3ef 8005 	mrs	r0, IPSR
}
   30e2c:	3800      	subs	r0, #0
   30e2e:	bf18      	it	ne
   30e30:	2001      	movne	r0, #1
   30e32:	4770      	bx	lr

00030e34 <k_thread_name_get>:
}
   30e34:	3062      	adds	r0, #98	; 0x62
   30e36:	4770      	bx	lr

00030e38 <z_impl_k_thread_start>:
	z_sched_start(thread);
   30e38:	f7f5 ba68 	b.w	2630c <z_sched_start>

00030e3c <z_pm_save_idle_exit>:
{
   30e3c:	b508      	push	{r3, lr}
	pm_system_resume();
   30e3e:	f7df fe89 	bl	10b54 <pm_system_resume>
}
   30e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   30e46:	f7ff b84c 	b.w	2fee2 <sys_clock_idle_exit>

00030e4a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   30e4a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30e4e:	428b      	cmp	r3, r1
   30e50:	d001      	beq.n	30e56 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   30e52:	f7f5 ba03 	b.w	2625c <z_set_prio>
}
   30e56:	2000      	movs	r0, #0
   30e58:	4770      	bx	lr

00030e5a <z_impl_k_mutex_init>:
{
   30e5a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30e5c:	2000      	movs	r0, #0
   30e5e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   30e62:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   30e66:	4770      	bx	lr

00030e68 <queue_insert>:
{
   30e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30e6c:	4699      	mov	r9, r3
   30e6e:	4604      	mov	r4, r0
   30e70:	460d      	mov	r5, r1
   30e72:	4690      	mov	r8, r2
   30e74:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   30e78:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   30e7c:	f04f 0220 	mov.w	r2, #32
   30e80:	f3ef 8711 	mrs	r7, BASEPRI
   30e84:	f382 8812 	msr	BASEPRI_MAX, r2
   30e88:	f3bf 8f6f 	isb	sy
	if (is_append) {
   30e8c:	b103      	cbz	r3, 30e90 <queue_insert+0x28>
	return list->tail;
   30e8e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   30e90:	4630      	mov	r0, r6
   30e92:	f000 fa32 	bl	312fa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   30e96:	b160      	cbz	r0, 30eb2 <queue_insert+0x4a>
   30e98:	2300      	movs	r3, #0
   30e9a:	f8c0 8014 	str.w	r8, [r0, #20]
   30e9e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	z_ready_thread(thread);
   30ea2:	f000 f9f3 	bl	3128c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   30ea6:	4630      	mov	r0, r6
   30ea8:	4639      	mov	r1, r7
   30eaa:	f7f5 fa1d 	bl	262e8 <z_reschedule>
		return 0;
   30eae:	2000      	movs	r0, #0
   30eb0:	e00c      	b.n	30ecc <queue_insert+0x64>
	if (alloc) {
   30eb2:	f1b9 0f00 	cmp.w	r9, #0
   30eb6:	d01b      	beq.n	30ef0 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   30eb8:	2108      	movs	r1, #8
   30eba:	f7f5 fe6b 	bl	26b94 <z_thread_aligned_alloc>
		if (anode == NULL) {
   30ebe:	b938      	cbnz	r0, 30ed0 <queue_insert+0x68>
	__asm__ volatile(
   30ec0:	f387 8811 	msr	BASEPRI, r7
   30ec4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   30ec8:	f06f 000b 	mvn.w	r0, #11
}
   30ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   30ed0:	2201      	movs	r2, #1
		anode->data = data;
   30ed2:	f8c0 8004 	str.w	r8, [r0, #4]
   30ed6:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30ed8:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30eda:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   30ede:	b95d      	cbnz	r5, 30ef8 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30ee0:	6822      	ldr	r2, [r4, #0]
   30ee2:	430a      	orrs	r2, r1
   30ee4:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   30ee6:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   30ee8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   30eea:	b96a      	cbnz	r2, 30f08 <queue_insert+0xa0>
	list->tail = node;
   30eec:	6060      	str	r0, [r4, #4]
}
   30eee:	e00b      	b.n	30f08 <queue_insert+0xa0>
}
   30ef0:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   30ef2:	f8c8 9000 	str.w	r9, [r8]
}
   30ef6:	e7ef      	b.n	30ed8 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30ef8:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   30efa:	2a03      	cmp	r2, #3
   30efc:	d810      	bhi.n	30f20 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30efe:	6001      	str	r1, [r0, #0]
	return list->tail;
   30f00:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   30f02:	b939      	cbnz	r1, 30f14 <queue_insert+0xac>
	list->head = node;
   30f04:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   30f08:	2104      	movs	r1, #4
   30f0a:	f104 0010 	add.w	r0, r4, #16
   30f0e:	f000 fc45 	bl	3179c <z_handle_obj_poll_events>
   30f12:	e7c8      	b.n	30ea6 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30f14:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30f16:	f002 0203 	and.w	r2, r2, #3
   30f1a:	4302      	orrs	r2, r0
   30f1c:	600a      	str	r2, [r1, #0]
   30f1e:	e7e5      	b.n	30eec <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30f20:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30f24:	430a      	orrs	r2, r1
   30f26:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30f28:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30f2a:	f002 0203 	and.w	r2, r2, #3
   30f2e:	ea40 0302 	orr.w	r3, r0, r2
   30f32:	602b      	str	r3, [r5, #0]
}
   30f34:	e7e8      	b.n	30f08 <queue_insert+0xa0>

00030f36 <z_queue_node_peek>:
{
   30f36:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30f38:	4604      	mov	r4, r0
   30f3a:	b130      	cbz	r0, 30f4a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30f3c:	6802      	ldr	r2, [r0, #0]
   30f3e:	0793      	lsls	r3, r2, #30
   30f40:	d003      	beq.n	30f4a <z_queue_node_peek+0x14>
		ret = anode->data;
   30f42:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30f44:	b109      	cbz	r1, 30f4a <z_queue_node_peek+0x14>
			k_free(anode);
   30f46:	f000 fc4f 	bl	317e8 <k_free>
}
   30f4a:	4620      	mov	r0, r4
   30f4c:	bd10      	pop	{r4, pc}

00030f4e <z_impl_k_queue_init>:
	list->head = NULL;
   30f4e:	2300      	movs	r3, #0
	list->tail = NULL;
   30f50:	e9c0 3300 	strd	r3, r3, [r0]
   30f54:	f100 0308 	add.w	r3, r0, #8
   30f58:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   30f5c:	f100 0310 	add.w	r3, r0, #16
   30f60:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   30f64:	4770      	bx	lr

00030f66 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   30f66:	2301      	movs	r3, #1
{
   30f68:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   30f6a:	9300      	str	r3, [sp, #0]
   30f6c:	2300      	movs	r3, #0
{
   30f6e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   30f70:	4619      	mov	r1, r3
   30f72:	f7ff ff79 	bl	30e68 <queue_insert>
}
   30f76:	b003      	add	sp, #12
   30f78:	f85d fb04 	ldr.w	pc, [sp], #4

00030f7c <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   30f7c:	2300      	movs	r3, #0
{
   30f7e:	b507      	push	{r0, r1, r2, lr}
   30f80:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   30f82:	9300      	str	r3, [sp, #0]
   30f84:	4619      	mov	r1, r3
   30f86:	f7ff ff6f 	bl	30e68 <queue_insert>
}
   30f8a:	b003      	add	sp, #12
   30f8c:	f85d fb04 	ldr.w	pc, [sp], #4

00030f90 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30f90:	b15a      	cbz	r2, 30faa <z_impl_k_sem_init+0x1a>
   30f92:	428a      	cmp	r2, r1
   30f94:	d309      	bcc.n	30faa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   30f96:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   30f9a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   30f9e:	e9c0 0000 	strd	r0, r0, [r0]
   30fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   30fa6:	2000      	movs	r0, #0
   30fa8:	4770      	bx	lr
		return -EINVAL;
   30faa:	f06f 0015 	mvn.w	r0, #21
}
   30fae:	4770      	bx	lr

00030fb0 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   30fb0:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   30fb2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   30fb4:	408b      	lsls	r3, r1
   30fb6:	ea22 0303 	bic.w	r3, r2, r3
   30fba:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   30fbc:	fa22 f001 	lsr.w	r0, r2, r1
}
   30fc0:	f000 0001 	and.w	r0, r0, #1
   30fc4:	4770      	bx	lr

00030fc6 <unschedule_locked>:
{
   30fc6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30fc8:	2103      	movs	r1, #3
{
   30fca:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30fcc:	300c      	adds	r0, #12
   30fce:	f7ff ffef 	bl	30fb0 <flag_test_and_clear>
   30fd2:	4604      	mov	r4, r0
   30fd4:	b118      	cbz	r0, 30fde <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   30fd6:	f105 0010 	add.w	r0, r5, #16
   30fda:	f000 fa08 	bl	313ee <z_abort_timeout>
}
   30fde:	4620      	mov	r0, r4
   30fe0:	bd38      	pop	{r3, r4, r5, pc}

00030fe2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   30fe2:	b120      	cbz	r0, 30fee <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   30fe4:	2200      	movs	r2, #0
   30fe6:	30b0      	adds	r0, #176	; 0xb0
   30fe8:	4611      	mov	r1, r2
   30fea:	f000 b9dc 	b.w	313a6 <z_sched_wake>
}
   30fee:	4770      	bx	lr

00030ff0 <cancel_async_locked>:
{
   30ff0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   30ff2:	68c3      	ldr	r3, [r0, #12]
{
   30ff4:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30ff6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   30ffa:	079b      	lsls	r3, r3, #30
   30ffc:	d416      	bmi.n	3102c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   30ffe:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   31000:	2102      	movs	r1, #2
   31002:	300c      	adds	r0, #12
   31004:	f7ff ffd4 	bl	30fb0 <flag_test_and_clear>
   31008:	b180      	cbz	r0, 3102c <cancel_async_locked+0x3c>
	return list->head;
   3100a:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3100e:	b16a      	cbz	r2, 3102c <cancel_async_locked+0x3c>
   31010:	4294      	cmp	r4, r2
   31012:	d11d      	bne.n	31050 <cancel_async_locked+0x60>
	return node->next;
   31014:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   31016:	b99e      	cbnz	r6, 31040 <cancel_async_locked+0x50>
   31018:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
	list->head = node;
   3101c:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
Z_GENLIST_REMOVE(slist, snode)
   31020:	429c      	cmp	r4, r3
   31022:	d101      	bne.n	31028 <cancel_async_locked+0x38>
	list->tail = node;
   31024:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
	parent->next = child;
   31028:	2300      	movs	r3, #0
   3102a:	6023      	str	r3, [r4, #0]
	return *flagp;
   3102c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   3102e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   31032:	bf1e      	ittt	ne
   31034:	f043 0302 	orrne.w	r3, r3, #2
   31038:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3103a:	f040 0002 	orrne.w	r0, r0, #2
}
   3103e:	bd70      	pop	{r4, r5, r6, pc}
   31040:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   31042:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
   31046:	4294      	cmp	r4, r2
	list->tail = node;
   31048:	bf08      	it	eq
   3104a:	f8c5 60ac 	streq.w	r6, [r5, #172]	; 0xac
}
   3104e:	e7eb      	b.n	31028 <cancel_async_locked+0x38>
	return node->next;
   31050:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31052:	6812      	ldr	r2, [r2, #0]
   31054:	e7db      	b.n	3100e <cancel_async_locked+0x1e>

00031056 <work_timeout>:
{
   31056:	b573      	push	{r0, r1, r4, r5, r6, lr}
   31058:	4604      	mov	r4, r0
	__asm__ volatile(
   3105a:	f04f 0320 	mov.w	r3, #32
   3105e:	f3ef 8511 	mrs	r5, BASEPRI
   31062:	f383 8812 	msr	BASEPRI_MAX, r3
   31066:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   3106a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3106c:	f1a0 0610 	sub.w	r6, r0, #16
   31070:	2103      	movs	r1, #3
   31072:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   31074:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   31076:	f7ff ff9b 	bl	30fb0 <flag_test_and_clear>
   3107a:	b128      	cbz	r0, 31088 <work_timeout+0x32>
		queue = dw->queue;
   3107c:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   3107e:	4630      	mov	r0, r6
   31080:	a901      	add	r1, sp, #4
		queue = dw->queue;
   31082:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   31084:	f7f4 fe4e 	bl	25d24 <submit_to_queue_locked>
	__asm__ volatile(
   31088:	f385 8811 	msr	BASEPRI, r5
   3108c:	f3bf 8f6f 	isb	sy
}
   31090:	b002      	add	sp, #8
   31092:	bd70      	pop	{r4, r5, r6, pc}

00031094 <k_work_init>:
{
   31094:	b538      	push	{r3, r4, r5, lr}
   31096:	4604      	mov	r4, r0
   31098:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3109a:	2210      	movs	r2, #16
   3109c:	2100      	movs	r1, #0
   3109e:	f000 fc00 	bl	318a2 <memset>
   310a2:	6065      	str	r5, [r4, #4]
}
   310a4:	bd38      	pop	{r3, r4, r5, pc}

000310a6 <k_work_busy_get>:
	__asm__ volatile(
   310a6:	f04f 0220 	mov.w	r2, #32
   310aa:	f3ef 8311 	mrs	r3, BASEPRI
   310ae:	f382 8812 	msr	BASEPRI_MAX, r2
   310b2:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   310b6:	68c0      	ldr	r0, [r0, #12]
   310b8:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   310bc:	f383 8811 	msr	BASEPRI, r3
   310c0:	f3bf 8f6f 	isb	sy
}
   310c4:	4770      	bx	lr

000310c6 <z_work_submit_to_queue>:
{
   310c6:	b513      	push	{r0, r1, r4, lr}
   310c8:	9001      	str	r0, [sp, #4]
   310ca:	4608      	mov	r0, r1
	__asm__ volatile(
   310cc:	f04f 0320 	mov.w	r3, #32
   310d0:	f3ef 8411 	mrs	r4, BASEPRI
   310d4:	f383 8812 	msr	BASEPRI_MAX, r3
   310d8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   310dc:	a901      	add	r1, sp, #4
   310de:	f7f4 fe21 	bl	25d24 <submit_to_queue_locked>
	__asm__ volatile(
   310e2:	f384 8811 	msr	BASEPRI, r4
   310e6:	f3bf 8f6f 	isb	sy
}
   310ea:	b002      	add	sp, #8
   310ec:	bd10      	pop	{r4, pc}

000310ee <k_work_submit_to_queue>:
{
   310ee:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   310f0:	f7ff ffe9 	bl	310c6 <z_work_submit_to_queue>
	if (ret > 0) {
   310f4:	1e04      	subs	r4, r0, #0
   310f6:	dd09      	ble.n	3110c <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   310f8:	f04f 0320 	mov.w	r3, #32
   310fc:	f3ef 8011 	mrs	r0, BASEPRI
   31100:	f383 8812 	msr	BASEPRI_MAX, r3
   31104:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31108:	f000 f927 	bl	3135a <z_reschedule_irqlock>
}
   3110c:	4620      	mov	r0, r4
   3110e:	bd10      	pop	{r4, pc}

00031110 <k_work_queue_init>:
{
   31110:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   31112:	22c8      	movs	r2, #200	; 0xc8
   31114:	2100      	movs	r1, #0
   31116:	f000 fbc4 	bl	318a2 <memset>
}
   3111a:	bd08      	pop	{r3, pc}

0003111c <k_work_init_delayable>:
{
   3111c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   3111e:	2230      	movs	r2, #48	; 0x30
{
   31120:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   31122:	2100      	movs	r1, #0
{
   31124:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   31126:	f000 fbbc 	bl	318a2 <memset>
   3112a:	f44f 7380 	mov.w	r3, #256	; 0x100
   3112e:	6065      	str	r5, [r4, #4]
   31130:	60e3      	str	r3, [r4, #12]
}
   31132:	bd38      	pop	{r3, r4, r5, pc}

00031134 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   31134:	f7ff bfb7 	b.w	310a6 <k_work_busy_get>

00031138 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   31138:	b538      	push	{r3, r4, r5, lr}
   3113a:	4604      	mov	r4, r0
   3113c:	f04f 0320 	mov.w	r3, #32
   31140:	f3ef 8511 	mrs	r5, BASEPRI
   31144:	f383 8812 	msr	BASEPRI_MAX, r3
   31148:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   3114c:	f7ff ff3b 	bl	30fc6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   31150:	4620      	mov	r0, r4
   31152:	f7ff ff4d 	bl	30ff0 <cancel_async_locked>
	__asm__ volatile(
   31156:	f385 8811 	msr	BASEPRI, r5
   3115a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   3115e:	bd38      	pop	{r3, r4, r5, pc}

00031160 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   31160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31162:	4604      	mov	r4, r0
   31164:	460d      	mov	r5, r1
	__asm__ volatile(
   31166:	f04f 0320 	mov.w	r3, #32
   3116a:	f3ef 8611 	mrs	r6, BASEPRI
   3116e:	f383 8812 	msr	BASEPRI_MAX, r3
   31172:	f3bf 8f6f 	isb	sy
	return *flagp;
   31176:	68c3      	ldr	r3, [r0, #12]
   31178:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   3117c:	2b00      	cmp	r3, #0
   3117e:	bf14      	ite	ne
   31180:	2701      	movne	r7, #1
   31182:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   31184:	d105      	bne.n	31192 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   31186:	f386 8811 	msr	BASEPRI, r6
   3118a:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   3118e:	4638      	mov	r0, r7
   31190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   31192:	f7ff ff18 	bl	30fc6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   31196:	4620      	mov	r0, r4
   31198:	f7ff ff2a 	bl	30ff0 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   3119c:	4629      	mov	r1, r5
   3119e:	4620      	mov	r0, r4
   311a0:	f7f4 fda2 	bl	25ce8 <cancel_sync_locked>
   311a4:	f386 8811 	msr	BASEPRI, r6
   311a8:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   311ac:	2800      	cmp	r0, #0
   311ae:	d0ee      	beq.n	3118e <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   311b0:	f04f 32ff 	mov.w	r2, #4294967295
   311b4:	f04f 33ff 	mov.w	r3, #4294967295
   311b8:	f105 0008 	add.w	r0, r5, #8
   311bc:	f7f4 fcb6 	bl	25b2c <z_impl_k_sem_take>
   311c0:	e7e5      	b.n	3118e <k_work_cancel_delayable_sync+0x2e>

000311c2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   311c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   311c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   311c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   311ca:	2300      	movs	r3, #0
	node->prev = NULL;
   311cc:	e9c0 3300 	strd	r3, r3, [r0]
}
   311d0:	4770      	bx	lr

000311d2 <unpend_thread_no_timeout>:
{
   311d2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   311d4:	f7ff fff5 	bl	311c2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   311d8:	7b43      	ldrb	r3, [r0, #13]
   311da:	f023 0302 	bic.w	r3, r3, #2
   311de:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   311e0:	2300      	movs	r3, #0
   311e2:	6083      	str	r3, [r0, #8]
}
   311e4:	bd08      	pop	{r3, pc}

000311e6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   311e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   311ea:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   311ee:	4283      	cmp	r3, r0
		return b2 - b1;
   311f0:	bf14      	ite	ne
   311f2:	1ac0      	subne	r0, r0, r3
	return 0;
   311f4:	2000      	moveq	r0, #0
}
   311f6:	4770      	bx	lr

000311f8 <z_thread_timeout>:
{
   311f8:	4601      	mov	r1, r0
   311fa:	b510      	push	{r4, lr}
	__asm__ volatile(
   311fc:	f04f 0320 	mov.w	r3, #32
   31200:	f3ef 8411 	mrs	r4, BASEPRI
   31204:	f383 8812 	msr	BASEPRI_MAX, r3
   31208:	f3bf 8f6f 	isb	sy
		if (!killed) {
   3120c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   31210:	f013 0f28 	tst.w	r3, #40	; 0x28
   31214:	d10d      	bne.n	31232 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   31216:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   3121a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   3121c:	b10b      	cbz	r3, 31222 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   3121e:	f7ff ffd8 	bl	311d2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31222:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   31226:	f023 0314 	bic.w	r3, r3, #20
   3122a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   3122e:	f7f4 ff1f 	bl	26070 <ready_thread>
	__asm__ volatile(
   31232:	f384 8811 	msr	BASEPRI, r4
   31236:	f3bf 8f6f 	isb	sy
}
   3123a:	bd10      	pop	{r4, pc}

0003123c <add_to_waitq_locked>:
{
   3123c:	b538      	push	{r3, r4, r5, lr}
   3123e:	4604      	mov	r4, r0
   31240:	460d      	mov	r5, r1
	unready_thread(thread);
   31242:	f7f4 ff49 	bl	260d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   31246:	7b63      	ldrb	r3, [r4, #13]
   31248:	f043 0302 	orr.w	r3, r3, #2
   3124c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3124e:	b1e5      	cbz	r5, 3128a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   31250:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   31252:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31254:	429d      	cmp	r5, r3
   31256:	d109      	bne.n	3126c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   31258:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   3125a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   3125e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31260:	606c      	str	r4, [r5, #4]
}
   31262:	e012      	b.n	3128a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   31264:	686a      	ldr	r2, [r5, #4]
   31266:	4293      	cmp	r3, r2
   31268:	d0f6      	beq.n	31258 <add_to_waitq_locked+0x1c>
   3126a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3126c:	2b00      	cmp	r3, #0
   3126e:	d0f3      	beq.n	31258 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   31270:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   31274:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   31278:	428a      	cmp	r2, r1
   3127a:	d0f3      	beq.n	31264 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3127c:	4291      	cmp	r1, r2
   3127e:	ddf1      	ble.n	31264 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   31280:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31282:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   31286:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   31288:	605c      	str	r4, [r3, #4]
}
   3128a:	bd38      	pop	{r3, r4, r5, pc}

0003128c <z_ready_thread>:
{
   3128c:	b510      	push	{r4, lr}
	__asm__ volatile(
   3128e:	f04f 0320 	mov.w	r3, #32
   31292:	f3ef 8411 	mrs	r4, BASEPRI
   31296:	f383 8812 	msr	BASEPRI_MAX, r3
   3129a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   3129e:	f7f4 fee7 	bl	26070 <ready_thread>
	__asm__ volatile(
   312a2:	f384 8811 	msr	BASEPRI, r4
   312a6:	f3bf 8f6f 	isb	sy
}
   312aa:	bd10      	pop	{r4, pc}

000312ac <z_unpend_thread_no_timeout>:
{
   312ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   312ae:	f04f 0320 	mov.w	r3, #32
   312b2:	f3ef 8111 	mrs	r1, BASEPRI
   312b6:	f383 8812 	msr	BASEPRI_MAX, r3
   312ba:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   312be:	f7ff ff88 	bl	311d2 <unpend_thread_no_timeout>
	__asm__ volatile(
   312c2:	f381 8811 	msr	BASEPRI, r1
   312c6:	f3bf 8f6f 	isb	sy
}
   312ca:	bd08      	pop	{r3, pc}

000312cc <z_unpend1_no_timeout>:
{
   312cc:	b508      	push	{r3, lr}
   312ce:	4603      	mov	r3, r0
	__asm__ volatile(
   312d0:	f04f 0220 	mov.w	r2, #32
   312d4:	f3ef 8111 	mrs	r1, BASEPRI
   312d8:	f382 8812 	msr	BASEPRI_MAX, r2
   312dc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   312e0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   312e2:	4283      	cmp	r3, r0
   312e4:	d007      	beq.n	312f6 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   312e6:	b108      	cbz	r0, 312ec <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   312e8:	f7ff ff73 	bl	311d2 <unpend_thread_no_timeout>
	__asm__ volatile(
   312ec:	f381 8811 	msr	BASEPRI, r1
   312f0:	f3bf 8f6f 	isb	sy
}
   312f4:	bd08      	pop	{r3, pc}
   312f6:	2000      	movs	r0, #0
   312f8:	e7f8      	b.n	312ec <z_unpend1_no_timeout+0x20>

000312fa <z_unpend_first_thread>:
{
   312fa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   312fc:	f04f 0320 	mov.w	r3, #32
   31300:	f3ef 8511 	mrs	r5, BASEPRI
   31304:	f383 8812 	msr	BASEPRI_MAX, r3
   31308:	f3bf 8f6f 	isb	sy
	return list->head == list;
   3130c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3130e:	42a0      	cmp	r0, r4
   31310:	d00d      	beq.n	3132e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   31312:	b134      	cbz	r4, 31322 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   31314:	4620      	mov	r0, r4
   31316:	f7ff ff5c 	bl	311d2 <unpend_thread_no_timeout>
   3131a:	f104 0018 	add.w	r0, r4, #24
   3131e:	f000 f866 	bl	313ee <z_abort_timeout>
	__asm__ volatile(
   31322:	f385 8811 	msr	BASEPRI, r5
   31326:	f3bf 8f6f 	isb	sy
}
   3132a:	4620      	mov	r0, r4
   3132c:	bd38      	pop	{r3, r4, r5, pc}
   3132e:	2400      	movs	r4, #0
   31330:	e7f7      	b.n	31322 <z_unpend_first_thread+0x28>

00031332 <z_unpend_thread>:
{
   31332:	b510      	push	{r4, lr}
	__asm__ volatile(
   31334:	f04f 0320 	mov.w	r3, #32
   31338:	f3ef 8411 	mrs	r4, BASEPRI
   3133c:	f383 8812 	msr	BASEPRI_MAX, r3
   31340:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   31344:	f7ff ff45 	bl	311d2 <unpend_thread_no_timeout>
	__asm__ volatile(
   31348:	f384 8811 	msr	BASEPRI, r4
   3134c:	f3bf 8f6f 	isb	sy
}
   31350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31354:	3018      	adds	r0, #24
   31356:	f000 b84a 	b.w	313ee <z_abort_timeout>

0003135a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3135a:	4603      	mov	r3, r0
   3135c:	b920      	cbnz	r0, 31368 <z_reschedule_irqlock+0xe>
   3135e:	f3ef 8205 	mrs	r2, IPSR
   31362:	b90a      	cbnz	r2, 31368 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   31364:	f7df bf90 	b.w	11288 <arch_swap>
   31368:	f383 8811 	msr	BASEPRI, r3
   3136c:	f3bf 8f6f 	isb	sy
}
   31370:	4770      	bx	lr

00031372 <z_reschedule_unlocked>:
	__asm__ volatile(
   31372:	f04f 0320 	mov.w	r3, #32
   31376:	f3ef 8011 	mrs	r0, BASEPRI
   3137a:	f383 8812 	msr	BASEPRI_MAX, r3
   3137e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31382:	f7ff bfea 	b.w	3135a <z_reschedule_irqlock>

00031386 <z_unpend_all>:
{
   31386:	b538      	push	{r3, r4, r5, lr}
   31388:	4605      	mov	r5, r0
	int need_sched = 0;
   3138a:	2000      	movs	r0, #0
	return list->head == list;
   3138c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3138e:	42a5      	cmp	r5, r4
   31390:	d000      	beq.n	31394 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   31392:	b904      	cbnz	r4, 31396 <z_unpend_all+0x10>
}
   31394:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   31396:	4620      	mov	r0, r4
   31398:	f7ff ffcb 	bl	31332 <z_unpend_thread>
		z_ready_thread(thread);
   3139c:	4620      	mov	r0, r4
   3139e:	f7ff ff75 	bl	3128c <z_ready_thread>
		need_sched = 1;
   313a2:	2001      	movs	r0, #1
   313a4:	e7f2      	b.n	3138c <z_unpend_all+0x6>

000313a6 <z_sched_wake>:
{
   313a6:	b538      	push	{r3, r4, r5, lr}
   313a8:	f04f 0320 	mov.w	r3, #32
   313ac:	f3ef 8511 	mrs	r5, BASEPRI
   313b0:	f383 8812 	msr	BASEPRI_MAX, r3
   313b4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   313b8:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   313ba:	42a0      	cmp	r0, r4
   313bc:	d013      	beq.n	313e6 <z_sched_wake+0x40>
		if (thread != NULL) {
   313be:	b1a4      	cbz	r4, 313ea <z_sched_wake+0x44>
   313c0:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
	thread->base.swap_data = data;
   313c4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   313c6:	4620      	mov	r0, r4
   313c8:	f7ff ff03 	bl	311d2 <unpend_thread_no_timeout>
   313cc:	f104 0018 	add.w	r0, r4, #24
   313d0:	f000 f80d 	bl	313ee <z_abort_timeout>
			ready_thread(thread);
   313d4:	4620      	mov	r0, r4
   313d6:	f7f4 fe4b 	bl	26070 <ready_thread>
			ret = true;
   313da:	2001      	movs	r0, #1
	__asm__ volatile(
   313dc:	f385 8811 	msr	BASEPRI, r5
   313e0:	f3bf 8f6f 	isb	sy
}
   313e4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   313e6:	2000      	movs	r0, #0
   313e8:	e7f8      	b.n	313dc <z_sched_wake+0x36>
   313ea:	4620      	mov	r0, r4
   313ec:	e7f6      	b.n	313dc <z_sched_wake+0x36>

000313ee <z_abort_timeout>:
{
   313ee:	b510      	push	{r4, lr}
	__asm__ volatile(
   313f0:	f04f 0220 	mov.w	r2, #32
   313f4:	f3ef 8411 	mrs	r4, BASEPRI
   313f8:	f382 8812 	msr	BASEPRI_MAX, r2
   313fc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   31400:	6803      	ldr	r3, [r0, #0]
   31402:	b13b      	cbz	r3, 31414 <z_abort_timeout+0x26>
			remove_timeout(to);
   31404:	f7f5 f96e 	bl	266e4 <remove_timeout>
			ret = 0;
   31408:	2000      	movs	r0, #0
	__asm__ volatile(
   3140a:	f384 8811 	msr	BASEPRI, r4
   3140e:	f3bf 8f6f 	isb	sy
}
   31412:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   31414:	f06f 0015 	mvn.w	r0, #21
   31418:	e7f7      	b.n	3140a <z_abort_timeout+0x1c>

0003141a <z_get_next_timeout_expiry>:
{
   3141a:	b510      	push	{r4, lr}
	__asm__ volatile(
   3141c:	f04f 0320 	mov.w	r3, #32
   31420:	f3ef 8411 	mrs	r4, BASEPRI
   31424:	f383 8812 	msr	BASEPRI_MAX, r3
   31428:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   3142c:	f7f5 f932 	bl	26694 <next_timeout>
	__asm__ volatile(
   31430:	f384 8811 	msr	BASEPRI, r4
   31434:	f3bf 8f6f 	isb	sy
}
   31438:	bd10      	pop	{r4, pc}

0003143a <z_set_timeout_expiry>:
{
   3143a:	b570      	push	{r4, r5, r6, lr}
   3143c:	4604      	mov	r4, r0
   3143e:	460d      	mov	r5, r1
	__asm__ volatile(
   31440:	f04f 0320 	mov.w	r3, #32
   31444:	f3ef 8611 	mrs	r6, BASEPRI
   31448:	f383 8812 	msr	BASEPRI_MAX, r3
   3144c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   31450:	f7f5 f920 	bl	26694 <next_timeout>
			      || (ticks <= next_to);
   31454:	2801      	cmp	r0, #1
   31456:	dd07      	ble.n	31468 <z_set_timeout_expiry+0x2e>
   31458:	42a0      	cmp	r0, r4
   3145a:	db05      	blt.n	31468 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3145c:	42a0      	cmp	r0, r4
   3145e:	4629      	mov	r1, r5
   31460:	bfa8      	it	ge
   31462:	4620      	movge	r0, r4
   31464:	f7f1 fd50 	bl	22f08 <sys_clock_set_timeout>
	__asm__ volatile(
   31468:	f386 8811 	msr	BASEPRI, r6
   3146c:	f3bf 8f6f 	isb	sy
}
   31470:	bd70      	pop	{r4, r5, r6, pc}

00031472 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   31472:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   31474:	f7f5 fa2c 	bl	268d0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   31478:	bd08      	pop	{r3, pc}

0003147a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3147a:	f7f5 ba29 	b.w	268d0 <sys_clock_tick_get>

0003147e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3147e:	b108      	cbz	r0, 31484 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   31480:	f7dd be70 	b.w	f164 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   31484:	4770      	bx	lr

00031486 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31486:	f1b1 3fff 	cmp.w	r1, #4294967295
   3148a:	bf08      	it	eq
   3148c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   31490:	b538      	push	{r3, r4, r5, lr}
   31492:	460c      	mov	r4, r1
   31494:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31496:	d014      	beq.n	314c2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31498:	4308      	orrs	r0, r1
   3149a:	d103      	bne.n	314a4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3149c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   314a0:	f7f5 ba16 	b.w	268d0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   314a4:	f06f 0001 	mvn.w	r0, #1
   314a8:	f04f 33ff 	mov.w	r3, #4294967295
   314ac:	1b40      	subs	r0, r0, r5
   314ae:	eb63 0101 	sbc.w	r1, r3, r1
   314b2:	2900      	cmp	r1, #0
   314b4:	da04      	bge.n	314c0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   314b6:	f7f5 fa0b 	bl	268d0 <sys_clock_tick_get>
   314ba:	1940      	adds	r0, r0, r5
   314bc:	eb41 0104 	adc.w	r1, r1, r4
}
   314c0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   314c2:	f04f 30ff 	mov.w	r0, #4294967295
   314c6:	4601      	mov	r1, r0
   314c8:	e7fa      	b.n	314c0 <sys_clock_timeout_end_calc+0x3a>

000314ca <k_timer_init>:
	timer->status = 0U;
   314ca:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   314cc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   314d0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   314d4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   314d8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   314dc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   314de:	6343      	str	r3, [r0, #52]	; 0x34
}
   314e0:	4770      	bx	lr

000314e2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   314e2:	b510      	push	{r4, lr}
   314e4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   314e6:	f7ff ff82 	bl	313ee <z_abort_timeout>

	if (inactive) {
   314ea:	b9b0      	cbnz	r0, 3151a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   314ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   314ee:	b10b      	cbz	r3, 314f4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   314f0:	4620      	mov	r0, r4
   314f2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   314f4:	f104 0018 	add.w	r0, r4, #24
   314f8:	f7ff fee8 	bl	312cc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   314fc:	b168      	cbz	r0, 3151a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   314fe:	f7ff fec5 	bl	3128c <z_ready_thread>
	__asm__ volatile(
   31502:	f04f 0320 	mov.w	r3, #32
   31506:	f3ef 8011 	mrs	r0, BASEPRI
   3150a:	f383 8812 	msr	BASEPRI_MAX, r3
   3150e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   31512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31516:	f7ff bf20 	b.w	3135a <z_reschedule_irqlock>
   3151a:	bd10      	pop	{r4, pc}

0003151c <add_event>:
{
   3151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3151e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31520:	e9d0 1300 	ldrd	r1, r3, [r0]
   31524:	4288      	cmp	r0, r1
   31526:	4604      	mov	r4, r0
   31528:	d105      	bne.n	31536 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   3152a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3152c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   31530:	601d      	str	r5, [r3, #0]
	list->tail = node;
   31532:	6065      	str	r5, [r4, #4]
   31534:	e01d      	b.n	31572 <add_event+0x56>
	if ((pending == NULL) ||
   31536:	2b00      	cmp	r3, #0
   31538:	d0f7      	beq.n	3152a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3153a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3153c:	b100      	cbz	r0, 31540 <add_event+0x24>
   3153e:	3860      	subs	r0, #96	; 0x60
   31540:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31544:	4639      	mov	r1, r7
   31546:	f7ff fe4e 	bl	311e6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3154a:	2800      	cmp	r0, #0
   3154c:	dced      	bgt.n	3152a <add_event+0xe>
	return list->head == list;
   3154e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31550:	42b4      	cmp	r4, r6
   31552:	d0ea      	beq.n	3152a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31554:	2e00      	cmp	r6, #0
   31556:	d0e8      	beq.n	3152a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   31558:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3155a:	b101      	cbz	r1, 3155e <add_event+0x42>
   3155c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3155e:	4638      	mov	r0, r7
   31560:	f7ff fe41 	bl	311e6 <z_sched_prio_cmp>
   31564:	2800      	cmp	r0, #0
   31566:	dd05      	ble.n	31574 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   31568:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3156a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3156e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   31570:	6075      	str	r5, [r6, #4]
}
   31572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   31574:	6863      	ldr	r3, [r4, #4]
   31576:	429e      	cmp	r6, r3
   31578:	d0d7      	beq.n	3152a <add_event+0xe>
   3157a:	6836      	ldr	r6, [r6, #0]
   3157c:	e7ea      	b.n	31554 <add_event+0x38>

0003157e <register_events>:
{
   3157e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   31582:	2500      	movs	r5, #0
{
   31584:	468b      	mov	fp, r1
   31586:	4614      	mov	r4, r2
   31588:	461f      	mov	r7, r3
   3158a:	4682      	mov	sl, r0
	int events_registered = 0;
   3158c:	462e      	mov	r6, r5
	event->poller = NULL;
   3158e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   31590:	455d      	cmp	r5, fp
   31592:	db02      	blt.n	3159a <register_events+0x1c>
}
   31594:	4630      	mov	r0, r6
   31596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3159a:	f04f 0320 	mov.w	r3, #32
   3159e:	f3ef 8911 	mrs	r9, BASEPRI
   315a2:	f383 8812 	msr	BASEPRI_MAX, r3
   315a6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   315aa:	f89a 300d 	ldrb.w	r3, [sl, #13]
   315ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   315b2:	3b01      	subs	r3, #1
   315b4:	2b07      	cmp	r3, #7
   315b6:	d80f      	bhi.n	315d8 <register_events+0x5a>
   315b8:	e8df f003 	tbb	[pc, r3]
   315bc:	0a0e041e 	.word	0x0a0e041e
   315c0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   315c4:	f8da 3010 	ldr.w	r3, [sl, #16]
   315c8:	689b      	ldr	r3, [r3, #8]
   315ca:	b12b      	cbz	r3, 315d8 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   315cc:	2302      	movs	r3, #2
   315ce:	e020      	b.n	31612 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   315d0:	f8da 3010 	ldr.w	r3, [sl, #16]
   315d4:	681b      	ldr	r3, [r3, #0]
   315d6:	bb8b      	cbnz	r3, 3163c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   315d8:	bb47      	cbnz	r7, 3162c <register_events+0xae>
   315da:	7823      	ldrb	r3, [r4, #0]
   315dc:	b333      	cbz	r3, 3162c <register_events+0xae>
	switch (event->type) {
   315de:	f89a 300d 	ldrb.w	r3, [sl, #13]
   315e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   315e6:	3b01      	subs	r3, #1
   315e8:	2b07      	cmp	r3, #7
   315ea:	d830      	bhi.n	3164e <register_events+0xd0>
   315ec:	e8df f003 	tbb	[pc, r3]
   315f0:	282f2833 	.word	0x282f2833
   315f4:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   315f8:	f8da 3010 	ldr.w	r3, [sl, #16]
   315fc:	689b      	ldr	r3, [r3, #8]
   315fe:	2b00      	cmp	r3, #0
   31600:	d0ea      	beq.n	315d8 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   31602:	2301      	movs	r3, #1
   31604:	e005      	b.n	31612 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   31606:	f8da 3010 	ldr.w	r3, [sl, #16]
   3160a:	6a1b      	ldr	r3, [r3, #32]
   3160c:	2b00      	cmp	r3, #0
   3160e:	d0e3      	beq.n	315d8 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   31610:	2310      	movs	r3, #16
	event->state |= state;
   31612:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   31616:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   3161a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   3161e:	430b      	orrs	r3, r1
   31620:	f363 3294 	bfi	r2, r3, #14, #7
   31624:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   31628:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   3162c:	f389 8811 	msr	BASEPRI, r9
   31630:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   31634:	3501      	adds	r5, #1
   31636:	f10a 0a14 	add.w	sl, sl, #20
   3163a:	e7a9      	b.n	31590 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3163c:	2304      	movs	r3, #4
   3163e:	e7e8      	b.n	31612 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   31640:	4622      	mov	r2, r4
   31642:	4651      	mov	r1, sl
   31644:	f8da 0010 	ldr.w	r0, [sl, #16]
   31648:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   3164a:	f7ff ff67 	bl	3151c <add_event>
	event->poller = poller;
   3164e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   31652:	3601      	adds	r6, #1
   31654:	e7ea      	b.n	3162c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   31656:	4622      	mov	r2, r4
   31658:	4651      	mov	r1, sl
   3165a:	f8da 0010 	ldr.w	r0, [sl, #16]
   3165e:	e7f4      	b.n	3164a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   31660:	f8da 0010 	ldr.w	r0, [sl, #16]
   31664:	4622      	mov	r2, r4
   31666:	4651      	mov	r1, sl
   31668:	3024      	adds	r0, #36	; 0x24
   3166a:	e7ee      	b.n	3164a <register_events+0xcc>

0003166c <signal_poll_event>:
{
   3166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   31670:	6884      	ldr	r4, [r0, #8]
{
   31672:	4605      	mov	r5, r0
   31674:	460e      	mov	r6, r1
	if (poller != NULL) {
   31676:	b144      	cbz	r4, 3168a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   31678:	7863      	ldrb	r3, [r4, #1]
   3167a:	2b01      	cmp	r3, #1
   3167c:	d12e      	bne.n	316dc <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   3167e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   31682:	f013 0302 	ands.w	r3, r3, #2
   31686:	d10a      	bne.n	3169e <signal_poll_event+0x32>
		poller->is_polling = false;
   31688:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3168a:	2000      	movs	r0, #0
	event->state |= state;
   3168c:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   3168e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   31690:	f3c3 3286 	ubfx	r2, r3, #14, #7
   31694:	4316      	orrs	r6, r2
   31696:	f366 3394 	bfi	r3, r6, #14, #7
   3169a:	60eb      	str	r3, [r5, #12]
	return retcode;
   3169c:	e03e      	b.n	3171c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   3169e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   316a2:	f1b3 3fff 	cmp.w	r3, #4294967295
   316a6:	bf08      	it	eq
   316a8:	f112 0f02 	cmneq.w	r2, #2
   316ac:	d032      	beq.n	31714 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   316ae:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   316b2:	4640      	mov	r0, r8
   316b4:	f7ff fe3d 	bl	31332 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   316b8:	2e08      	cmp	r6, #8
   316ba:	bf0c      	ite	eq
   316bc:	f06f 0303 	mvneq.w	r3, #3
   316c0:	2300      	movne	r3, #0
   316c2:	63e3      	str	r3, [r4, #60]	; 0x3c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   316c4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   316c8:	06db      	lsls	r3, r3, #27
   316ca:	d109      	bne.n	316e0 <signal_poll_event+0x74>
   316cc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   316d0:	b937      	cbnz	r7, 316e0 <signal_poll_event+0x74>
	z_ready_thread(thread);
   316d2:	4640      	mov	r0, r8
   316d4:	f7ff fdda 	bl	3128c <z_ready_thread>
		poller->is_polling = false;
   316d8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   316da:	e7d6      	b.n	3168a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   316dc:	2b02      	cmp	r3, #2
   316de:	d001      	beq.n	316e4 <signal_poll_event+0x78>
		poller->is_polling = false;
   316e0:	2300      	movs	r3, #0
   316e2:	e7d1      	b.n	31688 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   316e4:	7823      	ldrb	r3, [r4, #0]
   316e6:	2b00      	cmp	r3, #0
   316e8:	d0cf      	beq.n	3168a <signal_poll_event+0x1e>
   316ea:	f854 7c04 	ldr.w	r7, [r4, #-4]
   316ee:	2f00      	cmp	r7, #0
   316f0:	d0f2      	beq.n	316d8 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   316f2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   316f6:	f1a4 0914 	sub.w	r9, r4, #20
   316fa:	f104 0014 	add.w	r0, r4, #20
   316fe:	f7ff fe76 	bl	313ee <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   31702:	4649      	mov	r1, r9
   31704:	4638      	mov	r0, r7
		twork->poll_result = 0;
   31706:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   3170a:	f7ff fcdc 	bl	310c6 <z_work_submit_to_queue>
		poller->is_polling = false;
   3170e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   31712:	e7ba      	b.n	3168a <signal_poll_event+0x1e>
		poller->is_polling = false;
   31714:	2300      	movs	r3, #0
		return -EAGAIN;
   31716:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   3171a:	7023      	strb	r3, [r4, #0]
}
   3171c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00031720 <clear_event_registrations>:
	while (num_events--) {
   31720:	2314      	movs	r3, #20
{
   31722:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   31724:	2400      	movs	r4, #0
	switch (event->type) {
   31726:	f44f 768b 	mov.w	r6, #278	; 0x116
   3172a:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   3172e:	b901      	cbnz	r1, 31732 <clear_event_registrations+0x12>
}
   31730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   31732:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   31736:	f1a0 0714 	sub.w	r7, r0, #20
   3173a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3173e:	2b08      	cmp	r3, #8
	event->poller = NULL;
   31740:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   31744:	d80c      	bhi.n	31760 <clear_event_registrations+0x40>
   31746:	fa26 f303 	lsr.w	r3, r6, r3
   3174a:	07db      	lsls	r3, r3, #31
   3174c:	d508      	bpl.n	31760 <clear_event_registrations+0x40>
	return node->next != NULL;
   3174e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   31752:	b12b      	cbz	r3, 31760 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   31754:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   31758:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   3175a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   3175c:	e940 4405 	strd	r4, r4, [r0, #-20]
   31760:	f382 8811 	msr	BASEPRI, r2
   31764:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   31768:	f04f 0320 	mov.w	r3, #32
   3176c:	f3ef 8211 	mrs	r2, BASEPRI
   31770:	f383 8812 	msr	BASEPRI_MAX, r3
   31774:	f3bf 8f6f 	isb	sy
   31778:	4638      	mov	r0, r7
   3177a:	3901      	subs	r1, #1
   3177c:	e7d7      	b.n	3172e <clear_event_registrations+0xe>

0003177e <k_poll_event_init>:
{
   3177e:	b510      	push	{r4, lr}
	event->poller = NULL;
   31780:	2400      	movs	r4, #0
	event->type = type;
   31782:	0552      	lsls	r2, r2, #21
   31784:	0209      	lsls	r1, r1, #8
   31786:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   3178a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   3178e:	430a      	orrs	r2, r1
   31790:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   31792:	6084      	str	r4, [r0, #8]
	event->type = type;
   31794:	430a      	orrs	r2, r1
	event->obj = obj;
   31796:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   3179a:	bd10      	pop	{r4, pc}

0003179c <z_handle_obj_poll_events>:
{
   3179c:	4603      	mov	r3, r0
	return list->head == list;
   3179e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   317a0:	4283      	cmp	r3, r0
   317a2:	d008      	beq.n	317b6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   317a4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   317a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   317aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   317ac:	2300      	movs	r3, #0
	node->prev = NULL;
   317ae:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   317b2:	f7ff bf5b 	b.w	3166c <signal_poll_event>
}
   317b6:	4770      	bx	lr

000317b8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   317b8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   317ba:	e9c0 0000 	strd	r0, r0, [r0]
   317be:	6083      	str	r3, [r0, #8]
}
   317c0:	4770      	bx	lr

000317c2 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   317c2:	3204      	adds	r2, #4
{
   317c4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   317c6:	4604      	mov	r4, r0
   317c8:	d208      	bcs.n	317dc <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   317ca:	2600      	movs	r6, #0
   317cc:	2700      	movs	r7, #0
   317ce:	f041 0104 	orr.w	r1, r1, #4
   317d2:	e9cd 6700 	strd	r6, r7, [sp]
   317d6:	f7ff fa7d 	bl	30cd4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   317da:	b910      	cbnz	r0, 317e2 <z_heap_aligned_alloc+0x20>
		return NULL;
   317dc:	2000      	movs	r0, #0
}
   317de:	b002      	add	sp, #8
   317e0:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   317e2:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   317e6:	e7fa      	b.n	317de <z_heap_aligned_alloc+0x1c>

000317e8 <k_free>:
	if (ptr != NULL) {
   317e8:	b120      	cbz	r0, 317f4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   317ea:	1f01      	subs	r1, r0, #4
   317ec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   317f0:	f7ff babd 	b.w	30d6e <k_heap_free>
}
   317f4:	4770      	bx	lr

000317f6 <k_malloc>:
{
   317f6:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   317f8:	2004      	movs	r0, #4
   317fa:	f7f5 b9bd 	b.w	26b78 <k_aligned_alloc>

000317fe <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   317fe:	4770      	bx	lr

00031800 <atof>:
   31800:	2100      	movs	r1, #0
   31802:	f7f6 b8d5 	b.w	279b0 <strtod>

00031806 <atoi>:
   31806:	220a      	movs	r2, #10
   31808:	2100      	movs	r1, #0
   3180a:	f7f6 b98f 	b.w	27b2c <strtol>

0003180e <memcmp>:
   3180e:	3901      	subs	r1, #1
   31810:	4402      	add	r2, r0
   31812:	b510      	push	{r4, lr}
   31814:	4290      	cmp	r0, r2
   31816:	d101      	bne.n	3181c <memcmp+0xe>
   31818:	2000      	movs	r0, #0
   3181a:	e005      	b.n	31828 <memcmp+0x1a>
   3181c:	7803      	ldrb	r3, [r0, #0]
   3181e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   31822:	42a3      	cmp	r3, r4
   31824:	d001      	beq.n	3182a <memcmp+0x1c>
   31826:	1b18      	subs	r0, r3, r4
   31828:	bd10      	pop	{r4, pc}
   3182a:	3001      	adds	r0, #1
   3182c:	e7f2      	b.n	31814 <memcmp+0x6>

0003182e <memcpy>:
   3182e:	440a      	add	r2, r1
   31830:	1e43      	subs	r3, r0, #1
   31832:	4291      	cmp	r1, r2
   31834:	d100      	bne.n	31838 <memcpy+0xa>
   31836:	4770      	bx	lr
   31838:	b510      	push	{r4, lr}
   3183a:	f811 4b01 	ldrb.w	r4, [r1], #1
   3183e:	4291      	cmp	r1, r2
   31840:	f803 4f01 	strb.w	r4, [r3, #1]!
   31844:	d1f9      	bne.n	3183a <memcpy+0xc>
   31846:	bd10      	pop	{r4, pc}

00031848 <__memcpy_chk>:
   31848:	429a      	cmp	r2, r3
   3184a:	b508      	push	{r3, lr}
   3184c:	d901      	bls.n	31852 <__memcpy_chk+0xa>
   3184e:	f7e0 fb41 	bl	11ed4 <__chk_fail>
   31852:	4281      	cmp	r1, r0
   31854:	d804      	bhi.n	31860 <__memcpy_chk+0x18>
   31856:	188b      	adds	r3, r1, r2
   31858:	4298      	cmp	r0, r3
   3185a:	d3f8      	bcc.n	3184e <__memcpy_chk+0x6>
   3185c:	4281      	cmp	r1, r0
   3185e:	d102      	bne.n	31866 <__memcpy_chk+0x1e>
   31860:	1883      	adds	r3, r0, r2
   31862:	4299      	cmp	r1, r3
   31864:	d3f3      	bcc.n	3184e <__memcpy_chk+0x6>
   31866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3186a:	f7ff bfe0 	b.w	3182e <memcpy>

0003186e <memmove>:
   3186e:	4288      	cmp	r0, r1
   31870:	b510      	push	{r4, lr}
   31872:	eb01 0402 	add.w	r4, r1, r2
   31876:	d902      	bls.n	3187e <memmove+0x10>
   31878:	4284      	cmp	r4, r0
   3187a:	4623      	mov	r3, r4
   3187c:	d807      	bhi.n	3188e <memmove+0x20>
   3187e:	1e43      	subs	r3, r0, #1
   31880:	42a1      	cmp	r1, r4
   31882:	d008      	beq.n	31896 <memmove+0x28>
   31884:	f811 2b01 	ldrb.w	r2, [r1], #1
   31888:	f803 2f01 	strb.w	r2, [r3, #1]!
   3188c:	e7f8      	b.n	31880 <memmove+0x12>
   3188e:	4402      	add	r2, r0
   31890:	4601      	mov	r1, r0
   31892:	428a      	cmp	r2, r1
   31894:	d100      	bne.n	31898 <memmove+0x2a>
   31896:	bd10      	pop	{r4, pc}
   31898:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3189c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   318a0:	e7f7      	b.n	31892 <memmove+0x24>

000318a2 <memset>:
   318a2:	4402      	add	r2, r0
   318a4:	4603      	mov	r3, r0
   318a6:	4293      	cmp	r3, r2
   318a8:	d100      	bne.n	318ac <memset+0xa>
   318aa:	4770      	bx	lr
   318ac:	f803 1b01 	strb.w	r1, [r3], #1
   318b0:	e7f9      	b.n	318a6 <memset+0x4>

000318b2 <_calloc_r>:
   318b2:	b538      	push	{r3, r4, r5, lr}
   318b4:	fb02 f501 	mul.w	r5, r2, r1
   318b8:	4629      	mov	r1, r5
   318ba:	f7f5 fc93 	bl	271e4 <_malloc_r>
   318be:	4604      	mov	r4, r0
   318c0:	b118      	cbz	r0, 318ca <_calloc_r+0x18>
   318c2:	462a      	mov	r2, r5
   318c4:	2100      	movs	r1, #0
   318c6:	f7ff ffec 	bl	318a2 <memset>
   318ca:	4620      	mov	r0, r4
   318cc:	bd38      	pop	{r3, r4, r5, pc}

000318ce <__cvt>:
   318ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   318d2:	b089      	sub	sp, #36	; 0x24
   318d4:	2b00      	cmp	r3, #0
   318d6:	461d      	mov	r5, r3
   318d8:	4614      	mov	r4, r2
   318da:	bfba      	itte	lt
   318dc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   318e0:	4614      	movlt	r4, r2
   318e2:	2300      	movge	r3, #0
   318e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   318e6:	bfbc      	itt	lt
   318e8:	461d      	movlt	r5, r3
   318ea:	232d      	movlt	r3, #45	; 0x2d
   318ec:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   318f0:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   318f4:	f028 0a20 	bic.w	sl, r8, #32
   318f8:	7013      	strb	r3, [r2, #0]
   318fa:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   318fe:	d005      	beq.n	3190c <__cvt+0x3e>
   31900:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   31904:	d100      	bne.n	31908 <__cvt+0x3a>
   31906:	3601      	adds	r6, #1
   31908:	2302      	movs	r3, #2
   3190a:	e000      	b.n	3190e <__cvt+0x40>
   3190c:	2303      	movs	r3, #3
   3190e:	aa07      	add	r2, sp, #28
   31910:	9204      	str	r2, [sp, #16]
   31912:	aa06      	add	r2, sp, #24
   31914:	e9cd 3600 	strd	r3, r6, [sp]
   31918:	e9cd 9202 	strd	r9, r2, [sp, #8]
   3191c:	462b      	mov	r3, r5
   3191e:	4622      	mov	r2, r4
   31920:	f7d9 f87e 	bl	aa20 <_dtoa_r>
   31924:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   31928:	4607      	mov	r7, r0
   3192a:	d119      	bne.n	31960 <__cvt+0x92>
   3192c:	f01b 0f01 	tst.w	fp, #1
   31930:	d00e      	beq.n	31950 <__cvt+0x82>
   31932:	eb07 0806 	add.w	r8, r7, r6
   31936:	2200      	movs	r2, #0
   31938:	2300      	movs	r3, #0
   3193a:	4620      	mov	r0, r4
   3193c:	4629      	mov	r1, r5
   3193e:	f7d7 fb8d 	bl	905c <__aeabi_dcmpeq>
   31942:	b108      	cbz	r0, 31948 <__cvt+0x7a>
   31944:	f8cd 801c 	str.w	r8, [sp, #28]
   31948:	2230      	movs	r2, #48	; 0x30
   3194a:	9b07      	ldr	r3, [sp, #28]
   3194c:	4543      	cmp	r3, r8
   3194e:	d321      	bcc.n	31994 <__cvt+0xc6>
   31950:	9b07      	ldr	r3, [sp, #28]
   31952:	4638      	mov	r0, r7
   31954:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   31956:	1bdb      	subs	r3, r3, r7
   31958:	6013      	str	r3, [r2, #0]
   3195a:	b009      	add	sp, #36	; 0x24
   3195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31960:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   31964:	d0e2      	beq.n	3192c <__cvt+0x5e>
   31966:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3196a:	eb00 0806 	add.w	r8, r0, r6
   3196e:	d1e2      	bne.n	31936 <__cvt+0x68>
   31970:	7803      	ldrb	r3, [r0, #0]
   31972:	2b30      	cmp	r3, #48	; 0x30
   31974:	d10a      	bne.n	3198c <__cvt+0xbe>
   31976:	2200      	movs	r2, #0
   31978:	2300      	movs	r3, #0
   3197a:	4620      	mov	r0, r4
   3197c:	4629      	mov	r1, r5
   3197e:	f7d7 fb6d 	bl	905c <__aeabi_dcmpeq>
   31982:	b918      	cbnz	r0, 3198c <__cvt+0xbe>
   31984:	f1c6 0601 	rsb	r6, r6, #1
   31988:	f8c9 6000 	str.w	r6, [r9]
   3198c:	f8d9 3000 	ldr.w	r3, [r9]
   31990:	4498      	add	r8, r3
   31992:	e7d0      	b.n	31936 <__cvt+0x68>
   31994:	1c59      	adds	r1, r3, #1
   31996:	9107      	str	r1, [sp, #28]
   31998:	701a      	strb	r2, [r3, #0]
   3199a:	e7d6      	b.n	3194a <__cvt+0x7c>

0003199c <__exponent>:
   3199c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3199e:	2900      	cmp	r1, #0
   319a0:	7002      	strb	r2, [r0, #0]
   319a2:	bfba      	itte	lt
   319a4:	4249      	neglt	r1, r1
   319a6:	232d      	movlt	r3, #45	; 0x2d
   319a8:	232b      	movge	r3, #43	; 0x2b
   319aa:	2909      	cmp	r1, #9
   319ac:	7043      	strb	r3, [r0, #1]
   319ae:	dd28      	ble.n	31a02 <__exponent+0x66>
   319b0:	f10d 0307 	add.w	r3, sp, #7
   319b4:	270a      	movs	r7, #10
   319b6:	461d      	mov	r5, r3
   319b8:	461a      	mov	r2, r3
   319ba:	3b01      	subs	r3, #1
   319bc:	fbb1 f6f7 	udiv	r6, r1, r7
   319c0:	fb07 1416 	mls	r4, r7, r6, r1
   319c4:	3430      	adds	r4, #48	; 0x30
   319c6:	f802 4c01 	strb.w	r4, [r2, #-1]
   319ca:	460c      	mov	r4, r1
   319cc:	4631      	mov	r1, r6
   319ce:	2c63      	cmp	r4, #99	; 0x63
   319d0:	dcf2      	bgt.n	319b8 <__exponent+0x1c>
   319d2:	3130      	adds	r1, #48	; 0x30
   319d4:	1e94      	subs	r4, r2, #2
   319d6:	f803 1c01 	strb.w	r1, [r3, #-1]
   319da:	1c41      	adds	r1, r0, #1
   319dc:	4623      	mov	r3, r4
   319de:	42ab      	cmp	r3, r5
   319e0:	d30a      	bcc.n	319f8 <__exponent+0x5c>
   319e2:	f10d 0309 	add.w	r3, sp, #9
   319e6:	1a9b      	subs	r3, r3, r2
   319e8:	42ac      	cmp	r4, r5
   319ea:	bf88      	it	hi
   319ec:	2300      	movhi	r3, #0
   319ee:	3302      	adds	r3, #2
   319f0:	4403      	add	r3, r0
   319f2:	1a18      	subs	r0, r3, r0
   319f4:	b003      	add	sp, #12
   319f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   319f8:	f813 6b01 	ldrb.w	r6, [r3], #1
   319fc:	f801 6f01 	strb.w	r6, [r1, #1]!
   31a00:	e7ed      	b.n	319de <__exponent+0x42>
   31a02:	2330      	movs	r3, #48	; 0x30
   31a04:	3130      	adds	r1, #48	; 0x30
   31a06:	7083      	strb	r3, [r0, #2]
   31a08:	1d03      	adds	r3, r0, #4
   31a0a:	70c1      	strb	r1, [r0, #3]
   31a0c:	e7f1      	b.n	319f2 <__exponent+0x56>

00031a0e <_printf_common>:
   31a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31a12:	4616      	mov	r6, r2
   31a14:	4698      	mov	r8, r3
   31a16:	688a      	ldr	r2, [r1, #8]
   31a18:	4607      	mov	r7, r0
   31a1a:	690b      	ldr	r3, [r1, #16]
   31a1c:	460c      	mov	r4, r1
   31a1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   31a22:	4293      	cmp	r3, r2
   31a24:	bfb8      	it	lt
   31a26:	4613      	movlt	r3, r2
   31a28:	6033      	str	r3, [r6, #0]
   31a2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   31a2e:	b10a      	cbz	r2, 31a34 <_printf_common+0x26>
   31a30:	3301      	adds	r3, #1
   31a32:	6033      	str	r3, [r6, #0]
   31a34:	6823      	ldr	r3, [r4, #0]
   31a36:	0699      	lsls	r1, r3, #26
   31a38:	bf42      	ittt	mi
   31a3a:	6833      	ldrmi	r3, [r6, #0]
   31a3c:	3302      	addmi	r3, #2
   31a3e:	6033      	strmi	r3, [r6, #0]
   31a40:	6825      	ldr	r5, [r4, #0]
   31a42:	f015 0506 	ands.w	r5, r5, #6
   31a46:	d106      	bne.n	31a56 <_printf_common+0x48>
   31a48:	f104 0a19 	add.w	sl, r4, #25
   31a4c:	68e3      	ldr	r3, [r4, #12]
   31a4e:	6832      	ldr	r2, [r6, #0]
   31a50:	1a9b      	subs	r3, r3, r2
   31a52:	42ab      	cmp	r3, r5
   31a54:	dc2b      	bgt.n	31aae <_printf_common+0xa0>
   31a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   31a5a:	6822      	ldr	r2, [r4, #0]
   31a5c:	3b00      	subs	r3, #0
   31a5e:	bf18      	it	ne
   31a60:	2301      	movne	r3, #1
   31a62:	0692      	lsls	r2, r2, #26
   31a64:	d430      	bmi.n	31ac8 <_printf_common+0xba>
   31a66:	f104 0243 	add.w	r2, r4, #67	; 0x43
   31a6a:	4641      	mov	r1, r8
   31a6c:	4638      	mov	r0, r7
   31a6e:	47c8      	blx	r9
   31a70:	3001      	adds	r0, #1
   31a72:	d023      	beq.n	31abc <_printf_common+0xae>
   31a74:	6823      	ldr	r3, [r4, #0]
   31a76:	341a      	adds	r4, #26
   31a78:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   31a7c:	f003 0306 	and.w	r3, r3, #6
   31a80:	2b04      	cmp	r3, #4
   31a82:	bf0a      	itet	eq
   31a84:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   31a88:	2500      	movne	r5, #0
   31a8a:	6833      	ldreq	r3, [r6, #0]
   31a8c:	f04f 0600 	mov.w	r6, #0
   31a90:	bf08      	it	eq
   31a92:	1aed      	subeq	r5, r5, r3
   31a94:	f854 3c12 	ldr.w	r3, [r4, #-18]
   31a98:	bf08      	it	eq
   31a9a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   31a9e:	4293      	cmp	r3, r2
   31aa0:	bfc4      	itt	gt
   31aa2:	1a9b      	subgt	r3, r3, r2
   31aa4:	18ed      	addgt	r5, r5, r3
   31aa6:	42b5      	cmp	r5, r6
   31aa8:	d11a      	bne.n	31ae0 <_printf_common+0xd2>
   31aaa:	2000      	movs	r0, #0
   31aac:	e008      	b.n	31ac0 <_printf_common+0xb2>
   31aae:	2301      	movs	r3, #1
   31ab0:	4652      	mov	r2, sl
   31ab2:	4641      	mov	r1, r8
   31ab4:	4638      	mov	r0, r7
   31ab6:	47c8      	blx	r9
   31ab8:	3001      	adds	r0, #1
   31aba:	d103      	bne.n	31ac4 <_printf_common+0xb6>
   31abc:	f04f 30ff 	mov.w	r0, #4294967295
   31ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31ac4:	3501      	adds	r5, #1
   31ac6:	e7c1      	b.n	31a4c <_printf_common+0x3e>
   31ac8:	18e1      	adds	r1, r4, r3
   31aca:	1c5a      	adds	r2, r3, #1
   31acc:	2030      	movs	r0, #48	; 0x30
   31ace:	3302      	adds	r3, #2
   31ad0:	4422      	add	r2, r4
   31ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   31ad6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   31ada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   31ade:	e7c2      	b.n	31a66 <_printf_common+0x58>
   31ae0:	2301      	movs	r3, #1
   31ae2:	4622      	mov	r2, r4
   31ae4:	4641      	mov	r1, r8
   31ae6:	4638      	mov	r0, r7
   31ae8:	47c8      	blx	r9
   31aea:	3001      	adds	r0, #1
   31aec:	d0e6      	beq.n	31abc <_printf_common+0xae>
   31aee:	3601      	adds	r6, #1
   31af0:	e7d9      	b.n	31aa6 <_printf_common+0x98>

00031af2 <__sprintf_chk>:
   31af2:	b408      	push	{r3}
   31af4:	b517      	push	{r0, r1, r2, r4, lr}
   31af6:	ab05      	add	r3, sp, #20
   31af8:	1e14      	subs	r4, r2, #0
   31afa:	f853 1b04 	ldr.w	r1, [r3], #4
   31afe:	9301      	str	r3, [sp, #4]
   31b00:	da07      	bge.n	31b12 <__sprintf_chk+0x20>
   31b02:	461a      	mov	r2, r3
   31b04:	f7f6 fb04 	bl	28110 <vsiprintf>
   31b08:	b003      	add	sp, #12
   31b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31b0e:	b001      	add	sp, #4
   31b10:	4770      	bx	lr
   31b12:	460a      	mov	r2, r1
   31b14:	4621      	mov	r1, r4
   31b16:	f7f6 fad7 	bl	280c8 <vsniprintf>
   31b1a:	2800      	cmp	r0, #0
   31b1c:	dbf4      	blt.n	31b08 <__sprintf_chk+0x16>
   31b1e:	42a0      	cmp	r0, r4
   31b20:	d3f2      	bcc.n	31b08 <__sprintf_chk+0x16>
   31b22:	f7e0 f9d7 	bl	11ed4 <__chk_fail>

00031b26 <strchr>:
   31b26:	b2c9      	uxtb	r1, r1
   31b28:	4603      	mov	r3, r0
   31b2a:	4618      	mov	r0, r3
   31b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
   31b30:	b112      	cbz	r2, 31b38 <_flash_used+0xc>
   31b32:	428a      	cmp	r2, r1
   31b34:	d1f9      	bne.n	31b2a <strchr+0x4>
   31b36:	4770      	bx	lr
   31b38:	2900      	cmp	r1, #0
   31b3a:	bf18      	it	ne
   31b3c:	2000      	movne	r0, #0
   31b3e:	4770      	bx	lr

00031b40 <strcpy>:
   31b40:	4603      	mov	r3, r0
   31b42:	f811 2b01 	ldrb.w	r2, [r1], #1
   31b46:	f803 2b01 	strb.w	r2, [r3], #1
   31b4a:	2a00      	cmp	r2, #0
   31b4c:	d1f9      	bne.n	31b42 <strcpy+0x2>
   31b4e:	4770      	bx	lr

00031b50 <strncmp>:
   31b50:	b510      	push	{r4, lr}
   31b52:	b16a      	cbz	r2, 31b70 <strncmp+0x20>
   31b54:	3901      	subs	r1, #1
   31b56:	1884      	adds	r4, r0, r2
   31b58:	f810 2b01 	ldrb.w	r2, [r0], #1
   31b5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   31b60:	429a      	cmp	r2, r3
   31b62:	d103      	bne.n	31b6c <strncmp+0x1c>
   31b64:	42a0      	cmp	r0, r4
   31b66:	d001      	beq.n	31b6c <strncmp+0x1c>
   31b68:	2a00      	cmp	r2, #0
   31b6a:	d1f5      	bne.n	31b58 <strncmp+0x8>
   31b6c:	1ad0      	subs	r0, r2, r3
   31b6e:	bd10      	pop	{r4, pc}
   31b70:	4610      	mov	r0, r2
   31b72:	e7fc      	b.n	31b6e <strncmp+0x1e>

00031b74 <strncpy>:
   31b74:	3901      	subs	r1, #1
   31b76:	4603      	mov	r3, r0
   31b78:	b510      	push	{r4, lr}
   31b7a:	b132      	cbz	r2, 31b8a <strncpy+0x16>
   31b7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   31b80:	3a01      	subs	r2, #1
   31b82:	f803 4b01 	strb.w	r4, [r3], #1
   31b86:	2c00      	cmp	r4, #0
   31b88:	d1f7      	bne.n	31b7a <strncpy+0x6>
   31b8a:	441a      	add	r2, r3
   31b8c:	2100      	movs	r1, #0
   31b8e:	4293      	cmp	r3, r2
   31b90:	d100      	bne.n	31b94 <strncpy+0x20>
   31b92:	bd10      	pop	{r4, pc}
   31b94:	f803 1b01 	strb.w	r1, [r3], #1
   31b98:	e7f9      	b.n	31b8e <strncpy+0x1a>

00031b9a <strnlen>:
   31b9a:	4602      	mov	r2, r0
   31b9c:	4401      	add	r1, r0
   31b9e:	b510      	push	{r4, lr}
   31ba0:	428a      	cmp	r2, r1
   31ba2:	4613      	mov	r3, r2
   31ba4:	d003      	beq.n	31bae <strnlen+0x14>
   31ba6:	781c      	ldrb	r4, [r3, #0]
   31ba8:	3201      	adds	r2, #1
   31baa:	2c00      	cmp	r4, #0
   31bac:	d1f8      	bne.n	31ba0 <strnlen+0x6>
   31bae:	1a18      	subs	r0, r3, r0
   31bb0:	bd10      	pop	{r4, pc}

00031bb2 <strstr>:
   31bb2:	780a      	ldrb	r2, [r1, #0]
   31bb4:	b570      	push	{r4, r5, r6, lr}
   31bb6:	b96a      	cbnz	r2, 31bd4 <strstr+0x22>
   31bb8:	bd70      	pop	{r4, r5, r6, pc}
   31bba:	429a      	cmp	r2, r3
   31bbc:	d109      	bne.n	31bd2 <strstr+0x20>
   31bbe:	460c      	mov	r4, r1
   31bc0:	4605      	mov	r5, r0
   31bc2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   31bc6:	2b00      	cmp	r3, #0
   31bc8:	d0f6      	beq.n	31bb8 <strstr+0x6>
   31bca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   31bce:	429e      	cmp	r6, r3
   31bd0:	d0f7      	beq.n	31bc2 <strstr+0x10>
   31bd2:	3001      	adds	r0, #1
   31bd4:	7803      	ldrb	r3, [r0, #0]
   31bd6:	2b00      	cmp	r3, #0
   31bd8:	d1ef      	bne.n	31bba <strstr+0x8>
   31bda:	4618      	mov	r0, r3
   31bdc:	e7ec      	b.n	31bb8 <strstr+0x6>

00031bde <sulp>:
   31bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31be2:	4690      	mov	r8, r2
   31be4:	460f      	mov	r7, r1
   31be6:	f7f7 f91d 	bl	28e24 <__ulp>
   31bea:	4604      	mov	r4, r0
   31bec:	460d      	mov	r5, r1
   31bee:	f1b8 0f00 	cmp.w	r8, #0
   31bf2:	d011      	beq.n	31c18 <sulp+0x3a>
   31bf4:	f3c7 530a 	ubfx	r3, r7, #20, #11
   31bf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   31bfc:	2b00      	cmp	r3, #0
   31bfe:	dd0b      	ble.n	31c18 <sulp+0x3a>
   31c00:	051b      	lsls	r3, r3, #20
   31c02:	2400      	movs	r4, #0
   31c04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   31c08:	4622      	mov	r2, r4
   31c0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   31c0e:	462b      	mov	r3, r5
   31c10:	f7d6 fc5e 	bl	84d0 <__aeabi_dmul>
   31c14:	4604      	mov	r4, r0
   31c16:	460d      	mov	r5, r1
   31c18:	4620      	mov	r0, r4
   31c1a:	4629      	mov	r1, r5
   31c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00031c20 <__strtok_r>:
   31c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   31c22:	4604      	mov	r4, r0
   31c24:	b908      	cbnz	r0, 31c2a <__strtok_r+0xa>
   31c26:	6814      	ldr	r4, [r2, #0]
   31c28:	b144      	cbz	r4, 31c3c <__strtok_r+0x1c>
   31c2a:	4620      	mov	r0, r4
   31c2c:	460f      	mov	r7, r1
   31c2e:	f814 5b01 	ldrb.w	r5, [r4], #1
   31c32:	f817 6b01 	ldrb.w	r6, [r7], #1
   31c36:	b91e      	cbnz	r6, 31c40 <__strtok_r+0x20>
   31c38:	b965      	cbnz	r5, 31c54 <__strtok_r+0x34>
   31c3a:	6015      	str	r5, [r2, #0]
   31c3c:	2000      	movs	r0, #0
   31c3e:	e005      	b.n	31c4c <__strtok_r+0x2c>
   31c40:	42b5      	cmp	r5, r6
   31c42:	d1f6      	bne.n	31c32 <__strtok_r+0x12>
   31c44:	2b00      	cmp	r3, #0
   31c46:	d1f0      	bne.n	31c2a <__strtok_r+0xa>
   31c48:	6014      	str	r4, [r2, #0]
   31c4a:	7003      	strb	r3, [r0, #0]
   31c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31c4e:	461c      	mov	r4, r3
   31c50:	e00c      	b.n	31c6c <__strtok_r+0x4c>
   31c52:	b915      	cbnz	r5, 31c5a <__strtok_r+0x3a>
   31c54:	f814 3b01 	ldrb.w	r3, [r4], #1
   31c58:	460e      	mov	r6, r1
   31c5a:	f816 5b01 	ldrb.w	r5, [r6], #1
   31c5e:	42ab      	cmp	r3, r5
   31c60:	d1f7      	bne.n	31c52 <__strtok_r+0x32>
   31c62:	2b00      	cmp	r3, #0
   31c64:	d0f3      	beq.n	31c4e <__strtok_r+0x2e>
   31c66:	2300      	movs	r3, #0
   31c68:	f804 3c01 	strb.w	r3, [r4, #-1]
   31c6c:	6014      	str	r4, [r2, #0]
   31c6e:	e7ed      	b.n	31c4c <__strtok_r+0x2c>

00031c70 <_strtol_r>:
   31c70:	f7f5 bede 	b.w	27a30 <_strtol_l.constprop.0>

00031c74 <_strtoul_r>:
   31c74:	f7f5 bf64 	b.w	27b40 <_strtoul_l.constprop.0>

00031c78 <_vsniprintf_r>:
   31c78:	b530      	push	{r4, r5, lr}
   31c7a:	4614      	mov	r4, r2
   31c7c:	b09b      	sub	sp, #108	; 0x6c
   31c7e:	4605      	mov	r5, r0
   31c80:	461a      	mov	r2, r3
   31c82:	2c00      	cmp	r4, #0
   31c84:	da05      	bge.n	31c92 <_vsniprintf_r+0x1a>
   31c86:	238b      	movs	r3, #139	; 0x8b
   31c88:	6003      	str	r3, [r0, #0]
   31c8a:	f04f 30ff 	mov.w	r0, #4294967295
   31c8e:	b01b      	add	sp, #108	; 0x6c
   31c90:	bd30      	pop	{r4, r5, pc}
   31c92:	f44f 7302 	mov.w	r3, #520	; 0x208
   31c96:	9100      	str	r1, [sp, #0]
   31c98:	9104      	str	r1, [sp, #16]
   31c9a:	4669      	mov	r1, sp
   31c9c:	f8ad 300c 	strh.w	r3, [sp, #12]
   31ca0:	bf14      	ite	ne
   31ca2:	f104 33ff 	addne.w	r3, r4, #4294967295
   31ca6:	4623      	moveq	r3, r4
   31ca8:	9302      	str	r3, [sp, #8]
   31caa:	9305      	str	r3, [sp, #20]
   31cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31cb0:	f8ad 300e 	strh.w	r3, [sp, #14]
   31cb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   31cb6:	f7f7 f977 	bl	28fa8 <_svfiprintf_r>
   31cba:	1c43      	adds	r3, r0, #1
   31cbc:	bfbc      	itt	lt
   31cbe:	238b      	movlt	r3, #139	; 0x8b
   31cc0:	602b      	strlt	r3, [r5, #0]
   31cc2:	2c00      	cmp	r4, #0
   31cc4:	d0e3      	beq.n	31c8e <_vsniprintf_r+0x16>
   31cc6:	9b00      	ldr	r3, [sp, #0]
   31cc8:	2200      	movs	r2, #0
   31cca:	701a      	strb	r2, [r3, #0]
   31ccc:	e7df      	b.n	31c8e <_vsniprintf_r+0x16>

00031cce <div>:
   31cce:	b510      	push	{r4, lr}
   31cd0:	fb91 f4f2 	sdiv	r4, r1, r2
   31cd4:	fb02 1114 	mls	r1, r2, r4, r1
   31cd8:	6004      	str	r4, [r0, #0]
   31cda:	6041      	str	r1, [r0, #4]
   31cdc:	bd10      	pop	{r4, pc}

00031cde <quorem>:
   31cde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ce2:	6903      	ldr	r3, [r0, #16]
   31ce4:	4607      	mov	r7, r0
   31ce6:	690c      	ldr	r4, [r1, #16]
   31ce8:	42a3      	cmp	r3, r4
   31cea:	f2c0 8083 	blt.w	31df4 <quorem+0x116>
   31cee:	3c01      	subs	r4, #1
   31cf0:	f100 0514 	add.w	r5, r0, #20
   31cf4:	f101 0814 	add.w	r8, r1, #20
   31cf8:	00a3      	lsls	r3, r4, #2
   31cfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   31cfe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   31d02:	9300      	str	r3, [sp, #0]
   31d04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   31d08:	9301      	str	r3, [sp, #4]
   31d0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   31d0e:	3301      	adds	r3, #1
   31d10:	429a      	cmp	r2, r3
   31d12:	fbb2 f6f3 	udiv	r6, r2, r3
   31d16:	d331      	bcc.n	31d7c <quorem+0x9e>
   31d18:	f04f 0a00 	mov.w	sl, #0
   31d1c:	46c4      	mov	ip, r8
   31d1e:	46ae      	mov	lr, r5
   31d20:	46d3      	mov	fp, sl
   31d22:	f85c 3b04 	ldr.w	r3, [ip], #4
   31d26:	b298      	uxth	r0, r3
   31d28:	45e1      	cmp	r9, ip
   31d2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   31d2e:	fb06 a000 	mla	r0, r6, r0, sl
   31d32:	ea4f 4210 	mov.w	r2, r0, lsr #16
   31d36:	b280      	uxth	r0, r0
   31d38:	fb06 2303 	mla	r3, r6, r3, r2
   31d3c:	f8de 2000 	ldr.w	r2, [lr]
   31d40:	b292      	uxth	r2, r2
   31d42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   31d46:	eba2 0200 	sub.w	r2, r2, r0
   31d4a:	b29b      	uxth	r3, r3
   31d4c:	f8de 0000 	ldr.w	r0, [lr]
   31d50:	445a      	add	r2, fp
   31d52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   31d56:	b292      	uxth	r2, r2
   31d58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   31d5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   31d60:	ea4f 4b23 	mov.w	fp, r3, asr #16
   31d64:	f84e 2b04 	str.w	r2, [lr], #4
   31d68:	d2db      	bcs.n	31d22 <quorem+0x44>
   31d6a:	9b00      	ldr	r3, [sp, #0]
   31d6c:	58eb      	ldr	r3, [r5, r3]
   31d6e:	b92b      	cbnz	r3, 31d7c <quorem+0x9e>
   31d70:	9b01      	ldr	r3, [sp, #4]
   31d72:	3b04      	subs	r3, #4
   31d74:	429d      	cmp	r5, r3
   31d76:	461a      	mov	r2, r3
   31d78:	d330      	bcc.n	31ddc <quorem+0xfe>
   31d7a:	613c      	str	r4, [r7, #16]
   31d7c:	4638      	mov	r0, r7
   31d7e:	f000 fa0d 	bl	3219c <__mcmp>
   31d82:	2800      	cmp	r0, #0
   31d84:	db26      	blt.n	31dd4 <quorem+0xf6>
   31d86:	4629      	mov	r1, r5
   31d88:	2000      	movs	r0, #0
   31d8a:	f858 2b04 	ldr.w	r2, [r8], #4
   31d8e:	f8d1 c000 	ldr.w	ip, [r1]
   31d92:	fa1f fe82 	uxth.w	lr, r2
   31d96:	45c1      	cmp	r9, r8
   31d98:	fa1f f38c 	uxth.w	r3, ip
   31d9c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   31da0:	eba3 030e 	sub.w	r3, r3, lr
   31da4:	4403      	add	r3, r0
   31da6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   31daa:	b29b      	uxth	r3, r3
   31dac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   31db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   31db4:	ea4f 4022 	mov.w	r0, r2, asr #16
   31db8:	f841 3b04 	str.w	r3, [r1], #4
   31dbc:	d2e5      	bcs.n	31d8a <quorem+0xac>
   31dbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   31dc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   31dc6:	b922      	cbnz	r2, 31dd2 <quorem+0xf4>
   31dc8:	3b04      	subs	r3, #4
   31dca:	429d      	cmp	r5, r3
   31dcc:	461a      	mov	r2, r3
   31dce:	d30b      	bcc.n	31de8 <quorem+0x10a>
   31dd0:	613c      	str	r4, [r7, #16]
   31dd2:	3601      	adds	r6, #1
   31dd4:	4630      	mov	r0, r6
   31dd6:	b003      	add	sp, #12
   31dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ddc:	6812      	ldr	r2, [r2, #0]
   31dde:	3b04      	subs	r3, #4
   31de0:	2a00      	cmp	r2, #0
   31de2:	d1ca      	bne.n	31d7a <quorem+0x9c>
   31de4:	3c01      	subs	r4, #1
   31de6:	e7c5      	b.n	31d74 <quorem+0x96>
   31de8:	6812      	ldr	r2, [r2, #0]
   31dea:	3b04      	subs	r3, #4
   31dec:	2a00      	cmp	r2, #0
   31dee:	d1ef      	bne.n	31dd0 <quorem+0xf2>
   31df0:	3c01      	subs	r4, #1
   31df2:	e7ea      	b.n	31dca <quorem+0xec>
   31df4:	2000      	movs	r0, #0
   31df6:	e7ee      	b.n	31dd6 <quorem+0xf8>

00031df8 <__sfmoreglue>:
   31df8:	b570      	push	{r4, r5, r6, lr}
   31dfa:	2368      	movs	r3, #104	; 0x68
   31dfc:	1e4d      	subs	r5, r1, #1
   31dfe:	460e      	mov	r6, r1
   31e00:	435d      	muls	r5, r3
   31e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
   31e06:	f7f5 f9ed 	bl	271e4 <_malloc_r>
   31e0a:	4604      	mov	r4, r0
   31e0c:	b140      	cbz	r0, 31e20 <__sfmoreglue+0x28>
   31e0e:	2100      	movs	r1, #0
   31e10:	f105 0268 	add.w	r2, r5, #104	; 0x68
   31e14:	e9c0 1600 	strd	r1, r6, [r0]
   31e18:	300c      	adds	r0, #12
   31e1a:	60a0      	str	r0, [r4, #8]
   31e1c:	f7ff fd41 	bl	318a2 <memset>
   31e20:	4620      	mov	r0, r4
   31e22:	bd70      	pop	{r4, r5, r6, pc}

00031e24 <_fwalk_reent>:
   31e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31e28:	4606      	mov	r6, r0
   31e2a:	4688      	mov	r8, r1
   31e2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   31e30:	2700      	movs	r7, #0
   31e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   31e36:	f1b9 0901 	subs.w	r9, r9, #1
   31e3a:	d505      	bpl.n	31e48 <_fwalk_reent+0x24>
   31e3c:	6824      	ldr	r4, [r4, #0]
   31e3e:	2c00      	cmp	r4, #0
   31e40:	d1f7      	bne.n	31e32 <_fwalk_reent+0xe>
   31e42:	4638      	mov	r0, r7
   31e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   31e48:	89ab      	ldrh	r3, [r5, #12]
   31e4a:	2b01      	cmp	r3, #1
   31e4c:	d907      	bls.n	31e5e <_fwalk_reent+0x3a>
   31e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   31e52:	3301      	adds	r3, #1
   31e54:	d003      	beq.n	31e5e <_fwalk_reent+0x3a>
   31e56:	4629      	mov	r1, r5
   31e58:	4630      	mov	r0, r6
   31e5a:	47c0      	blx	r8
   31e5c:	4307      	orrs	r7, r0
   31e5e:	3568      	adds	r5, #104	; 0x68
   31e60:	e7e9      	b.n	31e36 <_fwalk_reent+0x12>

00031e62 <rshift>:
   31e62:	6903      	ldr	r3, [r0, #16]
   31e64:	114a      	asrs	r2, r1, #5
   31e66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   31e6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31e6e:	dc04      	bgt.n	31e7a <rshift+0x18>
   31e70:	2300      	movs	r3, #0
   31e72:	6103      	str	r3, [r0, #16]
   31e74:	2300      	movs	r3, #0
   31e76:	6143      	str	r3, [r0, #20]
   31e78:	e031      	b.n	31ede <rshift+0x7c>
   31e7a:	f100 0414 	add.w	r4, r0, #20
   31e7e:	f011 011f 	ands.w	r1, r1, #31
   31e82:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   31e86:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   31e8a:	d10c      	bne.n	31ea6 <rshift+0x44>
   31e8c:	f100 0710 	add.w	r7, r0, #16
   31e90:	4629      	mov	r1, r5
   31e92:	42b1      	cmp	r1, r6
   31e94:	d331      	bcc.n	31efa <rshift+0x98>
   31e96:	1a9b      	subs	r3, r3, r2
   31e98:	1eea      	subs	r2, r5, #3
   31e9a:	009b      	lsls	r3, r3, #2
   31e9c:	4296      	cmp	r6, r2
   31e9e:	bf38      	it	cc
   31ea0:	2300      	movcc	r3, #0
   31ea2:	4423      	add	r3, r4
   31ea4:	e015      	b.n	31ed2 <rshift+0x70>
   31ea6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   31eaa:	f1c1 0820 	rsb	r8, r1, #32
   31eae:	f105 0e04 	add.w	lr, r5, #4
   31eb2:	46a1      	mov	r9, r4
   31eb4:	40cf      	lsrs	r7, r1
   31eb6:	4576      	cmp	r6, lr
   31eb8:	46f4      	mov	ip, lr
   31eba:	d812      	bhi.n	31ee2 <rshift+0x80>
   31ebc:	1a9a      	subs	r2, r3, r2
   31ebe:	3501      	adds	r5, #1
   31ec0:	0092      	lsls	r2, r2, #2
   31ec2:	3a04      	subs	r2, #4
   31ec4:	42ae      	cmp	r6, r5
   31ec6:	bf38      	it	cc
   31ec8:	2200      	movcc	r2, #0
   31eca:	18a3      	adds	r3, r4, r2
   31ecc:	50a7      	str	r7, [r4, r2]
   31ece:	b107      	cbz	r7, 31ed2 <rshift+0x70>
   31ed0:	3304      	adds	r3, #4
   31ed2:	1b1a      	subs	r2, r3, r4
   31ed4:	42a3      	cmp	r3, r4
   31ed6:	ea4f 02a2 	mov.w	r2, r2, asr #2
   31eda:	6102      	str	r2, [r0, #16]
   31edc:	d0ca      	beq.n	31e74 <rshift+0x12>
   31ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31ee2:	f8dc c000 	ldr.w	ip, [ip]
   31ee6:	fa0c fc08 	lsl.w	ip, ip, r8
   31eea:	ea4c 0707 	orr.w	r7, ip, r7
   31eee:	f849 7b04 	str.w	r7, [r9], #4
   31ef2:	f85e 7b04 	ldr.w	r7, [lr], #4
   31ef6:	40cf      	lsrs	r7, r1
   31ef8:	e7dd      	b.n	31eb6 <rshift+0x54>
   31efa:	f851 cb04 	ldr.w	ip, [r1], #4
   31efe:	f847 cf04 	str.w	ip, [r7, #4]!
   31f02:	e7c6      	b.n	31e92 <rshift+0x30>

00031f04 <__hexdig_fun>:
   31f04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   31f08:	2b09      	cmp	r3, #9
   31f0a:	d802      	bhi.n	31f12 <__hexdig_fun+0xe>
   31f0c:	3820      	subs	r0, #32
   31f0e:	b2c0      	uxtb	r0, r0
   31f10:	4770      	bx	lr
   31f12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   31f16:	2b05      	cmp	r3, #5
   31f18:	d801      	bhi.n	31f1e <__hexdig_fun+0x1a>
   31f1a:	3847      	subs	r0, #71	; 0x47
   31f1c:	e7f7      	b.n	31f0e <__hexdig_fun+0xa>
   31f1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   31f22:	2b05      	cmp	r3, #5
   31f24:	d801      	bhi.n	31f2a <__hexdig_fun+0x26>
   31f26:	3827      	subs	r0, #39	; 0x27
   31f28:	e7f1      	b.n	31f0e <__hexdig_fun+0xa>
   31f2a:	2000      	movs	r0, #0
   31f2c:	4770      	bx	lr

00031f2e <L_shift>:
   31f2e:	f1c2 0208 	rsb	r2, r2, #8
   31f32:	0092      	lsls	r2, r2, #2
   31f34:	b570      	push	{r4, r5, r6, lr}
   31f36:	f1c2 0620 	rsb	r6, r2, #32
   31f3a:	6843      	ldr	r3, [r0, #4]
   31f3c:	6804      	ldr	r4, [r0, #0]
   31f3e:	fa03 f506 	lsl.w	r5, r3, r6
   31f42:	40d3      	lsrs	r3, r2
   31f44:	432c      	orrs	r4, r5
   31f46:	6004      	str	r4, [r0, #0]
   31f48:	f840 3f04 	str.w	r3, [r0, #4]!
   31f4c:	4288      	cmp	r0, r1
   31f4e:	d3f4      	bcc.n	31f3a <L_shift+0xc>
   31f50:	bd70      	pop	{r4, r5, r6, pc}

00031f52 <__match>:
   31f52:	6803      	ldr	r3, [r0, #0]
   31f54:	3301      	adds	r3, #1
   31f56:	b530      	push	{r4, r5, lr}
   31f58:	f811 4b01 	ldrb.w	r4, [r1], #1
   31f5c:	b914      	cbnz	r4, 31f64 <__match+0x12>
   31f5e:	6003      	str	r3, [r0, #0]
   31f60:	2001      	movs	r0, #1
   31f62:	bd30      	pop	{r4, r5, pc}
   31f64:	f813 2b01 	ldrb.w	r2, [r3], #1
   31f68:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   31f6c:	2d19      	cmp	r5, #25
   31f6e:	bf98      	it	ls
   31f70:	3220      	addls	r2, #32
   31f72:	42a2      	cmp	r2, r4
   31f74:	d0f0      	beq.n	31f58 <__match+0x6>
   31f76:	2000      	movs	r0, #0
   31f78:	e7f3      	b.n	31f62 <__match+0x10>

00031f7a <__hexnan>:
   31f7a:	680b      	ldr	r3, [r1, #0]
   31f7c:	6801      	ldr	r1, [r0, #0]
   31f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31f82:	115e      	asrs	r6, r3, #5
   31f84:	f013 031f 	ands.w	r3, r3, #31
   31f88:	f04f 0500 	mov.w	r5, #0
   31f8c:	b087      	sub	sp, #28
   31f8e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   31f92:	4682      	mov	sl, r0
   31f94:	4690      	mov	r8, r2
   31f96:	46ab      	mov	fp, r5
   31f98:	bf18      	it	ne
   31f9a:	3604      	addne	r6, #4
   31f9c:	9301      	str	r3, [sp, #4]
   31f9e:	9502      	str	r5, [sp, #8]
   31fa0:	1f37      	subs	r7, r6, #4
   31fa2:	f846 5c04 	str.w	r5, [r6, #-4]
   31fa6:	46b9      	mov	r9, r7
   31fa8:	463c      	mov	r4, r7
   31faa:	1c4b      	adds	r3, r1, #1
   31fac:	784a      	ldrb	r2, [r1, #1]
   31fae:	9303      	str	r3, [sp, #12]
   31fb0:	b342      	cbz	r2, 32004 <__hexnan+0x8a>
   31fb2:	4610      	mov	r0, r2
   31fb4:	9105      	str	r1, [sp, #20]
   31fb6:	9204      	str	r2, [sp, #16]
   31fb8:	f7ff ffa4 	bl	31f04 <__hexdig_fun>
   31fbc:	2800      	cmp	r0, #0
   31fbe:	d151      	bne.n	32064 <__hexnan+0xea>
   31fc0:	9a04      	ldr	r2, [sp, #16]
   31fc2:	9905      	ldr	r1, [sp, #20]
   31fc4:	2a20      	cmp	r2, #32
   31fc6:	d818      	bhi.n	31ffa <__hexnan+0x80>
   31fc8:	9b02      	ldr	r3, [sp, #8]
   31fca:	459b      	cmp	fp, r3
   31fcc:	dd13      	ble.n	31ff6 <__hexnan+0x7c>
   31fce:	454c      	cmp	r4, r9
   31fd0:	d206      	bcs.n	31fe0 <__hexnan+0x66>
   31fd2:	2d07      	cmp	r5, #7
   31fd4:	dc04      	bgt.n	31fe0 <__hexnan+0x66>
   31fd6:	462a      	mov	r2, r5
   31fd8:	4649      	mov	r1, r9
   31fda:	4620      	mov	r0, r4
   31fdc:	f7ff ffa7 	bl	31f2e <L_shift>
   31fe0:	4544      	cmp	r4, r8
   31fe2:	d951      	bls.n	32088 <__hexnan+0x10e>
   31fe4:	2300      	movs	r3, #0
   31fe6:	f1a4 0904 	sub.w	r9, r4, #4
   31fea:	f8cd b008 	str.w	fp, [sp, #8]
   31fee:	f844 3c04 	str.w	r3, [r4, #-4]
   31ff2:	461d      	mov	r5, r3
   31ff4:	464c      	mov	r4, r9
   31ff6:	9903      	ldr	r1, [sp, #12]
   31ff8:	e7d7      	b.n	31faa <__hexnan+0x30>
   31ffa:	2a29      	cmp	r2, #41	; 0x29
   31ffc:	d156      	bne.n	320ac <__hexnan+0x132>
   31ffe:	3102      	adds	r1, #2
   32000:	f8ca 1000 	str.w	r1, [sl]
   32004:	f1bb 0f00 	cmp.w	fp, #0
   32008:	d050      	beq.n	320ac <__hexnan+0x132>
   3200a:	454c      	cmp	r4, r9
   3200c:	d206      	bcs.n	3201c <__hexnan+0xa2>
   3200e:	2d07      	cmp	r5, #7
   32010:	dc04      	bgt.n	3201c <__hexnan+0xa2>
   32012:	462a      	mov	r2, r5
   32014:	4649      	mov	r1, r9
   32016:	4620      	mov	r0, r4
   32018:	f7ff ff89 	bl	31f2e <L_shift>
   3201c:	4544      	cmp	r4, r8
   3201e:	d935      	bls.n	3208c <__hexnan+0x112>
   32020:	f1a8 0204 	sub.w	r2, r8, #4
   32024:	4623      	mov	r3, r4
   32026:	f853 1b04 	ldr.w	r1, [r3], #4
   3202a:	429f      	cmp	r7, r3
   3202c:	f842 1f04 	str.w	r1, [r2, #4]!
   32030:	d2f9      	bcs.n	32026 <__hexnan+0xac>
   32032:	1b3b      	subs	r3, r7, r4
   32034:	3e03      	subs	r6, #3
   32036:	3401      	adds	r4, #1
   32038:	2200      	movs	r2, #0
   3203a:	f023 0303 	bic.w	r3, r3, #3
   3203e:	3304      	adds	r3, #4
   32040:	42b4      	cmp	r4, r6
   32042:	bf88      	it	hi
   32044:	2304      	movhi	r3, #4
   32046:	4443      	add	r3, r8
   32048:	f843 2b04 	str.w	r2, [r3], #4
   3204c:	429f      	cmp	r7, r3
   3204e:	d2fb      	bcs.n	32048 <__hexnan+0xce>
   32050:	683b      	ldr	r3, [r7, #0]
   32052:	b91b      	cbnz	r3, 3205c <__hexnan+0xe2>
   32054:	4547      	cmp	r7, r8
   32056:	d127      	bne.n	320a8 <__hexnan+0x12e>
   32058:	2301      	movs	r3, #1
   3205a:	603b      	str	r3, [r7, #0]
   3205c:	2005      	movs	r0, #5
   3205e:	b007      	add	sp, #28
   32060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32064:	3501      	adds	r5, #1
   32066:	f10b 0b01 	add.w	fp, fp, #1
   3206a:	2d08      	cmp	r5, #8
   3206c:	dd05      	ble.n	3207a <__hexnan+0x100>
   3206e:	4544      	cmp	r4, r8
   32070:	d9c1      	bls.n	31ff6 <__hexnan+0x7c>
   32072:	2300      	movs	r3, #0
   32074:	3c04      	subs	r4, #4
   32076:	2501      	movs	r5, #1
   32078:	6023      	str	r3, [r4, #0]
   3207a:	6822      	ldr	r2, [r4, #0]
   3207c:	f000 000f 	and.w	r0, r0, #15
   32080:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   32084:	6020      	str	r0, [r4, #0]
   32086:	e7b6      	b.n	31ff6 <__hexnan+0x7c>
   32088:	2508      	movs	r5, #8
   3208a:	e7b4      	b.n	31ff6 <__hexnan+0x7c>
   3208c:	9b01      	ldr	r3, [sp, #4]
   3208e:	2b00      	cmp	r3, #0
   32090:	d0de      	beq.n	32050 <__hexnan+0xd6>
   32092:	f1c3 0320 	rsb	r3, r3, #32
   32096:	f04f 32ff 	mov.w	r2, #4294967295
   3209a:	40da      	lsrs	r2, r3
   3209c:	f856 3c04 	ldr.w	r3, [r6, #-4]
   320a0:	4013      	ands	r3, r2
   320a2:	f846 3c04 	str.w	r3, [r6, #-4]
   320a6:	e7d3      	b.n	32050 <__hexnan+0xd6>
   320a8:	3f04      	subs	r7, #4
   320aa:	e7d1      	b.n	32050 <__hexnan+0xd6>
   320ac:	2004      	movs	r0, #4
   320ae:	e7d6      	b.n	3205e <__hexnan+0xe4>

000320b0 <_getenv_r>:
   320b0:	b507      	push	{r0, r1, r2, lr}
   320b2:	aa01      	add	r2, sp, #4
   320b4:	f7f6 fb56 	bl	28764 <_findenv_r>
   320b8:	b003      	add	sp, #12
   320ba:	f85d fb04 	ldr.w	pc, [sp], #4

000320be <__ascii_mbtowc>:
   320be:	b082      	sub	sp, #8
   320c0:	b901      	cbnz	r1, 320c4 <__ascii_mbtowc+0x6>
   320c2:	a901      	add	r1, sp, #4
   320c4:	b142      	cbz	r2, 320d8 <__ascii_mbtowc+0x1a>
   320c6:	b14b      	cbz	r3, 320dc <__ascii_mbtowc+0x1e>
   320c8:	7813      	ldrb	r3, [r2, #0]
   320ca:	600b      	str	r3, [r1, #0]
   320cc:	7812      	ldrb	r2, [r2, #0]
   320ce:	1e10      	subs	r0, r2, #0
   320d0:	bf18      	it	ne
   320d2:	2001      	movne	r0, #1
   320d4:	b002      	add	sp, #8
   320d6:	4770      	bx	lr
   320d8:	4610      	mov	r0, r2
   320da:	e7fb      	b.n	320d4 <__ascii_mbtowc+0x16>
   320dc:	f06f 0001 	mvn.w	r0, #1
   320e0:	e7f8      	b.n	320d4 <__ascii_mbtowc+0x16>

000320e2 <memchr>:
   320e2:	b2c9      	uxtb	r1, r1
   320e4:	4603      	mov	r3, r0
   320e6:	4402      	add	r2, r0
   320e8:	b510      	push	{r4, lr}
   320ea:	4293      	cmp	r3, r2
   320ec:	4618      	mov	r0, r3
   320ee:	d101      	bne.n	320f4 <memchr+0x12>
   320f0:	2000      	movs	r0, #0
   320f2:	e003      	b.n	320fc <memchr+0x1a>
   320f4:	7804      	ldrb	r4, [r0, #0]
   320f6:	3301      	adds	r3, #1
   320f8:	428c      	cmp	r4, r1
   320fa:	d1f6      	bne.n	320ea <memchr+0x8>
   320fc:	bd10      	pop	{r4, pc}

000320fe <__hi0bits>:
   320fe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   32102:	4603      	mov	r3, r0
   32104:	bf36      	itet	cc
   32106:	0403      	lslcc	r3, r0, #16
   32108:	2000      	movcs	r0, #0
   3210a:	2010      	movcc	r0, #16
   3210c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   32110:	bf3c      	itt	cc
   32112:	021b      	lslcc	r3, r3, #8
   32114:	3008      	addcc	r0, #8
   32116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3211a:	bf3c      	itt	cc
   3211c:	011b      	lslcc	r3, r3, #4
   3211e:	3004      	addcc	r0, #4
   32120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   32124:	d303      	bcc.n	3212e <__hi0bits+0x30>
   32126:	2b00      	cmp	r3, #0
   32128:	db0a      	blt.n	32140 <__hi0bits+0x42>
   3212a:	3001      	adds	r0, #1
   3212c:	4770      	bx	lr
   3212e:	009b      	lsls	r3, r3, #2
   32130:	d501      	bpl.n	32136 <__hi0bits+0x38>
   32132:	3002      	adds	r0, #2
   32134:	4770      	bx	lr
   32136:	005b      	lsls	r3, r3, #1
   32138:	d501      	bpl.n	3213e <__hi0bits+0x40>
   3213a:	3003      	adds	r0, #3
   3213c:	4770      	bx	lr
   3213e:	2020      	movs	r0, #32
   32140:	4770      	bx	lr

00032142 <__lo0bits>:
   32142:	6803      	ldr	r3, [r0, #0]
   32144:	4602      	mov	r2, r0
   32146:	f013 0007 	ands.w	r0, r3, #7
   3214a:	d00b      	beq.n	32164 <__lo0bits+0x22>
   3214c:	07d9      	lsls	r1, r3, #31
   3214e:	d421      	bmi.n	32194 <__lo0bits+0x52>
   32150:	0798      	lsls	r0, r3, #30
   32152:	bf47      	ittee	mi
   32154:	085b      	lsrmi	r3, r3, #1
   32156:	2001      	movmi	r0, #1
   32158:	089b      	lsrpl	r3, r3, #2
   3215a:	2002      	movpl	r0, #2
   3215c:	bf4c      	ite	mi
   3215e:	6013      	strmi	r3, [r2, #0]
   32160:	6013      	strpl	r3, [r2, #0]
   32162:	4770      	bx	lr
   32164:	b299      	uxth	r1, r3
   32166:	b909      	cbnz	r1, 3216c <__lo0bits+0x2a>
   32168:	0c1b      	lsrs	r3, r3, #16
   3216a:	2010      	movs	r0, #16
   3216c:	b2d9      	uxtb	r1, r3
   3216e:	b909      	cbnz	r1, 32174 <__lo0bits+0x32>
   32170:	3008      	adds	r0, #8
   32172:	0a1b      	lsrs	r3, r3, #8
   32174:	0719      	lsls	r1, r3, #28
   32176:	bf04      	itt	eq
   32178:	091b      	lsreq	r3, r3, #4
   3217a:	3004      	addeq	r0, #4
   3217c:	0799      	lsls	r1, r3, #30
   3217e:	bf04      	itt	eq
   32180:	089b      	lsreq	r3, r3, #2
   32182:	3002      	addeq	r0, #2
   32184:	07d9      	lsls	r1, r3, #31
   32186:	d403      	bmi.n	32190 <__lo0bits+0x4e>
   32188:	085b      	lsrs	r3, r3, #1
   3218a:	f100 0001 	add.w	r0, r0, #1
   3218e:	d003      	beq.n	32198 <__lo0bits+0x56>
   32190:	6013      	str	r3, [r2, #0]
   32192:	4770      	bx	lr
   32194:	2000      	movs	r0, #0
   32196:	4770      	bx	lr
   32198:	2020      	movs	r0, #32
   3219a:	4770      	bx	lr

0003219c <__mcmp>:
   3219c:	4603      	mov	r3, r0
   3219e:	690a      	ldr	r2, [r1, #16]
   321a0:	6900      	ldr	r0, [r0, #16]
   321a2:	1a80      	subs	r0, r0, r2
   321a4:	b530      	push	{r4, r5, lr}
   321a6:	d10e      	bne.n	321c6 <__mcmp+0x2a>
   321a8:	3314      	adds	r3, #20
   321aa:	3114      	adds	r1, #20
   321ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   321b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   321b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   321b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   321bc:	4295      	cmp	r5, r2
   321be:	d003      	beq.n	321c8 <__mcmp+0x2c>
   321c0:	d205      	bcs.n	321ce <__mcmp+0x32>
   321c2:	f04f 30ff 	mov.w	r0, #4294967295
   321c6:	bd30      	pop	{r4, r5, pc}
   321c8:	42a3      	cmp	r3, r4
   321ca:	d3f3      	bcc.n	321b4 <__mcmp+0x18>
   321cc:	e7fb      	b.n	321c6 <__mcmp+0x2a>
   321ce:	2001      	movs	r0, #1
   321d0:	e7f9      	b.n	321c6 <__mcmp+0x2a>

000321d2 <__ratio>:
   321d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   321d6:	b085      	sub	sp, #20
   321d8:	e9cd 1000 	strd	r1, r0, [sp]
   321dc:	a902      	add	r1, sp, #8
   321de:	f7f6 fe41 	bl	28e64 <__b2d>
   321e2:	468b      	mov	fp, r1
   321e4:	4606      	mov	r6, r0
   321e6:	460f      	mov	r7, r1
   321e8:	9800      	ldr	r0, [sp, #0]
   321ea:	a903      	add	r1, sp, #12
   321ec:	f7f6 fe3a 	bl	28e64 <__b2d>
   321f0:	9b01      	ldr	r3, [sp, #4]
   321f2:	4689      	mov	r9, r1
   321f4:	460d      	mov	r5, r1
   321f6:	6919      	ldr	r1, [r3, #16]
   321f8:	4604      	mov	r4, r0
   321fa:	9b00      	ldr	r3, [sp, #0]
   321fc:	4630      	mov	r0, r6
   321fe:	691b      	ldr	r3, [r3, #16]
   32200:	1ac9      	subs	r1, r1, r3
   32202:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   32206:	1a9b      	subs	r3, r3, r2
   32208:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   3220c:	2b00      	cmp	r3, #0
   3220e:	bfdb      	ittet	le
   32210:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   32214:	462a      	movle	r2, r5
   32216:	463a      	movgt	r2, r7
   32218:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   3221c:	bfc8      	it	gt
   3221e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   32222:	4622      	mov	r2, r4
   32224:	464b      	mov	r3, r9
   32226:	4659      	mov	r1, fp
   32228:	f7d6 fa7c 	bl	8724 <__aeabi_ddiv>
   3222c:	b005      	add	sp, #20
   3222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00032232 <__copybits>:
   32232:	3901      	subs	r1, #1
   32234:	f102 0314 	add.w	r3, r2, #20
   32238:	1149      	asrs	r1, r1, #5
   3223a:	b570      	push	{r4, r5, r6, lr}
   3223c:	3101      	adds	r1, #1
   3223e:	6914      	ldr	r4, [r2, #16]
   32240:	1f05      	subs	r5, r0, #4
   32242:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   32246:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3224a:	42a3      	cmp	r3, r4
   3224c:	d30c      	bcc.n	32268 <__copybits+0x36>
   3224e:	1aa3      	subs	r3, r4, r2
   32250:	3211      	adds	r2, #17
   32252:	3b11      	subs	r3, #17
   32254:	f023 0303 	bic.w	r3, r3, #3
   32258:	42a2      	cmp	r2, r4
   3225a:	bf88      	it	hi
   3225c:	2300      	movhi	r3, #0
   3225e:	4418      	add	r0, r3
   32260:	2300      	movs	r3, #0
   32262:	4288      	cmp	r0, r1
   32264:	d305      	bcc.n	32272 <__copybits+0x40>
   32266:	bd70      	pop	{r4, r5, r6, pc}
   32268:	f853 6b04 	ldr.w	r6, [r3], #4
   3226c:	f845 6f04 	str.w	r6, [r5, #4]!
   32270:	e7eb      	b.n	3224a <__copybits+0x18>
   32272:	f840 3b04 	str.w	r3, [r0], #4
   32276:	e7f4      	b.n	32262 <__copybits+0x30>

00032278 <__any_on>:
   32278:	f100 0214 	add.w	r2, r0, #20
   3227c:	114b      	asrs	r3, r1, #5
   3227e:	6900      	ldr	r0, [r0, #16]
   32280:	4298      	cmp	r0, r3
   32282:	b510      	push	{r4, lr}
   32284:	db11      	blt.n	322aa <__any_on+0x32>
   32286:	dd0a      	ble.n	3229e <__any_on+0x26>
   32288:	f011 011f 	ands.w	r1, r1, #31
   3228c:	d007      	beq.n	3229e <__any_on+0x26>
   3228e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   32292:	fa24 f001 	lsr.w	r0, r4, r1
   32296:	fa00 f101 	lsl.w	r1, r0, r1
   3229a:	428c      	cmp	r4, r1
   3229c:	d10b      	bne.n	322b6 <__any_on+0x3e>
   3229e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   322a2:	4293      	cmp	r3, r2
   322a4:	d803      	bhi.n	322ae <__any_on+0x36>
   322a6:	2000      	movs	r0, #0
   322a8:	bd10      	pop	{r4, pc}
   322aa:	4603      	mov	r3, r0
   322ac:	e7f7      	b.n	3229e <__any_on+0x26>
   322ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   322b2:	2900      	cmp	r1, #0
   322b4:	d0f5      	beq.n	322a2 <__any_on+0x2a>
   322b6:	2001      	movs	r0, #1
   322b8:	e7f6      	b.n	322a8 <__any_on+0x30>

000322ba <__ssputs_r>:
   322ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   322be:	461f      	mov	r7, r3
   322c0:	688e      	ldr	r6, [r1, #8]
   322c2:	4682      	mov	sl, r0
   322c4:	460c      	mov	r4, r1
   322c6:	42be      	cmp	r6, r7
   322c8:	4690      	mov	r8, r2
   322ca:	680b      	ldr	r3, [r1, #0]
   322cc:	d82d      	bhi.n	3232a <__ssputs_r+0x70>
   322ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   322d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
   322d6:	d026      	beq.n	32326 <__ssputs_r+0x6c>
   322d8:	6965      	ldr	r5, [r4, #20]
   322da:	6909      	ldr	r1, [r1, #16]
   322dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   322e0:	eba3 0901 	sub.w	r9, r3, r1
   322e4:	1c7b      	adds	r3, r7, #1
   322e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   322ea:	444b      	add	r3, r9
   322ec:	106d      	asrs	r5, r5, #1
   322ee:	429d      	cmp	r5, r3
   322f0:	bf38      	it	cc
   322f2:	461d      	movcc	r5, r3
   322f4:	0553      	lsls	r3, r2, #21
   322f6:	d527      	bpl.n	32348 <__ssputs_r+0x8e>
   322f8:	4629      	mov	r1, r5
   322fa:	f7f4 ff73 	bl	271e4 <_malloc_r>
   322fe:	4606      	mov	r6, r0
   32300:	b360      	cbz	r0, 3235c <__ssputs_r+0xa2>
   32302:	464a      	mov	r2, r9
   32304:	6921      	ldr	r1, [r4, #16]
   32306:	f7ff fa92 	bl	3182e <memcpy>
   3230a:	89a3      	ldrh	r3, [r4, #12]
   3230c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   32310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   32314:	81a3      	strh	r3, [r4, #12]
   32316:	6126      	str	r6, [r4, #16]
   32318:	444e      	add	r6, r9
   3231a:	6165      	str	r5, [r4, #20]
   3231c:	eba5 0509 	sub.w	r5, r5, r9
   32320:	6026      	str	r6, [r4, #0]
   32322:	463e      	mov	r6, r7
   32324:	60a5      	str	r5, [r4, #8]
   32326:	42be      	cmp	r6, r7
   32328:	d900      	bls.n	3232c <__ssputs_r+0x72>
   3232a:	463e      	mov	r6, r7
   3232c:	4632      	mov	r2, r6
   3232e:	4641      	mov	r1, r8
   32330:	6820      	ldr	r0, [r4, #0]
   32332:	f7ff fa9c 	bl	3186e <memmove>
   32336:	68a3      	ldr	r3, [r4, #8]
   32338:	2000      	movs	r0, #0
   3233a:	1b9b      	subs	r3, r3, r6
   3233c:	60a3      	str	r3, [r4, #8]
   3233e:	6823      	ldr	r3, [r4, #0]
   32340:	4433      	add	r3, r6
   32342:	6023      	str	r3, [r4, #0]
   32344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32348:	462a      	mov	r2, r5
   3234a:	f000 f935 	bl	325b8 <_realloc_r>
   3234e:	4606      	mov	r6, r0
   32350:	2800      	cmp	r0, #0
   32352:	d1e0      	bne.n	32316 <__ssputs_r+0x5c>
   32354:	6921      	ldr	r1, [r4, #16]
   32356:	4650      	mov	r0, sl
   32358:	f7f4 fefa 	bl	27150 <_free_r>
   3235c:	230c      	movs	r3, #12
   3235e:	f04f 30ff 	mov.w	r0, #4294967295
   32362:	f8ca 3000 	str.w	r3, [sl]
   32366:	89a3      	ldrh	r3, [r4, #12]
   32368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3236c:	81a3      	strh	r3, [r4, #12]
   3236e:	e7e9      	b.n	32344 <__ssputs_r+0x8a>

00032370 <__sfputc_r>:
   32370:	6893      	ldr	r3, [r2, #8]
   32372:	3b01      	subs	r3, #1
   32374:	2b00      	cmp	r3, #0
   32376:	6093      	str	r3, [r2, #8]
   32378:	b410      	push	{r4}
   3237a:	da07      	bge.n	3238c <__sfputc_r+0x1c>
   3237c:	6994      	ldr	r4, [r2, #24]
   3237e:	42a3      	cmp	r3, r4
   32380:	db01      	blt.n	32386 <__sfputc_r+0x16>
   32382:	290a      	cmp	r1, #10
   32384:	d102      	bne.n	3238c <__sfputc_r+0x1c>
   32386:	bc10      	pop	{r4}
   32388:	f7f7 b860 	b.w	2944c <__swbuf_r>
   3238c:	6813      	ldr	r3, [r2, #0]
   3238e:	1c58      	adds	r0, r3, #1
   32390:	6010      	str	r0, [r2, #0]
   32392:	4608      	mov	r0, r1
   32394:	7019      	strb	r1, [r3, #0]
   32396:	bc10      	pop	{r4}
   32398:	4770      	bx	lr

0003239a <__sfputs_r>:
   3239a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3239c:	4606      	mov	r6, r0
   3239e:	460f      	mov	r7, r1
   323a0:	4614      	mov	r4, r2
   323a2:	18d5      	adds	r5, r2, r3
   323a4:	42ac      	cmp	r4, r5
   323a6:	d101      	bne.n	323ac <__sfputs_r+0x12>
   323a8:	2000      	movs	r0, #0
   323aa:	e007      	b.n	323bc <__sfputs_r+0x22>
   323ac:	463a      	mov	r2, r7
   323ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   323b2:	4630      	mov	r0, r6
   323b4:	f7ff ffdc 	bl	32370 <__sfputc_r>
   323b8:	1c43      	adds	r3, r0, #1
   323ba:	d1f3      	bne.n	323a4 <__sfputs_r+0xa>
   323bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000323be <__sread>:
   323be:	b510      	push	{r4, lr}
   323c0:	460c      	mov	r4, r1
   323c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   323c6:	f7f7 fc8b 	bl	29ce0 <_read_r>
   323ca:	2800      	cmp	r0, #0
   323cc:	bfab      	itete	ge
   323ce:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   323d0:	89a3      	ldrhlt	r3, [r4, #12]
   323d2:	181b      	addge	r3, r3, r0
   323d4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   323d8:	bfac      	ite	ge
   323da:	6563      	strge	r3, [r4, #84]	; 0x54
   323dc:	81a3      	strhlt	r3, [r4, #12]
   323de:	bd10      	pop	{r4, pc}

000323e0 <__seofread>:
   323e0:	2000      	movs	r0, #0
   323e2:	4770      	bx	lr

000323e4 <__swrite>:
   323e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   323e8:	461f      	mov	r7, r3
   323ea:	898b      	ldrh	r3, [r1, #12]
   323ec:	4605      	mov	r5, r0
   323ee:	460c      	mov	r4, r1
   323f0:	05db      	lsls	r3, r3, #23
   323f2:	4616      	mov	r6, r2
   323f4:	d505      	bpl.n	32402 <__swrite+0x1e>
   323f6:	2302      	movs	r3, #2
   323f8:	2200      	movs	r2, #0
   323fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   323fe:	f7f7 f94d 	bl	2969c <_lseek_r>
   32402:	89a3      	ldrh	r3, [r4, #12]
   32404:	4632      	mov	r2, r6
   32406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3240a:	4628      	mov	r0, r5
   3240c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   32410:	81a3      	strh	r3, [r4, #12]
   32412:	463b      	mov	r3, r7
   32414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   32418:	f7f7 b86a 	b.w	294f0 <_write_r>

0003241c <__sseek>:
   3241c:	b510      	push	{r4, lr}
   3241e:	460c      	mov	r4, r1
   32420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32424:	f7f7 f93a 	bl	2969c <_lseek_r>
   32428:	1c43      	adds	r3, r0, #1
   3242a:	89a3      	ldrh	r3, [r4, #12]
   3242c:	bf15      	itete	ne
   3242e:	6560      	strne	r0, [r4, #84]	; 0x54
   32430:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   32434:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   32438:	81a3      	strheq	r3, [r4, #12]
   3243a:	bf18      	it	ne
   3243c:	81a3      	strhne	r3, [r4, #12]
   3243e:	bd10      	pop	{r4, pc}

00032440 <__sclose>:
   32440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32444:	f7f7 b8d2 	b.w	295ec <_close_r>

00032448 <__ascii_wctomb>:
   32448:	4603      	mov	r3, r0
   3244a:	4608      	mov	r0, r1
   3244c:	b141      	cbz	r1, 32460 <__ascii_wctomb+0x18>
   3244e:	2aff      	cmp	r2, #255	; 0xff
   32450:	d904      	bls.n	3245c <__ascii_wctomb+0x14>
   32452:	228a      	movs	r2, #138	; 0x8a
   32454:	f04f 30ff 	mov.w	r0, #4294967295
   32458:	601a      	str	r2, [r3, #0]
   3245a:	4770      	bx	lr
   3245c:	2001      	movs	r0, #1
   3245e:	700a      	strb	r2, [r1, #0]
   32460:	4770      	bx	lr

00032462 <abort>:
   32462:	2006      	movs	r0, #6
   32464:	b508      	push	{r3, lr}
   32466:	f7f7 fc4d 	bl	29d04 <raise>
   3246a:	2001      	movs	r0, #1
   3246c:	f7df fd16 	bl	11e9c <_exit>

00032470 <__sflush_r>:
   32470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   32474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32476:	0717      	lsls	r7, r2, #28
   32478:	4605      	mov	r5, r0
   3247a:	460c      	mov	r4, r1
   3247c:	d456      	bmi.n	3252c <__sflush_r+0xbc>
   3247e:	684b      	ldr	r3, [r1, #4]
   32480:	2b00      	cmp	r3, #0
   32482:	dc02      	bgt.n	3248a <__sflush_r+0x1a>
   32484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   32486:	2b00      	cmp	r3, #0
   32488:	dd3d      	ble.n	32506 <__sflush_r+0x96>
   3248a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3248c:	2e00      	cmp	r6, #0
   3248e:	d03a      	beq.n	32506 <__sflush_r+0x96>
   32490:	2300      	movs	r3, #0
   32492:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   32496:	682f      	ldr	r7, [r5, #0]
   32498:	6a21      	ldr	r1, [r4, #32]
   3249a:	602b      	str	r3, [r5, #0]
   3249c:	d025      	beq.n	324ea <__sflush_r+0x7a>
   3249e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   324a0:	89a3      	ldrh	r3, [r4, #12]
   324a2:	0758      	lsls	r0, r3, #29
   324a4:	d505      	bpl.n	324b2 <__sflush_r+0x42>
   324a6:	6863      	ldr	r3, [r4, #4]
   324a8:	1ad2      	subs	r2, r2, r3
   324aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   324ac:	b10b      	cbz	r3, 324b2 <__sflush_r+0x42>
   324ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
   324b0:	1ad2      	subs	r2, r2, r3
   324b2:	6a21      	ldr	r1, [r4, #32]
   324b4:	2300      	movs	r3, #0
   324b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   324b8:	4628      	mov	r0, r5
   324ba:	47b0      	blx	r6
   324bc:	1c41      	adds	r1, r0, #1
   324be:	d024      	beq.n	3250a <__sflush_r+0x9a>
   324c0:	2300      	movs	r3, #0
   324c2:	6063      	str	r3, [r4, #4]
   324c4:	6923      	ldr	r3, [r4, #16]
   324c6:	6023      	str	r3, [r4, #0]
   324c8:	89a3      	ldrh	r3, [r4, #12]
   324ca:	04da      	lsls	r2, r3, #19
   324cc:	d500      	bpl.n	324d0 <__sflush_r+0x60>
   324ce:	6560      	str	r0, [r4, #84]	; 0x54
   324d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   324d2:	602f      	str	r7, [r5, #0]
   324d4:	b1b9      	cbz	r1, 32506 <__sflush_r+0x96>
   324d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   324da:	4299      	cmp	r1, r3
   324dc:	d002      	beq.n	324e4 <__sflush_r+0x74>
   324de:	4628      	mov	r0, r5
   324e0:	f7f4 fe36 	bl	27150 <_free_r>
   324e4:	2300      	movs	r3, #0
   324e6:	6363      	str	r3, [r4, #52]	; 0x34
   324e8:	e00d      	b.n	32506 <__sflush_r+0x96>
   324ea:	2301      	movs	r3, #1
   324ec:	4628      	mov	r0, r5
   324ee:	47b0      	blx	r6
   324f0:	1c46      	adds	r6, r0, #1
   324f2:	4602      	mov	r2, r0
   324f4:	d1d4      	bne.n	324a0 <__sflush_r+0x30>
   324f6:	682b      	ldr	r3, [r5, #0]
   324f8:	2b00      	cmp	r3, #0
   324fa:	d0d1      	beq.n	324a0 <__sflush_r+0x30>
   324fc:	2b1d      	cmp	r3, #29
   324fe:	d001      	beq.n	32504 <__sflush_r+0x94>
   32500:	2b16      	cmp	r3, #22
   32502:	d129      	bne.n	32558 <__sflush_r+0xe8>
   32504:	602f      	str	r7, [r5, #0]
   32506:	2000      	movs	r0, #0
   32508:	e02d      	b.n	32566 <__sflush_r+0xf6>
   3250a:	682a      	ldr	r2, [r5, #0]
   3250c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   32510:	b142      	cbz	r2, 32524 <__sflush_r+0xb4>
   32512:	2a1d      	cmp	r2, #29
   32514:	d001      	beq.n	3251a <__sflush_r+0xaa>
   32516:	2a16      	cmp	r2, #22
   32518:	d120      	bne.n	3255c <__sflush_r+0xec>
   3251a:	2300      	movs	r3, #0
   3251c:	6063      	str	r3, [r4, #4]
   3251e:	6923      	ldr	r3, [r4, #16]
   32520:	6023      	str	r3, [r4, #0]
   32522:	e7d5      	b.n	324d0 <__sflush_r+0x60>
   32524:	6062      	str	r2, [r4, #4]
   32526:	6922      	ldr	r2, [r4, #16]
   32528:	6022      	str	r2, [r4, #0]
   3252a:	e7ce      	b.n	324ca <__sflush_r+0x5a>
   3252c:	690f      	ldr	r7, [r1, #16]
   3252e:	2f00      	cmp	r7, #0
   32530:	d0e9      	beq.n	32506 <__sflush_r+0x96>
   32532:	0793      	lsls	r3, r2, #30
   32534:	680e      	ldr	r6, [r1, #0]
   32536:	600f      	str	r7, [r1, #0]
   32538:	bf0c      	ite	eq
   3253a:	694b      	ldreq	r3, [r1, #20]
   3253c:	2300      	movne	r3, #0
   3253e:	1bf6      	subs	r6, r6, r7
   32540:	608b      	str	r3, [r1, #8]
   32542:	2e00      	cmp	r6, #0
   32544:	dddf      	ble.n	32506 <__sflush_r+0x96>
   32546:	4633      	mov	r3, r6
   32548:	463a      	mov	r2, r7
   3254a:	6a21      	ldr	r1, [r4, #32]
   3254c:	4628      	mov	r0, r5
   3254e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   32552:	47e0      	blx	ip
   32554:	2800      	cmp	r0, #0
   32556:	dc07      	bgt.n	32568 <__sflush_r+0xf8>
   32558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3255c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   32560:	f04f 30ff 	mov.w	r0, #4294967295
   32564:	81a3      	strh	r3, [r4, #12]
   32566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32568:	4407      	add	r7, r0
   3256a:	1a36      	subs	r6, r6, r0
   3256c:	e7e9      	b.n	32542 <__sflush_r+0xd2>

0003256e <__swhatbuf_r>:
   3256e:	b570      	push	{r4, r5, r6, lr}
   32570:	460c      	mov	r4, r1
   32572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32576:	b096      	sub	sp, #88	; 0x58
   32578:	4615      	mov	r5, r2
   3257a:	2900      	cmp	r1, #0
   3257c:	461e      	mov	r6, r3
   3257e:	da0c      	bge.n	3259a <__swhatbuf_r+0x2c>
   32580:	89a3      	ldrh	r3, [r4, #12]
   32582:	2100      	movs	r1, #0
   32584:	f013 0f80 	tst.w	r3, #128	; 0x80
   32588:	bf14      	ite	ne
   3258a:	2340      	movne	r3, #64	; 0x40
   3258c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   32590:	2000      	movs	r0, #0
   32592:	6031      	str	r1, [r6, #0]
   32594:	602b      	str	r3, [r5, #0]
   32596:	b016      	add	sp, #88	; 0x58
   32598:	bd70      	pop	{r4, r5, r6, pc}
   3259a:	466a      	mov	r2, sp
   3259c:	f7f7 fbcc 	bl	29d38 <_fstat_r>
   325a0:	2800      	cmp	r0, #0
   325a2:	dbed      	blt.n	32580 <__swhatbuf_r+0x12>
   325a4:	9901      	ldr	r1, [sp, #4]
   325a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   325aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   325ae:	4259      	negs	r1, r3
   325b0:	4159      	adcs	r1, r3
   325b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   325b6:	e7eb      	b.n	32590 <__swhatbuf_r+0x22>

000325b8 <_realloc_r>:
   325b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   325ba:	4607      	mov	r7, r0
   325bc:	4615      	mov	r5, r2
   325be:	460c      	mov	r4, r1
   325c0:	b921      	cbnz	r1, 325cc <_realloc_r+0x14>
   325c2:	4611      	mov	r1, r2
   325c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   325c8:	f7f4 be0c 	b.w	271e4 <_malloc_r>
   325cc:	b922      	cbnz	r2, 325d8 <_realloc_r+0x20>
   325ce:	f7f4 fdbf 	bl	27150 <_free_r>
   325d2:	2400      	movs	r4, #0
   325d4:	4620      	mov	r0, r4
   325d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   325d8:	f000 f905 	bl	327e6 <_malloc_usable_size_r>
   325dc:	42a8      	cmp	r0, r5
   325de:	d2f9      	bcs.n	325d4 <_realloc_r+0x1c>
   325e0:	4629      	mov	r1, r5
   325e2:	4638      	mov	r0, r7
   325e4:	f7f4 fdfe 	bl	271e4 <_malloc_r>
   325e8:	4606      	mov	r6, r0
   325ea:	2800      	cmp	r0, #0
   325ec:	d0f1      	beq.n	325d2 <_realloc_r+0x1a>
   325ee:	4621      	mov	r1, r4
   325f0:	462a      	mov	r2, r5
   325f2:	f7ff f91c 	bl	3182e <memcpy>
   325f6:	4621      	mov	r1, r4
   325f8:	4638      	mov	r0, r7
   325fa:	4634      	mov	r4, r6
   325fc:	f7f4 fda8 	bl	27150 <_free_r>
   32600:	e7e8      	b.n	325d4 <_realloc_r+0x1c>

00032602 <_sungetc_r>:
   32602:	b538      	push	{r3, r4, r5, lr}
   32604:	1c4b      	adds	r3, r1, #1
   32606:	4614      	mov	r4, r2
   32608:	d103      	bne.n	32612 <_sungetc_r+0x10>
   3260a:	f04f 35ff 	mov.w	r5, #4294967295
   3260e:	4628      	mov	r0, r5
   32610:	bd38      	pop	{r3, r4, r5, pc}
   32612:	8993      	ldrh	r3, [r2, #12]
   32614:	b2cd      	uxtb	r5, r1
   32616:	f023 0320 	bic.w	r3, r3, #32
   3261a:	8193      	strh	r3, [r2, #12]
   3261c:	6853      	ldr	r3, [r2, #4]
   3261e:	6b52      	ldr	r2, [r2, #52]	; 0x34
   32620:	b18a      	cbz	r2, 32646 <_sungetc_r+0x44>
   32622:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   32624:	429a      	cmp	r2, r3
   32626:	dd08      	ble.n	3263a <_sungetc_r+0x38>
   32628:	6823      	ldr	r3, [r4, #0]
   3262a:	1e5a      	subs	r2, r3, #1
   3262c:	6022      	str	r2, [r4, #0]
   3262e:	f803 5c01 	strb.w	r5, [r3, #-1]
   32632:	6863      	ldr	r3, [r4, #4]
   32634:	3301      	adds	r3, #1
   32636:	6063      	str	r3, [r4, #4]
   32638:	e7e9      	b.n	3260e <_sungetc_r+0xc>
   3263a:	4621      	mov	r1, r4
   3263c:	f000 f89c 	bl	32778 <__submore>
   32640:	2800      	cmp	r0, #0
   32642:	d0f1      	beq.n	32628 <_sungetc_r+0x26>
   32644:	e7e1      	b.n	3260a <_sungetc_r+0x8>
   32646:	6921      	ldr	r1, [r4, #16]
   32648:	6822      	ldr	r2, [r4, #0]
   3264a:	b141      	cbz	r1, 3265e <_sungetc_r+0x5c>
   3264c:	4291      	cmp	r1, r2
   3264e:	d206      	bcs.n	3265e <_sungetc_r+0x5c>
   32650:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   32654:	42a9      	cmp	r1, r5
   32656:	d102      	bne.n	3265e <_sungetc_r+0x5c>
   32658:	3a01      	subs	r2, #1
   3265a:	6022      	str	r2, [r4, #0]
   3265c:	e7ea      	b.n	32634 <_sungetc_r+0x32>
   3265e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   32662:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32666:	6363      	str	r3, [r4, #52]	; 0x34
   32668:	2303      	movs	r3, #3
   3266a:	63a3      	str	r3, [r4, #56]	; 0x38
   3266c:	4623      	mov	r3, r4
   3266e:	f803 5f46 	strb.w	r5, [r3, #70]!
   32672:	6023      	str	r3, [r4, #0]
   32674:	2301      	movs	r3, #1
   32676:	e7de      	b.n	32636 <_sungetc_r+0x34>

00032678 <__ssrefill_r>:
   32678:	b510      	push	{r4, lr}
   3267a:	460c      	mov	r4, r1
   3267c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3267e:	b169      	cbz	r1, 3269c <__ssrefill_r+0x24>
   32680:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32684:	4299      	cmp	r1, r3
   32686:	d001      	beq.n	3268c <__ssrefill_r+0x14>
   32688:	f7f4 fd62 	bl	27150 <_free_r>
   3268c:	2000      	movs	r0, #0
   3268e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   32690:	6360      	str	r0, [r4, #52]	; 0x34
   32692:	6063      	str	r3, [r4, #4]
   32694:	b113      	cbz	r3, 3269c <__ssrefill_r+0x24>
   32696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   32698:	6023      	str	r3, [r4, #0]
   3269a:	bd10      	pop	{r4, pc}
   3269c:	6923      	ldr	r3, [r4, #16]
   3269e:	f04f 30ff 	mov.w	r0, #4294967295
   326a2:	6023      	str	r3, [r4, #0]
   326a4:	2300      	movs	r3, #0
   326a6:	6063      	str	r3, [r4, #4]
   326a8:	89a3      	ldrh	r3, [r4, #12]
   326aa:	f043 0320 	orr.w	r3, r3, #32
   326ae:	81a3      	strh	r3, [r4, #12]
   326b0:	e7f3      	b.n	3269a <__ssrefill_r+0x22>

000326b2 <__sccl>:
   326b2:	b570      	push	{r4, r5, r6, lr}
   326b4:	780b      	ldrb	r3, [r1, #0]
   326b6:	4604      	mov	r4, r0
   326b8:	3801      	subs	r0, #1
   326ba:	2b5e      	cmp	r3, #94	; 0x5e
   326bc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   326c0:	bf13      	iteet	ne
   326c2:	1c4a      	addne	r2, r1, #1
   326c4:	1c8a      	addeq	r2, r1, #2
   326c6:	784b      	ldrbeq	r3, [r1, #1]
   326c8:	2100      	movne	r1, #0
   326ca:	bf08      	it	eq
   326cc:	2101      	moveq	r1, #1
   326ce:	f800 1f01 	strb.w	r1, [r0, #1]!
   326d2:	42a8      	cmp	r0, r5
   326d4:	d1fb      	bne.n	326ce <__sccl+0x1c>
   326d6:	b90b      	cbnz	r3, 326dc <__sccl+0x2a>
   326d8:	1e50      	subs	r0, r2, #1
   326da:	bd70      	pop	{r4, r5, r6, pc}
   326dc:	f081 0101 	eor.w	r1, r1, #1
   326e0:	4610      	mov	r0, r2
   326e2:	54e1      	strb	r1, [r4, r3]
   326e4:	4602      	mov	r2, r0
   326e6:	f812 5b01 	ldrb.w	r5, [r2], #1
   326ea:	2d2d      	cmp	r5, #45	; 0x2d
   326ec:	d005      	beq.n	326fa <__sccl+0x48>
   326ee:	2d5d      	cmp	r5, #93	; 0x5d
   326f0:	d016      	beq.n	32720 <__sccl+0x6e>
   326f2:	2d00      	cmp	r5, #0
   326f4:	d0f1      	beq.n	326da <__sccl+0x28>
   326f6:	462b      	mov	r3, r5
   326f8:	e7f2      	b.n	326e0 <__sccl+0x2e>
   326fa:	7846      	ldrb	r6, [r0, #1]
   326fc:	2e5d      	cmp	r6, #93	; 0x5d
   326fe:	d0fa      	beq.n	326f6 <__sccl+0x44>
   32700:	42b3      	cmp	r3, r6
   32702:	dcf8      	bgt.n	326f6 <__sccl+0x44>
   32704:	3002      	adds	r0, #2
   32706:	461a      	mov	r2, r3
   32708:	3201      	adds	r2, #1
   3270a:	4296      	cmp	r6, r2
   3270c:	54a1      	strb	r1, [r4, r2]
   3270e:	dcfb      	bgt.n	32708 <__sccl+0x56>
   32710:	1af2      	subs	r2, r6, r3
   32712:	1c5d      	adds	r5, r3, #1
   32714:	3a01      	subs	r2, #1
   32716:	42b3      	cmp	r3, r6
   32718:	bfa8      	it	ge
   3271a:	2200      	movge	r2, #0
   3271c:	18ab      	adds	r3, r5, r2
   3271e:	e7e1      	b.n	326e4 <__sccl+0x32>
   32720:	4610      	mov	r0, r2
   32722:	e7da      	b.n	326da <__sccl+0x28>

00032724 <_raise_r>:
   32724:	291f      	cmp	r1, #31
   32726:	b538      	push	{r3, r4, r5, lr}
   32728:	4605      	mov	r5, r0
   3272a:	460c      	mov	r4, r1
   3272c:	d904      	bls.n	32738 <_raise_r+0x14>
   3272e:	2316      	movs	r3, #22
   32730:	6003      	str	r3, [r0, #0]
   32732:	f04f 30ff 	mov.w	r0, #4294967295
   32736:	bd38      	pop	{r3, r4, r5, pc}
   32738:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3273a:	b112      	cbz	r2, 32742 <_raise_r+0x1e>
   3273c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   32740:	b94b      	cbnz	r3, 32756 <_raise_r+0x32>
   32742:	4628      	mov	r0, r5
   32744:	f000 f816 	bl	32774 <_getpid_r>
   32748:	4622      	mov	r2, r4
   3274a:	4601      	mov	r1, r0
   3274c:	4628      	mov	r0, r5
   3274e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   32752:	f7f7 badf 	b.w	29d14 <_kill_r>
   32756:	2b01      	cmp	r3, #1
   32758:	d00a      	beq.n	32770 <_raise_r+0x4c>
   3275a:	1c59      	adds	r1, r3, #1
   3275c:	d103      	bne.n	32766 <_raise_r+0x42>
   3275e:	2316      	movs	r3, #22
   32760:	6003      	str	r3, [r0, #0]
   32762:	2001      	movs	r0, #1
   32764:	e7e7      	b.n	32736 <_raise_r+0x12>
   32766:	2100      	movs	r1, #0
   32768:	4620      	mov	r0, r4
   3276a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   3276e:	4798      	blx	r3
   32770:	2000      	movs	r0, #0
   32772:	e7e0      	b.n	32736 <_raise_r+0x12>

00032774 <_getpid_r>:
   32774:	f7f9 b918 	b.w	2b9a8 <_getpid>

00032778 <__submore>:
   32778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3277c:	460c      	mov	r4, r1
   3277e:	6b49      	ldr	r1, [r1, #52]	; 0x34
   32780:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32784:	4299      	cmp	r1, r3
   32786:	d11a      	bne.n	327be <__submore+0x46>
   32788:	f44f 6180 	mov.w	r1, #1024	; 0x400
   3278c:	f7f4 fd2a 	bl	271e4 <_malloc_r>
   32790:	b918      	cbnz	r0, 3279a <__submore+0x22>
   32792:	f04f 30ff 	mov.w	r0, #4294967295
   32796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3279a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3279e:	6360      	str	r0, [r4, #52]	; 0x34
   327a0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   327a4:	63a3      	str	r3, [r4, #56]	; 0x38
   327a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   327aa:	7083      	strb	r3, [r0, #2]
   327ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   327b0:	7043      	strb	r3, [r0, #1]
   327b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   327b6:	7003      	strb	r3, [r0, #0]
   327b8:	6020      	str	r0, [r4, #0]
   327ba:	2000      	movs	r0, #0
   327bc:	e7eb      	b.n	32796 <__submore+0x1e>
   327be:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   327c0:	0077      	lsls	r7, r6, #1
   327c2:	463a      	mov	r2, r7
   327c4:	f7ff fef8 	bl	325b8 <_realloc_r>
   327c8:	4605      	mov	r5, r0
   327ca:	2800      	cmp	r0, #0
   327cc:	d0e1      	beq.n	32792 <__submore+0x1a>
   327ce:	eb00 0806 	add.w	r8, r0, r6
   327d2:	4601      	mov	r1, r0
   327d4:	4632      	mov	r2, r6
   327d6:	4640      	mov	r0, r8
   327d8:	f7ff f829 	bl	3182e <memcpy>
   327dc:	f8c4 8000 	str.w	r8, [r4]
   327e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   327e4:	e7e9      	b.n	327ba <__submore+0x42>

000327e6 <_malloc_usable_size_r>:
   327e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   327ea:	1f18      	subs	r0, r3, #4
   327ec:	2b00      	cmp	r3, #0
   327ee:	bfbc      	itt	lt
   327f0:	580b      	ldrlt	r3, [r1, r0]
   327f2:	18c0      	addlt	r0, r0, r3
   327f4:	4770      	bx	lr
	...
